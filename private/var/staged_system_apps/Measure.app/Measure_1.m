_QWORD *sub_100087BCC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(char *, uint64_t, uint64_t);
  int v38;
  int v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  int v92;
  _QWORD *v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int (*v103)(char *, uint64_t, uint64_t);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t (*v115)(char *, uint64_t, uint64_t);
  int v116;
  int v117;
  uint64_t v118;
  void (*v119)(char *, char *, uint64_t);
  uint64_t v120;
  void (*v121)(char *, char *, uint64_t);
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  uint64_t v169;
  void (*v170)(char *, char *, uint64_t);
  uint64_t v171;
  void (*v172)(char *, char *, uint64_t);
  uint64_t v173;
  __int128 v174;
  __int128 v175;
  uint64_t v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  uint64_t v180;
  __int128 v181;
  uint64_t v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  __int128 v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  uint64_t v202;
  uint64_t v203;
  __int128 v204;
  __int128 v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  __int128 v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  __int128 v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  __int128 v224;
  uint64_t v225;
  uint64_t v226;
  __int16 v227;
  uint64_t v228;
  __int128 v229;
  uint64_t v230;
  int v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  __int16 v246;
  uint64_t v247;
  uint64_t v248;
  int v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  __int16 v255;
  __int16 v256;
  uint64_t v257;
  uint64_t v258;
  int v259;
  int v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  __int128 v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  __int128 v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  __int128 v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  __int128 v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  __int128 v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  __int128 v500;
  uint64_t v501;
  uint64_t v502;
  __int128 v503;
  uint64_t v504;
  uint64_t v505;
  __int128 v506;
  uint64_t v507;
  uint64_t v508;
  __int128 v509;
  uint64_t v510;
  uint64_t v511;
  __int128 v512;
  uint64_t v513;
  uint64_t v514;
  __int128 v515;
  uint64_t v516;
  uint64_t v517;
  __int128 v518;
  uint64_t v519;
  uint64_t v520;
  __int128 v521;
  uint64_t v522;
  uint64_t v523;
  __int128 v524;
  uint64_t v525;
  uint64_t v526;
  __int128 v527;
  uint64_t v528;
  uint64_t v529;
  __int128 v530;
  uint64_t v531;
  uint64_t v532;
  __int128 v533;
  uint64_t v534;
  uint64_t v535;
  __int128 v536;
  uint64_t v537;
  uint64_t v538;
  __int128 v539;
  uint64_t v540;
  uint64_t v541;
  __int128 v542;
  uint64_t v543;
  uint64_t v544;
  __int128 v545;
  uint64_t v546;
  uint64_t v547;
  __int128 v548;
  uint64_t v549;
  uint64_t v550;
  __int128 v551;
  uint64_t v552;
  uint64_t v553;
  __int128 v554;
  uint64_t v555;
  uint64_t v556;
  __int128 v557;
  _QWORD *v558;
  _QWORD *v559;
  uint64_t v560;
  uint64_t v561;
  __int128 v562;
  _QWORD *v563;
  _QWORD *v564;
  uint64_t v565;
  uint64_t v566;
  __int128 v567;
  uint64_t (*v568)(void);
  uint64_t (*v569)(void);
  uint64_t v570;
  uint64_t v571;
  __int128 v572;
  uint64_t v573;
  uint64_t v574;
  _QWORD *v575;
  _QWORD *v576;
  _QWORD *v577;
  _QWORD *v578;
  _QWORD *v579;
  _QWORD *v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  __int128 v585;
  _QWORD *v586;
  _QWORD *v587;
  _QWORD *v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;

  v4 = a2;
  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (_QWORD *)((char *)a1 + v8);
  v10 = (_QWORD *)((char *)v4 + v8);
  v11 = type metadata accessor for MeasurementHistoryItem(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(void))(v12 + 48);
  v14 = v9;
  LODWORD(v9) = ((uint64_t (*)(_QWORD *, uint64_t, uint64_t))v13)(v9, 1, v11);
  v15 = v10;
  v16 = ((uint64_t (*)(_QWORD *, uint64_t, uint64_t))v13)(v10, 1, v11);
  if ((_DWORD)v9)
  {
    if (!v16)
    {
      v568 = v13;
      v573 = a3;
      v577 = v4;
      v581 = v12;
      *v14 = *v10;
      v17 = v10[1];
      v14[1] = v17;
      v14[2] = v10[2];
      v18 = v11;
      v19 = v10[3];
      v14[3] = v19;
      v586 = a1;
      v589 = v18;
      v20 = *(int *)(v18 + 24);
      v21 = (char *)v14 + v20;
      v22 = (char *)v10 + v20;
      v23 = type metadata accessor for MeasurementCapture(0);
      v24 = *(_QWORD *)(v23 - 8);
      v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v19);
      if (v25(v22, 1, v23))
      {
        v26 = sub_10000EDC8((uint64_t *)&unk_1004862E0);
        memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
      }
      else
      {
        v42 = type metadata accessor for URL(0);
        v43 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 16);
        v43(v21, v22, v42);
        v43(&v21[*(int *)(v23 + 20)], &v22[*(int *)(v23 + 20)], v42);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      }
      v44 = *(int *)(v589 + 28);
      v558 = v14;
      v45 = (char *)v14 + v44;
      v563 = v15;
      v46 = (char *)v15 + v44;
      v552 = *((_QWORD *)v46 + 9);
      v546 = *((_QWORD *)v46 + 10);
      v540 = *((_QWORD *)v46 + 11);
      v534 = *((_QWORD *)v46 + 12);
      v528 = *((_QWORD *)v46 + 13);
      v522 = *((_QWORD *)v46 + 14);
      v516 = *((_QWORD *)v46 + 15);
      v510 = *((_QWORD *)v46 + 16);
      v504 = *((_QWORD *)v46 + 17);
      v498 = *((_QWORD *)v46 + 18);
      v493 = *((_QWORD *)v46 + 19);
      v488 = *((_QWORD *)v46 + 20);
      v483 = *((_QWORD *)v46 + 21);
      v478 = *((_QWORD *)v46 + 22);
      v473 = *((_QWORD *)v46 + 23);
      v469 = *((_QWORD *)v46 + 24);
      v465 = *((_QWORD *)v46 + 25);
      v461 = *((_QWORD *)v46 + 26);
      v457 = *((_QWORD *)v46 + 27);
      v453 = *((_QWORD *)v46 + 28);
      v449 = *((_QWORD *)v46 + 29);
      v445 = *((_QWORD *)v46 + 30);
      v441 = *((_QWORD *)v46 + 31);
      v437 = *((_QWORD *)v46 + 32);
      v433 = *((_QWORD *)v46 + 33);
      v429 = *((_QWORD *)v46 + 34);
      v425 = *((_QWORD *)v46 + 35);
      v421 = *((_QWORD *)v46 + 36);
      v417 = *((_QWORD *)v46 + 37);
      v413 = *((_QWORD *)v46 + 38);
      v409 = *((_QWORD *)v46 + 39);
      v405 = *((_QWORD *)v46 + 40);
      v401 = *((_QWORD *)v46 + 41);
      v397 = *((_QWORD *)v46 + 42);
      v393 = *((_QWORD *)v46 + 43);
      v389 = *((_QWORD *)v46 + 44);
      v385 = *((_QWORD *)v46 + 45);
      v381 = *((_QWORD *)v46 + 46);
      v377 = *((_QWORD *)v46 + 47);
      v373 = *((_QWORD *)v46 + 48);
      v369 = *((_QWORD *)v46 + 49);
      v365 = *((_QWORD *)v46 + 50);
      v361 = *((_QWORD *)v46 + 51);
      v357 = *((_QWORD *)v46 + 52);
      v353 = *((_QWORD *)v46 + 53);
      v349 = *((_QWORD *)v46 + 54);
      v345 = *((_QWORD *)v46 + 55);
      v341 = *((_QWORD *)v46 + 56);
      v337 = *((_QWORD *)v46 + 57);
      v333 = *((_QWORD *)v46 + 58);
      v329 = *((_QWORD *)v46 + 59);
      v325 = *((_QWORD *)v46 + 60);
      v321 = *((_QWORD *)v46 + 61);
      v317 = *((_QWORD *)v46 + 62);
      v313 = *((_QWORD *)v46 + 63);
      v309 = *((_QWORD *)v46 + 64);
      v305 = *((_QWORD *)v46 + 65);
      v301 = *((_QWORD *)v46 + 66);
      v297 = *((_QWORD *)v46 + 67);
      v293 = *((_QWORD *)v46 + 68);
      v289 = *((_QWORD *)v46 + 69);
      v285 = *((_QWORD *)v46 + 70);
      v281 = *((_QWORD *)v46 + 71);
      v277 = *((_QWORD *)v46 + 72);
      v273 = *((_QWORD *)v46 + 73);
      v269 = *((_QWORD *)v46 + 74);
      v265 = *((_QWORD *)v46 + 75);
      v261 = *((_QWORD *)v46 + 76);
      v257 = *((_QWORD *)v46 + 77);
      v253 = *((_QWORD *)v46 + 78);
      v173 = *((_QWORD *)v46 + 79);
      v174 = *((_OWORD *)v46 + 40);
      v175 = *((_OWORD *)v46 + 41);
      v177 = *((_OWORD *)v46 + 42);
      v179 = *((_OWORD *)v46 + 43);
      v183 = *((_OWORD *)v46 + 44);
      v186 = *((_QWORD *)v46 + 90);
      v190 = *((_QWORD *)v46 + 91);
      v194 = *((_OWORD *)v46 + 46);
      v198 = *((_OWORD *)v46 + 47);
      v202 = *((_QWORD *)v46 + 96);
      v206 = *((_QWORD *)v46 + 97);
      v208 = *((_QWORD *)v46 + 98);
      v214 = *((_QWORD *)v46 + 99);
      v218 = *((_QWORD *)v46 + 100);
      v221 = *((_QWORD *)v46 + 101);
      v230 = *((_QWORD *)v46 + 102);
      v243 = *((_QWORD *)v46 + 103);
      v246 = *((_WORD *)v46 + 418);
      v249 = *((_DWORD *)v46 + 208);
      v47 = *((_QWORD *)v46 + 8);
      v48 = *(_QWORD *)v46;
      v49 = *((_QWORD *)v46 + 1);
      v50 = *((_QWORD *)v46 + 2);
      v51 = *((_QWORD *)v46 + 3);
      v52 = *((_QWORD *)v46 + 4);
      v53 = *((_QWORD *)v46 + 5);
      v54 = *((_QWORD *)v46 + 6);
      v55 = *((_QWORD *)v46 + 7);
      sub_100085E0C(*(_QWORD *)v46, v49, v50, v51, v52, v53, v54, v55, v47, v552, v546, v540, v534, v528, v522, v516, v510, v504, v498,
        v493,
        v488,
        v483,
        v478,
        v473,
        v469,
        v465,
        v461,
        v457,
        v453,
        v449,
        v445,
        v441,
        v437,
        v433,
        v429,
        v425,
        v421,
        v417,
        v413,
        v409,
        v405,
        v401,
        v397,
        v393,
        v389,
        v385,
        v381,
        v377,
        v373,
        v369,
        v365,
        v361,
        v357,
        v353,
        v349,
        v345,
        v341,
        v337,
        v333,
        v329,
        v325,
        v321,
        v317);
      *(_QWORD *)v45 = v48;
      *((_QWORD *)v45 + 1) = v49;
      *((_QWORD *)v45 + 2) = v50;
      *((_QWORD *)v45 + 3) = v51;
      v11 = v589;
      *((_QWORD *)v45 + 4) = v52;
      *((_QWORD *)v45 + 5) = v53;
      *((_QWORD *)v45 + 6) = v54;
      *((_QWORD *)v45 + 7) = v55;
      *((_QWORD *)v45 + 8) = v47;
      *((_QWORD *)v45 + 9) = v552;
      *((_QWORD *)v45 + 10) = v546;
      *((_QWORD *)v45 + 11) = v540;
      *((_QWORD *)v45 + 12) = v534;
      *((_QWORD *)v45 + 13) = v528;
      *((_QWORD *)v45 + 14) = v522;
      *((_QWORD *)v45 + 15) = v516;
      *((_QWORD *)v45 + 16) = v510;
      *((_QWORD *)v45 + 17) = v504;
      *((_QWORD *)v45 + 18) = v498;
      *((_QWORD *)v45 + 19) = v493;
      *((_QWORD *)v45 + 20) = v488;
      *((_QWORD *)v45 + 21) = v483;
      *((_QWORD *)v45 + 22) = v478;
      *((_QWORD *)v45 + 23) = v473;
      *((_QWORD *)v45 + 24) = v469;
      *((_QWORD *)v45 + 25) = v465;
      *((_QWORD *)v45 + 26) = v461;
      *((_QWORD *)v45 + 27) = v457;
      *((_QWORD *)v45 + 28) = v453;
      *((_QWORD *)v45 + 29) = v449;
      *((_QWORD *)v45 + 30) = v445;
      *((_QWORD *)v45 + 31) = v441;
      *((_QWORD *)v45 + 32) = v437;
      *((_QWORD *)v45 + 33) = v433;
      *((_QWORD *)v45 + 34) = v429;
      *((_QWORD *)v45 + 35) = v425;
      *((_QWORD *)v45 + 36) = v421;
      *((_QWORD *)v45 + 37) = v417;
      *((_QWORD *)v45 + 38) = v413;
      *((_QWORD *)v45 + 39) = v409;
      *((_QWORD *)v45 + 40) = v405;
      *((_QWORD *)v45 + 41) = v401;
      *((_QWORD *)v45 + 42) = v397;
      *((_QWORD *)v45 + 43) = v393;
      *((_QWORD *)v45 + 44) = v389;
      *((_QWORD *)v45 + 45) = v385;
      *((_QWORD *)v45 + 46) = v381;
      *((_QWORD *)v45 + 47) = v377;
      *((_QWORD *)v45 + 48) = v373;
      *((_QWORD *)v45 + 49) = v369;
      *((_QWORD *)v45 + 50) = v365;
      *((_QWORD *)v45 + 51) = v361;
      *((_QWORD *)v45 + 52) = v357;
      *((_QWORD *)v45 + 53) = v353;
      *((_QWORD *)v45 + 54) = v349;
      *((_QWORD *)v45 + 55) = v345;
      *((_QWORD *)v45 + 56) = v341;
      *((_QWORD *)v45 + 57) = v337;
      *((_QWORD *)v45 + 58) = v333;
      *((_QWORD *)v45 + 59) = v329;
      *((_QWORD *)v45 + 60) = v325;
      *((_QWORD *)v45 + 61) = v321;
      *((_QWORD *)v45 + 62) = v317;
      *((_QWORD *)v45 + 63) = v313;
      *((_QWORD *)v45 + 64) = v309;
      *((_QWORD *)v45 + 65) = v305;
      *((_QWORD *)v45 + 66) = v301;
      *((_QWORD *)v45 + 67) = v297;
      *((_QWORD *)v45 + 68) = v293;
      *((_QWORD *)v45 + 69) = v289;
      *((_QWORD *)v45 + 70) = v285;
      *((_QWORD *)v45 + 71) = v281;
      *((_QWORD *)v45 + 72) = v277;
      *((_QWORD *)v45 + 73) = v273;
      *((_QWORD *)v45 + 74) = v269;
      *((_QWORD *)v45 + 75) = v265;
      *((_QWORD *)v45 + 76) = v261;
      *((_QWORD *)v45 + 77) = v257;
      *((_QWORD *)v45 + 78) = v253;
      *((_QWORD *)v45 + 79) = v173;
      *((_OWORD *)v45 + 40) = v174;
      *((_OWORD *)v45 + 41) = v175;
      *((_OWORD *)v45 + 42) = v177;
      *((_OWORD *)v45 + 43) = v179;
      *((_OWORD *)v45 + 44) = v183;
      *((_QWORD *)v45 + 90) = v186;
      *((_QWORD *)v45 + 91) = v190;
      *((_OWORD *)v45 + 46) = v194;
      *((_OWORD *)v45 + 47) = v198;
      *((_QWORD *)v45 + 96) = v202;
      *((_QWORD *)v45 + 97) = v206;
      *((_QWORD *)v45 + 98) = v208;
      *((_QWORD *)v45 + 99) = v214;
      *((_QWORD *)v45 + 100) = v218;
      *((_QWORD *)v45 + 101) = v221;
      *((_QWORD *)v45 + 102) = v230;
      *((_QWORD *)v45 + 103) = v243;
      *((_WORD *)v45 + 418) = v246;
      *((_DWORD *)v45 + 208) = v249;
      *((_BYTE *)v558 + *(int *)(v589 + 32)) = *((_BYTE *)v563 + *(int *)(v589 + 32));
      v12 = v581;
      (*(void (**)(void))(v581 + 56))();
      a3 = v573;
      v4 = v577;
      v13 = v568;
      goto LABEL_17;
    }
LABEL_7:
    v27 = sub_10000EDC8((uint64_t *)&unk_100488B90);
    memcpy(v14, v10, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_18;
  }
  if (v16)
  {
    sub_1000258F8((uint64_t)v14, type metadata accessor for MeasurementHistoryItem);
    goto LABEL_7;
  }
  v578 = v4;
  v582 = v12;
  v569 = v13;
  v574 = a3;
  *v14 = *v10;
  v28 = v10[1];
  v29 = v14[1];
  v14[1] = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v29);
  v14[2] = v10[2];
  v30 = v10[3];
  v31 = v14[3];
  v14[3] = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  v590 = v11;
  v32 = *(int *)(v11 + 24);
  v33 = (char *)v14 + v32;
  v34 = (char *)v10 + v32;
  v35 = type metadata accessor for MeasurementCapture(0);
  v36 = *(_QWORD *)(v35 - 8);
  v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 48);
  v38 = v37(v33, 1, v35);
  v39 = v37(v34, 1, v35);
  v586 = a1;
  if (!v38)
  {
    if (!v39)
    {
      v169 = type metadata accessor for URL(0);
      v170 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v169 - 8) + 24);
      v170(v33, v34, v169);
      v170(&v33[*(int *)(v35 + 20)], &v34[*(int *)(v35 + 20)], v169);
      goto LABEL_16;
    }
    sub_1000258F8((uint64_t)v33, type metadata accessor for MeasurementCapture);
    goto LABEL_15;
  }
  if (v39)
  {
LABEL_15:
    v56 = sub_10000EDC8((uint64_t *)&unk_1004862E0);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    goto LABEL_16;
  }
  v40 = type metadata accessor for URL(0);
  v41 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 16);
  v41(v33, v34, v40);
  v41(&v33[*(int *)(v35 + 20)], &v34[*(int *)(v35 + 20)], v40);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
LABEL_16:
  v57 = *(int *)(v590 + 28);
  v58 = (char *)v14 + v57;
  v59 = (char *)v10 + v57;
  v553 = *(_QWORD *)v59;
  v547 = *((_QWORD *)v59 + 1);
  v541 = *((_QWORD *)v59 + 2);
  v535 = *((_QWORD *)v59 + 3);
  v529 = *((_QWORD *)v59 + 4);
  v523 = *((_QWORD *)v59 + 5);
  v517 = *((_QWORD *)v59 + 6);
  v511 = *((_QWORD *)v59 + 7);
  v505 = *((_QWORD *)v59 + 8);
  v499 = *((_QWORD *)v59 + 9);
  v494 = *((_QWORD *)v59 + 10);
  v489 = *((_QWORD *)v59 + 11);
  v484 = *((_QWORD *)v59 + 12);
  v479 = *((_QWORD *)v59 + 13);
  v474 = *((_QWORD *)v59 + 14);
  v470 = *((_QWORD *)v59 + 15);
  v466 = *((_QWORD *)v59 + 16);
  v462 = *((_QWORD *)v59 + 17);
  v458 = *((_QWORD *)v59 + 18);
  v454 = *((_QWORD *)v59 + 19);
  v450 = *((_QWORD *)v59 + 20);
  v446 = *((_QWORD *)v59 + 21);
  v60 = *((_QWORD *)v59 + 23);
  v442 = *((_QWORD *)v59 + 22);
  v438 = *((_QWORD *)v59 + 24);
  v434 = *((_QWORD *)v59 + 25);
  v430 = *((_QWORD *)v59 + 26);
  v426 = *((_QWORD *)v59 + 27);
  v422 = *((_QWORD *)v59 + 28);
  v418 = *((_QWORD *)v59 + 29);
  v414 = *((_QWORD *)v59 + 30);
  v410 = *((_QWORD *)v59 + 31);
  v406 = *((_QWORD *)v59 + 32);
  v402 = *((_QWORD *)v59 + 33);
  v398 = *((_QWORD *)v59 + 34);
  v394 = *((_QWORD *)v59 + 35);
  v390 = *((_QWORD *)v59 + 36);
  v386 = *((_QWORD *)v59 + 37);
  v382 = *((_QWORD *)v59 + 38);
  v378 = *((_QWORD *)v59 + 39);
  v374 = *((_QWORD *)v59 + 40);
  v370 = *((_QWORD *)v59 + 41);
  v366 = *((_QWORD *)v59 + 42);
  v362 = *((_QWORD *)v59 + 43);
  v358 = *((_QWORD *)v59 + 44);
  v354 = *((_QWORD *)v59 + 45);
  v350 = *((_QWORD *)v59 + 46);
  v346 = *((_QWORD *)v59 + 47);
  v342 = *((_QWORD *)v59 + 48);
  v338 = *((_QWORD *)v59 + 49);
  v334 = *((_QWORD *)v59 + 50);
  v330 = *((_QWORD *)v59 + 51);
  v326 = *((_QWORD *)v59 + 52);
  v322 = *((_QWORD *)v59 + 53);
  v318 = *((_QWORD *)v59 + 54);
  v314 = *((_QWORD *)v59 + 55);
  v310 = *((_QWORD *)v59 + 56);
  v306 = *((_QWORD *)v59 + 57);
  v302 = *((_QWORD *)v59 + 58);
  v298 = *((_QWORD *)v59 + 59);
  v294 = *((_QWORD *)v59 + 60);
  v290 = *((_QWORD *)v59 + 61);
  v286 = *((_QWORD *)v59 + 62);
  v282 = *((_QWORD *)v59 + 63);
  v278 = *((_QWORD *)v59 + 64);
  v274 = *((_QWORD *)v59 + 65);
  v270 = *((_QWORD *)v59 + 66);
  v266 = *((_QWORD *)v59 + 67);
  v262 = *((_QWORD *)v59 + 68);
  v258 = *((_QWORD *)v59 + 69);
  v254 = *((_QWORD *)v59 + 70);
  v250 = *((_QWORD *)v59 + 71);
  v247 = *((_QWORD *)v59 + 72);
  v244 = *((_QWORD *)v59 + 73);
  v241 = *((_QWORD *)v59 + 74);
  v239 = *((_QWORD *)v59 + 75);
  v237 = *((_QWORD *)v59 + 76);
  v234 = *((_QWORD *)v59 + 77);
  v564 = v10;
  v232 = *((_QWORD *)v59 + 78);
  v180 = *((_QWORD *)v59 + 79);
  v61 = *((_QWORD *)v59 + 80);
  v182 = *((_QWORD *)v59 + 81);
  v62 = *((_QWORD *)v59 + 82);
  v559 = v14;
  v63 = *((_QWORD *)v59 + 83);
  v64 = *((_QWORD *)v59 + 84);
  v65 = *((_QWORD *)v59 + 85);
  v66 = *((_QWORD *)v59 + 86);
  v67 = *((_QWORD *)v59 + 87);
  v184 = *((_OWORD *)v59 + 44);
  v187 = *((_QWORD *)v59 + 90);
  v191 = *((_QWORD *)v59 + 91);
  v195 = *((_OWORD *)v59 + 46);
  v199 = *((_OWORD *)v59 + 47);
  v203 = *((_QWORD *)v59 + 96);
  v207 = *((_QWORD *)v59 + 97);
  v209 = *((_QWORD *)v59 + 98);
  v212 = *((_QWORD *)v59 + 99);
  v215 = *((_QWORD *)v59 + 100);
  v219 = *((_QWORD *)v59 + 101);
  v222 = *((_QWORD *)v59 + 102);
  v225 = *((_QWORD *)v59 + 103);
  v227 = *((_WORD *)v59 + 418);
  v231 = *((_DWORD *)v59 + 208);
  sub_100085E0C(*(_QWORD *)v59, v547, v541, v535, v529, v523, v517, v511, v505, v499, v494, v489, v484, v479, v474, v470, v466, v462, v458,
    v454,
    v450,
    v446,
    v442,
    v60,
    v438,
    v434,
    v430,
    v426,
    v422,
    v418,
    v414,
    v410,
    v406,
    v402,
    v398,
    v394,
    v390,
    v386,
    v382,
    v378,
    v374,
    v370,
    v366,
    v362,
    v358,
    v354,
    v350,
    v346,
    v342,
    v338,
    v334,
    v330,
    v326,
    v322,
    v318,
    v314,
    v310,
    v306,
    v302,
    v298,
    v294,
    v290,
    v286);
  v68 = *(_QWORD *)v58;
  v69 = *((_QWORD *)v58 + 1);
  *(_QWORD *)v58 = v553;
  *((_QWORD *)v58 + 1) = v547;
  v70 = *((_QWORD *)v58 + 2);
  v71 = *((_QWORD *)v58 + 3);
  v11 = v590;
  *((_QWORD *)v58 + 2) = v541;
  *((_QWORD *)v58 + 3) = v535;
  v72 = *((_QWORD *)v58 + 4);
  v73 = *((_QWORD *)v58 + 5);
  *((_QWORD *)v58 + 4) = v529;
  *((_QWORD *)v58 + 5) = v523;
  v74 = *((_QWORD *)v58 + 6);
  v75 = *((_QWORD *)v58 + 7);
  *((_QWORD *)v58 + 6) = v517;
  *((_QWORD *)v58 + 7) = v511;
  v554 = *((_OWORD *)v58 + 4);
  v548 = *((_OWORD *)v58 + 5);
  *((_QWORD *)v58 + 8) = v505;
  *((_QWORD *)v58 + 9) = v499;
  *((_QWORD *)v58 + 10) = v494;
  *((_QWORD *)v58 + 11) = v489;
  v542 = *((_OWORD *)v58 + 6);
  v536 = *((_OWORD *)v58 + 7);
  *((_QWORD *)v58 + 12) = v484;
  *((_QWORD *)v58 + 13) = v479;
  *((_QWORD *)v58 + 14) = v474;
  *((_QWORD *)v58 + 15) = v470;
  v530 = *((_OWORD *)v58 + 8);
  v524 = *((_OWORD *)v58 + 9);
  *((_QWORD *)v58 + 16) = v466;
  *((_QWORD *)v58 + 17) = v462;
  *((_QWORD *)v58 + 18) = v458;
  *((_QWORD *)v58 + 19) = v454;
  v518 = *((_OWORD *)v58 + 10);
  v512 = *((_OWORD *)v58 + 11);
  *((_QWORD *)v58 + 20) = v450;
  *((_QWORD *)v58 + 21) = v446;
  *((_QWORD *)v58 + 22) = v442;
  *((_QWORD *)v58 + 23) = v60;
  v506 = *((_OWORD *)v58 + 12);
  v500 = *((_OWORD *)v58 + 13);
  *((_QWORD *)v58 + 24) = v438;
  *((_QWORD *)v58 + 25) = v434;
  *((_QWORD *)v58 + 26) = v430;
  *((_QWORD *)v58 + 27) = v426;
  v495 = *((_OWORD *)v58 + 14);
  v490 = *((_OWORD *)v58 + 15);
  *((_QWORD *)v58 + 28) = v422;
  *((_QWORD *)v58 + 29) = v418;
  *((_QWORD *)v58 + 30) = v414;
  *((_QWORD *)v58 + 31) = v410;
  v485 = *((_OWORD *)v58 + 16);
  v480 = *((_OWORD *)v58 + 17);
  *((_QWORD *)v58 + 32) = v406;
  *((_QWORD *)v58 + 33) = v402;
  *((_QWORD *)v58 + 34) = v398;
  *((_QWORD *)v58 + 35) = v394;
  v76 = *((_OWORD *)v58 + 19);
  v475 = *((_OWORD *)v58 + 18);
  *((_QWORD *)v58 + 36) = v390;
  *((_QWORD *)v58 + 37) = v386;
  *((_QWORD *)v58 + 38) = v382;
  *((_QWORD *)v58 + 39) = v378;
  v77 = *((_OWORD *)v58 + 20);
  v78 = *((_OWORD *)v58 + 21);
  *((_QWORD *)v58 + 40) = v374;
  *((_QWORD *)v58 + 41) = v370;
  *((_QWORD *)v58 + 42) = v366;
  *((_QWORD *)v58 + 43) = v362;
  v79 = *((_OWORD *)v58 + 22);
  v80 = *((_OWORD *)v58 + 23);
  *((_QWORD *)v58 + 44) = v358;
  *((_QWORD *)v58 + 45) = v354;
  *((_QWORD *)v58 + 46) = v350;
  *((_QWORD *)v58 + 47) = v346;
  v81 = *((_OWORD *)v58 + 24);
  v82 = *((_OWORD *)v58 + 25);
  *((_QWORD *)v58 + 48) = v342;
  *((_QWORD *)v58 + 49) = v338;
  *((_QWORD *)v58 + 50) = v334;
  *((_QWORD *)v58 + 51) = v330;
  v83 = *((_OWORD *)v58 + 26);
  v84 = *((_OWORD *)v58 + 27);
  *((_QWORD *)v58 + 52) = v326;
  *((_QWORD *)v58 + 53) = v322;
  *((_QWORD *)v58 + 54) = v318;
  *((_QWORD *)v58 + 55) = v314;
  v85 = *((_OWORD *)v58 + 28);
  v86 = *((_OWORD *)v58 + 29);
  *((_QWORD *)v58 + 56) = v310;
  *((_QWORD *)v58 + 57) = v306;
  *((_QWORD *)v58 + 58) = v302;
  *((_QWORD *)v58 + 59) = v298;
  v87 = *((_OWORD *)v58 + 30);
  v88 = *((_OWORD *)v58 + 31);
  *((_QWORD *)v58 + 60) = v294;
  *((_QWORD *)v58 + 61) = v290;
  *((_QWORD *)v58 + 62) = v286;
  *((_QWORD *)v58 + 63) = v282;
  *((_QWORD *)v58 + 64) = v278;
  *((_QWORD *)v58 + 65) = v274;
  *((_QWORD *)v58 + 66) = v270;
  *((_QWORD *)v58 + 67) = v266;
  *((_QWORD *)v58 + 68) = v262;
  *((_QWORD *)v58 + 69) = v258;
  *((_QWORD *)v58 + 70) = v254;
  *((_QWORD *)v58 + 71) = v250;
  *((_QWORD *)v58 + 72) = v247;
  *((_QWORD *)v58 + 73) = v244;
  *((_QWORD *)v58 + 74) = v241;
  *((_QWORD *)v58 + 75) = v239;
  *((_QWORD *)v58 + 76) = v237;
  *((_QWORD *)v58 + 77) = v234;
  *((_QWORD *)v58 + 78) = v232;
  *((_QWORD *)v58 + 79) = v180;
  *((_QWORD *)v58 + 80) = v61;
  *((_QWORD *)v58 + 81) = v182;
  *((_QWORD *)v58 + 82) = v62;
  *((_QWORD *)v58 + 83) = v63;
  *((_QWORD *)v58 + 84) = v64;
  *((_QWORD *)v58 + 85) = v65;
  *((_QWORD *)v58 + 86) = v66;
  *((_QWORD *)v58 + 87) = v67;
  *((_OWORD *)v58 + 44) = v184;
  *((_QWORD *)v58 + 90) = v187;
  *((_QWORD *)v58 + 91) = v191;
  *((_OWORD *)v58 + 46) = v195;
  *((_OWORD *)v58 + 47) = v199;
  *((_QWORD *)v58 + 96) = v203;
  *((_QWORD *)v58 + 97) = v207;
  *((_QWORD *)v58 + 98) = v209;
  *((_QWORD *)v58 + 99) = v212;
  *((_QWORD *)v58 + 100) = v215;
  *((_QWORD *)v58 + 101) = v219;
  *((_QWORD *)v58 + 102) = v222;
  *((_QWORD *)v58 + 103) = v225;
  *((_WORD *)v58 + 418) = v227;
  *((_DWORD *)v58 + 208) = v231;
  sub_100020E24(v68, v69, v70, v71, v72, v73, v74, v75, v554, *((uint64_t *)&v554 + 1), v548, *((uint64_t *)&v548 + 1), v542, *((uint64_t *)&v542 + 1), v536, *((uint64_t *)&v536 + 1), v530, *((uint64_t *)&v530 + 1), v524,
    *((uint64_t *)&v524 + 1),
    v518,
    *((uint64_t *)&v518 + 1),
    v512,
    *((uint64_t *)&v512 + 1),
    v506,
    *((uint64_t *)&v506 + 1),
    v500,
    *((uint64_t *)&v500 + 1),
    v495,
    *((uint64_t *)&v495 + 1),
    v490,
    *((uint64_t *)&v490 + 1),
    v485,
    *((uint64_t *)&v485 + 1),
    v480,
    *((uint64_t *)&v480 + 1),
    v475,
    *((uint64_t *)&v475 + 1),
    v76,
    *((uint64_t *)&v76 + 1),
    v77,
    *((uint64_t *)&v77 + 1),
    v78,
    *((uint64_t *)&v78 + 1),
    v79,
    *((uint64_t *)&v79 + 1),
    v80,
    *((uint64_t *)&v80 + 1),
    v81,
    *((uint64_t *)&v81 + 1),
    v82,
    *((uint64_t *)&v82 + 1),
    v83,
    *((uint64_t *)&v83 + 1),
    v84,
    *((uint64_t *)&v84 + 1),
    v85,
    *((uint64_t *)&v85 + 1),
    v86,
    *((uint64_t *)&v86 + 1),
    v87,
    *((uint64_t *)&v87 + 1),
    v88);
  *((_BYTE *)v559 + *(int *)(v590 + 32)) = *((_BYTE *)v564 + *(int *)(v590 + 32));
  a3 = v574;
  v4 = v578;
  v13 = v569;
  v12 = v582;
LABEL_17:
  a1 = v586;
LABEL_18:
  v89 = *(int *)(a3 + 24);
  v90 = (_QWORD *)((char *)v4 + v89);
  v91 = (_QWORD *)((char *)a1 + v89);
  v92 = v13();
  v93 = v90;
  v94 = ((uint64_t (*)(_QWORD *, uint64_t, uint64_t))v13)(v90, 1, v11);
  if (!v92)
  {
    if (v94)
    {
      sub_1000258F8((uint64_t)v91, type metadata accessor for MeasurementHistoryItem);
      goto LABEL_24;
    }
    v588 = a1;
    *v91 = *v90;
    v106 = v90[1];
    v107 = v91[1];
    v91[1] = v106;
    swift_bridgeObjectRetain(v106);
    swift_bridgeObjectRelease(v107);
    v91[2] = v90[2];
    v108 = v90[3];
    v109 = v91[3];
    v91[3] = v108;
    swift_bridgeObjectRetain(v108);
    swift_bridgeObjectRelease(v109);
    v110 = *(int *)(v11 + 24);
    v111 = (char *)v91 + v110;
    v112 = (char *)v90 + v110;
    v113 = type metadata accessor for MeasurementCapture(0);
    v114 = *(_QWORD *)(v113 - 8);
    v115 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v114 + 48);
    v116 = v115(v111, 1, v113);
    v117 = v115(v112, 1, v113);
    if (v116)
    {
      if (!v117)
      {
        v118 = type metadata accessor for URL(0);
        v119 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v118 - 8) + 16);
        v119(v111, v112, v118);
        v119(&v111[*(int *)(v113 + 20)], &v112[*(int *)(v113 + 20)], v118);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v114 + 56))(v111, 0, 1, v113);
LABEL_33:
        v135 = *(int *)(v11 + 28);
        v136 = (char *)v91 + v135;
        v137 = (char *)v93 + v135;
        v592 = v11;
        v138 = *((_QWORD *)v137 + 6);
        v584 = *((_QWORD *)v137 + 7);
        v571 = *((_QWORD *)v137 + 8);
        v566 = *((_QWORD *)v137 + 9);
        v561 = *((_QWORD *)v137 + 10);
        v556 = *((_QWORD *)v137 + 11);
        v550 = *((_QWORD *)v137 + 12);
        v544 = *((_QWORD *)v137 + 13);
        v538 = *((_QWORD *)v137 + 14);
        v532 = *((_QWORD *)v137 + 15);
        v526 = *((_QWORD *)v137 + 16);
        v520 = *((_QWORD *)v137 + 17);
        v514 = *((_QWORD *)v137 + 18);
        v508 = *((_QWORD *)v137 + 19);
        v502 = *((_QWORD *)v137 + 20);
        v497 = *((_QWORD *)v137 + 21);
        v492 = *((_QWORD *)v137 + 22);
        v487 = *((_QWORD *)v137 + 23);
        v482 = *((_QWORD *)v137 + 24);
        v477 = *((_QWORD *)v137 + 25);
        v472 = *((_QWORD *)v137 + 26);
        v468 = *((_QWORD *)v137 + 27);
        v464 = *((_QWORD *)v137 + 28);
        v460 = *((_QWORD *)v137 + 29);
        v456 = *((_QWORD *)v137 + 30);
        v452 = *((_QWORD *)v137 + 31);
        v448 = *((_QWORD *)v137 + 32);
        v444 = *((_QWORD *)v137 + 33);
        v440 = *((_QWORD *)v137 + 34);
        v436 = *((_QWORD *)v137 + 35);
        v432 = *((_QWORD *)v137 + 36);
        v428 = *((_QWORD *)v137 + 37);
        v424 = *((_QWORD *)v137 + 38);
        v420 = *((_QWORD *)v137 + 39);
        v416 = *((_QWORD *)v137 + 40);
        v412 = *((_QWORD *)v137 + 41);
        v408 = *((_QWORD *)v137 + 42);
        v404 = *((_QWORD *)v137 + 43);
        v400 = *((_QWORD *)v137 + 44);
        v396 = *((_QWORD *)v137 + 45);
        v392 = *((_QWORD *)v137 + 46);
        v388 = *((_QWORD *)v137 + 47);
        v384 = *((_QWORD *)v137 + 48);
        v380 = *((_QWORD *)v137 + 49);
        v376 = *((_QWORD *)v137 + 50);
        v372 = *((_QWORD *)v137 + 51);
        v368 = *((_QWORD *)v137 + 52);
        v364 = *((_QWORD *)v137 + 53);
        v360 = *((_QWORD *)v137 + 54);
        v356 = *((_QWORD *)v137 + 55);
        v352 = *((_QWORD *)v137 + 56);
        v348 = *((_QWORD *)v137 + 57);
        v344 = *((_QWORD *)v137 + 58);
        v340 = *((_QWORD *)v137 + 59);
        v336 = *((_QWORD *)v137 + 60);
        v332 = *((_QWORD *)v137 + 61);
        v328 = *((_QWORD *)v137 + 62);
        v324 = *((_QWORD *)v137 + 63);
        v320 = *((_QWORD *)v137 + 64);
        v316 = *((_QWORD *)v137 + 65);
        v312 = *((_QWORD *)v137 + 66);
        v308 = *((_QWORD *)v137 + 67);
        v304 = *((_QWORD *)v137 + 68);
        v300 = *((_QWORD *)v137 + 69);
        v296 = *((_QWORD *)v137 + 70);
        v292 = *((_QWORD *)v137 + 71);
        v288 = *((_QWORD *)v137 + 72);
        v284 = *((_QWORD *)v137 + 73);
        v280 = *((_QWORD *)v137 + 74);
        v276 = *((_QWORD *)v137 + 75);
        v272 = *((_QWORD *)v137 + 76);
        v580 = v93;
        v268 = *((_QWORD *)v137 + 77);
        v264 = *((_QWORD *)v137 + 78);
        v193 = *((_QWORD *)v137 + 79);
        v197 = *((_OWORD *)v137 + 40);
        v576 = v91;
        v201 = *((_OWORD *)v137 + 41);
        v205 = *((_OWORD *)v137 + 42);
        v139 = *((_QWORD *)v137 + 86);
        v140 = *((_QWORD *)v137 + 87);
        v211 = *((_OWORD *)v137 + 44);
        v217 = *((_OWORD *)v137 + 45);
        v224 = *((_OWORD *)v137 + 46);
        v229 = *((_OWORD *)v137 + 47);
        v233 = *((_QWORD *)v137 + 96);
        v236 = *((_QWORD *)v137 + 97);
        v238 = *((_QWORD *)v137 + 98);
        v240 = *((_QWORD *)v137 + 99);
        v242 = *((_QWORD *)v137 + 100);
        v245 = *((_QWORD *)v137 + 101);
        v248 = *((_QWORD *)v137 + 102);
        v252 = *((_QWORD *)v137 + 103);
        v256 = *((_WORD *)v137 + 418);
        v260 = *((_DWORD *)v137 + 208);
        v141 = *(_QWORD *)v137;
        v142 = *((_QWORD *)v137 + 1);
        v143 = *((_QWORD *)v137 + 2);
        v144 = *((_QWORD *)v137 + 3);
        v145 = *((_QWORD *)v137 + 4);
        v146 = *((_QWORD *)v137 + 5);
        sub_100085E0C(*(_QWORD *)v137, v142, v143, v144, v145, v146, v138, v584, v571, v566, v561, v556, v550, v544, v538, v532, v526, v520, v514,
          v508,
          v502,
          v497,
          v492,
          v487,
          v482,
          v477,
          v472,
          v468,
          v464,
          v460,
          v456,
          v452,
          v448,
          v444,
          v440,
          v436,
          v432,
          v428,
          v424,
          v420,
          v416,
          v412,
          v408,
          v404,
          v400,
          v396,
          v392,
          v388,
          v384,
          v380,
          v376,
          v372,
          v368,
          v364,
          v360,
          v356,
          v352,
          v348,
          v344,
          v340,
          v336,
          v332,
          v328);
        v147 = *(_QWORD *)v136;
        v148 = *((_QWORD *)v136 + 1);
        *(_QWORD *)v136 = v141;
        *((_QWORD *)v136 + 1) = v142;
        v149 = *((_QWORD *)v136 + 2);
        v150 = *((_QWORD *)v136 + 3);
        *((_QWORD *)v136 + 2) = v143;
        *((_QWORD *)v136 + 3) = v144;
        v151 = *((_QWORD *)v136 + 4);
        v152 = *((_QWORD *)v136 + 5);
        *((_QWORD *)v136 + 4) = v145;
        *((_QWORD *)v136 + 5) = v146;
        v153 = *((_QWORD *)v136 + 6);
        v154 = *((_QWORD *)v136 + 7);
        *((_QWORD *)v136 + 6) = v138;
        *((_QWORD *)v136 + 7) = v584;
        v585 = *((_OWORD *)v136 + 4);
        v189 = *((_OWORD *)v136 + 5);
        *((_QWORD *)v136 + 8) = v571;
        *((_QWORD *)v136 + 9) = v566;
        *((_QWORD *)v136 + 10) = v561;
        *((_QWORD *)v136 + 11) = v556;
        v567 = *((_OWORD *)v136 + 7);
        v572 = *((_OWORD *)v136 + 6);
        *((_QWORD *)v136 + 12) = v550;
        *((_QWORD *)v136 + 13) = v544;
        *((_QWORD *)v136 + 14) = v538;
        *((_QWORD *)v136 + 15) = v532;
        v562 = *((_OWORD *)v136 + 8);
        v557 = *((_OWORD *)v136 + 9);
        *((_QWORD *)v136 + 16) = v526;
        *((_QWORD *)v136 + 17) = v520;
        *((_QWORD *)v136 + 18) = v514;
        *((_QWORD *)v136 + 19) = v508;
        v551 = *((_OWORD *)v136 + 10);
        v545 = *((_OWORD *)v136 + 11);
        *((_QWORD *)v136 + 20) = v502;
        *((_QWORD *)v136 + 21) = v497;
        *((_QWORD *)v136 + 22) = v492;
        *((_QWORD *)v136 + 23) = v487;
        v539 = *((_OWORD *)v136 + 12);
        v533 = *((_OWORD *)v136 + 13);
        *((_QWORD *)v136 + 24) = v482;
        *((_QWORD *)v136 + 25) = v477;
        *((_QWORD *)v136 + 26) = v472;
        *((_QWORD *)v136 + 27) = v468;
        v527 = *((_OWORD *)v136 + 14);
        v521 = *((_OWORD *)v136 + 15);
        *((_QWORD *)v136 + 28) = v464;
        *((_QWORD *)v136 + 29) = v460;
        *((_QWORD *)v136 + 30) = v456;
        *((_QWORD *)v136 + 31) = v452;
        v515 = *((_OWORD *)v136 + 16);
        v509 = *((_OWORD *)v136 + 17);
        *((_QWORD *)v136 + 32) = v448;
        *((_QWORD *)v136 + 33) = v444;
        *((_QWORD *)v136 + 34) = v440;
        *((_QWORD *)v136 + 35) = v436;
        v155 = *((_OWORD *)v136 + 19);
        v503 = *((_OWORD *)v136 + 18);
        *((_QWORD *)v136 + 36) = v432;
        *((_QWORD *)v136 + 37) = v428;
        *((_QWORD *)v136 + 38) = v424;
        *((_QWORD *)v136 + 39) = v420;
        v156 = *((_OWORD *)v136 + 20);
        v157 = *((_OWORD *)v136 + 21);
        *((_QWORD *)v136 + 40) = v416;
        *((_QWORD *)v136 + 41) = v412;
        *((_QWORD *)v136 + 42) = v408;
        *((_QWORD *)v136 + 43) = v404;
        v158 = *((_OWORD *)v136 + 22);
        v159 = *((_OWORD *)v136 + 23);
        *((_QWORD *)v136 + 44) = v400;
        *((_QWORD *)v136 + 45) = v396;
        *((_QWORD *)v136 + 46) = v392;
        *((_QWORD *)v136 + 47) = v388;
        v160 = *((_OWORD *)v136 + 24);
        v161 = *((_OWORD *)v136 + 25);
        *((_QWORD *)v136 + 48) = v384;
        *((_QWORD *)v136 + 49) = v380;
        *((_QWORD *)v136 + 50) = v376;
        *((_QWORD *)v136 + 51) = v372;
        v162 = *((_OWORD *)v136 + 26);
        v163 = *((_OWORD *)v136 + 27);
        *((_QWORD *)v136 + 52) = v368;
        *((_QWORD *)v136 + 53) = v364;
        *((_QWORD *)v136 + 54) = v360;
        *((_QWORD *)v136 + 55) = v356;
        v164 = *((_OWORD *)v136 + 28);
        v165 = *((_OWORD *)v136 + 29);
        *((_QWORD *)v136 + 56) = v352;
        *((_QWORD *)v136 + 57) = v348;
        *((_QWORD *)v136 + 58) = v344;
        *((_QWORD *)v136 + 59) = v340;
        v166 = *((_OWORD *)v136 + 30);
        v167 = *((_OWORD *)v136 + 31);
        *((_QWORD *)v136 + 60) = v336;
        *((_QWORD *)v136 + 61) = v332;
        *((_QWORD *)v136 + 62) = v328;
        *((_QWORD *)v136 + 63) = v324;
        *((_QWORD *)v136 + 64) = v320;
        *((_QWORD *)v136 + 65) = v316;
        *((_QWORD *)v136 + 66) = v312;
        *((_QWORD *)v136 + 67) = v308;
        *((_QWORD *)v136 + 68) = v304;
        *((_QWORD *)v136 + 69) = v300;
        *((_QWORD *)v136 + 70) = v296;
        *((_QWORD *)v136 + 71) = v292;
        *((_QWORD *)v136 + 72) = v288;
        *((_QWORD *)v136 + 73) = v284;
        *((_QWORD *)v136 + 74) = v280;
        *((_QWORD *)v136 + 75) = v276;
        *((_QWORD *)v136 + 76) = v272;
        *((_QWORD *)v136 + 77) = v268;
        *((_QWORD *)v136 + 78) = v264;
        *((_QWORD *)v136 + 79) = v193;
        *((_OWORD *)v136 + 40) = v197;
        *((_OWORD *)v136 + 41) = v201;
        *((_OWORD *)v136 + 42) = v205;
        *((_QWORD *)v136 + 86) = v139;
        *((_QWORD *)v136 + 87) = v140;
        *((_OWORD *)v136 + 44) = v211;
        *((_OWORD *)v136 + 45) = v217;
        *((_OWORD *)v136 + 46) = v224;
        *((_OWORD *)v136 + 47) = v229;
        *((_QWORD *)v136 + 96) = v233;
        *((_QWORD *)v136 + 97) = v236;
        *((_QWORD *)v136 + 98) = v238;
        *((_QWORD *)v136 + 99) = v240;
        *((_QWORD *)v136 + 100) = v242;
        *((_QWORD *)v136 + 101) = v245;
        *((_QWORD *)v136 + 102) = v248;
        *((_QWORD *)v136 + 103) = v252;
        *((_WORD *)v136 + 418) = v256;
        *((_DWORD *)v136 + 208) = v260;
        sub_100020E24(v147, v148, v149, v150, v151, v152, v153, v154, v585, *((uint64_t *)&v585 + 1), v189, *((uint64_t *)&v189 + 1), v572, *((uint64_t *)&v572 + 1), v567, *((uint64_t *)&v567 + 1), v562, *((uint64_t *)&v562 + 1), v557,
          *((uint64_t *)&v557 + 1),
          v551,
          *((uint64_t *)&v551 + 1),
          v545,
          *((uint64_t *)&v545 + 1),
          v539,
          *((uint64_t *)&v539 + 1),
          v533,
          *((uint64_t *)&v533 + 1),
          v527,
          *((uint64_t *)&v527 + 1),
          v521,
          *((uint64_t *)&v521 + 1),
          v515,
          *((uint64_t *)&v515 + 1),
          v509,
          *((uint64_t *)&v509 + 1),
          v503,
          *((uint64_t *)&v503 + 1),
          v155,
          *((uint64_t *)&v155 + 1),
          v156,
          *((uint64_t *)&v156 + 1),
          v157,
          *((uint64_t *)&v157 + 1),
          v158,
          *((uint64_t *)&v158 + 1),
          v159,
          *((uint64_t *)&v159 + 1),
          v160,
          *((uint64_t *)&v160 + 1),
          v161,
          *((uint64_t *)&v161 + 1),
          v162,
          *((uint64_t *)&v162 + 1),
          v163,
          *((uint64_t *)&v163 + 1),
          v164,
          *((uint64_t *)&v164 + 1),
          v165,
          *((uint64_t *)&v165 + 1),
          v166,
          *((uint64_t *)&v166 + 1),
          v167);
        a1 = v588;
        *((_BYTE *)v576 + *(int *)(v592 + 32)) = *((_BYTE *)v580 + *(int *)(v592 + 32));
        return a1;
      }
    }
    else
    {
      if (!v117)
      {
        v171 = type metadata accessor for URL(0);
        v172 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v171 - 8) + 24);
        v172(v111, v112, v171);
        v172(&v111[*(int *)(v113 + 20)], &v112[*(int *)(v113 + 20)], v171);
        goto LABEL_33;
      }
      sub_1000258F8((uint64_t)v111, type metadata accessor for MeasurementCapture);
    }
    v134 = sub_10000EDC8((uint64_t *)&unk_1004862E0);
    memcpy(v111, v112, *(_QWORD *)(*(_QWORD *)(v134 - 8) + 64));
    goto LABEL_33;
  }
  if (v94)
  {
LABEL_24:
    v105 = sub_10000EDC8((uint64_t *)&unk_100488B90);
    memcpy(v91, v90, *(_QWORD *)(*(_QWORD *)(v105 - 8) + 64));
    return a1;
  }
  v583 = v12;
  v587 = a1;
  *v91 = *v90;
  v95 = v90[1];
  v91[1] = v95;
  v91[2] = v90[2];
  v96 = v90[3];
  v91[3] = v96;
  v97 = v11;
  v98 = *(int *)(v11 + 24);
  v99 = (char *)v91 + v98;
  v100 = (char *)v90 + v98;
  v101 = type metadata accessor for MeasurementCapture(0);
  v102 = *(_QWORD *)(v101 - 8);
  v103 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v102 + 48);
  swift_bridgeObjectRetain(v95);
  swift_bridgeObjectRetain(v96);
  if (v103(v100, 1, v101))
  {
    v104 = sub_10000EDC8((uint64_t *)&unk_1004862E0);
    memcpy(v99, v100, *(_QWORD *)(*(_QWORD *)(v104 - 8) + 64));
  }
  else
  {
    v120 = type metadata accessor for URL(0);
    v121 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v120 - 8) + 16);
    v121(v99, v100, v120);
    v121(&v99[*(int *)(v101 + 20)], &v100[*(int *)(v101 + 20)], v120);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v102 + 56))(v99, 0, 1, v101);
  }
  v591 = v97;
  v122 = *(int *)(v97 + 28);
  v575 = v91;
  v579 = v93;
  v123 = (char *)v91 + v122;
  v124 = (char *)v93 + v122;
  v570 = *((_QWORD *)v124 + 8);
  v565 = *((_QWORD *)v124 + 9);
  v560 = *((_QWORD *)v124 + 10);
  v555 = *((_QWORD *)v124 + 11);
  v549 = *((_QWORD *)v124 + 12);
  v543 = *((_QWORD *)v124 + 13);
  v537 = *((_QWORD *)v124 + 14);
  v531 = *((_QWORD *)v124 + 15);
  v525 = *((_QWORD *)v124 + 16);
  v519 = *((_QWORD *)v124 + 17);
  v513 = *((_QWORD *)v124 + 18);
  v507 = *((_QWORD *)v124 + 19);
  v501 = *((_QWORD *)v124 + 20);
  v496 = *((_QWORD *)v124 + 21);
  v491 = *((_QWORD *)v124 + 22);
  v486 = *((_QWORD *)v124 + 23);
  v481 = *((_QWORD *)v124 + 24);
  v476 = *((_QWORD *)v124 + 25);
  v471 = *((_QWORD *)v124 + 26);
  v467 = *((_QWORD *)v124 + 27);
  v463 = *((_QWORD *)v124 + 28);
  v459 = *((_QWORD *)v124 + 29);
  v455 = *((_QWORD *)v124 + 30);
  v451 = *((_QWORD *)v124 + 31);
  v447 = *((_QWORD *)v124 + 32);
  v443 = *((_QWORD *)v124 + 33);
  v439 = *((_QWORD *)v124 + 34);
  v435 = *((_QWORD *)v124 + 35);
  v431 = *((_QWORD *)v124 + 36);
  v427 = *((_QWORD *)v124 + 37);
  v423 = *((_QWORD *)v124 + 38);
  v419 = *((_QWORD *)v124 + 39);
  v415 = *((_QWORD *)v124 + 40);
  v411 = *((_QWORD *)v124 + 41);
  v407 = *((_QWORD *)v124 + 42);
  v403 = *((_QWORD *)v124 + 43);
  v399 = *((_QWORD *)v124 + 44);
  v395 = *((_QWORD *)v124 + 45);
  v391 = *((_QWORD *)v124 + 46);
  v387 = *((_QWORD *)v124 + 47);
  v383 = *((_QWORD *)v124 + 48);
  v379 = *((_QWORD *)v124 + 49);
  v375 = *((_QWORD *)v124 + 50);
  v371 = *((_QWORD *)v124 + 51);
  v367 = *((_QWORD *)v124 + 52);
  v363 = *((_QWORD *)v124 + 53);
  v359 = *((_QWORD *)v124 + 54);
  v355 = *((_QWORD *)v124 + 55);
  v351 = *((_QWORD *)v124 + 56);
  v347 = *((_QWORD *)v124 + 57);
  v343 = *((_QWORD *)v124 + 58);
  v339 = *((_QWORD *)v124 + 59);
  v335 = *((_QWORD *)v124 + 60);
  v331 = *((_QWORD *)v124 + 61);
  v327 = *((_QWORD *)v124 + 62);
  v323 = *((_QWORD *)v124 + 63);
  v319 = *((_QWORD *)v124 + 64);
  v315 = *((_QWORD *)v124 + 65);
  v311 = *((_QWORD *)v124 + 66);
  v307 = *((_QWORD *)v124 + 67);
  v303 = *((_QWORD *)v124 + 68);
  v299 = *((_QWORD *)v124 + 69);
  v295 = *((_QWORD *)v124 + 70);
  v291 = *((_QWORD *)v124 + 71);
  v287 = *((_QWORD *)v124 + 72);
  v283 = *((_QWORD *)v124 + 73);
  v279 = *((_QWORD *)v124 + 74);
  v275 = *((_QWORD *)v124 + 75);
  v271 = *((_QWORD *)v124 + 76);
  v267 = *((_QWORD *)v124 + 77);
  v263 = *((_QWORD *)v124 + 78);
  v176 = *((_QWORD *)v124 + 79);
  v178 = *((_OWORD *)v124 + 40);
  v181 = *((_OWORD *)v124 + 41);
  v185 = *((_OWORD *)v124 + 42);
  v188 = *((_QWORD *)v124 + 86);
  v192 = *((_QWORD *)v124 + 87);
  v196 = *((_OWORD *)v124 + 44);
  v200 = *((_OWORD *)v124 + 45);
  v204 = *((_OWORD *)v124 + 46);
  v125 = *((_QWORD *)v124 + 94);
  v210 = *((_QWORD *)v124 + 95);
  v213 = *((_QWORD *)v124 + 96);
  v216 = *((_QWORD *)v124 + 97);
  v220 = *((_QWORD *)v124 + 98);
  v223 = *((_QWORD *)v124 + 99);
  v226 = *((_QWORD *)v124 + 100);
  v228 = *((_QWORD *)v124 + 101);
  v235 = *((_QWORD *)v124 + 102);
  v251 = *((_QWORD *)v124 + 103);
  v255 = *((_WORD *)v124 + 418);
  v259 = *((_DWORD *)v124 + 208);
  v126 = *(_QWORD *)v124;
  v127 = *((_QWORD *)v124 + 1);
  v128 = *((_QWORD *)v124 + 2);
  v129 = *((_QWORD *)v124 + 3);
  v130 = *((_QWORD *)v124 + 4);
  v131 = *((_QWORD *)v124 + 5);
  v132 = *((_QWORD *)v124 + 6);
  v133 = *((_QWORD *)v124 + 7);
  sub_100085E0C(*(_QWORD *)v124, v127, v128, v129, v130, v131, v132, v133, v570, v565, v560, v555, v549, v543, v537, v531, v525, v519, v513,
    v507,
    v501,
    v496,
    v491,
    v486,
    v481,
    v476,
    v471,
    v467,
    v463,
    v459,
    v455,
    v451,
    v447,
    v443,
    v439,
    v435,
    v431,
    v427,
    v423,
    v419,
    v415,
    v411,
    v407,
    v403,
    v399,
    v395,
    v391,
    v387,
    v383,
    v379,
    v375,
    v371,
    v367,
    v363,
    v359,
    v355,
    v351,
    v347,
    v343,
    v339,
    v335,
    v331,
    v327);
  *(_QWORD *)v123 = v126;
  *((_QWORD *)v123 + 1) = v127;
  *((_QWORD *)v123 + 2) = v128;
  *((_QWORD *)v123 + 3) = v129;
  *((_QWORD *)v123 + 4) = v130;
  *((_QWORD *)v123 + 5) = v131;
  *((_QWORD *)v123 + 6) = v132;
  *((_QWORD *)v123 + 7) = v133;
  *((_QWORD *)v123 + 8) = v570;
  *((_QWORD *)v123 + 9) = v565;
  *((_QWORD *)v123 + 10) = v560;
  *((_QWORD *)v123 + 11) = v555;
  *((_QWORD *)v123 + 12) = v549;
  *((_QWORD *)v123 + 13) = v543;
  *((_QWORD *)v123 + 14) = v537;
  *((_QWORD *)v123 + 15) = v531;
  *((_QWORD *)v123 + 16) = v525;
  *((_QWORD *)v123 + 17) = v519;
  *((_QWORD *)v123 + 18) = v513;
  *((_QWORD *)v123 + 19) = v507;
  *((_QWORD *)v123 + 20) = v501;
  *((_QWORD *)v123 + 21) = v496;
  *((_QWORD *)v123 + 22) = v491;
  *((_QWORD *)v123 + 23) = v486;
  *((_QWORD *)v123 + 24) = v481;
  *((_QWORD *)v123 + 25) = v476;
  *((_QWORD *)v123 + 26) = v471;
  *((_QWORD *)v123 + 27) = v467;
  *((_QWORD *)v123 + 28) = v463;
  *((_QWORD *)v123 + 29) = v459;
  *((_QWORD *)v123 + 30) = v455;
  *((_QWORD *)v123 + 31) = v451;
  *((_QWORD *)v123 + 32) = v447;
  *((_QWORD *)v123 + 33) = v443;
  *((_QWORD *)v123 + 34) = v439;
  *((_QWORD *)v123 + 35) = v435;
  *((_QWORD *)v123 + 36) = v431;
  *((_QWORD *)v123 + 37) = v427;
  *((_QWORD *)v123 + 38) = v423;
  *((_QWORD *)v123 + 39) = v419;
  *((_QWORD *)v123 + 40) = v415;
  *((_QWORD *)v123 + 41) = v411;
  *((_QWORD *)v123 + 42) = v407;
  *((_QWORD *)v123 + 43) = v403;
  *((_QWORD *)v123 + 44) = v399;
  *((_QWORD *)v123 + 45) = v395;
  *((_QWORD *)v123 + 46) = v391;
  *((_QWORD *)v123 + 47) = v387;
  *((_QWORD *)v123 + 48) = v383;
  *((_QWORD *)v123 + 49) = v379;
  *((_QWORD *)v123 + 50) = v375;
  *((_QWORD *)v123 + 51) = v371;
  *((_QWORD *)v123 + 52) = v367;
  *((_QWORD *)v123 + 53) = v363;
  *((_QWORD *)v123 + 54) = v359;
  *((_QWORD *)v123 + 55) = v355;
  *((_QWORD *)v123 + 56) = v351;
  *((_QWORD *)v123 + 57) = v347;
  *((_QWORD *)v123 + 58) = v343;
  *((_QWORD *)v123 + 59) = v339;
  *((_QWORD *)v123 + 60) = v335;
  *((_QWORD *)v123 + 61) = v331;
  *((_QWORD *)v123 + 62) = v327;
  *((_QWORD *)v123 + 63) = v323;
  *((_QWORD *)v123 + 64) = v319;
  *((_QWORD *)v123 + 65) = v315;
  *((_QWORD *)v123 + 66) = v311;
  *((_QWORD *)v123 + 67) = v307;
  *((_QWORD *)v123 + 68) = v303;
  *((_QWORD *)v123 + 69) = v299;
  *((_QWORD *)v123 + 70) = v295;
  *((_QWORD *)v123 + 71) = v291;
  *((_QWORD *)v123 + 72) = v287;
  *((_QWORD *)v123 + 73) = v283;
  *((_QWORD *)v123 + 74) = v279;
  *((_QWORD *)v123 + 75) = v275;
  *((_QWORD *)v123 + 76) = v271;
  *((_QWORD *)v123 + 77) = v267;
  *((_QWORD *)v123 + 78) = v263;
  *((_QWORD *)v123 + 79) = v176;
  *((_OWORD *)v123 + 40) = v178;
  *((_OWORD *)v123 + 41) = v181;
  *((_OWORD *)v123 + 42) = v185;
  *((_QWORD *)v123 + 86) = v188;
  *((_QWORD *)v123 + 87) = v192;
  *((_OWORD *)v123 + 44) = v196;
  *((_OWORD *)v123 + 45) = v200;
  *((_OWORD *)v123 + 46) = v204;
  *((_QWORD *)v123 + 94) = v125;
  *((_QWORD *)v123 + 95) = v210;
  *((_QWORD *)v123 + 96) = v213;
  *((_QWORD *)v123 + 97) = v216;
  *((_QWORD *)v123 + 98) = v220;
  *((_QWORD *)v123 + 99) = v223;
  *((_QWORD *)v123 + 100) = v226;
  *((_QWORD *)v123 + 101) = v228;
  *((_QWORD *)v123 + 102) = v235;
  *((_QWORD *)v123 + 103) = v251;
  *((_WORD *)v123 + 418) = v255;
  *((_DWORD *)v123 + 208) = v259;
  *((_BYTE *)v575 + *(int *)(v591 + 32)) = *((_BYTE *)v579 + *(int *)(v591 + 32));
  (*(void (**)(void))(v583 + 56))();
  return v587;
}

_QWORD *sub_10008A764(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  int *v9;
  uint64_t v10;
  unsigned int (*v11)(_OWORD *, uint64_t, int *);
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  _OWORD *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *__dst;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (_OWORD *)((char *)a1 + v6);
  v8 = (_OWORD *)((char *)a2 + v6);
  v9 = (int *)type metadata accessor for MeasurementHistoryItem(0);
  v10 = *((_QWORD *)v9 - 1);
  v11 = *(unsigned int (**)(_OWORD *, uint64_t, int *))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    v12 = sub_10000EDC8((uint64_t *)&unk_100488B90);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v13 = v8[1];
    *v7 = *v8;
    v7[1] = v13;
    v14 = v9[6];
    __dst = (char *)v7 + v14;
    v15 = (char *)v8 + v14;
    v16 = type metadata accessor for MeasurementCapture(0);
    v35 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v15, 1, v16))
    {
      v17 = sub_10000EDC8((uint64_t *)&unk_1004862E0);
      memcpy(__dst, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v36 = v10;
      v18 = type metadata accessor for URL(0);
      v34 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32);
      v34(__dst, v15, v18);
      v19 = v18;
      v10 = v36;
      v34(&__dst[*(int *)(v16 + 20)], &v15[*(int *)(v16 + 20)], v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(__dst, 0, 1, v16);
    }
    memcpy((char *)v7 + v9[7], (char *)v8 + v9[7], 0x346uLL);
    *((_BYTE *)v7 + v9[8]) = *((_BYTE *)v8 + v9[8]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v10 + 56))(v7, 0, 1, v9);
  }
  v20 = *(int *)(a3 + 24);
  v21 = (_OWORD *)((char *)a1 + v20);
  v22 = (_OWORD *)((char *)a2 + v20);
  if (v11(v22, 1, v9))
  {
    v23 = sub_10000EDC8((uint64_t *)&unk_100488B90);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    v24 = v22[1];
    *v21 = *v22;
    v21[1] = v24;
    v25 = v9[6];
    v26 = (char *)v21 + v25;
    v27 = (char *)v22 + v25;
    v28 = type metadata accessor for MeasurementCapture(0);
    v29 = *(_QWORD *)(v28 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
    {
      v30 = sub_10000EDC8((uint64_t *)&unk_1004862E0);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      v31 = type metadata accessor for URL(0);
      v37 = v10;
      v32 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 32);
      v32(v26, v27, v31);
      v32(&v26[*(int *)(v28 + 20)], &v27[*(int *)(v28 + 20)], v31);
      v10 = v37;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    }
    memcpy((char *)v21 + v9[7], (char *)v22 + v9[7], 0x346uLL);
    *((_BYTE *)v21 + v9[8]) = *((_BYTE *)v22 + v9[8]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v10 + 56))(v21, 0, 1, v9);
  }
  return a1;
}

_QWORD *sub_10008AA50(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int *v10;
  uint64_t v11;
  uint64_t (*v12)(_QWORD *, uint64_t, int *);
  int v13;
  int v14;
  __int128 v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(char *, uint64_t, uint64_t);
  int v33;
  int v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  int v105;
  uint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  int v109;
  int v110;
  __int128 v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t (*v128)(char *, uint64_t, uint64_t);
  int v129;
  int v130;
  uint64_t v131;
  void (*v132)(char *, char *, uint64_t);
  uint64_t v133;
  void (*v134)(char *, char *, uint64_t);
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  int v201;
  uint64_t v203;
  void (*v204)(char *, char *, uint64_t);
  uint64_t v205;
  void (*v206)(char *, char *, uint64_t);
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  _QWORD *v236;
  _QWORD *v237;
  __int128 v238;
  _QWORD *v239;
  _QWORD *v240;
  __int128 v241;
  uint64_t v242;
  uint64_t v243;
  __int128 v244;
  uint64_t v245;
  uint64_t v246;
  __int128 v247;
  uint64_t v248;
  __int128 v249;

  v4 = a2;
  v5 = a1;
  v6 = *a1;
  *v5 = *a2;
  swift_bridgeObjectRelease(v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)((char *)v5 + v7);
  v9 = (_QWORD *)((char *)v4 + v7);
  v10 = (int *)type metadata accessor for MeasurementHistoryItem(0);
  v11 = *((_QWORD *)v10 - 1);
  v12 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (v14)
    {
      sub_1000258F8((uint64_t)v8, type metadata accessor for MeasurementHistoryItem);
      goto LABEL_7;
    }
    v243 = a3;
    v236 = v4;
    v246 = v11;
    v239 = v5;
    v23 = v9[1];
    v24 = v8[1];
    *v8 = *v9;
    v8[1] = v23;
    swift_bridgeObjectRelease(v24);
    v25 = v9[3];
    v26 = v8[3];
    v8[2] = v9[2];
    v8[3] = v25;
    swift_bridgeObjectRelease(v26);
    v27 = v10[6];
    v28 = (char *)v8 + v27;
    v29 = (char *)v9 + v27;
    v30 = type metadata accessor for MeasurementCapture(0);
    v31 = *(_QWORD *)(v30 - 8);
    v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48);
    v33 = v32(v28, 1, v30);
    v34 = v32(v29, 1, v30);
    if (v33)
    {
      if (!v34)
      {
        v35 = type metadata accessor for URL(0);
        v36 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 32);
        v36(v28, v29, v35);
        v36(&v28[*(int *)(v30 + 20)], &v29[*(int *)(v30 + 20)], v35);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
LABEL_16:
        v11 = v246;
        v41 = v10[7];
        v42 = (char *)v8 + v41;
        v43 = (char *)v9 + v41;
        v44 = *(_QWORD *)v42;
        v45 = *((_QWORD *)v42 + 1);
        v46 = *((_QWORD *)v42 + 2);
        v47 = *((_QWORD *)v42 + 3);
        v48 = *((_QWORD *)v42 + 4);
        v49 = *((_QWORD *)v42 + 5);
        v50 = *((_QWORD *)v42 + 6);
        v51 = *((_QWORD *)v42 + 7);
        v247 = *((_OWORD *)v42 + 4);
        v232 = *((_OWORD *)v42 + 6);
        v234 = *((_OWORD *)v42 + 5);
        v228 = *((_OWORD *)v42 + 8);
        v230 = *((_OWORD *)v42 + 7);
        v224 = *((_OWORD *)v42 + 10);
        v226 = *((_OWORD *)v42 + 9);
        v220 = *((_OWORD *)v42 + 12);
        v222 = *((_OWORD *)v42 + 11);
        v216 = *((_OWORD *)v42 + 14);
        v218 = *((_OWORD *)v42 + 13);
        v212 = *((_OWORD *)v42 + 16);
        v214 = *((_OWORD *)v42 + 15);
        v209 = *((_OWORD *)v42 + 18);
        v210 = *((_OWORD *)v42 + 17);
        v52 = *((_OWORD *)v42 + 21);
        v207 = *((_OWORD *)v42 + 20);
        v208 = *((_OWORD *)v42 + 19);
        v53 = *((_OWORD *)v42 + 22);
        v54 = *((_OWORD *)v42 + 23);
        v55 = *((_OWORD *)v42 + 24);
        v56 = *((_OWORD *)v42 + 25);
        v57 = *((_OWORD *)v42 + 26);
        v58 = *((_OWORD *)v42 + 27);
        v59 = *((_OWORD *)v43 + 1);
        v60 = *((_OWORD *)v43 + 2);
        v61 = *((_OWORD *)v43 + 3);
        v62 = *((_OWORD *)v43 + 4);
        v63 = *((_OWORD *)v43 + 5);
        v64 = *((_OWORD *)v43 + 6);
        v65 = *((_OWORD *)v43 + 7);
        *(_OWORD *)v42 = *(_OWORD *)v43;
        *((_OWORD *)v42 + 1) = v59;
        v66 = *((_OWORD *)v43 + 8);
        v67 = *((_OWORD *)v43 + 9);
        *((_OWORD *)v42 + 2) = v60;
        *((_OWORD *)v42 + 3) = v61;
        v68 = *((_OWORD *)v43 + 10);
        v69 = *((_OWORD *)v43 + 11);
        *((_OWORD *)v42 + 4) = v62;
        *((_OWORD *)v42 + 5) = v63;
        v70 = *((_OWORD *)v43 + 12);
        v71 = *((_OWORD *)v43 + 13);
        *((_OWORD *)v42 + 6) = v64;
        *((_OWORD *)v42 + 7) = v65;
        v72 = *((_OWORD *)v43 + 14);
        v73 = *((_OWORD *)v43 + 15);
        *((_OWORD *)v42 + 8) = v66;
        *((_OWORD *)v42 + 9) = v67;
        v74 = *((_OWORD *)v43 + 16);
        v75 = *((_OWORD *)v43 + 17);
        *((_OWORD *)v42 + 10) = v68;
        *((_OWORD *)v42 + 11) = v69;
        v76 = *((_OWORD *)v43 + 18);
        v77 = *((_OWORD *)v43 + 19);
        *((_OWORD *)v42 + 12) = v70;
        *((_OWORD *)v42 + 13) = v71;
        v78 = *((_OWORD *)v43 + 20);
        v79 = *((_OWORD *)v43 + 21);
        *((_OWORD *)v42 + 14) = v72;
        *((_OWORD *)v42 + 15) = v73;
        v80 = *((_OWORD *)v43 + 22);
        v81 = *((_OWORD *)v43 + 23);
        *((_OWORD *)v42 + 16) = v74;
        *((_OWORD *)v42 + 17) = v75;
        v82 = *((_OWORD *)v43 + 24);
        v83 = *((_OWORD *)v43 + 25);
        *((_OWORD *)v42 + 18) = v76;
        *((_OWORD *)v42 + 19) = v77;
        v84 = *((_OWORD *)v43 + 26);
        v85 = *((_OWORD *)v43 + 27);
        *((_OWORD *)v42 + 20) = v78;
        *((_OWORD *)v42 + 21) = v79;
        v86 = *((_OWORD *)v43 + 28);
        v87 = *((_OWORD *)v43 + 29);
        *((_OWORD *)v42 + 22) = v80;
        *((_OWORD *)v42 + 23) = v81;
        v88 = *((_OWORD *)v43 + 30);
        v89 = *((_OWORD *)v43 + 31);
        *((_OWORD *)v42 + 24) = v82;
        *((_OWORD *)v42 + 25) = v83;
        v90 = *((_OWORD *)v43 + 32);
        v91 = *((_OWORD *)v43 + 33);
        *((_OWORD *)v42 + 26) = v84;
        *((_OWORD *)v42 + 27) = v85;
        v92 = *((_OWORD *)v42 + 28);
        v93 = *((_OWORD *)v42 + 29);
        *((_OWORD *)v42 + 28) = v86;
        *((_OWORD *)v42 + 29) = v87;
        v94 = *((_OWORD *)v42 + 30);
        v95 = *((_OWORD *)v42 + 31);
        *((_OWORD *)v42 + 30) = v88;
        *((_OWORD *)v42 + 31) = v89;
        *((_OWORD *)v42 + 32) = v90;
        *((_OWORD *)v42 + 33) = v91;
        v96 = *((_OWORD *)v43 + 35);
        *((_OWORD *)v42 + 34) = *((_OWORD *)v43 + 34);
        *((_OWORD *)v42 + 35) = v96;
        v97 = *((_OWORD *)v43 + 37);
        *((_OWORD *)v42 + 36) = *((_OWORD *)v43 + 36);
        *((_OWORD *)v42 + 37) = v97;
        v98 = *((_OWORD *)v43 + 39);
        *((_OWORD *)v42 + 38) = *((_OWORD *)v43 + 38);
        *((_OWORD *)v42 + 39) = v98;
        v99 = *((_OWORD *)v43 + 41);
        *((_OWORD *)v42 + 40) = *((_OWORD *)v43 + 40);
        *((_OWORD *)v42 + 41) = v99;
        v100 = *((_OWORD *)v43 + 43);
        *((_OWORD *)v42 + 42) = *((_OWORD *)v43 + 42);
        *((_OWORD *)v42 + 43) = v100;
        v101 = *((_OWORD *)v43 + 45);
        *((_OWORD *)v42 + 44) = *((_OWORD *)v43 + 44);
        *((_OWORD *)v42 + 45) = v101;
        v102 = *((_OWORD *)v43 + 47);
        *((_OWORD *)v42 + 46) = *((_OWORD *)v43 + 46);
        *((_OWORD *)v42 + 47) = v102;
        v103 = *((_OWORD *)v43 + 49);
        *((_OWORD *)v42 + 48) = *((_OWORD *)v43 + 48);
        *((_OWORD *)v42 + 49) = v103;
        v104 = *((_OWORD *)v43 + 51);
        *((_OWORD *)v42 + 50) = *((_OWORD *)v43 + 50);
        *((_OWORD *)v42 + 51) = v104;
        v105 = *((_DWORD *)v43 + 208);
        *((_WORD *)v42 + 418) = *((_WORD *)v43 + 418);
        *((_DWORD *)v42 + 208) = v105;
        sub_100020E24(v44, v45, v46, v47, v48, v49, v50, v51, v247, *((uint64_t *)&v247 + 1), v234, *((uint64_t *)&v234 + 1), v232, *((uint64_t *)&v232 + 1), v230, *((uint64_t *)&v230 + 1), v228, *((uint64_t *)&v228 + 1), v226,
          *((uint64_t *)&v226 + 1),
          v224,
          *((uint64_t *)&v224 + 1),
          v222,
          *((uint64_t *)&v222 + 1),
          v220,
          *((uint64_t *)&v220 + 1),
          v218,
          *((uint64_t *)&v218 + 1),
          v216,
          *((uint64_t *)&v216 + 1),
          v214,
          *((uint64_t *)&v214 + 1),
          v212,
          *((uint64_t *)&v212 + 1),
          v210,
          *((uint64_t *)&v210 + 1),
          v209,
          *((uint64_t *)&v209 + 1),
          v208,
          *((uint64_t *)&v208 + 1),
          v207,
          *((uint64_t *)&v207 + 1),
          v52,
          *((uint64_t *)&v52 + 1),
          v53,
          *((uint64_t *)&v53 + 1),
          v54,
          *((uint64_t *)&v54 + 1),
          v55,
          *((uint64_t *)&v55 + 1),
          v56,
          *((uint64_t *)&v56 + 1),
          v57,
          *((uint64_t *)&v57 + 1),
          v58,
          *((uint64_t *)&v58 + 1),
          v92,
          *((uint64_t *)&v92 + 1),
          v93,
          *((uint64_t *)&v93 + 1),
          v94,
          *((uint64_t *)&v94 + 1),
          v95);
        *((_BYTE *)v8 + v10[8]) = *((_BYTE *)v9 + v10[8]);
        v5 = v239;
        v4 = v236;
        a3 = v243;
        goto LABEL_17;
      }
    }
    else
    {
      if (!v34)
      {
        v203 = type metadata accessor for URL(0);
        v204 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v203 - 8) + 40);
        v204(v28, v29, v203);
        v204(&v28[*(int *)(v30 + 20)], &v29[*(int *)(v30 + 20)], v203);
        goto LABEL_16;
      }
      sub_1000258F8((uint64_t)v28, type metadata accessor for MeasurementCapture);
    }
    v40 = sub_10000EDC8((uint64_t *)&unk_1004862E0);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    goto LABEL_16;
  }
  if (v14)
  {
LABEL_7:
    v22 = sub_10000EDC8((uint64_t *)&unk_100488B90);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_17;
  }
  v242 = a3;
  v245 = v11;
  v15 = *((_OWORD *)v9 + 1);
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *((_OWORD *)v8 + 1) = v15;
  v16 = v10[6];
  v17 = (char *)v8 + v16;
  v18 = (char *)v9 + v16;
  v19 = type metadata accessor for MeasurementCapture(0);
  v20 = *(_QWORD *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
  {
    v21 = sub_10000EDC8((uint64_t *)&unk_1004862E0);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    v240 = v5;
    v37 = type metadata accessor for URL(0);
    v237 = v4;
    v38 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32);
    v38(v17, v18, v37);
    v39 = v37;
    v5 = v240;
    v38(&v17[*(int *)(v19 + 20)], &v18[*(int *)(v19 + 20)], v39);
    v4 = v237;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  a3 = v242;
  memcpy((char *)v8 + v10[7], (char *)v9 + v10[7], 0x346uLL);
  *((_BYTE *)v8 + v10[8]) = *((_BYTE *)v9 + v10[8]);
  v11 = v245;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v245 + 56))(v8, 0, 1, v10);
LABEL_17:
  v106 = *(int *)(a3 + 24);
  v107 = (_QWORD *)((char *)v5 + v106);
  v108 = (_QWORD *)((char *)v4 + v106);
  v109 = v12((_QWORD *)((char *)v5 + v106), 1, v10);
  v110 = v12(v108, 1, v10);
  if (!v109)
  {
    if (v110)
    {
      sub_1000258F8((uint64_t)v107, type metadata accessor for MeasurementHistoryItem);
      goto LABEL_23;
    }
    v119 = v108[1];
    v120 = v107[1];
    *v107 = *v108;
    v107[1] = v119;
    swift_bridgeObjectRelease(v120);
    v121 = v108[3];
    v122 = v107[3];
    v107[2] = v108[2];
    v107[3] = v121;
    swift_bridgeObjectRelease(v122);
    v123 = v10[6];
    v124 = (char *)v107 + v123;
    v125 = (char *)v108 + v123;
    v126 = type metadata accessor for MeasurementCapture(0);
    v127 = *(_QWORD *)(v126 - 8);
    v128 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v127 + 48);
    v129 = v128(v124, 1, v126);
    v130 = v128(v125, 1, v126);
    if (v129)
    {
      if (!v130)
      {
        v131 = type metadata accessor for URL(0);
        v132 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v131 - 8) + 32);
        v132(v124, v125, v131);
        v132(&v124[*(int *)(v126 + 20)], &v125[*(int *)(v126 + 20)], v131);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v127 + 56))(v124, 0, 1, v126);
LABEL_32:
        v137 = v10[7];
        v138 = (char *)v107 + v137;
        v139 = (char *)v108 + v137;
        v140 = *(_QWORD *)v138;
        v141 = *((_QWORD *)v138 + 1);
        v142 = *((_QWORD *)v138 + 2);
        v143 = *((_QWORD *)v138 + 3);
        v144 = *((_QWORD *)v138 + 4);
        v145 = *((_QWORD *)v138 + 5);
        v146 = *((_QWORD *)v138 + 6);
        v147 = *((_QWORD *)v138 + 7);
        v244 = *((_OWORD *)v138 + 5);
        v249 = *((_OWORD *)v138 + 4);
        v238 = *((_OWORD *)v138 + 7);
        v241 = *((_OWORD *)v138 + 6);
        v233 = *((_OWORD *)v138 + 9);
        v235 = *((_OWORD *)v138 + 8);
        v229 = *((_OWORD *)v138 + 11);
        v231 = *((_OWORD *)v138 + 10);
        v225 = *((_OWORD *)v138 + 13);
        v227 = *((_OWORD *)v138 + 12);
        v221 = *((_OWORD *)v138 + 15);
        v223 = *((_OWORD *)v138 + 14);
        v217 = *((_OWORD *)v138 + 17);
        v219 = *((_OWORD *)v138 + 16);
        v213 = *((_OWORD *)v138 + 19);
        v215 = *((_OWORD *)v138 + 18);
        v148 = *((_OWORD *)v138 + 21);
        v211 = *((_OWORD *)v138 + 20);
        v149 = *((_OWORD *)v138 + 22);
        v150 = *((_OWORD *)v138 + 23);
        v151 = *((_OWORD *)v138 + 24);
        v152 = *((_OWORD *)v138 + 25);
        v153 = *((_OWORD *)v138 + 26);
        v154 = *((_OWORD *)v138 + 27);
        v155 = *((_OWORD *)v139 + 1);
        v156 = *((_OWORD *)v139 + 2);
        v157 = *((_OWORD *)v139 + 3);
        v158 = *((_OWORD *)v139 + 4);
        v159 = *((_OWORD *)v139 + 5);
        v160 = *((_OWORD *)v139 + 6);
        v161 = *((_OWORD *)v139 + 7);
        *(_OWORD *)v138 = *(_OWORD *)v139;
        *((_OWORD *)v138 + 1) = v155;
        v162 = *((_OWORD *)v139 + 8);
        v163 = *((_OWORD *)v139 + 9);
        *((_OWORD *)v138 + 2) = v156;
        *((_OWORD *)v138 + 3) = v157;
        v164 = *((_OWORD *)v139 + 10);
        v165 = *((_OWORD *)v139 + 11);
        *((_OWORD *)v138 + 4) = v158;
        *((_OWORD *)v138 + 5) = v159;
        v166 = *((_OWORD *)v139 + 12);
        v167 = *((_OWORD *)v139 + 13);
        *((_OWORD *)v138 + 6) = v160;
        *((_OWORD *)v138 + 7) = v161;
        v168 = *((_OWORD *)v139 + 14);
        v169 = *((_OWORD *)v139 + 15);
        *((_OWORD *)v138 + 8) = v162;
        *((_OWORD *)v138 + 9) = v163;
        v170 = *((_OWORD *)v139 + 16);
        v171 = *((_OWORD *)v139 + 17);
        *((_OWORD *)v138 + 10) = v164;
        *((_OWORD *)v138 + 11) = v165;
        v172 = *((_OWORD *)v139 + 18);
        v173 = *((_OWORD *)v139 + 19);
        *((_OWORD *)v138 + 12) = v166;
        *((_OWORD *)v138 + 13) = v167;
        v174 = *((_OWORD *)v139 + 20);
        v175 = *((_OWORD *)v139 + 21);
        *((_OWORD *)v138 + 14) = v168;
        *((_OWORD *)v138 + 15) = v169;
        v176 = *((_OWORD *)v139 + 22);
        v177 = *((_OWORD *)v139 + 23);
        *((_OWORD *)v138 + 16) = v170;
        *((_OWORD *)v138 + 17) = v171;
        v178 = *((_OWORD *)v139 + 24);
        v179 = *((_OWORD *)v139 + 25);
        *((_OWORD *)v138 + 18) = v172;
        *((_OWORD *)v138 + 19) = v173;
        v180 = *((_OWORD *)v139 + 26);
        v181 = *((_OWORD *)v139 + 27);
        *((_OWORD *)v138 + 20) = v174;
        *((_OWORD *)v138 + 21) = v175;
        v182 = *((_OWORD *)v139 + 28);
        v183 = *((_OWORD *)v139 + 29);
        *((_OWORD *)v138 + 22) = v176;
        *((_OWORD *)v138 + 23) = v177;
        v184 = *((_OWORD *)v139 + 30);
        v185 = *((_OWORD *)v139 + 31);
        *((_OWORD *)v138 + 24) = v178;
        *((_OWORD *)v138 + 25) = v179;
        v186 = *((_OWORD *)v139 + 32);
        v187 = *((_OWORD *)v139 + 33);
        *((_OWORD *)v138 + 26) = v180;
        *((_OWORD *)v138 + 27) = v181;
        v188 = *((_OWORD *)v138 + 28);
        v189 = *((_OWORD *)v138 + 29);
        *((_OWORD *)v138 + 28) = v182;
        *((_OWORD *)v138 + 29) = v183;
        v190 = *((_OWORD *)v138 + 30);
        v191 = *((_OWORD *)v138 + 31);
        *((_OWORD *)v138 + 30) = v184;
        *((_OWORD *)v138 + 31) = v185;
        *((_OWORD *)v138 + 32) = v186;
        *((_OWORD *)v138 + 33) = v187;
        v192 = *((_OWORD *)v139 + 35);
        *((_OWORD *)v138 + 34) = *((_OWORD *)v139 + 34);
        *((_OWORD *)v138 + 35) = v192;
        v193 = *((_OWORD *)v139 + 37);
        *((_OWORD *)v138 + 36) = *((_OWORD *)v139 + 36);
        *((_OWORD *)v138 + 37) = v193;
        v194 = *((_OWORD *)v139 + 39);
        *((_OWORD *)v138 + 38) = *((_OWORD *)v139 + 38);
        *((_OWORD *)v138 + 39) = v194;
        v195 = *((_OWORD *)v139 + 41);
        *((_OWORD *)v138 + 40) = *((_OWORD *)v139 + 40);
        *((_OWORD *)v138 + 41) = v195;
        v196 = *((_OWORD *)v139 + 43);
        *((_OWORD *)v138 + 42) = *((_OWORD *)v139 + 42);
        *((_OWORD *)v138 + 43) = v196;
        v197 = *((_OWORD *)v139 + 45);
        *((_OWORD *)v138 + 44) = *((_OWORD *)v139 + 44);
        *((_OWORD *)v138 + 45) = v197;
        v198 = *((_OWORD *)v139 + 47);
        *((_OWORD *)v138 + 46) = *((_OWORD *)v139 + 46);
        *((_OWORD *)v138 + 47) = v198;
        v199 = *((_OWORD *)v139 + 49);
        *((_OWORD *)v138 + 48) = *((_OWORD *)v139 + 48);
        *((_OWORD *)v138 + 49) = v199;
        v200 = *((_OWORD *)v139 + 51);
        *((_OWORD *)v138 + 50) = *((_OWORD *)v139 + 50);
        *((_OWORD *)v138 + 51) = v200;
        v201 = *((_DWORD *)v139 + 208);
        *((_WORD *)v138 + 418) = *((_WORD *)v139 + 418);
        *((_DWORD *)v138 + 208) = v201;
        sub_100020E24(v140, v141, v142, v143, v144, v145, v146, v147, v249, *((uint64_t *)&v249 + 1), v244, *((uint64_t *)&v244 + 1), v241, *((uint64_t *)&v241 + 1), v238, *((uint64_t *)&v238 + 1), v235, *((uint64_t *)&v235 + 1), v233,
          *((uint64_t *)&v233 + 1),
          v231,
          *((uint64_t *)&v231 + 1),
          v229,
          *((uint64_t *)&v229 + 1),
          v227,
          *((uint64_t *)&v227 + 1),
          v225,
          *((uint64_t *)&v225 + 1),
          v223,
          *((uint64_t *)&v223 + 1),
          v221,
          *((uint64_t *)&v221 + 1),
          v219,
          *((uint64_t *)&v219 + 1),
          v217,
          *((uint64_t *)&v217 + 1),
          v215,
          *((uint64_t *)&v215 + 1),
          v213,
          *((uint64_t *)&v213 + 1),
          v211,
          *((uint64_t *)&v211 + 1),
          v148,
          *((uint64_t *)&v148 + 1),
          v149,
          *((uint64_t *)&v149 + 1),
          v150,
          *((uint64_t *)&v150 + 1),
          v151,
          *((uint64_t *)&v151 + 1),
          v152,
          *((uint64_t *)&v152 + 1),
          v153,
          *((uint64_t *)&v153 + 1),
          v154,
          *((uint64_t *)&v154 + 1),
          v188,
          *((uint64_t *)&v188 + 1),
          v189,
          *((uint64_t *)&v189 + 1),
          v190,
          *((uint64_t *)&v190 + 1),
          v191);
        *((_BYTE *)v107 + v10[8]) = *((_BYTE *)v108 + v10[8]);
        return v5;
      }
    }
    else
    {
      if (!v130)
      {
        v205 = type metadata accessor for URL(0);
        v206 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v205 - 8) + 40);
        v206(v124, v125, v205);
        v206(&v124[*(int *)(v126 + 20)], &v125[*(int *)(v126 + 20)], v205);
        goto LABEL_32;
      }
      sub_1000258F8((uint64_t)v124, type metadata accessor for MeasurementCapture);
    }
    v136 = sub_10000EDC8((uint64_t *)&unk_1004862E0);
    memcpy(v124, v125, *(_QWORD *)(*(_QWORD *)(v136 - 8) + 64));
    goto LABEL_32;
  }
  if (v110)
  {
LABEL_23:
    v118 = sub_10000EDC8((uint64_t *)&unk_100488B90);
    memcpy(v107, v108, *(_QWORD *)(*(_QWORD *)(v118 - 8) + 64));
    return v5;
  }
  v111 = *((_OWORD *)v108 + 1);
  *(_OWORD *)v107 = *(_OWORD *)v108;
  *((_OWORD *)v107 + 1) = v111;
  v112 = v10[6];
  v113 = (char *)v107 + v112;
  v114 = (char *)v108 + v112;
  v115 = type metadata accessor for MeasurementCapture(0);
  v116 = *(_QWORD *)(v115 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v116 + 48))(v114, 1, v115))
  {
    v117 = sub_10000EDC8((uint64_t *)&unk_1004862E0);
    memcpy(v113, v114, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
  }
  else
  {
    v248 = v11;
    v133 = type metadata accessor for URL(0);
    v134 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v133 - 8) + 32);
    v134(v113, v114, v133);
    v135 = v133;
    v11 = v248;
    v134(&v113[*(int *)(v115 + 20)], &v114[*(int *)(v115 + 20)], v135);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v116 + 56))(v113, 0, 1, v115);
  }
  memcpy((char *)v107 + v10[7], (char *)v108 + v10[7], 0x346uLL);
  *((_BYTE *)v107 + v10[8]) = *((_BYTE *)v108 + v10[8]);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v11 + 56))(v107, 0, 1, v10);
  return v5;
}

uint64_t sub_10008B578(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10008B584);
}

uint64_t sub_10008B584(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_10000EDC8((uint64_t *)&unk_100488B90);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_10008B604(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008B610);
}

char *sub_10008B610(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_10000EDC8((uint64_t *)&unk_100488B90);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for MeasurementsHistory(uint64_t a1)
{
  uint64_t result;

  result = qword_10047FD98;
  if (!qword_10047FD98)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MeasurementsHistory);
  return result;
}

void sub_10008B6C4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (char *)&value witness table for Builtin.BridgeObject + 64;
  sub_10008B73C(319);
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(v2 - 8) + 64;
    v6 = v5;
    swift_initStructMetadata(a1, 256, 3, &v4, a1 + 16);
  }
}

void sub_10008B73C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10047FDA8)
  {
    v2 = type metadata accessor for MeasurementHistoryItem(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10047FDA8);
  }
}

id sub_10008B790(uint64_t a1)
{
  return sub_10008B834(a1, &qword_1004AF298);
}

id sub_10008B79C@<X0>(void **a1@<X8>)
{
  return sub_10008B8BC(&qword_10047A940, (void **)&qword_1004AF298, (uint64_t)sub_10008B790, a1);
}

unint64_t sub_10008B7BC(uint64_t a1)
{
  unint64_t result;

  result = sub_10008B7E0();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10008B7E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10047FE08;
  if (!qword_10047FE08)
  {
    v1 = type metadata accessor for MeasurementsHistory(255);
    result = swift_getWitnessTable(&unk_1003B4004, v1);
    atomic_store(result, (unint64_t *)&qword_10047FE08);
  }
  return result;
}

id sub_10008B828(uint64_t a1)
{
  return sub_10008B834(a1, &qword_1004AF2A0);
}

id sub_10008B834(uint64_t a1, _QWORD *a2)
{
  id result;
  id v4;

  if (qword_10047A930 != -1)
    swift_once(&qword_10047A930, sub_100083368);
  result = (id)*((_QWORD *)&xmmword_1004AF258 + 1);
  if (*((_QWORD *)&xmmword_1004AF258 + 1))
  {
    v4 = (id)*((_QWORD *)&xmmword_1004AF258 + 1);
    *a2 = Contexts.PrivateQueue.init(_:)(*((_QWORD *)&xmmword_1004AF258 + 1));
    return v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_10008B8A0@<X0>(void **a1@<X8>)
{
  return sub_10008B8BC(&qword_10047A948, (void **)&qword_1004AF2A0, (uint64_t)sub_10008B828, a1);
}

id sub_10008B8BC@<X0>(_QWORD *a1@<X2>, void **a2@<X3>, uint64_t a3@<X4>, void **a4@<X8>)
{
  void *v6;

  if (*a1 != -1)
    swift_once(a1, a3);
  v6 = *a2;
  *a4 = *a2;
  return v6;
}

uint64_t sub_10008B900(void **a1, void **a2)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  char v6;

  v2 = *a1;
  v3 = *a2;
  if (*a1)
  {
    if (v3)
    {
      type metadata accessor for MeasureObject(0);
      v4 = v3;
      v5 = v2;
      v6 = static NSObject.== infix(_:_:)(v5, v4);

      if ((v6 & 1) != 0)
        return 1;
    }
  }
  else if (!v3)
  {
    return 1;
  }
  return 0;
}

unint64_t sub_10008B974(uint64_t a1)
{
  unint64_t result;

  result = sub_10008B998();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10008B998()
{
  unint64_t result;

  result = qword_10047FE38;
  if (!qword_10047FE38)
  {
    result = swift_getWitnessTable(&unk_1003B4048, &type metadata for MeasurementsHistoryLastConfirmed);
    atomic_store(result, (unint64_t *)&qword_10047FE38);
  }
  return result;
}

BOOL sub_10008B9DC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v50;
  char v51;
  _QWORD *v52;
  char *v53;
  char *v54;
  char *v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;

  v61 = a2;
  v3 = type metadata accessor for MeasurementHistoryItem(0);
  v58 = *(_QWORD *)(v3 - 8);
  v59 = v3;
  __chkstk_darwin(v3);
  v57 = (_QWORD **)((char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v60 = sub_10000EDC8(&qword_10047FE40);
  v5 = __chkstk_darwin(v60);
  v7 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v52 - v8;
  v10 = sub_10000EDC8((uint64_t *)&unk_100488B90);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v52 - v15;
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v52 - v18;
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v52 - v21;
  v23 = __chkstk_darwin(v20);
  v25 = (char *)&v52 - v24;
  __chkstk_darwin(v23);
  v27 = (char *)&v52 - v26;
  v28 = a1;
  v29 = *a1;
  v30 = v61;
  if ((sub_100074BA4(v29, *v61) & 1) == 0)
    return 0;
  v55 = v7;
  v56 = v22;
  v53 = v16;
  v54 = v19;
  v52 = v13;
  v31 = type metadata accessor for MeasurementsHistory(0);
  sub_10008BEE0((uint64_t)v28 + *(int *)(v31 + 20), (uint64_t)v27);
  v32 = v30;
  sub_10008BEE0((uint64_t)v30 + *(int *)(v31 + 20), (uint64_t)v25);
  v33 = (uint64_t)&v9[*(int *)(v60 + 48)];
  sub_10008BEE0((uint64_t)v27, (uint64_t)v9);
  sub_10008BEE0((uint64_t)v25, v33);
  v34 = v59;
  v35 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v58 + 48);
  v36 = v28;
  v37 = (uint64_t)v9;
  if (v35((uint64_t)v9, 1, v59) != 1)
  {
    v38 = (uint64_t)v9;
    v39 = v56;
    sub_10008BEE0(v38, (uint64_t)v56);
    if (v35(v33, 1, v34) != 1)
    {
      v41 = v33;
      v42 = v57;
      sub_10008BF28(v41, (uint64_t)v57);
      LODWORD(v58) = sub_1001ADF08(v39, v42);
      sub_1000258F8((uint64_t)v42, type metadata accessor for MeasurementHistoryItem);
      sub_100036600((uint64_t)v25, (uint64_t *)&unk_100488B90);
      sub_100036600((uint64_t)v27, (uint64_t *)&unk_100488B90);
      sub_1000258F8((uint64_t)v39, type metadata accessor for MeasurementHistoryItem);
      sub_100036600(v37, (uint64_t *)&unk_100488B90);
      if ((v58 & 1) == 0)
        return 0;
      goto LABEL_9;
    }
    sub_100036600((uint64_t)v25, (uint64_t *)&unk_100488B90);
    sub_100036600((uint64_t)v27, (uint64_t *)&unk_100488B90);
    sub_1000258F8((uint64_t)v39, type metadata accessor for MeasurementHistoryItem);
LABEL_7:
    v40 = v37;
LABEL_15:
    sub_100036600(v40, &qword_10047FE40);
    return 0;
  }
  sub_100036600((uint64_t)v25, (uint64_t *)&unk_100488B90);
  sub_100036600((uint64_t)v27, (uint64_t *)&unk_100488B90);
  if (v35(v33, 1, v34) != 1)
    goto LABEL_7;
  sub_100036600((uint64_t)v9, (uint64_t *)&unk_100488B90);
LABEL_9:
  v43 = (uint64_t)v54;
  sub_10008BEE0((uint64_t)v36 + *(int *)(v31 + 24), (uint64_t)v54);
  v44 = (uint64_t)v32 + *(int *)(v31 + 24);
  v45 = (uint64_t)v53;
  sub_10008BEE0(v44, (uint64_t)v53);
  v46 = (uint64_t)v55;
  v47 = (uint64_t)&v55[*(int *)(v60 + 48)];
  sub_10008BEE0(v43, (uint64_t)v55);
  sub_10008BEE0(v45, v47);
  if (v35(v46, 1, v34) == 1)
  {
    sub_100036600(v45, (uint64_t *)&unk_100488B90);
    sub_100036600(v43, (uint64_t *)&unk_100488B90);
    if (v35(v47, 1, v34) == 1)
    {
      sub_100036600(v46, (uint64_t *)&unk_100488B90);
      return 1;
    }
    goto LABEL_14;
  }
  v48 = v52;
  sub_10008BEE0(v46, (uint64_t)v52);
  if (v35(v47, 1, v34) == 1)
  {
    sub_100036600(v45, (uint64_t *)&unk_100488B90);
    sub_100036600(v43, (uint64_t *)&unk_100488B90);
    sub_1000258F8((uint64_t)v48, type metadata accessor for MeasurementHistoryItem);
LABEL_14:
    v40 = v46;
    goto LABEL_15;
  }
  v50 = v57;
  sub_10008BF28(v47, (uint64_t)v57);
  v51 = sub_1001ADF08(v48, v50);
  sub_1000258F8((uint64_t)v50, type metadata accessor for MeasurementHistoryItem);
  sub_100036600(v45, (uint64_t *)&unk_100488B90);
  sub_100036600(v43, (uint64_t *)&unk_100488B90);
  sub_1000258F8((uint64_t)v48, type metadata accessor for MeasurementHistoryItem);
  sub_100036600(v46, (uint64_t *)&unk_100488B90);
  return (v51 & 1) != 0;
}

uint64_t sub_10008BEE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000EDC8((uint64_t *)&unk_100488B90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10008BF28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MeasurementHistoryItem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10008BF70(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v2 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v3 = a1;
    else
      v3 = a1 & 0xFFFFFFFFFFFFFF8;
    v4 = __CocoaSet.startIndex.getter(v3);
    v6 = v5;
    v7 = __CocoaSet.endIndex.getter(v3);
    v9 = static __CocoaSet.Index.== infix(_:_:)(v4, v6, v7, v8);
    swift_bridgeObjectRelease(v7);
    if ((v9 & 1) != 0)
      goto LABEL_6;
    goto LABEL_10;
  }
  result = sub_10008C610(a1);
  if ((v13 & 1) == 0)
  {
    v6 = v12;
    if (*(_DWORD *)(a1 + 36) == (_DWORD)v12)
    {
      v4 = result;
      if (result == 1 << *(_BYTE *)(a1 + 32))
      {
LABEL_6:
        sub_10008C604(v4, v6, v2 != 0);
        return 0;
      }
LABEL_10:
      sub_10008C3BC(v4, v6, v2 != 0, a1);
      v10 = v14;
      sub_10008C604(v4, v6, v2 != 0);
      return v10;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_10008C07C(uint64_t a1, uint64_t a2)
{
  char *v2;
  objc_class *ObjectType;
  Class isa;
  uint64_t v7;
  void *v8;
  double v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  objc_super v16;

  ObjectType = (objc_class *)swift_getObjectType(v2);
  sub_10001AD70();
  sub_10001ADAC();
  isa = Set._bridgeToObjectiveC()().super.isa;
  v16.receiver = v2;
  v16.super_class = ObjectType;
  objc_msgSendSuper2(&v16, "touchesBegan:withEvent:", isa, a2);

  v7 = swift_bridgeObjectRetain(a1);
  v8 = (void *)sub_10008BF70(v7);
  *(_QWORD *)&v9 = swift_bridgeObjectRelease(a1).n128_u64[0];
  if (v8)
  {
    v10 = objc_msgSend(v2, "view", v9);
    objc_msgSend(v8, "locationInView:", v10);
    v12 = v11;
    v14 = v13;

    v15 = &v2[OBJC_IVAR____TtC7Measure29PanRecognizerWithInitialTouch_initialTouchLocation];
    *(_QWORD *)v15 = v12;
    *((_QWORD *)v15 + 1) = v14;
    v15[16] = 0;
  }
  else
  {
    __break(1u);
  }
}

id sub_10008C1F8(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  objc_class *ObjectType;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  id v14;
  objc_super v16;
  _QWORD v17[3];
  uint64_t v18;

  v3 = v2;
  ObjectType = (objc_class *)swift_getObjectType(v3);
  v7 = &v3[OBJC_IVAR____TtC7Measure29PanRecognizerWithInitialTouch_initialTouchLocation];
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  v7[16] = 1;
  sub_10002C9F4(a1, (uint64_t)v17);
  v8 = v18;
  if (v18)
  {
    v9 = sub_10000F66C(v17, v18);
    v10 = *(_QWORD *)(v8 - 8);
    __chkstk_darwin(v9);
    v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v10 + 16))(v12);
    v13 = _bridgeAnythingToObjectiveC<A>(_:)(v12, v8);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v8);
    sub_10000F690(v17);
  }
  else
  {
    v13 = 0;
  }
  v16.receiver = v3;
  v16.super_class = ObjectType;
  v14 = objc_msgSendSuper2(&v16, "initWithTarget:action:", v13, a2);
  swift_unknownObjectRelease(v13);
  sub_100018180(a1);
  return v14;
}

uint64_t type metadata accessor for PanRecognizerWithInitialTouch()
{
  return objc_opt_self(_TtC7Measure29PanRecognizerWithInitialTouch);
}

void sub_10008C3BC(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  void *v4;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  id v15;
  char v16;
  uint64_t v17;
  id v18;
  char v19;
  id v20;
  uint64_t v21;
  void *v22;

  v7 = a1;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if ((a3 & 1) != 0)
      goto LABEL_13;
    if (a1 < 0 || 1 << *(_BYTE *)(a4 + 32) <= a1)
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(a4 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> a1) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
        goto LABEL_20;
      __break(1u);
LABEL_13:
      if (__CocoaSet.Index.age.getter(a1, a2) == *(_DWORD *)(a4 + 36))
      {
        v11 = __CocoaSet.Index.element.getter(v7, a2);
        v21 = v11;
        v12 = sub_10001AD70();
        swift_unknownObjectRetain(v11);
        swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v12, 7);
        v4 = v22;
        swift_unknownObjectRelease(v11);
        v13 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a4 + 40));
        v14 = -1 << *(_BYTE *)(a4 + 32);
        v7 = v13 & ~v14;
        if (((*(_QWORD *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
        {
          v15 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
          v16 = static NSObject.== infix(_:_:)(v15, v4);

          if ((v16 & 1) == 0)
          {
            v17 = ~v14;
            do
            {
              v7 = (v7 + 1) & v17;
              if (((*(_QWORD *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
                goto LABEL_24;
              v18 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
              v19 = static NSObject.== infix(_:_:)(v18, v4);

            }
            while ((v19 & 1) == 0);
          }

LABEL_20:
          v20 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
          return;
        }
LABEL_24:

        __break(1u);
        goto LABEL_25;
      }
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    __break(1u);
    goto LABEL_23;
  }
  if ((a3 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    return;
  }
  if (a4 < 0)
    v8 = a4;
  else
    v8 = a4 & 0xFFFFFFFFFFFFFF8;
  v9 = __CocoaSet.element(at:)(a1, a2, v8);
  v21 = v9;
  v10 = sub_10001AD70();
  swift_unknownObjectRetain(v9);
  swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
  swift_unknownObjectRelease(v9);
}

uint64_t sub_10008C604(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t sub_10008C610(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 72);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

_QWORD *sub_10008C698(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int16 v61;
  int v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    v17 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    v8 = type metadata accessor for MeasurementHistoryItem(0);
    v9 = *(int *)(v8 + 24);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for MeasurementCapture(0);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    if (v14(v11, 1, v12))
    {
      v15 = sub_10000EDC8((uint64_t *)&unk_1004862E0);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      v18 = type metadata accessor for URL(0);
      v19 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
      v19(v10, v11, v18);
      v19(&v10[*(int *)(v12 + 20)], &v11[*(int *)(v12 + 20)], v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v20 = *(int *)(v8 + 28);
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v65 = v8;
    v64 = a2;
    v135 = *((_QWORD *)v22 + 10);
    v136 = *((_QWORD *)v22 + 9);
    v133 = *((_QWORD *)v22 + 12);
    v134 = *((_QWORD *)v22 + 11);
    v131 = *((_QWORD *)v22 + 14);
    v132 = *((_QWORD *)v22 + 13);
    v129 = *((_QWORD *)v22 + 16);
    v130 = *((_QWORD *)v22 + 15);
    v127 = *((_QWORD *)v22 + 18);
    v128 = *((_QWORD *)v22 + 17);
    v125 = *((_QWORD *)v22 + 20);
    v126 = *((_QWORD *)v22 + 19);
    v123 = *((_QWORD *)v22 + 22);
    v124 = *((_QWORD *)v22 + 21);
    v121 = *((_QWORD *)v22 + 24);
    v122 = *((_QWORD *)v22 + 23);
    v119 = *((_QWORD *)v22 + 26);
    v120 = *((_QWORD *)v22 + 25);
    v117 = *((_QWORD *)v22 + 28);
    v118 = *((_QWORD *)v22 + 27);
    v116 = *((_QWORD *)v22 + 29);
    v115 = *((_QWORD *)v22 + 30);
    v114 = *((_QWORD *)v22 + 31);
    v113 = *((_QWORD *)v22 + 32);
    v112 = *((_QWORD *)v22 + 33);
    v111 = *((_QWORD *)v22 + 34);
    v110 = *((_QWORD *)v22 + 35);
    v109 = *((_QWORD *)v22 + 36);
    v108 = *((_QWORD *)v22 + 37);
    v107 = *((_QWORD *)v22 + 38);
    v106 = *((_QWORD *)v22 + 39);
    v105 = *((_QWORD *)v22 + 40);
    v104 = *((_QWORD *)v22 + 41);
    v103 = *((_QWORD *)v22 + 42);
    v102 = *((_QWORD *)v22 + 43);
    v101 = *((_QWORD *)v22 + 44);
    v100 = *((_QWORD *)v22 + 45);
    v99 = *((_QWORD *)v22 + 46);
    v98 = *((_QWORD *)v22 + 47);
    v97 = *((_QWORD *)v22 + 48);
    v96 = *((_QWORD *)v22 + 49);
    v95 = *((_QWORD *)v22 + 50);
    v94 = *((_QWORD *)v22 + 51);
    v93 = *((_QWORD *)v22 + 52);
    v92 = *((_QWORD *)v22 + 53);
    v91 = *((_QWORD *)v22 + 54);
    v90 = *((_QWORD *)v22 + 55);
    v89 = *((_QWORD *)v22 + 56);
    v88 = *((_QWORD *)v22 + 57);
    v87 = *((_QWORD *)v22 + 58);
    v86 = *((_QWORD *)v22 + 59);
    v85 = *((_QWORD *)v22 + 60);
    v84 = *((_QWORD *)v22 + 61);
    v83 = *((_QWORD *)v22 + 62);
    v82 = *((_QWORD *)v22 + 63);
    v81 = *((_QWORD *)v22 + 64);
    v80 = *((_QWORD *)v22 + 65);
    v79 = *((_QWORD *)v22 + 66);
    v78 = *((_QWORD *)v22 + 67);
    v77 = *((_QWORD *)v22 + 68);
    v76 = *((_QWORD *)v22 + 69);
    v63 = a1;
    v75 = *((_QWORD *)v22 + 70);
    v74 = *((_QWORD *)v22 + 71);
    v73 = *((_QWORD *)v22 + 72);
    v72 = *((_QWORD *)v22 + 73);
    v71 = *((_QWORD *)v22 + 74);
    v70 = *((_QWORD *)v22 + 75);
    v69 = *((_QWORD *)v22 + 76);
    v68 = *((_QWORD *)v22 + 77);
    v67 = *((_QWORD *)v22 + 78);
    v36 = *((_QWORD *)v22 + 79);
    v37 = *((_QWORD *)v22 + 80);
    v38 = *((_QWORD *)v22 + 81);
    v39 = *((_QWORD *)v22 + 82);
    v40 = *((_QWORD *)v22 + 83);
    v41 = *((_QWORD *)v22 + 84);
    v42 = *((_QWORD *)v22 + 85);
    v43 = *((_QWORD *)v22 + 86);
    v44 = *((_QWORD *)v22 + 87);
    v45 = *((_QWORD *)v22 + 88);
    v46 = *((_QWORD *)v22 + 89);
    v47 = *((_QWORD *)v22 + 90);
    v48 = *((_QWORD *)v22 + 91);
    v49 = *((_QWORD *)v22 + 92);
    v50 = *((_QWORD *)v22 + 93);
    v51 = *((_QWORD *)v22 + 94);
    v52 = *((_QWORD *)v22 + 95);
    v53 = *((_QWORD *)v22 + 96);
    v54 = *((_QWORD *)v22 + 97);
    v55 = *((_QWORD *)v22 + 98);
    v56 = *((_QWORD *)v22 + 99);
    v57 = *((_QWORD *)v22 + 100);
    v58 = *((_QWORD *)v22 + 101);
    v59 = *((_QWORD *)v22 + 102);
    v60 = *((_QWORD *)v22 + 103);
    v61 = *((_WORD *)v22 + 418);
    v62 = *((_DWORD *)v22 + 208);
    v23 = *((_QWORD *)v22 + 8);
    v24 = *(_QWORD *)v22;
    v25 = *((_QWORD *)v22 + 1);
    v26 = *((_QWORD *)v22 + 2);
    v27 = *((_QWORD *)v22 + 3);
    v28 = *((_QWORD *)v22 + 4);
    v29 = *((_QWORD *)v22 + 5);
    v30 = *((_QWORD *)v22 + 6);
    v31 = *((_QWORD *)v22 + 7);
    sub_100085E0C(*(_QWORD *)v22, v25, v26, v27, v28, v29, v30, v31, v23, v136, v135, v134, v133, v132, v131, v130, v129, v128, v127,
      v126,
      v125,
      v124,
      v123,
      v122,
      v121,
      v120,
      v119,
      v118,
      v117,
      v116,
      v115,
      v114,
      v113,
      v112,
      v111,
      v110,
      v109,
      v108,
      v107,
      v106,
      v105,
      v104,
      v103,
      v102,
      v101,
      v100,
      v99,
      v98,
      v97,
      v96,
      v95,
      v94,
      v93,
      v92,
      v91,
      v90,
      v89,
      v88,
      v87,
      v86,
      v85,
      v84,
      v83);
    *(_QWORD *)v21 = v24;
    *((_QWORD *)v21 + 1) = v25;
    *((_QWORD *)v21 + 2) = v26;
    *((_QWORD *)v21 + 3) = v27;
    *((_QWORD *)v21 + 4) = v28;
    *((_QWORD *)v21 + 5) = v29;
    *((_QWORD *)v21 + 6) = v30;
    *((_QWORD *)v21 + 7) = v31;
    *((_QWORD *)v21 + 8) = v23;
    v17 = v63;
    *((_QWORD *)v21 + 9) = v136;
    *((_QWORD *)v21 + 10) = v135;
    *((_QWORD *)v21 + 11) = v134;
    *((_QWORD *)v21 + 12) = v133;
    *((_QWORD *)v21 + 13) = v132;
    *((_QWORD *)v21 + 14) = v131;
    *((_QWORD *)v21 + 15) = v130;
    *((_QWORD *)v21 + 16) = v129;
    *((_QWORD *)v21 + 17) = v128;
    *((_QWORD *)v21 + 18) = v127;
    *((_QWORD *)v21 + 19) = v126;
    *((_QWORD *)v21 + 20) = v125;
    *((_QWORD *)v21 + 21) = v124;
    *((_QWORD *)v21 + 22) = v123;
    *((_QWORD *)v21 + 23) = v122;
    *((_QWORD *)v21 + 24) = v121;
    *((_QWORD *)v21 + 25) = v120;
    *((_QWORD *)v21 + 26) = v119;
    *((_QWORD *)v21 + 27) = v118;
    *((_QWORD *)v21 + 28) = v117;
    *((_QWORD *)v21 + 29) = v116;
    *((_QWORD *)v21 + 30) = v115;
    *((_QWORD *)v21 + 31) = v114;
    *((_QWORD *)v21 + 32) = v113;
    *((_QWORD *)v21 + 33) = v112;
    *((_QWORD *)v21 + 34) = v111;
    *((_QWORD *)v21 + 35) = v110;
    *((_QWORD *)v21 + 36) = v109;
    *((_QWORD *)v21 + 37) = v108;
    *((_QWORD *)v21 + 38) = v107;
    *((_QWORD *)v21 + 39) = v106;
    *((_QWORD *)v21 + 40) = v105;
    *((_QWORD *)v21 + 41) = v104;
    *((_QWORD *)v21 + 42) = v103;
    *((_QWORD *)v21 + 43) = v102;
    *((_QWORD *)v21 + 44) = v101;
    *((_QWORD *)v21 + 45) = v100;
    *((_QWORD *)v21 + 46) = v99;
    *((_QWORD *)v21 + 47) = v98;
    *((_QWORD *)v21 + 48) = v97;
    *((_QWORD *)v21 + 49) = v96;
    *((_QWORD *)v21 + 50) = v95;
    *((_QWORD *)v21 + 51) = v94;
    *((_QWORD *)v21 + 52) = v93;
    *((_QWORD *)v21 + 53) = v92;
    *((_QWORD *)v21 + 54) = v91;
    *((_QWORD *)v21 + 55) = v90;
    *((_QWORD *)v21 + 56) = v89;
    *((_QWORD *)v21 + 57) = v88;
    *((_QWORD *)v21 + 58) = v87;
    *((_QWORD *)v21 + 59) = v86;
    *((_QWORD *)v21 + 60) = v85;
    *((_QWORD *)v21 + 61) = v84;
    *((_QWORD *)v21 + 62) = v83;
    *((_QWORD *)v21 + 63) = v82;
    *((_QWORD *)v21 + 64) = v81;
    *((_QWORD *)v21 + 65) = v80;
    *((_QWORD *)v21 + 66) = v79;
    *((_QWORD *)v21 + 67) = v78;
    *((_QWORD *)v21 + 68) = v77;
    *((_QWORD *)v21 + 69) = v76;
    *((_QWORD *)v21 + 70) = v75;
    *((_QWORD *)v21 + 71) = v74;
    *((_QWORD *)v21 + 72) = v73;
    *((_QWORD *)v21 + 73) = v72;
    *((_QWORD *)v21 + 74) = v71;
    *((_QWORD *)v21 + 75) = v70;
    *((_QWORD *)v21 + 76) = v69;
    *((_QWORD *)v21 + 77) = v68;
    *((_QWORD *)v21 + 78) = v67;
    *((_QWORD *)v21 + 79) = v36;
    *((_QWORD *)v21 + 80) = v37;
    *((_QWORD *)v21 + 81) = v38;
    *((_QWORD *)v21 + 82) = v39;
    *((_QWORD *)v21 + 83) = v40;
    *((_QWORD *)v21 + 84) = v41;
    *((_QWORD *)v21 + 85) = v42;
    *((_QWORD *)v21 + 86) = v43;
    *((_QWORD *)v21 + 87) = v44;
    *((_QWORD *)v21 + 88) = v45;
    *((_QWORD *)v21 + 89) = v46;
    *((_QWORD *)v21 + 90) = v47;
    *((_QWORD *)v21 + 91) = v48;
    *((_QWORD *)v21 + 92) = v49;
    *((_QWORD *)v21 + 93) = v50;
    *((_QWORD *)v21 + 94) = v51;
    *((_QWORD *)v21 + 95) = v52;
    *((_QWORD *)v21 + 96) = v53;
    *((_QWORD *)v21 + 97) = v54;
    *((_QWORD *)v21 + 98) = v55;
    *((_QWORD *)v21 + 99) = v56;
    *((_QWORD *)v21 + 100) = v57;
    *((_QWORD *)v21 + 101) = v58;
    *((_QWORD *)v21 + 102) = v59;
    *((_QWORD *)v21 + 103) = v60;
    *((_WORD *)v21 + 418) = v61;
    *((_DWORD *)v21 + 208) = v62;
    *((_BYTE *)v63 + *(int *)(v65 + 32)) = *((_BYTE *)v64 + *(int *)(v65 + 32));
    v32 = *(int *)(a3 + 20);
    v33 = *(void **)((char *)v64 + v32);
    *(_QWORD *)((char *)v63 + v32) = v33;
    v34 = v33;
  }
  return v17;
}

void sub_10008D088(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v4 = type metadata accessor for MeasurementHistoryItem(0);
  v5 = a1 + *(int *)(v4 + 24);
  v6 = type metadata accessor for MeasurementCapture(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6))
  {
    v7 = type metadata accessor for URL(0);
    v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
    v8(v5, v7);
    v8(v5 + *(int *)(v6 + 20), v7);
  }
  v9 = a1 + *(int *)(v4 + 28);
  v24 = *(_OWORD *)(v9 + 464);
  v25 = *(_OWORD *)(v9 + 480);
  v22 = *(_OWORD *)(v9 + 432);
  v23 = *(_OWORD *)(v9 + 448);
  v20 = *(_OWORD *)(v9 + 400);
  v21 = *(_OWORD *)(v9 + 416);
  v18 = *(_OWORD *)(v9 + 368);
  v19 = *(_OWORD *)(v9 + 384);
  v16 = *(_OWORD *)(v9 + 336);
  v17 = *(_OWORD *)(v9 + 352);
  v14 = *(_OWORD *)(v9 + 304);
  v15 = *(_OWORD *)(v9 + 320);
  v13 = *(_OWORD *)(v9 + 288);
  v12 = *(_OWORD *)(v9 + 272);
  v11 = *(_OWORD *)(v9 + 256);
  v10 = *(_OWORD *)(v9 + 240);
  sub_100020E24(*(_QWORD *)v9, *(_QWORD *)(v9 + 8), *(_QWORD *)(v9 + 16), *(_QWORD *)(v9 + 24), *(_QWORD *)(v9 + 32), *(_QWORD *)(v9 + 40), *(_QWORD *)(v9 + 48), *(_QWORD *)(v9 + 56), *(_QWORD *)(v9 + 64), *(_QWORD *)(v9 + 72), *(_QWORD *)(v9 + 80), *(_QWORD *)(v9 + 88), *(_QWORD *)(v9 + 96), *(_QWORD *)(v9 + 104), *(_QWORD *)(v9 + 112), *(_QWORD *)(v9 + 120), *(_QWORD *)(v9 + 128), *(_QWORD *)(v9 + 136), *(_QWORD *)(v9 + 144),
    *(_QWORD *)(v9 + 152),
    *(_QWORD *)(v9 + 160),
    *(_QWORD *)(v9 + 168),
    *(_QWORD *)(v9 + 176),
    *(_QWORD *)(v9 + 184),
    *(_QWORD *)(v9 + 192),
    *(_QWORD *)(v9 + 200),
    *(_QWORD *)(v9 + 208),
    *(_QWORD *)(v9 + 216),
    *(_QWORD *)(v9 + 224),
    *(_QWORD *)(v9 + 232),
    v10,
    *((uint64_t *)&v10 + 1),
    v11,
    *((uint64_t *)&v11 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v13,
    *((uint64_t *)&v13 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    v15,
    *((uint64_t *)&v15 + 1),
    v16,
    *((uint64_t *)&v16 + 1),
    v17,
    *((uint64_t *)&v17 + 1),
    v18,
    *((uint64_t *)&v18 + 1),
    v19,
    *((uint64_t *)&v19 + 1),
    v20,
    *((uint64_t *)&v20 + 1),
    v21,
    *((uint64_t *)&v21 + 1),
    v22,
    *((uint64_t *)&v22 + 1),
    v23,
    *((uint64_t *)&v23 + 1),
    v24,
    *((uint64_t *)&v24 + 1),
    v25,
    *((uint64_t *)&v25 + 1),
    *(_QWORD *)(v9 + 496));

}

_QWORD *sub_10008D2FC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int16 v58;
  int v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  v7 = type metadata accessor for MeasurementHistoryItem(0);
  v8 = *(int *)(v7 + 24);
  v107 = a1;
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for MeasurementCapture(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  if (v13(v10, 1, v11))
  {
    v14 = sub_10000EDC8((uint64_t *)&unk_1004862E0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v15 = type metadata accessor for URL(0);
    v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
    v16(v9, v10, v15);
    v16(&v9[*(int *)(v11 + 20)], &v10[*(int *)(v11 + 20)], v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v17 = *(int *)(v7 + 28);
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v61 = v7;
  v60 = a2;
  v132 = *((_QWORD *)v19 + 10);
  v133 = *((_QWORD *)v19 + 9);
  v130 = *((_QWORD *)v19 + 12);
  v131 = *((_QWORD *)v19 + 11);
  v128 = *((_QWORD *)v19 + 14);
  v129 = *((_QWORD *)v19 + 13);
  v126 = *((_QWORD *)v19 + 16);
  v127 = *((_QWORD *)v19 + 15);
  v124 = *((_QWORD *)v19 + 18);
  v125 = *((_QWORD *)v19 + 17);
  v122 = *((_QWORD *)v19 + 20);
  v123 = *((_QWORD *)v19 + 19);
  v120 = *((_QWORD *)v19 + 22);
  v121 = *((_QWORD *)v19 + 21);
  v118 = *((_QWORD *)v19 + 24);
  v119 = *((_QWORD *)v19 + 23);
  v116 = *((_QWORD *)v19 + 26);
  v117 = *((_QWORD *)v19 + 25);
  v114 = *((_QWORD *)v19 + 28);
  v115 = *((_QWORD *)v19 + 27);
  v113 = *((_QWORD *)v19 + 29);
  v112 = *((_QWORD *)v19 + 30);
  v111 = *((_QWORD *)v19 + 31);
  v110 = *((_QWORD *)v19 + 32);
  v109 = *((_QWORD *)v19 + 33);
  v108 = *((_QWORD *)v19 + 34);
  v106 = *((_QWORD *)v19 + 35);
  v105 = *((_QWORD *)v19 + 36);
  v104 = *((_QWORD *)v19 + 37);
  v103 = *((_QWORD *)v19 + 38);
  v102 = *((_QWORD *)v19 + 39);
  v101 = *((_QWORD *)v19 + 40);
  v100 = *((_QWORD *)v19 + 41);
  v99 = *((_QWORD *)v19 + 42);
  v98 = *((_QWORD *)v19 + 43);
  v97 = *((_QWORD *)v19 + 44);
  v96 = *((_QWORD *)v19 + 45);
  v95 = *((_QWORD *)v19 + 46);
  v94 = *((_QWORD *)v19 + 47);
  v93 = *((_QWORD *)v19 + 48);
  v92 = *((_QWORD *)v19 + 49);
  v91 = *((_QWORD *)v19 + 50);
  v90 = *((_QWORD *)v19 + 51);
  v89 = *((_QWORD *)v19 + 52);
  v88 = *((_QWORD *)v19 + 53);
  v87 = *((_QWORD *)v19 + 54);
  v86 = *((_QWORD *)v19 + 55);
  v85 = *((_QWORD *)v19 + 56);
  v84 = *((_QWORD *)v19 + 57);
  v83 = *((_QWORD *)v19 + 58);
  v82 = *((_QWORD *)v19 + 59);
  v81 = *((_QWORD *)v19 + 60);
  v80 = *((_QWORD *)v19 + 61);
  v79 = *((_QWORD *)v19 + 62);
  v78 = *((_QWORD *)v19 + 63);
  v77 = *((_QWORD *)v19 + 64);
  v76 = *((_QWORD *)v19 + 65);
  v75 = *((_QWORD *)v19 + 66);
  v74 = *((_QWORD *)v19 + 67);
  v73 = *((_QWORD *)v19 + 68);
  v72 = *((_QWORD *)v19 + 69);
  v71 = *((_QWORD *)v19 + 70);
  v70 = *((_QWORD *)v19 + 71);
  v69 = *((_QWORD *)v19 + 72);
  v68 = *((_QWORD *)v19 + 73);
  v67 = *((_QWORD *)v19 + 74);
  v66 = *((_QWORD *)v19 + 75);
  v65 = *((_QWORD *)v19 + 76);
  v64 = *((_QWORD *)v19 + 77);
  v63 = *((_QWORD *)v19 + 78);
  v33 = *((_QWORD *)v19 + 79);
  v34 = *((_QWORD *)v19 + 80);
  v35 = *((_QWORD *)v19 + 81);
  v36 = *((_QWORD *)v19 + 82);
  v37 = *((_QWORD *)v19 + 83);
  v38 = *((_QWORD *)v19 + 84);
  v39 = *((_QWORD *)v19 + 85);
  v40 = *((_QWORD *)v19 + 86);
  v41 = *((_QWORD *)v19 + 87);
  v42 = *((_QWORD *)v19 + 88);
  v43 = *((_QWORD *)v19 + 89);
  v44 = *((_QWORD *)v19 + 90);
  v45 = *((_QWORD *)v19 + 91);
  v46 = *((_QWORD *)v19 + 92);
  v47 = *((_QWORD *)v19 + 93);
  v48 = *((_QWORD *)v19 + 94);
  v49 = *((_QWORD *)v19 + 95);
  v50 = *((_QWORD *)v19 + 96);
  v51 = *((_QWORD *)v19 + 97);
  v52 = *((_QWORD *)v19 + 98);
  v53 = *((_QWORD *)v19 + 99);
  v54 = *((_QWORD *)v19 + 100);
  v55 = *((_QWORD *)v19 + 101);
  v56 = *((_QWORD *)v19 + 102);
  v57 = *((_QWORD *)v19 + 103);
  v58 = *((_WORD *)v19 + 418);
  v59 = *((_DWORD *)v19 + 208);
  v20 = *((_QWORD *)v19 + 8);
  v21 = *(_QWORD *)v19;
  v22 = *((_QWORD *)v19 + 1);
  v23 = *((_QWORD *)v19 + 2);
  v24 = *((_QWORD *)v19 + 3);
  v25 = *((_QWORD *)v19 + 4);
  v26 = *((_QWORD *)v19 + 5);
  v27 = *((_QWORD *)v19 + 6);
  v28 = *((_QWORD *)v19 + 7);
  sub_100085E0C(*(_QWORD *)v19, v22, v23, v24, v25, v26, v27, v28, v20, v133, v132, v131, v130, v129, v128, v127, v126, v125, v124,
    v123,
    v122,
    v121,
    v120,
    v119,
    v118,
    v117,
    v116,
    v115,
    v114,
    v113,
    v112,
    v111,
    v110,
    v109,
    v108,
    v106,
    v105,
    v104,
    v103,
    v102,
    v101,
    v100,
    v99,
    v98,
    v97,
    v96,
    v95,
    v94,
    v93,
    v92,
    v91,
    v90,
    v89,
    v88,
    v87,
    v86,
    v85,
    v84,
    v83,
    v82,
    v81,
    v80,
    v79);
  *(_QWORD *)v18 = v21;
  *((_QWORD *)v18 + 1) = v22;
  *((_QWORD *)v18 + 2) = v23;
  *((_QWORD *)v18 + 3) = v24;
  *((_QWORD *)v18 + 4) = v25;
  *((_QWORD *)v18 + 5) = v26;
  *((_QWORD *)v18 + 6) = v27;
  *((_QWORD *)v18 + 7) = v28;
  *((_QWORD *)v18 + 8) = v20;
  *((_QWORD *)v18 + 9) = v133;
  *((_QWORD *)v18 + 10) = v132;
  *((_QWORD *)v18 + 11) = v131;
  *((_QWORD *)v18 + 12) = v130;
  *((_QWORD *)v18 + 13) = v129;
  *((_QWORD *)v18 + 14) = v128;
  *((_QWORD *)v18 + 15) = v127;
  *((_QWORD *)v18 + 16) = v126;
  *((_QWORD *)v18 + 17) = v125;
  *((_QWORD *)v18 + 18) = v124;
  *((_QWORD *)v18 + 19) = v123;
  *((_QWORD *)v18 + 20) = v122;
  *((_QWORD *)v18 + 21) = v121;
  *((_QWORD *)v18 + 22) = v120;
  *((_QWORD *)v18 + 23) = v119;
  *((_QWORD *)v18 + 24) = v118;
  *((_QWORD *)v18 + 25) = v117;
  *((_QWORD *)v18 + 26) = v116;
  *((_QWORD *)v18 + 27) = v115;
  *((_QWORD *)v18 + 28) = v114;
  *((_QWORD *)v18 + 29) = v113;
  *((_QWORD *)v18 + 30) = v112;
  *((_QWORD *)v18 + 31) = v111;
  *((_QWORD *)v18 + 32) = v110;
  *((_QWORD *)v18 + 33) = v109;
  *((_QWORD *)v18 + 34) = v108;
  *((_QWORD *)v18 + 35) = v106;
  *((_QWORD *)v18 + 36) = v105;
  *((_QWORD *)v18 + 37) = v104;
  *((_QWORD *)v18 + 38) = v103;
  *((_QWORD *)v18 + 39) = v102;
  *((_QWORD *)v18 + 40) = v101;
  *((_QWORD *)v18 + 41) = v100;
  *((_QWORD *)v18 + 42) = v99;
  *((_QWORD *)v18 + 43) = v98;
  *((_QWORD *)v18 + 44) = v97;
  *((_QWORD *)v18 + 45) = v96;
  *((_QWORD *)v18 + 46) = v95;
  *((_QWORD *)v18 + 47) = v94;
  *((_QWORD *)v18 + 48) = v93;
  *((_QWORD *)v18 + 49) = v92;
  *((_QWORD *)v18 + 50) = v91;
  *((_QWORD *)v18 + 51) = v90;
  *((_QWORD *)v18 + 52) = v89;
  *((_QWORD *)v18 + 53) = v88;
  *((_QWORD *)v18 + 54) = v87;
  *((_QWORD *)v18 + 55) = v86;
  *((_QWORD *)v18 + 56) = v85;
  *((_QWORD *)v18 + 57) = v84;
  *((_QWORD *)v18 + 58) = v83;
  *((_QWORD *)v18 + 59) = v82;
  *((_QWORD *)v18 + 60) = v81;
  *((_QWORD *)v18 + 61) = v80;
  *((_QWORD *)v18 + 62) = v79;
  *((_QWORD *)v18 + 63) = v78;
  *((_QWORD *)v18 + 64) = v77;
  *((_QWORD *)v18 + 65) = v76;
  *((_QWORD *)v18 + 66) = v75;
  *((_QWORD *)v18 + 67) = v74;
  *((_QWORD *)v18 + 68) = v73;
  *((_QWORD *)v18 + 69) = v72;
  *((_QWORD *)v18 + 70) = v71;
  *((_QWORD *)v18 + 71) = v70;
  *((_QWORD *)v18 + 72) = v69;
  *((_QWORD *)v18 + 73) = v68;
  *((_QWORD *)v18 + 74) = v67;
  *((_QWORD *)v18 + 75) = v66;
  *((_QWORD *)v18 + 76) = v65;
  *((_QWORD *)v18 + 77) = v64;
  *((_QWORD *)v18 + 78) = v63;
  *((_QWORD *)v18 + 79) = v33;
  *((_QWORD *)v18 + 80) = v34;
  *((_QWORD *)v18 + 81) = v35;
  *((_QWORD *)v18 + 82) = v36;
  *((_QWORD *)v18 + 83) = v37;
  *((_QWORD *)v18 + 84) = v38;
  *((_QWORD *)v18 + 85) = v39;
  *((_QWORD *)v18 + 86) = v40;
  *((_QWORD *)v18 + 87) = v41;
  *((_QWORD *)v18 + 88) = v42;
  *((_QWORD *)v18 + 89) = v43;
  *((_QWORD *)v18 + 90) = v44;
  *((_QWORD *)v18 + 91) = v45;
  *((_QWORD *)v18 + 92) = v46;
  *((_QWORD *)v18 + 93) = v47;
  *((_QWORD *)v18 + 94) = v48;
  *((_QWORD *)v18 + 95) = v49;
  *((_QWORD *)v18 + 96) = v50;
  *((_QWORD *)v18 + 97) = v51;
  *((_QWORD *)v18 + 98) = v52;
  *((_QWORD *)v18 + 99) = v53;
  *((_QWORD *)v18 + 100) = v54;
  *((_QWORD *)v18 + 101) = v55;
  *((_QWORD *)v18 + 102) = v56;
  *((_QWORD *)v18 + 103) = v57;
  *((_WORD *)v18 + 418) = v58;
  *((_DWORD *)v18 + 208) = v59;
  *((_BYTE *)v107 + *(int *)(v61 + 32)) = *((_BYTE *)v60 + *(int *)(v61 + 32));
  v29 = *(int *)(a3 + 20);
  v30 = *(void **)((char *)v60 + v29);
  *(_QWORD *)((char *)v107 + v29) = v30;
  v31 = v30;
  return v107;
}

_QWORD *sub_10008DCCC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  void *v55;
  void *v56;
  id v57;
  uint64_t v59;
  void (*v60)(char *, char *, uint64_t);
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int16 v80;
  int v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  __int128 v145;
  uint64_t v146;
  __int128 v147;
  uint64_t v148;
  __int128 v149;
  uint64_t v150;
  __int128 v151;
  uint64_t v152;
  __int128 v153;
  uint64_t v154;
  __int128 v155;
  uint64_t v156;
  __int128 v157;
  uint64_t v158;
  __int128 v159;
  uint64_t v160;
  __int128 v161;
  uint64_t v162;
  __int128 v163;
  uint64_t v164;
  __int128 v165;
  uint64_t v166;
  __int128 v167;
  uint64_t v168;
  __int128 v169;

  *a1 = *a2;
  v5 = a2[1];
  v6 = a1[1];
  a1[1] = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v6);
  a1[2] = a2[2];
  v7 = a2[3];
  v8 = a1[3];
  a1[3] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  v9 = type metadata accessor for MeasurementHistoryItem(0);
  v10 = *(int *)(v9 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for MeasurementCapture(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      v59 = type metadata accessor for URL(0);
      v60 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 24);
      v60(v11, v12, v59);
      v60(&v11[*(int *)(v13 + 20)], &v12[*(int *)(v13 + 20)], v59);
      goto LABEL_7;
    }
    sub_1000258F8((uint64_t)v11, type metadata accessor for MeasurementCapture);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    v20 = sub_10000EDC8((uint64_t *)&unk_1004862E0);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  v18 = type metadata accessor for URL(0);
  v19 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
  v19(v11, v12, v18);
  v19(&v11[*(int *)(v13 + 20)], &v12[*(int *)(v13 + 20)], v18);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_7:
  v21 = *(int *)(v9 + 28);
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v84 = v9;
  v83 = a2;
  v24 = *((_QWORD *)v23 + 6);
  v168 = *((_QWORD *)v23 + 8);
  v166 = *((_QWORD *)v23 + 9);
  v164 = *((_QWORD *)v23 + 10);
  v162 = *((_QWORD *)v23 + 11);
  v160 = *((_QWORD *)v23 + 12);
  v158 = *((_QWORD *)v23 + 13);
  v156 = *((_QWORD *)v23 + 14);
  v154 = *((_QWORD *)v23 + 15);
  v152 = *((_QWORD *)v23 + 16);
  v150 = *((_QWORD *)v23 + 17);
  v148 = *((_QWORD *)v23 + 18);
  v146 = *((_QWORD *)v23 + 19);
  v144 = *((_QWORD *)v23 + 20);
  v143 = *((_QWORD *)v23 + 21);
  v142 = *((_QWORD *)v23 + 22);
  v141 = *((_QWORD *)v23 + 23);
  v140 = *((_QWORD *)v23 + 24);
  v139 = *((_QWORD *)v23 + 25);
  v138 = *((_QWORD *)v23 + 26);
  v137 = *((_QWORD *)v23 + 27);
  v136 = *((_QWORD *)v23 + 28);
  v135 = *((_QWORD *)v23 + 29);
  v134 = *((_QWORD *)v23 + 30);
  v133 = *((_QWORD *)v23 + 31);
  v132 = *((_QWORD *)v23 + 32);
  v131 = *((_QWORD *)v23 + 33);
  v130 = *((_QWORD *)v23 + 34);
  v129 = *((_QWORD *)v23 + 35);
  v128 = *((_QWORD *)v23 + 36);
  v127 = *((_QWORD *)v23 + 37);
  v126 = *((_QWORD *)v23 + 38);
  v125 = *((_QWORD *)v23 + 39);
  v124 = *((_QWORD *)v23 + 40);
  v123 = *((_QWORD *)v23 + 41);
  v122 = *((_QWORD *)v23 + 42);
  v121 = *((_QWORD *)v23 + 43);
  v120 = *((_QWORD *)v23 + 44);
  v82 = a1;
  v119 = *((_QWORD *)v23 + 45);
  v118 = *((_QWORD *)v23 + 46);
  v117 = *((_QWORD *)v23 + 47);
  v116 = *((_QWORD *)v23 + 48);
  v115 = *((_QWORD *)v23 + 49);
  v114 = *((_QWORD *)v23 + 50);
  v113 = *((_QWORD *)v23 + 51);
  v112 = *((_QWORD *)v23 + 52);
  v111 = *((_QWORD *)v23 + 53);
  v110 = *((_QWORD *)v23 + 54);
  v109 = *((_QWORD *)v23 + 55);
  v108 = *((_QWORD *)v23 + 56);
  v107 = *((_QWORD *)v23 + 57);
  v106 = *((_QWORD *)v23 + 58);
  v105 = *((_QWORD *)v23 + 59);
  v104 = *((_QWORD *)v23 + 60);
  v103 = *((_QWORD *)v23 + 61);
  v102 = *((_QWORD *)v23 + 62);
  v101 = *((_QWORD *)v23 + 63);
  v100 = *((_QWORD *)v23 + 64);
  v99 = *((_QWORD *)v23 + 65);
  v98 = *((_QWORD *)v23 + 66);
  v97 = *((_QWORD *)v23 + 67);
  v96 = *((_QWORD *)v23 + 68);
  v95 = *((_QWORD *)v23 + 69);
  v94 = *((_QWORD *)v23 + 70);
  v93 = *((_QWORD *)v23 + 71);
  v92 = *((_QWORD *)v23 + 72);
  v91 = *((_QWORD *)v23 + 73);
  v90 = *((_QWORD *)v23 + 74);
  v89 = *((_QWORD *)v23 + 75);
  v88 = *((_QWORD *)v23 + 76);
  v87 = *((_QWORD *)v23 + 77);
  v86 = *((_QWORD *)v23 + 78);
  v63 = *((_QWORD *)v23 + 79);
  v64 = *((_OWORD *)v23 + 40);
  v65 = *((_OWORD *)v23 + 41);
  v66 = *((_OWORD *)v23 + 42);
  v67 = *((_OWORD *)v23 + 43);
  v25 = *((_QWORD *)v23 + 88);
  v68 = *((_QWORD *)v23 + 89);
  v69 = *((_OWORD *)v23 + 45);
  v70 = *((_OWORD *)v23 + 46);
  v71 = *((_OWORD *)v23 + 47);
  v72 = *((_QWORD *)v23 + 96);
  v73 = *((_QWORD *)v23 + 97);
  v74 = *((_QWORD *)v23 + 98);
  v75 = *((_QWORD *)v23 + 99);
  v76 = *((_QWORD *)v23 + 100);
  v77 = *((_QWORD *)v23 + 101);
  v78 = *((_QWORD *)v23 + 102);
  v79 = *((_QWORD *)v23 + 103);
  v80 = *((_WORD *)v23 + 418);
  v81 = *((_DWORD *)v23 + 208);
  v26 = *(_QWORD *)v23;
  v27 = *((_QWORD *)v23 + 1);
  v28 = *((_QWORD *)v23 + 2);
  v29 = *((_QWORD *)v23 + 3);
  v30 = *((_QWORD *)v23 + 4);
  v31 = *((_QWORD *)v23 + 5);
  v32 = *((_QWORD *)v23 + 7);
  sub_100085E0C(*(_QWORD *)v23, v27, v28, v29, v30, v31, v24, v32, v168, v166, v164, v162, v160, v158, v156, v154, v152, v150, v148,
    v146,
    v144,
    v143,
    v142,
    v141,
    v140,
    v139,
    v138,
    v137,
    v136,
    v135,
    v134,
    v133,
    v132,
    v131,
    v130,
    v129,
    v128,
    v127,
    v126,
    v125,
    v124,
    v123,
    v122,
    v121,
    v120,
    v119,
    v118,
    v117,
    v116,
    v115,
    v114,
    v113,
    v112,
    v111,
    v110,
    v109,
    v108,
    v107,
    v106,
    v105,
    v104,
    v103,
    v102);
  v33 = *(_QWORD *)v22;
  v34 = *((_QWORD *)v22 + 1);
  *(_QWORD *)v22 = v26;
  *((_QWORD *)v22 + 1) = v27;
  v35 = *((_QWORD *)v22 + 2);
  v36 = *((_QWORD *)v22 + 3);
  *((_QWORD *)v22 + 2) = v28;
  *((_QWORD *)v22 + 3) = v29;
  v37 = *((_QWORD *)v22 + 4);
  v38 = *((_QWORD *)v22 + 5);
  *((_QWORD *)v22 + 4) = v30;
  *((_QWORD *)v22 + 5) = v31;
  v39 = *((_QWORD *)v22 + 6);
  v40 = *((_QWORD *)v22 + 7);
  *((_QWORD *)v22 + 6) = v24;
  *((_QWORD *)v22 + 7) = v32;
  v61 = *((_OWORD *)v22 + 5);
  v62 = *((_OWORD *)v22 + 4);
  *((_QWORD *)v22 + 8) = v168;
  *((_QWORD *)v22 + 9) = v166;
  *((_QWORD *)v22 + 10) = v164;
  *((_QWORD *)v22 + 11) = v162;
  v167 = *((_OWORD *)v22 + 7);
  v169 = *((_OWORD *)v22 + 6);
  *((_QWORD *)v22 + 12) = v160;
  *((_QWORD *)v22 + 13) = v158;
  *((_QWORD *)v22 + 14) = v156;
  *((_QWORD *)v22 + 15) = v154;
  v163 = *((_OWORD *)v22 + 9);
  v165 = *((_OWORD *)v22 + 8);
  *((_QWORD *)v22 + 16) = v152;
  *((_QWORD *)v22 + 17) = v150;
  *((_QWORD *)v22 + 18) = v148;
  *((_QWORD *)v22 + 19) = v146;
  v159 = *((_OWORD *)v22 + 11);
  v161 = *((_OWORD *)v22 + 10);
  *((_QWORD *)v22 + 20) = v144;
  *((_QWORD *)v22 + 21) = v143;
  *((_QWORD *)v22 + 22) = v142;
  *((_QWORD *)v22 + 23) = v141;
  v157 = *((_OWORD *)v22 + 12);
  v155 = *((_OWORD *)v22 + 13);
  *((_QWORD *)v22 + 24) = v140;
  *((_QWORD *)v22 + 25) = v139;
  *((_QWORD *)v22 + 26) = v138;
  *((_QWORD *)v22 + 27) = v137;
  v153 = *((_OWORD *)v22 + 14);
  v151 = *((_OWORD *)v22 + 15);
  *((_QWORD *)v22 + 28) = v136;
  *((_QWORD *)v22 + 29) = v135;
  *((_QWORD *)v22 + 30) = v134;
  *((_QWORD *)v22 + 31) = v133;
  v149 = *((_OWORD *)v22 + 16);
  v147 = *((_OWORD *)v22 + 17);
  *((_QWORD *)v22 + 32) = v132;
  *((_QWORD *)v22 + 33) = v131;
  *((_QWORD *)v22 + 34) = v130;
  *((_QWORD *)v22 + 35) = v129;
  v41 = *((_OWORD *)v22 + 19);
  v145 = *((_OWORD *)v22 + 18);
  *((_QWORD *)v22 + 36) = v128;
  *((_QWORD *)v22 + 37) = v127;
  *((_QWORD *)v22 + 38) = v126;
  *((_QWORD *)v22 + 39) = v125;
  v42 = *((_OWORD *)v22 + 20);
  v43 = *((_OWORD *)v22 + 21);
  *((_QWORD *)v22 + 40) = v124;
  *((_QWORD *)v22 + 41) = v123;
  *((_QWORD *)v22 + 42) = v122;
  *((_QWORD *)v22 + 43) = v121;
  v44 = *((_OWORD *)v22 + 22);
  v45 = *((_OWORD *)v22 + 23);
  *((_QWORD *)v22 + 44) = v120;
  *((_QWORD *)v22 + 45) = v119;
  *((_QWORD *)v22 + 46) = v118;
  *((_QWORD *)v22 + 47) = v117;
  v46 = *((_OWORD *)v22 + 24);
  v47 = *((_OWORD *)v22 + 25);
  *((_QWORD *)v22 + 48) = v116;
  *((_QWORD *)v22 + 49) = v115;
  *((_QWORD *)v22 + 50) = v114;
  *((_QWORD *)v22 + 51) = v113;
  v48 = *((_OWORD *)v22 + 26);
  v49 = *((_OWORD *)v22 + 27);
  *((_QWORD *)v22 + 52) = v112;
  *((_QWORD *)v22 + 53) = v111;
  *((_QWORD *)v22 + 54) = v110;
  *((_QWORD *)v22 + 55) = v109;
  v50 = *((_OWORD *)v22 + 28);
  v51 = *((_OWORD *)v22 + 29);
  *((_QWORD *)v22 + 56) = v108;
  *((_QWORD *)v22 + 57) = v107;
  *((_QWORD *)v22 + 58) = v106;
  *((_QWORD *)v22 + 59) = v105;
  v52 = *((_OWORD *)v22 + 30);
  v53 = *((_OWORD *)v22 + 31);
  *((_QWORD *)v22 + 60) = v104;
  *((_QWORD *)v22 + 61) = v103;
  *((_QWORD *)v22 + 62) = v102;
  *((_QWORD *)v22 + 63) = v101;
  *((_QWORD *)v22 + 64) = v100;
  *((_QWORD *)v22 + 65) = v99;
  *((_QWORD *)v22 + 66) = v98;
  *((_QWORD *)v22 + 67) = v97;
  *((_QWORD *)v22 + 68) = v96;
  *((_QWORD *)v22 + 69) = v95;
  *((_QWORD *)v22 + 70) = v94;
  *((_QWORD *)v22 + 71) = v93;
  *((_QWORD *)v22 + 72) = v92;
  *((_QWORD *)v22 + 73) = v91;
  *((_QWORD *)v22 + 74) = v90;
  *((_QWORD *)v22 + 75) = v89;
  *((_QWORD *)v22 + 76) = v88;
  *((_QWORD *)v22 + 77) = v87;
  *((_QWORD *)v22 + 78) = v86;
  *((_QWORD *)v22 + 79) = v63;
  *((_OWORD *)v22 + 40) = v64;
  *((_OWORD *)v22 + 41) = v65;
  *((_OWORD *)v22 + 42) = v66;
  *((_OWORD *)v22 + 43) = v67;
  *((_QWORD *)v22 + 88) = v25;
  *((_QWORD *)v22 + 89) = v68;
  *((_OWORD *)v22 + 45) = v69;
  *((_OWORD *)v22 + 46) = v70;
  *((_OWORD *)v22 + 47) = v71;
  *((_QWORD *)v22 + 96) = v72;
  *((_QWORD *)v22 + 97) = v73;
  *((_QWORD *)v22 + 98) = v74;
  *((_QWORD *)v22 + 99) = v75;
  *((_QWORD *)v22 + 100) = v76;
  *((_QWORD *)v22 + 101) = v77;
  *((_QWORD *)v22 + 102) = v78;
  *((_QWORD *)v22 + 103) = v79;
  *((_WORD *)v22 + 418) = v80;
  *((_DWORD *)v22 + 208) = v81;
  sub_100020E24(v33, v34, v35, v36, v37, v38, v39, v40, v62, *((uint64_t *)&v62 + 1), v61, *((uint64_t *)&v61 + 1), v169, *((uint64_t *)&v169 + 1), v167, *((uint64_t *)&v167 + 1), v165, *((uint64_t *)&v165 + 1), v163,
    *((uint64_t *)&v163 + 1),
    v161,
    *((uint64_t *)&v161 + 1),
    v159,
    *((uint64_t *)&v159 + 1),
    v157,
    *((uint64_t *)&v157 + 1),
    v155,
    *((uint64_t *)&v155 + 1),
    v153,
    *((uint64_t *)&v153 + 1),
    v151,
    *((uint64_t *)&v151 + 1),
    v149,
    *((uint64_t *)&v149 + 1),
    v147,
    *((uint64_t *)&v147 + 1),
    v145,
    *((uint64_t *)&v145 + 1),
    v41,
    *((uint64_t *)&v41 + 1),
    v42,
    *((uint64_t *)&v42 + 1),
    v43,
    *((uint64_t *)&v43 + 1),
    v44,
    *((uint64_t *)&v44 + 1),
    v45,
    *((uint64_t *)&v45 + 1),
    v46,
    *((uint64_t *)&v46 + 1),
    v47,
    *((uint64_t *)&v47 + 1),
    v48,
    *((uint64_t *)&v48 + 1),
    v49,
    *((uint64_t *)&v49 + 1),
    v50,
    *((uint64_t *)&v50 + 1),
    v51,
    *((uint64_t *)&v51 + 1),
    v52,
    *((uint64_t *)&v52 + 1),
    v53);
  *((_BYTE *)v82 + *(int *)(v84 + 32)) = *((_BYTE *)v83 + *(int *)(v84 + 32));
  v54 = *(int *)(a3 + 20);
  v55 = *(void **)((char *)v82 + v54);
  v56 = *(void **)((char *)v83 + v54);
  *(_QWORD *)((char *)v82 + v54) = v56;
  v57 = v56;

  return v82;
}

_OWORD *sub_10008E8DC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = (int *)type metadata accessor for MeasurementHistoryItem(0);
  v8 = v7[6];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for MeasurementCapture(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_10000EDC8((uint64_t *)&unk_1004862E0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v14 = type metadata accessor for URL(0);
    v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32);
    v15(v9, v10, v14);
    v15(&v9[*(int *)(v11 + 20)], &v10[*(int *)(v11 + 20)], v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  memcpy((char *)a1 + v7[7], (char *)a2 + v7[7], 0x346uLL);
  *((_BYTE *)a1 + v7[8]) = *((_BYTE *)a2 + v7[8]);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
  return a1;
}

_QWORD *sub_10008EA0C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  int v86;
  uint64_t v87;
  void *v88;
  uint64_t v90;
  void (*v91)(char *, char *, uint64_t);
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = (int *)type metadata accessor for MeasurementHistoryItem(0);
  v11 = v10[6];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for MeasurementCapture(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (!v17)
  {
    if (!v18)
    {
      v90 = type metadata accessor for URL(0);
      v91 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v90 - 8) + 40);
      v91(v12, v13, v90);
      v91(&v12[*(int *)(v14 + 20)], &v13[*(int *)(v14 + 20)], v90);
      goto LABEL_7;
    }
    sub_1000258F8((uint64_t)v12, type metadata accessor for MeasurementCapture);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v21 = sub_10000EDC8((uint64_t *)&unk_1004862E0);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  v19 = type metadata accessor for URL(0);
  v20 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32);
  v20(v12, v13, v19);
  v20(&v12[*(int *)(v14 + 20)], &v13[*(int *)(v14 + 20)], v19);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
LABEL_7:
  v22 = v10[7];
  v23 = (char *)a1 + v22;
  v24 = (char *)a2 + v22;
  v25 = *(_QWORD *)v23;
  v26 = *((_QWORD *)v23 + 1);
  v27 = *((_QWORD *)v23 + 2);
  v28 = *((_QWORD *)v23 + 3);
  v29 = *((_QWORD *)v23 + 4);
  v30 = *((_QWORD *)v23 + 5);
  v31 = *((_QWORD *)v23 + 6);
  v32 = *((_QWORD *)v23 + 7);
  v107 = *((_OWORD *)v23 + 5);
  v108 = *((_OWORD *)v23 + 4);
  v105 = *((_OWORD *)v23 + 7);
  v106 = *((_OWORD *)v23 + 6);
  v103 = *((_OWORD *)v23 + 9);
  v104 = *((_OWORD *)v23 + 8);
  v101 = *((_OWORD *)v23 + 11);
  v102 = *((_OWORD *)v23 + 10);
  v99 = *((_OWORD *)v23 + 13);
  v100 = *((_OWORD *)v23 + 12);
  v97 = *((_OWORD *)v23 + 15);
  v98 = *((_OWORD *)v23 + 14);
  v95 = *((_OWORD *)v23 + 17);
  v96 = *((_OWORD *)v23 + 16);
  v93 = *((_OWORD *)v23 + 19);
  v94 = *((_OWORD *)v23 + 18);
  v33 = *((_OWORD *)v23 + 21);
  v92 = *((_OWORD *)v23 + 20);
  v34 = *((_OWORD *)v23 + 22);
  v35 = *((_OWORD *)v23 + 23);
  v36 = *((_OWORD *)v23 + 24);
  v37 = *((_OWORD *)v23 + 25);
  v38 = *((_OWORD *)v23 + 26);
  v39 = *((_OWORD *)v23 + 27);
  v40 = *((_OWORD *)v24 + 1);
  v41 = *((_OWORD *)v24 + 2);
  v42 = *((_OWORD *)v24 + 3);
  v43 = *((_OWORD *)v24 + 4);
  v44 = *((_OWORD *)v24 + 5);
  v45 = *((_OWORD *)v24 + 6);
  v46 = *((_OWORD *)v24 + 7);
  *(_OWORD *)v23 = *(_OWORD *)v24;
  *((_OWORD *)v23 + 1) = v40;
  v47 = *((_OWORD *)v24 + 8);
  v48 = *((_OWORD *)v24 + 9);
  *((_OWORD *)v23 + 2) = v41;
  *((_OWORD *)v23 + 3) = v42;
  v49 = *((_OWORD *)v24 + 10);
  v50 = *((_OWORD *)v24 + 11);
  *((_OWORD *)v23 + 4) = v43;
  *((_OWORD *)v23 + 5) = v44;
  v51 = *((_OWORD *)v24 + 12);
  v52 = *((_OWORD *)v24 + 13);
  *((_OWORD *)v23 + 6) = v45;
  *((_OWORD *)v23 + 7) = v46;
  v53 = *((_OWORD *)v24 + 14);
  v54 = *((_OWORD *)v24 + 15);
  *((_OWORD *)v23 + 8) = v47;
  *((_OWORD *)v23 + 9) = v48;
  v55 = *((_OWORD *)v24 + 16);
  v56 = *((_OWORD *)v24 + 17);
  *((_OWORD *)v23 + 10) = v49;
  *((_OWORD *)v23 + 11) = v50;
  v57 = *((_OWORD *)v24 + 18);
  v58 = *((_OWORD *)v24 + 19);
  *((_OWORD *)v23 + 12) = v51;
  *((_OWORD *)v23 + 13) = v52;
  v59 = *((_OWORD *)v24 + 20);
  v60 = *((_OWORD *)v24 + 21);
  *((_OWORD *)v23 + 14) = v53;
  *((_OWORD *)v23 + 15) = v54;
  v61 = *((_OWORD *)v24 + 22);
  v62 = *((_OWORD *)v24 + 23);
  *((_OWORD *)v23 + 16) = v55;
  *((_OWORD *)v23 + 17) = v56;
  v63 = *((_OWORD *)v24 + 24);
  v64 = *((_OWORD *)v24 + 25);
  *((_OWORD *)v23 + 18) = v57;
  *((_OWORD *)v23 + 19) = v58;
  v65 = *((_OWORD *)v24 + 26);
  v66 = *((_OWORD *)v24 + 27);
  *((_OWORD *)v23 + 20) = v59;
  *((_OWORD *)v23 + 21) = v60;
  v67 = *((_OWORD *)v24 + 28);
  v68 = *((_OWORD *)v24 + 29);
  *((_OWORD *)v23 + 22) = v61;
  *((_OWORD *)v23 + 23) = v62;
  v69 = *((_OWORD *)v24 + 30);
  v70 = *((_OWORD *)v24 + 31);
  *((_OWORD *)v23 + 24) = v63;
  *((_OWORD *)v23 + 25) = v64;
  v71 = *((_OWORD *)v24 + 32);
  v72 = *((_OWORD *)v24 + 33);
  *((_OWORD *)v23 + 26) = v65;
  *((_OWORD *)v23 + 27) = v66;
  v73 = *((_OWORD *)v23 + 28);
  v74 = *((_OWORD *)v23 + 29);
  *((_OWORD *)v23 + 28) = v67;
  *((_OWORD *)v23 + 29) = v68;
  v75 = *((_OWORD *)v23 + 30);
  v76 = *((_OWORD *)v23 + 31);
  *((_OWORD *)v23 + 30) = v69;
  *((_OWORD *)v23 + 31) = v70;
  *((_OWORD *)v23 + 32) = v71;
  *((_OWORD *)v23 + 33) = v72;
  v77 = *((_OWORD *)v24 + 35);
  *((_OWORD *)v23 + 34) = *((_OWORD *)v24 + 34);
  *((_OWORD *)v23 + 35) = v77;
  v78 = *((_OWORD *)v24 + 37);
  *((_OWORD *)v23 + 36) = *((_OWORD *)v24 + 36);
  *((_OWORD *)v23 + 37) = v78;
  v79 = *((_OWORD *)v24 + 39);
  *((_OWORD *)v23 + 38) = *((_OWORD *)v24 + 38);
  *((_OWORD *)v23 + 39) = v79;
  v80 = *((_OWORD *)v24 + 41);
  *((_OWORD *)v23 + 40) = *((_OWORD *)v24 + 40);
  *((_OWORD *)v23 + 41) = v80;
  v81 = *((_OWORD *)v24 + 43);
  *((_OWORD *)v23 + 42) = *((_OWORD *)v24 + 42);
  *((_OWORD *)v23 + 43) = v81;
  v82 = *((_OWORD *)v24 + 45);
  *((_OWORD *)v23 + 44) = *((_OWORD *)v24 + 44);
  *((_OWORD *)v23 + 45) = v82;
  v83 = *((_OWORD *)v24 + 47);
  *((_OWORD *)v23 + 46) = *((_OWORD *)v24 + 46);
  *((_OWORD *)v23 + 47) = v83;
  v84 = *((_OWORD *)v24 + 49);
  *((_OWORD *)v23 + 48) = *((_OWORD *)v24 + 48);
  *((_OWORD *)v23 + 49) = v84;
  v85 = *((_OWORD *)v24 + 51);
  *((_OWORD *)v23 + 50) = *((_OWORD *)v24 + 50);
  *((_OWORD *)v23 + 51) = v85;
  v86 = *((_DWORD *)v24 + 208);
  *((_WORD *)v23 + 418) = *((_WORD *)v24 + 418);
  *((_DWORD *)v23 + 208) = v86;
  sub_100020E24(v25, v26, v27, v28, v29, v30, v31, v32, v108, *((uint64_t *)&v108 + 1), v107, *((uint64_t *)&v107 + 1), v106, *((uint64_t *)&v106 + 1), v105, *((uint64_t *)&v105 + 1), v104, *((uint64_t *)&v104 + 1), v103,
    *((uint64_t *)&v103 + 1),
    v102,
    *((uint64_t *)&v102 + 1),
    v101,
    *((uint64_t *)&v101 + 1),
    v100,
    *((uint64_t *)&v100 + 1),
    v99,
    *((uint64_t *)&v99 + 1),
    v98,
    *((uint64_t *)&v98 + 1),
    v97,
    *((uint64_t *)&v97 + 1),
    v96,
    *((uint64_t *)&v96 + 1),
    v95,
    *((uint64_t *)&v95 + 1),
    v94,
    *((uint64_t *)&v94 + 1),
    v93,
    *((uint64_t *)&v93 + 1),
    v92,
    *((uint64_t *)&v92 + 1),
    v33,
    *((uint64_t *)&v33 + 1),
    v34,
    *((uint64_t *)&v34 + 1),
    v35,
    *((uint64_t *)&v35 + 1),
    v36,
    *((uint64_t *)&v36 + 1),
    v37,
    *((uint64_t *)&v37 + 1),
    v38,
    *((uint64_t *)&v38 + 1),
    v39,
    *((uint64_t *)&v39 + 1),
    v73,
    *((uint64_t *)&v73 + 1),
    v74,
    *((uint64_t *)&v74 + 1),
    v75,
    *((uint64_t *)&v75 + 1),
    v76);
  *((_BYTE *)a1 + v10[8]) = *((_BYTE *)a2 + v10[8]);
  v87 = *(int *)(a3 + 20);
  v88 = *(void **)((char *)a1 + v87);
  *(_QWORD *)((char *)a1 + v87) = *(_QWORD *)((char *)a2 + v87);

  return a1;
}

uint64_t sub_10008EE60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10008EE6C);
}

uint64_t sub_10008EE6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for MeasurementHistoryItem(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_10008EEF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008EF00);
}

uint64_t sub_10008EF00(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for MeasurementHistoryItem(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2;
  return result;
}

uint64_t type metadata accessor for SpatialPlattersHistoryItem(uint64_t a1)
{
  uint64_t result;

  result = qword_10047FED0;
  if (!qword_10047FED0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SpatialPlattersHistoryItem);
  return result;
}

uint64_t sub_10008EFB4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for MeasurementHistoryItem(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "\b";
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

void sub_10008F024(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  NSString v18;
  uint64_t v19;

  v4 = sub_10000EDC8((uint64_t *)&unk_1004862E0);
  __chkstk_darwin(v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MeasurementCapture(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(int *)(type metadata accessor for SpatialPlattersHistoryItem(0) + 20);
  *(_QWORD *)(a2 + v11) = 0;
  sub_1000226FC(a1, a2);
  v12 = type metadata accessor for MeasurementHistoryItem(0);
  sub_10008F1C8(a1 + *(int *)(v12 + 24), (uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_1000258F8(a1, type metadata accessor for MeasurementHistoryItem);
    sub_10008F210((uint64_t)v6);
    v13 = 0;
  }
  else
  {
    v14 = sub_100036388((uint64_t)v6, (uint64_t)v10);
    URL.path.getter(v14);
    v16 = v15;
    v17 = objc_allocWithZone((Class)UIImage);
    v18 = String._bridgeToObjectiveC()();
    v13 = objc_msgSend(v17, "initWithContentsOfFile:", v18, swift_bridgeObjectRelease(v16).n128_f64[0]);

    sub_1000258F8(a1, type metadata accessor for MeasurementHistoryItem);
    sub_1000258F8((uint64_t)v10, type metadata accessor for MeasurementCapture);
  }

  *(_QWORD *)(a2 + v11) = v13;
}

uint64_t sub_10008F1C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000EDC8((uint64_t *)&unk_1004862E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10008F210(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000EDC8((uint64_t *)&unk_1004862E0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_10008F250()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  double v8;
  id v9;

  v1 = objc_msgSend(v0, "layer");
  objc_msgSend(v1, "setShadowOffset:", 0.0, 4.0);

  v2 = objc_msgSend(v0, "layer");
  objc_msgSend(v2, "setShadowPathIsBounds:", 1);

  v3 = objc_msgSend(v0, "layer");
  if (qword_10047A7B0 != -1)
    swift_once(&qword_10047A7B0, sub_10000F088);
  objc_msgSend(v3, "setShadowRadius:", *(double *)&qword_1004AF100);

  v4 = objc_msgSend(v0, "layer");
  v5 = objc_msgSend((id)objc_opt_self(UIColor), "blackColor");
  v6 = objc_msgSend(v5, "CGColor");

  objc_msgSend(v4, "setShadowColor:", v6);
  v7 = objc_msgSend(v0, "layer");
  LODWORD(v8) = 1039516303;
  objc_msgSend(v7, "setShadowOpacity:", v8);

  v9 = objc_msgSend(v0, "layer");
  objc_msgSend(v9, "setCornerCurve:", kCACornerCurveContinuous);

}

uint64_t type metadata accessor for PlatterShadowView()
{
  return objc_opt_self(_TtC7Measure17PlatterShadowView);
}

uint64_t destroy for Frame(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 16));
}

uint64_t initializeWithCopy for Frame(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  memcpy((void *)(a1 + 32), (const void *)(a2 + 32), 0x1E0uLL);
  swift_retain(v3);
  return a1;
}

uint64_t assignWithCopy for Frame(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v5;
  swift_retain(v5);
  swift_release(v4);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  *(_DWORD *)(a1 + 400) = *(_DWORD *)(a2 + 400);
  *(_DWORD *)(a1 + 404) = *(_DWORD *)(a2 + 404);
  *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
  *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
  return a1;
}

void *initializeWithTake for Frame(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x200uLL);
}

uint64_t assignWithTake for Frame(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release(v4);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v5;
  v6 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v6;
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  v8 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v8;
  v9 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v9;
  v10 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v10;
  v11 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = v11;
  v12 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 288) = v12;
  v13 = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 320) = v13;
  v14 = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 352) = v14;
  v15 = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 384) = v15;
  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
  v16 = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 432) = v16;
  v17 = *(_OWORD *)(a2 + 464);
  *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 464) = v17;
  v18 = *(_OWORD *)(a2 + 496);
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
  *(_OWORD *)(a1 + 496) = v18;
  return a1;
}

uint64_t getEnumTagSinglePayload for Frame(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 512))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Frame(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 504) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 512) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 512) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Frame()
{
  return &type metadata for Frame;
}

uint64_t sub_10008F8B8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  Swift::String v3;
  Swift::String v4;
  void *object;
  Swift::String v6;
  Swift::String v7;
  void *v8;
  Swift::String v9;

  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    v2 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v1 + 112))();
    if (v2)
    {

      return (*(uint64_t (**)(void))(*(_QWORD *)v1 + 112))();
    }
  }
  if (qword_10047AA50 != -1)
    swift_once(&qword_10047AA50, sub_1000E12A4);
  _StringGuts.grow(_:)(62);
  v3._countAndFlagsBits = 0xD000000000000027;
  v3._object = (void *)0x80000001003D9FE0;
  String.append(_:)(v3);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt, &protocol witness table for UInt);
  object = v4._object;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(object);
  v6._object = (void *)0x80000001003DA010;
  v6._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v6);
  sub_100043FF0();
  v7._countAndFlagsBits = static NSThread.prettyPrintCallStack(toDepth:)(10, 0);
  v8 = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v8);
  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  Log.error(_:isPrivate:)(v9, 0);
  swift_bridgeObjectRelease(0xE000000000000000);
  if (v1)
    return (*(uint64_t (**)(void))(*(_QWORD *)v1 + 112))();
  return 0;
}

uint64_t sub_10008FA48()
{
  uint64_t result;

  result = Contexts.UIKit.init()();
  qword_1004AF2A8 = result;
  return result;
}

id sub_10008FA64@<X0>(_QWORD *a1@<X8>)
{
  void *v2;

  if (qword_10047A950 != -1)
    swift_once(&qword_10047A950, sub_10008FA48);
  v2 = (void *)qword_1004AF2A8;
  *a1 = qword_1004AF2A8;
  return v2;
}

uint64_t sub_10008FAB4(void *__src, const void *a2)
{
  _BYTE v4[512];
  _BYTE __dst[512];

  memcpy(v4, __src, sizeof(v4));
  memcpy(__dst, a2, sizeof(__dst));
  return sub_10008FB70((uint64_t)v4, (uint64_t)__dst) & 1;
}

unint64_t sub_10008FB08(uint64_t a1)
{
  unint64_t result;

  result = sub_10008FB2C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10008FB2C()
{
  unint64_t result;

  result = qword_10047FF58;
  if (!qword_10047FF58)
  {
    result = swift_getWitnessTable(&unk_1003B410C, &type metadata for Frame);
    atomic_store(result, (unint64_t *)&qword_10047FF58);
  }
  return result;
}

uint64_t sub_10008FB70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  _BYTE v9[480];
  _BYTE __dst[480];

  if (*(_QWORD *)a1 != *(_QWORD *)a2 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
    goto LABEL_9;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    if (!v5)
      goto LABEL_9;
    sub_10000EDC8(&qword_10047DDD8);
    sub_1000471E8(a2);
    sub_1000471E8(a1);
    v6 = static HashableWeakRef.== infix(_:_:)(v4, v5);
    sub_100012C00(a2);
    sub_100012C00(a1);
    if ((v6 & 1) == 0)
      goto LABEL_9;
LABEL_12:
    memcpy(__dst, (const void *)(a1 + 32), sizeof(__dst));
    memcpy(v9, (const void *)(a2 + 32), sizeof(v9));
    v7 = static ComputedCameraProperties.__derived_struct_equals(_:_:)(__dst, v9);
    return v7 & 1;
  }
  if (!v5)
  {
    sub_1000471E8(a2);
    goto LABEL_12;
  }
  sub_100012C00(a1);
LABEL_9:
  v7 = 0;
  return v7 & 1;
}

void sub_10008FC70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  void *object;
  uint64_t v18;
  char v19;
  Swift::String v20;

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100049274();
  *v7 = static OS_dispatch_queue.main.getter();
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  v8 = _dispatchPreconditionTest(_:)(v7);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0)
  {
    __break(1u);
LABEL_8:
    swift_once(&qword_10047AA38, sub_1000E11A8);
    goto LABEL_6;
  }
  v9 = *(_QWORD *)(v2 + 16);
  if (*(_QWORD *)(v9 + 16))
  {
    v10 = sub_1000C819C(a1);
    if ((v11 & 1) != 0)
    {
      v12 = *(_QWORD *)(v9 + 56) + 24 * v10;
      v13 = *(void (**)(uint64_t))(v12 + 8);
      v14 = *(_QWORD *)(v12 + 16);
      v15 = swift_retain(v14);
      v13(v15);
      swift_release(v14);
      return;
    }
  }
  if (qword_10047AA38 != -1)
    goto LABEL_8;
LABEL_6:
  v20._countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(60);
  v16._object = (void *)0x80000001003DC760;
  v16._countAndFlagsBits = 0xD00000000000003ALL;
  String.append(_:)(v16);
  v19 = a1;
  _print_unlocked<A, B>(_:_:)(&v19, &v20, &type metadata for HapticFeedbackGenerator.Type, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  object = v20._object;
  Log.error(_:isPrivate:)(v20, 0);
  swift_bridgeObjectRelease(object);
}

void sub_10008FE30(_QWORD *a1@<X8>)
{
  *a1 = &off_10043BE30;
}

uint64_t sub_10008FE40()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  id v4;
  void *v5;
  id (*v6)();
  id v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;

  v0 = 0;
  while (1)
  {
    v3 = *((unsigned __int8 *)&off_10043BC20 + v0 + 32);
    if (*((_BYTE *)&off_10043BC20 + v0 + 32))
    {
      if ((_DWORD)v3 == 1)
      {
        v4 = objc_msgSend(objc_allocWithZone((Class)UISelectionFeedbackGenerator), "init");
        v5 = &unk_100442DA8;
        v6 = sub_10009038C;
      }
      else
      {
        v7 = objc_msgSend((id)objc_opt_self(_UISelectionFeedbackGeneratorConfiguration), "lightConfiguration");
        v4 = objc_msgSend(objc_allocWithZone((Class)UISelectionFeedbackGenerator), "initWithConfiguration:", v7);

        v5 = &unk_100442D58;
        v6 = sub_1000903B4;
      }
    }
    else
    {
      v4 = objc_msgSend(objc_allocWithZone((Class)UIImpactFeedbackGenerator), "initWithStyle:", 0);
      v5 = &unk_100442DD0;
      v6 = sub_10009039C;
    }
    v8 = swift_allocObject(v5, 24, 7);
    *(_QWORD *)(v8 + 16) = v4;
    v9 = v4;
    v10 = swift_allocObject(&unk_100442D80, 32, 7);
    *(_QWORD *)(v10 + 16) = v6;
    *(_QWORD *)(v10 + 24) = v8;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    v13 = sub_1000C819C(v3);
    v14 = _swiftEmptyDictionarySingleton[2];
    v15 = (v12 & 1) == 0;
    v16 = v14 + v15;
    if (__OFADD__(v14, v15))
      break;
    v17 = v12;
    if (_swiftEmptyDictionarySingleton[3] >= v16)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v12 & 1) != 0)
          goto LABEL_2;
      }
      else
      {
        sub_1000BE900();
        if ((v17 & 1) != 0)
          goto LABEL_2;
      }
    }
    else
    {
      sub_1000B8148(v16, isUniquelyReferenced_nonNull_native);
      v18 = sub_1000C819C(v3);
      if ((v17 & 1) != (v19 & 1))
        goto LABEL_23;
      v13 = v18;
      if ((v17 & 1) != 0)
      {
LABEL_2:
        v1 = _swiftEmptyDictionarySingleton[7] + 24 * v13;
        v2 = *(void **)v1;
        swift_release(*(_QWORD *)(v1 + 16));

        *(_QWORD *)v1 = v9;
        *(_QWORD *)(v1 + 8) = sub_10009036C;
        *(_QWORD *)(v1 + 16) = v10;
        goto LABEL_3;
      }
    }
    _swiftEmptyDictionarySingleton[(v13 >> 6) + 8] |= 1 << v13;
    *(_BYTE *)(_swiftEmptyDictionarySingleton[6] + v13) = v3;
    v20 = (_QWORD *)(_swiftEmptyDictionarySingleton[7] + 24 * v13);
    *v20 = v9;
    v20[1] = sub_10009036C;
    v20[2] = v10;
    v21 = _swiftEmptyDictionarySingleton[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
      goto LABEL_22;
    _swiftEmptyDictionarySingleton[2] = v23;
LABEL_3:
    ++v0;
    swift_bridgeObjectRelease(0x8000000000000000);
    if (v0 == 3)
    {
      result = v25;
      *(_QWORD *)(v25 + 16) = _swiftEmptyDictionarySingleton;
      return result;
    }
  }
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for HapticFeedbackGenerator.Type);
  __break(1u);
  return result;
}

uint64_t sub_1000900EC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for HapticFeedbackGenerator()
{
  return objc_opt_self(_TtC7Measure23HapticFeedbackGenerator);
}

uint64_t getEnumTagSinglePayload for InstrumentationMode(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for HapticFeedbackGenerator.Type(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10009020C + 4 * byte_1003B4155[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100090240 + 4 * byte_1003B4150[v4]))();
}

uint64_t sub_100090240(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100090248(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100090250);
  return result;
}

uint64_t sub_10009025C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100090264);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100090268(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100090270(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HapticFeedbackGenerator.Type()
{
  return &type metadata for HapticFeedbackGenerator.Type;
}

unint64_t sub_100090290()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100480000;
  if (!qword_100480000)
  {
    v1 = sub_100012B80(&qword_100480008);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100480000);
  }
  return result;
}

unint64_t sub_1000902E0()
{
  unint64_t result;

  result = qword_100480010;
  if (!qword_100480010)
  {
    result = swift_getWitnessTable(&unk_1003B4208, &type metadata for HapticFeedbackGenerator.Type);
    atomic_store(result, (unint64_t *)&qword_100480010);
  }
  return result;
}

uint64_t sub_100090324()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100090348()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10009036C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

id sub_10009038C()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "selectionChanged");
}

id sub_10009039C()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "impactOccurred");
}

_WORD *initializeBufferWithCopyOfBuffer for InstrumentExecutionPriority.Request(_WORD *result, _WORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for InstrumentExecutionPriority.Request(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 65283 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65283 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65283;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65283;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65283;
  }
LABEL_17:
  v6 = *(unsigned __int8 *)a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for InstrumentExecutionPriority.Request(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65283 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65283 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1000904A4 + 4 * byte_1003B4235[v4]))();
  *a1 = a2 - 253;
  return ((uint64_t (*)(void))((char *)sub_1000904D8 + 4 * byte_1003B4230[v4]))();
}

uint64_t sub_1000904D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_1000904E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x1000904E8);
  return result;
}

uint64_t sub_1000904F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x1000904FCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100090500(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_100090508(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InstrumentExecutionPriority.Request()
{
  return &type metadata for InstrumentExecutionPriority.Request;
}

uint64_t storeEnumTagSinglePayload for InstrumentExecutionPriority(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100090570 + 4 * byte_1003B423F[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000905A4 + 4 * byte_1003B423A[v4]))();
}

uint64_t sub_1000905A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000905AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000905B4);
  return result;
}

uint64_t sub_1000905C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000905C8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1000905CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000905D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InstrumentExecutionPriority()
{
  return &type metadata for InstrumentExecutionPriority;
}

unint64_t sub_1000905F4()
{
  unint64_t result;

  result = qword_100480018;
  if (!qword_100480018)
  {
    result = swift_getWitnessTable(&unk_1003B433C, &type metadata for InstrumentExecutionPriority);
    atomic_store(result, (unint64_t *)&qword_100480018);
  }
  return result;
}

id sub_100090638@<X0>(_QWORD *a1@<X8>)
{
  void *v2;

  a1[3] = &_s8SceneKitVN;
  a1[4] = sub_1000286A0();
  if (qword_10047AAD8 != -1)
    swift_once(&qword_10047AAD8, sub_1000EBDC8);
  v2 = (void *)qword_1004AF630;
  *a1 = qword_1004AF630;
  return v2;
}

uint64_t sub_10009069C()
{
  return 3;
}

uint64_t sub_1000906A4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

BOOL sub_1000906C8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

BOOL sub_1000906DC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 >= *a1;
}

BOOL sub_1000906F0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 >= *a2;
}

BOOL sub_100090704(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 < *a1;
}

unint64_t sub_10009071C@<X0>(uint64_t a1@<X8>)
{
  unint64_t result;

  *(_QWORD *)(a1 + 24) = &_s20EdgeDetectionContextVN;
  result = sub_10009074C();
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

unint64_t sub_10009074C()
{
  unint64_t result;

  result = qword_100480020;
  if (!qword_100480020)
  {
    result = swift_getWitnessTable(&unk_1003B5C00, &_s20EdgeDetectionContextVN);
    atomic_store(result, (unint64_t *)&qword_100480020);
  }
  return result;
}

id sub_100090790@<X0>(_QWORD *a1@<X8>)
{
  id result;
  id v3;

  a1[3] = &_s8SceneKitVN;
  a1[4] = sub_1000286A0();
  if (qword_10047A930 != -1)
    swift_once(&qword_10047A930, sub_100083368);
  result = (id)*((_QWORD *)&xmmword_1004AF258 + 1);
  if (*((_QWORD *)&xmmword_1004AF258 + 1))
  {
    v3 = (id)*((_QWORD *)&xmmword_1004AF258 + 1);
    *a1 = Contexts.PrivateQueue.init(_:)(*((_QWORD *)&xmmword_1004AF258 + 1));
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SceneUpdate(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SceneUpdate(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1000908EC + 4 * byte_1003B4375[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100090920 + 4 * byte_1003B4370[v4]))();
}

uint64_t sub_100090920(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100090928(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100090930);
  return result;
}

uint64_t sub_10009093C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100090944);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_100090948(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100090950(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SceneUpdate()
{
  return &type metadata for SceneUpdate;
}

uint64_t destroy for UserInputs(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[1]);
  return swift_bridgeObjectRelease(a1[2]);
}

uint64_t initializeWithCopy for UserInputs(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v6 = a2[2];
  v5 = a2[3];
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v5;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t *assignWithCopy for UserInputs(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[3] = a2[3];
  *((_DWORD *)a1 + 8) = *((_DWORD *)a2 + 8);
  a1[5] = a2[5];
  a1[6] = a2[6];
  return a1;
}

uint64_t assignWithTake for UserInputs(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for UserInputs(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UserInputs(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for UserInputs()
{
  return &type metadata for UserInputs;
}

unint64_t *initializeBufferWithCopyOfBuffer for MeasurementState(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a2;
  sub_100068AC4(*a2);
  *a1 = v3;
  return a1;
}

void destroy for MeasurementState(unint64_t *a1)
{
  sub_10001A810(*a1);
}

unint64_t *assignWithCopy for MeasurementState(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a2;
  sub_100068AC4(*a2);
  v4 = *a1;
  *a1 = v3;
  sub_10001A810(v4);
  return a1;
}

unint64_t *assignWithTake for MeasurementState(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  sub_10001A810(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for MeasurementState(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7D && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 125);
  v3 = (((*(_QWORD *)a1 >> 57) >> 5) | (4 * ((*(_QWORD *)a1 >> 57) & 0x18 | *(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7C)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for MeasurementState(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7C)
  {
    *(_QWORD *)result = a2 - 125;
    if (a3 >= 0x7D)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7D)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_100090CE0(_QWORD *a1)
{
  uint64_t v1;

  v1 = *a1 >> 62;
  if ((_DWORD)v1 == 3)
    return (*a1 >> 3) + 3;
  else
    return v1;
}

_QWORD *sub_100090CFC(_QWORD *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *sub_100090D0C(unint64_t *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  if (a2 < 3)
  {
    v2 = *result & 0xFFFFFFFFFFFFFF8;
    v3 = a2 << 62;
  }
  else
  {
    v2 = 8 * (a2 - 3);
    v3 = 0xC000000000000000;
  }
  *result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for MeasurementState()
{
  return &type metadata for MeasurementState;
}

void sub_100090D48(unsigned __int8 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;

  v2 = v1;
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = sub_1000C8204(a1);
    if ((v7 & 1) != 0)
      v5 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v6);
    else
      v5 = 0;
  }
  v8 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
  }
  else
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v2 + 8));
    v11 = *(_QWORD *)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0x8000000000000000;
    sub_1000BC7CC(v8, a1, isUniquelyReferenced_nonNull_native);
    v10 = *(_QWORD *)(v2 + 8);
    *(_QWORD *)(v2 + 8) = v11;
    swift_bridgeObjectRelease(v10);
  }
}

uint64_t sub_100090DE4()
{
  uint64_t result;

  result = Contexts.UIKit.init()();
  qword_1004AF2B0 = result;
  return result;
}

void sub_100090E00(uint64_t a1, unsigned __int8 a2)
{
  unsigned __int8 v2;

  v2 = a2 - 3;
  if ((a2 - 3) >= 7u)
  {
    Hasher._combine(_:)(7uLL);
    v2 = a2;
  }
  Hasher._combine(_:)(v2);
}

Swift::Int sub_100090E44(unsigned __int8 a1)
{
  unsigned __int8 v2;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4);
  v2 = a1 - 3;
  if ((a1 - 3) >= 7u)
  {
    Hasher._combine(_:)(7uLL);
    v2 = a1;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

Swift::Int sub_100090EA8()
{
  unsigned __int8 *v0;

  return sub_100090E44(*v0);
}

void sub_100090EB0(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_100090E00(a1, *v1);
}

Swift::Int sub_100090EB8()
{
  unsigned __int8 *v0;
  int v1;
  unsigned __int8 v2;
  _QWORD v4[9];

  v1 = *v0;
  Hasher.init(_seed:)(v4);
  v2 = v1 - 3;
  if ((v1 - 3) >= 7)
  {
    Hasher._combine(_:)(7uLL);
    v2 = v1;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

double *sub_100090F14@<X0>(double **a1@<X8>)
{
  double *result;

  result = sub_1000917A4();
  *a1 = result;
  return result;
}

BOOL sub_100090F38(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10009152C(*a1, *a2);
}

double *sub_100090F44(uint64_t a1)
{
  uint64_t v1;
  double *v3;
  double *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  unsigned __int8 v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v3 = sub_1000917A4();
  v4 = v3;
  v5 = *((_QWORD *)v3 + 2);
  if (!v5)
  {
    swift_bridgeObjectRelease(v3);
    return _swiftEmptyArrayStorage;
  }
  v6 = 0;
  v7 = *(_QWORD *)(v1 + 8);
  v8 = _swiftEmptyArrayStorage;
  do
  {
    v9 = *((_BYTE *)v4 + v6 + 32);
    if (*(_QWORD *)(v7 + 16) && (v10 = sub_1000C8204(*((_BYTE *)v4 + v6 + 32)), (v11 & 1) != 0))
      v12 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v10);
    else
      v12 = 0;
    sub_10009183C(a1, (uint64_t)&v19);
    if (v19)
    {
      v13 = v20;
      if (*(_QWORD *)(v20 + 16) && (v14 = sub_1000C8204(v9), (v15 & 1) != 0))
      {
        if (*(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v14) >= v12)
          goto LABEL_4;
      }
      else if (v12 <= 0)
      {
        goto LABEL_4;
      }
    }
    else if (v12 < 1)
    {
      goto LABEL_4;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
      v8 = sub_10005FD04(0, *((_QWORD *)v8 + 2) + 1, 1, (uint64_t)v8);
    v17 = *((_QWORD *)v8 + 2);
    v16 = *((_QWORD *)v8 + 3);
    if (v17 >= v16 >> 1)
      v8 = sub_10005FD04((double *)(v16 > 1), v17 + 1, 1, (uint64_t)v8);
    *((_QWORD *)v8 + 2) = v17 + 1;
    *((_BYTE *)v8 + v17 + 32) = v9;
LABEL_4:
    ++v6;
  }
  while (v5 != v6);
  swift_bridgeObjectRelease(v4);
  return v8;
}

id sub_1000910C4@<X0>(_QWORD *a1@<X8>)
{
  void *v2;

  if (qword_10047A958 != -1)
    swift_once(&qword_10047A958, sub_100090DE4);
  v2 = (void *)qword_1004AF2B0;
  *a1 = qword_1004AF2B0;
  return v2;
}

BOOL sub_100091114(uint64_t *a1, uint64_t *a2)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  float v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  float v13;
  double v14;
  double v15;
  unint64_t v16;

  v2 = *(double *)a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = *((double *)a1 + 3);
  v6 = *((float *)a1 + 8);
  v8 = *((double *)a1 + 5);
  v7 = *((double *)a1 + 6);
  v9 = *(double *)a2;
  v10 = a2[1];
  v11 = a2[2];
  v12 = *((double *)a2 + 3);
  v13 = *((float *)a2 + 8);
  v15 = *((double *)a2 + 5);
  v14 = *((double *)a2 + 6);
  v16 = sub_1000914E8();
  if ((static OrderedDictionary<>.__derived_struct_equals(_:_:)(*(_QWORD *)&v2, v3, v4, *(_QWORD *)&v9, v10, v11, &type metadata for UserInputs.Type, &type metadata for Int, v16, &protocol witness table for Int) & 1) == 0|| (static SearchArea.__derived_struct_equals(_:_:)(v5, v6, v12, v13) & 1) == 0)
  {
    return 0;
  }
  if (v7 == v14)
    return v8 == v15;
  return 0;
}

id sub_1000911FC()
{
  id result;
  id v1;

  if (qword_10047A930 != -1)
    swift_once(&qword_10047A930, sub_100083368);
  result = (id)*((_QWORD *)&xmmword_1004AF258 + 1);
  if (*((_QWORD *)&xmmword_1004AF258 + 1))
  {
    v1 = (id)*((_QWORD *)&xmmword_1004AF258 + 1);
    qword_1004AF2B8 = Contexts.PrivateQueue.init(_:)(*((_QWORD *)&xmmword_1004AF258 + 1));
    return v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_100091260@<X0>(_QWORD *a1@<X8>)
{
  void *v2;

  if (qword_10047A960 != -1)
    swift_once(&qword_10047A960, sub_1000911FC);
  v2 = (void *)qword_1004AF2B8;
  *a1 = qword_1004AF2B8;
  return v2;
}

void sub_1000912B0(uint64_t *a1)
{
  sub_1000915E8(*a1);
}

unint64_t sub_1000912BC(uint64_t a1)
{
  unint64_t result;

  result = sub_1000912E0();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000912E0()
{
  unint64_t result;

  result = qword_100480050;
  if (!qword_100480050)
  {
    result = swift_getWitnessTable(&unk_1003B43D4, &type metadata for MeasurementState);
    atomic_store(result, (unint64_t *)&qword_100480050);
  }
  return result;
}

unint64_t sub_100091324(uint64_t a1)
{
  unint64_t result;

  result = sub_100091348();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100091348()
{
  unint64_t result;

  result = qword_100480080;
  if (!qword_100480080)
  {
    result = swift_getWitnessTable(&unk_1003B4418, &type metadata for UserInputs);
    atomic_store(result, (unint64_t *)&qword_100480080);
  }
  return result;
}

uint64_t sub_10009138C(unint64_t a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1000913C4
                                                                     + 4 * byte_1003B437A[a1 >> 62]))(0xD000000000000010, 0x80000001003DC7F0);
}

uint64_t sub_1000913E8@<X0>(uint64_t a1@<X8>)
{
  __int128 v1;

  *((_QWORD *)&v1 + 1) = a1;
  *(_QWORD *)&v1 = a1 + 0x4000000000000000;
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100091418 + 4 * byte_1003B437E[v1 >> 3]))(1701602377, 0xE400000000000000);
}

uint64_t sub_100091418()
{
  return 0x6E69686372616553;
}

uint64_t sub_100091434()
{
  return 0x4C20676E69646441;
}

uint64_t sub_100091454()
{
  return 0x5020676E69766F4DLL;
}

uint64_t sub_100091474()
{
  unint64_t *v0;

  return sub_10009138C(*v0);
}

unint64_t sub_10009147C(uint64_t a1)
{
  unint64_t result;

  result = sub_1000914A0();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000914A0()
{
  unint64_t result;

  result = qword_1004800B0;
  if (!qword_1004800B0)
  {
    result = swift_getWitnessTable(&unk_1003B44B8, &type metadata for SceneUpdate);
    atomic_store(result, (unint64_t *)&qword_1004800B0);
  }
  return result;
}

unint64_t sub_1000914E8()
{
  unint64_t result;

  result = qword_1004800B8;
  if (!qword_1004800B8)
  {
    result = swift_getWitnessTable(&unk_1003B4570, &type metadata for UserInputs.Type);
    atomic_store(result, (unint64_t *)&qword_1004800B8);
  }
  return result;
}

BOOL sub_10009152C(unsigned __int8 a1, unsigned __int8 a2)
{
  _BOOL8 result;

  switch(a1)
  {
    case 3u:
      if (a2 != 3)
        goto LABEL_18;
      result = 1;
      break;
    case 4u:
      if (a2 != 4)
        goto LABEL_18;
      result = 1;
      break;
    case 5u:
      if (a2 != 5)
        goto LABEL_18;
      result = 1;
      break;
    case 6u:
      if (a2 != 6)
        goto LABEL_18;
      result = 1;
      break;
    case 7u:
      if (a2 != 7)
        goto LABEL_18;
      result = 1;
      break;
    case 8u:
      if (a2 != 8)
        goto LABEL_18;
      result = 1;
      break;
    case 9u:
      if (a2 != 9)
        goto LABEL_18;
      result = 1;
      break;
    default:
      if (a2 - 3 < 7)
LABEL_18:
        result = 0;
      else
        result = a1 == a2;
      break;
  }
  return result;
}

void sub_1000915E8(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_10009161C(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char v8;
  uint64_t v10;
  uint64_t v11;

  if (v1 >> 62)
  {
    v8 = 0;
  }
  else
  {
    v2 = (uint64_t *)(a1 + direct field offset for MeasureObject.id);
    swift_beginAccess(a1 + direct field offset for MeasureObject.id, &v11, 0, 0);
    v3 = *v2;
    v4 = v2[1];
    v5 = (_QWORD *)(v1 + direct field offset for MeasureObject.id);
    swift_beginAccess(v5, &v10, 0, 0);
    v6 = v5[1];
    if (v3 == *v5 && v4 == v6)
      v8 = 1;
    else
      v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, *v5, v6, 0);
  }
  return v8 & 1;
}

void sub_100091790()
{
  uint64_t v0;

  if (v0 == 0xC000000000000008)
    JUMPOUT(0x100091758);
  JUMPOUT(0x100091774);
}

double *sub_1000917A4()
{
  double *v0;
  unint64_t v1;
  unint64_t v2;

  v0 = (double *)&off_10043BE58;
  if ((swift_isUniquelyReferenced_nonNull_native(&off_10043BE58) & 1) == 0)
    v0 = sub_10005FD04(0, 10, 1, (uint64_t)&off_10043BE58);
  v2 = *((_QWORD *)v0 + 2);
  v1 = *((_QWORD *)v0 + 3);
  if (v2 >= v1 >> 1)
    v0 = sub_10005FD04((double *)(v1 > 1), v2 + 1, 1, (uint64_t)v0);
  *((_QWORD *)v0 + 2) = v2 + 1;
  *((_BYTE *)v0 + v2 + 32) = 2;
  return v0;
}

uint64_t sub_10009183C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000EDC8(&qword_1004800C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t getEnumTagSinglePayload for UserInputs.Type(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  unsigned int v7;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
  {
    v6 = *a1;
    if (v6 >= 3)
      v7 = v6 - 2;
    else
      v7 = 0;
    if (v7 >= 8)
      return v7 - 7;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 9;
    if (a2 + 9 >= 0xFFFF00)
      v3 = 4;
    else
      v3 = 2;
    if (v2 >> 8 < 0xFF)
      v3 = 1;
    if (v2 >= 0x100)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1000918D4 + 4 * byte_1003B4391[v4]))();
  }
}

uint64_t storeEnumTagSinglePayload for UserInputs.Type(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 9;
  if (a3 + 9 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xF7)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_100091980 + 4 * byte_1003B439B[v5]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_1000919B4 + 4 * byte_1003B4396[v5]))();
}

uint64_t sub_1000919B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000919BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000919C4);
  return result;
}

uint64_t sub_1000919D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000919D8);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_1000919DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000919E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000919F0(unsigned __int8 *a1)
{
  unsigned int v1;

  v1 = *a1;
  if (v1 >= 3)
    return v1 - 2;
  else
    return 0;
}

_BYTE *sub_100091A04(_BYTE *result, int a2)
{
  if (a2)
    *result = a2 + 2;
  return result;
}

ValueMetadata *type metadata accessor for UserInputs.Type()
{
  return &type metadata for UserInputs.Type;
}

unint64_t sub_100091A28()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1004800C8;
  if (!qword_1004800C8)
  {
    v1 = sub_100012B80(&qword_1004800D0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1004800C8);
  }
  return result;
}

unint64_t sub_100091A78()
{
  unint64_t result;

  result = qword_1004800D8;
  if (!qword_1004800D8)
  {
    result = swift_getWitnessTable(&unk_1003B4510, &type metadata for UserInputs.Type);
    atomic_store(result, (unint64_t *)&qword_1004800D8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PointMoveState(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && a1[41])
    return (*(_DWORD *)a1 + 253);
  v3 = *a1;
  v4 = v3 >= 4;
  v5 = v3 - 4;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PointMoveState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for PointMoveState()
{
  return &type metadata for PointMoveState;
}

uint64_t sub_100091B64()
{
  uint64_t result;

  result = Contexts.UIKit.init()();
  qword_1004AF2C0 = result;
  return result;
}

id sub_100091B80@<X0>(_QWORD *a1@<X8>)
{
  void *v2;

  if (qword_10047A968 != -1)
    swift_once(&qword_10047A968, sub_100091B64);
  v2 = (void *)qword_1004AF2C0;
  *a1 = qword_1004AF2C0;
  return v2;
}

uint64_t sub_100091BD0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2)
  {
    if ((a1[40] & 1) != 0)
    {
      if (a2[40])
        return 1;
    }
    else if ((a2[40] & 1) == 0 && CGRectEqualToRect(*(CGRect *)(a1 + 8), *(CGRect *)(a2 + 8)))
    {
      return 1;
    }
  }
  return 0;
}

unint64_t sub_100091C30(uint64_t a1)
{
  unint64_t result;

  result = sub_100091C54();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100091C54()
{
  unint64_t result;

  result = qword_100480108;
  if (!qword_100480108)
  {
    result = swift_getWitnessTable(&unk_1003B45CC, &type metadata for PointMoveState);
    atomic_store(result, (unint64_t *)&qword_100480108);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PointInputState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100091CE4 + 4 * byte_1003B45B5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100091D18 + 4 * byte_1003B45B0[v4]))();
}

uint64_t sub_100091D18(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100091D20(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100091D28);
  return result;
}

uint64_t sub_100091D34(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100091D3CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100091D40(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100091D48(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PointInputState()
{
  return &type metadata for PointInputState;
}

unint64_t sub_100091D68()
{
  unint64_t result;

  result = qword_100480110;
  if (!qword_100480110)
  {
    result = swift_getWitnessTable(&unk_1003B4698, &type metadata for PointInputState);
    atomic_store(result, (unint64_t *)&qword_100480110);
  }
  return result;
}

float sub_100091DAC(__n128 *a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7, __n128 a8, __n128 a9)
{
  __int128 v9;
  __int128 v10;
  double v11;
  float v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x4_t v19;
  float v20;
  float32x4_t v21;
  float32x4_t v22;
  float v23;
  float32x4_t v25;
  float32x4_t v26;
  __int128 v28;
  __int128 v32;

  *(double *)&v9 = simd_float4x4.position.getter(a1[21], a1[22], a1[23], a1[24]);
  v28 = v9;
  *(double *)&v10 = simd_float4x4.position.getter(a2, a3, a4, a5);
  v32 = v10;
  v11 = simd_float4x4.position.getter(a6, a7, a8, a9);
  *(float32x2_t *)v14.f32 = vsub_f32(*(float32x2_t *)&v28, *(float32x2_t *)&v32);
  v13.i32[3] = HIDWORD(v32);
  v14.f32[2] = *((float *)&v28 + 2) - *((float *)&v32 + 2);
  v14.i32[3] = 0;
  *(float32x2_t *)v13.f32 = vsub_f32(*(float32x2_t *)&v11, *(float32x2_t *)&v32);
  v13.f32[2] = v12 - *((float *)&v32 + 2);
  v15 = vmulq_f32(v13, v13);
  LODWORD(v16) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2), vaddq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1))).u32[0];
  v17 = vrsqrte_f32((float32x2_t)LODWORD(v16));
  v18 = vmul_f32(v17, vrsqrts_f32((float32x2_t)LODWORD(v16), vmul_f32(v17, v17)));
  v19 = vmulq_f32(v14, vmulq_n_f32(v13, vmul_f32(v18, vrsqrts_f32((float32x2_t)LODWORD(v16), vmul_f32(v18, v18))).f32[0]));
  v20 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2), vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1))).f32[0];
  if (v20 < 0.0)
  {
    v21 = vmulq_f32(v14, v14);
    return sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1))).f32[0]);
  }
  *(float32x2_t *)v22.f32 = vsub_f32(*(float32x2_t *)&v28, *(float32x2_t *)&v11);
  v22.f32[2] = *((float *)&v28 + 2) - v12;
  v22.i32[3] = 0;
  v23 = sqrtf(v16);
  if (v23 < v20)
  {
    v21 = vmulq_f32(v22, v22);
    return sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1))).f32[0]);
  }
  v25 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v22, (int32x4_t)v22), (int8x16_t)v22, 0xCuLL), vnegq_f32(v14)), v22, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v14, (int32x4_t)v14), (int8x16_t)v14, 0xCuLL));
  v26 = vmulq_f32(v25, v25);
  return sqrtf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), v26)).f32[0])/ v23;
}

void sub_100091F0C(uint64_t a1, __n128 *a2, float32x2_t a3, float a4)
{
  float v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void (*v20)(uint64_t);
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(void);
  _QWORD *v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  uint64_t v32;
  float v33;
  float v34;
  float32x2_t v35;
  float v36;
  char v37;
  void *v38;
  float32x2_t v39;
  uint64_t v40;

  v7 = a4 * a4;
  v40 = a1 + 64;
  v37 = 1;
  v8 = 1 << *(_BYTE *)(a1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a1 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v38 = 0;
  v12 = 0;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v12 << 6);
      goto LABEL_22;
    }
    v15 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v15 >= v11)
      goto LABEL_30;
    v16 = *(_QWORD *)(v40 + 8 * v15);
    ++v12;
    if (!v16)
    {
      v12 = v15 + 1;
      if (v15 + 1 >= v11)
        goto LABEL_30;
      v16 = *(_QWORD *)(v40 + 8 * v12);
      if (!v16)
      {
        v12 = v15 + 2;
        if (v15 + 2 >= v11)
          goto LABEL_30;
        v16 = *(_QWORD *)(v40 + 8 * v12);
        if (!v16)
          break;
      }
    }
LABEL_21:
    v10 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v12 << 6);
LABEL_22:
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v14 + 8);
    v19 = *(_QWORD **)(*(_QWORD *)(a1 + 56) + 8 * v14);
    v20 = *(void (**)(uint64_t))((swift_isaMask & *v19) + 0x280);
    v21 = v19;
    v22 = swift_bridgeObjectRetain(v18);
    v20(v22);
    v24 = v23;

    swift_bridgeObjectRelease(v24);
    if (v24)
    {

      goto LABEL_5;
    }
    v25 = *(void (**)(void))((swift_isaMask & *v21) + 0xD0);
    v26 = v21;
    v25();
    if (!MeasureObjectState.isMovable()())
    {

      goto LABEL_28;
    }
    type metadata accessor for MeasureCamera(0);
    v27.n128_f64[0] = (*(double (**)(void))((swift_isaMask & *v26) + 0x2B0))();
    v31.n128_f64[0] = simd_float4x4.position.getter(v27, v28, v29, v30);
    v39 = COERCE_FLOAT32X2_T(static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)(v32, v31, a2[11], a2[12], a2[13], a2[14], a2[2].n128_f64[0]));
    v34 = v33;

    if (v34 >= 1.0)
    {
LABEL_28:

LABEL_5:
      swift_bridgeObjectRelease(v18);
    }
    else
    {
      swift_bridgeObjectRelease(v18);
      v35 = vsub_f32(a3, v39);
      v36 = vaddv_f32(vmul_f32(v35, v35));
      if (v36 < v7)
      {

        v37 = 0;
        v7 = v36;
        v38 = v26;
      }
      else
      {

      }
    }
  }
  v17 = v15 + 3;
  if (v17 < v11)
  {
    v16 = *(_QWORD *)(v40 + 8 * v17);
    if (!v16)
    {
      while (1)
      {
        v12 = v17 + 1;
        if (__OFADD__(v17, 1))
          break;
        if (v12 >= v11)
          goto LABEL_30;
        v16 = *(_QWORD *)(v40 + 8 * v12);
        ++v17;
        if (v16)
          goto LABEL_21;
      }
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
      return;
    }
    v12 = v17;
    goto LABEL_21;
  }
LABEL_30:
  swift_release(a1);
  if (v38 && (v37 & 1) != 0)
    goto LABEL_36;
}

void sub_1000921EC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X3>, uint64_t a5@<X8>, unint64_t a6@<D0>, float a7@<S1>)
{
  float32x4_t *v13;
  double v14;
  int8x16_t v15;
  double v16;
  float v17;
  uint64_t v18;
  __n128 v19;
  int8x16_t v20;
  float v21;
  float v22;
  float32x2_t v23;
  uint64_t *v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  _QWORD *v30;
  uint64_t (*v31)(void);
  _QWORD *v32;
  void (*v33)(_QWORD *, uint64_t);
  uint64_t v34;
  uint64_t (*v35)(_QWORD *, uint64_t);
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  __n128 v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  __n128 v51;
  __n128 v52;
  __n128 v53;
  __n128 v54;
  __n128 v55;
  __n128 v56;
  uint64_t v57;
  __n128 v58;
  __n128 v59;
  uint64_t v60;
  __n128 v61;
  __n128 v62;
  float32x4_t v63;
  float v64;
  int32x2_t v65;
  float32x2_t v66;
  int32x2_t v67;
  float32x2_t v68;
  float32x2_t v69;
  __n128 v70;
  __n128 v71;
  uint64_t v72;
  __n128 v73;
  float32x4_t v74;
  float32x2_t v75;
  float32x2_t v76;
  float32x2_t v77;
  float32x2_t v78;
  __n128 v79;
  __n128 v80;
  uint64_t v81;
  __n128 v82;
  float32x4_t v83;
  float32x2_t v84;
  float32x2_t v85;
  float v86;
  void *v87;
  float32x2_t v88;
  __n128 v89;
  __n128 v90;
  __int128 v91;
  __n128 v92;
  __n128 v93;
  __n128 v94;
  __n128 v95;
  __n128 v96;
  __n128 v97;
  float v98;
  uint64_t v99;
  float32x2_t v100;
  float32x2_t v101;
  __n128 v102;
  __n128 v103;
  __n128 v104;
  char v105;
  float32x4_t v106;
  __n128 v107;
  __n128 v108;
  __n128 v109;
  __n128 v110;
  float32x2_t v111;
  float v112;
  void *v113;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  __n128 v120;
  __n128 v121;
  __n128 v122;
  __n128 v123;
  __n128 v124;
  __n128 v125;
  int8x16_t v126;
  __n128 v127;
  __n128 v128;
  __n128 v129;
  __n128 v130;
  __n128 v131;
  __n128 v132;
  __n128 v133;
  __n128 v134;
  __n128 v135;
  __n128 v136;
  __n128 v137;
  __n128 v138;
  __n128 v139;
  __n128 v140;
  __n128 v141;
  __n128 v142;
  float32x2_t v143;
  __n128 v144;

  v13 = (float32x4_t *)SIMD3<>.zero.unsafeMutableAddressor(a1);
  v106 = *v13;
  v14 = a4[2].n128_f64[0];
  v138 = a4[12];
  v140 = a4[11];
  v134 = a4[14];
  v136 = a4[13];
  v141 = a4[21];
  v130 = a4[23];
  v132 = a4[22];
  v128 = a4[24];
  *(double *)v15.i64 = simd_float4x4.forward.getter(v13);
  v126 = v15;
  v16 = simd_float4x4.position.getter(v141, v132, v130, v128);
  v18 = *(_QWORD *)(a1 + 16);
  v19 = 0uLL;
  if (!v18)
  {
    v87 = 0;
    v88 = 0;
    v89 = 0uLL;
    v90 = 0uLL;
    v91 = 0uLL;
LABEL_34:
    *(_QWORD *)a5 = v87;
    *(_QWORD *)(a5 + 8) = 0;
    *(__n128 *)(a5 + 16) = v19;
    *(__n128 *)(a5 + 32) = v89;
    *(__n128 *)(a5 + 48) = v90;
    *(_OWORD *)(a5 + 64) = v91;
    *(float32x2_t *)(a5 + 80) = v88;
    return;
  }
  v109 = (__n128)matrix_identity_float4x4.columns[1];
  v110 = (__n128)matrix_identity_float4x4.columns[0];
  v107 = (__n128)matrix_identity_float4x4.columns[3];
  v108 = (__n128)matrix_identity_float4x4.columns[2];
  v20 = v126;
  v20.i32[0] = vextq_s8(v20, v20, 8uLL).u32[0];
  v111 = vsub_f32(0, *(float32x2_t *)v20.i8);
  v112 = 0.0 - *(float *)v126.i32;
  v21 = (float)((float)(v17 + (float)(0.1 * v111.f32[0])) * v111.f32[0])
      + (float)((float)((float)(0.0 - *(float *)v126.i32)
                      * (float)(*(float *)&v16 + (float)((float)(0.0 - *(float *)v126.i32) * 0.1)))
              + vmuls_lane_f32(*((float *)&v16 + 1) + vmuls_lane_f32(0.1, v111, 1), v111, 1));
  v22 = a7 * a7;
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a2);
  v99 = a3;
  swift_bridgeObjectRetain(a3);
  v113 = 0;
  v101 = 0;
  v23.i32[1] = v111.i32[1];
  v23.f32[0] = 0.0 - *(float *)v126.i32;
  v100 = v23;
  v24 = (uint64_t *)(a1 + 40);
  v105 = 1;
  v25 = v110;
  v103 = v108;
  v104 = v109;
  v102 = v107;
  do
  {
    if (!*(_QWORD *)(a2 + 16))
    {
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    v142 = v25;
    v26 = *(v24 - 1);
    v27 = *v24;
    swift_bridgeObjectRetain(*v24);
    v28 = sub_1000C80A8(v26, v27);
    if ((v29 & 1) == 0)
      goto LABEL_36;
    v30 = *(_QWORD **)(*(_QWORD *)(a2 + 56) + 8 * v28);
    v31 = *(uint64_t (**)(void))((swift_isaMask & *v30) + 0x2C8);
    v32 = v30;
    LOBYTE(v31) = v31();

    if ((v31 & 1) == 0
      || (v33 = *(void (**)(_QWORD *, uint64_t))((swift_isaMask & *v32) + 0xD0),
          v32 = v32,
          v33(v32, v34),
          v32,
          !MeasureObjectState.isMovable()()))
    {

LABEL_17:
      swift_bridgeObjectRelease(v27);
      v25 = v142;
      goto LABEL_18;
    }
    v35 = *(uint64_t (**)(_QWORD *, uint64_t))((swift_isaMask & *v32) + 0x250);
    v36 = v32;
    v38 = v35(v36, v37);

    if ((v38 & 0xC000000000000001) != 0)
    {
      v39 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v38);
    }
    else
    {
      if (!*(_QWORD *)((v38 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_37;
      v39 = *(id *)(v38 + 32);
    }
    v40 = v39;
    v41 = swift_bridgeObjectRelease(v38);
    v42.n128_f64[0] = (*(double (**)(__n128))((swift_isaMask & *v40) + 0x2B0))(v41);
    v131 = v43;
    v133 = v42;
    v127 = v45;
    v129 = v44;

    v46 = v36;
    v48 = v35(v46, v47);

    if ((v48 & 0xC000000000000001) != 0)
    {
      v49 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v48);
    }
    else
    {
      if (*(_QWORD *)((v48 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
        goto LABEL_38;
      v49 = *(id *)(v48 + 40);
    }
    v50 = v49;
    v51 = swift_bridgeObjectRelease(v48);
    v52.n128_f64[0] = (*(double (**)(__n128))((swift_isaMask & *v50) + 0x2B0))(v51);
    v124 = v53;
    v125 = v52;
    v122 = v55;
    v123 = v54;

    type metadata accessor for MeasureCamera(0);
    v56.n128_f64[0] = simd_float4x4.position.getter(v133, v131, v129, v127);
    v117 = (float32x4_t)v56;
    v58.n128_f64[0] = static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)(v57, v56, v140, v138, v136, v134, v14);
    v120 = v58;
    v59.n128_f64[0] = simd_float4x4.position.getter(v125, v124, v123, v122);
    v115 = (float32x4_t)v59;
    v61.n128_f64[0] = static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)(v60, v59, v140, v138, v136, v134, v14);
    v62 = v61;
    *(float32x2_t *)v63.f32 = vsub_f32(*(float32x2_t *)v115.f32, *(float32x2_t *)v117.f32);
    v64 = v115.f32[2] - v117.f32[2];
    if (v120.n128_f32[2] <= 1.0)
    {
      if (v62.n128_f32[2] <= 1.0)
      {
        v63.i64[1] = LODWORD(v64);
        v119 = v63;
      }
      else
      {
        v75 = vmul_f32(v111, (float32x2_t)__PAIR64__(v117.u32[1], vextq_s8((int8x16_t)v117, (int8x16_t)v117, 8uLL).u32[0]));
        v76 = vmul_f32(v100, *(float32x2_t *)v63.f32);
        v77 = (float32x2_t)vext_s8((int8x8_t)v75, (int8x8_t)v76, 4uLL);
        v76.f32[0] = v112 * v117.f32[0];
        v75.f32[1] = v111.f32[0] * v64;
        v78 = vadd_f32(v75, vadd_f32(v76, v77));
        v78.f32[0] = (float)(v21 - v78.f32[0]) / v78.f32[1];
        v79.n128_u64[0] = (unint64_t)vadd_f32(*(float32x2_t *)v117.f32, vmul_n_f32(*(float32x2_t *)v63.f32, v78.f32[0]));
        v79.n128_f32[2] = v117.f32[2] + (float)(v64 * v78.f32[0]);
        v79.n128_u32[3] = 1.0;
        v122 = v79;
        v80.n128_f64[0] = simd_float4x4.position.getter(v125, v124, v123, v79);
        v116 = (float32x4_t)v80;
        v82.n128_f64[0] = static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)(v81, v80, v140, v138, v136, v134, v14);
        v62 = v82;
        v83 = vsubq_f32(v116, v117);
        v83.i32[3] = 0;
        v119 = v83;
      }
      v73 = v120;
    }
    else
    {
      if (v62.n128_f32[2] > 1.0)
        goto LABEL_26;
      v65 = (int32x2_t)vmul_f32(v111, (float32x2_t)__PAIR64__(v115.u32[1], vextq_s8((int8x16_t)v115, (int8x16_t)v115, 8uLL).u32[0]));
      v121 = v62;
      v66.i32[1] = v63.i32[1];
      v66.f32[0] = v115.f32[2] - v117.f32[2];
      v67 = (int32x2_t)vmul_f32(v111, vsub_f32(0, v66));
      v68.i32[0] = v115.i32[0];
      v68.f32[1] = 0.0 - v63.f32[0];
      v69 = vadd_f32((float32x2_t)vzip1_s32(v65, v67), vadd_f32(vmul_n_f32(v68, v112), (float32x2_t)vzip2_s32(v65, v67)));
      v69.f32[0] = (float)(v21 - v69.f32[0]) / v69.f32[1];
      v70.n128_u64[0] = (unint64_t)vsub_f32(*(float32x2_t *)v115.f32, vmul_n_f32(*(float32x2_t *)v63.f32, v69.f32[0]));
      v70.n128_f32[2] = v115.f32[2] - (float)(v64 * v69.f32[0]);
      v70.n128_u32[3] = 1.0;
      v127 = v70;
      v71.n128_f64[0] = simd_float4x4.position.getter(v133, v131, v129, v70);
      v118 = (float32x4_t)v71;
      v73.n128_f64[0] = static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)(v72, v71, v140, v138, v136, v134, v14);
      v62 = v121;
      v74 = vsubq_f32(v115, v118);
      v74.i32[3] = 0;
      v119 = v74;
    }
    v73.n128_u32[2] = 0;
    v62.n128_u32[2] = 0;
    v84 = COERCE_FLOAT32X2_T(closestPointOnLine(lineP1:lineP2:point:)(v73, v62, (__n128)a6));
    v85 = vsub_f32((float32x2_t)a6, v84);
    v86 = vaddv_f32(vmul_f32(v85, v85));
    if (v86 >= v22)
    {
LABEL_26:

      goto LABEL_17;
    }
    v143 = v84;
    swift_bridgeObjectRelease(v27);

    v105 = 0;
    v101 = v143;
    v109 = v124;
    v110 = v125;
    v108 = v123;
    v106 = v119;
    v107 = v122;
    v25 = v133;
    v103 = v129;
    v104 = v131;
    v102 = v127;
    v113 = v46;
    v22 = v86;
LABEL_18:
    v24 += 2;
    --v18;
  }
  while (v18);
  v144 = v25;
  swift_bridgeObjectRelease(v99);
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(a1);
  if ((v105 & 1) != 0)
  {

    v87 = 0;
    v88 = 0;
    v89 = 0uLL;
    v90 = 0uLL;
    v91 = 0uLL;
    v19 = 0uLL;
    goto LABEL_34;
  }
  type metadata accessor for MeasureCamera(0);
  v92 = (__n128)(unint64_t)v101;
  v92.n128_u32[2] = 0;
  v93.n128_f64[0] = static MeasureCamera.unprojectPoint(_:viewProjectionInv:viewportSize:)(v92);
  v137 = v93;
  v94 = (__n128)(unint64_t)v101;
  v94.n128_u32[2] = 1.0;
  v95.n128_f64[0] = static MeasureCamera.unprojectPoint(_:viewProjectionInv:viewportSize:)(v94);
  v135 = v95;
  v96.n128_f64[0] = simd_float4x4.position.getter(v144, v104, v103, v102);
  v139 = v96;
  v97.n128_f64[0] = simd_float4x4.position.getter(v110, v109, v108, v107);
  lineIntersection(line1P1:line1P2:line2P1:line2P2:)(v137, v135, v139, v97);
  v87 = v113;
  if (v113)
  {
    *(float32x2_t *)&v91 = vadd_f32((float32x2_t)v139.n128_u64[0], vmul_n_f32(*(float32x2_t *)v106.f32, v98));
    *((float *)&v91 + 2) = v139.n128_f32[2] + vmuls_lane_f32(v98, v106, 2);
    HIDWORD(v91) = 1.0;
    v88 = v101;
    v19 = v144;
    v90 = v103;
    v89 = v104;
    goto LABEL_34;
  }
LABEL_39:
  __break(1u);
}

void sub_10009297C(uint64_t a1@<X0>, __n128 *a2@<X1>, unint64_t a3@<X8>, float32x2_t a4@<D0>, float a5@<S1>)
{
  double v7;
  float v10;
  uint64_t (*v11)(void);
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float v33;
  float v34;
  float v35;
  double v36;
  unint64_t v37;
  __n128 *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  __n128 v44;
  __n128 v45;
  __n128 v46;
  __n128 v47;
  __n128 v48;
  uint64_t v49;
  double v50;
  float32x2_t v51;
  float v52;
  uint64_t v53;
  unint64_t v54;
  double v55;
  char v56;
  double v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  __n128 v61;
  __n128 v62;
  __n128 v63;
  __n128 v64;
  uint64_t v65;
  __n128 v66;
  __n128 v67;
  __n128 v68;
  __n128 v69;
  __n128 v70;
  __n128 v71;
  __n128 v72;
  __n128 v73;
  __n128 v74;
  __n128 v75;
  __n128 v76;
  float32x4_t v77;
  float32x4_t v78;

  *(float *)&v7 = a5;
  if (qword_10047AC68 != -1)
LABEL_25:
    swift_once(&qword_10047AC68, sub_100183514);
  v10 = *(float *)&dword_1004AF794;
  v11 = *(uint64_t (**)(void))((swift_isaMask & *(_QWORD *)a1) + 0x250);
  v12 = v11();
  v13 = v12;
  if ((v12 & 0xC000000000000001) != 0)
  {
    v14 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v12);
  }
  else
  {
    if (!*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_28;
    }
    v14 = *(id *)(v12 + 32);
  }
  v15 = v14;
  v16 = swift_bridgeObjectRelease(v13);
  v17.n128_f64[0] = (*(double (**)(__n128))((swift_isaMask & *v15) + 0x2B0))(v16);
  v72 = v18;
  v73 = v17;
  v70 = v20;
  v71 = v19;

  v21 = v11();
  v13 = v21;
  if ((v21 & 0xC000000000000001) != 0)
  {
LABEL_28:
    v22 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v13);
    goto LABEL_8;
  }
  if (*(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
  {
    __break(1u);
    goto LABEL_30;
  }
  v22 = *(id *)(v21 + 40);
LABEL_8:
  v23 = v22;
  v24 = swift_bridgeObjectRelease(v13);
  v25.n128_f64[0] = (*(double (**)(__n128))((swift_isaMask & *v23) + 0x2B0))(v24);
  v68 = v26;
  v69 = v25;
  v66 = v28;
  v67 = v27;

  *(double *)v29.i64 = simd_float4x4.position.getter(v69, v68, v67, v66);
  v77 = v29;
  *(double *)v30.i64 = simd_float4x4.position.getter(v73, v72, v71, v70);
  v31 = vsubq_f32(v77, v30);
  v32 = vmulq_f32(v31, v31);
  v33 = sqrtf(v32.f32[2] + vaddv_f32(*(float32x2_t *)v32.f32));
  v34 = floorf(v33 / v10);
  if ((~LODWORD(v34) & 0x7F800000) == 0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (v34 <= -9.2234e18)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (v34 >= 9.2234e18)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v58 = a3;
  v65 = (uint64_t)v34;
  if ((uint64_t)v34 < 1)
  {
LABEL_20:
    v53 = 0;
    v37 = 0;
    v54 = 0;
    a2 = 0;
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v42 = 0;
    a3 = 0;
    v55 = 0.0;
    v56 = 1;
LABEL_23:
    *(_QWORD *)v58 = v53;
    *(_QWORD *)(v58 + 8) = 0;
    *(_QWORD *)(v58 + 16) = v37;
    *(_QWORD *)(v58 + 24) = v54;
    *(_QWORD *)(v58 + 32) = a2;
    *(_QWORD *)(v58 + 40) = v39;
    *(_QWORD *)(v58 + 48) = v40;
    *(_QWORD *)(v58 + 56) = v41;
    *(_QWORD *)(v58 + 64) = v42;
    *(_QWORD *)(v58 + 72) = a3;
    *(double *)(v58 + 80) = v55;
    *(_BYTE *)(v58 + 88) = v56;
    return;
  }
  v35 = (float)((float)(*(float *)&v7 * *(float *)&v7) * 0.6) * 0.6;
  type metadata accessor for MeasureCamera(0);
  v36 = 0.0;
  v37 = 0;
  v60 = 0;
  v38 = a2;
  a2 = 0;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  a3 = 0;
  v7 = v38[2].n128_f64[0];
  v63 = v38[12];
  v64 = v38[11];
  v61 = v38[14];
  v62 = v38[13];
  a1 = 1;
  v59 = 0x100000001;
  while (1)
  {
    *(float *)&v57 = (float)(v10 * (float)a1) / v33;
    v44.n128_f64[0] = slerp(transform1:transform2:percent:)(v73, v72, v71, v70, v69, v68, v67, v66, v57);
    v74 = v44;
    v75 = v45;
    v76 = v46;
    v78 = (float32x4_t)v47;
    v48.n128_f64[0] = simd_float4x4.position.getter(v44, v45, v46, v47);
    v50 = static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)(v49, v48, v64, v63, v62, v61, v7);
    v51 = vsub_f32(a4, *(float32x2_t *)&v50);
    v52 = vaddv_f32(vmul_f32(v51, v51));
    if (v52 < v35)
    {
      v60 = v74.n128_u64[1];
      v37 = v74.n128_u64[0];
      v39 = v75.n128_u64[1];
      a2 = (__n128 *)v75.n128_u64[0];
      v41 = v76.n128_u64[1];
      v40 = v76.n128_u64[0];
      a3 = v78.u64[1];
      v42 = v78.i64[0];
      v36 = v50;
      if (v65 == a1)
      {
        v35 = v52;
LABEL_22:
        v56 = 0;
        v53 = LODWORD(v35);
        v55 = v36;
        v54 = v60;
        goto LABEL_23;
      }
      v59 = 0;
      v35 = v52;
      goto LABEL_14;
    }
    if (v65 == a1)
      break;
LABEL_14:
    if (__OFADD__(a1++, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
  }
  if ((v59 & 0x100000000) != 0)
    goto LABEL_20;
  if ((v59 & 1) == 0)
    goto LABEL_22;
LABEL_33:
  __break(1u);
}

void sub_100092D5C()
{
  uint64_t v0;
  _QWORD *inited;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, __n128);
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, __n128);
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, __n128);
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, __n128);
  __n128 v21;
  _BYTE v22[112];

  inited = (_QWORD *)swift_initStackObject(v0, v22);
  v2 = sub_10000EDC8(&qword_10047E5E0);
  KeyPath = swift_getKeyPath(&unk_1003B4720);
  if (qword_10047AD88 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v4 = qword_1004AF890;
  v5 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v2 + 272);
  v6 = swift_retain();
  inited[10] = v5(KeyPath, v4, v6);
  v7 = sub_10000EDC8(&qword_10047D010);
  v8 = swift_getKeyPath(&unk_1003B4748);
  v9 = qword_1004AF890;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v7 + 272);
  v11 = swift_retain();
  inited[11] = v10(v8, v9, v11);
  v12 = sub_10000EDC8(&qword_10047D448);
  v13 = swift_getKeyPath(&unk_1003B4770);
  v14 = qword_1004AF890;
  v15 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v12 + 272);
  v16 = swift_retain();
  inited[12] = v15(v13, v14, v16);
  v17 = swift_getKeyPath(&unk_1003B4798);
  v18 = sub_10000EDC8(&qword_100480270);
  v19 = qword_1004AF890;
  v20 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v18 + 272);
  v21 = swift_retain();
  inited[13] = v20(v17, v19, v21);
  swift_release();
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000002DLL, 0x80000001003D7D70, "Measure/LabelController.swift", 29, 2, 40, 0);
  __break(1u);
}

double sub_100092F04()
{
  uint64_t v0;
  double result;

  swift_retain();
  StateValue.ifUpdated(_:)(sub_100095778, v0);
  swift_release();
  swift_retain();
  StateValue.ifUpdated(_:)(sub_100095780, v0);
  swift_release();
  swift_retain();
  StateValue.ifUpdated(_:)(sub_1000957A0, v0);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t sub_100092F88(_BYTE *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  BOOL v13;
  __n128 v14;
  void *v15;
  void *v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD aBlock[6];

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  result = __chkstk_darwin(v8);
  v12 = (char *)aBlock - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*a1)
    v13 = 0;
  else
    v13 = a1[3] == 0;
  if (!v13)
  {
    sub_100049274();
    v15 = (void *)static OS_dispatch_queue.main.getter(v14);
    aBlock[4] = sub_1000957E0;
    aBlock[5] = a2;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10003ECA0;
    aBlock[3] = &unk_100443490;
    v16 = _Block_copy(aBlock);
    swift_retain();
    v17 = swift_release();
    static DispatchQoS.unspecified.getter(v17);
    aBlock[0] = _swiftEmptyArrayStorage;
    v18 = sub_10000C4B0((unint64_t *)&qword_10047D7F0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v19 = sub_10000EDC8((uint64_t *)&unk_10047E430);
    v20 = sub_100030E64();
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v19, v20, v4, v18);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v7, v16);
    _Block_release(v16);

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
  return result;
}

uint64_t sub_10009316C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 80));
  swift_release(*(_QWORD *)(v0 + 88));
  swift_release(*(_QWORD *)(v0 + 96));
  return swift_release(*(_QWORD *)(v0 + 104));
}

uint64_t sub_1000931A8()
{
  uint64_t v0;

  v0 = StateObserver.deinit();

  swift_release(*(_QWORD *)(v0 + 80));
  swift_release(*(_QWORD *)(v0 + 88));
  swift_release(*(_QWORD *)(v0 + 96));
  swift_release(*(_QWORD *)(v0 + 104));
  return swift_deallocClassInstance(v0, 112, 7);
}

uint64_t type metadata accessor for LabelController(uint64_t a1)
{
  uint64_t result;

  result = qword_100480140;
  if (!qword_100480140)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LabelController);
  return result;
}

uint64_t sub_100093240(uint64_t a1)
{
  _QWORD v2[6];

  v2[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[4] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[5] = (char *)&value witness table for Builtin.NativeObject + 64;
  return swift_initClassMetadata2(a1, 256, 6, v2, a1 + 208);
}

uint64_t sub_100093298(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7)
{
  sub_100095574(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 24) = a5;
  *(double *)(a1 + 32) = a6;
  *(double *)(a1 + 40) = a7;
  return swift_bridgeObjectRetain(a3);
}

double sub_100093308(uint64_t a1)
{
  double result;

  sub_100095574(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

double sub_100093344(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  void *v11;
  id v12;
  void *v13;
  double result;
  _BYTE v15[24];

  v5 = *(_QWORD *)(v2 + 64);
  v6 = (os_unfair_lock_s *)(v5 + OBJC_IVAR____TtC7Measure9LabelView_labelLock);
  swift_beginAccess(v5 + OBJC_IVAR____TtC7Measure9LabelView_labelLock, v15, 33, 0);
  os_unfair_lock_lock(v6);
  swift_endAccess(v15);
  v7 = (uint64_t *)(v5 + OBJC_IVAR____TtC7Measure9LabelView_labels);
  swift_beginAccess(v5 + OBJC_IVAR____TtC7Measure9LabelView_labels, v15, 32, 0);
  v8 = *v7;
  if (!*(_QWORD *)(*v7 + 16))
    goto LABEL_5;
  swift_bridgeObjectRetain(a2);
  v9 = sub_1000C80A8(a1, a2);
  if ((v10 & 1) == 0)
  {
    swift_bridgeObjectRelease(a2);
LABEL_5:
    swift_endAccess(v15);
    goto LABEL_6;
  }
  v11 = *(void **)(*(_QWORD *)(v8 + 56) + 8 * v9);
  swift_endAccess(v15);
  v12 = v11;
  swift_bridgeObjectRelease(a2);
  sub_1000B00C4();
  swift_beginAccess(v7, v15, 33, 0);
  v13 = (void *)sub_100093CD4(a1, a2, sub_1000BEF88);
  swift_endAccess(v15);

LABEL_6:
  swift_beginAccess(v6, v15, 33, 0);
  os_unfair_lock_unlock(v6);
  *(_QWORD *)&result = swift_endAccess(v15).n128_u64[0];
  return result;
}

uint64_t sub_100093498(_QWORD *a1)
{
  uint64_t (*v2)(void);
  char v3;
  char v4;
  _QWORD *v5;
  uint64_t result;

  v2 = *(uint64_t (**)(void))((swift_isaMask & *a1) + 0xD0);
  if ((unint64_t)(v2() - 3) <= 1)
  {
    v3 = byte_1004AF779;
    v4 = byte_1004AF77A;
    v5 = a1;
    return sub_1000C3AE8(v5, v3, v4);
  }
  if (((*(uint64_t (**)(void))((swift_isaMask & *a1) + 0x2C8))() & 1) != 0
    || v2() == 6
    || (result = v2(), result == 9))
  {
    v5 = a1;
    v3 = 0;
    v4 = 0;
    return sub_1000C3AE8(v5, v3, v4);
  }
  return result;
}

void sub_100093560(char *a1)
{
  uint64_t (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  _QWORD *i;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;

  v2 = *(uint64_t (**)(void))((swift_isaMask & *(_QWORD *)a1) + 0x230);
  v3 = v2();
  v4 = v3;
  if ((v3 & 0xC000000000000001) != 0)
    goto LABEL_16;
  if (!*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_14;
  for (i = *(id *)(v3 + 32); ; i = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v4))
  {
    v6 = i;
    swift_bridgeObjectRelease(v4);
    sub_1000C3584(v6);

    v7 = v2();
    v4 = v7;
    if ((v7 & 0xC000000000000001) != 0)
    {
      v8 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v7);
    }
    else
    {
      if (!*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_15;
      v8 = *(id *)(v7 + 32);
    }
    v9 = v8;
    swift_bridgeObjectRelease(v4);
    sub_1000C3AE8(v9, 0, 0);

    v10 = v2();
    v4 = v10;
    if ((v10 & 0xC000000000000001) != 0)
    {
      v11 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v10);
    }
    else
    {
      if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
      {
LABEL_14:
        __break(1u);
        goto LABEL_15;
      }
      v11 = *(id *)(v10 + 40);
    }
    v12 = v11;
    swift_bridgeObjectRelease(v4);
    sub_1000C3584(v12);

    v13 = v2();
    v4 = v13;
    if ((v13 & 0xC000000000000001) != 0)
      break;
    if (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10) >= 2uLL)
    {
      v14 = *(id *)(v13 + 40);
      goto LABEL_13;
    }
LABEL_15:
    __break(1u);
LABEL_16:
    ;
  }
  v14 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v13);
LABEL_13:
  v15 = v14;
  swift_bridgeObjectRelease(v4);
  sub_1000C3AE8(v15, 0, 0);

  sub_1000C3D6C(a1);
  sub_1000C451C((uint64_t)a1);
}

void sub_100093728(_QWORD *a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t (*v4)(__n128);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  void *v18;
  char *v19;
  __n128 v20;
  uint64_t (*v21)(__n128);
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  __n128 v46;
  __n128 v47;
  __n128 v48;
  __n128 v49;
  __n128 v50;
  __n128 v51;
  __n128 v52;
  _BYTE v53[32];

  v3 = *(uint64_t **)(v1 + 64);
  sub_1000C451C((uint64_t)a1);
  v4 = (uint64_t (*)(__n128))&swift_isaMask;
  v5 = (*(uint64_t (**)(void))((swift_isaMask & *a1) + 0x230))();
  if ((unint64_t)v5 >> 62)
    goto LABEL_26;
  v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v6)
  {
LABEL_30:
    swift_bridgeObjectRelease(v5);
    return;
  }
LABEL_3:
  if (v6 >= 1)
  {
    v7 = 0;
    v8 = (os_unfair_lock_s *)((char *)v3 + OBJC_IVAR____TtC7Measure9LabelView_labelLock);
    v3 = (uint64_t *)((char *)v3 + OBJC_IVAR____TtC7Measure9LabelView_labels);
    v44 = v6;
    while (1)
    {
      if ((v5 & 0xC000000000000001) != 0)
        v9 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v5);
      else
        v9 = *(id *)(v5 + 8 * v7 + 32);
      v10 = v9;
      swift_beginAccess(v8, v53, 33, 0);
      os_unfair_lock_lock(v8);
      v11 = swift_endAccess(v53);
      v12 = (*(uint64_t (**)(uint64_t))((*(_QWORD *)v4 & *v10) + 0xB8))(v11);
      v14 = v13;
      swift_beginAccess(v3, v53, 32, 0);
      v15 = *v3;
      if (*(_QWORD *)(*v3 + 16) && (v16 = sub_1000C80A8(v12, v14), (v17 & 1) != 0))
      {
        v18 = *(void **)(*(_QWORD *)(v15 + 56) + 8 * v16);
        swift_endAccess(v53);
        v19 = v18;
        v20 = swift_bridgeObjectRelease(v14);
        v21 = v4;
        v4 = *(uint64_t (**)(__n128))((*(_QWORD *)v4 & *v10) + 0x250);
        v22 = v4(v20);
        v23 = v22;
        if ((v22 & 0xC000000000000001) != 0)
        {
          v24 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v22);
        }
        else
        {
          if (!*(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_25:
            __break(1u);
LABEL_26:
            if (v5 < 0)
              v43 = v5;
            else
              v43 = v5 & 0xFFFFFFFFFFFFFF8;
            v6 = _CocoaArrayWrapper.endIndex.getter(v43);
            if (!v6)
              goto LABEL_30;
            goto LABEL_3;
          }
          v24 = *(id *)(v22 + 32);
        }
        v25 = v24;
        v26 = swift_bridgeObjectRelease(v23);
        v27.n128_f64[0] = (*(double (**)(__n128))((*(_QWORD *)v21 & *v25) + 0x2B0))(v26);
        v51 = v28;
        v52 = v27;
        v49 = v30;
        v50 = v29;

        v31 = ((uint64_t (*)(void))v4)();
        v32 = v31;
        if ((v31 & 0xC000000000000001) != 0)
        {
          v33 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v31);
        }
        else
        {
          if (*(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
            goto LABEL_25;
          v33 = *(id *)(v31 + 40);
        }
        v34 = v33;
        v35 = swift_bridgeObjectRelease(v32);
        v4 = v21;
        v36.n128_f64[0] = (*(double (**)(__n128))((*(_QWORD *)v21 & *v34) + 0x2B0))(v35);
        v47 = v37;
        v48 = v36;
        v45 = v39;
        v46 = v38;

        v40 = sub_1000B0428(0, 0, v52, v51, v50, v49, v48, v47, v46, v45);
        v41 = (*(uint64_t (**)(uint64_t))((*(_QWORD *)v21 & *v10) + 0xD0))(v40);
        v42 = *(_QWORD *)&v19[OBJC_IVAR____TtC7Measure11LabelRender_state];
        *(_QWORD *)&v19[OBJC_IVAR____TtC7Measure11LabelRender_state] = v41;
        if (v41 != v42)
          sub_1000ADB38(v41);

        v6 = v44;
      }
      else
      {
        swift_bridgeObjectRelease(v14);
        swift_endAccess(v53);
      }
      ++v7;
      swift_beginAccess(v8, v53, 33, 0);
      os_unfair_lock_unlock(v8);
      swift_endAccess(v53);

      if (v6 == v7)
        goto LABEL_30;
    }
  }
  __break(1u);
}

uint64_t sub_100093A8C(_QWORD *a1)
{
  return sub_1000C3584(a1);
}

void sub_100093AB4()
{
  sub_1000C4C48();
}

void sub_100093AD4(char a1)
{
  uint64_t v1;
  id v3;
  id v4;

  v3 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(v1 + 64)
                                                             + OBJC_IVAR____TtC7Measure9LabelView_sceneView), "overlaySKScene"));
  if (v3)
  {
    v4 = v3;
    objc_msgSend(v3, "setHidden:", a1 & 1);

  }
}

uint64_t sub_100093B48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100093B70(a1, a2, type metadata accessor for MetricsManager.EdgeGuideMetric, sub_1000BE4E4, a3);
}

uint64_t sub_100093B5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100093B70(a1, a2, type metadata accessor for MetricsManager.SurfaceVectorGuideMetric, sub_1000BE4F8, a3);
}

uint64_t sub_100093B70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(_QWORD)@<X2>, void (*a4)(void)@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v5;
  uint64_t *v8;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v8 = v5;
  v12 = *v8;
  swift_bridgeObjectRetain(*v8);
  v13 = sub_1000C80A8(a1, a2);
  LOBYTE(a2) = v14;
  swift_bridgeObjectRelease(v12);
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v8);
    v16 = *v8;
    v23 = *v8;
    *v8 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      a4();
      v16 = v23;
    }
    swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v16 + 48) + 16 * v13 + 8));
    v17 = *(_QWORD *)(v16 + 56);
    v18 = a3(0);
    v19 = *(_QWORD *)(v18 - 8);
    sub_10006CAB4(v17 + *(_QWORD *)(v19 + 72) * v13, a5, a3);
    sub_1000946E4(v13, v16, a3);
    v20 = *v8;
    *v8 = v16;
    swift_bridgeObjectRelease(v20);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v19 + 56))(a5, 0, 1, v18);
  }
  else
  {
    v22 = a3(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(a5, 1, 1, v22);
  }
}

uint64_t sub_100093CA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100093B70(a1, a2, type metadata accessor for MetricsManager.PersonHeightMetric, sub_1000BEF74, a3);
}

uint64_t sub_100093CBC(uint64_t a1, uint64_t a2)
{
  return sub_100093CD4(a1, a2, sub_1000BEF88);
}

uint64_t sub_100093CC8(uint64_t a1, uint64_t a2)
{
  return sub_100093CD4(a1, a2, sub_1000BF3E4);
}

uint64_t sub_100093CD4(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t *v3;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  char v10;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v5 = v3;
  v8 = *v5;
  swift_bridgeObjectRetain(*v5);
  v9 = sub_1000C80A8(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v5);
  v12 = *v5;
  v16 = *v5;
  *v5 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    a3();
    v12 = v16;
  }
  swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v9 + 8));
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v9);
  sub_100094504(v9, v12);
  v14 = *v5;
  *v5 = v12;
  swift_bridgeObjectRelease(v14);
  return v13;
}

uint64_t sub_100093DAC(uint64_t a1, uint64_t a2)
{
  return sub_100093CD4(a1, a2, sub_1000BF3F0);
}

uint64_t sub_100093DB8(uint64_t a1, uint64_t a2)
{
  return sub_100093CD4(a1, a2, sub_1000BF3FC);
}

uint64_t sub_100093DC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100093B70(a1, a2, type metadata accessor for MetricsManager.VerticalGuideMetric, sub_1000BF408, a3);
}

unint64_t sub_100093DD8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_1000C80A8(a1, a2);
  v9 = v8;
  swift_bridgeObjectRelease(v6);
  if ((v9 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v11 = *v3;
    v15 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1000BF41C();
      v11 = v15;
    }
    swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v11 + 48) + 16 * v7 + 8));
    v12 = *(unsigned int *)(*(_QWORD *)(v11 + 56) + 4 * v7);
    sub_1000948EC(v7, v11);
    v13 = *v3;
    *v3 = v11;
    swift_bridgeObjectRelease(v13);
  }
  else
  {
    v12 = 0;
  }
  return v12 | ((unint64_t)((v9 & 1) == 0) << 32);
}

void sub_100093EBC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  unint64_t v9;
  char v10;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v4 = v3;
  v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  v9 = sub_1000C80A8(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v12 = *v4;
    v21 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1000BF8FC();
      v12 = v21;
    }
    swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v9 + 8));
    v13 = *(_QWORD *)(v12 + 56) + 48 * v9;
    v14 = *(_QWORD *)v13;
    v19 = *(_OWORD *)(v13 + 24);
    v20 = *(_OWORD *)(v13 + 8);
    v15 = *(_QWORD *)(v13 + 40);
    sub_100094AC0(v9, v12);
    v16 = *v4;
    *v4 = v12;
    swift_bridgeObjectRelease(v16);
    v18 = v19;
    v17 = v20;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    v17 = 0uLL;
    v18 = 0uLL;
  }
  *(_QWORD *)a3 = v14;
  *(_OWORD *)(a3 + 8) = v17;
  *(_OWORD *)(a3 + 24) = v18;
  *(_QWORD *)(a3 + 40) = v15;
}

uint64_t sub_100093FC8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  char v6;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = v1;
  v4 = *v1;
  swift_bridgeObjectRetain(v4);
  v5 = sub_1000C84D0(a1);
  LOBYTE(a1) = v6;
  swift_bridgeObjectRelease(v4);
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v8 = *v2;
  v12 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000C042C();
    v8 = v12;
  }
  swift_release();
  v9 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v5);
  sub_100094FEC(v5, v8);
  v10 = *v2;
  *v2 = v8;
  swift_bridgeObjectRelease(v10);
  return v9;
}

double sub_100094098@<D0>(uint64_t a1@<X0>, void *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  unint64_t v9;
  char v10;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  double result;
  uint64_t v15;

  v4 = v3;
  v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  v9 = sub_1000C8530(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v12 = *v4;
    v15 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1000C0930();
      v12 = v15;
    }

    swift_release();
    sub_100020848((_OWORD *)(*(_QWORD *)(v12 + 56) + 32 * v9), a3);
    sub_1000951C8(v9, v12);
    v13 = *v4;
    *v4 = v12;
    *(_QWORD *)&result = swift_bridgeObjectRelease(v13).n128_u64[0];
  }
  else
  {
    result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t sub_100094190(uint64_t a1)
{
  return sub_1000941A8(a1, sub_1000C0C9C);
}

uint64_t sub_10009419C(uint64_t a1)
{
  return sub_1000941A8(a1, sub_1000C0CA8);
}

uint64_t sub_1000941A8(uint64_t a1, void (*a2)(void))
{
  uint64_t *v2;
  uint64_t *v4;
  unint64_t v5;
  char v6;
  unint64_t v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v4 = v2;
  v5 = sub_1000C8368(a1);
  if ((v6 & 1) == 0)
    return 0;
  v7 = v5;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v9 = *v2;
  v13 = *v4;
  *v4 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    a2();
    v9 = v13;
  }
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v7);
  sub_1000953E0(v7, v9);
  v11 = *v4;
  *v4 = v9;
  swift_bridgeObjectRelease(v11);
  return v10;
}

unint64_t sub_100094240(unint64_t a1, uint64_t a2)
{
  return sub_1000946E4(a1, a2, type metadata accessor for MetricsManager.EdgeGuideMetric);
}

unint64_t sub_10009424C(unint64_t a1, uint64_t a2)
{
  return sub_1000946E4(a1, a2, type metadata accessor for MetricsManager.SurfaceVectorGuideMetric);
}

unint64_t sub_100094258(unint64_t a1, uint64_t a2)
{
  return sub_1000946E4(a1, a2, type metadata accessor for MetricsManager.PersonHeightMetric);
}

unint64_t sub_100094264(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, unint64_t, uint64_t);
  unint64_t v37;
  uint64_t v38;

  v4 = type metadata accessor for UUID(0);
  v38 = *(_QWORD *)(v4 - 8);
  result = __chkstk_darwin(v4);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v37 = (result + 1) & v11;
      v12 = *(_QWORD *)(v38 + 72);
      v36 = *(void (**)(char *, unint64_t, uint64_t))(v38 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v36(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        v18 = *(_QWORD *)(a2 + 40);
        v19 = sub_10000C4B0(&qword_100480278, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v4, v19);
        result = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v7, v4);
        v13 = v17;
        v21 = v20 & v17;
        if (a1 >= (uint64_t)v37)
        {
          if (v21 >= v37 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            v24 = *(_QWORD *)(a2 + 48);
            result = v24 + v15 * a1;
            v25 = v24 + v16;
            v8 = v14;
            if (v15 * a1 < v16 || (v12 = v15, result >= v25 + v15))
            {
              result = swift_arrayInitWithTakeFrontToBack(result, v25, 1, v4);
LABEL_21:
              v13 = v17;
              v12 = v15;
            }
            else if (v15 * a1 != v16)
            {
              result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            v26 = *(_QWORD *)(a2 + 56);
            v27 = (_QWORD *)(v26 + 8 * a1);
            v28 = (_QWORD *)(v26 + 8 * v10);
            if (a1 != v10 || (a1 = v10, v27 >= v28 + 1))
            {
              *v27 = *v28;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v37 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        v8 = v14;
        v12 = v15;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v29 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v30 = *v29;
    v31 = (-1 << a1) - 1;
  }
  else
  {
    v29 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v31 = *v29;
    v30 = (-1 << a1) - 1;
  }
  *v29 = v31 & v30;
  v32 = *(_QWORD *)(a2 + 16);
  v33 = __OFSUB__(v32, 1);
  v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v34;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100094504(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v10 = *v9;
        v11 = v9[1];
        Hasher.init(_seed:)(v26);
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        v12 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v11);
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8)
            goto LABEL_5;
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1)
            *v15 = *v16;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = (_QWORD *)(v17 + 8 * v3);
          v19 = (_QWORD *)(v17 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v18 >= v19 + 1))
          {
            *v18 = *v19;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1000946D8(unint64_t a1, uint64_t a2)
{
  return sub_1000946E4(a1, a2, type metadata accessor for MetricsManager.VerticalGuideMetric);
}

unint64_t sub_1000946E4(unint64_t result, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  int64_t v22;
  unint64_t v23;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  _QWORD v31[9];

  v4 = result;
  v5 = a2 + 64;
  v6 = -1 << *(_BYTE *)(a2 + 32);
  v7 = (result + 1) & ~v6;
  if (((1 << v7) & *(_QWORD *)(a2 + 64 + 8 * (v7 >> 6))) != 0)
  {
    v9 = ~v6;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v6);
    if ((*(_QWORD *)(v5 + 8 * (v7 >> 6)) & (1 << v7)) != 0)
    {
      v10 = (result + 1) & v9;
      while (1)
      {
        v11 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v7);
        v12 = *v11;
        v13 = v11[1];
        Hasher.init(_seed:)(v31);
        swift_bridgeObjectRetain(v13);
        String.hash(into:)(v31, v12, v13);
        v14 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v13);
        v15 = v14 & v9;
        if (v4 >= (uint64_t)v10)
          break;
        if (v15 < v10)
          goto LABEL_11;
LABEL_12:
        v16 = *(_QWORD *)(a2 + 48);
        v17 = (_OWORD *)(v16 + 16 * v4);
        v18 = (_OWORD *)(v16 + 16 * v7);
        if (v4 != v7 || v17 >= v18 + 1)
          *v17 = *v18;
        v19 = *(_QWORD *)(a2 + 56);
        v20 = *(_QWORD *)(*(_QWORD *)(a3(0) - 8) + 72);
        v21 = v20 * v4;
        result = v19 + v20 * v4;
        v22 = v20 * v7;
        v23 = v19 + v20 * v7 + v20;
        if (v21 < v22 || result >= v23)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v4 = v7;
          if (v21 == v22)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v4 = v7;
LABEL_6:
        v7 = (v7 + 1) & v9;
        if (((*(_QWORD *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
          goto LABEL_21;
      }
      if (v15 < v10)
        goto LABEL_6;
LABEL_11:
      if (v4 < (uint64_t)v15)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_21:
    v25 = (uint64_t *)(v5 + 8 * ((unint64_t)v4 >> 6));
    v26 = *v25;
    v27 = (-1 << v4) - 1;
  }
  else
  {
    v25 = (uint64_t *)(v5 + 8 * (result >> 6));
    v27 = *v25;
    v26 = (-1 << result) - 1;
  }
  *v25 = v27 & v26;
  v28 = *(_QWORD *)(a2 + 16);
  v29 = __OFSUB__(v28, 1);
  v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1000948EC(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v10 = *v9;
        v11 = v9[1];
        Hasher.init(_seed:)(v26);
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        v12 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v11);
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8)
            goto LABEL_5;
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1)
            *v15 = *v16;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = (_DWORD *)(v17 + 4 * v3);
          v19 = (_DWORD *)(v17 + 4 * v6);
          if (v3 != v6 || (v3 = v6, v18 >= v19 + 1))
          {
            *v18 = *v19;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100094AC0(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  __int128 *v20;
  __int128 *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD v28[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v11 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v12 = *v11;
        v13 = v11[1];
        Hasher.init(_seed:)(v28);
        swift_bridgeObjectRetain(v13);
        String.hash(into:)(v28, v12, v13);
        v14 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v13);
        v15 = v14 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v15 < v8)
            goto LABEL_5;
        }
        else if (v15 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v15)
        {
LABEL_11:
          v16 = *(_QWORD *)(a2 + 48);
          v17 = (_OWORD *)(v16 + 16 * v3);
          v18 = (_OWORD *)(v16 + 16 * v6);
          if (v3 != v6 || v17 >= v18 + 1)
            *v17 = *v18;
          v19 = *(_QWORD *)(a2 + 56);
          v20 = (__int128 *)(v19 + 48 * v3);
          v21 = (__int128 *)(v19 + 48 * v6);
          if (v3 != v6 || (v3 = v6, v20 >= v21 + 3))
          {
            v9 = *v21;
            v10 = v21[2];
            v20[1] = v21[1];
            v20[2] = v10;
            *v20 = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v23 = *v22;
    v24 = (-1 << v3) - 1;
  }
  else
  {
    v22 = (uint64_t *)(v4 + 8 * (result >> 6));
    v24 = *v22;
    v23 = (-1 << result) - 1;
  }
  *v22 = v24 & v23;
  v25 = *(_QWORD *)(a2 + 16);
  v26 = __OFSUB__(v25, 1);
  v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100094CA8(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v15;
  uint64_t v16;
  const void *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(a2 + 48);
        v10 = (uint64_t *)(v9 + 8 * v6);
        if ((*v10 & 0x7FFFFFFFFFFFFFFFLL) != 0)
          v11 = *v10;
        else
          v11 = 0;
        result = static Hasher._hash(seed:_:)(*(_QWORD *)(a2 + 40), v11);
        v12 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 >= v8 && v3 >= (uint64_t)v12)
          {
LABEL_19:
            v15 = (uint64_t *)(v9 + 8 * v3);
            if (v3 != v6 || v15 >= v10 + 1)
              *v15 = *v10;
            v16 = *(_QWORD *)(a2 + 56);
            result = v16 + 304 * v3;
            v17 = (const void *)(v16 + 304 * v6);
            if (v3 != v6 || (v3 = v6, result >= (unint64_t)v17 + 304))
            {
              result = (unint64_t)memmove((void *)result, v17, 0x130uLL);
              v3 = v6;
            }
          }
        }
        else if (v12 >= v8 || v3 >= (uint64_t)v12)
        {
          goto LABEL_19;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100094E50(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(a2 + 48);
        v10 = (uint64_t *)(v9 + 8 * v6);
        if ((*v10 & 0x7FFFFFFFFFFFFFFFLL) != 0)
          v11 = *v10;
        else
          v11 = 0;
        result = static Hasher._hash(seed:_:)(*(_QWORD *)(a2 + 40), v11);
        v12 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 >= v8 && v3 >= (uint64_t)v12)
          {
LABEL_19:
            v15 = (uint64_t *)(v9 + 8 * v3);
            if (v3 != v6 || v15 >= v10 + 1)
              *v15 = *v10;
            v16 = *(_QWORD *)(a2 + 56);
            v17 = (_QWORD *)(v16 + 8 * v3);
            v18 = (_QWORD *)(v16 + 8 * v6);
            if (v3 != v6 || (v3 = v6, v17 >= v18 + 1))
            {
              *v17 = *v18;
              v3 = v6;
            }
          }
        }
        else if (v12 >= v8 || v3 >= (uint64_t)v12)
        {
          goto LABEL_19;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v20 = *v19;
    v21 = (-1 << v3) - 1;
  }
  else
  {
    v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    v21 = *v19;
    v20 = (-1 << result) - 1;
  }
  *v19 = v21 & v20;
  v22 = *(_QWORD *)(a2 + 16);
  v23 = __OFSUB__(v22, 1);
  v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100094FEC(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void (*v10)(_QWORD *);
  Swift::Int v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD v25[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)(v25);
        v10 = *(void (**)(_QWORD *))(*(_QWORD *)v9 + 184);
        swift_retain(v9);
        v10(v25);
        v11 = Hasher._finalize()();
        result = swift_release(v9);
        v12 = v11 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8)
            goto LABEL_5;
        }
        else if (v12 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v12)
        {
LABEL_11:
          v13 = *(_QWORD *)(a2 + 48);
          v14 = (_QWORD *)(v13 + 8 * v3);
          v15 = (_QWORD *)(v13 + 8 * v6);
          if (v3 != v6 || v14 >= v15 + 1)
            *v14 = *v15;
          v16 = *(_QWORD *)(a2 + 56);
          v17 = (_QWORD *)(v16 + 8 * v3);
          v18 = (_QWORD *)(v16 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v17 >= v18 + 1))
          {
            *v17 = *v18;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v20 = *v19;
    v21 = (-1 << v3) - 1;
  }
  else
  {
    v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    v21 = *v19;
    v20 = (-1 << result) - 1;
  }
  *v19 = v21 & v20;
  v22 = *(_QWORD *)(a2 + 16);
  v23 = __OFSUB__(v22, 1);
  v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1000951C8(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  Swift::Int v16;
  unint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  _QWORD v30[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v10 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v12 = *v10;
        v11 = (void *)v10[1];
        Hasher.init(_seed:)(v30);
        v13 = type metadata accessor for AnyKeyPath(0);
        swift_retain(v12);
        v14 = v11;
        dispatch thunk of Hashable.hash(into:)(v30, v13, &protocol witness table for AnyKeyPath);
        v15 = v14;
        NSObject.hash(into:)(v30);

        v16 = Hasher._finalize()();
        result = swift_release(v12);
        v17 = v16 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v17 < v8)
            goto LABEL_5;
        }
        else if (v17 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v17)
        {
LABEL_11:
          v18 = *(_QWORD *)(a2 + 48);
          v19 = (_OWORD *)(v18 + 16 * v3);
          v20 = (_OWORD *)(v18 + 16 * v6);
          if (v3 != v6 || v19 >= v20 + 1)
            *v19 = *v20;
          v21 = *(_QWORD *)(a2 + 56);
          v22 = (_OWORD *)(v21 + 32 * v3);
          v23 = (_OWORD *)(v21 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v22 >= v23 + 2))
          {
            v9 = v23[1];
            *v22 = *v23;
            v22[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v24 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v25 = *v24;
    v26 = (-1 << v3) - 1;
  }
  else
  {
    v24 = (uint64_t *)(v4 + 8 * (result >> 6));
    v26 = *v24;
    v25 = (-1 << result) - 1;
  }
  *v24 = v26 & v25;
  v27 = *(_QWORD *)(a2 + 16);
  v28 = __OFSUB__(v27, 1);
  v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v29;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1000953E0(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(a2 + 48);
        v10 = (_QWORD *)(v9 + 8 * v6);
        result = static Hasher._hash(seed:_:)(*(_QWORD *)(a2 + 40), *v10);
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            v14 = (_QWORD *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1)
              *v14 = *v10;
            v15 = *(_QWORD *)(a2 + 56);
            v16 = (_QWORD *)(v15 + 8 * v3);
            v17 = (_QWORD *)(v15 + 8 * v6);
            if (v3 != v6 || (v3 = v6, v16 >= v17 + 1))
            {
              *v16 = *v17;
              v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_100095574(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_bridgeObjectRelease(a2);
  return result;
}

uint64_t sub_100095588(void *a1, void *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, __n128);
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, __n128);
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, __n128);
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, __n128);
  __n128 v26;
  char *v27;
  id v28;
  uint64_t v29;
  char *v30;
  char v32[24];
  void *v33;
  void *v34;

  v3 = v2;
  v6 = sub_10000EDC8(&qword_10047E5E0);
  KeyPath = swift_getKeyPath(&unk_1003B4720);
  v8 = qword_10047AD88;
  swift_retain();
  if (v8 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v9 = qword_1004AF890;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v6 + 272);
  v11 = swift_retain();
  v3[10] = v10(KeyPath, v9, v11);
  v12 = sub_10000EDC8(&qword_10047D010);
  v13 = swift_getKeyPath(&unk_1003B4748);
  v14 = qword_1004AF890;
  v15 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v12 + 272);
  v16 = swift_retain();
  v3[11] = v15(v13, v14, v16);
  v17 = sub_10000EDC8(&qword_10047D448);
  v18 = swift_getKeyPath(&unk_1003B4770);
  v19 = qword_1004AF890;
  v20 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v17 + 272);
  v21 = swift_retain();
  v3[12] = v20(v18, v19, v21);
  v22 = swift_getKeyPath(&unk_1003B4798);
  v23 = sub_10000EDC8(&qword_100480270);
  v24 = qword_1004AF890;
  v25 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v23 + 272);
  v26 = swift_retain();
  v3[13] = v25(v22, v24, v26);
  v3[8] = a1;
  v3[9] = a2;
  v27 = a1;
  v28 = a2;
  swift_release();
  v33 = &type metadata for Configurations.Default;
  v34 = &protocol witness table for Configurations.Default;
  v29 = StateObserver.init(configuration:)(v32);
  v30 = &v27[OBJC_IVAR____TtC7Measure9LabelView_delegate];
  *((_QWORD *)v30 + 1) = &off_100443478;
  swift_unknownObjectWeakAssign(v30, v29);
  return v29;
}

uint64_t sub_100095778(_BYTE *a1)
{
  uint64_t v1;

  return sub_100092F88(a1, v1);
}

void sub_100095780()
{
  sub_1000C31DC();
}

void sub_1000957A0(unsigned __int8 *a1)
{
  int v1;
  char v2;

  v1 = *a1;
  if (v1 == 4)
  {
    v2 = 1;
  }
  else
  {
    if (v1 != 5)
      return;
    v2 = 0;
  }
  sub_1000C5084(v2);
}

double sub_1000957E0()
{
  return sub_1000C3400(0);
}

uint64_t sub_100095804(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100095814(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_10009581C()
{
  id v0;
  id v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v1 = objc_msgSend(v0, "bundleIdentifier");

  if (v1)
  {
    v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
    v4 = v3;

  }
  else
  {
    v4 = 0x80000001003DC860;
    v2 = 0xD000000000000011;
  }
  qword_1004AF2C8 = v2;
  unk_1004AF2D0 = v4;
}

uint64_t sub_1000958BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  id v6;
  id v7;
  uint64_t v9;

  v0 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000477C8(v2, qword_1004AF2D8);
  v5 = sub_1000362E8(v0, (uint64_t)qword_1004AF2D8);
  v6 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v7 = objc_msgSend(v6, "temporaryDirectory");

  static URL._unconditionallyBridgeFromObjectiveC(_:)(v7);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v1 + 32))(v5, v4, v0);
}

void sub_1000959A4()
{
  id v0;
  NSString v1;

  v0 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  v1 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "setDateFormat:", v1);

  qword_1004AF2F0 = (uint64_t)v0;
}

id sub_100095A18()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for URL(0);
  sub_1000477C8(v0, qword_1004AF2F8);
  v1 = sub_1000362E8(v0, (uint64_t)qword_1004AF2F8);
  return sub_100095A60(v1);
}

id sub_100095A60@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  NSURL *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t inited;
  NSString *v12;
  NSString *v13;
  unint64_t v14;
  Class isa;
  id result;
  id v17;
  uint64_t v18;
  id v19;
  void *v20;
  _BYTE v21[112];

  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.init(fileURLWithPath:isDirectory:)(0xD000000000000023, 0x80000001003DC880, 1);
  v6 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL._bridgeToObjectiveC()(v7);
  v9 = v8;
  v10 = sub_10000EDC8(&qword_100480280);
  inited = swift_initStackObject(v10, v21);
  *(_OWORD *)(inited + 16) = xmmword_1003B0F60;
  *(_QWORD *)(inited + 32) = NSFileOwnerAccountName;
  *(_QWORD *)(inited + 40) = 0x656C69626F6DLL;
  *(_QWORD *)(inited + 48) = 0xE600000000000000;
  *(_QWORD *)(inited + 64) = &type metadata for String;
  *(_QWORD *)(inited + 72) = NSFileGroupOwnerAccountName;
  *(_QWORD *)(inited + 104) = &type metadata for String;
  *(_QWORD *)(inited + 80) = 0x656C69626F6DLL;
  *(_QWORD *)(inited + 88) = 0xE600000000000000;
  v12 = NSFileOwnerAccountName;
  v13 = NSFileGroupOwnerAccountName;
  v14 = sub_1000C7684(inited);
  type metadata accessor for FileAttributeKey(0);
  sub_100095CA0();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v14);
  v20 = 0;
  LODWORD(v14) = objc_msgSend(v6, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v9, 1, isa, &v20);

  v19 = v20;
  if ((_DWORD)v14)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(a1, v5, v2);
    return v19;
  }
  else
  {
    v17 = v19;
    v18 = _convertNSErrorToError(_:)(v19);

    swift_willThrow();
    result = (id)swift_unexpectedError(v18, "Measure/Measure.swift", 21, 1, 26);
    __break(1u);
  }
  return result;
}

unint64_t sub_100095CA0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10047B610;
  if (!qword_10047B610)
  {
    type metadata accessor for FileAttributeKey(255);
    result = swift_getWitnessTable(&unk_1003B06E8, v1);
    atomic_store(result, (unint64_t *)&qword_10047B610);
  }
  return result;
}

_QWORD *sub_100095CE8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *v11;
  char *v12;
  uint64_t *v13;
  char *v14;
  char *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  _QWORD *v24;
  uint64_t (*v25)(void);
  _QWORD *v26;
  uint64_t v27;
  objc_super v29;

  v11 = &v5[qword_100480288];
  *((_QWORD *)v11 + 1) = 0;
  swift_unknownObjectWeakInit(v11, 0);
  v12 = &v5[qword_100480290];
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  v13 = (uint64_t *)&v5[qword_1004802A0];
  *v13 = a4;
  v13[1] = a5;
  v14 = v5;
  sub_100036254(a4, a5);
  sub_1000217BC(0, 0);
  v15 = &v14[qword_100480298];
  *(_QWORD *)v15 = a2;
  *((_QWORD *)v15 + 1) = a3;

  objc_msgSend(a1, "bounds");
  v17 = v16;
  v19 = v18;
  v21 = v20;
  v23 = v22;
  v29.receiver = v14;
  v29.super_class = (Class)type metadata accessor for GenericPlatter(0);
  v24 = objc_msgSendSuper2(&v29, "initWithFrame:", v17, v19, v21, v23);
  v25 = *(uint64_t (**)(void))((swift_isaMask & *v24) + 0x168);
  v26 = v24;
  v27 = v25();
  (*(void (**)(uint64_t))((swift_isaMask & *v26) + 0x178))(v27);
  sub_1000217BC(a4, a5);

  return v26;
}

void sub_100095E44(char *a1, uint64_t a2, void *a3)
{
  char *v5;
  char *v6;
  char *v7;
  id v8;

  v5 = &a1[qword_100480288];
  *((_QWORD *)v5 + 1) = 0;
  swift_unknownObjectWeakInit(v5, 0);
  v6 = &a1[qword_100480290];
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  v7 = &a1[qword_1004802A0];
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  v8 = a3;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001003D8190, "Measure/GenericPlatter.swift", 28, 2, 62, 0);
  __break(1u);
}

id sub_100095EE8(void *a1, double a2, double a3, uint64_t a4, void *a5)
{
  _QWORD *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  unsigned __int8 v14;
  objc_super v16;

  v16.receiver = a1;
  v16.super_class = (Class)type metadata accessor for GenericPlatter(0);
  v8 = v16.receiver;
  v9 = a5;
  v10 = objc_msgSendSuper2(&v16, "hitTest:withEvent:", v9, a2, a3);
  if (v10)
  {
    v12 = v10;
    v13 = (void *)(*(uint64_t (**)(id, uint64_t))((swift_isaMask & *v8) + 0x170))(v10, v11);
    v14 = objc_msgSend(v12, "isDescendantOfView:", v13, v16.receiver, v16.super_class);

    v8 = v12;
    if ((v14 & 1) != 0)
      return v12;
  }
  else
  {

  }
  v12 = 0;
  return v12;
}

uint64_t sub_100095FDC(char *a1, uint64_t a2)
{
  char *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  void (*v8)(uint64_t, uint64_t);
  char *v9;

  v3 = &a1[qword_100480288];
  result = swift_unknownObjectWeakLoadStrong(&a1[qword_100480288], a2);
  if (result)
  {
    v5 = result;
    v6 = *((_QWORD *)v3 + 1);
    ObjectType = swift_getObjectType(result);
    v8 = *(void (**)(uint64_t, uint64_t))(v6 + 24);
    v9 = a1;
    v8(ObjectType, v6);

    return swift_unknownObjectRelease(v5);
  }
  return result;
}

void sub_100096064(double *a1, double a2, double a3)
{
  _QWORD *v3;
  void *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  id v12;
  double v13;
  double v14;
  CGFloat v15;
  uint64_t v16;
  CGFloat v17;
  uint64_t v18;
  CGFloat v19;
  CGFloat tx;
  CGFloat ty;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  id v25;
  double v26;
  double v27;
  double *v28;
  double v29;
  uint64_t v30;
  id v31;
  __int128 v32;
  __int128 v33;
  CGAffineTransform v34;
  CGAffineTransform t2;
  CGAffineTransform t1;

  v7 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v3) + 0x170))();
  v8 = a1[5];
  v9 = a1[6];
  objc_msgSend(v7, "bounds");
  v11 = v8 / v10;
  v12 = objc_msgSend(v7, "bounds");
  v14 = v9 / v13;
  v15 = mix(_:_:_:)(v12, v11, 1.0, a2);
  v17 = mix(_:_:_:)(v16, v14, 1.0, a2);
  v19 = mix(_:_:_:)(v18, *a1, a3, a2);
  CGAffineTransformMakeScale(&t1, v15, v17);
  v32 = *(_OWORD *)&t1.c;
  v33 = *(_OWORD *)&t1.a;
  tx = t1.tx;
  ty = t1.ty;
  CGAffineTransformMakeRotation(&t1, v19);
  v22 = *(_OWORD *)&t1.a;
  v23 = *(_OWORD *)&t1.c;
  v24 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.a = v33;
  *(_OWORD *)&t1.c = v32;
  t1.tx = tx;
  t1.ty = ty;
  *(_OWORD *)&t2.a = v22;
  *(_OWORD *)&t2.c = v23;
  *(_OWORD *)&t2.tx = v24;
  CGAffineTransformConcat(&v34, &t1, &t2);
  t1 = v34;
  v25 = objc_msgSend(v7, "setTransform:", &t1);
  v26 = a1[2];
  v27 = a1[3];
  v28 = (double *)((char *)v3 + qword_100480290);
  v29 = mix(_:_:_:)(v25, v26, *(double *)((char *)v3 + qword_100480290), a2);
  v31 = objc_msgSend(v7, "setCenter:", v29, mix(_:_:_:)(v30, v27, v28[1], a2));
  objc_msgSend(v3, "setAlpha:", mix(_:_:_:)(v31, 0.0, 1.0, a2 + a2));

}

void sub_100096214()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  _QWORD v7[6];

  v1 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_10047B198 != -1)
    swift_once(&qword_10047B198, sub_1001CA024);
  v2 = qword_1004AFD10;
  v3 = swift_allocObject(&unk_100443528, 24, 7);
  *(_QWORD *)(v3 + 16) = v0;
  v7[4] = sub_10009687C;
  v7[5] = v3;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256;
  v7[2] = sub_1000DCC48;
  v7[3] = &unk_100443540;
  v4 = _Block_copy(v7);
  v5 = v0;
  v6 = objc_msgSend(v1, "addObserverForName:object:queue:usingBlock:", v2, 0, 0, v4, swift_release().n128_f64[0]);
  _Block_release(v4);
  swift_unknownObjectRelease(v6);

}

uint64_t sub_100096344(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __n128 v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  __n128 v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD aBlock[6];

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100049274();
  v12 = (void *)static OS_dispatch_queue.main.getter(v11);
  v13 = swift_allocObject(&unk_100443578, 24, 7);
  *(_QWORD *)(v13 + 16) = a2;
  aBlock[4] = sub_10009689C;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003ECA0;
  aBlock[3] = &unk_100443590;
  v14 = _Block_copy(aBlock);
  v15 = a2;
  v16 = swift_release();
  static DispatchQoS.unspecified.getter(v16);
  aBlock[0] = _swiftEmptyArrayStorage;
  v17 = sub_100030E1C();
  v18 = sub_10000EDC8((uint64_t *)&unk_10047E430);
  v19 = sub_100030E64();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v18, v19, v3, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v6, v14);
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

void sub_10009650C()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000018, 0x80000001003DC990, "Measure/GenericPlatter.swift", 28, 2, 147, 0);
  __break(1u);
}

void sub_100096564()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000018, 0x80000001003DC990, "Measure/GenericPlatter.swift", 28, 2, 151, 0);
  __break(1u);
}

void sub_1000965BC()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000018, 0x80000001003DC990, "Measure/GenericPlatter.swift", 28, 2, 155, 0);
  __break(1u);
}

void sub_100096614()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000018, 0x80000001003DC990, "Measure/GenericPlatter.swift", 28, 2, 159, 0);
  __break(1u);
}

void sub_10009666C()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000018, 0x80000001003DC990, "Measure/GenericPlatter.swift", 28, 2, 163, 0);
  __break(1u);
}

void sub_1000966C4()
{
  _swift_stdlib_reportUnimplementedInitializer("Measure.GenericPlatter", 22, "init(frame:)", 12, 0);
  __break(1u);
}

uint64_t sub_1000966F0()
{
  uint64_t v0;

  sub_10001ADF4(v0 + qword_100480288);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + qword_100480298 + 8));
  return sub_1000217BC(*(_QWORD *)(v0 + qword_1004802A0), *(_QWORD *)(v0 + qword_1004802A0 + 8));
}

id sub_100096734()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GenericPlatter(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100096768(uint64_t a1)
{
  sub_10001ADF4(a1 + qword_100480288);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + qword_100480298 + 8));
  return sub_1000217BC(*(_QWORD *)(a1 + qword_1004802A0), *(_QWORD *)(a1 + qword_1004802A0 + 8));
}

uint64_t type metadata accessor for GenericPlatter(uint64_t a1)
{
  uint64_t result;

  result = qword_1004802D0;
  if (!qword_1004802D0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for GenericPlatter);
  return result;
}

uint64_t sub_1000967F4(uint64_t a1)
{
  _QWORD v2[4];

  v2[0] = &unk_1003B47F0;
  v2[1] = &unk_1003B4808;
  v2[2] = &unk_1003B4820;
  v2[3] = &unk_1003B4838;
  return swift_initClassMetadata2(a1, 256, 4, v2, a1 + 184);
}

uint64_t sub_100096850()
{
  return type metadata accessor for GenericPlatter(0);
}

uint64_t sub_100096858()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10009687C(uint64_t a1)
{
  uint64_t v1;

  return sub_100096344(a1, *(void **)(v1 + 16));
}

uint64_t sub_100096884(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100096894(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10009689C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))((swift_isaMask & **(_QWORD **)(v0 + 16)) + 0x158))();
}

id sub_1000968E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v6;
  char v7;
  id v8;
  id v9;
  void *v10;
  NSString v11;
  NSString v12;
  void *v13;
  NSString v14;
  void *v15;
  NSString v16;
  id v17;
  id v18;
  void *v19;
  CGFloat v20;
  NSString v21;
  id result;
  void *v23;
  NSString v24;
  void *v25;
  void *v26;
  double v27;
  double v28;
  void *v29;
  double v30;
  double v31;
  void *v32;
  double v33;
  double v34;
  void *v35;
  double v36;
  double v37;
  void *v38;
  id v39;
  void *v40;
  double v41;
  CGFloat v42;
  double v43;
  CGFloat v44;
  double v45;
  CGFloat v46;
  double v47;
  CGFloat v48;
  double Width;
  void *v50;
  double v51;
  CGFloat v52;
  double v53;
  CGFloat v54;
  double v55;
  CGFloat v56;
  double v57;
  CGFloat v58;
  void *v59;
  double v60;
  CGFloat v61;
  double v62;
  CGFloat v63;
  double v64;
  CGFloat v65;
  double v66;
  CGFloat v67;
  double v68;
  void *v69;
  double v70;
  double v71;
  CGFloat v72;
  double v73;
  CGFloat v74;
  double v75;
  CGFloat v76;
  double v77;
  CGFloat v78;
  double v79;
  void *v80;
  void *v81;
  double v82;
  CGFloat v83;
  double v84;
  CGFloat v85;
  double v86;
  CGFloat v87;
  double v88;
  CGFloat v89;
  double v90;
  void *v91;
  double v92;
  CGFloat v93;
  double v94;
  CGFloat v95;
  double v96;
  CGFloat v97;
  double v98;
  CGFloat v99;
  NSString v100;
  NSString v101;
  NSString v102;
  NSString v103;
  void *v104;
  void *v105;
  double v106;
  double v107;
  void *v108;
  double v109;
  double v110;
  void *v111;
  double v112;
  double v113;
  void *v114;
  double v115;
  double v116;
  void *v117;
  id v118;
  void *v119;
  double v120;
  CGFloat v121;
  double v122;
  CGFloat v123;
  double v124;
  CGFloat v125;
  double v126;
  CGFloat v127;
  double v128;
  double v129;
  void *v130;
  double v131;
  double v132;
  CGFloat v133;
  double v134;
  CGFloat v135;
  double v136;
  CGFloat v137;
  double v138;
  CGFloat v139;
  CGFloat v140;
  double v141;
  void *v142;
  double v143;
  CGFloat v144;
  double v145;
  CGFloat v146;
  double v147;
  CGFloat v148;
  double v149;
  CGFloat v150;
  double v151;
  double v152;
  void *v153;
  double v154;
  CGFloat v155;
  double v156;
  CGFloat v157;
  double v158;
  CGFloat v159;
  double v160;
  CGFloat v161;
  double v162;
  void *v163;
  double v164;
  CGFloat v165;
  double v166;
  CGFloat v167;
  double v168;
  CGFloat v169;
  double v170;
  CGFloat v171;
  CGFloat v172;
  double v173;
  double v174;
  void *v175;
  double v176;
  CGFloat v177;
  double v178;
  CGFloat v179;
  double v180;
  CGFloat v181;
  double v182;
  CGFloat v183;
  char v184;
  uint64_t v185;
  CGRect v186;
  CGRect v187;
  CGRect v188;
  CGRect v189;
  CGRect v190;
  CGRect v191;
  CGRect v192;
  CGRect v193;
  CGRect v194;
  CGRect v195;
  CGRect v196;
  CGRect v197;
  CGRect v198;
  CGRect v199;
  CGRect v200;
  CGRect v201;
  CGRect v202;
  CGRect v203;
  CGRect v204;
  CGRect v205;
  CGRect v206;
  CGRect v207;

  if (a1 == a5 && a2 == a6
    || (v6 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a5, a6, 0), v7 = 0, (v6 & 1) != 0))
  {
    v8 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
    v9 = objc_msgSend(v8, "preferredContentSizeCategory");

    LOBYTE(v8) = UIContentSizeCategory.isAccessibilityCategory.getter(v9);
    v7 = v8 ^ 1;
  }
  v184 = v7;
  v10 = *(void **)(v185 + qword_100480510);
  v11 = String._bridgeToObjectiveC()();
  objc_msgSend(v10, "setText:", v11);

  v12 = String._bridgeToObjectiveC()();
  objc_msgSend(v10, "setAccessibilityLabel:", v12);

  objc_msgSend(v10, "sizeToFit");
  v13 = *(void **)(v185 + qword_100480520);
  v14 = String._bridgeToObjectiveC()();
  objc_msgSend(v13, "setAccessibilityLabel:", v14);

  v15 = *(void **)(v185 + qword_100480528);
  v16 = String._bridgeToObjectiveC()();
  objc_msgSend(v15, "setAccessibilityLabel:", v16);

  v17 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v18 = objc_msgSend(v17, "preferredContentSizeCategory");

  LOBYTE(v17) = UIContentSizeCategory.isAccessibilityCategory.getter(v18);
  if ((v17 & 1) != 0)
  {
    v19 = *(void **)(v185 + qword_100480530);
    sub_10009AB9C(v10, v19);
    objc_msgSend(v19, "bounds");
    v20 = CGRectGetWidth(v186) * 0.5;
    objc_msgSend(v19, "bounds");
    objc_msgSend(v10, "setCenter:", v20, CGRectGetHeight(v187) * 0.5);
    v21 = String._bridgeToObjectiveC()();
    objc_msgSend(v13, "setText:", v21);

    objc_msgSend(v13, "sizeToFit");
    result = objc_msgSend(v13, "superview");
    if (result)
    {
      v23 = result;
      sub_10009AB9C(v13, result);

      v24 = String._bridgeToObjectiveC()();
      objc_msgSend(v15, "setText:", v24);

      objc_msgSend(v15, "sizeToFit");
      result = objc_msgSend(v15, "superview");
      if (result)
      {
        v25 = result;
        sub_10009AB9C(v15, result);

        result = objc_msgSend(v13, "font");
        if (result)
        {
          v26 = result;
          objc_msgSend(result, "pointSize");
          v28 = v27;

          result = objc_msgSend(v15, "font");
          if (result)
          {
            v29 = result;
            objc_msgSend(result, "pointSize");
            v31 = v30;

            if (v28 != v31)
            {
              result = objc_msgSend(v13, "font");
              if (!result)
              {
LABEL_75:
                __break(1u);
                goto LABEL_76;
              }
              v32 = result;
              objc_msgSend(result, "pointSize");
              v34 = v33;

              result = objc_msgSend(v15, "font");
              if (!result)
              {
LABEL_76:
                __break(1u);
                goto LABEL_77;
              }
              v35 = result;
              objc_msgSend(result, "pointSize");
              v37 = v36;

              if (v34 >= v37)
                v38 = v15;
              else
                v38 = v13;
              v39 = objc_msgSend(v38, "font");
              objc_msgSend(v13, "setFont:", v39);
              objc_msgSend(v15, "setFont:", v39);

            }
            result = objc_msgSend(v13, "superview");
            if (result)
            {
              v40 = result;
              objc_msgSend(result, "bounds");
              v42 = v41;
              v44 = v43;
              v46 = v45;
              v48 = v47;

              v188.origin.x = v42;
              v188.origin.y = v44;
              v188.size.width = v46;
              v188.size.height = v48;
              Width = CGRectGetWidth(v188);
              result = objc_msgSend(v13, "superview");
              if (result)
              {
                v50 = result;
                objc_msgSend(result, "bounds");
                v52 = v51;
                v54 = v53;
                v56 = v55;
                v58 = v57;

                v189.origin.x = v52;
                v189.origin.y = v54;
                v189.size.width = v56;
                v189.size.height = v58;
                objc_msgSend(v13, "setCenter:", Width * 0.5, CGRectGetHeight(v189) * 0.5);
                result = objc_msgSend(v15, "superview");
                if (result)
                {
                  v59 = result;
                  objc_msgSend(result, "bounds");
                  v61 = v60;
                  v63 = v62;
                  v65 = v64;
                  v67 = v66;

                  v190.origin.x = v61;
                  v190.origin.y = v63;
                  v190.size.width = v65;
                  v190.size.height = v67;
                  v68 = CGRectGetWidth(v190);
                  result = objc_msgSend(v15, "superview");
                  if (result)
                  {
                    v69 = result;
                    v70 = v68 * 0.5;
                    objc_msgSend(result, "bounds");
                    v72 = v71;
                    v74 = v73;
                    v76 = v75;
                    v78 = v77;

                    v191.origin.x = v72;
                    v191.origin.y = v74;
                    v191.size.width = v76;
                    v191.size.height = v78;
                    v79 = CGRectGetHeight(v191) * 0.5;
                    return objc_msgSend(v15, "setCenter:", v70, v79);
                  }
                  goto LABEL_61;
                }
LABEL_60:
                __break(1u);
LABEL_61:
                __break(1u);
                goto LABEL_62;
              }
LABEL_59:
              __break(1u);
              goto LABEL_60;
            }
LABEL_58:
            __break(1u);
            goto LABEL_59;
          }
LABEL_57:
          __break(1u);
          goto LABEL_58;
        }
LABEL_56:
        __break(1u);
        goto LABEL_57;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_56;
  }
  result = objc_msgSend(v10, "superview");
  if (!result)
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  v80 = result;
  sub_10009AB9C(v10, result);

  result = objc_msgSend(v10, "superview");
  if (!result)
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  v81 = result;
  objc_msgSend(result, "bounds");
  v83 = v82;
  v85 = v84;
  v87 = v86;
  v89 = v88;

  v192.origin.x = v83;
  v192.origin.y = v85;
  v192.size.width = v87;
  v192.size.height = v89;
  v90 = CGRectGetWidth(v192);
  result = objc_msgSend(v10, "superview");
  if (!result)
  {
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  v91 = result;
  objc_msgSend(result, "bounds");
  v93 = v92;
  v95 = v94;
  v97 = v96;
  v99 = v98;

  v193.origin.x = v93;
  v193.origin.y = v95;
  v193.size.width = v97;
  v193.size.height = v99;
  objc_msgSend(v10, "setCenter:", v90 * 0.5, CGRectGetHeight(v193) * 0.5);
  if ((v184 & 1) != 0)
  {
    v100 = String._bridgeToObjectiveC()();
    objc_msgSend(v13, "setText:", v100);

    v101 = String._bridgeToObjectiveC()();
    objc_msgSend(v13, "setAccessibilityLabel:", v101);
  }
  else
  {
    v102 = String._bridgeToObjectiveC()();
    objc_msgSend(v13, "setText:", v102);

    objc_msgSend(v13, "sizeToFit");
    result = objc_msgSend(v13, "superview");
    if (!result)
    {
LABEL_66:
      __break(1u);
      goto LABEL_67;
    }
    v101 = result;
    sub_10009AB9C(v13, result);
  }

  v103 = String._bridgeToObjectiveC()();
  objc_msgSend(v15, "setText:", v103);

  objc_msgSend(v15, "sizeToFit");
  result = objc_msgSend(v15, "superview");
  if (!result)
  {
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  v104 = result;
  sub_10009AB9C(v15, result);

  if ((v184 & 1) != 0)
    goto LABEL_40;
  result = objc_msgSend(v13, "font");
  if (!result)
  {
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
  v105 = result;
  objc_msgSend(result, "pointSize");
  v107 = v106;

  result = objc_msgSend(v15, "font");
  if (!result)
  {
LABEL_68:
    __break(1u);
    goto LABEL_69;
  }
  v108 = result;
  objc_msgSend(result, "pointSize");
  v110 = v109;

  if (v107 == v110)
  {
LABEL_40:
    if (*(_BYTE *)(v185 + qword_100480538) != 1)
    {
      objc_msgSend(v13, "bounds");
      v162 = CGRectGetWidth(v202);
      result = objc_msgSend(v13, "superview");
      if (result)
      {
        v163 = result;
        objc_msgSend(result, "bounds");
        v165 = v164;
        v167 = v166;
        v169 = v168;
        v171 = v170;

        v203.origin.x = v165;
        v203.origin.y = v167;
        v203.size.width = v169;
        v203.size.height = v171;
        v172 = CGRectGetHeight(v203) * 0.5;
        objc_msgSend(v13, "bounds");
        objc_msgSend(v13, "setCenter:", v162 * 0.5, v172 - CGRectGetHeight(v204) * 0.5);
        v173 = 0.0;
        if ((v184 & 1) == 0)
        {
          objc_msgSend(v15, "bounds");
          v173 = CGRectGetHeight(v205) * 0.5;
        }
        objc_msgSend(v15, "bounds");
        v174 = CGRectGetWidth(v206);
        result = objc_msgSend(v15, "superview");
        if (result)
        {
          v175 = result;
          v70 = v174 * 0.5;
          objc_msgSend(result, "bounds");
          v177 = v176;
          v179 = v178;
          v181 = v180;
          v183 = v182;

          v207.origin.x = v177;
          v207.origin.y = v179;
          v207.size.width = v181;
          v207.size.height = v183;
          v79 = v173 + CGRectGetHeight(v207) * 0.5;
          return objc_msgSend(v15, "setCenter:", v70, v79);
        }
        goto LABEL_74;
      }
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
      goto LABEL_75;
    }
    result = objc_msgSend(v13, "superview");
    if (result)
    {
      v119 = result;
      objc_msgSend(result, "bounds");
      v121 = v120;
      v123 = v122;
      v125 = v124;
      v127 = v126;

      v194.origin.x = v121;
      v194.origin.y = v123;
      v194.size.width = v125;
      v194.size.height = v127;
      v128 = CGRectGetWidth(v194);
      objc_msgSend(v13, "bounds");
      v129 = CGRectGetWidth(v195);
      result = objc_msgSend(v13, "superview");
      if (result)
      {
        v130 = result;
        v131 = v128 - v129 * 0.5;
        objc_msgSend(result, "bounds");
        v133 = v132;
        v135 = v134;
        v137 = v136;
        v139 = v138;

        v196.origin.x = v133;
        v196.origin.y = v135;
        v196.size.width = v137;
        v196.size.height = v139;
        v140 = CGRectGetHeight(v196) * 0.5;
        objc_msgSend(v13, "bounds");
        objc_msgSend(v13, "setCenter:", v131, v140 - CGRectGetHeight(v197) * 0.5);
        v141 = 0.0;
        if ((v184 & 1) == 0)
        {
          objc_msgSend(v15, "bounds");
          v141 = CGRectGetHeight(v198) * 0.5;
        }
        result = objc_msgSend(v15, "superview");
        if (result)
        {
          v142 = result;
          objc_msgSend(result, "bounds");
          v144 = v143;
          v146 = v145;
          v148 = v147;
          v150 = v149;

          v199.origin.x = v144;
          v199.origin.y = v146;
          v199.size.width = v148;
          v199.size.height = v150;
          v151 = CGRectGetWidth(v199);
          objc_msgSend(v15, "bounds");
          v152 = CGRectGetWidth(v200);
          result = objc_msgSend(v15, "superview");
          if (result)
          {
            v153 = result;
            v70 = v151 - v152 * 0.5;
            objc_msgSend(result, "bounds");
            v155 = v154;
            v157 = v156;
            v159 = v158;
            v161 = v160;

            v201.origin.x = v155;
            v201.origin.y = v157;
            v201.size.width = v159;
            v201.size.height = v161;
            v79 = v141 + CGRectGetHeight(v201) * 0.5;
            return objc_msgSend(v15, "setCenter:", v70, v79);
          }
          goto LABEL_72;
        }
LABEL_71:
        __break(1u);
LABEL_72:
        __break(1u);
        goto LABEL_73;
      }
LABEL_70:
      __break(1u);
      goto LABEL_71;
    }
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  result = objc_msgSend(v13, "font");
  if (!result)
  {
LABEL_77:
    __break(1u);
    goto LABEL_78;
  }
  v111 = result;
  objc_msgSend(result, "pointSize");
  v113 = v112;

  result = objc_msgSend(v15, "font");
  if (result)
  {
    v114 = result;
    objc_msgSend(result, "pointSize");
    v116 = v115;

    if (v113 >= v116)
      v117 = v15;
    else
      v117 = v13;
    v118 = objc_msgSend(v117, "font");
    objc_msgSend(v13, "setFont:", v118);
    objc_msgSend(v15, "setFont:", v118);

    goto LABEL_40;
  }
LABEL_78:
  __break(1u);
  return result;
}

id sub_100097514()
{
  uint64_t v0;

  return *(id *)(v0 + qword_100480540);
}

double sub_100097524()
{
  uint64_t v0;
  double v1;

  objc_msgSend(*(id *)(v0 + qword_100480540), "bounds");
  return v1;
}

void sub_100097568()
{
  char *v0;
  char *v1;
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  id v6;
  double v7;
  double v8;
  double v9;
  float v10;
  double v11;
  char v12;
  double v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  double Width;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double Height;
  double v33;
  double v34;
  id v35;
  char v36;
  id v37;
  CGRect v38;
  CGRect v39;
  CGRect v40;
  CGRect v41;
  CGRect v42;
  CGRect v43;
  CGRect v44;
  CGRect v45;
  CGRect v46;
  CGRect v47;
  CGRect v48;

  v1 = v0;
  v2 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v3 = objc_msgSend(v2, "preferredContentSizeCategory");

  LOBYTE(v2) = UIContentSizeCategory.isAccessibilityCategory.getter(v3);
  v36 = (char)v2;
  if ((v2 & 1) != 0)
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)UIFontMetrics), "initForTextStyle:", UIFontTextStyleHeadline);
    v5 = qword_1004804B0;
    objc_msgSend(v4, "scaledValueForValue:", *(double *)&v1[qword_1004804B0]);

    v6 = objc_msgSend(objc_allocWithZone((Class)UIFontMetrics), "initForTextStyle:", UIFontTextStyleHeadline);
    objc_msgSend(v6, "scaledValueForValue:", *(double *)&v1[v5]);
    v8 = v7;

    v9 = 69.5;
    if (v8 <= 69.5)
      v9 = v8;
    *(double *)&v1[v5] = v9;
    v10 = v9 + v9 + 195.0 + 15.0;
    *(float *)&v1[qword_100480490] = v10;
  }
  objc_msgSend(v1, "setAlpha:", 0.0);
  objc_msgSend(v1, "bounds");
  v11 = CGRectGetWidth(v38) + -48.0;
  sub_10000F0D8();
  v12 = static UIDevice.isIPad()();
  v13 = 375.0;
  if ((v12 & 1) == 0)
    v13 = v11;
  v14 = *(void **)&v1[qword_100480540];
  CGSize.init(_:_:)(v13, *(float *)&v1[qword_100480490]);
  objc_msgSend(v14, "bounds");
  objc_msgSend(v14, "setBounds:");
  v15 = (void *)objc_opt_self(UIColor);
  v16 = objc_msgSend(v15, "clearColor");
  objc_msgSend(v14, "setBackgroundColor:", v16);

  objc_msgSend(v1, "center");
  objc_msgSend(v14, "setCenter:");
  objc_msgSend(v1, "addSubview:", v14);
  v17 = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v14, "bounds");
  objc_msgSend(v17, "setFrame:");
  v18 = objc_msgSend(v15, "clearColor");
  objc_msgSend(v17, "setBackgroundColor:", v18);

  objc_msgSend(v14, "addSubview:", v17);
  v19 = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v17, "bounds");
  Width = CGRectGetWidth(v39);
  v21 = qword_1004804B0;
  CGSize.init(_:_:)(Width, *(double *)&v1[qword_1004804B0]);
  objc_msgSend(v19, "bounds");
  objc_msgSend(v19, "setBounds:");
  objc_msgSend(v17, "bounds");
  objc_msgSend(v19, "setCenter:", CGRectGetWidth(v40) * 0.5, *(double *)&v1[v21] * 0.5);
  v22 = objc_msgSend(v15, "clearColor");
  objc_msgSend(v19, "setBackgroundColor:", v22);

  objc_msgSend(v17, "addSubview:", v19);
  sub_100097C58(v19);
  v23 = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v24 = objc_msgSend(v15, "clearColor");
  objc_msgSend(v23, "setBackgroundColor:", v24);

  objc_msgSend(v17, "addSubview:", v23);
  objc_msgSend(v17, "bounds");
  v25 = CGRectGetWidth(v41);
  v26 = v25;
  if ((v36 & 1) != 0)
  {
    CGSize.init(_:_:)(v25, 195.0);
    objc_msgSend(v23, "bounds");
    objc_msgSend(v23, "setBounds:");
    objc_msgSend(v17, "bounds");
    v27 = CGRectGetWidth(v42);
    v28 = *(double *)&v1[v21] + 97.5;
  }
  else
  {
    objc_msgSend(v17, "bounds");
    v29 = CGRectGetHeight(v43) - (*(double *)&v1[v21] + *(double *)&v1[v21]) + -15.0;
    CGSize.init(_:_:)(v26, v29);
    objc_msgSend(v23, "bounds");
    objc_msgSend(v23, "setBounds:");
    objc_msgSend(v17, "bounds");
    v27 = CGRectGetWidth(v44);
    v28 = v29 * 0.5 + *(double *)&v1[v21];
  }
  objc_msgSend(v23, "setCenter:", v27 * 0.5, v28);
  sub_1000983E4(v23, v36 & 1);
  v37 = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v17, "bounds");
  v30 = CGRectGetWidth(v45);
  CGSize.init(_:_:)(v30, *(double *)&v1[v21]);
  objc_msgSend(v37, "bounds");
  objc_msgSend(v37, "setBounds:");
  objc_msgSend(v17, "bounds");
  v31 = CGRectGetWidth(v46);
  if ((v36 & 1) != 0)
  {
    objc_msgSend(v17, "bounds");
    Height = CGRectGetHeight(v47);
    v33 = *(double *)&v1[v21] * -0.5;
  }
  else
  {
    v34 = *(double *)&v1[v21];
    objc_msgSend(v23, "bounds");
    Height = v34 + CGRectGetHeight(v48) + 15.0;
    v33 = *(double *)&v1[v21] * 0.5;
  }
  objc_msgSend(v37, "setCenter:", v31 * 0.5, Height + v33);
  v35 = objc_msgSend(v15, "clearColor");
  objc_msgSend(v37, "setBackgroundColor:", v35);

  objc_msgSend(v17, "addSubview:", v37);
  sub_10009951C(v37);
  sub_100096214();
  sub_1000DCD24();

}

void sub_100097C58(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  id v5;
  Swift::String v6;
  Swift::String v7;
  void *object;
  NSString v9;
  void *v10;
  void *v11;
  char v12;
  uint64_t v13;
  char v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  void *v28;
  double v29;
  double v30;
  CGFloat v31;
  CGFloat v32;
  double v33;
  double Width;
  double v35;
  id v36;
  id v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double Height;
  double v44;
  double v45;
  void *v46;
  void *v47;
  uint64_t v48;
  double v49;
  double v50;
  CGFloat v51;
  void *v52;
  void *v53;
  char v54;
  uint64_t v55;
  void *v56;
  id v57;
  char v58;
  id v59;
  id v60;
  id v61;
  id v62;
  CGFloat v63;
  double v64;
  CGFloat v65;
  id v66;
  id v67;
  Swift::String v68;
  CGRect v69;
  CGRect v70;
  CGRect v71;
  CGRect v72;
  CGRect v73;
  CGRect v74;
  CGRect v75;

  v2 = v1;
  v4 = *(void **)(v1 + qword_100480518);
  v5 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v68._object = (void *)0xE000000000000000;
  v6._object = (void *)0x80000001003DCC90;
  v6._countAndFlagsBits = 0xD000000000000022;
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v68._countAndFlagsBits = 0;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v6, (Swift::String_optional)0, (NSBundle)v5, v7, v68)._object;

  v9 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setText:", v9, swift_bridgeObjectRelease(object).n128_f64[0]);

  if (qword_10047B120 != -1)
    swift_once(&qword_10047B120, sub_100197B60);
  v10 = (void *)qword_1004AFCA0;
  v11 = *(void **)algn_1004AFCA8;
  if ((byte_1004AFCB0 & 1) != 0)
  {
    v12 = byte_1004AFCC0;
    v13 = qword_1004AFCB8;
    v14 = byte_10048A2A0;
    v15 = (id)qword_1004AFCA0;
    v16 = sub_100070DBC(v14, v13, v12);
    sub_100021580(v10, v11, 1);
  }
  else
  {
    if ((byte_10048A2A0 & 1) != 0)
      v17 = *(id *)algn_1004AFCA8;
    else
      v17 = (id)qword_1004AFCA0;
    v16 = v17;
  }
  objc_msgSend(v4, "setTextColor:", v16);

  v18 = (void *)objc_opt_self(UIColor);
  v19 = objc_msgSend(v18, "clearColor");
  objc_msgSend(v4, "setBackgroundColor:", v19);

  v20 = objc_msgSend(objc_allocWithZone((Class)UIFontMetrics), "initForTextStyle:", UIFontTextStyleHeadline);
  v21 = (void *)objc_opt_self(UIFont);
  v22 = objc_msgSend(v21, "preferredFontForTextStyle:", UIFontTextStyleHeadline);
  v23 = objc_msgSend(v22, "fontDescriptor");

  v24 = objc_msgSend(v23, "fontDescriptorWithSymbolicTraits:", 2);
  if (!v24)
  {
    __break(1u);
    goto LABEL_25;
  }
  v25 = objc_msgSend(v21, "fontWithDescriptor:size:", v24, 0.0);

  v26 = objc_msgSend(v20, "scaledFontForFont:maximumPointSize:", v25, 28.0);
  objc_msgSend(v4, "setFont:", v26);

  objc_msgSend(v4, "setTextAlignment:", 1);
  objc_msgSend(v4, "sizeToFit");
  v27 = objc_msgSend(v4, "font");
  if (!v27)
  {
LABEL_25:
    __break(1u);
    return;
  }
  v28 = v27;
  objc_msgSend(v27, "descender");
  v30 = v29;

  objc_msgSend(a1, "bounds");
  v31 = CGRectGetWidth(v69) * 0.5;
  objc_msgSend(a1, "bounds");
  v32 = CGRectGetHeight(v70) + -15.0;
  objc_msgSend(v4, "bounds");
  objc_msgSend(v4, "setCenter:", v31, v32 - v33 * 0.5 - v30);
  objc_msgSend(a1, "addSubview:", v4);
  objc_msgSend(a1, "bounds");
  Width = CGRectGetWidth(v71);
  v35 = *(double *)(v2 + qword_1004804A8);
  v36 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v37 = objc_msgSend(v36, "preferredContentSizeCategory");

  LOBYTE(v36) = UIContentSizeCategory.isAccessibilityCategory.getter(v37);
  if ((v36 & 1) == 0)
  {
    v38 = Width + v35 * -4.0;
    objc_msgSend(v4, "bounds");
    if (v38 < v39)
    {
      v40 = CGRect.centerPoint.getter(objc_msgSend(v4, "frame"));
      v42 = v41;
      objc_msgSend(v4, "frame");
      Height = CGRectGetHeight(v72);
      v44 = CGSize.init(_:_:)(v38, Height);
      CGRect.init(centerPoint:size:)(v40, v42, v44, v45);
      objc_msgSend(v4, "setFrame:");
    }
  }
  v46 = a1;
  v47 = *(void **)(v2 + qword_100480548);
  CGSize.init(_:_:)(v35, v35);
  objc_msgSend(v47, "bounds");
  objc_msgSend(v47, "setBounds:");
  v48 = v2;
  if (*(_BYTE *)(v2 + qword_100480538) == 1)
  {
    v49 = v35 * 0.5;
    v50 = v35 * 0.5 + 16.0;
  }
  else
  {
    objc_msgSend(v46, "bounds");
    v51 = CGRectGetWidth(v73);
    v49 = v35 * 0.5;
    v50 = v51 + -16.0 - v35 * 0.5;
  }
  objc_msgSend(v47, "setCenter:", v50, 30.0 - v49);
  objc_msgSend(v47, "setUserInteractionEnabled:", 0);
  v52 = (void *)qword_1004AFCA0;
  v53 = *(void **)algn_1004AFCA8;
  if ((byte_1004AFCB0 & 1) != 0)
  {
    v54 = byte_1004AFCC0;
    v55 = qword_1004AFCB8;
    v56 = v18;
    v57 = v20;
    v58 = byte_10048A2A0;
    v59 = (id)qword_1004AFCA0;
    LOBYTE(v59) = v58;
    v20 = v57;
    v18 = v56;
    v60 = sub_100070DBC((char)v59, v55, v54);
    sub_100021580(v52, v53, 1);
  }
  else
  {
    if ((byte_10048A2A0 & 1) != 0)
      v61 = *(id *)algn_1004AFCA8;
    else
      v61 = (id)qword_1004AFCA0;
    v60 = v61;
  }
  objc_msgSend(v47, "setTintColor:", v60);

  objc_msgSend(v46, "addSubview:", v47);
  v62 = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v47, "bounds");
  v63 = CGRectGetWidth(v74);
  v64 = v63 + v63;
  objc_msgSend(v47, "bounds");
  v65 = CGRectGetHeight(v75);
  CGSize.init(_:_:)(v64, v65 + v65);
  objc_msgSend(v62, "bounds");
  objc_msgSend(v62, "setBounds:");
  objc_msgSend(v47, "center");
  objc_msgSend(v62, "setCenter:");
  v66 = objc_msgSend(v18, "clearColor");
  objc_msgSend(v62, "setBackgroundColor:", v66);

  objc_msgSend(v62, "setUserInteractionEnabled:", 1);
  objc_msgSend(v46, "addSubview:", v62);
  v67 = objc_msgSend(objc_allocWithZone((Class)UITapGestureRecognizer), "initWithTarget:action:", v48, "close");
  objc_msgSend(v62, "addGestureRecognizer:", v67);

}

void sub_1000983E4(void *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v5;
  void *v6;
  id v7;
  char v8;
  uint64_t v9;
  char v10;
  id v11;
  id v12;
  id v13;
  double v14;
  double Height;
  int v16;
  double Width;
  double v18;
  double v19;
  void *v20;
  id v21;
  char v22;
  uint64_t v23;
  char v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  double v30;
  double v31;
  double v32;
  void *v33;
  id v34;
  void *v35;
  id v36;
  void *v37;
  void *v38;
  id v39;
  void *v40;
  void *v41;
  char v42;
  uint64_t v43;
  char v44;
  id v45;
  uint64_t **v46;
  id v47;
  id v48;
  id v49;
  double v50;
  double v51;
  double v52;
  void *v53;
  id v54;
  void *v55;
  id v56;
  id v57;
  void *v58;
  id v59;
  char v60;
  uint64_t v61;
  char v62;
  id v63;
  id v64;
  id v65;
  void *v66;
  id v67;
  void *v68;
  id v69;
  id v70;
  id v71;
  void *v72;
  char v73;
  uint64_t v74;
  char v75;
  id v76;
  id v77;
  id v78;
  double v79;
  double v80;
  double v81;
  id v82;
  void *v83;
  id v84;
  void *v85;
  void *v86;
  id v87;
  void *v88;
  void *v89;
  char v90;
  uint64_t v91;
  char v92;
  id v93;
  id v94;
  id v95;
  double v96;
  double v97;
  double v98;
  id v99;
  void *v100;
  id v101;
  void *v102;
  void *v103;
  id v104;
  void *v105;
  void *v106;
  char v107;
  uint64_t v108;
  char v109;
  id v110;
  id v111;
  id v112;
  void *v113;
  id v114;
  void *v115;
  void *v116;
  id v117;
  void *v118;
  void *v119;
  char v120;
  uint64_t v121;
  char v122;
  id v123;
  id v124;
  id v125;
  int v126;
  void *v127;
  id v128;
  id v129;
  id v130;
  id v131;
  id v132;
  id v133;
  uint64_t v134;
  id v135;
  id v136;
  CGRect v137;
  CGRect v138;
  CGRect v139;
  CGRect v140;
  CGRect v141;
  CGRect v142;
  CGRect v143;
  CGRect v144;
  CGRect v145;
  CGRect v146;
  CGRect v147;
  CGRect v148;
  CGRect v149;
  CGRect v150;

  v3 = v2;
  if ((a2 & 1) != 0)
  {
    v5 = *(void **)(v2 + qword_100480550);
    CGSize.init(_:_:)(*(double *)(v2 + qword_1004804C8), 90.0);
    objc_msgSend(v5, "bounds");
    objc_msgSend(v5, "setBounds:");
    objc_msgSend(a1, "bounds");
    objc_msgSend(v5, "setCenter:", CGRectGetWidth(v137) * 0.5, 150.0);
    if (qword_10047B128 != -1)
      swift_once(&qword_10047B128, sub_100197BAC);
    v6 = (void *)qword_1004AFCC8;
    v7 = qword_1004AFCD0;
    if ((byte_1004AFCD8 & 1) != 0)
    {
      v8 = byte_1004AFCE8;
      v9 = qword_1004AFCE0;
      v10 = byte_10048A2A0;
      v11 = (id)qword_1004AFCC8;
      LOBYTE(v11) = v10;
      v3 = v134;
      v12 = sub_100070DBC((char)v11, v9, v8);
      sub_100021580(v6, v7, 1);
    }
    else
    {
      if ((byte_10048A2A0 & 1) != 0)
        v27 = qword_1004AFCD0;
      else
        v27 = (id)qword_1004AFCC8;
      v12 = v27;
    }
    objc_msgSend(v5, "setBackgroundColor:", v12);

    objc_msgSend(a1, "addSubview:", v5);
    v29 = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
    objc_msgSend(v5, "frame");
    v30 = *(double *)(v3 + qword_1004804D8);
    objc_msgSend(v29, "bounds");
    objc_msgSend(v29, "setBounds:");
    objc_msgSend(v29, "bounds");
    v32 = v31 * 0.5 + 16.0;
    objc_msgSend(v5, "center");
    objc_msgSend(v29, "setCenter:", v32);
    v33 = (void *)objc_opt_self(UIColor);
    v34 = objc_msgSend(v33, "clearColor");
    objc_msgSend(v29, "setBackgroundColor:", v34);

    v135 = v29;
    objc_msgSend(a1, "addSubview:", v29);
    v35 = *(void **)(v3 + qword_100480520);
    v130 = v33;
    v36 = objc_msgSend(v33, "clearColor");
    objc_msgSend(v35, "setBackgroundColor:", v36);

    objc_msgSend(v35, "setTextAlignment:", 1);
    sub_100197EC8();
    v38 = v37;
    v128 = (id)objc_opt_self(UIFont);
    v39 = objc_msgSend(v128, "fontWithDescriptor:size:", v38, 0.0);

    v133 = v35;
    objc_msgSend(v35, "setFont:", v39);

    if (qword_10047B120 != -1)
      swift_once(&qword_10047B120, sub_100197B60);
    v41 = (void *)qword_1004AFCA0;
    v40 = *(void **)algn_1004AFCA8;
    v127 = v5;
    if ((byte_1004AFCB0 & 1) != 0)
    {
      v42 = byte_1004AFCC0;
      v43 = qword_1004AFCB8;
      v44 = byte_10048A2A0;
      v45 = (id)qword_1004AFCA0;
      v46 = &off_10046F000;
      v47 = sub_100070DBC(v44, v43, v42);
      sub_100021580(v41, v40, 1);
    }
    else
    {
      if ((byte_10048A2A0 & 1) != 0)
        v48 = *(id *)algn_1004AFCA8;
      else
        v48 = (id)qword_1004AFCA0;
      v47 = v48;
      v46 = &off_10046F000;
    }
    objc_msgSend(v133, "setTextColor:", v47);

    v66 = *(void **)(v134 + qword_100480530);
    objc_msgSend(a1, "bounds");
    CGRectGetWidth(v143);
    objc_msgSend(v66, "bounds");
    objc_msgSend(v66, "setBounds:");
    objc_msgSend(a1, "bounds");
    objc_msgSend(v66, (SEL)v46[320], CGRectGetWidth(v144) * 0.5, 45.0);
    v67 = objc_msgSend(v130, "clearColor");
    objc_msgSend(v66, "setBackgroundColor:", v67);

    objc_msgSend(a1, "addSubview:", v66);
    v68 = *(void **)(v134 + qword_100480510);
    v69 = objc_msgSend(v130, "clearColor");
    objc_msgSend(v68, "setBackgroundColor:", v69);

    objc_msgSend(v68, "setTextAlignment:", 1);
    v70 = objc_msgSend(v128, "systemFontOfSize:weight:", 60.0, UIFontWeightRegular);
    objc_msgSend(v68, "setFont:", v70);

    if (qword_10047B118 != -1)
      swift_once(&qword_10047B118, sub_100197B14);
    v72 = (void *)qword_1004AFC78;
    v71 = qword_1004AFC80;
    if ((byte_1004AFC88 & 1) != 0)
    {
      v73 = byte_1004AFC98;
      v74 = qword_1004AFC90;
      v75 = byte_10048A2A0;
      v76 = (id)qword_1004AFC78;
      v77 = sub_100070DBC(v75, v74, v73);
      sub_100021580(v72, v71, 1);
    }
    else
    {
      if ((byte_10048A2A0 & 1) != 0)
        v78 = qword_1004AFC80;
      else
        v78 = (id)qword_1004AFC78;
      v77 = v78;
    }
    objc_msgSend(v68, "setTextColor:", v77);

    objc_msgSend(v66, "addSubview:", v68);
    v136 = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
    objc_msgSend(v135, "bounds");
    objc_msgSend(v136, "bounds");
    objc_msgSend(v136, "setBounds:");
    objc_msgSend(v127, "frame");
    v96 = v30 + CGRectGetMaxX(v150);
    objc_msgSend(v136, "bounds");
    v98 = v96 + v97 * 0.5;
    objc_msgSend(v135, "center");
    objc_msgSend(v136, "setCenter:", v98);
    v99 = objc_msgSend(v130, "clearColor");
    objc_msgSend(v136, "setBackgroundColor:", v99);

    objc_msgSend(a1, "addSubview:", v136);
    v100 = *(void **)(v134 + qword_100480528);
    v101 = objc_msgSend(v130, "clearColor");
    objc_msgSend(v100, "setBackgroundColor:", v101);

    objc_msgSend(v100, "setTextAlignment:", 1);
    sub_100197EC8();
    v103 = v102;
    v104 = objc_msgSend(v128, "fontWithDescriptor:size:", v102, 0.0);

    objc_msgSend(v100, "setFont:", v104);
    v105 = (void *)qword_1004AFCA0;
    v106 = *(void **)algn_1004AFCA8;
    if ((byte_1004AFCB0 & 1) != 0)
    {
      v107 = byte_1004AFCC0;
      v108 = qword_1004AFCB8;
      v109 = byte_10048A2A0;
      v110 = (id)qword_1004AFCA0;
      v111 = sub_100070DBC(v109, v108, v107);
      sub_100021580(v105, v106, 1);
    }
    else
    {
      if ((byte_10048A2A0 & 1) != 0)
        v112 = *(id *)algn_1004AFCA8;
      else
        v112 = (id)qword_1004AFCA0;
      v111 = v112;
    }
    objc_msgSend(v100, "setTextColor:", v111);

    if (*(_BYTE *)(v134 + qword_100480538) == 1)
    {
      objc_msgSend(v136, "addSubview:", v133);
      objc_msgSend(v135, "addSubview:", v100);
    }
    else
    {
      objc_msgSend(v135, "addSubview:", v133);
      objc_msgSend(v136, "addSubview:", v100);
    }
  }
  else
  {
    v13 = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
    v14 = *(double *)(v2 + qword_1004804C8);
    objc_msgSend(a1, "bounds");
    Height = CGRectGetHeight(v138);
    CGSize.init(_:_:)(v14, Height);
    objc_msgSend(v13, "bounds");
    objc_msgSend(v13, "setBounds:");
    v16 = *(unsigned __int8 *)(v2 + qword_100480538);
    objc_msgSend(a1, "bounds");
    Width = CGRectGetWidth(v139);
    v18 = *(double *)(v3 + qword_1004804C0);
    v126 = v16;
    if (v16)
      v18 = 1.0 - v18;
    v19 = Width * v18;
    objc_msgSend(a1, "bounds");
    v132 = v13;
    objc_msgSend(v13, "setCenter:", v19, CGRectGetHeight(v140) * 0.5);
    if (qword_10047B128 != -1)
      swift_once(&qword_10047B128, sub_100197BAC);
    v20 = (void *)qword_1004AFCC8;
    v21 = qword_1004AFCD0;
    if ((byte_1004AFCD8 & 1) != 0)
    {
      v22 = byte_1004AFCE8;
      v23 = qword_1004AFCE0;
      v24 = byte_10048A2A0;
      v25 = (id)qword_1004AFCC8;
      v26 = sub_100070DBC(v24, v23, v22);
      sub_100021580(v20, v21, 1);
    }
    else
    {
      if ((byte_10048A2A0 & 1) != 0)
        v28 = qword_1004AFCD0;
      else
        v28 = (id)qword_1004AFCC8;
      v26 = v28;
    }
    objc_msgSend(v132, "setBackgroundColor:", v26);

    objc_msgSend(a1, "addSubview:", v132);
    v49 = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
    objc_msgSend(v132, "frame");
    v50 = *(double *)(v3 + qword_1004804D8);
    objc_msgSend(a1, "bounds");
    CGRectGetHeight(v141);
    objc_msgSend(v49, "bounds");
    objc_msgSend(v49, "setBounds:");
    objc_msgSend(v49, "bounds");
    v52 = v51 * 0.5 + 16.0;
    objc_msgSend(a1, "bounds");
    objc_msgSend(v49, "setCenter:", v52, CGRectGetHeight(v142) * 0.5);
    v53 = (void *)objc_opt_self(UIColor);
    v54 = objc_msgSend(v53, "clearColor");
    objc_msgSend(v49, "setBackgroundColor:", v54);

    v135 = v49;
    objc_msgSend(a1, "addSubview:", v49);
    v55 = *(void **)(v3 + qword_100480510);
    v56 = objc_msgSend(v53, "clearColor");
    objc_msgSend(v55, "setBackgroundColor:", v56);

    objc_msgSend(v55, "setTextAlignment:", 1);
    v129 = (id)objc_opt_self(UIFont);
    v57 = objc_msgSend(v129, "systemFontOfSize:weight:", 60.0, UIFontWeightRegular);
    v131 = v55;
    objc_msgSend(v55, "setFont:", v57);

    if (qword_10047B118 != -1)
      swift_once(&qword_10047B118, sub_100197B14);
    v58 = (void *)qword_1004AFC78;
    v59 = qword_1004AFC80;
    if ((byte_1004AFC88 & 1) != 0)
    {
      v60 = byte_1004AFC98;
      v61 = qword_1004AFC90;
      v62 = byte_10048A2A0;
      v63 = (id)qword_1004AFC78;
      LOBYTE(v63) = v62;
      v3 = v134;
      v64 = sub_100070DBC((char)v63, v61, v60);
      sub_100021580(v58, v59, 1);
    }
    else
    {
      if ((byte_10048A2A0 & 1) != 0)
        v65 = qword_1004AFC80;
      else
        v65 = (id)qword_1004AFC78;
      v64 = v65;
    }
    objc_msgSend(v131, "setTextColor:", v64);

    v136 = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
    objc_msgSend(a1, "bounds");
    v79 = CGRectGetWidth(v145);
    objc_msgSend(v132, "frame");
    v80 = v79 - CGRectGetMaxX(v146) - v50 + -16.0;
    objc_msgSend(a1, "bounds");
    CGRectGetHeight(v147);
    objc_msgSend(v136, "bounds");
    objc_msgSend(v136, "setBounds:");
    objc_msgSend(v132, "frame");
    v81 = v80 * 0.5 + v50 + CGRectGetMaxX(v148);
    objc_msgSend(a1, "bounds");
    objc_msgSend(v136, "setCenter:", v81, CGRectGetHeight(v149) * 0.5);
    v82 = objc_msgSend(v53, "clearColor");
    objc_msgSend(v136, "setBackgroundColor:", v82);

    objc_msgSend(a1, "addSubview:", v136);
    v83 = *(void **)(v3 + qword_100480520);
    v84 = objc_msgSend(v53, "clearColor");
    objc_msgSend(v83, "setBackgroundColor:", v84);

    sub_100197EC8();
    v86 = v85;
    v87 = objc_msgSend(v129, "fontWithDescriptor:size:", v85, 0.0);

    objc_msgSend(v83, "setFont:", v87);
    if (qword_10047B120 != -1)
      swift_once(&qword_10047B120, sub_100197B60);
    v88 = (void *)qword_1004AFCA0;
    v89 = *(void **)algn_1004AFCA8;
    if ((byte_1004AFCB0 & 1) != 0)
    {
      v90 = byte_1004AFCC0;
      v91 = qword_1004AFCB8;
      v92 = byte_10048A2A0;
      v93 = (id)qword_1004AFCA0;
      LOBYTE(v93) = v92;
      v3 = v134;
      v94 = sub_100070DBC((char)v93, v91, v90);
      sub_100021580(v88, v89, 1);
    }
    else
    {
      if ((byte_10048A2A0 & 1) != 0)
        v95 = *(id *)algn_1004AFCA8;
      else
        v95 = (id)qword_1004AFCA0;
      v94 = v95;
    }
    objc_msgSend(v83, "setTextColor:", v94);

    v113 = *(void **)(v3 + qword_100480528);
    v114 = objc_msgSend(v53, "clearColor");
    objc_msgSend(v113, "setBackgroundColor:", v114);

    sub_100197EC8();
    v116 = v115;
    v117 = objc_msgSend(v129, "fontWithDescriptor:size:", v115, 0.0);

    objc_msgSend(v113, "setFont:", v117);
    v118 = (void *)qword_1004AFCA0;
    v119 = *(void **)algn_1004AFCA8;
    if ((byte_1004AFCB0 & 1) != 0)
    {
      v120 = byte_1004AFCC0;
      v121 = qword_1004AFCB8;
      v122 = byte_10048A2A0;
      v123 = (id)qword_1004AFCA0;
      v124 = sub_100070DBC(v122, v121, v120);
      sub_100021580(v118, v119, 1);
    }
    else
    {
      if ((byte_10048A2A0 & 1) != 0)
        v125 = *(id *)algn_1004AFCA8;
      else
        v125 = (id)qword_1004AFCA0;
      v124 = v125;
    }
    objc_msgSend(v113, "setTextColor:", v124);

    if (v126)
    {
      objc_msgSend(v83, "setTextAlignment:", 2);
      objc_msgSend(v113, "setTextAlignment:", 2);
      objc_msgSend(v136, "addSubview:", v131);
      objc_msgSend(v135, "addSubview:", v83);
      objc_msgSend(v135, "addSubview:", v113);
    }
    else
    {
      objc_msgSend(v83, "setTextAlignment:", 0);
      objc_msgSend(v113, "setTextAlignment:", 0);
      objc_msgSend(v135, "addSubview:", v131);
      objc_msgSend(v136, "addSubview:", v83);
      objc_msgSend(v136, "addSubview:", v113);
    }

  }
}

void sub_10009951C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  double Width;
  void *v6;
  id v7;
  char v8;
  uint64_t v9;
  char v10;
  id v11;
  id v12;
  id v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  id v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  Swift::String v27;
  Swift::String v28;
  void *object;
  NSString v30;
  id v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  Swift::String v40;
  CGRect v41;
  CGRect v42;

  v2 = v1;
  v4 = *(void **)(v1 + qword_100480558);
  objc_msgSend(a1, "bounds");
  Width = CGRectGetWidth(v41);
  CGSize.init(_:_:)(Width, 0.5);
  objc_msgSend(v4, "bounds");
  objc_msgSend(v4, "setBounds:");
  objc_msgSend(a1, "bounds");
  objc_msgSend(v4, "setCenter:", CGRectGetWidth(v42) * 0.5, 0.0);
  if (qword_10047B128 != -1)
    swift_once(&qword_10047B128, sub_100197BAC);
  v6 = (void *)qword_1004AFCC8;
  v7 = qword_1004AFCD0;
  if ((byte_1004AFCD8 & 1) != 0)
  {
    v8 = byte_1004AFCE8;
    v9 = qword_1004AFCE0;
    v10 = byte_10048A2A0;
    v11 = (id)qword_1004AFCC8;
    v12 = sub_100070DBC(v10, v9, v8);
    sub_100021580(v6, v7, 1);
  }
  else
  {
    if ((byte_10048A2A0 & 1) != 0)
      v13 = qword_1004AFCD0;
    else
      v13 = (id)qword_1004AFCC8;
    v12 = v13;
  }
  objc_msgSend(v4, "setBackgroundColor:", v12);

  objc_msgSend(a1, "addSubview:", v4);
  objc_msgSend(a1, "bounds");
  v15 = v14;
  v17 = v16;
  v19 = v18;
  v21 = v20;
  v22 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
  if (qword_10047AE28 != -1)
    swift_once(&qword_10047AE28, sub_100195B18);
  v23 = (void *)qword_1004AF910;
  v24 = objc_allocWithZone((Class)type metadata accessor for ButtonWithCustomBackgroundColor());
  v25 = sub_100038F30(v22, v23, v15, v17, v19, v21, 16.0);
  v26 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v40._object = (void *)0xE000000000000000;
  v27._object = (void *)0x80000001003DCC70;
  v27._countAndFlagsBits = 0xD000000000000010;
  v28._countAndFlagsBits = 0;
  v28._object = (void *)0xE000000000000000;
  v40._countAndFlagsBits = 0;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v27, (Swift::String_optional)0, (NSBundle)v26, v28, v40)._object;

  v30 = String._bridgeToObjectiveC()();
  objc_msgSend(v25, "setTitle:forState:", v30, 0, swift_bridgeObjectRelease(object).n128_f64[0]);

  if (qword_10047AE18 != -1)
    swift_once(&qword_10047AE18, sub_100195AF0);
  objc_msgSend(v25, "setTitleColor:forState:", qword_1004AF900, 0);
  if (qword_10047AE20 != -1)
    swift_once(&qword_10047AE20, sub_100195B04);
  objc_msgSend(v25, "setTitleColor:forState:", qword_1004AF908, 1);
  v39 = objc_msgSend(objc_allocWithZone((Class)UIFontMetrics), "initForTextStyle:", UIFontTextStyleHeadline);
  v31 = objc_msgSend(v25, "titleLabel");
  if (!v31)
    goto LABEL_18;
  v32 = v31;
  v33 = (void *)objc_opt_self(UIFont);
  v34 = objc_msgSend(v33, "preferredFontForTextStyle:", UIFontTextStyleHeadline);
  v35 = objc_msgSend(v34, "fontDescriptor");

  v36 = objc_msgSend(v35, "fontDescriptorWithSymbolicTraits:", 2);
  if (v36)
  {
    v37 = objc_msgSend(v33, "fontWithDescriptor:size:", v36, 0.0);

    v38 = objc_msgSend(v39, "scaledFontForFont:maximumPointSize:", v37, 28.0);
    objc_msgSend(v32, "setFont:", v38);

LABEL_18:
    objc_msgSend(v25, "addTarget:action:forControlEvents:", v2, "copyMeasurement", 64);
    objc_msgSend(a1, "addSubview:", v25);

    return;
  }
  __break(1u);
}

id sub_1000999F4()
{
  char *v0;
  id result;
  char *v2;
  uint64_t v3;
  uint64_t v4;

  result = objc_msgSend(v0, "center");
  v2 = &v0[qword_100480290];
  *(_QWORD *)v2 = v3;
  *((_QWORD *)v2 + 1) = v4;
  return result;
}

void sub_100099A28()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  char v5;
  uint64_t v6;
  char v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  char v14;
  uint64_t v15;
  char v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  char v23;
  uint64_t v24;
  char v25;
  id v26;
  id v27;
  id v28;
  void *v29;
  void *v30;
  void *v31;
  char v32;
  uint64_t v33;
  char v34;
  id v35;
  id v36;
  id v37;
  void *v38;
  void *v39;
  void *v40;
  char v41;
  uint64_t v42;
  char v43;
  id v44;
  id v45;
  id v46;
  void *v47;
  void *v48;
  id v49;
  char v50;
  uint64_t v51;
  char v52;
  id v53;
  id v54;
  id v55;
  void *v56;
  void *v57;
  id v58;
  char v59;
  uint64_t v60;
  char v61;
  id v62;
  id v63;
  id v64;

  v1 = v0;
  v2 = *(void **)(v0 + qword_100480518);
  if (qword_10047B120 != -1)
    swift_once(&qword_10047B120, sub_100197B60);
  v3 = (void *)qword_1004AFCA0;
  v4 = *(void **)algn_1004AFCA8;
  if ((byte_1004AFCB0 & 1) != 0)
  {
    v5 = byte_1004AFCC0;
    v6 = qword_1004AFCB8;
    v7 = byte_10048A2A0;
    v8 = (id)qword_1004AFCA0;
    v9 = sub_100070DBC(v7, v6, v5);
    sub_100021580(v3, v4, 1);
  }
  else
  {
    if ((byte_10048A2A0 & 1) != 0)
      v10 = *(id *)algn_1004AFCA8;
    else
      v10 = (id)qword_1004AFCA0;
    v9 = v10;
  }
  objc_msgSend(v2, "setTextColor:", v9);

  v11 = *(void **)(v1 + qword_100480510);
  if (qword_10047B118 != -1)
    swift_once(&qword_10047B118, sub_100197B14);
  v12 = (void *)qword_1004AFC78;
  v13 = qword_1004AFC80;
  if ((byte_1004AFC88 & 1) != 0)
  {
    v14 = byte_1004AFC98;
    v15 = qword_1004AFC90;
    v16 = byte_10048A2A0;
    v17 = (id)qword_1004AFC78;
    v18 = sub_100070DBC(v16, v15, v14);
    sub_100021580(v12, v13, 1);
  }
  else
  {
    if ((byte_10048A2A0 & 1) != 0)
      v19 = qword_1004AFC80;
    else
      v19 = (id)qword_1004AFC78;
    v18 = v19;
  }
  objc_msgSend(v11, "setTextColor:", v18);

  v20 = *(void **)(v1 + qword_100480520);
  v21 = (void *)qword_1004AFCA0;
  v22 = *(void **)algn_1004AFCA8;
  if ((byte_1004AFCB0 & 1) != 0)
  {
    v23 = byte_1004AFCC0;
    v24 = qword_1004AFCB8;
    v25 = byte_10048A2A0;
    v26 = (id)qword_1004AFCA0;
    v27 = sub_100070DBC(v25, v24, v23);
    sub_100021580(v21, v22, 1);
  }
  else
  {
    if ((byte_10048A2A0 & 1) != 0)
      v28 = *(id *)algn_1004AFCA8;
    else
      v28 = (id)qword_1004AFCA0;
    v27 = v28;
  }
  objc_msgSend(v20, "setTextColor:", v27);

  v29 = *(void **)(v1 + qword_100480528);
  v30 = (void *)qword_1004AFCA0;
  v31 = *(void **)algn_1004AFCA8;
  if ((byte_1004AFCB0 & 1) != 0)
  {
    v32 = byte_1004AFCC0;
    v33 = qword_1004AFCB8;
    v34 = byte_10048A2A0;
    v35 = (id)qword_1004AFCA0;
    v36 = sub_100070DBC(v34, v33, v32);
    sub_100021580(v30, v31, 1);
  }
  else
  {
    if ((byte_10048A2A0 & 1) != 0)
      v37 = *(id *)algn_1004AFCA8;
    else
      v37 = (id)qword_1004AFCA0;
    v36 = v37;
  }
  objc_msgSend(v29, "setTextColor:", v36);

  v38 = *(void **)(v1 + qword_100480548);
  v39 = (void *)qword_1004AFCA0;
  v40 = *(void **)algn_1004AFCA8;
  if ((byte_1004AFCB0 & 1) != 0)
  {
    v41 = byte_1004AFCC0;
    v42 = qword_1004AFCB8;
    v43 = byte_10048A2A0;
    v44 = (id)qword_1004AFCA0;
    v45 = sub_100070DBC(v43, v42, v41);
    sub_100021580(v39, v40, 1);
  }
  else
  {
    if ((byte_10048A2A0 & 1) != 0)
      v46 = *(id *)algn_1004AFCA8;
    else
      v46 = (id)qword_1004AFCA0;
    v45 = v46;
  }
  objc_msgSend(v38, "setTintColor:", v45);

  v47 = *(void **)(v1 + qword_100480558);
  if (qword_10047B128 != -1)
    swift_once(&qword_10047B128, sub_100197BAC);
  v48 = (void *)qword_1004AFCC8;
  v49 = qword_1004AFCD0;
  if ((byte_1004AFCD8 & 1) != 0)
  {
    v50 = byte_1004AFCE8;
    v51 = qword_1004AFCE0;
    v52 = byte_10048A2A0;
    v53 = (id)qword_1004AFCC8;
    v54 = sub_100070DBC(v52, v51, v50);
    sub_100021580(v48, v49, 1);
  }
  else
  {
    if ((byte_10048A2A0 & 1) != 0)
      v55 = qword_1004AFCD0;
    else
      v55 = (id)qword_1004AFCC8;
    v54 = v55;
  }
  objc_msgSend(v47, "setBackgroundColor:", v54);

  v56 = *(void **)(v1 + qword_100480550);
  v57 = (void *)qword_1004AFCC8;
  v58 = qword_1004AFCD0;
  if ((byte_1004AFCD8 & 1) != 0)
  {
    v59 = byte_1004AFCE8;
    v60 = qword_1004AFCE0;
    v61 = byte_10048A2A0;
    v62 = (id)qword_1004AFCC8;
    v64 = sub_100070DBC(v61, v60, v59);
    sub_100021580(v57, v58, 1);
  }
  else
  {
    if ((byte_10048A2A0 & 1) != 0)
      v63 = qword_1004AFCD0;
    else
      v63 = (id)qword_1004AFCC8;
    v64 = v63;
  }
  objc_msgSend(v56, "setBackgroundColor:", v64);

}

_QWORD *sub_100099ED8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t ObjCClassFromMetadata;
  id v27;
  NSString v28;
  id v29;
  id v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;

  *(_DWORD *)&v5[qword_100480490] = 1128464384;
  *(_DWORD *)&v5[qword_100480498] = 1136361472;
  *(_QWORD *)&v5[qword_1004804A0] = 0x4038000000000000;
  v10 = qword_1004804A8;
  v11 = qword_10047AE10;
  v12 = v5;
  if (v11 != -1)
    swift_once(&qword_10047AE10, sub_100195AE0);
  *(_QWORD *)&v5[v10] = qword_1004AF8F8;
  *(_QWORD *)&v12[qword_1004804B0] = 0x4046800000000000;
  *(_QWORD *)&v12[qword_1004804B8] = 0x402E000000000000;
  v13 = qword_1004804C0;
  if (qword_10047ADF8 != -1)
    swift_once(&qword_10047ADF8, sub_100195AAC);
  *(_QWORD *)&v12[v13] = qword_1004AF8E0;
  v14 = qword_1004804C8;
  if (qword_10047AE00 != -1)
    swift_once(&qword_10047AE00, sub_100195AC0);
  *(_QWORD *)&v12[v14] = qword_1004AF8E8;
  *(_QWORD *)&v12[qword_1004804D0] = 0x3FE0000000000000;
  v15 = qword_1004804D8;
  if (qword_10047AE08 != -1)
    swift_once(&qword_10047AE08, sub_100195AD0);
  *(_QWORD *)&v12[v15] = qword_1004AF8F0;
  *(_QWORD *)&v12[qword_1004804E0] = 0x402E000000000000;
  *(_QWORD *)&v12[qword_1004804E8] = 0x4068600000000000;
  *(_QWORD *)&v12[qword_1004804F0] = 0x4056800000000000;
  *(_QWORD *)&v12[qword_1004804F8] = 0x4056800000000000;
  *(_QWORD *)&v12[qword_100480500] = 0x402E000000000000;
  *(_QWORD *)&v12[qword_100480508] = 0x4051600000000000;
  v16 = qword_100480510;
  *(_QWORD *)&v12[v16] = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  v17 = qword_100480518;
  *(_QWORD *)&v12[v17] = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  v18 = qword_100480520;
  *(_QWORD *)&v12[v18] = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  v19 = qword_100480528;
  *(_QWORD *)&v12[v19] = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  v20 = qword_100480530;
  *(_QWORD *)&v12[v20] = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
  v21 = qword_100480538;
  v22 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v23 = objc_msgSend(v22, "userInterfaceLayoutDirection");

  v12[v21] = v23 == (id)1;
  v24 = qword_100480540;
  *(_QWORD *)&v12[v24] = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
  v25 = type metadata accessor for ViewController(0);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v25);
  v27 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  v28 = String._bridgeToObjectiveC()();
  v29 = objc_msgSend((id)objc_opt_self(UIImage), "imageNamed:inBundle:compatibleWithTraitCollection:", v28, v27, 0);

  if (v29)
  {
    v30 = objc_msgSend(v29, "imageWithRenderingMode:", 2);

  }
  else
  {
    v30 = 0;
  }
  v31 = qword_100480548;
  v32 = objc_msgSend(objc_allocWithZone((Class)UIImageView), "initWithImage:", v30);

  *(_QWORD *)&v12[v31] = v32;
  v33 = qword_100480550;
  *(_QWORD *)&v12[v33] = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v34 = qword_100480558;
  *(_QWORD *)&v12[v34] = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);

  return sub_100095CE8(a1, a2, a3, a4, a5);
}

id sub_10009A354(void *a1)
{
  char *v1;
  char *v2;
  objc_class *ObjectType;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t ObjCClassFromMetadata;
  id v22;
  NSString v23;
  id v24;
  id v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  objc_super v32;

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType(v1);
  *(_DWORD *)&v2[qword_100480490] = 1128464384;
  *(_DWORD *)&v2[qword_100480498] = 1136361472;
  *(_QWORD *)&v2[qword_1004804A0] = 0x4038000000000000;
  v5 = qword_1004804A8;
  v6 = qword_10047AE10;
  v7 = v2;
  if (v6 != -1)
    swift_once(&qword_10047AE10, sub_100195AE0);
  *(_QWORD *)&v2[v5] = qword_1004AF8F8;
  *(_QWORD *)&v7[qword_1004804B0] = 0x4046800000000000;
  *(_QWORD *)&v7[qword_1004804B8] = 0x402E000000000000;
  v8 = qword_1004804C0;
  if (qword_10047ADF8 != -1)
    swift_once(&qword_10047ADF8, sub_100195AAC);
  *(_QWORD *)&v7[v8] = qword_1004AF8E0;
  v9 = qword_1004804C8;
  if (qword_10047AE00 != -1)
    swift_once(&qword_10047AE00, sub_100195AC0);
  *(_QWORD *)&v7[v9] = qword_1004AF8E8;
  *(_QWORD *)&v7[qword_1004804D0] = 0x3FE0000000000000;
  v10 = qword_1004804D8;
  if (qword_10047AE08 != -1)
    swift_once(&qword_10047AE08, sub_100195AD0);
  *(_QWORD *)&v7[v10] = qword_1004AF8F0;
  *(_QWORD *)&v7[qword_1004804E0] = 0x402E000000000000;
  *(_QWORD *)&v7[qword_1004804E8] = 0x4068600000000000;
  *(_QWORD *)&v7[qword_1004804F0] = 0x4056800000000000;
  *(_QWORD *)&v7[qword_1004804F8] = 0x4056800000000000;
  *(_QWORD *)&v7[qword_100480500] = 0x402E000000000000;
  *(_QWORD *)&v7[qword_100480508] = 0x4051600000000000;
  v11 = qword_100480510;
  *(_QWORD *)&v7[v11] = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  v12 = qword_100480518;
  *(_QWORD *)&v7[v12] = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  v13 = qword_100480520;
  *(_QWORD *)&v7[v13] = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  v14 = qword_100480528;
  *(_QWORD *)&v7[v14] = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  v15 = qword_100480530;
  *(_QWORD *)&v7[v15] = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
  v16 = qword_100480538;
  v17 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v18 = objc_msgSend(v17, "userInterfaceLayoutDirection");

  v7[v16] = v18 == (id)1;
  v19 = qword_100480540;
  *(_QWORD *)&v7[v19] = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
  v20 = type metadata accessor for ViewController(0);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v20);
  v22 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  v23 = String._bridgeToObjectiveC()();
  v24 = objc_msgSend((id)objc_opt_self(UIImage), "imageNamed:inBundle:compatibleWithTraitCollection:", v23, v22, 0);

  if (v24)
  {
    v25 = objc_msgSend(v24, "imageWithRenderingMode:", 2);

  }
  else
  {
    v25 = 0;
  }
  v26 = qword_100480548;
  v27 = objc_msgSend(objc_allocWithZone((Class)UIImageView), "initWithImage:", v25);

  *(_QWORD *)&v7[v26] = v27;
  v28 = qword_100480550;
  *(_QWORD *)&v7[v28] = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v29 = qword_100480558;
  *(_QWORD *)&v7[v29] = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);

  v32.receiver = v7;
  v32.super_class = ObjectType;
  v30 = objc_msgSendSuper2(&v32, "initWithCoder:", a1);

  return v30;
}

id sub_10009A7D0(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_10009A354(a3);
}

void sub_10009A7F4()
{
  uint64_t v0;

}

void sub_10009A890(uint64_t a1)
{

}

uint64_t type metadata accessor for LabelDetailsPlatter(uint64_t a1)
{
  uint64_t result;

  result = qword_100480588;
  if (!qword_100480588)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LabelDetailsPlatter);
  return result;
}

uint64_t sub_10009A974(uint64_t a1)
{
  _QWORD v2[26];

  v2[0] = (char *)&value witness table for Builtin.Int32 + 64;
  v2[1] = (char *)&value witness table for Builtin.Int32 + 64;
  v2[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v2[3] = (char *)&value witness table for Builtin.Int64 + 64;
  v2[4] = (char *)&value witness table for Builtin.Int64 + 64;
  v2[5] = (char *)&value witness table for Builtin.Int64 + 64;
  v2[6] = (char *)&value witness table for Builtin.Int64 + 64;
  v2[7] = (char *)&value witness table for Builtin.Int64 + 64;
  v2[8] = (char *)&value witness table for Builtin.Int64 + 64;
  v2[9] = (char *)&value witness table for Builtin.Int64 + 64;
  v2[10] = (char *)&value witness table for Builtin.Int64 + 64;
  v2[11] = (char *)&value witness table for Builtin.Int64 + 64;
  v2[12] = (char *)&value witness table for Builtin.Int64 + 64;
  v2[13] = (char *)&value witness table for Builtin.Int64 + 64;
  v2[14] = (char *)&value witness table for Builtin.Int64 + 64;
  v2[15] = (char *)&value witness table for Builtin.Int64 + 64;
  v2[16] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[17] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[18] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[19] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[20] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[21] = &unk_1003B4888;
  v2[22] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[23] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[24] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[25] = (char *)&value witness table for Builtin.UnknownObject + 64;
  return swift_initClassMetadata2(a1, 256, 26, v2, a1 + 384);
}

uint64_t sub_10009AA08()
{
  return type metadata accessor for LabelDetailsPlatter(0);
}

double sub_10009AA10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t Strong;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double result;
  _BYTE v19[24];

  v3 = v2;
  v4 = v2 + qword_100480288;
  Strong = swift_unknownObjectWeakLoadStrong(v2 + qword_100480288, a2);
  if (Strong)
  {
    v6 = Strong;
    v7 = *(_QWORD *)(v4 + 8);
    ObjectType = swift_getObjectType(Strong);
    (*(void (**)(uint64_t, uint64_t))(v7 + 32))(ObjectType, v7);
    swift_unknownObjectRelease(v6);
  }
  v9 = objc_msgSend((id)objc_opt_self(UIPasteboard), "generalPasteboard");
  v10 = objc_msgSend(*(id *)(v3 + qword_100480510), "text");
  objc_msgSend(v9, "setString:", v10);

  v12 = swift_unknownObjectWeakLoadStrong(v4, v11);
  if (v12)
  {
    v13 = v12;
    v14 = *(_QWORD *)(v4 + 8);
    v15 = swift_getObjectType(v12);
    (*(void (**)(uint64_t, uint64_t))(v14 + 24))(v15, v14);
    swift_unknownObjectRelease(v13);
  }
  if (qword_10047AB68 != -1)
    swift_once(&qword_10047AB68, sub_10011E814);
  v16 = qword_1004AF6B8;

  v17 = v16 + OBJC_IVAR____TtC7Measure14MetricsManager_measurementState;
  swift_beginAccess(v17, v19, 1, 0);
  result = *(double *)(v17 + 56) + 1.0;
  *(double *)(v17 + 56) = result;
  return result;
}

id sub_10009AB9C(void *a1, void *a2)
{
  double Width;
  double v5;
  double v6;
  double Height;
  CGRect v9;
  CGRect v10;
  CGRect v11;
  CGRect v12;

  objc_msgSend(a1, "bounds");
  Width = CGRectGetWidth(v9);
  objc_msgSend(a2, "bounds");
  v5 = CGRectGetWidth(v10);
  if (v5 >= Width)
    return objc_msgSend(a1, "setAdjustsFontSizeToFitWidth:", v5);
  objc_msgSend(a2, "bounds");
  v6 = CGRectGetWidth(v11);
  objc_msgSend(a1, "bounds");
  Height = CGRectGetHeight(v12);
  CGSize.init(_:_:)(v6, Height);
  objc_msgSend(a1, "bounds");
  objc_msgSend(a1, "setBounds:");
  objc_msgSend(a1, "setAdjustsFontSizeToFitWidth:", 1);
  return objc_msgSend(a1, "setMinimumScaleFactor:", 0.3);
}

_QWORD *initializeBufferWithCopyOfBuffer for SnapPoint(_QWORD *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = v3;
  v6 = v4;
  return a1;
}

void destroy for SnapPoint(id *a1)
{

}

uint64_t assignWithCopy for SnapPoint(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  v7 = *(void **)(a1 + 8);
  v8 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v8;
  v9 = v8;

  return a1;
}

uint64_t assignWithTake for SnapPoint(uint64_t a1, _OWORD *a2)
{
  void *v4;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for SnapPoint(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SnapPoint(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for WorldEdgeState()
{
  return &type metadata for WorldEdgeState;
}

uint64_t sub_10009AE48(void **a1, void **a2)
{
  return sub_10009AEC8(*a1, a1[1], *a2, a2[1]);
}

unint64_t sub_10009AE60(uint64_t a1)
{
  unint64_t result;

  result = sub_10009AE84();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10009AE84()
{
  unint64_t result;

  result = qword_100480840;
  if (!qword_100480840)
  {
    result = swift_getWitnessTable(&unk_1003B48C0, &type metadata for WorldEdgeState);
    atomic_store(result, (unint64_t *)&qword_100480840);
  }
  return result;
}

uint64_t sub_10009AEC8(void *a1, void *a2, void *a3, void *a4)
{
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  char v12;

  if (a1)
  {
    if (!a3)
      return 0;
    v7 = a1;
    type metadata accessor for WorldEdge(0);
    v8 = a3;
    v9 = v7;
    LOBYTE(v7) = static NSObject.== infix(_:_:)(v9, v8);

    if ((v7 & 1) == 0)
      return 0;
  }
  else if (a3)
  {
    return 0;
  }
  if (a2)
  {
    if (a4)
    {
      type metadata accessor for WorldEdge(0);
      v10 = a4;
      v11 = a2;
      v12 = static NSObject.== infix(_:_:)(v11, v10);

      if ((v12 & 1) != 0)
        return 1;
    }
  }
  else if (!a4)
  {
    return 1;
  }
  return 0;
}

void sub_10009AF98()
{
  qword_100480848 = 0x4028000000000000;
}

void sub_10009AFA8()
{
  qword_100480850 = 0x402A000000000000;
}

void sub_10009AFB8()
{
  char *v0;
  void *v1;
  NSString v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  NSString v10;
  id v11;

  v1 = *(void **)&v0[OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_title];
  v2 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "setText:", v2);

  v3 = (void *)objc_opt_self(UIFont);
  v4 = objc_msgSend(v3, "preferredFontForTextStyle:", UIFontTextStyleBody);
  v5 = objc_msgSend(v4, "fontDescriptor");

  v6 = objc_msgSend(v5, "fontDescriptorWithSymbolicTraits:", 2);
  if (v6)
  {
    v7 = objc_msgSend(v3, "fontWithDescriptor:size:", v6, 0.0);

    objc_msgSend(v1, "setFont:", v7);
    v8 = objc_msgSend((id)objc_opt_self(UIColor), "secondaryLabelColor");
    objc_msgSend(v1, "setTextColor:", v8);

    v9 = *(void **)&v0[OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_mainUnits];
    v10 = String._bridgeToObjectiveC()();
    objc_msgSend(v9, "setText:", v10);

    objc_msgSend(v9, "setUserInteractionEnabled:", 1);
    v11 = objc_msgSend(v3, "preferredFontForTextStyle:", UIFontTextStyleLargeTitle);
    objc_msgSend(v9, "setFont:", v11);

    objc_msgSend(v0, "addSubview:", v1);
    objc_msgSend(v0, "addSubview:", v9);
    objc_msgSend(v0, "addSubview:", *(_QWORD *)&v0[OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_secondaryLabels]);
  }
  else
  {
    __break(1u);
  }
}

void sub_10009B1D0()
{
  char *v0;
  char *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  double v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  id v32;
  void *v33;
  uint64_t v34;
  id v35;
  double v36;
  void *v37;
  id v38;
  void *v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  id v48;
  id v49;
  id v50;
  double v51;
  uint64_t v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  Class isa;
  double v74;
  double v75;
  double v76;
  id v77;
  void *v78;
  char *v79;
  id v80;
  uint64_t v81;
  _QWORD v82[3];
  uint64_t v83[3];

  v1 = v0;
  v2 = *(void **)&v0[OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_title];
  objc_msgSend(v2, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v3 = *(void **)&v0[OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_mainUnits];
  objc_msgSend(v3, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v79 = *(char **)&v0[OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_secondaryLabels];
  objc_msgSend(v79, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v81 = sub_10000EDC8((uint64_t *)&unk_1004866D0);
  v4 = swift_allocObject(v81, 48, 7);
  *(_OWORD *)(v4 + 16) = xmmword_1003B1460;
  v5 = objc_msgSend(v2, "leadingAnchor");
  v6 = objc_msgSend(v1, "leadingAnchor");
  if (qword_10047A758 != -1)
    swift_once(&qword_10047A758, sub_10000EF18);
  v7 = objc_msgSend(v5, "constraintEqualToAnchor:constant:", v6, *(double *)&qword_1004AF090);

  *(_QWORD *)(v4 + 32) = v7;
  v8 = objc_msgSend(v3, "leadingAnchor");
  v9 = objc_msgSend(v1, "leadingAnchor");
  v10 = objc_msgSend(v8, "constraintEqualToAnchor:constant:", v9, *(double *)&qword_1004AF090);

  *(_QWORD *)(v4 + 40) = v10;
  v83[0] = v4;
  specialized Array._endMutation()(v11);
  v12 = OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_horizontalConstraints;
  v13 = *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_horizontalConstraints];
  *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_horizontalConstraints] = v4;
  v14 = objc_msgSend(v3, "bottomAnchor", swift_bridgeObjectRelease(v13).n128_f64[0]);
  v15 = objc_msgSend(v1, "bottomAnchor");
  if (qword_10047A998 != -1)
    swift_once(&qword_10047A998, sub_10009AFA8);
  v80 = v3;
  v16 = objc_msgSend(v14, "constraintEqualToAnchor:constant:", v15, -*(double *)&qword_100480850);

  LODWORD(v17) = 1148813312;
  objc_msgSend(v16, "setPriority:", v17);
  v18 = swift_allocObject(v81, 48, 7);
  *(_OWORD *)(v18 + 16) = xmmword_1003B1460;
  v19 = objc_msgSend(v2, "topAnchor");
  v20 = objc_msgSend(v1, "topAnchor");
  if (qword_10047A990 != -1)
    swift_once(&qword_10047A990, sub_10009AF98);
  v21 = objc_msgSend(v19, "constraintEqualToAnchor:constant:", v20, *(double *)&qword_100480848);

  *(_QWORD *)(v18 + 32) = v21;
  *(_QWORD *)(v18 + 40) = v16;
  v83[0] = v18;
  specialized Array._endMutation()(v22);
  v23 = v18;
  v24 = (uint64_t *)&v1[OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_marginConstraints];
  swift_beginAccess(&v1[OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_marginConstraints], v83, 1, 0);
  v25 = *v24;
  *v24 = v23;
  v26 = v16;
  swift_bridgeObjectRelease(v25);
  v27 = *(_QWORD *)&v1[v12];
  swift_beginAccess(v24, v82, 33, 0);
  v28 = swift_bridgeObjectRetain(v27);
  sub_1000FFFEC(v28);
  swift_endAccess(v82);
  v29 = *v24;
  if ((unint64_t)v29 >> 62)
  {
    if (v29 < 0)
      v34 = v29;
    else
      v34 = v29 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v29, 2);
    v30 = _CocoaArrayWrapper.endIndex.getter(v34);
    if (!v30)
      goto LABEL_19;
  }
  else
  {
    v30 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n(v29, 2);
    if (!v30)
      goto LABEL_19;
  }
  if (v30 < 1)
  {
    __break(1u);
    return;
  }
  for (i = 0; i != v30; ++i)
  {
    if ((v29 & 0xC000000000000001) != 0)
      v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v29);
    else
      v32 = *(id *)(v29 + 8 * i + 32);
    v33 = v32;
    objc_msgSend(v32, "setActive:", 1);

  }
LABEL_19:
  v35 = objc_msgSend(v80, "font", swift_bridgeObjectRelease_n(v29, 2).n128_f64[0]);
  v36 = 1.0;
  v78 = v26;
  if (v35)
  {
    v37 = v35;
    v38 = objc_msgSend(*(id *)(*(_QWORD *)&v79[OBJC_IVAR____TtC7Measure22NewSecondaryLabelStack_bottomLabel]+ OBJC_IVAR____TtC7Measure24ViewWithInteractiveLabel_label), "font");
    if (v38)
    {
      v39 = v38;
      objc_msgSend(v37, "descender");
      v41 = v40;
      objc_msgSend(v37, "leading");
      v43 = v41 + v42;
      objc_msgSend(v39, "descender");
      v45 = v43 - v44;
      objc_msgSend(v39, "leading");
      v47 = v46;

      v36 = v45 - v47 + 1.0;
    }
    else
    {

    }
  }
  v48 = objc_msgSend(v79, "bottomAnchor");
  v49 = objc_msgSend(v80, "bottomAnchor");
  v50 = objc_msgSend(v48, "constraintEqualToAnchor:constant:", v49, v36);

  LODWORD(v51) = 1148813312;
  objc_msgSend(v50, "setPriority:", v51);
  v77 = (id)objc_opt_self(NSLayoutConstraint);
  v52 = swift_allocObject(v81, 88, 7);
  *(_OWORD *)(v52 + 16) = xmmword_1003B2900;
  v53 = objc_msgSend(v2, "trailingAnchor");
  v54 = objc_msgSend(v79, "leadingAnchor");
  v55 = objc_msgSend(v53, "constraintEqualToAnchor:constant:", v54, -*(double *)&qword_1004AF090);

  *(_QWORD *)(v52 + 32) = v55;
  v56 = objc_msgSend(v80, "topAnchor");
  v57 = objc_msgSend(v2, "bottomAnchor");
  v58 = objc_msgSend(v56, "constraintEqualToAnchor:", v57);

  *(_QWORD *)(v52 + 40) = v58;
  v59 = objc_msgSend(v80, "trailingAnchor");
  v60 = objc_msgSend(v79, "leadingAnchor");
  v61 = objc_msgSend(v59, "constraintEqualToAnchor:constant:", v60, -*(double *)&qword_1004AF090);

  *(_QWORD *)(v52 + 48) = v61;
  v62 = objc_msgSend(v79, "topAnchor");
  v63 = objc_msgSend(v1, "topAnchor");
  v64 = objc_msgSend(v62, "constraintEqualToAnchor:", v63);

  *(_QWORD *)(v52 + 56) = v64;
  *(_QWORD *)(v52 + 64) = v50;
  v65 = v50;
  v66 = objc_msgSend(v79, "widthAnchor");
  v67 = objc_msgSend(v66, "constraintEqualToConstant:", 103.66);

  *(_QWORD *)(v52 + 72) = v67;
  v68 = objc_msgSend(v79, "trailingAnchor");
  v69 = objc_msgSend(v1, "trailingAnchor");
  v70 = objc_msgSend(v68, "constraintEqualToAnchor:constant:", v69, -*(double *)&qword_1004AF090);

  *(_QWORD *)(v52 + 80) = v70;
  v82[0] = v52;
  specialized Array._endMutation()(v71);
  v72 = v82[0];
  sub_10002277C();
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v77, "activateConstraints:", isa, swift_bridgeObjectRelease(v72).n128_f64[0]);

  LODWORD(v74) = 1112014848;
  objc_msgSend(v2, "setContentHuggingPriority:forAxis:", 1, v74);
  LODWORD(v75) = 1148846080;
  objc_msgSend(v2, "setContentCompressionResistancePriority:forAxis:", 1, v75);
  LODWORD(v76) = 1148846080;
  objc_msgSend(v80, "setContentCompressionResistancePriority:forAxis:", 1, v76);

}

id sub_10009BAC4(double a1, double a2, double a3, double a4)
{
  char *v4;
  char *v5;
  objc_class *ObjectType;
  uint64_t v11;
  id v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  objc_super v19;

  v5 = v4;
  ObjectType = (objc_class *)swift_getObjectType(v4);
  v11 = OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_title;
  v12 = objc_allocWithZone((Class)UILabel);
  v13 = v4;
  *(_QWORD *)&v5[v11] = objc_msgSend(v12, "init");
  v14 = OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_mainUnits;
  v15 = type metadata accessor for InteractiveLabel();
  *(_QWORD *)&v13[v14] = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v15)), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v16 = OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_secondaryLabels;
  *(_QWORD *)&v13[v16] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for NewSecondaryLabelStack()), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  *(_QWORD *)&v13[OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_marginConstraints] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v13[OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_horizontalConstraints] = _swiftEmptyArrayStorage;

  v19.receiver = v13;
  v19.super_class = ObjectType;
  v17 = objc_msgSendSuper2(&v19, "initWithFrame:", a1, a2, a3, a4);
  sub_10009AFB8();
  sub_10009B1D0();

  return v17;
}

id sub_10009BC3C(void *a1)
{
  char *v1;
  char *v2;
  objc_class *ObjectType;
  uint64_t v5;
  id v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  objc_super v15;

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType(v1);
  v5 = OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_title;
  v6 = objc_allocWithZone((Class)UILabel);
  v7 = v2;
  *(_QWORD *)&v2[v5] = objc_msgSend(v6, "init");
  v8 = OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_mainUnits;
  v9 = type metadata accessor for InteractiveLabel();
  *(_QWORD *)&v7[v8] = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v9)), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v10 = OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_secondaryLabels;
  *(_QWORD *)&v7[v10] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for NewSecondaryLabelStack()), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  *(_QWORD *)&v7[OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_marginConstraints] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v7[OBJC_IVAR____TtC7Measure37MeasureTableViewCellCommonContentView_horizontalConstraints] = _swiftEmptyArrayStorage;

  v15.receiver = v7;
  v15.super_class = ObjectType;
  v11 = objc_msgSendSuper2(&v15, "initWithCoder:", a1);
  v12 = v11;
  if (v11)
  {
    v13 = v11;
    sub_10009AFB8();
    sub_10009B1D0();

  }
  return v12;
}

uint64_t type metadata accessor for MeasureTableViewCellCommonContentView()
{
  return objc_opt_self(_TtC7Measure37MeasureTableViewCellCommonContentView);
}

ValueMetadata *type metadata accessor for UnitState()
{
  return &type metadata for UnitState;
}

uint64_t sub_10009BE38()
{
  uint64_t result;

  result = Contexts.UIKit.init()();
  qword_1004AF310 = result;
  return result;
}

id sub_10009BE54@<X0>(_QWORD *a1@<X8>)
{
  void *v2;

  if (qword_10047A9A0 != -1)
    swift_once(&qword_10047A9A0, sub_10009BE38);
  v2 = (void *)qword_1004AF310;
  *a1 = qword_1004AF310;
  return v2;
}

unint64_t sub_10009BEA4(uint64_t a1)
{
  unint64_t result;

  result = sub_10009BEC8();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10009BEC8()
{
  unint64_t result;

  result = qword_1004808D0;
  if (!qword_1004808D0)
  {
    result = swift_getWitnessTable(&unk_1003B4954, &type metadata for UnitState);
    atomic_store(result, (unint64_t *)&qword_1004808D0);
  }
  return result;
}

id sub_10009BF0C()
{
  id v0;
  id v1;
  uint64_t v2;
  NSString v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;

  v0 = objc_msgSend((id)objc_opt_self(SharedDefaults), "currentMeasureUnits");
  v1 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v2 = *(_QWORD *)(Defaults.showOppositeUnits.unsafeMutableAddressor() + 8);
  swift_bridgeObjectRetain(v2);
  v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v2);
  v4 = objc_msgSend(v1, "BOOLForKey:", v3);

  v5 = 1;
  if (v0 == (id)1)
    v6 = 0;
  else
    v6 = (uint64_t)v0;
  if (v0)
    v5 = v6;
  if (v4)
    return (id)v5;
  else
    return v0;
}

double sub_10009BFD0()
{
  double result;

  if (qword_10047A780 != -1)
    swift_once(&qword_10047A780, sub_10000EF6C);
  result = *(double *)&qword_1004AF0B8;
  qword_1004AF320 = 0x4051000000000000;
  qword_1004AF328 = qword_1004AF0B8;
  return result;
}

__n128 sub_10009C024()
{
  __n128 result;

  __asm { FMOV            V0.2D, #30.0 }
  xmmword_1004AF330 = (__int128)result;
  return result;
}

id sub_10009C034()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(UIColor), "systemFillColor");
  qword_1004808D8 = (uint64_t)result;
  return result;
}

id sub_10009C06C()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithWhite:alpha:", 0.0, 0.2);
  qword_1004808E0 = (uint64_t)result;
  return result;
}

uint64_t sub_10009C0A8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  id v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;

  v5 = sub_10000EDC8(&qword_10047F480);
  __chkstk_darwin(v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UIPointerEffect(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (uint64_t *)((char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = objc_msgSend(objc_allocWithZone((Class)UIPreviewParameters), "init");
  objc_msgSend(a4, "bounds");
  v17 = CGRect.center.getter(v13, v14, v15, v16);
  v19 = v18;
  if (qword_10047A9B0 != -1)
    swift_once(&qword_10047A9B0, sub_10009C024);
  v20 = CGRect.init(center:size:)(v17, v19, *(double *)&xmmword_1004AF330, *((double *)&xmmword_1004AF330 + 1));
  v24 = objc_msgSend((id)objc_opt_self(UIBezierPath), "bezierPathWithOvalInRect:", v20, v21, v22, v23);
  objc_msgSend(v12, "setVisiblePath:", v24);

  sub_100018148(0, (unint64_t *)&qword_10047F488, UIPointerStyle_ptr);
  *v11 = objc_msgSend(objc_allocWithZone((Class)UITargetedPreview), "initWithView:parameters:", a4, v12);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for UIPointerEffect.lift(_:), v8);
  v25 = type metadata accessor for UIPointerShape(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v7, 1, 1, v25);
  v26 = UIPointerStyle.init(effect:shape:)(v11, v7);

  return v26;
}

void sub_10009C2D0(char a1)
{
  char *v1;
  uint64_t v3;
  void (**v4)();
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void (**v12)();
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  id v18;
  NSString v19;
  id v20;
  id v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;

  v3 = swift_allocObject(&unk_100443728, 24, 7);
  swift_unknownObjectUnownedInit(v3 + 16, v1);
  v4 = (void (**)())&v1[OBJC_IVAR____TtC7Measure25SpatialPlatterTitleButton_touchDownCallback];
  v5 = *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure25SpatialPlatterTitleButton_touchDownCallback];
  v6 = *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure25SpatialPlatterTitleButton_touchDownCallback + 8];
  *v4 = sub_10009CEC4;
  v4[1] = (void (*)())v3;
  sub_1000217BC(v5, v6);
  if ((a1 & 1) != 0)
  {
    if (qword_10047A9B8 != -1)
      swift_once(&qword_10047A9B8, sub_10009C034);
    v7 = (void *)qword_1004808D8;
    v8 = objc_msgSend((id)objc_opt_self(UITraitCollection), "traitCollectionWithUserInterfaceStyle:", 1);
    v9 = objc_msgSend(v7, "resolvedColorWithTraitCollection:", v8);

  }
  else
  {
    if (qword_10047A9B8 != -1)
      swift_once(&qword_10047A9B8, sub_10009C034);
    v9 = (id)qword_1004808D8;
  }
  v10 = swift_allocObject(&unk_100443728, 24, 7);
  swift_unknownObjectUnownedInit(v10 + 16, v1);
  v11 = swift_allocObject(&unk_100443750, 32, 7);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  v12 = (void (**)())&v1[OBJC_IVAR____TtC7Measure25SpatialPlatterTitleButton_touchUpCallback];
  v13 = *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure25SpatialPlatterTitleButton_touchUpCallback];
  v14 = *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure25SpatialPlatterTitleButton_touchUpCallback + 8];
  *v12 = sub_10009CEF8;
  v12[1] = (void (*)())v11;
  v15 = v9;
  sub_1000217BC(v13, v14);
  v16 = *(void **)&v1[OBJC_IVAR____TtC7Measure16RoundCloseButton_contentView];
  objc_msgSend(v16, "setUserInteractionEnabled:", 0);
  v17 = OBJC_IVAR____TtC7Measure16RoundCloseButton_closeImageView;
  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC7Measure16RoundCloseButton_closeImageView], "setContentMode:", 4);
  v18 = *(id *)&v1[v17];
  v19 = String._bridgeToObjectiveC()();
  v20 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v19);

  if (v20)
  {
    v21 = objc_msgSend(v20, "imageWithRenderingMode:", 2);

    objc_msgSend(v18, "setImage:", v21);
    v22 = *(void **)&v1[v17];
    v23 = (void *)objc_opt_self(UIImageSymbolConfiguration);
    v24 = v22;
    v25 = objc_msgSend(v23, "configurationWithPointSize:weight:", 7, 13.0);
    objc_msgSend(v24, "setPreferredSymbolConfiguration:", v25);

    v32 = objc_msgSend((id)objc_opt_self(UIColor), "secondaryLabelColor");
    v26 = *(void **)&v1[v17];
    if ((a1 & 1) != 0)
    {
      v27 = (void *)objc_opt_self(UITraitCollection);
      v28 = v26;
      v29 = objc_msgSend(v27, "traitCollectionWithUserInterfaceStyle:", 1);
      v30 = objc_msgSend(v32, "resolvedColorWithTraitCollection:", v29);

    }
    else
    {
      v31 = v26;
      v30 = v32;
    }
    objc_msgSend(v26, "setTintColor:", v30);

    objc_msgSend(*(id *)&v1[v17], "sizeToFit");
    objc_msgSend(v16, "addSubview:", *(_QWORD *)&v1[v17]);
    objc_msgSend(v16, "setBackgroundColor:", v15);
    objc_msgSend(v1, "addSubview:", v16);
    objc_msgSend(v1, "setClipsToBounds:", 1);

  }
  else
  {
    __break(1u);
  }
}

void sub_10009C6BC()
{
  char *v0;
  char *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  Class isa;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  Class v39;

  v1 = v0;
  v2 = OBJC_IVAR____TtC7Measure16RoundCloseButton_closeImageView;
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC7Measure16RoundCloseButton_closeImageView], "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v3 = *(void **)&v0[OBJC_IVAR____TtC7Measure16RoundCloseButton_contentView];
  objc_msgSend(v3, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v4 = (void *)objc_opt_self(NSLayoutConstraint);
  v5 = sub_10000EDC8((uint64_t *)&unk_1004866D0);
  v6 = swift_allocObject(v5, 48, 7);
  *(_OWORD *)(v6 + 16) = xmmword_1003B1460;
  v7 = objc_msgSend(*(id *)&v1[v2], "centerXAnchor");
  v8 = objc_msgSend(v3, "centerXAnchor");
  v9 = objc_msgSend(v7, "constraintEqualToAnchor:", v8);

  *(_QWORD *)(v6 + 32) = v9;
  v10 = objc_msgSend(*(id *)&v1[v2], "centerYAnchor");
  v11 = objc_msgSend(v3, "centerYAnchor");
  v12 = objc_msgSend(v10, "constraintEqualToAnchor:", v11);

  *(_QWORD *)(v6 + 40) = v12;
  specialized Array._endMutation()(v13);
  sub_100018148(0, (unint64_t *)&qword_100486300, NSLayoutConstraint_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v4, "activateConstraints:", isa, swift_bridgeObjectRelease(v6).n128_f64[0]);

  v15 = swift_allocObject(v5, 96, 7);
  *(_OWORD *)(v15 + 16) = xmmword_1003B2E80;
  v16 = objc_msgSend(v3, "centerXAnchor");
  v17 = objc_msgSend(v1, "centerXAnchor");
  v18 = objc_msgSend(v16, "constraintEqualToAnchor:", v17);

  *(_QWORD *)(v15 + 32) = v18;
  v19 = objc_msgSend(v3, "centerYAnchor");
  v20 = objc_msgSend(v1, "centerYAnchor");
  v21 = objc_msgSend(v19, "constraintEqualToAnchor:", v20);

  *(_QWORD *)(v15 + 40) = v21;
  v22 = objc_msgSend(v3, "leadingAnchor");
  v23 = objc_msgSend(v1, "leadingAnchor");
  v24 = objc_msgSend(v22, "constraintGreaterThanOrEqualToAnchor:", v23);

  *(_QWORD *)(v15 + 48) = v24;
  v25 = objc_msgSend(v3, "trailingAnchor");
  v26 = objc_msgSend(v1, "trailingAnchor");
  v27 = objc_msgSend(v25, "constraintLessThanOrEqualToAnchor:", v26);

  *(_QWORD *)(v15 + 56) = v27;
  v28 = objc_msgSend(v3, "topAnchor");
  v29 = objc_msgSend(v1, "topAnchor");
  v30 = objc_msgSend(v28, "constraintGreaterThanOrEqualToAnchor:", v29);

  *(_QWORD *)(v15 + 64) = v30;
  v31 = objc_msgSend(v3, "bottomAnchor");
  v32 = objc_msgSend(v1, "bottomAnchor");
  v33 = objc_msgSend(v31, "constraintLessThanOrEqualToAnchor:", v32);

  *(_QWORD *)(v15 + 72) = v33;
  v34 = objc_msgSend(v3, "widthAnchor");
  if (qword_10047A9B0 != -1)
    swift_once(&qword_10047A9B0, sub_10009C024);
  v35 = objc_msgSend(v34, "constraintEqualToConstant:", *(double *)&xmmword_1004AF330);

  *(_QWORD *)(v15 + 80) = v35;
  v36 = objc_msgSend(v3, "heightAnchor");
  v37 = objc_retainAutoreleasedReturnValue(objc_msgSend(v36, "constraintEqualToConstant:", *((double *)&xmmword_1004AF330
                                                                                           + 1)));

  *(_QWORD *)(v15 + 88) = v37;
  specialized Array._endMutation()(v38);
  v39 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v4, "activateConstraints:", v39, swift_bridgeObjectRelease(v15).n128_f64[0]);

}

void sub_10009CCB0(uint64_t a1)
{
  char *Strong;
  id v2;

  Strong = (char *)swift_unknownObjectUnownedLoadStrong(a1 + 16);
  v2 = *(id *)&Strong[OBJC_IVAR____TtC7Measure16RoundCloseButton_contentView];

  if (qword_10047A9C0 != -1)
    swift_once(&qword_10047A9C0, sub_10009C06C);
  objc_msgSend(v2, "setBackgroundColor:", qword_1004808E0);

}

void sub_10009CD38(uint64_t a1, uint64_t a2)
{
  char *Strong;
  id v4;

  Strong = (char *)swift_unknownObjectUnownedLoadStrong(a1 + 16);
  v4 = *(id *)&Strong[OBJC_IVAR____TtC7Measure16RoundCloseButton_contentView];

  objc_msgSend(v4, "setBackgroundColor:", a2);
}

void sub_10009CE1C()
{
  uint64_t v0;

}

uint64_t type metadata accessor for RoundCloseButton()
{
  return objc_opt_self(_TtC7Measure16RoundCloseButton);
}

uint64_t sub_10009CEA0()
{
  uint64_t v0;

  swift_unknownObjectUnownedDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_10009CEC4()
{
  uint64_t v0;

  sub_10009CCB0(v0);
}

uint64_t sub_10009CECC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

void sub_10009CEF8()
{
  uint64_t v0;

  sub_10009CD38(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_10009CFE0()
{
  char *v0;
  id v1;
  NSString v2;
  uint64_t v3;
  void *v4;
  id v5;

  v1 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v2 = String._bridgeToObjectiveC()();

  v3 = OBJC_IVAR____TtC7Measure16ObjectLabelStrip_contentView;
  if (*(_QWORD *)&v0[OBJC_IVAR____TtC7Measure16ObjectLabelStrip_contentView])
  {
    objc_msgSend(v0, "addSubview:");
    v4 = *(void **)&v0[v3];
    if (v4)
    {
      v5 = v4;
      objc_msgSend(v0, "bounds");
      objc_msgSend(v5, "setFrame:");

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

id sub_10009D1A4(void *a1)
{
  char *v1;
  objc_class *ObjectType;
  double v4;
  id v5;
  id v6;
  id v7;
  objc_super v9;

  ObjectType = (objc_class *)swift_getObjectType(v1);
  swift_unknownObjectWeakInit(&v1[OBJC_IVAR____TtC7Measure16ObjectLabelStrip_lengthLabels], 0);
  swift_unknownObjectWeakInit(&v1[OBJC_IVAR____TtC7Measure16ObjectLabelStrip_widthLabels], 0);
  *(_QWORD *)&v4 = swift_unknownObjectWeakInit(&v1[OBJC_IVAR____TtC7Measure16ObjectLabelStrip_heightLabels], 0).n128_u64[0];
  *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure16ObjectLabelStrip_contentView] = 0;
  v9.receiver = v1;
  v9.super_class = ObjectType;
  v5 = objc_msgSendSuper2(&v9, "initWithCoder:", a1, v4);
  v6 = v5;
  if (v5)
  {
    v7 = v5;
    sub_10009CFE0();

  }
  return v6;
}

uint64_t type metadata accessor for ObjectLabelStrip()
{
  return objc_opt_self(_TtC7Measure16ObjectLabelStrip);
}

void sub_10009D314(uint64_t a1)
{
  char *v1;
  double v2;
  CGFloat m43;
  CGFloat m44;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  void *v18;
  CGFloat v19;
  void *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  CATransform3D aBlock;
  CGAffineTransform m;

  switch(a1)
  {
    case 2:
      v2 = 3.14159265;
      break;
    case 4:
      v2 = -*(double *)CGFloat.piDiv2.unsafeMutableAddressor(4);
      break;
    case 3:
      v2 = *(double *)CGFloat.piDiv2.unsafeMutableAddressor(3);
      break;
    default:
      v2 = 0.0;
      break;
  }
  CGAffineTransformMakeRotation((CGAffineTransform *)&aBlock, v2);
  *(_OWORD *)&m.a = *(_OWORD *)&aBlock.m11;
  *(_OWORD *)&m.c = *(_OWORD *)&aBlock.m13;
  *(_OWORD *)&m.tx = *(_OWORD *)&aBlock.m21;
  CATransform3DMakeAffineTransform(&aBlock, &m);
  v34 = *(_OWORD *)&aBlock.m13;
  v35 = *(_OWORD *)&aBlock.m11;
  v32 = *(_OWORD *)&aBlock.m23;
  v33 = *(_OWORD *)&aBlock.m21;
  v30 = *(_OWORD *)&aBlock.m33;
  v31 = *(_OWORD *)&aBlock.m31;
  v29 = *(_OWORD *)&aBlock.m41;
  m43 = aBlock.m43;
  m44 = aBlock.m44;
  sub_10009D59C();
  v5 = &v1[qword_100480968];
  *(_QWORD *)v5 = v6;
  *((_QWORD *)v5 + 1) = v7;
  v8 = sub_10009D8AC();
  CATransform3DMakeTranslation(&aBlock, v8, v9, 0.0);
  v27 = *(_OWORD *)&aBlock.m13;
  v28 = *(_OWORD *)&aBlock.m11;
  v25 = *(_OWORD *)&aBlock.m23;
  v26 = *(_OWORD *)&aBlock.m21;
  v23 = *(_OWORD *)&aBlock.m33;
  v24 = *(_OWORD *)&aBlock.m31;
  v22 = *(_OWORD *)&aBlock.m41;
  v10 = aBlock.m43;
  v11 = aBlock.m44;
  v12 = sub_10009DE34() + 40.0;
  v14 = v13 + 23.5;
  v15 = sub_10009E2C0() + 40.0;
  v17 = v16 + 23.5;
  v18 = (void *)objc_opt_self(UIView);
  v19 = COERCE_DOUBLE(swift_allocObject(&unk_1004437A0, 312, 7));
  *(_QWORD *)(*(_QWORD *)&v19 + 16) = v1;
  *(_OWORD *)(*(_QWORD *)&v19 + 24) = v28;
  *(_OWORD *)(*(_QWORD *)&v19 + 40) = v27;
  *(_OWORD *)(*(_QWORD *)&v19 + 56) = v26;
  *(_OWORD *)(*(_QWORD *)&v19 + 72) = v25;
  *(_OWORD *)(*(_QWORD *)&v19 + 88) = v24;
  *(_OWORD *)(*(_QWORD *)&v19 + 104) = v23;
  *(_OWORD *)(*(_QWORD *)&v19 + 120) = v22;
  *(CGFloat *)(*(_QWORD *)&v19 + 136) = v10;
  *(CGFloat *)(*(_QWORD *)&v19 + 144) = v11;
  *(_OWORD *)(*(_QWORD *)&v19 + 152) = v35;
  *(_OWORD *)(*(_QWORD *)&v19 + 168) = v34;
  *(_OWORD *)(*(_QWORD *)&v19 + 184) = v33;
  *(_OWORD *)(*(_QWORD *)&v19 + 200) = v32;
  *(_OWORD *)(*(_QWORD *)&v19 + 216) = v31;
  *(_OWORD *)(*(_QWORD *)&v19 + 232) = v30;
  *(_OWORD *)(*(_QWORD *)&v19 + 248) = v29;
  *(CGFloat *)(*(_QWORD *)&v19 + 264) = m43;
  *(CGFloat *)(*(_QWORD *)&v19 + 272) = m44;
  *(double *)(*(_QWORD *)&v19 + 280) = v12;
  *(double *)(*(_QWORD *)&v19 + 288) = v14;
  *(double *)(*(_QWORD *)&v19 + 296) = v15;
  *(double *)(*(_QWORD *)&v19 + 304) = v17;
  *(_QWORD *)&aBlock.m21 = sub_10009EB38;
  aBlock.m22 = v19;
  *(_QWORD *)&aBlock.m11 = _NSConcreteStackBlock;
  *(_QWORD *)&aBlock.m12 = 1107296256;
  *(_QWORD *)&aBlock.m13 = sub_10003ECA0;
  *(_QWORD *)&aBlock.m14 = &unk_1004437B8;
  v20 = _Block_copy(&aBlock);
  v21 = v1;
  swift_release();
  objc_msgSend(v18, "animateWithDuration:delay:options:animations:completion:", 0, v20, 0, 0.25, 0.25);
  _Block_release(v20);
}

void sub_10009D59C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_retain();
  StateValue.wrappedValue.getter(&v2, v1);
  swift_release();
  switch(v2)
  {
    case 2:
      if (qword_10047ADD8 != -1)
        swift_once(&qword_10047ADD8, sub_100195820);
      if (qword_10047ADD0 == -1)
        return;
      goto LABEL_23;
    case 4:
      CGRectGetWidth(*(CGRect *)(v0 + qword_10047F690));
      if (qword_10047ADD0 != -1)
        swift_once(&qword_10047ADD0, sub_1001956EC);
      if (qword_10047ADC8 != -1)
        goto LABEL_20;
      return;
    case 3:
      CGRectGetWidth(*(CGRect *)(v0 + qword_10047F690));
      if (qword_10047ADD0 != -1)
        swift_once(&qword_10047ADD0, sub_1001956EC);
      if (qword_10047ADC8 == -1)
        return;
LABEL_20:
      swift_once(&qword_10047ADC8, sub_100195650);
      return;
  }
  CGRectGetWidth(*(CGRect *)(v0 + qword_10047F690));
  if (qword_10047ADC8 != -1)
    swift_once(&qword_10047ADC8, sub_100195650);
  if (qword_10047ADD0 != -1)
LABEL_23:
    swift_once(&qword_10047ADD0, sub_1001956EC);
}

double sub_10009D8AC()
{
  uint64_t v0;
  void *v1;
  id v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double Width;
  double v8;
  uint64_t v10;
  CGRect v11;
  CGRect v12;
  CGRect v13;
  CGRect v14;

  v1 = *(void **)(v0 + qword_10047F648);
  if (!v1)
    return 0.0;
  swift_retain();
  v2 = v1;
  StateValue.wrappedValue.getter(&v10, v2);
  swift_release();
  switch(v10)
  {
    case 4:
      v4 = *(double *)(v0 + qword_100480968);
      if (qword_10047ADD0 != -1)
        swift_once(&qword_10047ADD0, sub_1001956EC);
      v5 = v4 + *(double *)&qword_1004AF8B8;
      if (qword_10047ADD8 != -1)
        swift_once(&qword_10047ADD8, sub_100195820);
      v3 = v5 + 30.0;

      break;
    case 3:
      v6 = *(double *)(v0 + qword_100480968);
      if (qword_10047ADD0 != -1)
        swift_once(&qword_10047ADD0, sub_1001956EC);
      v3 = v6 + *(double *)&qword_1004AF8B8 + 30.0;
      objc_msgSend(v2, "frame");
      CGRectGetWidth(v12);

      break;
    case 2:
      if (qword_10047ADD8 != -1)
        swift_once(&qword_10047ADD8, sub_100195820);
      v3 = *(double *)&qword_1004AF8C0;
      objc_msgSend(v2, "frame");
      CGRectGetWidth(v11);

      break;
    default:
      Width = CGRectGetWidth(*(CGRect *)(v0 + qword_10047F690));
      if (qword_10047ADC8 != -1)
        swift_once(&qword_10047ADC8, sub_100195650);
      v8 = Width - *(double *)&qword_1004AF8B0;
      objc_msgSend(v2, "frame");
      v3 = v8 + CGRectGetWidth(v13) * -0.5;
      objc_msgSend(v2, "frame");
      CGRectGetWidth(v14);

      break;
  }
  return v3;
}

id sub_10009DB70(uint64_t a1, __int128 *a2, uint64_t *a3, double a4, double a5, double a6, double a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  double v19;
  double v20;
  id v21;
  uint64_t v22;
  void *v23;
  id v24;
  void *v25;
  uint64_t v26;
  id result;
  id v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;

  v8 = *a3;
  v9 = a3[1];
  v10 = a3[4];
  v48 = a3[3];
  v49 = a3[2];
  v11 = a3[5];
  v46 = a3[7];
  v47 = a3[6];
  v44 = a3[9];
  v45 = a3[8];
  v42 = a3[11];
  v43 = a3[10];
  v12 = a3[14];
  v40 = a3[13];
  v41 = a3[12];
  v13 = a3[15];
  v14 = *(void **)(a1 + qword_10047F648);
  if (v14)
  {
    v16 = *((_QWORD *)a2 + 14);
    v15 = *((_QWORD *)a2 + 15);
    v34 = a2[5];
    v35 = a2[6];
    v32 = a2[3];
    v33 = a2[4];
    v30 = a2[1];
    v31 = a2[2];
    v29 = *a2;
    v17 = objc_msgSend(v14, "layer");
    v50 = v29;
    v51 = v30;
    v52 = v31;
    v53 = v32;
    v54 = v33;
    v55 = v34;
    v56 = v35;
    v57 = v16;
    v58 = v15;
    objc_msgSend(v17, "setTransform:", &v50);

  }
  v18 = *(void **)(a1 + qword_10047F628);
  if (v18)
  {
    v19 = *(double *)(a1 + qword_100480968);
    v20 = *(double *)(a1 + qword_100480968 + 8);
    v21 = v18;
    objc_msgSend(v21, "frame");
    objc_msgSend(v21, "setFrame:", v19, v20);

  }
  v22 = qword_10047F630;
  v23 = *(void **)(a1 + qword_10047F630);
  if (v23)
  {
    v24 = objc_msgSend(v23, "layer");
    *(_QWORD *)&v50 = v8;
    *((_QWORD *)&v50 + 1) = v9;
    *(_QWORD *)&v51 = v49;
    *((_QWORD *)&v51 + 1) = v48;
    *(_QWORD *)&v52 = v10;
    *((_QWORD *)&v52 + 1) = v11;
    *(_QWORD *)&v53 = v47;
    *((_QWORD *)&v53 + 1) = v46;
    *(_QWORD *)&v54 = v45;
    *((_QWORD *)&v54 + 1) = v44;
    *(_QWORD *)&v55 = v43;
    *((_QWORD *)&v55 + 1) = v42;
    *(_QWORD *)&v56 = v41;
    *((_QWORD *)&v56 + 1) = v40;
    v57 = v12;
    v58 = v13;
    objc_msgSend(v24, "setTransform:", &v50);

    v25 = *(void **)(a1 + v22);
    if (v25)
      objc_msgSend(v25, "setCenter:", a4, a5);
  }
  v26 = qword_10047F638;
  result = *(id *)(a1 + qword_10047F638);
  if (result)
  {
    v28 = objc_msgSend(result, "layer");
    *(_QWORD *)&v50 = v8;
    *((_QWORD *)&v50 + 1) = v9;
    *(_QWORD *)&v51 = v49;
    *((_QWORD *)&v51 + 1) = v48;
    *(_QWORD *)&v52 = v10;
    *((_QWORD *)&v52 + 1) = v11;
    *(_QWORD *)&v53 = v47;
    *((_QWORD *)&v53 + 1) = v46;
    *(_QWORD *)&v54 = v45;
    *((_QWORD *)&v54 + 1) = v44;
    *(_QWORD *)&v55 = v43;
    *((_QWORD *)&v55 + 1) = v42;
    *(_QWORD *)&v56 = v41;
    *((_QWORD *)&v56 + 1) = v40;
    v57 = v12;
    v58 = v13;
    objc_msgSend(v28, "setTransform:", &v50);

    result = *(id *)(a1 + v26);
    if (result)
      return objc_msgSend(result, "setCenter:", a6, a7);
  }
  return result;
}

double sub_10009DE34()
{
  void *v0;
  void *v1;
  uint64_t v2;
  double v3;
  id v4;
  id v5;
  double v6;
  id v7;
  id v8;
  double v9;
  id v10;
  id v11;
  id v12;
  id v13;
  double v14;
  double v15;
  uint64_t v17;
  CGRect v18;
  CGRect v19;
  CGRect v20;
  CGRect v21;
  CGRect v22;

  v1 = v0;
  swift_retain();
  StateValue.wrappedValue.getter(&v17, v2);
  *(_QWORD *)&v3 = swift_release().n128_u64[0];
  switch(v17)
  {
    case 4:
      if (qword_10047ADD8 != -1)
        swift_once(&qword_10047ADD8, sub_100195820);
      v6 = *(double *)&qword_1004AF8C0 + 23.5;
      v7 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
      v8 = objc_msgSend(v7, "userInterfaceLayoutDirection");

      if (v8 == (id)1)
        return v6 + -40.0;
LABEL_15:
      objc_msgSend(v1, "bounds");
      CGRectGetHeight(v19);
      return v6 + -40.0;
    case 3:
      objc_msgSend(v0, "bounds", v3);
      v9 = CGRectGetWidth(v18) + -23.5;
      if (qword_10047ADD8 != -1)
        swift_once(&qword_10047ADD8, sub_100195820);
      v6 = v9 - *(double *)&qword_1004AF8C0;
      v10 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
      v11 = objc_msgSend(v10, "userInterfaceLayoutDirection");

      if (v11 != (id)1)
      {
        if (qword_10047ADE0 == -1)
          return v6 + -40.0;
        goto LABEL_33;
      }
      goto LABEL_15;
    case 2:
      v4 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
      v5 = objc_msgSend(v4, "userInterfaceLayoutDirection");

      if (v5 == (id)1)
      {
        if (qword_10047ADD8 != -1)
          swift_once(&qword_10047ADD8, sub_100195820);
        v6 = *(double *)&qword_1004AF8C0 + 40.0;
      }
      else
      {
        objc_msgSend(v1, "bounds");
        v15 = CGRectGetWidth(v21) + -40.0;
        if (qword_10047ADD8 != -1)
          swift_once(&qword_10047ADD8, sub_100195820);
        v6 = v15 - *(double *)&qword_1004AF8C0;
      }
      objc_msgSend(v1, "bounds");
      CGRectGetHeight(v22);
      if (qword_10047ADE0 == -1)
        return v6 + -40.0;
LABEL_33:
      swift_once(&qword_10047ADE0, sub_100195900);
      return v6 + -40.0;
  }
  v12 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v13 = objc_msgSend(v12, "userInterfaceLayoutDirection");

  if (v13 == (id)1)
  {
    objc_msgSend(v1, "bounds");
    v14 = CGRectGetWidth(v20) + -40.0;
    if (qword_10047ADD8 != -1)
      swift_once(&qword_10047ADD8, sub_100195820);
    v6 = v14 - *(double *)&qword_1004AF8C0;
  }
  else
  {
    if (qword_10047ADD8 != -1)
      swift_once(&qword_10047ADD8, sub_100195820);
    v6 = *(double *)&qword_1004AF8C0 + 40.0;
  }
  if (qword_10047ADE0 != -1)
    goto LABEL_33;
  return v6 + -40.0;
}

double sub_10009E2C0()
{
  void *v0;
  void *v1;
  uint64_t v2;
  double v3;
  id v4;
  id v5;
  double v6;
  double v7;
  id v8;
  id v9;
  double v10;
  id v11;
  id v12;
  id v13;
  id v14;
  double v15;
  uint64_t v17;
  CGRect v18;
  CGRect v19;
  CGRect v20;
  CGRect v21;
  CGRect v22;
  CGRect v23;

  v1 = v0;
  swift_retain();
  StateValue.wrappedValue.getter(&v17, v2);
  *(_QWORD *)&v3 = swift_release().n128_u64[0];
  switch(v17)
  {
    case 4:
      if (qword_10047ADD8 != -1)
        swift_once(&qword_10047ADD8, sub_100195820);
      v7 = *(double *)&qword_1004AF8C0 + 23.5;
      v8 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
      v9 = objc_msgSend(v8, "userInterfaceLayoutDirection");

      if (v9 == (id)1)
      {
        objc_msgSend(v1, "bounds");
        CGRectGetHeight(v19);
        if (qword_10047ADE0 == -1)
          return v7 + -40.0;
        goto LABEL_33;
      }
      goto LABEL_16;
    case 3:
      objc_msgSend(v0, "bounds", v3);
      v10 = CGRectGetWidth(v20) + -23.5;
      if (qword_10047ADD8 != -1)
        swift_once(&qword_10047ADD8, sub_100195820);
      v7 = v10 - *(double *)&qword_1004AF8C0;
      v11 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
      v12 = objc_msgSend(v11, "userInterfaceLayoutDirection");

      if (v12 != (id)1)
      {
        objc_msgSend(v1, "bounds");
        CGRectGetHeight(v22);
        return v7 + -40.0;
      }
LABEL_16:
      if (qword_10047ADE0 == -1)
        return v7 + -40.0;
      goto LABEL_33;
    case 2:
      v4 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
      v5 = objc_msgSend(v4, "userInterfaceLayoutDirection");

      if (v5 == (id)1)
      {
        objc_msgSend(v1, "bounds");
        v6 = CGRectGetWidth(v18) + -40.0;
        if (qword_10047ADD8 != -1)
          swift_once(&qword_10047ADD8, sub_100195820);
        v7 = v6 - *(double *)&qword_1004AF8C0;
      }
      else
      {
        if (qword_10047ADD8 != -1)
          swift_once(&qword_10047ADD8, sub_100195820);
        v7 = *(double *)&qword_1004AF8C0 + 40.0;
      }
      objc_msgSend(v1, "bounds");
      CGRectGetHeight(v21);
      if (qword_10047ADE0 == -1)
        return v7 + -40.0;
LABEL_33:
      swift_once(&qword_10047ADE0, sub_100195900);
      return v7 + -40.0;
  }
  v13 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v14 = objc_msgSend(v13, "userInterfaceLayoutDirection");

  if (v14 == (id)1)
  {
    if (qword_10047ADD8 != -1)
      swift_once(&qword_10047ADD8, sub_100195820);
    v7 = *(double *)&qword_1004AF8C0 + 40.0;
  }
  else
  {
    objc_msgSend(v1, "bounds");
    v15 = CGRectGetWidth(v23) + -40.0;
    if (qword_10047ADD8 != -1)
      swift_once(&qword_10047ADD8, sub_100195820);
    v7 = v15 - *(double *)&qword_1004AF8C0;
  }
  if (qword_10047ADE0 != -1)
    goto LABEL_33;
  return v7 + -40.0;
}

id sub_10009E774()
{
  char *v0;
  CGFloat v1;
  CGFloat v2;
  CGFloat v3;
  CGFloat v4;
  double Width;
  CGRect v7;
  CGRect v8;

  v1 = *(double *)&v0[qword_10047F690];
  v2 = *(double *)&v0[qword_10047F690 + 8];
  v3 = *(double *)&v0[qword_10047F690 + 16];
  v4 = *(double *)&v0[qword_10047F690 + 24];
  v7.origin.x = v1;
  v7.origin.y = v2;
  v7.size.width = v3;
  v7.size.height = v4;
  Width = CGRectGetWidth(v7);
  v8.origin.x = v1;
  v8.origin.y = v2;
  v8.size.width = v3;
  v8.size.height = v4;
  return objc_msgSend(v0, "setFrame:", 0.0, 0.0, Width, CGRectGetHeight(v8));
}

void sub_10009E7FC()
{
  uint64_t v0;
  id v1;
  void *v2;

  v1 = objc_msgSend(objc_allocWithZone((Class)CUShutterButton), "init");
  v2 = *(void **)(v0 + qword_10047F648);
  *(_QWORD *)(v0 + qword_10047F648) = v1;

}

void sub_10009E838()
{
  uint64_t v0;
  double v1;
  double v2;
  id v3;
  void *v4;

  v1 = sub_10009E2C0();
  v3 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DeleteButton()), "initWithFrame:", v1, v2, 80.0, 47.0);
  v4 = *(void **)(v0 + qword_10047F638);
  *(_QWORD *)(v0 + qword_10047F638) = v3;

}

void sub_10009E8A4()
{
  uint64_t v0;
  double v1;
  double v2;
  double v3;
  id v4;
  void *v5;
  uint64_t v6;

  v1 = sub_10009DE34();
  v3 = v2;
  v4 = objc_allocWithZone((Class)type metadata accessor for UndoButton());
  sub_1001C92AC(0, v1, v3, 80.0, 47.0);
  v5 = *(void **)(v0 + qword_10047F630);
  *(_QWORD *)(v0 + qword_10047F630) = v6;

}

void sub_10009E91C()
{
  uint64_t v0;
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  id v6;
  char *v7;
  void *v8;

  sub_10009D59C();
  v2 = v1;
  v4 = v3;
  if (qword_10047ADD0 != -1)
    swift_once(&qword_10047ADD0, sub_1001956EC);
  v5 = *(double *)&qword_1004AF8B8;
  v6 = objc_allocWithZone((Class)type metadata accessor for EditButton());
  v7 = sub_10007BE0C(0, v2, v4, v5, v5);
  v8 = *(void **)(v0 + qword_10047F628);
  *(_QWORD *)(v0 + qword_10047F628) = v7;

}

id sub_10009E9C0(char *a1, double a2, double a3, double a4, double a5)
{
  objc_class *ObjectType;
  char *v11;
  objc_super v13;

  ObjectType = (objc_class *)swift_getObjectType(a1);
  v11 = &a1[qword_100480968];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  v13.receiver = a1;
  v13.super_class = ObjectType;
  return objc_msgSendSuper2(&v13, "initWithFrame:", a2, a3, a4, a5);
}

id sub_10009EA3C(char *a1, uint64_t a2, uint64_t a3)
{
  objc_class *ObjectType;
  char *v6;
  objc_super v8;

  ObjectType = (objc_class *)swift_getObjectType(a1);
  v6 = &a1[qword_100480968];
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  v8.receiver = a1;
  v8.super_class = ObjectType;
  return objc_msgSendSuper2(&v8, "initWithCoder:", a3);
}

uint64_t type metadata accessor for EditViewRegular(uint64_t a1)
{
  uint64_t result;

  result = qword_100480998;
  if (!qword_100480998)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for EditViewRegular);
  return result;
}

uint64_t sub_10009EACC(uint64_t a1)
{
  void *v2;

  v2 = &unk_1003B49F8;
  return swift_initClassMetadata2(a1, 256, 1, &v2, a1 + 872);
}

uint64_t sub_10009EB0C()
{
  return type metadata accessor for EditViewRegular(0);
}

uint64_t sub_10009EB14()
{
  uint64_t v0;

  return swift_deallocObject(v0, 312, 7);
}

id sub_10009EB38()
{
  uint64_t v0;

  return sub_10009DB70(*(_QWORD *)(v0 + 16), (__int128 *)(v0 + 24), (uint64_t *)(v0 + 152), *(double *)(v0 + 280), *(double *)(v0 + 288), *(double *)(v0 + 296), *(double *)(v0 + 304));
}

uint64_t sub_10009EB50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10009EB60(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_10009EB6C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  _QWORD v6[6];

  sub_10009F0D0();
  v1 = objc_opt_self(UIView);
  v2 = swift_allocObject(&unk_100443A58, 24, 7);
  *(_QWORD *)(v2 + 16) = v0;
  v3 = swift_allocObject(&unk_100443A80, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_1000A3034;
  *(_QWORD *)(v3 + 24) = v2;
  v6[4] = sub_100030C24;
  v6[5] = v3;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 1107296256;
  v6[2] = sub_1000DDB80;
  v6[3] = &unk_100443A98;
  v4 = _Block_copy(v6);
  v5 = v0;
  swift_retain();
  objc_msgSend((id)v1, "performWithoutAnimation:", v4, swift_release().n128_f64[0]);
  _Block_release(v4);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation(v3, "", 104, 174, 40, 1);
  swift_release();
  if ((v1 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    sub_1000DCD5C();
    swift_release();
  }
}

void sub_10009ECAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t Strong;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  _BYTE v12[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v12, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2, v3);
  if (Strong)
  {
    v6 = (void *)Strong;
    if (*(_QWORD *)(Strong + qword_100480D60)
      && (v7 = Strong + qword_100480D88, (v8 = swift_unknownObjectWeakLoadStrong(Strong + qword_100480D88, v5)) != 0))
    {
      v9 = v8;
      v10 = *(_QWORD *)(v7 + 8);
      ObjectType = swift_getObjectType(v8);
      (*(void (**)(uint64_t, uint64_t))(v10 + 24))(ObjectType, v10);

      swift_unknownObjectRelease(v9);
    }
    else
    {

    }
  }
}

void sub_10009ED50()
{
  objc_class *v0;
  id v1;

  v1 = objc_allocWithZone(v0);
  sub_10009ED6C();
}

void sub_10009ED6C()
{
  _BYTE *v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, __n128);
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, __n128);
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, __n128);
  __n128 v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;

  v1 = v0;
  v2 = qword_100480D50;
  KeyPath = swift_getKeyPath(&unk_1003B4B28);
  v4 = sub_10000EDC8(&qword_1004810C0);
  if (qword_10047AD88 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v5 = qword_1004AF890;
  v6 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v4 + 272);
  v7 = swift_retain();
  *(_QWORD *)&v1[v2] = v6(KeyPath, v5, v7);
  v8 = qword_100480D58;
  v9 = swift_getKeyPath(&unk_1003B4B50);
  v10 = sub_10000EDC8(&qword_1004810C8);
  v11 = qword_1004AF890;
  v12 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v10 + 272);
  v13 = swift_retain();
  *(_QWORD *)&v1[v8] = v12(v9, v11, v13);
  *(_QWORD *)&v1[qword_100480D60] = 0;
  v14 = qword_100480D68;
  *(_QWORD *)&v1[v14] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PillToPlatterTransitionView()), "init");
  swift_unknownObjectWeakInit(&v1[qword_100480D70], 0);
  *(_QWORD *)&v1[qword_100480D78] = 0;
  v15 = qword_100480D80;
  v16 = sub_10000EDC8((uint64_t *)&unk_1004810D0);
  v17 = swift_getKeyPath(&unk_1003B4B78);
  v18 = qword_1004AF890;
  v19 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v16 + 272);
  v20 = swift_retain();
  *(_QWORD *)&v1[v15] = v19(v17, v18, v20);
  v21 = &v1[qword_100480D88];
  *((_QWORD *)v21 + 1) = 0;
  swift_unknownObjectWeakInit(v21, 0);
  v1[qword_100480D90] = 0;
  *(_QWORD *)&v1[qword_100480D98] = 0;
  v22 = qword_100480DA0;
  *(_QWORD *)&v1[v22] = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
  v23 = qword_100480DA8;
  *(_QWORD *)&v1[v23] = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  v24 = qword_100480DB0;
  *(_QWORD *)&v1[v24] = objc_msgSend(objc_allocWithZone((Class)UIImageView), "init");
  v25 = qword_100480DB8;
  *(_QWORD *)&v1[v25] = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
  v26 = qword_100480DC0;
  *(_QWORD *)&v1[v26] = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
  v27 = qword_100480DC8;
  *(_QWORD *)&v1[v27] = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
  *(_QWORD *)&v1[qword_100480DD0] = 0;
  *(_QWORD *)&v1[qword_100480DD8] = 0;
  v28 = qword_100480DE0;
  *(CFTimeInterval *)&v1[v28] = CACurrentMediaTime();
  v29 = &v1[qword_100480DE8];
  *(_QWORD *)v29 = 0;
  *((_QWORD *)v29 + 1) = 0;
  v29[16] = 1;
  v30 = &v1[qword_100480DF0];
  *(_QWORD *)v30 = 0;
  *((_QWORD *)v30 + 1) = 0;
  v30[16] = 1;
  v31 = &v1[qword_100480DF8];
  *(_QWORD *)v31 = 0;
  v31[8] = 1;
  v1[qword_100480E00] = 0;
  *(_QWORD *)&v1[qword_100480E08] = 0;
  *(_QWORD *)&v1[qword_100480E28] = 0x3F91111111111111;
  v32 = &v1[qword_100480E30];
  *(_OWORD *)v32 = 0u;
  *((_OWORD *)v32 + 1) = 0u;
  v32[32] = 1;
  *(_QWORD *)&v1[qword_100480E38] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000002DLL, 0x80000001003D7D70, "Measure/LabelDetailsPlatterWrapper.swift", 40, 2, 168, 0);
  __break(1u);
}

id sub_10009F0D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void (*v25)(id, _QWORD, uint64_t, uint64_t);
  void (*v26)(__n128);
  __n128 v27;
  uint64_t v28;
  unint64_t v29;
  id v30;
  _QWORD *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  _QWORD *v50;
  uint64_t v51;
  id v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  double *v61;
  double v62;
  double v63;
  double v64;
  double v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t Strong;
  uint64_t v75;
  id result;
  double v77;
  double v78;
  double v79;
  double v80;
  uint64_t ObjectType;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  id v90;
  id v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  double left;
  double bottom;
  double right;
  unint64_t v109;
  uint64_t v110;
  uint64_t i;
  id v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  void (*v122)(id, _QWORD, uint64_t, uint64_t);
  uint64_t v123;
  id v124;

  v1 = v0;
  v123 = type metadata accessor for MeasurementHistoryItem(0);
  v2 = *(_QWORD *)(v123 - 8);
  v3 = __chkstk_darwin(v123);
  v118 = (unint64_t)&v115 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v6 = (char *)&v115 - v5;
  v7 = (int *)sub_10000EDC8(&qword_1004810A8);
  v8 = *((_QWORD *)v7 - 1);
  __chkstk_darwin(v7);
  v120 = (char *)&v115 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10000EDC8((uint64_t *)&unk_1004810B0);
  v11 = __chkstk_darwin(v10);
  v13 = (unint64_t *)((char *)&v115 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v11);
  v15 = (char *)&v115 - v14;
  v16 = type metadata accessor for MeasurementsHistory(0);
  __chkstk_darwin(v16);
  v18 = (uint64_t *)((char *)&v115 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = sub_10000EDC8((uint64_t *)&unk_100488B90);
  v20 = __chkstk_darwin(v19);
  v117 = (unint64_t)&v115 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v23 = (char *)&v115 - v22;
  v24 = qword_100480DB8;
  objc_msgSend(*(id *)(v1 + qword_100480DB8), "removeFromSuperview");
  if (!objc_msgSend((id)objc_opt_self(Gestalt), "jasperAvailable"))
  {
    v29 = (unint64_t)&off_10046F000;
    objc_msgSend(*(id *)(v1 + qword_100480DC0), "addSubview:", *(_QWORD *)(v1 + v24));
    objc_msgSend(*(id *)(v1 + v24), "addSubview:", *(_QWORD *)(v1 + qword_100480DA0));
    v45 = v1;
    if (*(_BYTE *)(v1 + qword_100480D90))
    {
      if (*(_BYTE *)(v1 + qword_100480D90) != 1)
      {
        result = (id)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000001CLL, 0x80000001003DD040, "Measure/LabelDetailsPlatterWrapper.swift", 40, 2, 601, 0);
        goto LABEL_65;
      }
      v66 = *(void **)(v1 + qword_100480E10);
      v67 = *(_QWORD *)(v1 + qword_100480E20);
      v68 = *(_QWORD *)(v1 + qword_100480E20 + 8);
      objc_allocWithZone((Class)type metadata accessor for RectangleLabelDetailsPlatter(0));
      v49 = v66;
      swift_bridgeObjectRetain(v68);
      v50 = sub_10019F730(v49, v67, v68, 0, 0);
    }
    else
    {
      v46 = *(void **)(v1 + qword_100480E10);
      v47 = *(_QWORD *)(v1 + qword_100480E20);
      v48 = *(_QWORD *)(v1 + qword_100480E20 + 8);
      objc_allocWithZone((Class)type metadata accessor for LabelDetailsPlatter(0));
      v49 = v46;
      swift_bridgeObjectRetain(v48);
      v50 = sub_100099ED8(v49, v47, v48, 0, 0);
    }
    v69 = *(void **)(v45 + qword_100480D98);
    *(_QWORD *)(v45 + qword_100480D98) = v50;

    v71 = qword_100480D98;
    v72 = *(_QWORD *)(v45 + qword_100480D98);
    if (v72)
    {
      v73 = v45 + qword_100480D88;
      Strong = swift_unknownObjectWeakLoadStrong(v45 + qword_100480D88, v70);
      v75 = v72 + qword_100480288;
      *(_QWORD *)(v75 + 8) = *(_QWORD *)(v73 + 8);
      swift_unknownObjectWeakAssign(v75, Strong);
      swift_unknownObjectRelease(Strong);
      if (*(_QWORD *)(v45 + v71))
        return objc_msgSend(v49, "addSubview:");
      goto LABEL_53;
    }
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  v25 = *(void (**)(id, _QWORD, uint64_t, uint64_t))(v2 + 56);
  v121 = v23;
  v122 = v25;
  v25(v23, 1, 1, v123);
  v26 = *(void (**)(__n128))(**(_QWORD **)(v1 + qword_100480D50) + 144);
  v27 = swift_retain();
  v26(v27);
  swift_release();
  v28 = *v18;
  swift_bridgeObjectRetain(*v18);
  sub_1000258F8((uint64_t)v18, type metadata accessor for MeasurementsHistory);
  v29 = 0;
  v119 = v28;
  v30 = *(id *)(v28 + 16);
  v116 = v1;
  v31 = (_QWORD *)(v1 + qword_100480E20);
  v32 = v121;
  v33 = v123;
  v124 = v30;
  if (!v30)
    goto LABEL_7;
LABEL_3:
  if (v29 >= *(_QWORD *)(v119 + 16))
  {
    __break(1u);
    goto LABEL_46;
  }
  v123 = v29 + 1;
  v34 = v119
      + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))
      + *(_QWORD *)(v2 + 72) * v29;
  v35 = v31;
  v36 = v8;
  v37 = v2;
  v38 = v33;
  v39 = (uint64_t)&v120[v7[12]];
  sub_1000226FC(v34, v39);
  v40 = (uint64_t)v13 + v7[12];
  *v13 = v29;
  v41 = v39;
  v33 = v38;
  v2 = v37;
  v8 = v36;
  v31 = v35;
  sub_10008BF28(v41, v40);
  v42 = 0;
  v29 = v123;
  v32 = v121;
  while (1)
  {
    (*(void (**)(unint64_t *, uint64_t, uint64_t, int *))(v8 + 56))(v13, v42, 1, v7);
    sub_1000A3358((uint64_t)v13, (uint64_t)v15);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v8 + 48))(v15, 1, v7) == 1)
      break;
    sub_10008BF28((uint64_t)&v15[v7[12]], (uint64_t)v6);
    v43 = *((_QWORD *)v6 + 1);
    v44 = v31[1];
    if (*(_QWORD *)v6 == *v31 && v43 == v44
      || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v6, v43, *v31, v44, 0) & 1) != 0)
    {
      sub_100036600((uint64_t)v32, (uint64_t *)&unk_100488B90);
      sub_10008BF28((uint64_t)v6, (uint64_t)v32);
      v122(v32, 0, 1, v33);
    }
    else
    {
      sub_1000258F8((uint64_t)v6, type metadata accessor for MeasurementHistoryItem);
    }
    v30 = v124;
    if ((id)v29 != v124)
      goto LABEL_3;
LABEL_7:
    v42 = 1;
    v29 = (unint64_t)v30;
  }
  swift_bridgeObjectRelease(v119);
  v29 = v117;
  sub_10008BEE0((uint64_t)v32, v117);
  if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v2 + 48))(v29, 1, v33) == 1)
    goto LABEL_63;
  v51 = v29;
  v29 = v118;
  sub_10008BF28(v51, v118);
  v52 = sub_100193754((uint64_t *)v29);
  v54 = v53;
  v56 = v55;
  v57 = *v31;
  v58 = v31[1];
  v59 = *(unsigned __int8 *)(v29 + *(int *)(v33 + 32));
  sub_100018148(0, (unint64_t *)&qword_10047E560, UIDevice_ptr);
  swift_bridgeObjectRetain(v58);
  if ((static UIDevice.isIPhone()(v60) & 1) == 0)
  {
    v29 = v57;
    objc_msgSend(*(id *)(v116 + qword_100480E10), "bounds");
    v65 = v77;
    v64 = v78;
    v63 = v79;
    v62 = v80;
LABEL_25:
    ObjectType = swift_getObjectType(v54);
    v82 = (*(uint64_t (**)(uint64_t, uint64_t))(v56 + 72))(ObjectType, v56);
    if (v82)
    {
      v84 = (void *)v82;
      v85 = objc_opt_self(UITableView);
      v86 = (void *)swift_dynamicCastObjCClass(v84, v85);
      if (!v86)

    }
    else
    {
      v86 = 0;
    }
    v87 = v116;
    v88 = swift_unknownObjectWeakLoadStrong(v116 + qword_100480D70, v83);
    if (!v88)
      goto LABEL_54;
    v89 = (void *)v88;
    v90 = objc_allocWithZone((Class)type metadata accessor for SpatialGenericPlatter(0));
    v91 = v54;
    v6 = (char *)v52;
    sub_10018D274(v29, v58, v59, v6, v91, v56, v86, v89, v65, v64, v63, v62);
    v29 = qword_100480D60;
    v92 = *(void **)(v87 + qword_100480D60);
    *(_QWORD *)(v87 + qword_100480D60) = v93;

    v94 = *(_QWORD *)(v87 + v29);
    if (!v94)
    {
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    v95 = *(_QWORD *)(v94 + qword_100488870);
    if (!v95)
    {
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
    v124 = v91;
    objc_msgSend(*(id *)(*(_QWORD *)(v95 + OBJC_IVAR____TtC7Measure23CardContainerController_containerView)+ OBJC_IVAR____TtC7Measure17CardContainerView_draggableView), "setAlpha:", 0.0);
    v97 = *(_QWORD *)(v87 + v29);
    if (!v97)
    {
LABEL_57:
      __break(1u);
      goto LABEL_58;
    }
    v98 = v87 + qword_100480D88;
    v99 = swift_unknownObjectWeakLoadStrong(v87 + qword_100480D88, v96);
    v100 = v97 + qword_100488880;
    *(_QWORD *)(v100 + 8) = *(_QWORD *)(v98 + 8);
    swift_unknownObjectWeakAssign(v100, v99);
    swift_unknownObjectRelease(v99);
    if (!*(_QWORD *)(v87 + v29))
    {
LABEL_58:
      __break(1u);
      goto LABEL_59;
    }
    v7 = *(int **)(v87 + qword_100480E10);
    objc_msgSend(v7, "addSubview:");
    v101 = *(void **)(v87 + v29);
    if (!v101)
    {
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }
    v102 = qword_100480D68;
    objc_msgSend(v101, "addSubview:", *(_QWORD *)(v87 + qword_100480D68));
    objc_msgSend(*(id *)(v87 + v102), "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v103 = *(_QWORD *)(v87 + v29);
    if (!v103)
    {
LABEL_60:
      __break(1u);
      goto LABEL_61;
    }
    v104 = *(_QWORD *)(v103 + qword_100488870);
    if (!v104)
    {
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }
    v105 = *(void **)(*(_QWORD *)(v104 + OBJC_IVAR____TtC7Measure23CardContainerController_containerView)
                    + OBJC_IVAR____TtC7Measure17CardContainerView_draggableView);
    left = UIEdgeInsetsZero.left;
    bottom = UIEdgeInsetsZero.bottom;
    right = UIEdgeInsetsZero.right;
    v32 = *(id *)(v87 + v102);
    v29 = v105;
    v109 = sub_100124D70((void *)v29, UIEdgeInsetsZero.top, left, bottom, right);
    v2 = v109;
    if (!(v109 >> 62))
    {
      v110 = *(_QWORD *)((v109 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v109);
      if (v110)
      {
LABEL_39:
        if (v110 >= 1)
        {
          for (i = 0; i != v110; ++i)
          {
            if ((v2 & 0xC000000000000001) != 0)
              v112 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v2);
            else
              v112 = *(id *)(v2 + 8 * i + 32);
            v113 = v112;
            objc_msgSend(v112, "setActive:", 1);

          }
          goto LABEL_50;
        }
        __break(1u);
        goto LABEL_52;
      }
LABEL_50:

      swift_bridgeObjectRelease_n(v2, 2);
      objc_msgSend(v7, "setNeedsLayout");
      objc_msgSend(v7, "layoutIfNeeded");

      sub_1000258F8(v118, type metadata accessor for MeasurementHistoryItem);
      return (id)sub_100036600((uint64_t)v121, (uint64_t *)&unk_100488B90);
    }
LABEL_46:
    if (v2 < 0)
      v114 = v2;
    else
      v114 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v110 = _CocoaArrayWrapper.endIndex.getter(v114);
    if (v110)
      goto LABEL_39;
    goto LABEL_50;
  }
  v61 = (double *)(v116 + qword_100480E30);
  if ((*(_BYTE *)(v116 + qword_100480E30 + 32) & 1) == 0)
  {
    v29 = v57;
    v63 = v61[2];
    v62 = v61[3];
    v65 = *v61;
    v64 = v61[1];
    goto LABEL_25;
  }
LABEL_62:
  __break(1u);
LABEL_63:
  sub_100036600(v29, (uint64_t *)&unk_100488B90);
  result = (id)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Measure/LabelDetailsPlatterWrapper.swift", 40, 2, 569, 0);
LABEL_65:
  __break(1u);
  return result;
}

void sub_10009FB24()
{
  uint64_t v0;
  unint64_t v1;

  swift_retain();
  StateValue.wrappedValue.getter(&v1, v0);
  swift_release();
  sub_10009FB78(v1);
}

void sub_10009FB78(unint64_t a1)
{
  char *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  _QWORD *v7;
  void (*v8)(void);
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  id v18;
  _QWORD v19[6];

  v2 = v1;
  sub_100018148(0, (unint64_t *)&qword_10047E560, UIDevice_ptr);
  if ((static UIDevice.isIPad()() & 1) != 0 && (sub_10012C64C(a1) & 1) != 0)
  {
    v4 = qword_100480E08;
    *(_QWORD *)&v1[qword_100480E08] = 0;
    v5 = static UIDevice.isIPad()();
    if ((v5 & 1) == 0)
      goto LABEL_11;
    switch(a1)
    {
      case 2uLL:
        v6 = 3.1415925;
        break;
      case 4uLL:
        v6 = -*(float *)Float.piDiv2.unsafeMutableAddressor(v5);
        break;
      case 3uLL:
        v6 = *(float *)Float.piDiv2.unsafeMutableAddressor(v5);
        break;
      default:
        goto LABEL_11;
    }
    *(double *)&v1[v4] = v6;
LABEL_11:
    v7 = *(_QWORD **)&v1[qword_100480D98];
    if (v7)
    {
      v8 = *(void (**)(void))((swift_isaMask & *v7) + 0x160);
      v9 = v7;
      v8();
      v11 = v10;
      v13 = v12;
      v14 = (void *)objc_opt_self(UIView);
      v15 = (_QWORD *)swift_allocObject(&unk_100443AD0, 48, 7);
      v15[2] = v9;
      v15[3] = v2;
      v15[4] = v11;
      v15[5] = v13;
      v19[4] = sub_1000A334C;
      v19[5] = v15;
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 1107296256;
      v19[2] = sub_10003ECA0;
      v19[3] = &unk_100443AE8;
      v16 = _Block_copy(v19);
      v17 = v9;
      v18 = v2;
      swift_release();
      objc_msgSend(v14, "animateWithDuration:delay:options:animations:completion:", 0, v16, 0, 0.25, 0.0);
      _Block_release(v16);

    }
  }
}

double sub_10009FD38()
{
  double result;
  uint64_t v1;

  swift_retain();
  StateValue.ifUpdated(_:)(sub_1000A33F8, &v1);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

id sub_10009FD8C(_QWORD *a1, uint64_t a2, double a3, double a4)
{
  uint64_t v7;
  CGFloat v8;
  void *v9;
  uint64_t v10;
  void *v11;
  CGAffineTransform v13;

  v7 = qword_100480E08;
  v8 = *(double *)(a2 + qword_100480E08);
  v9 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *a1) + 0x170))();
  CGAffineTransformMakeRotation(&v13, v8);
  objc_msgSend(v9, "setTransform:", &v13);

  v10 = qword_100480DB8;
  v11 = *(void **)(a2 + qword_100480DB8);
  CGAffineTransformMakeRotation(&v13, *(CGFloat *)(a2 + v7));
  objc_msgSend(v11, "setTransform:", &v13);
  return objc_msgSend(*(id *)(a2 + v10), "setCenter:", a3, a4);
}

void sub_10009FE8C(char *a1, void (*a2)(__n128), uint64_t a3)
{
  char *v3;
  char *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void *v19;
  char *v20;
  id v21;
  id v22;
  char *v23;
  char *v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  void *v42;
  void *v43;
  void (*v44)(__n128);
  uint64_t v45;
  id v46[2];

  v4 = v3;
  v8 = sub_10000EDC8(&qword_100481070);
  __chkstk_darwin(v8);
  v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10000EDC8(&qword_100481078);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(void **)&v3[qword_100480E10];
  objc_msgSend(v15, "setNeedsLayout");
  objc_msgSend(v15, "layoutIfNeeded");
  v16 = sub_100018148(0, (unint64_t *)&qword_10047E560, UIDevice_ptr);
  if ((static UIDevice.isIPhone()(v16) & 1) == 0)
  {
    if ((static UIDevice.isIPad()() & 1) == 0)
      return;
    v44 = a2;
    v45 = a3;
    v25 = *(_QWORD *)&a1[qword_100488870];
    if (v25)
    {
      v26 = *(id *)(v25 + OBJC_IVAR____TtC7Measure23CardContainerController_containerView);
      v27 = (void *)sub_10016848C();

      v46[1] = v27;
      v46[0] = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
      v28 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v10, 1, 1, v28);
      v29 = sub_10000EDC8(&qword_100481080);
      v30 = sub_100018148(0, &qword_100481088, NSRunLoop_ptr);
      v31 = sub_100043310(&qword_100481090, &qword_100481080, (uint64_t)&protocol conformance descriptor for Future<A, B>);
      v32 = sub_1000A2EF4();
      Publisher.receive<A>(on:options:)(v46, v10, v29, v30, v31, v32);
      sub_100036600((uint64_t)v10, &qword_100481070);

      swift_release();
      v33 = (_QWORD *)swift_allocObject(&unk_1004439B8, 48, 7);
      v33[2] = v4;
      v33[3] = a1;
      v35 = (uint64_t)v44;
      v34 = v45;
      v33[4] = v44;
      v33[5] = v34;
      v36 = swift_allocObject(&unk_1004439E0, 24, 7);
      swift_unknownObjectWeakInit(v36 + 16, v4);
      v37 = v4;
      v38 = a1;
      sub_100036254(v35, v34);
      v39 = sub_100043310(&qword_1004810A0, &qword_100481078, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
      v40 = Publisher.sink(receiveCompletion:receiveValue:)(sub_1000A2F88, v33, sub_1000A2FB8, v36, v11, v39);
      swift_release();
      v41 = swift_release();
      (*(void (**)(char *, uint64_t, __n128))(v12 + 8))(v14, v11, v41);
      *(_QWORD *)&v37[qword_100480E38] = v40;
      swift_release();
      return;
    }
LABEL_12:
    __break(1u);
    return;
  }
  v17 = *(_QWORD *)&a1[qword_100488870];
  if (!v17)
  {
    __break(1u);
    goto LABEL_12;
  }
  v18 = *(char **)(v17 + OBJC_IVAR____TtC7Measure23CardContainerController_containerView);
  v19 = *(void **)&v18[OBJC_IVAR____TtC7Measure17CardContainerView_backgroundBlur];
  v20 = v18;
  v21 = objc_msgSend(v19, "contentView");
  v22 = objc_msgSend(v21, "snapshotViewAfterScreenUpdates:", 1);

  v23 = *(char **)&v4[qword_100480D68];
  if (v22)
  {
    v24 = v23;
    sub_10003AA08((uint64_t)v22);
  }
  else
  {
    v42 = *(void **)&v23[OBJC_IVAR____TtC7Measure27PillToPlatterTransitionView_contentView];
    v43 = (void *)objc_opt_self(UIColor);
    v22 = v42;
    v24 = (char *)objc_msgSend(v43, "clearColor");
    objc_msgSend(v22, "setBackgroundColor:", v24);
  }

  sub_1000A02D4((uint64_t)v4, (uint64_t)a1, a2, a3);
}

void sub_1000A02D4(uint64_t a1, uint64_t a2, void (*a3)(__n128), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  id v25;
  __n128 v26;

  v4 = qword_100488870;
  v5 = *(_QWORD *)(a2 + qword_100488870);
  if (!v5)
  {
    __break(1u);
    goto LABEL_9;
  }
  objc_msgSend(*(id *)(*(_QWORD *)(v5 + OBJC_IVAR____TtC7Measure23CardContainerController_containerView)+ OBJC_IVAR____TtC7Measure17CardContainerView_draggableView), "bounds");
  v10 = a1 + qword_100480DE8;
  *(_QWORD *)v10 = v11;
  *(_QWORD *)(v10 + 8) = v12;
  *(_BYTE *)(v10 + 16) = 0;
  v13 = *(_QWORD *)(a2 + v4);
  if (!v13)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v14 = objc_msgSend(*(id *)(*(_QWORD *)(v13 + OBJC_IVAR____TtC7Measure23CardContainerController_containerView)+ OBJC_IVAR____TtC7Measure17CardContainerView_draggableView), "superview");
  if (!v14)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v15 = *(_QWORD *)(a2 + v4);
  if (!v15)
  {
LABEL_11:
    __break(1u);
    return;
  }
  v16 = v14;
  CGRect.centerPoint.getter(objc_msgSend(*(id *)(*(_QWORD *)(v15 + OBJC_IVAR____TtC7Measure23CardContainerController_containerView)+ OBJC_IVAR____TtC7Measure17CardContainerView_draggableView), "frame"));
  objc_msgSend(v16, "convertPoint:toCoordinateSpace:", *(_QWORD *)(a1 + qword_100480E10));
  v18 = v17;
  v20 = v19;

  v21 = a1 + qword_100480DF0;
  *(_QWORD *)v21 = v18;
  *(_QWORD *)(v21 + 8) = v20;
  *(_BYTE *)(v21 + 16) = 0;
  v22 = a1 + qword_100480DF8;
  *(_QWORD *)v22 = 0;
  *(_BYTE *)(v22 + 8) = 0;
  v23 = *(void **)(a1 + qword_100480D68);
  v24 = *(void **)(a1 + qword_100480DB8);
  *(_QWORD *)(a1 + qword_100480DB8) = v23;
  v25 = v23;

  if (a3)
  {
    v26 = swift_retain();
    a3(v26);
    sub_1000217BC((uint64_t)a3, a4);
  }
}

void sub_1000A0484(_BYTE *a1, uint64_t a2, uint64_t a3, void (*a4)(__n128), uint64_t a5)
{
  void *v9;
  void *v10;
  id v11;
  id v12;

  if (*a1 != 2)
  {
    v9 = *(void **)(*(_QWORD *)(a2 + qword_100480D68) + OBJC_IVAR____TtC7Measure27PillToPlatterTransitionView_contentView);
    v10 = (void *)objc_opt_self(UIColor);
    v11 = v9;
    v12 = objc_msgSend(v10, "clearColor");
    objc_msgSend(v11, "setBackgroundColor:", v12);

  }
  sub_1000A02D4(a2, a3, a4, a5);
}

void sub_1000A0544(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t Strong;
  void *v6;
  _BYTE v7[24];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v7, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3, v4);
  if (Strong)
  {
    v6 = (void *)Strong;
    objc_msgSend(*(id *)(*(_QWORD *)(Strong + qword_100480D68) + OBJC_IVAR____TtC7Measure27PillToPlatterTransitionView_contentView), "setImage:", v2);

  }
}

void sub_1000A05C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  _QWORD *v13;
  double (*v14)(void);
  _QWORD *v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  void *v26;
  id v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  char *v33;
  void *v34;
  NSString v35;
  void *v36;
  uint64_t v37;

  v4 = v3;
  swift_retain();
  StateValue.wrappedValue.getter(&v37, v8);
  swift_release();
  v9 = v37;
  v10 = qword_100480E08;
  *(_QWORD *)&v3[qword_100480E08] = 0;
  sub_100018148(0, (unint64_t *)&qword_10047E560, UIDevice_ptr);
  v11 = static UIDevice.isIPad()();
  if ((v11 & 1) != 0)
  {
    switch(v9)
    {
      case 2:
        v12 = 3.1415925;
        break;
      case 4:
        v12 = -*(float *)Float.piDiv2.unsafeMutableAddressor(v11);
        break;
      case 3:
        v12 = *(float *)Float.piDiv2.unsafeMutableAddressor(v11);
        break;
      default:
        goto LABEL_9;
    }
    *(double *)&v3[v10] = v12;
  }
LABEL_9:
  v13 = *(_QWORD **)&v3[qword_100480D98];
  if (v13)
  {
    v14 = *(double (**)(void))((swift_isaMask & *v13) + 0x160);
    v15 = v13;
    v16 = v14();
    v18 = v17;
    v20 = v19;
    v22 = v21;

    v23 = &v4[qword_100480DE8];
    *(double *)v23 = v16;
    *((_QWORD *)v23 + 1) = v18;
    v23[16] = 0;
    v24 = &v4[qword_100480DF0];
    *(_QWORD *)v24 = v20;
    *((_QWORD *)v24 + 1) = v22;
    v24[16] = 0;
    v25 = &v4[qword_100480DF8];
    *(_QWORD *)v25 = *(_QWORD *)&v4[v10];
    v25[8] = 0;
  }
  if (objc_msgSend((id)objc_opt_self(Gestalt), "jasperAvailable")
    && (v26 = *(void **)&v4[qword_100480D60]) != 0)
  {
    v27 = v26;
    sub_10018CCC8(1);
    v28 = swift_allocObject(&unk_100443B20, 120, 7);
    v29 = *(_OWORD *)a1;
    *(_OWORD *)(v28 + 40) = *(_OWORD *)(a1 + 16);
    v30 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v28 + 56) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(v28 + 72) = v30;
    *(_QWORD *)(v28 + 16) = v4;
    v31 = *(_QWORD *)(a1 + 64);
    *(_OWORD *)(v28 + 24) = v29;
    *(_QWORD *)(v28 + 88) = v31;
    *(_QWORD *)(v28 + 96) = v27;
    *(_QWORD *)(v28 + 104) = a2;
    *(_QWORD *)(v28 + 112) = a3;
    v32 = (char *)v27;
    v33 = v4;
    sub_1000A2ECC(a1);
    sub_100036254(a2, a3);
    sub_10009FE8C(v32, (void (*)(__n128))sub_1000A33E4, v28);

    swift_release();
  }
  else
  {
    v34 = *(void **)&v4[qword_100480DA8];
    v35 = String._bridgeToObjectiveC()();
    objc_msgSend(v34, "setText:", v35);

    objc_msgSend(v34, "sizeToFit");
    v36 = *(void **)&v4[qword_100480DC0];
    objc_msgSend(v36, "setUserInteractionEnabled:", 1);
    objc_msgSend(v36, "setAlpha:", 1.0);
    v4[qword_100480E00] = 1;
    *(CFTimeInterval *)&v4[qword_100480DE0] = CACurrentMediaTime();
    sub_1000A08A4(a1);
  }
}

void sub_1000A08A4(uint64_t a1)
{
  _BYTE *v1;
  double *v2;
  _BYTE *v3;
  double *v4;
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  void *v16;
  id v17;
  char v18;
  uint64_t v19;
  char v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  double v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  float v47;
  CGFloat v48;
  double v49;
  CGFloat v50;
  uint64_t v51;
  CGFloat v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  double v56;
  CGFloat tx;
  CGFloat ty;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  void *v62;
  id v63;
  double v64;
  uint64_t v65;
  id v66;
  id v67;
  void *v68;
  void *v69;
  uint64_t v70;
  id v71;
  id v72;
  uint64_t v73;
  double v74;
  void *v75;
  CGFloat v76;
  double v77;
  uint64_t v78;
  double v79;
  double v80;
  CGFloat v81;
  void *v82;
  double Width;
  double v84;
  id v85;
  UIContentSizeCategory v86;
  char v87;
  void *v88;
  id v89;
  double v90;
  double v91;
  void *v92;
  double v93;
  double v94;
  double v95;
  id v96;
  UIContentSizeCategory v97;
  char v98;
  id v99;
  double v100;
  double v101;
  CGFloat v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  double v107;
  double v108;
  void *v109;
  id v110;
  id v111;
  void *v112;
  double v113;
  double v114;
  id v115;
  uint64_t v116;
  int v117;
  char *v118;
  uint64_t Strong;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  void *v124;
  id v125;
  char v126;
  uint64_t v127;
  char v128;
  id v129;
  id v130;
  uint64_t v131;
  uint64_t ObjectType;
  char v133;
  id v134;
  id v135;
  char *v136;
  uint64_t v137;
  void *v138;
  char *v139;
  CGFloat v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;
  double v147;
  void *v148;
  double v149;
  double v150;
  double v151;
  double v152;
  id v153;
  uint64_t v154;
  CGAffineTransform v155;
  CGAffineTransform t2;
  CGAffineTransform t1;
  double v158;
  uint64_t v159;
  uint64_t v160;
  CGRect v161;
  CGRect v162;
  CGRect v163;
  CGRect v164;
  CGRect v165;
  CGRect v166;
  CGRect v167;
  CGRect v168;
  CGRect v169;
  CGRect v170;
  CGRect v171;

  v2 = (double *)&v1[qword_100480DF0];
  if ((v1[qword_100480DF0 + 16] & 1) == 0)
  {
    v3 = v1;
    v4 = (double *)&v1[qword_100480DE8];
    if ((v1[qword_100480DE8 + 16] & 1) == 0 && (v1[qword_100480DF8 + 8] & 1) == 0)
    {
      v7 = *v2;
      v6 = v2[1];
      v8 = *v4;
      v9 = *(double *)&v1[qword_100480DF8];
      v10 = *(_QWORD *)(a1 + 56);
      v11 = *(_QWORD *)(a1 + 64);
      v12 = *(double *)(a1 + 40);
      v13 = *(double *)(a1 + 48);
      v151 = *(double *)(a1 + 24);
      v152 = *(double *)(a1 + 32);
      v150 = *(double *)(a1 + 16);
      v147 = v4[1];
      v149 = *(double *)(a1 + 8);
      v143 = qword_100480E00;
      if (v3[qword_100480E00])
        v14 = 1.0;
      else
        v14 = 0.0;
      sub_1000A2ECC(a1);
      if (qword_10047AE70 != -1)
        swift_once(&qword_10047AE70, sub_100195D4C);
      v15 = qword_1004AF968;
      if (qword_10047B108 != -1)
        swift_once(&qword_10047B108, sub_100197A7C);
      v16 = (void *)qword_1004AFC28;
      v17 = qword_1004AFC30;
      v141 = v11;
      v142 = v10;
      if ((byte_1004AFC38 & 1) != 0)
      {
        v18 = byte_1004AFC48;
        v19 = qword_1004AFC40;
        v20 = byte_10048A2A0;
        v21 = (id)qword_1004AFC28;
        v22 = sub_100070DBC(v20, v19, v18);
        sub_100021580(v16, v17, 1);
      }
      else
      {
        if ((byte_10048A2A0 & 1) != 0)
          v23 = qword_1004AFC30;
        else
          v23 = (id)qword_1004AFC28;
        v22 = v23;
      }
      v24 = sub_100018148(0, (unint64_t *)&qword_10047E560, UIDevice_ptr);
      if ((static UIDevice.isIPhone()(v24) & 1) != 0
        && objc_msgSend((id)objc_opt_self(Gestalt), "jasperAvailable")
        && v3[v143] != 1)
      {
        *(double *)&v25 = 360.0;
      }
      else
      {
        *(double *)&v25 = 400.0;
      }
      v26 = *(double *)&v25;
      v27 = CACurrentMediaTime();
      v28 = qword_100480DE0;
      v29 = v27 - *(double *)&v3[qword_100480DE0];
      if (v29 >= 0.0166666667)
      {
        v30 = qword_100480DD0;
        v31 = qword_100480DD8;
        v32 = *(double *)&v3[qword_100480DD0];
        do
        {
          v33 = *(double *)&v3[v31] + ((v32 - v14) * -v26 + *(double *)&v3[v31] * -36.0) * 0.0166666667;
          *(double *)&v3[v31] = v33;
          v32 = *(double *)&v3[v30] + v33 * 0.0166666667;
          *(double *)&v3[v30] = v32;
          v29 = v29 + -0.0166666667;
        }
        while (v29 >= 0.0166666667);
      }
      *(double *)&v3[v28] = v27 - v29;
      v154 = qword_100480DD0;
      if (vabdd_f64(*(double *)&v3[qword_100480DD0], v14) >= 0.01
        || (v34 = qword_100480DD8, fabs(*(double *)&v3[qword_100480DD8]) >= 0.01))
      {
        v35 = 0;
      }
      else
      {
        *(double *)&v3[qword_100480DD0] = v14;
        *(_QWORD *)&v3[v34] = 0;
        v35 = 1;
      }
      v36 = qword_100480DB8;
      v37 = objc_msgSend(*(id *)&v3[qword_100480DB8], "layer");
      objc_msgSend(v37, "setCornerRadius:", mix(_:_:_:)(v37, v152, 16.0, *(double *)&v3[v154]));

      objc_msgSend(*(id *)&v3[qword_100480DC8], "setAlpha:", mix(_:_:_:)(v38, 0.0, 1.0, *(double *)&v3[v154]));
      v39 = *(double *)a1;
      v153 = (id)objc_opt_self(Gestalt);
      v40 = (uint64_t)objc_msgSend(v153, "jasperAvailable");
      if (!(_DWORD)v40
        || (v41 = qword_100480D60, !*(_QWORD *)&v3[qword_100480D60])
        || (v42 = *(double *)&v3[qword_100480E08], v39 = v39 - v42,
                                                   v40 = static UIDevice.isIPhone()(v40),
                                                   (v40 & 1) == 0))
      {
        v45 = v154;
LABEL_36:
        v47 = fabsf(v39);
        if (v47 > 3.1416)
        {
          v40 = Float.pi2.unsafeMutableAddressor(v40);
          v39 = *(float *)v40 - v47;
        }
        v48 = v39;
        v49 = *(double *)&v3[v45];
        v140 = v48;
        v50 = mix(_:_:_:)(v40, v48, v9, v49);
        v52 = mix(_:_:_:)(v51, v149, 1.0, v49);
        v54 = mix(_:_:_:)(v53, v150, v7, v49);
        v56 = mix(_:_:_:)(v55, v151, v6, v49);
        CGAffineTransformMakeScale(&t1, v52, v52);
        v145 = *(_OWORD *)&t1.a;
        v144 = *(_OWORD *)&t1.c;
        tx = t1.tx;
        ty = t1.ty;
        CGAffineTransformMakeRotation(&t1, v50);
        v59 = *(_OWORD *)&t1.a;
        v60 = *(_OWORD *)&t1.c;
        v61 = *(_OWORD *)&t1.tx;
        *(_OWORD *)&t1.a = v145;
        *(_OWORD *)&t1.c = v144;
        t1.tx = tx;
        t1.ty = ty;
        *(_OWORD *)&t2.a = v59;
        *(_OWORD *)&t2.c = v60;
        *(_OWORD *)&t2.tx = v61;
        CGAffineTransformConcat(&v155, &t1, &t2);
        v62 = *(void **)&v3[v36];
        t1 = v155;
        v63 = objc_msgSend(v62, "setTransform:", &t1);
        v64 = *(double *)&v3[v45];
        mix(_:_:_:)(v63, v12, v8, v64);
        mix(_:_:_:)(v65, v13, v147, v64);
        v66 = *(id *)&v3[v36];
        objc_msgSend(v66, "bounds");
        objc_msgSend(v66, "setBounds:");

        objc_msgSend(*(id *)&v3[v36], "setCenter:", v54, v56);
        if (objc_msgSend(v153, "jasperAvailable"))
        {
          v67 = objc_msgSend(*(id *)&v3[qword_100480D68], "setAlpha:", 1.0);
          v68 = *(void **)&v3[qword_100480D60];
          if (!v68)
            goto LABEL_43;
          v69 = *(void **)&v3[v36];
          v70 = *(_QWORD *)&v3[qword_100480E10];
          v71 = v68;
          v72 = v69;
          v73 = v70;
          v45 = v154;
          objc_msgSend(v71, "convertPoint:fromCoordinateSpace:", v73, v54, v56);
          objc_msgSend(v72, "setCenter:");
        }
        else
        {
          v74 = *(double *)&v3[v45] + *(double *)&v3[v45];
          v71 = *(id *)&v3[v36];
          v72 = (id)mix(_:_:_:)(v15, v22, v74);
          objc_msgSend(v71, "setBackgroundColor:", v72);
        }

LABEL_43:
        v75 = *(void **)&v3[qword_100480DA0];
        objc_msgSend(v75, "setAlpha:", mix(_:_:_:)(v67, 1.0, 0.0, *(double *)&v3[v45] + *(double *)&v3[v45]));
        objc_msgSend(v75, "bounds");
        objc_msgSend(v75, "setBounds:");
        objc_msgSend(*(id *)&v3[v36], "bounds");
        v76 = CGRectGetWidth(v161) * 0.5;
        objc_msgSend(*(id *)&v3[v36], "bounds");
        objc_msgSend(v75, "setCenter:", v76, CGRectGetHeight(v162) * 0.5);
        objc_msgSend(v75, "frame");
        v77 = v8 / CGRectGetWidth(v163);
        objc_msgSend(v75, "frame");
        v79 = v147 / CGRectGetHeight(v164);
        if (v79 >= v77)
          v80 = v77;
        else
          v80 = v79;
        v81 = mix(_:_:_:)(v78, 1.0, v80, *(double *)&v3[v154]);
        CGAffineTransformMakeScale(&t1, v81, v81);
        objc_msgSend(v75, "setTransform:", &t1);
        v82 = *(void **)&v3[qword_100480DB0];
        objc_msgSend(v82, "setAlpha:", 1.0);
        objc_msgSend(v75, "bounds");
        Width = CGRectGetWidth(v165);
        if (qword_10047AE88 != -1)
          swift_once(&qword_10047AE88, sub_100195DEC);
        v148 = v22;
        v84 = *(double *)&qword_1004AF980;
        if (qword_10047AE50 != -1)
          swift_once(&qword_10047AE50, sub_100195CE8);
        v146 = v36;
        v85 = objc_msgSend(objc_allocWithZone((Class)UIFontMetrics), "initForTextStyle:", qword_1004AF948);
        if (qword_10047A738 != -1)
          swift_once(&qword_10047A738, sub_10000E4DC);
        v86 = (UIContentSizeCategory)(id)qword_1004AF068;
        v87 = static UIContentSizeCategory.> infix(_:_:)(v86, UIContentSizeCategoryAccessibilityLarge);

        if ((v87 & 1) != 0)
        {

          v86 = UIContentSizeCategoryAccessibilityLarge;
        }
        v88 = (void *)objc_opt_self(UITraitCollection);
        v89 = objc_msgSend(v88, "traitCollectionWithPreferredContentSizeCategory:", v86);

        objc_msgSend(v85, "scaledValueForValue:compatibleWithTraitCollection:", v89, v84);
        v91 = v90;

        objc_msgSend(v75, "bounds");
        objc_msgSend(v82, "setCenter:", Width - v91, CGRectGetHeight(v166) * 0.5);
        v92 = *(void **)&v3[qword_100480DA8];
        objc_msgSend(v75, "bounds");
        v93 = CGRectGetWidth(v167) * 0.5;
        if (qword_10047AE90 != -1)
          swift_once(&qword_10047AE90, sub_100195F44);
        v94 = v93 - *(double *)&qword_1004AF988;
        objc_msgSend(v75, "bounds");
        objc_msgSend(v92, "setCenter:", v94, CGRectGetHeight(v168) * 0.5);
        if (v3[qword_100480E18] == 1)
        {
          v95 = *(double *)&qword_1004AF980;
          v96 = objc_msgSend(objc_allocWithZone((Class)UIFontMetrics), "initForTextStyle:", qword_1004AF948);
          v97 = (UIContentSizeCategory)(id)qword_1004AF068;
          v98 = static UIContentSizeCategory.> infix(_:_:)(v97, UIContentSizeCategoryAccessibilityLarge);

          if ((v98 & 1) != 0)
          {

            v97 = UIContentSizeCategoryAccessibilityLarge;
          }
          v99 = objc_msgSend(v88, "traitCollectionWithPreferredContentSizeCategory:", v97);

          objc_msgSend(v96, "scaledValueForValue:compatibleWithTraitCollection:", v99, v95);
          v101 = v100;

          objc_msgSend(v75, "bounds");
          objc_msgSend(v82, "setCenter:", v101, CGRectGetHeight(v169) * 0.5);
          objc_msgSend(v75, "bounds");
          v102 = CGRectGetWidth(v170) * 0.5 + *(double *)&qword_1004AF988;
          objc_msgSend(v75, "bounds");
          objc_msgSend(v92, "setCenter:", v102, CGRectGetHeight(v171) * 0.5);
        }
        if (objc_msgSend(v153, "jasperAvailable"))
        {
          v103 = *(void **)&v3[v146];
          v104 = type metadata accessor for PillToPlatterTransitionView();
          v105 = swift_dynamicCastClass(v103, v104);
          if (v105)
          {
            v106 = (char *)v105;
            v107 = *(double *)&v3[v154] + *(double *)&v3[v154];
            v108 = mix(_:_:_:)(v105, 0.0, 1.0, v107);
            v109 = *(void **)&v106[OBJC_IVAR____TtC7Measure27PillToPlatterTransitionView_contentView];
            v110 = v103;
            objc_msgSend(v109, "setAlpha:", v108);
            v111 = objc_msgSend(*(id *)&v106[OBJC_IVAR____TtC7Measure27PillToPlatterTransitionView_shadowView], "setAlpha:", v108);
            objc_msgSend(*(id *)&v106[OBJC_IVAR____TtC7Measure27PillToPlatterTransitionView_backgroundColorView], "setAlpha:", mix(_:_:_:)(v111, 1.0, 0.0, v107));
            objc_msgSend(v106, "setNeedsLayout");
            objc_msgSend(v106, "layoutIfNeeded");

          }
        }
        v112 = *(void **)&v3[qword_100480D98];
        if (v112)
        {
          t1.a = v140;
          t1.b = v149;
          t1.c = v150;
          t1.d = v151;
          t1.tx = v152;
          t1.ty = v12;
          v158 = v13;
          v159 = v142;
          v160 = v141;
          v113 = *(double *)&v3[v154];
          v114 = *(double *)&v3[qword_100480E08];
          v115 = v112;
          sub_100096064(&t1.a, v113, v114);
          sub_1000A2FE4(a1);

          if (!v35)
            goto LABEL_86;
        }
        else
        {
          sub_1000A2FE4(a1);
          if (!v35)
            goto LABEL_86;
        }
        v117 = v3[v143];
        v118 = &v3[qword_100480D88];
        Strong = swift_unknownObjectWeakLoadStrong(&v3[qword_100480D88], v116);
        v120 = Strong;
        if (v117 != 1)
        {
          if (Strong)
          {
            v131 = *((_QWORD *)v118 + 1);
            ObjectType = swift_getObjectType(Strong);
            (*(void (**)(uint64_t, uint64_t))(v131 + 16))(ObjectType, v131);
            swift_unknownObjectRelease(v120);
          }
          objc_msgSend(v3, "performSelector:withObject:afterDelay:", "hide", 0, 0.03);
          objc_msgSend(*(id *)&v3[qword_100480DC0], "setUserInteractionEnabled:", 0);
          goto LABEL_86;
        }
        if (Strong)
        {
          v121 = *((_QWORD *)v118 + 1);
          v122 = swift_getObjectType(Strong);
          (*(void (**)(uint64_t, uint64_t))(v121 + 8))(v122, v121);
          swift_unknownObjectRelease(v120);
        }
        if ((objc_msgSend(v153, "jasperAvailable") & 1) == 0)
        {
          v123 = *(void **)&v3[v146];
          v124 = (void *)qword_1004AFC28;
          v125 = qword_1004AFC30;
          if ((byte_1004AFC38 & 1) != 0)
          {
            v126 = byte_1004AFC48;
            v127 = qword_1004AFC40;
            v128 = byte_10048A2A0;
            v129 = v123;
            sub_1000A300C(v124, v125, 1);
            v130 = sub_100070DBC(v128, v127, v126);
            sub_100021580(v124, v125, 1);
          }
          else
          {
            v133 = byte_10048A2A0;
            v134 = v123;
            if ((v133 & 1) != 0)
              v135 = v125;
            else
              v135 = v124;
            v130 = v135;
          }
          objc_msgSend(v123, "setBackgroundColor:", v130);

        }
        if (objc_msgSend(v153, "jasperAvailable"))
        {
          v136 = *(char **)&v3[qword_100480D60];
          if (v136)
          {
            v137 = *(_QWORD *)&v136[qword_100488870];
            if (v137)
            {
              v138 = *(void **)(*(_QWORD *)(v137 + OBJC_IVAR____TtC7Measure23CardContainerController_containerView)
                              + OBJC_IVAR____TtC7Measure17CardContainerView_draggableView);
              v139 = v136;
              objc_msgSend(v138, "setAlpha:", 1.0);
              sub_10018D024(objc_msgSend(*(id *)&v3[v146], "setAlpha:", 0.0));

              goto LABEL_86;
            }
LABEL_91:
            __break(1u);
            return;
          }
        }
LABEL_86:

        return;
      }
      v43 = *(_QWORD *)&v3[v41];
      if (v43)
      {
        v44 = *(_QWORD *)(v43 + qword_100488870);
        v45 = v154;
        if (v44)
        {
          v46 = *(void **)(*(_QWORD *)(v44 + OBJC_IVAR____TtC7Measure23CardContainerController_containerView)
                         + OBJC_IVAR____TtC7Measure17CardContainerView_darkeningView);
          if (v46)
          {
            v40 = (uint64_t)objc_msgSend(v46, "setAlpha:", mix(_:_:_:)(v40, 0.0, 1.0, *(double *)&v3[v154]));
            goto LABEL_36;
          }
LABEL_90:
          __break(1u);
          goto LABEL_91;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      goto LABEL_90;
    }
  }
}

void sub_1000A1734(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(__n128), uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  __n128 v14;
  char v15;
  void *v16;
  NSString v17;
  void *v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  id v22;
  void *v23;
  id v24;
  double v25;
  double v26;
  void *v27;
  uint64_t v28;
  void *v29;
  id v30;
  _QWORD aBlock[6];

  v10 = type metadata accessor for DispatchPredicate(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (_QWORD *)((char *)aBlock - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100018148(0, (unint64_t *)&qword_10047FB70, OS_dispatch_queue_ptr);
  *v13 = static OS_dispatch_queue.main.getter(v14);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  v15 = _dispatchPreconditionTest(_:)(v13);
  (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
  if ((v15 & 1) == 0)
  {
    __break(1u);
LABEL_14:
    swift_once(&qword_10047A930, sub_100083368);
LABEL_7:
    if (*((_QWORD *)&xmmword_1004AF228 + 1))
    {
      v22 = objc_msgSend(*((id *)&xmmword_1004AF228 + 1), "tabBarController");
      if (v22)
      {
        v23 = v22;
        v24 = objc_msgSend(v22, "tabBar");
        objc_msgSend(v24, "alpha");
        v26 = v25;

        if (v26 == 0.0)
        {

        }
        else
        {
          v27 = (void *)objc_opt_self(UIView);
          v28 = swift_allocObject(&unk_100443B48, 32, 7);
          *(_QWORD *)(v28 + 16) = v23;
          *(_QWORD *)(v28 + 24) = 0;
          aBlock[4] = sub_1000A3430;
          aBlock[5] = v28;
          aBlock[0] = _NSConcreteStackBlock;
          aBlock[1] = 1107296256;
          aBlock[2] = sub_10003ECA0;
          aBlock[3] = &unk_100443B60;
          v29 = _Block_copy(aBlock);
          v30 = v23;
          swift_release();
          objc_msgSend(v27, "animateWithDuration:delay:options:animations:completion:", 0, v29, 0, 0.15, 0.0);

          _Block_release(v29);
        }
      }
      return;
    }
LABEL_16:
    __break(1u);
    return;
  }
  v16 = *(void **)(a1 + qword_100480DA8);
  v17 = String._bridgeToObjectiveC()();
  objc_msgSend(v16, "setText:", v17);

  objc_msgSend(v16, "sizeToFit");
  v18 = *(void **)(a1 + qword_100480DC0);
  objc_msgSend(v18, "setUserInteractionEnabled:", 0);
  objc_msgSend(v18, "setAlpha:", 1.0);
  *(_BYTE *)(a1 + qword_100480E00) = 1;
  *(CFTimeInterval *)(a1 + qword_100480DE0) = CACurrentMediaTime();
  sub_1000A08A4(a2);
  v19 = *(_QWORD *)(a3 + qword_100488870);
  if (!v19)
  {
    __break(1u);
    goto LABEL_16;
  }
  objc_msgSend(*(id *)(*(_QWORD *)(v19 + OBJC_IVAR____TtC7Measure23CardContainerController_containerView)+ OBJC_IVAR____TtC7Measure17CardContainerView_draggableView), "setAlpha:", 0.0);
  if (a4)
  {
    v20 = swift_retain();
    a4(v20);
    sub_1000217BC((uint64_t)a4, a5);
  }
  v21 = sub_100018148(0, (unint64_t *)&qword_10047E560, UIDevice_ptr);
  if ((static UIDevice.isIPhone()(v21) & 1) != 0)
  {
    if (qword_10047A930 == -1)
      goto LABEL_7;
    goto LABEL_14;
  }
}

void sub_1000A1A9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  void *v8;
  void *v9;
  _QWORD *v10;
  id v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  void *v22;
  void (*v23)(uint64_t *__return_ptr, __n128);
  id v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char *v31;
  char *v32;
  void *v33;
  NSString v34;
  uint64_t v35;

  v4 = v3;
  v3[qword_100480E00] = 0;
  v8 = *(void **)&v3[qword_100480D98];
  if (v8)
  {
    v9 = (void *)objc_opt_self(UIMenuController);
    v10 = v8;
    v11 = objc_msgSend(v9, "sharedMenuController");
    objc_msgSend(v11, "hideMenu");

    v12 = (*(double (**)(void))((swift_isaMask & *v10) + 0x160))();
    v14 = v13;
    v16 = v15;
    v18 = v17;

    v19 = &v4[qword_100480DE8];
    *(double *)v19 = v12;
    *((_QWORD *)v19 + 1) = v14;
    v19[16] = 0;
    v20 = &v4[qword_100480DF0];
    *(_QWORD *)v20 = v16;
    *((_QWORD *)v20 + 1) = v18;
    v20[16] = 0;
    v21 = &v4[qword_100480DF8];
    *(_QWORD *)v21 = *(_QWORD *)&v4[qword_100480E08];
    v21[8] = 0;
  }
  if (objc_msgSend((id)objc_opt_self(Gestalt), "jasperAvailable")
    && (v22 = *(void **)&v4[qword_100480D60]) != 0)
  {
    v23 = *(void (**)(uint64_t *__return_ptr, __n128))(**(_QWORD **)&v4[qword_100480D58] + 144);
    v24 = v22;
    v25 = swift_retain();
    v23(&v35, v25);
    swift_release();
    v26 = *(_QWORD *)(v35 + 16);
    swift_bridgeObjectRelease(v35);
    sub_10018CE84(v26 == 0);
    v27 = swift_allocObject(&unk_100443990, 120, 7);
    v28 = *(_OWORD *)a1;
    *(_OWORD *)(v27 + 56) = *(_OWORD *)(a1 + 16);
    v29 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v27 + 72) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(v27 + 88) = v29;
    *(_QWORD *)(v27 + 16) = a2;
    *(_QWORD *)(v27 + 24) = a3;
    *(_QWORD *)(v27 + 32) = v4;
    v30 = *(_QWORD *)(a1 + 64);
    *(_OWORD *)(v27 + 40) = v28;
    *(_QWORD *)(v27 + 104) = v30;
    *(_QWORD *)(v27 + 112) = v24;
    v31 = (char *)v24;
    sub_100036254(a2, a3);
    v32 = v4;
    sub_1000A2ECC(a1);
    sub_10009FE8C(v31, (void (*)(__n128))sub_1000A2EB8, v27);

    swift_release();
  }
  else
  {
    *(CFTimeInterval *)&v4[qword_100480DE0] = CACurrentMediaTime();
    v33 = *(void **)&v4[qword_100480DA8];
    v34 = String._bridgeToObjectiveC()();
    objc_msgSend(v33, "setText:", v34);

    objc_msgSend(v33, "sizeToFit");
    sub_1000A08A4(a1);
  }
}

void sub_1000A1D48(void (*a1)(__n128), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  __n128 v14;
  char v15;
  __n128 v16;
  void *v17;
  NSString v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  id v23;
  double v24;
  double v25;
  void *v26;
  uint64_t v27;
  void *v28;
  id v29;
  _QWORD aBlock[6];

  v10 = type metadata accessor for DispatchPredicate(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (_QWORD *)((char *)aBlock - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100018148(0, (unint64_t *)&qword_10047FB70, OS_dispatch_queue_ptr);
  *v13 = static OS_dispatch_queue.main.getter(v14);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  v15 = _dispatchPreconditionTest(_:)(v13);
  (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
  if ((v15 & 1) == 0)
  {
    __break(1u);
LABEL_14:
    swift_once(&qword_10047A930, sub_100083368);
    goto LABEL_7;
  }
  if (a1)
  {
    v16 = swift_retain();
    a1(v16);
    sub_1000217BC((uint64_t)a1, a2);
  }
  *(CFTimeInterval *)(a3 + qword_100480DE0) = CACurrentMediaTime();
  v17 = *(void **)(a3 + qword_100480DA8);
  v18 = String._bridgeToObjectiveC()();
  objc_msgSend(v17, "setText:", v18);

  objc_msgSend(v17, "sizeToFit");
  sub_1000A08A4(a4);
  v19 = *(_QWORD *)(a5 + qword_100488870);
  if (!v19)
  {
    __break(1u);
    goto LABEL_16;
  }
  objc_msgSend(*(id *)(*(_QWORD *)(v19 + OBJC_IVAR____TtC7Measure23CardContainerController_containerView)+ OBJC_IVAR____TtC7Measure17CardContainerView_draggableView), "setAlpha:", 0.0);
  v20 = sub_100018148(0, (unint64_t *)&qword_10047E560, UIDevice_ptr);
  if ((static UIDevice.isIPhone()(v20) & 1) == 0)
    return;
  if (qword_10047A930 != -1)
    goto LABEL_14;
LABEL_7:
  if (!*((_QWORD *)&xmmword_1004AF228 + 1))
  {
LABEL_16:
    __break(1u);
    return;
  }
  v21 = objc_msgSend(*((id *)&xmmword_1004AF228 + 1), "tabBarController");
  if (v21)
  {
    v22 = v21;
    v23 = objc_msgSend(v21, "tabBar");
    objc_msgSend(v23, "alpha");
    v25 = v24;

    if (v25 == 1.0)
    {

    }
    else
    {
      v26 = (void *)objc_opt_self(UIView);
      v27 = swift_allocObject(&unk_100443A08, 32, 7);
      *(_QWORD *)(v27 + 16) = v22;
      *(_QWORD *)(v27 + 24) = 0x3FF0000000000000;
      aBlock[4] = sub_1000A3430;
      aBlock[5] = v27;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10003ECA0;
      aBlock[3] = &unk_100443A20;
      v28 = _Block_copy(aBlock);
      v29 = v22;
      swift_release();
      objc_msgSend(v26, "animateWithDuration:delay:options:animations:completion:", 0, v28, 0, 0.15, 0.0);

      _Block_release(v28);
    }
  }
}

id sub_1000A2078(uint64_t a1)
{
  void *v2;
  id v3;

  objc_msgSend(*(id *)(a1 + qword_100480DC0), "setAlpha:", 0.0);
  objc_msgSend(*(id *)(a1 + qword_100480DB8), "setAlpha:", 0.0);
  if (objc_msgSend((id)objc_opt_self(Gestalt), "jasperAvailable"))
  {
    v2 = *(void **)(a1 + qword_100480D60);
    if (v2)
    {
      v3 = v2;
      sub_10018D024(v3);

    }
  }
  return sub_1000A210C();
}

id sub_1000A210C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  id result;
  id v9;
  void *v10;
  id v11;
  double v12;
  double v13;
  void *v14;
  uint64_t v15;
  void *v16;
  id v17;
  _QWORD v18[6];

  v1 = v0;
  v2 = *(void **)(v0 + qword_100480D98);
  if (v2)
    objc_msgSend(v2, "removeFromSuperview");
  if (!objc_msgSend((id)objc_opt_self(Gestalt), "jasperAvailable"))
    return objc_msgSend(*(id *)(v1 + qword_100480DC0), "removeFromSuperview");
  v3 = qword_100480D60;
  v4 = *(void **)(v1 + qword_100480D60);
  if (!v4)
    return objc_msgSend(*(id *)(v1 + qword_100480DC0), "removeFromSuperview");
  v5 = v4;
  objc_msgSend(v5, "removeFromSuperview");
  v6 = *(void **)(v1 + v3);
  *(_QWORD *)(v1 + v3) = 0;

  v7 = sub_100018148(0, (unint64_t *)&qword_10047E560, UIDevice_ptr);
  if ((static UIDevice.isIPhone()(v7) & 1) == 0)
    goto LABEL_13;
  if (qword_10047A930 != -1)
    swift_once(&qword_10047A930, sub_100083368);
  result = (id)*((_QWORD *)&xmmword_1004AF228 + 1);
  if (*((_QWORD *)&xmmword_1004AF228 + 1))
  {
    v9 = objc_msgSend(*((id *)&xmmword_1004AF228 + 1), "tabBarController");
    if (v9)
    {
      v10 = v9;
      v11 = objc_msgSend(v9, "tabBar");
      objc_msgSend(v11, "alpha");
      v13 = v12;

      if (v13 == 1.0)
      {

        return objc_msgSend(*(id *)(v1 + qword_100480DC0), "removeFromSuperview");
      }
      v14 = (void *)objc_opt_self(UIView);
      v15 = swift_allocObject(&unk_100443940, 32, 7);
      *(_QWORD *)(v15 + 16) = v10;
      *(_QWORD *)(v15 + 24) = 0x3FF0000000000000;
      v18[4] = sub_1000A2E68;
      v18[5] = v15;
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 1107296256;
      v18[2] = sub_10003ECA0;
      v18[3] = &unk_100443958;
      v16 = _Block_copy(v18);
      v17 = v10;
      swift_release();
      objc_msgSend(v14, "animateWithDuration:delay:options:animations:completion:", 0, v16, 0, 0.15, 0.0);

      _Block_release(v16);
    }
LABEL_13:

    return objc_msgSend(*(id *)(v1 + qword_100480DC0), "removeFromSuperview");
  }
  __break(1u);
  return result;
}

void sub_1000A2344(void *a1)
{
  id v1;

  v1 = a1;
  sub_1000A23B0((uint64_t)&unk_100443B98, (uint64_t)sub_1000A3428, (uint64_t)&unk_100443BB0);

}

uint64_t sub_1000A2394()
{
  return sub_1000A23B0((uint64_t)&unk_1004438A0, (uint64_t)sub_1000A2E28, (uint64_t)&unk_1004438B8);
}

uint64_t sub_1000A23B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  id v16;
  __n128 v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  _QWORD aBlock[6];

  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v23 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100018148(0, (unint64_t *)&qword_10047FB70, OS_dispatch_queue_ptr);
  v13 = (void *)static OS_dispatch_queue.main.getter();
  v14 = swift_allocObject(a1, 24, 7);
  *(_QWORD *)(v14 + 16) = v3;
  aBlock[4] = a2;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003ECA0;
  aBlock[3] = a3;
  v15 = _Block_copy(aBlock);
  v16 = v3;
  v17 = swift_release();
  static DispatchQoS.unspecified.getter(v17);
  aBlock[0] = _swiftEmptyArrayStorage;
  v18 = sub_100030E1C();
  v19 = sub_10000EDC8((uint64_t *)&unk_10047E430);
  v20 = sub_100043310((unint64_t *)&qword_10047D800, (uint64_t *)&unk_10047E430, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v19, v20, v7, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v9, v15);
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v22);
}

void sub_1000A25A0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + qword_100480DA8), "setFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(*(id *)(a1 + qword_100480DA0), "setAlpha:", 1.0);
  v2 = *(void **)(a1 + qword_100480DC0);
  objc_msgSend(v2, "setAlpha:", 0.0);
  objc_msgSend(v2, "setUserInteractionEnabled:", 0);
  *(_BYTE *)(a1 + qword_100480E00) = 0;
  *(_QWORD *)(a1 + qword_100480DD0) = 0;
  *(_QWORD *)(a1 + qword_100480DD8) = 0;
  v3 = *(void **)(a1 + qword_100480D98);
  if (v3)
    objc_msgSend(v3, "setAlpha:", 0.0);
  if (objc_msgSend((id)objc_opt_self(Gestalt), "jasperAvailable"))
  {
    v4 = *(void **)(a1 + qword_100480D60);
    if (v4)
    {
      v5 = v4;
      sub_10018D024();

    }
  }
}

uint64_t sub_1000A26D4()
{
  return sub_1000A23B0((uint64_t)&unk_1004438F0, (uint64_t)sub_1000A2E48, (uint64_t)&unk_100443908);
}

uint64_t sub_1000A26F0(char *a1, uint64_t a2, void *a3, void *a4)
{
  void *v6;
  id v7;
  id v8;
  char *v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  CGPoint v21;
  CGRect v22;

  v6 = *(void **)&a1[qword_100480DB8];
  v7 = a3;
  v8 = a4;
  v9 = a1;
  objc_msgSend(v6, "frame");
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v17 = v16;
  objc_msgSend(v8, "locationInView:", *(_QWORD *)&v9[qword_100480DC0]);
  v21.x = v18;
  v21.y = v19;
  v22.origin.x = v11;
  v22.origin.y = v13;
  v22.size.width = v15;
  v22.size.height = v17;
  LODWORD(v6) = CGRectContainsPoint(v22, v21);

  return v6 ^ 1;
}

void sub_1000A27B8()
{
  _swift_stdlib_reportUnimplementedInitializer("Measure.LabelDetailsPlatterWrapper", 34, "init()", 6, 0);
  __break(1u);
}

double sub_1000A27E4()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  swift_release();
  swift_release();

  swift_unknownObjectWeakDestroy(v0 + qword_100480D70, v1);
  swift_release();
  swift_release();
  sub_10001ADF4(v0 + qword_100480D88);

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + qword_100480E20 + 8));
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

double sub_1000A2914(uint64_t a1)
{
  uint64_t v2;
  double result;

  swift_release();
  swift_release();

  swift_unknownObjectWeakDestroy(a1 + qword_100480D70, v2);
  swift_release();
  swift_release();
  sub_10001ADF4(a1 + qword_100480D88);

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + qword_100480E20 + 8));
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t type metadata accessor for LabelDetailsPlatterWrapper(uint64_t a1)
{
  uint64_t result;

  result = qword_100480E68;
  if (!qword_100480E68)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LabelDetailsPlatterWrapper);
  return result;
}

uint64_t sub_1000A2A8C(uint64_t a1)
{
  _QWORD v2[30];

  v2[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[2] = "\b";
  v2[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[4] = &unk_1003B4A58;
  v2[5] = "\b";
  v2[6] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[7] = &unk_1003B4A70;
  v2[8] = &unk_1003B4A88;
  v2[9] = "\b";
  v2[10] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[11] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[12] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[13] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[14] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[15] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[16] = (char *)&value witness table for Builtin.Int64 + 64;
  v2[17] = (char *)&value witness table for Builtin.Int64 + 64;
  v2[18] = (char *)&value witness table for Builtin.Int64 + 64;
  v2[19] = &unk_1003B4AA0;
  v2[20] = &unk_1003B4AA0;
  v2[21] = &unk_1003B4AB8;
  v2[22] = &unk_1003B4AD0;
  v2[23] = (char *)&value witness table for Builtin.Int64 + 64;
  v2[24] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[25] = &unk_1003B4AD0;
  v2[26] = &unk_1003B4AE8;
  v2[27] = (char *)&value witness table for Builtin.Int64 + 64;
  v2[28] = &unk_1003B4B00;
  v2[29] = "\b";
  return swift_initClassMetadata2(a1, 256, 30, v2, a1 + 200);
}

uint64_t sub_1000A2B70()
{
  return type metadata accessor for LabelDetailsPlatterWrapper(0);
}

void sub_1000A2B78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  void (*v14)(void);
  id v15;
  id v16;
  double v17;
  double v18;
  _QWORD *v19;

  v1 = v0;
  v2 = qword_100480D98;
  v3 = *(void **)(v0 + qword_100480D98);
  if (v3)
  {
    objc_msgSend(v3, "removeFromSuperview");
    v4 = *(void **)(v0 + v2);
  }
  else
  {
    v4 = 0;
  }
  *(_QWORD *)(v0 + v2) = 0;

  if (*(_BYTE *)(v0 + qword_100480E00) == 1)
  {
    v6 = v0 + qword_100480D88;
    Strong = swift_unknownObjectWeakLoadStrong(v0 + qword_100480D88, v5);
    if (Strong)
    {
      v8 = Strong;
      v9 = *(_QWORD *)(v6 + 8);
      ObjectType = swift_getObjectType(Strong);
      (*(void (**)(uint64_t, uint64_t))(v9 + 40))(ObjectType, v9);
      swift_unknownObjectRelease(v8);
    }
    v11 = *(_QWORD **)(v1 + v2);
    if (v11)
    {
      v12 = qword_100480DB8;
      v13 = *(void **)(v1 + qword_100480DB8);
      v14 = *(void (**)(void))((swift_isaMask & *v11) + 0x160);
      v19 = v11;
      v15 = v13;
      v14();
      objc_msgSend(v15, "bounds");
      objc_msgSend(v15, "setBounds:");

      v16 = *(id *)(v1 + v12);
      v14();
      objc_msgSend(v16, "setCenter:", v17, v18);

      objc_msgSend(v19, "setAlpha:", 1.0);
    }
  }
}

uint64_t sub_1000A2E04()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1000A2E28()
{
  uint64_t v0;

  sub_1000A25A0(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000A2E30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000A2E40(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

id sub_1000A2E48()
{
  return sub_1000A210C();
}

void sub_1000A2E68()
{
  uint64_t v0;

  sub_100018364(*(void **)(v0 + 16), *(double *)(v0 + 24));
}

uint64_t sub_1000A2E74()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release(*(_QWORD *)(v0 + 24));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 104));
  return swift_deallocObject(v0, 120, 7);
}

void sub_1000A2EB8()
{
  uint64_t v0;

  sub_1000A1D48(*(void (**)(__n128))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), v0 + 40, *(_QWORD *)(v0 + 112));
}

uint64_t sub_1000A2ECC(uint64_t a1)
{
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 64));
  return a1;
}

unint64_t sub_1000A2EF4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100481098;
  if (!qword_100481098)
  {
    v1 = sub_100018148(255, &qword_100481088, NSRunLoop_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSRunLoop, v1);
    atomic_store(result, (unint64_t *)&qword_100481098);
  }
  return result;
}

uint64_t sub_1000A2F4C()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 32))
    swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

void sub_1000A2F88(_BYTE *a1)
{
  uint64_t v1;

  sub_1000A0484(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(__n128))(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1000A2F94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_unknownObjectWeakDestroy(v2 + 16, a2);
  return swift_deallocObject(v2, 24, 7);
}

void sub_1000A2FB8(uint64_t *a1)
{
  uint64_t v1;

  sub_1000A0544(a1, v1);
}

uint64_t sub_1000A2FC0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000A2FE4(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 64));
  return a1;
}

id sub_1000A300C(void *a1, void *a2, char a3)
{
  id v4;

  if ((a3 & 1) == 0)
  {
    v4 = a1;
    a1 = a2;
  }
  return a1;
}

void sub_1000A3034()
{
  sub_10009FB24();
}

uint64_t sub_1000A303C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_1000A304C()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  id result;
  void *v6;
  double v7;
  double v8;
  void *v9;
  double v10;
  double v11;
  uint64_t v12;
  UIContentSizeCategory v13;
  char v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  double v19;
  double v20;
  uint64_t v21;
  UIContentSizeCategory v22;
  double v23;
  id v24;
  id v25;
  double v26;
  double v27;

  sub_1000A2B78();
  v1 = *(void **)(v0 + qword_100480DA8);
  sub_100197BF8();
  v3 = v2;
  objc_msgSend(v1, "setFont:", v2);

  v4 = *(void **)(v0 + qword_100480DB0);
  result = objc_msgSend(v4, "image");
  if (!result)
  {
    __break(1u);
    goto LABEL_13;
  }
  v6 = result;
  objc_msgSend(result, "size");
  v8 = v7;

  result = objc_msgSend(v4, "image");
  if (!result)
  {
LABEL_13:
    __break(1u);
    return result;
  }
  v9 = result;
  objc_msgSend(result, "size");
  v11 = v10;

  if (qword_10047AE50 != -1)
    swift_once(&qword_10047AE50, sub_100195CE8);
  v12 = qword_1004AF948;
  if (qword_10047A738 != -1)
    swift_once(&qword_10047A738, sub_10000E4DC);
  v13 = (UIContentSizeCategory)(id)qword_1004AF068;
  v14 = static UIContentSizeCategory.> infix(_:_:)(v13, UIContentSizeCategoryAccessibilityLarge);

  if ((v14 & 1) != 0)
  {

    v13 = UIContentSizeCategoryAccessibilityLarge;
  }
  v15 = (void *)objc_opt_self(UIFont);
  v16 = (void *)objc_opt_self(UITraitCollection);
  v17 = objc_msgSend(v16, "traitCollectionWithPreferredContentSizeCategory:", v13);

  v18 = objc_msgSend(v15, "preferredFontForTextStyle:compatibleWithTraitCollection:", v12, v17);
  objc_msgSend(v18, "pointSize");
  v20 = v19;

  v21 = qword_1004AF948;
  v22 = (UIContentSizeCategory)(id)qword_1004AF068;
  LOBYTE(v17) = static UIContentSizeCategory.> infix(_:_:)(v22, UIContentSizeCategoryAccessibilityLarge);

  if ((v17 & 1) != 0)
  {

    v22 = UIContentSizeCategoryAccessibilityLarge;
  }
  v23 = v8 / v11 * (v20 * 0.9);
  v24 = objc_msgSend(v16, "traitCollectionWithPreferredContentSizeCategory:", v22);

  v25 = objc_msgSend(v15, "preferredFontForTextStyle:compatibleWithTraitCollection:", v21, v24);
  objc_msgSend(v25, "pointSize");
  v27 = v26;

  return objc_msgSend(v4, "setBounds:", 0.0, 0.0, v23, v27 * 0.9);
}

uint64_t sub_1000A3320()
{
  uint64_t v0;

  return swift_deallocObject(v0, 48, 7);
}

id sub_1000A334C()
{
  uint64_t v0;

  return sub_10009FD8C(*(_QWORD **)(v0 + 16), *(_QWORD *)(v0 + 24), *(double *)(v0 + 32), *(double *)(v0 + 40));
}

uint64_t sub_1000A3358(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000EDC8((uint64_t *)&unk_1004810B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A33A0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
  if (*(_QWORD *)(v0 + 104))
    swift_release(*(_QWORD *)(v0 + 112));
  return swift_deallocObject(v0, 120, 7);
}

void sub_1000A33E4()
{
  uint64_t v0;

  sub_1000A1734(*(_QWORD *)(v0 + 16), v0 + 24, *(_QWORD *)(v0 + 96), *(void (**)(__n128))(v0 + 104), *(_QWORD *)(v0 + 112));
}

void sub_1000A33F8(unint64_t *a1)
{
  sub_10009FB78(*a1);
}

id sub_1000A3428()
{
  uint64_t v0;

  return sub_1000A2078(*(_QWORD *)(v0 + 16));
}

char *sub_1000A3480(uint64_t a1)
{
  uint64_t v2;
  double *v3;
  char *result;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t KeyPath;
  id v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  int v15;
  double *v16;

  if ((unint64_t)a1 >> 62)
    goto LABEL_15;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v3 = _swiftEmptyArrayStorage;
    if (!v2)
      return (char *)v3;
    v16 = _swiftEmptyArrayStorage;
    result = sub_1000A567C(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0)
      break;
    v5 = 0;
    v3 = v16;
    while (v2 != v5)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
      else
        v6 = *(id *)(a1 + 8 * v5 + 32);
      v7 = v6;
      KeyPath = swift_getKeyPath(&unk_1003B4BE0);
      v14 = v7;
      v9 = v7;
      swift_getAtKeyPath(&v15, &v14, KeyPath);
      swift_release();

      v10 = v15;
      v16 = v3;
      v12 = *((_QWORD *)v3 + 2);
      v11 = *((_QWORD *)v3 + 3);
      if (v12 >= v11 >> 1)
      {
        sub_1000A567C((char *)(v11 > 1), v12 + 1, 1);
        v3 = v16;
      }
      ++v5;
      *((_QWORD *)v3 + 2) = v12 + 1;
      *((_DWORD *)v3 + v12 + 8) = v10;
      if (v2 == v5)
        return (char *)v3;
    }
    __break(1u);
LABEL_15:
    if (a1 < 0)
      v13 = a1;
    else
      v13 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v13);
    swift_bridgeObjectRelease(a1);
  }
  __break(1u);
  return result;
}

void sub_1000A3610(char **a1)
{
  char *v2;
  uint64_t v3;
  _QWORD v4[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_1000A7958((uint64_t)v2);
  v3 = *((_QWORD *)v2 + 2);
  v4[0] = v2 + 32;
  v4[1] = v3;
  sub_1000A6FEC(v4);
  *a1 = v2;
}

double sub_1000A3678()
{
  uint64_t v0;
  double result;

  swift_retain();
  StateValue.ifUpdated(_:)(sub_1000A825C, v0);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

void sub_1000A36B4(void **a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  id v7;

  v1 = *a1;
  if (*a1)
  {
    v2 = type metadata accessor for WorldRectangle(0);
    v3 = swift_dynamicCastClass(v1, v2);
    if (v3)
    {
      v4 = (_QWORD *)v3;
      v7 = v1;
      v5 = static os_log_type_t.debug.getter();
      sub_1000A8264();
      v6 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, v6, "Meas L adding rectangle in HistoryTracker update", 48, 2, _swiftEmptyArrayStorage);

      sub_1000A3788(v4);
    }
  }
}

void sub_1000A3788(_QWORD *a1)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String *v15;
  uint64_t (*v16)(void);
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  __n128 v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  __n128 v26;
  float v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  __n128 v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  __n128 v35;
  uint64_t v36;
  _QWORD *v37;
  __n128 v38;
  float (*v39)(__n128);
  float v40;
  float v41;
  float v42;
  float v43;
  int v44;
  uint64_t v45;
  float v46;
  float v47;
  void (*v48)(__n128);
  __n128 v49;
  id v50;
  _BOOL8 v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  id v58;
  Swift::String v59;
  Swift::String v60;
  Swift::String v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v66;
  void (*v67)(__n128);
  __n128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  BOOL v77;
  uint64_t v78;
  void (*v79)(__n128);
  __n128 v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  void *object;
  void (*v85)(__n128);
  __n128 v86;
  void *v87;
  char *v88;
  uint64_t v89;
  _QWORD *v90;
  int v91;
  __int128 v92;
  int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  int v102;
  int v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  int v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  int v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  int v142;
  uint64_t v143;
  int v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  _QWORD *v164;
  BOOL v165;
  char v166;
  char v167;
  char v168;
  char v169;
  char v170;
  char v171;
  char v172;
  char v173;
  char v174;
  char v175;
  char v176;
  _QWORD v177[4];
  int v178;
  char v179;
  char v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  char v186;
  char v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  char v193;
  char v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  char v200;
  char v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  char v207;
  char v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  char v214;
  char v215;
  __int128 v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  char v220;
  char v221;
  __int128 v222;
  uint64_t v223;
  uint64_t v224;
  int v225;
  char v226;
  char v227;
  __int128 v228;
  uint64_t v229;
  uint64_t v230;
  int v231;
  char v232;
  char v233;
  __int128 v234;
  uint64_t v235;
  uint64_t v236;
  int v237;
  char v238;
  char v239;
  __int128 v240;
  uint64_t v241;
  uint64_t v242;
  int v243;
  char v244;
  char v245;
  __int128 v246;
  uint64_t v247;
  uint64_t v248;
  int v249;
  BOOL v250;
  char v251;
  __int128 v252;
  _BYTE v253[22];
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  int v258;
  unsigned __int8 v259;
  unsigned __int8 v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  int v265;
  unsigned __int8 v266;
  unsigned __int8 v267;
  __int128 v268;
  _BYTE v269[22];
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  int v274;
  unsigned __int8 v275;
  unsigned __int8 v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  int v281;
  unsigned __int8 v282;
  unsigned __int8 v283;
  __int128 v284;
  uint64_t v285;
  uint64_t v286;
  int v287;
  char v288;
  unsigned __int8 v289;
  __int128 v290;
  uint64_t v291;
  uint64_t v292;
  int v293;
  char v294;
  unsigned __int8 v295;
  __int128 v296;
  uint64_t v297;
  uint64_t v298;
  int v299;
  char v300;
  unsigned __int8 v301;
  __int128 v302;
  uint64_t v303;
  uint64_t v304;
  int v305;
  char v306;
  unsigned __int8 v307;
  __int128 v308;
  uint64_t v309;
  uint64_t v310;
  int v311;
  char v312;
  unsigned __int8 v313;
  __int128 v314;
  uint64_t v315;
  uint64_t v316;
  int v317;
  char v318;
  unsigned __int8 v319;
  __int128 v320;
  _BYTE v321[22];
  char v322;
  char v323[8];
  __int128 v324;
  _BYTE v325[22];
  char v326;
  char v327[8];
  float v328;
  char v329;
  char v330;
  float v331;
  char v332;
  char v333[17];
  Swift::String v334;

  v3 = v1;
  v5 = type metadata accessor for MeasurementsHistory(0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v88 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v88 - v9;
  v11 = type metadata accessor for MeasurementHistoryItem(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (Swift::String *)((char *)&v88 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  if ((*(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0xD0))(v13) == 5)
  {
    v163 = v10;
    v16 = *(uint64_t (**)(void))((swift_isaMask & *a1) + 0x230);
    v17 = a1;
    v18 = v16();
    v19 = v18;
    if ((v18 & 0xC000000000000001) != 0)
    {
      v20 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v18);
    }
    else
    {
      if (!*(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        goto LABEL_43;
      }
      v20 = *(id *)(v18 + 32);
    }
    v21 = v20;
    v22 = swift_bridgeObjectRelease(v19);
    v2 = (*(float (**)(__n128))((swift_isaMask & *v21) + 0x340))(v22);

    v23 = v16();
    v17 = (_QWORD *)v23;
    if ((v23 & 0xC000000000000001) == 0)
    {
      if (*(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
      {
        __break(1u);
        goto LABEL_45;
      }
      v24 = *(id *)(v23 + 40);
LABEL_8:
      v25 = v24;
      v26 = swift_bridgeObjectRelease(v17);
      v27 = (*(float (**)(__n128))((swift_isaMask & *v25) + 0x340))(v26);

      v28 = v16();
      v17 = (_QWORD *)v28;
      v29 = v28 & 0xC000000000000001;
      if (v27 < v2)
      {
        if (!v29)
        {
          if (!*(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_48:
            v164 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v16);
            v33 = v25;
LABEL_22:
            v38 = swift_bridgeObjectRelease(v16);
            v39 = *(float (**)(__n128))((swift_isaMask & *v33) + 0x340);
            v90 = v33;
            v40 = v39(v38);
            sub_1000A7B84((uint64_t)&v252, v40);
            v160 = *((_QWORD *)&v252 + 1);
            v161 = v252;
            v159 = *(_QWORD *)v253;
            v158 = *(_QWORD *)&v253[8];
            v157 = *(_DWORD *)&v253[16];
            LODWORD(v143) = v253[20];
            v156 = v253[21];
            v155 = v254;
            v154 = v255;
            v153 = v256;
            v152 = v257;
            v151 = v258;
            v142 = v259;
            v150 = v260;
            v148 = v262;
            v149 = v261;
            v146 = v264;
            v147 = v263;
            v145 = v265;
            v141 = v266;
            v324 = v252;
            *(_OWORD *)v325 = *(_OWORD *)v253;
            *(_QWORD *)&v325[14] = *(_QWORD *)&v253[14];
            v144 = v267;
            sub_100012C58((uint64_t)&v325[16], (uint64_t)v327, &qword_10047F0A8);
            sub_100012C58((uint64_t)v327, (uint64_t)&v328, &qword_10047F0A8);
            if ((v329 & 1) != 0)
            {
LABEL_55:
              __break(1u);
              goto LABEL_56;
            }
            v88 = v8;
            v89 = v12;
            v41 = v328;
            sub_100012C58((uint64_t)&v325[21], (uint64_t)&v326, &qword_100481268);
            sub_100012C58((uint64_t)&v326, (uint64_t)&v330, &qword_100481268);
            if (v330 == 4)
            {
LABEL_56:
              __break(1u);
              goto LABEL_57;
            }
            v42 = sub_10010CC14(v330, 0, v41);
            v43 = (*(float (**)(void))((swift_isaMask & *v164) + 0x340))();
            sub_1000A7B84((uint64_t)&v268, v43);
            v134 = *((_QWORD *)&v268 + 1);
            v135 = v268;
            v132 = *(_QWORD *)&v269[8];
            v133 = *(_QWORD *)v269;
            v131 = *(_DWORD *)&v269[16];
            v124 = v269[20];
            v130 = v269[21];
            v128 = v271;
            v129 = v270;
            v126 = v273;
            v127 = v272;
            v125 = v274;
            v123 = v275;
            v44 = v276;
            v45 = v277;
            v139 = v279;
            v140 = v278;
            v138 = v280;
            v137 = v281;
            v122 = v282;
            v320 = v268;
            *(_OWORD *)v321 = *(_OWORD *)v269;
            *(_QWORD *)&v321[14] = *(_QWORD *)&v269[14];
            v136 = v283;
            sub_100012C58((uint64_t)&v321[16], (uint64_t)v323, &qword_10047F0A8);
            sub_100012C58((uint64_t)v323, (uint64_t)&v331, &qword_10047F0A8);
            if ((v332 & 1) != 0)
            {
LABEL_57:
              __break(1u);
              goto LABEL_58;
            }
            v120 = v45;
            v121 = v44;
            v162 = v11;
            v46 = v331;
            sub_100012C58((uint64_t)&v321[21], (uint64_t)&v322, &qword_100481268);
            sub_100012C58((uint64_t)&v322, (uint64_t)v333, &qword_100481268);
            if (v333[0] == 4)
            {
LABEL_58:
              __break(1u);
              return;
            }
            v47 = sub_10010CC14(v333[0], 0, v46);
            v48 = *(void (**)(__n128))(**(_QWORD **)(v3 + 88) + 144);
            v49 = swift_retain();
            v48(v49);
            swift_release();
            v50 = sub_10009BF0C();
            v51 = v50 == 0;
            sub_10010CD7C((uint64_t)v50, 1, 0, 0, (uint64_t *)&v284, v42 * v47);
            v117 = v284;
            v115 = v286;
            v116 = v285;
            v114 = v287;
            v119 = v3;
            v52 = v288;
            v118 = v289;
            sub_10010CD7C((uint64_t)v50, 0, 1, 0, (uint64_t *)&v290, v42 * v47);
            v112 = v290;
            v110 = v292;
            v111 = v291;
            v109 = v293;
            LOBYTE(v50) = v294;
            v113 = v295;
            sub_10010CD7C(v51, 0, 0, 0, (uint64_t *)&v296, v42 * v47);
            v107 = v296;
            v105 = v298;
            v106 = v297;
            v104 = v299;
            LOBYTE(v51) = v300;
            v108 = v301;
            sub_1000A7B84((uint64_t)&v302, sqrtf((float)(v42 * v42) + (float)(v47 * v47)));
            v92 = v302;
            v53 = v303;
            v54 = v304;
            v91 = v305;
            v97 = v308;
            v95 = v310;
            v96 = v309;
            v93 = v307;
            v94 = v311;
            v102 = v313;
            v101 = v314;
            v99 = v316;
            v100 = v315;
            v98 = v317;
            v103 = v319;
            v176 = v143;
            v175 = v142;
            v174 = v141;
            v173 = v124;
            v172 = v123;
            v171 = v122;
            v170 = v306;
            v169 = v312;
            v168 = v318;
            v167 = v52;
            v166 = (char)v50;
            v165 = v51;
            v55 = (*(uint64_t (**)(void))((swift_isaMask & *a1) + 0xB8))();
            v57 = v56;
            v58 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
            v334._object = (void *)0xE000000000000000;
            v59._object = (void *)0x80000001003DD1A0;
            v59._countAndFlagsBits = 0xD00000000000001DLL;
            v60._countAndFlagsBits = 0;
            v60._object = (void *)0xE000000000000000;
            v334._countAndFlagsBits = 0;
            v61 = NSLocalizedString(_:tableName:bundle:value:comment:)(v59, (Swift::String_optional)0, (NSBundle)v58, v60, v334);

            v62 = v162;
            v63 = (uint64_t)v15 + *(int *)(v162 + 24);
            v64 = type metadata accessor for MeasurementCapture(0);
            v65 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56);
            v143 = v63;
            v65(v63, 1, 1, v64);
            v177[0] = v161;
            v177[1] = v160;
            v177[2] = v159;
            v177[3] = v158;
            v178 = v157;
            v180 = v156;
            v181 = v155;
            v182 = v154;
            v183 = v153;
            v184 = v152;
            v185 = v151;
            v187 = v150;
            v188 = v149;
            v189 = v148;
            v190 = v147;
            v191 = v146;
            v192 = v145;
            v194 = v144;
            v195 = v135;
            v196 = v134;
            v197 = v133;
            v198 = v132;
            v199 = v131;
            v201 = v130;
            v202 = v129;
            v203 = v128;
            v204 = v127;
            v205 = v126;
            v206 = v125;
            v179 = v176;
            v186 = v175;
            v193 = v174;
            v200 = v173;
            v207 = v172;
            v208 = v121;
            v209 = v120;
            v210 = v140;
            v211 = v139;
            v212 = v138;
            v213 = v137;
            v214 = v171;
            v215 = v136;
            v216 = v92;
            v217 = v53;
            v218 = v54;
            v219 = v91;
            v220 = v170;
            v221 = v93;
            v222 = v97;
            v223 = v96;
            v224 = v95;
            v225 = v94;
            v226 = v169;
            v227 = v102;
            v228 = v101;
            v229 = v100;
            v230 = v99;
            v231 = v98;
            v232 = v168;
            v233 = v103;
            v234 = v117;
            v235 = v116;
            v236 = v115;
            v237 = v114;
            v238 = v167;
            v239 = v118;
            v240 = v112;
            v241 = v111;
            v242 = v110;
            v243 = v109;
            v244 = v166;
            v245 = v113;
            v246 = v107;
            v247 = v106;
            v248 = v105;
            v249 = v104;
            v250 = v165;
            v251 = v108;
            sub_1000A82A0((uint64_t)v177);
            v15->_countAndFlagsBits = v55;
            v15->_object = v57;
            v15[1] = v61;
            sub_10001F970(v177, (char *)v15 + *(int *)(v62 + 28));
            *((_BYTE *)&v15->_countAndFlagsBits + *(int *)(v62 + 32)) = 1;
            v66 = v119;
            v67 = *(void (**)(__n128))(**(_QWORD **)(v119 + 64) + 144);
            v68 = swift_retain();
            v69 = (uint64_t)v163;
            v67(v68);
            swift_release();
            v70 = *(_QWORD *)v69;
            v71 = *(_QWORD *)(*(_QWORD *)v69 + 16);
            if (!v71)
            {
              v78 = v69;
              goto LABEL_39;
            }
            v72 = 0;
            v73 = (*(unsigned __int8 *)(v89 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v89 + 80);
            v74 = *(_QWORD *)(v89 + 72);
            while (1)
            {
              v75 = *(_QWORD *)(v70 + v73);
              v76 = *(void **)(v70 + v73 + 8);
              v77 = v75 == v55 && v76 == v57;
              if (v77 || (_stringCompareWithSmolCheck(_:_:expecting:)(v75, v76, v55, v57, 0) & 1) != 0)
                break;
              ++v72;
              v73 += v74;
              if (v71 == v72)
              {
                v78 = (uint64_t)v163;
                goto LABEL_39;
              }
            }
            sub_1000258F8((uint64_t)v163, type metadata accessor for MeasurementsHistory);
            v79 = *(void (**)(__n128))(**(_QWORD **)(v66 + 64) + 144);
            v80 = swift_retain();
            v78 = (uint64_t)v88;
            v79(v80);
            swift_release();
            if (v72 < *(_QWORD *)(*(_QWORD *)v78 + 16))
            {
              v81 = *(_QWORD *)v78 + v73;
              v83 = *(_QWORD *)(v81 + 16);
              v82 = *(void **)(v81 + 24);
              object = v15[1]._object;
              swift_bridgeObjectRetain(v82);
              swift_bridgeObjectRelease(object);
              v15[1]._countAndFlagsBits = v83;
              v15[1]._object = v82;
              sub_1000258F8(v78, type metadata accessor for MeasurementsHistory);
              v85 = *(void (**)(__n128))(**(_QWORD **)(v66 + 64) + 144);
              v86 = swift_retain();
              v85(v86);
              swift_release();
              if (v72 < *(_QWORD *)(*(_QWORD *)v78 + 16))
              {
                sub_1000A7E6C(*(_QWORD *)v78 + *(int *)(v162 + 24) + v73, v143);
LABEL_39:
                v87 = v90;
                sub_1000258F8(v78, type metadata accessor for MeasurementsHistory);
                sub_1000A4E90(v15, 1);

                sub_1000258F8((uint64_t)v15, type metadata accessor for MeasurementHistoryItem);
                return;
              }
              goto LABEL_54;
            }
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
            goto LABEL_55;
          }
          v30 = *(id *)(v28 + 32);
LABEL_12:
          v25 = v30;
          v31 = swift_bridgeObjectRelease(v17);
          v32 = ((uint64_t (*)(__n128))v16)(v31);
          v16 = (uint64_t (*)(void))v32;
          if ((v32 & 0xC000000000000001) == 0)
          {
            if (*(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10) >= 2uLL)
            {
              v33 = v25;
              v164 = *(id *)(v32 + 40);
              goto LABEL_22;
            }
            __break(1u);
LABEL_52:
            __break(1u);
            goto LABEL_53;
          }
          goto LABEL_48;
        }
LABEL_45:
        v30 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v17);
        goto LABEL_12;
      }
      if (v29)
      {
        v34 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v28);
      }
      else
      {
        if (!*(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          goto LABEL_50;
        }
        v34 = *(id *)(v28 + 32);
      }
      v164 = v34;
      v35 = swift_bridgeObjectRelease(v17);
      v36 = ((uint64_t (*)(__n128))v16)(v35);
      v16 = (uint64_t (*)(void))v36;
      if ((v36 & 0xC000000000000001) == 0)
      {
        if (*(_QWORD *)((v36 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
          goto LABEL_52;
        v37 = *(id *)(v36 + 40);
        goto LABEL_21;
      }
LABEL_50:
      v37 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v16);
LABEL_21:
      v33 = v37;
      goto LABEL_22;
    }
LABEL_43:
    v24 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v17);
    goto LABEL_8;
  }
}

void sub_1000A445C(_QWORD *a1)
{
  _QWORD **v1;
  _QWORD **v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD **v27;
  void *v28;
  uint64_t v29;
  void (*v30)(__n128);
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  _QWORD **v42;
  void (*v43)(__n128);
  __n128 v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(__n128);
  __n128 v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  int *v54;
  char *v55;
  uint64_t (*v56)(void *);
  _QWORD **object;
  char *v58;
  _BYTE v59[272];
  _BYTE v60[848];
  Swift::String v61;

  v2 = v1;
  v4 = type metadata accessor for MeasurementsHistory(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v53 - v8;
  v10 = (int *)type metadata accessor for MeasurementHistoryItem(0);
  v11 = *((_QWORD *)v10 - 1);
  v12 = __chkstk_darwin(v10);
  v14 = (uint64_t *)((char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0xD0))(v12);
  if (v15 > 7 || ((1 << v15) & 0x98) == 0)
  {
    v55 = v7;
    sub_1000A4850(a1, (uint64_t)v59);
    v17 = (*(uint64_t (**)(void))((swift_isaMask & *a1) + 0xB8))();
    v58 = v9;
    v19 = v18;
    v20 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v61._object = (void *)0xE000000000000000;
    v21._object = (void *)0x80000001003DD0F0;
    v21._countAndFlagsBits = 0xD00000000000001ALL;
    v22._countAndFlagsBits = 0;
    v22._object = (void *)0xE000000000000000;
    v61._countAndFlagsBits = 0;
    v23 = NSLocalizedString(_:tableName:bundle:value:comment:)(v21, (Swift::String_optional)0, (NSBundle)v20, v22, v61);
    object = (_QWORD **)v23._object;

    v24 = (uint64_t)v14 + v10[6];
    v25 = type metadata accessor for MeasurementCapture(0);
    v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56);
    v53 = v24;
    v26(v24, 1, 1, v25);
    memcpy(v60, v59, 0x10DuLL);
    sub_1000A7D70((uint64_t)v60);
    *v14 = v17;
    v14[1] = v19;
    v27 = object;
    v14[2] = v23._countAndFlagsBits;
    v14[3] = (uint64_t)v27;
    v28 = sub_10001F970(v60, (char *)v14 + v10[7]);
    v54 = v10;
    v29 = v10[8];
    v56 = *(uint64_t (**)(void *))((swift_isaMask & *a1) + 0x2C8);
    *((_BYTE *)v14 + v29) = v56(v28) & 1;
    object = v2;
    v30 = *(void (**)(__n128))(*v2[8] + 144);
    v31 = swift_retain();
    v32 = (uint64_t)v58;
    v30(v31);
    swift_release();
    v33 = *(_QWORD *)v32;
    v34 = *(_QWORD *)(*(_QWORD *)v32 + 16);
    if (v34)
    {
      v35 = 0;
      v36 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
      v37 = *(_QWORD *)(v11 + 72);
      while (1)
      {
        v38 = *(_QWORD *)(v33 + v36);
        v39 = *(_QWORD *)(v33 + v36 + 8);
        v40 = v38 == v17 && v39 == v19;
        if (v40 || (_stringCompareWithSmolCheck(_:_:expecting:)(v38, v39, v17, v19, 0) & 1) != 0)
          break;
        ++v35;
        v36 += v37;
        if (v34 == v35)
        {
          v41 = (uint64_t)v58;
          goto LABEL_19;
        }
      }
      sub_1000258F8((uint64_t)v58, type metadata accessor for MeasurementsHistory);
      v42 = object;
      v43 = *(void (**)(__n128))(*object[8] + 144);
      v44 = swift_retain();
      v41 = (uint64_t)v55;
      v43(v44);
      swift_release();
      if (v35 >= *(_QWORD *)(*(_QWORD *)v41 + 16))
      {
        __break(1u);
      }
      else
      {
        v45 = *(_QWORD *)v41 + v36;
        v47 = *(_QWORD *)(v45 + 16);
        v46 = *(_QWORD *)(v45 + 24);
        v48 = v14[3];
        swift_bridgeObjectRetain(v46);
        swift_bridgeObjectRelease(v48);
        v14[2] = v47;
        v14[3] = v46;
        sub_1000258F8(v41, type metadata accessor for MeasurementsHistory);
        v49 = *(void (**)(__n128))(*v42[8] + 144);
        v50 = swift_retain();
        v49(v50);
        swift_release();
        if (v35 < *(_QWORD *)(*(_QWORD *)v41 + 16))
        {
          sub_1000A7E6C(*(_QWORD *)v41 + v54[6] + v36, v53);
LABEL_19:
          v51 = sub_1000258F8(v41, type metadata accessor for MeasurementsHistory);
          v52 = v56((void *)v51);
          sub_1000A4E90(v14, v52 & 1);
          sub_1000258F8((uint64_t)v14, type metadata accessor for MeasurementHistoryItem);
          return;
        }
      }
      __break(1u);
      return;
    }
    v41 = v32;
    goto LABEL_19;
  }
}

void sub_1000A4850(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  float v5;
  char v6;
  void (*v7)(char **__return_ptr, __n128);
  __n128 v8;
  __n128 v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  __n128 v21;
  float v22;
  const mach_header_64 *v23;
  const mach_header_64 *v24;
  const mach_header_64 *v25;
  uint64_t (*v26)(__n128);
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  __n128 v31;
  __n128 v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  float32x4_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  __n128 v45;
  float32x4_t v46;
  float32x4_t v47;
  int32x4_t v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x4_t v51;
  float v52;
  float v53;
  _QWORD *v54;
  __n128 v55;
  __n128 v56;
  __n128 v57;
  __n128 v58;
  __int128 v59;
  __n128 v60;
  __n128 v61;
  __n128 v62;
  __n128 v63;
  __n128 v64;
  __n128 v65;
  __n128 v66;
  __n128 v67;
  __n128 v68;
  __n128 v69;
  char v70;
  __n128 v71;
  float32x4_t v72;
  __n128 v73;
  __n128 v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  __n128 v82;
  unint64_t v83;
  __n128 v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  __n128 v89;
  char *v90;
  unint64_t v91;
  __n128 v92;
  char v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  char v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  char v112;
  char *v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unsigned int v122;
  char v123;
  unsigned __int8 v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int v129;
  char v130;
  unsigned __int8 v131;
  _QWORD v132[4];
  int v133;
  char v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  char v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  char v148;
  char v149;

  v5 = (*(float (**)(void))((swift_isaMask & *a1) + 0x340))();
  sub_1000A7B84((uint64_t)v132, v5);
  v97 = v132[1];
  v98 = v132[0];
  v95 = v132[3];
  v96 = v132[2];
  v94 = v133;
  v112 = v134;
  v111 = v135;
  v109 = v137;
  v110 = v136;
  v107 = v139;
  v108 = v138;
  v106 = v140;
  v105 = v141;
  v104 = v142;
  v102 = v144;
  v103 = v143;
  v100 = v146;
  v101 = v145;
  v99 = v147;
  v93 = v148;
  v6 = v149;
  v7 = *(void (**)(char **__return_ptr, __n128))(**(_QWORD **)(v2 + 80) + 144);
  v8 = swift_retain();
  v7(&v113, v8);
  v9 = swift_release();
  if ((v121 & 1) != 0)
  {
    v90 = 0;
    v85 = 0;
    v87 = 0;
    v83 = 0;
    v75 = 0;
    v76 = 0;
    v80 = 0;
    v81 = 0;
    v78 = 0;
    v79 = 0;
    v10 = 0;
    v77 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
  }
  else
  {
    v70 = v6;
    v15 = v113;
    v14 = v114;
    v16 = v115;
    v17 = v116;
    v18 = v117;
    v86 = v119;
    v88 = v118;
    v91 = v120;
    v19 = (*(uint64_t (**)(__n128))((swift_isaMask & *a1) + 0x250))(v9);
    v20 = sub_1000A3480(v19);
    swift_bridgeObjectRelease(v19);
    v113 = v20;
    swift_bridgeObjectRetain(v20);
    sub_1000A3610(&v113);
    swift_bridgeObjectRelease(v20);
    if (!*((_QWORD *)v113 + 2))
    {
LABEL_31:
      swift_release();
      __break(1u);
      swift_release();
      __break(1u);
      return;
    }
    v21.n128_u64[0] = (unint64_t)v15;
    v21.n128_u64[1] = v14;
    v84 = v21;
    v21.n128_u64[0] = v16;
    v21.n128_u64[1] = v17;
    v82 = v21;
    v21.n128_u64[0] = v18;
    v21.n128_u64[1] = v88;
    v89 = v21;
    v21.n128_u64[0] = v86;
    v21.n128_u64[1] = v91;
    v92 = v21;
    v22 = *((float *)v113 + 8);
    swift_release();
    v9.n128_f64[0] = simd_float4x4.position.getter(v84, v82, v89, v92);
    v9.n128_f32[0] = v22 - v9.n128_f32[1];
    if ((float)(v22 - v9.n128_f32[1]) >= 0.00000011921)
    {
      sub_1000A7F50((uint64_t)&v113, v9.n128_f32[0]);
      v90 = v113;
      v85 = v115;
      v87 = v114;
      v83 = v116;
      v81 = v118;
      v80 = v119;
      v79 = v120;
      v78 = v121;
      v11 = v127;
      v76 = v126;
      v77 = v125;
      if (BYTE4(v117))
        v23 = &_mh_execute_header;
      else
        v23 = 0;
      v75 = (unint64_t)v23 | v117 | ((unint64_t)BYTE5(v117) << 40);
      if (v123)
        v24 = &_mh_execute_header;
      else
        v24 = 0;
      v10 = (unint64_t)v24 | v122 | ((unint64_t)v124 << 40);
      if (v130)
        v25 = &_mh_execute_header;
      else
        v25 = 0;
      v13 = (unint64_t)v25 | v129 | ((unint64_t)v131 << 40);
      v12 = v128;
    }
    else
    {
      v90 = 0;
      v85 = 0;
      v87 = 0;
      v83 = 0;
      v75 = 0;
      v76 = 0;
      v80 = 0;
      v81 = 0;
      v78 = 0;
      v79 = 0;
      v10 = 0;
      v77 = 0;
      v11 = 0;
      v12 = 0;
      v13 = 0;
    }
    v6 = v70;
  }
  v26 = *(uint64_t (**)(__n128))((swift_isaMask & *a1) + 0x250);
  v27 = v26(v9);
  v28 = v27;
  if ((v27 & 0xC000000000000001) != 0)
  {
    v29 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v27);
  }
  else
  {
    if (*(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
    {
      __break(1u);
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    v29 = *(id *)(v27 + 40);
  }
  v30 = v29;
  v31 = swift_bridgeObjectRelease(v28);
  v32.n128_f64[0] = (*(double (**)(__n128))((swift_isaMask & *v30) + 0x2B0))(v31);
  v67 = v33;
  v71 = v32;
  v61 = v35;
  v64 = v34;

  *(double *)v36.i64 = simd_float4x4.position.getter(v71, v67, v64, v61);
  v72 = v36;
  v37 = ((uint64_t (*)(void))v26)();
  v38 = v37;
  if ((v37 & 0xC000000000000001) != 0)
  {
    v39 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v37);
    goto LABEL_23;
  }
  if (!*(_QWORD *)((v37 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_30;
  v39 = *(id *)(v37 + 32);
LABEL_23:
  v40 = v39;
  v41 = swift_bridgeObjectRelease(v38);
  v42.n128_f64[0] = (*(double (**)(__n128))((swift_isaMask & *v40) + 0x2B0))(v41);
  v65 = v43;
  v68 = v42;
  v60 = v45;
  v62 = v44;

  *(double *)v46.i64 = simd_float4x4.position.getter(v68, v65, v62, v60);
  v47 = vsubq_f32(v72, v46);
  v48 = (int32x4_t)vmulq_f32(v47, v47);
  v48.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v48, 2), vadd_f32(*(float32x2_t *)v48.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v48.i8, 1))).u32[0];
  v49 = vrsqrte_f32((float32x2_t)v48.u32[0]);
  v50 = vmul_f32(v49, vrsqrts_f32((float32x2_t)v48.u32[0], vmul_f32(v49, v49)));
  v73 = (__n128)vmulq_n_f32(v47, vmul_f32(v50, vrsqrts_f32((float32x2_t)v48.u32[0], vmul_f32(v50, v50))).f32[0]);
  v51 = vmulq_f32(*(float32x4_t *)SIMD3<>.up.unsafeMutableAddressor(v73), (float32x4_t)v73);
  v52 = fabsf(acosf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v51, 2), vaddq_f32(v51, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v51.f32, 1))).f32[0])* 57.296);
  if (v52 >= 90.0)
    v53 = v52 + -90.0;
  else
    v53 = 90.0 - v52;
  v54 = (_QWORD *)(*(uint64_t (**)(void))((swift_isaMask & *a1) + 0x268))();
  v55.n128_f64[0] = (*(double (**)(void))((swift_isaMask & *v54) + 0x2B0))();
  v69 = v56;
  v74 = v55;
  v63 = v58;
  v66 = v57;

  *(double *)&v59 = simd_float4x4.position.getter(v74, v69, v66, v63);
  *(_QWORD *)a2 = v98;
  *(_QWORD *)(a2 + 8) = v97;
  *(_QWORD *)(a2 + 16) = v96;
  *(_QWORD *)(a2 + 24) = v95;
  *(_DWORD *)(a2 + 32) = v94;
  *(_BYTE *)(a2 + 36) = v112;
  *(_BYTE *)(a2 + 37) = v111;
  *(_QWORD *)(a2 + 40) = v110;
  *(_QWORD *)(a2 + 48) = v109;
  *(_QWORD *)(a2 + 56) = v108;
  *(_QWORD *)(a2 + 64) = v107;
  *(_DWORD *)(a2 + 72) = v106;
  *(_BYTE *)(a2 + 76) = v105;
  *(_BYTE *)(a2 + 77) = v104;
  *(_QWORD *)(a2 + 80) = v103;
  *(_QWORD *)(a2 + 88) = v102;
  *(_QWORD *)(a2 + 96) = v101;
  *(_QWORD *)(a2 + 104) = v100;
  *(_DWORD *)(a2 + 112) = v99;
  *(_BYTE *)(a2 + 116) = v93;
  *(_BYTE *)(a2 + 117) = v6;
  *(_OWORD *)(a2 + 128) = v59;
  *(_QWORD *)(a2 + 144) = v90;
  *(_QWORD *)(a2 + 152) = v87;
  *(_QWORD *)(a2 + 160) = v85;
  *(_QWORD *)(a2 + 168) = v83;
  *(_QWORD *)(a2 + 176) = v75;
  *(_QWORD *)(a2 + 184) = v81;
  *(_QWORD *)(a2 + 192) = v80;
  *(_QWORD *)(a2 + 200) = v79;
  *(_QWORD *)(a2 + 208) = v78;
  *(_QWORD *)(a2 + 216) = v10;
  *(_QWORD *)(a2 + 224) = v77;
  *(_QWORD *)(a2 + 232) = v76;
  *(_QWORD *)(a2 + 240) = v11;
  *(_QWORD *)(a2 + 248) = v12;
  *(_WORD *)(a2 + 260) = WORD2(v13);
  *(_DWORD *)(a2 + 256) = v13;
  *(float *)(a2 + 264) = v53;
  *(_BYTE *)(a2 + 268) = 0;
}

double sub_1000A4E90(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(__n128);
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t (*v24)(__n128);
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(__n128);
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t (*v37)(__n128);
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  double result;
  uint64_t v42;
  _QWORD *v43;
  _BYTE v44[12];
  int v45;

  v3 = v2;
  v45 = a2;
  v5 = type metadata accessor for MeasurementsHistory(0);
  v6 = __chkstk_darwin(v5);
  v8 = &v44[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  v10 = &v44[-v9];
  v11 = *a1;
  v12 = a1[1];
  v13 = *(void (**)(__n128))(**(_QWORD **)(v2 + 64) + 144);
  v14 = swift_retain();
  v13(v14);
  swift_release();
  v15 = *(_QWORD *)v10;
  v16 = *(_QWORD *)(*(_QWORD *)v10 + 16);
  if (v16)
  {
    v17 = *(_QWORD *)(type metadata accessor for MeasurementHistoryItem(0) - 8);
    v18 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
    v19 = *(_QWORD *)(v17 + 72);
    v20 = (uint64_t *)(v18 + v15 + 8);
    while (1)
    {
      v21 = *(v20 - 1);
      v22 = *v20;
      v23 = v21 == v11 && v22 == v12;
      if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(v21, v22, v11, v12, 0) & 1) != 0)
        break;
      v20 = (uint64_t *)((char *)v20 + v19);
      if (!--v16)
        goto LABEL_9;
    }
    sub_1000258F8((uint64_t)v10, type metadata accessor for MeasurementsHistory);
    v28 = *(void (**)(__n128))(**(_QWORD **)(v3 + 64) + 144);
    v29 = swift_retain();
    v28(v29);
    swift_release();
    v30 = *(_QWORD *)(*(_QWORD *)v8 + 16);
    if (v30)
    {
      v11 = 0;
      v31 = *a1;
      v32 = a1[1];
      v33 = (uint64_t *)(v18 + *(_QWORD *)v8 + 8);
      while (1)
      {
        v34 = *(v33 - 1);
        v35 = *v33;
        v36 = v34 == v31 && v35 == v32;
        if (v36 || (_stringCompareWithSmolCheck(_:_:expecting:)(v34, v35, v31, v32, 0) & 1) != 0)
          break;
        v33 = (uint64_t *)((char *)v33 + v19);
        if (v30 == ++v11)
          goto LABEL_18;
      }
    }
    else
    {
LABEL_18:
      sub_1000258F8((uint64_t)v8, type metadata accessor for MeasurementsHistory);
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000028, 0x80000001003DD130, "Measure/HistoryTracker.swift", 28, 2, 167, 0);
      __break(1u);
    }
    sub_1000258F8((uint64_t)v8, type metadata accessor for MeasurementsHistory);
    v37 = *(uint64_t (**)(__n128))(**(_QWORD **)(v3 + 64) + 200);
    v38 = swift_retain();
    v39 = v37(v38);
    swift_release();
    __chkstk_darwin(v40);
    *(_QWORD *)&v44[-32] = v11;
    *(_QWORD *)&v44[-24] = a1;
    LOBYTE(v42) = v45 & 1;
    (*(void (**)(size_t (*)(size_t *)))(*(_QWORD *)v39 + 416))(sub_1000A7EC0);
  }
  else
  {
LABEL_9:
    sub_1000258F8((uint64_t)v10, type metadata accessor for MeasurementsHistory);
    v24 = *(uint64_t (**)(__n128))(**(_QWORD **)(v3 + 64) + 200);
    v25 = swift_retain();
    v26 = v24(v25);
    swift_release();
    __chkstk_darwin(v27);
    LOBYTE(v42) = v45 & 1;
    v43 = a1;
    (*(void (**)(uint64_t (*)(_QWORD *)))(*(_QWORD *)v26 + 416))(sub_1000A7EB4);
  }
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t sub_1000A51A0(_QWORD *a1, char a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;
  uint64_t v15;

  v6 = type metadata accessor for MeasurementHistoryItem(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
  {
    v10 = (uint64_t)a1 + *(int *)(type metadata accessor for MeasurementsHistory(0) + 20);
    sub_1000A7F10(v10);
    sub_1000226FC(a3, v10);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  }
  sub_1000226FC(a3, (uint64_t)v9);
  v11 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v11 = (_QWORD *)sub_10005F68C(0, v11[2] + 1, 1, v11);
  v13 = v11[2];
  v12 = v11[3];
  if (v13 >= v12 >> 1)
    v11 = (_QWORD *)sub_10005F68C(v12 > 1, v13 + 1, 1, v11);
  v11[2] = v13 + 1;
  result = sub_10008BF28((uint64_t)v9, (uint64_t)v11+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v13);
  *a1 = v11;
  return result;
}

size_t sub_1000A52E4(size_t *a1, unint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v8;
  size_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v8 = (_QWORD *)*a1;
  result = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = (size_t)v8;
  if ((result & 1) != 0)
  {
    if ((a2 & 0x8000000000000000) == 0)
      goto LABEL_3;
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  result = sub_100028750(v8);
  v8 = (_QWORD *)result;
  *a1 = result;
  if ((a2 & 0x8000000000000000) != 0)
    goto LABEL_8;
LABEL_3:
  if (v8[2] <= a2)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  v10 = type metadata accessor for MeasurementHistoryItem(0);
  v11 = *(_QWORD *)(v10 - 8);
  sub_1000A7ECC(a3, (uint64_t)v8+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(_QWORD *)(v11 + 72) * a2);
  if ((a4 & 1) != 0)
  {
    v12 = (uint64_t)a1 + *(int *)(type metadata accessor for MeasurementsHistory(0) + 20);
    sub_1000A7F10(v12);
    sub_1000226FC(a3, v12);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v12, 0, 1, v10);
  }
  v13 = (uint64_t)a1 + *(int *)(type metadata accessor for MeasurementsHistory(0) + 24);
  sub_1000A7F10(v13);
  sub_1000226FC(a3, v13);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v10);
}

uint64_t sub_1000A540C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = (uint64_t *)swift_allocObject(v1, 96, 7);
  v4 = a1[3];
  v5 = a1[4];
  v6 = sub_1000A8224((uint64_t)a1, v4);
  __chkstk_darwin(v6);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v9 + 16))(v8);
  v10 = sub_1000A79C8((uint64_t)v8, v3, v4, v5);
  sub_10000F690(a1);
  return v10;
}

uint64_t sub_1000A54C4()
{
  _QWORD *v0;

  swift_release(v0[8]);
  swift_release(v0[9]);
  swift_release(v0[10]);
  return swift_release(v0[11]);
}

uint64_t sub_1000A54F0()
{
  _QWORD *v0;

  v0 = (_QWORD *)StateObserver.deinit();
  swift_release(v0[8]);
  swift_release(v0[9]);
  swift_release(v0[10]);
  swift_release(v0[11]);
  return swift_deallocClassInstance(v0, 96, 7);
}

uint64_t type metadata accessor for HistoryTracker(uint64_t a1)
{
  uint64_t result;

  result = qword_100481108;
  if (!qword_100481108)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for HistoryTracker);
  return result;
}

uint64_t sub_1000A5578(uint64_t a1)
{
  _QWORD v2[4];

  v2[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  return swift_initClassMetadata2(a1, 256, 4, v2, a1 + 208);
}

char *sub_1000A55C4(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1000A5898(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

size_t sub_1000A55E0(size_t a1, int64_t a2, char a3)
{
  size_t *v3;
  size_t result;

  result = sub_1000A6C58(a1, a2, a3, (_QWORD *)*v3, &qword_100481238, (uint64_t (*)(_QWORD))&type metadata accessor for URL);
  *v3 = result;
  return result;
}

double *sub_1000A560C(double *a1, int64_t a2, char a3)
{
  uint64_t *v3;
  double *result;

  result = sub_1000A5990(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

double *sub_1000A5628(double *a1, int64_t a2, char a3)
{
  uint64_t *v3;
  double *result;

  result = sub_1000A5AA4(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

char *sub_1000A5644(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1000A5B9C(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1000A5660(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1000A5CB4(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1000A567C(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1000A5DAC(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1000A5698(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1000A5EA4(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

double *sub_1000A56B4(double *a1, int64_t a2, char a3)
{
  uint64_t *v3;
  double *result;

  result = sub_1000A60D4(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

char *sub_1000A56D0(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1000A62D0(a1, a2, a3, *v3, &qword_100481290);
  *v3 = result;
  return result;
}

char *sub_1000A56F4(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1000A62D0(a1, a2, a3, *v3, &qword_100481298);
  *v3 = result;
  return result;
}

_QWORD *sub_1000A5718(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_1000A63C4(a1, a2, a3, *v3, &qword_10047ED38, &qword_10047ED30);
  *v3 = result;
  return result;
}

_QWORD *sub_1000A5744(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_1000A63C4(a1, a2, a3, *v3, &qword_100481278, &qword_100481280);
  *v3 = result;
  return result;
}

char *sub_1000A5770(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1000A64E8(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1000A578C(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1000A65D0(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1000A57A8(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1000A66C8(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_1000A57C4(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_1000A67D0(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_1000A57E0(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_1000A68F0(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1000A57FC(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1000A6A28(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1000A5818(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1000A6B3C(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

size_t sub_1000A5834(size_t a1, int64_t a2, char a3)
{
  size_t *v3;
  size_t result;

  result = sub_1000A6C58(a1, a2, a3, (_QWORD *)*v3, &qword_10047E480, type metadata accessor for MeasurementHistoryItem);
  *v3 = result;
  return result;
}

double *sub_1000A5860(double *a1, int64_t a2, char a3)
{
  uint64_t *v3;
  double *result;

  result = sub_1000A6DCC(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

double *sub_1000A587C(double *a1, int64_t a2, char a3)
{
  double **v3;
  double *result;

  result = sub_1000A6ECC(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1000A5898(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000EDC8(&qword_10047E670);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 15);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 32 * v8);
  }
  swift_release(a4);
  return v11;
}

double *sub_1000A5990(double *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000EDC8((uint64_t *)&unk_10047E4A0);
    v11 = (double *)swift_allocObject(v10, 96 * v9 + 32, 15);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 96);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v13 = (char *)(v11 + 4);
  v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    if (v11 != (double *)a4 || v13 >= &v14[96 * v8])
      memmove(v13, v14, 96 * v8);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v13, v14, v8, &type metadata for CornerAccumulationBuffer.CornerCandidate);
  }
  swift_release();
  return v11;
}

double *sub_1000A5AA4(double *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000EDC8((uint64_t *)&unk_10047ED60);
    v11 = (double *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (char *)(v11 + 4);
  v15 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    if (v11 != (double *)a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v8);
  }
  swift_release();
  return v11;
}

char *sub_1000A5B9C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000EDC8(&qword_10047E4D8);
    v11 = (char *)swift_allocObject(v10, 24 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[24 * v8])
      memmove(v13, v14, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v13, v14, v8, &type metadata for DebugRectangle);
  }
  swift_release();
  return v11;
}

char *sub_1000A5CB4(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000EDC8(&qword_100481230);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 8 * v8);
  }
  swift_release();
  return v11;
}

char *sub_1000A5DAC(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000EDC8(&qword_10047E488);
    v11 = (char *)swift_allocObject(v10, 4 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 29;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 2);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[4 * v8])
      memmove(v14, v15, 4 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 4 * v8);
  }
  swift_release(a4);
  return v11;
}

char *sub_1000A5EA4(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000EDC8(&qword_10047E4D0);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 15);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v8);
  }
  swift_release(a4);
  return v11;
}

double *sub_1000A5F9C(double *result, int64_t a2, char a3, double *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  size_t v12;
  uint64_t v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000EDC8(&qword_10047E570);
    v11 = (double *)swift_allocObject(v10, 112 * v9 + 32, 15);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 112);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[14 * v8 + 4])
      memmove(v11 + 4, a4 + 4, 112 * v8);
    a4[2] = 0.0;
  }
  else
  {
    v14 = sub_10000EDC8(&qword_10047E578);
    swift_arrayInitWithCopy(v11 + 4, a4 + 4, v8, v14);
  }
  swift_release();
  return v11;
}

double *sub_1000A60D4(double *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000EDC8(&qword_10047B9C0);
    v11 = (double *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (char *)(v11 + 4);
  v15 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    if (v11 != (double *)a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v14, v15, v8, (char *)&type metadata for Any + 8);
  }
  swift_release();
  return v11;
}

char *sub_1000A61D8(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000EDC8(&qword_10047ECB8);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 8 * v8);
  }
  swift_release();
  return v11;
}

char *sub_1000A62D0(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;

  v6 = (char)result;
  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    v11 = sub_10000EDC8(a5);
    v12 = (char *)swift_allocObject(v11, 32 * v10 + 32, 7);
    v13 = j__malloc_size(v12);
    v14 = v13 - 32;
    if (v13 < 32)
      v14 = v13 - 1;
    *((_QWORD *)v12 + 2) = v9;
    *((_QWORD *)v12 + 3) = 2 * (v14 >> 5);
  }
  else
  {
    v12 = (char *)_swiftEmptyArrayStorage;
  }
  v15 = v12 + 32;
  v16 = a4 + 32;
  if ((v6 & 1) != 0)
  {
    if (v12 != a4 || v15 >= &v16[32 * v9])
      memmove(v15, v16, 32 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v15, v16, 32 * v9);
  }
  swift_release(a4);
  return v12;
}

_QWORD *sub_1000A63C4(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v18;

  v8 = (char)result;
  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    v13 = sub_10000EDC8(a5);
    v14 = (_QWORD *)swift_allocObject(v13, 32 * v12 + 32, 15);
    v15 = j__malloc_size(v14);
    v16 = v15 - 32;
    if (v15 < 32)
      v16 = v15 - 1;
    v14[2] = v11;
    v14[3] = 2 * (v16 >> 5);
  }
  else
  {
    v14 = _swiftEmptyArrayStorage;
  }
  if ((v8 & 1) != 0)
  {
    if (v14 != a4 || v14 + 4 >= &a4[4 * v11 + 4])
      memmove(v14 + 4, a4 + 4, 32 * v11);
    a4[2] = 0;
  }
  else
  {
    v18 = sub_10000EDC8(a6);
    swift_arrayInitWithCopy(v14 + 4, a4 + 4, v11, v18);
  }
  swift_release(a4);
  return v14;
}

char *sub_1000A64E8(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000EDC8(&qword_100481288);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, v8);
  }
  swift_release(a4);
  return v11;
}

char *sub_1000A65D0(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000EDC8(&qword_10047DB70);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 8 * v8);
  }
  swift_release(a4);
  return v11;
}

char *sub_1000A66C8(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000EDC8(&qword_100481270);
    v11 = (char *)swift_allocObject(v10, 48 * v9 + 32, 15);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 48);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  v15 = 48 * v8;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, v15);
  }
  swift_release();
  return v11;
}

_QWORD *sub_1000A67D0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000EDC8(&qword_10047E528);
    v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 4);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[2 * v8 + 4])
      memmove(v11 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
  }
  else
  {
    v15 = sub_10000EDC8(&qword_10047E530);
    swift_arrayInitWithCopy(v11 + 4, a4 + 4, v8, v15);
  }
  swift_release();
  return v11;
}

_QWORD *sub_1000A68F0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  uint64_t v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000EDC8(&qword_10047E660);
    v11 = (_QWORD *)swift_allocObject(v10, 48 * v9 + 32, 15);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 48);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[6 * v8 + 4])
      memmove(v11 + 4, a4 + 4, 48 * v8);
    a4[2] = 0;
  }
  else
  {
    v14 = sub_10000EDC8(&qword_10047E668);
    swift_arrayInitWithCopy(v11 + 4, a4 + 4, v8, v14);
  }
  swift_release();
  return v11;
}

char *sub_1000A6A28(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000EDC8(&qword_100481240);
    v11 = (char *)swift_allocObject(v10, 12 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 12);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[12 * v8])
      memmove(v13, v14, 12 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 12 * v8);
  }
  swift_release();
  return v11;
}

char *sub_1000A6B3C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000EDC8((uint64_t *)&unk_10047E4B0);
    v11 = (char *)swift_allocObject(v10, 304 * v9 + 32, 15);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 304);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[304 * v8])
      memmove(v13, v14, 304 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v13, v14, v8, &type metadata for WorldRectangleData);
  }
  swift_release();
  return v11;
}

size_t sub_1000A6C58(size_t result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  char v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;

  v8 = result;
  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_10000EDC8(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  result = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v17 == 0x8000000000000000 && v15 == -1)
    goto LABEL_29;
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(result - v17) / v15);
LABEL_19:
  v20 = a6(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  v23 = (char *)v18 + v22;
  v24 = (char *)a4 + v22;
  if ((v8 & 1) != 0)
  {
    if (v18 < a4 || v23 >= &v24[*(_QWORD *)(v21 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v23, v24, v11, v20);
    }
    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v23, v24, v11, v20);
  }
  swift_release();
  return (size_t)v18;
}

double *sub_1000A6DCC(double *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000EDC8(&qword_10047E468);
    v11 = (double *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (char *)(v11 + 4);
  v15 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    if (v11 != (double *)a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v14, v15, v8, &type metadata for String);
  }
  swift_release();
  return v11;
}

double *sub_1000A6ECC(double *result, int64_t a2, char a3, double *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000EDC8((uint64_t *)&unk_10047E4C0);
    v11 = (double *)swift_allocObject(v10, (v9 << 7) | 0x20, 15);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 + 95;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 7);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[16 * v8 + 4])
      memmove(v11 + 4, a4 + 4, v8 << 7);
    a4[2] = 0.0;
  }
  else
  {
    v15 = sub_10000EDC8(&qword_1004866F0);
    swift_arrayInitWithCopy(v11 + 4, a4 + 4, v8, v15);
  }
  swift_release();
  return v11;
}

void sub_1000A6FEC(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  Swift::Int v3;
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  float v14;
  float v15;
  float v16;
  float v17;
  int *v18;
  Swift::Int v19;
  Swift::Int v20;
  int *v21;
  int v22;
  Swift::Int v23;
  float *v24;
  float v25;
  Swift::Int v26;
  float *v27;
  float v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  char v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  float v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  unint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  double *v97;
  Swift::Int v98;
  Swift::Int v99;
  uint64_t v100;
  float *v101;

  v2 = a1;
  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if ((unint64_t)v3 < 2)
        return;
      v82 = 0;
      v83 = *v2;
      v84 = 1;
      while (1)
      {
        v85 = *(float *)(v83 + 4 * v84);
        v86 = v82;
        do
        {
          v87 = v83 + 4 * v86;
          if (v85 >= *(float *)v87)
            break;
          if (!v83)
            goto LABEL_143;
          *(_DWORD *)(v87 + 4) = *(_DWORD *)v87;
          *(float *)(v83 + 4 * v86--) = v85;
        }
        while (v86 != -1);
        ++v84;
        ++v82;
        if (v84 == v3)
          return;
      }
    }
    goto LABEL_139;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_138;
  v98 = v4;
  v99 = v3;
  if (v3 <= 1)
  {
    v8 = _swiftEmptyArrayStorage;
    v101 = (float *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v12 = *(_QWORD *)&_swiftEmptyArrayStorage[2];
      v11 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_103;
    }
    v97 = _swiftEmptyArrayStorage;
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for Float);
    *(_QWORD *)(v7 + 16) = v6;
    v3 = v99;
    v97 = (double *)v7;
    v101 = (float *)(v7 + 32);
  }
  v9 = 0;
  v10 = *v2;
  v95 = v2;
  v96 = *v2 - 4;
  v11 = (char *)_swiftEmptyArrayStorage;
  v100 = *v2;
  while (1)
  {
    v13 = v9++;
    if (v9 < v3)
    {
      v14 = *(float *)(v10 + 4 * v9);
      v15 = *(float *)(v10 + 4 * v13);
      v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        v16 = v14;
        while (1)
        {
          v17 = v16;
          v16 = *(float *)(v10 + 4 * v9);
          if (v14 < v15 == v16 >= v17)
            break;
          if (v3 == ++v9)
          {
            v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13)
          goto LABEL_140;
        if (v13 < v9)
        {
          v18 = (int *)(v96 + 4 * v9);
          v19 = v9;
          v20 = v13;
          v21 = (int *)(v10 + 4 * v13);
          do
          {
            if (v20 != --v19)
            {
              if (!v10)
                goto LABEL_146;
              v22 = *v21;
              *v21 = *v18;
              *v18 = v22;
            }
            ++v20;
            --v18;
            ++v21;
          }
          while (v20 < v19);
        }
      }
    }
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13))
        goto LABEL_137;
      if (v9 - v13 < v98)
      {
        v23 = v13 + v98;
        if (__OFADD__(v13, v98))
          goto LABEL_141;
        if (v23 >= v3)
          v23 = v3;
        if (v23 < v13)
          goto LABEL_142;
        if (v9 != v23)
        {
          v24 = (float *)(v96 + 4 * v9);
          do
          {
            v25 = *(float *)(v10 + 4 * v9);
            v26 = v13;
            v27 = v24;
            do
            {
              v28 = *v27;
              if (v25 >= *v27)
                break;
              if (!v10)
                goto LABEL_144;
              *v27 = v25;
              v27[1] = v28;
              --v27;
              ++v26;
            }
            while (v9 != v26);
            ++v9;
            ++v24;
          }
          while (v9 != v23);
          v9 = v23;
        }
      }
    }
    if (v9 < v13)
    {
LABEL_132:
      __break(1u);
      goto LABEL_133;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
      v11 = sub_1000A7838(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v30 = *((_QWORD *)v11 + 2);
    v29 = *((_QWORD *)v11 + 3);
    v12 = v30 + 1;
    v10 = v100;
    if (v30 >= v29 >> 1)
    {
      v79 = sub_1000A7838((char *)(v29 > 1), v30 + 1, 1, v11);
      v10 = v100;
      v11 = v79;
    }
    *((_QWORD *)v11 + 2) = v12;
    v31 = v11 + 32;
    v32 = &v11[16 * v30 + 32];
    *(_QWORD *)v32 = v13;
    *((_QWORD *)v32 + 1) = v9;
    if (v30)
      break;
    v12 = 1;
LABEL_15:
    v3 = v99;
    if (v9 >= v99)
    {
      v8 = v97;
      v2 = v95;
LABEL_103:
      v97 = v8;
      if (v12 < 2)
      {
LABEL_114:
        v81 = v11;
        goto LABEL_115;
      }
      v88 = *v2;
      while (1)
      {
        v89 = v12 - 2;
        if (v12 < 2)
          break;
        if (!v88)
          goto LABEL_147;
        v80 = v11;
        v90 = v11 + 32;
        v91 = *(_QWORD *)&v11[16 * v89 + 32];
        v92 = *(_QWORD *)&v11[16 * v12 + 24];
        sub_1000A7638((float *)(v88 + 4 * v91), (float *)(v88 + 4 * *(_QWORD *)&v90[16 * v12 - 16]), v88 + 4 * v92, v101);
        if (v1)
          goto LABEL_94;
        if (v92 < v91)
          goto LABEL_134;
        if ((swift_isUniquelyReferenced_nonNull_native(v80) & 1) == 0)
          v80 = sub_1000A7930((uint64_t)v80);
        if (v89 >= *((_QWORD *)v80 + 2))
          goto LABEL_135;
        v93 = &v80[16 * v89 + 32];
        *(_QWORD *)v93 = v91;
        *((_QWORD *)v93 + 1) = v92;
        v94 = *((_QWORD *)v80 + 2);
        if (v12 > v94)
          goto LABEL_136;
        memmove(&v80[16 * v12 + 16], &v80[16 * v12 + 32], 16 * (v94 - v12));
        v11 = v80;
        *((_QWORD *)v80 + 2) = v94 - 1;
        v12 = v94 - 1;
        if (v94 <= 2)
          goto LABEL_114;
      }
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
      return;
    }
  }
  while (1)
  {
    v33 = v12 - 1;
    if (v12 >= 4)
    {
      v38 = &v31[16 * v12];
      v39 = *((_QWORD *)v38 - 8);
      v40 = *((_QWORD *)v38 - 7);
      v44 = __OFSUB__(v40, v39);
      v41 = v40 - v39;
      if (v44)
        goto LABEL_121;
      v43 = *((_QWORD *)v38 - 6);
      v42 = *((_QWORD *)v38 - 5);
      v44 = __OFSUB__(v42, v43);
      v36 = v42 - v43;
      v37 = v44;
      if (v44)
        goto LABEL_122;
      v45 = v12 - 2;
      v46 = &v31[16 * v12 - 32];
      v48 = *(_QWORD *)v46;
      v47 = *((_QWORD *)v46 + 1);
      v44 = __OFSUB__(v47, v48);
      v49 = v47 - v48;
      if (v44)
        goto LABEL_123;
      v44 = __OFADD__(v36, v49);
      v50 = v36 + v49;
      if (v44)
        goto LABEL_125;
      if (v50 >= v41)
      {
        v68 = &v31[16 * v33];
        v70 = *(_QWORD *)v68;
        v69 = *((_QWORD *)v68 + 1);
        v44 = __OFSUB__(v69, v70);
        v71 = v69 - v70;
        if (v44)
          goto LABEL_131;
        v61 = v36 < v71;
        goto LABEL_83;
      }
    }
    else
    {
      if (v12 != 3)
      {
        v62 = *((_QWORD *)v11 + 4);
        v63 = *((_QWORD *)v11 + 5);
        v44 = __OFSUB__(v63, v62);
        v55 = v63 - v62;
        v56 = v44;
        goto LABEL_77;
      }
      v35 = *((_QWORD *)v11 + 4);
      v34 = *((_QWORD *)v11 + 5);
      v44 = __OFSUB__(v34, v35);
      v36 = v34 - v35;
      v37 = v44;
    }
    if ((v37 & 1) != 0)
      goto LABEL_124;
    v45 = v12 - 2;
    v51 = &v31[16 * v12 - 32];
    v53 = *(_QWORD *)v51;
    v52 = *((_QWORD *)v51 + 1);
    v54 = __OFSUB__(v52, v53);
    v55 = v52 - v53;
    v56 = v54;
    if (v54)
      goto LABEL_126;
    v57 = &v31[16 * v33];
    v59 = *(_QWORD *)v57;
    v58 = *((_QWORD *)v57 + 1);
    v44 = __OFSUB__(v58, v59);
    v60 = v58 - v59;
    if (v44)
      goto LABEL_128;
    if (__OFADD__(v55, v60))
      goto LABEL_130;
    if (v55 + v60 >= v36)
    {
      v61 = v36 < v60;
LABEL_83:
      if (v61)
        v33 = v45;
      goto LABEL_85;
    }
LABEL_77:
    if ((v56 & 1) != 0)
      goto LABEL_127;
    v64 = &v31[16 * v33];
    v66 = *(_QWORD *)v64;
    v65 = *((_QWORD *)v64 + 1);
    v44 = __OFSUB__(v65, v66);
    v67 = v65 - v66;
    if (v44)
      goto LABEL_129;
    if (v67 < v55)
      goto LABEL_15;
LABEL_85:
    v72 = v33 - 1;
    if (v33 - 1 >= v12)
    {
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
      goto LABEL_132;
    }
    if (!v10)
      goto LABEL_145;
    v73 = &v31[16 * v72];
    v74 = *(_QWORD *)v73;
    v75 = v31;
    v76 = &v31[16 * v33];
    v77 = *((_QWORD *)v76 + 1);
    sub_1000A7638((float *)(v10 + 4 * *(_QWORD *)v73), (float *)(v10 + 4 * *(_QWORD *)v76), v10 + 4 * v77, v101);
    if (v1)
      break;
    if (v77 < v74)
      goto LABEL_118;
    if (v33 > *((_QWORD *)v11 + 2))
      goto LABEL_119;
    *(_QWORD *)v73 = v74;
    *(_QWORD *)&v75[16 * v72 + 8] = v77;
    v78 = *((_QWORD *)v11 + 2);
    if (v33 >= v78)
      goto LABEL_120;
    v12 = v78 - 1;
    memmove(v76, v76 + 16, 16 * (v78 - 1 - v33));
    v31 = v75;
    *((_QWORD *)v11 + 2) = v78 - 1;
    v10 = v100;
    if (v78 <= 2)
      goto LABEL_15;
  }
  v80 = v11;
LABEL_94:
  v81 = v80;
LABEL_115:
  swift_bridgeObjectRelease(v81);
  v97[2] = 0.0;
  swift_bridgeObjectRelease(v97);
}

uint64_t sub_1000A7638(float *__dst, float *__src, unint64_t a3, float *a4)
{
  float *v4;
  float *v6;
  float *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float *v14;
  float v15;
  BOOL v16;
  float *v17;
  float *v18;
  float *v19;
  float v20;
  float v21;
  int64_t v23;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = (char *)__src - (char *)__dst;
  v9 = (char *)__src - (char *)__dst + 3;
  if ((char *)__src - (char *)__dst >= 0)
    v9 = (char *)__src - (char *)__dst;
  v10 = v9 >> 2;
  v11 = a3 - (_QWORD)__src;
  v12 = a3 - (_QWORD)__src + 3;
  if ((uint64_t)(a3 - (_QWORD)__src) >= 0)
    v12 = a3 - (_QWORD)__src;
  v13 = v12 >> 2;
  if (v10 >= v12 >> 2)
  {
    if (a4 != __src || &__src[v13] <= a4)
      memmove(a4, __src, 4 * v13);
    v14 = &v4[v13];
    if (v7 >= v6 || v11 < 4)
      goto LABEL_39;
    v17 = (float *)(a3 - 4);
    v18 = v6;
    while (1)
    {
      v19 = v17 + 1;
      v20 = *--v18;
      v21 = v20;
      if (*(v14 - 1) < v20)
        break;
      v21 = *(v14 - 1);
      v18 = v6;
      if (v19 != v14)
      {
        --v14;
LABEL_35:
        *v17 = v21;
        goto LABEL_36;
      }
      if (v17 >= v14--)
        goto LABEL_35;
LABEL_36:
      if (v18 > v7)
      {
        --v17;
        v6 = v18;
        if (v14 > v4)
          continue;
      }
      v6 = v18;
      goto LABEL_39;
    }
    if (v19 == v6 && v17 < v6)
      goto LABEL_36;
    goto LABEL_35;
  }
  if (a4 != __dst || &__dst[v10] <= a4)
    memmove(a4, __dst, 4 * v10);
  v14 = &v4[v10];
  if ((unint64_t)v6 < a3 && v8 >= 4)
  {
    while (1)
    {
      v15 = *v6;
      if (*v6 >= *v4)
        break;
      v16 = v7 == v6++;
      if (!v16)
        goto LABEL_16;
LABEL_17:
      ++v7;
      if (v4 >= v14 || (unint64_t)v6 >= a3)
        goto LABEL_19;
    }
    v15 = *v4;
    v16 = v7 == v4++;
    if (v16)
      goto LABEL_17;
LABEL_16:
    *v7 = v15;
    goto LABEL_17;
  }
LABEL_19:
  v6 = v7;
LABEL_39:
  v23 = (char *)v14 - (char *)v4 + ((char *)v14 - (char *)v4 < 0 ? 3uLL : 0);
  if (v6 != v4 || v6 >= (float *)((char *)v4 + (v23 & 0xFFFFFFFFFFFFFFFCLL)))
    memmove(v6, v4, 4 * (v23 >> 2));
  return 1;
}

char *sub_1000A7838(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000EDC8(&qword_100481220);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_1000A7930(uint64_t a1)
{
  return sub_1000A7838(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

char *sub_1000A7944(uint64_t a1)
{
  return sub_1000A5EA4(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

char *sub_1000A7958(uint64_t a1)
{
  return sub_1000A5DAC(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

double *sub_1000A796C(uint64_t a1)
{
  return sub_1000A5F9C(0, *(_QWORD *)(a1 + 16), 0, (double *)a1);
}

char *sub_1000A7980(uint64_t a1)
{
  return sub_1000A61D8(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

_QWORD *sub_1000A7994(_QWORD *a1)
{
  return sub_1000A63C4(0, a1[2], 0, a1, &qword_100481278, &qword_100481280);
}

uint64_t sub_1000A79C8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, __n128);
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, __n128);
  __n128 v24;
  uint64_t v25;
  _BYTE v27[40];
  _QWORD v28[5];

  v7 = *a2;
  v28[3] = a3;
  v28[4] = a4;
  v8 = sub_100068AE8(v28);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(v8, a1, a3);
  sub_10000EDC8(&qword_100481248);
  KeyPath = swift_getKeyPath(&unk_1003B4C48);
  swift_retain();
  a2[8] = MutableStateBinding.__allocating_init(_:_:)(KeyPath, v7);
  v10 = sub_10000EDC8(&qword_100481250);
  v11 = swift_getKeyPath(&unk_1003B4C70);
  if (qword_10047AD88 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v12 = qword_1004AF890;
  v13 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v10 + 272);
  v14 = swift_retain();
  a2[9] = v13(v11, v12, v14);
  v15 = swift_getKeyPath(&unk_1003B4C98);
  v16 = sub_10000EDC8(&qword_100482F10);
  v17 = qword_1004AF890;
  v18 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v16 + 272);
  v19 = swift_retain();
  a2[10] = v18(v15, v17, v19);
  v20 = swift_getKeyPath(&unk_1003B4CC0);
  v21 = sub_10000EDC8(&qword_100481258);
  v22 = qword_1004AF890;
  v23 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v21 + 272);
  v24 = swift_retain();
  a2[11] = v23(v20, v22, v24);
  swift_release();
  sub_100068B24((uint64_t)v28, (uint64_t)v27);
  v25 = StateObserver.init(configuration:)(v27);
  sub_10000F690(v28);
  return v25;
}

void sub_1000A7B84(uint64_t a1@<X8>, float a2@<S0>)
{
  __n128 v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;
  char v17;
  __int128 v18;
  __int128 v19;
  char v20;
  char v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25[4];
  int v26;
  char v27;
  char v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char v33;
  uint64_t v34[2];
  __int128 v35;
  int v36;
  char v37;
  char v38;

  if (qword_10047AD88 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v4 = swift_retain();
  PublishedValue.wrappedValue.getter(v4);
  swift_release();
  v5 = sub_10009BF0C();
  sub_100108E28((uint64_t)v5, 0, 0, v25, a2);
  v6 = v25[0];
  v7 = v25[1];
  v23 = v25[3];
  v24 = v25[2];
  v21 = v27;
  v22 = v26;
  v20 = v28;
  if (v5 == (id)1)
  {
    sub_10010C62C(0, (uint64_t)&v29, a2);
    v8 = 1;
LABEL_7:
    v9 = v30;
    v10 = v31;
    v11 = v32;
    v12 = v33;
    v19 = v29;
    sub_100108E28(v5 == 0, 0, 0, v34, a2);
    v13 = v34[0];
    v14 = v34[1];
    v15 = v36;
    v16 = v37;
    v17 = v38;
    v18 = v35;
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v24;
    *(_QWORD *)(a1 + 24) = v23;
    *(_DWORD *)(a1 + 32) = v22;
    *(_BYTE *)(a1 + 36) = v21;
    *(_BYTE *)(a1 + 37) = v20;
    *(_OWORD *)(a1 + 40) = v19;
    *(_QWORD *)(a1 + 56) = v9;
    *(_QWORD *)(a1 + 64) = v10;
    *(_DWORD *)(a1 + 72) = v11;
    *(_BYTE *)(a1 + 76) = v12;
    *(_BYTE *)(a1 + 77) = v8;
    *(_QWORD *)(a1 + 80) = v13;
    *(_QWORD *)(a1 + 88) = v14;
    *(_OWORD *)(a1 + 96) = v18;
    *(_DWORD *)(a1 + 112) = v15;
    *(_BYTE *)(a1 + 116) = v16;
    *(_BYTE *)(a1 + 117) = v17;
    return;
  }
  if (!v5)
  {
    sub_10010B508(1, 0, (uint64_t)&v29, a2);
    v8 = 2;
    goto LABEL_7;
  }
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Measure/MeasureUtil.swift", 25, 2, 566, 0);
  __break(1u);
}

uint64_t sub_1000A7D70(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v1 = *(_QWORD *)(result + 72) & 0xFF01FFFFFFFFLL;
  v2 = *(_QWORD *)(result + 112) & 0xFF01FFFFFFFFLL;
  v3 = *(_QWORD *)(result + 272) & 0xFF01FFFFFFFFLL;
  v4 = *(_QWORD *)(result + 312) & 0xFF01FFFFFFFFLL;
  v5 = *(_QWORD *)(result + 352) & 0xFF01FFFFFFFFLL;
  v6 = *(_QWORD *)(result + 392) & 0xFF01FFFFFFFFLL;
  v7 = *(_QWORD *)(result + 432) & 0xFF01FFFFFFFFLL;
  v8 = *(_QWORD *)(result + 472) & 0xFF01FFFFFFFFLL;
  v9 = *(_QWORD *)(result + 512) & 0xFF01FFFFFFFFLL;
  v10 = *(_QWORD *)(result + 552) & 0xFF01FFFFFFFFLL;
  v11 = *(_QWORD *)(result + 592) & 0xFF01FFFFFFFFLL;
  v12 = *(_QWORD *)(result + 632) & 0xFF01FFFFFFFFLL;
  v13 = *(_QWORD *)(result + 672) & 0xFF01FFFFFFFFLL;
  v14 = *(_QWORD *)(result + 712) & 0xFF01FFFFFFFFLL;
  v15 = *(_QWORD *)(result + 752) & 0xFF01FFFFFFFFLL;
  v16 = *(_QWORD *)(result + 792) & 0xFF01FFFFFFFFLL;
  v17 = (*(unsigned int *)(result + 832) | ((unint64_t)*(unsigned __int16 *)(result + 836) << 32)) & 0xFFFFFF01FFFFFFFFLL;
  *(_QWORD *)(result + 32) &= 0xFF01FFFFFFFFuLL;
  *(_QWORD *)(result + 72) = v1;
  *(_QWORD *)(result + 112) = v2;
  *(_QWORD *)(result + 272) = v3;
  *(_QWORD *)(result + 312) = v4;
  *(_QWORD *)(result + 352) = v5;
  *(_QWORD *)(result + 392) = v6;
  *(_QWORD *)(result + 432) = v7;
  *(_QWORD *)(result + 472) = v8;
  *(_QWORD *)(result + 512) = v9;
  *(_QWORD *)(result + 552) = v10;
  *(_QWORD *)(result + 592) = v11;
  *(_QWORD *)(result + 632) = v12;
  *(_QWORD *)(result + 672) = v13;
  *(_QWORD *)(result + 712) = v14;
  *(_QWORD *)(result + 752) = v15;
  *(_QWORD *)(result + 792) = v16;
  *(_DWORD *)(result + 832) = v17;
  *(_WORD *)(result + 836) = WORD2(v17);
  return result;
}

uint64_t sub_1000A7E6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000EDC8((uint64_t *)&unk_1004862E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A7EB4(_QWORD *a1)
{
  uint64_t v1;

  return sub_1000A51A0(a1, *(_BYTE *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

size_t sub_1000A7EC0(size_t *a1)
{
  uint64_t v1;

  return sub_1000A52E4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32));
}

uint64_t sub_1000A7ECC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MeasurementHistoryItem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A7F10(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000EDC8((uint64_t *)&unk_100488B90);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1000A7F50(uint64_t a1@<X8>, float a2@<S0>)
{
  __n128 v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char v17;
  char v18;
  __int128 v19;
  __int128 v20;
  char v21;
  char v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26[4];
  int v27;
  char v28;
  char v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char v34;
  uint64_t v35[2];
  __int128 v36;
  int v37;
  char v38;
  char v39;

  if (qword_10047AD88 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v4 = swift_retain();
  PublishedValue.wrappedValue.getter(v4);
  swift_release();
  v5 = sub_10009BF0C();
  v6 = v5;
  if (a2 <= 0.06)
    a2 = 0.0;
  sub_100108E28((uint64_t)v5, 1, 0, v26, a2);
  v7 = v26[0];
  v8 = v26[1];
  v24 = v26[3];
  v25 = v26[2];
  v22 = v28;
  v23 = v27;
  v21 = v29;
  if (v6 == (id)1)
  {
    sub_10010C62C(0, (uint64_t)&v30, a2);
    v9 = 1;
LABEL_9:
    v10 = v31;
    v11 = v32;
    v12 = v33;
    v13 = v34;
    v20 = v30;
    sub_100108E28(v6 == 0, 1, 0, v35, a2);
    v14 = v35[0];
    v15 = v35[1];
    v16 = v37;
    v17 = v38;
    v18 = v39;
    v19 = v36;
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v25;
    *(_QWORD *)(a1 + 24) = v24;
    *(_DWORD *)(a1 + 32) = v23;
    *(_BYTE *)(a1 + 36) = v22;
    *(_BYTE *)(a1 + 37) = v21;
    *(_OWORD *)(a1 + 40) = v20;
    *(_QWORD *)(a1 + 56) = v10;
    *(_QWORD *)(a1 + 64) = v11;
    *(_DWORD *)(a1 + 72) = v12;
    *(_BYTE *)(a1 + 76) = v13;
    *(_BYTE *)(a1 + 77) = v9;
    *(_QWORD *)(a1 + 80) = v14;
    *(_QWORD *)(a1 + 88) = v15;
    *(_OWORD *)(a1 + 96) = v19;
    *(_DWORD *)(a1 + 112) = v16;
    *(_BYTE *)(a1 + 116) = v17;
    *(_BYTE *)(a1 + 117) = v18;
    return;
  }
  if (!v6)
  {
    sub_10010B508(1, 1, (uint64_t)&v30, a2);
    v9 = 2;
    goto LABEL_9;
  }
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Measure/MeasureUtil.swift", 25, 2, 566, 0);
  __break(1u);
}

void sub_1000A8154(_QWORD **a1@<X0>, _OWORD *a2@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  *(double *)&v3 = (*(double (**)(void))((swift_isaMask & **a1) + 0x2B0))();
  *a2 = v3;
  a2[1] = v4;
  a2[2] = v5;
  a2[3] = v6;
}

void sub_1000A8198(__n128 *a1@<X0>, _OWORD *a2@<X8>)
{
  __int128 v3;

  *(double *)&v3 = simd_float4x4.position.getter(*a1, a1[1], a1[2], a1[3]);
  *a2 = v3;
}

unint64_t sub_1000A81C8()
{
  unint64_t result;

  result = qword_100481228;
  if (!qword_100481228)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Float, &type metadata for Float);
    atomic_store(result, (unint64_t *)&qword_100481228);
  }
  return result;
}

float sub_1000A820C@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float result;

  result = *(float *)(a1 + 4);
  *a2 = result;
  return result;
}

float sub_1000A8218(float *a1, uint64_t a2)
{
  float result;

  result = *a1;
  *(float *)(a2 + 4) = *a1;
  return result;
}

uint64_t sub_1000A8224(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

void sub_1000A825C(void **a1)
{
  sub_1000A36B4(a1);
}

unint64_t sub_1000A8264()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100481260;
  if (!qword_100481260)
  {
    v1 = objc_opt_self(OS_os_log);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100481260);
  }
  return result;
}

uint64_t sub_1000A82A0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v1 = *(_QWORD *)(result + 72) & 0xFF01FFFFFFFFLL;
  v2 = *(_QWORD *)(result + 112) & 0xFF01FFFFFFFFLL;
  v3 = *(_QWORD *)(result + 272) & 0xFF01FFFFFFFFLL;
  v4 = *(_QWORD *)(result + 312) & 0xFF01FFFFFFFFLL;
  v5 = *(_QWORD *)(result + 352) & 0xFF01FFFFFFFFLL;
  v6 = *(_QWORD *)(result + 392) & 0xFF01FFFFFFFFLL;
  v7 = *(_QWORD *)(result + 432) & 0xFF01FFFFFFFFLL;
  v8 = *(_QWORD *)(result + 472) & 0xFF01FFFFFFFFLL;
  v9 = *(_QWORD *)(result + 512) & 0xFF01FFFFFFFFLL;
  v10 = *(_QWORD *)(result + 552) & 0xFF01FFFFFFFFLL;
  v11 = *(_QWORD *)(result + 592) & 0xFF01FFFFFFFFLL;
  v12 = *(_QWORD *)(result + 632) & 0xFF01FFFFFFFFLL;
  v13 = *(_QWORD *)(result + 672) & 0xFF01FFFFFFFFLL;
  v14 = *(_QWORD *)(result + 712) & 0xFF01FFFFFFFFLL;
  v15 = *(_QWORD *)(result + 752) & 0xFF01FFFFFFFFLL;
  v16 = *(_QWORD *)(result + 792) & 0xFF01FFFFFFFFLL;
  v17 = (*(unsigned int *)(result + 832) | ((unint64_t)*(unsigned __int16 *)(result + 836) << 32)) & 0xFFFFFF01FFFFFFFFLL;
  *(_QWORD *)(result + 32) &= 0xFF01FFFFFFFFuLL;
  *(_QWORD *)(result + 72) = v1;
  *(_QWORD *)(result + 112) = v2;
  *(_QWORD *)(result + 272) = v3;
  *(_QWORD *)(result + 312) = v4;
  *(_QWORD *)(result + 352) = v5;
  *(_QWORD *)(result + 392) = v6;
  *(_QWORD *)(result + 432) = v7;
  *(_QWORD *)(result + 472) = v8;
  *(_QWORD *)(result + 512) = v9;
  *(_QWORD *)(result + 552) = v10;
  *(_QWORD *)(result + 592) = v11;
  *(_QWORD *)(result + 632) = v12;
  *(_QWORD *)(result + 672) = v13;
  *(_QWORD *)(result + 712) = v14;
  *(_QWORD *)(result + 752) = v15;
  *(_QWORD *)(result + 792) = v16;
  *(_DWORD *)(result + 832) = v17;
  *(_WORD *)(result + 836) = (v17 | 0x4000000000) >> 32;
  return result;
}

void sub_1000A83A0()
{
  qword_1004812A0 = 0x4032000000000000;
}

id sub_1000A83B0(double a1, double a2, double a3, double a4)
{
  char *v4;
  objc_class *ObjectType;
  uint64_t v10;
  uint64_t v11;
  id v12;
  char *v13;
  uint64_t v14;
  id v15;
  objc_super v17;

  ObjectType = (objc_class *)swift_getObjectType(v4);
  v10 = OBJC_IVAR____TtC7Measure11LabelsStrip_primaryLabel;
  v11 = type metadata accessor for InteractiveLabel();
  v12 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v11));
  v13 = v4;
  *(_QWORD *)&v4[v10] = objc_msgSend(v12, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v14 = OBJC_IVAR____TtC7Measure11LabelsStrip_secondaryLabelStack;
  *(_QWORD *)&v13[v14] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for NewSecondaryLabelStack()), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);

  v17.receiver = v13;
  v17.super_class = ObjectType;
  v15 = objc_msgSendSuper2(&v17, "initWithFrame:", a1, a2, a3, a4);
  sub_1000A84C0();
  sub_1000A858C();

  return v15;
}

id sub_1000A84C0()
{
  char *v0;
  void *v1;
  id v2;

  v1 = *(void **)&v0[OBJC_IVAR____TtC7Measure11LabelsStrip_primaryLabel];
  v2 = objc_msgSend((id)objc_opt_self(UIFont), "systemFontOfSize:weight:", 60.0, UIFontWeightRegular);
  objc_msgSend(v1, "setFont:", v2);

  objc_msgSend(v1, "setTextAlignment:", 1);
  objc_msgSend(v1, "setUserInteractionEnabled:", 1);
  objc_msgSend(v0, "addSubview:", v1);
  return objc_msgSend(v0, "addSubview:", *(_QWORD *)&v0[OBJC_IVAR____TtC7Measure11LabelsStrip_secondaryLabelStack]);
}

void sub_1000A858C()
{
  char *v0;
  char *v1;
  void *v2;
  char *v3;
  id v4;
  double v5;
  void *v6;
  id v7;
  void *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  void *v43;
  Class isa;

  v1 = v0;
  v2 = *(void **)&v0[OBJC_IVAR____TtC7Measure11LabelsStrip_primaryLabel];
  objc_msgSend(v2, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v3 = *(char **)&v1[OBJC_IVAR____TtC7Measure11LabelsStrip_secondaryLabelStack];
  objc_msgSend(v3, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v4 = objc_msgSend(v2, "font");
  v5 = 1.0;
  if (v4)
  {
    v6 = v4;
    v7 = objc_msgSend(*(id *)(*(_QWORD *)&v3[OBJC_IVAR____TtC7Measure22NewSecondaryLabelStack_bottomLabel]+ OBJC_IVAR____TtC7Measure24ViewWithInteractiveLabel_label), "font");
    if (v7)
    {
      v8 = v7;
      objc_msgSend(v6, "descender");
      v10 = v9;
      objc_msgSend(v6, "leading");
      v12 = v10 + v11;
      objc_msgSend(v8, "descender");
      v14 = v12 - v13;
      objc_msgSend(v8, "leading");
      v16 = v15;

      v5 = v14 - v16 + 1.0;
    }
    else
    {

    }
  }
  v43 = (void *)objc_opt_self(NSLayoutConstraint);
  v17 = sub_10000EDC8((uint64_t *)&unk_1004866D0);
  v18 = swift_allocObject(v17, 96, 7);
  *(_OWORD *)(v18 + 16) = xmmword_1003B2E80;
  v19 = objc_msgSend(v2, "leadingAnchor");
  v20 = objc_msgSend(v1, "leadingAnchor");
  if (qword_10047A758 != -1)
    swift_once(&qword_10047A758, sub_10000EF18);
  v21 = objc_msgSend(v19, "constraintEqualToAnchor:constant:", v20, *(double *)&qword_1004AF090);

  *(_QWORD *)(v18 + 32) = v21;
  v22 = objc_msgSend(v2, "topAnchor");
  v23 = objc_msgSend(v1, "topAnchor");
  v24 = objc_msgSend(v22, "constraintEqualToAnchor:", v23);

  *(_QWORD *)(v18 + 40) = v24;
  v25 = objc_msgSend(v2, "trailingAnchor");
  v26 = objc_msgSend(v3, "leadingAnchor");
  v27 = objc_msgSend(v25, "constraintEqualToAnchor:constant:", v26, -*(double *)&qword_1004AF090);

  *(_QWORD *)(v18 + 48) = v27;
  v28 = objc_msgSend(v2, "bottomAnchor");
  v29 = objc_msgSend(v1, "bottomAnchor");
  if (qword_10047A9C8 != -1)
    swift_once(&qword_10047A9C8, sub_1000A83A0);
  v30 = objc_msgSend(v28, "constraintEqualToAnchor:constant:", v29, -*(double *)&qword_1004812A0);

  *(_QWORD *)(v18 + 56) = v30;
  v31 = objc_msgSend(v3, "trailingAnchor");
  v32 = objc_msgSend(v1, "trailingAnchor");
  v33 = objc_msgSend(v31, "constraintEqualToAnchor:constant:", v32, -*(double *)&qword_1004AF090);

  *(_QWORD *)(v18 + 64) = v33;
  v34 = objc_msgSend(v3, "topAnchor");
  v35 = objc_msgSend(v1, "topAnchor");
  v36 = objc_msgSend(v34, "constraintEqualToAnchor:", v35);

  *(_QWORD *)(v18 + 72) = v36;
  v37 = objc_msgSend(v3, "bottomAnchor");
  v38 = objc_msgSend(v2, "bottomAnchor");
  v39 = objc_msgSend(v37, "constraintEqualToAnchor:constant:", v38, v5);

  *(_QWORD *)(v18 + 80) = v39;
  v40 = objc_msgSend(v3, "widthAnchor");
  v41 = objc_msgSend(v40, "constraintEqualToConstant:", 103.66);

  *(_QWORD *)(v18 + 88) = v41;
  specialized Array._endMutation()(v42);
  sub_10002277C();
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v43, "activateConstraints:", isa, swift_bridgeObjectRelease(v18).n128_f64[0]);

}

id sub_1000A8ABC(void *a1)
{
  char *v1;
  char *v2;
  objc_class *ObjectType;
  uint64_t v5;
  uint64_t v6;
  id v7;
  char *v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  objc_super v14;

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType(v1);
  v5 = OBJC_IVAR____TtC7Measure11LabelsStrip_primaryLabel;
  v6 = type metadata accessor for InteractiveLabel();
  v7 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v6));
  v8 = v2;
  *(_QWORD *)&v2[v5] = objc_msgSend(v7, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v9 = OBJC_IVAR____TtC7Measure11LabelsStrip_secondaryLabelStack;
  *(_QWORD *)&v8[v9] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for NewSecondaryLabelStack()), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);

  v14.receiver = v8;
  v14.super_class = ObjectType;
  v10 = objc_msgSendSuper2(&v14, "initWithCoder:", a1);
  v11 = v10;
  if (v10)
  {
    v12 = v10;
    sub_1000A84C0();
    sub_1000A858C();

  }
  return v11;
}

uint64_t type metadata accessor for LabelsStrip()
{
  return objc_opt_self(_TtC7Measure11LabelsStrip);
}

id sub_1000A8D10()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = qword_1004812F0;
  v2 = *(void **)(v0 + qword_1004812F0);
  if (v2)
  {
    v3 = *(id *)(v0 + qword_1004812F0);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for EventsRecorder(0)), "init");
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

double sub_1000A8D80()
{
  uint64_t v0;
  uint64_t v1;
  double result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = swift_allocObject(&unk_100443D80, 24, 7);
  swift_unknownObjectWeakInit(v1 + 16, v0);
  v4 = v0;
  v5 = v1;
  swift_retain();
  StateValue.ifUpdated(_:)(sub_1000AA0D4, &v3);
  swift_release();
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

void sub_1000A8E08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t Strong;
  void *v6;
  _BYTE v7[24];

  if (*(_QWORD *)(a2 + qword_1004812E8)
    && (*(_BYTE *)(a2 + qword_100481300 + 8) & 1) == 0
    && *(double *)(a2 + qword_100481300) - *(double *)(a1 + 8) <= 5.0)
  {
    v3 = a3 + 16;
    swift_beginAccess(a3 + 16, v7, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v3, v4);
    if (Strong)
    {
      v6 = (void *)Strong;
      sub_1000A8E94();

    }
  }
}

uint64_t sub_1000A8E94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  void (*v17)(__n128);
  uint64_t v18;
  __n128 v19;
  __n128 v20;
  void *v21;
  void (*v22)(char *, uint64_t);
  void *v23;
  __n128 v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD aBlock[6];

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v32 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v30 = *(_QWORD *)(v4 - 8);
  v31 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchTime(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v29 - v12;
  v14 = (_QWORD *)(v0 + qword_1004812E8);
  v15 = *(void **)(v0 + qword_1004812E8);
  v16 = *(_QWORD *)(v0 + qword_1004812E8 + 8);
  *v14 = 0;
  v14[1] = 0;
  sub_1000AA080(v15, v16);
  v17 = *(void (**)(__n128))(v0 + qword_1004812F8);
  if (v17)
  {
    v18 = *(_QWORD *)(v0 + qword_1004812F8 + 8);
    v19 = swift_retain();
    v17(v19);
    sub_1000217BC((uint64_t)v17, v18);
  }
  sub_100049274();
  v21 = (void *)static OS_dispatch_queue.main.getter(v20);
  static DispatchTime.now()();
  + infix(_:_:)(v11, 20.0);
  v22 = *(void (**)(char *, uint64_t))(v8 + 8);
  v22(v11, v7);
  aBlock[4] = sub_1000A95C0;
  aBlock[5] = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003ECA0;
  aBlock[3] = &unk_100443D98;
  v23 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v24);
  aBlock[0] = _swiftEmptyArrayStorage;
  v25 = sub_100030E1C();
  v26 = sub_10000EDC8((uint64_t *)&unk_10047E430);
  v27 = sub_100030E64();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v26, v27, v1, v25);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v13, v6, v3, v23);
  _Block_release(v23);

  (*(void (**)(char *, uint64_t))(v32 + 8))(v3, v1);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v6, v31);
  return ((uint64_t (*)(char *, uint64_t))v22)(v13, v7);
}

id sub_1000A9108(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unsigned int v11;
  unsigned __int8 *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  NSURL *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  NSURL *v20;
  id v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t ObjCClassMetadata;
  id v26;
  uint64_t v27;
  Swift::String v28;
  void *object;
  void *v30;
  id v31;
  id v32;
  id v33;
  _QWORD *v34;
  void *v35;
  uint64_t v36;
  id v37;
  void *v38;
  uint64_t v39;
  Swift::String v40;
  void *v41;
  Swift::String v42;
  id v43;
  uint64_t v44;
  void *v45;
  Swift::String v46;
  uint64_t countAndFlagsBits;
  void *v48;
  Swift::String v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  void *v57;
  uint64_t v58;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[3];
  _BYTE v64[8];
  Swift::String v65;

  v4 = v3;
  v8 = type metadata accessor for URL(0);
  v61 = *(_QWORD *)(v8 - 8);
  v62 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = objc_msgSend((id)objc_opt_self(ARKitUserDefaults), "BOOLForKey:", ARSessionReplayFilePathManuallyUserDefaultsKey);
  v12 = (unsigned __int8 *)NSUserDefaults.recordReplayOption.unsafeMutableAddressor();
  RecordReplayOption.replayFile.getter(*v12);
  v13 = (uint64_t *)(v4 + qword_1004812F8);
  v14 = *(_QWORD *)(v4 + qword_1004812F8);
  v15 = *(_QWORD *)(v4 + qword_1004812F8 + 8);
  *v13 = a2;
  v13[1] = a3;
  sub_100036254(a2, a3);
  sub_1000217BC(v14, v15);
  URL._bridgeToObjectiveC()(v16);
  v18 = v17;
  v65._countAndFlagsBits = 0;
  v19 = ARReplaySensorClassForMovieURL();

  v21 = (id)v65._countAndFlagsBits;
  if (v19
    && ((URL._bridgeToObjectiveC()(v20), v23 = v22, !v11) ? (v24 = 0) : (v24 = 3),
        ObjCClassMetadata = swift_getObjCClassMetadata(v19),
        v26 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(ObjCClassMetadata)), "initWithSequenceURL:replayMode:", v23, v24), v23, v26))
  {
    v60 = a1;
    if (qword_10047AA58 != -1)
      swift_once(&qword_10047AA58, sub_1000E12F0);
    v65._countAndFlagsBits = 0;
    v65._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(39);
    v27 = swift_bridgeObjectRelease(v65._object);
    v65._countAndFlagsBits = 0xD000000000000025;
    v65._object = (void *)0x80000001003DD2B0;
    v28._countAndFlagsBits = URL.path.getter(v27);
    object = v28._object;
    String.append(_:)(v28);
    swift_bridgeObjectRelease(object);
    v30 = v65._object;
    Log.default(_:isPrivate:)(v65, 0);
    swift_bridgeObjectRelease(v30);
    objc_msgSend(v26, "setReplaySensorDelegate:", v4);
    v31 = sub_1000A8D10();
    sub_10006C4A8(v26, (uint64_t)v31);

    v32 = objc_allocWithZone((Class)ARReplayConfiguration);
    v33 = objc_msgSend(v32, "initWithBaseConfiguration:replaySensor:replayingResultDataClasses:", v60, v26, 0);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v10, v62);
    v34 = (_QWORD *)(v4 + qword_1004812E8);
    v35 = *(void **)(v4 + qword_1004812E8);
    v36 = *(_QWORD *)(v4 + qword_1004812E8 + 8);
    *v34 = v33;
    v34[1] = v26;
    v37 = v33;
    sub_1000AA080(v35, v36);
  }
  else
  {
    v38 = (void *)0xE000000000000000;
    v65._countAndFlagsBits = 0;
    v65._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(49);
    v39 = swift_bridgeObjectRelease(v65._object);
    v65._countAndFlagsBits = 0xD000000000000020;
    v65._object = (void *)0x80000001003DD280;
    v40._countAndFlagsBits = URL.path.getter(v39);
    v41 = v40._object;
    String.append(_:)(v40);
    swift_bridgeObjectRelease(v41);
    v42._countAndFlagsBits = 0x7265206874697720;
    v42._object = (void *)0xED0000203A726F72;
    String.append(_:)(v42);
    if (v21)
    {
      v43 = objc_msgSend(v21, "localizedDescription");
      v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
      v38 = v45;

    }
    else
    {
      v44 = 0;
    }
    v46._countAndFlagsBits = v44;
    v46._object = v38;
    String.append(_:)(v46);
    swift_bridgeObjectRelease(v38);
    countAndFlagsBits = v65._countAndFlagsBits;
    v48 = v65._object;
    if (qword_10047AA58 != -1)
      swift_once(&qword_10047AA58, sub_1000E12F0);
    swift_bridgeObjectRetain(v48);
    v49._countAndFlagsBits = countAndFlagsBits;
    v49._object = v48;
    Log.error(_:isPrivate:)(v49, 0);
    swift_bridgeObjectRelease(v48);
    v50 = sub_1000AA03C();
    v51 = swift_allocError(&type metadata for SessionSimulator.Error, v50, 0, 0);
    *v52 = countAndFlagsBits;
    v52[1] = (uint64_t)v48;
    swift_getErrorValue(v51, v64, v63);
    v53 = Error.localizedDescription.getter(v63[1], v63[2]);
    v55 = v54;
    sub_10004FE04(v53, v54, 0x462079616C706552, 0xED000064656C6961);
    swift_bridgeObjectRelease(v55);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v10, v62);
    swift_errorRelease(v51);
    v56 = (_QWORD *)(v4 + qword_1004812E8);
    v57 = *(void **)(v4 + qword_1004812E8);
    v58 = *(_QWORD *)(v4 + qword_1004812E8 + 8);
    *v56 = 0;
    v56[1] = 0;
    sub_1000AA080(v57, v58);
    v37 = a1;
  }

  return v37;
}

void sub_1000A95C0()
{
  Swift::String v0;

  if (qword_10047AA58 != -1)
    swift_once(&qword_10047AA58, sub_1000E12F0);
  v0._object = (void *)0x80000001003DD330;
  v0._countAndFlagsBits = 0xD000000000000022;
  Log.default(_:isPrivate:)(v0, 0);
  exit(0);
}

uint64_t sub_1000A9628(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return sub_1000A9658(a1);
}

uint64_t sub_1000A9658(_QWORD *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, __n128);
  __n128 v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _BYTE v16[40];

  v3 = qword_1004812E0;
  v4 = sub_10000EDC8(&qword_10047ECF0);
  KeyPath = swift_getKeyPath(&unk_1003B4D88);
  v6 = qword_10047AD88;
  v7 = v1;
  if (v6 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v8 = qword_1004AF890;
  v9 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v4 + 272);
  v10 = swift_retain();
  *(_QWORD *)&v7[v3] = v9(KeyPath, v8, v10);
  v11 = &v7[qword_1004812E8];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *(_QWORD *)&v7[qword_1004812F0] = 0;
  v12 = &v7[qword_1004812F8];
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  v13 = &v7[qword_100481300];
  *(_QWORD *)v13 = 0;
  v13[8] = 1;

  sub_100068B24((uint64_t)a1, (uint64_t)v16);
  v14 = StateObservingNSObject.init(configuration:)(v16);
  sub_10000F690(a1);
  return v14;
}

id sub_1000A9784()
{
  void *v0;
  void *v1;
  objc_class *ObjectType;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, __n128);
  __n128 v10;
  char *v11;
  char *v12;
  char *v13;
  objc_super v15;

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType(v0);
  v3 = qword_1004812E0;
  v4 = sub_10000EDC8(&qword_10047ECF0);
  KeyPath = swift_getKeyPath(&unk_1003B4D88);
  v6 = qword_10047AD88;
  v7 = v1;
  if (v6 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v8 = qword_1004AF890;
  v9 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v4 + 272);
  v10 = swift_retain();
  *(_QWORD *)&v7[v3] = v9(KeyPath, v8, v10);
  v11 = &v7[qword_1004812E8];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *(_QWORD *)&v7[qword_1004812F0] = 0;
  v12 = &v7[qword_1004812F8];
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  v13 = &v7[qword_100481300];
  *(_QWORD *)v13 = 0;
  v13[8] = 1;

  v15.receiver = v7;
  v15.super_class = ObjectType;
  return objc_msgSendSuper2(&v15, "init");
}

id sub_1000A98A4()
{
  return sub_1000A9784();
}

uint64_t sub_1000A98C4()
{
  uint64_t v0;

  swift_release();
  sub_1000AA080(*(void **)(v0 + qword_1004812E8), *(_QWORD *)(v0 + qword_1004812E8 + 8));

  return sub_1000217BC(*(_QWORD *)(v0 + qword_1004812F8), *(_QWORD *)(v0 + qword_1004812F8 + 8));
}

uint64_t sub_1000A9918(uint64_t a1)
{
  swift_release();
  sub_1000AA080(*(void **)(a1 + qword_1004812E8), *(_QWORD *)(a1 + qword_1004812E8 + 8));

  return sub_1000217BC(*(_QWORD *)(a1 + qword_1004812F8), *(_QWORD *)(a1 + qword_1004812F8 + 8));
}

uint64_t type metadata accessor for SessionSimulator(uint64_t a1)
{
  uint64_t result;

  result = qword_100481330;
  if (!qword_100481330)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SessionSimulator);
  return result;
}

uint64_t sub_1000A99B4(uint64_t a1)
{
  _QWORD v2[5];

  v2[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[1] = &unk_1003B4D28;
  v2[2] = &unk_1003B4D40;
  v2[3] = &unk_1003B4D28;
  v2[4] = &unk_1003B4D58;
  return swift_initClassMetadata2(a1, 256, 5, v2, a1 + 200);
}

uint64_t sub_1000A9A18()
{
  return type metadata accessor for SessionSimulator(0);
}

void sub_1000A9A20(double a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  double v16;
  uint64_t v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  void *object;
  Swift::String v23;
  uint64_t countAndFlagsBits;
  void *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  float v34;
  float v35;
  id v36;
  uint64_t v37;
  double v38;
  _QWORD v39[3];
  _BYTE v40[8];
  Swift::String v41;

  v3 = v2;
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (unsigned __int8 *)NSUserDefaults.recordReplayOption.unsafeMutableAddressor(v8);
  v12 = RecordReplayOption.replayFile.getter(*v11);
  v13 = URL.path.getter(v12);
  v15 = v14;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v16 = a2 - a1;
  v17 = v3 + qword_100481300;
  *(double *)v17 = a2;
  *(_BYTE *)(v17 + 8) = 0;
  if (qword_10047AA58 != -1)
    swift_once(&qword_10047AA58, sub_1000E12F0);
  v41._countAndFlagsBits = 0;
  v41._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(52);
  v18._countAndFlagsBits = 0xD000000000000020;
  v18._object = (void *)0x80000001003DD2E0;
  String.append(_:)(v18);
  v19._countAndFlagsBits = v13;
  v19._object = v15;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 0x7564206874697720;
  v20._object = (void *)0xEF206E6F69746172;
  String.append(_:)(v20);
  Double.write<A>(to:)(&v41, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, v16);
  v21._countAndFlagsBits = 115;
  v21._object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  object = v41._object;
  Log.default(_:isPrivate:)(v41, 0);
  swift_bridgeObjectRelease(object);
  if (v16 >= 0.0)
  {
    swift_bridgeObjectRelease(v15);
    if (*(_QWORD *)(v3 + qword_1004812E8))
    {
      v32 = *(void **)(v3 + qword_1004812E8 + 8);
      swift_unknownObjectRetain(v32);
      v33 = (void *)objc_opt_self(ARKitUserDefaults);
      objc_msgSend(v33, "floatForKey:", ARReplaySensorFilePathAdvanceFramesPerSecondMultiplierUserDefaultsKey);
      v35 = v34;
      v36 = objc_msgSend(v33, "integerForKey:", ARReplaySensorFilePathAdvanceToFrameUserDefaultsKey);
      if ((uint64_t)v36 <= 0)
        v37 = -1;
      else
        v37 = (uint64_t)v36;
      objc_msgSend(v32, "advanceToFrameIndex:", v37);
      LODWORD(v38) = 1.0;
      if (v35 > 0.0)
        *(float *)&v38 = v35;
      objc_msgSend(v32, "setAdvanceFramesPerSecondMultiplier:", v38);
      swift_unknownObjectRelease(v32);
    }
  }
  else
  {
    v41._countAndFlagsBits = 0;
    v41._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(18);
    swift_bridgeObjectRelease(v41._object);
    v41._countAndFlagsBits = 0xD000000000000010;
    v41._object = (void *)0x80000001003DD310;
    v23._countAndFlagsBits = v13;
    v23._object = v15;
    String.append(_:)(v23);
    swift_bridgeObjectRelease(v15);
    countAndFlagsBits = v41._countAndFlagsBits;
    v25 = v41._object;
    v26 = sub_1000AA03C();
    v27 = swift_allocError(&type metadata for SessionSimulator.Error, v26, 0, 0);
    *v28 = countAndFlagsBits;
    v28[1] = (uint64_t)v25;
    swift_getErrorValue(v27, v40, v39);
    v29 = Error.localizedDescription.getter(v39[1], v39[2]);
    v31 = v30;
    sub_10004FE04(v29, v30, 0x462079616C706552, 0xED000064656C6961);
    swift_bridgeObjectRelease(v31);
    swift_errorRelease(v27);
  }
}

id *destroy for SessionSimulator.ReplayState(id *result)
{
  id *v1;

  if ((unint64_t)*result >= 0xFFFFFFFF)
  {
    v1 = result;

    return (id *)swift_unknownObjectRelease(v1[1]);
  }
  return result;
}

uint64_t _s7Measure16SessionSimulatorC11ReplayStateOwCP_0(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  if (*(_QWORD *)a2 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = v3;
    *(_QWORD *)(a1 + 8) = v4;
    v5 = v3;
    swift_unknownObjectRetain(v4);
  }
  return a1;
}

uint64_t assignWithCopy for SessionSimulator.ReplayState(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  if (*(_QWORD *)a1 < 0xFFFFFFFFuLL)
  {
    if ((unint64_t)v5 >= 0xFFFFFFFF)
    {
      *(_QWORD *)a1 = v5;
      v9 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = v9;
      v10 = v5;
      swift_unknownObjectRetain(v9);
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if ((unint64_t)v5 < 0xFFFFFFFF)
  {

    swift_unknownObjectRelease(*(_QWORD *)(a1 + 8));
    goto LABEL_7;
  }
  *(_QWORD *)a1 = v5;
  v6 = v5;

  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  swift_unknownObjectRetain(v7);
  swift_unknownObjectRelease(v8);
  return a1;
}

uint64_t assignWithTake for SessionSimulator.ReplayState(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;

  v4 = *(void **)a1;
  if (*(_QWORD *)a1 < 0xFFFFFFFFuLL)
    goto LABEL_5;
  if (*(_QWORD *)a2 < 0xFFFFFFFFuLL)
  {

    swift_unknownObjectRelease(*(_QWORD *)(a1 + 8));
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_unknownObjectRelease(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for SessionSimulator.ReplayState(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SessionSimulator.ReplayState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

_QWORD *sub_1000AA000(_QWORD *result, int a2)
{
  uint64_t v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else
  {
    if (!a2)
      return result;
    v2 = (a2 - 1);
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for SessionSimulator.ReplayState()
{
  return &type metadata for SessionSimulator.ReplayState;
}

unint64_t sub_1000AA03C()
{
  unint64_t result;

  result = qword_1004814C0;
  if (!qword_1004814C0)
  {
    result = swift_getWitnessTable(&unk_1003B4DB4, &type metadata for SessionSimulator.Error);
    atomic_store(result, (unint64_t *)&qword_1004814C0);
  }
  return result;
}

void *sub_1000AA080(void *result, uint64_t a2)
{
  if (result)
  {

    return (void *)swift_unknownObjectRelease(a2);
  }
  return result;
}

uint64_t sub_1000AA0B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_unknownObjectWeakDestroy(v2 + 16, a2);
  return swift_deallocObject(v2, 24, 7);
}

void sub_1000AA0D4(uint64_t a1)
{
  uint64_t v1;

  sub_1000A8E08(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1000AA0DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000AA0EC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

_QWORD *initializeBufferWithCopyOfBuffer for SessionSimulator.Error(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for LabelRenderEvent(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

_QWORD *assignWithCopy for SessionSimulator.Error(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

_QWORD *assignWithTake for SessionSimulator.Error(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for SessionSimulator.Error(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SessionSimulator.Error(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SessionSimulator.Error()
{
  return &type metadata for SessionSimulator.Error;
}

void sub_1000AA230()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t ObjCClassFromMetadata;
  NSString v5;
  uint64_t v6;
  uint64_t v7;
  NSString v8;
  uint64_t v9;
  uint64_t v10;
  NSString v11;
  uint64_t v12;
  uint64_t v13;
  NSString v14;
  uint64_t v15;
  uint64_t v16;
  NSString v17;
  id v18;
  id v19;
  id v20;
  double v21;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC7Measure11HistoryView_tableView);
  v2 = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
  objc_msgSend(v1, "setTableFooterView:", v2);

  v3 = type metadata accessor for LineHistoryCell();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v3);
  v5 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "registerClass:forCellReuseIdentifier:", ObjCClassFromMetadata, v5);

  v6 = type metadata accessor for LineHistoryCellWithScreenshot();
  v7 = swift_getObjCClassFromMetadata(v6);
  v8 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "registerClass:forCellReuseIdentifier:", v7, v8);

  v9 = type metadata accessor for RectangleHistoryCell();
  v10 = swift_getObjCClassFromMetadata(v9);
  v11 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "registerClass:forCellReuseIdentifier:", v10, v11);

  v12 = type metadata accessor for RectangleHistoryCellWithScreenshot();
  v13 = swift_getObjCClassFromMetadata(v12);
  v14 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "registerClass:forCellReuseIdentifier:", v13, v14);

  v15 = type metadata accessor for ObjectHistoryCell();
  v16 = swift_getObjCClassFromMetadata(v15);
  v17 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "registerClass:forCellReuseIdentifier:", v16, v17);

  objc_msgSend(v1, "setSeparatorInset:", UIEdgeInsetsZero.top, UIEdgeInsetsZero.left, UIEdgeInsetsZero.bottom, UIEdgeInsetsZero.right);
  v18 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
  objc_msgSend(v1, "setBackgroundColor:", v18);

  objc_msgSend(v1, "setRowHeight:", UITableViewAutomaticDimension);
  v19 = objc_msgSend((id)objc_opt_self(UITraitCollection), "currentTraitCollection");
  v20 = objc_msgSend(v19, "preferredContentSizeCategory");

  LOBYTE(v19) = UIContentSizeCategory.isAccessibilityCategory.getter(v20);
  v21 = 88.0;
  if ((v19 & 1) != 0)
    v21 = 222.0;
  objc_msgSend(v1, "setEstimatedRowHeight:", v21);
  sub_1000AA690();
  sub_1000DCD78();
}

void sub_1000AA690()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  _QWORD v7[6];

  v1 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_10047B198 != -1)
    swift_once(&qword_10047B198, sub_1001CA024);
  v2 = qword_1004AFD10;
  v3 = swift_allocObject(&unk_100443EC8, 24, 7);
  *(_QWORD *)(v3 + 16) = v0;
  v7[4] = sub_1000AA99C;
  v7[5] = v3;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256;
  v7[2] = sub_1000DCC48;
  v7[3] = &unk_100443EE0;
  v4 = _Block_copy(v7);
  v5 = v0;
  v6 = objc_msgSend(v1, "addObserverForName:object:queue:usingBlock:", v2, 0, 0, v4, swift_release().n128_f64[0]);
  _Block_release(v4);
  swift_unknownObjectRelease(v6);

}

id sub_1000AA7C0(uint64_t a1, double a2, double a3)
{
  char *v3;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *Strong;
  id v11;
  objc_super v13;

  v13.receiver = v3;
  v13.super_class = (Class)swift_getObjectType(v3);
  v7 = objc_msgSendSuper2(&v13, "hitTest:withEvent:", a1, a2, a3);
  if (v7)
  {
    v8 = sub_100018148(0, (unint64_t *)&qword_10047E560, UIDevice_ptr);
    if ((static UIDevice.isIPhone()(v8) & 1) == 0)
    {
      sub_100018148(0, (unint64_t *)&qword_10047C128, NSObject_ptr);
      if ((static NSObject.== infix(_:_:)(v7, v3) & 1) != 0
        || (Strong = (void *)swift_unknownObjectWeakLoadStrong(&v3[OBJC_IVAR____TtC7Measure11HistoryView_cardContainer], v9)) != 0&& (v11 = Strong, Strong, v7 == v11))
      {

        return 0;
      }
    }
  }
  return v7;
}

uint64_t type metadata accessor for HistoryView()
{
  return objc_opt_self(_TtC7Measure11HistoryView);
}

uint64_t sub_1000AA978()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_1000AA99C()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC7Measure11HistoryView_tableView), "reloadData");
}

uint64_t sub_1000AA9B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000AA9C8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000AA9D0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  v3 = *(_QWORD *)(a3 + 80);
  if (!*(_QWORD *)(v3 + 16))
  {
    __break(1u);
    goto LABEL_7;
  }
  result = sub_1000C819C(result);
  if ((v5 & 1) == 0)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  v6 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * result);
  v7 = type metadata accessor for PersonHeightInstrument(0);
  swift_bridgeObjectRetain(v6);
  v8 = sub_1000ACC2C(v7, (uint64_t)&off_1004411C8, v6, a2);
  swift_bridgeObjectRelease(v6);
  if (v8)
    return 256;
  else
    return 0;
}

uint64_t sub_1000AAA5C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t KeyPath;
  _QWORD *v8;
  uint64_t v9;
  id v10;
  _QWORD v12[6];

  v2 = v1;
  v4 = *v1;
  v5 = sub_10000EDC8(&qword_100481738);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  v6 = swift_retain(v1);
  v1[8] = PassthroughSubject.init()(v6);
  sub_10000EDC8(&qword_100481740);
  KeyPath = swift_getKeyPath(&unk_1003B4E80);
  v1[9] = MutableStateBinding.__allocating_init(_:_:)(KeyPath, v4);
  v1[11] = _swiftEmptyArrayStorage;
  v1[12] = _swiftEmptyArrayStorage;
  v1[13] = _swiftEmptyDictionarySingleton;
  v1[14] = _swiftEmptyDictionarySingleton;
  v1[15] = _swiftEmptyDictionarySingleton;
  v8 = sub_1000ACDC4(a1);
  swift_bridgeObjectRelease(a1);
  v2[10] = v8;
  swift_release(v2);
  v12[3] = &type metadata for Configurations.Default;
  v12[4] = &protocol witness table for Configurations.Default;
  v9 = StateObserver.init(configuration:)(v12);
  swift_retain(v9);
  sub_1000AABAC();
  v10 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  objc_msgSend(v10, "addObserver:selector:name:object:", v9, "thermalStateDidChange", NSProcessInfoThermalStateDidChangeNotification, 0);

  swift_release(v9);
  return v9;
}

double sub_1000AABAC()
{
  uint64_t v0;
  id v1;
  NSString v2;
  id v3;
  double result;
  uint64_t v5;
  uint64_t (*v6)(_BYTE *, __n128);
  __n128 v7;
  void (*v8)(_BYTE *, _QWORD);
  _BYTE *v9;
  _BYTE v10[32];

  v1 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v1, "integerForKey:", v2);

  if (v3 == (id)1 || v3 == (id)2)
  {
    sub_1000AADD8((uint64_t)v3);
    v5 = *(_QWORD *)(v0 + 72);
    v6 = *(uint64_t (**)(_BYTE *, __n128))(*(_QWORD *)v5 + 400);
    v7 = swift_retain(v5);
    v8 = (void (*)(_BYTE *, _QWORD))v6(v10, v7);
    *v9 = (_BYTE)v3;
    v8(v10, 0);
    *(_QWORD *)&result = swift_release(v5).n128_u64[0];
  }
  return result;
}

void sub_1000AAC8C()
{
  uint64_t v0;
  _QWORD *inited;
  uint64_t v2;
  __n128 v3;
  uint64_t KeyPath;
  _BYTE v5[128];

  inited = (_QWORD *)swift_initStackObject(v0, v5);
  v2 = sub_10000EDC8(&qword_100481738);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  inited[8] = PassthroughSubject.init()(v3);
  sub_10000EDC8(&qword_100481740);
  KeyPath = swift_getKeyPath(&unk_1003B4E80);
  inited[9] = MutableStateBinding.__allocating_init(_:_:)(KeyPath, v0);
  inited[11] = _swiftEmptyArrayStorage;
  inited[12] = _swiftEmptyArrayStorage;
  inited[13] = _swiftEmptyDictionarySingleton;
  inited[14] = _swiftEmptyDictionarySingleton;
  inited[15] = _swiftEmptyDictionarySingleton;
  swift_release();
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000002DLL, 0x80000001003D7D70, "Measure/InstrumentationCoordinator.swift", 40, 2, 51, 0);
  __break(1u);
}

double sub_1000AAD70()
{
  uint64_t v0;
  uint64_t (*v1)(__n128);
  __n128 v2;
  uint64_t v3;
  __n128 v4;
  double result;

  v1 = *(uint64_t (**)(__n128))(**(_QWORD **)(v0 + 72) + 200);
  v2 = swift_retain();
  v3 = v1(v2);
  v4 = swift_release();
  (*(void (**)(uint64_t (*)(unsigned __int8 *), uint64_t, __n128))(*(_QWORD *)v3 + 296))(sub_1000AD680, v0, v4);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t sub_1000AADD8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  Swift::String v29;
  Swift::String v30;
  uint64_t v31;
  unint64_t v32;
  Swift::String v33;
  void *object;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  char v41;

  v2 = v1;
  v4 = sub_10000EDC8(&qword_100481668);
  v35 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10000EDC8(&qword_100481670);
  v37 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v1 + 80);
  if (*(_QWORD *)(v10 + 16) && (v11 = sub_1000C819C(a1), (v12 & 1) != 0))
  {
    v38 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v11);
    v13 = *(_QWORD *)(v1 + 88);
    swift_bridgeObjectRetain(v38);
    swift_bridgeObjectRetain(v13);
    swift_retain(v1);
    v14 = sub_1000AD6CC(v13);
    swift_release(v2);
    v39 = v14;
    v15 = sub_10000EDC8(&qword_100481678);
    v36 = a1;
    v16 = sub_10000EDC8(&qword_100481680);
    v17 = sub_100043310(&qword_100481688, &qword_100481678, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    v18 = sub_100043310(&qword_100481690, &qword_100481680, (uint64_t)&protocol conformance descriptor for [A]);
    Publishers.MergeMany.init<A>(_:)(&v39, v15, v16, v17, v18);
    v19 = sub_100043310(&qword_100481698, &qword_100481668, (uint64_t)&protocol conformance descriptor for Publishers.MergeMany<A>);
    Publisher.collect()(v4, v19);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v6, v4);
    v20 = swift_allocObject(&unk_100444010, 32, 7);
    *(_QWORD *)(v20 + 16) = v13;
    *(_QWORD *)(v20 + 24) = v2;
    v21 = sub_100043310(&qword_1004816A0, &qword_100481670, (uint64_t)&protocol conformance descriptor for Publishers.Collect<A>);
    swift_bridgeObjectRetain(v13);
    v22 = swift_retain(v2);
    v23 = Publisher<>.sink(receiveValue:)(sub_1000AD7AC, v20, v7, v21, v22);
    v24 = swift_release(v20);
    (*(void (**)(char *, uint64_t, __n128))(v37 + 8))(v9, v7, v24);
    swift_beginAccess(v2 + 96, &v39, 33, 0);
    v25 = sub_10000EDC8(&qword_10047D9A0);
    v26 = sub_100043310(&qword_10047D9A8, &qword_10047D9A0, (uint64_t)&protocol conformance descriptor for [A]);
    AnyCancellable.store<A>(in:)(v2 + 96, v25, v26);
    swift_endAccess(&v39);
    swift_bridgeObjectRelease(v13);
    swift_release(v23);
    v27 = v38;
    sub_1000AB1D4(v38, v36);
    return swift_bridgeObjectRelease(v27);
  }
  else
  {
    v39 = 0;
    v40 = 0xE000000000000000;
    _StringGuts.grow(_:)(52);
    v29._countAndFlagsBits = 0x2065646F4DLL;
    v29._object = (void *)0xE500000000000000;
    String.append(_:)(v29);
    v41 = a1;
    _print_unlocked<A, B>(_:_:)(&v41, &v39, &type metadata for InstrumentationMode, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v30._object = (void *)0x80000001003DD570;
    v30._countAndFlagsBits = 0xD00000000000002BLL;
    String.append(_:)(v30);
    swift_bridgeObjectRetain(v10);
    v31 = sub_10000EDC8(&qword_100481708);
    v32 = sub_1000AD688();
    v33._countAndFlagsBits = Dictionary.description.getter(v10, &type metadata for InstrumentationMode, v31, v32);
    object = v33._object;
    String.append(_:)(v33);
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(object);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v39, v40, "Measure/InstrumentationCoordinator.swift", 40, 2, 65, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_1000AB1D4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t ObjectType;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v54;
  unint64_t v55;
  uint64_t v56;
  _BOOL8 v57;
  uint64_t v58;
  char v59;
  unint64_t v60;
  char v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t result;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  _QWORD v80[3];

  v3 = v2;
  LODWORD(v78) = a2;
  v5 = sub_10000EDC8(&qword_100481718);
  v73 = *(_QWORD *)(v5 - 8);
  v74 = v5;
  __chkstk_darwin(v5);
  v72 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v75 = *(_QWORD *)(v7 - 8);
  v76 = v7;
  __chkstk_darwin(v7);
  v77 = (uint64_t)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10000EDC8(&qword_100481668);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = sub_10000EDC8(&qword_100481670);
  v71 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v14 = (char *)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (_QWORD *)swift_bridgeObjectRetain(a1);
  sub_1000FFEF4(v15);
  swift_retain(v2);
  v16 = sub_1000AD914(a1);
  swift_release(v3);
  v80[0] = v16;
  v17 = sub_10000EDC8(&qword_100481678);
  v18 = sub_10000EDC8(&qword_100481680);
  v19 = sub_100043310(&qword_100481688, &qword_100481678, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v20 = sub_100043310(&qword_100481690, &qword_100481680, (uint64_t)&protocol conformance descriptor for [A]);
  v69 = v19;
  v70 = v17;
  Publishers.MergeMany.init<A>(_:)(v80, v17, v18, v19, v20);
  v21 = sub_100043310(&qword_100481698, &qword_100481668, (uint64_t)&protocol conformance descriptor for Publishers.MergeMany<A>);
  Publisher.collect()(v9, v21);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v22 = swift_allocObject(&unk_100444038, 25, 7);
  *(_QWORD *)(v22 + 16) = v3;
  *(_BYTE *)(v22 + 24) = v78;
  v23 = sub_100043310(&qword_1004816A0, &qword_100481670, (uint64_t)&protocol conformance descriptor for Publishers.Collect<A>);
  v24 = swift_retain(v3);
  v25 = v68;
  v26 = Publisher<>.sink(receiveValue:)(sub_1000ADA0C, v22, v68, v23, v24);
  v27 = swift_release(v22);
  (*(void (**)(char *, uint64_t, __n128))(v71 + 8))(v14, v25, v27);
  swift_beginAccess(v3 + 96, v80, 33, 0);
  v28 = sub_10000EDC8(&qword_10047D9A0);
  v29 = sub_100043310(&qword_10047D9A8, &qword_10047D9A0, (uint64_t)&protocol conformance descriptor for [A]);
  AnyCancellable.store<A>(in:)(v3 + 96, v28, v29);
  swift_endAccess(v80);
  v30 = v26;
  v31 = a1;
  swift_release(v30);
  v32 = (_QWORD *)(v3 + 112);
  swift_beginAccess(v3 + 112, v80, 1, 0);
  v71 = v3;
  v33 = *(_QWORD **)(v3 + 112);
  v68 = *(_QWORD *)(a1 + 16);
  if (!v68)
  {
    swift_bridgeObjectRetain(v33);
    v35 = v33;
LABEL_18:
    *v32 = v35;
    return swift_bridgeObjectRelease(v33);
  }
  v66 = (_QWORD *)(v3 + 112);
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(v33);
  v34 = 0;
  v35 = v33;
  v36 = v77;
  v67 = v31;
  v37 = v71;
  while (1)
  {
    v78 = *(_OWORD *)(v31 + 16 * v34 + 32);
    v39 = v78;
    ObjectType = swift_getObjectType(v78);
    swift_unknownObjectRetain(v39);
    v41 = *((_QWORD *)&v78 + 1);
    sub_1000906A4(ObjectType, *((uint64_t *)&v78 + 1));
    v79 = (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 40))(ObjectType, v41);
    v42 = swift_allocObject(&unk_100444060, 40, 7);
    *(_QWORD *)(v42 + 16) = v37;
    *(_OWORD *)(v42 + 24) = v78;
    swift_retain(v37);
    v43 = swift_unknownObjectRetain(v39);
    v44 = static Subscribers.Demand.unlimited.getter(v43);
    v45 = sub_10000EDC8(&qword_100481720);
    v46 = sub_100043310(&qword_100481728, &qword_100481720, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    v47 = v72;
    Publisher<>.flatMap<A>(maxPublishers:_:)(v44, sub_1000ADA78, v42, v45, v70, v46, v69);
    swift_release(v42);
    swift_release(v79);
    v48 = sub_100043310(&qword_100481730, &qword_100481718, (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
    v49 = swift_retain(v37);
    v50 = v74;
    v51 = Publisher<>.sink(receiveValue:)(sub_1000ADAA8, v37, v74, v48, v49);
    v52 = swift_release(v37);
    (*(void (**)(char *, uint64_t, __n128))(v73 + 8))(v47, v50, v52);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v35);
    v79 = (uint64_t)v35;
    v55 = sub_1000C83A0(v36);
    v56 = v35[2];
    v57 = (v54 & 1) == 0;
    v58 = v56 + v57;
    if (__OFADD__(v56, v57))
      break;
    v59 = v54;
    if (v35[3] >= v58)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v35 = (_QWORD *)v79;
        if ((v54 & 1) != 0)
          goto LABEL_3;
      }
      else
      {
        sub_1000BF1B4();
        v35 = (_QWORD *)v79;
        if ((v59 & 1) != 0)
          goto LABEL_3;
      }
    }
    else
    {
      sub_1000B8F20(v58, isUniquelyReferenced_nonNull_native);
      v60 = sub_1000C83A0(v77);
      if ((v59 & 1) != (v61 & 1))
        goto LABEL_21;
      v55 = v60;
      v35 = (_QWORD *)v79;
      if ((v59 & 1) != 0)
      {
LABEL_3:
        v38 = v35[7];
        swift_release(*(_QWORD *)(v38 + 8 * v55));
        *(_QWORD *)(v38 + 8 * v55) = v51;
        v36 = v77;
        goto LABEL_4;
      }
    }
    v35[(v55 >> 6) + 8] |= 1 << v55;
    v36 = v77;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v75 + 16))(v35[6] + *(_QWORD *)(v75 + 72) * v55, v77, v76);
    *(_QWORD *)(v35[7] + 8 * v55) = v51;
    v62 = v35[2];
    v63 = __OFADD__(v62, 1);
    v64 = v62 + 1;
    if (v63)
      goto LABEL_20;
    v35[2] = v64;
LABEL_4:
    swift_bridgeObjectRelease(0x8000000000000000);
    ++v34;
    (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v36, v76);
    swift_unknownObjectRelease(v39);
    v31 = v67;
    if (v68 == v34)
    {
      swift_bridgeObjectRelease(v67);
      v32 = v66;
      v33 = (_QWORD *)*v66;
      goto LABEL_18;
    }
  }
  __break(1u);
LABEL_20:
  __break(1u);
LABEL_21:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v76);
  __break(1u);
  return result;
}

uint64_t sub_1000AB834()
{
  _QWORD *v0;

  swift_release(v0[8]);
  swift_release(v0[9]);
  swift_bridgeObjectRelease(v0[10]);
  swift_bridgeObjectRelease(v0[11]);
  swift_bridgeObjectRelease(v0[12]);
  swift_bridgeObjectRelease(v0[13]);
  swift_bridgeObjectRelease(v0[14]);
  return swift_bridgeObjectRelease(v0[15]);
}

_QWORD *sub_1000AB880()
{
  _QWORD *v0;

  v0 = (_QWORD *)StateObserver.deinit();
  swift_release(v0[8]);
  swift_release(v0[9]);
  swift_bridgeObjectRelease(v0[10]);
  swift_bridgeObjectRelease(v0[11]);
  swift_bridgeObjectRelease(v0[12]);
  swift_bridgeObjectRelease(v0[13]);
  swift_bridgeObjectRelease(v0[14]);
  swift_bridgeObjectRelease(v0[15]);
  return v0;
}

uint64_t sub_1000AB8E4()
{
  _QWORD *v0;

  v0 = sub_1000AB880();
  return swift_deallocClassInstance(v0, 128, 7);
}

uint64_t type metadata accessor for InstrumentationCoordinator(uint64_t a1)
{
  uint64_t result;

  result = qword_100481528;
  if (!qword_100481528)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for InstrumentationCoordinator);
  return result;
}

uint64_t sub_1000AB93C(uint64_t a1)
{
  _QWORD v2[8];

  v2[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
  return swift_initClassMetadata2(a1, 256, 8, v2, a1 + 208);
}

uint64_t sub_1000AB998()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  id v9;
  Swift::String v10;
  void *object;
  void *v12;
  __n128 v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::String aBlock;
  uint64_t (*v28)(uint64_t);
  void *v29;
  void (*v30)();
  uint64_t v31;
  id v32;

  v1 = v0;
  v24 = *v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v26 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for DispatchQoS(0);
  v5 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10047AA70 != -1)
    swift_once(&qword_10047AA70, sub_1000E13E4);
  aBlock._countAndFlagsBits = 0;
  aBlock._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(28);
  swift_bridgeObjectRelease(aBlock._object);
  aBlock._countAndFlagsBits = 0xD00000000000001ALL;
  aBlock._object = (void *)0x80000001003DD520;
  v8 = objc_msgSend((id)objc_opt_self(NSProcessInfo), "processInfo");
  v9 = objc_msgSend(v8, "thermalState");

  v32 = v9;
  v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v10._object;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(object);
  v12 = aBlock._object;
  Log.default(_:isPrivate:)(aBlock, 0);
  swift_bridgeObjectRelease(v12);
  sub_100049274();
  v14 = (void *)static OS_dispatch_queue.main.getter(v13);
  v15 = swift_allocObject(&unk_100443F20, 24, 7);
  swift_weakInit(v15 + 16, v1);
  v16 = swift_allocObject(&unk_100443F48, 32, 7);
  v17 = v24;
  *(_QWORD *)(v16 + 16) = v15;
  *(_QWORD *)(v16 + 24) = v17;
  v30 = sub_1000ACDA4;
  v31 = v16;
  aBlock._countAndFlagsBits = (uint64_t)_NSConcreteStackBlock;
  aBlock._object = (void *)1107296256;
  v28 = sub_10003ECA0;
  v29 = &unk_100443F60;
  v18 = _Block_copy(&aBlock);
  v19 = swift_release();
  static DispatchQoS.unspecified.getter(v19);
  aBlock._countAndFlagsBits = (uint64_t)_swiftEmptyArrayStorage;
  v20 = sub_10000C4B0((unint64_t *)&qword_10047D7F0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v21 = sub_10000EDC8((uint64_t *)&unk_10047E430);
  v22 = sub_100043310((unint64_t *)&qword_10047D800, (uint64_t *)&unk_10047E430, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v21, v22, v2, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v4, v18);
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v26 + 8))(v4, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v25);
}

void sub_1000ABCBC(uint64_t a1)
{
  uint64_t v1;
  id v2;
  unint64_t v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  if (swift_weakLoadStrong(v1))
  {
    v2 = objc_msgSend((id)objc_opt_self(NSProcessInfo), "processInfo");
    v3 = (unint64_t)objc_msgSend(v2, "thermalState");

    if (v3 >= 4)
    {
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Measure/InstrumentationCoordinator.swift", 40, 2, 102, 0);
      __break(1u);
    }
    else
    {
      sub_1000ABDA4(0x20303u >> (8 * v3));
      swift_release();
    }
  }
}

double sub_1000ABDA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t ObjectType;
  uint64_t (*v22)(uint64_t, uint64_t);
  char v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double result;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[3];

  v2 = v1;
  v4 = sub_10000EDC8(&qword_100481668);
  v41 = *(_QWORD *)(v4 - 8);
  v42 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10000EDC8(&qword_100481670);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v1 + 88);
  v12 = *(_QWORD *)(v11 + 16);
  v13 = _swiftEmptyArrayStorage;
  if (v12)
  {
    v38 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    v39 = v8;
    v40 = v7;
    v43[0] = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v11);
    specialized ContiguousArray.reserveCapacity(_:)(v12);
    v14 = (uint64_t *)(v11 + 40);
    do
    {
      v19 = *(v14 - 1);
      v20 = *v14;
      ObjectType = swift_getObjectType(v19);
      v22 = *(uint64_t (**)(uint64_t, uint64_t))(v20 + 48);
      swift_unknownObjectRetain(v19);
      v23 = v22(ObjectType, v20);
      v24 = a1;
      if ((v23 & 1) == 0)
        v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(ObjectType, v20, a1);
      v15 = sub_1000AD084(v19, v20, v24);
      v16 = swift_unknownObjectRelease(v19);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v16);
      v17 = *(_QWORD *)(v43[0] + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v17);
      v18 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v15);
      specialized ContiguousArray._endMutation()(v18);
      v14 += 2;
      --v12;
    }
    while (v12);
    v13 = (double *)v43[0];
    swift_bridgeObjectRelease(v11);
    v8 = v39;
    v7 = v40;
    v10 = v38;
  }
  v43[0] = v13;
  v25 = sub_10000EDC8(&qword_100481678);
  v26 = sub_10000EDC8(&qword_100481680);
  v27 = sub_100043310(&qword_100481688, &qword_100481678, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v28 = sub_100043310(&qword_100481690, &qword_100481680, (uint64_t)&protocol conformance descriptor for [A]);
  Publishers.MergeMany.init<A>(_:)(v43, v25, v26, v27, v28);
  v29 = sub_100043310(&qword_100481698, &qword_100481668, (uint64_t)&protocol conformance descriptor for Publishers.MergeMany<A>);
  v30 = v42;
  Publisher.collect()(v42, v29);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v6, v30);
  v31 = sub_100043310(&qword_1004816A0, &qword_100481670, (uint64_t)&protocol conformance descriptor for Publishers.Collect<A>);
  v32 = swift_retain();
  Publisher<>.sink(receiveValue:)(sub_1000AD504, v2, v7, v31, v32);
  v33 = swift_release();
  (*(void (**)(char *, uint64_t, __n128))(v8 + 8))(v10, v7, v33);
  v34 = v2 + 96;
  swift_beginAccess(v34, v43, 33, 0);
  v35 = sub_10000EDC8(&qword_10047D9A0);
  v36 = sub_100043310(&qword_10047D9A8, &qword_10047D9A0, (uint64_t)&protocol conformance descriptor for [A]);
  AnyCancellable.store<A>(in:)(v34, v35, v36);
  swift_endAccess(v43);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

void sub_1000AC0F8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  void (*v19)(char *, uint64_t, __n128);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  char v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v29;
  unint64_t v30;
  uint64_t v31;
  _BOOL8 v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;

  v44 = sub_10000EDC8(&qword_1004816A8);
  v4 = *(_QWORD *)(v44 - 8);
  v5 = __chkstk_darwin(v44);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v41 - v9;
  __chkstk_darwin(v8);
  v12 = (char *)&v41 - v11;
  v13 = *a1;
  v14 = (_QWORD *)sub_1000C77E8((uint64_t)_swiftEmptyArrayStorage);
  v15 = *(_QWORD *)(v13 + 16);
  if (v15)
  {
    v41 = v13;
    v42 = a2;
    v16 = v13 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v43 = *(_QWORD *)(v4 + 72);
    swift_bridgeObjectRetain(v13);
    while (1)
    {
      v45 = v16;
      v46 = v15;
      sub_1000AD50C(v16, (uint64_t)v12);
      v20 = v44;
      v21 = *(int *)(v44 + 48);
      v22 = type metadata accessor for UUID(0);
      v47 = *(_QWORD *)(v22 - 8);
      v23 = *(void (**)(char *, char *, uint64_t))(v47 + 16);
      v23(v10, v12, v22);
      v24 = v12[v21];
      v10[v21] = v24;
      v25 = *(int *)(v20 + 48);
      v26 = v12;
      v23(v7, v12, v22);
      v27 = v7;
      v7[v25] = v24;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v14);
      v48 = v14;
      v30 = sub_1000C83A0((uint64_t)v10);
      v31 = v14[2];
      v32 = (v29 & 1) == 0;
      v33 = v31 + v32;
      if (__OFADD__(v31, v32))
        break;
      v34 = v29;
      if (v14[3] >= v33)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_1000BEF94();
      }
      else
      {
        sub_1000B8B84(v33, isUniquelyReferenced_nonNull_native);
        v35 = sub_1000C83A0((uint64_t)v10);
        if ((v34 & 1) != (v36 & 1))
          goto LABEL_18;
        v30 = v35;
      }
      v7 = v27;
      v14 = v48;
      v12 = v26;
      if ((v34 & 1) != 0)
      {
        *(_BYTE *)(v48[7] + v30) = v24;
        v17 = v47;
      }
      else
      {
        v48[(v30 >> 6) + 8] |= 1 << v30;
        v17 = v47;
        v23((char *)(v14[6] + *(_QWORD *)(v47 + 72) * v30), v10, v22);
        *(_BYTE *)(v14[7] + v30) = v24;
        v37 = v14[2];
        v38 = __OFADD__(v37, 1);
        v39 = v37 + 1;
        if (v38)
          goto LABEL_17;
        v14[2] = v39;
      }
      v18 = swift_bridgeObjectRelease(0x8000000000000000);
      v19 = *(void (**)(char *, uint64_t, __n128))(v17 + 8);
      v19(v10, v22, v18);
      ((void (*)(char *, uint64_t))v19)(v7, v22);
      sub_100036600((uint64_t)v12, &qword_1004816A8);
      v16 = v45 + v43;
      v15 = v46 - 1;
      if (v46 == 1)
      {
        swift_bridgeObjectRelease(v41);
        a2 = v42;
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v22);
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_beginAccess(a2 + 120, &v48, 1, 0);
    v40 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a2 + 120) = v14;
    swift_bridgeObjectRelease(v40);
  }
}

uint64_t sub_1000AC3DC(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  void (*v24)(uint64_t, char *, uint64_t);
  char *v25;
  char v26;
  uint64_t v27;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t result;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE v53[8];
  _QWORD *v54;
  _QWORD *v55;

  v50 = sub_10000EDC8(&qword_1004816A8);
  v6 = *(_QWORD *)(v50 - 8);
  v7 = __chkstk_darwin(v50);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v51 = (uint64_t)&v44 - v11;
  __chkstk_darwin(v10);
  v13 = (char *)&v44 - v12;
  v14 = *a1;
  v15 = (_QWORD *)sub_1000C77E8((uint64_t)_swiftEmptyArrayStorage);
  v16 = *(_QWORD *)(v14 + 16);
  if (!v16)
  {
LABEL_16:
    swift_beginAccess(a2 + 120, &v55, 1, 0);
    v42 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a2 + 120) = v15;
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRelease(v42);
    v53[0] = a3;
    v54 = v15;
    PassthroughSubject.send(_:)(v53);
    return swift_bridgeObjectRelease(v15);
  }
  v44 = v14;
  v45 = a2;
  v46 = a3;
  v17 = v14 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  v47 = *(_QWORD *)(v6 + 72);
  swift_bridgeObjectRetain(v14);
  v18 = v51;
  v48 = v13;
  v49 = v9;
  while (1)
  {
    v52 = v16;
    sub_1000AD50C(v17, (uint64_t)v13);
    v20 = v50;
    v21 = *(int *)(v50 + 48);
    v22 = type metadata accessor for UUID(0);
    v23 = *(_QWORD **)(v22 - 8);
    v24 = (void (*)(uint64_t, char *, uint64_t))v23[2];
    v24(v18, v13, v22);
    v25 = v13;
    v26 = v13[v21];
    *(_BYTE *)(v18 + v21) = v26;
    v27 = *(int *)(v20 + 48);
    v24((uint64_t)v9, v25, v22);
    v9[v27] = v26;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v15);
    v29 = v18;
    v30 = isUniquelyReferenced_nonNull_native;
    v55 = v15;
    v32 = sub_1000C83A0(v29);
    v33 = v15[2];
    v34 = (v31 & 1) == 0;
    v35 = v33 + v34;
    if (__OFADD__(v33, v34))
      break;
    v36 = v31;
    if (v15[3] >= v35)
    {
      if ((v30 & 1) == 0)
        sub_1000BEF94();
      v18 = v51;
      v15 = v55;
      if ((v36 & 1) != 0)
        goto LABEL_3;
    }
    else
    {
      sub_1000B8B84(v35, v30);
      v18 = v51;
      v37 = sub_1000C83A0(v51);
      if ((v36 & 1) != (v38 & 1))
        goto LABEL_19;
      v32 = v37;
      v15 = v55;
      if ((v36 & 1) != 0)
      {
LABEL_3:
        *(_BYTE *)(v15[7] + v32) = v26;
        goto LABEL_4;
      }
    }
    v15[(v32 >> 6) + 8] |= 1 << v32;
    v24(v15[6] + v23[9] * v32, (char *)v18, v22);
    *(_BYTE *)(v15[7] + v32) = v26;
    v39 = v15[2];
    v40 = __OFADD__(v39, 1);
    v41 = v39 + 1;
    if (v40)
      goto LABEL_18;
    v15[2] = v41;
LABEL_4:
    swift_bridgeObjectRelease(0x8000000000000000);
    v19 = (void (*)(uint64_t, uint64_t))v23[1];
    v19(v18, v22);
    v9 = v49;
    v19((uint64_t)v49, v22);
    v13 = v48;
    sub_100036600((uint64_t)v48, &qword_1004816A8);
    v17 += v47;
    v16 = v52 - 1;
    if (v52 == 1)
    {
      swift_bridgeObjectRelease(v44);
      LOBYTE(a3) = v46;
      a2 = v45;
      goto LABEL_16;
    }
  }
  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v22);
  __break(1u);
  return result;
}

uint64_t sub_1000AC700(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  char v15;
  uint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  void (*v21)(_QWORD *__return_ptr, __n128);
  __n128 v22;
  uint64_t v23;
  uint64_t v25;
  _QWORD v26[3];

  v4 = sub_10000EDC8(&qword_1004816A8);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v26[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v26[-1] - v9;
  v11 = *(int *)(v8 + 48);
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v14(v10, a1, v12);
  v15 = *(_BYTE *)(a1 + v11);
  v10[v11] = v15;
  v16 = *(int *)(v4 + 48);
  v14(v7, a1, v12);
  v7[v16] = v15;
  swift_beginAccess(a2 + 120, v26, 33, 0);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(a2 + 120));
  v25 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 120) = 0x8000000000000000;
  sub_1000BCA64(v15, (uint64_t)v10, isUniquelyReferenced_nonNull_native);
  v18 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 120) = v25;
  swift_bridgeObjectRelease(v18);
  v19 = *(void (**)(char *, uint64_t))(v13 + 8);
  v19(v10, v12);
  swift_endAccess(v26);
  v19(v7, v12);
  v20 = *(_QWORD *)(a2 + 72);
  v21 = *(void (**)(_QWORD *__return_ptr, __n128))(*(_QWORD *)v20 + 144);
  v22 = swift_retain(v20);
  v21(v26, v22);
  swift_release(v20);
  v23 = *(_QWORD *)(a2 + 120);
  v26[1] = v23;
  swift_bridgeObjectRetain(v23);
  PassthroughSubject.send(_:)(v26);
  return swift_bridgeObjectRelease(v23);
}

uint64_t sub_1000AC8AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t Strong;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ObjectType;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, uint64_t);
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  char v42;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE v66[24];
  char v67[24];
  _BYTE v68[16];

  v5 = type metadata accessor for UUID(0);
  v62 = *(_QWORD *)(v5 - 8);
  v63 = v5;
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v61 = (char *)&v52 - v10;
  __chkstk_darwin(v9);
  v12 = (char *)&v52 - v11;
  swift_weakInit(v68, a3);
  v13 = *(_QWORD *)(a2 + 16);
  if (v13)
  {
    v14 = a2 + 32;
    v53 = a2;
    swift_bridgeObjectRetain(a2);
    swift_beginAccess(v68, v67, 0, 0);
    v15 = 0;
    v54 = v8;
    v55 = v14;
    v56 = v13;
    do
    {
      v16 = (uint64_t *)(v14 + 16 * v15);
      v17 = v16[1];
      v64 = *v16;
      Strong = swift_weakLoadStrong(v68);
      if (Strong)
      {
        v19 = *(_QWORD *)(Strong + 88);
        v20 = *(_QWORD *)(v19 + 16);
        if (v20)
        {
          v57 = Strong + 88;
          v58 = v15;
          v60 = Strong;
          v21 = v64;
          ObjectType = swift_getObjectType(v64);
          swift_unknownObjectRetain(v21);
          swift_bridgeObjectRetain(v19);
          v23 = 0;
          v59 = v19;
          v24 = (uint64_t *)(v19 + 40);
          while (1)
          {
            v26 = *(v24 - 1);
            v25 = *v24;
            v27 = swift_getObjectType(v26);
            swift_unknownObjectRetain(v26);
            sub_1000906A4(v27, v25);
            v28 = v61;
            sub_1000906A4(ObjectType, v17);
            LOBYTE(v25) = static UUID.== infix(_:_:)(v12, v28);
            v29 = *(void (**)(char *, uint64_t))(v62 + 8);
            v30 = v28;
            v31 = v63;
            v29(v30, v63);
            v29(v12, v31);
            swift_unknownObjectRelease(v26);
            if ((v25 & 1) != 0)
              break;
            ++v23;
            v24 += 2;
            if (v20 == v23)
            {
              swift_unknownObjectRelease(v64);
              swift_release(v60);
              swift_bridgeObjectRelease(v59);
              goto LABEL_17;
            }
          }
          swift_bridgeObjectRelease(v59);
          v32 = sub_100028290(v23);
          v34 = v33;
          v35 = swift_getObjectType(v32);
          v36 = (uint64_t)v54;
          sub_1000906A4(v35, v34);
          v37 = v60;
          v38 = (uint64_t *)(v60 + 112);
          swift_beginAccess(v60 + 112, v66, 33, 0);
          v39 = *(_QWORD *)(v37 + 112);
          swift_bridgeObjectRetain(v39);
          v40 = sub_1000C83A0(v36);
          v42 = v41;
          swift_bridgeObjectRelease(v39);
          if ((v42 & 1) != 0)
          {
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v38);
            v44 = *v38;
            v65 = *v38;
            *v38 = 0x8000000000000000;
            if (!isUniquelyReferenced_nonNull_native)
            {
              sub_1000BF1B4();
              v44 = v65;
            }
            v45 = v63;
            v29((char *)(*(_QWORD *)(v44 + 48) + *(_QWORD *)(v62 + 72) * v40), v63);
            v46 = v65;
            v47 = *(_QWORD *)(*(_QWORD *)(v65 + 56) + 8 * v40);
            sub_100094264(v40, v65);
            v48 = v60;
            v49 = *(_QWORD *)(v60 + 112);
            *(_QWORD *)(v60 + 112) = v46;
            swift_bridgeObjectRelease(v49);
            swift_endAccess(v66);
            v29((char *)v36, v45);
            AnyCancellable.cancel()();
            swift_unknownObjectRelease(v64);
            swift_release(v47);
            v50 = v48;
          }
          else
          {
            swift_endAccess(v66);
            v29((char *)v36, v63);
            swift_unknownObjectRelease(v64);
            v50 = v37;
          }
          swift_release(v50);
          swift_unknownObjectRelease(v32);
LABEL_17:
          v14 = v55;
          v13 = v56;
          v15 = v58;
        }
        else
        {
          swift_release(Strong);
        }
      }
      ++v15;
    }
    while (v15 != v13);
    swift_bridgeObjectRelease(v53);
  }
  return swift_weakDestroy(v68);
}

BOOL sub_1000ACC2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t *i;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;
  char v17;
  char v18;
  uint64_t v19;

  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a3 + 16);
  if (!v11)
    return 0;
  for (i = (uint64_t *)(a3 + 40); ; i += 2)
  {
    v13 = *(i - 1);
    if (swift_getObjectType(v13) == a1)
      break;
    if (!--v11)
      return 0;
  }
  v15 = *i;
  swift_unknownObjectRetain(v13);
  sub_1000906A4(a1, v15);
  if (*(_QWORD *)(a4 + 16) && (v16 = sub_1000C83A0((uint64_t)v10), (v17 & 1) != 0))
  {
    v18 = *(_BYTE *)(*(_QWORD *)(a4 + 56) + v16);
    swift_unknownObjectRelease(v13);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    return (v18 & 0xFE) == 2;
  }
  else
  {
    swift_unknownObjectRelease(v13);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    return 1;
  }
}

uint64_t sub_1000ACD5C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000ACD80()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1000ACDA4()
{
  uint64_t v0;

  sub_1000ABCBC(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000ACDAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000ACDBC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

_QWORD *sub_1000ACDC4(uint64_t a1)
{
  _QWORD *result;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  int64_t v30;
  _QWORD *v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  int64_t v35;

  sub_10000EDC8(&qword_100481748);
  result = (_QWORD *)static _DictionaryStorage.copy(original:)(a1);
  v3 = 0;
  v32 = a1;
  v6 = *(_QWORD *)(a1 + 64);
  v5 = a1 + 64;
  v4 = v6;
  v7 = 1 << *(_BYTE *)(v5 - 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & v4;
  v29 = v5;
  v30 = (unint64_t)(v7 + 63) >> 6;
  v31 = result + 8;
  v28 = result;
  if ((v8 & v4) == 0)
    goto LABEL_5;
LABEL_4:
  v10 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (i = v10 | (v3 << 6); ; i = __clz(__rbit64(v13)) + (v3 << 6))
  {
    v15 = *(_BYTE *)(*(_QWORD *)(v32 + 48) + i);
    v16 = *(_QWORD *)(*(_QWORD *)(v32 + 56) + 8 * i);
    v17 = *(_QWORD *)(v16 + 16);
    if (v17)
    {
      v33 = *(_BYTE *)(*(_QWORD *)(v32 + 48) + i);
      v34 = v9;
      v35 = v3;
      swift_bridgeObjectRetain_n(v16, 2);
      v18 = (uint64_t *)(v16 + 40);
      v19 = _swiftEmptyArrayStorage;
      do
      {
        v21 = *(v18 - 1);
        if (v21)
        {
          v22 = *v18;
          swift_unknownObjectRetain(*(v18 - 1));
          if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
            v19 = sub_10005F44C(0, v19[2] + 1, 1, v19);
          v24 = v19[2];
          v23 = v19[3];
          if (v24 >= v23 >> 1)
            v19 = sub_10005F44C((_QWORD *)(v23 > 1), v24 + 1, 1, v19);
          v19[2] = v24 + 1;
          v20 = &v19[2 * v24];
          v20[4] = v21;
          v20[5] = v22;
        }
        v18 += 2;
        --v17;
      }
      while (v17);
      swift_bridgeObjectRelease_n(v16, 2);
      result = v28;
      v3 = v35;
      v9 = v34;
      v15 = v33;
    }
    else
    {
      v19 = _swiftEmptyArrayStorage;
    }
    *(_QWORD *)((char *)v31 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    *(_BYTE *)(result[6] + i) = v15;
    *(_QWORD *)(result[7] + 8 * i) = v19;
    v25 = result[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (v26)
    {
      __break(1u);
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    result[2] = v27;
    if (v9)
      goto LABEL_4;
LABEL_5:
    v12 = v3 + 1;
    if (__OFADD__(v3, 1))
      goto LABEL_35;
    if (v12 >= v30)
      return result;
    v13 = *(_QWORD *)(v29 + 8 * v12);
    ++v3;
    if (!v13)
    {
      v3 = v12 + 1;
      if (v12 + 1 >= v30)
        return result;
      v13 = *(_QWORD *)(v29 + 8 * v3);
      if (!v13)
      {
        v3 = v12 + 2;
        if (v12 + 2 >= v30)
          return result;
        v13 = *(_QWORD *)(v29 + 8 * v3);
        if (!v13)
          break;
      }
    }
LABEL_18:
    v9 = (v13 - 1) & v13;
  }
  v14 = v12 + 3;
  if (v14 >= v30)
    return result;
  v13 = *(_QWORD *)(v29 + 8 * v14);
  if (v13)
  {
    v3 = v14;
    goto LABEL_18;
  }
  while (1)
  {
    v3 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v3 >= v30)
      return result;
    v13 = *(_QWORD *)(v29 + 8 * v3);
    ++v14;
    if (v13)
      goto LABEL_18;
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_1000AD084(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  _QWORD v54[3];
  uint64_t v55;
  uint64_t v56;

  v47 = a3;
  v5 = sub_10000EDC8(&qword_1004816B0);
  __chkstk_darwin(v5);
  v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10000EDC8(&qword_1004816B8);
  v44 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = sub_10000EDC8(&qword_1004816C0);
  v48 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_10000EDC8(&qword_1004816C8);
  v51 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = sub_10000EDC8(&qword_1004816D0);
  v52 = *(_QWORD *)(v50 - 8);
  v15 = __chkstk_darwin(v50);
  v45 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  Just.init(_:)(v15, (char *)&type metadata for () + 8);
  ObjectType = swift_getObjectType(a1);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a2 + 16))(v54, ObjectType, a2);
  v19 = v55;
  v18 = v56;
  sub_10000F66C(v54, v55);
  v53 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(v18 + 16))(v19, v18);
  v20 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v7, 1, 1, v20);
  v21 = sub_100049274();
  v22 = sub_100043310(&qword_1004816D8, &qword_1004816B8, (uint64_t)&protocol conformance descriptor for Just<A>);
  v23 = sub_10000C4B0((unint64_t *)&qword_1004816E0, (uint64_t (*)(uint64_t))sub_100049274, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(&v53, v7, v8, v21, v22, v23);
  sub_100036600((uint64_t)v7, &qword_1004816B0);

  (*(void (**)(char *, uint64_t))(v44 + 8))(v10, v8);
  sub_10000F690(v54);
  v24 = swift_allocObject(&unk_100443F98, 33, 7);
  *(_QWORD *)(v24 + 16) = a1;
  *(_QWORD *)(v24 + 24) = a2;
  LOBYTE(v22) = v47;
  *(_BYTE *)(v24 + 32) = v47;
  v25 = swift_unknownObjectRetain(a1);
  v26 = static Subscribers.Demand.unlimited.getter(v25);
  v27 = sub_10000EDC8((uint64_t *)&unk_10047E420);
  v28 = sub_100043310(&qword_1004816E8, &qword_1004816C0, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v29 = sub_100043310(&qword_1004816F0, (uint64_t *)&unk_10047E420, (uint64_t)&protocol conformance descriptor for Future<A, B>);
  v30 = v46;
  Publisher<>.flatMap<A>(maxPublishers:_:)(v26, sub_1000AD578, v24, v46, v27, v28, v29);
  v31 = swift_release(v24);
  (*(void (**)(char *, uint64_t, __n128))(v48 + 8))(v12, v30, v31);
  v32 = swift_allocObject(&unk_100443FC0, 33, 7);
  *(_QWORD *)(v32 + 16) = a1;
  *(_QWORD *)(v32 + 24) = a2;
  *(_BYTE *)(v32 + 32) = v22;
  v33 = swift_allocObject(&unk_100443FE8, 32, 7);
  *(_QWORD *)(v33 + 16) = sub_1000AD5C8;
  *(_QWORD *)(v33 + 24) = v32;
  swift_unknownObjectRetain(a1);
  v34 = sub_10000EDC8(&qword_1004816A8);
  v35 = sub_100043310(&qword_1004816F8, &qword_1004816C8, (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v36 = v45;
  v37 = v49;
  Publisher.map<A>(_:)(sub_1000AD63C, v33, v49, v34, v35);
  v38 = swift_release(v33);
  (*(void (**)(char *, uint64_t, __n128))(v51 + 8))(v14, v37, v38);
  v39 = sub_100043310(&qword_100481700, &qword_1004816D0, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v40 = v50;
  v41 = Publisher.eraseToAnyPublisher()(v50, v39);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v36, v40);
  return v41;
}

void sub_1000AD504(uint64_t *a1)
{
  uint64_t v1;

  sub_1000AC0F8(a1, v1);
}

uint64_t sub_1000AD50C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000EDC8(&qword_1004816A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000AD554()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 33, 7);
}

uint64_t sub_1000AD578@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t result;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(unsigned __int8 *)(v1 + 32);
  ObjectType = swift_getObjectType(v3);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 56))(v5, ObjectType, v4);
  *a1 = result;
  return result;
}

uint64_t sub_1000AD5C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(unsigned __int8 *)(v0 + 32);
  ObjectType = swift_getObjectType(*(_QWORD *)(v0 + 16));
  sub_1000906A4(ObjectType, v1);
  return v2;
}

uint64_t sub_1000AD618()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000AD63C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t result;

  v3 = *(uint64_t (**)(uint64_t))(v1 + 16);
  v4 = *(int *)(sub_10000EDC8(&qword_1004816A8) + 48);
  result = v3(a1);
  *(_BYTE *)(a1 + v4) = result;
  return result;
}

uint64_t sub_1000AD680(unsigned __int8 *a1)
{
  return sub_1000AADD8(*a1);
}

unint64_t sub_1000AD688()
{
  unint64_t result;

  result = qword_100481710;
  if (!qword_100481710)
  {
    result = swift_getWitnessTable(&unk_1003B596C, &type metadata for InstrumentationMode);
    atomic_store(result, (unint64_t *)&qword_100481710);
  }
  return result;
}

_QWORD *sub_1000AD6CC(uint64_t a1)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v2);
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      v7 = swift_unknownObjectRetain(v5);
      v8 = sub_1000AD084(v7, v6, 0);
      v9 = swift_unknownObjectRelease(v5);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v9);
      v10 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v10);
      v11 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, v8);
      specialized ContiguousArray._endMutation()(v11);
      v4 += 2;
      --v2;
    }
    while (v2);
    return _swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_1000AD794()
{
  return sub_1000ADA30((void (*)(_QWORD))&_swift_bridgeObjectRelease, (void (*)(_QWORD))&_swift_release, 32);
}

uint64_t sub_1000AD7AC(uint64_t a1)
{
  uint64_t v1;

  return sub_1000AC8AC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1000AD7B4(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType;
  void *v4;
  id v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  id v9;
  unint64_t v10;
  uint64_t result;

  ObjectType = swift_getObjectType(a1);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(a2 + 48))(ObjectType, a2) & 1) == 0)
    return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 24))(ObjectType, a2);
  v4 = (void *)objc_opt_self(NSProcessInfo);
  v5 = objc_msgSend(v4, "processInfo");
  v6 = (unint64_t)objc_msgSend(v5, "thermalState");

  if (v6 < 4)
  {
    v7 = qword_1003B4EA8[v6];
    v8 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 24);
    if (v7 >= v8(ObjectType, a2))
      return v8(ObjectType, a2);
    v9 = objc_msgSend(v4, "processInfo");
    v10 = (unint64_t)objc_msgSend(v9, "thermalState");

    if (v10 < 4)
      return 0x20303u >> (8 * v10);
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Measure/InstrumentationCoordinator.swift", 40, 2, 102, 0);
  __break(1u);
  return result;
}

_QWORD *sub_1000AD914(uint64_t a1)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v2);
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      v7 = swift_unknownObjectRetain(v5);
      v8 = sub_1000AD7B4(v7, v6);
      v9 = sub_1000AD084(v5, v6, v8);
      v10 = swift_unknownObjectRelease(v5);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v10);
      v11 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v11);
      v12 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v9);
      specialized ContiguousArray._endMutation()(v12);
      v4 += 2;
      --v2;
    }
    while (v2);
    return _swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_1000AD9E8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

uint64_t sub_1000ADA0C(uint64_t *a1)
{
  uint64_t v1;

  return sub_1000AC3DC(a1, *(_QWORD *)(v1 + 16), *(unsigned __int8 *)(v1 + 24));
}

uint64_t sub_1000ADA18()
{
  return sub_1000ADA30((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_unknownObjectRelease, 40);
}

uint64_t sub_1000ADA30(void (*a1)(_QWORD), void (*a2)(_QWORD), uint64_t a3)
{
  uint64_t v3;

  a1(*(_QWORD *)(v3 + 16));
  a2(*(_QWORD *)(v3 + 24));
  return swift_deallocObject(v3, a3, 7);
}

uint64_t sub_1000ADA78@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1000AD084(*(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(unsigned __int8 *)(a1 + 1));
  *a2 = result;
  return result;
}

uint64_t sub_1000ADAA8(uint64_t a1)
{
  uint64_t v1;

  return sub_1000AC700(a1, v1);
}

id sub_1000ADB38(uint64_t a1)
{
  uint64_t v1;
  BOOL v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  __n128 *v19;
  __n128 *v20;
  __n128 *v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int32x4_t v25;
  float32x2_t v26;
  float32x2_t v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  __n128 v32;
  __n128 v33;
  uint64_t v34;
  __int128 v35;
  _OWORD *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  id v41;
  void *v42;
  void *v43;
  void *v44;
  id v45;
  id v46;
  id v47;
  uint64_t *v48;
  void *v49;
  uint64_t v50;
  id v51;
  void *v52;
  id v53;
  void *v54;
  uint64_t v55;
  unint64_t v56;
  void *v57;
  void *v58;
  id v59;
  id v60;
  id v61;
  id v62;
  int v63;
  id *v64;
  double v65;
  unint64_t v66;
  uint64_t v68;
  double v69;
  float32x4_t v70;
  __n128 v71;
  __n128 v72;
  __n128 v73;
  __n128 v74;
  __n128 v75;
  __n128 v76;
  __n128 v77;
  __n128 v78;
  __n128 v79;
  __n128 v80;
  __n128 v81;
  __n128 v82;
  __n128 v83;
  __n128 v84;
  uint64_t v85;

  v3 = sub_1000B4704();
  if (v3 || !*(_BYTE *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_selectionState))
    objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelNode), "setHidden:", v3);
  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelNode), "setAlpha:", *(double *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_desiredAlpha));
  switch(a1)
  {
    case 0:
    case 2:
    case 5:
    case 7:
      v4 = qword_10047AE70;
      v5 = *(id *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelContainer);
      if (v4 != -1)
        swift_once(&qword_10047AE70, sub_100195D4C);
      objc_msgSend(v5, "setColor:", qword_1004AF968);

      if (qword_10047AE58 != -1)
        swift_once(&qword_10047AE58, sub_100195D00);
      v6 = (void *)qword_1004AF950;
      v7 = (uint64_t *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_attributedText);
      v8 = *(void **)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_attributedText + 24);
      *(_QWORD *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_attributedText + 24) = qword_1004AF950;
      v9 = v6;

      v10 = *(void **)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelText);
      v11 = *v7;
      v12 = v7[1];
      v14 = (void *)v7[2];
      v13 = (void *)v7[3];
      v15 = v13;
      v16 = v10;
      swift_bridgeObjectRetain(v12);
      v17 = v14;
      v18 = sub_1000C1F64(v11, v12, v13);

      objc_msgSend(v16, "setAttributedText:", v18, swift_bridgeObjectRelease(v12).n128_f64[0]);
      v19 = (__n128 *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_latestLineEnds);
      v81 = *(__n128 *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_latestLineEnds + 16);
      v83 = *(__n128 *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_latestLineEnds);
      v77 = *(__n128 *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_latestLineEnds + 48);
      v79 = *(__n128 *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_latestLineEnds + 32);
      v20 = (__n128 *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_end1);
      *v20 = v83;
      v20[1] = v81;
      v20[2] = v79;
      v20[3] = v77;
      v74 = v19[5];
      v75 = v19[4];
      v72 = v19[7];
      v73 = v19[6];
      v21 = (__n128 *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_end2);
      *v21 = v75;
      v21[1] = v74;
      v21[2] = v73;
      v21[3] = v72;
      *(double *)v22.i64 = simd_float4x4.position.getter(v75, v74, v73, v72);
      v70 = v22;
      *(double *)v23.i64 = simd_float4x4.position.getter(v83, v81, v79, v77);
      v24 = vsubq_f32(v70, v23);
      v25 = (int32x4_t)vmulq_f32(v24, v24);
      v25.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v25, 2), vadd_f32(*(float32x2_t *)v25.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v25.i8, 1))).u32[0];
      v26 = vrsqrte_f32((float32x2_t)v25.u32[0]);
      v27 = vmul_f32(v26, vrsqrts_f32((float32x2_t)v25.u32[0], vmul_f32(v26, v26)));
      v71 = (__n128)vmulq_n_f32(v24, vmul_f32(v27, vrsqrts_f32((float32x2_t)v25.u32[0], vmul_f32(v27, v27))).f32[0]);
      LODWORD(v69) = 1056964608;
      v28.n128_f64[0] = slerp(transform1:transform2:percent:)(v83, v81, v79, v77, v75, v74, v73, v72, v69);
      v82 = v28;
      v78 = v30;
      v80 = v29;
      v76 = v31;
      v32.n128_f64[0] = simd_float4x4.up.getter(v28, v29, v30, v31);
      v84 = v32;
      v33.n128_f64[0] = simd_float4x4.position.getter(v82, v80, v78, v76);
      *(double *)&v35 = createTransform(forward:normal:position:)(v34, v71, v84, v33);
      v36 = (_OWORD *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_center);
      *v36 = v35;
      v36[1] = v37;
      v36[2] = v38;
      v36[3] = v39;
      goto LABEL_24;
    case 1:
      v43 = *(void **)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelContainer);
      v44 = (void *)objc_opt_self(UIColor);
      v45 = v43;
      v46 = objc_msgSend(v44, "clearColor");
      objc_msgSend(v45, "setColor:", v46);

      v47 = objc_msgSend(v44, "clearColor");
      v48 = (uint64_t *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_attributedText);
      v49 = *(void **)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_attributedText + 24);
      *(_QWORD *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_attributedText + 24) = v47;

      goto LABEL_22;
    case 3:
    case 4:
    case 6:
      v40 = qword_10047AE78;
      v41 = *(id *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelContainer);
      if (v40 != -1)
        swift_once(&qword_10047AE78, sub_100195D60);
      objc_msgSend(v41, "setColor:", qword_1004AF970);

      if (qword_10047AE60 != -1)
        swift_once(&qword_10047AE60, sub_100195D14);
      v42 = (void *)qword_1004AF958;
      goto LABEL_21;
    case 8:
      v68 = qword_10047AE78;
      v62 = *(id *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelContainer);
      if (v68 != -1)
        swift_once(&qword_10047AE78, sub_100195D60);
      objc_msgSend(v62, "setColor:", qword_1004AF970);
      goto LABEL_23;
    case 9:
      v50 = qword_10047AE80;
      v51 = *(id *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelContainer);
      if (v50 != -1)
        swift_once(&qword_10047AE80, sub_100195DC8);
      objc_msgSend(v51, "setColor:", qword_1004AF978);

      if (qword_10047AE68 != -1)
        swift_once(&qword_10047AE68, sub_100195D38);
      v42 = (void *)qword_1004AF960;
LABEL_21:
      v48 = (uint64_t *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_attributedText);
      v52 = *(void **)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_attributedText + 24);
      *(_QWORD *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_attributedText + 24) = v42;
      v53 = v42;

LABEL_22:
      v54 = *(void **)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelText);
      v55 = *v48;
      v56 = v48[1];
      v58 = (void *)v48[2];
      v57 = (void *)v48[3];
      v59 = v57;
      v60 = v54;
      swift_bridgeObjectRetain(v56);
      v61 = v58;
      v62 = sub_1000C1F64(v55, v56, v57);

      objc_msgSend(v60, "setAttributedText:", v62, swift_bridgeObjectRelease(v56).n128_f64[0]);
LABEL_23:

LABEL_24:
      v63 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_capturing);
      v64 = (id *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelChevron);
      v65 = 0.0;
      if ((v63 & 1) == 0)
      {
        v66 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_state);
        if (v66 <= 7)
          v65 = dbl_1003B5460[v66];
      }
      objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelChevron), "setAlpha:", v65);
      return objc_msgSend(*v64, "setUserInteractionEnabled:", v63 ^ 1u);
    default:
      v85 = a1;
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for MeasureObjectState, &v85, &type metadata for MeasureObjectState, &type metadata for Int);
      __break(1u);
      JUMPOUT(0x1000AE120);
  }
}

void sub_1000AE148(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  void *v6;
  BOOL v7;
  uint64_t v8;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  Swift::String v14;
  uint64_t v15;
  void *v16;
  Swift::String v17;
  Swift::String v18;
  id v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  id v35;
  id v36;
  Swift::String v37;

  v4 = (uint64_t *)(v2 + OBJC_IVAR____TtC7Measure11LabelRender_attributedText);
  v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7Measure11LabelRender_attributedText);
  v6 = *(void **)(v2 + OBJC_IVAR____TtC7Measure11LabelRender_attributedText + 8);
  v7 = v5 == a1 && v6 == a2;
  if (v7 || (v8 = v2, (_stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v5, v6, 0) & 1) != 0))
  {
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v10 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7Measure11LabelRender_state);
    if (v10 > 9)
    {
      v37._countAndFlagsBits = *(_QWORD *)(v2 + OBJC_IVAR____TtC7Measure11LabelRender_state);
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for MeasureObjectState, &v37, &type metadata for MeasureObjectState, &type metadata for Int);
      __break(1u);
    }
    else
    {
      if (((1 << v10) & 0x1DA) == 0)
      {
        if (qword_10047AA90 != -1)
          swift_once(&qword_10047AA90, sub_1000E1520);
        _StringGuts.grow(_:)(37);
        swift_bridgeObjectRelease(0xE000000000000000);
        v37._countAndFlagsBits = 0xD000000000000012;
        v37._object = (void *)0x80000001003DDA20;
        if (*(_BYTE *)(v2 + OBJC_IVAR____TtC7Measure11LabelRender_labelType))
        {
          if (*(_BYTE *)(v2 + OBJC_IVAR____TtC7Measure11LabelRender_labelType) == 1)
          {
            v11 = 0xE400000000000000;
            v12 = 1634038337;
          }
          else
          {
            v11 = 0xE600000000000000;
            v12 = 0x656D756C6F56;
          }
        }
        else
        {
          v11 = 0xE400000000000000;
          v12 = 1701734732;
        }
        v13 = v11;
        String.append(_:)(*(Swift::String *)&v12);
        swift_bridgeObjectRelease(v11);
        v14._countAndFlagsBits = 32;
        v14._object = (void *)0xE100000000000000;
        String.append(_:)(v14);
        v15 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7Measure11LabelRender_measurementID);
        v16 = *(void **)(v2 + OBJC_IVAR____TtC7Measure11LabelRender_measurementID + 8);
        swift_bridgeObjectRetain(v16);
        v17._countAndFlagsBits = v15;
        v17._object = v16;
        String.append(_:)(v17);
        swift_bridgeObjectRelease(v16);
        v18._countAndFlagsBits = 0x206D6F726620;
        v18._object = (void *)0xE600000000000000;
        String.append(_:)(v18);
        v19 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v2
                                                                    + OBJC_IVAR____TtC7Measure11LabelRender_labelText), "text"));
        if (v19)
        {
          v20 = v19;
          v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
          v23 = v22;

        }
        else
        {
          v23 = (void *)0xE300000000000000;
          v21 = 7104846;
        }
        v24._countAndFlagsBits = v21;
        v24._object = v23;
        String.append(_:)(v24);
        swift_bridgeObjectRelease(v23);
        v25._countAndFlagsBits = 544175136;
        v25._object = (void *)0xE400000000000000;
        String.append(_:)(v25);
        v26._countAndFlagsBits = a1;
        v26._object = a2;
        String.append(_:)(v26);
        Log.default(_:isPrivate:)(v37, 0);
        swift_bridgeObjectRelease(v37._object);
        *(_BYTE *)(v8 + OBJC_IVAR____TtC7Measure11LabelRender_refined) = 1;
      }
      v27 = v4[1];
      *v4 = a1;
      v4[1] = (uint64_t)a2;
      swift_bridgeObjectRelease(v27);
      v28 = *(void **)(v8 + OBJC_IVAR____TtC7Measure11LabelRender_labelText);
      v29 = *v4;
      v30 = v4[1];
      v32 = (void *)v4[2];
      v31 = (void *)v4[3];
      v33 = v31;
      v34 = v28;
      swift_bridgeObjectRetain(v30);
      v35 = v32;
      v36 = sub_1000C1F64(v29, v30, v31);

      objc_msgSend(v34, "setAttributedText:", v36, swift_bridgeObjectRelease(v30).n128_f64[0]);
      sub_1000AE494();
      sub_1000AE9C8();
    }
  }
}

void sub_1000AE494()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  id v6;
  UIContentSizeCategory v7;
  char v8;
  void *v9;
  id v10;
  double v11;
  double v12;
  void *v13;
  UIContentSizeCategory v14;
  id v15;
  id v16;
  double v17;
  double v18;
  uint64_t v19;
  CGFloat v20;
  double v21;
  double v22;
  double v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  double v28;
  CGFloat Height;
  double *v30;
  uint64_t *v31;
  float v32;
  void (*v33)(__n128);
  __n128 v34;
  id v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  void *v40;
  void *v41;
  id v42;
  id v43;
  id v44;
  id v45;
  double v46;
  double v47;
  double v48;
  CGFloat v49;
  double v50;
  double v51;
  CGFloat v52;
  double *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  unint64_t v57;
  void *v58;
  void *v59;
  id v60;
  id v61;
  id v62;
  id v63;
  void *v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  unint64_t v68;
  void *v69;
  void *v70;
  id v71;
  id v72;
  id v73;
  id v74;
  double v75;
  double v76;
  uint64_t v77;
  uint64_t v78;
  CGFloat rect;
  CGFloat v80;
  CGFloat v81;
  __int128 v82;
  uint64_t v83;
  _BYTE v84[16];
  __int128 v85;
  CGRect v86;
  CGRect v87;
  CGRect v88;
  CGRect v89;
  CGRect v90;

  v1 = v0;
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_capturing) == 1)
  {
    if (qword_10047AEA0 != -1)
      swift_once(&qword_10047AEA0, sub_1001960FC);
    v2 = &qword_1004AF998;
  }
  else
  {
    if (qword_10047AE98 != -1)
      swift_once(&qword_10047AE98, sub_100195F94);
    v2 = &qword_1004AF990;
  }
  v3 = OBJC_IVAR____TtC7Measure11LabelRender_labelFontMetrics;
  v4 = *(double *)v2;
  v5 = qword_10047A738;
  v6 = *(id *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_labelFontMetrics);
  if (v5 != -1)
    swift_once(&qword_10047A738, sub_10000E4DC);
  v7 = (UIContentSizeCategory)(id)qword_1004AF068;
  v8 = ((uint64_t (*)(void))static UIContentSizeCategory.> infix(_:_:))();

  if ((v8 & 1) != 0)
  {

    v7 = UIContentSizeCategoryAccessibilityLarge;
  }
  v9 = (void *)objc_opt_self(UITraitCollection);
  v10 = objc_msgSend(v9, "traitCollectionWithPreferredContentSizeCategory:", v7);

  objc_msgSend(v6, "scaledValueForValue:compatibleWithTraitCollection:", v10, v4);
  v12 = v11;

  v13 = *(void **)(v0 + v3);
  v14 = (UIContentSizeCategory)(id)qword_1004AF068;
  v15 = v13;
  LOBYTE(v10) = static UIContentSizeCategory.> infix(_:_:)(v14, UIContentSizeCategoryAccessibilityLarge);

  if ((v10 & 1) != 0)
  {

    v14 = UIContentSizeCategoryAccessibilityLarge;
  }
  v16 = objc_msgSend(v9, "traitCollectionWithPreferredContentSizeCategory:", v14);

  objc_msgSend(v15, "scaledValueForValue:compatibleWithTraitCollection:", v16, 10.0);
  v18 = v17;

  v19 = OBJC_IVAR____TtC7Measure11LabelRender_labelText;
  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelText), "frame");
  v24 = v20;
  v25 = v21;
  v26 = v22;
  v27 = v23;
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelType))
  {
    v28 = v12 + CGRectGetWidth(*(CGRect *)&v20);
    v86.origin.x = v24;
    v86.origin.y = v25;
    v86.size.width = v26;
    v86.size.height = v27;
    Height = CGRectGetHeight(v86);
    v30 = (double *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelSize);
    *v30 = v28;
    v30[1] = v18 + Height;
  }
  else
  {
    v31 = (uint64_t *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_attributedText);
    v77 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_attributedText + 8);
    v78 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_attributedText);
    v32 = *(float *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_measurement);
    v33 = *(void (**)(__n128))(**(_QWORD **)(v1 + OBJC_IVAR____TtC7Measure11LabelRender__unitState) + 144);
    swift_bridgeObjectRetain(v77);
    v34 = swift_retain();
    v33(v34);
    swift_release();
    v35 = sub_10009BF0C();
    sub_10010B204((uint64_t)v35, (uint64_t)&v82, v32);
    v85 = v82;
    sub_100012C58((uint64_t)&v83, (uint64_t)v84, (uint64_t *)&unk_10048A0F0);
    sub_1000C22B0((uint64_t)v84);
    v36 = v31[1];
    *(_OWORD *)v31 = v85;
    swift_bridgeObjectRelease(v36);
    v37 = *(void **)(v1 + v19);
    v38 = *v31;
    v39 = v31[1];
    v41 = (void *)v31[2];
    v40 = (void *)v31[3];
    v42 = v40;
    v43 = v37;
    swift_bridgeObjectRetain(v39);
    v44 = v41;
    v45 = sub_1000C1F64(v38, v39, v40);

    objc_msgSend(v43, "setAttributedText:", v45, swift_bridgeObjectRelease(v39).n128_f64[0]);
    objc_msgSend(*(id *)(v1 + v19), "frame");
    v80 = v47;
    v81 = v46;
    v49 = v48;
    rect = v50;
    v87.origin.x = v24;
    v87.origin.y = v25;
    v87.size.width = v26;
    v87.size.height = v27;
    v51 = v12 + CGRectGetWidth(v87);
    v88.origin.x = v24;
    v88.origin.y = v25;
    v88.size.width = v26;
    v88.size.height = v27;
    v52 = CGRectGetHeight(v88);
    v53 = (double *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelSize);
    *v53 = v51;
    v53[1] = v18 + v52;
    v54 = v31[1];
    *v31 = v78;
    v31[1] = v77;
    swift_bridgeObjectRelease(v54);
    v55 = *(void **)(v1 + v19);
    v56 = *v31;
    v57 = v31[1];
    v59 = (void *)v31[2];
    v58 = (void *)v31[3];
    v60 = v58;
    v61 = v55;
    swift_bridgeObjectRetain(v57);
    v62 = v59;
    v63 = sub_1000C1F64(v56, v57, v58);

    objc_msgSend(v61, "setAttributedText:", v63, swift_bridgeObjectRelease(v57).n128_f64[0]);
    sub_100197BF8();
    v64 = (void *)v31[2];
    v31[2] = v65;

    v66 = *(void **)(v1 + v19);
    v67 = *v31;
    v68 = v31[1];
    v70 = (void *)v31[2];
    v69 = (void *)v31[3];
    v71 = v69;
    v72 = v66;
    swift_bridgeObjectRetain(v68);
    v73 = v70;
    v74 = sub_1000C1F64(v67, v68, v69);

    objc_msgSend(v72, "setAttributedText:", v74, swift_bridgeObjectRelease(v68).n128_f64[0]);
    v89.origin.x = v24;
    v89.origin.y = v25;
    v89.size.width = v26;
    v89.size.height = v27;
    v75 = v12 + CGRectGetWidth(v89);
    v90.size.width = v80;
    v90.origin.x = v81;
    v90.origin.y = v49;
    v90.size.height = rect;
    v76 = v12 + CGRectGetWidth(v90);
    if (v75 > v76)
      v76 = v75;
    *v53 = v76;
  }
}

uint64_t sub_1000AE9C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  _QWORD aBlock[6];

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v18 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100018148(0, (unint64_t *)&qword_10047FB70, OS_dispatch_queue_ptr);
  v9 = (void *)static OS_dispatch_queue.main.getter();
  v10 = swift_allocObject(&unk_1004444C8, 24, 7);
  swift_unknownObjectWeakInit(v10 + 16, v1);
  aBlock[4] = sub_1000C22FC;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003ECA0;
  aBlock[3] = &unk_1004444E0;
  v11 = _Block_copy(aBlock);
  v12 = swift_release();
  static DispatchQoS.unspecified.getter(v12);
  aBlock[0] = _swiftEmptyArrayStorage;
  v13 = sub_10000C4B0((unint64_t *)&qword_10047D7F0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v14 = sub_10000EDC8((uint64_t *)&unk_10047E430);
  v15 = sub_100043310((unint64_t *)&qword_10047D800, (uint64_t *)&unk_10047E430, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v14, v15, v2, v13);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v4, v11);
  _Block_release(v11);

  (*(void (**)(char *, uint64_t))(v18 + 8))(v4, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_1000AEC68(float a1)
{
  uint64_t v1;
  uint64_t v3;
  void (*v4)(__n128);
  __n128 v5;
  id v6;
  uint64_t v7;
  void *v8;
  void (*v9)(__n128);
  __n128 v10;
  id v11;
  uint64_t v12;
  void *v13;
  char v14;
  void (*v15)(__n128);
  __n128 v16;
  id v17;
  uint64_t v18;
  char v19;
  float v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  _BYTE v26[16];
  _BYTE v27[5];
  _BYTE v28[3];
  _BYTE v29[7];
  char v30;
  _BYTE v31[23];
  char v32;
  float v33;
  char v34;
  __int128 v35;
  __int128 v36;

  if (*(float *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_measurement) != a1)
  {
    v3 = v1;
    if (*(_BYTE *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelType))
    {
      if (*(_BYTE *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelType) == 1)
      {
        v4 = *(void (**)(__n128))(**(_QWORD **)(v1 + OBJC_IVAR____TtC7Measure11LabelRender__unitState) + 144);
        v5 = swift_retain();
        v4(v5);
        swift_release();
        v6 = sub_10009BF0C();
        sub_10010CD7C((uint64_t)v6, 0, 0, 0, &v24, a1);
        v7 = v24;
        v8 = v25;
        swift_bridgeObjectRetain(v25);
        sub_1000AE148(v7, v8);
        sub_100012C58((uint64_t)v26, (uint64_t)v31, (uint64_t *)&unk_10048A0F0);
        sub_100012C58((uint64_t)v31, (uint64_t)&v35, (uint64_t *)&unk_10048A0F0);
        if (*((_QWORD *)&v35 + 1))
        {
          v36 = v35;
          swift_bridgeObjectRelease(v8);
          v8 = *(void **)(v3 + OBJC_IVAR____TtC7Measure11LabelRender_speakableString + 8);
          *(_OWORD *)(v3 + OBJC_IVAR____TtC7Measure11LabelRender_speakableString) = v36;
        }
        goto LABEL_15;
      }
      if (objc_msgSend((id)objc_opt_self(Gestalt), "jasperAvailable"))
      {
        v15 = *(void (**)(__n128))(**(_QWORD **)(v1 + OBJC_IVAR____TtC7Measure11LabelRender__unitState)
                                            + 144);
        v16 = swift_retain();
        v15(v16);
        swift_release();
        v17 = sub_10009BF0C();
        sub_100108E28((uint64_t)v17, 0, 0, &v24, a1);
        v18 = v24;
        v8 = v25;
        swift_bridgeObjectRetain(v25);
        sub_1000AE148(v18, v8);
        sub_100012C58((uint64_t)v26, (uint64_t)v31, (uint64_t *)&unk_10048A0F0);
        sub_100012C58((uint64_t)v31, (uint64_t)&v35, (uint64_t *)&unk_10048A0F0);
        if (*((_QWORD *)&v35 + 1))
        {
          v36 = v35;
          swift_bridgeObjectRelease(v8);
          sub_100012C58((uint64_t)v28, (uint64_t)&v30, &qword_100481268);
          sub_100012C58((uint64_t)&v30, (uint64_t)&v32, &qword_100481268);
          v19 = v32;
          if (v32 == 4
            || (sub_100012C58((uint64_t)v27, (uint64_t)v29, &qword_10047F0A8),
                sub_100012C58((uint64_t)v29, (uint64_t)&v33, &qword_10047F0A8),
                v34 == 1))
          {
            sub_1000C22B0((uint64_t)v31);
          }
          else
          {
            v22 = v33;
            v23 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7Measure11LabelRender_speakableString + 8);
            *(_OWORD *)(v3 + OBJC_IVAR____TtC7Measure11LabelRender_speakableString) = v36;
            swift_bridgeObjectRelease(v23);
            *(float *)(v3 + OBJC_IVAR____TtC7Measure11LabelRender_roundedMeasurementInMeters) = sub_10010CC14(v19, 0, v22);
          }
          goto LABEL_16;
        }
LABEL_15:
        swift_bridgeObjectRelease(v8);
LABEL_16:
        *(_BYTE *)(v3 + OBJC_IVAR____TtC7Measure11LabelRender_movesAlongLine) = 0;
      }
    }
    else
    {
      v9 = *(void (**)(__n128))(**(_QWORD **)(v1 + OBJC_IVAR____TtC7Measure11LabelRender__unitState) + 144);
      v10 = swift_retain();
      v9(v10);
      swift_release();
      v11 = sub_10009BF0C();
      sub_100108E28((uint64_t)v11, 0, 0, &v24, a1);
      v12 = v24;
      v13 = v25;
      swift_bridgeObjectRetain(v25);
      sub_1000AE148(v12, v13);
      sub_100012C58((uint64_t)v26, (uint64_t)v31, (uint64_t *)&unk_10048A0F0);
      sub_100012C58((uint64_t)v31, (uint64_t)&v35, (uint64_t *)&unk_10048A0F0);
      if (*((_QWORD *)&v35 + 1))
      {
        v36 = v35;
        swift_bridgeObjectRelease(v13);
        sub_100012C58((uint64_t)v28, (uint64_t)&v30, &qword_100481268);
        sub_100012C58((uint64_t)&v30, (uint64_t)&v32, &qword_100481268);
        v14 = v32;
        if (v32 == 4
          || (sub_100012C58((uint64_t)v27, (uint64_t)v29, &qword_10047F0A8),
              sub_100012C58((uint64_t)v29, (uint64_t)&v33, &qword_10047F0A8),
              v34 == 1))
        {
          sub_1000C22B0((uint64_t)v31);
        }
        else
        {
          v20 = v33;
          v21 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7Measure11LabelRender_speakableString + 8);
          *(_OWORD *)(v3 + OBJC_IVAR____TtC7Measure11LabelRender_speakableString) = v36;
          swift_bridgeObjectRelease(v21);
          *(float *)(v3 + OBJC_IVAR____TtC7Measure11LabelRender_roundedMeasurementInMeters) = sub_10010CC14(v14, 0, v20);
        }
      }
      else
      {
        swift_bridgeObjectRelease(v13);
      }
    }
  }
}

id sub_1000AF078(uint64_t a1)
{
  uint64_t v2;
  os_unfair_lock_s *v3;
  _BYTE v5[24];

  v2 = OBJC_IVAR____TtC7Measure11LabelRender_labelNode;
  objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC7Measure11LabelRender_labelNode), "setAlpha:", 0.0);
  v3 = (os_unfair_lock_s *)(a1 + OBJC_IVAR____TtC7Measure11LabelRender_labelLock);
  swift_beginAccess(a1 + OBJC_IVAR____TtC7Measure11LabelRender_labelLock, v5, 33, 0);
  os_unfair_lock_lock(v3);
  *(_BYTE *)(a1 + OBJC_IVAR____TtC7Measure11LabelRender__visibleForCapture) = 0;
  os_unfair_lock_unlock(v3);
  swift_endAccess(v5);
  return objc_msgSend(*(id *)(a1 + v2), "removeAllActions");
}

unint64_t sub_1000AF114@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1000C2AF8(*a1);
  *a2 = result;
  return result;
}

char *sub_1000AF180(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, int a6, unint64_t a7, int a8, double a9, double a10)
{
  char *v10;
  char *v11;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t KeyPath;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, __n128);
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t, __n128);
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t, __n128);
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t, uint64_t, __n128);
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t, uint64_t, __n128);
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t, uint64_t, __n128);
  __n128 v56;
  uint64_t v57;
  uint64_t v58;
  simd_float4 *v59;
  simd_float4 v60;
  simd_float4 v61;
  simd_float4 v62;
  simd_float4 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(uint64_t, uint64_t, __n128);
  __n128 v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  simd_float4 *v76;
  simd_float4 v77;
  simd_float4 v78;
  simd_float4 v79;
  simd_float4 v80;
  simd_float4 *v81;
  simd_float4 *v82;
  char *v83;
  uint64_t v84;
  void (*v85)(char *, uint64_t, uint64_t, uint64_t);
  char *v86;
  char *v87;
  simd_float4 *v88;
  simd_float4 v89;
  simd_float4 v90;
  char *v91;
  void *v92;
  char *v93;
  uint64_t v94;
  void *v95;
  double *v96;
  char *v97;
  id v98;
  id v99;
  uint64_t v100;
  id v101;
  uint64_t v102;
  NSString v103;
  id v104;
  uint64_t v105;
  id v106;
  id v107;
  NSString v108;
  id v109;
  id v110;
  NSString v111;
  id v112;
  uint64_t v113;
  id v114;
  void *v115;
  id v116;
  char v117;
  unint64_t v118;
  float v119;
  id v120;
  id v121;
  void *v122;
  uint64_t v123;
  id v124;
  void *v125;
  id v126;
  char *v127;
  __n128 v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  double v136;
  id v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  void *v149;
  int v150;
  objc_class *ObjectType;
  int v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  simd_float4 v159;
  simd_float4 v160;
  simd_float4 v161;
  id v162[3];
  uint64_t v163;
  _QWORD aBlock[6];
  objc_super v165;
  char v166[8];

  v11 = v10;
  v152 = a8;
  v145 = a7;
  v150 = a6;
  v163 = a5;
  v149 = a4;
  v147 = a3;
  v146 = a2;
  v148 = a1;
  ObjectType = (objc_class *)swift_getObjectType(v10);
  v158 = type metadata accessor for DispatchWorkItemFlags(0);
  v157 = *(_QWORD *)(v158 - 8);
  __chkstk_darwin(v158);
  v156 = (char *)&v145 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v155 = type metadata accessor for DispatchQoS(0);
  v154 = *(_QWORD *)(v155 - 8);
  __chkstk_darwin(v155);
  v153 = (char *)&v145 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = &v10[OBJC_IVAR____TtC7Measure11LabelRender_delegate];
  *((_QWORD *)v16 + 1) = 0;
  swift_unknownObjectWeakInit(v16, 0);
  v17 = &v10[OBJC_IVAR____TtC7Measure11LabelRender_rectangleLabelData];
  *(_QWORD *)v17 = 0;
  *((_QWORD *)v17 + 1) = 0;
  *(_QWORD *)(v17 + 13) = 0;
  v17[21] = 1;
  v18 = &v10[OBJC_IVAR____TtC7Measure11LabelRender_labelSizeAdjustment];
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *((_WORD *)v18 + 12) = 0;
  v10[OBJC_IVAR____TtC7Measure11LabelRender_inBounds] = 0;
  v19 = OBJC_IVAR____TtC7Measure11LabelRender__input;
  KeyPath = swift_getKeyPath(&unk_1003B52A8);
  v21 = sub_10000EDC8((uint64_t *)&unk_1004873C0);
  v22 = qword_10047AD88;
  v23 = v11;
  if (v22 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v24 = qword_1004AF890;
  v25 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v21 + 272);
  v26 = swift_retain();
  *(_QWORD *)&v11[v19] = v25(KeyPath, v24, v26);
  v27 = OBJC_IVAR____TtC7Measure11LabelRender__appState;
  v28 = swift_getKeyPath(&unk_1003B52D0);
  v29 = sub_10000EDC8((uint64_t *)&unk_100481B90);
  v30 = qword_1004AF890;
  v31 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v29 + 272);
  v32 = swift_retain();
  *(_QWORD *)&v23[v27] = v31(v28, v30, v32);
  v33 = OBJC_IVAR____TtC7Measure11LabelRender__unitState;
  v34 = swift_getKeyPath(&unk_1003B52F8);
  v35 = sub_10000EDC8(&qword_100481258);
  v36 = qword_1004AF890;
  v37 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v35 + 272);
  v38 = swift_retain();
  *(_QWORD *)&v23[v33] = v37(v34, v36, v38);
  v39 = OBJC_IVAR____TtC7Measure11LabelRender__orientationState;
  v40 = swift_getKeyPath(&unk_1003B5320);
  v41 = sub_10000EDC8((uint64_t *)&unk_10047EFD0);
  v42 = qword_1004AF890;
  v43 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v41 + 272);
  v44 = swift_retain();
  *(_QWORD *)&v23[v39] = v43(v40, v42, v44);
  v45 = OBJC_IVAR____TtC7Measure11LabelRender__render;
  v46 = swift_getKeyPath(&unk_1003B5348);
  v47 = sub_10000EDC8(&qword_100481998);
  v48 = qword_1004AF890;
  v49 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v47 + 272);
  v50 = swift_retain();
  *(_QWORD *)&v23[v45] = v49(v46, v48, v50);
  v51 = OBJC_IVAR____TtC7Measure11LabelRender__pointMove;
  v52 = swift_getKeyPath(&unk_1003B5370);
  v53 = sub_10000EDC8(&qword_1004819A0);
  v54 = qword_1004AF890;
  v55 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v53 + 272);
  v56 = swift_retain();
  *(_QWORD *)&v23[v51] = v55(v52, v54, v56);
  v57 = OBJC_IVAR____TtC7Measure11LabelRender_desiredAlpha;
  *(_QWORD *)&v23[OBJC_IVAR____TtC7Measure11LabelRender_desiredAlpha] = 0x3FF0000000000000;
  *(_DWORD *)&v23[OBJC_IVAR____TtC7Measure11LabelRender_labelLock] = 0;
  v58 = (uint64_t)&v23[OBJC_IVAR____TtC7Measure11LabelRender_snapFrom];
  sub_1000C226C((uint64_t)v166);
  sub_100012C58((uint64_t)v166, v58, &qword_100481988);
  sub_100012C58((uint64_t)v166, (uint64_t)&v23[OBJC_IVAR____TtC7Measure11LabelRender_snapTo], &qword_100481988);
  v59 = (simd_float4 *)&v23[OBJC_IVAR____TtC7Measure11LabelRender_latestLineEnds];
  v61 = matrix_identity_float4x4.columns[1];
  *(simd_float4 *)v162 = matrix_identity_float4x4.columns[0];
  v60 = *(simd_float4 *)v162;
  v161 = v61;
  v63 = matrix_identity_float4x4.columns[3];
  v160 = matrix_identity_float4x4.columns[2];
  v62 = v160;
  v159 = v63;
  *v59 = *(simd_float4 *)v162;
  v59[1] = v61;
  v59[2] = v62;
  v59[3] = v63;
  v59[4] = v60;
  v59[5] = v61;
  v59[6] = v62;
  v59[7] = v63;
  v64 = OBJC_IVAR____TtC7Measure11LabelRender__pillToPlatterAnimationState;
  v65 = swift_getKeyPath(&unk_1003B5398);
  v66 = sub_10000EDC8(&qword_1004810C8);
  v67 = qword_1004AF890;
  v68 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v66 + 272);
  v69 = swift_retain();
  *(_QWORD *)&v23[v64] = v68(v65, v67, v69);
  *(_QWORD *)&v23[OBJC_IVAR____TtC7Measure11LabelRender_kOcclusionAlpha] = 0x3FE0000000000000;
  v23[OBJC_IVAR____TtC7Measure11LabelRender_isOccluded] = 0;
  v70 = &v23[OBJC_IVAR____TtC7Measure11LabelRender_screenPoint];
  *(_QWORD *)v70 = 0;
  *((_QWORD *)v70 + 1) = 0;
  v70[16] = 1;
  v23[OBJC_IVAR____TtC7Measure11LabelRender__visibleForCapture] = 0;
  v71 = &v23[OBJC_IVAR____TtC7Measure11LabelRender_captureActionKey];
  strcpy(&v23[OBJC_IVAR____TtC7Measure11LabelRender_captureActionKey], "captureAction");
  *((_WORD *)v71 + 7) = -4864;
  v72 = &v23[OBJC_IVAR____TtC7Measure11LabelRender_attributedText];
  sub_100197BF8();
  *(_QWORD *)v72 = 0;
  *((_QWORD *)v72 + 1) = 0xE000000000000000;
  *((_QWORD *)v72 + 2) = v73;
  *((_QWORD *)v72 + 3) = 0;
  v23[OBJC_IVAR____TtC7Measure11LabelRender_movesAlongLine] = 1;
  v74 = &v23[OBJC_IVAR____TtC7Measure11LabelRender_speakableString];
  *(_QWORD *)v74 = 0;
  *((_QWORD *)v74 + 1) = 0xE000000000000000;
  *(_DWORD *)&v23[OBJC_IVAR____TtC7Measure11LabelRender_roundedMeasurementInMeters] = 0;
  *(_DWORD *)&v23[OBJC_IVAR____TtC7Measure11LabelRender_measurement] = 0;
  v23[OBJC_IVAR____TtC7Measure11LabelRender_capturing] = 0;
  v23[OBJC_IVAR____TtC7Measure11LabelRender_hideForMovePoint] = 0;
  v75 = &v23[OBJC_IVAR____TtC7Measure11LabelRender_labelSize];
  *(_QWORD *)v75 = 0;
  *((_QWORD *)v75 + 1) = 0;
  v23[OBJC_IVAR____TtC7Measure11LabelRender_selectionState] = 0;
  v23[OBJC_IVAR____TtC7Measure11LabelRender_chevronOnLeft] = 0;
  *(_QWORD *)&v23[OBJC_IVAR____TtC7Measure11LabelRender_transitionLabel] = 0;
  *(_QWORD *)&v23[OBJC_IVAR____TtC7Measure11LabelRender_timer] = 0;
  v76 = (simd_float4 *)&v23[OBJC_IVAR____TtC7Measure11LabelRender_center];
  v77 = *(simd_float4 *)v162;
  v78 = v161;
  *v76 = *(simd_float4 *)v162;
  v76[1] = v78;
  v79 = v160;
  v80 = v159;
  v76[2] = v160;
  v76[3] = v80;
  v81 = (simd_float4 *)&v23[OBJC_IVAR____TtC7Measure11LabelRender_end1];
  *v81 = v77;
  v81[1] = v78;
  v81[2] = v79;
  v81[3] = v80;
  v82 = (simd_float4 *)&v23[OBJC_IVAR____TtC7Measure11LabelRender_end2];
  *v82 = v77;
  v82[1] = v78;
  v82[2] = v79;
  v82[3] = v80;
  v83 = &v23[OBJC_IVAR____TtC7Measure11LabelRender_snapTimestamp];
  v84 = type metadata accessor for Date(0);
  v85 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v84 - 8) + 56);
  v85(v83, 1, 1, v84);
  *(_QWORD *)&v23[OBJC_IVAR____TtC7Measure11LabelRender_placingLabelDesiredOffset] = 0;
  *(_DWORD *)&v23[OBJC_IVAR____TtC7Measure11LabelRender_screenAngleOffset] = 0;
  *(_DWORD *)&v23[OBJC_IVAR____TtC7Measure11LabelRender_checkAngleOffset] = 0;
  v86 = &v23[OBJC_IVAR____TtC7Measure11LabelRender_labelSafeArea];
  *(_OWORD *)v86 = 0u;
  *((_OWORD *)v86 + 1) = 0u;
  v23[OBJC_IVAR____TtC7Measure11LabelRender_refined] = 0;
  *(_QWORD *)&v23[OBJC_IVAR____TtC7Measure11LabelRender_labelZOffset] = 0;
  v87 = &v23[OBJC_IVAR____TtC7Measure11LabelRender_viewBounds];
  *(_QWORD *)v87 = 0;
  *((_QWORD *)v87 + 1) = 0;
  v87[16] = 1;
  *(_QWORD *)&v23[OBJC_IVAR____TtC7Measure11LabelRender_lastPositionsOnLine] = _swiftEmptyArrayStorage;
  v88 = (simd_float4 *)&v23[OBJC_IVAR____TtC7Measure11LabelRender_lastTransform];
  v89 = v161;
  *v88 = *(simd_float4 *)v162;
  v88[1] = v89;
  v90 = v159;
  v88[2] = v160;
  v88[3] = v90;
  v91 = &v23[OBJC_IVAR____TtC7Measure11LabelRender_currentAnimation];
  *(_QWORD *)v91 = 0;
  *((_QWORD *)v91 + 1) = 0;
  *((_OWORD *)v91 + 1) = xmmword_1003B4EF0;
  *((_DWORD *)v91 + 8) = 0;
  v85(&v23[OBJC_IVAR____TtC7Measure11LabelRender_occlusionResetTime], 1, 1, v84);
  *(_QWORD *)&v23[OBJC_IVAR____TtC7Measure11LabelRender_activityPresentingViewController] = 0;
  *(_QWORD *)&v23[OBJC_IVAR____TtC7Measure11LabelRender_historyPressedPublisher] = 0;
  v23[OBJC_IVAR____TtC7Measure11LabelRender_wasHidden] = 0;
  v92 = v148;
  *(_QWORD *)&v23[OBJC_IVAR____TtC7Measure11LabelRender_mainView] = v148;
  v93 = &v23[OBJC_IVAR____TtC7Measure11LabelRender_measurementID];
  v94 = v147;
  *(_QWORD *)v93 = v146;
  *((_QWORD *)v93 + 1) = v94;
  v95 = v149;
  *(_QWORD *)&v23[OBJC_IVAR____TtC7Measure11LabelRender_sceneView] = v149;
  *(_QWORD *)&v23[OBJC_IVAR____TtC7Measure11LabelRender_state] = v163;
  v96 = (double *)&v23[OBJC_IVAR____TtC7Measure11LabelRender_editViewBounds];
  *v96 = a9;
  v96[1] = a10;
  v97 = &v23[OBJC_IVAR____TtC7Measure11LabelRender_currentProperties];
  *(_OWORD *)v97 = xmmword_1003B39B0;
  *((_OWORD *)v97 + 1) = 0u;
  *((_OWORD *)v97 + 2) = 0u;
  *((_OWORD *)v97 + 3) = 0u;
  *((_QWORD *)v97 + 8) = 0xE000000000000000;
  v98 = objc_allocWithZone((Class)type metadata accessor for TouchableSpriteNode());
  v161.i64[0] = (uint64_t)v92;
  v162[0] = v95;
  v99 = objc_msgSend(v98, "init");
  v100 = OBJC_IVAR____TtC7Measure11LabelRender_labelNode;
  *(_QWORD *)&v23[OBJC_IVAR____TtC7Measure11LabelRender_labelNode] = v99;
  if (qword_10047AE70 != -1)
    swift_once(&qword_10047AE70, sub_100195D4C);
  v101 = objc_msgSend(objc_allocWithZone((Class)SKSpriteNode), "initWithColor:size:", qword_1004AF968, 0.0, 0.0);
  v102 = OBJC_IVAR____TtC7Measure11LabelRender_labelContainer;
  *(_QWORD *)&v23[OBJC_IVAR____TtC7Measure11LabelRender_labelContainer] = v101;
  objc_msgSend(v101, "setBlendMode:", 0);
  if (qword_1004AF770)
    objc_msgSend(*(id *)&v23[v102], "setShader:");
  objc_msgSend(*(id *)&v23[v100], "setAlpha:", *(double *)&v23[v57], v145);
  v103 = String._bridgeToObjectiveC()();
  v104 = objc_msgSend((id)objc_opt_self(SKLabelNode), "labelNodeWithText:", v103);

  v105 = OBJC_IVAR____TtC7Measure11LabelRender_labelText;
  *(_QWORD *)&v23[OBJC_IVAR____TtC7Measure11LabelRender_labelText] = v104;
  v106 = objc_allocWithZone((Class)NSAttributedString);
  v107 = v104;
  v108 = String._bridgeToObjectiveC()();
  v109 = objc_msgSend(v106, "initWithString:", v108);

  objc_msgSend(v107, "setAttributedText:", v109);
  v110 = objc_allocWithZone((Class)SKSpriteNode);
  v111 = String._bridgeToObjectiveC()();
  v112 = objc_msgSend(v110, "initWithImageNamed:", v111);

  v113 = OBJC_IVAR____TtC7Measure11LabelRender_labelChevron;
  *(_QWORD *)&v23[OBJC_IVAR____TtC7Measure11LabelRender_labelChevron] = v112;
  objc_msgSend(v112, "setAlpha:", 0.0);
  v114 = objc_msgSend(v162[0], "overlaySKScene");
  if (v114)
  {
    v115 = v114;
    objc_msgSend(v114, "addChild:", *(_QWORD *)&v23[v100]);

  }
  objc_msgSend(*(id *)&v23[v100], "addChild:", *(_QWORD *)&v23[v102]);
  objc_msgSend(*(id *)&v23[v100], "addChild:", *(_QWORD *)&v23[v105]);
  objc_msgSend(*(id *)&v23[v102], "addChild:", *(_QWORD *)&v23[v113]);
  objc_msgSend(*(id *)&v23[v105], "setHorizontalAlignmentMode:", 0);
  objc_msgSend(*(id *)&v23[v105], "setVerticalAlignmentMode:", 1);
  if (qword_10047AE50 != -1)
    swift_once(&qword_10047AE50, sub_100195CE8);
  v116 = objc_msgSend(objc_allocWithZone((Class)UIFontMetrics), "initForTextStyle:", qword_1004AF948);
  *(_QWORD *)&v23[OBJC_IVAR____TtC7Measure11LabelRender_labelFontMetrics] = v116;
  objc_msgSend(*(id *)&v23[v105], "setUserInteractionEnabled:", 0);
  objc_msgSend(*(id *)&v23[v105], "setBlendMode:", 0);
  objc_msgSend(*(id *)&v23[v105], "setZPosition:", 1.0);
  v23[OBJC_IVAR____TtC7Measure11LabelRender_labelType] = v150;
  v117 = v152;
  if ((v152 & 1) != 0)
  {
    *(_QWORD *)v17 = 0;
    *((_QWORD *)v17 + 1) = 0;
    *(_QWORD *)(v17 + 13) = 0;
  }
  else
  {
    v118 = HIDWORD(v145);
    v119 = *(float *)&v145;
    *(_QWORD *)v17 = v145;
    *((_QWORD *)v17 + 1) = v118;
    v17[20] = 0;
    *((float *)v17 + 4) = v119 * *(float *)&v118;
  }
  v17[21] = v117 & 1;

  v165.receiver = v23;
  v165.super_class = ObjectType;
  v120 = objc_msgSendSuper2(&v165, "init");
  sub_100018148(0, (unint64_t *)&qword_10047FB70, OS_dispatch_queue_ptr);
  v121 = v120;
  v122 = (void *)static OS_dispatch_queue.main.getter();
  v123 = swift_allocObject(&unk_100444518, 32, 7);
  v124 = v162[0];
  *(_QWORD *)(v123 + 16) = v121;
  *(_QWORD *)(v123 + 24) = v124;
  aBlock[4] = sub_1000C237C;
  aBlock[5] = v123;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003ECA0;
  aBlock[3] = &unk_100444530;
  v125 = _Block_copy(aBlock);
  v126 = v124;
  v127 = (char *)v121;
  v128 = swift_release();
  v129 = v153;
  static DispatchQoS.unspecified.getter(v128);
  aBlock[0] = _swiftEmptyArrayStorage;
  v130 = sub_10000C4B0((unint64_t *)&qword_10047D7F0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v131 = sub_10000EDC8((uint64_t *)&unk_10047E430);
  v132 = sub_100043310((unint64_t *)&qword_10047D800, (uint64_t *)&unk_10047E430, (uint64_t)&protocol conformance descriptor for [A]);
  v133 = v156;
  v134 = v158;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v131, v132, v158, v130);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v129, v133, v125);
  _Block_release(v125);

  (*(void (**)(char *, uint64_t))(v157 + 8))(v133, v134);
  (*(void (**)(char *, uint64_t))(v154 + 8))(v129, v155);
  sub_1000ADB38(v163);
  v135 = OBJC_IVAR____TtC7Measure11LabelRender_labelNode;
  objc_msgSend(*(id *)&v127[OBJC_IVAR____TtC7Measure11LabelRender_labelNode], "alpha");
  if (v136 != 0.0)
  {
    v137 = objc_msgSend((id)objc_opt_self(SKAction), "fadeAlphaTo:duration:", 0.0, 0.0);
    objc_msgSend(*(id *)&v127[v135], "runAction:", v137);

  }
  objc_msgSend(*(id *)&v127[v135], "setUserInteractionEnabled:", 0);
  v138 = *(_QWORD *)&v127[v135] + OBJC_IVAR____TtC7Measure19TouchableSpriteNode_delegate;
  *(_QWORD *)(v138 + 8) = &off_100444420;
  swift_unknownObjectWeakAssign(v138, v127);
  *(_QWORD *)&v127[OBJC_IVAR____TtC7Measure11LabelRender_labelZOffset] = qword_1004AF340;
  *(double *)&qword_1004AF340 = *(double *)&qword_1004AF340 + 0.0003;
  sub_1000DCD08();

  v139 = swift_allocObject(&unk_100444568, 24, 7);
  *(_QWORD *)(v139 + 16) = v127;
  v140 = &v127[OBJC_IVAR____TtC7Measure11LabelRender_labelSizeAdjustment];
  swift_beginAccess(&v127[OBJC_IVAR____TtC7Measure11LabelRender_labelSizeAdjustment], aBlock, 1, 0);
  v141 = *(_QWORD *)v140;
  v142 = *((_QWORD *)v140 + 1);
  *(_QWORD *)v140 = sub_1000C2384;
  *((_QWORD *)v140 + 1) = v139;
  *((_QWORD *)v140 + 2) = 1;
  *((_WORD *)v140 + 12) = 0;
  v143 = v127;
  sub_1000217BC(v141, v142);
  return v143;
}

void sub_1000AFFFC(uint64_t a1, id a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;

  objc_msgSend(a2, "bounds");
  v3 = a1 + OBJC_IVAR____TtC7Measure11LabelRender_viewBounds;
  *(_QWORD *)v3 = v4;
  *(_QWORD *)(v3 + 8) = v5;
  *(_BYTE *)(v3 + 16) = 0;
  v6 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v7 = objc_msgSend(v6, "userInterfaceLayoutDirection");

  *(_BYTE *)(a1 + OBJC_IVAR____TtC7Measure11LabelRender_chevronOnLeft) = v7 == (id)1;
  if (v7 == (id)1)
    objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC7Measure11LabelRender_labelChevron), "setZRotation:", 3.14159265);
}

uint64_t sub_1000B00C4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  _QWORD aBlock[6];

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v18 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100018148(0, (unint64_t *)&qword_10047FB70, OS_dispatch_queue_ptr);
  v8 = (void *)static OS_dispatch_queue.main.getter();
  v9 = swift_allocObject(&unk_100444478, 24, 7);
  *(_QWORD *)(v9 + 16) = v0;
  aBlock[4] = sub_1000C217C;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003ECA0;
  aBlock[3] = &unk_100444490;
  v10 = _Block_copy(aBlock);
  v11 = v0;
  v12 = swift_release();
  static DispatchQoS.unspecified.getter(v12);
  aBlock[0] = _swiftEmptyArrayStorage;
  v13 = sub_10000C4B0((unint64_t *)&qword_10047D7F0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v14 = sub_10000EDC8((uint64_t *)&unk_10047E430);
  v15 = sub_100043310((unint64_t *)&qword_10047D800, (uint64_t *)&unk_10047E430, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v14, v15, v1, v13);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v3, v10);
  _Block_release(v10);

  (*(void (**)(char *, uint64_t))(v18 + 8))(v3, v1);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

id sub_1000B02D8(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  id v5;

  if (*(unsigned __int8 *)(a1 + OBJC_IVAR____TtC7Measure11LabelRender_selectionState) - 1 <= 2)
  {
    v2 = *(void **)(a1 + OBJC_IVAR____TtC7Measure11LabelRender_transitionLabel);
    if (v2)
    {
      v3 = v2;
      sub_1000A2394();

    }
    sub_1000B036C();
  }
  v4 = *(void **)(a1 + OBJC_IVAR____TtC7Measure11LabelRender_transitionLabel);
  if (v4)
  {
    v5 = v4;
    sub_1000A26D4();

  }
  return objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC7Measure11LabelRender_labelNode), "removeFromParent");
}

id sub_1000B036C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t Strong;
  uint64_t v5;
  void *v6;
  id v7;

  v1 = v0;
  v2 = OBJC_IVAR____TtC7Measure11LabelRender_desiredAlpha;
  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_labelNode), "setAlpha:", *(double *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_desiredAlpha));
  Strong = swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR____TtC7Measure11LabelRender_delegate, v3);
  if (Strong)
  {
    v5 = Strong;
    sub_1000C5D80(*(_QWORD *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_measurementID), *(_QWORD *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_measurementID + 8));
    swift_unknownObjectRelease(v5);
  }
  *(_BYTE *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_selectionState) = 0;
  v6 = *(void **)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_transitionLabel);
  if (v6)
  {
    v7 = v6;
    sub_1000A26D4();

  }
  *(_QWORD *)(v1 + v2) = 0x3FF0000000000000;
  return sub_1000ADB38(*(_QWORD *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_state));
}

uint64_t sub_1000B0428(char a1, char a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7, __n128 a8, __n128 a9, __n128 a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  __n128 v26;
  uint64_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float v31;
  __n128 v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __n128 *v46;
  __n128 v47;
  __n128 v48;
  __n128 v49;
  __n128 v50;
  char *v51;
  uint64_t v52;
  double v53;
  void (*v54)(char *, uint64_t);
  double v55;
  __n128 *v56;
  __n128 v57;
  __n128 v58;
  __n128 *v59;
  __n128 v60;
  __n128 v61;
  __n128 v62;
  __n128 v63;
  __n128 *v64;
  __n128 v65;
  __n128 v66;
  __n128 v67;
  float v68;
  __n128 v69;
  __n128 v70;
  __n128 v71;
  __n128 v72;
  __n128 v73;
  __n128 v74;
  __n128 v75;
  __n128 v76;
  __n128 v77;
  __n128 v78;
  __n128 v79;
  __n128 v80;
  __n128 *v81;
  __n128 *v82;
  __n128 *v83;
  double v84;
  double v85;
  __n128 v86;
  __n128 v87;
  __n128 v88;
  __n128 v89;
  __n128 v90;
  __n128 v91;
  __n128 v92;
  __n128 v93;
  __n128 v94;
  __n128 v95;
  __n128 v96;
  char *v97;
  __n128 v98;
  __n128 v99;
  __n128 v100;
  __n128 v101;
  __n128 v102;
  __n128 v103;
  __n128 v104;
  __n128 v105;
  __n128 v106;
  _BYTE v107[144];
  _OWORD v108[9];
  _OWORD v109[9];
  __n128 v110;
  __n128 v111;
  __n128 v112;
  __n128 v113;
  __n128 v114;
  __n128 v115;
  __n128 v116;
  __n128 v117;
  _BYTE v118[32];

  v11 = v10;
  v101 = a9;
  v102 = a10;
  v99 = a7;
  v100 = a8;
  v105 = a5;
  v106 = a6;
  v103 = a3;
  v104 = a4;
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v86 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v97 = (char *)&v86 - v19;
  v20 = sub_10000EDC8((uint64_t *)&unk_10047E440);
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v86 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v25 = (char *)&v86 - v24;
  v26.n128_f64[0] = simd_float4x4.position.getter(v99, v100, v101, v102);
  v98 = v26;
  *(double *)v28.i64 = simd_float4x4.position.getter(v103, v104, v105, v106);
  v29 = vsubq_f32((float32x4_t)v98, v28);
  v30 = vmulq_f32(v29, v29);
  v31 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 2), vaddq_f32(v30, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 1))).f32[0]);
  if (*(_BYTE *)(v10 + OBJC_IVAR____TtC7Measure11LabelRender_labelType) != 1)
  {
    sub_1000AEC68(v31);
    *(float *)(v10 + OBJC_IVAR____TtC7Measure11LabelRender_measurement) = v31;
  }
  v32 = v103;
  v33 = v104;
  v34 = v105;
  v35 = v106;
  if (v31 > 0.00000011921)
    v32.n128_f64[0] = sub_1000B0AFC(v103, v104, v105, v106, v99, v100, v101, v102, 0.5);
  if ((a1 & 1) != 0 || (a2 & 1) != 0)
  {
    Date.init()(v27);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v25, 0, 1, v14);
    v38 = v10 + OBJC_IVAR____TtC7Measure11LabelRender_snapTimestamp;
    swift_beginAccess(v11 + OBJC_IVAR____TtC7Measure11LabelRender_snapTimestamp, &v110, 33, 0);
    sub_1000C2224((uint64_t)v25, v38);
    swift_endAccess(&v110);
    v39 = *(_OWORD *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_end1 + 16);
    v40 = *(_OWORD *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_end1 + 32);
    v41 = *(_OWORD *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_end1 + 48);
    v42 = *(_OWORD *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_end2);
    v43 = *(_OWORD *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_end2 + 16);
    v44 = *(_OWORD *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_end2 + 32);
    v45 = *(_OWORD *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_end2 + 48);
    v109[0] = *(_OWORD *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_end1);
    v109[1] = v39;
    v109[2] = v40;
    v109[3] = v41;
    v109[4] = v42;
    v109[5] = v43;
    v109[6] = v44;
    v109[7] = v45;
    sub_1000C22A8((uint64_t)v109);
    sub_100012C58((uint64_t)v109, v11 + OBJC_IVAR____TtC7Measure11LabelRender_snapFrom, &qword_100481988);
    v110 = v103;
    v111 = v104;
    v112 = v105;
    v113 = v106;
    v114 = v99;
    v115 = v100;
    v116 = v101;
    v117 = v102;
    sub_1000C22A8((uint64_t)&v110);
    result = sub_100012C58((uint64_t)&v110, v11 + OBJC_IVAR____TtC7Measure11LabelRender_snapTo, &qword_100481988);
  }
  else
  {
    v94 = v35;
    v95 = v34;
    v96 = v33;
    v98 = v32;
    v36 = v10 + OBJC_IVAR____TtC7Measure11LabelRender_snapTimestamp;
    swift_beginAccess(v10 + OBJC_IVAR____TtC7Measure11LabelRender_snapTimestamp, v118, 0, 0);
    sub_1000C219C(v36, (uint64_t)v23);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v23, 1, v14) == 1)
    {
      result = sub_1000C21E4((uint64_t)v23);
LABEL_13:
      v56 = (__n128 *)(v10 + OBJC_IVAR____TtC7Measure11LabelRender_center);
      v57 = v96;
      *v56 = v98;
      v56[1] = v57;
      v58 = v94;
      v56[2] = v95;
      v56[3] = v58;
      v59 = (__n128 *)(v10 + OBJC_IVAR____TtC7Measure11LabelRender_end1);
      v61 = v103;
      v60 = v104;
      *v59 = v103;
      v59[1] = v60;
      v63 = v105;
      v62 = v106;
      v59[2] = v105;
      v59[3] = v62;
      v64 = (__n128 *)(v10 + OBJC_IVAR____TtC7Measure11LabelRender_end2);
      v66 = v99;
      v65 = v100;
      *v64 = v99;
      v64[1] = v65;
      v67 = v101;
      v50 = v102;
      v64[2] = v101;
      v64[3] = v50;
      v46 = (__n128 *)(v10 + OBJC_IVAR____TtC7Measure11LabelRender_latestLineEnds);
      *v46 = v61;
      v46[1] = v60;
      v46[2] = v63;
      v46[3] = v62;
      v46[4] = v66;
      v46[5] = v65;
      v46[6] = v67;
      goto LABEL_14;
    }
    v51 = v97;
    v52 = (*(uint64_t (**)(void))(v15 + 32))();
    Date.init()(v52);
    v53 = Date.timeIntervalSince(_:)(v51);
    v54 = *(void (**)(char *, uint64_t))(v15 + 8);
    v54(v18, v14);
    v55 = fabs(v53);
    if (v55 > 0.5)
    {
      v54(v51, v14);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v25, 1, 1, v14);
      swift_beginAccess(v36, &v110, 33, 0);
      sub_1000C2224((uint64_t)v25, v36);
      swift_endAccess(&v110);
      sub_1000C226C((uint64_t)&v110);
      sub_100012C58((uint64_t)&v110, v10 + OBJC_IVAR____TtC7Measure11LabelRender_snapFrom, &qword_100481988);
      result = sub_100012C58((uint64_t)&v110, v10 + OBJC_IVAR____TtC7Measure11LabelRender_snapTo, &qword_100481988);
      goto LABEL_13;
    }
    sub_100012C58(v10 + OBJC_IVAR____TtC7Measure11LabelRender_snapFrom, (uint64_t)v109, &qword_100481988);
    sub_100012C58((uint64_t)v109, (uint64_t)&v110, &qword_100481988);
    if (sub_1000C228C((uint64_t)&v110) == 1)
      goto LABEL_17;
    v92 = v111;
    v93 = v110;
    v90 = v113;
    v91 = v112;
    v98 = v114;
    v95 = v116;
    v96 = v115;
    v94 = v117;
    sub_100012C58(v10 + OBJC_IVAR____TtC7Measure11LabelRender_snapTo, (uint64_t)v107, &qword_100481988);
    sub_100012C58((uint64_t)v107, (uint64_t)v108, &qword_100481988);
    if (sub_1000C228C((uint64_t)v108) == 1)
    {
LABEL_17:
      result = ((uint64_t (*)(char *, uint64_t))v54)(v51, v14);
    }
    else
    {
      v88 = (__n128)v108[1];
      v89 = (__n128)v108[0];
      v86 = (__n128)v108[3];
      v87 = (__n128)v108[2];
      v68 = spring(tension:friction:velocity:elapsed:)(400.0, 40.0, 0.0, v55);
      *(float *)&v84 = v68;
      v69.n128_f64[0] = slerp(transform1:transform2:percent:)(v93, v92, v91, v90, v89, v88, v87, v86, v84);
      v92 = v70;
      v93 = v69;
      v90 = v72;
      v91 = v71;
      *(float *)&v85 = v68;
      v73.n128_f64[0] = slerp(transform1:transform2:percent:)(v98, v96, v95, v94, v99, v100, v101, v102, v85);
      v98 = v73;
      v95 = v75;
      v96 = v74;
      v94 = v76;
      v77.n128_f64[0] = sub_1000B0AFC(v93, v92, v91, v90, v73, v74, v75, v76, 0.5);
      v88 = v78;
      v89 = v77;
      v86 = v80;
      v87 = v79;
      result = ((uint64_t (*)(char *, uint64_t))v54)(v51, v14);
      v81 = (__n128 *)(v10 + OBJC_IVAR____TtC7Measure11LabelRender_center);
      *v81 = v89;
      v81[1] = v88;
      v81[2] = v87;
      v81[3] = v86;
      v82 = (__n128 *)(v10 + OBJC_IVAR____TtC7Measure11LabelRender_end1);
      *v82 = v93;
      v82[1] = v92;
      v82[2] = v91;
      v82[3] = v90;
      v83 = (__n128 *)(v10 + OBJC_IVAR____TtC7Measure11LabelRender_end2);
      *v83 = v98;
      v83[1] = v96;
      v83[2] = v95;
      v83[3] = v94;
    }
  }
  v46 = (__n128 *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_latestLineEnds);
  v47 = v104;
  *v46 = v103;
  v46[1] = v47;
  v48 = v106;
  v46[2] = v105;
  v46[3] = v48;
  v49 = v100;
  v46[4] = v99;
  v46[5] = v49;
  v46[6] = v101;
  v50 = v102;
LABEL_14:
  v46[7] = v50;
  return result;
}

double sub_1000B0AFC(__n128 a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7, __n128 a8, float a9)
{
  uint64_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int32x4_t v21;
  float32x2_t v22;
  float32x2_t v23;
  uint64_t v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  int8x16_t v28;
  float32x2_t v29;
  float32x2_t v30;
  void (*v31)(_QWORD *__return_ptr, __n128);
  __n128 v32;
  uint64_t v33;
  float32x4_t v34;
  float32x4_t v35;
  int32x4_t v36;
  float32x4_t v37;
  int32x4_t v38;
  __n128 v39;
  float32x4_t v48;
  float32x4_t v50;
  float32x4_t v51;
  _QWORD __src[64];
  _OWORD __dst[32];

  *(double *)v18.i64 = simd_float4x4.position.getter(a1, a2, a3, a4);
  v51 = v18;
  *(double *)v19.i64 = simd_float4x4.position.getter(a5, a6, a7, a8);
  v20 = vsubq_f32(v19, v51);
  v21 = (int32x4_t)vmulq_f32(v20, v20);
  v21.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v21, 2), vadd_f32(*(float32x2_t *)v21.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v21.i8, 1))).u32[0];
  v22 = vrsqrte_f32((float32x2_t)v21.u32[0]);
  v23 = vmul_f32(v22, vrsqrts_f32((float32x2_t)v21.u32[0], vmul_f32(v22, v22)));
  v48 = v20;
  v50 = vmulq_n_f32(v20, vmul_f32(v23, vrsqrts_f32((float32x2_t)v21.u32[0], vmul_f32(v23, v23))).f32[0]);
  v25.n128_f64[0] = simd_float4x4.up.getter(a1, a2, a3, a4);
  v26 = (__n128)v50;
  v27 = v25;
  v28 = (int8x16_t)v25;
  v28.i32[0] = vextq_s8(v28, v28, 8uLL).u32[0];
  v29.i32[1] = v50.i32[1];
  v29.i32[0] = vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL).u32[0];
  v30 = vmul_f32(*(float32x2_t *)v28.i8, v29);
  if ((float)(1.0 - fabsf(v30.f32[0] + (float)(vmuls_n_f32(v25.n128_f32[0], v50.f32[0]) + v30.f32[1]))) < 0.00000011921)
  {
    v31 = *(void (**)(_QWORD *__return_ptr, __n128))(**(_QWORD **)(v17
                                                                            + OBJC_IVAR____TtC7Measure11LabelRender__render)
                                                              + 144);
    v32 = swift_retain();
    v31(__src, v32);
    swift_release();
    memcpy(__dst, __src, 0x1F8uLL);
    v33 = sub_100036264((uint64_t)__dst);
    *(double *)v34.i64 = simd_float4x4.forward.getter(v33);
    v26 = (__n128)v50;
    v35 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v26, (int32x4_t)v26), (int8x16_t)v50, 0xCuLL);
    v36 = (int32x4_t)vmlaq_f32(vmulq_f32(v35, vnegq_f32(v34)), v50, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v34, (int32x4_t)v34), (int8x16_t)v34, 0xCuLL));
    v37 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v36, v36), (int8x16_t)v36, 0xCuLL);
    v38 = (int32x4_t)vmlaq_f32(vmulq_f32(v35, vnegq_f32(v37)), v50, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v37, (int32x4_t)v37), (int8x16_t)v37, 0xCuLL));
    v27 = (__n128)vextq_s8((int8x16_t)vuzp1q_s32(v38, v38), (int8x16_t)v38, 0xCuLL);
  }
  v39.n128_u64[0] = (unint64_t)vadd_f32(*(float32x2_t *)v51.f32, vmul_n_f32(*(float32x2_t *)v48.f32, a9));
  v39.n128_f32[2] = v51.f32[2] + vmuls_lane_f32(a9, v48, 2);
  v39.n128_u32[3] = 0;
  return createTransform(forward:normal:position:)(v24, v26, v27, v39);
}

void sub_1000B0CC4(uint64_t a1)
{
  _BYTE *v1;
  _BYTE *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int8 *v11;
  void (*v12)(__int128 *__return_ptr, __n128);
  __n128 v13;
  double v14;
  uint64_t v15;
  double v16;
  id v17;
  void (*v18)(__int128 *__return_ptr, __n128);
  __n128 v19;
  __int128 v20;
  float32x2_t v21;
  float v22;
  __n128 v23;
  double v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  uint64_t v29;
  double v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  __n128 *v37;
  __n128 v38;
  uint64_t v39;
  float v40;
  __n128 v41;
  double v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  double v49;
  float v50;
  float v51;
  uint64_t v52;
  unint64_t v53;
  _UNKNOWN **v54;
  __n128 v55;
  __n128 v56;
  unint64_t v57;
  __n128 v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float v62;
  double v63;
  double v64;
  double v65;
  void *v66;
  uint64_t v67;
  _QWORD *v68;
  float64x2_t *v69;
  __int8 *v70;
  uint64_t Strong;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t (*v78)(__n128);
  __n128 v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t (*v91)(__n128);
  __n128 v92;
  uint64_t v93;
  unint64_t v94;
  void (*v95)(uint64_t (*)(), uint64_t);
  unint64_t v96;
  id v97;
  unsigned int v98;
  uint64_t v99;
  double v100;
  char v101;
  double v102;
  double v103;
  double *v104;
  double v105;
  double v106;
  double v107;
  double v108;
  char v109;
  double v110;
  __n128 v111;
  __n128 v112;
  __n128 v113;
  __n128 v114;
  __n128 v115;
  __n128 v116;
  int8x16_t v117;
  __n128 v118;
  int8x16_t v119;
  int8x16_t v120;
  int v121;
  os_unfair_lock_s *v122;
  char v123;
  BOOL v124;
  _QWORD *v125;
  double v126;
  float v127;
  float32x2_t v128;
  BOOL v129;
  float v130;
  float v131;
  float v132;
  uint64_t v133;
  float v134;
  int v135;
  float v136;
  double v137;
  double v138;
  double v139;
  uint64_t v140;
  void *v141;
  void *v142;
  id v143;
  id v144;
  double v145;
  double v146;
  uint64_t v147;
  double v148;
  uint64_t v149;
  double v150;
  double v151;
  double v152;
  uint64_t v153;
  uint64_t v154;
  double *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  double v159;
  uint64_t v160;
  uint64_t v161;
  __int128 v162;
  __int128 v163;
  __n128 v164;
  void *v165;
  uint64_t v166;
  __int128 v167;
  __int128 v168;
  void *v169;
  _BYTE *v170;
  __n128 v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  __int8 *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t (*v184)(__n128);
  __n128 v185;
  uint64_t v186;
  __n128 v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t (*v195)(__n128);
  __n128 v196;
  uint64_t v197;
  uint64_t v198;
  void (*v199)(uint64_t (*)(), uint64_t);
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t (*v207)(__n128);
  __n128 v208;
  uint64_t v209;
  uint64_t v210;
  void (*v211)(uint64_t (*)(), uint64_t);
  double v212;
  uint64_t v213;
  double v214;
  id v215;
  char *v216;
  __n128 v217;
  uint64_t v218;
  BOOL v219;
  uint64_t v220;
  __n128 *v221;
  __n128 v222;
  __n128 v223;
  __n128 v224;
  __n128 v225;
  __n128 v226;
  __n128 *v227;
  __n128 v228;
  __n128 v229;
  __n128 v230;
  __n128 v231;
  __n128 v232;
  __n128 v233;
  __n128 v234;
  __n128 v235;
  float v236;
  float v237;
  __n128 v238;
  __n128 v239;
  __n128 v240;
  __n128 v241;
  int8x16_t v242;
  __n128 v243;
  __n128 v244;
  float32x4_t v245;
  float32x4_t v246;
  float32x4_t v247;
  float32x4_t v248;
  __n128 v249;
  __n128 v250;
  float32x4_t v251;
  float32x4_t v252;
  float32x4_t v253;
  float32x4_t v254;
  int8x16_t v255;
  __n128 v256;
  __n128 v257;
  __n128 v258;
  __n128 v259;
  __n128 v260;
  uint64_t v261;
  double v262;
  unsigned int v263;
  float v264;
  int8x16_t v265;
  __n128 v266;
  int8x16_t v267;
  int8x16_t v268;
  __n128 v269;
  uint64_t v270;
  uint64_t v271;
  __int8 *v272;
  uint64_t v273;
  __n128 v274;
  int8x16_t v275;
  int8x16_t v276;
  int8x16_t v277;
  int8x16_t v278;
  __n128 v279;
  __n128 v280;
  __n128 v281;
  __n128 v282;
  __n128 v283;
  __n128 v284;
  __int8 *v285;
  __n128 v286;
  __n128 v287;
  __n128 v288;
  __n128 v289;
  __n128 v290;
  __n128 v291;
  _QWORD aBlock[6];
  unint64_t v293;
  float v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  uint64_t v299;
  CGPoint v300;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v265.i8[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v265.i8[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v288 = *(__n128 *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_center];
  v291 = *(__n128 *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_center + 16];
  v290 = *(__n128 *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_center + 32];
  v289 = *(__n128 *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_center + 48];
  v12 = *(void (**)(__int128 *__return_ptr, __n128))(**(_QWORD **)&v1[OBJC_IVAR____TtC7Measure11LabelRender__appState]
                                                              + 144);
  v13 = swift_retain();
  v12(&v295, v13);
  *(_QWORD *)&v14 = swift_release().n128_u64[0];
  if (BYTE3(v295) == 1)
  {
    v15 = OBJC_IVAR____TtC7Measure11LabelRender_labelNode;
    objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_labelNode], "alpha", v14);
    if (v16 != 0.0)
    {
      v17 = objc_msgSend((id)objc_opt_self(SKAction), "fadeAlphaTo:duration:", 0.0, 0.0);
      objc_msgSend(*(id *)&v2[v15], "runAction:", v17);

    }
    objc_msgSend(*(id *)&v2[v15], "setUserInteractionEnabled:", 0);
    goto LABEL_101;
  }
  v285 = v11;
  v271 = v8;
  v272 = v7;
  sub_1000B25E8();
  v18 = *(void (**)(__int128 *__return_ptr, __n128))(**(_QWORD **)&v1[OBJC_IVAR____TtC7Measure11LabelRender__input]
                                                              + 144);
  v19 = swift_retain();
  v18(&v295, v19);
  swift_release();
  v20 = v295;
  v21 = *(float32x2_t *)((char *)&v296 + 8);
  v22 = *(float *)&v297;
  swift_bridgeObjectRelease(v296);
  swift_bridgeObjectRelease(*((_QWORD *)&v20 + 1));
  swift_bridgeObjectRelease(v20);
  type metadata accessor for MeasureCamera(0);
  v23.n128_f64[0] = simd_float4x4.position.getter(v288, v291, v290, v289);
  v24 = *(double *)(a1 + 16);
  v278 = *(int8x16_t *)(a1 + 32);
  v277 = *(int8x16_t *)(a1 + 48);
  v276 = *(int8x16_t *)(a1 + 64);
  v275 = *(int8x16_t *)(a1 + 80);
  v26 = *(__n128 *)(a1 + 160);
  v25 = *(__n128 *)(a1 + 176);
  v27 = *(__n128 *)(a1 + 192);
  v28 = *(__n128 *)(a1 + 208);
  v269 = *(__n128 *)(a1 + 224);
  v268 = *(int8x16_t *)(a1 + 240);
  v267 = *(int8x16_t *)(a1 + 256);
  v266 = *(__n128 *)(a1 + 272);
  v282 = *(__n128 *)(a1 + 320);
  v281 = *(__n128 *)(a1 + 336);
  v280 = *(__n128 *)(a1 + 352);
  v279 = *(__n128 *)(a1 + 368);
  v287 = v26;
  v286 = v25;
  v284 = v27;
  v283 = v28;
  v30 = static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)(v29, v23, v26, v25, v27, v28, v24);
  SCNVector3.init(_:)(v30);
  v32 = v31;
  v34 = v33;
  v36 = v35;
  v293 = __PAIR64__(LODWORD(v33), LODWORD(v31));
  v294 = v35;
  v37 = (__n128 *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_end2];
  v38.n128_f64[0] = simd_float4x4.position.getter(*(__n128 *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_end2], *(__n128 *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_end2 + 16], *(__n128 *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_end2 + 32], *(__n128 *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_end2 + 48]);
  v274 = v38;
  v40 = COERCE_FLOAT(static MeasureCamera.viewSpacePoint(fromWorldSpace:view:)(*(double *)&v38, *(__n128 *)&v278, *(__n128 *)&v277, *(__n128 *)&v276, *(__n128 *)&v275).n128_u32[2]);
  v41 = v274;
  if (v40 >= 0.0)
    v41.n128_f64[0] = simd_float4x4.position.getter(*(__n128 *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_end1], *(__n128 *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_end1 + 16], *(__n128 *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_end1 + 32], *(__n128 *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_end1 + 48]);
  v42 = static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)(v39, v41, v287, v286, v284, v283, v24);
  SCNVector3.init(_:)(v42);
  v46 = v43;
  v47 = v44;
  v48 = v45;
  v273 = v5;
  if (v40 < 0.0)
  {
    v46 = v32;
    v47 = v34;
    v48 = v36;
  }
  else
  {
    v43 = v32;
    v44 = v34;
    v45 = v36;
  }
  v49 = - infix(_:_:)(v43, v44, v45, v46, v47, v48);
  v51 = atan2f(-v50, -*(float *)&v49);
  v52 = OBJC_IVAR____TtC7Measure11LabelRender_state;
  v53 = *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_state];
  v54 = &_sSo7UIColorC17MeasureFoundationE4argbABs6UInt32V_tcfC_ptr;
  if (v53 <= 7 && ((1 << v53) & 0x98) != 0
    || (v1[OBJC_IVAR____TtC7Measure11LabelRender_capturing] & 1) != 0
    || objc_msgSend((id)objc_opt_self(Gestalt), "jasperAvailable")
    && v1[OBJC_IVAR____TtC7Measure11LabelRender_movesAlongLine] == 1)
  {
    v55.n128_f64[0] = SIMD3<>.init(_:)(v32);
    sub_1000B32C0((__n128 *)a1, v55);
    SCNVector3.init(_:)(*(double *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_placingLabelDesiredOffset]);
    += infix(_:_:)(&v293);
  }
  v57 = *(_QWORD *)&v1[v52];
  if ((v57 > 7 || ((1 << v57) & 0x98) == 0)
    && (v1[OBJC_IVAR____TtC7Measure11LabelRender_capturing] & 1) == 0
    && objc_msgSend((id)objc_opt_self(Gestalt), "jasperAvailable"))
  {
    v96 = v9;
    v97 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v98 = objc_msgSend(v97, "isLabelOcclusionEnabled");

    if (v98)
    {
      v9 = v96;
      v54 = &_sSo7UIColorC17MeasureFoundationE4argbABs6UInt32V_tcfC_ptr;
      if (v2[OBJC_IVAR____TtC7Measure11LabelRender_movesAlongLine] != 1)
        goto LABEL_15;
      if (vaddv_f32(vmul_f32(*(float32x2_t *)&v2[OBJC_IVAR____TtC7Measure11LabelRender_placingLabelDesiredOffset], *(float32x2_t *)&v2[OBJC_IVAR____TtC7Measure11LabelRender_placingLabelDesiredOffset])) >= 0.00000011921)
      {
        v56.n128_u64[0] = v293;
        v291 = v56;
        v56.n128_u32[2] = 1.0;
        v224.n128_f64[0] = static MeasureCamera.unprojectPoint(_:viewProjectionInv:viewportSize:)(v56);
        v274 = v224;
        v225 = v291;
        v225.n128_u32[2] = 0;
        v226.n128_f64[0] = static MeasureCamera.unprojectPoint(_:viewProjectionInv:viewportSize:)(v225);
        v269 = v226;
        v227 = (__n128 *)&v2[OBJC_IVAR____TtC7Measure11LabelRender_end1];
        v228 = *(__n128 *)&v2[OBJC_IVAR____TtC7Measure11LabelRender_end1 + 16];
        v229 = *(__n128 *)&v2[OBJC_IVAR____TtC7Measure11LabelRender_end1 + 32];
        v230 = *(__n128 *)&v2[OBJC_IVAR____TtC7Measure11LabelRender_end1 + 48];
        v291 = *(__n128 *)&v2[OBJC_IVAR____TtC7Measure11LabelRender_end1];
        v290 = v228;
        v289 = v229;
        v288 = v230;
        v231.n128_f64[0] = simd_float4x4.position.getter(v291, v228, v229, v230);
        v268 = (int8x16_t)v231;
        v232 = v37[1];
        v233 = v37[2];
        v234 = v37[3];
        v278 = *(int8x16_t *)v37;
        v277 = (int8x16_t)v232;
        v276 = (int8x16_t)v233;
        v275 = (int8x16_t)v234;
        v235.n128_f64[0] = simd_float4x4.position.getter((__n128)v278, v232, v233, v234);
        lineIntersection(line1P1:line1P2:line2P1:line2P2:)((__n128)v268, v235, v274, v269);
        v121 = 0;
        if (v236 > 0.0 && v236 < 1.0 && v237 > 0.0 && v237 < 1.0)
        {
          v238.n128_f64[0] = sub_1000B0AFC(v291, v290, v289, v288, (__n128)v278, (__n128)v277, (__n128)v276, (__n128)v275, v236);
          v291 = v238;
          v290 = v239;
          v289 = v240;
          v288 = v241;
          *(double *)v242.i64 = simd_float4x4.position.getter(v238, v239, v240, v241);
          v278 = v242;
          v243 = v227[1];
          v277 = *(int8x16_t *)v227;
          v276 = (int8x16_t)v243;
          v244 = v227[3];
          v275 = (int8x16_t)v227[2];
          v274 = v244;
          *(double *)v245.i64 = simd_float4x4.position.getter((__n128)v277, v243, (__n128)v275, v244);
          v246 = vsubq_f32((float32x4_t)v278, v245);
          v247 = vmulq_f32(v246, v246);
          v248 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v247, 2), vaddq_f32(v247, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v247.f32, 1)));
          v248.f32[0] = sqrtf(v248.f32[0]);
          v269 = (__n128)v248;
          v249 = v37[1];
          v268 = *(int8x16_t *)v37;
          v267 = (int8x16_t)v249;
          v250 = v37[3];
          v266 = v37[2];
          v265 = (int8x16_t)v250;
          *(double *)v251.i64 = simd_float4x4.position.getter((__n128)v268, v249, v266, v250);
          v252 = vsubq_f32((float32x4_t)v278, v251);
          v253 = vmulq_f32(v252, v252);
          v254 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v253, 2), vaddq_f32(v253, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v253.f32, 1)));
          v254.f32[0] = sqrtf(v254.f32[0]);
          v255 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v254, (float32x4_t)v269), 0);
          v278 = vbslq_s8(v255, v277, v268);
          v277 = vbslq_s8(v255, v276, v267);
          v276 = vbslq_s8(v255, v275, (int8x16_t)v266);
          v275 = vbslq_s8(v255, (int8x16_t)v274, v265);
          v121 = 1;
        }
      }
      else
      {
        *(double *)&v99 = COERCE_DOUBLE(sub_1000B33E8((__n128 *)a1));
        if ((v101 & 1) != 0
          || (v102 = *(double *)&v99,
              v103 = v100,
              v104 = (double *)&v2[OBJC_IVAR____TtC7Measure11LabelRender_labelSafeArea],
              v105 = SIMD2<>.init(_:)(*(double *)&v2[OBJC_IVAR____TtC7Measure11LabelRender_labelSafeArea], *(double *)&v2[OBJC_IVAR____TtC7Measure11LabelRender_labelSafeArea + 8]), v106 = SIMD2<>.init(_:)(v104[2], v104[3]), v107 = COERCE_DOUBLE(clipLineToRect(rectOrigin:rectSize:lineP1:lineP2:)(v105, v106, v102, v103)), (v109 & 1) != 0))
        {
          v121 = 0;
          v291 = *(__n128 *)&v2[OBJC_IVAR____TtC7Measure11LabelRender_end1];
          v290 = *(__n128 *)&v2[OBJC_IVAR____TtC7Measure11LabelRender_end1 + 16];
          v289 = *(__n128 *)&v2[OBJC_IVAR____TtC7Measure11LabelRender_end1 + 32];
          v288 = *(__n128 *)&v2[OBJC_IVAR____TtC7Measure11LabelRender_end1 + 48];
          v278 = *(int8x16_t *)v37;
          v277 = (int8x16_t)v37[1];
          v276 = (int8x16_t)v37[2];
          v275 = (int8x16_t)v37[3];
        }
        else
        {
          v110 = v108;
          v291 = *(__n128 *)&v2[OBJC_IVAR____TtC7Measure11LabelRender_end1];
          v290 = *(__n128 *)&v2[OBJC_IVAR____TtC7Measure11LabelRender_end1 + 16];
          v289 = *(__n128 *)&v2[OBJC_IVAR____TtC7Measure11LabelRender_end1 + 32];
          v288 = *(__n128 *)&v2[OBJC_IVAR____TtC7Measure11LabelRender_end1 + 48];
          v111.n128_f64[0] = sub_1000B3738(v107);
          v112.n128_f64[0] = simd_float4x4.translated(to:)(v111, v291, v290, v289, v288);
          v291 = v112;
          v290 = v113;
          v289 = v114;
          v288 = v115;
          v278 = *(int8x16_t *)v37;
          v277 = (int8x16_t)v37[1];
          v276 = (int8x16_t)v37[2];
          v275 = (int8x16_t)v37[3];
          v116.n128_f64[0] = sub_1000B3738(v110);
          *(double *)v117.i64 = simd_float4x4.translated(to:)(v116, (__n128)v278, (__n128)v277, (__n128)v276, (__n128)v275);
          v278 = v117;
          v277 = (int8x16_t)v118;
          v276 = v119;
          v275 = v120;
          v121 = 0;
        }
      }
      ariadne_trace(_:_:_:_:_:)(727056592, 0, 0, 0, 0);
      sub_1000B3868((__n128 *)a1, v121, v291, v290, v289, v288, (__n128)v278, (__n128)v277, (__n128)v276, (__n128)v275);
      v288 = v256;
      v291 = v257;
      v290 = v258;
      v289 = v259;
      ariadne_trace(_:_:_:_:_:)(727056596, 0, 0, 0, 0);
      v260.n128_f64[0] = simd_float4x4.position.getter(v288, v291, v290, v289);
      v262 = static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)(v261, v260, v287, v286, v284, v283, v24);
      SCNVector3.init(_:)(v262);
      v293 = __PAIR64__(v263, v56.n128_u32[0]);
      v294 = v264;
    }
    else
    {
      v9 = v96;
    }
    v54 = &_sSo7UIColorC17MeasureFoundationE4argbABs6UInt32V_tcfC_ptr;
  }
LABEL_15:
  v56.n128_u64[0] = v293;
  v287 = v56;
  v58.n128_f64[0] = sub_1000B3738(*(double *)&v293);
  v286 = v58;
  *(double *)v59.i64 = simd_float4x4.position.getter(v282, v281, v280, v279);
  v60 = vsubq_f32(v59, (float32x4_t)v286);
  v61 = vmulq_f32(v60, v60);
  v62 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v61, 2), vaddq_f32(v61, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v61.f32, 1))).f32[0]);
  v63 = (float)((float)(1.0 / (float)((float)(v62 * 1.2) + 0.7)) + 0.5);
  v64 = 1.0;
  if ((*(_QWORD *)&v63 & 0xFFFFFFFFFFFFFLL) == 0)
    v64 = (float)((float)(1.0 / (float)((float)(v62 * 1.2) + 0.7)) + 0.5);
  if ((~*(_QWORD *)&v63 & 0x7FF0000000000000) != 0)
    v65 = (float)((float)(1.0 / (float)((float)(v62 * 1.2) + 0.7)) + 0.5);
  else
    v65 = v64;
  v286.n128_u64[0] = OBJC_IVAR____TtC7Measure11LabelRender_inBounds;
  v2[OBJC_IVAR____TtC7Measure11LabelRender_inBounds] = 0;
  v66 = (void *)objc_opt_self(v54[284]);
  v68 = &unk_100481000;
  if (objc_msgSend(v66, "jasperAvailable"))
  {
    v69 = (float64x2_t *)&v2[OBJC_IVAR____TtC7Measure11LabelRender_screenPoint];
    *v69 = vcvtq_f64_f32((float32x2_t)v287.n128_u64[0]);
    LOBYTE(v69[1].f64[0]) = 0;
    v70 = v285;
    if (v36 < 1.0)
    {
      if (v2[OBJC_IVAR____TtC7Measure11LabelRender_selectionState])
      {
        if (*(_QWORD *)&v2[v52] != 3)
        {
          Strong = swift_unknownObjectWeakLoadStrong(&v2[OBJC_IVAR____TtC7Measure11LabelRender_delegate], v67);
          if (Strong)
          {
            v73 = Strong;
            v284.n128_u64[0] = v9;
            v74 = *(_QWORD *)&v2[OBJC_IVAR____TtC7Measure11LabelRender_measurementID + 8];
            v282.n128_u64[0] = *(_QWORD *)&v2[OBJC_IVAR____TtC7Measure11LabelRender_measurementID];
            v75 = swift_unknownObjectWeakLoadStrong(Strong + OBJC_IVAR____TtC7Measure9LabelView_delegate, v72);
            if (v75)
            {
              v76 = v75;
              v281.n128_u64[0] = v74;
              v77 = v4;
              v78 = *(uint64_t (**)(__n128))(**(_QWORD **)(v75 + 104) + 200);
              v79 = swift_retain();
              v80 = v78(v79);
              v4 = v77;
              v283.n128_u64[0] = v80;
              swift_release();
              v81 = swift_allocObject(&unk_100444680, 64, 7);
              *(_QWORD *)(v81 + 16) = v282.n128_u64[0];
              v82 = v281.n128_u64[0];
              *(_QWORD *)(v81 + 24) = v281.n128_u64[0];
              *(_OWORD *)(v81 + 32) = 0u;
              *(_OWORD *)(v81 + 48) = 0u;
              v282.n128_u64[0] = *(_QWORD *)(*(_QWORD *)v283.n128_u64[0] + 280);
              swift_bridgeObjectRetain(v82);
              ((void (*)(uint64_t (*)(), uint64_t))v282.n128_u64[0])(sub_1000C241C, v81);
              swift_unknownObjectRelease(v73);
              swift_unknownObjectRelease(v76);
              swift_release();
              v70 = v285;
              swift_release();
            }
            else
            {
              swift_unknownObjectRelease(v73);
            }
            v9 = v284.n128_u64[0];
          }
        }
      }
      goto LABEL_47;
    }
  }
  else
  {
    v83 = objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC7Measure11LabelRender_labelNode], "isHidden");
    v70 = v285;
    if (v83)
    {
      if (v36 < 1.0)
      {
        v84 = OBJC_IVAR____TtC7Measure11LabelRender_selectionState;
        if (v2[OBJC_IVAR____TtC7Measure11LabelRender_selectionState])
        {
          v85 = swift_unknownObjectWeakLoadStrong(&v2[OBJC_IVAR____TtC7Measure11LabelRender_delegate], v67);
          if (v85)
          {
            v87 = v85;
            v284.n128_u64[0] = v9;
            v270 = v4;
            v88 = *(_QWORD *)&v2[OBJC_IVAR____TtC7Measure11LabelRender_measurementID];
            v282.n128_u64[0] = *(_QWORD *)&v2[OBJC_IVAR____TtC7Measure11LabelRender_measurementID + 8];
            v89 = swift_unknownObjectWeakLoadStrong(v85 + OBJC_IVAR____TtC7Measure9LabelView_delegate, v86);
            if (v89)
            {
              v90 = v89;
              v281.n128_u64[0] = v84;
              v91 = *(uint64_t (**)(__n128))(**(_QWORD **)(v89 + 104) + 200);
              v92 = swift_retain();
              v283.n128_u64[0] = v91(v92);
              swift_release();
              v93 = swift_allocObject(&unk_100444658, 64, 7);
              *(_QWORD *)(v93 + 16) = v88;
              v94 = v282.n128_u64[0];
              *(_QWORD *)(v93 + 24) = v282.n128_u64[0];
              *(_OWORD *)(v93 + 32) = 0u;
              *(_OWORD *)(v93 + 48) = 0u;
              v95 = *(void (**)(uint64_t (*)(), uint64_t))(*(_QWORD *)v283.n128_u64[0] + 280);
              swift_bridgeObjectRetain(v94);
              v95(sub_1000C241C, v93);
              v84 = v281.n128_u64[0];
              swift_unknownObjectRelease(v87);
              swift_unknownObjectRelease(v90);
              swift_release();
              v70 = v285;
              swift_release();
            }
            else
            {
              swift_unknownObjectRelease(v87);
            }
            v4 = v270;
            v9 = v284.n128_u64[0];
          }
          if (v2[v84] == 2)
            goto LABEL_101;
        }
        goto LABEL_47;
      }
    }
    else if (v36 < 1.0)
    {
      goto LABEL_47;
    }
  }
  if ((v2[OBJC_IVAR____TtC7Measure11LabelRender_selectionState] | 2) != 3)
  {
    v200 = swift_unknownObjectWeakLoadStrong(&v2[OBJC_IVAR____TtC7Measure11LabelRender_delegate], v67);
    if (v200)
    {
      v202 = v200;
      v204 = *(_QWORD *)&v2[OBJC_IVAR____TtC7Measure11LabelRender_measurementID];
      v203 = *(_QWORD *)&v2[OBJC_IVAR____TtC7Measure11LabelRender_measurementID + 8];
      v205 = swift_unknownObjectWeakLoadStrong(v200 + OBJC_IVAR____TtC7Measure9LabelView_delegate, v201);
      if (v205)
      {
        v206 = v205;
        v207 = *(uint64_t (**)(__n128))(**(_QWORD **)(v205 + 104) + 200);
        v208 = swift_retain();
        v209 = v207(v208);
        swift_release();
        v210 = swift_allocObject(&unk_100444630, 64, 7);
        *(_QWORD *)(v210 + 16) = v204;
        *(_QWORD *)(v210 + 24) = v203;
        *(_OWORD *)(v210 + 32) = 0u;
        *(_OWORD *)(v210 + 48) = 0u;
        v211 = *(void (**)(uint64_t (*)(), uint64_t))(*(_QWORD *)v209 + 280);
        swift_bridgeObjectRetain(v203);
        v211(sub_1000C241C, v210);
        swift_unknownObjectRelease(v202);
        swift_unknownObjectRelease(v206);
        v68 = &unk_100481000;
        swift_release();
        swift_release();
      }
      else
      {
        swift_unknownObjectRelease(v202);
      }
    }
    objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC7Measure11LabelRender_labelNode], "setHidden:", 1);
    goto LABEL_87;
  }
LABEL_47:
  if (!objc_msgSend(v66, "jasperAvailable")
    || (v122 = (os_unfair_lock_s *)&v2[OBJC_IVAR____TtC7Measure11LabelRender_labelLock],
        swift_beginAccess(&v2[OBJC_IVAR____TtC7Measure11LabelRender_labelLock], &v295, 33, 0),
        os_unfair_lock_lock(v122),
        v123 = v2[OBJC_IVAR____TtC7Measure11LabelRender__visibleForCapture],
        os_unfair_lock_unlock(v122),
        swift_endAccess(&v295),
        (v123 & 1) == 0))
  {
    v124 = sub_1000B4704();
    if (v124 || !v2[OBJC_IVAR____TtC7Measure11LabelRender_selectionState])
      objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC7Measure11LabelRender_labelNode], "setHidden:", v124);
  }
  sub_1000AE9C8();
  v125 = &unk_100481000;
  if ((v2[OBJC_IVAR____TtC7Measure11LabelRender_capturing] & 1) == 0)
  {
    objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC7Measure11LabelRender_labelContainer], "size");
    v127 = v65 * v126 * 0.5;
    if (v22 > v127)
      v127 = v22;
    v128 = vsub_f32((float32x2_t)v287.n128_u64[0], v21);
    v129 = vaddv_f32(vmul_f32(v128, v128)) < (float)(v127 * v127) && *(_QWORD *)&v2[v52] != 1;
    v2[v286.n128_u64[0]] = v129;
  }
  v130 = v287.n128_f32[1];
  sub_1000B477C(-v51);
  v132 = fabsf(v131);
  v134 = *(float *)Float.piDiv2.unsafeMutableAddressor(v133);
  v270 = v4;
  if ((float)(v134 + (float)(v134 * 0.1)) < v132)
  {
    v135 = 1078530010;
LABEL_62:
    *(_DWORD *)&v2[OBJC_IVAR____TtC7Measure11LabelRender_screenAngleOffset] = v135;
    goto LABEL_63;
  }
  v136 = v134 - (float)(v134 * 0.1);
  v135 = 0;
  if (v132 < v136)
    goto LABEL_62;
LABEL_63:
  v137 = v287.n128_f32[0];
  v138 = v130;
  v139 = (float)(*(float *)&v2[OBJC_IVAR____TtC7Measure11LabelRender_screenAngleOffset] - v51);
  v140 = OBJC_IVAR____TtC7Measure11LabelRender_labelNode;
  objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC7Measure11LabelRender_labelNode], "setZRotation:", v139);
  objc_msgSend(*(id *)&v2[v140], "setScale:", v65);
  v141 = *(void **)&v2[OBJC_IVAR____TtC7Measure11LabelRender_labelText];
  v142 = (void *)objc_opt_self(UIScreen);
  v143 = v141;
  v144 = objc_msgSend(v142, "mainScreen");
  objc_msgSend(v144, "scale");
  v146 = v145;

  objc_msgSend(v143, "setScale:", 1.0 / v146);
  if ((v2[OBJC_IVAR____TtC7Measure11LabelRender_viewBounds + 16] & 1) == 0)
    objc_msgSend(*(id *)&v2[v140], "setPosition:", v137, *(double *)&v2[OBJC_IVAR____TtC7Measure11LabelRender_viewBounds + 8] - v138);
  sub_1000B48CC(v62);
  v148 = 0.0;
  if ((v2[v286.n128_u64[0]] & 1) != 0)
  {
    v149 = 0;
  }
  else
  {
    objc_msgSend(*(id *)&v2[v140], "alpha");
    v149 = 0;
    if (v150 >= 0.5)
    {
      objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC7Measure11LabelRender_labelContainer], "size");
      v148 = static CGSize.* infix(_:_:)(v151, v152, v65);
      v149 = v153;
    }
  }
  v154 = OBJC_IVAR____TtC7Measure11LabelRender_selectionState;
  if (!v2[OBJC_IVAR____TtC7Measure11LabelRender_selectionState])
  {
    v188 = swift_unknownObjectWeakLoadStrong(&v2[OBJC_IVAR____TtC7Measure11LabelRender_delegate], v147);
    if (v188)
    {
      v190 = v188;
      v284.n128_u64[0] = v9;
      v191 = *(_QWORD *)&v2[OBJC_IVAR____TtC7Measure11LabelRender_measurementID];
      v192 = *(_QWORD *)&v2[OBJC_IVAR____TtC7Measure11LabelRender_measurementID + 8];
      v193 = swift_unknownObjectWeakLoadStrong(v188 + OBJC_IVAR____TtC7Measure9LabelView_delegate, v189);
      if (v193)
      {
        v194 = v193;
        v195 = *(uint64_t (**)(__n128))(**(_QWORD **)(v193 + 104) + 200);
        v196 = swift_retain();
        v197 = v195(v196);
        swift_release();
        v198 = swift_allocObject(&unk_100444608, 64, 7);
        *(_QWORD *)(v198 + 16) = v191;
        *(_QWORD *)(v198 + 24) = v192;
        *(double *)(v198 + 32) = v148;
        *(_QWORD *)(v198 + 40) = v149;
        *(double *)(v198 + 48) = v137;
        *(double *)(v198 + 56) = v138;
        v199 = *(void (**)(uint64_t (*)(), uint64_t))(*(_QWORD *)v197 + 280);
        swift_bridgeObjectRetain(v192);
        v199(sub_1000C241C, v198);
        swift_unknownObjectRelease(v190);
        swift_unknownObjectRelease(v194);
        v70 = v285;
        swift_release();
        swift_release();
        v9 = v284.n128_u64[0];
        v125 = (_QWORD *)&unk_100481000;
      }
      else
      {
        swift_unknownObjectRelease(v190);
        v9 = v284.n128_u64[0];
      }
    }
  }
  v155 = (double *)&v2[OBJC_IVAR____TtC7Measure11LabelRender_currentProperties];
  *v155 = -v139;
  v155[1] = v65;
  v155[2] = v137;
  v155[3] = v138;
  v156 = v125[269];
  objc_msgSend(*(id *)&v2[v156], "size");
  *((_QWORD *)v155 + 5) = v157;
  *((_QWORD *)v155 + 6) = v158;
  objc_msgSend(*(id *)&v2[v156], "size");
  v155[4] = v159 * 0.5;
  v160 = *(_QWORD *)&v2[OBJC_IVAR____TtC7Measure11LabelRender_attributedText + 8];
  v161 = *((_QWORD *)v155 + 8);
  v155[7] = *(double *)&v2[OBJC_IVAR____TtC7Measure11LabelRender_attributedText];
  *((_QWORD *)v155 + 8) = v160;
  swift_bridgeObjectRetain(v160);
  swift_bridgeObjectRelease(v161);
  if ((v2[v154] | 2) == 3)
  {
    v162 = *((_OWORD *)v155 + 3);
    v297 = *((_OWORD *)v155 + 2);
    v298 = v162;
    v299 = *((_QWORD *)v155 + 8);
    v163 = *((_OWORD *)v155 + 1);
    v295 = *(_OWORD *)v155;
    v296 = v163;
    sub_100018148(0, (unint64_t *)&qword_10047FB70, OS_dispatch_queue_ptr);
    sub_1000A2ECC((uint64_t)&v295);
    v165 = (void *)static OS_dispatch_queue.main.getter(v164);
    v166 = swift_allocObject(&unk_1004445B8, 96, 7);
    v167 = v295;
    *(_OWORD *)(v166 + 40) = v296;
    v168 = v298;
    *(_OWORD *)(v166 + 56) = v297;
    *(_OWORD *)(v166 + 72) = v168;
    *(_QWORD *)(v166 + 16) = v2;
    *(_QWORD *)(v166 + 88) = v299;
    *(_OWORD *)(v166 + 24) = v167;
    aBlock[4] = sub_1000C23EC;
    aBlock[5] = v166;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10003ECA0;
    aBlock[3] = &unk_1004445D0;
    v169 = _Block_copy(aBlock);
    v170 = v2;
    v171 = swift_release();
    static DispatchQoS.unspecified.getter(v171);
    aBlock[0] = _swiftEmptyArrayStorage;
    v172 = sub_10000C4B0((unint64_t *)&qword_10047D7F0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v173 = v9;
    v174 = sub_10000EDC8((uint64_t *)&unk_10047E430);
    v175 = sub_100043310((unint64_t *)&qword_10047D800, (uint64_t *)&unk_10047E430, (uint64_t)&protocol conformance descriptor for [A]);
    v176 = v272;
    v177 = v270;
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v174, v175, v270, v172);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v70, v176, v169);
    _Block_release(v169);

    (*(void (**)(__int8 *, uint64_t))(v273 + 8))(v176, v177);
    (*(void (**)(__int8 *, uint64_t))(v173 + 8))(v70, v271);
  }
  v68 = (_QWORD *)&unk_100481000;
  if ((v2[v286.n128_u64[0]] & 1) == 0)
  {
    v300.x = *(float *)&v293;
    v300.y = *((float *)&v293 + 1);
    if (CGRectContainsPoint(*(CGRect *)&v2[OBJC_IVAR____TtC7Measure11LabelRender_labelSafeArea], v300)
      && v2[OBJC_IVAR____TtC7Measure11LabelRender_refined] == 1)
    {
      v179 = swift_unknownObjectWeakLoadStrong(&v2[OBJC_IVAR____TtC7Measure11LabelRender_delegate], v178);
      if (v179)
      {
        v181 = v179;
        v182 = swift_unknownObjectWeakLoadStrong(v179 + OBJC_IVAR____TtC7Measure9LabelView_delegate, v180);
        if (v182)
        {
          v183 = v182;
          v184 = *(uint64_t (**)(__n128))(**(_QWORD **)(v182 + 104) + 200);
          v185 = swift_retain();
          v186 = v184(v185);
          v187 = swift_release();
          (*(void (**)(double (*)(uint64_t), _QWORD, __n128))(*(_QWORD *)v186 + 280))(sub_100093308, 0, v187);
          swift_unknownObjectRelease(v181);
          swift_unknownObjectRelease(v183);
          swift_release();
        }
        else
        {
          swift_unknownObjectRelease(v181);
        }
      }
    }
  }
LABEL_87:
  if (!v2[OBJC_IVAR____TtC7Measure11LabelRender_selectionState]
    && (v2[OBJC_IVAR____TtC7Measure11LabelRender_capturing] & 1) == 0)
  {
    v212 = 0.0;
    if ((v2[v286.n128_u64[0]] & 1) == 0)
      v212 = *(double *)&v2[OBJC_IVAR____TtC7Measure11LabelRender_desiredAlpha];
    v213 = v68[267];
    objc_msgSend(*(id *)&v2[v213], "alpha");
    if (vabdd_f64(v212, v214) > 0.01)
    {
      v215 = objc_msgSend((id)objc_opt_self(SKAction), "fadeAlphaTo:duration:", v212, 0.1);
      objc_msgSend(*(id *)&v2[v213], "runAction:", v215);

    }
  }
  v216 = &v2[OBJC_IVAR____TtC7Measure11LabelRender_labelSizeAdjustment];
  v217 = swift_beginAccess(&v2[OBJC_IVAR____TtC7Measure11LabelRender_labelSizeAdjustment], aBlock, 33, 0);
  if (*(_QWORD *)v216)
  {
    if (v216[24] == 1)
    {
      (*(void (**)(__n128))v216)(v217);
      *((_WORD *)v216 + 12) = 256;
    }
    else if ((v216[25] & 1) == 0)
    {
      v218 = *((_QWORD *)v216 + 2);
      v219 = v218 != 0;
      v220 = v218 - 1;
      if (!v219)
      {
        __break(1u);
        return;
      }
      *((_QWORD *)v216 + 2) = v220;
      v216[24] = v220 == 0;
    }
  }
  swift_endAccess(aBlock);
LABEL_101:
  v2[OBJC_IVAR____TtC7Measure11LabelRender_refined] = 0;
  v221 = (__n128 *)&v2[OBJC_IVAR____TtC7Measure11LabelRender_lastTransform];
  v222 = v291;
  *v221 = v288;
  v221[1] = v222;
  v223 = v289;
  v221[2] = v290;
  v221[3] = v223;
}

void sub_1000B25E8()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(_QWORD *__return_ptr, __n128);
  __n128 v3;
  double v4;
  void (*v5)(_QWORD *__return_ptr, __n128);
  __n128 v6;
  double v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  CGFloat v13;
  CGFloat v14;
  uint64_t v15;
  double v16;
  void (*v17)(_QWORD *__return_ptr, __n128);
  __n128 v18;
  double v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  double v32;
  CGFloat v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  double v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  CGFloat v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  double Width;
  double v50;
  double v51;
  double v52;
  double v53;
  CGFloat v54;
  double v55;
  uint64_t v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  uint64_t v67;
  double v73;
  uint64_t v74;
  double v75;
  double v76;
  uint64_t v77;
  double v78;
  double v79;
  double v80;
  uint64_t v81;
  double v82;
  uint64_t v83;
  double v84;
  double v85;
  double v86;
  double v87;
  CGFloat v88;
  CGFloat v89;
  _QWORD v90[5];
  char v91;
  CGRect v92;
  CGRect v93;
  CGRect v94;
  CGRect v95;
  CGRect v96;
  CGRect v97;
  CGRect v98;
  CGRect v99;
  CGRect v100;
  CGRect v101;
  CGRect v102;
  CGRect v103;
  CGRect v104;
  CGRect v105;
  CGRect v106;
  CGRect v107;
  CGRect v108;
  CGRect v109;
  CGRect v110;
  CGRect v111;

  v1 = v0;
  sub_100018148(0, (unint64_t *)&qword_10047E560, UIDevice_ptr);
  if ((static UIDevice.isIPad()() & 1) == 0)
  {
    v17 = *(void (**)(_QWORD *__return_ptr, __n128))(**(_QWORD **)(v0
                                                                            + OBJC_IVAR____TtC7Measure11LabelRender__orientationState)
                                                              + 144);
    v18 = swift_retain();
    v17(v90, v18);
    swift_release();
    if ((unint64_t)(v90[0] - 3) >= 2)
    {
      if (v90[0] != 1)
      {
        v46 = v0 + OBJC_IVAR____TtC7Measure11LabelRender_labelSafeArea;
        v110.origin.x = 0.0;
        v110.origin.y = 0.0;
        v110.size.width = 0.0;
        v110.size.height = 0.0;
        if (!CGRectEqualToRect(*(CGRect *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelSafeArea), v110))
          return;
        if (qword_10047ADE0 != -1)
          swift_once(&qword_10047ADE0, sub_100195900);
        v47 = *(double *)&qword_1004AF8C8;
        v48 = OBJC_IVAR____TtC7Measure11LabelRender_labelContainer;
        objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelContainer), "frame");
        Width = CGRectGetWidth(v102);
        v50 = *(double *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_editViewBounds + 8);
        if (qword_10047AEA8 != -1)
          swift_once(&qword_10047AEA8, sub_100196150);
        v51 = *(double *)&qword_1004AF9A0;
        objc_msgSend(*(id *)(v1 + v48), "frame");
        v52 = CGRectGetWidth(v103);
        if (qword_10047B190 != -1)
          swift_once(&qword_10047B190, sub_1001C81CC);
        if ((*(_BYTE *)(qword_1004AFD08 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 80) & 1) == 0)
        {
          v53 = v47 + 47.0 + Width * 0.5;
          v54 = CGRectGetWidth(*(CGRect *)(qword_1004AFD08 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 48));
          *(_QWORD *)v46 = 0x403E000000000000;
          *(double *)(v46 + 8) = v53;
          *(CGFloat *)(v46 + 16) = v54 + -60.0;
          *(double *)(v46 + 24) = v50 - v53 - v51 + v52 * -0.5;
          return;
        }
LABEL_83:
        __break(1u);
LABEL_84:
        __break(1u);
LABEL_85:
        __break(1u);
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
LABEL_88:
        __break(1u);
LABEL_89:
        __break(1u);
LABEL_90:
        __break(1u);
LABEL_91:
        __break(1u);
LABEL_92:
        __break(1u);
LABEL_93:
        __break(1u);
        JUMPOUT(0x1000B32B0);
      }
      if (qword_10047ADE0 != -1)
        swift_once(&qword_10047ADE0, sub_100195900);
      v19 = *(double *)&qword_1004AF8C8;
      v42 = OBJC_IVAR____TtC7Measure11LabelRender_labelContainer;
      objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelContainer), "frame");
      v21 = CGRectGetWidth(v100);
      v22 = *(double *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_editViewBounds + 8);
      if (qword_10047AEA8 != -1)
        swift_once(&qword_10047AEA8, sub_100196150);
      v23 = *(double *)&qword_1004AF9A0;
      objc_msgSend(*(id *)(v1 + v42), "frame");
      v24 = CGRectGetWidth(v101);
      if (qword_10047B190 != -1)
        swift_once(&qword_10047B190, sub_1001C81CC);
      v25 = qword_1004AFD08 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits;
      if ((*(_BYTE *)(qword_1004AFD08 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 80) & 1) == 0)
      {
        v26 = 47.0;
        goto LABEL_32;
      }
    }
    else
    {
      if (qword_10047ADE0 != -1)
        swift_once(&qword_10047ADE0, sub_100195900);
      v19 = *(double *)&qword_1004AF8C8;
      v20 = OBJC_IVAR____TtC7Measure11LabelRender_labelContainer;
      objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelContainer), "frame");
      v21 = CGRectGetWidth(v94);
      v22 = *(double *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_editViewBounds + 8);
      if (qword_10047AEA8 != -1)
        swift_once(&qword_10047AEA8, sub_100196150);
      v23 = *(double *)&qword_1004AF9A0;
      objc_msgSend(*(id *)(v1 + v20), "frame");
      v24 = CGRectGetWidth(v95);
      if (qword_10047B190 != -1)
        swift_once(&qword_10047B190, sub_1001C81CC);
      v25 = qword_1004AFD08 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits;
      if ((*(_BYTE *)(qword_1004AFD08 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 80) & 1) == 0)
      {
        v26 = 80.0;
LABEL_32:
        v43 = v19 + v26 + v21 * 0.5;
        v44 = CGRectGetWidth(*(CGRect *)(v25 + 48));
        v45 = v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelSafeArea;
        *(_QWORD *)v45 = 0x403E000000000000;
        *(double *)(v45 + 8) = v43;
        *(CGFloat *)(v45 + 16) = v44 + -60.0;
        *(double *)(v45 + 24) = v22 - v43 - v23 + v24 * -0.5;
        return;
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_83;
  }
  v2 = *(void (**)(_QWORD *__return_ptr, __n128))(**(_QWORD **)(v0
                                                                         + OBJC_IVAR____TtC7Measure11LabelRender__pointMove)
                                                           + 144);
  v3 = swift_retain();
  v2(v90, v3);
  *(_QWORD *)&v4 = swift_release().n128_u64[0];
  if ((v91 & 1) != 0)
  {
    v5 = *(void (**)(_QWORD *__return_ptr, __n128))(**(_QWORD **)(v0
                                                                           + OBJC_IVAR____TtC7Measure11LabelRender__orientationState)
                                                             + 144);
    v6 = swift_retain();
    v5(v90, v6);
    swift_release();
    switch(v90[0])
    {
      case 1:
        if (qword_10047ADE0 != -1)
          swift_once(&qword_10047ADE0, sub_100195900);
        v7 = *(double *)&qword_1004AF8C8;
        v8 = OBJC_IVAR____TtC7Measure11LabelRender_labelContainer;
        objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_labelContainer), "frame");
        v9 = CGRectGetWidth(v92);
        if (qword_10047B190 != -1)
          swift_once(&qword_10047B190, sub_1001C81CC);
        if ((*(_BYTE *)(qword_1004AFD08 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 80) & 1) != 0)
          goto LABEL_84;
        v10 = CGRectGetWidth(*(CGRect *)(qword_1004AFD08 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 48));
        if (qword_10047AEA8 != -1)
          swift_once(&qword_10047AEA8, sub_100196150);
        if ((*(_BYTE *)(qword_1004AFD08 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 80) & 1) != 0)
          goto LABEL_85;
        v11 = v7 + 47.0 + v9 * 0.5;
        v12 = v10 + -60.0 - *(double *)&qword_1004AF9A0;
        v13 = CGRectGetHeight(*(CGRect *)(qword_1004AFD08 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 48))
            + -47.0
            - (*(double *)&qword_1004AF8C8
             + *(double *)&qword_1004AF8C8);
        objc_msgSend(*(id *)(v0 + v8), "frame");
        v14 = CGRectGetWidth(v93);
        v15 = v0 + OBJC_IVAR____TtC7Measure11LabelRender_labelSafeArea;
        *(_QWORD *)v15 = 0x403E000000000000;
        v16 = v13 - v14;
        *(double *)(v15 + 8) = v11;
        goto LABEL_69;
      case 2:
        if (qword_10047AEA8 != -1)
          swift_once(&qword_10047AEA8, sub_100196150);
        v55 = *(double *)&qword_1004AF9A0;
        if (qword_10047B190 != -1)
          swift_once(&qword_10047B190, sub_1001C81CC);
        v56 = qword_1004AFD08 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits;
        if ((*(_BYTE *)(qword_1004AFD08 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 80) & 1) != 0)
          goto LABEL_86;
        v57 = CGRectGetWidth(*(CGRect *)(v56 + 48));
        if ((*(_BYTE *)(v56 + 80) & 1) != 0)
          goto LABEL_87;
        v58 = v55 + 30.0;
        v12 = v57 + -60.0 - *(double *)&qword_1004AF9A0;
        v59 = CGRectGetHeight(*(CGRect *)(v56 + 48)) + -47.0;
        if (qword_10047ADE0 != -1)
          swift_once(&qword_10047ADE0, sub_100195900);
        v60 = v59 - (*(double *)&qword_1004AF8C8 + *(double *)&qword_1004AF8C8);
        objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_labelContainer), "frame");
        v16 = v60 - CGRectGetWidth(v104);
        v15 = v0 + OBJC_IVAR____TtC7Measure11LabelRender_labelSafeArea;
        *(double *)v15 = v58;
        *(_QWORD *)(v15 + 8) = 0x403E000000000000;
        goto LABEL_69;
      case 3:
        if (qword_10047B190 != -1)
          swift_once(&qword_10047B190, sub_1001C81CC);
        if ((*(_BYTE *)(qword_1004AFD08 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 80) & 1) != 0)
          goto LABEL_88;
        v61 = CGRectGetWidth(*(CGRect *)(qword_1004AFD08 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 48));
        if (qword_10047ADE0 != -1)
          swift_once(&qword_10047ADE0, sub_100195900);
        v62 = *(double *)&qword_1004AF8C8;
        objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_labelContainer), "frame");
        v63 = CGRectGetWidth(v105);
        if ((*(_BYTE *)(qword_1004AFD08 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 80) & 1) != 0)
          goto LABEL_89;
        v64 = v61 + -47.0 - (v62 + v62) - v63;
        v65 = CGRectGetHeight(*(CGRect *)(qword_1004AFD08 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 48))
            + -60.0;
        if (qword_10047AEA8 != -1)
          swift_once(&qword_10047AEA8, sub_100196150);
        v66 = v65 - *(double *)&qword_1004AF9A0;
        v67 = v0 + OBJC_IVAR____TtC7Measure11LabelRender_labelSafeArea;
        __asm { FMOV            V1.2D, #30.0 }
        *(_OWORD *)v67 = _Q1;
        *(double *)(v67 + 16) = v64;
        *(double *)(v67 + 24) = v66;
        return;
      case 4:
        if (qword_10047ADE0 != -1)
          swift_once(&qword_10047ADE0, sub_100195900);
        v73 = *(double *)&qword_1004AF8C8;
        v74 = OBJC_IVAR____TtC7Measure11LabelRender_labelContainer;
        objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_labelContainer), "frame");
        v75 = CGRectGetWidth(v106);
        if (qword_10047AEA8 != -1)
          swift_once(&qword_10047AEA8, sub_100196150);
        v76 = *(double *)&qword_1004AF9A0;
        if (qword_10047B190 != -1)
          swift_once(&qword_10047B190, sub_1001C81CC);
        v77 = qword_1004AFD08 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits;
        if ((*(_BYTE *)(qword_1004AFD08 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 80) & 1) != 0)
          goto LABEL_90;
        v78 = CGRectGetWidth(*(CGRect *)(v77 + 48));
        v79 = *(double *)&qword_1004AF8C8;
        objc_msgSend(*(id *)(v0 + v74), "frame");
        v80 = CGRectGetWidth(v107);
        if ((*(_BYTE *)(v77 + 80) & 1) != 0)
          goto LABEL_91;
        v12 = v78 + -47.0 - (v79 + v79) - v80;
        v16 = CGRectGetHeight(*(CGRect *)(v77 + 48)) + -60.0 - *(double *)&qword_1004AF9A0;
        v15 = v0 + OBJC_IVAR____TtC7Measure11LabelRender_labelSafeArea;
        *(double *)v15 = v73 + 47.0 + v75 * 0.5;
        *(double *)(v15 + 8) = v76 + 30.0;
LABEL_69:
        *(double *)(v15 + 16) = v12;
        *(double *)(v15 + 24) = v16;
        return;
      default:
        v81 = v0 + OBJC_IVAR____TtC7Measure11LabelRender_labelSafeArea;
        v111.origin.x = 0.0;
        v111.origin.y = 0.0;
        v111.size.width = 0.0;
        v111.size.height = 0.0;
        if (!CGRectEqualToRect(*(CGRect *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelSafeArea), v111))
          return;
        if (qword_10047ADE0 != -1)
          swift_once(&qword_10047ADE0, sub_100195900);
        v82 = *(double *)&qword_1004AF8C8;
        v83 = OBJC_IVAR____TtC7Measure11LabelRender_labelContainer;
        objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelContainer), "frame");
        v84 = CGRectGetWidth(v108);
        if (qword_10047B190 != -1)
          swift_once(&qword_10047B190, sub_1001C81CC);
        if ((*(_BYTE *)(qword_1004AFD08 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 80) & 1) != 0)
          goto LABEL_92;
        v85 = CGRectGetWidth(*(CGRect *)(qword_1004AFD08 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 48));
        if (qword_10047AEA8 != -1)
          swift_once(&qword_10047AEA8, sub_100196150);
        if ((*(_BYTE *)(qword_1004AFD08 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 80) & 1) != 0)
          goto LABEL_93;
        v86 = v82 + 47.0 + v84 * 0.5;
        v87 = v85 + -60.0 - *(double *)&qword_1004AF9A0;
        v88 = CGRectGetHeight(*(CGRect *)(qword_1004AFD08 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 48))
            + -47.0
            - (*(double *)&qword_1004AF8C8
             + *(double *)&qword_1004AF8C8);
        objc_msgSend(*(id *)(v1 + v83), "frame");
        v89 = CGRectGetWidth(v109);
        *(_QWORD *)v81 = 0x403E000000000000;
        *(double *)(v81 + 8) = v86;
        *(double *)(v81 + 16) = v87;
        *(CGFloat *)(v81 + 24) = v88 - v89;
        break;
    }
  }
  else
  {
    v27 = *(double *)&v90[1];
    v28 = *(double *)&v90[2];
    v29 = *(double *)&v90[3];
    v30 = *(double *)&v90[4];
    v31 = OBJC_IVAR____TtC7Measure11LabelRender_labelContainer;
    objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelContainer), "frame", v4);
    v32 = CGRectGetWidth(v96) * 0.5;
    objc_msgSend(*(id *)(v1 + v31), "frame");
    v33 = CGRectGetWidth(v97);
    v34 = static CGPoint.+ infix(_:_:)(v27, v28, v32, v33 * 0.5);
    v36 = v35;
    objc_msgSend(*(id *)(v1 + v31), "frame");
    v37 = CGRectGetWidth(v98);
    objc_msgSend(*(id *)(v1 + v31), "frame");
    v38 = CGRectGetWidth(v99);
    v39 = static CGSize.- infix(_:_:)(v29, v30, v37, v38);
    v40 = v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelSafeArea;
    *(double *)v40 = v34;
    *(_QWORD *)(v40 + 8) = v36;
    *(double *)(v40 + 16) = v39;
    *(_QWORD *)(v40 + 24) = v41;
  }
}

void sub_1000B32C0(__n128 *a1, __n128 a2)
{
  uint64_t v2;
  double *v4;
  int8x8_t v5;
  uint64_t v6;
  double v7;
  char v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  char v17;
  int8x8_t v18;
  int32x2_t v19;
  CGPoint v21;

  v4 = (double *)(v2 + OBJC_IVAR____TtC7Measure11LabelRender_labelSafeArea);
  v21.x = a2.n128_f32[0];
  v21.y = a2.n128_f32[1];
  v5 = 0;
  if (!CGRectContainsPoint(*(CGRect *)(v2 + OBJC_IVAR____TtC7Measure11LabelRender_labelSafeArea), v21))
  {
    *(double *)&v6 = COERCE_DOUBLE(sub_1000B33E8(a1));
    if ((v8 & 1) == 0)
    {
      v9 = *(double *)&v6;
      v10 = v7;
      v11 = *(double *)&v6;
      v12 = v7;
      v13 = SIMD2<>.init(_:)(*v4, v4[1]);
      v14 = SIMD2<>.init(_:)(v4[2], v4[3]);
      if ((lineInRect(rectOrigin:rectSize:lineP1:lineP2:)(v13, v14, v11, v12) & 1) != 0)
      {
        v15 = COERCE_DOUBLE(clipLineToRect(rectOrigin:rectSize:lineP1:lineP2:)(v13, v14, v9, v10));
        if ((v17 & 1) == 0)
        {
          v18 = (int8x8_t)vsub_f32(COERCE_FLOAT32X2_T(closestPointOnLine(lineP1:lineP2:point:)(v15, v16, a2)), (float32x2_t)a2.n128_u64[0]);
          v19 = vdup_n_s32(0x7F800000u);
          v5 = vbsl_s8((int8x8_t)vceq_s32((int32x2_t)vand_s8(v18, (int8x8_t)v19), v19), vand_s8(v18, (int8x8_t)vceqz_s32((int32x2_t)vand_s8(v18, (int8x8_t)0x7F0000007FLL))), v18);
        }
      }
    }
  }
  *(int8x8_t *)(v2 + OBJC_IVAR____TtC7Measure11LabelRender_placingLabelDesiredOffset) = v5;
}

uint64_t sub_1000B33E8(__n128 *a1)
{
  uint64_t v1;
  __n128 v3;
  __n128 v4;
  uint64_t v5;
  double v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  _BOOL4 v13;
  float v14;
  int8x16_t v15;
  uint64_t v16;
  double v17;
  float32x4_t v18;
  float v19;
  float v20;
  float32x2_t v21;
  float v22;
  float32x2_t v23;
  float v24;
  __n128 v25;
  float32x2_t v26;
  double v27;
  int32x2_t v28;
  int32x2_t v29;
  float32x2_t v30;
  float v31;
  __n128 v32;
  float v33;
  float v34;
  float32x4_t v36;
  int32x4_t v37;
  float32x2_t v38;
  float32x2_t v39;
  float v40;
  float32x2_t v41;
  float v42;
  __int128 v43;
  __int128 v44;
  __n128 v45;
  __n128 v46;
  __n128 v47;
  __n128 v48;
  __n128 v49;
  __n128 v50;
  __n128 v51;
  __n128 v52;
  __n128 v53;
  __n128 v54;

  v3.n128_f64[0] = simd_float4x4.position.getter(*(__n128 *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_end1), *(__n128 *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_end1 + 16), *(__n128 *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_end1 + 32), *(__n128 *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_end1 + 48));
  v54 = v3;
  v4.n128_f64[0] = simd_float4x4.position.getter(*(__n128 *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_end2), *(__n128 *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_end2 + 16), *(__n128 *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_end2 + 32), *(__n128 *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_end2 + 48));
  v53 = v4;
  v5 = type metadata accessor for MeasureCamera(0);
  v6 = a1[1].n128_f64[0];
  v45 = a1[10];
  v46 = a1[11];
  v47 = a1[12];
  v48 = a1[13];
  v51 = a1[21];
  v52 = a1[20];
  v50 = a1[22];
  v49 = a1[23];
  *(double *)&v7 = static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)(v5, v54, v45, v46, v47, v48, v6);
  v43 = v7;
  *(double *)&v10 = static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)(v8, v53, v45, v46, v47, v48, v6);
  v44 = v10;
  v11 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_state);
  v13 = v11 == 7 || (unint64_t)(v11 - 3) < 2;
  v14 = 30.0;
  if (!v13)
    v14 = 0.0;
  v40 = v14;
  *(double *)v15.i64 = simd_float4x4.forward.getter(v9);
  v42 = 0.0 - *(float *)v15.i32;
  v15.i32[0] = vextq_s8(v15, v15, 8uLL).u32[0];
  v41 = vsub_f32(0, *(float32x2_t *)v15.i8);
  v17 = simd_float4x4.position.getter(v52, v51, v50, v49);
  v20 = (float)((float)(v19 + (float)(0.1 * v41.f32[0])) * v41.f32[0])
      + (float)((float)(v42 * (float)(*(float *)&v17 + (float)(v42 * 0.1)))
              + vmuls_lane_f32(*((float *)&v17 + 1) + vmuls_lane_f32(0.1, v41, 1), v41, 1));
  v21 = vsub_f32((float32x2_t)v53.n128_u64[0], (float32x2_t)v54.n128_u64[0]);
  v22 = v53.n128_f32[2] - v54.n128_f32[2];
  if (*((float *)&v43 + 2) <= 1.0)
  {
    if (*((float *)&v44 + 2) <= 1.0)
    {
      v27 = *(double *)&v44;
    }
    else
    {
      v28 = (int32x2_t)vmul_f32((float32x2_t)__PAIR64__(v54.n128_u32[1], vextq_s8((int8x16_t)v54, (int8x16_t)v54, 8uLL).u32[0]), v41);
      v29 = (int32x2_t)vmul_f32((float32x2_t)__PAIR64__(v21.u32[1], LODWORD(v22)), v41);
      v30 = vadd_f32((float32x2_t)vzip1_s32(v28, v29), vadd_f32(vmul_n_f32((float32x2_t)vzip1_s32((int32x2_t)v54.n128_u64[0], (int32x2_t)v21), v42), (float32x2_t)vzip2_s32(v28, v29)));
      v31 = (float)(v20 - v30.f32[0]) / v30.f32[1];
      v32.n128_u64[0] = (unint64_t)vadd_f32((float32x2_t)v54.n128_u64[0], vmul_n_f32(v21, v31));
      v32.n128_f32[2] = v54.n128_f32[2] + (float)(v22 * v31);
      v32.n128_u32[3] = 0;
      v27 = static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)(v16, v32, v45, v46, v47, v48, v6);
    }
    v26 = (float32x2_t)v43;
  }
  else
  {
    if (*((float *)&v44 + 2) > 1.0)
      return 0;
    v23 = vmul_f32((float32x2_t)__PAIR64__(v53.n128_u32[1], vextq_s8((int8x16_t)v53, (int8x16_t)v53, 8uLL).u32[0]), v41);
    v24 = (float)(v20 - (float)(v23.f32[0] + (float)((float)(v53.n128_f32[0] * v42) + v23.f32[1])))
        / (float)((float)((float)(0.0 - v22) * v41.f32[0])
                + vaddv_f32(vmul_f32(vsub_f32(0, v21), (float32x2_t)__PAIR64__(v41.u32[1], LODWORD(v42)))));
    v25.n128_u64[0] = (unint64_t)vsub_f32((float32x2_t)v53.n128_u64[0], vmul_n_f32(v21, v24));
    v25.n128_f32[2] = v53.n128_f32[2] - (float)(v22 * v24);
    v25.n128_u32[3] = 0;
    v26 = COERCE_FLOAT32X2_T(static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)(v16, v25, v45, v46, v47, v48, v6));
    v27 = *(double *)&v44;
  }
  *(float32x2_t *)v18.f32 = vsub_f32(*(float32x2_t *)&v27, v26);
  v33 = vaddv_f32(vmul_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)v18.f32));
  v34 = 1800.0;
  if (!v13)
    v34 = 0.0;
  if (v33 < v34)
    return 0;
  v36 = v18;
  v36.i32[2] = 0;
  v37 = (int32x4_t)vmulq_f32(v36, v36);
  v37.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v37, 2), vadd_f32(*(float32x2_t *)v37.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v37.i8, 1))).u32[0];
  v38 = vrsqrte_f32((float32x2_t)v37.u32[0]);
  v39 = vmul_f32(v38, vrsqrts_f32((float32x2_t)v37.u32[0], vmul_f32(v38, v38)));
  return (uint64_t)vadd_f32(v26, vmul_n_f32(vmul_n_f32(*(float32x2_t *)v18.f32, vmul_f32(v39, vrsqrts_f32((float32x2_t)v37.u32[0], vmul_f32(v39, v39))).f32[0]), v40));
}

double sub_1000B3738(double a1)
{
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  __n128 v4;
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;
  float v9;
  float v10;
  double v11;
  float32x4_t v13;
  __n128 v14;
  __n128 v15;
  __n128 v17;

  v2 = v1;
  type metadata accessor for MeasureCamera(0);
  v3 = (__n128)*(unint64_t *)&a1;
  v3.n128_u32[2] = 0;
  v4.n128_f64[0] = static MeasureCamera.unprojectPoint(_:viewProjectionInv:viewportSize:)(v3);
  v15 = v4;
  v5 = (__n128)*(unint64_t *)&a1;
  v5.n128_u32[2] = 1.0;
  v6.n128_f64[0] = static MeasureCamera.unprojectPoint(_:viewProjectionInv:viewportSize:)(v5);
  v14 = v6;
  v7.n128_f64[0] = simd_float4x4.position.getter(*(__n128 *)(v2 + OBJC_IVAR____TtC7Measure11LabelRender_end1), *(__n128 *)(v2 + OBJC_IVAR____TtC7Measure11LabelRender_end1 + 16), *(__n128 *)(v2 + OBJC_IVAR____TtC7Measure11LabelRender_end1 + 32), *(__n128 *)(v2 + OBJC_IVAR____TtC7Measure11LabelRender_end1 + 48));
  v17 = v7;
  v8.n128_f64[0] = simd_float4x4.position.getter(*(__n128 *)(v2 + OBJC_IVAR____TtC7Measure11LabelRender_end2), *(__n128 *)(v2 + OBJC_IVAR____TtC7Measure11LabelRender_end2 + 16), *(__n128 *)(v2 + OBJC_IVAR____TtC7Measure11LabelRender_end2 + 32), *(__n128 *)(v2 + OBJC_IVAR____TtC7Measure11LabelRender_end2 + 48));
  v13 = (float32x4_t)v8;
  lineIntersection(line1P1:line1P2:line2P1:line2P2:)(v15, v14, v17, v8);
  v11 = *(double *)v13.i64;
  if (v10 > 0.00000011921)
  {
    if (v9 <= 0.00000011921)
      return v17.n128_f64[0];
    else
      return COERCE_DOUBLE(vadd_f32((float32x2_t)v17.n128_u64[0], vmul_n_f32((float32x2_t)*(_OWORD *)&vsubq_f32(v13, (float32x4_t)v17), v10)));
  }
  return v11;
}

void sub_1000B3868(__n128 *a1, int a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7, __n128 a8, __n128 a9, __n128 a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  unint64_t v32;
  uint64_t v33;
  __n128 *v35;
  __n128 v36;
  __n128 *v37;
  float32x4_t v38;
  float v39;
  float v40;
  uint64_t v41;
  float32x4_t v42;
  uint64_t v43;
  double v44;
  __n128 v45;
  __n128 v46;
  float32x4_t v47;
  uint64_t v48;
  float32x2_t v49;
  float32x4_t v50;
  float32x2_t v51;
  float v52;
  float v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(char *, uint64_t, uint64_t);
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __n128 v70;
  char v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  double v79;
  void (*v80)(char *, uint64_t);
  double v81;
  float v82;
  int v83;
  int v84;
  unint64_t v85;
  char *v86;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  float32x4_t v94;
  int32x4_t v95;
  float32x2_t v96;
  float32x2_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float v101;
  __n128 v102;
  float32x4_t v103;
  float32x4_t v104;
  float v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  BOOL v109;
  uint64_t v110;
  double v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v117;
  BOOL v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __n128 v126;
  __n128 v127;
  __n128 v128;
  uint64_t v129;
  uint64_t v130;
  float v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  char *v136;
  float32x4_t v137;
  int v138;
  __n128 v139;
  __n128 v140;
  __n128 v141;
  __n128 v142;
  char *v143;
  char *v144;
  __n128 v145;
  __n128 v146;
  __n128 v147;
  __n128 v148;
  float32x4_t v149;
  uint64_t v150;
  __n128 v151;
  __n128 v152;
  __n128 v153;
  __n128 v154;
  float32x4_t v155;
  __n128 v156;
  __n128 v157;
  __n128 v158;
  __n128 v159;
  __n128 v160;
  _BYTE v161[8];
  _BYTE v162[16];

  v11 = v10;
  v142 = a10;
  v141 = a9;
  v140 = a8;
  v139 = a7;
  v154 = a6;
  v153 = a5;
  v152 = a4;
  v151 = a3;
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v143 = (char *)&v137 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v144 = (char *)&v137 - v18;
  v19 = sub_10000EDC8((uint64_t *)&unk_10047E440);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v137 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v20);
  v25 = (char *)&v137 - v24;
  __chkstk_darwin(v23);
  v27 = (char *)&v137 - v26;
  v28 = v151;
  v29 = v152;
  v30 = v153;
  v31 = v154;
  v138 = a2;
  if ((a2 & 1) == 0)
    v28.n128_f64[0] = sub_1000B0AFC(*(__n128 *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_end1), *(__n128 *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_end1 + 16), *(__n128 *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_end1 + 32), *(__n128 *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_end1 + 48), *(__n128 *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_end2), *(__n128 *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_end2 + 16), *(__n128 *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_end2 + 32), *(__n128 *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_end2 + 48), 0.5);
  v157 = v31;
  v158 = v30;
  v156 = v29;
  v159 = v28;
  v32 = *(_QWORD *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_state);
  v118 = v32 > 5;
  v33 = (1 << v32) & 0x25;
  if (v118 || v33 == 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v27, 1, 1, v14);
    v73 = v11 + OBJC_IVAR____TtC7Measure11LabelRender_occlusionResetTime;
    swift_beginAccess(v11 + OBJC_IVAR____TtC7Measure11LabelRender_occlusionResetTime, v162, 33, 0);
    sub_1000C2224((uint64_t)v27, v73);
    swift_endAccess(v162);
    v74 = v11 + OBJC_IVAR____TtC7Measure11LabelRender_currentAnimation;
    *(_QWORD *)v74 = 0;
    *(_QWORD *)(v74 + 8) = 0;
    *(_OWORD *)(v74 + 16) = xmmword_1003B4EF0;
    *(_DWORD *)(v74 + 32) = 0;
    v75 = *(_QWORD *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_lastPositionsOnLine);
    *(_QWORD *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_lastPositionsOnLine) = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(v75);
    return;
  }
  v150 = v15;
  v35 = (__n128 *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_end2);
  v36.n128_f64[0] = simd_float4x4.position.getter(*(__n128 *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_end2), *(__n128 *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_end2 + 16), *(__n128 *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_end2 + 32), *(__n128 *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_end2 + 48));
  v160 = v36;
  v37 = (__n128 *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_end1);
  *(double *)v38.i64 = simd_float4x4.position.getter(*(__n128 *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_end1), *(__n128 *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_end1 + 16), *(__n128 *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_end1 + 32), *(__n128 *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_end1 + 48));
  v155 = v38;
  v39 = v160.n128_f32[2];
  v40 = v38.f32[2];
  v41 = v11 + OBJC_IVAR____TtC7Measure11LabelRender_lastTransform;
  *(double *)v42.i64 = simd_float4x4.position.getter(*(__n128 *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_lastTransform), *(__n128 *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_lastTransform + 16), *(__n128 *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_lastTransform + 32), *(__n128 *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_lastTransform + 48));
  v137 = v42;
  v43 = type metadata accessor for MeasureCamera(0);
  v44 = a1[1].n128_f64[0];
  v45 = a1[11];
  v148 = a1[10];
  v147 = v45;
  v46 = a1[13];
  v146 = a1[12];
  v145 = v46;
  *(double *)v47.i64 = static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)(v43, (__n128)v155, v148, v45, v146, v46, v44);
  v149 = v47;
  *(double *)&v49 = static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)(v48, v160, v148, v147, v146, v145, v44);
  v50 = vsubq_f32(v155, (float32x4_t)v160);
  v51 = vsub_f32(*(float32x2_t *)v149.f32, v49);
  v52 = sqrtf((float)((float)(v40 - v39) * (float)(v40 - v39)) + vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v50, v50)))
      / sqrtf(vaddv_f32(vmul_f32(v51, v51)));
  v53 = v52 * 25.0;
  *(double *)v54.i64 = simd_float4x4.position.getter(*v35, v35[1], v35[2], v35[3]);
  v149 = v54;
  *(double *)v55.i64 = simd_float4x4.position.getter(*v37, v37[1], v37[2], v37[3]);
  v56 = vsubq_f32(v149, v55);
  v57 = vmulq_f32(v56, v56);
  v58 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v57, 2), vaddq_f32(v57, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v57.f32, 1))).f32[0]);
  if (v58 > (float)(v52 * 25.0))
  {
    v149.i64[0] = v41;
    v148.n128_u64[0] = (unint64_t)v27;
    v59 = *(double *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_currentProperties + 40);
    v60 = v11 + OBJC_IVAR____TtC7Measure11LabelRender_occlusionResetTime;
    swift_beginAccess(v11 + OBJC_IVAR____TtC7Measure11LabelRender_occlusionResetTime, v162, 0, 0);
    sub_1000C219C(v60, (uint64_t)v25);
    v61 = v150;
    v62 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v150 + 48);
    v63 = v62(v25, 1, v14);
    sub_1000C21E4((uint64_t)v25);
    v147.n128_u64[0] = v60;
    sub_1000C219C(v60, (uint64_t)v22);
    if (v62(v22, 1, v14) == 1)
    {
      v64 = sub_1000C21E4((uint64_t)v22);
      v65 = v148.n128_u64[0];
      v66 = v149.i64[0];
      if (v63 != 1)
      {
LABEL_57:
        v126 = *(__n128 *)v66;
        v127 = *(__n128 *)(v66 + 16);
        v128 = *(__n128 *)(v66 + 32);
        v129 = *(_QWORD *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_currentAnimation + 16);
        if (v129 != 4)
        {
          v157 = *(__n128 *)(v66 + 48);
          v158 = v128;
          v156 = v127;
          v159 = v126;
          objc_msgSend(*(id *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_labelNode), "alpha");
          __asm { BR              X9 }
        }
        return;
      }
    }
    else
    {
      v76 = v144;
      v77 = (*(uint64_t (**)(void))(v61 + 32))();
      v78 = v143;
      Date.init()(v77);
      v79 = Date.distance(to:)(v78);
      v80 = *(void (**)(char *, uint64_t))(v61 + 8);
      v80(v78, v14);
      v81 = fabs(v79);
      v66 = v149.i64[0];
      if (v81 <= 0.65)
      {
        v65 = v148.n128_u64[0];
        if (v81 < 0.585 || v81 > 0.65)
        {
          v91 = v76;
        }
        else
        {
          v82 = v59;
          sub_1000C255C(v138 & 1, v151, v152, v153, v154, v139, v140, v141, v142, v53, v52 * v82);
          v84 = v83;
          v85 = OBJC_IVAR____TtC7Measure11LabelRender_lastPositionsOnLine;
          v86 = *(char **)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_lastPositionsOnLine);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v86);
          *(_QWORD *)(v11 + v85) = v86;
          v154.n128_u64[0] = v85;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            v86 = sub_10005F240(0, *((_QWORD *)v86 + 2) + 1, 1, v86);
            *(_QWORD *)(v11 + v85) = v86;
          }
          v89 = *((_QWORD *)v86 + 2);
          v88 = *((_QWORD *)v86 + 3);
          v90 = v89 + 1;
          if (v89 >= v88 >> 1)
          {
            v153.n128_u64[0] = v89 + 1;
            v136 = sub_10005F240((char *)(v88 > 1), v89 + 1, 1, v86);
            v90 = v153.n128_u64[0];
            v86 = v136;
            *(_QWORD *)(v11 + v154.n128_u64[0]) = v136;
          }
          *((_QWORD *)v86 + 2) = v90;
          *(_DWORD *)&v86[4 * v89 + 32] = v84;
          v91 = v144;
        }
        v64 = ((uint64_t (*)(char *, uint64_t))v80)(v91, v14);
        if (v63 != 1)
          goto LABEL_57;
      }
      else
      {
        v64 = ((uint64_t (*)(char *, uint64_t))v80)(v76, v14);
        v65 = v148.n128_u64[0];
      }
    }
    Date.init()(v64);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v150 + 56))(v65, 0, 1, v14);
    v92 = v147.n128_u64[0];
    swift_beginAccess(v147.n128_u64[0], v161, 33, 0);
    sub_1000C2224(v65, v92);
    swift_endAccess(v161);
    v93 = sub_1000B6FFC();
    if ((v93 & 0x100000000) != 0)
    {
      v106 = *(_OWORD *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_center + 16);
      v107 = *(_OWORD *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_center + 32);
      v108 = *(_OWORD *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_center + 48);
      *(_OWORD *)v66 = *(_OWORD *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_center);
      *(_OWORD *)(v66 + 16) = v106;
      *(_OWORD *)(v66 + 32) = v107;
      *(_OWORD *)(v66 + 48) = v108;
    }
    else
    {
      v94 = vsubq_f32((float32x4_t)v160, v155);
      v94.f32[2] = v39 - v40;
      v95 = (int32x4_t)vmulq_f32(v94, v94);
      v95.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v95, 2), vadd_f32(*(float32x2_t *)v95.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v95.i8, 1))).u32[0];
      v96 = vrsqrte_f32((float32x2_t)v95.u32[0]);
      v97 = vmul_f32(v96, vrsqrts_f32((float32x2_t)v95.u32[0], vmul_f32(v96, v96)));
      v98 = vmulq_n_f32(v94, vmul_f32(v97, vrsqrts_f32((float32x2_t)v95.u32[0], vmul_f32(v97, v97))).f32[0]);
      v99 = vmulq_f32(v98, vsubq_f32(v137, v155));
      v100 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v99, 2), vaddq_f32(v99, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v99.f32, 1)));
      v160 = (__n128)v100;
      v101 = *(float *)&v93;
      if (*(float *)&v93 == -1.0)
      {
        v155 = v98;
        v102.n128_f64[0] = simd_float4x4.position.getter(v159, v156, v158, v157);
        v154 = v102;
        *(double *)v103.i64 = simd_float4x4.position.getter(*v37, v37[1], v37[2], v37[3]);
        v104 = vmulq_f32(v155, vsubq_f32((float32x4_t)v154, v103));
        v155 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v104, 2), vaddq_f32(v104, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v104.f32, 1)));
        v105 = 0.5;
      }
      else
      {
        v105 = 1.0;
        v100.i32[0] = v93;
        v155 = v100;
      }
      v109 = v101 == -1.0;
      v110 = OBJC_IVAR____TtC7Measure11LabelRender_labelNode;
      objc_msgSend(*(id *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_labelNode), "alpha");
      v112 = v111;
      *(_BYTE *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_isOccluded) = v109;
      if (vabds_f32(v105, v112) < 0.01)
      {
        *(double *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_desiredAlpha) = v105;
        v112 = v105;
      }
      v113 = v160.n128_f32[0];
      v114 = v155.f32[0];
      v115 = vabds_f32(v155.f32[0], v160.n128_f32[0]);
      if ((~LODWORD(v115) & 0x7F800000) == 0 && (LODWORD(v115) & 0x7FFFFF) != 0)
        return;
      if ((float)(v155.f32[0] - v160.n128_f32[0]) >= 0.0
        && (float)(v155.f32[0] - v160.n128_f32[0]) <= 0.0
        && vabds_f32(v112, v105) <= 0.00000011921)
      {
        v130 = v11 + OBJC_IVAR____TtC7Measure11LabelRender_currentAnimation;
        if (*(_BYTE *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_currentAnimation + 16) != 4)
        {
          v131 = *(float *)(v130 + 32);
          *(double *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_desiredAlpha) = *(float *)(v130 + 24);
          objc_msgSend(*(id *)(v11 + v110), "setAlpha:");
          *(double *)&v132 = sub_1000B0AFC(*v37, v37[1], v37[2], v37[3], *v35, v35[1], v35[2], v35[3], v131);
          *(_OWORD *)v66 = v132;
          *(_OWORD *)(v66 + 16) = v133;
          *(_OWORD *)(v66 + 32) = v134;
          *(_OWORD *)(v66 + 48) = v135;
        }
        *(_QWORD *)v130 = 0;
        *(_QWORD *)(v130 + 8) = 0;
        *(_OWORD *)(v130 + 16) = xmmword_1003B4EF0;
        *(_DWORD *)(v130 + 32) = 0;
      }
      else
      {
        if (v115 > 0.00000011921)
        {
          v117 = v53 * 6.0;
          if ((float)(v53 * 6.0) < 0.00000011921)
          {
            __break(1u);
            JUMPOUT(0x1000B46ECLL);
          }
          v118 = v115 < 0.00000011921 || v115 > v117;
          if (v118)
          {
            if (v117 > v58)
            {
              __break(1u);
              JUMPOUT(0x1000B46F4);
            }
            v123 = 2 * (v115 <= v58);
            if (v117 > v115)
              v123 = 0;
          }
          else
          {
            v123 = 3;
            if (vabds_f32(v112, v105) <= 0.00000011921)
              v123 = 0;
          }
        }
        else
        {
          *(double *)&v119 = sub_1000B0AFC(*v37, v37[1], v37[2], v37[3], *v35, v35[1], v35[2], v35[3], v160.n128_f32[0] / v58);
          v114 = v155.f32[0];
          v113 = v160.n128_f32[0];
          *(_OWORD *)v66 = v119;
          *(_OWORD *)(v66 + 16) = v120;
          *(_OWORD *)(v66 + 32) = v121;
          *(_OWORD *)(v66 + 48) = v122;
          v123 = 1;
        }
        v124 = v11 + OBJC_IVAR____TtC7Measure11LabelRender_currentAnimation;
        *(_OWORD *)v124 = xmmword_1003B4F00;
        *(_QWORD *)(v124 + 16) = v123 | ((unint64_t)LODWORD(v112) << 32);
        *(_QWORD *)(v124 + 24) = LODWORD(v105) | ((unint64_t)COERCE_UNSIGNED_INT(v113 / v58) << 32);
        *(float *)(v124 + 32) = v114 / v58;
      }
    }
    v125 = *(_QWORD *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_lastPositionsOnLine);
    *(_QWORD *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_lastPositionsOnLine) = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(v125);
    goto LABEL_57;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v150 + 56))(v27, 1, 1, v14);
  v67 = v11 + OBJC_IVAR____TtC7Measure11LabelRender_occlusionResetTime;
  swift_beginAccess(v11 + OBJC_IVAR____TtC7Measure11LabelRender_occlusionResetTime, v162, 33, 0);
  sub_1000C2224((uint64_t)v27, v67);
  swift_endAccess(v162);
  v68 = v11 + OBJC_IVAR____TtC7Measure11LabelRender_currentAnimation;
  *(_QWORD *)v68 = 0;
  *(_QWORD *)(v68 + 8) = 0;
  *(_OWORD *)(v68 + 16) = xmmword_1003B4EF0;
  *(_DWORD *)(v68 + 32) = 0;
  v69 = *(_QWORD *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_lastPositionsOnLine);
  *(_QWORD *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_lastPositionsOnLine) = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v69);
  v70.n128_f64[0] = simd_float4x4.position.getter(v159, v156, v158, v157);
  v71 = sub_1000C2430(v70, v70);
  v72 = 1.0;
  if ((v71 & 1) == 0)
    v72 = 0.5;
  *(double *)(v11 + OBJC_IVAR____TtC7Measure11LabelRender_desiredAlpha) = v72;
}

BOOL sub_1000B4704()
{
  uint64_t v0;
  uint64_t v1;
  BOOL v2;

  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_selectionState))
    return 1;
  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_state);
  v2 = v1 == 1 || v1 == 6;
  if (v2 || (*(_BYTE *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_hideForMovePoint) & 1) != 0)
    return 1;
  else
    return *(_BYTE *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_capturing) == 1 && !MeasureObjectState.isCapturable()();
}

void sub_1000B477C(float a1)
{
  uint64_t v1;
  void (*v3)(uint64_t *__return_ptr, __n128);
  __n128 v4;
  uint64_t v5;
  float v6;
  uint64_t v7;

  v3 = *(void (**)(uint64_t *__return_ptr, __n128))(**(_QWORD **)(v1
                                                                          + OBJC_IVAR____TtC7Measure11LabelRender__orientationState)
                                                            + 144);
  v4 = swift_retain();
  v3(&v7, v4);
  swift_release();
  switch(v7)
  {
    case 0:
    case 5:
    case 6:
      return;
    case 1:
      *(_DWORD *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_checkAngleOffset) = 0;
      break;
    case 2:
      sub_100018148(0, (unint64_t *)&qword_10047E560, UIDevice_ptr);
      if ((static UIDevice.isIPad()() & 1) != 0)
      {
        if (a1 >= 0.0)
          *(_DWORD *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_checkAngleOffset) = -1068953638;
        else
          *(_DWORD *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_checkAngleOffset) = 1078530010;
      }
      break;
    case 3:
      v6 = *(float *)Float.piDiv2.unsafeMutableAddressor(v5);
      goto LABEL_8;
    case 4:
      v6 = -*(float *)Float.piDiv2.unsafeMutableAddressor(v5);
LABEL_8:
      *(float *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_checkAngleOffset) = v6;
      break;
    default:
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Measure/LabelRender.swift", 25, 2, 1221, 0);
      __break(1u);
      break;
  }
}

id sub_1000B48CC(float a1)
{
  uint64_t v1;

  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelNode), "setZPosition:", *(double *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelZOffset) + (float)(a1 * -10.0));
  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelContainer), "setZPosition:", 0.0001);
  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelText), "setZPosition:", 0.0002);
  return objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelChevron), "setZPosition:", 0.0001);
}

void sub_1000B4970(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v4;

  v2 = *(void **)(a1 + OBJC_IVAR____TtC7Measure11LabelRender_transitionLabel);
  if (v2)
  {
    v4 = v2;
    sub_1000A08A4(a2);

  }
}

id sub_1000B49D0()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  id result;
  unsigned __int8 v4;
  _BYTE v5[24];

  v1 = OBJC_IVAR____TtC7Measure11LabelRender_labelNode;
  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_labelNode), "removeAllActions");
  objc_msgSend(*(id *)(v0 + v1), "setAlpha:", 1.0);
  v2 = (os_unfair_lock_s *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_labelLock);
  swift_beginAccess(v0 + OBJC_IVAR____TtC7Measure11LabelRender_labelLock, v5, 33, 0);
  os_unfair_lock_lock(v2);
  *(_BYTE *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender__visibleForCapture) = 1;
  os_unfair_lock_unlock(v2);
  swift_endAccess(v5);
  result = objc_msgSend((id)objc_opt_self(Gestalt), "jasperAvailable");
  if ((_DWORD)result)
  {
    v4 = objc_msgSend(*(id *)(v0 + v1), "isHidden");
    *(_BYTE *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_wasHidden) = v4;
    return objc_msgSend(*(id *)(v0 + v1), "setHidden:", 0);
  }
  return result;
}

void sub_1000B4AB8()
{
  uint64_t v0;
  double v1;
  os_unfair_lock_s *v2;
  id v3;
  _BYTE v4[24];

  if (objc_msgSend((id)objc_opt_self(Gestalt), "jasperAvailable"))
  {
    objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_labelNode), "setHidden:", *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_wasHidden));
LABEL_4:
    v1 = *(double *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_desiredAlpha);
    goto LABEL_5;
  }
  v1 = 0.0;
  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_inBounds) & 1) == 0)
    goto LABEL_4;
LABEL_5:
  v2 = (os_unfair_lock_s *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_labelLock);
  swift_beginAccess(v0 + OBJC_IVAR____TtC7Measure11LabelRender_labelLock, v4, 33, 0);
  os_unfair_lock_lock(v2);
  *(_BYTE *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender__visibleForCapture) = 0;
  os_unfair_lock_unlock(v2);
  swift_endAccess(v4);
  v3 = objc_msgSend((id)objc_opt_self(SKAction), "fadeAlphaTo:duration:", v1, 0.1);
  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_labelNode), "runAction:", v3);

}

uint64_t sub_1000B4E18()
{
  return type metadata accessor for LabelRender(0);
}

uint64_t type metadata accessor for LabelRender(uint64_t a1)
{
  uint64_t result;

  result = qword_100481960;
  if (!qword_100481960)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LabelRender);
  return result;
}

void sub_1000B4E5C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[63];

  v5[0] = &unk_1003B4F50;
  v5[1] = &unk_1003B4F68;
  v5[2] = &unk_1003B4F80;
  v5[3] = &unk_1003B4F98;
  v5[4] = &unk_1003B4FB0;
  v5[5] = (char *)&value witness table for Builtin.Int64 + 64;
  v5[6] = (char *)&value witness table for Builtin.NativeObject + 64;
  v5[7] = (char *)&value witness table for Builtin.NativeObject + 64;
  v5[8] = (char *)&value witness table for Builtin.NativeObject + 64;
  v5[9] = (char *)&value witness table for Builtin.NativeObject + 64;
  v5[10] = (char *)&value witness table for Builtin.NativeObject + 64;
  v5[11] = (char *)&value witness table for Builtin.NativeObject + 64;
  v5[12] = (char *)&value witness table for Builtin.Int64 + 64;
  v5[13] = &unk_1003B4FC8;
  v5[14] = (char *)&value witness table for Builtin.Int32 + 64;
  v5[15] = &unk_1003B4FE0;
  v5[16] = &unk_1003B4FE0;
  v5[17] = &unk_1003B4FF8;
  v5[18] = (char *)&value witness table for Builtin.NativeObject + 64;
  v5[19] = (char *)&value witness table for Builtin.Int64 + 64;
  v5[20] = &unk_1003B4FB0;
  v5[21] = &unk_1003B5010;
  v5[22] = &unk_1003B4FB0;
  v5[23] = &unk_1003B5028;
  v5[24] = &unk_1003B5040;
  v5[25] = &unk_1003B4FB0;
  v5[26] = &unk_1003B5028;
  v5[27] = (char *)&value witness table for Builtin.Int32 + 64;
  v5[28] = (char *)&value witness table for Builtin.Int32 + 64;
  v5[29] = &unk_1003B4FB0;
  v5[30] = &unk_1003B4FB0;
  v5[31] = &unk_1003B5058;
  v5[32] = &unk_1003B5070;
  v5[33] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v5[34] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v5[35] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v5[36] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v5[37] = &unk_1003B4FB0;
  v5[38] = &unk_1003B5088;
  v5[39] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v5[40] = &unk_1003B5088;
  v5[41] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v5[42] = &unk_1003B5028;
  v5[43] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v5[44] = &unk_1003B50A0;
  v5[45] = &unk_1003B50A0;
  v5[46] = &unk_1003B50A0;
  sub_10005CFA4(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    v5[49] = (char *)&value witness table for Builtin.Int32 + 64;
    v5[50] = (char *)&value witness table for Builtin.Int32 + 64;
    v5[47] = v4;
    v5[48] = (char *)&value witness table for Builtin.Int64 + 64;
    v5[51] = &unk_1003B50B8;
    v5[52] = &unk_1003B4FB0;
    v5[53] = (char *)&value witness table for Builtin.Int64 + 64;
    v5[54] = &unk_1003B5010;
    v5[55] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v5[56] = &unk_1003B50A0;
    v5[57] = &unk_1003B50D0;
    v5[58] = v4;
    v5[59] = &unk_1003B5058;
    v5[60] = &unk_1003B5088;
    v5[61] = &unk_1003B5088;
    v5[62] = &unk_1003B4FB0;
    swift_updateClassMetadata2(a1, 256, 63, v5, a1 + 80);
  }
}

id sub_1000B5024()
{
  void *v0;

  return objc_msgSend(v0, "selectAnimationComplete");
}

id sub_1000B5038()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t Strong;
  uint64_t v5;

  v1 = v0;
  v2 = OBJC_IVAR____TtC7Measure11LabelRender_desiredAlpha;
  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_labelNode), "setAlpha:", *(double *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_desiredAlpha));
  Strong = swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR____TtC7Measure11LabelRender_delegate, v3);
  if (Strong)
  {
    v5 = Strong;
    sub_1000C5D80(*(_QWORD *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_measurementID), *(_QWORD *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_measurementID + 8));
    swift_unknownObjectRelease(v5);
  }
  *(_BYTE *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_selectionState) = 0;
  *(_QWORD *)(v1 + v2) = 0x3FF0000000000000;
  return sub_1000ADB38(*(_QWORD *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_state));
}

double sub_1000B50D8()
{
  _BYTE *v0;
  _BYTE *v1;
  uint64_t v2;
  void *v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  id v7;
  _BYTE *v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  char *v12;
  uint64_t v13;
  void *v14;
  Swift::String v15;
  Swift::String v16;
  double result;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v1 = v0;
  v2 = OBJC_IVAR____TtC7Measure11LabelRender_selectionState;
  if (v1[OBJC_IVAR____TtC7Measure11LabelRender_selectionState] != 2)
    return result;
  if (objc_msgSend((id)objc_opt_self(Gestalt), "jasperAvailable"))
  {
    v3 = *(void **)&v1[OBJC_IVAR____TtC7Measure11LabelRender_transitionLabel];
    if (v3)
    {
      v4 = *(_OWORD *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_currentProperties + 48];
      v20 = *(_OWORD *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_currentProperties + 32];
      v21 = v4;
      v22 = *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_currentProperties + 64];
      v5 = *(_OWORD *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_currentProperties + 16];
      v18 = *(_OWORD *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_currentProperties];
      v19 = v5;
      v6 = swift_allocObject(&unk_100444590, 24, 7);
      *(_QWORD *)(v6 + 16) = v1;
      v7 = v3;
      sub_1000A2ECC((uint64_t)&v18);
      v8 = v1;
      sub_1000A1A9C((uint64_t)&v18, (uint64_t)sub_1000C23A8, v6);
      swift_release();
LABEL_7:
      sub_1000A2FE4((uint64_t)&v18);

    }
  }
  else
  {
    v1[v2] = 3;
    v9 = *(void **)&v1[OBJC_IVAR____TtC7Measure11LabelRender_transitionLabel];
    if (v9)
    {
      v10 = *(_OWORD *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_currentProperties + 48];
      v20 = *(_OWORD *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_currentProperties + 32];
      v21 = v10;
      v22 = *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_currentProperties + 64];
      v11 = *(_OWORD *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_currentProperties + 16];
      v18 = *(_OWORD *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_currentProperties];
      v19 = v11;
      v7 = v9;
      sub_1000A2ECC((uint64_t)&v18);
      sub_1000A1A9C((uint64_t)&v18, 0, 0);
      goto LABEL_7;
    }
  }
  if (qword_10047AA98 != -1)
    swift_once(&qword_10047AA98, sub_1000E15B4);
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease(0xE000000000000000);
  v12 = &v1[OBJC_IVAR____TtC7Measure11LabelRender_measurementID];
  v13 = *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_measurementID];
  v14 = (void *)*((_QWORD *)v12 + 1);
  swift_bridgeObjectRetain(v14);
  v15._countAndFlagsBits = v13;
  v15._object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(v14);
  v16._countAndFlagsBits = 0xD00000000000001DLL;
  v16._object = (void *)0x80000001003DDA40;
  Log.default(_:isPrivate:)(v16, 0);
  *(_QWORD *)&result = swift_bridgeObjectRelease(0x80000001003DDA40).n128_u64[0];
  return result;
}

double sub_1000B52F8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  Swift::String v3;
  Swift::String v4;
  double result;

  if (qword_10047AA98 != -1)
    swift_once(&qword_10047AA98, sub_1000E15B4);
  _StringGuts.grow(_:)(39);
  swift_bridgeObjectRelease(0xE000000000000000);
  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_measurementID);
  v2 = *(void **)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_measurementID + 8);
  swift_bridgeObjectRetain(v2);
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v2);
  v4._countAndFlagsBits = 0xD000000000000025;
  v4._object = (void *)0x80000001003DDA60;
  Log.default(_:isPrivate:)(v4, 0);
  *(_QWORD *)&result = swift_bridgeObjectRelease(0x80000001003DDA60).n128_u64[0];
  return result;
}

void sub_1000B53F0()
{
  _BYTE *v0;
  _BYTE *v1;
  void (*v2)(_OWORD *__return_ptr, __n128);
  __n128 v3;
  void (*v4)(_OWORD *__return_ptr, __n128);
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  void *v9;
  void *v10;
  id v11;
  double v12;
  double v13;
  double v14;
  double v15;
  void *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  void *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char *v35;
  char *v36;
  id v37;
  char *v38;
  void *v39;
  void *v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  _BYTE *v54;
  id v55;
  _OWORD v56[4];
  uint64_t v57;

  v1 = v0;
  v2 = *(void (**)(_OWORD *__return_ptr, __n128))(**(_QWORD **)&v0[OBJC_IVAR____TtC7Measure11LabelRender__appState]
                                                           + 144);
  v3 = swift_retain();
  v2(v56, v3);
  swift_release();
  if ((BYTE3(v56[0]) & 1) == 0 && !v0[OBJC_IVAR____TtC7Measure11LabelRender_selectionState])
  {
    if (!objc_msgSend((id)objc_opt_self(Gestalt), "jasperAvailable"))
    {
      v30 = *(void **)&v0[OBJC_IVAR____TtC7Measure11LabelRender_mainView];
      v31 = v0[OBJC_IVAR____TtC7Measure11LabelRender_chevronOnLeft];
      v32 = *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_measurementID];
      v33 = *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_measurementID + 8];
      v34 = v1[OBJC_IVAR____TtC7Measure11LabelRender_labelType];
      v35 = (char *)objc_allocWithZone((Class)type metadata accessor for LabelDetailsPlatterWrapper(0));
      v36 = v1;
      v37 = v30;
      swift_bridgeObjectRetain(v33);
      v38 = sub_1000C1320(v37, v34, v36, v31, v32, v33, v35);
      v39 = *(void **)&v36[OBJC_IVAR____TtC7Measure11LabelRender_transitionLabel];
      *(_QWORD *)&v36[OBJC_IVAR____TtC7Measure11LabelRender_transitionLabel] = v38;

      sub_1000B70D0((uint64_t)v36);
      return;
    }
    v4 = *(void (**)(_OWORD *__return_ptr, __n128))(**(_QWORD **)&v0[OBJC_IVAR____TtC7Measure11LabelRender__pillToPlatterAnimationState]
                                                             + 144);
    v5 = swift_retain();
    v4(v56, v5);
    swift_release();
    v6 = *(_QWORD *)(*(_QWORD *)&v56[0] + 16);
    swift_bridgeObjectRelease(*(_QWORD *)&v56[0]);
    if (!v6)
    {
      v7 = sub_100018148(0, (unint64_t *)&qword_10047E560, UIDevice_ptr);
      v8 = static UIDevice.isIPhone()(v7);
      v9 = *(void **)&v1[OBJC_IVAR____TtC7Measure11LabelRender_mainView];
      if ((v8 & 1) != 0)
      {
        v10 = *(void **)&v1[OBJC_IVAR____TtC7Measure11LabelRender_sceneView];
        v11 = v9;
        objc_msgSend(v10, "bounds");
        v16 = *(void **)&v1[OBJC_IVAR____TtC7Measure11LabelRender_activityPresentingViewController];
        if (!v16)
        {
LABEL_17:
          __break(1u);
          goto LABEL_18;
        }
        if (!*(_QWORD *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_historyPressedPublisher])
        {
LABEL_18:
          __break(1u);
          goto LABEL_19;
        }
        v17 = v12;
        v18 = v13;
        v19 = v14;
        v20 = v15;
        v21 = v1[OBJC_IVAR____TtC7Measure11LabelRender_labelType];
        v22 = v1[OBJC_IVAR____TtC7Measure11LabelRender_chevronOnLeft];
        v23 = *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_measurementID];
        v24 = *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_measurementID + 8];
        *(_QWORD *)&v56[0] = *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_historyPressedPublisher];
        swift_bridgeObjectRetain(v24);
        v25 = v16;
        v26 = sub_10000EDC8((uint64_t *)&unk_100481B80);
        v27 = sub_100043310((unint64_t *)&unk_1004862D0, (uint64_t *)&unk_100481B80, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
        Publisher.eraseToAnyPublisher()(v26, v27);
        v28 = v1;
        v29 = sub_1000C1170(v11, v21, v28, v22, v23, v24, v25, v17, v18, v19, v20);
      }
      else
      {
        v40 = *(void **)&v1[OBJC_IVAR____TtC7Measure11LabelRender_activityPresentingViewController];
        if (!v40)
        {
LABEL_19:
          __break(1u);
          goto LABEL_20;
        }
        if (!*(_QWORD *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_historyPressedPublisher])
        {
LABEL_20:
          __break(1u);
          return;
        }
        v41 = v1[OBJC_IVAR____TtC7Measure11LabelRender_labelType];
        v42 = v1[OBJC_IVAR____TtC7Measure11LabelRender_chevronOnLeft];
        v43 = *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_measurementID];
        v44 = *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_measurementID + 8];
        *(_QWORD *)&v56[0] = *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_historyPressedPublisher];
        v45 = v9;
        swift_bridgeObjectRetain(v44);
        v46 = v40;
        v47 = sub_10000EDC8((uint64_t *)&unk_100481B80);
        v48 = sub_100043310((unint64_t *)&unk_1004862D0, (uint64_t *)&unk_100481B80, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
        Publisher.eraseToAnyPublisher()(v47, v48);
        v28 = v1;
        v29 = sub_1000C0FF8(v45, v41, v28, v42, v43, v44, v46);
      }
      v49 = *(void **)&v28[OBJC_IVAR____TtC7Measure11LabelRender_transitionLabel];
      *(_QWORD *)&v28[OBJC_IVAR____TtC7Measure11LabelRender_transitionLabel] = v29;

      v50 = *(void **)&v1[OBJC_IVAR____TtC7Measure11LabelRender_transitionLabel];
      if (v50)
      {
        v51 = *(_OWORD *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_currentProperties + 48];
        v56[2] = *(_OWORD *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_currentProperties + 32];
        v56[3] = v51;
        v57 = *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_currentProperties + 64];
        v52 = *(_OWORD *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_currentProperties + 16];
        v56[0] = *(_OWORD *)&v1[OBJC_IVAR____TtC7Measure11LabelRender_currentProperties];
        v56[1] = v52;
        v53 = swift_allocObject(&unk_1004446A8, 24, 7);
        *(_QWORD *)(v53 + 16) = v1;
        v54 = v1;
        v55 = v50;
        sub_1000A2ECC((uint64_t)v56);
        sub_1000A05C0((uint64_t)v56, (uint64_t)sub_1000C2C3C, v53);
        swift_release();
        sub_1000A2FE4((uint64_t)v56);

        return;
      }
      __break(1u);
      goto LABEL_17;
    }
  }
}

void sub_1000B5840()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(__n128);
  __n128 v3;
  id v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  uint64_t v15;
  float v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  char v21;
  float v22;
  uint64_t v23;
  float v24;
  char v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  void *v34;
  uint64_t ObjectType;
  void *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char *v42;
  float v43;
  float v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  void *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  float v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  float v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  float v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  float v123;
  char v124;
  __int128 v125;
  uint64_t v126;
  uint64_t v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  __int128 v139;
  __int128 v140;
  _BYTE v141[16];
  _OWORD v142[2];

  v1 = v0;
  v2 = *(void (**)(__n128))(**(_QWORD **)(v0 + OBJC_IVAR____TtC7Measure11LabelRender__unitState) + 144);
  v3 = swift_retain();
  v2(v3);
  swift_release();
  v4 = sub_10009BF0C();
  v5 = (uint64_t)v4;
  v6 = v4 == 0;
  if (!*(_BYTE *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelType))
  {
    v26 = OBJC_IVAR____TtC7Measure11LabelRender_measurement;
    sub_100108E28((uint64_t)v4, 0, 0, (uint64_t *)&v128, *(float *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_measurement));
    v27 = *(float *)(v1 + v26);
    if (v5)
    {
      if (v5 != 1)
        goto LABEL_80;
      sub_10010C62C(0, (uint64_t)&v131, v27);
      v28 = v134;
      v29 = v132;
      v30 = v131;
      sub_10010B508(0, 0, (uint64_t)&v135, *(float *)(v1 + v26));
    }
    else
    {
      sub_10010B508(1, 0, (uint64_t)&v131, v27);
      v28 = v134;
      v29 = v132;
      v30 = v131;
      sub_10010C62C(0, (uint64_t)&v135, *(float *)(v1 + v26));
    }
    v31 = v136;
    v32 = v138;
    v12 = v130;
    if (!v130)
    {
      swift_bridgeObjectRelease(v29);
      swift_bridgeObjectRelease(v31);
      swift_bridgeObjectRelease(v32);
      swift_bridgeObjectRelease(v28);
      v125 = v128;
      sub_1000C22B0((uint64_t)&v125);
      return;
    }
    if (v28)
    {
      if (v138)
      {
        v33 = *(char **)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_transitionLabel);
        if (!v33)
        {
          swift_bridgeObjectRelease(v28);
          swift_bridgeObjectRelease(v29);
          swift_bridgeObjectRelease(v32);
          swift_bridgeObjectRelease(v31);
          v125 = v128;
          sub_1000C22B0((uint64_t)&v125);
LABEL_64:
          v63 = v12;
          goto LABEL_65;
        }
        v100 = *((_QWORD *)&v128 + 1);
        v34 = *(void **)&v33[qword_100480D98];
        if (v34
          && ((v98 = v129,
               v94 = v128,
               ObjectType = swift_getObjectType(v34),
               swift_conformsToProtocol2(ObjectType, &protocol descriptor for LineMeasurementUIItem))
            ? (v36 = v34)
            : (v36 = 0),
              v36))
        {
          swift_bridgeObjectRetain(v12);
          swift_bridgeObjectRetain(v28);
          v37 = v33;
          swift_bridgeObjectRetain(v32);
          v92 = v34;
          v38 = v100;
          sub_1000968E0(v94, v100, v98, v12, v30, v29);
          swift_bridgeObjectRelease(v29);
          swift_bridgeObjectRelease(v31);
          swift_bridgeObjectRelease_n(v32, 2);
          swift_bridgeObjectRelease_n(v28, 2);
          swift_bridgeObjectRelease(v12);

        }
        else
        {
          v42 = v33;
          swift_bridgeObjectRelease(v28);
          swift_bridgeObjectRelease(v29);
          swift_bridgeObjectRelease(v32);
          swift_bridgeObjectRelease(v31);
          v38 = v100;
        }

        swift_bridgeObjectRelease(v12);
        v41 = v38;
LABEL_39:
        swift_bridgeObjectRelease(v41);
        return;
      }
      swift_bridgeObjectRetain(v130);
      swift_bridgeObjectRelease(v29);
      swift_bridgeObjectRelease(v31);
      v125 = v128;
      sub_1000C22B0((uint64_t)&v125);
      swift_bridgeObjectRelease(v28);
    }
    else
    {
      swift_bridgeObjectRetain(v130);
      swift_bridgeObjectRelease(v29);
      swift_bridgeObjectRelease(v31);
      swift_bridgeObjectRelease(v32);
      v125 = v128;
      sub_1000C22B0((uint64_t)&v125);
    }
    swift_bridgeObjectRelease_n(v12, 2);
    return;
  }
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelType) != 1)
    return;
  v7 = (uint64_t *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_rectangleLabelData);
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_rectangleLabelData + 21) & 1) != 0)
  {
    __break(1u);
    goto LABEL_78;
  }
  v8 = *v7;
  if ((*v7 & 0x100000000) != 0)
  {
LABEL_78:
    __break(1u);
    goto LABEL_79;
  }
  v9 = v7[1];
  if ((v9 & 0x100000000) != 0)
  {
LABEL_79:
    __break(1u);
    goto LABEL_80;
  }
  v10 = *(float *)&v9;
  if (v4)
  {
    if (v4 == (id)1)
    {
      sub_10010C62C(0, (uint64_t)&v101, *(float *)&v8);
      v11 = v102;
      v12 = v104;
      if ((v106 & 1) == 0)
      {
        v13 = v105;
        v90 = v101;
        v91 = v103;
        v14 = sub_10010CC14(1, 0, v105);
        sub_10010B508(0, 0, (uint64_t)&v107, v14);
        v15 = v110;
        v89 = v109;
        v16 = v111;
        v40 = v112;
        v19 = v107;
        v18 = v108;
        sub_10010C62C(0, (uint64_t)&v113, v10);
        v97 = v114;
        v99 = v116;
        if ((v118 & 1) == 0)
        {
          v95 = v15;
          v96 = v18;
          v20 = v117;
          v86 = v115;
          v87 = v113;
          v21 = 1;
          v22 = sub_10010CC14(1, 0, v117);
          sub_10010B508(0, 0, (uint64_t)&v119, v22);
          v88 = v120;
          v93 = v122;
          if ((v40 & 1) == 0)
          {
            v23 = v121;
            v24 = v123;
            v25 = 2;
            if ((v124 & 1) == 0)
              goto LABEL_43;
          }
          goto LABEL_37;
        }
        goto LABEL_31;
      }
LABEL_28:
      v39 = v11;
LABEL_38:
      swift_bridgeObjectRelease(v39);
      v41 = v12;
      goto LABEL_39;
    }
LABEL_80:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Measure/MeasureUtil.swift", 25, 2, 566, 0);
    __break(1u);
    return;
  }
  sub_10010B508(0, 0, (uint64_t)&v101, *(float *)&v8);
  v11 = v102;
  v12 = v104;
  if (v106 == 1)
    goto LABEL_28;
  v13 = v105;
  v90 = v101;
  v91 = v103;
  v14 = sub_10010CC14(2, 0, v105);
  sub_10010C62C(0, (uint64_t)&v107, v14);
  v15 = v110;
  v89 = v109;
  v16 = v111;
  v17 = v112;
  v19 = v107;
  v18 = v108;
  sub_10010B508(0, 0, (uint64_t)&v113, v10);
  v97 = v114;
  v99 = v116;
  if ((v118 & 1) != 0)
  {
LABEL_31:
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(v97);
    swift_bridgeObjectRelease(v99);
    v39 = v15;
    goto LABEL_38;
  }
  v95 = v15;
  v96 = v18;
  v20 = v117;
  v86 = v115;
  v87 = v113;
  v21 = 2;
  v22 = sub_10010CC14(2, 0, v117);
  sub_10010C62C(0, (uint64_t)&v119, v22);
  v88 = v120;
  v93 = v122;
  if ((v17 & 1) != 0 || (v23 = v121, v24 = v123, v25 = 1, (v124 & 1) != 0))
  {
LABEL_37:
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(v97);
    swift_bridgeObjectRelease(v96);
    swift_bridgeObjectRelease(v88);
    swift_bridgeObjectRelease(v93);
    swift_bridgeObjectRelease(v95);
    v39 = v99;
    goto LABEL_38;
  }
LABEL_43:
  v79 = v119;
  v80 = v23;
  sub_10010CD7C(v5, 1, 0, 0, (uint64_t *)&v125, v14 * v22);
  v43 = sub_10010E16C(v25, 0, v24 * v16);
  sub_10010CD7C(v6, 1, 0, 0, (uint64_t *)&v128, v43);
  v44 = sub_10010CC14(v21, 0, sqrtf((float)(v20 * v20) + (float)(v13 * v13)));
  v45 = sub_10010CC14(v25, 0, sqrtf((float)(v24 * v24) + (float)(v16 * v16)));
  if (v5)
  {
    sub_10010C62C(0, (uint64_t)&v131, v44);
    v46 = v134;
    v85 = v132;
    v77 = v131;
    v78 = v133;
    sub_10010B508(0, 0, (uint64_t)&v135, v45);
  }
  else
  {
    sub_10010B508(0, 0, (uint64_t)&v131, v44);
    v46 = v134;
    v85 = v132;
    v77 = v131;
    v78 = v133;
    sub_10010C62C(0, (uint64_t)&v135, v45);
  }
  v47 = v136;
  v48 = v138;
  if (!v127)
  {
    swift_bridgeObjectRelease(v85);
    swift_bridgeObjectRelease(v47);
    swift_bridgeObjectRelease(v48);
    swift_bridgeObjectRelease(v46);
    v142[0] = v128;
    sub_1000C22B0((uint64_t)v142);
    sub_100012C58((uint64_t)&v129, (uint64_t)v141, (uint64_t *)&unk_10048A0F0);
    sub_1000C22B0((uint64_t)v141);
    v140 = v125;
    sub_1000C22B0((uint64_t)&v140);
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(v97);
    swift_bridgeObjectRelease(v96);
    swift_bridgeObjectRelease(v88);
LABEL_63:
    swift_bridgeObjectRelease(v93);
    swift_bridgeObjectRelease(v95);
    swift_bridgeObjectRelease(v99);
    goto LABEL_64;
  }
  v83 = v138;
  v84 = v46;
  v81 = v136;
  v82 = v127;
  v49 = v137;
  v50 = v135;
  v51 = v126;
  sub_100012C58((uint64_t)&v129, (uint64_t)v141, (uint64_t *)&unk_10048A0F0);
  sub_100012C58((uint64_t)v141, (uint64_t)v142, (uint64_t *)&unk_10048A0F0);
  v52 = *((_QWORD *)&v142[0] + 1);
  if (!*((_QWORD *)&v142[0] + 1))
  {
    swift_bridgeObjectRetain(v82);
    swift_bridgeObjectRelease(v85);
    swift_bridgeObjectRelease(v81);
    swift_bridgeObjectRelease(v83);
    swift_bridgeObjectRelease(v84);
    v140 = v128;
    sub_1000C22B0((uint64_t)&v140);
    v139 = v125;
    sub_1000C22B0((uint64_t)&v139);
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(v97);
    swift_bridgeObjectRelease(v96);
    swift_bridgeObjectRelease(v88);
    swift_bridgeObjectRelease_n(v82, 2);
    goto LABEL_63;
  }
  if (!v12)
  {
    v12 = v82;
    swift_bridgeObjectRetain(v82);
    sub_100018B78((uint64_t)v141);
    swift_bridgeObjectRelease(v85);
    swift_bridgeObjectRelease(v81);
    swift_bridgeObjectRelease(v83);
    swift_bridgeObjectRelease(v84);
    v140 = v128;
    sub_1000C22B0((uint64_t)&v140);
    sub_1000C22B0((uint64_t)v141);
    v139 = v125;
    sub_1000C22B0((uint64_t)&v139);
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(v97);
    swift_bridgeObjectRelease(v96);
    swift_bridgeObjectRelease(v88);
    swift_bridgeObjectRelease(v82);
    swift_bridgeObjectRelease(v93);
    swift_bridgeObjectRelease(v95);
    swift_bridgeObjectRelease(v99);
    sub_1000C22B0((uint64_t)v141);
    goto LABEL_64;
  }
  if (v95)
  {
    if (v99)
    {
      if (v93)
      {
        if (v84)
        {
          if (v83)
          {
            v53 = *(char **)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_transitionLabel);
            if (v53)
            {
              v75 = *((_QWORD *)&v125 + 1);
              v76 = *((_QWORD *)&v128 + 1);
              v54 = *(void **)&v53[qword_100480D98];
              if (v54
                && ((v73 = *(_QWORD *)&v142[0],
                     v74 = v51,
                     v71 = v125,
                     v72 = v128,
                     v55 = swift_getObjectType(v54),
                     swift_conformsToProtocol2(v55, &protocol descriptor for SurfaceMeasurementUIItem))
                  ? (v56 = v54)
                  : (v56 = 0),
                    v56))
              {
                swift_bridgeObjectRetain(v82);
                sub_100018B78((uint64_t)v141);
                swift_bridgeObjectRetain(v12);
                v57 = v95;
                swift_bridgeObjectRetain(v95);
                swift_bridgeObjectRetain(v99);
                swift_bridgeObjectRetain(v93);
                swift_bridgeObjectRetain(v84);
                swift_bridgeObjectRetain(v83);
                v58 = v53;
                v70 = v54;
                v69 = v50;
                v59 = v96;
                v60 = v75;
                v61 = v52;
                v62 = v88;
                sub_10019C5A4(v71, v75, v74, v82, v72, v76, v73, v61, v90, v11, v91, v12, v19, v96, v89, v95, v87, v97, v86,
                  v99,
                  v79,
                  v88,
                  v80,
                  v93,
                  v77,
                  v85,
                  v78,
                  v84,
                  v69,
                  v81,
                  v49,
                  v83);
                swift_bridgeObjectRelease(v82);

                sub_1000C22B0((uint64_t)v141);
                swift_bridgeObjectRelease(v81);
                swift_bridgeObjectRelease_n(v83, 2);
                swift_bridgeObjectRelease(v84);
                swift_bridgeObjectRelease(v93);
                swift_bridgeObjectRelease(v99);
                swift_bridgeObjectRelease(v95);
                swift_bridgeObjectRelease(v12);
              }
              else
              {
                v68 = v53;
                swift_bridgeObjectRelease(v83);
                swift_bridgeObjectRelease(v81);
                v57 = v95;
                v59 = v96;
                v62 = v88;
                v60 = v75;
              }
              swift_bridgeObjectRelease(v76);
              swift_bridgeObjectRelease(v12);
              swift_bridgeObjectRelease(v11);
              swift_bridgeObjectRelease(v57);
              swift_bridgeObjectRelease(v59);
              swift_bridgeObjectRelease(v99);
              swift_bridgeObjectRelease(v97);
              swift_bridgeObjectRelease(v93);
              swift_bridgeObjectRelease(v62);
              swift_bridgeObjectRelease(v84);
              swift_bridgeObjectRelease(v85);
              sub_1000C22B0((uint64_t)v141);

              swift_bridgeObjectRelease(v82);
              v63 = v60;
            }
            else
            {
              swift_bridgeObjectRelease(v84);
              swift_bridgeObjectRelease(v85);
              swift_bridgeObjectRelease(v83);
              swift_bridgeObjectRelease(v81);
              v140 = v128;
              sub_1000C22B0((uint64_t)&v140);
              sub_1000C22B0((uint64_t)v141);
              v139 = v125;
              sub_1000C22B0((uint64_t)&v139);
              swift_bridgeObjectRelease(v12);
              swift_bridgeObjectRelease(v11);
              swift_bridgeObjectRelease(v99);
              swift_bridgeObjectRelease(v97);
              swift_bridgeObjectRelease(v95);
              swift_bridgeObjectRelease(v96);
              swift_bridgeObjectRelease(v93);
              swift_bridgeObjectRelease(v88);
              v63 = v82;
            }
            goto LABEL_65;
          }
          v64 = v82;
          swift_bridgeObjectRetain(v82);
          sub_100018B78((uint64_t)v141);
          swift_bridgeObjectRetain(v12);
          v65 = v95;
          swift_bridgeObjectRetain(v95);
          v66 = v99;
          swift_bridgeObjectRetain(v99);
          v67 = v93;
          swift_bridgeObjectRetain(v93);
          swift_bridgeObjectRelease(v85);
          swift_bridgeObjectRelease(v81);
          v140 = v128;
          sub_1000C22B0((uint64_t)&v140);
          sub_1000C22B0((uint64_t)v141);
          v139 = v125;
          sub_1000C22B0((uint64_t)&v139);
          swift_bridgeObjectRelease(v84);
        }
        else
        {
          v64 = v82;
          swift_bridgeObjectRetain(v82);
          sub_100018B78((uint64_t)v141);
          swift_bridgeObjectRetain(v12);
          v65 = v95;
          swift_bridgeObjectRetain(v95);
          v66 = v99;
          swift_bridgeObjectRetain(v99);
          v67 = v93;
          swift_bridgeObjectRetain(v93);
          swift_bridgeObjectRelease(v85);
          swift_bridgeObjectRelease(v81);
          swift_bridgeObjectRelease(v83);
          v140 = v128;
          sub_1000C22B0((uint64_t)&v140);
          sub_1000C22B0((uint64_t)v141);
          v139 = v125;
          sub_1000C22B0((uint64_t)&v139);
        }
        swift_bridgeObjectRelease_n(v12, 2);
        swift_bridgeObjectRelease(v11);
        swift_bridgeObjectRelease_n(v66, 2);
        swift_bridgeObjectRelease(v97);
        swift_bridgeObjectRelease_n(v65, 2);
        swift_bridgeObjectRelease(v96);
        swift_bridgeObjectRelease_n(v67, 2);
        swift_bridgeObjectRelease(v88);
        swift_bridgeObjectRelease(v64);
        sub_1000C22B0((uint64_t)v141);
        v63 = v64;
      }
      else
      {
        swift_bridgeObjectRetain(v82);
        sub_100018B78((uint64_t)v141);
        swift_bridgeObjectRetain(v12);
        swift_bridgeObjectRetain(v95);
        swift_bridgeObjectRetain(v99);
        swift_bridgeObjectRelease(v85);
        swift_bridgeObjectRelease(v81);
        swift_bridgeObjectRelease(v83);
        swift_bridgeObjectRelease(v84);
        v140 = v128;
        sub_1000C22B0((uint64_t)&v140);
        sub_1000C22B0((uint64_t)v141);
        v139 = v125;
        sub_1000C22B0((uint64_t)&v139);
        swift_bridgeObjectRelease(v88);
        swift_bridgeObjectRelease_n(v12, 2);
        swift_bridgeObjectRelease(v11);
        swift_bridgeObjectRelease_n(v99, 2);
        swift_bridgeObjectRelease(v97);
        swift_bridgeObjectRelease_n(v95, 2);
        swift_bridgeObjectRelease(v96);
        swift_bridgeObjectRelease(v82);
        sub_1000C22B0((uint64_t)v141);
        v63 = v82;
      }
    }
    else
    {
      swift_bridgeObjectRetain(v82);
      sub_100018B78((uint64_t)v141);
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRetain(v95);
      swift_bridgeObjectRelease(v85);
      swift_bridgeObjectRelease(v81);
      swift_bridgeObjectRelease(v83);
      swift_bridgeObjectRelease(v84);
      v140 = v128;
      sub_1000C22B0((uint64_t)&v140);
      sub_1000C22B0((uint64_t)v141);
      v139 = v125;
      sub_1000C22B0((uint64_t)&v139);
      swift_bridgeObjectRelease(v97);
      swift_bridgeObjectRelease_n(v12, 2);
      swift_bridgeObjectRelease(v11);
      swift_bridgeObjectRelease_n(v95, 2);
      swift_bridgeObjectRelease(v96);
      swift_bridgeObjectRelease(v88);
      swift_bridgeObjectRelease(v82);
      swift_bridgeObjectRelease(v93);
      sub_1000C22B0((uint64_t)v141);
      v63 = v82;
    }
  }
  else
  {
    swift_bridgeObjectRetain(v82);
    sub_100018B78((uint64_t)v141);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRelease(v85);
    swift_bridgeObjectRelease(v81);
    swift_bridgeObjectRelease(v83);
    swift_bridgeObjectRelease(v84);
    v140 = v128;
    sub_1000C22B0((uint64_t)&v140);
    sub_1000C22B0((uint64_t)v141);
    v139 = v125;
    sub_1000C22B0((uint64_t)&v139);
    swift_bridgeObjectRelease(v96);
    swift_bridgeObjectRelease_n(v12, 2);
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(v97);
    swift_bridgeObjectRelease(v88);
    swift_bridgeObjectRelease(v82);
    swift_bridgeObjectRelease(v93);
    swift_bridgeObjectRelease(v99);
    sub_1000C22B0((uint64_t)v141);
    v63 = v82;
  }
LABEL_65:
  swift_bridgeObjectRelease(v63);
}

__n128 initializeBufferWithCopyOfBuffer for RectangleLabelData(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_QWORD *)(a1 + 13) = *(_QWORD *)(a2 + 13);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for RectangleLabelData(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 21))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for RectangleLabelData(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 21) = v3;
  return result;
}

ValueMetadata *type metadata accessor for RectangleLabelData()
{
  return &type metadata for RectangleLabelData;
}

uint64_t destroy for LabelProperties(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 64));
}

uint64_t initializeWithCopy for LabelProperties(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v4;
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *assignWithCopy for LabelProperties(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  v3 = a2[8];
  v4 = a1[8];
  a1[8] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

__n128 initializeWithTake for LabelProperties(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for LabelProperties(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v4 = *(_QWORD *)(a2 + 64);
  v5 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v4;
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for LabelProperties(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 64);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LabelProperties(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 64) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LabelProperties()
{
  return &type metadata for LabelProperties;
}

__n128 initializeWithCopy for LabelRender.TargetAnimation(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for LabelRender.TargetAnimation(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 36))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = v3 >= 4;
  v5 = v3 - 4;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for LabelRender.TargetAnimation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 36) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 36) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = a2 + 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for LabelRender.TargetAnimation()
{
  return &type metadata for LabelRender.TargetAnimation;
}

uint64_t storeEnumTagSinglePayload for LabelRender.SelectionState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1000B6C4C + 4 * byte_1003B4F1C[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1000B6C80 + 4 * byte_1003B4F17[v4]))();
}

uint64_t sub_1000B6C80(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B6C88(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000B6C90);
  return result;
}

uint64_t sub_1000B6C9C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000B6CA4);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1000B6CA8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B6CB0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LabelRender.SelectionState()
{
  return &type metadata for LabelRender.SelectionState;
}

void destroy for LabelRender.AttributedText(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));

}

_QWORD *initializeWithCopy for LabelRender.AttributedText(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  id v7;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = (void *)a2[2];
  v5 = (void *)a2[3];
  a1[2] = v4;
  a1[3] = v5;
  swift_bridgeObjectRetain(v3);
  v6 = v4;
  v7 = v5;
  return a1;
}

_QWORD *assignWithCopy for LabelRender.AttributedText(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = (void *)a2[2];
  v7 = (void *)a1[2];
  a1[2] = v6;
  v8 = v6;

  v9 = (void *)a1[3];
  v10 = (void *)a2[3];
  a1[3] = v10;
  v11 = v10;

  return a1;
}

_QWORD *assignWithTake for LabelRender.AttributedText(_QWORD *a1, uint64_t a2)
{
  void *v4;
  void *v5;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = (void *)a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);

  v5 = (void *)a1[3];
  a1[3] = *(_QWORD *)(a2 + 24);

  return a1;
}

uint64_t getEnumTagSinglePayload for LabelRender.AttributedText(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LabelRender.AttributedText(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LabelRender.AttributedText()
{
  return &type metadata for LabelRender.AttributedText;
}

uint64_t storeEnumTagSinglePayload for LabelType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1000B6EEC + 4 * byte_1003B4F26[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000B6F20 + 4 * byte_1003B4F21[v4]))();
}

uint64_t sub_1000B6F20(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B6F28(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000B6F30);
  return result;
}

uint64_t sub_1000B6F3C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000B6F44);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000B6F48(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B6F50(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LabelType()
{
  return &type metadata for LabelType;
}

unint64_t sub_1000B6F70()
{
  unint64_t result;

  result = qword_100481970;
  if (!qword_100481970)
  {
    result = swift_getWitnessTable(&unk_1003B51AC, &type metadata for LabelType);
    atomic_store(result, (unint64_t *)&qword_100481970);
  }
  return result;
}

unint64_t sub_1000B6FB8()
{
  unint64_t result;

  result = qword_100481978;
  if (!qword_100481978)
  {
    result = swift_getWitnessTable(&unk_1003B524C, &type metadata for LabelRender.SelectionState);
    atomic_store(result, (unint64_t *)&qword_100481978);
  }
  return result;
}

unint64_t sub_1000B6FFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  float *v3;
  float v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  BOOL v9;
  unint64_t result;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_lastPositionsOnLine);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
  {
    v4 = 0.0;
    return LODWORD(v4) | ((unint64_t)(v2 == 0) << 32);
  }
  v3 = (float *)(v1 + 32);
  if (v2 == 1)
  {
    v4 = *v3;
    return LODWORD(v4) | ((unint64_t)(v2 == 0) << 32);
  }
  v5 = 0;
  v6 = 0;
  v7 = 0.0;
  v8 = v2;
  while (*v3 != -1.0)
  {
    v9 = __OFADD__(v5++, 1);
    if (v9)
      goto LABEL_16;
    v7 = v7 + *v3;
LABEL_6:
    ++v3;
    if (!--v8)
    {
      v4 = v7 / (float)v5;
      return LODWORD(v4) | ((unint64_t)(v2 == 0) << 32);
    }
  }
  v9 = __OFADD__(v6++, 1);
  if (!v9)
  {
    if ((float)((float)v2 * 0.5) <= (float)v6)
    {
      v4 = -1.0;
      return LODWORD(v4) | ((unint64_t)(v2 == 0) << 32);
    }
    goto LABEL_6;
  }
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

void sub_1000B70D0(uint64_t a1)
{
  void *v2;
  __int128 v3;
  __int128 v4;
  id v5;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  _QWORD v15[3];
  _OWORD v16[4];
  uint64_t v17;

  *(_BYTE *)(a1 + OBJC_IVAR____TtC7Measure11LabelRender_selectionState) = 1;
  *(_QWORD *)(a1 + OBJC_IVAR____TtC7Measure11LabelRender_desiredAlpha) = 0;
  if ((objc_msgSend((id)objc_opt_self(Gestalt), "jasperAvailable") & 1) == 0)
  {
    v2 = *(void **)(a1 + OBJC_IVAR____TtC7Measure11LabelRender_transitionLabel);
    if (!v2)
    {
      __break(1u);
      return;
    }
    v3 = *(_OWORD *)(a1 + OBJC_IVAR____TtC7Measure11LabelRender_currentProperties + 48);
    v16[2] = *(_OWORD *)(a1 + OBJC_IVAR____TtC7Measure11LabelRender_currentProperties + 32);
    v16[3] = v3;
    v17 = *(_QWORD *)(a1 + OBJC_IVAR____TtC7Measure11LabelRender_currentProperties + 64);
    v4 = *(_OWORD *)(a1 + OBJC_IVAR____TtC7Measure11LabelRender_currentProperties + 16);
    v16[0] = *(_OWORD *)(a1 + OBJC_IVAR____TtC7Measure11LabelRender_currentProperties);
    v16[1] = v4;
    v5 = v2;
    sub_1000A2ECC((uint64_t)v16);
    sub_1000A05C0((uint64_t)v16, 0, 0);
    sub_1000A2FE4((uint64_t)v16);

  }
  sub_1000ADB38(*(_QWORD *)(a1 + OBJC_IVAR____TtC7Measure11LabelRender_state));
  sub_1000B5840();
  Strong = swift_unknownObjectWeakLoadStrong(a1 + OBJC_IVAR____TtC7Measure11LabelRender_delegate, v6);
  if (Strong)
  {
    v8 = Strong;
    sub_1000C5E9C(*(_QWORD *)(a1 + OBJC_IVAR____TtC7Measure11LabelRender_measurementID), *(_QWORD *)(a1 + OBJC_IVAR____TtC7Measure11LabelRender_measurementID + 8));
    swift_unknownObjectRelease(v8);
  }
  if (qword_10047AA98 != -1)
    swift_once(&qword_10047AA98, sub_1000E15B4);
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease(0xE000000000000000);
  v15[0] = 0xD00000000000001FLL;
  v15[1] = 0x80000001003DDAB0;
  v9 = a1 + OBJC_IVAR____TtC7Measure11LabelRender_measurementID;
  v10 = *(_QWORD *)(a1 + OBJC_IVAR____TtC7Measure11LabelRender_measurementID);
  v11 = *(void **)(v9 + 8);
  swift_bridgeObjectRetain(v11);
  v12._countAndFlagsBits = v10;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(v11);
  v13._countAndFlagsBits = 0xD00000000000001FLL;
  v13._object = (void *)0x80000001003DDAB0;
  Log.default(_:isPrivate:)(v13, 0);
  swift_bridgeObjectRelease(0x80000001003DDAB0);
  if (qword_10047AB68 != -1)
    swift_once(&qword_10047AB68, sub_10011E814);
  v14 = qword_1004AF6B8 + OBJC_IVAR____TtC7Measure14MetricsManager_measurementState;
  swift_beginAccess(qword_1004AF6B8 + OBJC_IVAR____TtC7Measure14MetricsManager_measurementState, v15, 1, 0);
  *(double *)(v14 + 48) = *(double *)(v14 + 48) + 1.0;
}

void sub_1000B730C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t Strong;
  _BYTE *v4;
  double v5;
  double v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  id v13;
  double v14;
  float64x2_t v15;
  float64_t v16;
  id v17;
  NSString v18;
  unint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  double v24;
  uint64_t v25;
  id v26;
  UIContentSizeCategory v27;
  char v28;
  double v29;
  void *v30;
  id v31;
  double v32;
  double v33;
  id v34;
  double v35;
  double v36;
  double v37;
  double v38;
  uint64_t v39;
  UIContentSizeCategory v40;
  char v41;
  void *v42;
  id v43;
  id v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  id v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  double v55;
  void *v56;
  double v57;
  void *v58;
  UIContentSizeCategory v59;
  id v60;
  id v61;
  char v62;
  id v63;
  double v64;
  double v65;
  double v66;
  float64_t v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE v70[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v70, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1, v2);
  if (Strong)
  {
    v4 = (_BYTE *)Strong;
    v5 = *(double *)(Strong + OBJC_IVAR____TtC7Measure11LabelRender_labelSize);
    v6 = *(double *)(Strong + OBJC_IVAR____TtC7Measure11LabelRender_labelSize + 8);
    v7 = OBJC_IVAR____TtC7Measure11LabelRender_state;
    v8 = *(_QWORD *)(Strong + OBJC_IVAR____TtC7Measure11LabelRender_state);
    v9 = v8 > 5;
    v10 = (1 << v8) & 0x25;
    v11 = v9 || v10 == 0;
    if (!v11 && (*(_BYTE *)(Strong + OBJC_IVAR____TtC7Measure11LabelRender_capturing) & 1) == 0)
    {
      if (qword_10047AE90 != -1)
        swift_once(&qword_10047AE90, sub_100195F44);
      v5 = v5 + *(double *)&qword_1004AF988 + *(double *)&qword_1004AF988;
    }
    v12 = OBJC_IVAR____TtC7Measure11LabelRender_labelContainer;
    objc_msgSend(*(id *)&v4[OBJC_IVAR____TtC7Measure11LabelRender_labelContainer], "setSize:", v5, v6 + 1.0);
    v13 = *(id *)&v4[v12];
    objc_msgSend(v13, "size");
    v67 = v14;
    objc_msgSend(*(id *)&v4[v12], "size");
    v15.f64[0] = v67;
    v15.f64[1] = v16;
    v17 = objc_msgSend((id)objc_opt_self(SKAttributeValue), "valueWithVectorFloat2:", COERCE_DOUBLE(vcvt_f32_f64(v15)));
    v18 = String._bridgeToObjectiveC()();
    objc_msgSend(v13, "setValue:forAttributeNamed:", v17, v18);

    v19 = *(_QWORD *)&v4[v7];
    if (v19 <= 5 && ((1 << v19) & 0x25) != 0 && (v4[OBJC_IVAR____TtC7Measure11LabelRender_capturing] & 1) == 0)
    {
      v21 = OBJC_IVAR____TtC7Measure11LabelRender_labelChevron;
      objc_msgSend(*(id *)&v4[OBJC_IVAR____TtC7Measure11LabelRender_labelChevron], "setHidden:", 0);
      v22 = qword_10047AE88;
      v23 = *(id *)&v4[v21];
      if (v22 != -1)
        swift_once(&qword_10047AE88, sub_100195DEC);
      v68 = OBJC_IVAR____TtC7Measure11LabelRender_labelFontMetrics;
      v24 = *(double *)&qword_1004AF980;
      v25 = qword_10047A738;
      v26 = *(id *)&v4[OBJC_IVAR____TtC7Measure11LabelRender_labelFontMetrics];
      if (v25 != -1)
        swift_once(&qword_10047A738, sub_10000E4DC);
      v27 = (UIContentSizeCategory)(id)qword_1004AF068;
      v28 = static UIContentSizeCategory.> infix(_:_:)(v27, UIContentSizeCategoryAccessibilityLarge);

      if ((v28 & 1) != 0)
      {

        v27 = UIContentSizeCategoryAccessibilityLarge;
      }
      v29 = v5 * 0.5;
      v30 = (void *)objc_opt_self(UITraitCollection);
      v31 = objc_msgSend(v30, "traitCollectionWithPreferredContentSizeCategory:", v27);

      objc_msgSend(v26, "scaledValueForValue:compatibleWithTraitCollection:", v31, v24);
      v33 = v32;

      objc_msgSend(v23, "setPosition:", v29 - v33, 0.0);
      v34 = *(id *)&v4[v21];
      objc_msgSend(v34, "size");
      v36 = v35;
      v38 = v37;
      if (qword_10047AE50 != -1)
        swift_once(&qword_10047AE50, sub_100195CE8);
      v39 = qword_1004AF948;
      v40 = (UIContentSizeCategory)(id)qword_1004AF068;
      v41 = static UIContentSizeCategory.> infix(_:_:)(v40, UIContentSizeCategoryAccessibilityLarge);

      if ((v41 & 1) != 0)
      {

        v40 = UIContentSizeCategoryAccessibilityLarge;
      }
      v42 = (void *)objc_opt_self(UIFont);
      v43 = objc_msgSend(v30, "traitCollectionWithPreferredContentSizeCategory:", v40);

      v44 = objc_msgSend(v42, "preferredFontForTextStyle:compatibleWithTraitCollection:", v39, v43);
      objc_msgSend(v44, "pointSize");
      v46 = v45;

      v47 = static CGSize.* infix(_:_:)(v36, v38, v46 * 0.9);
      v49 = v48;
      v50 = objc_msgSend(*(id *)&v4[v21], "size");
      static CGSize./ infix(_:_:)(v50, v47, v49, v51);
      objc_msgSend(v34, "setSize:");

      v52 = OBJC_IVAR____TtC7Measure11LabelRender_labelText;
      v53 = qword_10047AE90;
      v54 = *(id *)&v4[OBJC_IVAR____TtC7Measure11LabelRender_labelText];
      if (v53 != -1)
        swift_once(&qword_10047AE90, sub_100195F44);
      v55 = -*(double *)&qword_1004AF988;
      objc_msgSend(v54, "position", v68);
      objc_msgSend(v54, "setPosition:", v55);

      if (v4[OBJC_IVAR____TtC7Measure11LabelRender_chevronOnLeft] != 1)
        goto LABEL_31;
      v56 = *(void **)&v4[v21];
      v57 = *(double *)&qword_1004AF980;
      v58 = *(void **)&v4[v69];
      v59 = (UIContentSizeCategory)(id)qword_1004AF068;
      v60 = v56;
      v61 = v58;
      v62 = static UIContentSizeCategory.> infix(_:_:)(v59, UIContentSizeCategoryAccessibilityLarge);

      if ((v62 & 1) != 0)
      {

        v59 = UIContentSizeCategoryAccessibilityLarge;
      }
      v63 = objc_msgSend(v30, "traitCollectionWithPreferredContentSizeCategory:", v59);

      objc_msgSend(v61, "scaledValueForValue:compatibleWithTraitCollection:", v63, v57);
      v65 = v64;

      objc_msgSend(v60, "setPosition:", v65 - v29, 0.0);
      v66 = *(double *)&qword_1004AF988;
      v20 = *(id *)&v4[v52];
      objc_msgSend(v20, "position");
      objc_msgSend(v20, "setPosition:", v66);
    }
    else
    {
      objc_msgSend(*(id *)&v4[OBJC_IVAR____TtC7Measure11LabelRender_labelChevron], "setHidden:", 1);
      v20 = *(id *)&v4[OBJC_IVAR____TtC7Measure11LabelRender_labelText];
      objc_msgSend(v20, "position");
      objc_msgSend(v20, "setPosition:", 0.0);
    }

    v4 = v20;
LABEL_31:

  }
}

BOOL sub_1000B7944(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(double *__return_ptr, __n128);
  __n128 v4;
  void (*v5)(_QWORD *__return_ptr, __n128);
  __n128 v6;
  uint64_t v7;
  CGPoint v8;
  CGFloat y;
  __n128 v11;
  __n128 v12;
  __n128 v13;
  __n128 v14;
  _QWORD v16[64];
  _OWORD __dst[32];
  double __src[64];

  type metadata accessor for MeasureCamera(0);
  v2 = OBJC_IVAR____TtC7Measure11LabelRender__render;
  v3 = *(void (**)(double *__return_ptr, __n128))(**(_QWORD **)(v1
                                                                         + OBJC_IVAR____TtC7Measure11LabelRender__render)
                                                           + 144);
  v4 = swift_retain();
  v3(__src, v4);
  swift_release();
  memcpy(__dst, __src, 0x1F8uLL);
  sub_100036264((uint64_t)__dst);
  v13 = (__n128)__dst[11];
  v14 = (__n128)__dst[10];
  v11 = (__n128)__dst[13];
  v12 = (__n128)__dst[12];
  v5 = *(void (**)(_QWORD *__return_ptr, __n128))(**(_QWORD **)(v1 + v2) + 144);
  v6 = swift_retain();
  v5(v16, v6);
  swift_release();
  memcpy(__src, v16, 0x1F8uLL);
  v7 = sub_100036264((uint64_t)__src);
  v8 = (CGPoint)vcvtq_f64_f32(COERCE_FLOAT32X2_T(static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)(v7, a1, v14, v13, v12, v11, __src[2])));
  y = v8.y;
  return CGRectContainsPoint(*(CGRect *)(v1 + OBJC_IVAR____TtC7Measure11LabelRender_labelSafeArea), v8);
}

uint64_t sub_1000B7A5C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  *a2 = v2;
  return swift_retain(v2);
}

uint64_t sub_1000B7A6C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 176);
  *a2 = v2;
  return swift_retain(v2);
}

uint64_t sub_1000B7A7C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 88);
  *a2 = v2;
  return swift_retain(v2);
}

uint64_t sub_1000B7A8C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 288);
  *a2 = v2;
  return swift_retain(v2);
}

void sub_1000B7A9C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  _QWORD *v26;
  unint64_t v27;
  int64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  Swift::Int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  int64_t v45;
  _QWORD *v46;
  uint64_t v47;
  int v48;
  uint64_t (*v49)(_QWORD);
  _QWORD v50[9];

  v6 = v4;
  v49 = a3;
  v9 = a3(0);
  v47 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v43 - v10;
  v12 = *v6;
  if (*(_QWORD *)(*v6 + 24) > a1)
    a1 = *(_QWORD *)(*v6 + 24);
  sub_10000EDC8(a4);
  v48 = a2;
  v13 = static _DictionaryStorage.resize(original:capacity:move:)(v12, a1, a2);
  v14 = v13;
  if (!*(_QWORD *)(v12 + 16))
    goto LABEL_43;
  v15 = 1 << *(_BYTE *)(v12 + 32);
  v16 = *(_QWORD *)(v12 + 64);
  v46 = (_QWORD *)(v12 + 64);
  if (v15 < 64)
    v17 = ~(-1 << v15);
  else
    v17 = -1;
  v18 = v17 & v16;
  v44 = v6;
  v45 = (unint64_t)(v15 + 63) >> 6;
  v19 = v13 + 64;
  swift_retain(v12);
  v20 = 0;
  while (1)
  {
    if (v18)
    {
      v23 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v24 = v23 | (v20 << 6);
      goto LABEL_24;
    }
    v25 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v25 >= v45)
      break;
    v26 = v46;
    v27 = v46[v25];
    ++v20;
    if (!v27)
    {
      v20 = v25 + 1;
      if (v25 + 1 >= v45)
        goto LABEL_36;
      v27 = v46[v20];
      if (!v27)
      {
        v28 = v25 + 2;
        if (v28 >= v45)
        {
LABEL_36:
          swift_release(v12);
          v6 = v44;
          if ((v48 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v27 = v46[v28];
        if (!v27)
        {
          while (1)
          {
            v20 = v28 + 1;
            if (__OFADD__(v28, 1))
              goto LABEL_45;
            if (v20 >= v45)
              goto LABEL_36;
            v27 = v46[v20];
            ++v28;
            if (v27)
              goto LABEL_23;
          }
        }
        v20 = v28;
      }
    }
LABEL_23:
    v18 = (v27 - 1) & v27;
    v24 = __clz(__rbit64(v27)) + (v20 << 6);
LABEL_24:
    v29 = (uint64_t *)(*(_QWORD *)(v12 + 48) + 16 * v24);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(v47 + 72);
    v33 = *(_QWORD *)(v12 + 56) + v32 * v24;
    if ((v48 & 1) != 0)
    {
      sub_10006CAB4(v33, (uint64_t)v11, v49);
    }
    else
    {
      sub_100036344(v33, (uint64_t)v11, v49);
      swift_bridgeObjectRetain(v30);
    }
    Hasher.init(_seed:)(v50);
    String.hash(into:)(v50, v31, v30);
    v34 = Hasher._finalize()();
    v35 = -1 << *(_BYTE *)(v14 + 32);
    v36 = v34 & ~v35;
    v37 = v36 >> 6;
    if (((-1 << v36) & ~*(_QWORD *)(v19 + 8 * (v36 >> 6))) != 0)
    {
      v21 = __clz(__rbit64((-1 << v36) & ~*(_QWORD *)(v19 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v38 = 0;
      v39 = (unint64_t)(63 - v35) >> 6;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v40 = v37 == v39;
        if (v37 == v39)
          v37 = 0;
        v38 |= v40;
        v41 = *(_QWORD *)(v19 + 8 * v37);
      }
      while (v41 == -1);
      v21 = __clz(__rbit64(~v41)) + (v37 << 6);
    }
    *(_QWORD *)(v19 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    v22 = (_QWORD *)(*(_QWORD *)(v14 + 48) + 16 * v21);
    *v22 = v31;
    v22[1] = v30;
    sub_10006CAB4((uint64_t)v11, *(_QWORD *)(v14 + 56) + v32 * v21, v49);
    ++*(_QWORD *)(v14 + 16);
  }
  swift_release(v12);
  v6 = v44;
  v26 = v46;
  if ((v48 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v42 = 1 << *(_BYTE *)(v12 + 32);
  if (v42 >= 64)
    bzero(v26, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v26 = -1 << v42;
  *(_QWORD *)(v12 + 16) = 0;
LABEL_43:
  swift_release(v12);
  *v6 = v14;
}

void sub_1000B7E10(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  _QWORD *v18;
  unint64_t v19;
  int64_t v20;
  void *v21;
  _OWORD *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];
  _OWORD v40[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10000EDC8(&qword_10047C108);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v36 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain();
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v16 = v15 | (v13 << 6);
      goto LABEL_25;
    }
    v17 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return;
    }
    if (v17 >= v36)
      break;
    v18 = (_QWORD *)(v5 + 64);
    v19 = *(_QWORD *)(v37 + 8 * v17);
    ++v13;
    if (!v19)
    {
      v13 = v17 + 1;
      if (v17 + 1 >= v36)
        goto LABEL_37;
      v19 = *(_QWORD *)(v37 + 8 * v13);
      if (!v19)
      {
        v20 = v17 + 2;
        if (v20 >= v36)
        {
LABEL_37:
          swift_release();
          if ((v38 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v19 = *(_QWORD *)(v37 + 8 * v20);
        if (!v19)
        {
          while (1)
          {
            v13 = v20 + 1;
            if (__OFADD__(v20, 1))
              goto LABEL_46;
            if (v13 >= v36)
              goto LABEL_37;
            v19 = *(_QWORD *)(v37 + 8 * v13);
            ++v20;
            if (v19)
              goto LABEL_24;
          }
        }
        v13 = v20;
      }
    }
LABEL_24:
    v11 = (v19 - 1) & v19;
    v16 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_25:
    v21 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v16);
    v22 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v16);
    if ((v38 & 1) != 0)
    {
      sub_100020848(v22, v40);
    }
    else
    {
      sub_10004F88C((uint64_t)v22, (uint64_t)v40);
      v23 = v21;
    }
    v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v26 = v25;
    Hasher.init(_seed:)(v39);
    String.hash(into:)(v39, v24, v26);
    v27 = Hasher._finalize()();
    swift_bridgeObjectRelease(v26);
    v28 = -1 << *(_BYTE *)(v8 + 32);
    v29 = v27 & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v12 + 8 * (v29 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v12 + 8 * v30);
      }
      while (v34 == -1);
      v14 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v14) = v21;
    sub_100020848(v40, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v14));
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v18 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v18, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v18 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  swift_release();
  *v3 = v8;
}

void sub_1000B8148(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  Swift::UInt v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  _QWORD *v36;
  char v37;
  __int128 v38;
  uint64_t v39[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10000EDC8(&qword_100481A50);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v34 = v3;
    v9 = 0;
    v36 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v10 + 63) >> 6;
    v13 = v7 + 64;
    while (1)
    {
      if (v12)
      {
        v20 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v21 = v20 | (v9 << 6);
      }
      else
      {
        v22 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return;
        }
        if (v22 >= v35)
          goto LABEL_36;
        v23 = v36[v22];
        ++v9;
        if (!v23)
        {
          v9 = v22 + 1;
          if (v22 + 1 >= v35)
            goto LABEL_36;
          v23 = v36[v9];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v35)
            {
LABEL_36:
              if ((v37 & 1) == 0)
              {
                swift_release(v5);
                v3 = v34;
                goto LABEL_43;
              }
              v33 = 1 << *(_BYTE *)(v5 + 32);
              if (v33 >= 64)
                bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v36 = -1 << v33;
              v3 = v34;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v23 = v36[v24];
            if (!v23)
            {
              while (1)
              {
                v9 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_45;
                if (v9 >= v35)
                  goto LABEL_36;
                v23 = v36[v9];
                ++v24;
                if (v23)
                  goto LABEL_33;
              }
            }
            v9 = v24;
          }
        }
LABEL_33:
        v12 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v9 << 6);
      }
      v29 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v21);
      v30 = *(_QWORD *)(v5 + 56) + 24 * v21;
      v38 = *(_OWORD *)v30;
      v31 = *(_QWORD *)(v30 + 16);
      if ((v37 & 1) == 0)
      {
        v32 = (id)v38;
        swift_retain(v31);
      }
      Hasher.init(_seed:)(v39);
      Hasher._combine(_:)(v29);
      v14 = Hasher._finalize()();
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = v14 & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v13 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v13 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v27 = v17 == v26;
          if (v17 == v26)
            v17 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v13 + 8 * v17);
        }
        while (v28 == -1);
        v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }
      *(_QWORD *)(v13 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(_BYTE *)(*(_QWORD *)(v8 + 48) + v18) = v29;
      v19 = *(_QWORD *)(v8 + 56) + 24 * v18;
      *(_OWORD *)v19 = v38;
      *(_QWORD *)(v19 + 16) = v31;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release(v5);
LABEL_43:
  *v3 = v8;
}

void sub_1000B844C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  Swift::UInt v21;
  char v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  char v33;
  _QWORD *v34;
  uint64_t v35[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10000EDC8(&qword_1004819E0);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v33 = a2;
    v32 = v3;
    v9 = 0;
    v34 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = v7 + 64;
    while (1)
    {
      if (v12)
      {
        v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v17 = v16 | (v9 << 6);
      }
      else
      {
        v18 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return;
        }
        if (v18 >= v13)
          goto LABEL_34;
        v19 = v34[v18];
        ++v9;
        if (!v19)
        {
          v9 = v18 + 1;
          if (v18 + 1 >= v13)
            goto LABEL_34;
          v19 = v34[v9];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_34:
              if ((v33 & 1) == 0)
              {
                swift_release(v5);
                v3 = v32;
                goto LABEL_41;
              }
              v31 = 1 << *(_BYTE *)(v5 + 32);
              if (v31 >= 64)
                bzero(v34, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v34 = -1 << v31;
              v3 = v32;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                v9 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_43;
                if (v9 >= v13)
                  goto LABEL_34;
                v19 = v34[v9];
                ++v20;
                if (v19)
                  goto LABEL_24;
              }
            }
            v9 = v20;
          }
        }
LABEL_24:
        v12 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v9 << 6);
      }
      v21 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v17);
      v22 = *(_BYTE *)(*(_QWORD *)(v5 + 56) + v17);
      Hasher.init(_seed:)(v35);
      Hasher._combine(_:)(v21);
      v23 = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v8 + 32);
      v25 = v23 & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v14 + 8 * (v25 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v14 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v14 + 8 * v26);
        }
        while (v30 == -1);
        v15 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_BYTE *)(*(_QWORD *)(v8 + 48) + v15) = v21;
      *(_BYTE *)(*(_QWORD *)(v8 + 56) + v15) = v22;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release(v5);
LABEL_41:
  *v3 = v8;
}

void sub_1000B8710(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10000EDC8(&qword_100481A28);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v9 = (_QWORD *)(v5 + 64);
    v10 = -1;
    if (v8 < 64)
      v10 = ~(-1 << v8);
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v8 + 63) >> 6;
    swift_retain(v5);
    v13 = 0;
    while (1)
    {
      if (v11)
      {
        v14 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v15 = v14 | (v13 << 6);
      }
      else
      {
        v16 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
          __break(1u);
LABEL_30:
          __break(1u);
          return;
        }
        if (v16 >= v12)
          goto LABEL_23;
        v17 = v9[v16];
        ++v13;
        if (!v17)
        {
          v13 = v16 + 1;
          if (v16 + 1 >= v12)
            goto LABEL_23;
          v17 = v9[v13];
          if (!v17)
          {
            v18 = v16 + 2;
            if (v18 >= v12)
            {
LABEL_23:
              swift_release(v5);
              if ((a2 & 1) != 0)
              {
                v19 = 1 << *(_BYTE *)(v5 + 32);
                if (v19 > 63)
                  bzero((void *)(v5 + 64), ((unint64_t)(v19 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v9 = -1 << v19;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v17 = v9[v18];
            if (!v17)
            {
              while (1)
              {
                v13 = v18 + 1;
                if (__OFADD__(v18, 1))
                  goto LABEL_30;
                if (v13 >= v12)
                  goto LABEL_23;
                v17 = v9[v13];
                ++v18;
                if (v17)
                  goto LABEL_22;
              }
            }
            v13 = v18;
          }
        }
LABEL_22:
        v11 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v13 << 6);
      }
      sub_1000BE030(*(_BYTE *)(*(_QWORD *)(v5 + 48) + v15), *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v15), v7);
    }
  }
  swift_release(v5);
  *v3 = v7;
}

void sub_1000B88D0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10000EDC8(&qword_1004819E8);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v37 = v3;
    v9 = 0;
    v10 = (uint64_t *)(v5 + 64);
    v11 = 1 << *(_BYTE *)(v5 + 32);
    v35 = -1 << v11;
    v36 = v11;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v5 + 64);
    v38 = (unint64_t)(v11 + 63) >> 6;
    v14 = v7 + 64;
    while (1)
    {
      if (v13)
      {
        v22 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v23 = v22 | (v9 << 6);
      }
      else
      {
        v24 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
          return;
        }
        if (v24 >= v38)
          goto LABEL_39;
        v25 = v10[v24];
        ++v9;
        if (!v25)
        {
          v9 = v24 + 1;
          if (v24 + 1 >= v38)
            goto LABEL_39;
          v25 = v10[v9];
          if (!v25)
          {
            v26 = v24 + 2;
            if (v26 >= v38)
            {
LABEL_39:
              if ((a2 & 1) == 0)
              {
                swift_release(v5);
                v3 = v37;
                goto LABEL_46;
              }
              if (v36 >= 64)
                bzero((void *)(v5 + 64), 8 * v38);
              else
                *v10 = v35;
              v3 = v37;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v25 = v10[v26];
            if (!v25)
            {
              while (1)
              {
                v9 = v26 + 1;
                if (__OFADD__(v26, 1))
                  goto LABEL_48;
                if (v9 >= v38)
                  goto LABEL_39;
                v25 = v10[v9];
                ++v26;
                if (v25)
                  goto LABEL_36;
              }
            }
            v9 = v26;
          }
        }
LABEL_36:
        v13 = (v25 - 1) & v25;
        v23 = __clz(__rbit64(v25)) + (v9 << 6);
      }
      v31 = 8 * v23;
      v32 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v31);
      v33 = *(void **)(*(_QWORD *)(v5 + 56) + v31);
      if ((a2 & 1) == 0)
        v34 = v33;
      if ((v32 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v15 = v32;
      else
        v15 = 0;
      v16 = static Hasher._hash(seed:_:)(*(_QWORD *)(v8 + 40), v15);
      v17 = -1 << *(_BYTE *)(v8 + 32);
      v18 = v16 & ~v17;
      v19 = v18 >> 6;
      if (((-1 << v18) & ~*(_QWORD *)(v14 + 8 * (v18 >> 6))) != 0)
      {
        v20 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v14 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v17) >> 6;
        do
        {
          if (++v19 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_47;
          }
          v29 = v19 == v28;
          if (v19 == v28)
            v19 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v14 + 8 * v19);
        }
        while (v30 == -1);
        v20 = __clz(__rbit64(~v30)) + (v19 << 6);
      }
      *(_QWORD *)(v14 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      v21 = 8 * v20;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + v21) = v32;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + v21) = v33;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release(v5);
LABEL_46:
  *v3 = v8;
}

void sub_1000B8B84(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __n128 v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;

  v5 = type metadata accessor for UUID(0);
  v46 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = v2;
  v8 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_10000EDC8(&qword_100481A88);
  v9 = static _DictionaryStorage.resize(original:capacity:move:)(v8, a1, a2);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
    swift_release(v8);
    v39 = v42;
LABEL_44:
    *v39 = v10;
    return;
  }
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 64);
  v44 = (_QWORD *)(v8 + 64);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v43 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 64;
  v16 = swift_retain(v8);
  v17 = 0;
  HIDWORD(v41) = a2;
  v18 = 16;
  if ((a2 & 1) != 0)
    v18 = 32;
  v45 = v18;
  while (1)
  {
    if (v14)
    {
      v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v21 = v20 | (v17 << 6);
      goto LABEL_26;
    }
    v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    if (v22 >= v43)
    {
      swift_release(v8);
      v39 = v42;
      v23 = v44;
      if ((v41 & 0x100000000) != 0)
      {
LABEL_39:
        v40 = 1 << *(_BYTE *)(v8 + 32);
        if (v40 >= 64)
          bzero(v23, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
        else
          *v23 = -1 << v40;
        *(_QWORD *)(v8 + 16) = 0;
      }
LABEL_43:
      swift_release(v8);
      goto LABEL_44;
    }
    v23 = v44;
    v24 = v44[v22];
    ++v17;
    if (!v24)
    {
      v17 = v22 + 1;
      if (v22 + 1 >= v43)
        goto LABEL_36;
      v24 = v44[v17];
      if (!v24)
        break;
    }
LABEL_25:
    v14 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_26:
    v26 = *(_QWORD *)(v46 + 72);
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v46 + v45))(v7, *(_QWORD *)(v8 + 48) + v26 * v21, v5, v16);
    v27 = v8;
    v28 = *(_BYTE *)(*(_QWORD *)(v8 + 56) + v21);
    v29 = *(_QWORD *)(v10 + 40);
    v30 = sub_10000C4B0(&qword_100480278, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v31 = dispatch thunk of Hashable._rawHashValue(seed:)(v29, v5, v30);
    v32 = -1 << *(_BYTE *)(v10 + 32);
    v33 = v31 & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v15 + 8 * (v33 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v15 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v15 + 8 * v34);
      }
      while (v38 == -1);
      v19 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v15 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    (*(void (**)(unint64_t, char *, uint64_t))(v46 + 32))(*(_QWORD *)(v10 + 48) + v26 * v19, v7, v5);
    *(_BYTE *)(*(_QWORD *)(v10 + 56) + v19) = v28;
    ++*(_QWORD *)(v10 + 16);
    v8 = v27;
  }
  v25 = v22 + 2;
  if (v25 >= v43)
  {
LABEL_36:
    swift_release(v8);
    v39 = v42;
    if ((v41 & 0x100000000) != 0)
      goto LABEL_39;
    goto LABEL_43;
  }
  v24 = v44[v25];
  if (v24)
  {
    v17 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v17 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v17 >= v43)
      goto LABEL_36;
    v24 = v44[v17];
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_46:
  __break(1u);
}

void sub_1000B8F20(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __n128 v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int64_t v43;
  _QWORD *v44;
  uint64_t i;
  int v46;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_10000EDC8(&qword_100481A90);
  v46 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_43;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v44 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v42 = v2;
  v43 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  v18 = swift_retain(v10);
  v19 = 0;
  for (i = v10; ; v10 = i)
  {
    if (v16)
    {
      v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v22 = v21 | (v19 << 6);
      goto LABEL_24;
    }
    v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v23 >= v43)
      break;
    v24 = v44;
    v25 = v44[v23];
    ++v19;
    if (!v25)
    {
      v19 = v23 + 1;
      if (v23 + 1 >= v43)
        goto LABEL_36;
      v25 = v44[v19];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v43)
        {
LABEL_36:
          swift_release(v10);
          v3 = v42;
          if ((v46 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v44[v26];
        if (!v25)
        {
          while (1)
          {
            v19 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v19 >= v43)
              goto LABEL_36;
            v25 = v44[v19];
            ++v26;
            if (v25)
              goto LABEL_23;
          }
        }
        v19 = v26;
      }
    }
LABEL_23:
    v16 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_24:
    v27 = *(_QWORD *)(v7 + 72);
    v28 = *(_QWORD *)(v10 + 48) + v27 * v22;
    if ((v46 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v7 + 32))(v9, v28, v6, v18);
      v29 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v22);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v7 + 16))(v9, v28, v6, v18);
      v29 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v22);
      swift_retain(v29);
    }
    v30 = *(_QWORD *)(v12 + 40);
    v31 = sub_10000C4B0(&qword_100480278, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v32 = dispatch thunk of Hashable._rawHashValue(seed:)(v30, v6, v31);
    v33 = -1 << *(_BYTE *)(v12 + 32);
    v34 = v32 & ~v33;
    v35 = v34 >> 6;
    if (((-1 << v34) & ~*(_QWORD *)(v17 + 8 * (v34 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v34) & ~*(_QWORD *)(v17 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v36 = 0;
      v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v38 = v35 == v37;
        if (v35 == v37)
          v35 = 0;
        v36 |= v38;
        v39 = *(_QWORD *)(v17 + 8 * v35);
      }
      while (v39 == -1);
      v20 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(_QWORD *)(v12 + 48) + v27 * v20, v9, v6);
    *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v20) = v29;
    ++*(_QWORD *)(v12 + 16);
  }
  swift_release(v10);
  v3 = v42;
  v24 = v44;
  if ((v46 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v40 = 1 << *(_BYTE *)(v10 + 32);
  if (v40 >= 64)
    bzero(v24, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v40;
  *(_QWORD *)(v10 + 16) = 0;
LABEL_43:
  swift_release(v10);
  *v3 = v12;
}

void sub_1000B92B4(uint64_t a1, uint64_t a2)
{
  sub_1000B95C4(a1, a2, &qword_1004819D0);
}

void sub_1000B92C0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10000EDC8(&qword_1004819D8);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v3;
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v14 << 6);
      goto LABEL_34;
    }
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v23 >= v12)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v37 + 8 * v23);
    ++v14;
    if (!v25)
    {
      v14 = v23 + 1;
      if (v23 + 1 >= v12)
        goto LABEL_36;
      v25 = *(_QWORD *)(v37 + 8 * v14);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release();
          v3 = v36;
          if ((v38 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v14 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v14 >= v12)
              goto LABEL_36;
            v25 = *(_QWORD *)(v37 + 8 * v14);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v14 = v26;
      }
    }
LABEL_33:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_34:
    v31 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v22);
    v33 = *v31;
    v32 = v31[1];
    v34 = *(_DWORD *)(*(_QWORD *)(v5 + 56) + 4 * v22);
    if ((v38 & 1) == 0)
      swift_bridgeObjectRetain(v31[1]);
    Hasher.init(_seed:)(v39);
    String.hash(into:)(v39, v33, v32);
    v15 = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = v15 & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v19);
    *v20 = v33;
    v20[1] = v32;
    *(_DWORD *)(*(_QWORD *)(v8 + 56) + 4 * v19) = v34;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v3 = v36;
  v24 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release();
  *v3 = v8;
}

void sub_1000B95C4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  uint64_t v39;
  char v40;
  _QWORD v41[9];

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_10000EDC8(a3);
  v40 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = v8;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_43;
  v10 = 1 << *(_BYTE *)(v6 + 32);
  v39 = v6 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v6 + 64);
  v37 = v4;
  v38 = (unint64_t)(v10 + 63) >> 6;
  v13 = v8 + 64;
  swift_retain();
  v14 = 0;
  while (1)
  {
    if (v12)
    {
      v21 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v22 = v21 | (v14 << 6);
      goto LABEL_34;
    }
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v23 >= v38)
      break;
    v24 = (_QWORD *)(v6 + 64);
    v25 = *(_QWORD *)(v39 + 8 * v23);
    ++v14;
    if (!v25)
    {
      v14 = v23 + 1;
      if (v23 + 1 >= v38)
        goto LABEL_36;
      v25 = *(_QWORD *)(v39 + 8 * v14);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v38)
        {
LABEL_36:
          swift_release();
          v4 = v37;
          if ((v40 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v39 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v14 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v14 >= v38)
              goto LABEL_36;
            v25 = *(_QWORD *)(v39 + 8 * v14);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v14 = v26;
      }
    }
LABEL_33:
    v12 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_34:
    v31 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v22);
    v33 = *v31;
    v32 = v31[1];
    v34 = *(void **)(*(_QWORD *)(v6 + 56) + 8 * v22);
    if ((v40 & 1) == 0)
    {
      swift_bridgeObjectRetain(v31[1]);
      v35 = v34;
    }
    Hasher.init(_seed:)(v41);
    String.hash(into:)(v41, v33, v32);
    v15 = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v9 + 32);
    v17 = v15 & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v19);
    *v20 = v33;
    v20[1] = v32;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v19) = v34;
    ++*(_QWORD *)(v9 + 16);
  }
  swift_release();
  v4 = v37;
  v24 = (_QWORD *)(v6 + 64);
  if ((v40 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v36 = 1 << *(_BYTE *)(v6 + 32);
  if (v36 >= 64)
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v36;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_43:
  swift_release();
  *v4 = v9;
}

void sub_1000B98CC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  Swift::UInt v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  char v33;
  _QWORD *v34;
  uint64_t v35[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10000EDC8(&qword_100481A98);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v33 = a2;
    v32 = v3;
    v9 = 0;
    v34 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = v7 + 64;
    while (1)
    {
      if (v12)
      {
        v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v17 = v16 | (v9 << 6);
      }
      else
      {
        v18 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return;
        }
        if (v18 >= v13)
          goto LABEL_34;
        v19 = v34[v18];
        ++v9;
        if (!v19)
        {
          v9 = v18 + 1;
          if (v18 + 1 >= v13)
            goto LABEL_34;
          v19 = v34[v9];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_34:
              if ((v33 & 1) == 0)
              {
                swift_release(v5);
                v3 = v32;
                goto LABEL_41;
              }
              v31 = 1 << *(_BYTE *)(v5 + 32);
              if (v31 >= 64)
                bzero(v34, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v34 = -1 << v31;
              v3 = v32;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                v9 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_43;
                if (v9 >= v13)
                  goto LABEL_34;
                v19 = v34[v9];
                ++v20;
                if (v19)
                  goto LABEL_24;
              }
            }
            v9 = v20;
          }
        }
LABEL_24:
        v12 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v9 << 6);
      }
      v21 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v17);
      v22 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v17);
      Hasher.init(_seed:)(v35);
      Hasher._combine(_:)(v21);
      v23 = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v8 + 32);
      v25 = v23 & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v14 + 8 * (v25 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v14 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v14 + 8 * v26);
        }
        while (v30 == -1);
        v15 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_BYTE *)(*(_QWORD *)(v8 + 48) + v15) = v21;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v15) = v22;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release(v5);
LABEL_41:
  *v3 = v8;
}

void sub_1000B9B90(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v42;
  __int128 v43;
  __int128 v44;
  _QWORD v45[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10000EDC8(&qword_100481A78);
  v42 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v41 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v39 = v3;
  v40 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain();
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v13 << 6);
      goto LABEL_34;
    }
    v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v23 >= v40)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      v13 = v23 + 1;
      if (v23 + 1 >= v40)
        goto LABEL_36;
      v25 = *(_QWORD *)(v41 + 8 * v13);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_36:
          swift_release();
          v3 = v39;
          if ((v42 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v13 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v13 >= v40)
              goto LABEL_36;
            v25 = *(_QWORD *)(v41 + 8 * v13);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v13 = v26;
      }
    }
LABEL_33:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_34:
    v31 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v22);
    v33 = *v31;
    v32 = v31[1];
    v34 = *(_QWORD *)(v5 + 56) + 48 * v22;
    v35 = *(_QWORD *)v34;
    v43 = *(_OWORD *)(v34 + 24);
    v44 = *(_OWORD *)(v34 + 8);
    v36 = *(void **)(v34 + 40);
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain(v32);
      swift_bridgeObjectRetain(v44);
      swift_bridgeObjectRetain(*((_QWORD *)&v44 + 1));
      swift_bridgeObjectRetain(v43);
      swift_bridgeObjectRetain(*((_QWORD *)&v43 + 1));
      v37 = v36;
    }
    Hasher.init(_seed:)(v45);
    String.hash(into:)(v45, v33, v32);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v17 == v28;
        if (v17 == v28)
          v17 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v30 == -1);
      v18 = __clz(__rbit64(~v30)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v33;
    v19[1] = v32;
    v20 = *(_QWORD *)(v8 + 56) + 48 * v18;
    *(_QWORD *)v20 = v35;
    *(_OWORD *)(v20 + 8) = v44;
    *(_OWORD *)(v20 + 24) = v43;
    *(_QWORD *)(v20 + 40) = v36;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v3 = v39;
  v24 = (_QWORD *)(v5 + 64);
  if ((v42 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v38 = 1 << *(_BYTE *)(v5 + 32);
  if (v38 >= 64)
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v38;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release();
  *v3 = v8;
}

void sub_1000B9F04(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  char v39;
  __int128 v40;
  _QWORD v41[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10000EDC8(&qword_100481A70);
  v39 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v36 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v38 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v37 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    swift_retain();
    v13 = 0;
    while (1)
    {
      if (v11)
      {
        v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v22 = v21 | (v13 << 6);
      }
      else
      {
        v23 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return;
        }
        if (v23 >= v37)
          goto LABEL_36;
        v24 = v38[v23];
        ++v13;
        if (!v24)
        {
          v13 = v23 + 1;
          if (v23 + 1 >= v37)
            goto LABEL_36;
          v24 = v38[v13];
          if (!v24)
          {
            v25 = v23 + 2;
            if (v25 >= v37)
            {
LABEL_36:
              swift_release();
              v3 = v36;
              if ((v39 & 1) != 0)
              {
                v35 = 1 << *(_BYTE *)(v5 + 32);
                if (v35 >= 64)
                  bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v38 = -1 << v35;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v24 = v38[v25];
            if (!v24)
            {
              while (1)
              {
                v13 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_43;
                if (v13 >= v37)
                  goto LABEL_36;
                v24 = v38[v13];
                ++v25;
                if (v24)
                  goto LABEL_33;
              }
            }
            v13 = v25;
          }
        }
LABEL_33:
        v11 = (v24 - 1) & v24;
        v22 = __clz(__rbit64(v24)) + (v13 << 6);
      }
      v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v22);
      v32 = *v30;
      v31 = v30[1];
      v33 = *(_QWORD *)(v5 + 56) + 24 * v22;
      v40 = *(_OWORD *)v33;
      v34 = *(_QWORD *)(v33 + 16);
      if ((v39 & 1) == 0)
        swift_bridgeObjectRetain(v31);
      Hasher.init(_seed:)(v41);
      String.hash(into:)(v41, v32, v31);
      v14 = Hasher._finalize()();
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = v14 & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v28 = v17 == v27;
          if (v17 == v27)
            v17 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v12 + 8 * v17);
        }
        while (v29 == -1);
        v18 = __clz(__rbit64(~v29)) + (v17 << 6);
      }
      *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
      *v19 = v32;
      v19[1] = v31;
      v20 = *(_QWORD *)(v8 + 56) + 24 * v18;
      *(_OWORD *)v20 = v40;
      *(_QWORD *)(v20 + 16) = v34;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release();
  *v3 = v8;
}

void sub_1000BA21C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  _QWORD *v39;
  char v40;
  _QWORD v41[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10000EDC8(&qword_100481A68);
  v40 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v37 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v39 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v38 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    swift_retain();
    v13 = 0;
    while (1)
    {
      if (v11)
      {
        v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v22 = v21 | (v13 << 6);
      }
      else
      {
        v23 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return;
        }
        if (v23 >= v38)
          goto LABEL_36;
        v24 = v39[v23];
        ++v13;
        if (!v24)
        {
          v13 = v23 + 1;
          if (v23 + 1 >= v38)
            goto LABEL_36;
          v24 = v39[v13];
          if (!v24)
          {
            v25 = v23 + 2;
            if (v25 >= v38)
            {
LABEL_36:
              swift_release();
              v3 = v37;
              if ((v40 & 1) != 0)
              {
                v36 = 1 << *(_BYTE *)(v5 + 32);
                if (v36 >= 64)
                  bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v39 = -1 << v36;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v24 = v39[v25];
            if (!v24)
            {
              while (1)
              {
                v13 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_43;
                if (v13 >= v38)
                  goto LABEL_36;
                v24 = v39[v13];
                ++v25;
                if (v24)
                  goto LABEL_33;
              }
            }
            v13 = v25;
          }
        }
LABEL_33:
        v11 = (v24 - 1) & v24;
        v22 = __clz(__rbit64(v24)) + (v13 << 6);
      }
      v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v22);
      v32 = *v30;
      v31 = v30[1];
      v33 = *(_QWORD *)(v5 + 56) + 12 * v22;
      v34 = *(_QWORD *)v33;
      v35 = *(_DWORD *)(v33 + 8);
      if ((v40 & 1) == 0)
        swift_bridgeObjectRetain(v30[1]);
      Hasher.init(_seed:)(v41);
      String.hash(into:)(v41, v32, v31);
      v14 = Hasher._finalize()();
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = v14 & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v28 = v17 == v27;
          if (v17 == v27)
            v17 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v12 + 8 * v17);
        }
        while (v29 == -1);
        v18 = __clz(__rbit64(~v29)) + (v17 << 6);
      }
      *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
      *v19 = v32;
      v19[1] = v31;
      v20 = *(_QWORD *)(v8 + 56) + 12 * v18;
      *(_QWORD *)v20 = v34;
      *(_DWORD *)(v20 + 8) = v35;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release();
  *v3 = v8;
}

void sub_1000BA52C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t *v41;
  uint64_t v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  char v64;
  __int128 v65;
  __int128 v66;
  int v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _OWORD __dst[20];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10000EDC8(&qword_100481A80);
  v43 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 0;
    v41 = (uint64_t *)(v5 + 64);
    v42 = v5;
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v37 = -1 << v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v38 = 1 << *(_BYTE *)(v5 + 32);
    v39 = v3;
    v40 = (unint64_t)(v10 + 63) >> 6;
    v13 = v7 + 64;
    while (1)
    {
      if (v12)
      {
        v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v17 = v16 | (v9 << 6);
        if ((v43 & 1) != 0)
          goto LABEL_13;
      }
      else
      {
        v25 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
          return;
        }
        if (v25 >= v40)
          goto LABEL_39;
        v26 = v41[v25];
        ++v9;
        if (!v26)
        {
          v9 = v25 + 1;
          if (v25 + 1 >= v40)
            goto LABEL_39;
          v26 = v41[v9];
          if (!v26)
          {
            v27 = v25 + 2;
            if (v27 >= v40)
            {
LABEL_39:
              if ((v43 & 1) == 0)
              {
                swift_release();
                v3 = v39;
                goto LABEL_46;
              }
              if (v38 >= 64)
                bzero(v41, 8 * v40);
              else
                *v41 = v37;
              v3 = v39;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v26 = v41[v27];
            if (!v26)
            {
              while (1)
              {
                v9 = v27 + 1;
                if (__OFADD__(v27, 1))
                  goto LABEL_48;
                if (v9 >= v40)
                  goto LABEL_39;
                v26 = v41[v9];
                ++v27;
                if (v26)
                  goto LABEL_25;
              }
            }
            v9 = v27;
          }
        }
LABEL_25:
        v12 = (v26 - 1) & v26;
        v17 = __clz(__rbit64(v26)) + (v9 << 6);
        if ((v43 & 1) != 0)
        {
LABEL_13:
          v18 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v17);
          v19 = *(_QWORD *)(v5 + 56) + 304 * v17;
          v50 = *(_OWORD *)v19;
          v51 = *(_OWORD *)(v19 + 16);
          v20 = *(_BYTE *)(v19 + 48);
          v55 = *(_OWORD *)(v19 + 80);
          v56 = *(_OWORD *)(v19 + 64);
          v52 = *(_OWORD *)(v19 + 32);
          v53 = *(_OWORD *)(v19 + 96);
          v54 = *(_OWORD *)(v19 + 112);
          v47 = *(_BYTE *)(v19 + 136);
          v48 = *(_BYTE *)(v19 + 128);
          v57 = *(_DWORD *)(v19 + 132);
          v58 = *(_DWORD *)(v19 + 140);
          v44 = *(_BYTE *)(v19 + 144);
          v45 = *(_BYTE *)(v19 + 156);
          v59 = *(_QWORD *)(v19 + 148);
          v60 = *(_QWORD *)(v19 + 160);
          v46 = *(_BYTE *)(v19 + 168);
          v21 = *(_BYTE *)(v19 + 176);
          v61 = *(_DWORD *)(v19 + 172);
          v62 = *(_DWORD *)(v19 + 180);
          v22 = *(_BYTE *)(v19 + 184);
          v23 = *(_BYTE *)(v19 + 192);
          v63 = *(_DWORD *)(v19 + 188);
          v64 = *(_BYTE *)(v19 + 193);
          v24 = *(_BYTE *)(v19 + 224);
          v67 = *(_DWORD *)(v19 + 228);
          v49 = *(_BYTE *)(v19 + 232);
          v69 = *(_OWORD *)(v19 + 256);
          v70 = *(_OWORD *)(v19 + 240);
          v68 = *(_OWORD *)(v19 + 272);
          v65 = *(_OWORD *)(v19 + 208);
          v66 = *(_OWORD *)(v19 + 288);
          goto LABEL_27;
        }
      }
      v18 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v17);
      memcpy(__dst, (const void *)(*(_QWORD *)(v5 + 56) + 304 * v17), 0x130uLL);
      v69 = __dst[16];
      v70 = __dst[15];
      v68 = __dst[17];
      v67 = DWORD1(__dst[14]);
      v49 = BYTE8(__dst[14]);
      v65 = __dst[13];
      v66 = __dst[18];
      v24 = __dst[14];
      v63 = HIDWORD(__dst[11]);
      v64 = BYTE1(__dst[12]);
      v23 = __dst[12];
      v22 = BYTE8(__dst[11]);
      v61 = HIDWORD(__dst[10]);
      v62 = DWORD1(__dst[11]);
      v21 = __dst[11];
      v59 = *(_QWORD *)((char *)&__dst[9] + 4);
      v60 = *(_QWORD *)&__dst[10];
      v45 = BYTE12(__dst[9]);
      v46 = BYTE8(__dst[10]);
      v44 = __dst[9];
      v57 = DWORD1(__dst[8]);
      v58 = HIDWORD(__dst[8]);
      v47 = BYTE8(__dst[8]);
      v48 = __dst[8];
      v55 = __dst[5];
      v56 = __dst[4];
      v53 = __dst[6];
      v54 = __dst[7];
      v20 = __dst[3];
      v51 = __dst[1];
      v52 = __dst[2];
      v50 = __dst[0];
      sub_1000C2C50((uint64_t *)__dst);
LABEL_27:
      if ((v18 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v28 = v18;
      else
        v28 = 0;
      v29 = static Hasher._hash(seed:_:)(*(_QWORD *)(v8 + 40), v28);
      v30 = -1 << *(_BYTE *)(v8 + 32);
      v31 = v29 & ~v30;
      v32 = v31 >> 6;
      if (((-1 << v31) & ~*(_QWORD *)(v13 + 8 * (v31 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v13 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v33 = 0;
        v34 = (unint64_t)(63 - v30) >> 6;
        do
        {
          if (++v32 == v34 && (v33 & 1) != 0)
          {
            __break(1u);
            goto LABEL_47;
          }
          v35 = v32 == v34;
          if (v32 == v34)
            v32 = 0;
          v33 |= v35;
          v36 = *(_QWORD *)(v13 + 8 * v32);
        }
        while (v36 == -1);
        v14 = __clz(__rbit64(~v36)) + (v32 << 6);
      }
      LOBYTE(__dst[0]) = v20;
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v14) = v18;
      v15 = *(_QWORD *)(v8 + 56) + 304 * v14;
      *(_OWORD *)v15 = v50;
      *(_OWORD *)(v15 + 16) = v51;
      *(_OWORD *)(v15 + 32) = v52;
      *(_BYTE *)(v15 + 48) = v20;
      *(_OWORD *)(v15 + 64) = v56;
      *(_OWORD *)(v15 + 80) = v55;
      *(_OWORD *)(v15 + 96) = v53;
      *(_OWORD *)(v15 + 112) = v54;
      *(_BYTE *)(v15 + 128) = v48;
      *(_DWORD *)(v15 + 132) = v57;
      *(_BYTE *)(v15 + 136) = v47;
      *(_DWORD *)(v15 + 140) = v58;
      *(_BYTE *)(v15 + 144) = v44;
      *(_QWORD *)(v15 + 148) = v59;
      *(_BYTE *)(v15 + 156) = v45;
      *(_QWORD *)(v15 + 160) = v60;
      *(_BYTE *)(v15 + 168) = v46;
      *(_DWORD *)(v15 + 172) = v61;
      *(_BYTE *)(v15 + 176) = v21;
      *(_DWORD *)(v15 + 180) = v62;
      *(_BYTE *)(v15 + 184) = v22;
      *(_DWORD *)(v15 + 188) = v63;
      *(_BYTE *)(v15 + 192) = v23;
      *(_BYTE *)(v15 + 193) = v64;
      *(_OWORD *)(v15 + 208) = v65;
      *(_BYTE *)(v15 + 224) = v24;
      *(_DWORD *)(v15 + 228) = v67;
      *(_BYTE *)(v15 + 232) = v49;
      *(_OWORD *)(v15 + 240) = v70;
      *(_OWORD *)(v15 + 256) = v69;
      *(_OWORD *)(v15 + 272) = v68;
      *(_OWORD *)(v15 + 288) = v66;
      ++*(_QWORD *)(v8 + 16);
      v5 = v42;
    }
  }
  swift_release();
LABEL_46:
  *v3 = v8;
}

void sub_1000BAAC0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10000EDC8(&qword_100481AA0);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 0;
    v10 = (uint64_t *)(v5 + 64);
    v11 = 1 << *(_BYTE *)(v5 + 32);
    v35 = -1 << v11;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v5 + 64);
    v36 = 1 << *(_BYTE *)(v5 + 32);
    v37 = v3;
    v38 = (unint64_t)(v11 + 63) >> 6;
    v14 = v7 + 64;
    while (1)
    {
      if (v13)
      {
        v22 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v23 = v22 | (v9 << 6);
      }
      else
      {
        v24 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
          return;
        }
        if (v24 >= v38)
          goto LABEL_39;
        v25 = v10[v24];
        ++v9;
        if (!v25)
        {
          v9 = v24 + 1;
          if (v24 + 1 >= v38)
            goto LABEL_39;
          v25 = v10[v9];
          if (!v25)
          {
            v26 = v24 + 2;
            if (v26 >= v38)
            {
LABEL_39:
              if ((a2 & 1) == 0)
              {
                swift_release();
                v3 = v37;
                goto LABEL_46;
              }
              if (v36 >= 64)
                bzero((void *)(v5 + 64), 8 * v38);
              else
                *v10 = v35;
              v3 = v37;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v25 = v10[v26];
            if (!v25)
            {
              while (1)
              {
                v9 = v26 + 1;
                if (__OFADD__(v26, 1))
                  goto LABEL_48;
                if (v9 >= v38)
                  goto LABEL_39;
                v25 = v10[v9];
                ++v26;
                if (v25)
                  goto LABEL_36;
              }
            }
            v9 = v26;
          }
        }
LABEL_36:
        v13 = (v25 - 1) & v25;
        v23 = __clz(__rbit64(v25)) + (v9 << 6);
      }
      v31 = 8 * v23;
      v32 = *(_QWORD *)(v5 + 56);
      v33 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v31);
      v34 = *(_QWORD *)(v32 + v31);
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain(*(_QWORD *)(v32 + v31));
      if ((v33 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v15 = v33;
      else
        v15 = 0;
      v16 = static Hasher._hash(seed:_:)(*(_QWORD *)(v8 + 40), v15);
      v17 = -1 << *(_BYTE *)(v8 + 32);
      v18 = v16 & ~v17;
      v19 = v18 >> 6;
      if (((-1 << v18) & ~*(_QWORD *)(v14 + 8 * (v18 >> 6))) != 0)
      {
        v20 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v14 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v17) >> 6;
        do
        {
          if (++v19 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_47;
          }
          v29 = v19 == v28;
          if (v19 == v28)
            v19 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v14 + 8 * v19);
        }
        while (v30 == -1);
        v20 = __clz(__rbit64(~v30)) + (v19 << 6);
      }
      *(_QWORD *)(v14 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      v21 = 8 * v20;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + v21) = v33;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + v21) = v34;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release();
LABEL_46:
  *v3 = v8;
}

void sub_1000BAD78(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __n128 v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;

  v5 = type metadata accessor for URL(0);
  v46 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = v2;
  v8 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_10000EDC8(&qword_100481A58);
  v9 = static _DictionaryStorage.resize(original:capacity:move:)(v8, a1, a2);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
    swift_release();
    v39 = v42;
LABEL_44:
    *v39 = v10;
    return;
  }
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 64);
  v44 = (_QWORD *)(v8 + 64);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v43 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 64;
  v16 = swift_retain();
  v17 = 0;
  HIDWORD(v41) = a2;
  v18 = 16;
  if ((a2 & 1) != 0)
    v18 = 32;
  v45 = v18;
  while (1)
  {
    if (v14)
    {
      v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v21 = v20 | (v17 << 6);
      goto LABEL_26;
    }
    v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    if (v22 >= v43)
    {
      swift_release();
      v39 = v42;
      v23 = v44;
      if ((v41 & 0x100000000) != 0)
      {
LABEL_39:
        v40 = 1 << *(_BYTE *)(v8 + 32);
        if (v40 >= 64)
          bzero(v23, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
        else
          *v23 = -1 << v40;
        *(_QWORD *)(v8 + 16) = 0;
      }
LABEL_43:
      swift_release();
      goto LABEL_44;
    }
    v23 = v44;
    v24 = v44[v22];
    ++v17;
    if (!v24)
    {
      v17 = v22 + 1;
      if (v22 + 1 >= v43)
        goto LABEL_36;
      v24 = v44[v17];
      if (!v24)
        break;
    }
LABEL_25:
    v14 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_26:
    v26 = *(_QWORD *)(v46 + 72);
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v46 + v45))(v7, *(_QWORD *)(v8 + 48) + v26 * v21, v5, v16);
    v27 = v8;
    v28 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v21);
    v29 = *(_QWORD *)(v10 + 40);
    v30 = sub_10000C4B0(&qword_100481A60, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v31 = dispatch thunk of Hashable._rawHashValue(seed:)(v29, v5, v30);
    v32 = -1 << *(_BYTE *)(v10 + 32);
    v33 = v31 & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v15 + 8 * (v33 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v15 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v15 + 8 * v34);
      }
      while (v38 == -1);
      v19 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v15 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    (*(void (**)(unint64_t, char *, uint64_t))(v46 + 32))(*(_QWORD *)(v10 + 48) + v26 * v19, v7, v5);
    *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v19) = v28;
    ++*(_QWORD *)(v10 + 16);
    v8 = v27;
  }
  v25 = v22 + 2;
  if (v25 >= v43)
  {
LABEL_36:
    swift_release();
    v39 = v42;
    if ((v41 & 0x100000000) != 0)
      goto LABEL_39;
    goto LABEL_43;
  }
  v24 = v44[v25];
  if (v24)
  {
    v17 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v17 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v17 >= v43)
      goto LABEL_36;
    v24 = v44[v17];
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_46:
  __break(1u);
}

void sub_1000BB114(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;
  _QWORD v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10000EDC8(&qword_100481A00);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v3;
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v14 << 6);
      goto LABEL_34;
    }
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v23 >= v12)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v36 + 8 * v23);
    ++v14;
    if (!v25)
    {
      v14 = v23 + 1;
      if (v23 + 1 >= v12)
        goto LABEL_36;
      v25 = *(_QWORD *)(v36 + 8 * v14);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release();
          v3 = v35;
          if ((v37 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v36 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v14 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v14 >= v12)
              goto LABEL_36;
            v25 = *(_QWORD *)(v36 + 8 * v14);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v14 = v26;
      }
    }
LABEL_33:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_34:
    v31 = 8 * v22;
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v31);
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v31);
    if ((v37 & 1) == 0)
      swift_retain();
    Hasher.init(_seed:)(v38);
    (*(void (**)(_QWORD *))(*(_QWORD *)v32 + 184))(v38);
    v15 = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = v15 & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = 8 * v19;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + v20) = v32;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v20) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v3 = v35;
  v24 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v24, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release();
  *v3 = v8;
}

void sub_1000BB414(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  Swift::UInt v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t *v32;
  int64_t v33;
  _QWORD *v34;
  uint64_t v35[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10000EDC8(&qword_100481A30);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 0;
    v34 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v32 = v3;
    v33 = (unint64_t)(v10 + 63) >> 6;
    v13 = v7 + 64;
    while (1)
    {
      if (v12)
      {
        v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v20 = v19 | (v9 << 6);
      }
      else
      {
        v21 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return;
        }
        if (v21 >= v33)
          goto LABEL_36;
        v22 = v34[v21];
        ++v9;
        if (!v22)
        {
          v9 = v21 + 1;
          if (v21 + 1 >= v33)
            goto LABEL_36;
          v22 = v34[v9];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v33)
            {
LABEL_36:
              if ((a2 & 1) == 0)
              {
                swift_release();
                v3 = v32;
                goto LABEL_43;
              }
              v31 = 1 << *(_BYTE *)(v5 + 32);
              if (v31 >= 64)
                bzero(v34, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v34 = -1 << v31;
              v3 = v32;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v22 = v34[v23];
            if (!v22)
            {
              while (1)
              {
                v9 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_45;
                if (v9 >= v33)
                  goto LABEL_36;
                v22 = v34[v9];
                ++v23;
                if (v22)
                  goto LABEL_33;
              }
            }
            v9 = v23;
          }
        }
LABEL_33:
        v12 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v9 << 6);
      }
      v28 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v20);
      v29 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v20);
      if ((a2 & 1) == 0)
        v30 = v29;
      Hasher.init(_seed:)(v35);
      Hasher._combine(_:)(v28);
      v14 = Hasher._finalize()();
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = v14 & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v13 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v13 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v26 = v17 == v25;
          if (v17 == v25)
            v17 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v17);
        }
        while (v27 == -1);
        v18 = __clz(__rbit64(~v27)) + (v17 << 6);
      }
      *(_QWORD *)(v13 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(_BYTE *)(*(_QWORD *)(v8 + 48) + v18) = v28;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v29;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release();
LABEL_43:
  *v3 = v8;
}

void sub_1000BB6DC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  id v15;
  Swift::Int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  uint64_t v39;
  __int128 v40;
  _QWORD v41[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10000EDC8(&qword_100481A40);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v39 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v37 = v3;
  v38 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain();
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v23 = v22 | (v13 << 6);
      goto LABEL_34;
    }
    v24 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v24 >= v38)
      break;
    v25 = (_QWORD *)(v5 + 64);
    v26 = *(_QWORD *)(v39 + 8 * v24);
    ++v13;
    if (!v26)
    {
      v13 = v24 + 1;
      if (v24 + 1 >= v38)
        goto LABEL_36;
      v26 = *(_QWORD *)(v39 + 8 * v13);
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v38)
        {
LABEL_36:
          swift_release();
          v3 = v37;
          if ((a2 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = *(_QWORD *)(v39 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            v13 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v13 >= v38)
              goto LABEL_36;
            v26 = *(_QWORD *)(v39 + 8 * v13);
            ++v27;
            if (v26)
              goto LABEL_33;
          }
        }
        v13 = v27;
      }
    }
LABEL_33:
    v11 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v13 << 6);
LABEL_34:
    v32 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v23);
    v40 = *(_OWORD *)(*(_QWORD *)(v5 + 48) + 16 * v23);
    v33 = *(void **)(*(_QWORD *)(v5 + 48) + 16 * v23 + 8);
    if ((a2 & 1) == 0)
    {
      swift_retain();
      v34 = v33;
      v35 = v32;
    }
    Hasher.init(_seed:)(v41);
    v14 = type metadata accessor for AnyKeyPath(0);
    dispatch thunk of Hashable.hash(into:)(v41, v14, &protocol witness table for AnyKeyPath);
    v15 = v33;
    NSObject.hash(into:)(v41);

    v16 = Hasher._finalize()();
    v17 = -1 << *(_BYTE *)(v8 + 32);
    v18 = v16 & ~v17;
    v19 = v18 >> 6;
    if (((-1 << v18) & ~*(_QWORD *)(v12 + 8 * (v18 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v12 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
      v21 = v40;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v17) >> 6;
      v21 = v40;
      do
      {
        if (++v19 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v30 = v19 == v29;
        if (v19 == v29)
          v19 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v12 + 8 * v19);
      }
      while (v31 == -1);
      v20 = __clz(__rbit64(~v31)) + (v19 << 6);
    }
    *(_QWORD *)(v12 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    *(_OWORD *)(*(_QWORD *)(v8 + 48) + 16 * v20) = v21;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v20) = v32;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v3 = v37;
  v25 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v25, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release();
  *v3 = v8;
}

void sub_1000BBA14(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  _OWORD *v24;
  void *v25;
  id v26;
  uint64_t v27;
  id v28;
  Swift::Int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  __int128 v40;
  _QWORD v41[9];
  _OWORD v42[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10000EDC8(&qword_100481A38);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v38 = v3;
  v39 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v18 = v17 | (v14 << 6);
      goto LABEL_25;
    }
    v19 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return;
    }
    if (v19 >= v12)
      break;
    v20 = (_QWORD *)(v5 + 64);
    v21 = *(_QWORD *)(v39 + 8 * v19);
    ++v14;
    if (!v21)
    {
      v14 = v19 + 1;
      if (v19 + 1 >= v12)
        goto LABEL_37;
      v21 = *(_QWORD *)(v39 + 8 * v14);
      if (!v21)
      {
        v22 = v19 + 2;
        if (v22 >= v12)
        {
LABEL_37:
          swift_release();
          v3 = v38;
          if ((a2 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v21 = *(_QWORD *)(v39 + 8 * v22);
        if (!v21)
        {
          while (1)
          {
            v14 = v22 + 1;
            if (__OFADD__(v22, 1))
              goto LABEL_46;
            if (v14 >= v12)
              goto LABEL_37;
            v21 = *(_QWORD *)(v39 + 8 * v14);
            ++v22;
            if (v21)
              goto LABEL_24;
          }
        }
        v14 = v22;
      }
    }
LABEL_24:
    v11 = (v21 - 1) & v21;
    v18 = __clz(__rbit64(v21)) + (v14 << 6);
LABEL_25:
    v23 = *(_QWORD *)(v5 + 48);
    v24 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v18);
    v25 = *(void **)(v23 + 16 * v18 + 8);
    v40 = *(_OWORD *)(v23 + 16 * v18);
    if ((a2 & 1) != 0)
    {
      sub_100020848(v24, v42);
    }
    else
    {
      sub_10004F88C((uint64_t)v24, (uint64_t)v42);
      swift_retain();
      v26 = v25;
    }
    Hasher.init(_seed:)(v41);
    v27 = type metadata accessor for AnyKeyPath(0);
    dispatch thunk of Hashable.hash(into:)(v41, v27, &protocol witness table for AnyKeyPath);
    v28 = v25;
    NSObject.hash(into:)(v41);

    v29 = Hasher._finalize()();
    v30 = -1 << *(_BYTE *)(v8 + 32);
    v31 = v29 & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)(v13 + 8 * (v31 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v13 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
      v16 = v40;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v30) >> 6;
      v16 = v40;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v35 = v32 == v34;
        if (v32 == v34)
          v32 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v13 + 8 * v32);
      }
      while (v36 == -1);
      v15 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(_QWORD *)(v13 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_OWORD *)(*(_QWORD *)(v8 + 48) + 16 * v15) = v16;
    sub_100020848(v42, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v15));
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v3 = v38;
  v20 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v37 = 1 << *(_BYTE *)(v5 + 32);
  if (v37 >= 64)
    bzero(v20, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v20 = -1 << v37;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  swift_release();
  *v3 = v8;
}

void sub_1000BBD50(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10000EDC8(&qword_100481A18);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v37 = a2;
    v36 = v3;
    v9 = 0;
    v10 = (uint64_t *)(v5 + 64);
    v11 = 1 << *(_BYTE *)(v5 + 32);
    v34 = -1 << v11;
    v35 = v11;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v5 + 64);
    v14 = (unint64_t)(v11 + 63) >> 6;
    v15 = v7 + 64;
    while (1)
    {
      if (v13)
      {
        v18 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v19 = v18 | (v9 << 6);
      }
      else
      {
        v20 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return;
        }
        if (v20 >= v14)
          goto LABEL_34;
        v21 = v10[v20];
        ++v9;
        if (!v21)
        {
          v9 = v20 + 1;
          if (v20 + 1 >= v14)
            goto LABEL_34;
          v21 = v10[v9];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v14)
            {
LABEL_34:
              if ((v37 & 1) == 0)
              {
                swift_release();
                v3 = v36;
                goto LABEL_41;
              }
              if (v35 >= 64)
                bzero((void *)(v5 + 64), 8 * v14);
              else
                *v10 = v34;
              v3 = v36;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v10[v22];
            if (!v21)
            {
              while (1)
              {
                v9 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_43;
                if (v9 >= v14)
                  goto LABEL_34;
                v21 = v10[v9];
                ++v22;
                if (v21)
                  goto LABEL_24;
              }
            }
            v9 = v22;
          }
        }
LABEL_24:
        v13 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v9 << 6);
      }
      v23 = 8 * v19;
      v24 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v23);
      v25 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v23);
      v26 = static Hasher._hash(seed:_:)(*(_QWORD *)(v8 + 40), v24);
      v27 = -1 << *(_BYTE *)(v8 + 32);
      v28 = v26 & ~v27;
      v29 = v28 >> 6;
      if (((-1 << v28) & ~*(_QWORD *)(v15 + 8 * (v28 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v15 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v30 = 0;
        v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v32 = v29 == v31;
          if (v29 == v31)
            v29 = 0;
          v30 |= v32;
          v33 = *(_QWORD *)(v15 + 8 * v29);
        }
        while (v33 == -1);
        v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(_QWORD *)(v15 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      v17 = 8 * v16;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + v17) = v24;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + v17) = v25;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release();
LABEL_41:
  *v3 = v8;
}

void sub_1000BBFF4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_10000EDC8(a3);
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = v8;
  if (*(_QWORD *)(v6 + 16))
  {
    v10 = 0;
    v11 = (uint64_t *)(v6 + 64);
    v12 = 1 << *(_BYTE *)(v6 + 32);
    v35 = -1 << v12;
    if (v12 < 64)
      v13 = ~(-1 << v12);
    else
      v13 = -1;
    v14 = v13 & *(_QWORD *)(v6 + 64);
    v36 = 1 << *(_BYTE *)(v6 + 32);
    v37 = v4;
    v38 = (unint64_t)(v12 + 63) >> 6;
    v15 = v8 + 64;
    while (1)
    {
      if (v14)
      {
        v22 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        v23 = v22 | (v10 << 6);
      }
      else
      {
        v24 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return;
        }
        if (v24 >= v38)
          goto LABEL_36;
        v25 = v11[v24];
        ++v10;
        if (!v25)
        {
          v10 = v24 + 1;
          if (v24 + 1 >= v38)
            goto LABEL_36;
          v25 = v11[v10];
          if (!v25)
          {
            v26 = v24 + 2;
            if (v26 >= v38)
            {
LABEL_36:
              if ((a2 & 1) == 0)
              {
                swift_release(v6);
                v4 = v37;
                goto LABEL_43;
              }
              if (v36 >= 64)
                bzero((void *)(v6 + 64), 8 * v38);
              else
                *v11 = v35;
              v4 = v37;
              *(_QWORD *)(v6 + 16) = 0;
              break;
            }
            v25 = v11[v26];
            if (!v25)
            {
              while (1)
              {
                v10 = v26 + 1;
                if (__OFADD__(v26, 1))
                  goto LABEL_45;
                if (v10 >= v38)
                  goto LABEL_36;
                v25 = v11[v10];
                ++v26;
                if (v25)
                  goto LABEL_33;
              }
            }
            v10 = v26;
          }
        }
LABEL_33:
        v14 = (v25 - 1) & v25;
        v23 = __clz(__rbit64(v25)) + (v10 << 6);
      }
      v31 = 8 * v23;
      v32 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + v31);
      v33 = *(void **)(*(_QWORD *)(v6 + 56) + v31);
      if ((a2 & 1) == 0)
        v34 = v33;
      v16 = static Hasher._hash(seed:_:)(*(_QWORD *)(v9 + 40), v32);
      v17 = -1 << *(_BYTE *)(v9 + 32);
      v18 = v16 & ~v17;
      v19 = v18 >> 6;
      if (((-1 << v18) & ~*(_QWORD *)(v15 + 8 * (v18 >> 6))) != 0)
      {
        v20 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v15 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v17) >> 6;
        do
        {
          if (++v19 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v29 = v19 == v28;
          if (v19 == v28)
            v19 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v15 + 8 * v19);
        }
        while (v30 == -1);
        v20 = __clz(__rbit64(~v30)) + (v19 << 6);
      }
      *(_QWORD *)(v15 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      v21 = 8 * v20;
      *(_QWORD *)(*(_QWORD *)(v9 + 48) + v21) = v32;
      *(_QWORD *)(*(_QWORD *)(v9 + 56) + v21) = v33;
      ++*(_QWORD *)(v9 + 16);
    }
  }
  swift_release(v6);
LABEL_43:
  *v4 = v9;
}

void sub_1000BC2A0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t *v36;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10000EDC8(&qword_100481A20);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 0;
    v36 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v33 = -1 << v10;
    v34 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v10 + 63) >> 6;
    v13 = v7 + 64;
    while (1)
    {
      if (v12)
      {
        v20 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v21 = v20 | (v9 << 6);
      }
      else
      {
        v22 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return;
        }
        if (v22 >= v35)
          goto LABEL_36;
        v23 = v36[v22];
        ++v9;
        if (!v23)
        {
          v9 = v22 + 1;
          if (v22 + 1 >= v35)
            goto LABEL_36;
          v23 = v36[v9];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v35)
            {
LABEL_36:
              if ((a2 & 1) != 0)
              {
                if (v34 >= 64)
                  bzero(v36, 8 * v35);
                else
                  *v36 = v33;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v23 = v36[v24];
            if (!v23)
            {
              while (1)
              {
                v9 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_44;
                if (v9 >= v35)
                  goto LABEL_36;
                v23 = v36[v9];
                ++v24;
                if (v23)
                  goto LABEL_33;
              }
            }
            v9 = v24;
          }
        }
LABEL_33:
        v12 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v9 << 6);
      }
      v29 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v21);
      v30 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v21);
      v31 = *v30;
      v32 = v30[1];
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain(v30[1]);
      v14 = static Hasher._hash(seed:_:)(*(_QWORD *)(v8 + 40), v29);
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = v14 & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v13 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v13 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v27 = v17 == v26;
          if (v17 == v26)
            v17 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v13 + 8 * v17);
        }
        while (v28 == -1);
        v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }
      *(_QWORD *)(v13 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v18) = v29;
      v19 = (_QWORD *)(*(_QWORD *)(v8 + 56) + 16 * v18);
      *v19 = v31;
      v19[1] = v32;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release();
  *v3 = v8;
}

uint64_t sub_1000BC554(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1000BCD60(a1, a2, a3, a4, type metadata accessor for MetricsManager.EdgeGuideMetric, &qword_1004819C0);
}

uint64_t sub_1000BC568(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1000BCD60(a1, a2, a3, a4, type metadata accessor for MetricsManager.SurfaceVectorGuideMetric, &qword_1004819C8);
}

_OWORD *sub_1000BC57C(_OWORD *a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _OWORD *result;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v4 = (_QWORD **)v3;
  v7 = (_QWORD *)*v3;
  v9 = sub_1000C810C(a2);
  v10 = v7[2];
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    v13 = v8;
    v14 = v7[3];
    if (v14 >= v12 && (a3 & 1) != 0)
    {
LABEL_7:
      v15 = *v4;
      if ((v13 & 1) != 0)
      {
LABEL_8:
        v16 = (_QWORD *)(v15[7] + 32 * v9);
        sub_10000F690(v16);
        return sub_100020848(a1, v16);
      }
      goto LABEL_11;
    }
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      sub_1000BE73C();
      goto LABEL_7;
    }
    sub_1000B7E10(v12, a3 & 1);
    v18 = sub_1000C810C(a2);
    if ((v13 & 1) == (v19 & 1))
    {
      v9 = v18;
      v15 = *v4;
      if ((v13 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1000BE194(v9, (uint64_t)a2, a1, v15);
      return a2;
    }
  }
  type metadata accessor for Key(0);
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v20);
  __break(1u);
  return result;
}

void sub_1000BC69C(char a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v4 = v3;
  v8 = *v3;
  v10 = sub_1000C819C(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= v13 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_1000BEAC0();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      *(_BYTE *)(v16[7] + v10) = a1 & 1;
      return;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(_BYTE *)(v16[6] + v10) = a2;
    *(_BYTE *)(v16[7] + v10) = a1 & 1;
    v19 = v16[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (!v20)
    {
      v16[2] = v21;
      return;
    }
    goto LABEL_14;
  }
  sub_1000B844C(v13, a3 & 1);
  v17 = sub_1000C819C(a2);
  if ((v14 & 1) == (v18 & 1))
  {
    v10 = v17;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for FeedbackGenerator.Feedback);
  __break(1u);
}

void sub_1000BC7CC(uint64_t a1, unsigned __int8 a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v4 = v3;
  v8 = *v3;
  v10 = sub_1000C8204(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= v13 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_1000BEC48();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      *(_QWORD *)(v16[7] + 8 * v10) = a1;
      return;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(_BYTE *)(v16[6] + v10) = a2;
    *(_QWORD *)(v16[7] + 8 * v10) = a1;
    v19 = v16[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (!v20)
    {
      v16[2] = v21;
      return;
    }
    goto LABEL_14;
  }
  sub_1000B8710(v13, a3 & 1);
  v17 = sub_1000C8204(a2);
  if ((v14 & 1) == (v18 & 1))
  {
    v10 = v17;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UserInputs.Type);
  __break(1u);
}

void sub_1000BC8F4(uint64_t a1, char a2, double a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v4 = v3;
  v8 = *v3;
  v10 = sub_1000C827C(a3);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= v13 && (a2 & 1) != 0)
    goto LABEL_7;
  if (v15 >= v13 && (a2 & 1) == 0)
  {
    sub_1000BEDD4();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = v16[7];

      *(_QWORD *)(v17 + 8 * v10) = a1;
      return;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    v20 = 8 * v10;
    *(double *)(v16[6] + v20) = a3;
    *(_QWORD *)(v16[7] + v20) = a1;
    v21 = v16[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (!v22)
    {
      v16[2] = v23;
      return;
    }
    goto LABEL_14;
  }
  sub_1000B88D0(v13, a2 & 1);
  v18 = sub_1000C827C(a3);
  if ((v14 & 1) == (v19 & 1))
  {
    v10 = v18;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Double);
  __break(1u);
}

void sub_1000BCA28(uint64_t a1, uint64_t a2, char a3)
{
  sub_1000BDD88(a1, a2, a3, (uint64_t (*)(uint64_t))sub_1000C984C, &qword_1004819F0, (uint64_t)&type metadata for UInt);
}

uint64_t sub_1000BCA44(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1000BCD60(a1, a2, a3, a4, type metadata accessor for MetricsManager.PersonHeightMetric, &qword_100481A48);
}

void sub_1000BCA58(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_1000BCBC0(a1, a2, a3, a4, &qword_100481990);
}

void sub_1000BCA64(char a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  char v22;
  uint64_t v23;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_1000C83A0(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      *(_BYTE *)(v20[7] + v14) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_1000BEF94();
    goto LABEL_7;
  }
  sub_1000B8B84(v17, a3 & 1);
  v21 = sub_1000C83A0(a2);
  if ((v18 & 1) != (v22 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return;
  }
  v14 = v21;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  sub_1000BE1F8(v14, (uint64_t)v11, a1, v20);
}

void sub_1000BCBB4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_1000BCBC0(a1, a2, a3, a4, &qword_1004819B0);
}

void sub_1000BCBC0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  v7 = v5;
  v12 = *v5;
  v14 = sub_1000C80A8(a2, a3);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v18 = v13;
  v19 = *(_QWORD *)(v12 + 24);
  if (v19 >= v17 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v19 >= v17 && (a4 & 1) == 0)
  {
    sub_1000BF5C8(a5);
LABEL_7:
    v20 = (_QWORD *)*v7;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7];

      *(_QWORD *)(v21 + 8 * v14) = a1;
      return;
    }
LABEL_11:
    v20[(v14 >> 6) + 8] |= 1 << v14;
    v24 = (uint64_t *)(v20[6] + 16 * v14);
    *v24 = a2;
    v24[1] = a3;
    *(_QWORD *)(v20[7] + 8 * v14) = a1;
    v25 = v20[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (!v26)
    {
      v20[2] = v27;
      swift_bridgeObjectRetain(a3);
      return;
    }
    goto LABEL_14;
  }
  sub_1000B95C4(v17, a4 & 1, a5);
  v22 = sub_1000C80A8(a2, a3);
  if ((v18 & 1) == (v23 & 1))
  {
    v14 = v22;
    v20 = (_QWORD *)*v7;
    if ((v18 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_1000BCD34(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_1000BCBC0(a1, a2, a3, a4, &qword_1004819A8);
}

void sub_1000BCD40(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_1000BCBC0(a1, a2, a3, a4, &qword_1004819D0);
}

uint64_t sub_1000BCD4C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1000BCD60(a1, a2, a3, a4, type metadata accessor for MetricsManager.VerticalGuideMetric, &qword_1004819B8);
}

uint64_t sub_1000BCD60(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t (*a5)(_QWORD), uint64_t *a6)
{
  _QWORD *v6;
  _QWORD **v9;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  unint64_t v26;
  char v27;

  v9 = (_QWORD **)v6;
  v14 = (_QWORD *)*v6;
  v16 = sub_1000C80A8(a2, a3);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
  }
  else
  {
    v20 = v15;
    v21 = v14[3];
    if (v21 >= v19 && (a4 & 1) != 0)
    {
LABEL_7:
      v22 = *v9;
      if ((v20 & 1) != 0)
      {
LABEL_8:
        v23 = v22[7];
        v24 = a5(0);
        return sub_1000C2C9C(a1, v23 + *(_QWORD *)(*(_QWORD *)(v24 - 8) + 72) * v16, a5);
      }
      goto LABEL_11;
    }
    if (v21 >= v19 && (a4 & 1) == 0)
    {
      sub_1000BE50C(a5, a6);
      goto LABEL_7;
    }
    sub_1000B7A9C(v19, a4 & 1, a5, a6);
    v26 = sub_1000C80A8(a2, a3);
    if ((v20 & 1) == (v27 & 1))
    {
      v16 = v26;
      v22 = *v9;
      if ((v20 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1000BE0FC(v16, a2, a3, a1, v22, a5);
      return swift_bridgeObjectRetain(a3);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void sub_1000BCEC4(uint64_t a1, uint64_t a2, char a3, float a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  char v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v10 = *v4;
  v12 = sub_1000C80A8(a1, a2);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a3 & 1) == 0)
  {
    sub_1000BF41C();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      *(float *)(v18[7] + 4 * v12) = a4;
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v21 = (uint64_t *)(v18[6] + 16 * v12);
    *v21 = a1;
    v21[1] = a2;
    *(float *)(v18[7] + 4 * v12) = a4;
    v22 = v18[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (!v23)
    {
      v18[2] = v24;
      swift_bridgeObjectRetain(a2);
      return;
    }
    goto LABEL_14;
  }
  sub_1000B92C0(v15, a3 & 1);
  v19 = sub_1000C80A8(a1, a2);
  if ((v16 & 1) == (v20 & 1))
  {
    v12 = v19;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_1000BD018(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_1000BCBC0(a1, a2, a3, a4, &qword_1004819F8);
}

void sub_1000BD024(int *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  _QWORD *v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  _DWORD *v24;
  unint64_t v25;
  char v26;
  _DWORD v27[6];

  v5 = (_QWORD **)v4;
  v10 = *a1;
  v9 = a1[1];
  v12 = a1[2];
  v11 = a1[3];
  v14 = a1[4];
  v13 = a1[5];
  v15 = (_QWORD *)*v4;
  v17 = sub_1000C80A8(a2, a3);
  v18 = v15[2];
  v19 = (v16 & 1) == 0;
  v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
  }
  else
  {
    v21 = v16;
    v22 = v15[3];
    if (v22 >= v20 && (a4 & 1) != 0)
    {
LABEL_7:
      v23 = *v5;
      if ((v21 & 1) != 0)
      {
LABEL_8:
        v24 = (_DWORD *)(v23[7] + 24 * v17);
        *v24 = v10;
        v24[1] = v9;
        v24[2] = v12;
        v24[3] = v11;
        v24[4] = v14;
        v24[5] = v13;
        return;
      }
      goto LABEL_11;
    }
    if (v22 >= v20 && (a4 & 1) == 0)
    {
      sub_1000BFB0C();
      goto LABEL_7;
    }
    sub_1000B9F04(v20, a4 & 1);
    v25 = sub_1000C80A8(a2, a3);
    if ((v21 & 1) == (v26 & 1))
    {
      v17 = v25;
      v23 = *v5;
      if ((v21 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      v27[0] = v10;
      v27[1] = v9;
      v27[2] = v12;
      v27[3] = v11;
      v27[4] = v14;
      v27[5] = v13;
      sub_1000BE2EC(v17, a2, a3, (uint64_t)v27, v23);
      swift_bridgeObjectRetain(a3);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_1000BD198(uint64_t a1, uint64_t a2, char a3, float a4, float a5, float a6)
{
  _QWORD *v6;
  _QWORD **v7;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  float *v23;
  unint64_t v24;
  char v25;

  v7 = (_QWORD **)v6;
  v14 = (_QWORD *)*v6;
  v16 = sub_1000C80A8(a1, a2);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
  }
  else
  {
    v20 = v15;
    v21 = v14[3];
    if (v21 >= v19 && (a3 & 1) != 0)
    {
LABEL_7:
      v22 = *v7;
      if ((v20 & 1) != 0)
      {
LABEL_8:
        v23 = (float *)(v22[7] + 12 * v16);
        *v23 = a4;
        v23[1] = a5;
        v23[2] = a6;
        return;
      }
      goto LABEL_11;
    }
    if (v21 >= v19 && (a3 & 1) == 0)
    {
      sub_1000BFCCC();
      goto LABEL_7;
    }
    sub_1000BA21C(v19, a3 & 1);
    v24 = sub_1000C80A8(a1, a2);
    if ((v20 & 1) == (v25 & 1))
    {
      v16 = v24;
      v22 = *v7;
      if ((v20 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1000BE348(v16, a1, a2, v22, a4, a5, a6);
      swift_bridgeObjectRetain(a2);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_1000BD2E4(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  unint64_t v25;
  char v26;
  uint64_t *v27;
  _OWORD *v28;
  __int128 v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;

  v5 = v4;
  v10 = *v4;
  v12 = sub_1000C80A8(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1000BF8FC();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7] + 48 * v12;
      v20 = *(_QWORD *)(v19 + 8);
      v21 = *(_QWORD *)(v19 + 16);
      v22 = *(_QWORD *)(v19 + 24);
      v23 = *(_QWORD *)(v19 + 32);

      swift_bridgeObjectRelease(v23);
      swift_bridgeObjectRelease(v22);
      swift_bridgeObjectRelease(v21);
      swift_bridgeObjectRelease(v20);
      v24 = a1[1];
      *(_OWORD *)v19 = *a1;
      *(_OWORD *)(v19 + 16) = v24;
      *(_OWORD *)(v19 + 32) = a1[2];
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v27 = (uint64_t *)(v18[6] + 16 * v12);
    *v27 = a2;
    v27[1] = a3;
    v28 = (_OWORD *)(v18[7] + 48 * v12);
    v29 = a1[1];
    *v28 = *a1;
    v28[1] = v29;
    v28[2] = a1[2];
    v30 = v18[2];
    v31 = __OFADD__(v30, 1);
    v32 = v30 + 1;
    if (!v31)
    {
      v18[2] = v32;
      swift_bridgeObjectRetain(a3);
      return;
    }
    goto LABEL_14;
  }
  sub_1000B9B90(v15, a4 & 1);
  v25 = sub_1000C80A8(a2, a3);
  if ((v16 & 1) == (v26 & 1))
  {
    v12 = v25;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_1000BD48C(uint64_t a1, char a2, double a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v4 = v3;
  v8 = *v3;
  v10 = sub_1000C827C(a3);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= v13 && (a2 & 1) != 0)
    goto LABEL_7;
  if (v15 >= v13 && (a2 & 1) == 0)
  {
    sub_1000C0068();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = v16[7];
      swift_bridgeObjectRelease(*(_QWORD *)(v17 + 8 * v10));
      *(_QWORD *)(v17 + 8 * v10) = a1;
      return;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    v20 = 8 * v10;
    *(double *)(v16[6] + v20) = a3;
    *(_QWORD *)(v16[7] + v20) = a1;
    v21 = v16[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (!v22)
    {
      v16[2] = v23;
      return;
    }
    goto LABEL_14;
  }
  sub_1000BAAC0(v13, a2 & 1);
  v18 = sub_1000C827C(a3);
  if ((v14 & 1) == (v19 & 1))
  {
    v10 = v18;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Double);
  __break(1u);
}

void sub_1000BD5C0(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  char v22;
  uint64_t v23;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_1000C8438(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      *(_QWORD *)(v20[7] + 8 * v14) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_1000C0208();
    goto LABEL_7;
  }
  sub_1000BAD78(v17, a3 & 1);
  v21 = sub_1000C8438(a2);
  if ((v18 & 1) != (v22 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return;
  }
  v14 = v21;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  sub_1000BE3E4(v14, (uint64_t)v11, a1, v20);
}

void sub_1000BD710(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;

  v4 = v3;
  v8 = *v3;
  v10 = sub_1000C84D0(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= v13 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_1000C042C();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      *(_QWORD *)(v16[7] + 8 * v10) = a1;
      return;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    v19 = 8 * v10;
    *(_QWORD *)(v16[6] + v19) = a2;
    *(_QWORD *)(v16[7] + v19) = a1;
    v20 = v16[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (!v21)
    {
      v16[2] = v22;
      swift_retain();
      return;
    }
    goto LABEL_14;
  }
  sub_1000BB114(v13, a3 & 1);
  v17 = sub_1000C84D0(a2);
  if ((v14 & 1) == (v18 & 1))
  {
    v10 = v17;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  v23 = type metadata accessor for WorldPlane(0);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v23);
  __break(1u);
}

void sub_1000BD854(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v4 = v3;
  v8 = *v3;
  v10 = sub_1000C819C(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= v13 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_1000C05CC();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = v16[7];

      *(_QWORD *)(v17 + 8 * v10) = a1;
      return;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(_BYTE *)(v16[6] + v10) = a2;
    *(_QWORD *)(v16[7] + 8 * v10) = a1;
    v20 = v16[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (!v21)
    {
      v16[2] = v22;
      return;
    }
    goto LABEL_14;
  }
  sub_1000BB414(v13, a3 & 1);
  v18 = sub_1000C819C(a2);
  if ((v14 & 1) == (v19 & 1))
  {
    v10 = v18;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for ShaderCache.Material);
  __break(1u);
}

void sub_1000BD988(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  id v25;

  v5 = v4;
  v9 = *v4;
  v11 = sub_1000C8530(a2, a3);
  v12 = *(_QWORD *)(v9 + 16);
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v15 = v10;
  v16 = *(_QWORD *)(v9 + 24);
  if (v16 >= v14 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v16 >= v14 && (a4 & 1) == 0)
  {
    sub_1000C076C();
LABEL_7:
    v17 = (_QWORD *)*v5;
    if ((v15 & 1) != 0)
    {
LABEL_8:
      v18 = v17[7];

      *(_QWORD *)(v18 + 8 * v11) = a1;
      return;
    }
LABEL_11:
    v17[(v11 >> 6) + 8] |= 1 << v11;
    v21 = (uint64_t *)(v17[6] + 16 * v11);
    *v21 = a2;
    v21[1] = (uint64_t)a3;
    *(_QWORD *)(v17[7] + 8 * v11) = a1;
    v22 = v17[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (!v23)
    {
      v17[2] = v24;
      swift_retain();
      v25 = a3;
      return;
    }
    goto LABEL_14;
  }
  sub_1000BB6DC(v14, a4 & 1);
  v19 = sub_1000C8530(a2, a3);
  if ((v15 & 1) == (v20 & 1))
  {
    v11 = v19;
    v17 = (_QWORD *)*v5;
    if ((v15 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UIKitContext.InstanceKeyPath);
  __break(1u);
}

_OWORD *sub_1000BDAFC(_OWORD *a1, uint64_t a2, void *a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _OWORD *result;
  unint64_t v20;
  char v21;

  v5 = (_QWORD **)v4;
  v9 = (_QWORD *)*v4;
  v11 = sub_1000C8530(a2, a3);
  v12 = v9[2];
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    v15 = v10;
    v16 = v9[3];
    if (v16 >= v14 && (a4 & 1) != 0)
    {
LABEL_7:
      v17 = *v5;
      if ((v15 & 1) != 0)
      {
LABEL_8:
        v18 = (_QWORD *)(v17[7] + 32 * v11);
        sub_10000F690(v18);
        return sub_100020848(a1, v18);
      }
      goto LABEL_11;
    }
    if (v16 >= v14 && (a4 & 1) == 0)
    {
      sub_1000C0930();
      goto LABEL_7;
    }
    sub_1000BBA14(v14, a4 & 1);
    v20 = sub_1000C8530(a2, a3);
    if ((v15 & 1) == (v21 & 1))
    {
      v11 = v20;
      v17 = *v5;
      if ((v15 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1000BE47C(v11, a2, (uint64_t)a3, a1, v17);
      swift_retain();
      return a3;
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UIKitContext.InstanceKeyPath);
  __break(1u);
  return result;
}

void sub_1000BDC40(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v4 = v3;
  v8 = *v3;
  v10 = sub_1000C8368(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= v13 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_1000C0B10();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      *(_QWORD *)(v16[7] + 8 * v10) = a1;
      return;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    v19 = 8 * v10;
    *(_QWORD *)(v16[6] + v19) = a2;
    *(_QWORD *)(v16[7] + v19) = a1;
    v20 = v16[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (!v21)
    {
      v16[2] = v22;
      return;
    }
    goto LABEL_14;
  }
  sub_1000BBD50(v13, a3 & 1);
  v17 = sub_1000C8368(a2);
  if ((v14 & 1) == (v18 & 1))
  {
    v10 = v17;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int);
  __break(1u);
}

void sub_1000BDD6C(uint64_t a1, uint64_t a2, char a3)
{
  sub_1000BDD88(a1, a2, a3, (uint64_t (*)(uint64_t))sub_1000C8368, &qword_100481A08, (uint64_t)&type metadata for Int);
}

void sub_1000BDD88(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(uint64_t), uint64_t *a5, uint64_t a6)
{
  _QWORD *v6;
  _QWORD *v10;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;

  v10 = v6;
  v14 = *v6;
  v16 = a4(a2);
  v17 = *(_QWORD *)(v14 + 16);
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v20 = v15;
  v21 = *(_QWORD *)(v14 + 24);
  if (v21 >= v19 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v21 >= v19 && (a3 & 1) == 0)
  {
    sub_1000C0CB4(a5);
LABEL_7:
    v22 = (_QWORD *)*v10;
    if ((v20 & 1) != 0)
    {
LABEL_8:
      v23 = v22[7];

      *(_QWORD *)(v23 + 8 * v16) = a1;
      return;
    }
LABEL_11:
    v22[(v16 >> 6) + 8] |= 1 << v16;
    v26 = 8 * v16;
    *(_QWORD *)(v22[6] + v26) = a2;
    *(_QWORD *)(v22[7] + v26) = a1;
    v27 = v22[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (!v28)
    {
      v22[2] = v29;
      return;
    }
    goto LABEL_14;
  }
  sub_1000BBFF4(v19, a3 & 1, a5);
  v24 = a4(a2);
  if ((v20 & 1) == (v25 & 1))
  {
    v16 = v24;
    v22 = (_QWORD *)*v10;
    if ((v20 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(a6);
  __break(1u);
}

void sub_1000BDED8(uint64_t a1, uint64_t a2, char a3)
{
  sub_1000BDD88(a1, a2, a3, (uint64_t (*)(uint64_t))sub_1000C8368, &qword_100481A10, (uint64_t)&type metadata for Int);
}

void sub_1000BDEF4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v5 = v4;
  v10 = *v4;
  v12 = sub_1000C8368(a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1000C0E4C();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = (_QWORD *)(v18[7] + 16 * v12);
      swift_bridgeObjectRelease(v19[1]);
      *v19 = a1;
      v19[1] = a2;
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    *(_QWORD *)(v18[6] + 8 * v12) = a3;
    v22 = (_QWORD *)(v18[7] + 16 * v12);
    *v22 = a1;
    v22[1] = a2;
    v23 = v18[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      return;
    }
    goto LABEL_14;
  }
  sub_1000BC2A0(v15, a4 & 1);
  v20 = sub_1000C8368(a3);
  if ((v16 & 1) == (v21 & 1))
  {
    v12 = v20;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int);
  __break(1u);
}

unint64_t sub_1000BE030(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v6;
  Swift::Int v7;
  unint64_t result;
  _QWORD v9[9];

  Hasher.init(_seed:)(v9);
  v6 = a1 - 3;
  if ((a1 - 3) >= 7u)
  {
    Hasher._combine(_:)(7uLL);
    v6 = a1;
  }
  Hasher._combine(_:)(v6);
  v7 = Hasher._finalize()();
  result = _HashTable.nextHole(atOrAfter:)(v7 & ~(-1 << *(_BYTE *)(a3 + 32)), a3 + 64, ~(-1 << *(_BYTE *)(a3 + 32)));
  *(_QWORD *)(a3 + 64 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_BYTE *)(*(_QWORD *)(a3 + 48) + result) = a1;
  *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * result) = a2;
  ++*(_QWORD *)(a3 + 16);
  return result;
}

uint64_t sub_1000BE0FC(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t (*a6)(_QWORD))
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v10 = (_QWORD *)(a5[6] + 16 * a1);
  *v10 = a2;
  v10[1] = a3;
  v11 = a5[7];
  v12 = a6(0);
  result = sub_10006CAB4(a4, v11 + *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72) * a1, a6);
  v14 = a5[2];
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    a5[2] = v16;
  return result;
}

_OWORD *sub_1000BE194(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  _OWORD *result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = sub_100020848(a3, (_OWORD *)(a4[7] + 32 * a1));
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

uint64_t sub_1000BE1F8(unint64_t a1, uint64_t a2, char a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for UUID(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  *(_BYTE *)(a4[7] + a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

unint64_t sub_1000BE290(unint64_t result, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v5;
  _OWORD *v6;
  __int128 v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  v6 = (_OWORD *)(a5[7] + 48 * result);
  v7 = a4[1];
  *v6 = *a4;
  v6[1] = v7;
  v6[2] = a4[2];
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

unint64_t sub_1000BE2EC(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  v6 = a5[7] + 24 * result;
  *(_OWORD *)v6 = *(_OWORD *)a4;
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(a4 + 16);
  v7 = a5[2];
  v8 = __OFADD__(v7, 1);
  v9 = v7 + 1;
  if (v8)
    __break(1u);
  else
    a5[2] = v9;
  return result;
}

unint64_t sub_1000BE348(unint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4, float a5, float a6, float a7)
{
  _QWORD *v7;
  float *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  a4[(result >> 6) + 8] |= 1 << result;
  v7 = (_QWORD *)(a4[6] + 16 * result);
  *v7 = a2;
  v7[1] = a3;
  v8 = (float *)(a4[7] + 12 * result);
  *v8 = a5;
  v8[1] = a6;
  v8[2] = a7;
  v9 = a4[2];
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
    __break(1u);
  else
    a4[2] = v11;
  return result;
}

unint64_t sub_1000BE39C(unint64_t result, uint64_t a2, _QWORD *a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  a3[(result >> 6) + 8] |= 1 << result;
  v4 = 8 * result;
  *(double *)(a3[6] + v4) = a4;
  *(_QWORD *)(a3[7] + v4) = a2;
  v5 = a3[2];
  v6 = __OFADD__(v5, 1);
  v7 = v5 + 1;
  if (v6)
    __break(1u);
  else
    a3[2] = v7;
  return result;
}

uint64_t sub_1000BE3E4(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for URL(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

_OWORD *sub_1000BE47C(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_100020848(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

void sub_1000BE4E4()
{
  sub_1000BE50C(type metadata accessor for MetricsManager.EdgeGuideMetric, &qword_1004819C0);
}

void sub_1000BE4F8()
{
  sub_1000BE50C(type metadata accessor for MetricsManager.SurfaceVectorGuideMetric, &qword_1004819C8);
}

void sub_1000BE50C(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;

  v5 = a1(0);
  v32 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v29 - v6;
  sub_10000EDC8(a2);
  v29 = v2;
  v8 = *v2;
  v9 = static _DictionaryStorage.copy(original:)(*v2);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
LABEL_26:
    swift_release(v8);
    *v29 = v10;
    return;
  }
  v11 = (void *)(v9 + 64);
  v12 = (unint64_t)((1 << *(_BYTE *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)v11 >= v8 + 64 + 8 * v12)
    memmove(v11, (const void *)(v8 + 64), 8 * v12);
  v30 = v8 + 64;
  v14 = 0;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v8 + 16);
  v15 = 1 << *(_BYTE *)(v8 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(v8 + 64);
  v31 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      v18 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v19 = v18 | (v14 << 6);
      goto LABEL_12;
    }
    v26 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v31)
      goto LABEL_26;
    v27 = *(_QWORD *)(v30 + 8 * v26);
    ++v14;
    if (!v27)
    {
      v14 = v26 + 1;
      if (v26 + 1 >= v31)
        goto LABEL_26;
      v27 = *(_QWORD *)(v30 + 8 * v14);
      if (!v27)
        break;
    }
LABEL_25:
    v17 = (v27 - 1) & v27;
    v19 = __clz(__rbit64(v27)) + (v14 << 6);
LABEL_12:
    v20 = 16 * v19;
    v21 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * v19);
    v23 = *v21;
    v22 = v21[1];
    v24 = *(_QWORD *)(v32 + 72) * v19;
    sub_100036344(*(_QWORD *)(v8 + 56) + v24, (uint64_t)v7, a1);
    v25 = (_QWORD *)(*(_QWORD *)(v10 + 48) + v20);
    *v25 = v23;
    v25[1] = v22;
    sub_10006CAB4((uint64_t)v7, *(_QWORD *)(v10 + 56) + v24, a1);
    swift_bridgeObjectRetain(v22);
  }
  v28 = v26 + 2;
  if (v28 >= v31)
    goto LABEL_26;
  v27 = *(_QWORD *)(v30 + 8 * v28);
  if (v27)
  {
    v14 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v14 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v14 >= v31)
      goto LABEL_26;
    v27 = *(_QWORD *)(v30 + 8 * v14);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1000BE73C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  _OWORD v23[2];

  v1 = v0;
  sub_10000EDC8(&qword_10047C108);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release();
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 32 * v15;
    sub_10004F88C(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v23);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    sub_100020848(v23, (_OWORD *)(*(_QWORD *)(v4 + 56) + v18));
    v19 = v17;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1000BE900()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  id v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;

  v1 = v0;
  sub_10000EDC8(&qword_100481A50);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(v2 + 56) + 24 * v15;
    v17 = *(_QWORD *)(v16 + 16);
    v18 = *(_OWORD *)v16;
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    v19 = *(_QWORD *)(v4 + 56) + 24 * v15;
    *(_OWORD *)v19 = v18;
    *(_QWORD *)(v19 + 16) = v17;
    v20 = (id)v18;
    swift_retain(v17);
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1000BEAC0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;

  v1 = v0;
  sub_10000EDC8(&qword_1004819E0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v20 = __clz(__rbit64(v18));
    v12 = (v18 - 1) & v18;
    v15 = v20 + (v9 << 6);
LABEL_12:
    v16 = *(_BYTE *)(*(_QWORD *)(v2 + 56) + v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 56) + v15) = v16;
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1000BEC48()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;

  v1 = v0;
  sub_10000EDC8(&qword_100481A28);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v20 = __clz(__rbit64(v18));
    v12 = (v18 - 1) & v18;
    v15 = v20 + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1000BEDD4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v1 = v0;
  sub_10000EDC8(&qword_1004819E8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    v18 = v17;
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1000BEF74()
{
  sub_1000BE50C(type metadata accessor for MetricsManager.PersonHeightMetric, &qword_100481A48);
}

void sub_1000BEF88()
{
  sub_1000BF5C8(&qword_100481990);
}

void sub_1000BEF94()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int64_t v25;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000EDC8(&qword_100481A88);
  v23 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    swift_release(v5);
    *v23 = v7;
    return;
  }
  v8 = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)v8 >= v5 + 64 + 8 * v9)
    memmove(v8, (const void *)(v5 + 64), 8 * v9);
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v24 = v5 + 64;
  v25 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v19 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v25)
      goto LABEL_26;
    v20 = *(_QWORD *)(v24 + 8 * v19);
    ++v11;
    if (!v20)
    {
      v11 = v19 + 1;
      if (v19 + 1 >= v25)
        goto LABEL_26;
      v20 = *(_QWORD *)(v24 + 8 * v11);
      if (!v20)
        break;
    }
LABEL_25:
    v14 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v17, v1);
    v18 = *(_BYTE *)(*(_QWORD *)(v5 + 56) + v16);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 48) + v17, v4, v1);
    *(_BYTE *)(*(_QWORD *)(v7 + 56) + v16) = v18;
  }
  v21 = v19 + 2;
  if (v21 >= v25)
    goto LABEL_26;
  v20 = *(_QWORD *)(v24 + 8 * v21);
  if (v20)
  {
    v11 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v11 >= v25)
      goto LABEL_26;
    v20 = *(_QWORD *)(v24 + 8 * v11);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1000BF1B4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000EDC8(&qword_100481A90);
  v24 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    swift_release(v5);
    *v24 = v7;
    return;
  }
  v8 = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)v8 >= v5 + 64 + 8 * v9)
    memmove(v8, (const void *)(v5 + 64), 8 * v9);
  v25 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      v11 = v20 + 1;
      if (v20 + 1 >= v26)
        goto LABEL_26;
      v21 = *(_QWORD *)(v25 + 8 * v11);
      if (!v21)
        break;
    }
LABEL_25:
    v14 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v17, v1);
    v18 = 8 * v16;
    v19 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v16);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 48) + v17, v4, v1);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v19;
    swift_retain(v19);
  }
  v22 = v20 + 2;
  if (v22 >= v26)
    goto LABEL_26;
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v11 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v11);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1000BF3E4()
{
  sub_1000BF5C8(&qword_1004819B0);
}

void sub_1000BF3F0()
{
  sub_1000BF5C8(&qword_1004819A8);
}

void sub_1000BF3FC()
{
  sub_1000BF5C8(&qword_1004819D0);
}

void sub_1000BF408()
{
  sub_1000BE50C(type metadata accessor for MetricsManager.VerticalGuideMetric, &qword_1004819B8);
}

void sub_1000BF41C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_10000EDC8(&qword_1004819D8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release();
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 4 * v15;
    v20 = *(_DWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_DWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1000BF5C8(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  id v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  v2 = v1;
  sub_10000EDC8(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    swift_release();
    *v2 = v5;
    return;
  }
  v6 = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)v6 >= v3 + 64 + 8 * v8)
    memmove(v6, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v24 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v14)
      goto LABEL_26;
    v25 = *(_QWORD *)(v7 + 8 * v24);
    ++v10;
    if (!v25)
    {
      v10 = v24 + 1;
      if (v24 + 1 >= v14)
        goto LABEL_26;
      v25 = *(_QWORD *)(v7 + 8 * v10);
      if (!v25)
        break;
    }
LABEL_25:
    v13 = (v25 - 1) & v25;
    v16 = __clz(__rbit64(v25)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v19 = v18[1];
    v20 = 8 * v16;
    v21 = *(void **)(*(_QWORD *)(v3 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = *v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain(v19);
    v23 = v21;
  }
  v26 = v24 + 2;
  if (v26 >= v14)
    goto LABEL_26;
  v25 = *(_QWORD *)(v7 + 8 * v26);
  if (v25)
  {
    v10 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v25 = *(_QWORD *)(v7 + 8 * v10);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1000BF770()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;

  v1 = v0;
  sub_10000EDC8(&qword_100481A98);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v20 = __clz(__rbit64(v18));
    v12 = (v18 - 1) & v18;
    v15 = v20 + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1000BF8FC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  id v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  __int128 v30;
  __int128 v31;

  v1 = v0;
  sub_10000EDC8(&qword_100481A78);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release();
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v27 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v13)
      goto LABEL_26;
    v28 = *(_QWORD *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      v9 = v27 + 1;
      if (v27 + 1 >= v13)
        goto LABEL_26;
      v28 = *(_QWORD *)(v6 + 8 * v9);
      if (!v28)
        break;
    }
LABEL_25:
    v12 = (v28 - 1) & v28;
    v15 = __clz(__rbit64(v28)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 48 * v15;
    v21 = *(_QWORD *)(v2 + 56) + v20;
    v22 = *(_QWORD *)v21;
    v23 = *(void **)(v21 + 40);
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v30 = *(_OWORD *)(v21 + 8);
    v31 = *(_OWORD *)(v21 + 24);
    *v24 = v19;
    v24[1] = v18;
    v25 = *(_QWORD *)(v4 + 56) + v20;
    *(_QWORD *)v25 = v22;
    *(_OWORD *)(v25 + 8) = v30;
    *(_OWORD *)(v25 + 24) = v31;
    *(_QWORD *)(v25 + 40) = v23;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(*((_QWORD *)&v30 + 1));
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRetain(*((_QWORD *)&v31 + 1));
    v26 = v23;
  }
  v29 = v27 + 2;
  if (v29 >= v13)
    goto LABEL_26;
  v28 = *(_QWORD *)(v6 + 8 * v29);
  if (v28)
  {
    v9 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v28 = *(_QWORD *)(v6 + 8 * v9);
    ++v29;
    if (v28)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1000BFB0C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;

  v1 = v0;
  sub_10000EDC8(&qword_100481A70);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release();
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      v9 = v26 + 1;
      if (v26 + 1 >= v13)
        goto LABEL_26;
      v27 = *(_QWORD *)(v6 + 8 * v9);
      if (!v27)
        break;
    }
LABEL_25:
    v12 = (v27 - 1) & v27;
    v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 24 * v15;
    v21 = *(_QWORD *)(v2 + 56) + v20;
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v23 = *(_OWORD *)v21;
    v24 = *(_QWORD *)(v21 + 16);
    *v22 = v19;
    v22[1] = v18;
    v25 = *(_QWORD *)(v4 + 56) + v20;
    *(_OWORD *)v25 = v23;
    *(_QWORD *)(v25 + 16) = v24;
    swift_bridgeObjectRetain(v18);
  }
  v28 = v26 + 2;
  if (v28 >= v13)
    goto LABEL_26;
  v27 = *(_QWORD *)(v6 + 8 * v28);
  if (v27)
  {
    v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v9);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1000BFCCC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;

  v1 = v0;
  sub_10000EDC8(&qword_100481A68);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release();
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      v9 = v26 + 1;
      if (v26 + 1 >= v13)
        goto LABEL_26;
      v27 = *(_QWORD *)(v6 + 8 * v9);
      if (!v27)
        break;
    }
LABEL_25:
    v12 = (v27 - 1) & v27;
    v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 12 * v15;
    v21 = *(_QWORD *)(v2 + 56) + v20;
    v22 = *(_DWORD *)(v21 + 8);
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v24 = *(_QWORD *)v21;
    *v23 = v19;
    v23[1] = v18;
    v25 = *(_QWORD *)(v4 + 56) + v20;
    *(_QWORD *)v25 = v24;
    *(_DWORD *)(v25 + 8) = v22;
    swift_bridgeObjectRetain(v18);
  }
  v28 = v26 + 2;
  if (v28 >= v13)
    goto LABEL_26;
  v27 = *(_QWORD *)(v6 + 8 * v28);
  if (v27)
  {
    v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v9);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1000BFE8C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22[40];

  v1 = v0;
  sub_10000EDC8(&qword_100481A80);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release();
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 304 * v15;
    memcpy(v22, (const void *)(*(_QWORD *)(v2 + 56) + 304 * v15), 0x130uLL);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    memcpy((void *)(*(_QWORD *)(v4 + 56) + v18), v22, 0x130uLL);
    sub_1000C2C50(v22);
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1000C0068()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  sub_10000EDC8(&qword_100481AA0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release();
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    swift_bridgeObjectRetain(v17);
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1000C0208()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000EDC8(&qword_100481A58);
  v24 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    swift_release();
    *v24 = v7;
    return;
  }
  v8 = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)v8 >= v5 + 64 + 8 * v9)
    memmove(v8, (const void *)(v5 + 64), 8 * v9);
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v25 = v5 + 64;
  v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      v11 = v20 + 1;
      if (v20 + 1 >= v26)
        goto LABEL_26;
      v21 = *(_QWORD *)(v25 + 8 * v11);
      if (!v21)
        break;
    }
LABEL_25:
    v14 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v17, v1);
    v18 = 8 * v16;
    v19 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v18);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 48) + v17, v4, v1);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v19;
  }
  v22 = v20 + 2;
  if (v22 >= v26)
    goto LABEL_26;
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v11 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v11);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1000C042C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  sub_10000EDC8(&qword_100481A00);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release();
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    swift_retain();
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1000C05CC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  id v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  sub_10000EDC8(&qword_100481A30);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release();
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = *(void **)(*(_QWORD *)(v2 + 56) + 8 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
    v17 = v16;
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1000C076C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  __int128 v24;

  v1 = v0;
  sub_10000EDC8(&qword_100481A40);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release();
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = 8 * v15;
    v18 = *(void **)(*(_QWORD *)(v2 + 56) + v17);
    v24 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v16) = v24;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v17) = v18;
    swift_retain();
    v19 = *((id *)&v24 + 1);
    v20 = v18;
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1000C0930()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  __int128 v22;
  _OWORD v23[2];

  v1 = v0;
  sub_10000EDC8(&qword_100481A38);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release();
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v22 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v17 = 32 * v15;
    sub_10004F88C(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v23);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v16) = v22;
    sub_100020848(v23, (_OWORD *)(*(_QWORD *)(v4 + 56) + v17));
    swift_retain();
    v18 = *((id *)&v22 + 1);
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1000C0B10()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;

  v1 = v0;
  sub_10000EDC8(&qword_100481A18);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release();
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v21 = __clz(__rbit64(v19));
    v12 = (v19 - 1) & v19;
    v15 = v21 + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1000C0C9C()
{
  sub_1000C0CB4(&qword_100481A08);
}

void sub_1000C0CA8()
{
  sub_1000C0CB4(&qword_100481A10);
}

void sub_1000C0CB4(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v2 = v1;
  sub_10000EDC8(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    swift_release(v3);
    *v2 = v5;
    return;
  }
  v6 = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)v6 >= v3 + 64 + 8 * v8)
    memmove(v6, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v20 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v14)
      goto LABEL_26;
    v21 = *(_QWORD *)(v7 + 8 * v20);
    ++v10;
    if (!v21)
    {
      v10 = v20 + 1;
      if (v20 + 1 >= v14)
        goto LABEL_26;
      v21 = *(_QWORD *)(v7 + 8 * v10);
      if (!v21)
        break;
    }
LABEL_25:
    v13 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(void **)(*(_QWORD *)(v3 + 56) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = *(_QWORD *)(*(_QWORD *)(v3 + 48) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v17) = v18;
    v19 = v18;
  }
  v22 = v20 + 2;
  if (v22 >= v14)
    goto LABEL_26;
  v21 = *(_QWORD *)(v7 + 8 * v22);
  if (v21)
  {
    v10 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v21 = *(_QWORD *)(v7 + 8 * v10);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1000C0E4C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  sub_10000EDC8(&qword_100481A20);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release();
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 16 * v15;
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v18);
    v21 = *v19;
    v20 = v19[1];
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v18);
    *v22 = v21;
    v22[1] = v20;
    swift_bridgeObjectRetain(v20);
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

char *sub_1000C0FF8(void *a1, char a2, void *a3, char a4, uint64_t a5, uint64_t a6, void *a7)
{
  char *v14;
  id v15;
  id v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;

  v14 = (char *)objc_allocWithZone((Class)type metadata accessor for LabelDetailsPlatterWrapper(0));
  v15 = a1;
  v16 = a3;
  v17 = sub_1000C1320(v15, a2, v16, a4, a5, a6, v14);
  swift_unknownObjectWeakAssign(&v17[qword_100480D70], a7);
  v18 = swift_allocObject(&unk_1004446D0, 24, 7);
  swift_unknownObjectWeakInit(v18 + 16, v17);
  v19 = v17;
  v20 = sub_10000EDC8((uint64_t *)&unk_100481B80);
  v21 = sub_100043310((unint64_t *)&unk_1004862D0, (uint64_t *)&unk_100481B80, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v23 = Publisher<>.sink(receiveValue:)(sub_1000C2C44, v18, v20, v21, v22);
  swift_release();
  *(_QWORD *)&v19[qword_100480D78] = v23;
  swift_release();
  sub_10009EB6C();

  swift_release();
  return v19;
}

char *sub_1000C1170(void *a1, char a2, void *a3, char a4, uint64_t a5, uint64_t a6, void *a7, double a8, double a9, double a10, double a11)
{
  char *v22;
  id v23;
  id v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  double *v32;

  v22 = (char *)objc_allocWithZone((Class)type metadata accessor for LabelDetailsPlatterWrapper(0));
  v23 = a1;
  v24 = a3;
  v25 = sub_1000C1320(v23, a2, v24, a4, a5, a6, v22);
  swift_unknownObjectWeakAssign(&v25[qword_100480D70], a7);
  v26 = swift_allocObject(&unk_1004446D0, 24, 7);
  swift_unknownObjectWeakInit(v26 + 16, v25);
  v27 = v25;
  v28 = sub_10000EDC8((uint64_t *)&unk_100481B80);
  v29 = sub_100043310((unint64_t *)&unk_1004862D0, (uint64_t *)&unk_100481B80, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v31 = Publisher<>.sink(receiveValue:)(sub_1000C2C44, v26, v28, v29, v30);
  swift_release();
  *(_QWORD *)&v27[qword_100480D78] = v31;
  swift_release();
  v32 = (double *)&v27[qword_100480E30];
  *v32 = a8;
  v32[1] = a9;
  v32[2] = a10;
  v32[3] = a11;
  *((_BYTE *)v32 + 32) = 0;
  sub_10009EB6C();

  swift_release();
  return v27;
}

char *sub_1000C1320(void *a1, char a2, void *a3, char a4, uint64_t a5, uint64_t a6, char *a7)
{
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, __n128);
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, __n128);
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, __n128);
  __n128 v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  id v44;
  char *v45;
  char *v46;
  uint64_t v47;
  void *v48;
  char *v49;
  id v50;
  void *v51;
  void *v52;
  id v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  id v58;
  void *v59;
  id v60;
  uint64_t v61;
  id v62;
  void *v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  void *v67;
  id v68;
  id v69;
  id v70;
  uint64_t v71;
  id v72;
  id v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  id v78;
  id v79;
  double v80;
  double v81;
  id v82;
  double v83;
  double v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  NSString v88;
  id v89;
  id v90;
  char *result;
  char *v92;
  double v93;
  double v94;
  char *v95;
  double v96;
  double v97;
  uint64_t v98;
  UIContentSizeCategory v99;
  char v100;
  void *v101;
  void *v102;
  id v103;
  id v104;
  double v105;
  double v106;
  uint64_t v107;
  UIContentSizeCategory v108;
  double v109;
  id v110;
  id v111;
  double v112;
  double v113;
  void *v114;
  void *v115;
  uint64_t v116;
  id v117;
  id v118;
  void *v119;
  char v121;
  id v123;
  id v125;
  char *v126;
  objc_class *ObjectType;
  id v128;
  CGAffineTransform v130;
  objc_super v131;

  ObjectType = (objc_class *)swift_getObjectType(a7);
  v10 = qword_100480D50;
  KeyPath = swift_getKeyPath(&unk_1003B53C0);
  v12 = sub_10000EDC8(&qword_1004810C0);
  v13 = qword_10047AD88;
  v14 = a7;
  if (v13 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v15 = qword_1004AF890;
  v16 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v12 + 272);
  v17 = swift_retain();
  *(_QWORD *)&a7[v10] = v16(KeyPath, v15, v17);
  v18 = qword_100480D58;
  v19 = swift_getKeyPath(&unk_1003B5398);
  v20 = sub_10000EDC8(&qword_1004810C8);
  v21 = qword_1004AF890;
  v22 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v20 + 272);
  v23 = swift_retain();
  *(_QWORD *)&v14[v18] = v22(v19, v21, v23);
  *(_QWORD *)&v14[qword_100480D60] = 0;
  v24 = qword_100480D68;
  *(_QWORD *)&v14[v24] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PillToPlatterTransitionView()), "init");
  swift_unknownObjectWeakInit(&v14[qword_100480D70], 0);
  *(_QWORD *)&v14[qword_100480D78] = 0;
  v25 = qword_100480D80;
  v26 = sub_10000EDC8((uint64_t *)&unk_1004810D0);
  v27 = swift_getKeyPath(&unk_1003B5320);
  v28 = qword_1004AF890;
  v29 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v26 + 272);
  v30 = swift_retain();
  *(_QWORD *)&v14[v25] = v29(v27, v28, v30);
  v31 = &v14[qword_100480D88];
  *((_QWORD *)v31 + 1) = 0;
  swift_unknownObjectWeakInit(v31, 0);
  v14[qword_100480D90] = 0;
  *(_QWORD *)&v14[qword_100480D98] = 0;
  v32 = qword_100480DA0;
  *(_QWORD *)&v14[v32] = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
  v33 = qword_100480DA8;
  *(_QWORD *)&v14[v33] = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  v34 = qword_100480DB0;
  *(_QWORD *)&v14[v34] = objc_msgSend(objc_allocWithZone((Class)UIImageView), "init");
  v35 = qword_100480DB8;
  *(_QWORD *)&v14[v35] = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
  v36 = qword_100480DC0;
  *(_QWORD *)&v14[v36] = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
  v37 = qword_100480DC8;
  *(_QWORD *)&v14[v37] = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
  *(_QWORD *)&v14[qword_100480DD0] = 0;
  *(_QWORD *)&v14[qword_100480DD8] = 0;
  v38 = qword_100480DE0;
  *(CFTimeInterval *)&v14[v38] = CACurrentMediaTime();
  v39 = &v14[qword_100480DE8];
  *(_QWORD *)v39 = 0;
  *((_QWORD *)v39 + 1) = 0;
  v39[16] = 1;
  v40 = &v14[qword_100480DF0];
  *(_QWORD *)v40 = 0;
  *((_QWORD *)v40 + 1) = 0;
  v40[16] = 1;
  v41 = &v14[qword_100480DF8];
  *(_QWORD *)v41 = 0;
  v41[8] = 1;
  v14[qword_100480E00] = 0;
  *(_QWORD *)&v14[qword_100480E08] = 0;
  *(_QWORD *)&v14[qword_100480E28] = 0x3F91111111111111;
  v42 = &v14[qword_100480E30];
  *(_OWORD *)v42 = 0u;
  *((_OWORD *)v42 + 1) = 0u;
  v42[32] = 1;
  *(_QWORD *)&v14[qword_100480E38] = 0;
  *(_QWORD *)&v14[qword_100480E10] = a1;
  v121 = a4;
  v14[qword_100480E18] = a4 & 1;
  v43 = &v14[qword_100480E20];
  *(_QWORD *)v43 = a5;
  *((_QWORD *)v43 + 1) = a6;
  v44 = a1;

  v131.receiver = v14;
  v131.super_class = ObjectType;
  v45 = (char *)objc_msgSendSuper2(&v131, "init");
  v46 = &v45[qword_100480D88];
  *((_QWORD *)v46 + 1) = &off_100444430;
  swift_unknownObjectWeakAssign(v46, a3);
  v47 = qword_100480DC0;
  v48 = *(void **)&v45[qword_100480DC0];
  v49 = v45;
  v50 = v48;
  objc_msgSend(v44, "bounds");
  objc_msgSend(v50, "setFrame:");

  v51 = *(void **)&v45[v47];
  v52 = (void *)objc_opt_self(UIColor);
  v53 = v51;
  v125 = v52;
  v54 = objc_msgSend(v52, "clearColor");
  objc_msgSend(v53, "setBackgroundColor:", v54);

  objc_msgSend(*(id *)&v45[v47], "setUserInteractionEnabled:", 0);
  v55 = qword_100480DC8;
  v56 = qword_10047AE30;
  v57 = *(id *)&v49[qword_100480DC8];
  if (v56 != -1)
    swift_once(&qword_10047AE30, sub_100195B90);
  objc_msgSend(v57, "setBackgroundColor:", qword_1004AF918);

  v58 = *(id *)&v49[v55];
  v128 = v44;
  objc_msgSend(v44, "bounds");
  objc_msgSend(v58, "setFrame:");

  v59 = *(void **)&v49[v55];
  objc_msgSend(v59, "setUserInteractionEnabled:", 0);
  objc_msgSend(v59, "setAlpha:", 0.0);
  v60 = objc_msgSend(objc_allocWithZone((Class)UITapGestureRecognizer), "initWithTarget:action:", v49, "touchBackgroundFrom:");
  objc_msgSend(v60, "setDelegate:", v49);
  v61 = qword_100480DB8;
  v62 = objc_msgSend(*(id *)&v49[qword_100480DB8], "layer");
  objc_msgSend(v62, "setCornerCurve:", kCACornerCurveContinuous);

  v123 = (id)objc_opt_self(Gestalt);
  if ((objc_msgSend(v123, "jasperAvailable") & 1) == 0)
  {
    v63 = *(void **)&v45[v47];
    objc_msgSend(v128, "addSubview:", v63);
    objc_msgSend(v63, "addGestureRecognizer:", v60);
    objc_msgSend(v63, "addSubview:", *(_QWORD *)&v49[v55]);
    v64 = qword_10047AE70;
    v65 = *(id *)&v49[v61];
    if (v64 != -1)
      swift_once(&qword_10047AE70, sub_100195D4C);
    objc_msgSend(v65, "setBackgroundColor:", qword_1004AF968);

    objc_msgSend(*(id *)&v45[v47], "addSubview:", *(_QWORD *)&v49[v61]);
    objc_msgSend(*(id *)&v49[v61], "addSubview:", *(_QWORD *)&v49[qword_100480DA0]);
  }
  v66 = qword_100480DA8;
  v67 = *(void **)&v49[v61];
  v68 = *(id *)&v49[qword_100480DA8];
  objc_msgSend(v67, "bounds");
  objc_msgSend(v68, "setFrame:");

  v69 = *(id *)&v49[v66];
  v70 = objc_msgSend(v125, "clearColor");
  objc_msgSend(v69, "setBackgroundColor:", v70);

  v71 = qword_10047AE58;
  v72 = *(id *)&v49[v66];
  if (v71 != -1)
    swift_once(&qword_10047AE58, sub_100195D00);
  objc_msgSend(v72, "setTextColor:", qword_1004AF950);

  v73 = *(id *)&v49[v66];
  sub_100197BF8();
  v75 = v74;
  objc_msgSend(v73, "setFont:", v74);

  v76 = *(void **)&v49[v66];
  objc_msgSend(v76, "setTextAlignment:", 1);
  v77 = (void *)objc_opt_self(UIScreen);
  v78 = v76;
  v79 = objc_msgSend(v77, "mainScreen");
  objc_msgSend(v79, "scale");
  v81 = v80;

  v82 = objc_msgSend(v77, "mainScreen");
  objc_msgSend(v82, "scale");
  v84 = v83;

  CGAffineTransformMakeScale(&v130, 1.0 / v81, 1.0 / v84);
  objc_msgSend(v78, "setTransform:", &v130);

  v85 = qword_100480DA0;
  objc_msgSend(*(id *)&v49[qword_100480DA0], "addSubview:", *(_QWORD *)&v49[v66]);
  v86 = qword_100480DB0;
  v87 = *(id *)&v49[qword_100480DB0];
  v88 = String._bridgeToObjectiveC()();
  v89 = objc_msgSend((id)objc_opt_self(UIImage), "imageNamed:", v88);

  objc_msgSend(v87, "setImage:", v89);
  v90 = *(id *)&v49[v86];
  result = (char *)objc_msgSend(v90, "image");
  if (!result)
  {
    __break(1u);
    goto LABEL_28;
  }
  v92 = result;
  objc_msgSend(result, "size");
  v94 = v93;

  result = (char *)objc_msgSend(*(id *)&v49[v86], "image");
  if (!result)
  {
LABEL_28:
    __break(1u);
    return result;
  }
  v95 = result;
  objc_msgSend(result, "size");
  v97 = v96;

  if (qword_10047AE50 != -1)
    swift_once(&qword_10047AE50, sub_100195CE8);
  v98 = qword_1004AF948;
  if (qword_10047A738 != -1)
    swift_once(&qword_10047A738, sub_10000E4DC);
  v99 = (UIContentSizeCategory)(id)qword_1004AF068;
  v100 = static UIContentSizeCategory.> infix(_:_:)(v99, UIContentSizeCategoryAccessibilityLarge);

  v119 = v60;
  v126 = (char *)v85;
  if ((v100 & 1) != 0)
  {

    v99 = UIContentSizeCategoryAccessibilityLarge;
  }
  v101 = (void *)objc_opt_self(UIFont);
  v102 = (void *)objc_opt_self(UITraitCollection);
  v103 = objc_msgSend(v102, "traitCollectionWithPreferredContentSizeCategory:", v99);

  v104 = objc_msgSend(v101, "preferredFontForTextStyle:compatibleWithTraitCollection:", v98, v103);
  objc_msgSend(v104, "pointSize");
  v106 = v105;

  v107 = qword_1004AF948;
  v108 = (UIContentSizeCategory)(id)qword_1004AF068;
  LOBYTE(v103) = static UIContentSizeCategory.> infix(_:_:)(v108, UIContentSizeCategoryAccessibilityLarge);

  if ((v103 & 1) != 0)
  {

    v108 = UIContentSizeCategoryAccessibilityLarge;
  }
  v109 = v94 / v97 * (v106 * 0.9);
  v110 = objc_msgSend(v102, "traitCollectionWithPreferredContentSizeCategory:", v108);

  v111 = objc_msgSend(v101, "preferredFontForTextStyle:compatibleWithTraitCollection:", v107, v110);
  objc_msgSend(v111, "pointSize");
  v113 = v112;

  objc_msgSend(v90, "setBounds:", 0.0, 0.0, v109, v113 * 0.9);
  v114 = *(void **)&v126[(_QWORD)v49];
  v115 = *(void **)&v49[v86];
  objc_msgSend(v114, "addSubview:", v115);
  objc_msgSend(v115, "setAlpha:", 0.0);
  if ((v121 & 1) != 0)
  {
    CGAffineTransformMakeRotation(&v130, 3.14159265);
    objc_msgSend(v115, "setTransform:", &v130);
  }
  v49[qword_100480D90] = a2;
  if (objc_msgSend(v123, "jasperAvailable"))
  {
    v116 = qword_100480D68;
    objc_msgSend(*(id *)&v49[qword_100480D68], "setAlpha:", 0.0);
    v117 = *(id *)&v49[v116];
    v118 = v114;
    objc_msgSend(v117, "addSubview:", v118);

  }
  else
  {
    sub_10009EB6C();
  }

  return v49;
}

id sub_1000C1F64(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t inited;
  NSString *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  NSString *v12;
  id v13;
  char isUniquelyReferenced_nonNull_native;
  id v15;
  NSString v16;
  Class isa;
  id v18;
  _OWORD v20[2];
  __int128 v21;
  uint64_t v22;
  _BYTE v23[72];

  v3 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v3 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v3)
    return 0;
  v6 = sub_10000EDC8(&qword_100481980);
  inited = swift_initStackObject(v6, v23);
  *(_OWORD *)(inited + 16) = xmmword_1003B0BD0;
  *(_QWORD *)(inited + 32) = NSFontAttributeName;
  v8 = NSFontAttributeName;
  sub_100197BF8();
  v10 = v9;
  *(_QWORD *)(inited + 64) = sub_100018148(0, &qword_10047C110, UIFont_ptr);
  *(_QWORD *)(inited + 40) = v10;
  v11 = sub_1000C7274(inited);
  if (a3)
  {
    v22 = sub_100018148(0, &qword_10047D0A0, UIColor_ptr);
    *(_QWORD *)&v21 = a3;
    sub_100020848(&v21, v20);
    v12 = NSForegroundColorAttributeName;
    v13 = a3;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v11);
    sub_1000BC57C(v20, v12, isUniquelyReferenced_nonNull_native);

    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v15 = objc_allocWithZone((Class)NSAttributedString);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v11);
  v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  type metadata accessor for Key(0);
  sub_10000C4B0((unint64_t *)&qword_10047B698, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1003B0824);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v18 = objc_msgSend(v15, "initWithString:attributes:", v16, isa, swift_bridgeObjectRelease(v11).n128_f64[0]);
  swift_bridgeObjectRelease(v11);

  return v18;
}

uint64_t sub_1000C2158()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_1000C217C()
{
  uint64_t v0;

  return sub_1000B02D8(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000C2184(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000C2194(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000C219C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000EDC8((uint64_t *)&unk_10047E440);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000C21E4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000EDC8((uint64_t *)&unk_10047E440);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000C2224(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000EDC8((uint64_t *)&unk_10047E440);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

double sub_1000C226C(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 128) = 1;
  return result;
}

uint64_t sub_1000C228C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 128))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1000C22A8(uint64_t result)
{
  *(_BYTE *)(result + 128) = 0;
  return result;
}

uint64_t sub_1000C22B0(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_1000C22D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_unknownObjectWeakDestroy(v2 + 16, a2);
  return swift_deallocObject(v2, 24, 7);
}

void sub_1000C22FC()
{
  uint64_t v0;

  sub_1000B730C(v0);
}

uint64_t sub_1000C2304@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  *a2 = v2;
  return swift_retain(v2);
}

uint64_t sub_1000C2320@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 88);
  *a2 = v2;
  return swift_retain(v2);
}

uint64_t sub_1000C2330@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 176);
  *a2 = v2;
  return swift_retain(v2);
}

uint64_t sub_1000C2340@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 288);
  *a2 = v2;
  return swift_retain(v2);
}

uint64_t sub_1000C2350()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1000C237C()
{
  uint64_t v0;

  sub_1000AFFFC(*(_QWORD *)(v0 + 16), *(id *)(v0 + 24));
}

uint64_t sub_1000C2384()
{
  sub_1000AE494();
  return sub_1000AE9C8();
}

void sub_1000C23A8()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC7Measure11LabelRender_selectionState) = 3;
}

uint64_t sub_1000C23C0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
  return swift_deallocObject(v0, 96, 7);
}

void sub_1000C23EC()
{
  uint64_t v0;

  sub_1000B4970(*(_QWORD *)(v0 + 16), v0 + 24);
}

uint64_t sub_1000C23F8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1000C2420(uint64_t a1)
{
  uint64_t v1;

  return sub_100093298(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(double *)(v1 + 32), *(double *)(v1 + 40), *(double *)(v1 + 48), *(double *)(v1 + 56));
}

uint64_t sub_1000C2430(__n128 a1, __n128 a2)
{
  __n128 v2;
  void *v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  _BYTE __src[512];
  _BYTE __dst[512];

  if (qword_10047AD88 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v2 = swift_retain();
  PublishedValue.wrappedValue.getter(v2);
  swift_release();
  memcpy(__dst, __src, sizeof(__dst));
  v3 = (void *)sub_10008F8B8();
  v4 = sub_100012C00((uint64_t)__dst);
  if (v3)
  {
    MeasureCore.shared.unsafeMutableAddressor(v4);
    swift_retain();
    v5 = MeasureCore.isOccluded(_:in:withTolerance:)(v3, a1, 0.1);
    swift_release();
    if ((v5 & 1) == 0)
    {
      swift_retain();
      v7 = MeasureCore.isOccluded(_:in:withTolerance:)(v3, a2, 0.1);
      swift_release();

      v6 = v7 ^ 1;
      return v6 & 1;
    }

  }
  v6 = 0;
  return v6 & 1;
}

void sub_1000C255C(uint64_t a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7, __n128 a8, __n128 a9, float a10, float a11)
{
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  double v21;
  float v22;
  float v23;
  float32x4_t v24;
  float32x4_t v25;
  unsigned __int32 v26;
  __int128 v27;
  __int128 v28;
  float32x2_t v29;
  float32x2_t v30;
  __n128 *v31;
  float v32;
  float32x2_t v33;
  __n128 v34;
  __n128 v35;
  float v36;
  float32x4_t v37;
  float32x4_t v38;
  __n128 *v39;
  double v40;
  float v41;
  float32x4_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  float32x4_t v46;
  float32x2_t v47;
  float v48;
  BOOL v49;
  uint64_t v50;
  float v51;
  float32x2_t v52;
  float v53;
  float v54;
  float32x4_t v55;
  float32x4_t v56;
  float v57;
  uint64_t v59;
  __n128 v60;
  void (*v61)(_QWORD *__return_ptr, __n128);
  __n128 v62;
  void (*v63)(_QWORD *__return_ptr, __n128);
  __n128 v64;
  uint64_t v65;
  CGPoint v66;
  CGFloat y;
  __n128 v68;
  __n128 v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  __n128 *v73;
  CGRect *v74;
  uint64_t v75;
  __int128 v76;
  float v77;
  uint64_t v78;
  __n128 v79;
  __n128 v81;
  __n128 v83;
  __n128 v85;
  __n128 v87;
  float v88;
  float32x4_t v89;
  __n128 v90;
  float32x2_t v91;
  __n128 v92;
  float32x4_t v93;
  __n128 v94;
  float32x4_t v95;
  float32x2_t v96;
  __n128 v97;
  __int128 v98;
  float v99;
  _QWORD __src[64];
  _OWORD __dst[32];
  double v102[64];

  v19 = a1;
  if ((a1 & 1) != 0)
  {
    v94 = a3;
    v97 = a2;
    v90 = a5;
    v92 = a4;
  }
  else
  {
    v94 = *(__n128 *)(v18 + OBJC_IVAR____TtC7Measure11LabelRender_end1 + 16);
    v97 = *(__n128 *)(v18 + OBJC_IVAR____TtC7Measure11LabelRender_end1);
    v90 = *(__n128 *)(v18 + OBJC_IVAR____TtC7Measure11LabelRender_end1 + 48);
    v92 = *(__n128 *)(v18 + OBJC_IVAR____TtC7Measure11LabelRender_end1 + 32);
    a6 = *(__n128 *)(v18 + OBJC_IVAR____TtC7Measure11LabelRender_end2);
    a7 = *(__n128 *)(v18 + OBJC_IVAR____TtC7Measure11LabelRender_end2 + 16);
    a8 = *(__n128 *)(v18 + OBJC_IVAR____TtC7Measure11LabelRender_end2 + 32);
    a9 = *(__n128 *)(v18 + OBJC_IVAR____TtC7Measure11LabelRender_end2 + 48);
  }
  *(double *)&v20 = simd_float4x4.position.getter(a6, a7, a8, a9);
  v76 = v20;
  v21 = simd_float4x4.position.getter(v97, v94, v92, v90);
  *(float32x2_t *)v24.f32 = vsub_f32(*(float32x2_t *)&v76, *(float32x2_t *)&v21);
  v23 = v22;
  v24.f32[2] = *((float *)&v76 + 2) - v22;
  v25 = vmulq_f32(v24, v24);
  v26 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1))).u32[0];
  v88 = *(float *)&v26;
  v91 = *(float32x2_t *)&v21;
  if ((v19 & 1) != 0)
  {
    v95 = v24;
    *(double *)&v27 = simd_float4x4.position.getter(a2, a3, a4, a5);
    v24 = v95;
    *(float *)&v26 = v88;
    v98 = v27;
  }
  else
  {
    *(float32x2_t *)&v28 = vmul_f32(vadd_f32(*(float32x2_t *)&v76, *(float32x2_t *)&v21), (float32x2_t)0x3F0000003F000000);
    *((float *)&v28 + 2) = (float)(*((float *)&v76 + 2) + v22) * 0.5;
    HIDWORD(v28) = 0;
    v98 = v28;
  }
  v29 = vrsqrte_f32((float32x2_t)v26);
  v30 = vmul_f32(v29, vrsqrts_f32((float32x2_t)v26, vmul_f32(v29, v29)));
  v93 = vmulq_n_f32(v24, vmul_f32(v30, vrsqrts_f32((float32x2_t)v26, vmul_f32(v30, v30))).f32[0]);
  simd_float4x4.position.getter(*(__n128 *)(v18 + OBJC_IVAR____TtC7Measure11LabelRender_end2), *(__n128 *)(v18 + OBJC_IVAR____TtC7Measure11LabelRender_end2 + 16), *(__n128 *)(v18 + OBJC_IVAR____TtC7Measure11LabelRender_end2 + 32), *(__n128 *)(v18 + OBJC_IVAR____TtC7Measure11LabelRender_end2 + 48));
  v31 = (__n128 *)(v18 + OBJC_IVAR____TtC7Measure11LabelRender_end1);
  simd_float4x4.position.getter(*(__n128 *)(v18 + OBJC_IVAR____TtC7Measure11LabelRender_end1), *(__n128 *)(v18 + OBJC_IVAR____TtC7Measure11LabelRender_end1 + 16), *(__n128 *)(v18 + OBJC_IVAR____TtC7Measure11LabelRender_end1 + 32), *(__n128 *)(v18 + OBJC_IVAR____TtC7Measure11LabelRender_end1 + 48));
  v32 = vmuls_lane_f32(a11 * 0.33, v93, 2);
  v33 = vmul_n_f32(*(float32x2_t *)v93.f32, a11 * 0.33);
  v34.n128_u64[0] = (unint64_t)vsub_f32(*(float32x2_t *)&v98, v33);
  v34.n128_f32[2] = *((float *)&v98 + 2) - v32;
  v34.n128_u32[3] = 0;
  v35.n128_u64[0] = (unint64_t)vadd_f32(*(float32x2_t *)&v98, v33);
  v35.n128_f32[2] = *((float *)&v98 + 2) + v32;
  v35.n128_u32[3] = 0;
  if ((sub_1000C2430(v34, v35) & 1) != 0)
  {
    simd_float4x4.position.getter(*v31, v31[1], v31[2], v31[3]);
    return;
  }
  v73 = v31;
  v36 = sqrtf(v88);
  v37.i32[3] = HIDWORD(v76);
  *(float32x2_t *)v37.f32 = vsub_f32(v91, *(float32x2_t *)&v76);
  v37.f32[2] = v23 - *((float *)&v76 + 2);
  v38 = vmulq_f32(v37, v37);
  v89 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v38, 2), vaddq_f32(v38, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v38.f32, 1)));
  v39 = (__n128 *)(v18 + OBJC_IVAR____TtC7Measure11LabelRender_lastTransform);
  simd_float4x4.position.getter(*(__n128 *)(v18 + OBJC_IVAR____TtC7Measure11LabelRender_lastTransform), *(__n128 *)(v18 + OBJC_IVAR____TtC7Measure11LabelRender_lastTransform + 16), *(__n128 *)(v18 + OBJC_IVAR____TtC7Measure11LabelRender_lastTransform + 32), *(__n128 *)(v18 + OBJC_IVAR____TtC7Measure11LabelRender_lastTransform + 48));
  v75 = OBJC_IVAR____TtC7Measure11LabelRender__render;
  v74 = (CGRect *)(v18 + OBJC_IVAR____TtC7Measure11LabelRender_labelSafeArea);
  v40 = simd_float4x4.position.getter(*v39, v39[1], v39[2], v39[3]);
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = v93;
  v47 = vmul_n_f32(*(float32x2_t *)v93.f32, a11 * 0.5);
  v48 = (float)(a11 * 0.5) * v93.f32[2];
  while (1)
  {
    if ((v19 & 1) != 0)
    {
      v49 = __OFADD__(v45++, 1);
      if (v49)
        goto LABEL_33;
      v44 ^= 1u;
      v50 = 1;
    }
    else if ((v44 & 1) != 0)
    {
      v44 = 0;
      v50 = 1;
    }
    else
    {
      v49 = __OFADD__(v45++, 1);
      if (v49)
        goto LABEL_34;
      v44 = 1;
      v50 = -1;
    }
    v51 = (float)v43 * a10;
    v52 = vadd_f32(vmul_n_f32(*(float32x2_t *)v46.f32, v51), *(float32x2_t *)&v40);
    v53 = (float)(v93.f32[2] * v51) + v41;
    *(float32x2_t *)v42.f32 = vsub_f32(v52, v91);
    v54 = v53 - v23;
    v55 = v42;
    v55.f32[2] = v53 - v23;
    v56 = vmulq_f32(v46, v55);
    v57 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v56, 2), vaddq_f32(v56, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v56.f32, 1))).f32[0];
    if (v57 >= 0.0 && v36 > v57)
      break;
LABEL_26:
    v42.i64[1] = LODWORD(v54);
    v70 = vmulq_f32(v42, v42);
    if ((vmovn_s32(vcgtq_f32(v89, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v70, 2), vaddq_f32(v70, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v70.f32, 1))))).u8[0] & 1) == 0)
    {
      v71.i32[3] = HIDWORD(v76);
      *(float32x2_t *)v71.f32 = vsub_f32(v52, *(float32x2_t *)&v76);
      v71.f32[2] = v53 - *((float *)&v76 + 2);
      v72 = vmulq_f32(v71, v71);
      if ((vmovn_s32(vcgtq_f32(v89, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v72, 2), vaddq_f32(v72, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v72.f32, 1))))).u8[0] & 1) == 0)return;
    }
    v40 = simd_float4x4.position.getter(*v39, v39[1], v39[2], v39[3]);
    v46 = v93;
    v43 = v50 * v45;
    if ((unsigned __int128)(v50 * (__int128)v45) >> 64 != (v50 * v45) >> 63)
    {
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
      return;
    }
  }
  v77 = v53 - v23;
  v78 = v42.i64[0];
  v59 = v19;
  v60.n128_u64[0] = (unint64_t)v52;
  v60.n128_u64[1] = LODWORD(v53);
  v87 = v60;
  v96 = v52;
  v99 = v53;
  type metadata accessor for MeasureCamera(0);
  v61 = *(void (**)(_QWORD *__return_ptr, __n128))(**(_QWORD **)(v18 + v75) + 144);
  v62 = swift_retain();
  v61(__src, v62);
  swift_release();
  memcpy(__dst, __src, 0x1F8uLL);
  sub_100036264((uint64_t)__dst);
  v83 = (__n128)__dst[11];
  v85 = (__n128)__dst[10];
  v79 = (__n128)__dst[13];
  v81 = (__n128)__dst[12];
  v63 = *(void (**)(_QWORD *__return_ptr, __n128))(**(_QWORD **)(v18 + v75) + 144);
  v64 = swift_retain();
  v63(__src, v64);
  swift_release();
  memcpy(v102, __src, 0x1F8uLL);
  v65 = sub_100036264((uint64_t)v102);
  v66 = (CGPoint)vcvtq_f64_f32(COERCE_FLOAT32X2_T(static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)(v65, v87, v85, v83, v81, v79, v102[2])));
  y = v66.y;
  if (!CGRectContainsPoint(*v74, v66)
    || (v68.n128_u64[0] = (unint64_t)vsub_f32(v96, v47),
        v68.n128_f32[2] = v99 - v48,
        v68.n128_u32[3] = 0,
        v69.n128_u64[0] = (unint64_t)vadd_f32(v47, v96),
        v69.n128_f32[2] = v48 + v99,
        v69.n128_u32[3] = 0,
        (sub_1000C2430(v68, v69) & 1) == 0))
  {
    v19 = v59;
    v52 = v96;
    v53 = v99;
    v54 = v77;
    v42.i64[0] = v78;
    goto LABEL_26;
  }
  if (sub_1000B7944(v87))
    simd_float4x4.position.getter(*v73, v73[1], v73[2], v73[3]);
}

unint64_t sub_1000C2AF8(unint64_t result)
{
  if (result >= 5)
    return 5;
  return result;
}

uint64_t sub_1000C2B08()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t result;
  float v5;
  uint64_t Strong;
  uint64_t v7;
  void (*v8)(uint64_t *__return_ptr, __n128);
  __n128 v9;
  uint64_t v10;
  char v11;

  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_labelNode), "alpha");
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7Measure11LabelRender_state);
  if ((unint64_t)(v3 - 1) < 7 && ((0x4Du >> (v3 - 1)) & 1) != 0)
    return 0;
  result = 0;
  if (v3 != 6)
  {
    v5 = v2;
    if (fabsf(v5 + -1.0) <= 0.1)
    {
      Strong = swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR____TtC7Measure11LabelRender_delegate, v1);
      if (!Strong)
        return 1;
      v7 = Strong;
      if ((objc_msgSend((id)objc_opt_self(Gestalt), "jasperAvailable") & 1) != 0)
      {
        v8 = *(void (**)(uint64_t *__return_ptr, __n128))(**(_QWORD **)(v7
                                                                                + OBJC_IVAR____TtC7Measure9LabelView__historyUIState)
                                                                  + 144);
        v9 = swift_retain();
        v8(&v10, v9);
        swift_release();
        if ((v11 & 1) != 0)
        {
LABEL_9:
          swift_unknownObjectRelease(v7);
          return 1;
        }
      }
      else if (*(_QWORD *)(v7 + OBJC_IVAR____TtC7Measure9LabelView_measurementUnderInspection + 8))
      {
        goto LABEL_9;
      }
      sub_1000B53F0();
      goto LABEL_9;
    }
  }
  return result;
}

void sub_1000C2C3C()
{
  uint64_t v0;

  sub_1000B70D0(*(_QWORD *)(v0 + 16));
}

void sub_1000C2C44(uint64_t a1)
{
  uint64_t v1;

  sub_10009EB68(a1, v1);
}

uint64_t *sub_1000C2C50(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  swift_bridgeObjectRetain(a1[3]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t sub_1000C2C9C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t storeEnumTagSinglePayload for LabelRender.AnimationType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1000C2D2C + 4 * byte_1003B4F30[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000C2D60 + 4 * byte_1003B4F2B[v4]))();
}

uint64_t sub_1000C2D60(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C2D68(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000C2D70);
  return result;
}

uint64_t sub_1000C2D7C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000C2D84);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1000C2D88(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C2D90(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LabelRender.AnimationType()
{
  return &type metadata for LabelRender.AnimationType;
}

unint64_t sub_1000C2DB0()
{
  unint64_t result;

  result = qword_100481AA8;
  if (!qword_100481AA8)
  {
    result = swift_getWitnessTable(&unk_1003B5434, &type metadata for LabelRender.AnimationType);
    atomic_store(result, (unint64_t *)&qword_100481AA8);
  }
  return result;
}

uint64_t initializeWithCopy for LabelRenderEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRetain(v3);
  return a1;
}

_QWORD *assignWithCopy for LabelRenderEvent(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  return a1;
}

uint64_t assignWithTake for LabelRenderEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  return a1;
}

uint64_t getEnumTagSinglePayload for LabelRenderEvent(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for LabelRenderEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

uint64_t sub_1000C2FBC(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

double sub_1000C2FD4(uint64_t a1, int a2)
{
  double result;

  if (a2 < 0)
  {
    *(_QWORD *)(a1 + 40) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    *(_QWORD *)(a1 + 8) = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for LabelRenderEvent()
{
  return &type metadata for LabelRenderEvent;
}

BOOL sub_1000C3014(__int128 *a1, __int128 *a2)
{
  __int128 v4[3];
  __int128 v5[3];

  sub_1000C30C4(a1, v4);
  sub_1000C30C4(a2, v5);
  return sub_1000C30DC(v4, v5);
}

unint64_t sub_1000C305C(uint64_t a1)
{
  unint64_t result;

  result = sub_1000C3080();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000C3080()
{
  unint64_t result;

  result = qword_100481AD8;
  if (!qword_100481AD8)
  {
    result = swift_getWitnessTable(&unk_1003B54B4, &type metadata for LabelRenderEvent);
    atomic_store(result, (unint64_t *)&qword_100481AD8);
  }
  return result;
}

_OWORD *sub_1000C30C4(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[2];
  a2[1] = a1[1];
  a2[2] = v3;
  *a2 = v2;
  return a2;
}

BOOL sub_1000C30DC(__int128 *a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  _BOOL8 result;
  char v15;
  __int128 v17;
  double v18;
  double v19;
  double v20;
  double v21;
  __int128 v22;
  double v23;
  double v24;
  double v25;
  double v26;

  sub_1000C30C4(a1, &v22);
  v3 = *((_QWORD *)&v22 + 1);
  if (!*((_QWORD *)&v22 + 1))
  {
    sub_1000C30C4(a2, &v17);
    return *((_QWORD *)&v17 + 1) == 0;
  }
  v4 = v22;
  v6 = v23;
  v5 = v24;
  v8 = v25;
  v7 = v26;
  sub_1000C30C4(a2, &v17);
  if (!*((_QWORD *)&v17 + 1))
    return 0;
  v10 = v18;
  v9 = v19;
  v12 = v20;
  v11 = v21;
  if (v4 == (_QWORD)v17 && v3 == *((_QWORD *)&v17 + 1))
  {
    if (v6 != v18 || v5 != v19)
      return 0;
    return v7 == v11 && v8 == v12;
  }
  v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v3, v17, *((_QWORD *)&v17 + 1), 0);
  result = 0;
  if ((v15 & 1) != 0 && v6 == v10 && v5 == v9)
    return v7 == v11 && v8 == v12;
  return result;
}

void sub_1000C31DC()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  void (*v14)(_QWORD *__return_ptr, __n128);
  id v15;
  __n128 v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD v20[63];
  _BYTE v21[24];
  _BYTE __dst[512];

  v1 = v0;
  v2 = (os_unfair_lock_s *)(v0 + OBJC_IVAR____TtC7Measure9LabelView_labelLock);
  swift_beginAccess(v2, __dst, 33, 0);
  os_unfair_lock_lock(v2);
  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC7Measure9LabelView_labels);
  swift_beginAccess(v1 + OBJC_IVAR____TtC7Measure9LabelView_labels, v21, 0, 0);
  v4 = *v3;
  swift_bridgeObjectRetain(v4);
  os_unfair_lock_unlock(v2);
  swift_endAccess(__dst);
  v5 = v4 + 64;
  v6 = 1 << *(_BYTE *)(v4 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(v4 + 64);
  v9 = OBJC_IVAR____TtC7Measure9LabelView__render;
  v10 = (unint64_t)(v6 + 63) >> 6;
  swift_bridgeObjectRetain(v4);
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v12 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v13 = v12 | (v11 << 6);
      goto LABEL_5;
    }
    v17 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v17 >= v10)
      goto LABEL_23;
    v18 = *(_QWORD *)(v5 + 8 * v17);
    ++v11;
    if (!v18)
    {
      v11 = v17 + 1;
      if (v17 + 1 >= v10)
        goto LABEL_23;
      v18 = *(_QWORD *)(v5 + 8 * v11);
      if (!v18)
      {
        v11 = v17 + 2;
        if (v17 + 2 >= v10)
          goto LABEL_23;
        v18 = *(_QWORD *)(v5 + 8 * v11);
        if (!v18)
        {
          v11 = v17 + 3;
          if (v17 + 3 >= v10)
            goto LABEL_23;
          v18 = *(_QWORD *)(v5 + 8 * v11);
          if (!v18)
            break;
        }
      }
    }
LABEL_22:
    v8 = (v18 - 1) & v18;
    v13 = __clz(__rbit64(v18)) + (v11 << 6);
LABEL_5:
    v14 = *(void (**)(_QWORD *__return_ptr, __n128))(**(_QWORD **)(v1 + v9) + 144);
    v15 = *(id *)(*(_QWORD *)(v4 + 56) + 8 * v13);
    v16 = swift_retain();
    v14(v20, v16);
    swift_release();
    memcpy(__dst, v20, 0x1F8uLL);
    sub_1000B0CC4((uint64_t)__dst);
    sub_100036264((uint64_t)__dst);

  }
  v19 = v17 + 4;
  if (v19 >= v10)
  {
LABEL_23:
    swift_release();
    swift_bridgeObjectRelease(v4);
    return;
  }
  v18 = *(_QWORD *)(v5 + 8 * v19);
  if (v18)
  {
    v11 = v19;
    goto LABEL_22;
  }
  while (1)
  {
    v11 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v11 >= v10)
      goto LABEL_23;
    v18 = *(_QWORD *)(v5 + 8 * v11);
    ++v19;
    if (v18)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
}

double sub_1000C3400(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  void *v10;
  char *v11;
  void *v12;
  id v13;
  double result;
  _BYTE v15[24];

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7Measure9LabelView_measurementUnderInspection + 8);
  if (v2)
  {
    v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7Measure9LabelView_measurementUnderInspection);
    v5 = (os_unfair_lock_s *)(v1 + OBJC_IVAR____TtC7Measure9LabelView_labelLock);
    swift_beginAccess(v1 + OBJC_IVAR____TtC7Measure9LabelView_labelLock, v15, 33, 0);
    swift_bridgeObjectRetain(v2);
    os_unfair_lock_lock(v5);
    swift_endAccess(v15);
    v6 = (uint64_t *)(v1 + OBJC_IVAR____TtC7Measure9LabelView_labels);
    swift_beginAccess(v6, v15, 32, 0);
    v7 = *v6;
    if (*(_QWORD *)(v7 + 16))
    {
      swift_bridgeObjectRetain(v2);
      v8 = sub_1000C80A8(v4, v2);
      if ((v9 & 1) != 0)
      {
        v10 = *(void **)(*(_QWORD *)(v7 + 56) + 8 * v8);
        swift_endAccess(v15);
        v11 = v10;
        swift_bridgeObjectRelease_n(v2, 2);
        if ((a1 & 1) != 0)
        {
          sub_1000B50D8();
        }
        else if (v11[OBJC_IVAR____TtC7Measure11LabelRender_selectionState] - 1 <= 2)
        {
          v12 = *(void **)&v11[OBJC_IVAR____TtC7Measure11LabelRender_transitionLabel];
          if (v12)
          {
            v13 = v12;
            sub_1000A2394();

          }
          sub_1000B036C();
        }

        goto LABEL_13;
      }
      swift_bridgeObjectRelease(v2);
    }
    swift_endAccess(v15);
    swift_bridgeObjectRelease(v2);
LABEL_13:
    swift_beginAccess(v5, v15, 33, 0);
    os_unfair_lock_unlock(v5);
    *(_QWORD *)&result = swift_endAccess(v15).n128_u64[0];
  }
  return result;
}

uint64_t sub_1000C3584(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  os_unfair_lock_s *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t (*v7)(__n128);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  __n128 v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  void *v20;
  double v21;
  double v22;
  uint64_t (*v23)(void);
  id v24;
  id v25;
  uint64_t result;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  char *v35;
  void *v36;
  __n128 v37;
  id v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(void);
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  __n128 v53;
  __n128 v54;
  __n128 v55;
  __n128 v56;
  __n128 v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  __n128 v61;
  __n128 v62;
  __n128 v63;
  __n128 v64;
  __n128 v65;
  uint64_t v66;
  uint64_t v67;
  __n128 v68;
  __n128 v69;
  __n128 v70;
  __n128 v71;
  __n128 v72;
  __n128 v73;
  __n128 v74;
  os_unfair_lock_s *v75;
  __n128 v76;
  _QWORD v77[3];
  _QWORD v78[3];
  _BYTE v79[32];

  v2 = v1;
  v4 = (os_unfair_lock_s *)(v1 + OBJC_IVAR____TtC7Measure9LabelView_labelLock);
  swift_beginAccess(v1 + OBJC_IVAR____TtC7Measure9LabelView_labelLock, v79, 33, 0);
  os_unfair_lock_lock(v4);
  swift_endAccess(v79);
  v5 = (_QWORD *)(v1 + OBJC_IVAR____TtC7Measure9LabelView_labels);
  swift_beginAccess(v1 + OBJC_IVAR____TtC7Measure9LabelView_labels, v79, 0, 0);
  v6 = *v5;
  v7 = *(uint64_t (**)(__n128))((swift_isaMask & *a1) + 0xB8);
  v8 = swift_bridgeObjectRetain(*v5);
  v9 = ((uint64_t (*)(uint64_t))v7)(v8);
  v11 = v10;
  if (*(_QWORD *)(v6 + 16))
  {
    sub_1000C80A8(v9, v10);
    v13 = v12;
    swift_bridgeObjectRelease(v6);
    v14 = swift_bridgeObjectRelease(v11);
    if ((v13 & 1) != 0)
    {
      swift_beginAccess(v4, v78, 33, 0);
      os_unfair_lock_unlock(v4);
      v15 = v78;
      return swift_endAccess(v15);
    }
  }
  else
  {
    swift_bridgeObjectRelease(v6);
    v14 = swift_bridgeObjectRelease(v11);
  }
  v75 = v4;
  v76.n128_u64[0] = (unint64_t)v7;
  v16 = v7(v14);
  v18 = v17;
  v19 = objc_msgSend((id)objc_opt_self(Gestalt), "jasperAvailable");
  v20 = *(void **)(v2 + OBJC_IVAR____TtC7Measure9LabelView_sceneView);
  v22 = *(double *)(v2 + OBJC_IVAR____TtC7Measure9LabelView_editViewBounds);
  v21 = *(double *)(v2 + OBJC_IVAR____TtC7Measure9LabelView_editViewBounds + 8);
  v23 = *(uint64_t (**)(void))((swift_isaMask & *a1) + 0xD0);
  v24 = *(id *)(v2 + OBJC_IVAR____TtC7Measure9LabelView_parentView);
  v25 = v20;
  result = v23();
  v27 = result;
  if (!v19)
  {
    v38 = objc_allocWithZone((Class)type metadata accessor for LabelRender(0));
    v35 = sub_1000AF180(v24, v16, v18, v25, v27, 0, 0, 1, v22, v21);
LABEL_10:
    if (((*(uint64_t (**)(__n128))((swift_isaMask & *a1) + 0x2C8))(v37) & 1) == 0)
      v35[OBJC_IVAR____TtC7Measure11LabelRender_movesAlongLine] = 0;
    v39 = &v35[OBJC_IVAR____TtC7Measure11LabelRender_delegate];
    *((_QWORD *)v39 + 1) = &off_1004448B8;
    v40 = swift_unknownObjectWeakAssign(v39, v2);
    v41 = ((uint64_t (*)(uint64_t))v76.n128_u64[0])(v40);
    v43 = v42;
    swift_beginAccess(v5, v78, 33, 0);
    v44 = v35;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v5);
    v77[0] = *v5;
    *v5 = 0x8000000000000000;
    sub_1000BCA58((uint64_t)v44, v41, v43, isUniquelyReferenced_nonNull_native);
    v46 = *v5;
    *v5 = v77[0];
    swift_bridgeObjectRelease(v43);
    swift_bridgeObjectRelease(v46);
    v47 = swift_endAccess(v78);
    v48 = *(uint64_t (**)(void))((swift_isaMask & *a1) + 0x250);
    v49 = ((uint64_t (*)(uint64_t))v48)(v47);
    v50 = v49;
    if ((v49 & 0xC000000000000001) != 0)
    {
      v51 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v49);
    }
    else
    {
      if (!*(_QWORD *)((v49 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        goto LABEL_23;
      }
      v51 = *(id *)(v49 + 32);
    }
    v52 = v51;
    v53 = swift_bridgeObjectRelease(v50);
    v54.n128_f64[0] = (*(double (**)(__n128))((swift_isaMask & *v52) + 0x2B0))(v53);
    v76 = v54;
    v73 = v56;
    v74 = v55;
    v72 = v57;

    v58 = v48();
    a1 = (_QWORD *)v58;
    if ((v58 & 0xC000000000000001) == 0)
    {
      if (*(_QWORD *)((v58 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
      {
        __break(1u);
        goto LABEL_25;
      }
      v59 = *(id *)(v58 + 40);
LABEL_18:
      v60 = v59;
      v61 = swift_bridgeObjectRelease(a1);
      v62.n128_f64[0] = (*(double (**)(__n128))((swift_isaMask & *v60) + 0x2B0))(v61);
      v70 = v63;
      v71 = v62;
      v68 = v65;
      v69 = v64;

      sub_1000B0428(0, 0, v76, v74, v73, v72, v71, v70, v69, v68);
      if (qword_10047AB68 == -1)
      {
LABEL_19:
        v66 = qword_1004AF6B8;

        v67 = v66 + OBJC_IVAR____TtC7Measure14MetricsManager_measurementState;
        swift_beginAccess(v67, v78, 1, 0);
        *(double *)(v67 + 40) = *(double *)(v67 + 40) + 1.0;
        swift_beginAccess(v75, v77, 33, 0);
        os_unfair_lock_unlock(v75);
        v15 = v77;
        return swift_endAccess(v15);
      }
LABEL_25:
      swift_once(&qword_10047AB68, sub_10011E814);
      goto LABEL_19;
    }
LABEL_23:
    v59 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(1, a1);
    goto LABEL_18;
  }
  v73.n128_u64[0] = (unint64_t)v25;
  v72.n128_u64[0] = v16;
  v74.n128_u64[0] = v18;
  v28 = *(void **)(v2 + OBJC_IVAR____TtC7Measure9LabelView_activityPresentingViewController);
  if (v28)
  {
    if (*(_QWORD *)(v2 + OBJC_IVAR____TtC7Measure9LabelView_historyPressedPublisher))
    {
      v29 = result;
      v78[0] = *(_QWORD *)(v2 + OBJC_IVAR____TtC7Measure9LabelView_historyPressedPublisher);
      v30 = v28;
      v31 = sub_10000EDC8((uint64_t *)&unk_100481B80);
      v32 = sub_100043310((unint64_t *)&unk_1004862D0, (uint64_t *)&unk_100481B80, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
      v33 = Publisher.eraseToAnyPublisher()(v31, v32);
      v34 = objc_allocWithZone((Class)type metadata accessor for LabelRender(0));
      v35 = sub_1000AF180(v24, v72.n128_i64[0], v74.n128_i64[0], v25, v29, 0, 0, 1, v22, v21);
      v36 = *(void **)&v35[OBJC_IVAR____TtC7Measure11LabelRender_activityPresentingViewController];
      *(_QWORD *)&v35[OBJC_IVAR____TtC7Measure11LabelRender_activityPresentingViewController] = v28;

      *(_QWORD *)&v35[OBJC_IVAR____TtC7Measure11LabelRender_historyPressedPublisher] = v33;
      v37 = swift_release();
      goto LABEL_10;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000C3AE8(_QWORD *a1, char a2, char a3)
{
  uint64_t v3;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  void *v16;
  char *v17;
  __n128 v18;
  uint64_t (*v19)(__n128);
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  uint64_t result;
  _QWORD *v31;
  _QWORD *v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  __n128 v45;
  __n128 v46;
  __n128 v47;
  __n128 v48;
  _BYTE v49[24];

  v7 = (os_unfair_lock_s *)(v3 + OBJC_IVAR____TtC7Measure9LabelView_labelLock);
  swift_beginAccess(v3 + OBJC_IVAR____TtC7Measure9LabelView_labelLock, v49, 33, 0);
  os_unfair_lock_lock(v7);
  v8 = swift_endAccess(v49);
  v9 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0xB8))(v8);
  v11 = v10;
  v12 = (uint64_t *)(v3 + OBJC_IVAR____TtC7Measure9LabelView_labels);
  swift_beginAccess(v12, v49, 32, 0);
  v13 = *v12;
  if (!*(_QWORD *)(v13 + 16) || (v14 = sub_1000C80A8(v9, v11), (v15 & 1) == 0))
  {
    swift_bridgeObjectRelease(v11);
    swift_endAccess(v49);
LABEL_13:
    swift_beginAccess(v7, v49, 33, 0);
    os_unfair_lock_unlock(v7);
    return swift_endAccess(v49);
  }
  v16 = *(void **)(*(_QWORD *)(v13 + 56) + 8 * v14);
  swift_endAccess(v49);
  v17 = v16;
  v18 = swift_bridgeObjectRelease(v11);
  v19 = *(uint64_t (**)(__n128))((swift_isaMask & *a1) + 0x250);
  v20 = a1;
  v21 = v19(v18);
  v22 = v21;
  if ((v21 & 0xC000000000000001) != 0)
  {
    v23 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v21);
  }
  else
  {
    if (!*(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_16;
    }
    v23 = *(id *)(v21 + 32);
  }
  v24 = v23;
  v25 = swift_bridgeObjectRelease(v22);
  v26.n128_f64[0] = (*(double (**)(__n128))((swift_isaMask & *v24) + 0x2B0))(v25);
  v47 = v27;
  v48 = v26;
  v45 = v29;
  v46 = v28;

  result = ((uint64_t (*)(void))v19)();
  v20 = (_QWORD *)result;
  if ((result & 0xC000000000000001) != 0)
  {
LABEL_16:
    v31 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v20);
    goto LABEL_9;
  }
  if (*(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10) >= 2uLL)
  {
    v31 = *(id *)(result + 40);
LABEL_9:
    v32 = v31;
    v33 = swift_bridgeObjectRelease(v20);
    v34.n128_f64[0] = (*(double (**)(__n128))((swift_isaMask & *v32) + 0x2B0))(v33);
    v43 = v35;
    v44 = v34;
    v41 = v37;
    v42 = v36;

    v38 = sub_1000B0428(a2 & 1, a3 & 1, v48, v47, v46, v45, v44, v43, v42, v41);
    v39 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0xD0))(v38);
    v40 = *(_QWORD *)&v17[OBJC_IVAR____TtC7Measure11LabelRender_state];
    *(_QWORD *)&v17[OBJC_IVAR____TtC7Measure11LabelRender_state] = v39;
    if (v39 != v40)
      sub_1000ADB38(v39);

    goto LABEL_13;
  }
  __break(1u);
  return result;
}

void sub_1000C3D6C(char *a1)
{
  uint64_t v1;
  _QWORD *v2;
  char *v3;
  uint64_t *v4;
  unsigned int v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(void);
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  void *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  void *v32;
  char *v33;
  unsigned int v34;
  unsigned __int8 v35;
  uint64_t (*v36)(void);
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  double v42;
  uint64_t (*v43)(void);
  id v44;
  uint64_t v45;
  void *v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  void *v52;
  __n128 v53;
  id v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  __n128 v58;
  id *v59;
  unint64_t v60;
  __n128 v61;
  __n128 v62;
  __n128 v63;
  __n128 v64;
  __n128 v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  __n128 v69;
  _QWORD *v70;
  _QWORD *v71;
  __n128 v72;
  __n128 v73;
  __n128 v74;
  __n128 v75;
  __n128 v76;
  unint64_t v77;
  char *v78;
  os_unfair_lock_s *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __n128 v88;
  __n128 v89;
  __n128 v90;
  __n128 v91;
  __n128 v92;
  __n128 v93;
  __n128 v94;
  uint64_t v95;
  __n128 v96;
  uint64_t v97;
  _QWORD v98[4];

  v6 = v1;
  v7 = a1;
  v8 = *(uint64_t (**)(void))((swift_isaMask & *(_QWORD *)a1) + 0x230);
  v9 = v8();
  v10 = v9;
  if ((v9 & 0xC000000000000001) != 0)
  {
    v11 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v9);
  }
  else
  {
    if (!*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_34:
      v24 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v3);
      goto LABEL_9;
    }
    v11 = *(id *)(v9 + 32);
  }
  v12 = v11;
  v13 = swift_bridgeObjectRelease(v10);
  v14 = (*(uint64_t (**)(__n128))((swift_isaMask & *v12) + 0xB8))(v13);
  v16 = v15;

  v2 = (_QWORD *)(v6 + OBJC_IVAR____TtC7Measure9LabelView_labels);
  swift_beginAccess(v6 + OBJC_IVAR____TtC7Measure9LabelView_labels, v98, 32, 0);
  v17 = *v2;
  if (!*(_QWORD *)(*v2 + 16) || (v18 = sub_1000C80A8(v14, v16), (v19 & 1) == 0))
  {
    swift_bridgeObjectRelease(v16);
    swift_endAccess(v98);
    __break(1u);
LABEL_46:
    swift_bridgeObjectRelease(v16);
    swift_endAccess(v98);
    __break(1u);
    goto LABEL_47;
  }
  v20 = *(void **)(*(_QWORD *)(v17 + 56) + 8 * v18);
  swift_endAccess(v98);
  v21 = v20;
  swift_bridgeObjectRelease(v16);
  v4 = &OBJC_IVAR____TtC7Measure11LabelRender_roundedMeasurementInMeters;
  v5 = *(_DWORD *)&v21[OBJC_IVAR____TtC7Measure11LabelRender_roundedMeasurementInMeters];

  v22 = (uint64_t)v7;
  v23 = v8();
  v3 = (char *)v23;
  if ((v23 & 0xC000000000000001) != 0)
    goto LABEL_34;
  if (*(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
  {
    __break(1u);
    goto LABEL_36;
  }
  v24 = *(id *)(v23 + 40);
LABEL_9:
  v25 = v24;
  v26 = swift_bridgeObjectRelease(v3);
  v27 = (*(uint64_t (**)(__n128))((swift_isaMask & *v25) + 0xB8))(v26);
  v16 = v28;

  swift_beginAccess(v2, v98, 32, 0);
  v96.n128_u64[0] = (unint64_t)v2;
  v29 = *v2;
  if (!*(_QWORD *)(*v2 + 16))
    goto LABEL_46;
  v30 = sub_1000C80A8(v27, v16);
  if ((v31 & 1) == 0)
    goto LABEL_46;
  v32 = *(void **)(*(_QWORD *)(v29 + 56) + 8 * v30);
  swift_endAccess(v98);
  v33 = v32;
  swift_bridgeObjectRelease(v16);
  v34 = *(_DWORD *)&v33[*v4];

  v35 = objc_msgSend((id)objc_opt_self(Gestalt), "jasperAvailable");
  v36 = *(uint64_t (**)(void))((swift_isaMask & *(_QWORD *)v7) + 0xB8);
  v37 = *(id *)(v6 + OBJC_IVAR____TtC7Measure9LabelView_parentView);
  v38 = v36();
  v40 = v39;
  v42 = *(double *)(v6 + OBJC_IVAR____TtC7Measure9LabelView_editViewBounds);
  v41 = *(double *)(v6 + OBJC_IVAR____TtC7Measure9LabelView_editViewBounds + 8);
  v43 = *(uint64_t (**)(void))((swift_isaMask & *(_QWORD *)v7) + 0xD0);
  v44 = *(id *)(v6 + OBJC_IVAR____TtC7Measure9LabelView_sceneView);
  v45 = v43();
  v95 = v6;
  if ((v35 & 1) == 0)
  {
    v54 = objc_allocWithZone((Class)type metadata accessor for LabelRender(0));
    v3 = sub_1000AF180(v37, v38, v40, v44, v45, 1, v5 | ((unint64_t)v34 << 32), 0, v42, v41);
LABEL_16:
    v2 = (_QWORD *)v96.n128_u64[0];
    v4 = (uint64_t *)&swift_isaMask;
    v8 = *(uint64_t (**)(void))((swift_isaMask & *(_QWORD *)v7) + 0x248);
    v55 = ((uint64_t (*)(__n128))v8)(v53);
    v22 = v55;
    if ((v55 & 0xC000000000000001) == 0)
    {
      if (!*(_QWORD *)((v55 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        goto LABEL_38;
      }
      v56 = *(id *)(v55 + 32);
LABEL_19:
      v57 = v56;
      v58 = swift_bridgeObjectRelease(v22);
      v22 = (*(uint64_t (**)(__n128))((*v4 & *v57) + 0x250))(v58);

      if ((v22 & 0xC000000000000001) == 0)
      {
        if (!*(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          goto LABEL_40;
        }
        v59 = (id *)*(id *)(v22 + 32);
LABEL_22:
        v60 = (unint64_t)v59;
        v61 = swift_bridgeObjectRelease(v22);
        v62.n128_f64[0] = (*(double (**)(__n128))((*v4 & *(_QWORD *)v60) + 0x2B0))(v61);
        v96 = v62;
        v93 = v64;
        v94 = v63;
        v92 = v65;

        v66 = v8();
        v22 = v66;
        if ((v66 & 0xC000000000000001) == 0)
        {
          if (!*(_QWORD *)((v66 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_42;
          }
          v67 = *(id *)(v66 + 32);
LABEL_25:
          v68 = v67;
          v69 = swift_bridgeObjectRelease(v22);
          v60 = (*(uint64_t (**)(__n128))((*v4 & *v68) + 0x250))(v69);

          if ((v60 & 0xC000000000000001) == 0)
          {
            if (*(_QWORD *)((v60 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
            {
              __break(1u);
              goto LABEL_44;
            }
            v70 = *(id *)(v60 + 40);
LABEL_28:
            v71 = v70;
            v72 = swift_bridgeObjectRelease(v60);
            v73.n128_f64[0] = (*(double (**)(__n128))((*v4 & *v71) + 0x2B0))(v72);
            v90 = v74;
            v91 = v73;
            v88 = v76;
            v89 = v75;

            sub_1000B0428(0, 0, v96, v94, v93, v92, v91, v90, v89, v88);
            if ((v3[OBJC_IVAR____TtC7Measure11LabelRender_rectangleLabelData + 21] & 1) == 0)
            {
              v77 = *(unsigned int *)&v3[OBJC_IVAR____TtC7Measure11LabelRender_rectangleLabelData + 16] | ((unint64_t)v3[OBJC_IVAR____TtC7Measure11LabelRender_rectangleLabelData + 20] << 32);
              if ((v77 & 0x100000000) == 0)
              {
                sub_1000AEC68(*(float *)&v3[OBJC_IVAR____TtC7Measure11LabelRender_rectangleLabelData + 16]);
                *(_DWORD *)&v3[OBJC_IVAR____TtC7Measure11LabelRender_measurement] = v77;
                v78 = &v3[OBJC_IVAR____TtC7Measure11LabelRender_delegate];
                *((_QWORD *)v78 + 1) = &off_1004448B8;
                swift_unknownObjectWeakAssign(v78, v95);
                v79 = (os_unfair_lock_s *)(v95 + OBJC_IVAR____TtC7Measure9LabelView_labelLock);
                swift_beginAccess(v95 + OBJC_IVAR____TtC7Measure9LabelView_labelLock, v98, 33, 0);
                os_unfair_lock_lock(v79);
                v80 = swift_endAccess(v98);
                v81 = (*(uint64_t (**)(uint64_t))((*v4 & *(_QWORD *)v7) + 0xB8))(v80);
                v83 = v82;
                swift_beginAccess(v2, v98, 33, 0);
                v7 = v3;
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
                v97 = *v2;
                *v2 = 0x8000000000000000;
                sub_1000BCA58((uint64_t)v7, v81, v83, isUniquelyReferenced_nonNull_native);
                v85 = *v2;
                *v2 = v97;
                swift_bridgeObjectRelease(v83);
                swift_bridgeObjectRelease(v85);
                swift_endAccess(v98);
                swift_beginAccess(v79, v98, 33, 0);
                os_unfair_lock_unlock(v79);
                swift_endAccess(v98);
                if (qword_10047AB68 == -1)
                {
LABEL_31:
                  v86 = qword_1004AF6B8;

                  v87 = v86 + OBJC_IVAR____TtC7Measure14MetricsManager_measurementState;
                  swift_beginAccess(v86 + OBJC_IVAR____TtC7Measure14MetricsManager_measurementState, v98, 1, 0);
                  *(double *)(v87 + 40) = *(double *)(v87 + 40) + 1.0;
                  return;
                }
LABEL_44:
                swift_once(&qword_10047AB68, sub_10011E814);
                goto LABEL_31;
              }
              goto LABEL_48;
            }
LABEL_47:
            __break(1u);
LABEL_48:
            __break(1u);
            goto LABEL_49;
          }
LABEL_42:
          v70 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v60);
          goto LABEL_28;
        }
LABEL_40:
        v67 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v22);
        goto LABEL_25;
      }
LABEL_38:
      v59 = (id *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v22);
      goto LABEL_22;
    }
LABEL_36:
    v56 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v22);
    goto LABEL_19;
  }
  v94.n128_u64[0] = (unint64_t)v37;
  v46 = *(void **)(v6 + OBJC_IVAR____TtC7Measure9LabelView_activityPresentingViewController);
  if (!v46)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  if (*(_QWORD *)(v6 + OBJC_IVAR____TtC7Measure9LabelView_historyPressedPublisher))
  {
    v98[0] = *(_QWORD *)(v6 + OBJC_IVAR____TtC7Measure9LabelView_historyPressedPublisher);
    v47 = v46;
    v48 = sub_10000EDC8((uint64_t *)&unk_100481B80);
    v49 = sub_100043310((unint64_t *)&unk_1004862D0, (uint64_t *)&unk_100481B80, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    v50 = Publisher.eraseToAnyPublisher()(v48, v49);
    v51 = objc_allocWithZone((Class)type metadata accessor for LabelRender(0));
    v3 = sub_1000AF180(v37, v38, v40, v44, v45, 1, v5 | ((unint64_t)v34 << 32), 0, v42, v41);
    v52 = *(void **)&v3[OBJC_IVAR____TtC7Measure11LabelRender_activityPresentingViewController];
    *(_QWORD *)&v3[OBJC_IVAR____TtC7Measure11LabelRender_activityPresentingViewController] = v46;

    *(_QWORD *)&v3[OBJC_IVAR____TtC7Measure11LabelRender_historyPressedPublisher] = v50;
    v53 = swift_release();
    goto LABEL_16;
  }
LABEL_50:
  __break(1u);
}

void sub_1000C451C(uint64_t a1)
{
  uint64_t v1;
  char v2;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t (*v16)(void);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  __n128 v22;
  uint64_t (*v23)(void);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  void *v29;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  void *v41;
  char *v42;
  float v43;
  char v44;
  uint64_t (*v45)(void);
  id v46;
  id v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  __n128 v51;
  _QWORD *v52;
  _QWORD *v53;
  __n128 v54;
  __n128 v55;
  __n128 v56;
  __n128 v57;
  __n128 v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  __n128 v62;
  _QWORD *v63;
  _QWORD *v64;
  __n128 v65;
  __n128 v66;
  __n128 v67;
  __n128 v68;
  __n128 v69;
  unint64_t v70;
  __n128 v71;
  __n128 v72;
  __n128 v73;
  __n128 v74;
  __n128 v75;
  __n128 v76;
  __n128 v77;
  __n128 v78;
  _BYTE v79[32];

  v4 = (os_unfair_lock_s *)(v1 + OBJC_IVAR____TtC7Measure9LabelView_labelLock);
  swift_beginAccess(v1 + OBJC_IVAR____TtC7Measure9LabelView_labelLock, v79, 33, 0);
  os_unfair_lock_lock(v4);
  v5 = swift_endAccess(v79);
  v6 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *(_QWORD *)a1) + 0xB8))(v5);
  v8 = v7;
  v9 = (uint64_t *)(v1 + OBJC_IVAR____TtC7Measure9LabelView_labels);
  swift_beginAccess(v1 + OBJC_IVAR____TtC7Measure9LabelView_labels, v79, 32, 0);
  v10 = *v9;
  if (*(_QWORD *)(*v9 + 16) && (v11 = sub_1000C80A8(v6, v8), (v12 & 1) != 0))
  {
    v13 = *(void **)(*(_QWORD *)(v10 + 56) + 8 * v11);
    v14 = v13;
  }
  else
  {
    v13 = 0;
  }
  swift_bridgeObjectRelease(v8);
  v15 = swift_endAccess(v79);
  v16 = *(uint64_t (**)(void))((swift_isaMask & *(_QWORD *)a1) + 0x230);
  v17 = a1;
  v18 = ((uint64_t (*)(uint64_t))v16)(v15);
  v19 = v18;
  if ((v18 & 0xC000000000000001) != 0)
  {
    v20 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v18);
  }
  else
  {
    if (!*(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_43:
      v32 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v17);
      goto LABEL_15;
    }
    v20 = *(id *)(v18 + 32);
  }
  v21 = v20;
  v22 = swift_bridgeObjectRelease(v19);
  v23 = (uint64_t (*)(void))(*(uint64_t (**)(__n128))((swift_isaMask & *v21) + 0xB8))(v22);
  v25 = v24;

  swift_beginAccess(v9, v79, 32, 0);
  v26 = *v9;
  if (*(_QWORD *)(*v9 + 16) && (v27 = sub_1000C80A8((uint64_t)v23, v25), (v28 & 1) != 0))
  {
    v29 = *(void **)(*(_QWORD *)(v26 + 56) + 8 * v27);
    swift_endAccess(v79);
    v30 = v29;
    swift_bridgeObjectRelease(v25);
    v78.n128_u32[0] = *(_DWORD *)&v30[OBJC_IVAR____TtC7Measure11LabelRender_roundedMeasurementInMeters];

    v2 = 0;
  }
  else
  {
    swift_endAccess(v79);
    swift_bridgeObjectRelease(v25);
    v78.n128_u32[0] = 0;
    v2 = 1;
  }
  v31 = v16();
  v17 = v31;
  if ((v31 & 0xC000000000000001) != 0)
    goto LABEL_43;
  if (*(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
  {
    __break(1u);
    goto LABEL_45;
  }
  v32 = *(id *)(v31 + 40);
LABEL_15:
  v33 = v32;
  v34 = swift_bridgeObjectRelease(v17);
  v35 = (*(uint64_t (**)(__n128))((swift_isaMask & *v33) + 0xB8))(v34);
  v37 = v36;

  swift_beginAccess(v9, v79, 32, 0);
  v38 = *v9;
  if (*(_QWORD *)(*v9 + 16) && (v39 = sub_1000C80A8(v35, v37), (v40 & 1) != 0))
  {
    v41 = *(void **)(*(_QWORD *)(v38 + 56) + 8 * v39);
    swift_endAccess(v79);
    v42 = v41;
    swift_bridgeObjectRelease(v37);
    v43 = *(float *)&v42[OBJC_IVAR____TtC7Measure11LabelRender_roundedMeasurementInMeters];

    v44 = 0;
  }
  else
  {
    swift_endAccess(v79);
    swift_bridgeObjectRelease(v37);
    v43 = 0.0;
    v44 = 1;
  }
  swift_beginAccess(v4, v79, 33, 0);
  os_unfair_lock_unlock(v4);
  swift_endAccess(v79);
  if (v13)
  {
    if ((v2 & 1) != 0 || (v44 & 1) != 0)
      goto LABEL_39;
    v45 = *(uint64_t (**)(void))((swift_isaMask & *(_QWORD *)a1) + 0xD0);
    v4 = v13;
    v46 = (id)v45();
    v47 = *(id *)((char *)&v4->_os_unfair_lock_opaque + OBJC_IVAR____TtC7Measure11LabelRender_state);
    *(_QWORD *)((char *)&v4->_os_unfair_lock_opaque + OBJC_IVAR____TtC7Measure11LabelRender_state) = v46;
    if (v46 != v47)
      v46 = sub_1000ADB38((uint64_t)v46);
    v25 = (uint64_t)v4 + OBJC_IVAR____TtC7Measure11LabelRender_rectangleLabelData;
    *(_QWORD *)v25 = v78.n128_u32[0];
    *(_QWORD *)(v25 + 8) = LODWORD(v43);
    *(_WORD *)(v25 + 20) = 0;
    *(float *)(v25 + 16) = v78.n128_f32[0] * v43;
    v23 = *(uint64_t (**)(void))((swift_isaMask & *(_QWORD *)a1) + 0x248);
    v48 = ((uint64_t (*)(id))v23)(v46);
    v17 = v48;
    if ((v48 & 0xC000000000000001) == 0)
    {
      if (!*(_QWORD *)((v48 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        goto LABEL_47;
      }
      v49 = *(id *)(v48 + 32);
LABEL_27:
      v50 = v49;
      v51 = swift_bridgeObjectRelease(v17);
      v17 = (*(uint64_t (**)(__n128))((swift_isaMask & *v50) + 0x250))(v51);

      if ((v17 & 0xC000000000000001) == 0)
      {
        if (!*(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          goto LABEL_49;
        }
        v52 = *(id *)(v17 + 32);
LABEL_30:
        v53 = v52;
        v54 = swift_bridgeObjectRelease(v17);
        v55.n128_f64[0] = (*(double (**)(__n128))((swift_isaMask & *v53) + 0x2B0))(v54);
        v77 = v56;
        v78 = v55;
        v75 = v58;
        v76 = v57;

        v59 = v23();
        a1 = v59;
        if ((v59 & 0xC000000000000001) == 0)
        {
          if (!*(_QWORD *)((v59 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_51;
          }
          v60 = *(id *)(v59 + 32);
LABEL_33:
          v61 = v60;
          v62 = swift_bridgeObjectRelease(a1);
          a1 = (*(uint64_t (**)(__n128))((swift_isaMask & *v61) + 0x250))(v62);

          if ((a1 & 0xC000000000000001) == 0)
          {
            if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
            {
              __break(1u);
              goto LABEL_53;
            }
            v63 = *(id *)(a1 + 40);
LABEL_36:
            v64 = v63;
            v65 = swift_bridgeObjectRelease(a1);
            v66.n128_f64[0] = (*(double (**)(__n128))((swift_isaMask & *v64) + 0x2B0))(v65);
            v73 = v67;
            v74 = v66;
            v71 = v69;
            v72 = v68;

            sub_1000B0428(0, 0, v78, v77, v76, v75, v74, v73, v72, v71);
            if ((*(_BYTE *)(v25 + 21) & 1) == 0)
            {
              v70 = *(unsigned int *)(v25 + 16) | ((unint64_t)*(unsigned __int8 *)(v25 + 20) << 32);
              if ((v70 & 0x100000000) == 0)
              {
                sub_1000AEC68(*(float *)(v25 + 16));
                *(uint32_t *)((char *)&v4->_os_unfair_lock_opaque + OBJC_IVAR____TtC7Measure11LabelRender_measurement) = v70;

LABEL_39:
                return;
              }
LABEL_54:
              __break(1u);
              return;
            }
LABEL_53:
            __break(1u);
            goto LABEL_54;
          }
LABEL_51:
          v63 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(1, a1);
          goto LABEL_36;
        }
LABEL_49:
        v60 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
        goto LABEL_33;
      }
LABEL_47:
      v52 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v17);
      goto LABEL_30;
    }
LABEL_45:
    v49 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v17);
    goto LABEL_27;
  }
}

uint64_t sub_1000C4AC4(_QWORD *a1)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  _BYTE v21[24];

  v3 = (os_unfair_lock_s *)(v1 + OBJC_IVAR____TtC7Measure9LabelView_labelLock);
  swift_beginAccess(v1 + OBJC_IVAR____TtC7Measure9LabelView_labelLock, v21, 33, 0);
  os_unfair_lock_lock(v3);
  v4 = swift_endAccess(v21);
  v5 = *(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0xB8);
  v6 = v5(v4);
  v8 = v7;
  v9 = (uint64_t *)(v1 + OBJC_IVAR____TtC7Measure9LabelView_labels);
  swift_beginAccess(v1 + OBJC_IVAR____TtC7Measure9LabelView_labels, v21, 32, 0);
  v10 = *v9;
  if (*(_QWORD *)(*v9 + 16) && (v11 = sub_1000C80A8(v6, v8), (v12 & 1) != 0))
  {
    v13 = *(void **)(*(_QWORD *)(v10 + 56) + 8 * v11);
    swift_endAccess(v21);
    v14 = v13;
    swift_bridgeObjectRelease(v8);
    v15 = sub_1000B00C4();
    v16 = v5(v15);
    v18 = v17;
    swift_beginAccess(v9, v21, 33, 0);
    v19 = (void *)sub_100093CBC(v16, v18);
    swift_endAccess(v21);
    swift_bridgeObjectRelease(v18);

  }
  else
  {
    swift_bridgeObjectRelease(v8);
    swift_endAccess(v21);
  }
  swift_beginAccess(v3, v21, 33, 0);
  os_unfair_lock_unlock(v3);
  return swift_endAccess(v21);
}

void sub_1000C4C48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  __n128 v20;
  void *v21;
  uint64_t v22;
  void *v23;
  id v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  os_unfair_lock_s *v35;
  uint64_t *v36;
  os_unfair_lock_s *v37;
  uint64_t v38;
  int64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  _QWORD aBlock[6];
  char v49[32];

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v44 = *(_QWORD *)(v1 - 8);
  v45 = v1;
  __chkstk_darwin(v1);
  v43 = (char *)&v36 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for DispatchQoS(0);
  v41 = *(_QWORD *)(v3 - 8);
  v42 = v3;
  __chkstk_darwin(v3);
  v40 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (os_unfair_lock_s *)(v0 + OBJC_IVAR____TtC7Measure9LabelView_labelLock);
  swift_beginAccess(v0 + OBJC_IVAR____TtC7Measure9LabelView_labelLock, aBlock, 33, 0);
  v37 = v5;
  os_unfair_lock_lock(v5);
  swift_endAccess(aBlock);
  v6 = (uint64_t *)(v0 + OBJC_IVAR____TtC7Measure9LabelView_labels);
  swift_beginAccess(v6, v49, 1, 0);
  v36 = v6;
  v7 = *v6;
  v8 = *(_QWORD *)(*v6 + 64);
  v38 = *v6 + 64;
  v9 = 1 << *(_BYTE *)(v7 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & v8;
  v39 = (unint64_t)(v9 + 63) >> 6;
  v46 = v7;
  swift_bridgeObjectRetain(v7);
  v12 = 0;
  v13 = v40;
  v14 = v43;
  while (1)
  {
    if (v11)
    {
      v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v47 = v12;
      v16 = v15 | (v12 << 6);
      goto LABEL_5;
    }
    v30 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v30 >= v39)
      goto LABEL_21;
    v31 = *(_QWORD *)(v38 + 8 * v30);
    v32 = v12 + 1;
    if (!v31)
    {
      v32 = v12 + 2;
      if (v12 + 2 >= v39)
        goto LABEL_21;
      v31 = *(_QWORD *)(v38 + 8 * v32);
      if (!v31)
      {
        v32 = v12 + 3;
        if (v12 + 3 >= v39)
          goto LABEL_21;
        v31 = *(_QWORD *)(v38 + 8 * v32);
        if (!v31)
          break;
      }
    }
LABEL_20:
    v11 = (v31 - 1) & v31;
    v47 = v32;
    v16 = __clz(__rbit64(v31)) + (v32 << 6);
LABEL_5:
    v17 = *(_QWORD *)(*(_QWORD *)(v46 + 48) + 16 * v16 + 8);
    v18 = *(void **)(*(_QWORD *)(v46 + 56) + 8 * v16);
    sub_100018148(0, (unint64_t *)&qword_10047FB70, OS_dispatch_queue_ptr);
    swift_bridgeObjectRetain(v17);
    v19 = v18;
    v21 = (void *)static OS_dispatch_queue.main.getter(v20);
    v22 = swift_allocObject(&unk_1004448F8, 24, 7);
    *(_QWORD *)(v22 + 16) = v19;
    aBlock[4] = sub_1000C217C;
    aBlock[5] = v22;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10003ECA0;
    aBlock[3] = &unk_100444910;
    v23 = _Block_copy(aBlock);
    v24 = v19;
    v25 = swift_release();
    static DispatchQoS.unspecified.getter(v25);
    aBlock[0] = _swiftEmptyArrayStorage;
    v26 = sub_10000C4B0((unint64_t *)&qword_10047D7F0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v27 = sub_10000EDC8((uint64_t *)&unk_10047E430);
    v28 = sub_100043310((unint64_t *)&qword_10047D800, (uint64_t *)&unk_10047E430, (uint64_t)&protocol conformance descriptor for [A]);
    v29 = v45;
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v27, v28, v45, v26);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v14, v23);
    _Block_release(v23);

    (*(void (**)(char *, uint64_t))(v44 + 8))(v14, v29);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v13, v42);

    swift_bridgeObjectRelease(v17);
    v12 = v47;
  }
  v33 = v12 + 4;
  if (v12 + 4 >= v39)
  {
LABEL_21:
    swift_release();
    v34 = *v36;
    *v36 = (uint64_t)_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease(v34);
    v35 = v37;
    swift_beginAccess(v37, aBlock, 33, 0);
    os_unfair_lock_unlock(v35);
    swift_endAccess(aBlock);
    return;
  }
  v31 = *(_QWORD *)(v38 + 8 * v33);
  if (v31)
  {
    v32 = v12 + 4;
    goto LABEL_20;
  }
  while (1)
  {
    v32 = v33 + 1;
    if (__OFADD__(v33, 1))
      break;
    if (v32 >= v39)
      goto LABEL_21;
    v31 = *(_QWORD *)(v38 + 8 * v32);
    ++v33;
    if (v31)
      goto LABEL_20;
  }
LABEL_23:
  __break(1u);
}

void sub_1000C5084(char a1)
{
  uint64_t v1;
  uint64_t v2;
  os_unfair_lock_s *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  void (*v16)(_QWORD *__return_ptr, __n128);
  __n128 v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  _BYTE *v23;
  os_unfair_lock_s *v24;
  uint64_t v25;
  int64_t v26;
  _QWORD __src[63];
  char v28[24];
  _BYTE __dst[512];

  v2 = v1;
  v4 = (os_unfair_lock_s *)(v1 + OBJC_IVAR____TtC7Measure9LabelView_labelLock);
  swift_beginAccess(v1 + OBJC_IVAR____TtC7Measure9LabelView_labelLock, __dst, 33, 0);
  v24 = v4;
  os_unfair_lock_lock(v4);
  swift_endAccess(__dst);
  v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC7Measure9LabelView_labels);
  swift_beginAccess(v5, v28, 0, 0);
  v6 = *v5;
  v25 = *v5 + 64;
  v7 = 1 << *(_BYTE *)(*v5 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(*v5 + 64);
  v10 = OBJC_IVAR____TtC7Measure9LabelView__render;
  v26 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain(v6);
  v11 = 0;
  while (1)
  {
    if (v9)
    {
      v18 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v19 = v18 | (v11 << 6);
      goto LABEL_22;
    }
    v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v20 >= v26)
      goto LABEL_24;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      v11 = v20 + 1;
      if (v20 + 1 >= v26)
        goto LABEL_24;
      v21 = *(_QWORD *)(v25 + 8 * v11);
      if (!v21)
      {
        v11 = v20 + 2;
        if (v20 + 2 >= v26)
          goto LABEL_24;
        v21 = *(_QWORD *)(v25 + 8 * v11);
        if (!v21)
          break;
      }
    }
LABEL_21:
    v9 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_22:
    v23 = *(_BYTE **)(*(_QWORD *)(v6 + 56) + 8 * v19);
    v12 = (a1 & 1) != 0 && (unint64_t)(*(_QWORD *)&v23[OBJC_IVAR____TtC7Measure11LabelRender_state] - 3) < 2;
    v13 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v19 + 8);
    v23[OBJC_IVAR____TtC7Measure11LabelRender_hideForMovePoint] = v12;
    v14 = *(_QWORD *)&v23[OBJC_IVAR____TtC7Measure11LabelRender_state];
    swift_bridgeObjectRetain(v13);
    v15 = v23;
    sub_1000ADB38(v14);
    v16 = *(void (**)(_QWORD *__return_ptr, __n128))(**(_QWORD **)(v2 + v10) + 144);
    v17 = swift_retain();
    v16(__src, v17);
    swift_release();
    memcpy(__dst, __src, 0x1F8uLL);
    sub_1000B0CC4((uint64_t)__dst);
    sub_100036264((uint64_t)__dst);

    swift_bridgeObjectRelease(v13);
  }
  v22 = v20 + 3;
  if (v22 >= v26)
  {
LABEL_24:
    swift_release();
    swift_beginAccess(v24, __src, 33, 0);
    os_unfair_lock_unlock(v24);
    swift_endAccess(__src);
    return;
  }
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v11 = v22;
    goto LABEL_21;
  }
  while (1)
  {
    v11 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v11 >= v26)
      goto LABEL_24;
    v21 = *(_QWORD *)(v25 + 8 * v11);
    ++v22;
    if (v21)
      goto LABEL_21;
  }
LABEL_26:
  __break(1u);
}

id sub_1000C5448(void *a1, void *a2, double a3, double a4)
{
  char *v4;
  void *v5;
  objc_class *ObjectType;
  char *v11;
  uint64_t v12;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, __n128);
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t, __n128);
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t, __n128);
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t, __n128);
  __n128 v37;
  char *v38;
  double *v39;
  id v40;
  id v41;
  id v42;
  double v43;
  double v44;
  id v45;
  uint64_t v46;
  uint64_t inited;
  void *v48;
  id v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  objc_super v56;

  v5 = v4;
  ObjectType = (objc_class *)swift_getObjectType(v4);
  v11 = &v4[OBJC_IVAR____TtC7Measure9LabelView_delegate];
  *((_QWORD *)v11 + 1) = 0;
  swift_unknownObjectWeakInit(v11, 0);
  v12 = OBJC_IVAR____TtC7Measure9LabelView__appState;
  KeyPath = swift_getKeyPath(&unk_1003B5540);
  v14 = sub_10000EDC8((uint64_t *)&unk_100481B90);
  v15 = qword_10047AD88;
  v16 = v5;
  if (v15 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v17 = qword_1004AF890;
  v18 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v14 + 272);
  v19 = swift_retain();
  *(_QWORD *)&v16[v12] = v18(KeyPath, v17, v19);
  v20 = OBJC_IVAR____TtC7Measure9LabelView__render;
  v21 = swift_getKeyPath(&unk_1003B5568);
  v22 = sub_10000EDC8(&qword_100481998);
  v23 = qword_1004AF890;
  v24 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v22 + 272);
  v25 = swift_retain();
  *(_QWORD *)&v16[v20] = v24(v21, v23, v25);
  v26 = OBJC_IVAR____TtC7Measure9LabelView__measurements;
  v27 = swift_getKeyPath(&unk_1003B5590);
  v28 = sub_10000EDC8(&qword_100481BA0);
  v29 = qword_1004AF890;
  v30 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v28 + 272);
  v31 = swift_retain();
  *(_QWORD *)&v16[v26] = v30(v27, v29, v31);
  v32 = OBJC_IVAR____TtC7Measure9LabelView__historyUIState;
  v33 = swift_getKeyPath(&unk_1003B55B8);
  v34 = sub_10000EDC8(&qword_100481BA8);
  v35 = qword_1004AF890;
  v36 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v34 + 272);
  v37 = swift_retain();
  *(_QWORD *)&v16[v32] = v36(v33, v35, v37);
  v38 = &v16[OBJC_IVAR____TtC7Measure9LabelView_measurementUnderInspection];
  *(_QWORD *)v38 = 0;
  *((_QWORD *)v38 + 1) = 0;
  *(_QWORD *)&v16[OBJC_IVAR____TtC7Measure9LabelView_tapRecognizer] = 0;
  *(_DWORD *)&v16[OBJC_IVAR____TtC7Measure9LabelView_labelLock] = 0;
  *(_QWORD *)&v16[OBJC_IVAR____TtC7Measure9LabelView_labels] = _swiftEmptyDictionarySingleton;
  *(_QWORD *)&v16[OBJC_IVAR____TtC7Measure9LabelView_activityPresentingViewController] = 0;
  *(_QWORD *)&v16[OBJC_IVAR____TtC7Measure9LabelView_historyPressedPublisher] = 0;
  *(_QWORD *)&v16[OBJC_IVAR____TtC7Measure9LabelView_sceneView] = a2;
  *(_QWORD *)&v16[OBJC_IVAR____TtC7Measure9LabelView_parentView] = a1;
  v39 = (double *)&v16[OBJC_IVAR____TtC7Measure9LabelView_editViewBounds];
  *v39 = a3;
  v39[1] = a4;
  v40 = a2;
  v41 = a1;

  v56.receiver = v16;
  v56.super_class = ObjectType;
  v42 = objc_msgSendSuper2(&v56, "init");
  objc_msgSend(v40, "bounds");
  v45 = objc_msgSend(objc_allocWithZone((Class)SKScene), "initWithSize:", v43, v44);
  objc_msgSend(v40, "setOverlaySKScene:", v45);
  objc_msgSend(v45, "setScaleMode:", 3);
  sub_100018148(0, (unint64_t *)&unk_100481BB0, NSUserDefaults_ptr);
  v46 = sub_10000EDC8(&qword_10047E468);
  inited = swift_initStackObject(v46, &v55);
  *(_OWORD *)(inited + 16) = xmmword_1003B0BD0;
  v48 = (void *)objc_opt_self(SharedDefaults);
  v49 = v42;
  v50 = objc_msgSend(v48, "measureUnits");
  v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
  v53 = v52;

  *(_QWORD *)(inited + 32) = v51;
  *(_QWORD *)(inited + 40) = v53;
  static NSUserDefaults.observe(observer:keys:)(v49, inited);

  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, *(_QWORD *)(inited + 16), &type metadata for String);

  return v49;
}

id sub_1000C592C()
{
  void *v0;
  objc_class *ObjectType;
  id v2;
  NSString v3;
  uint64_t v4;
  uint64_t v5;
  objc_super v7;

  ObjectType = (objc_class *)swift_getObjectType(v0);
  v2 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v3 = objc_msgSend((id)objc_opt_self(SharedDefaults), "measureUnits");
  if (!v3)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v5 = v4;
    v3 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }
  objc_msgSend(v2, "removeObserver:forKeyPath:", v0, v3);

  v7.receiver = v0;
  v7.super_class = ObjectType;
  return objc_msgSendSuper2(&v7, "dealloc");
}

void sub_1000C5C20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  void *v8;
  id v9;
  id v10;
  _BYTE v11[24];

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7Measure9LabelView_measurementUnderInspection + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7Measure9LabelView_measurementUnderInspection);
    v3 = (os_unfair_lock_s *)(v0 + OBJC_IVAR____TtC7Measure9LabelView_labelLock);
    swift_beginAccess(v0 + OBJC_IVAR____TtC7Measure9LabelView_labelLock, v11, 33, 0);
    swift_bridgeObjectRetain(v1);
    os_unfair_lock_lock(v3);
    swift_endAccess(v11);
    v4 = (uint64_t *)(v0 + OBJC_IVAR____TtC7Measure9LabelView_labels);
    swift_beginAccess(v4, v11, 32, 0);
    v5 = *v4;
    if (*(_QWORD *)(v5 + 16))
    {
      swift_bridgeObjectRetain(v1);
      v6 = sub_1000C80A8(v2, v1);
      if ((v7 & 1) != 0)
      {
        v8 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v6);
        v9 = v8;
      }
      else
      {
        v8 = 0;
      }
      swift_bridgeObjectRelease(v1);
    }
    else
    {
      v8 = 0;
    }
    swift_endAccess(v11);
    swift_bridgeObjectRelease(v1);
    swift_beginAccess(v3, v11, 33, 0);
    os_unfair_lock_unlock(v3);
    swift_endAccess(v11);
    if (v8)
    {
      v10 = v8;
      sub_1000B50D8();

    }
  }
}

double sub_1000C5D80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  double result;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(__n128);
  __n128 v14;
  uint64_t v15;
  __n128 v16;

  v4 = (_QWORD *)(v2 + OBJC_IVAR____TtC7Measure9LabelView_measurementUnderInspection);
  v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7Measure9LabelView_measurementUnderInspection + 8);
  if (v5)
  {
    v6 = v2;
    v7 = *v4 == a1 && v5 == a2;
    if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v4, v5, a1, a2, 0) & 1) != 0)
    {
      if (objc_msgSend((id)objc_opt_self(Gestalt), "jasperAvailable"))
      {
        v9 = sub_100018148(0, (unint64_t *)&qword_10047E560, UIDevice_ptr);
        v10 = static UIDevice.isIPhone()(v9);
        v11 = v4[1];
        *v4 = 0;
        v4[1] = 0;
        *(_QWORD *)&result = swift_bridgeObjectRelease(v11).n128_u64[0];
        if ((v10 & 1) == 0)
          return result;
      }
      else
      {
        v12 = v4[1];
        *v4 = 0;
        v4[1] = 0;
        swift_bridgeObjectRelease(v12);
      }
      v13 = *(uint64_t (**)(__n128))(**(_QWORD **)(v6 + OBJC_IVAR____TtC7Measure9LabelView__appState) + 200);
      v14 = swift_retain();
      v15 = v13(v14);
      v16 = swift_release();
      (*(void (**)(uint64_t (*)(uint64_t), _QWORD, __n128))(*(_QWORD *)v15 + 280))(sub_1000C5E94, 0, v16);
      *(_QWORD *)&result = swift_release().n128_u64[0];
    }
  }
  return result;
}

uint64_t sub_1000C5E94(uint64_t result)
{
  *(_BYTE *)(result + 4) = 0;
  return result;
}

double sub_1000C5E9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t (*v8)(__n128);
  __n128 v9;
  uint64_t v10;
  __n128 v11;
  double result;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  if (objc_msgSend((id)objc_opt_self(Gestalt), "jasperAvailable")
    && (v5 = sub_100018148(0, (unint64_t *)&qword_10047E560, UIDevice_ptr),
        (static UIDevice.isIPhone()(v5) & 1) == 0))
  {
    v13 = OBJC_IVAR____TtC7Measure9LabelView_measurementUnderInspection;
    if (*(_QWORD *)(v2 + OBJC_IVAR____TtC7Measure9LabelView_measurementUnderInspection + 8))
    {
      sub_1000C3400(1);
      v13 = OBJC_IVAR____TtC7Measure9LabelView_measurementUnderInspection;
      v14 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7Measure9LabelView_measurementUnderInspection + 8);
    }
    else
    {
      v14 = 0;
    }
    v15 = (_QWORD *)(v2 + v13);
    *v15 = a1;
    v15[1] = a2;
    swift_bridgeObjectRelease(v14);
    *(_QWORD *)&result = swift_bridgeObjectRetain(a2).n128_u64[0];
  }
  else
  {
    v6 = (_QWORD *)(v2 + OBJC_IVAR____TtC7Measure9LabelView_measurementUnderInspection);
    v7 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7Measure9LabelView_measurementUnderInspection + 8);
    *v6 = a1;
    v6[1] = a2;
    swift_bridgeObjectRelease(v7);
    v8 = *(uint64_t (**)(__n128))(**(_QWORD **)(v2 + OBJC_IVAR____TtC7Measure9LabelView__appState) + 200);
    swift_bridgeObjectRetain(a2);
    v9 = swift_retain();
    v10 = v8(v9);
    v11 = swift_release();
    (*(void (**)(uint64_t (*)(uint64_t), _QWORD, __n128))(*(_QWORD *)v10 + 280))(sub_1000C5FD4, 0, v11);
    *(_QWORD *)&result = swift_release().n128_u64[0];
  }
  return result;
}

uint64_t sub_1000C5FD4(uint64_t result)
{
  *(_BYTE *)(result + 4) = 1;
  return result;
}

uint64_t type metadata accessor for LabelView()
{
  return objc_opt_self(_TtC7Measure9LabelView);
}

void sub_1000C602C()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int64_t v9;
  void (*v10)(_QWORD *__return_ptr, __n128);
  __n128 v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  _BYTE *v17;
  uint64_t v18;
  char *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  char *v23;
  id v24;
  uint64_t v25;
  int64_t v26;
  _QWORD __src[63];
  char v28[24];
  _BYTE __dst[512];

  v1 = v0;
  v2 = (os_unfair_lock_s *)(v0 + OBJC_IVAR____TtC7Measure9LabelView_labelLock);
  swift_beginAccess(v2, __dst, 33, 0);
  os_unfair_lock_lock(v2);
  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC7Measure9LabelView_labels);
  swift_beginAccess(v1 + OBJC_IVAR____TtC7Measure9LabelView_labels, v28, 0, 0);
  v4 = *v3;
  swift_bridgeObjectRetain(v4);
  os_unfair_lock_unlock(v2);
  swift_endAccess(__dst);
  v25 = v4 + 64;
  v5 = 1 << *(_BYTE *)(v4 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(v4 + 64);
  v8 = OBJC_IVAR____TtC7Measure9LabelView__render;
  v26 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain(v4);
  v9 = 0;
  while (1)
  {
    if (v7)
    {
      v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v13 = v12 | (v9 << 6);
      goto LABEL_23;
    }
    v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v14 >= v26)
      goto LABEL_25;
    v15 = *(_QWORD *)(v25 + 8 * v14);
    ++v9;
    if (!v15)
    {
      v9 = v14 + 1;
      if (v14 + 1 >= v26)
        goto LABEL_25;
      v15 = *(_QWORD *)(v25 + 8 * v9);
      if (!v15)
      {
        v9 = v14 + 2;
        if (v14 + 2 >= v26)
          goto LABEL_25;
        v15 = *(_QWORD *)(v25 + 8 * v9);
        if (!v15)
        {
          v9 = v14 + 3;
          if (v14 + 3 >= v26)
            goto LABEL_25;
          v15 = *(_QWORD *)(v25 + 8 * v9);
          if (!v15)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v9 << 6);
LABEL_23:
    v17 = *(_BYTE **)(*(_QWORD *)(v4 + 56) + 8 * v13);
    v18 = OBJC_IVAR____TtC7Measure11LabelRender_capturing;
    v17[OBJC_IVAR____TtC7Measure11LabelRender_capturing] = 1;
    v19 = v17;
    sub_1000AE494();
    sub_1000AE9C8();
    sub_1000ADB38(*(_QWORD *)&v19[OBJC_IVAR____TtC7Measure11LabelRender_state]);
    if ((v17[v18] & 1) == 0)
    {
      v20 = (void *)objc_opt_self(SKAction);
      v21 = swift_allocObject(&unk_100444998, 24, 7);
      *(_QWORD *)(v21 + 16) = v19;
      __src[4] = sub_1000C6F6C;
      __src[5] = v21;
      __src[0] = _NSConcreteStackBlock;
      __src[1] = 1107296256;
      __src[2] = sub_10003ECA0;
      __src[3] = &unk_1004449B0;
      v22 = _Block_copy(__src);
      v23 = v19;
      v24 = objc_msgSend(v20, "runBlock:", v22, swift_release().n128_f64[0]);
      _Block_release(v22);
      objc_msgSend(*(id *)&v23[OBJC_IVAR____TtC7Measure11LabelRender_labelNode], "runAction:", v24);

    }
    sub_1000B49D0();
    v10 = *(void (**)(_QWORD *__return_ptr, __n128))(**(_QWORD **)(v1 + v8) + 144);
    v11 = swift_retain();
    v10(__src, v11);
    swift_release();
    memcpy(__dst, __src, 0x1F8uLL);
    sub_1000B0CC4((uint64_t)__dst);
    sub_100036264((uint64_t)__dst);

  }
  v16 = v14 + 4;
  if (v16 >= v26)
  {
LABEL_25:
    swift_release();
    swift_bridgeObjectRelease(v4);
    return;
  }
  v15 = *(_QWORD *)(v25 + 8 * v16);
  if (v15)
  {
    v9 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    v9 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v9 >= v26)
      goto LABEL_25;
    v15 = *(_QWORD *)(v25 + 8 * v9);
    ++v16;
    if (v15)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
}

void sub_1000C63A8()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  void (*v12)(_QWORD *__return_ptr, __n128);
  __n128 v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  _BYTE *v18;
  uint64_t v19;
  char *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  char *v29;
  id v30;
  void *v31;
  uint64_t v32;
  int64_t v33;
  int64_t v34;
  uint64_t v35;
  _QWORD __src[63];
  char v37[24];
  _BYTE __dst[512];

  v1 = v0;
  v2 = (os_unfair_lock_s *)(v0 + OBJC_IVAR____TtC7Measure9LabelView_labelLock);
  swift_beginAccess(v2, __dst, 33, 0);
  os_unfair_lock_lock(v2);
  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC7Measure9LabelView_labels);
  swift_beginAccess(v1 + OBJC_IVAR____TtC7Measure9LabelView_labels, v37, 0, 0);
  v4 = *v3;
  swift_bridgeObjectRetain(v4);
  os_unfair_lock_unlock(v2);
  swift_endAccess(__dst);
  v32 = v4 + 64;
  v5 = 1 << *(_BYTE *)(v4 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(v4 + 64);
  v8 = OBJC_IVAR____TtC7Measure9LabelView__render;
  v33 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain(v4);
  v9 = 0;
  v10 = &OBJC_IVAR____TtC7Measure11LabelRender_capturing;
  v11 = &OBJC_IVAR____TtC7Measure11LabelRender_state;
  while (1)
  {
    if (v7)
    {
      v35 = (v7 - 1) & v7;
      v14 = __clz(__rbit64(v7)) | (v9 << 6);
      goto LABEL_23;
    }
    v15 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v15 >= v33)
      goto LABEL_25;
    v16 = *(_QWORD *)(v32 + 8 * v15);
    ++v9;
    if (!v16)
    {
      v9 = v15 + 1;
      if (v15 + 1 >= v33)
        goto LABEL_25;
      v16 = *(_QWORD *)(v32 + 8 * v9);
      if (!v16)
      {
        v9 = v15 + 2;
        if (v15 + 2 >= v33)
          goto LABEL_25;
        v16 = *(_QWORD *)(v32 + 8 * v9);
        if (!v16)
        {
          v9 = v15 + 3;
          if (v15 + 3 >= v33)
            goto LABEL_25;
          v16 = *(_QWORD *)(v32 + 8 * v9);
          if (!v16)
            break;
        }
      }
    }
LABEL_22:
    v35 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v9 << 6);
LABEL_23:
    v18 = *(_BYTE **)(*(_QWORD *)(v4 + 56) + 8 * v14);
    v19 = *v10;
    v18[*v10] = 0;
    v20 = v18;
    sub_1000AE494();
    sub_1000AE9C8();
    sub_1000ADB38(*(_QWORD *)&v20[*v11]);
    if ((v18[v19] & 1) == 0)
    {
      v21 = (void *)objc_opt_self(SKAction);
      v22 = swift_allocObject(&unk_100444948, 24, 7);
      *(_QWORD *)(v22 + 16) = v20;
      __src[4] = sub_1000C6C24;
      __src[5] = v22;
      __src[0] = _NSConcreteStackBlock;
      __src[1] = 1107296256;
      __src[2] = sub_10003ECA0;
      __src[3] = &unk_100444960;
      v23 = _Block_copy(__src);
      v34 = v9;
      v24 = v11;
      v25 = v4;
      v26 = v8;
      v27 = v1;
      v28 = v10;
      v29 = v20;
      v30 = objc_msgSend(v21, "runBlock:", v23, swift_release().n128_f64[0]);
      _Block_release(v23);
      v31 = *(void **)&v29[OBJC_IVAR____TtC7Measure11LabelRender_labelNode];
      v10 = v28;
      v1 = v27;
      v8 = v26;
      v4 = v25;
      v11 = v24;
      v9 = v34;
      objc_msgSend(v31, "runAction:", v30);

    }
    sub_1000B4AB8();
    v12 = *(void (**)(_QWORD *__return_ptr, __n128))(**(_QWORD **)(v1 + v8) + 144);
    v13 = swift_retain();
    v12(__src, v13);
    swift_release();
    memcpy(__dst, __src, 0x1F8uLL);
    sub_1000B0CC4((uint64_t)__dst);
    sub_100036264((uint64_t)__dst);

    v7 = v35;
  }
  v17 = v15 + 4;
  if (v17 >= v33)
  {
LABEL_25:
    swift_release();
    swift_bridgeObjectRelease(v4);
    return;
  }
  v16 = *(_QWORD *)(v32 + 8 * v17);
  if (v16)
  {
    v9 = v17;
    goto LABEL_22;
  }
  while (1)
  {
    v9 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v9 >= v33)
      goto LABEL_25;
    v16 = *(_QWORD *)(v32 + 8 * v9);
    ++v17;
    if (v16)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
}

uint64_t sub_1000C675C()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  os_unfair_lock_s *v16;
  char *v17;
  char v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  os_unfair_lock_s *v22;
  _BYTE v23[24];
  _BYTE v24[24];

  v1 = (os_unfair_lock_s *)(v0 + OBJC_IVAR____TtC7Measure9LabelView_labelLock);
  swift_beginAccess(v0 + OBJC_IVAR____TtC7Measure9LabelView_labelLock, v24, 33, 0);
  v22 = v1;
  os_unfair_lock_lock(v1);
  swift_endAccess(v24);
  v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC7Measure9LabelView_labels);
  swift_beginAccess(v2, v24, 0, 0);
  v3 = *v2;
  v4 = v3 + 64;
  v5 = 1;
  v6 = 1 << *(_BYTE *)(v3 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(v3 + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  result = swift_bridgeObjectRetain(v3);
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v12 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v13 = v12 | (v11 << 6);
      goto LABEL_5;
    }
    v19 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v19 >= v9)
      goto LABEL_21;
    v20 = *(_QWORD *)(v4 + 8 * v19);
    ++v11;
    if (!v20)
    {
      v11 = v19 + 1;
      if (v19 + 1 >= v9)
        goto LABEL_21;
      v20 = *(_QWORD *)(v4 + 8 * v11);
      if (!v20)
      {
        v11 = v19 + 2;
        if (v19 + 2 >= v9)
          goto LABEL_21;
        v20 = *(_QWORD *)(v4 + 8 * v11);
        if (!v20)
          break;
      }
    }
LABEL_20:
    v8 = (v20 - 1) & v20;
    v13 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_5:
    v14 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v13 + 8);
    v15 = *(char **)(*(_QWORD *)(v3 + 56) + 8 * v13);
    v16 = (os_unfair_lock_s *)&v15[OBJC_IVAR____TtC7Measure11LabelRender_labelLock];
    swift_beginAccess(&v15[OBJC_IVAR____TtC7Measure11LabelRender_labelLock], v23, 33, 0);
    swift_bridgeObjectRetain(v14);
    v17 = v15;
    os_unfair_lock_lock(v16);
    v18 = v17[OBJC_IVAR____TtC7Measure11LabelRender__visibleForCapture];
    os_unfair_lock_unlock(v16);
    swift_endAccess(v23);

    result = swift_bridgeObjectRelease(v14);
    v5 &= v18;
  }
  v21 = v19 + 3;
  if (v21 >= v9)
  {
LABEL_21:
    swift_release(v3);
    swift_beginAccess(v22, v23, 33, 0);
    os_unfair_lock_unlock(v22);
    swift_endAccess(v23);
    return v5 & 1;
  }
  v20 = *(_QWORD *)(v4 + 8 * v21);
  if (v20)
  {
    v11 = v21;
    goto LABEL_20;
  }
  while (1)
  {
    v11 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v11 >= v9)
      goto LABEL_21;
    v20 = *(_QWORD *)(v4 + 8 * v11);
    ++v21;
    if (v20)
      goto LABEL_20;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_1000C6998()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  os_unfair_lock_s *v16;
  char *v17;
  char v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  os_unfair_lock_s *v22;
  _BYTE v23[24];
  _BYTE v24[24];

  v1 = (os_unfair_lock_s *)(v0 + OBJC_IVAR____TtC7Measure9LabelView_labelLock);
  swift_beginAccess(v0 + OBJC_IVAR____TtC7Measure9LabelView_labelLock, v24, 33, 0);
  v22 = v1;
  os_unfair_lock_lock(v1);
  swift_endAccess(v24);
  v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC7Measure9LabelView_labels);
  swift_beginAccess(v2, v24, 0, 0);
  v3 = *v2;
  v4 = v3 + 64;
  v5 = 1;
  v6 = 1 << *(_BYTE *)(v3 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(v3 + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  result = swift_bridgeObjectRetain(v3);
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v12 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v13 = v12 | (v11 << 6);
      goto LABEL_5;
    }
    v19 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v19 >= v9)
      goto LABEL_21;
    v20 = *(_QWORD *)(v4 + 8 * v19);
    ++v11;
    if (!v20)
    {
      v11 = v19 + 1;
      if (v19 + 1 >= v9)
        goto LABEL_21;
      v20 = *(_QWORD *)(v4 + 8 * v11);
      if (!v20)
      {
        v11 = v19 + 2;
        if (v19 + 2 >= v9)
          goto LABEL_21;
        v20 = *(_QWORD *)(v4 + 8 * v11);
        if (!v20)
          break;
      }
    }
LABEL_20:
    v8 = (v20 - 1) & v20;
    v13 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_5:
    v14 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v13 + 8);
    v15 = *(char **)(*(_QWORD *)(v3 + 56) + 8 * v13);
    v16 = (os_unfair_lock_s *)&v15[OBJC_IVAR____TtC7Measure11LabelRender_labelLock];
    swift_beginAccess(&v15[OBJC_IVAR____TtC7Measure11LabelRender_labelLock], v23, 33, 0);
    swift_bridgeObjectRetain(v14);
    v17 = v15;
    os_unfair_lock_lock(v16);
    v18 = v17[OBJC_IVAR____TtC7Measure11LabelRender__visibleForCapture];
    os_unfair_lock_unlock(v16);
    swift_endAccess(v23);

    result = swift_bridgeObjectRelease(v14);
    v5 &= v18 ^ 1;
  }
  v21 = v19 + 3;
  if (v21 >= v9)
  {
LABEL_21:
    swift_release(v3);
    swift_beginAccess(v22, v23, 33, 0);
    os_unfair_lock_unlock(v22);
    swift_endAccess(v23);
    return v5 & 1;
  }
  v20 = *(_QWORD *)(v4 + 8 * v21);
  if (v20)
  {
    v11 = v21;
    goto LABEL_20;
  }
  while (1)
  {
    v11 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v11 >= v9)
      goto LABEL_21;
    v20 = *(_QWORD *)(v4 + 8 * v11);
    ++v21;
    if (v20)
      goto LABEL_20;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_1000C6BE8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000C6C0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000C6C1C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

id sub_1000C6C24()
{
  uint64_t v0;

  return sub_1000AF078(*(_QWORD *)(v0 + 16));
}

void sub_1000C6C3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  float v24;
  char *v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  char v29[24];

  v5 = objc_msgSend((id)objc_opt_self(SharedDefaults), "measureUnits");
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v8 = v7;

  if (!a2)
  {
    swift_bridgeObjectRelease(v8);
    return;
  }
  if (v6 == a1 && v8 == a2)
  {
    swift_bridgeObjectRelease(v8);
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v6, v8, 0);
    swift_bridgeObjectRelease(v8);
    if ((v10 & 1) == 0)
      return;
  }
  v11 = (uint64_t *)(v2 + OBJC_IVAR____TtC7Measure9LabelView_labels);
  swift_beginAccess(v2 + OBJC_IVAR____TtC7Measure9LabelView_labels, v29, 0, 0);
  v12 = *v11;
  v13 = v12 + 64;
  v14 = 1 << *(_BYTE *)(v12 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v12 + 64);
  v17 = (unint64_t)(v14 + 63) >> 6;
  swift_bridgeObjectRetain(v12);
  v18 = 0;
  while (1)
  {
    if (v16)
    {
      v19 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v20 = v19 | (v18 << 6);
      goto LABEL_14;
    }
    v26 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v26 >= v17)
      goto LABEL_30;
    v27 = *(_QWORD *)(v13 + 8 * v26);
    ++v18;
    if (!v27)
    {
      v18 = v26 + 1;
      if (v26 + 1 >= v17)
        goto LABEL_30;
      v27 = *(_QWORD *)(v13 + 8 * v18);
      if (!v27)
      {
        v18 = v26 + 2;
        if (v26 + 2 >= v17)
          goto LABEL_30;
        v27 = *(_QWORD *)(v13 + 8 * v18);
        if (!v27)
          break;
      }
    }
LABEL_29:
    v16 = (v27 - 1) & v27;
    v20 = __clz(__rbit64(v27)) + (v18 << 6);
LABEL_14:
    v21 = *(_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v20 + 8);
    v22 = *(char **)(*(_QWORD *)(v12 + 56) + 8 * v20);
    v23 = OBJC_IVAR____TtC7Measure11LabelRender_measurement;
    v24 = *(float *)&v22[OBJC_IVAR____TtC7Measure11LabelRender_measurement];
    swift_bridgeObjectRetain(v21);
    v25 = v22;
    sub_1000AEC68(v24);
    *(float *)&v22[v23] = v24;

    swift_bridgeObjectRelease(v21);
  }
  v28 = v26 + 3;
  if (v28 >= v17)
  {
LABEL_30:
    swift_release();
    return;
  }
  v27 = *(_QWORD *)(v13 + 8 * v28);
  if (v27)
  {
    v18 = v28;
    goto LABEL_29;
  }
  while (1)
  {
    v18 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v18 >= v17)
      goto LABEL_30;
    v27 = *(_QWORD *)(v13 + 8 * v18);
    ++v28;
    if (v27)
      goto LABEL_29;
  }
LABEL_32:
  __break(1u);
}

uint64_t sub_1000C6E94(void *a1, id a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  char v7;

  v3 = objc_msgSend(a2, "view");
  v4 = objc_msgSend(a1, "view");
  v5 = v4;
  if (v3)
  {
    if (!v4)
    {
      v7 = 0;
      goto LABEL_8;
    }
    sub_100018148(0, (unint64_t *)&qword_100481BC0, UIView_ptr);
    v6 = v3;
    v7 = static NSObject.== infix(_:_:)(v6, v5);

  }
  else
  {
    if (!v4)
    {
      v7 = 1;
      return v7 & 1;
    }
    v7 = 0;
  }
  v3 = v5;
LABEL_8:

  return v7 & 1;
}

unint64_t sub_1000C6F74(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  id *v6;
  char v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000EDC8(&qword_100481C98);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (id *)(a1 + 40);
  while (1)
  {
    v7 = *(_BYTE *)v6;
    v8 = *(v6 - 1);
    result = sub_1000C8110((uint64_t)v8);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v4[6] + 8 * result) = v8;
    *(_BYTE *)(v4[7] + result) = v7;
    v11 = v4[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4[2] = v13;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000C7070(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  id v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000EDC8(&qword_100481BE0);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v6 = *v5;
    v7 = (id)*(v5 - 1);
    result = sub_1000C8110((uint64_t)v7);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = 8 * result;
    *(_QWORD *)(v3[6] + v10) = v7;
    *(_QWORD *)(v3[7] + v10) = v6;
    v11 = v3[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v5 += 2;
    v3[2] = v13;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000C716C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  id v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000EDC8(&qword_100481BD8);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v6 = *v5;
    v7 = (id)*(v5 - 1);
    swift_bridgeObjectRetain(v6);
    result = sub_1000C8110((uint64_t)v7);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = 8 * result;
    *(_QWORD *)(v3[6] + v10) = v7;
    *(_QWORD *)(v3[7] + v10) = v6;
    v11 = v3[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v3[2] = v13;
    v5 += 2;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000C7274(uint64_t a1)
{
  return sub_1000C7AE8(a1, &qword_10047C108, &qword_100481BE8, (uint64_t (*)(uint64_t))sub_1000C8110);
}

unint64_t sub_1000C7290(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  id v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000EDC8(&qword_100481BF8);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v6 = *v5;
    v7 = (id)*(v5 - 1);
    result = sub_1000C8110((uint64_t)v7);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = 8 * result;
    *(_QWORD *)(v3[6] + v10) = v7;
    *(_QWORD *)(v3[7] + v10) = v6;
    v11 = v3[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v3[2] = v13;
    v5 += 2;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000C7398(uint64_t a1)
{
  return sub_1000C7AE8(a1, &qword_10047C118, &qword_100481BF0, (uint64_t (*)(uint64_t))sub_1000C8110);
}

unint64_t sub_1000C73B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = _swiftEmptyDictionarySingleton;
LABEL_9:
    v16 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v16);
    return (unint64_t)v4;
  }
  sub_10000EDC8(&qword_100481C08);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    goto LABEL_9;
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1000644F8(v7, (uint64_t)&v17, &qword_100481C10);
    v8 = v17;
    v9 = v18;
    result = sub_1000C80A8(v17, v18);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = sub_10001C01C(&v19, v4[7] + 40 * result);
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_12;
    v4[2] = v15;
    v7 += 56;
    if (!--v5)
    {
      swift_release();
      v16 = a1;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_1000C74F4(uint64_t a1)
{
  return sub_1000C7D30(a1, &qword_100481BD0);
}

unint64_t sub_1000C7500(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000EDC8(&qword_100481A78);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = *(_QWORD *)(v1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease(v1);
    return (unint64_t)v3;
  }
  swift_retain();
  v18 = v1;
  v5 = (uint64_t *)(v1 + 48);
  while (1)
  {
    v6 = *(v5 - 2);
    v7 = *(v5 - 1);
    v8 = *v5;
    v19 = *(_OWORD *)(v5 + 3);
    v20 = *(_OWORD *)(v5 + 1);
    v9 = (void *)v5[5];
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(*((_QWORD *)&v20 + 1));
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(*((_QWORD *)&v19 + 1));
    v10 = v9;
    result = sub_1000C80A8(v6, v7);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v3[6] + 16 * result);
    *v13 = v6;
    v13[1] = v7;
    v14 = v3[7] + 48 * result;
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v20;
    *(_OWORD *)(v14 + 24) = v19;
    *(_QWORD *)(v14 + 40) = v10;
    v15 = v3[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v3[2] = v17;
    v5 += 8;
    if (!--v4)
    {
      swift_release();
      v1 = v18;
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000C7684(uint64_t a1)
{
  return sub_1000C7AE8(a1, &qword_100481C30, &qword_100481C38, (uint64_t (*)(uint64_t))sub_1000C8110);
}

unint64_t sub_1000C76A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000EDC8(&qword_100481C68);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1000644F8(v7, (uint64_t)&v14, &qword_100481C70);
    v8 = v14;
    result = sub_1000C82E0(v14);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v4[6] + 8 * result) = v8;
    result = (unint64_t)sub_100020848(&v15, (_OWORD *)(v4[7] + 32 * result));
    v11 = v4[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4[2] = v13;
    v7 += 40;
    if (!--v5)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000C77CC(uint64_t a1)
{
  return sub_1000C7AE8(a1, &qword_100481C18, &qword_100481C20, (uint64_t (*)(uint64_t))sub_1000C8110);
}

unint64_t sub_1000C77E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = sub_10000EDC8(&qword_1004816A8);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = _swiftEmptyDictionarySingleton;
LABEL_9:
    v23 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v23);
    return (unint64_t)v8;
  }
  sub_10000EDC8(&qword_100481A88);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_1000644F8(v13, (uint64_t)v5, &qword_1004816A8);
    result = sub_1000C83A0((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for UUID(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    *(_BYTE *)(v8[7] + v17) = v5[v10];
    v20 = v8[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_12;
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v23 = v25;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_1000C797C(uint64_t a1)
{
  return sub_1000C7AE8(a1, &qword_100481C48, &qword_100481C50, (uint64_t (*)(uint64_t))sub_1000C8110);
}

unint64_t sub_1000C7998(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000EDC8(&qword_100481CA0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1000644F8(v7, (uint64_t)&v16, &qword_100481CA8);
    v8 = v16;
    v9 = v17;
    result = sub_1000C80A8(v16, v17);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_100020848(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 48;
    if (!--v5)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000C7ACC(uint64_t a1)
{
  return sub_1000C7AE8(a1, &qword_100481C88, &qword_100481C90, (uint64_t (*)(uint64_t))sub_1000C8110);
}

unint64_t sub_1000C7AE8(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
    v9 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000EDC8(a2);
  v8 = static _DictionaryStorage.allocate(capacity:)(v5);
  v9 = (_QWORD *)v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v9;
  }
  v11 = v8 + 64;
  v12 = a1 + 32;
  swift_retain(v8);
  while (1)
  {
    sub_1000644F8(v12, (uint64_t)&v19, a3);
    v13 = v19;
    result = a4(v19);
    if ((v15 & 1) != 0)
      break;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v9[6] + 8 * result) = v13;
    result = (unint64_t)sub_100020848(&v20, (_OWORD *)(v9[7] + 32 * result));
    v16 = v9[2];
    v17 = __OFADD__(v16, 1);
    v18 = v16 + 1;
    if (v17)
      goto LABEL_11;
    v9[2] = v18;
    v12 += 40;
    if (!--v10)
    {
      swift_release(v9);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000C7C10(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  unint64_t result;
  char v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000EDC8(&qword_100481C28);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v6 = *(v5 - 1);
    v7 = *v5;
    v8 = (id)*(v5 - 2);
    swift_bridgeObjectRetain(v7);
    result = sub_1000C8110((uint64_t)v8);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v8;
    v11 = (_QWORD *)(v3[7] + 16 * result);
    *v11 = v6;
    v11[1] = v7;
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v5 += 3;
    v3[2] = v14;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000C7D24(uint64_t a1)
{
  return sub_1000C7D30(a1, &qword_100481C00);
}

unint64_t sub_1000C7D30(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  id v8;
  id v9;
  unint64_t result;
  char v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    v4 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000EDC8(a2);
  v4 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v3);
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain();
  v6 = (void **)(a1 + 40);
  while (1)
  {
    v7 = *v6;
    v8 = *(v6 - 1);
    v9 = v7;
    result = sub_1000C8110((uint64_t)v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = 8 * result;
    *(_QWORD *)(v4[6] + v12) = v8;
    *(_QWORD *)(v4[7] + v12) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v6 += 2;
    if (!--v5)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

Swift::Void __swiftcall UIPasteboard.set(attributedString:)(NSAttributedString_optional attributedString)
{
  void *v1;
  void *v2;
  Class isa;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t inited;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  Class v19;
  id v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Class v29;
  uint64_t v30;
  objc_class *v31;
  _BYTE v32[128];

  v2 = v1;
  isa = attributedString.value.super.isa;
  v4 = type metadata accessor for String.Encoding(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (isa)
  {
    v31 = isa;
    v8 = sub_10012C6A0();
    if (v9 >> 60 == 15)
    {

    }
    else
    {
      v10 = v8;
      v11 = v9;
      v12 = sub_10000EDC8((uint64_t *)&unk_100486350);
      inited = swift_initStackObject(v12, v32);
      *(_OWORD *)(inited + 16) = xmmword_1003B0F60;
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(kUTTypeRTF);
      *(_QWORD *)(inited + 32) = v14;
      *(_QWORD *)(inited + 40) = v15;
      v16 = static String.Encoding.utf8.getter(v14);
      v17 = String.Encoding.rawValue.getter(v16);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      v18 = objc_allocWithZone((Class)NSString);
      v19 = Data._bridgeToObjectiveC()().super.isa;
      v20 = objc_msgSend(v18, "initWithData:encoding:", v19, v17);

      if (v20)
      {
        *(_QWORD *)(inited + 72) = sub_100018148(0, &qword_100481BC8, NSString_ptr);
        *(_QWORD *)(inited + 48) = v20;
        *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(kUTTypeUTF8PlainText);
        *(_QWORD *)(inited + 88) = v21;
        v22 = -[objc_class string](v31, "string");
        v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
        v25 = v24;

        *(_QWORD *)(inited + 120) = &type metadata for String;
        *(_QWORD *)(inited + 96) = v23;
        *(_QWORD *)(inited + 104) = v25;
        v26 = sub_1000C7998(inited);
        sub_1000C8094(v10, v11);
        v27 = sub_10000EDC8(&qword_10047E518);
        v28 = swift_allocObject(v27, 40, 7);
        *(_OWORD *)(v28 + 16) = xmmword_1003B0BD0;
        *(_QWORD *)(v28 + 32) = v26;
        sub_10000EDC8(&qword_10047E520);
        v29 = Array._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v2, "setItems:", v29, swift_bridgeObjectRelease(v28).n128_f64[0]);

      }
      else
      {
        __break(1u);
      }
    }
  }
}

uint64_t sub_1000C8094(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_100036300(result, a2);
  return result;
}

unint64_t sub_1000C80A8(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6);
  String.hash(into:)(v6, a1, a2);
  v4 = Hasher._finalize()();
  return sub_1000C85CC(a1, a2, v4);
}

unint64_t sub_1000C8110(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Int v5;
  _QWORD v7[9];

  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v4 = v3;
  Hasher.init(_seed:)(v7);
  String.hash(into:)(v7, v2, v4);
  v5 = Hasher._finalize()();
  swift_bridgeObjectRelease(v4);
  return sub_1000C8840(a1, v5);
}

unint64_t sub_1000C81A0(unsigned __int8 a1)
{
  Swift::Int v2;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4);
  Hasher._combine(_:)(a1);
  v2 = Hasher._finalize()();
  return sub_1000C86AC(a1, v2);
}

unint64_t sub_1000C8204(unsigned __int8 a1)
{
  unsigned __int8 v2;
  Swift::Int v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5);
  v2 = a1 - 3;
  if ((a1 - 3) >= 7u)
  {
    Hasher._combine(_:)(7uLL);
    v2 = a1;
  }
  Hasher._combine(_:)(v2);
  v3 = Hasher._finalize()();
  return sub_1000C874C(a1, v3);
}

unint64_t sub_1000C827C(double a1)
{
  uint64_t v1;
  double v3;
  uint64_t v4;

  if ((*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = a1;
  else
    v3 = 0.0;
  v4 = static Hasher._hash(seed:_:)(*(_QWORD *)(v1 + 40), *(_QWORD *)&v3);
  return sub_1000C89B4(v4, a1);
}

unint64_t sub_1000C82B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_1000C8A4C(a1, v4);
}

unint64_t sub_1000C82E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7);
  type metadata accessor for CFString(0);
  v3 = v2;
  v4 = sub_10000C4B0(&qword_100481C78, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_1003B04B8);
  _CFObject.hash(into:)(v7, v3, v4);
  v5 = Hasher._finalize()();
  return sub_1000C8B10(a1, v5);
}

unint64_t sub_1000C8368(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = static Hasher._hash(seed:_:)(*(_QWORD *)(v1 + 40), a1);
  return sub_1000C8C50(a1, v3);
}

unint64_t sub_1000C83A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for UUID(0);
  v6 = sub_10000C4B0(&qword_100480278, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_1000C8CEC(a1, v7, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_100481C60, (uint64_t)&protocol conformance descriptor for UUID);
}

unint64_t sub_1000C8438(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for URL(0);
  v6 = sub_10000C4B0(&qword_100481A60, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_1000C8CEC(a1, v7, (uint64_t (*)(uint64_t))&type metadata accessor for URL, &qword_100481C58, (uint64_t)&protocol conformance descriptor for URL);
}

unint64_t sub_1000C84D0(uint64_t a1)
{
  Swift::Int v2;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4);
  (*(void (**)(_QWORD *))(*(_QWORD *)a1 + 184))(v4);
  v2 = Hasher._finalize()();
  return sub_1000C8E1C(a1, v2);
}

unint64_t sub_1000C8530(uint64_t a1, void *a2)
{
  uint64_t v4;
  id v5;
  Swift::Int v6;
  _QWORD v8[9];

  Hasher.init(_seed:)(v8);
  v4 = type metadata accessor for AnyKeyPath(0);
  dispatch thunk of Hashable.hash(into:)(v8, v4, &protocol witness table for AnyKeyPath);
  v5 = a2;
  NSObject.hash(into:)(v8);

  v6 = Hasher._finalize()();
  return sub_1000C8F2C(a1, (uint64_t)v5, v6);
}

unint64_t sub_1000C85CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = v10[1];
    v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      do
      {
        v6 = (v6 + 1) & v13;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v14 = (_QWORD *)(v9 + 16 * v6);
        v15 = v14[1];
        v16 = *v14 == a1 && v15 == a2;
      }
      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_1000C86AC(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_1000C874C(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;

  v4 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v6 = ~v4;
    while (2)
    {
      switch(*(_BYTE *)(*(_QWORD *)(v2 + 48) + result))
      {
        case 3:
          if (a1 != 3)
            goto LABEL_4;
          break;
        case 4:
          if (a1 != 4)
            goto LABEL_4;
          break;
        case 5:
          if (a1 != 5)
            goto LABEL_4;
          break;
        case 6:
          if (a1 != 6)
            goto LABEL_4;
          break;
        case 7:
          if (a1 != 7)
            goto LABEL_4;
          break;
        case 8:
          if (a1 != 8)
            goto LABEL_4;
          break;
        case 9:
          if (a1 != 9)
            goto LABEL_4;
          break;
        default:
          if (a1 - 10 > 0xFFFFFFF8 || *(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + result) != a1)
          {
LABEL_4:
            result = (result + 1) & v6;
            if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
              continue;
          }
          break;
      }
      break;
    }
  }
  return result;
}

unint64_t sub_1000C8840(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2);
      return v5;
    }
    v13 = v11;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      v15 = ~v4;
      v5 = (v5 + 1) & v15;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
          v9 = v17;
          v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v16 == v18 && v9 == v19)
            break;
          v21 = v19;
          v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            v5 = (v5 + 1) & v15;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_1000C89B4(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  result = a1 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v6 = *(_QWORD *)(v2 + 48);
    if (*(double *)(v6 + 8 * result) != a2)
    {
      v7 = ~v4;
      for (result = (result + 1) & v7;
            ((*(_QWORD *)(v3 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v7)
      {
        if (*(double *)(v6 + 8 * result) == a2)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_1000C8A4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_1000C97DC(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_1000C9818((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_1000C8B10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  char v13;
  uint64_t v14;
  id v15;
  char v16;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v6 = v2;
    type metadata accessor for CFString(0);
    v9 = v8;
    v10 = *(void **)(*(_QWORD *)(v6 + 48) + 8 * i);
    v11 = sub_10000C4B0(&qword_100481C78, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_1003B04B8);
    v12 = v10;
    v13 = static _CFObject.== infix(_:_:)(v12, a1, v9, v11);

    if ((v13 & 1) == 0)
    {
      v14 = ~v4;
      for (i = (i + 1) & v14; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v14)
      {
        v15 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * i);
        v16 = static _CFObject.== infix(_:_:)(v15, a1, v9, v11);

        if ((v16 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t sub_1000C8C50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_1000C8CEC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, unint64_t, uint64_t);
  uint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  unint64_t *v22;
  uint64_t v23;

  v22 = a4;
  v23 = a5;
  v6 = v5;
  v20 = a1;
  v21 = a3;
  v8 = a3(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v20 - v10;
  v12 = -1 << *(_BYTE *)(v6 + 32);
  v13 = a2 & ~v12;
  if (((*(_QWORD *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v14 = ~v12;
    v15 = *(_QWORD *)(v9 + 72);
    v16 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    do
    {
      v16(v11, *(_QWORD *)(v6 + 48) + v15 * v13, v8);
      v17 = sub_10000C4B0(v22, v21, v23);
      v18 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v20, v8, v17);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      if ((v18 & 1) != 0)
        break;
      v13 = (v13 + 1) & v14;
    }
    while (((*(_QWORD *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
  }
  return v13;
}

unint64_t sub_1000C8E1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    type metadata accessor for WorldPlane(0);
    v7 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * i);
    v8 = swift_retain(v7);
    v9 = static WorldPlane.== infix(_:_:)(v8, a1);
    swift_release(v7);
    if ((v9 & 1) == 0)
    {
      v10 = ~v4;
      for (i = (i + 1) & v10; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v10)
      {
        v11 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * i);
        v12 = swift_retain(v11);
        v13 = static WorldPlane.== infix(_:_:)(v12, a1);
        swift_release(v11);
        if ((v13 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t sub_1000C8F2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t *v11;
  void *v12;
  uint64_t v13;
  id v14;
  char v15;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v7 = v3;
    v10 = ~v5;
    type metadata accessor for AnyKeyPath(0);
    do
    {
      v11 = (uint64_t *)(*(_QWORD *)(v7 + 48) + 16 * v6);
      v13 = *v11;
      v12 = (void *)v11[1];
      swift_retain();
      v14 = v12;
      if ((static AnyKeyPath.== infix(_:_:)(v13, a1) & 1) != 0)
      {
        sub_100018148(0, (unint64_t *)&qword_10047C128, NSObject_ptr);
        v15 = static NSObject.== infix(_:_:)(v14, a2);

        swift_release();
        if ((v15 & 1) != 0)
          return v6;
      }
      else
      {

        swift_release();
      }
      v6 = (v6 + 1) & v10;
    }
    while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
  }
  return v6;
}

unint64_t sub_1000C9050(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  unsigned __int8 v4;
  uint64_t v5;
  unint64_t result;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char v14;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (unint64_t)_swiftEmptyDictionarySingleton;
  sub_10000EDC8(&qword_100481C80);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
  v4 = *(_BYTE *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  result = sub_1000C81A0(v4);
  if ((v7 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain(v5);
    return (unint64_t)v3;
  }
  v8 = (_QWORD *)(a1 + 56);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v3[6] + result) = v4;
    *(_QWORD *)(v3[7] + 8 * result) = v5;
    v9 = v3[2];
    v10 = __OFADD__(v9, 1);
    v11 = v9 + 1;
    if (v10)
      break;
    v3[2] = v11;
    if (!--v1)
      goto LABEL_8;
    v12 = v8 + 2;
    v4 = *((_BYTE *)v8 - 8);
    v13 = *v8;
    swift_bridgeObjectRetain(v5);
    result = sub_1000C81A0(v4);
    v8 = v12;
    v5 = v13;
    if ((v14 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

unint64_t sub_1000C9150(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;

  v1 = a1[2];
  if (!v1)
    return (unint64_t)_swiftEmptyDictionarySingleton;
  sub_10000EDC8(&qword_100481A20);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[6];
  result = sub_1000C8368(v4);
  if ((v8 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain(v6);
    return (unint64_t)v3;
  }
  v9 = a1 + 9;
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v4;
    v10 = (_QWORD *)(v3[7] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    v11 = v3[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      break;
    v3[2] = v13;
    if (!--v1)
      goto LABEL_8;
    v14 = v9 + 3;
    v4 = *(v9 - 2);
    v5 = *(v9 - 1);
    v15 = *v9;
    swift_bridgeObjectRetain(v6);
    result = sub_1000C8368(v4);
    v9 = v14;
    v6 = v15;
    if ((v16 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

unint64_t sub_1000C925C(_QWORD *a1)
{
  return sub_1000C9348(a1, &qword_100481A08);
}

unint64_t sub_1000C9268(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_10000EDC8(&qword_100481A18);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
    for (i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      v5 = *(i - 1);
      v6 = *i;
      result = sub_1000C8368(v5);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v9 = 8 * result;
      *(_QWORD *)(v3[6] + v9) = v5;
      *(_QWORD *)(v3[7] + v9) = v6;
      v10 = v3[2];
      v11 = __OFADD__(v10, 1);
      v12 = v10 + 1;
      if (v11)
        goto LABEL_10;
      v3[2] = v12;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)_swiftEmptyDictionarySingleton;
  }
  return result;
}

unint64_t sub_1000C933C(_QWORD *a1)
{
  return sub_1000C9348(a1, &qword_100481A10);
}

unint64_t sub_1000C9348(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  unint64_t result;
  char v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  void **v14;
  void *v15;
  id v16;
  char v17;
  id v18;

  v2 = a1[2];
  if (!v2)
    return (unint64_t)_swiftEmptyDictionarySingleton;
  sub_10000EDC8(a2);
  v4 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v5 = a1[4];
  v6 = (void *)a1[5];
  result = sub_1000C8368(v5);
  if ((v8 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    v18 = v6;
    return (unint64_t)v4;
  }
  v9 = (void **)(a1 + 7);
  while (1)
  {
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = 8 * result;
    *(_QWORD *)(v4[6] + v10) = v5;
    *(_QWORD *)(v4[7] + v10) = v6;
    v11 = v4[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      break;
    v4[2] = v13;
    if (!--v2)
      goto LABEL_8;
    v14 = v9 + 2;
    v5 = (uint64_t)*(v9 - 1);
    v15 = *v9;
    v16 = v6;
    result = sub_1000C8368(v5);
    v9 = v14;
    v6 = v15;
    if ((v17 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

unint64_t sub_1000C9438(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *i;
  unsigned __int8 v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_10000EDC8(&qword_100481A98);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
    for (i = (_QWORD *)(a1 + 40); ; i += 2)
    {
      v5 = *((_BYTE *)i - 8);
      v6 = *i;
      result = sub_1000C81A0(v5);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_BYTE *)(v3[6] + result) = v5;
      *(_QWORD *)(v3[7] + 8 * result) = v6;
      v9 = v3[2];
      v10 = __OFADD__(v9, 1);
      v11 = v9 + 1;
      if (v10)
        goto LABEL_10;
      v3[2] = v11;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)_swiftEmptyDictionarySingleton;
  }
  return result;
}

unint64_t sub_1000C950C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char v16;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (unint64_t)_swiftEmptyDictionarySingleton;
  sub_10000EDC8(&qword_100481C40);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
  v4 = *(_BYTE *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  result = sub_1000C81A0(v4);
  if ((v8 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain(v5);
    return (unint64_t)v3;
  }
  v9 = (_QWORD *)(a1 + 72);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v3[6] + result) = v4;
    v10 = (_QWORD *)(v3[7] + 16 * result);
    *v10 = v6;
    v10[1] = v5;
    v11 = v3[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      break;
    v3[2] = v13;
    if (!--v1)
      goto LABEL_8;
    v14 = v9 + 3;
    v4 = *((_BYTE *)v9 - 16);
    v6 = *(v9 - 1);
    v15 = *v9;
    swift_bridgeObjectRetain(v5);
    result = sub_1000C81A0(v4);
    v9 = v14;
    v5 = v15;
    if ((v16 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

void _sSo12UIPasteboardC7MeasureE7rtfItem4fromSDySSypGSgSo18NSAttributedStringC_tF_0(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t inited;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  Class isa;
  id v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[128];

  v2 = type metadata accessor for String.Encoding(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v24[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_10012C6A0();
  if (v7 >> 60 != 15)
  {
    v8 = v6;
    v9 = v7;
    v10 = sub_10000EDC8((uint64_t *)&unk_100486350);
    inited = swift_initStackObject(v10, v24);
    *(_OWORD *)(inited + 16) = xmmword_1003B0F60;
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(kUTTypeRTF);
    *(_QWORD *)(inited + 32) = v12;
    *(_QWORD *)(inited + 40) = v13;
    v14 = static String.Encoding.utf8.getter(v12);
    v15 = String.Encoding.rawValue.getter(v14);
    (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
    v16 = objc_allocWithZone((Class)NSString);
    isa = Data._bridgeToObjectiveC()().super.isa;
    v18 = objc_msgSend(v16, "initWithData:encoding:", isa, v15);

    if (v18)
    {
      *(_QWORD *)(inited + 72) = sub_100018148(0, &qword_100481BC8, NSString_ptr);
      *(_QWORD *)(inited + 48) = v18;
      *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(kUTTypeUTF8PlainText);
      *(_QWORD *)(inited + 88) = v19;
      v20 = objc_msgSend(a1, "string");
      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
      v23 = v22;

      *(_QWORD *)(inited + 120) = &type metadata for String;
      *(_QWORD *)(inited + 96) = v21;
      *(_QWORD *)(inited + 104) = v23;
      sub_1000C7998(inited);
      sub_1000C8094(v8, v9);
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t sub_1000C97DC(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 16))(a2, a1);
  return a2;
}

uint64_t sub_1000C9818(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for AnyHashable - 1) + 8))();
  return a1;
}

void sub_1000C9850()
{
  void *v0;
  id v1;
  void *v2;
  double v3;
  CGFloat v4;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  id v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  id v16;
  void *v17;
  uint64_t v18;
  double Width;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  id v25;
  void *v26;
  double v27;
  double v28;
  uint64_t v29;
  CGRect v30;
  CGRect v31;

  v1 = objc_msgSend(v0, "superview");
  if (v1)
  {
    v2 = v1;
    objc_msgSend(v1, "frame");
    v4 = v3;
    v6 = v5;
    v8 = v7;
    v10 = v9;

    v11 = objc_msgSend(v0, "subviews");
    v12 = sub_10003ABF8();
    v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v11, v12);

    if ((unint64_t)v13 >> 62)
    {
      if (v13 < 0)
        v18 = v13;
      else
        v18 = v13 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v13);
      v14 = _CocoaArrayWrapper.endIndex.getter(v18);
      if (!v14)
        goto LABEL_15;
    }
    else
    {
      v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v13);
      if (!v14)
        goto LABEL_15;
    }
    if (v14 < 1)
    {
      __break(1u);
LABEL_29:
      __break(1u);
      return;
    }
    for (i = 0; i != v14; ++i)
    {
      if ((v13 & 0xC000000000000001) != 0)
        v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v13);
      else
        v16 = *(id *)(v13 + 8 * i + 32);
      v17 = v16;
      objc_msgSend(v16, "sizeToFit");

    }
LABEL_15:
    swift_bridgeObjectRelease_n(v13, 2);
    v30.origin.x = v4;
    v30.origin.y = v6;
    v30.size.width = v8;
    v30.size.height = v10;
    Width = CGRectGetWidth(v30);
    v31.origin.x = v4;
    v31.origin.y = v6;
    v31.size.width = v8;
    v31.size.height = v10;
    objc_msgSend(v0, "setFrame:", 0.0, 0.0, Width, CGRectGetHeight(v31) * 0.25);
    v20 = objc_msgSend(v0, "subviews");
    v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v20, v12);

    if ((unint64_t)v21 >> 62)
    {
      if (v21 < 0)
        v29 = v21;
      else
        v29 = v21 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v21);
      v22 = _CocoaArrayWrapper.endIndex.getter(v29);
      swift_bridgeObjectRelease(v21);
      if (v22)
      {
LABEL_17:
        if (v22 >= 1)
        {
          v23 = 0;
          v24 = 0.0;
          do
          {
            if ((v21 & 0xC000000000000001) != 0)
              v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v23, v21);
            else
              v25 = *(id *)(v21 + 8 * v23 + 32);
            v26 = v25;
            ++v23;
            objc_msgSend(v25, "frame");
            objc_msgSend(v26, "setFrame:");
            objc_msgSend(v26, "frame");
            v28 = v27;

            v24 = v24 + v28;
          }
          while (v22 != v23);
          goto LABEL_27;
        }
        goto LABEL_29;
      }
    }
    else
    {
      v22 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v22)
        goto LABEL_17;
    }
LABEL_27:
    swift_bridgeObjectRelease(v21);
  }
}

void sub_1000C9B20(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t inited;
  uint64_t v6;
  id v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t j;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  double *v22;
  uint64_t k;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t m;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  double *v35;
  uint64_t n;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t ii;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  double *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE v55[104];
  uint64_t v56[4];

  v3 = *(void **)(v1 + qword_100481CE8);
  v4 = sub_10000EDC8(&qword_100481E68);
  inited = swift_initStackObject(v4, v55);
  *(_OWORD *)(inited + 16) = xmmword_1003B0F50;
  v56[0] = (uint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v20 = a1;
    else
      v20 = a1 & 0xFFFFFFFFFFFFFF8;
    v21 = v3;
    swift_bridgeObjectRetain(a1);
    v6 = _CocoaArrayWrapper.endIndex.getter(v20);
    if (!v6)
      goto LABEL_19;
  }
  else
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v7 = v3;
    swift_bridgeObjectRetain(a1);
    if (!v6)
      goto LABEL_19;
  }
  if (v6 < 1)
  {
    __break(1u);
    __break(1u);
    __break(1u);
    return;
  }
  if ((a1 & 0xC000000000000001) != 0)
  {
    for (i = 0; i != v6; ++i)
    {
      v11 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
      v12 = type metadata accessor for WorldLine(0);
      v13 = swift_dynamicCastClass(v11, v12);
      if (v13)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
        v9 = *(_QWORD *)(v56[0] + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v9);
        v10 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, v11);
        specialized ContiguousArray._endMutation()(v10);
      }
      else
      {
        swift_unknownObjectRelease(v11);
      }
    }
  }
  else
  {
    v14 = type metadata accessor for WorldLine(0);
    for (j = 0; j != v6; ++j)
    {
      v16 = *(void **)(a1 + 8 * j + 32);
      if (swift_dynamicCastClass(v16, v14))
      {
        v17 = v16;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v17);
        v18 = *(_QWORD *)(v56[0] + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v18);
        v19 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v17);
        specialized ContiguousArray._endMutation()(v19);
      }
    }
  }
LABEL_19:
  swift_bridgeObjectRelease(a1);
  v22 = sub_10016B658(v56[0]);
  swift_release();
  *(_QWORD *)(inited + 32) = v22;
  *(_OWORD *)(inited + 40) = xmmword_1003B55F0;
  v56[0] = (uint64_t)_swiftEmptyArrayStorage;
  if (v6)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain(a1);
      for (k = 0; k != v6; ++k)
      {
        v26 = specialized _ArrayBuffer._getElementSlowPath(_:)(k, a1);
        v27 = type metadata accessor for WorldRectangle(0);
        v28 = swift_dynamicCastClass(v26, v27);
        if (v28)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v28);
          v24 = *(_QWORD *)(v56[0] + 16);
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v24);
          v25 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v24, v26);
          specialized ContiguousArray._endMutation()(v25);
        }
        else
        {
          swift_unknownObjectRelease(v26);
        }
      }
    }
    else
    {
      v29 = type metadata accessor for WorldRectangle(0);
      swift_bridgeObjectRetain(a1);
      for (m = 0; m != v6; ++m)
      {
        v31 = *(void **)(a1 + 8 * m + 32);
        if (swift_dynamicCastClass(v31, v29))
        {
          v32 = v31;
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v32);
          v33 = *(_QWORD *)(v56[0] + 16);
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v33);
          v34 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v33, v32);
          specialized ContiguousArray._endMutation()(v34);
        }
      }
    }
    swift_bridgeObjectRelease(a1);
  }
  v35 = sub_10016B658(v56[0]);
  swift_release();
  *(_QWORD *)(inited + 56) = v35;
  *(_OWORD *)(inited + 64) = xmmword_1003B5600;
  if ((objc_msgSend((id)objc_opt_self(Gestalt), "jasperAvailable") & 1) != 0)
  {
    v56[0] = (uint64_t)_swiftEmptyArrayStorage;
    if (v6)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain(a1);
        for (n = 0; n != v6; ++n)
        {
          v39 = specialized _ArrayBuffer._getElementSlowPath(_:)(n, a1);
          v40 = type metadata accessor for WorldPerson(0);
          v41 = swift_dynamicCastClass(v39, v40);
          if (v41)
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v41);
            v37 = *(_QWORD *)(v56[0] + 16);
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v37);
            v38 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v37, v39);
            specialized ContiguousArray._endMutation()(v38);
          }
          else
          {
            swift_unknownObjectRelease(v39);
          }
        }
      }
      else
      {
        v42 = type metadata accessor for WorldPerson(0);
        swift_bridgeObjectRetain(a1);
        for (ii = 0; ii != v6; ++ii)
        {
          v44 = *(void **)(a1 + 8 * ii + 32);
          if (swift_dynamicCastClass(v44, v42))
          {
            v45 = v44;
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v45);
            v46 = *(_QWORD *)(v56[0] + 16);
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v46);
            v47 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v46, v45);
            specialized ContiguousArray._endMutation()(v47);
          }
        }
      }
      swift_bridgeObjectRelease(a1);
    }
    v48 = sub_10016B658(v56[0]);
    swift_release();
    *(_QWORD *)(inited + 80) = v48;
    *(_OWORD *)(inited + 88) = xmmword_1003B5610;
  }
  else
  {
    *(_QWORD *)(inited + 80) = 0;
    *(_QWORD *)(inited + 88) = 0;
    *(_QWORD *)(inited + 96) = 0;
  }
  v49 = inited + 32;
  v50 = sub_1000CAC44(inited);
  v52 = v51;
  swift_setDeallocating(inited);
  v53 = *(_QWORD *)(inited + 16);
  v54 = sub_10000EDC8(&qword_100481E70);
  swift_arrayDestroy(v49, v53, v54);
  v56[3] = (uint64_t)&type metadata for String;
  v56[0] = v50;
  v56[1] = v52;
  sub_1000CA2B8(v3, (uint64_t)v56);

  sub_10000F690(v56);
}

uint64_t sub_1000CA088(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v7;
  uint64_t v8;
  uint64_t inited;
  id v10;
  uint64_t v11;
  double *v12;
  uint64_t v13;
  uint64_t v14;
  double *v15;
  uint64_t v16;
  double *v17;
  int64x2_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v26[104];
  _QWORD v27[4];

  v7 = *(void **)(v3 + qword_100481CF0);
  v8 = sub_10000EDC8(&qword_100481E68);
  inited = swift_initStackObject(v8, v26);
  *(_OWORD *)(inited + 16) = xmmword_1003B0F50;
  v10 = v7;
  v11 = swift_bridgeObjectRetain(a1);
  v12 = sub_10016B658(v11);
  swift_bridgeObjectRelease(a1);
  *(_QWORD *)(inited + 32) = v12;
  v13 = inited + 32;
  *(_OWORD *)(inited + 40) = xmmword_1003B55F0;
  v14 = swift_bridgeObjectRetain(a2);
  v15 = sub_10016B658(v14);
  swift_bridgeObjectRelease(a2);
  *(_QWORD *)(inited + 56) = v15;
  *(_OWORD *)(inited + 64) = xmmword_1003B5600;
  if (objc_msgSend((id)objc_opt_self(Gestalt), "jasperAvailable"))
  {
    v16 = swift_bridgeObjectRetain(a3);
    v17 = sub_10016B658(v16);
    swift_bridgeObjectRelease(a3);
    v18 = vdupq_n_s64(0xE28D80E286999FF0);
    v18.i64[0] = (uint64_t)v17;
    v19 = 0xAD00008FB8EF8099;
  }
  else
  {
    v19 = 0;
    v18 = 0uLL;
  }
  *(int64x2_t *)(inited + 80) = v18;
  *(_QWORD *)(inited + 96) = v19;
  v20 = sub_1000CAC44(inited);
  v22 = v21;
  swift_setDeallocating(inited);
  v23 = *(_QWORD *)(inited + 16);
  v24 = sub_10000EDC8(&qword_100481E70);
  swift_arrayDestroy(v13, v23, v24);
  v27[3] = &type metadata for String;
  v27[0] = v20;
  v27[1] = v22;
  sub_1000CA2B8(v10, (uint64_t)v27);

  return sub_10000F690(v27);
}

id sub_1000CA228()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.0, 0.0, 0.0, 0.5);
  qword_100481CB0 = (uint64_t)result;
  return result;
}

id sub_1000CA268()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 1.0, 1.0, 1.0, 1.0);
  qword_100481CB8 = (uint64_t)result;
  return result;
}

void sub_1000CA2A8()
{
  qword_100481CC0 = 0x402E000000000000;
}

id sub_1000CA2B8(void *a1, uint64_t a2)
{
  void *v2;
  unint64_t v4;
  NSString v5;
  id result;
  void *v7;
  double v8;
  double v9;
  id v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  unint64_t v16;

  v15 = 0;
  v16 = 0xE000000000000000;
  _print_unlocked<A, B>(_:_:)(a2, &v15, (char *)&type metadata for Any + 8, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v4 = v16;
  v5 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "setText:", v5, swift_bridgeObjectRelease(v4).n128_f64[0]);

  objc_msgSend(a1, "sizeToFit");
  sub_1000C9850();
  result = objc_msgSend(v2, "superview");
  if (result)
  {
    v7 = result;
    objc_msgSend(result, "frame");
    v9 = v8;

    v10 = objc_msgSend(a1, "frame");
    CGRect.withWidth(_:)(v10, v9, v11, v12, v13, v14);
    return objc_msgSend(a1, "setFrame:");
  }
  return result;
}

id sub_1000CA3DC(uint64_t a1, uint64_t a2)
{
  void *v2;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  objc_class *v13;
  char *v14;
  char *v15;
  id v16;
  NSString v17;
  uint64_t v18;
  id v19;
  id v20;
  id result;
  void *v22;
  id v23;
  NSString v24;
  objc_super v25;

  objc_msgSend(v2, "frame");
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v13 = (objc_class *)type metadata accessor for PrefixedLabel();
  v14 = (char *)objc_allocWithZone(v13);
  v15 = &v14[OBJC_IVAR____TtC7Measure13PrefixedLabel_prefix];
  *(_QWORD *)v15 = a1;
  *((_QWORD *)v15 + 1) = a2;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRelease(0xE000000000000000);
  v25.receiver = v14;
  v25.super_class = v13;
  v16 = objc_msgSendSuper2(&v25, "initWithFrame:", v6, v8, v10, v12);
  v17 = String._bridgeToObjectiveC()();
  objc_msgSend(v16, "setText:", v17);

  v18 = qword_10047A9D8;
  v19 = v16;
  if (v18 != -1)
    swift_once(&qword_10047A9D8, sub_1000CA268);
  objc_msgSend(v19, "setTextColor:", qword_100481CB8);

  v20 = v19;
  result = objc_msgSend(v20, "font");
  if (result)
  {
    v22 = result;
    if (qword_10047A9E0 != -1)
      swift_once(&qword_10047A9E0, sub_1000CA2A8);
    v23 = objc_msgSend(v22, "fontWithSize:", *(double *)&qword_100481CC0);

    objc_msgSend(v20, "setFont:", v23);
    v24 = String._bridgeToObjectiveC()();
    objc_msgSend(v20, "setText:", v24);

    objc_msgSend(v20, "setTextAlignment:", 0);
    objc_msgSend(v20, "setNumberOfLines:", 2);
    objc_msgSend(v20, "setLineBreakMode:", 1);
    objc_msgSend(v2, "addSubview:", v20);
    return v20;
  }
  else
  {
    __break(1u);
  }
  return result;
}

char *sub_1000CA638(double a1, double a2, double a3, double a4)
{
  char *v4;
  char *v5;
  objc_class *ObjectType;
  uint64_t v11;
  objc_class *v12;
  id v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  char *v24;
  id v25;
  void *v26;
  id v27;
  void *v28;
  id v29;
  void *v30;
  id v31;
  void *v32;
  id v33;
  void *v34;
  id v35;
  void *v36;
  id v37;
  void *v38;
  id v39;
  void *v40;
  objc_super v42;

  v5 = v4;
  ObjectType = (objc_class *)swift_getObjectType(v4);
  v11 = qword_100481CC8;
  v12 = (objc_class *)type metadata accessor for PrefixedLabel();
  v13 = objc_allocWithZone(v12);
  v14 = v4;
  *(_QWORD *)&v5[v11] = objc_msgSend(v13, "init");
  v15 = qword_100481CD0;
  *(_QWORD *)&v14[v15] = objc_msgSend(objc_allocWithZone(v12), "init");
  v16 = qword_100481CD8;
  *(_QWORD *)&v14[v16] = objc_msgSend(objc_allocWithZone(v12), "init");
  v17 = qword_100481CE0;
  *(_QWORD *)&v14[v17] = objc_msgSend(objc_allocWithZone(v12), "init");
  v18 = qword_100481CE8;
  *(_QWORD *)&v14[v18] = objc_msgSend(objc_allocWithZone(v12), "init");
  v19 = qword_100481CF0;
  *(_QWORD *)&v14[v19] = objc_msgSend(objc_allocWithZone(v12), "init");
  v20 = qword_100481CF8;
  *(_QWORD *)&v14[v20] = objc_msgSend(objc_allocWithZone(v12), "init");
  v21 = qword_100481D00;
  *(_QWORD *)&v14[v21] = objc_msgSend(objc_allocWithZone(v12), "init");

  v42.receiver = v14;
  v42.super_class = ObjectType;
  v22 = objc_msgSendSuper2(&v42, "initWithFrame:", a1, a2, a3, a4);
  v23 = qword_10047A9D0;
  v24 = (char *)v22;
  if (v23 != -1)
    swift_once(&qword_10047A9D0, sub_1000CA228);
  objc_msgSend(v24, "setBackgroundColor:", qword_100481CB0);
  objc_msgSend(v24, "setContentMode:", 9);
  objc_msgSend(v24, "setUserInteractionEnabled:", 0);
  v25 = sub_1000CA3DC(0x3A6E6F6973736553, 0xE900000000000020);
  v26 = *(void **)&v24[qword_100481CC8];
  *(_QWORD *)&v24[qword_100481CC8] = v25;

  v27 = sub_1000CA3DC(0x203A656369766544, 0xE800000000000000);
  v28 = *(void **)&v24[qword_100481CD0];
  *(_QWORD *)&v24[qword_100481CD0] = v27;

  v29 = sub_1000CA3DC(0x7461746E6569724FLL, 0xED0000203A6E6F69);
  v30 = *(void **)&v24[qword_100481CD8];
  *(_QWORD *)&v24[qword_100481CD8] = v29;

  v31 = sub_1000CA3DC(0x7461745320707041, 0xEB00000000203A65);
  v32 = *(void **)&v24[qword_100481CE0];
  *(_QWORD *)&v24[qword_100481CE0] = v31;

  v33 = sub_1000CA3DC(0x6C61736F706F7250, 0xEB00000000203A73);
  v34 = *(void **)&v24[qword_100481CE8];
  *(_QWORD *)&v24[qword_100481CE8] = v33;

  v35 = sub_1000CA3DC(0x6D6572757361654DLL, 0xEE00203A73746E65);
  v36 = *(void **)&v24[qword_100481CF0];
  *(_QWORD *)&v24[qword_100481CF0] = v35;

  v37 = sub_1000CA3DC(0xD000000000000012, 0x80000001003DDCD0);
  v38 = *(void **)&v24[qword_100481CF8];
  *(_QWORD *)&v24[qword_100481CF8] = v37;

  v39 = sub_1000CA3DC(0xD000000000000011, 0x80000001003DDCF0);
  v40 = *(void **)&v24[qword_100481D00];
  *(_QWORD *)&v24[qword_100481D00] = v39;

  return v24;
}

char *sub_1000CA9D0(double a1, double a2, double a3, double a4)
{
  return sub_1000CA638(a1, a2, a3, a4);
}

void sub_1000CA9F0(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;

  v3 = a3;
  sub_1000CADD8();
}

void sub_1000CAA14(void *a1)
{
  double v1;
  double v2;
  id v3;

  v3 = a1;
  objc_msgSend(v3, "frame");
  v2 = v1 * 0.5;
  objc_msgSend(v3, "frame");
  objc_msgSend(v3, "setFrame:", 0.0, 0.0, v2);
  sub_1000C9850();

}

void sub_1000CAA8C()
{
  uint64_t v0;

}

void sub_1000CAB18(uint64_t a1)
{

}

uint64_t type metadata accessor for DebugStateView(uint64_t a1)
{
  uint64_t result;

  result = qword_100481D30;
  if (!qword_100481D30)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DebugStateView);
  return result;
}

uint64_t sub_1000CABEC(uint64_t a1)
{
  _QWORD v2[8];

  v2[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[7] = (char *)&value witness table for Builtin.UnknownObject + 64;
  return swift_initClassMetadata2(a1, 256, 8, v2, a1 + 184);
}

uint64_t sub_1000CAC3C()
{
  return type metadata accessor for DebugStateView(0);
}

uint64_t sub_1000CAC44(uint64_t a1)
{
  uint64_t i;
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[2];

  v14 = *(_QWORD *)(a1 + 16);
  if (v14)
  {
    v13 = a1 + 32;
    swift_bridgeObjectRetain(a1);
    for (i = 0; i != v14; ++i)
    {
      v2 = (uint64_t *)(v13 + 24 * i);
      v3 = *v2;
      if (*v2)
      {
        v5 = v2[1];
        v4 = (void *)v2[2];
        v6 = *(_QWORD *)(v3 + 16);
        v15 = *v2;
        if (v6)
        {
          v7 = v3 + 32;
          sub_1000CAF28(v3, v5, (uint64_t)v4);
          swift_bridgeObjectRetain(v3);
          do
          {
            sub_10004F88C(v7, (uint64_t)v16);
            v8._countAndFlagsBits = v5;
            v8._object = v4;
            String.append(_:)(v8);
            v9._countAndFlagsBits = 32;
            v9._object = (void *)0xE100000000000000;
            String.append(_:)(v9);
            swift_bridgeObjectRetain(0xE000000000000000);
            v10._countAndFlagsBits = 32;
            v10._object = (void *)0xE100000000000000;
            String.append(_:)(v10);
            swift_bridgeObjectRelease(0xE000000000000000);
            swift_bridgeObjectRelease(0xE100000000000000);
            sub_100018180((uint64_t)v16);
            v7 += 32;
            --v6;
          }
          while (v6);
        }
        else
        {
          sub_1000CAF28(v3, v5, (uint64_t)v4);
          swift_bridgeObjectRetain(v3);
        }
        memset(v16, 0, sizeof(v16));
        swift_bridgeObjectRelease(v4);
        swift_bridgeObjectRelease_n(v15, 2);
      }
    }
    swift_bridgeObjectRelease(a1);
  }
  return 0;
}

void sub_1000CADD8()
{
  char *v0;
  uint64_t v1;
  objc_class *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = qword_100481CC8;
  v2 = (objc_class *)type metadata accessor for PrefixedLabel();
  *(_QWORD *)&v0[v1] = objc_msgSend(objc_allocWithZone(v2), "init");
  v3 = qword_100481CD0;
  *(_QWORD *)&v0[v3] = objc_msgSend(objc_allocWithZone(v2), "init");
  v4 = qword_100481CD8;
  *(_QWORD *)&v0[v4] = objc_msgSend(objc_allocWithZone(v2), "init");
  v5 = qword_100481CE0;
  *(_QWORD *)&v0[v5] = objc_msgSend(objc_allocWithZone(v2), "init");
  v6 = qword_100481CE8;
  *(_QWORD *)&v0[v6] = objc_msgSend(objc_allocWithZone(v2), "init");
  v7 = qword_100481CF0;
  *(_QWORD *)&v0[v7] = objc_msgSend(objc_allocWithZone(v2), "init");
  v8 = qword_100481CF8;
  *(_QWORD *)&v0[v8] = objc_msgSend(objc_allocWithZone(v2), "init");
  v9 = qword_100481D00;
  *(_QWORD *)&v0[v9] = objc_msgSend(objc_allocWithZone(v2), "init");

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001003D8190, "Measure/DebugStateView.swift", 28, 2, 112, 0);
  __break(1u);
}

uint64_t sub_1000CAF28(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    swift_bridgeObjectRetain(result);
    return swift_bridgeObjectRetain(a3);
  }
  return result;
}

id sub_1000CAF64()
{
  char *v0;
  uint64_t v1;
  id v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  char *v13;
  uint64_t v14;
  double v15;
  double v16;
  char *v17;
  char *v18;
  double *v19;
  id v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  objc_super v29;
  _QWORD aBlock[6];
  objc_super v31;

  v1 = OBJC_IVAR____TtC7Measure13CardTitleView_title;
  v2 = objc_allocWithZone((Class)UILabel);
  v3 = v0;
  *(_QWORD *)&v0[v1] = objc_msgSend(v2, "init");
  v4 = OBJC_IVAR____TtC7Measure13CardTitleView_grabber;
  *(_QWORD *)&v3[v4] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for GrabberView()), "init");
  v5 = OBJC_IVAR____TtC7Measure13CardTitleView_bottomView;
  *(_QWORD *)&v3[v5] = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
  v6 = OBJC_IVAR____TtC7Measure13CardTitleView_leftItem;
  v7 = objc_allocWithZone((Class)type metadata accessor for ShareButton());
  sub_100187D0C();
  *(_QWORD *)&v3[v6] = v8;
  v9 = OBJC_IVAR____TtC7Measure13CardTitleView_rightItem;
  v10 = (char *)objc_allocWithZone((Class)type metadata accessor for RoundCloseButton());
  v11 = OBJC_IVAR____TtC7Measure16RoundCloseButton_contentView;
  v12 = objc_allocWithZone((Class)UIView);
  v13 = v10;
  *(_QWORD *)&v10[v11] = objc_msgSend(v12, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v14 = OBJC_IVAR____TtC7Measure16RoundCloseButton_closeImageView;
  *(_QWORD *)&v13[v14] = objc_msgSend(objc_allocWithZone((Class)UIImageView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);

  if (qword_10047A9A8 != -1)
    swift_once(&qword_10047A9A8, sub_10009BFD0);
  v15 = *(double *)&qword_1004AF320;
  v16 = *(double *)&qword_1004AF328;
  v17 = &v13[OBJC_IVAR____TtC7Measure25SpatialPlatterTitleButton_touchDownCallback];
  *(_QWORD *)v17 = 0;
  *((_QWORD *)v17 + 1) = 0;
  v18 = &v13[OBJC_IVAR____TtC7Measure25SpatialPlatterTitleButton_touchUpCallback];
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = 0;
  *(_QWORD *)&v13[OBJC_IVAR____TtC7Measure25SpatialPlatterTitleButton_fadeOutAnimator] = 0;
  v19 = (double *)&v13[OBJC_IVAR____TtC7Measure25SpatialPlatterTitleButton_size];
  *v19 = v15;
  v19[1] = v16;
  v31.receiver = v13;
  v31.super_class = (Class)type metadata accessor for SpatialPlatterTitleButton();
  v20 = objc_msgSendSuper2(&v31, "initWithFrame:", 0.0, 0.0, v15, v16);
  objc_msgSend(v20, "addTarget:action:forControlEvents:", v20, "onButtonTouchDown", 1);
  objc_msgSend(v20, "addTarget:action:forControlEvents:", v20, "onButtonTouchUp", 360);

  v21 = swift_allocObject(&unk_100444B20, 24, 7);
  *(_QWORD *)(v21 + 16) = v20;
  aBlock[4] = sub_1000CCD68;
  aBlock[5] = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001994A4;
  aBlock[3] = &unk_100444B38;
  v22 = _Block_copy(aBlock);
  v23 = v20;
  objc_msgSend(v23, "setPointerStyleProvider:", v22, swift_release().n128_f64[0]);
  _Block_release(v22);

  sub_10009C2D0(0);
  sub_10009C6BC();

  *(_QWORD *)&v3[v9] = v23;
  v24 = OBJC_IVAR____TtC7Measure13CardTitleView_editableTitleView;
  *(_QWORD *)&v3[v24] = objc_msgSend(objc_allocWithZone((Class)UITextField), "init");
  v25 = OBJC_IVAR____TtC7Measure13CardTitleView_separator;
  v26 = type metadata accessor for SeparatorView();
  *(_QWORD *)&v3[v25] = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v26)), "init");

  v29.receiver = v3;
  v29.super_class = (Class)type metadata accessor for CardTitleView();
  v27 = objc_msgSendSuper2(&v29, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  sub_1000CB320();
  sub_1000CBAB4();

  return v27;
}

void sub_1000CB320()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  Swift::String v4;
  Swift::String v5;
  void *object;
  NSString v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  NSString v23;
  id v24;
  id v25;
  Swift::String v26;
  Swift::String v27;
  void *v28;
  NSString v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  char *v34;
  double v35;
  uint64_t v36;
  void *v37;
  char *v38;
  _QWORD aBlock[6];
  Swift::String v40;
  Swift::String v41;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC7Measure13CardTitleView_title);
  v2 = (void *)objc_opt_self(NSBundle);
  v3 = objc_msgSend(v2, "mainBundle");
  v40._object = (void *)0xE000000000000000;
  v4._object = (void *)0x80000001003DDDA0;
  v4._countAndFlagsBits = 0xD00000000000001DLL;
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v40._countAndFlagsBits = 0;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, (Swift::String_optional)0, (NSBundle)v3, v5, v40)._object;

  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "setText:", v7, swift_bridgeObjectRelease(object).n128_f64[0]);

  v8 = (void *)objc_opt_self(UIFont);
  v9 = objc_msgSend(v8, "_preferredFontForTextStyle:maximumContentSizeCategory:", UIFontTextStyleHeadline, UIContentSizeCategoryMedium);
  if (!v9)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v10 = v9;
  v11 = objc_msgSend(v9, "fontDescriptor");

  v12 = objc_msgSend(v11, "fontDescriptorWithSymbolicTraits:", 2);
  if (!v12)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v13 = objc_msgSend(v8, "fontWithDescriptor:size:", v12, 0.0);

  objc_msgSend(v1, "setFont:", v13);
  objc_msgSend(v1, "setTextAlignment:", 1);
  v14 = *(void **)&v38[OBJC_IVAR____TtC7Measure13CardTitleView_editableTitleView];
  v15 = objc_msgSend(v8, "_preferredFontForTextStyle:maximumContentSizeCategory:", UIFontTextStyleHeadline, UIContentSizeCategoryMedium);
  if (!v15)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v16 = v15;
  v17 = objc_msgSend(v15, "fontDescriptor");

  v18 = objc_msgSend(v17, "fontDescriptorWithSymbolicTraits:", 2);
  if (v18)
  {
    v19 = objc_msgSend(v8, "fontWithDescriptor:size:", v18, 0.0);

    objc_msgSend(v14, "setFont:", v19);
    v20 = objc_msgSend(v14, "layer");
    objc_msgSend(v20, "setMasksToBounds:", 1);

    v21 = objc_msgSend(v14, "layer");
    objc_msgSend(v21, "setCornerCurve:", kCACornerCurveContinuous);

    v22 = objc_msgSend(v14, "layer");
    if (qword_10047A7A8 != -1)
      swift_once(&qword_10047A7A8, sub_10000F078);
    objc_msgSend(v22, "setCornerRadius:", *(double *)&qword_1004AF0F8);

    objc_msgSend(v14, "setTextAlignment:", 1);
    v23 = String._bridgeToObjectiveC()();
    v24 = objc_msgSend((id)objc_opt_self(UIColor), "colorNamed:", v23);

    objc_msgSend(v14, "setBackgroundColor:", v24);
    objc_msgSend(v14, "setAlpha:", 0.0);
    objc_msgSend(v14, "setUserInteractionEnabled:", 0);
    v25 = objc_msgSend(v2, "mainBundle");
    v41._object = (void *)0xE000000000000000;
    v26._object = (void *)0x80000001003DDDA0;
    v26._countAndFlagsBits = 0xD00000000000001DLL;
    v27._countAndFlagsBits = 0;
    v27._object = (void *)0xE000000000000000;
    v41._countAndFlagsBits = 0;
    v28 = NSLocalizedString(_:tableName:bundle:value:comment:)(v26, (Swift::String_optional)0, (NSBundle)v25, v27, v41)._object;

    v29 = String._bridgeToObjectiveC()();
    objc_msgSend(v14, "setPlaceholder:", v29, swift_bridgeObjectRelease(v28).n128_f64[0]);

    v30 = objc_opt_self(UIView);
    v31 = swift_allocObject(&unk_100444A08, 24, 7);
    *(_QWORD *)(v31 + 16) = v38;
    v32 = swift_allocObject(&unk_100444A30, 32, 7);
    *(_QWORD *)(v32 + 16) = sub_1000CC988;
    *(_QWORD *)(v32 + 24) = v31;
    aBlock[4] = sub_100030C24;
    aBlock[5] = v32;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000DDB80;
    aBlock[3] = &unk_100444A48;
    v33 = _Block_copy(aBlock);
    v34 = v38;
    swift_retain();
    objc_msgSend((id)v30, "performWithoutAnimation:", v33, swift_release().n128_f64[0]);
    _Block_release(v33);
    LOBYTE(v30) = swift_isEscapingClosureAtFileLocation(v32, "", 103, 49, 40, 1);
    *(_QWORD *)&v35 = swift_release().n128_u64[0];
    if ((v30 & 1) == 0)
    {
      v36 = OBJC_IVAR____TtC7Measure13CardTitleView_bottomView;
      objc_msgSend(*(id *)&v34[OBJC_IVAR____TtC7Measure13CardTitleView_bottomView], "addSubview:", v1, v35);
      objc_msgSend(*(id *)&v34[v36], "addSubview:", v14);
      v37 = *(void **)&v34[OBJC_IVAR____TtC7Measure13CardTitleView_leftItem];
      objc_msgSend(*(id *)&v34[v36], "addSubview:", v37);
      objc_msgSend(*(id *)&v34[v36], "addSubview:", *(_QWORD *)&v34[OBJC_IVAR____TtC7Measure13CardTitleView_rightItem]);
      objc_msgSend(v34, "addSubview:", *(_QWORD *)&v34[v36]);
      objc_msgSend(v34, "addSubview:", *(_QWORD *)&v34[OBJC_IVAR____TtC7Measure13CardTitleView_grabber]);
      objc_msgSend(v34, "addSubview:", *(_QWORD *)&v34[OBJC_IVAR____TtC7Measure13CardTitleView_separator]);
      objc_msgSend(v37, "setEnabled:", 0);
      objc_msgSend(v37, "setHidden:", 1);
      swift_release();
      return;
    }
    __break(1u);
    goto LABEL_10;
  }
LABEL_13:
  __break(1u);
}

void sub_1000CB978(uint64_t a1)
{
  char *v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  char *v7;
  id v8;
  _QWORD v9[6];

  v1 = *(char **)(a1 + OBJC_IVAR____TtC7Measure13CardTitleView_separator);
  objc_msgSend(v1, "alpha");
  if (v2 != 0.0)
  {
    v3 = OBJC_IVAR____TtC7Measure13SeparatorView_targetAlpha;
    if (*(double *)&v1[OBJC_IVAR____TtC7Measure13SeparatorView_targetAlpha] != 0.0)
    {
      v4 = swift_allocObject(&unk_100444A80, 32, 7);
      *(_QWORD *)(v4 + 16) = v1;
      *(_QWORD *)(v4 + 24) = 0;
      v5 = objc_allocWithZone((Class)UIViewPropertyAnimator);
      v9[4] = sub_1000CC9DC;
      v9[5] = v4;
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 1107296256;
      v9[2] = sub_10003ECA0;
      v9[3] = &unk_100444A98;
      v6 = _Block_copy(v9);
      v7 = v1;
      swift_release();
      v8 = objc_msgSend(v5, "initWithDuration:controlPoint1:controlPoint2:animations:", v6, 0.065, 0.25, 0.1, 0.25, 1.0);
      _Block_release(v6);
      *(_QWORD *)&v1[v3] = 0;
      objc_msgSend(v8, "startAnimation");

    }
  }
}

void sub_1000CBAB4()
{
  char *v0;
  char *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  Class isa;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  Class v32;
  double v33;
  uint64_t v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  uint64_t v41;
  Class v42;
  uint64_t v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  uint64_t v50;
  Class v51;
  uint64_t v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  uint64_t v62;
  Class v63;
  uint64_t v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  uint64_t v76;
  Class v77;
  uint64_t v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  id v89;
  uint64_t v90;
  id v91;
  id v92;
  id v93;
  id v94;
  id v95;
  Class v96;

  v1 = v0;
  v2 = OBJC_IVAR____TtC7Measure13CardTitleView_bottomView;
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC7Measure13CardTitleView_bottomView], "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v93 = *(id *)&v0[OBJC_IVAR____TtC7Measure13CardTitleView_title];
  objc_msgSend(v93, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v91 = *(id *)&v0[OBJC_IVAR____TtC7Measure13CardTitleView_leftItem];
  objc_msgSend(v91, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v95 = *(id *)&v0[OBJC_IVAR____TtC7Measure13CardTitleView_rightItem];
  objc_msgSend(v95, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v3 = *(void **)&v0[OBJC_IVAR____TtC7Measure13CardTitleView_grabber];
  objc_msgSend(v3, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v92 = *(id *)&v0[OBJC_IVAR____TtC7Measure13CardTitleView_editableTitleView];
  objc_msgSend(v92, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v94 = *(id *)&v0[OBJC_IVAR____TtC7Measure13CardTitleView_separator];
  objc_msgSend(v94, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v4 = (void *)objc_opt_self(NSLayoutConstraint);
  v5 = sub_10000EDC8((uint64_t *)&unk_1004866D0);
  v6 = swift_allocObject(v5, 56, 7);
  *(_OWORD *)(v6 + 16) = xmmword_1003B5630;
  v7 = objc_msgSend(v3, "topAnchor");
  v8 = objc_msgSend(v1, "topAnchor");
  v9 = objc_msgSend(v7, "constraintEqualToAnchor:", v8);

  *(_QWORD *)(v6 + 32) = v9;
  v10 = objc_msgSend(v3, "leadingAnchor");
  v11 = objc_msgSend(v1, "leadingAnchor");
  v12 = objc_msgSend(v10, "constraintEqualToAnchor:", v11);

  *(_QWORD *)(v6 + 40) = v12;
  v13 = objc_msgSend(v3, "trailingAnchor");
  v14 = objc_msgSend(v1, "trailingAnchor");
  v15 = objc_msgSend(v13, "constraintEqualToAnchor:", v14);

  *(_QWORD *)(v6 + 48) = v15;
  specialized Array._endMutation()(v16);
  sub_10002277C();
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v4, "activateConstraints:", isa, swift_bridgeObjectRelease(v6).n128_f64[0]);

  v18 = swift_allocObject(v5, 64, 7);
  *(_OWORD *)(v18 + 16) = xmmword_1003B1410;
  v19 = objc_msgSend(*(id *)&v1[v2], "topAnchor");
  v20 = objc_msgSend(v3, "bottomAnchor");
  v21 = objc_msgSend(v19, "constraintEqualToAnchor:", v20);

  *(_QWORD *)(v18 + 32) = v21;
  v22 = objc_msgSend(*(id *)&v1[v2], "leadingAnchor");
  v23 = objc_msgSend(v1, "leadingAnchor");
  v24 = objc_msgSend(v22, "constraintEqualToAnchor:", v23);

  *(_QWORD *)(v18 + 40) = v24;
  v25 = objc_msgSend(*(id *)&v1[v2], "bottomAnchor");
  v26 = objc_msgSend(v1, "bottomAnchor");
  v27 = objc_msgSend(v25, "constraintEqualToAnchor:", v26);

  *(_QWORD *)(v18 + 48) = v27;
  v28 = objc_msgSend(*(id *)&v1[v2], "trailingAnchor");
  v29 = objc_msgSend(v1, "trailingAnchor");
  v30 = objc_msgSend(v28, "constraintEqualToAnchor:", v29);

  *(_QWORD *)(v18 + 56) = v30;
  specialized Array._endMutation()(v31);
  v32 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v4, "activateConstraints:", v32, swift_bridgeObjectRelease(v18).n128_f64[0]);

  if (qword_10047A758 != -1)
    swift_once(&qword_10047A758, sub_10000EF18);
  v33 = *(double *)&qword_1004AF090;
  v34 = swift_allocObject(v5, 48, 7);
  *(_OWORD *)(v34 + 16) = xmmword_1003B1460;
  v35 = objc_msgSend(v95, "centerXAnchor");
  v36 = objc_msgSend(*(id *)&v1[v2], "trailingAnchor");
  if (qword_10047A9B0 != -1)
    swift_once(&qword_10047A9B0, sub_10009C024);
  v37 = objc_msgSend(v35, "constraintEqualToAnchor:constant:", v36, -(v33 + *(double *)&xmmword_1004AF330 * 0.5));

  *(_QWORD *)(v34 + 32) = v37;
  v38 = objc_msgSend(v95, "centerYAnchor");
  v39 = objc_msgSend(*(id *)&v1[v2], "centerYAnchor");
  v40 = objc_msgSend(v38, "constraintEqualToAnchor:", v39);

  *(_QWORD *)(v34 + 40) = v40;
  specialized Array._endMutation()(v41);
  v42 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v4, "activateConstraints:", v42, swift_bridgeObjectRelease(v34).n128_f64[0]);

  v43 = swift_allocObject(v5, 48, 7);
  *(_OWORD *)(v43 + 16) = xmmword_1003B1460;
  v44 = objc_msgSend(v91, "centerXAnchor");
  v45 = objc_msgSend(*(id *)&v1[v2], "leadingAnchor");
  if (qword_10047AD70 != -1)
    swift_once(&qword_10047AD70, sub_100187C7C);
  v46 = objc_msgSend(v44, "constraintEqualToAnchor:constant:", v45, v33 + *(double *)&xmmword_1004AF880 * 0.5);

  *(_QWORD *)(v43 + 32) = v46;
  v47 = objc_msgSend(v91, "centerYAnchor");
  v48 = objc_msgSend(*(id *)&v1[v2], "centerYAnchor");
  v49 = objc_msgSend(v47, "constraintEqualToAnchor:", v48);

  *(_QWORD *)(v43 + 40) = v49;
  specialized Array._endMutation()(v50);
  v51 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v4, "activateConstraints:", v51, swift_bridgeObjectRelease(v43).n128_f64[0]);

  v52 = swift_allocObject(v5, 56, 7);
  *(_OWORD *)(v52 + 16) = xmmword_1003B5630;
  v53 = objc_msgSend(v93, "centerYAnchor");
  v54 = objc_msgSend(v91, "centerYAnchor");
  v55 = objc_msgSend(v53, "constraintEqualToAnchor:", v54);

  *(_QWORD *)(v52 + 32) = v55;
  v56 = objc_msgSend(v93, "leadingAnchor");
  v57 = objc_msgSend(v91, "trailingAnchor");
  v58 = objc_msgSend(v56, "constraintEqualToAnchor:constant:", v57, v33);

  *(_QWORD *)(v52 + 40) = v58;
  v59 = objc_msgSend(v93, "trailingAnchor");
  v60 = objc_msgSend(v95, "leadingAnchor");
  v61 = objc_msgSend(v59, "constraintEqualToAnchor:constant:", v60, -v33);

  *(_QWORD *)(v52 + 48) = v61;
  specialized Array._endMutation()(v62);
  v63 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v4, "activateConstraints:", v63, swift_bridgeObjectRelease(v52).n128_f64[0]);

  v64 = swift_allocObject(v5, 64, 7);
  *(_OWORD *)(v64 + 16) = xmmword_1003B1410;
  v65 = objc_msgSend(v92, "leadingAnchor");
  v66 = objc_msgSend(*(id *)&v1[v2], "leadingAnchor");
  if (qword_10047A788 != -1)
    swift_once(&qword_10047A788, sub_10000EF7C);
  v67 = objc_msgSend(v65, "constraintEqualToAnchor:constant:", v66, *(double *)&qword_1004AF0C0);

  *(_QWORD *)(v64 + 32) = v67;
  v68 = objc_msgSend(v92, "trailingAnchor");
  v69 = objc_msgSend(*(id *)&v1[v2], "trailingAnchor");
  v70 = objc_msgSend(v68, "constraintEqualToAnchor:constant:", v69, -*(double *)&qword_1004AF0C0);

  *(_QWORD *)(v64 + 40) = v70;
  v71 = objc_msgSend(v92, "centerYAnchor");
  v72 = objc_msgSend(v93, "centerYAnchor");
  v73 = objc_msgSend(v71, "constraintEqualToAnchor:constant:", v72, 1.0);

  *(_QWORD *)(v64 + 48) = v73;
  v74 = objc_msgSend(v92, "heightAnchor");
  if (qword_10047A780 != -1)
    swift_once(&qword_10047A780, sub_10000EF6C);
  v75 = objc_msgSend(v74, "constraintEqualToConstant:", *(double *)&qword_1004AF0B8);

  *(_QWORD *)(v64 + 56) = v75;
  specialized Array._endMutation()(v76);
  v77 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v4, "activateConstraints:", v77, swift_bridgeObjectRelease(v64).n128_f64[0]);

  v78 = swift_allocObject(v5, 64, 7);
  *(_OWORD *)(v78 + 16) = xmmword_1003B1410;
  v79 = objc_msgSend(v94, "bottomAnchor");
  v80 = objc_msgSend(v1, "bottomAnchor");
  v81 = objc_msgSend(v79, "constraintEqualToAnchor:", v80);

  *(_QWORD *)(v78 + 32) = v81;
  v82 = objc_msgSend(v94, "widthAnchor");
  v83 = objc_msgSend(v1, "widthAnchor");
  v84 = objc_msgSend(v82, "constraintEqualToAnchor:", v83);

  *(_QWORD *)(v78 + 40) = v84;
  v85 = objc_msgSend(v94, "heightAnchor");
  v86 = objc_msgSend(v85, "constraintEqualToConstant:", 0.5);

  *(_QWORD *)(v78 + 48) = v86;
  v87 = objc_msgSend(v94, "centerXAnchor");
  v88 = objc_msgSend(v1, "centerXAnchor");
  v89 = objc_msgSend(v87, "constraintEqualToAnchor:", v88);

  *(_QWORD *)(v78 + 56) = v89;
  specialized Array._endMutation()(v90);
  v96 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v4, "activateConstraints:", v96, swift_bridgeObjectRelease(v78).n128_f64[0]);

}

id sub_1000CC88C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CardTitleView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CardTitleView()
{
  return objc_opt_self(_TtC7Measure13CardTitleView);
}

uint64_t sub_1000CC964()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1000CC988()
{
  uint64_t v0;

  sub_1000CB978(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000CC990()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000CC9A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000CC9B0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000CC9B8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_1000CC9DC()
{
  uint64_t v0;

  return sub_10004FC14(*(void **)(v0 + 16));
}

void sub_1000CC9E8()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  id v11;
  char *v12;
  uint64_t v13;
  double v14;
  double v15;
  char *v16;
  char *v17;
  double *v18;
  id v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD aBlock[6];
  objc_super v27;

  v1 = v0;
  v2 = OBJC_IVAR____TtC7Measure13CardTitleView_title;
  *(_QWORD *)&v1[v2] = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  v3 = OBJC_IVAR____TtC7Measure13CardTitleView_grabber;
  *(_QWORD *)&v1[v3] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for GrabberView()), "init");
  v4 = OBJC_IVAR____TtC7Measure13CardTitleView_bottomView;
  *(_QWORD *)&v1[v4] = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
  v5 = OBJC_IVAR____TtC7Measure13CardTitleView_leftItem;
  v6 = objc_allocWithZone((Class)type metadata accessor for ShareButton());
  sub_100187D0C();
  *(_QWORD *)&v1[v5] = v7;
  v8 = OBJC_IVAR____TtC7Measure13CardTitleView_rightItem;
  v9 = (char *)objc_allocWithZone((Class)type metadata accessor for RoundCloseButton());
  v10 = OBJC_IVAR____TtC7Measure16RoundCloseButton_contentView;
  v11 = objc_allocWithZone((Class)UIView);
  v12 = v9;
  *(_QWORD *)&v9[v10] = objc_msgSend(v11, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v13 = OBJC_IVAR____TtC7Measure16RoundCloseButton_closeImageView;
  *(_QWORD *)&v12[v13] = objc_msgSend(objc_allocWithZone((Class)UIImageView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);

  if (qword_10047A9A8 != -1)
    swift_once(&qword_10047A9A8, sub_10009BFD0);
  v14 = *(double *)&qword_1004AF320;
  v15 = *(double *)&qword_1004AF328;
  v16 = &v12[OBJC_IVAR____TtC7Measure25SpatialPlatterTitleButton_touchDownCallback];
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = 0;
  v17 = &v12[OBJC_IVAR____TtC7Measure25SpatialPlatterTitleButton_touchUpCallback];
  *(_QWORD *)v17 = 0;
  *((_QWORD *)v17 + 1) = 0;
  *(_QWORD *)&v12[OBJC_IVAR____TtC7Measure25SpatialPlatterTitleButton_fadeOutAnimator] = 0;
  v18 = (double *)&v12[OBJC_IVAR____TtC7Measure25SpatialPlatterTitleButton_size];
  *v18 = v14;
  v18[1] = v15;
  v27.receiver = v12;
  v27.super_class = (Class)type metadata accessor for SpatialPlatterTitleButton();
  v19 = objc_msgSendSuper2(&v27, "initWithFrame:", 0.0, 0.0, v14, v15);
  objc_msgSend(v19, "addTarget:action:forControlEvents:", v19, "onButtonTouchDown", 1);
  objc_msgSend(v19, "addTarget:action:forControlEvents:", v19, "onButtonTouchUp", 360);

  v20 = swift_allocObject(&unk_100444AD0, 24, 7);
  *(_QWORD *)(v20 + 16) = v19;
  aBlock[4] = sub_1000CCD40;
  aBlock[5] = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001994A4;
  aBlock[3] = &unk_100444AE8;
  v21 = _Block_copy(aBlock);
  v22 = v19;
  objc_msgSend(v22, "setPointerStyleProvider:", v21, swift_release().n128_f64[0]);
  _Block_release(v21);

  sub_10009C2D0(0);
  sub_10009C6BC();

  *(_QWORD *)&v1[v8] = v22;
  v23 = OBJC_IVAR____TtC7Measure13CardTitleView_editableTitleView;
  *(_QWORD *)&v1[v23] = objc_msgSend(objc_allocWithZone((Class)UITextField), "init");
  v24 = OBJC_IVAR____TtC7Measure13CardTitleView_separator;
  v25 = type metadata accessor for SeparatorView();
  *(_QWORD *)&v1[v24] = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v25)), "init");

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001003D8190, "Measure/CardTitleView.swift", 27, 2, 29, 0);
  __break(1u);
}

uint64_t sub_1000CCD40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_10009C0A8(a1, a2, a3, *(void **)(v3 + 16));
}

uint64_t sub_1000CCD6C()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;

  sub_100018148(0, (unint64_t *)&qword_10047E560, UIDevice_ptr);
  result = static UIDevice.isIPad()();
  v1 = 480;
  if ((result & 1) != 0)
    v1 = 240;
  v2 = 420;
  if ((result & 1) != 0)
    v2 = 120;
  qword_1004AF360 = v1;
  *(_QWORD *)algn_1004AF368 = v2;
  return result;
}

CGAffineTransform *sub_1000CCDCC()
{
  uint64_t v0;
  uint64_t v1;
  CGAffineTransform *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  CGFloat v6;
  CGFloat v7;
  __int128 v8;
  __int128 v9;
  CGAffineTransform v10;
  CGAffineTransform v11;
  _BYTE v12[24];
  _BYTE v13[24];
  _OWORD v14[2];
  double v15;
  double v16;

  v0 = *(_QWORD *)MeasureCore.shared.unsafeMutableAddressor();
  swift_beginAccess(v0 + 112, v13, 0, 0);
  v1 = *(_QWORD *)(v0 + 112);
  result = (CGAffineTransform *)swift_retain(v1);
  if (v1)
  {
    swift_beginAccess(v1 + 208, v12, 0, 0);
    v3 = *(_QWORD *)(v1 + 208);
    swift_retain(v3);
    result = (CGAffineTransform *)swift_release(v1);
    if (v3)
    {
      v4 = ADProcessor.transformer.getter(result);
      v5 = swift_release(v3);
      Transformer.viewToCamera.getter(v14, v5);
      v8 = v14[1];
      v9 = v14[0];
      v6 = v15;
      v7 = v16;
      swift_release(v4);
      *(_OWORD *)&v11.a = v9;
      *(_OWORD *)&v11.c = v8;
      v11.tx = v6;
      v11.ty = v7;
      CGAffineTransformInvert(&v10, &v11);
      v11 = v10;
      result = CGAffineTransformScale(&v10, &v11, 3.0, 3.0);
      *(CGAffineTransform *)byte_1004AF370 = v10;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

CGFloat sub_1000CCEE8()
{
  CGFloat result;
  CGAffineTransform v1;
  CGAffineTransform v2;

  if (qword_10047A9E8 != -1)
    swift_once(&qword_10047A9E8, sub_1000CCD6C);
  v2.a = 1.0;
  v2.b = 0.0;
  v2.c = 0.0;
  v2.d = 1.0;
  v2.tx = 0.0;
  v2.ty = 0.0;
  CGAffineTransformTranslate(&v1, &v2, (double)(qword_1004AF360 / 3), (double)(*(_QWORD *)algn_1004AF368 / 3));
  result = v1.a;
  *(CGAffineTransform *)byte_1004AF3A0 = v1;
  return result;
}

CGFloat sub_1000CCF88()
{
  __int128 v0;
  __int128 v1;
  __int128 v2;
  CGFloat result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  CGAffineTransform v7;
  CGAffineTransform t2;
  CGAffineTransform t1;

  if (qword_10047A9F8 != -1)
    swift_once(&qword_10047A9F8, sub_1000CCEE8);
  v0 = *(_OWORD *)byte_1004AF3A0;
  v1 = *(_OWORD *)&byte_1004AF3A0[16];
  v2 = *(_OWORD *)&byte_1004AF3A0[32];
  if (qword_10047A9F0 != -1)
  {
    v5 = *(_OWORD *)&byte_1004AF3A0[16];
    v6 = *(_OWORD *)byte_1004AF3A0;
    v4 = *(_OWORD *)&byte_1004AF3A0[32];
    swift_once(&qword_10047A9F0, sub_1000CCDCC);
    v2 = v4;
    v1 = v5;
    v0 = v6;
  }
  *(_OWORD *)&t1.a = v0;
  *(_OWORD *)&t1.c = v1;
  *(_OWORD *)&t1.tx = v2;
  t2 = *(CGAffineTransform *)byte_1004AF370;
  CGAffineTransformConcat(&v7, &t1, &t2);
  result = v7.a;
  *(CGAffineTransform *)byte_1004AF3D0 = v7;
  return result;
}

VTPixelTransferSessionRef sub_1000CD058()
{
  uint64_t v0;
  OpaqueVTPixelTransferSession *v1;
  VTPixelTransferSessionRef v2;
  void *v3;
  OpaqueVTPixelTransferSession *v4;
  VTPixelTransferSessionRef v6;

  v1 = *(OpaqueVTPixelTransferSession **)(v0 + 16);
  v2 = v1;
  if (v1 == (OpaqueVTPixelTransferSession *)1)
  {
    v6 = 0;
    VTPixelTransferSessionCreate(0, &v6);
    v2 = v6;
    v3 = *(void **)(v0 + 16);
    *(_QWORD *)(v0 + 16) = v6;
    v4 = v2;
    sub_1000CE080(v3);
  }
  sub_1000CE170(v1);
  return v2;
}

_QWORD *sub_1000CD0F0(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  _QWORD v24[2];

  v2 = v1;
  v4 = sub_10000EDC8(&qword_100482090);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[11] = 0;
  v8 = v1 + 11;
  *(v8 - 9) = 1;
  *(v8 - 6) = 0;
  *(v8 - 5) = 0;
  *(v8 - 7) = 0;
  *((_BYTE *)v8 - 32) = 0;
  *(v8 - 2) = 0;
  *(v8 - 1) = _swiftEmptyArrayStorage;
  v8[1] = 0;
  result = MTLCreateSystemDefaultDevice();
  if (!result)
  {
    __break(1u);
    goto LABEL_7;
  }
  v10 = *v8;
  *v8 = result;
  swift_unknownObjectRelease(v10);
  result = (_QWORD *)*v8;
  if (!*v8)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  result = objc_msgSend(result, "newCommandQueue");
  if (!result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v11 = v2[12];
  v2[12] = result;
  result = (_QWORD *)swift_unknownObjectRelease(v11);
  v12 = v2[11];
  if (v12)
  {
    v13 = objc_allocWithZone((Class)MPSImageEDLines);
    LODWORD(v14) = 1036831949;
    LODWORD(v15) = 1035489772;
    LODWORD(v16) = 992204554;
    LODWORD(v17) = 2.0;
    v2[3] = objc_msgSend(v13, "initWithDevice:gaussianSigma:minLineLength:maxLines:detailRatio:gradientThreshold:lineErrorThreshold:mergeLocalityThreshold:", v12, 80, 70, 8, v17, v14, v15, v16);
    v2[8] = a1;
    v24[1] = a1;
    swift_retain(a1);
    swift_retain(v2);
    v18 = sub_10000EDC8(&qword_100482098);
    v19 = sub_100043310(&qword_1004820A0, &qword_100482098, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    Publisher.compactMap<A>(_:)(sub_1000CE090, v2, v18, &type metadata for DepthEdgeDetector.Output, v19);
    swift_release(v2);
    v20 = sub_100043310(&qword_1004820A8, &qword_100482090, (uint64_t)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
    v21 = Publisher.eraseToAnyPublisher()(v4, v20);
    v22 = swift_release(a1);
    (*(void (**)(char *, uint64_t, __n128))(v5 + 8))(v7, v4, v22);
    v23 = v2[9];
    v2[9] = v21;
    swift_release(v23);
    return v2;
  }
LABEL_9:
  __break(1u);
  return result;
}

id sub_1000CD30C@<X0>(_WORD *a1@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id result;
  void *v16;
  void *v17;
  unsigned int *v18;
  id v19;
  id v20;
  id v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  CGFloat v29;
  CGFloat v30;
  CGFloat x;
  CGFloat y;
  CGPoint v33;
  CGPoint v34;
  unint64_t v35;
  unint64_t v36;
  CGPoint *v37;
  void *v38;
  CGFloat v39;
  void *v40;
  CGFloat ty;
  __n128 v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  _QWORD *v50;
  uint64_t v51;
  _WORD *v52;
  id v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  double v63;
  uint64_t v64;
  _BYTE v65[520];
  char *v66;
  _QWORD *v67;
  _BYTE v68[520];
  _BYTE v69[512];
  CGAffineTransform v70[11];
  _BYTE v71[512];
  CGPoint v72;
  CGPoint v73;

  v3 = v2;
  v61 = a2;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v59 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  ariadne_trace(_:_:_:_:_:)(727056576, 0, 0, 0, 0);
  memcpy(v69, a1, sizeof(v69));
  memcpy(v71, a1, sizeof(v71));
  v12 = sub_10008F8B8();
  if (v12)
  {
    v13 = (void *)v12;
    if (qword_10047A9E8 != -1)
      goto LABEL_28;
    while (1)
    {
      sub_1000CDA4C(v13, qword_1004AF360, *(Swift::Int *)algn_1004AF368);
      v60 = v14;
      if (!v14)
      {

        goto LABEL_23;
      }
      result = (id)*((_QWORD *)v3 + 12);
      if (!result)
      {
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        return result;
      }
      result = objc_msgSend(result, "commandBuffer");
      v58 = result;
      if (!result)
        goto LABEL_30;
      result = (id)*((_QWORD *)v3 + 11);
      if (!result)
        goto LABEL_31;
      v54 = v9;
      v55 = v8;
      v56 = v6;
      v57 = v5;
      result = objc_msgSend(result, "newBufferWithLength:options:", 1128, 0);
      if (!result)
        goto LABEL_32;
      v16 = result;
      v17 = v58;
      objc_msgSend(*((id *)v3 + 3), "encodeToCommandBuffer:sourceTexture:destinationTexture:endpointBuffer:endpointOffset:", v58, v60, 0, result, 0);
      objc_msgSend(v17, "commit");
      objc_msgSend(v17, "waitUntilCompleted");
      v18 = (unsigned int *)objc_msgSend((id)swift_unknownObjectRetain(v16), "contents");
      v19 = v16;
      v5 = *v18;
      v20 = objc_msgSend((id)swift_unknownObjectRetain(v19), "contents");
      v21 = v19;
      v66 = (char *)_swiftEmptyArrayStorage;
      v53 = v21;
      if (!(_DWORD)v5)
        break;
      v52 = a1;
      v9 = (uint64_t)v20 + 4;
      if (qword_10047AA00 != -1)
        swift_once(&qword_10047AA00, sub_1000CCF88);
      v24 = 0;
      v25 = *(double *)byte_1004AF3D0;
      v26 = *(double *)&byte_1004AF3D0[8];
      v27 = *(double *)&byte_1004AF3D0[16];
      v28 = *(double *)&byte_1004AF3D0[24];
      v29 = *(double *)&byte_1004AF3D0[32];
      v30 = *(double *)&byte_1004AF3D0[40];
      v6 = 0x7FFFFFFFFFFFFFFFLL;
      v3 = (char *)_swiftEmptyArrayStorage;
      v62 = *(double *)&byte_1004AF3D0[8];
      v63 = *(double *)byte_1004AF3D0;
      while (1)
      {
        a1 = (_WORD *)(v9 + 2 * (_QWORD)v24);
        v8 = __OFADD__(v24, 4) ? (char *)0x7FFFFFFFFFFFFFFFLL : v24 + 4;
        LOWORD(v22) = *a1;
        v72.x = (double)v22;
        LOWORD(v23) = a1[1];
        v72.y = (double)v23;
        v70[0].a = v25;
        v70[0].b = v26;
        v70[0].c = v27;
        v70[0].d = v28;
        v70[0].tx = v29;
        v70[0].ty = v30;
        v33 = CGPointApplyAffineTransform(v72, v70);
        y = v33.y;
        x = v33.x;
        if (__OFADD__(v24, 3))
          break;
        LOWORD(x) = a1[2];
        v73.x = (double)*(unint64_t *)&x;
        LOWORD(y) = *(_WORD *)(v9 + 2 * (_QWORD)(v24 + 3));
        v73.y = (double)*(unint64_t *)&y;
        v70[0].a = v25;
        v70[0].b = v26;
        v70[0].c = v27;
        v70[0].d = v28;
        v70[0].tx = v29;
        v70[0].ty = v30;
        v34 = CGPointApplyAffineTransform(v73, v70);
        if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
          v3 = sub_10005FDEC(0, *((_QWORD *)v3 + 2) + 1, 1, v3);
        v36 = *((_QWORD *)v3 + 2);
        v35 = *((_QWORD *)v3 + 3);
        if (v36 >= v35 >> 1)
          v3 = sub_10005FDEC((char *)(v35 > 1), v36 + 1, 1, v3);
        *((_QWORD *)v3 + 2) = v36 + 1;
        v37 = (CGPoint *)&v3[32 * v36];
        v37[2] = v33;
        v37[3] = v34;
        v24 = v8;
        v26 = v62;
        v25 = v63;
        if ((uint64_t)v8 >= v5)
        {
          v66 = v3;
          a1 = v52;
          goto LABEL_25;
        }
      }
      __break(1u);
LABEL_28:
      swift_once(&qword_10047A9E8, sub_1000CCD6C);
    }
    v3 = (char *)_swiftEmptyArrayStorage;
LABEL_25:
    sub_100018148(0, (unint64_t *)&qword_10047FB70, OS_dispatch_queue_ptr);
    v38 = (void *)static OS_dispatch_queue.main.getter();
    v39 = COERCE_DOUBLE(swift_allocObject(&unk_100444C70, 24, 7));
    *(_QWORD *)(*(_QWORD *)&v39 + 16) = v3;
    *(_QWORD *)&v70[0].tx = sub_1000CE150;
    v70[0].ty = v39;
    *(_QWORD *)&v70[0].a = _NSConcreteStackBlock;
    *(_QWORD *)&v70[0].b = 1107296256;
    *(_QWORD *)&v70[0].c = sub_10003ECA0;
    *(_QWORD *)&v70[0].d = &unk_100444C88;
    v40 = _Block_copy(v70);
    ty = v70[0].ty;
    swift_bridgeObjectRetain(v3);
    v42 = swift_release(*(_QWORD *)&ty);
    static DispatchQoS.unspecified.getter(v42);
    *(_QWORD *)&v70[0].a = _swiftEmptyArrayStorage;
    v43 = sub_100030E1C();
    v44 = sub_10000EDC8((uint64_t *)&unk_10047E430);
    v45 = sub_100043310((unint64_t *)&qword_10047D800, (uint64_t *)&unk_10047E430, (uint64_t)&protocol conformance descriptor for [A]);
    v46 = v55;
    v47 = v44;
    v48 = v57;
    dispatch thunk of SetAlgebra.init<A>(_:)(v70, v47, v45, v57, v43);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v46, v40);
    _Block_release(v40);

    (*(void (**)(char *, uint64_t))(v56 + 8))(v46, v48);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v11, v54);
    swift_beginAccess(&v66, &v64, 0, 0);
    v49 = v66;
    v50 = sub_10016B888((uint64_t)v66);
    swift_unknownObjectRelease(v58);
    swift_unknownObjectRelease(v60);
    swift_bridgeObjectRelease(v49);
    swift_unknownObjectRelease(v53);

    memcpy(&v65[8], v71, 0x200uLL);
    v67 = v50;
    memcpy(v68, v65, sizeof(v68));
    nullsub_1(&v67);
    sub_1000471E8((uint64_t)a1);
  }
  else
  {
LABEL_23:
    sub_1000CE124(&v67);
  }
  ariadne_trace(_:_:_:_:_:)(727056580, 0, 0, 0, 0);
  sub_1000CE0DC((uint64_t)&v67, (uint64_t)v70);
  return (id)sub_1000CE0DC((uint64_t)v70, v61);
}

void sub_1000CD914(__CVBuffer *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  Swift::UInt32 PixelFormatType;
  CVBufferRef_optional v6;
  void *v7;
  void *v8;
  __CVBuffer *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  __IOSurface *v13;
  size_t Width;
  __IOSurface *v15;
  size_t Height;
  void *v17;
  size_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;

  v3 = (uint64_t)CVPixelBufferGetWidth(a1) / 3;
  v4 = (uint64_t)CVPixelBufferGetHeight(a1) / 3;
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  v6.value = makePixelBuffer(width:height:pixelFormat:)(v3, v4, PixelFormatType).value;
  v7 = *(void **)(v1 + 32);
  *(CVBufferRef_optional *)(v1 + 32) = v6;

  v8 = *(void **)(v1 + 32);
  if (!v8)
  {
    __break(1u);
    goto LABEL_9;
  }
  v9 = v8;
  v10 = (unint64_t)makeIOSurfaceOfFirstPlane(from:)(v9);

  v11 = *(void **)(v1 + 40);
  *(_QWORD *)(v1 + 40) = v10;

  v12 = *(_QWORD *)(v1 + 88);
  if (!v12)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v13 = *(__IOSurface **)(v1 + 40);
  if (!v13)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  swift_unknownObjectRetain(*(_QWORD *)(v1 + 88));
  Width = IOSurfaceGetWidth(v13);
  v15 = *(__IOSurface **)(v1 + 40);
  if (!v15)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  Height = IOSurfaceGetHeight(v15);
  v17 = *(void **)(v1 + 40);
  if (!v17)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v18 = Height;
  v19 = v17;
  v20 = makeIOSurfaceTexture(device:width:height:pixelFormat:iosurface:)(v12, Width, v18, 10, v19);
  swift_unknownObjectRelease(v12);

  if (v20)
  {
    v21 = *(_QWORD *)(v1 + 48);
    *(_QWORD *)(v1 + 48) = v20;
    swift_unknownObjectRelease(v21);
    *(_BYTE *)(v1 + 56) = 1;
    return;
  }
LABEL_13:
  __break(1u);
}

void sub_1000CDA4C(void *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v3;
  uint64_t v4;
  id v7;
  Swift::tuple_width_Int_height_Int v8;
  CVBufferRef_optional v9;
  OpaqueVTPixelTransferSession *v10;
  __CVBuffer *v11;
  OpaqueVTPixelTransferSession *v12;
  void *v13;
  void *v14;
  objc_class *v15;
  id v16;
  IOSurface v17;
  Swift::Int v18;

  v4 = v3;
  v7 = objc_msgSend(a1, "capturedImage");
  v8.width = a2;
  v8.height = a3;
  v9.value = CVBufferRef.copiedPlane(_:with:format:)(0, v8, 0x4C303038u).value;

  if (v9.value)
  {
    if ((*(_BYTE *)(v4 + 56) & 1) == 0)
      sub_1000CD914(v9.value);
    v10 = sub_1000CD058();
    if (v10)
    {
      v11 = *(__CVBuffer **)(v4 + 32);
      if (v11)
      {
        v12 = v10;
        VTPixelTransferSessionTransferImage(v10, v9.value, v11);

        v13 = *(void **)(v4 + 40);
        if (v13)
        {
          v14 = *(void **)(v4 + 32);
          if (v14)
          {
            v15 = v13;
            v16 = v14;
            v17.super.isa = v15;
            v17._impl = v16;
            fillIOSurface(_:with:fromPlaneIndex:)(v17, 0, v18);

            swift_unknownObjectRetain(*(_QWORD *)(v4 + 48));
            return;
          }
          goto LABEL_13;
        }
LABEL_12:
        __break(1u);
LABEL_13:
        __break(1u);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_12;
  }
}

uint64_t sub_1000CDB4C(uint64_t result)
{
  uint64_t v1;
  void *v2;
  id v3;
  _QWORD *v4;

  v1 = result;
  if (qword_10047A930 != -1)
    result = swift_once(&qword_10047A930, sub_100083368);
  if (qword_1004AF238)
  {
    v2 = *(void **)(qword_1004AF238 + 72);
    if (v2)
    {
      v3 = v2;
      v4 = sub_10016B89C(v1);
      sub_10007B454((uint64_t)v4);

      return swift_bridgeObjectRelease(v4);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000CDBD4()
{
  uint64_t v0;

  sub_1000CE080(*(id *)(v0 + 16));

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 48));
  swift_release();
  swift_release();
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 88));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 96));
  return v0;
}

uint64_t sub_1000CDC38()
{
  uint64_t v0;

  sub_1000CDBD4();
  return swift_deallocClassInstance(v0, 104, 7);
}

uint64_t type metadata accessor for DepthEdgeDetector()
{
  return objc_opt_self(_TtC7Measure17DepthEdgeDetector);
}

uint64_t destroy for DepthEdgeDetector.Output(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return swift_release(a1[4]);
}

uint64_t initializeWithCopy for DepthEdgeDetector.Output(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  v4 = a2[4];
  *(_QWORD *)(a1 + 32) = v4;
  memcpy((void *)(a1 + 48), a2 + 6, 0x1E0uLL);
  swift_bridgeObjectRetain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t *assignWithCopy for DepthEdgeDetector.Output(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  a1[3] = a2[3];
  v6 = a1[4];
  v7 = a2[4];
  a1[4] = v7;
  swift_retain(v7);
  swift_release(v6);
  a1[6] = a2[6];
  *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
  *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
  *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
  *((_OWORD *)a1 + 7) = *((_OWORD *)a2 + 7);
  *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
  *((_OWORD *)a1 + 9) = *((_OWORD *)a2 + 9);
  *((_OWORD *)a1 + 10) = *((_OWORD *)a2 + 10);
  *((_OWORD *)a1 + 11) = *((_OWORD *)a2 + 11);
  *((_OWORD *)a1 + 12) = *((_OWORD *)a2 + 12);
  *((_OWORD *)a1 + 13) = *((_OWORD *)a2 + 13);
  *((_OWORD *)a1 + 14) = *((_OWORD *)a2 + 14);
  *((_OWORD *)a1 + 15) = *((_OWORD *)a2 + 15);
  *((_OWORD *)a1 + 16) = *((_OWORD *)a2 + 16);
  *((_OWORD *)a1 + 17) = *((_OWORD *)a2 + 17);
  *((_OWORD *)a1 + 18) = *((_OWORD *)a2 + 18);
  *((_OWORD *)a1 + 19) = *((_OWORD *)a2 + 19);
  a1[40] = a2[40];
  a1[41] = a2[41];
  a1[42] = a2[42];
  a1[43] = a2[43];
  *((_OWORD *)a1 + 22) = *((_OWORD *)a2 + 22);
  *((_OWORD *)a1 + 23) = *((_OWORD *)a2 + 23);
  *((_OWORD *)a1 + 24) = *((_OWORD *)a2 + 24);
  *((_OWORD *)a1 + 25) = *((_OWORD *)a2 + 25);
  *((_DWORD *)a1 + 104) = *((_DWORD *)a2 + 104);
  *((_DWORD *)a1 + 105) = *((_DWORD *)a2 + 105);
  *((_OWORD *)a1 + 27) = *((_OWORD *)a2 + 27);
  *((_OWORD *)a1 + 28) = *((_OWORD *)a2 + 28);
  *((_OWORD *)a1 + 29) = *((_OWORD *)a2 + 29);
  *((_OWORD *)a1 + 30) = *((_OWORD *)a2 + 30);
  *((_OWORD *)a1 + 31) = *((_OWORD *)a2 + 31);
  *((_OWORD *)a1 + 32) = *((_OWORD *)a2 + 32);
  return a1;
}

void *initializeWithTake for DepthEdgeDetector.Output(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x210uLL);
}

uint64_t *assignWithTake for DepthEdgeDetector.Output(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  a1[2] = a2[2];
  a1[3] = a2[3];
  v5 = a1[4];
  a1[4] = a2[4];
  swift_release(v5);
  a1[6] = a2[6];
  v6 = *((_OWORD *)a2 + 5);
  *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
  *((_OWORD *)a1 + 5) = v6;
  v7 = *((_OWORD *)a2 + 7);
  *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
  *((_OWORD *)a1 + 7) = v7;
  v8 = *((_OWORD *)a2 + 9);
  *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
  *((_OWORD *)a1 + 9) = v8;
  v9 = *((_OWORD *)a2 + 11);
  *((_OWORD *)a1 + 10) = *((_OWORD *)a2 + 10);
  *((_OWORD *)a1 + 11) = v9;
  v10 = *((_OWORD *)a2 + 13);
  *((_OWORD *)a1 + 12) = *((_OWORD *)a2 + 12);
  *((_OWORD *)a1 + 13) = v10;
  v11 = *((_OWORD *)a2 + 15);
  *((_OWORD *)a1 + 14) = *((_OWORD *)a2 + 14);
  *((_OWORD *)a1 + 15) = v11;
  v12 = *((_OWORD *)a2 + 17);
  *((_OWORD *)a1 + 16) = *((_OWORD *)a2 + 16);
  *((_OWORD *)a1 + 17) = v12;
  v13 = *((_OWORD *)a2 + 19);
  *((_OWORD *)a1 + 18) = *((_OWORD *)a2 + 18);
  *((_OWORD *)a1 + 19) = v13;
  v14 = *((_OWORD *)a2 + 21);
  *((_OWORD *)a1 + 20) = *((_OWORD *)a2 + 20);
  *((_OWORD *)a1 + 21) = v14;
  v15 = *((_OWORD *)a2 + 23);
  *((_OWORD *)a1 + 22) = *((_OWORD *)a2 + 22);
  *((_OWORD *)a1 + 23) = v15;
  v16 = *((_OWORD *)a2 + 25);
  *((_OWORD *)a1 + 24) = *((_OWORD *)a2 + 24);
  *((_OWORD *)a1 + 25) = v16;
  a1[52] = a2[52];
  v17 = *((_OWORD *)a2 + 28);
  *((_OWORD *)a1 + 27) = *((_OWORD *)a2 + 27);
  *((_OWORD *)a1 + 28) = v17;
  v18 = *((_OWORD *)a2 + 30);
  *((_OWORD *)a1 + 29) = *((_OWORD *)a2 + 29);
  *((_OWORD *)a1 + 30) = v18;
  v19 = *((_OWORD *)a2 + 32);
  *((_OWORD *)a1 + 31) = *((_OWORD *)a2 + 31);
  *((_OWORD *)a1 + 32) = v19;
  return a1;
}

uint64_t getEnumTagSinglePayload for DepthEdgeDetector.Output(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 528))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DepthEdgeDetector.Output(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 520) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 528) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 528) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DepthEdgeDetector.Output()
{
  return &type metadata for DepthEdgeDetector.Output;
}

ValueMetadata *type metadata accessor for DepthEdgeDetector.Input()
{
  return &type metadata for DepthEdgeDetector.Input;
}

void sub_1000CE080(id a1)
{
  if (a1 != (id)1)

}

uint64_t sub_1000CE090@<X0>(void *__src@<X0>, uint64_t a2@<X8>)
{
  _BYTE v4[528];
  _WORD __dst[264];

  memcpy(__dst, __src, 0x200uLL);
  sub_1000CD30C(__dst, (uint64_t)v4);
  return sub_1000CE0DC((uint64_t)v4, a2);
}

uint64_t sub_1000CE0DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000EDC8(&qword_1004820B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1000CE124(void *a1)
{
  bzero(a1, 0x210uLL);
}

uint64_t sub_1000CE12C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000CE150()
{
  uint64_t v0;

  return sub_1000CDB4C(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000CE158(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000CE168(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

id sub_1000CE170(id result)
{
  if (result != (id)1)
    return result;
  return result;
}

double sub_1000CE180()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  void *v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double result;
  _QWORD v21[2];
  uint64_t v22;
  uint64_t v23;
  _QWORD aBlock[6];
  double *v25;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v23 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for DispatchQoS(0);
  v4 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Report(0);
  __chkstk_darwin(v7);
  v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000CE510();
  sub_1000CF704(v0 + OBJC_IVAR____TtC7Measure15ResultsReporter_report, (uint64_t)v9);
  v10 = sub_10000C4B0(&qword_100482228, type metadata accessor for Report, (uint64_t)&unk_1003B5730);
  v11 = dispatch thunk of JSONEncoder.encode<A>(_:)(v9, v7, v10);
  v13 = v12;
  sub_1000CF748((uint64_t)v9);
  swift_release();
  v21[1] = *(_QWORD *)(v0 + OBJC_IVAR____TtC7Measure15ResultsReporter_ioQueue);
  v14 = (_QWORD *)swift_allocObject(&unk_100444CC0, 40, 7);
  v14[2] = v11;
  v14[3] = v13;
  v14[4] = v0;
  aBlock[4] = sub_1000CF7B0;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003ECA0;
  aBlock[3] = &unk_100444CD8;
  v15 = _Block_copy(aBlock);
  sub_10003649C(v11, v13);
  v16 = swift_retain();
  static DispatchQoS.unspecified.getter(v16);
  v25 = _swiftEmptyArrayStorage;
  v17 = sub_10000C4B0((unint64_t *)&qword_10047D7F0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v18 = sub_10000EDC8((uint64_t *)&unk_10047E430);
  v19 = sub_100036038((unint64_t *)&qword_10047D800, (uint64_t *)&unk_10047E430);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v18, v19, v1, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v6, v3, v15);
  _Block_release(v15);
  sub_100036300(v11, v13);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v3, v1);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v22);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t sub_1000CE510()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = v0;
  type metadata accessor for JSONEncoder.OutputFormatting(0);
  __chkstk_darwin();
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = OBJC_IVAR____TtC7Measure15ResultsReporter____lazy_storage___encoder;
  v5 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7Measure15ResultsReporter____lazy_storage___encoder);
  if (v5)
  {
    v6 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7Measure15ResultsReporter____lazy_storage___encoder);
  }
  else
  {
    v7 = type metadata accessor for JSONEncoder();
    swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    v6 = JSONEncoder.init()();
    static JSONEncoder.OutputFormatting.prettyPrinted.getter();
    dispatch thunk of JSONEncoder.outputFormatting.setter(v3);
    v8 = *(_QWORD *)(v1 + v4);
    *(_QWORD *)(v1 + v4) = v6;
    swift_retain(v6);
    swift_release(v8);
    v5 = 0;
  }
  swift_retain(v5);
  return v6;
}

uint64_t sub_1000CE5D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  Swift::String v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;

  v2 = v1;
  v41 = a1;
  v3 = type metadata accessor for DispatchQoS.QoSClass(0);
  v39 = *(_QWORD *)(v3 - 8);
  v40 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v36 = *(_QWORD *)(v6 - 8);
  v37 = v6;
  __chkstk_darwin(v6);
  v38 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = v1 + OBJC_IVAR____TtC7Measure15ResultsReporter_report;
  Date.init()(v12);
  *(_QWORD *)(v15 + *(int *)(type metadata accessor for Report(0) + 20)) = _swiftEmptyArrayStorage;
  v35 = OBJC_IVAR____TtC7Measure15ResultsReporter_ioQueue;
  v34 = sub_100049274();
  v42 = 0;
  v43 = 0xE000000000000000;
  _StringGuts.grow(_:)(26);
  v16 = v43;
  if (qword_10047A970 != -1)
    swift_once(&qword_10047A970, sub_10009581C);
  v18 = qword_1004AF2C8;
  v17 = unk_1004AF2D0;
  swift_bridgeObjectRetain(unk_1004AF2D0);
  swift_bridgeObjectRelease(v16);
  v42 = (_QWORD *)v18;
  v43 = v17;
  v19._object = (void *)0x80000001003DDFD0;
  v19._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v19);
  v20 = v42;
  v33 = v43;
  static DispatchQoS.background.getter();
  v42 = _swiftEmptyArrayStorage;
  v21 = sub_10000C4B0((unint64_t *)&qword_10047E690, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v22 = sub_10000EDC8(&qword_100486EF0);
  v23 = sub_100036038((unint64_t *)&qword_10047E6A0, &qword_100486EF0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v42, v22, v23, v8, v21);
  v24 = v38;
  (*(void (**)(char *, _QWORD, uint64_t))(v36 + 104))(v38, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v37);
  v26 = v39;
  v25 = v40;
  (*(void (**)(char *, _QWORD, uint64_t))(v39 + 104))(v5, enum case for DispatchQoS.QoSClass.background(_:), v40);
  v27 = static OS_dispatch_queue.global(qos:)(v5);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v5, v25);
  v28 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v20, v33, v14, v10, v24, v27);
  *(_QWORD *)(v2 + v35) = v28;
  *(_QWORD *)(v2 + OBJC_IVAR____TtC7Measure15ResultsReporter____lazy_storage___encoder) = 0;
  v29 = v2 + OBJC_IVAR____TtC7Measure15ResultsReporter_file;
  v30 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v29, v41, v30);
  return v2;
}

uint64_t sub_1000CE8F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Data.write(to:options:)(a3 + OBJC_IVAR____TtC7Measure15ResultsReporter_file, 1, a1, a2);
}

uint64_t sub_1000CEA20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC7Measure15ResultsReporter_file;
  v2 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1000CF748(v0 + OBJC_IVAR____TtC7Measure15ResultsReporter_report);

  swift_release();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000CEAA0()
{
  return type metadata accessor for ResultsReporter(0);
}

uint64_t type metadata accessor for ResultsReporter(uint64_t a1)
{
  return sub_1000CEB70(a1, qword_1004820F8, (uint64_t)&nominal type descriptor for ResultsReporter);
}

uint64_t sub_1000CEABC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[4];

  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for Report(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      v5[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v5[3] = "\b";
      result = swift_updateClassMetadata2(a1, 256, 4, v5, a1 + 80);
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for Report(uint64_t a1)
{
  return sub_1000CEB70(a1, qword_1004821F0, (uint64_t)&nominal type descriptor for Report);
}

uint64_t sub_1000CEB70(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

uint64_t *sub_1000CEBA4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v10);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(uint64_t *)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = v9;
    swift_bridgeObjectRetain(v9);
  }
  return a1;
}

uint64_t sub_1000CEC30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20)));
}

uint64_t sub_1000CEC74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t sub_1000CECD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a2 + v7);
  v9 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t sub_1000CED40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1000CED9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t sub_1000CEE00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000CEE0C);
}

uint64_t sub_1000CEE0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1000CEE88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000CEE94);
}

uint64_t sub_1000CEE94(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_1000CEF0C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

double sub_1000CEF80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v5;
  Class isa;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double result;
  uint64_t v16;
  uint64_t v17;
  _WORD v18[8];

  v0 = type metadata accessor for Date(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10047A980 != -1)
    v2 = swift_once(&qword_10047A980, sub_1000959A4);
  v5 = (void *)qword_1004AF2F0;
  Date.init()(v2);
  isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  v7 = objc_msgSend(v5, "stringFromDate:", isa);

  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v10 = v9;

  strcpy((char *)v18, ".measurements");
  v18[7] = -4864;
  v16 = v8;
  v17 = v10;
  swift_bridgeObjectRetain(v10);
  v16 = String.init<A>(_:)(&v16, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  v17 = v11;
  String.append<A>(contentsOf:)(v18, &type metadata for String, &protocol witness table for String);
  swift_bridgeObjectRelease(v10);
  v12 = v16;
  v13 = v17;
  if (qword_10047A988 != -1)
    swift_once(&qword_10047A988, sub_100095A18);
  v14 = type metadata accessor for URL(0);
  sub_1000362E8(v14, (uint64_t)qword_1004AF2F8);
  URL.appendingPathComponent(_:)(v12);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v13).n128_u64[0];
  return result;
}

uint64_t sub_1000CF14C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1000F3CC8(*a1, *a2);
}

Swift::Int sub_1000CF158()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7);
  v2 = 0xE900000000000065;
  v3 = 0x6D69547472617473;
  if (v1 != 1)
  {
    v3 = 0x656D6954646E65;
    v2 = 0xE700000000000000;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x73746E657665;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE600000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_1000CF1F8(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xE900000000000065;
  v3 = 0x6D69547472617473;
  if (*v1 != 1)
  {
    v3 = 0x656D6954646E65;
    v2 = 0xE700000000000000;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x73746E657665;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE600000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1000CF274()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7);
  v2 = 0xE900000000000065;
  v3 = 0x6D69547472617473;
  if (v1 != 1)
  {
    v3 = 0x656D6954646E65;
    v2 = 0xE700000000000000;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x73746E657665;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE600000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

unint64_t sub_1000CF310@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1000CF9BC(*a1);
  *a2 = result;
  return result;
}

void sub_1000CF33C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE600000000000000;
  v4 = 0xE900000000000065;
  v5 = 0x6D69547472617473;
  if (v2 != 1)
  {
    v5 = 0x656D6954646E65;
    v4 = 0xE700000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x73746E657665;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1000CF39C()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6D69547472617473;
  if (*v0 != 1)
    v1 = 0x656D6954646E65;
  if (*v0)
    return v1;
  else
    return 0x73746E657665;
}

unint64_t sub_1000CF3F8@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1000CF9BC(a1);
  *a2 = result;
  return result;
}

void sub_1000CF41C(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_1000CF428(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000CF7D4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CF450(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000CF7D4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CF478(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(_QWORD *, __n128);
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  _QWORD v28[5];
  char v29;

  v3 = v1;
  v5 = type metadata accessor for Date(0);
  v26 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v27 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10000EDC8(&qword_100482230);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v11 = a1[4];
  sub_10000F66C(a1, v12);
  v13 = sub_1000CF7D4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Report.CodingKeys, &type metadata for Report.CodingKeys, v13, v12, v11);
  LOBYTE(v28[0]) = 1;
  v14 = sub_10000C4B0(&qword_100482240, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v15 = KeyedEncodingContainer.encode<A>(_:forKey:)(v3, v28, v7, v5, v14);
  if (v2)
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v17 = v26;
  v16 = v27;
  Date.init()(v15);
  LOBYTE(v28[0]) = 2;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v16, v28, v7, v5, v14);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v27, v5);
  v29 = 0;
  v27 = (char *)v7;
  KeyedEncodingContainer.nestedUnkeyedContainer(forKey:)(v28, &v29, v7);
  v19 = *(_QWORD *)(v3 + *(int *)(type metadata accessor for Report(0) + 20));
  v21 = *(_QWORD *)(v19 + 16);
  if (v21)
  {
    swift_bridgeObjectRetain_n(v19, 2);
    v22 = v19 + 40;
    do
    {
      v23 = *(void (**)(_QWORD *, __n128))(v22 - 8);
      v24 = swift_retain();
      v23(v28, v24);
      swift_release();
      v22 += 16;
      --v21;
    }
    while (v21);
    v20 = swift_bridgeObjectRelease_n(v19, 2);
  }
  (*(void (**)(char *, char *, __n128))(v8 + 8))(v10, v27, v20);
  return sub_10000F690(v28);
}

uint64_t sub_1000CF6F0(_QWORD *a1)
{
  return sub_1000CF478(a1);
}

uint64_t sub_1000CF704(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Report(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000CF748(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Report(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000CF784()
{
  uint64_t v0;

  sub_100036300(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  swift_release();
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000CF7B0()
{
  uint64_t *v0;

  return sub_1000CE8F8(v0[2], v0[3], v0[4]);
}

uint64_t sub_1000CF7BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000CF7CC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_1000CF7D4()
{
  unint64_t result;

  result = qword_100482238;
  if (!qword_100482238)
  {
    result = swift_getWitnessTable(&unk_1003B5854, &type metadata for Report.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100482238);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for Report.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1000CF864 + 4 * byte_1003B56F5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000CF898 + 4 * asc_1003B56F0[v4]))();
}

uint64_t sub_1000CF898(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000CF8A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000CF8A8);
  return result;
}

uint64_t sub_1000CF8B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000CF8BCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000CF8C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000CF8C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Report.CodingKeys()
{
  return &type metadata for Report.CodingKeys;
}

unint64_t sub_1000CF8E8()
{
  unint64_t result;

  result = qword_100482248;
  if (!qword_100482248)
  {
    result = swift_getWitnessTable(&unk_1003B582C, &type metadata for Report.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100482248);
  }
  return result;
}

unint64_t sub_1000CF930()
{
  unint64_t result;

  result = qword_100482250;
  if (!qword_100482250)
  {
    result = swift_getWitnessTable(&unk_1003B5764, &type metadata for Report.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100482250);
  }
  return result;
}

unint64_t sub_1000CF978()
{
  unint64_t result;

  result = qword_100482258;
  if (!qword_100482258)
  {
    result = swift_getWitnessTable(&unk_1003B578C, &type metadata for Report.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100482258);
  }
  return result;
}

unint64_t sub_1000CF9BC(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10043BE88, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

uint64_t storeEnumTagSinglePayload for InstrumentationMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1000CFA50 + 4 * byte_1003B58B5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000CFA84 + 4 * byte_1003B58B0[v4]))();
}

uint64_t sub_1000CFA84(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000CFA8C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000CFA94);
  return result;
}

uint64_t sub_1000CFAA0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000CFAA8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000CFAAC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000CFAB4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InstrumentationMode()
{
  return &type metadata for InstrumentationMode;
}

unint64_t sub_1000CFAD4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100482260;
  if (!qword_100482260)
  {
    v1 = sub_100012B80(&qword_100482268);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100482260);
  }
  return result;
}

uint64_t *sub_1000CFB20@<X0>(uint64_t *result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  v2 = *result;
  if ((unint64_t)*result >= 3)
    LOBYTE(v2) = 3;
  *a2 = v2;
  return result;
}

void sub_1000CFB38(_QWORD *a1@<X8>)
{
  *a1 = &off_10043BEF0;
}

unint64_t sub_1000CFB4C()
{
  unint64_t result;

  result = qword_100482270;
  if (!qword_100482270)
  {
    result = swift_getWitnessTable(&unk_1003B590C, &type metadata for InstrumentationMode);
    atomic_store(result, (unint64_t *)&qword_100482270);
  }
  return result;
}

uint64_t sub_1000CFB90(uint64_t a1)
{
  _QWORD v2[2];

  v2[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2[1] = "(";
  return swift_initClassMetadata2(a1, 0, 2, v2, a1 + 96);
}

uint64_t sub_1000CFBDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = (uint64_t *)(v1 + qword_100482278);
  swift_beginAccess(v3, v6, 1, 0);
  v4 = *v3;
  *v3 = a1;
  return swift_bridgeObjectRelease(v4);
}

uint64_t (*sub_1000CFC2C(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + qword_100482278, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t sub_1000CFC70@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + qword_100482280;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_100026E60(v3, a1);
}

double sub_1000CFCC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  double result;
  _BYTE v5[24];

  v3 = v1 + qword_100482280;
  swift_beginAccess(v3, v5, 33, 0);
  sub_100026E18(a1, v3);
  *(_QWORD *)&result = swift_endAccess(v5).n128_u64[0];
  return result;
}

uint64_t (*sub_1000CFD18(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + qword_100482280, a1, 33, 0);
  return j__swift_endAccess;
}

id sub_1000CFD5C(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v13;
  char *v14;
  objc_class *v15;
  id v16;
  objc_super v18;

  v13 = swift_isaMask & *v8;
  *(_QWORD *)((char *)v8 + qword_100482278) = _swiftEmptyArrayStorage;
  v14 = (char *)v8 + qword_100482280;
  *(_OWORD *)v14 = 0u;
  *((_OWORD *)v14 + 1) = 0u;
  *((_QWORD *)v14 + 4) = 0;
  v15 = (objc_class *)type metadata accessor for StateObservingStackView(0, *(_QWORD *)(v13 + 80), *(_QWORD *)(v13 + 88), a8);
  v18.receiver = v8;
  v18.super_class = v15;
  v16 = objc_msgSendSuper2(&v18, "initWithFrame:", a1, a2, a3, a4);
  swift_getWitnessTable(&unk_1003B5A08, v15);
  StateObserving.setup()();

  return v16;
}

id sub_1000CFE3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7, double a8)
{
  return sub_1000CFD5C(a5, a6, a7, a8, a1, a2, a3, a4);
}

void sub_1000CFE5C()
{
  char *v0;
  char *v1;

  *(_QWORD *)&v0[qword_100482278] = &_swiftEmptyArrayStorage;
  v1 = &v0[qword_100482280];
  *(_OWORD *)v1 = 0u;
  *((_OWORD *)v1 + 1) = 0u;
  *((_QWORD *)v1 + 4) = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000016, 0x80000001003D8CB0, "Measure/StateObservingStackView.swift", 37, 2, 53, 0);
  __break(1u);
}

void sub_1000CFEE4()
{
  sub_1000CFE5C();
}

void sub_1000CFF04(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;

  v3 = a3;
  sub_1000D00FC();
}

id sub_1000CFF28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v5;
  objc_super v7;

  v5 = (objc_class *)type metadata accessor for StateObservingStackView(0, *(_QWORD *)((swift_isaMask & *v4) + 0x50), *(_QWORD *)((swift_isaMask & *v4) + 0x58), a4);
  v7.receiver = v4;
  v7.super_class = v5;
  return objc_msgSendSuper2(&v7, "dealloc");
}

uint64_t sub_1000CFF74(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + qword_100482278));
  return sub_100026F30(a1 + qword_100482280);
}

uint64_t type metadata accessor for StateObservingStackView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100026F70(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StateObservingStackView);
}

void (*sub_1000CFFC0(_QWORD *a1))(_QWORD *)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_1000CFD18((uint64_t)v2);
  return sub_100026CF0;
}

uint64_t sub_1000D0004()
{
  uint64_t v0;

  v0 = sub_1000D00B8();
  return swift_bridgeObjectRetain(v0);
}

void (*sub_1000D001C(_QWORD *a1))(_QWORD *)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_1000CFC2C((uint64_t)v2);
  return sub_100026CF0;
}

void sub_1000D0060()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000012, 0x80000001003D8C90, "Measure/StateObservingStackView.swift", 37, 2, 61, 0);
  __break(1u);
}

uint64_t sub_1000D00B8()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = v0 + qword_100482278;
  swift_beginAccess(v0 + qword_100482278, v3, 0, 0);
  return *(_QWORD *)v1;
}

void sub_1000D00FC()
{
  char *v0;
  char *v1;

  *(_QWORD *)&v0[qword_100482278] = &_swiftEmptyArrayStorage;
  v1 = &v0[qword_100482280];
  *(_OWORD *)v1 = 0u;
  *((_OWORD *)v1 + 1) = 0u;
  *((_QWORD *)v1 + 4) = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001003D8190, "Measure/StateObservingStackView.swift", 37, 2, 57, 0);
  __break(1u);
}

void sub_1000D0288()
{
  uint64_t v0;

  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  sub_1000D02AC();
}

void sub_1000D02AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, __n128);
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, __n128);
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, __n128);
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, __n128);
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, __n128);
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t, __n128);
  __n128 v39;
  _QWORD *v40;

  v1 = v0;
  *(_QWORD *)(v0 + 80) = 0;
  *(_BYTE *)(v0 + 88) = 1;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 128) = 0u;
  *(_OWORD *)(v0 + 144) = 0u;
  *(_BYTE *)(v0 + 160) = 1;
  v2 = v0 + qword_100482370;
  v3 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  *(_QWORD *)(v1 + qword_100482378) = 0x3FE0000000000000;
  *(_BYTE *)(v1 + qword_100482380) = 0;
  v4 = qword_100482388;
  v5 = sub_10000EDC8(&qword_10047D010);
  KeyPath = swift_getKeyPath(&unk_1003B5AA0);
  if (qword_10047AD88 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v7 = qword_1004AF890;
  v8 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v5 + 272);
  v9 = swift_retain();
  *(_QWORD *)(v1 + v4) = v8(KeyPath, v7, v9);
  v10 = qword_100482390;
  v11 = sub_10000EDC8(&qword_10047D448);
  v12 = swift_getKeyPath(&unk_1003B5AC8);
  v13 = qword_1004AF890;
  v14 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v11 + 272);
  v15 = swift_retain();
  *(_QWORD *)(v1 + v10) = v14(v12, v13, v15);
  v16 = qword_100482398;
  v17 = sub_10000EDC8(&qword_10047D450);
  v18 = swift_getKeyPath(&unk_1003B5AF0);
  v19 = qword_1004AF890;
  v20 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v17 + 272);
  v21 = swift_retain();
  *(_QWORD *)(v1 + v16) = v20(v18, v19, v21);
  v22 = qword_1004823A0;
  v23 = swift_getKeyPath(&unk_1003B5B18);
  v24 = sub_10000EDC8(&qword_10047BBA0);
  v25 = qword_1004AF890;
  v26 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v24 + 272);
  v27 = swift_retain();
  *(_QWORD *)(v1 + v22) = v26(v23, v25, v27);
  v28 = qword_1004823A8;
  v29 = swift_getKeyPath(&unk_1003B5B40);
  v30 = sub_10000EDC8(&qword_100482548);
  v31 = qword_1004AF890;
  v32 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v30 + 272);
  v33 = swift_retain();
  *(_QWORD *)(v1 + v28) = v32(v29, v31, v33);
  v34 = qword_1004823B0;
  v35 = swift_getKeyPath(&unk_1003B5B68);
  v36 = sub_10000EDC8(&qword_10047E610);
  v37 = qword_1004AF890;
  v38 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v36 + 272);
  v39 = swift_retain();
  *(_QWORD *)(v1 + v34) = v38(v35, v37, v39);
  v40 = (_QWORD *)(v1 + qword_1004823B8);
  *v40 = 0;
  v40[1] = 0;
  swift_release();
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000002DLL, 0x80000001003D7D70, "Measure/LineController.swift", 28, 2, 53, 0);
  __break(1u);
}

double sub_1000D057C()
{
  uint64_t v0;
  double result;

  swift_retain();
  StateValue.ifUpdated(_:)(sub_1000D2068, v0);
  swift_release();
  swift_retain();
  StateValue.ifUpdated(_:)(sub_1000D2070, v0);
  swift_release();
  swift_retain();
  StateValue.ifUpdated(_:)(sub_1000D2078, v0);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

void sub_1000D0618(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(__int128 *__return_ptr, __n128);
  id v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(_OWORD *__return_ptr, __n128);
  __n128 v10;
  id v11;
  _OWORD v12[9];
  char v13;
  _OWORD v14[9];
  char v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char v25;

  if (qword_10047AC58 != -1)
    swift_once(&qword_10047AC58, sub_1001833E8);
  if (byte_1004AF790 == 1)
  {
    v3 = qword_1004823A8;
    v4 = *(void (**)(__int128 *__return_ptr, __n128))(**(_QWORD **)(a2 + qword_1004823A8) + 144);
    v5 = *(id *)(a2 + 64);
    v6 = swift_retain();
    v4(&v16, v6);
    swift_release();
    v14[6] = v22;
    v14[7] = v23;
    v14[8] = v24;
    v15 = v25;
    v14[2] = v18;
    v14[3] = v19;
    v14[4] = v20;
    v14[5] = v21;
    v14[0] = v16;
    v14[1] = v17;
    v8 = *((_QWORD *)&v16 + 1);
    v7 = v17;
    swift_bridgeObjectRetain(v17);
    sub_1000D2080(v14);
    v9 = *(void (**)(_OWORD *__return_ptr, __n128))(**(_QWORD **)(a2 + v3) + 144);
    v10 = swift_retain();
    v9(v12, v10);
    swift_release();
    v22 = v12[6];
    v23 = v12[7];
    v24 = v12[8];
    v25 = v13;
    v18 = v12[2];
    v19 = v12[3];
    v20 = v12[4];
    v21 = v12[5];
    v16 = v12[0];
    v17 = v12[1];
    sub_1000D2080(&v16);
    sub_1000D9D24(v8, v7, SBYTE1(v16));

    swift_bridgeObjectRelease(v7);
  }
  else
  {
    v11 = *(id *)(a2 + 64);
    sub_1000DA59C();

  }
}

void sub_1000D07B8(unsigned __int8 *a1, uint64_t a2)
{
  int v3;
  id v4;
  id v5;
  id v6;
  id v7;

  v3 = *a1;
  if (v3 == 5)
  {
    v5 = *(id *)(a2 + 64);
    sub_1000DC2FC();

    v7 = *(id *)(a2 + 64);
    sub_1000DC308();

  }
  else if (v3 == 4)
  {
    v4 = *(id *)(a2 + 64);
    sub_1000DC120();

    v6 = *(id *)(a2 + 64);
    sub_1000DC134();

  }
}

void sub_1000D0858(uint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  double v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  id v8;

  v2 = a1[1];
  if (v2 >= 2)
  {
    v4 = *((double *)a1 + 4);
    v3 = *((double *)a1 + 5);
    v6 = *((double *)a1 + 2);
    v5 = *((double *)a1 + 3);
    v7 = *a1;
    v8 = *(id *)(a2 + 64);
    sub_1000DA8BC(v7, v2, v6, v5, v4, v3);

  }
}

double sub_1000D08EC()
{
  uint64_t v0;
  double result;

  sub_1000C21E4(v0 + qword_100482370);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 + qword_1004823B8 + 8)).n128_u64[0];
  return result;
}

uint64_t sub_1000D0984(uint64_t a1)
{
  uint64_t v1;

  v1 = StateObserver.deinit(a1);

  sub_1000C21E4(v1 + qword_100482370);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + qword_1004823B8 + 8));
  return v1;
}

uint64_t sub_1000D0A34(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_1000D0984(a1);
  return swift_deallocClassInstance(v1, *(unsigned int *)(*(_QWORD *)v1 + 48), *(unsigned __int16 *)(*(_QWORD *)v1 + 52));
}

uint64_t type metadata accessor for LineController(uint64_t a1)
{
  uint64_t result;

  result = qword_1004823E8;
  if (!qword_1004823E8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LineController);
  return result;
}

void sub_1000D0A90(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[12];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = "Q";
  sub_10005CFA4(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[4] = &unk_1003B5A60;
    v4[5] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[6] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[7] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[8] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[9] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[10] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[11] = &unk_1003B5A78;
    swift_initClassMetadata2(a1, 256, 12, v4, a1 + 208);
  }
}

void sub_1000D0B4C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t (*a4)(uint64_t, uint64_t, __n128))
{
  uint64_t v4;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  char v14;
  void *v15;
  id v16;
  void *v17;
  __n128 v18;
  uint64_t v19;
  _BYTE v20[24];

  v8 = *(char **)(v4 + 64);
  v9 = &v8[*a3];
  swift_beginAccess(v9, v20, 32, 0);
  v10 = *(_QWORD *)v9;
  v11 = *(_QWORD *)(*(_QWORD *)v9 + 16);
  v12 = v8;
  if (!v11)
    goto LABEL_5;
  swift_bridgeObjectRetain(a2);
  v13 = sub_1000C80A8(a1, a2);
  if ((v14 & 1) == 0)
  {
    swift_bridgeObjectRelease(a2);
LABEL_5:
    swift_endAccess(v20);
    goto LABEL_6;
  }
  v15 = *(void **)(*(_QWORD *)(v10 + 56) + 8 * v13);
  swift_endAccess(v20);
  v16 = v15;
  swift_bridgeObjectRelease(a2);
  v17 = (void *)objc_opt_self(SCNTransaction);
  objc_msgSend(v17, "begin");
  objc_msgSend(v16, "removeFromParentNode");
  objc_msgSend(v17, "commit");
  v18 = swift_beginAccess(v9, v20, 33, 0);
  v19 = a4(a1, a2, v18);
  swift_endAccess(v20);

  v12 = (char *)v19;
LABEL_6:

}

void sub_1000D0C8C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void (*v18)(int8x16_t *__return_ptr, __n128);
  __n128 v19;
  int8x16_t v20;
  uint64_t v21;
  char v22;
  uint64_t (*v23)(void);
  _QWORD *v24;
  uint64_t v25;
  double (*v26)(void);
  _QWORD *v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  __int16 v36;
  char v37;
  int v38;
  uint64_t (*v39)(void);
  _QWORD *v40;
  uint64_t v41;
  double (*v42)(void);
  _QWORD *v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  uint64_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  uint64_t v52;
  _BOOL8 v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  char *v66;
  double v67;
  void (*v68)(char *, uint64_t);
  uint64_t v69;
  id v70;
  char *v71;
  char *v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE v80[24];
  _BYTE v81[24];
  _BYTE v82[80];
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  BOOL v87;

  v2 = v1;
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v71 - v9;
  v11 = sub_10000EDC8((uint64_t *)&unk_10047E440);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v71 - v16;
  if ((unint64_t)((*(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0xD0))(v15) - 3) > 1)
    goto LABEL_22;
  v71 = v8;
  v72 = v10;
  v78 = v5;
  v77 = v17;
  v79 = v4;
  v18 = *(void (**)(int8x16_t *__return_ptr, __n128))(**(_QWORD **)(v1 + qword_1004823A0) + 144);
  v19 = swift_retain();
  v18(&v83, v19);
  swift_release();
  v20 = v83;

  v21 = *(_QWORD *)(v1 + 80);
  v22 = *(_BYTE *)(v1 + 88);
  if (v20.i64[1])
  {
    v23 = *(uint64_t (**)(void))((swift_isaMask & *(_QWORD *)v20.i64[1]) + 0x2F0);
    v24 = (id)v20.i64[1];
    v25 = v23();

    sub_100012C58(v2 + 96, (uint64_t)v82, &qword_10047BBE0);
    v26 = *(double (**)(void))((swift_isaMask & *v24) + 0x2B0);
    v27 = v24;
    *(double *)v28.i64 = v26();
    v76 = v28;
    v75 = v29;
    v74 = v30;
    v73 = v31;

    v32 = v73;
    v33 = v74;
    v34 = v75;
    v35 = v76;
  }
  else
  {
    sub_100012C58(v1 + 96, (uint64_t)v82, &qword_10047BBE0);
    v25 = 0;
    v35 = 0uLL;
    v34 = 0uLL;
    v33 = 0uLL;
    v32 = 0uLL;
  }
  v83 = v35;
  v84 = v34;
  v85 = v33;
  v86 = v32;
  v87 = v20.i64[1] == 0;
  v36 = sub_100182A30(v21, v22, v25, v20.i64[1] == 0, (uint64_t)v82, (uint64_t)&v83);
  v37 = v36 & 1;
  v38 = v36 & 0x100;
  word_1004AF779 = v36 & 0x101;
  if (v20.i64[1])
  {
    v39 = *(uint64_t (**)(void))((swift_isaMask & *(_QWORD *)v20.i64[1]) + 0x2F0);
    v40 = (id)v20.i64[1];
    v41 = v39();

    v42 = *(double (**)(void))((swift_isaMask & *v40) + 0x2B0);
    v43 = v40;
    *(double *)v44.i64 = v42();
    v76 = v44;
    v74 = v45;
    v73 = v46;
    v75 = v47;

    v48 = v76.i64[0];
    v49 = vextq_s8(v76, v74, 8uLL);
    v50 = vextq_s8(v74, v73, 8uLL);
    v51 = vextq_s8(v73, v75, 8uLL);
    v52 = v75.i64[1];
  }
  else
  {
    v41 = 0;
    v49 = 0uLL;
    v50 = 0uLL;
    v51 = 0uLL;
    v48 = 0;
    v52 = 0;
  }
  *(_QWORD *)(v2 + 80) = v41;
  *(_BYTE *)(v2 + 88) = v20.i64[1] == 0;
  *(_QWORD *)(v2 + 96) = v48;
  *(int8x16_t *)(v2 + 104) = v49;
  *(int8x16_t *)(v2 + 120) = v50;
  *(int8x16_t *)(v2 + 136) = v51;
  *(_QWORD *)(v2 + 152) = v52;
  *(_BYTE *)(v2 + 160) = v20.i64[1] == 0;
  v53 = v41 == 6 && v20.i64[1] != 0;
  (*(void (**)(_BOOL8))((swift_isaMask & *a1) + 0x2A0))(v53);
  v54 = sub_1000D1280(a1, v37, v38 != 0);
  if (v54 == 2)
  {

    return;
  }
  if ((v54 & 1) != 0 || v38)
  {
    *(_BYTE *)(v2 + qword_100482380) = BYTE1(v38);
    v58 = *(id *)(v2 + 64);
    sub_1000DB640(a1, 1, 0);

    v59 = (uint64_t)v77;
    Date.init()(v60);

    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v78 + 56))(v59, 0, 1, v79);
    v61 = v2 + qword_100482370;
    swift_beginAccess(v61, v81, 33, 0);
    sub_1000C2224(v59, v61);
    swift_endAccess(v81);
    return;
  }
  v55 = v2 + qword_100482370;
  swift_beginAccess(v2 + qword_100482370, v81, 0, 0);
  sub_1000C219C(v55, (uint64_t)v14);
  v56 = v78;
  v57 = v79;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48))(v14, 1, v79) == 1)
  {

    sub_1000C21E4((uint64_t)v14);
LABEL_22:
    v70 = *(id *)(v2 + 64);
    sub_1000DB640(a1, 0, 0);

    return;
  }
  v62 = v72;
  v63 = (*(uint64_t (**)(char *, char *, uint64_t))(v56 + 32))(v72, v14, v57);
  v64 = qword_100482380;
  if (*(_BYTE *)(v2 + qword_100482380) == 1)
  {
    v65 = *(id *)(v2 + 64);
    sub_1000DB640(a1, 0, 1);

  }
  v66 = v71;
  Date.init()(v63);
  v67 = Date.timeIntervalSince(_:)(v62);
  v68 = *(void (**)(char *, uint64_t))(v56 + 8);
  v68(v66, v57);

  v68(v62, v57);
  if (fabs(v67) > 0.5)
  {
    v69 = (uint64_t)v77;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v56 + 56))(v77, 1, 1, v57);
    swift_beginAccess(v55, v80, 33, 0);
    sub_1000C2224(v69, v55);
    swift_endAccess(v80);
    *(_BYTE *)(v2 + v64) = 0;
    goto LABEL_22;
  }
}

uint64_t sub_1000D1280(_QWORD *a1, char a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  void (*v18)(_OWORD *__return_ptr, __n128);
  __n128 v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;
  void *v23;
  uint64_t (*v24)(id);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t (*v32)(void);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  void (*v49)(char *, uint64_t);
  float v50;
  id v51;
  id v52;
  uint64_t v53;
  uint64_t (*v54)(void);
  uint64_t v55;
  uint64_t v56;
  char *v57;
  _QWORD *v58;
  uint64_t v59;
  id v60[17];
  _BYTE v61[24];
  _OWORD v62[9];
  uint64_t v63;
  _OWORD v64[9];
  uint64_t v65;

  v4 = v3;
  v58 = a1;
  v7 = sub_10000EDC8((uint64_t *)&unk_10047E440);
  v8 = __chkstk_darwin(v7);
  v57 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v54 - v10;
  v59 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v59 - 8);
  v13 = __chkstk_darwin(v59);
  v15 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v54 - v16;
  v18 = *(void (**)(_OWORD *__return_ptr, __n128))(**(_QWORD **)(v3 + qword_1004823B0) + 144);
  v19 = swift_retain();
  v18(v62, v19);
  swift_release();
  v64[6] = v62[6];
  v64[7] = v62[7];
  v64[8] = v62[8];
  v65 = v63;
  v64[2] = v62[2];
  v64[3] = v62[3];
  v64[4] = v62[4];
  v64[5] = v62[5];
  v64[0] = v62[0];
  v64[1] = v62[1];
  sub_1000127E8((id *)v64);
  sub_100012BC4((uint64_t)v64);
  sub_100012C58((uint64_t)v64, (uint64_t)v62, (uint64_t *)&unk_100486700);
  if (sub_1000127D0((uint64_t *)v62) == 1)
  {
    v20 = (_QWORD *)(v3 + qword_1004823B8);
    v21 = *(_QWORD *)(v3 + qword_1004823B8 + 8);
    *v20 = 0;
    v20[1] = 0;
    swift_bridgeObjectRelease(v21);
    return a2 & 1;
  }
  v23 = *(void **)&v62[0];
  if ((a2 & 1) != 0)
  {
    v24 = *(uint64_t (**)(id))((swift_isaMask & **(_QWORD **)&v62[0]) + 0xB8);
    sub_100012C58((uint64_t)v64, (uint64_t)v60, (uint64_t *)&unk_100486700);
    v25 = v24(v60[0]);
    v27 = v26;
    sub_100012810((id *)v64);
    sub_100012810((id *)v64);
    v28 = (uint64_t *)(v4 + qword_1004823B8);
    v29 = *(_QWORD *)(v4 + qword_1004823B8 + 8);
    *v28 = v25;
    v28[1] = v27;
    swift_bridgeObjectRelease(v29);
    return 1;
  }
  if ((a3 & 1) != 0)
  {
    sub_100012810((id *)v64);
    return 0;
  }
  v30 = (uint64_t *)(v4 + qword_1004823B8);
  v31 = *(_QWORD *)(v4 + qword_1004823B8 + 8);
  v55 = *(_QWORD *)(v4 + qword_1004823B8);
  v32 = *(uint64_t (**)(void))((swift_isaMask & **(_QWORD **)&v62[0]) + 0xB8);
  sub_1000127E8((id *)v64);
  v33 = swift_bridgeObjectRetain(v31);
  v54 = v32;
  v34 = ((uint64_t (*)(uint64_t))v32)(v33);
  v56 = v35;
  sub_100012810((id *)v64);
  if (!v31)
  {
    swift_bridgeObjectRelease(v56);
    goto LABEL_16;
  }
  v36 = v55 == v34;
  v37 = v34;
  v38 = v56;
  if (v36 && v31 == v56)
  {
    swift_bridgeObjectRelease(v31);
    swift_bridgeObjectRelease(v38);
    v39 = v59;
    goto LABEL_14;
  }
  LODWORD(v55) = _stringCompareWithSmolCheck(_:_:expecting:)(v55, v31, v37, v56, 0);
  swift_bridgeObjectRelease(v31);
  swift_bridgeObjectRelease(v38);
  v39 = v59;
  if ((v55 & 1) == 0)
  {
LABEL_16:
    v42 = v23;
    v43 = v54();
    v45 = v44;
    sub_100012810((id *)v64);
    sub_100012810((id *)v64);
    v46 = v30[1];
    *v30 = v43;
    v30[1] = v45;
    swift_bridgeObjectRelease(v46);
    return 0;
  }
LABEL_14:
  v40 = v4 + qword_100482370;
  swift_beginAccess(v4 + qword_100482370, v60, 0, 0);
  sub_1000C219C(v40, (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v39) == 1)
  {
    sub_1000C21E4((uint64_t)v11);
    v41 = *(id *)(v4 + 64);
    sub_1000DB640(v58, 0, 0);

    sub_100012810((id *)v64);
    return 2;
  }
  else
  {
    v47 = (*(uint64_t (**)(char *, char *, uint64_t))(v12 + 32))(v17, v11, v39);
    Date.init()(v47);
    v48 = Date.timeIntervalSince(_:)(v17);
    v49 = *(void (**)(char *, uint64_t))(v12 + 8);
    v49(v15, v39);
    v50 = spring(tension:friction:velocity:elapsed:)(400.0, 40.0, 0.0, fabs(v48));
    if (v50 < 0.0 || v50 >= 1.0)
    {
      if (v50 < 1.0)
      {
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000016, 0x80000001003DE0C0, "Measure/LineController.swift", 28, 2, 189, 0);
        __break(1u);
      }
      else
      {
        v52 = *(id *)(v4 + 64);
        sub_1000DB640(v58, 0, 1);

        sub_100012810((id *)v64);
        v49(v17, v39);
        v53 = (uint64_t)v57;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v57, 1, 1, v39);
        swift_beginAccess(v40, v61, 33, 0);
        sub_1000C2224(v53, v40);
        swift_endAccess(v61);
        *(_BYTE *)(v4 + qword_100482380) = 0;
        return 2;
      }
    }
    else
    {
      v51 = *(id *)(v4 + 64);
      sub_1000DB640(v58, 0, 1);

      sub_100012810((id *)v64);
      v49(v17, v39);
      return 2;
    }
  }
  return result;
}

void sub_1000D17D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char v11;
  void *v12;
  id v13;
  _QWORD *v14;
  char *v15;
  id v16;
  _BYTE v17[24];

  v5 = *(char **)(v2 + 64);
  v6 = &v5[OBJC_IVAR____TtC7Measure8LineView_worldLines];
  swift_beginAccess(&v5[OBJC_IVAR____TtC7Measure8LineView_worldLines], v17, 32, 0);
  v7 = *(_QWORD *)v6;
  v8 = *(_QWORD *)(v7 + 16);
  v9 = v5;
  if (v8)
  {
    swift_bridgeObjectRetain(a2);
    v10 = sub_1000C80A8(a1, a2);
    if ((v11 & 1) != 0)
    {
      v12 = *(void **)(*(_QWORD *)(v7 + 56) + 8 * v10);
      swift_endAccess(v17);
      v13 = v12;
      swift_bridgeObjectRelease(a2);
      v14 = (_QWORD *)swift_allocObject(&unk_1004450B8, 48, 7);
      v14[2] = v13;
      v14[3] = v9;
      v14[4] = a1;
      v14[5] = a2;
      v15 = v9;
      swift_bridgeObjectRetain(a2);
      v16 = v13;
      sub_1000D4F10(sub_1000D1D60, (uint64_t)v14);

      swift_release();
      return;
    }
    swift_bridgeObjectRelease(a2);
  }
  swift_endAccess(v17);

}

void sub_1000D18F0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char v10;
  id *v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  char v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x2_t v31;
  __n128 v32;
  __n128 v33;
  id v34;

  v2 = v1;
  v4 = (*(uint64_t (**)(void))((swift_isaMask & *a1) + 0xB8))();
  v6 = v5;
  v7 = (_QWORD *)(v2 + qword_1004823B8);
  v8 = *(_QWORD *)(v2 + qword_1004823B8 + 8);
  if (!v8)
  {
    swift_bridgeObjectRelease(v5);
    goto LABEL_13;
  }
  if (v4 == *v7 && v8 == v5)
  {
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *v7, v8, 0);
    swift_bridgeObjectRelease(v6);
    if ((v10 & 1) == 0)
      goto LABEL_13;
  }
  v11 = (id *)(v2 + 64);
  v12 = *(id *)(v2 + 64);
  v13 = sub_1000DBACC();
  v15 = v14;
  v17 = v16;

  if ((v17 & 1) != 0)
  {
LABEL_13:
    v11 = (id *)(v2 + 64);
    goto LABEL_14;
  }
  v18.n128_u64[0] = v13;
  v18.n128_u64[1] = v15;
  v33 = v18;
  v19.n128_f64[0] = (*(double (**)(void))((swift_isaMask & *a1) + 0x2A0))();
  v23.n128_f64[0] = simd_float4x4.position.getter(v19, v20, v21, v22);
  v32 = v23;
  v24.n128_f64[0] = (*(double (**)(void))((swift_isaMask & *a1) + 0x2A8))();
  v28.n128_f64[0] = simd_float4x4.position.getter(v24, v25, v26, v27);
  *(double *)v29.i64 = closestPointOnLine(lineP1:lineP2:point:)(v32, v28, v33);
  v30 = vsubq_f32(v29, (float32x4_t)v33);
  v31.i32[0] = vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL).u32[0];
  v31.i32[1] = v29.i32[0];
  *(float32x2_t *)v29.f32 = vsub_f32(v31, (float32x2_t)__PAIR64__(v13, v15));
  *(float32x2_t *)v29.f32 = vmul_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32);
  if ((float)(v29.f32[0] + (float)(v29.f32[1] + COERCE_FLOAT(vmulq_f32(v30, v30).i32[1]))) < 0.0001)
  {
LABEL_14:
    v34 = *v11;
    sub_1000DBC94(a1);

  }
}

void sub_1000D1AC0(_QWORD *a1)
{
  uint64_t v1;
  id v3;

  v3 = *(id *)(v1 + 64);
  sub_1000DAC50(a1, 0);

}

void sub_1000D1B08(uint64_t a1, uint64_t a2)
{
  sub_1000D0B4C(a1, a2, &OBJC_IVAR____TtC7Measure8LineView_worldPoints, (uint64_t (*)(uint64_t, uint64_t, __n128))sub_100093CC8);
}

void sub_1000D1B2C(_QWORD *a1)
{
  uint64_t v1;
  id v3;

  v3 = *(id *)(v1 + 64);
  sub_1000DAF0C(a1);

}

void sub_1000D1B70(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v3)(void);
  char v4;
  id v5;

  v3 = *(uint64_t (**)(void))((swift_isaMask & *a1) + 0x238);
  v5 = *(id *)(v1 + 64);
  v4 = v3() == 2;
  sub_1000DB1A4(a1, 0, v4);

}

void sub_1000D1BE4(uint64_t a1, uint64_t a2)
{
  sub_1000D0B4C(a1, a2, &OBJC_IVAR____TtC7Measure8LineView_worldLines, (uint64_t (*)(uint64_t, uint64_t, __n128))sub_100093DAC);
}

void sub_1000D1C0C(_QWORD *a1)
{
  uint64_t v1;
  id v3;

  v3 = *(id *)(v1 + 64);
  sub_1000DB900(a1);

}

void sub_1000D1C58()
{
  uint64_t v0;
  id v1;

  v1 = *(id *)(v0 + 64);
  sub_1000DBDD0();

}

void sub_1000D1C90(char a1)
{
  uint64_t v1;
  void *v3;
  void *v4;
  char *v5;

  v3 = *(void **)(v1 + 64);
  v4 = (void *)objc_opt_self(SCNTransaction);
  v5 = v3;
  objc_msgSend(v4, "begin");
  objc_msgSend(*(id *)&v5[OBJC_IVAR____TtC7Measure8LineView_lineParentNode], "setHidden:", a1 & 1);
  objc_msgSend(v4, "commit");

}

uint64_t sub_1000D1D1C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 232);
  *a2 = v2;
  return swift_retain(v2);
}

uint64_t sub_1000D1D2C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

void sub_1000D1D60()
{
  uint64_t v0;

  sub_1000DC4E4(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_1000D1D6C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, __n128);
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, __n128);
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, __n128);
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, __n128);
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t, __n128);
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t, __n128);
  __n128 v42;
  _QWORD *v43;
  id v44;
  _BYTE v46[24];
  void *v47;
  void *v48;

  v2 = v1;
  *(_QWORD *)(v1 + 80) = 0;
  *(_BYTE *)(v1 + 88) = 1;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_OWORD *)(v1 + 144) = 0u;
  *(_BYTE *)(v1 + 160) = 1;
  v4 = v1 + qword_100482370;
  v5 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  *(_QWORD *)(v2 + qword_100482378) = 0x3FE0000000000000;
  *(_BYTE *)(v2 + qword_100482380) = 0;
  v6 = qword_100482388;
  v7 = sub_10000EDC8(&qword_10047D010);
  KeyPath = swift_getKeyPath(&unk_1003B5AA0);
  v9 = qword_10047AD88;
  swift_retain();
  if (v9 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v10 = qword_1004AF890;
  v11 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v7 + 272);
  v12 = swift_retain();
  *(_QWORD *)(v2 + v6) = v11(KeyPath, v10, v12);
  v13 = qword_100482390;
  v14 = sub_10000EDC8(&qword_10047D448);
  v15 = swift_getKeyPath(&unk_1003B5AC8);
  v16 = qword_1004AF890;
  v17 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v14 + 272);
  v18 = swift_retain();
  *(_QWORD *)(v2 + v13) = v17(v15, v16, v18);
  v19 = qword_100482398;
  v20 = sub_10000EDC8(&qword_10047D450);
  v21 = swift_getKeyPath(&unk_1003B5AF0);
  v22 = qword_1004AF890;
  v23 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v20 + 272);
  v24 = swift_retain();
  *(_QWORD *)(v2 + v19) = v23(v21, v22, v24);
  v25 = qword_1004823A0;
  v26 = swift_getKeyPath(&unk_1003B5B18);
  v27 = sub_10000EDC8(&qword_10047BBA0);
  v28 = qword_1004AF890;
  v29 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v27 + 272);
  v30 = swift_retain();
  *(_QWORD *)(v2 + v25) = v29(v26, v28, v30);
  v31 = qword_1004823A8;
  v32 = swift_getKeyPath(&unk_1003B5B40);
  v33 = sub_10000EDC8(&qword_100482548);
  v34 = qword_1004AF890;
  v35 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v33 + 272);
  v36 = swift_retain();
  *(_QWORD *)(v2 + v31) = v35(v32, v34, v36);
  v37 = qword_1004823B0;
  v38 = swift_getKeyPath(&unk_1003B5B68);
  v39 = sub_10000EDC8(&qword_10047E610);
  v40 = qword_1004AF890;
  v41 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v39 + 272);
  v42 = swift_retain();
  *(_QWORD *)(v2 + v37) = v41(v38, v40, v42);
  v43 = (_QWORD *)(v2 + qword_1004823B8);
  *v43 = 0;
  v43[1] = 0;
  *(_QWORD *)(v2 + 64) = a1;
  v44 = a1;
  swift_release();
  v47 = &type metadata for Configurations.Default;
  v48 = &protocol witness table for Configurations.Default;
  return StateObserver.init(configuration:)(v46);
}

uint64_t sub_1000D2054@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 232);
  *a2 = v2;
  return swift_retain(v2);
}

void sub_1000D2068(uint64_t a1)
{
  uint64_t v1;

  sub_1000D0618(a1, v1);
}

void sub_1000D2070(unsigned __int8 *a1)
{
  uint64_t v1;

  sub_1000D07B8(a1, v1);
}

void sub_1000D2078(uint64_t *a1)
{
  uint64_t v1;

  sub_1000D0858(a1, v1);
}

_QWORD *sub_1000D2080(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  v2 = a1[2];
  v3 = (void *)a1[6];
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(v2);

  return a1;
}

void sub_1000D20C4()
{
  char *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  Class isa;

  v1 = *(void **)&v0[OBJC_IVAR____TtC7Measure24AccessibilitySingleStack_label];
  objc_msgSend(v1, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v2 = (void *)objc_opt_self(NSLayoutConstraint);
  v3 = sub_10000EDC8((uint64_t *)&unk_1004866D0);
  v4 = swift_allocObject(v3, 64, 7);
  *(_OWORD *)(v4 + 16) = xmmword_1003B1410;
  v5 = objc_msgSend(v1, "leadingAnchor");
  v6 = objc_msgSend(v0, "leadingAnchor");
  v7 = objc_msgSend(v5, "constraintEqualToAnchor:", v6);

  *(_QWORD *)(v4 + 32) = v7;
  v8 = objc_msgSend(v1, "trailingAnchor");
  v9 = objc_msgSend(v0, "trailingAnchor");
  v10 = objc_msgSend(v8, "constraintEqualToAnchor:", v9);

  *(_QWORD *)(v4 + 40) = v10;
  v11 = objc_msgSend(v1, "topAnchor");
  v12 = objc_msgSend(v0, "topAnchor");
  v13 = objc_msgSend(v11, "constraintEqualToAnchor:", v12);

  *(_QWORD *)(v4 + 48) = v13;
  v14 = objc_msgSend(v1, "bottomAnchor");
  v15 = objc_msgSend(v0, "bottomAnchor");
  v16 = objc_msgSend(v14, "constraintEqualToAnchor:", v15);

  *(_QWORD *)(v4 + 56) = v16;
  specialized Array._endMutation()(v17);
  sub_10002277C();
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v2, "activateConstraints:", isa, swift_bridgeObjectRelease(v4).n128_f64[0]);

}

char *sub_1000D2310(double a1, double a2, double a3, double a4)
{
  char *v4;
  objc_class *ObjectType;
  uint64_t v10;
  uint64_t v11;
  id v12;
  char *v13;
  char *v14;
  void *v15;
  char *v16;
  objc_super v18;

  ObjectType = (objc_class *)swift_getObjectType(v4);
  v10 = OBJC_IVAR____TtC7Measure24AccessibilitySingleStack_label;
  v11 = type metadata accessor for InteractiveLabel();
  v12 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v11));
  v13 = v4;
  *(_QWORD *)&v4[v10] = objc_msgSend(v12, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);

  v18.receiver = v13;
  v18.super_class = ObjectType;
  v14 = (char *)objc_msgSendSuper2(&v18, "initWithFrame:", a1, a2, a3, a4);
  v15 = *(void **)&v14[OBJC_IVAR____TtC7Measure24AccessibilitySingleStack_label];
  v16 = v14;
  objc_msgSend(v15, "setUserInteractionEnabled:", 1);
  objc_msgSend(v16, "addSubview:", v15);
  sub_1000D20C4();

  return v16;
}

char *sub_1000D2444(void *a1)
{
  char *v1;
  objc_class *ObjectType;
  uint64_t v4;
  uint64_t v5;
  id v6;
  char *v7;
  char *v8;
  char *v9;
  void *v10;
  char *v11;
  objc_super v13;

  ObjectType = (objc_class *)swift_getObjectType(v1);
  v4 = OBJC_IVAR____TtC7Measure24AccessibilitySingleStack_label;
  v5 = type metadata accessor for InteractiveLabel();
  v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v5));
  v7 = v1;
  *(_QWORD *)&v1[v4] = objc_msgSend(v6, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);

  v13.receiver = v7;
  v13.super_class = ObjectType;
  v8 = (char *)objc_msgSendSuper2(&v13, "initWithCoder:", a1);
  v9 = v8;
  if (v8)
  {
    v10 = *(void **)&v8[OBJC_IVAR____TtC7Measure24AccessibilitySingleStack_label];
    v11 = v8;
    objc_msgSend(v10, "setUserInteractionEnabled:", 1);
    objc_msgSend(v11, "addSubview:", v10);
    sub_1000D20C4();

  }
  return v9;
}

uint64_t type metadata accessor for AccessibilitySingleStack()
{
  return objc_opt_self(_TtC7Measure24AccessibilitySingleStack);
}

ValueMetadata *_s20EdgeDetectionContextVMa()
{
  return &_s20EdgeDetectionContextVN;
}

uint64_t sub_1000D25A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::String v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t result;
  _QWORD v20[2];
  _QWORD *v21;
  unint64_t v22;

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v4);
  v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v7);
  v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[1] = sub_100049274();
  v21 = 0;
  v22 = 0xE000000000000000;
  _StringGuts.grow(_:)(16);
  v10 = v22;
  if (qword_10047A970 != -1)
    swift_once(&qword_10047A970, sub_10009581C);
  v12 = qword_1004AF2C8;
  v11 = unk_1004AF2D0;
  swift_bridgeObjectRetain(unk_1004AF2D0);
  swift_bridgeObjectRelease(v10);
  v21 = (_QWORD *)v12;
  v22 = v11;
  v13._countAndFlagsBits = 0x746544656764452ELL;
  v13._object = (void *)0xEE006E6F69746365;
  String.append(_:)(v13);
  v14 = v21;
  v15 = v22;
  static DispatchQoS.userInitiated.getter();
  v21 = _swiftEmptyArrayStorage;
  v16 = sub_100047734();
  v17 = sub_10000EDC8(&qword_100486EF0);
  v18 = sub_10004777C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v17, v18, v4, v16);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v0);
  result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v14, v15, v9, v6, v3, 0);
  qword_100482580 = result;
  return result;
}

id sub_1000D27B8()
{
  if (qword_10047AA08 != -1)
    swift_once(&qword_10047AA08, sub_1000D25A8);
  return (id)qword_100482580;
}

uint64_t sub_1000D27F8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10009074C();
  return Context.description.getter(a1, v2);
}

unint64_t sub_1000D2820(uint64_t a1)
{
  unint64_t result;

  result = sub_1000D2844();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000D2844()
{
  unint64_t result;

  result = qword_100482588;
  if (!qword_100482588)
  {
    result = swift_getWitnessTable(&unk_1003B5BD8, &_s20EdgeDetectionContextVN);
    atomic_store(result, (unint64_t *)&qword_100482588);
  }
  return result;
}

id sub_1000D2888@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "isLineOcclusionAlphaBlendingEnabled");
  *a2 = (_BYTE)result;
  return result;
}

id sub_1000D28B8(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setIsLineOcclusionAlphaBlendingEnabled:", *a1);
}

void sub_1000D28CC(uint64_t a1, void *a2, double a3)
{
  uint64_t v5;
  void (*v6)(double);
  id v7;

  v6 = *(void (**)(double))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v7 = a2;
  v6(a3);
  swift_release(v5);

}

id sub_1000D292C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  void *v11;
  _QWORD v12[4];

  v1 = OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___minorSuggestedMaterial;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___minorSuggestedMaterial);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___minorSuggestedMaterial);
  }
  else
  {
    v4 = sub_100181ABC(5);
    v5 = objc_msgSend(v4, "copy");

    _bridgeAnyObjectToAny(_:)(v12, v5);
    swift_unknownObjectRelease(v5);
    v6 = sub_100018148(0, (unint64_t *)&qword_10048A110, SCNMaterial_ptr);
    if (swift_dynamicCast(&v11, v12, (char *)&type metadata for Any + 8, v6, 6))
      v7 = v11;
    else
      v7 = objc_msgSend(objc_allocWithZone((Class)SCNMaterial), "init");
    v8 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v7;
    v3 = v7;

    v2 = 0;
  }
  v9 = v2;
  return v3;
}

id sub_1000D2A1C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  void *v11;
  _QWORD v12[4];

  v1 = OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___dashedLineMaterial;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___dashedLineMaterial);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___dashedLineMaterial);
  }
  else
  {
    v4 = sub_100181ABC(2);
    v5 = objc_msgSend(v4, "copy");

    _bridgeAnyObjectToAny(_:)(v12, v5);
    swift_unknownObjectRelease(v5);
    v6 = sub_100018148(0, (unint64_t *)&qword_10048A110, SCNMaterial_ptr);
    if (swift_dynamicCast(&v11, v12, (char *)&type metadata for Any + 8, v6, 6))
      v7 = v11;
    else
      v7 = objc_msgSend(objc_allocWithZone((Class)SCNMaterial), "init");
    v8 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v7;
    v3 = v7;

    v2 = 0;
  }
  v9 = v2;
  return v3;
}

id sub_1000D2B0C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  void *v12;
  _QWORD v13[4];

  v2 = *a1;
  v3 = *(void **)(v1 + *a1);
  if (v3)
  {
    v4 = *(id *)(v1 + *a1);
  }
  else
  {
    v5 = sub_100181ABC(1);
    v6 = objc_msgSend(v5, "copy");

    _bridgeAnyObjectToAny(_:)(v13, v6);
    swift_unknownObjectRelease(v6);
    v7 = sub_100018148(0, (unint64_t *)&qword_10048A110, SCNMaterial_ptr);
    if (swift_dynamicCast(&v12, v13, (char *)&type metadata for Any + 8, v7, 6))
      v8 = v12;
    else
      v8 = objc_msgSend(objc_allocWithZone((Class)SCNMaterial), "init");
    v9 = *(void **)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v8;
    v4 = v8;

    v3 = 0;
  }
  v10 = v3;
  return v4;
}

uint64_t sub_1000D2BF8()
{
  uint64_t v0;
  int v1;
  uint64_t result;

  v1 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___isOcclusionInitialized);
  if (v1 != 2)
    return v1 & 1;
  result = 0;
  *(_BYTE *)(v0 + OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___isOcclusionInitialized) = 0;
  return result;
}

id sub_1000D2C20()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  void *v11;
  _QWORD v12[4];

  v1 = OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___visibilityThicknessGuideMaterial;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___visibilityThicknessGuideMaterial);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___visibilityThicknessGuideMaterial);
  }
  else
  {
    v4 = sub_100181ABC(13);
    v5 = objc_msgSend(v4, "copy");

    _bridgeAnyObjectToAny(_:)(v12, v5);
    swift_unknownObjectRelease(v5);
    v6 = sub_100018148(0, (unint64_t *)&qword_10048A110, SCNMaterial_ptr);
    if (swift_dynamicCast(&v11, v12, (char *)&type metadata for Any + 8, v6, 6))
      v7 = v11;
    else
      v7 = objc_msgSend(objc_allocWithZone((Class)SCNMaterial), "init");
    v8 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v7;
    v3 = v7;

    v2 = 0;
  }
  v9 = v2;
  return v3;
}

id sub_1000D2D10()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  void *v11;
  _QWORD v12[4];

  v1 = OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___visibilityGuideMaterial;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___visibilityGuideMaterial);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___visibilityGuideMaterial);
  }
  else
  {
    v4 = sub_100181ABC(11);
    v5 = objc_msgSend(v4, "copy");

    _bridgeAnyObjectToAny(_:)(v12, v5);
    swift_unknownObjectRelease(v5);
    v6 = sub_100018148(0, (unint64_t *)&qword_10048A110, SCNMaterial_ptr);
    if (swift_dynamicCast(&v11, v12, (char *)&type metadata for Any + 8, v6, 6))
      v7 = v11;
    else
      v7 = objc_msgSend(objc_allocWithZone((Class)SCNMaterial), "init");
    v8 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v7;
    v3 = v7;

    v2 = 0;
  }
  v9 = v2;
  return v3;
}

id sub_1000D2E00()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  void *v11;
  _QWORD v12[4];

  v1 = OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___thicknessGuideMaterial;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___thicknessGuideMaterial);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___thicknessGuideMaterial);
  }
  else
  {
    v4 = sub_100181ABC(12);
    v5 = objc_msgSend(v4, "copy");

    _bridgeAnyObjectToAny(_:)(v12, v5);
    swift_unknownObjectRelease(v5);
    v6 = sub_100018148(0, (unint64_t *)&qword_10048A110, SCNMaterial_ptr);
    if (swift_dynamicCast(&v11, v12, (char *)&type metadata for Any + 8, v6, 6))
      v7 = v11;
    else
      v7 = objc_msgSend(objc_allocWithZone((Class)SCNMaterial), "init");
    v8 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v7;
    v3 = v7;

    v2 = 0;
  }
  v9 = v2;
  return v3;
}

id sub_1000D2EF0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  void *v11;
  _QWORD v12[4];

  v1 = OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___plainGuideMaterial;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___plainGuideMaterial);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___plainGuideMaterial);
  }
  else
  {
    v4 = sub_100181ABC(10);
    v5 = objc_msgSend(v4, "copy");

    _bridgeAnyObjectToAny(_:)(v12, v5);
    swift_unknownObjectRelease(v5);
    v6 = sub_100018148(0, (unint64_t *)&qword_10048A110, SCNMaterial_ptr);
    if (swift_dynamicCast(&v11, v12, (char *)&type metadata for Any + 8, v6, 6))
      v7 = v11;
    else
      v7 = objc_msgSend(objc_allocWithZone((Class)SCNMaterial), "init");
    v8 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v7;
    v3 = v7;

    v2 = 0;
  }
  v9 = v2;
  return v3;
}

id sub_1000D2FE0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  void *v11;
  _QWORD v12[4];

  v1 = OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___objectLineMaterial;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___objectLineMaterial);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___objectLineMaterial);
  }
  else
  {
    v4 = sub_100181ABC(6);
    v5 = objc_msgSend(v4, "copy");

    _bridgeAnyObjectToAny(_:)(v12, v5);
    swift_unknownObjectRelease(v5);
    v6 = sub_100018148(0, (unint64_t *)&qword_10048A110, SCNMaterial_ptr);
    if (swift_dynamicCast(&v11, v12, (char *)&type metadata for Any + 8, v6, 6))
      v7 = v11;
    else
      v7 = objc_msgSend(objc_allocWithZone((Class)SCNMaterial), "init");
    v8 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v7;
    v3 = v7;

    v2 = 0;
  }
  v9 = v2;
  return v3;
}

void sub_1000D30D0(uint64_t a1)
{
  sub_1000D30E8(a1, &OBJC_IVAR____TtC7Measure10LineRender_primarySegment);
}

void sub_1000D30DC(uint64_t a1)
{
  sub_1000D30E8(a1, &OBJC_IVAR____TtC7Measure10LineRender_renderedSegment);
}

void sub_1000D30E8(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  _BYTE *v19;
  os_unfair_lock_s *v20;
  unint64_t v21;
  _QWORD v22[6];
  _BYTE v23[32];
  char v24;

  sub_1000D8DD4(a1, (uint64_t)v22);
  v6 = v22[0];
  v5 = v22[1];
  v7 = v22[2];
  v21 = v22[3];
  v8 = v2 + *a2;
  v10 = *(_QWORD *)v8;
  v9 = *(_QWORD *)(v8 + 8);
  v12 = *(_QWORD *)(v8 + 16);
  v11 = *(_QWORD *)(v8 + 24);
  v13 = *(_BYTE *)(v8 + 32);
  sub_1000D8DD4(a1, v8);
  if ((v13 & 1) != 0)
  {
    sub_1000D8DD4(a1, (uint64_t)v23);
    if ((v24 & 1) != 0)
      return;
    goto LABEL_6;
  }
  v14 = sub_1000D8DD4(a1, (uint64_t)v23);
  if ((v24 & 1) != 0)
    goto LABEL_6;
  v15.n128_u64[0] = v10;
  v15.n128_u64[1] = v9;
  v16.n128_u64[0] = v12;
  v16.n128_u64[1] = v11;
  v17.n128_u64[0] = v6;
  v17.n128_u64[1] = v5;
  v18.n128_u64[0] = v7;
  v18.n128_u64[1] = v21;
  if ((Segment.isEqual(to:)(v14, v17, v18, v15, v16) & 1) == 0)
  {
LABEL_6:
    v19 = (_BYTE *)(v2 + OBJC_IVAR____TtC7Measure10LineRender__needsRendering);
    if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC7Measure10LineRender__needsRendering) & 1) == 0)
    {
      v20 = (os_unfair_lock_s *)sub_1000D3494();
      os_unfair_lock_lock(v20);
      *v19 = 1;
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v2 + OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___lock));
    }
  }
}

void sub_1000D31E8()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(_QWORD *__return_ptr, __n128);
  __n128 v3;
  void *v4;
  id v5;
  uint64_t v6;
  __n128 v7;
  __n128 *v8;
  __n128 *v9;
  __n128 v10;
  __n128 v11;
  __n128 v12;
  __n128 v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int32x4_t v17;
  float32x2_t v18;
  float32x2_t v19;
  __n128 v20;
  uint64_t v21;
  double v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  __n128 *v26;
  float32x4_t v27;
  float32x4_t v28;
  uint64_t v29;
  void *v30;
  float32x4_t v31;
  float32x4_t v32;
  float v33;
  id v34;
  void *v35;
  id v36;
  double v37;
  __n128 v38;
  __n128 v39;
  float32x4_t v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  __n128 v45;
  __n128 v46;
  __n128 v47;
  __n128 v48;
  __n128 v49;
  __n128 v50;
  __n128 v51;
  float32x4_t v52;
  __n128 v53;
  _QWORD __src[64];
  _BYTE __dst[512];

  v1 = v0;
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC7Measure10LineRender_isOnVerticalGuide) == 1)
  {
    v2 = *(void (**)(_QWORD *__return_ptr, __n128))(**(_QWORD **)(v0
                                                                           + OBJC_IVAR____TtC7Measure10LineRender__arframe)
                                                             + 144);
    v3 = swift_retain();
    v2(__src, v3);
    swift_release();
    memcpy(__dst, __src, sizeof(__dst));
    v4 = (void *)sub_10008F8B8();
    sub_100012C00((uint64_t)__dst);
    if (v4)
    {
      v5 = objc_msgSend(v4, "camera");

      objc_msgSend(v5, "transform");
      v7.n128_f64[0] = simd_float4x4.forward.getter(v6);
      v51 = v7;
      v8 = (__n128 *)(v1 + OBJC_IVAR____TtC7Measure10LineRender_verticalLineNormalOverride);
      *v8 = v7;
      v8[1].n128_u8[0] = 0;
      v9 = (__n128 *)(v1 + OBJC_IVAR____TtC7Measure10LineRender_endTransforms);
      LODWORD(v37) = 1056964608;
      v10.n128_f64[0] = slerp(transform1:transform2:percent:)(*(__n128 *)(v1 + OBJC_IVAR____TtC7Measure10LineRender_endTransforms), *(__n128 *)(v1 + OBJC_IVAR____TtC7Measure10LineRender_endTransforms + 16), *(__n128 *)(v1 + OBJC_IVAR____TtC7Measure10LineRender_endTransforms + 32), *(__n128 *)(v1 + OBJC_IVAR____TtC7Measure10LineRender_endTransforms + 48), *(__n128 *)(v1 + OBJC_IVAR____TtC7Measure10LineRender_endTransforms + 64), *(__n128 *)(v1 + OBJC_IVAR____TtC7Measure10LineRender_endTransforms + 80), *(__n128 *)(v1 + OBJC_IVAR____TtC7Measure10LineRender_endTransforms + 96), *(__n128 *)(v1 + OBJC_IVAR____TtC7Measure10LineRender_endTransforms + 112), v37);
      v47 = v11;
      v49 = v10;
      v43 = v13;
      v45 = v12;
      *(double *)v14.i64 = simd_float4x4.position.getter(v9[4], v9[5], v9[6], v9[7]);
      v40 = v14;
      *(double *)v15.i64 = simd_float4x4.position.getter(*v9, v9[1], v9[2], v9[3]);
      v16 = vsubq_f32(v40, v15);
      v17 = (int32x4_t)vmulq_f32(v16, v16);
      v17.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v17, 2), vadd_f32(*(float32x2_t *)v17.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v17.i8, 1))).u32[0];
      v18 = vrsqrte_f32((float32x2_t)v17.u32[0]);
      v19 = vmul_f32(v18, vrsqrts_f32((float32x2_t)v17.u32[0], vmul_f32(v18, v18)));
      v41 = (__n128)vmulq_n_f32(v16, vmul_f32(v19, vrsqrts_f32((float32x2_t)v17.u32[0], vmul_f32(v19, v19))).f32[0]);
      v20.n128_f64[0] = simd_float4x4.position.getter(v49, v47, v45, v43);
      v22 = createTransform(forward:normal:position:)(v21, v41, v51, v20);
      v49.n128_u64[0] = v23;
      v51.n128_f64[0] = v22;
      v45.n128_u64[0] = v25;
      v47.n128_u64[0] = v24;
      objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC7Measure10LineRender_line), "setSimdWorldTransform:");
      objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC7Measure10LineRender_linePrime), "setSimdWorldTransform:", v51.n128_f64[0], v49.n128_f64[0], v47.n128_f64[0], v45.n128_f64[0]);
    }
  }
  v26 = (__n128 *)(v1 + OBJC_IVAR____TtC7Measure10LineRender_endTransforms);
  *(double *)v27.i64 = simd_float4x4.position.getter(*(__n128 *)(v1 + OBJC_IVAR____TtC7Measure10LineRender_endTransforms + 64), *(__n128 *)(v1 + OBJC_IVAR____TtC7Measure10LineRender_endTransforms + 80), *(__n128 *)(v1 + OBJC_IVAR____TtC7Measure10LineRender_endTransforms + 96), *(__n128 *)(v1 + OBJC_IVAR____TtC7Measure10LineRender_endTransforms + 112));
  v52 = v27;
  *(double *)v28.i64 = simd_float4x4.position.getter(*v26, v26[1], v26[2], v26[3]);
  v29 = OBJC_IVAR____TtC7Measure10LineRender_lineDivisionsRender;
  v30 = *(void **)(v1 + OBJC_IVAR____TtC7Measure10LineRender_lineDivisionsRender);
  if (v30)
  {
    v31 = vsubq_f32(v52, v28);
    v32 = vmulq_f32(v31, v31);
    v33 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 2), vaddq_f32(v32, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 1))).f32[0]);
    v34 = v30;
    sub_10002C3BC(v33);

    v35 = *(void **)(v1 + v29);
    if (v35)
    {
      v50 = v26[1];
      v53 = *v26;
      v46 = v26[3];
      v48 = v26[2];
      v42 = v26[5];
      v44 = v26[4];
      v38 = v26[7];
      v39 = v26[6];
      v36 = v35;
      sub_10002C1C8(v53, v50, v48, v46, v44, v42, v39, v38);

    }
  }
}

_DWORD *sub_1000D3494()
{
  uint64_t v0;
  uint64_t v1;
  _DWORD *result;

  v1 = OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___lock;
  result = *(_DWORD **)(v0 + OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___lock);
  if (!result)
  {
    result = (_DWORD *)swift_slowAlloc(4, -1);
    *result = 0;
    *(_QWORD *)(v0 + v1) = result;
  }
  return result;
}

void sub_1000D34D0(uint64_t a1, char a2, char a3, char a4, char a5, __n128 a6, __n128 a7, __n128 a8, __n128 a9, __n128 a10, __n128 a11, __n128 a12, __n128 a13)
{
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, __n128);
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, __n128);
  __n128 v30;
  id v31;
  char v32;
  BOOL IsBoldTextEnabled;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  __n128 *v44;
  __n128 *v45;
  __n128 *v46;
  __int128 v47;
  __int128 v48;
  char *v49;
  id v50;
  char *v51;
  void *v52;
  id v53;
  char v54;
  float v55;
  float v56;
  id v57;
  char v58;
  float v59;
  float v60;
  id v61;
  char v62;
  float v63;
  double v64;
  double v65;
  void *v66;
  id v67;
  _BYTE *v68;
  uint64_t v69;
  void *v70;
  _BYTE *v71;
  char *v72;
  id v73;
  id v74;
  uint64_t v75;
  void *v76;
  char *v77;
  id v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  id v82;
  unsigned int v83;
  id v84;
  uint64_t v85;
  void *v86;
  id v87;
  uint64_t v88;
  void *v89;
  void *v90;
  id v91;
  id v92;
  void *v93;
  void *v94;
  id v95;
  void *v96;
  id v97;
  void *v98;
  void *v99;
  id v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  id v104;
  id v105;
  void *v106;
  void *v107;
  void *v108;
  id v109;
  uint64_t v110;
  os_unfair_lock_s *v111;
  __int128 v112;
  uint64_t v113;
  objc_class *ObjectType;
  _BYTE v128[24];
  objc_super v129;

  v14 = v13;
  ObjectType = (objc_class *)swift_getObjectType(v13);
  v113 = OBJC_IVAR____TtC7Measure10LineRender_state;
  *(_QWORD *)&v13[OBJC_IVAR____TtC7Measure10LineRender_state] = static MeasureObjectState.default;
  v15 = OBJC_IVAR____TtC7Measure10LineRender_shouldOcclude;
  v13[OBJC_IVAR____TtC7Measure10LineRender_shouldOcclude] = 1;
  v16 = OBJC_IVAR____TtC7Measure10LineRender_hasDivisions;
  v13[OBJC_IVAR____TtC7Measure10LineRender_hasDivisions] = 0;
  v17 = OBJC_IVAR____TtC7Measure10LineRender__render;
  KeyPath = swift_getKeyPath(&unk_1003B5DE0);
  v19 = sub_10000EDC8(&qword_100481998);
  v20 = qword_10047AD88;
  v21 = v14;
  if (v20 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v22 = qword_1004AF890;
  v23 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v19 + 272);
  v24 = swift_retain();
  *(_QWORD *)&v14[v17] = v23(KeyPath, v22, v24);
  v25 = OBJC_IVAR____TtC7Measure10LineRender__arframe;
  v26 = swift_getKeyPath(&unk_1003B5E08);
  v27 = sub_10000EDC8(&qword_10047BBD0);
  v28 = qword_1004AF890;
  v29 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v27 + 272);
  v30 = swift_retain();
  *(_QWORD *)&v21[v25] = v29(v26, v28, v30);
  if (qword_10047A738 != -1)
    swift_once(&qword_10047A738, sub_10000E4DC);
  v31 = (id)qword_1004AF068;
  v32 = UIContentSizeCategory.isAccessibilityCategory.getter(v31);

  IsBoldTextEnabled = 1;
  if ((v32 & 1) == 0)
    IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  v21[OBJC_IVAR____TtC7Measure10LineRender_accessibleSizeOn] = IsBoldTextEnabled;
  v34 = OBJC_IVAR____TtC7Measure10LineRender_line;
  *(_QWORD *)&v21[v34] = objc_msgSend(objc_allocWithZone((Class)SCNNode), "init");
  *(_QWORD *)&v21[OBJC_IVAR____TtC7Measure10LineRender_linePrime] = 0;
  *(_QWORD *)&v21[OBJC_IVAR____TtC7Measure10LineRender_linePrimeGeometry] = 0;
  *(_QWORD *)&v21[OBJC_IVAR____TtC7Measure10LineRender_confirmedLineNodes] = _swiftEmptyArrayStorage;
  v35 = &v21[OBJC_IVAR____TtC7Measure10LineRender_transformAtSnapStart];
  *((_OWORD *)v35 + 2) = 0u;
  *((_OWORD *)v35 + 3) = 0u;
  *(_OWORD *)v35 = 0u;
  *((_OWORD *)v35 + 1) = 0u;
  v35[64] = 1;
  v36 = &v21[OBJC_IVAR____TtC7Measure10LineRender_targetTransformAtSnap];
  *((_OWORD *)v36 + 2) = 0u;
  *((_OWORD *)v36 + 3) = 0u;
  *(_OWORD *)v36 = 0u;
  *((_OWORD *)v36 + 1) = 0u;
  v36[64] = 1;
  v21[OBJC_IVAR____TtC7Measure10LineRender_isMinor] = 0;
  *(_QWORD *)&v21[OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___lineMaterial] = 0;
  *(_QWORD *)&v21[OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___minorSuggestedMaterial] = 0;
  *(_QWORD *)&v21[OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___dashedLineMaterial] = 0;
  *(_QWORD *)&v21[OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___linePrimeMaterial] = 0;
  v37 = &v21[OBJC_IVAR____TtC7Measure10LineRender_snapAnimationPercent];
  *(_DWORD *)v37 = 0;
  v37[4] = 1;
  v21[OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___isOcclusionInitialized] = 2;
  *(_QWORD *)&v21[OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___visibilityThicknessGuideMaterial] = 0;
  *(_QWORD *)&v21[OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___visibilityGuideMaterial] = 0;
  *(_QWORD *)&v21[OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___thicknessGuideMaterial] = 0;
  *(_QWORD *)&v21[OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___plainGuideMaterial] = 0;
  *(_QWORD *)&v21[OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___objectLineMaterial] = 0;
  v38 = OBJC_IVAR____TtC7Measure10LineRender_lineDivisionsRender;
  *(_QWORD *)&v21[OBJC_IVAR____TtC7Measure10LineRender_lineDivisionsRender] = 0;
  v39 = &v21[OBJC_IVAR____TtC7Measure10LineRender_primarySegment];
  *(_OWORD *)v39 = 0u;
  *((_OWORD *)v39 + 1) = 0u;
  v39[32] = 1;
  v40 = &v21[OBJC_IVAR____TtC7Measure10LineRender_renderedSegment];
  *(_OWORD *)v40 = 0u;
  *((_OWORD *)v40 + 1) = 0u;
  v40[32] = 1;
  v41 = &v21[OBJC_IVAR____TtC7Measure10LineRender_startTime];
  v42 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v41, 1, 1, v42);
  v21[OBJC_IVAR____TtC7Measure10LineRender_animationState] = 0;
  v43 = &v21[OBJC_IVAR____TtC7Measure10LineRender_verticalLineNormalOverride];
  *(_QWORD *)v43 = 0;
  *((_QWORD *)v43 + 1) = 0;
  v43[16] = 1;
  v21[OBJC_IVAR____TtC7Measure10LineRender_shouldShowDivisions] = 0;
  *(_DWORD *)&v21[OBJC_IVAR____TtC7Measure10LineRender_dottedLineBreakPointDist] = 1075838976;
  *(_QWORD *)&v21[OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___lock] = 0;
  v21[OBJC_IVAR____TtC7Measure10LineRender__needsRendering] = 0;
  *(_QWORD *)&v21[OBJC_IVAR____TtC7Measure10LineRender_isLabelVisible] = 1;
  v44 = (__n128 *)&v21[OBJC_IVAR____TtC7Measure10LineRender_endTransforms];
  *v44 = a6;
  v44[1] = a7;
  v44[2] = a8;
  v44[3] = a9;
  v44[4] = a10;
  v44[5] = a11;
  v44[6] = a12;
  v44[7] = a13;
  v45 = (__n128 *)&v21[OBJC_IVAR____TtC7Measure10LineRender_currentTransforms];
  *v45 = a6;
  v45[1] = a7;
  v45[2] = a8;
  v45[3] = a9;
  v45[4] = a10;
  v45[5] = a11;
  v45[6] = a12;
  v45[7] = a13;
  v46 = (__n128 *)&v21[OBJC_IVAR____TtC7Measure10LineRender_snapTargetEndTransforms];
  *v46 = a6;
  v46[1] = a7;
  v46[2] = a8;
  v46[3] = a9;
  v46[4] = a10;
  v46[5] = a11;
  v46[6] = a12;
  v46[7] = a13;
  *(double *)&v47 = simd_float4x4.position.getter(a6, a7, a8, a9);
  v112 = v47;
  *(double *)&v48 = simd_float4x4.position.getter(a10, a11, a12, a13);
  v49 = &v21[OBJC_IVAR____TtC7Measure10LineRender_currentPositions];
  *(_OWORD *)v49 = v112;
  *((_OWORD *)v49 + 1) = v48;
  v14[v15] = a3 & 1;
  v14[v16] = a4 & 1;
  *(_QWORD *)&v14[v113] = a1;
  if (qword_10047AC58 != -1)
    swift_once(&qword_10047AC58, sub_1001833E8);
  if (byte_1004AF790 == 1 && (a4 & 1) != 0)
  {
    v50 = objc_allocWithZone((Class)type metadata accessor for LineDivisionsRender());
    v51 = sub_1000288D0(a1, a6, a7, a8, a9, a10, a11, a12, a13);
    v52 = *(void **)&v21[v38];
    *(_QWORD *)&v21[v38] = v51;

  }
  v53 = (id)qword_1004AF068;
  v54 = UIContentSizeCategory.isAccessibilityCategory.getter(v53);

  v55 = 2.0;
  v56 = 2.0;
  if ((a2 & 1) != 0)
  {
    if ((v54 & 1) == 0)
    {
      if (UIAccessibilityIsBoldTextEnabled())
        v56 = 2.0;
      else
        v56 = 1.0;
    }
    v57 = (id)qword_1004AF068;
    v58 = UIContentSizeCategory.isAccessibilityCategory.getter(v57);

    if ((v58 & 1) == 0)
    {
      if (UIAccessibilityIsBoldTextEnabled())
        v55 = 2.0;
      else
        v55 = 1.0;
    }
    v59 = v56 * 0.00075;
    v60 = 0.00075;
  }
  else
  {
    if ((v54 & 1) == 0)
    {
      if (UIAccessibilityIsBoldTextEnabled())
        v56 = 2.0;
      else
        v56 = 1.0;
    }
    v61 = (id)qword_1004AF068;
    v62 = UIContentSizeCategory.isAccessibilityCategory.getter(v61);

    if ((v62 & 1) == 0)
    {
      if (UIAccessibilityIsBoldTextEnabled())
        v55 = 2.0;
      else
        v55 = 1.0;
    }
    v59 = v56 * 0.00225;
    v60 = 0.00225;
  }
  v63 = v55 * v60;
  v64 = v59;
  v65 = v63;
  v66 = (void *)objc_opt_self(SCNBox);
  v67 = objc_msgSend(v66, "boxWithWidth:height:length:chamferRadius:", v64, v65, 0.0, 0.0005);
  *(_QWORD *)&v21[OBJC_IVAR____TtC7Measure10LineRender_lineGeometry] = v67;
  v21[OBJC_IVAR____TtC7Measure10LineRender_isOnVerticalGuide] = a5 & 1;

  v129.receiver = v21;
  v129.super_class = ObjectType;
  v68 = objc_msgSendSuper2(&v129, "init");
  v68[OBJC_IVAR____TtC7Measure10LineRender_isMinor] = a2 & 1;
  v69 = OBJC_IVAR____TtC7Measure10LineRender_lineGeometry;
  v70 = *(void **)&v68[OBJC_IVAR____TtC7Measure10LineRender_lineGeometry];
  if (!v70)
  {
    __break(1u);
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  v71 = v68;
  v72 = v68;
  v73 = v70;
  v74 = sub_1000D2B0C(&OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___lineMaterial);
  objc_msgSend(v73, "setFirstMaterial:", v74);

  v75 = OBJC_IVAR____TtC7Measure10LineRender_line;
  v76 = *(void **)&v72[OBJC_IVAR____TtC7Measure10LineRender_line];
  objc_msgSend(v76, "setGeometry:", *(_QWORD *)&v71[v69]);
  objc_msgSend(v76, "setRenderingOrder:", 3);
  v77 = &v72[OBJC_IVAR____TtC7Measure10LineRender_confirmedLineNodes];
  swift_beginAccess(&v72[OBJC_IVAR____TtC7Measure10LineRender_confirmedLineNodes], v128, 33, 0);
  v78 = v76;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v78);
  v80 = *(_QWORD *)((*(_QWORD *)v77 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v79 = *(_QWORD *)((*(_QWORD *)v77 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v80 >= v79 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v79 > 1, v80 + 1, 1);
  v81 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v80, v78);
  specialized Array._endMutation()(v81);
  swift_endAccess(v128);
  if (!objc_msgSend((id)objc_opt_self(Gestalt), "jasperAvailable"))
    goto LABEL_49;
  v82 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v83 = objc_msgSend(v82, "isLineOcclusionEnabled");

  if (!v83 || (a3 & 1) == 0)
    goto LABEL_49;
  v84 = objc_msgSend(objc_allocWithZone((Class)SCNNode), "init");
  v85 = OBJC_IVAR____TtC7Measure10LineRender_linePrime;
  v86 = *(void **)&v72[OBJC_IVAR____TtC7Measure10LineRender_linePrime];
  *(_QWORD *)&v72[OBJC_IVAR____TtC7Measure10LineRender_linePrime] = v84;

  v87 = objc_msgSend(v66, "boxWithWidth:height:length:chamferRadius:", v64, v65, 0.0, 0.0005);
  v88 = OBJC_IVAR____TtC7Measure10LineRender_linePrimeGeometry;
  v89 = *(void **)&v72[OBJC_IVAR____TtC7Measure10LineRender_linePrimeGeometry];
  *(_QWORD *)&v72[OBJC_IVAR____TtC7Measure10LineRender_linePrimeGeometry] = v87;

  v90 = *(void **)&v72[v88];
  if (!v90)
    goto LABEL_59;
  v91 = v90;
  v92 = sub_1000D2B0C(&OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___linePrimeMaterial);
  objc_msgSend(v91, "setFirstMaterial:", v92);

  v93 = *(void **)&v72[v85];
  if (!v93)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  if (!*(_QWORD *)&v72[v88])
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  objc_msgSend(v93, "setGeometry:");
  v94 = *(void **)&v72[v85];
  if (!v94)
  {
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  v95 = objc_msgSend(v94, "geometry");
  if (v95)
  {
    v96 = v95;
    v97 = objc_msgSend(v95, "firstMaterial");

    if (v97)
    {
      objc_msgSend(v97, "setColorBufferWriteMask:", 0);

    }
  }
  v98 = *(void **)&v72[v85];
  if (!v98)
    goto LABEL_63;
  objc_msgSend(v98, "setRenderingOrder:", 1);
  v99 = *(void **)&v72[v85];
  if (!v99)
  {
LABEL_64:
    __break(1u);
    return;
  }
  swift_beginAccess(v77, v128, 33, 0);
  v100 = v99;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v100);
  v102 = *(_QWORD *)((*(_QWORD *)v77 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v101 = *(_QWORD *)((*(_QWORD *)v77 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v102 >= v101 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v101 > 1, v102 + 1, 1);
  v103 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v102, v100);
  specialized Array._endMutation()(v103);
  swift_endAccess(v128);
LABEL_49:
  v104 = sub_1000D2A1C();
  objc_msgSend(v104, "setReadsFromDepthBuffer:", 0);

  v105 = sub_1000D2A1C();
  objc_msgSend(v105, "setWritesToDepthBuffer:", 0);

  v106 = (void *)objc_opt_self(SCNTransaction);
  objc_msgSend(v106, "begin");
  v107 = *(void **)&v72[v75];
  objc_msgSend(v72, "addChildNode:", v107);
  if (*(_QWORD *)&v72[OBJC_IVAR____TtC7Measure10LineRender_linePrime])
    objc_msgSend(v72, "addChildNode:");
  objc_msgSend(v107, "setHidden:", 1, v112);
  if (byte_1004AF790 == 1 && (a4 & 1) != 0)
  {
    v108 = *(void **)&v72[OBJC_IVAR____TtC7Measure10LineRender_lineDivisionsRender];
    if (v108)
    {
      v109 = v108;
      objc_msgSend(v107, "addChildNode:", v109);
      objc_msgSend(v109, "setSimdTransform:", *(double *)matrix_identity_float4x4.columns[0].i64, *(double *)matrix_identity_float4x4.columns[1].i64, *(double *)matrix_identity_float4x4.columns[2].i64, *(double *)matrix_identity_float4x4.columns[3].i64);

    }
  }
  objc_msgSend(v106, "commit");
  sub_1000D4000(0, 0, a6, a7, a8, a9, a10, a11, a12, a13);
  sub_1000DCDB0();
  v110 = OBJC_IVAR____TtC7Measure10LineRender__needsRendering;
  if ((v72[OBJC_IVAR____TtC7Measure10LineRender__needsRendering] & 1) == 0)
  {
    v111 = (os_unfair_lock_s *)sub_1000D3494();
    os_unfair_lock_lock(v111);
    v72[v110] = 1;
    os_unfair_lock_unlock(*(os_unfair_lock_t *)&v72[OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___lock]);
  }

}

void sub_1000D4000(char a1, char a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7, __n128 a8, __n128 a9, __n128 a10)
{
  char *v10;
  __int128 v13;
  float32x2_t v14;
  float v15;
  float v16;
  float32x4_t v17;
  float32x4_t v18;
  float v19;
  void *v20;
  void *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  char *v29;
  __n128 *v30;
  void *v31;
  uint64_t v32;
  void *v33;
  char *v34;
  id v35;
  __n128 *v36;
  float32x2_t v37;
  float32x2_t v38;
  __n128 v39;
  __n128 v40;
  uint64_t v41;
  double v42;
  double v43;
  unint64_t v44;
  double v45;
  void *v46;
  void *v47;
  id v48;
  void *v49;
  float *v50;
  __n128 *v51;
  char *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  void *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  __n128 v68;
  double v77;
  double v78;
  __int128 v79;
  double v80;
  _QWORD aBlock[7];
  id v82;

  *(double *)&v13 = simd_float4x4.position.getter(a7, a8, a9, a10);
  v79 = v13;
  *(double *)&v14 = simd_float4x4.position.getter(a3, a4, a5, a6);
  *(float32x2_t *)v17.f32 = vsub_f32(*(float32x2_t *)&v79, v14);
  v16 = v15;
  v17.f32[2] = *((float *)&v79 + 2) - v15;
  v18 = vmulq_f32(v17, v17);
  v19 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1))).f32[0];
  v77 = *(double *)&v14;
  if (v19 > 0.00000011921)
  {
    v20 = (void *)objc_opt_self(SCNTransaction);
    objc_msgSend(v20, "begin");
    objc_msgSend(v20, "setAnimationDuration:", 0.0);
    v21 = *(void **)&v10[OBJC_IVAR____TtC7Measure10LineRender_line];
    objc_msgSend(v21, "setHidden:", 0);
    objc_msgSend(v20, "commit");
    if ((a1 & 1) != 0)
    {
      objc_msgSend(v21, "removeAllActions");
      v22 = *(_OWORD *)&v10[OBJC_IVAR____TtC7Measure10LineRender_currentTransforms + 16];
      v23 = *(_OWORD *)&v10[OBJC_IVAR____TtC7Measure10LineRender_currentTransforms + 32];
      v24 = *(_OWORD *)&v10[OBJC_IVAR____TtC7Measure10LineRender_currentTransforms + 48];
      v25 = *(_OWORD *)&v10[OBJC_IVAR____TtC7Measure10LineRender_currentTransforms + 64];
      v26 = *(_OWORD *)&v10[OBJC_IVAR____TtC7Measure10LineRender_currentTransforms + 80];
      v27 = *(_OWORD *)&v10[OBJC_IVAR____TtC7Measure10LineRender_currentTransforms + 96];
      v28 = *(_OWORD *)&v10[OBJC_IVAR____TtC7Measure10LineRender_currentTransforms + 112];
      v29 = &v10[OBJC_IVAR____TtC7Measure10LineRender_endTransforms];
      *(_OWORD *)v29 = *(_OWORD *)&v10[OBJC_IVAR____TtC7Measure10LineRender_currentTransforms];
      *((_OWORD *)v29 + 1) = v22;
      *((_OWORD *)v29 + 2) = v23;
      *((_OWORD *)v29 + 3) = v24;
      *((_OWORD *)v29 + 4) = v25;
      *((_OWORD *)v29 + 5) = v26;
      *((_OWORD *)v29 + 6) = v27;
      *((_OWORD *)v29 + 7) = v28;
      v30 = (__n128 *)&v10[OBJC_IVAR____TtC7Measure10LineRender_snapTargetEndTransforms];
      *v30 = a3;
      v30[1] = a4;
      v30[2] = a5;
      v30[3] = a6;
      v30[4] = a7;
      v30[5] = a8;
      v30[6] = a9;
      v30[7] = a10;
      v31 = (void *)objc_opt_self(SCNAction);
      v32 = swift_allocObject(&unk_100445230, 24, 7);
      *(_QWORD *)(v32 + 16) = v10;
      aBlock[4] = sub_1000D91DC;
      aBlock[5] = v32;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1000D28CC;
      aBlock[3] = &unk_100445248;
      v33 = _Block_copy(aBlock);
      v34 = v10;
      swift_release();
      v35 = objc_msgSend(v31, "customActionWithDuration:actionBlock:", v33, 0.5);
      _Block_release(v33);
      objc_msgSend(v21, "runAction:", v35);

      return;
    }
    if ((a2 & 1) != 0)
    {
      v50 = (float *)&v10[OBJC_IVAR____TtC7Measure10LineRender_snapAnimationPercent];
      if ((v10[OBJC_IVAR____TtC7Measure10LineRender_snapAnimationPercent + 4] & 1) == 0
        && vabds_f32(1.0, *v50) > 0.0001)
      {
        v51 = (__n128 *)&v10[OBJC_IVAR____TtC7Measure10LineRender_snapTargetEndTransforms];
        *v51 = a3;
        v51[1] = a4;
        v51[2] = a5;
        v51[3] = a6;
        v51[4] = a7;
        v51[5] = a8;
        v51[6] = a9;
        v51[7] = a10;
        return;
      }
      sub_1000D8184(a3, a4, a5, a6, a7, a8, a9, a10);
      v59 = (uint64_t *)&v10[OBJC_IVAR____TtC7Measure10LineRender_confirmedLineNodes];
      swift_beginAccess(&v10[OBJC_IVAR____TtC7Measure10LineRender_confirmedLineNodes], aBlock, 0, 0);
      v60 = *v59;
      if ((unint64_t)v60 >> 62)
      {
        if (v60 < 0)
          v66 = v60;
        else
          v66 = v60 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain_n(v60, 2);
        v61 = _CocoaArrayWrapper.endIndex.getter(v66);
        if (v61)
        {
LABEL_26:
          if (v61 >= 1)
          {
            v62 = 0;
            do
            {
              if ((v60 & 0xC000000000000001) != 0)
                v63 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v62, v60);
              else
                v63 = *(id *)(v60 + 8 * v62 + 32);
              v64 = v63;
              ++v62;
              v82 = v63;
              sub_1000D8E1C(&v82, (uint64_t)v10, v77, *(double *)&v79);

            }
            while (v61 != v62);
            goto LABEL_41;
          }
          goto LABEL_43;
        }
      }
      else
      {
        v61 = *(_QWORD *)((v60 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain_n(v60, 2);
        if (v61)
          goto LABEL_26;
      }
LABEL_41:
      swift_bridgeObjectRelease_n(v60, 2);
      *v50 = 0.0;
      *((_BYTE *)v50 + 4) = 1;
      return;
    }
    sub_1000D8184(a3, a4, a5, a6, a7, a8, a9, a10);
    v52 = &v10[OBJC_IVAR____TtC7Measure10LineRender_snapAnimationPercent];
    *(_DWORD *)v52 = 0;
    v52[4] = 1;
    v53 = (uint64_t *)&v10[OBJC_IVAR____TtC7Measure10LineRender_confirmedLineNodes];
    swift_beginAccess(&v10[OBJC_IVAR____TtC7Measure10LineRender_confirmedLineNodes], aBlock, 0, 0);
    v54 = *v53;
    if ((unint64_t)v54 >> 62)
    {
      if (v54 < 0)
        v65 = v54;
      else
        v65 = v54 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n(v54, 2);
      v55 = _CocoaArrayWrapper.endIndex.getter(v65);
      if (!v55)
        goto LABEL_36;
    }
    else
    {
      v55 = *(_QWORD *)((v54 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n(v54, 2);
      if (!v55)
        goto LABEL_36;
    }
    if (v55 < 1)
    {
      __break(1u);
LABEL_43:
      __break(1u);
      return;
    }
    v56 = 0;
    do
    {
      if ((v54 & 0xC000000000000001) != 0)
        v57 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v56, v54);
      else
        v57 = *(id *)(v54 + 8 * v56 + 32);
      v58 = v57;
      ++v56;
      v82 = v57;
      sub_1000D8E1C(&v82, (uint64_t)v10, v77, *(double *)&v79);

    }
    while (v55 != v56);
LABEL_36:
    swift_bridgeObjectRelease_n(v54, 2);
    return;
  }
  v36 = (__n128 *)&v10[OBJC_IVAR____TtC7Measure10LineRender_endTransforms];
  *v36 = a3;
  v36[1] = a4;
  v36[2] = a5;
  v36[3] = a6;
  v36[4] = a7;
  v36[5] = a8;
  v36[6] = a9;
  v36[7] = a10;
  v37 = vrsqrte_f32((float32x2_t)LODWORD(v19));
  v38 = vmul_f32(v37, vrsqrts_f32((float32x2_t)LODWORD(v19), vmul_f32(v37, v37)));
  v68 = (__n128)vmulq_n_f32(v17, vmul_f32(v38, vrsqrts_f32((float32x2_t)LODWORD(v19), vmul_f32(v38, v38))).f32[0]);
  v39.n128_f64[0] = simd_float4x4.up.getter(a3, a4, a5, a6);
  v40.n128_u64[0] = (unint64_t)vmul_f32(vadd_f32(*(float32x2_t *)&v79, *(float32x2_t *)&v77), (float32x2_t)0x3F0000003F000000);
  v40.n128_f32[2] = (float)(*((float *)&v79 + 2) + v16) * 0.5;
  v40.n128_u32[3] = 0;
  v42 = createTransform(forward:normal:position:)(v41, v68, v39, v40);
  v78 = v43;
  v80 = v42;
  v67 = v45;
  v68.n128_u64[0] = v44;
  v46 = *(void **)&v10[OBJC_IVAR____TtC7Measure10LineRender_line];
  objc_msgSend(v46, "setSimdWorldTransform:");
  objc_msgSend(*(id *)&v10[OBJC_IVAR____TtC7Measure10LineRender_linePrime], "setSimdWorldTransform:", v80, v78, v68.n128_f64[0], v67);
  if (qword_10047AC58 != -1)
    swift_once(&qword_10047AC58, sub_1001833E8);
  if (byte_1004AF790 == 1 && v10[OBJC_IVAR____TtC7Measure10LineRender_hasDivisions] == 1)
  {
    v47 = *(void **)&v10[OBJC_IVAR____TtC7Measure10LineRender_lineDivisionsRender];
    if (v47)
    {
      if (*((_BYTE *)v47 + OBJC_IVAR____TtC7Measure19LineDivisionsRender_showState))
      {
        v48 = v47;
        sub_10002C1C8(a3, a4, a5, a6, a7, a8, a9, a10);

      }
    }
  }
  v49 = (void *)objc_opt_self(SCNTransaction);
  objc_msgSend(v49, "begin");
  objc_msgSend(v49, "setAnimationDuration:", 0.0);
  objc_msgSend(v46, "setHidden:", 1);
  objc_msgSend(v49, "commit");
}

id sub_1000D46D4()
{
  void *v0;
  objc_class *ObjectType;
  _DWORD *v2;
  objc_super v4;

  ObjectType = (objc_class *)swift_getObjectType(v0);
  v2 = sub_1000D3494();
  swift_slowDealloc(v2, -1, -1);
  v4.receiver = v0;
  v4.super_class = ObjectType;
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t sub_1000D48BC()
{
  return type metadata accessor for LineRender(0);
}

uint64_t type metadata accessor for LineRender(uint64_t a1)
{
  uint64_t result;

  result = qword_1004826F0;
  if (!qword_1004826F0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LineRender);
  return result;
}

void sub_1000D4900()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  os_unfair_lock_s *v12;
  uint64_t v13;
  __n128 *v14;
  __int128 v15;
  __int128 v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  id v24;
  void *v25;
  id v26;
  uint64_t v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  float v34;
  Class isa;
  NSString v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  char v45[24];
  _BYTE v46[24];
  id v47[4];

  v1 = v0;
  v2 = sub_10000EDC8((uint64_t *)&unk_10047E440);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v42 = (uint64_t)&v39 - v6;
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((sub_1000D2BF8() & 1) == 0)
    sub_1000D5028();
  v11 = OBJC_IVAR____TtC7Measure10LineRender__needsRendering;
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC7Measure10LineRender__needsRendering) == 1)
  {
    sub_1000D5960(*(id *)(v0 + OBJC_IVAR____TtC7Measure10LineRender_state));
    if (*(_BYTE *)(v0 + v11) == 1)
    {
      v12 = (os_unfair_lock_s *)sub_1000D3494();
      os_unfair_lock_lock(v12);
      *(_BYTE *)(v0 + v11) = 0;
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v0 + OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___lock));
    }
  }
  v13 = OBJC_IVAR____TtC7Measure10LineRender_state;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC7Measure10LineRender_state) == 9)
  {
    v14 = (__n128 *)(v0 + OBJC_IVAR____TtC7Measure10LineRender_endTransforms);
    *(double *)&v15 = simd_float4x4.position.getter(*(__n128 *)(v1 + OBJC_IVAR____TtC7Measure10LineRender_endTransforms), *(__n128 *)(v1 + OBJC_IVAR____TtC7Measure10LineRender_endTransforms + 16), *(__n128 *)(v1 + OBJC_IVAR____TtC7Measure10LineRender_endTransforms + 32), *(__n128 *)(v1 + OBJC_IVAR____TtC7Measure10LineRender_endTransforms + 48));
    v44 = v15;
    *(double *)&v16 = simd_float4x4.position.getter(v14[4], v14[5], v14[6], v14[7]);
    v43 = v16;
    v17 = (uint64_t *)(v1 + OBJC_IVAR____TtC7Measure10LineRender_confirmedLineNodes);
    swift_beginAccess(v1 + OBJC_IVAR____TtC7Measure10LineRender_confirmedLineNodes, v45, 0, 0);
    v18 = *v17;
    v40 = v10;
    v41 = v8;
    v8 = v7;
    v7 = (uint64_t)v5;
    if ((unint64_t)v18 >> 62)
    {
      if (v18 < 0)
        v23 = v18;
      else
        v23 = v18 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n(v18, 2);
      v19 = _CocoaArrayWrapper.endIndex.getter(v23);
      if (v19)
        goto LABEL_9;
    }
    else
    {
      v19 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n(v18, 2);
      if (v19)
      {
LABEL_9:
        if (v19 < 1)
        {
          __break(1u);
          goto LABEL_34;
        }
        v20 = 0;
        do
        {
          if ((v18 & 0xC000000000000001) != 0)
            v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v20, v18);
          else
            v21 = *(id *)(v18 + 8 * v20 + 32);
          v22 = v21;
          ++v20;
          v47[0] = v21;
          sub_1000D8E1C(v47, v1, *(double *)&v44, *(double *)&v43);

        }
        while (v19 != v20);
      }
    }
    swift_bridgeObjectRelease_n(v18, 2);
    v5 = (char *)v7;
    v7 = v8;
    v10 = v40;
    v8 = v41;
  }
  if (!objc_msgSend((id)objc_opt_self(Gestalt), "jasperAvailable"))
    return;
  if (*(_QWORD *)(v1 + v13) != 8)
    return;
  v24 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC7Measure10LineRender_line), "geometry");
  if (!v24)
    return;
  v25 = v24;
  v26 = objc_msgSend(v24, "materials");

  v27 = sub_100018148(0, (unint64_t *)&qword_10048A110, SCNMaterial_ptr);
  v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v26, v27);

  if ((unint64_t)v18 >> 62)
  {
LABEL_34:
    if (v18 < 0)
      v37 = v18;
    else
      v37 = v18 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v18);
    v38 = _CocoaArrayWrapper.endIndex.getter(v37);
    swift_bridgeObjectRelease(v18);
    if (v38)
      goto LABEL_25;
LABEL_38:
    swift_bridgeObjectRelease(v18);
    return;
  }
  if (!*(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_38;
LABEL_25:
  if ((v18 & 0xC000000000000001) != 0)
  {
    v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v18);
  }
  else
  {
    if (!*(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    v28 = *(id *)(v18 + 32);
  }
  v29 = v28;
  swift_bridgeObjectRelease(v18);
  sub_1000D73E8();
  v30 = v1 + OBJC_IVAR____TtC7Measure10LineRender_startTime;
  swift_beginAccess(v1 + OBJC_IVAR____TtC7Measure10LineRender_startTime, v47, 0, 0);
  v31 = v42;
  sub_1000C219C(v30, v42);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v31, 1, v7) == 1)
  {
    sub_1000C21E4(v31);
  }
  else
  {
    v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 32))(v10, v31, v7);
    v33 = Date.timeIntervalSinceNow.getter(v32);
    v34 = powf((float)(fabsf(v33) / -0.8) + 1.0, 5.0);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    if ((float)(1.0 - v34) >= 1.0)
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v5, 1, 1, v7);
      swift_beginAccess(v30, v46, 33, 0);
      sub_1000C2224((uint64_t)v5, v30);
      swift_endAccess(v46);
      *(_BYTE *)(v1 + OBJC_IVAR____TtC7Measure10LineRender_animationState) = 2;
    }
  }
  isa = Float._bridgeToObjectiveC()().super.super.isa;
  v36 = String._bridgeToObjectiveC()();
  objc_msgSend(v29, "setValue:forKeyPath:", isa, v36);

}

void sub_1000D4E10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[24];

  v1 = sub_10000EDC8((uint64_t *)&unk_10047E440);
  __chkstk_darwin(v1);
  v3 = &v8[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v4 = objc_msgSend((id)objc_opt_self(Gestalt), "jasperAvailable");
  if ((_DWORD)v4)
  {
    if (*(_QWORD *)(v0 + OBJC_IVAR____TtC7Measure10LineRender_state) == 8)
    {
      Date.init()(v4);
      v5 = type metadata accessor for Date(0);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v3, 0, 1, v5);
      v6 = v0 + OBJC_IVAR____TtC7Measure10LineRender_startTime;
      swift_beginAccess(v0 + OBJC_IVAR____TtC7Measure10LineRender_startTime, v8, 33, 0);
      sub_1000C2224((uint64_t)v3, v6);
      swift_endAccess(v8);
      *(_BYTE *)(v0 + OBJC_IVAR____TtC7Measure10LineRender_animationState) = 1;
    }
  }
}

void sub_1000D4F10(void *a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;
  id v6;
  double v7;
  _QWORD v8[6];

  if (objc_msgSend((id)objc_opt_self(Gestalt), "jasperAvailable")
    && *(_QWORD *)(v2 + OBJC_IVAR____TtC7Measure10LineRender_state) == 8)
  {
    v5 = *(void **)(v2 + OBJC_IVAR____TtC7Measure10LineRender_line);
    v6 = objc_msgSend((id)objc_opt_self(SCNAction), "fadeOutWithDuration:", 0.300000012);
    if (a1)
    {
      v8[4] = a1;
      v8[5] = a2;
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 1107296256;
      v8[2] = sub_10003ECA0;
      v8[3] = &unk_100445270;
      a1 = _Block_copy(v8);
      swift_retain();
      *(_QWORD *)&v7 = swift_release().n128_u64[0];
    }
    objc_msgSend(v5, "runAction:completionHandler:", v6, a1, v7);
    _Block_release(a1);

  }
}

void sub_1000D5028()
{
  char **v0;
  char **v1;
  void *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  char **KeyPath;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t ObjectType;
  uint64_t v26;
  id v27;
  NSString v28;
  id v29;
  void *v30;
  id v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  uint64_t v39;
  __n128 v40;
  __n128 v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  id v45;
  Class isa;
  NSString v47;
  Class v48;
  NSString v49;
  Class v50;
  NSString v51;
  Class v52;
  NSString v53;
  Class v54;
  NSString v55;
  Class v56;
  NSString v57;
  Class v58;
  NSString v59;
  Class v60;
  NSString v61;
  uint64_t v62;
  uint64_t v63;
  char **v64;
  char *v65;
  unint64_t v66;
  unint64_t v67;
  id v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  char v72[24];
  _QWORD v73[4];
  char v74[24];
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  char v78[24];
  char v79[24];
  char v80[24];
  uint64_t v81;
  _QWORD v82[7];

  v1 = v0;
  v2 = (void *)objc_opt_self(Gestalt);
  v3 = objc_msgSend(v2, "jasperAvailable");
  v4 = sub_10000EDC8((uint64_t *)&unk_1004866D0);
  if (v3)
  {
    v5 = swift_allocObject(v4, 80, 7);
    *(_OWORD *)(v5 + 16) = xmmword_1003B5C50;
    *(_QWORD *)(v5 + 32) = sub_1000D2B0C(&OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___lineMaterial);
    *(_QWORD *)(v5 + 40) = sub_1000D2B0C(&OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___linePrimeMaterial);
    *(_QWORD *)(v5 + 48) = sub_1000D2C20();
    *(_QWORD *)(v5 + 56) = sub_1000D2D10();
    *(_QWORD *)(v5 + 64) = sub_1000D2E00();
    v6 = sub_1000D2EF0();
    *(_QWORD *)(v5 + 72) = v6;
  }
  else
  {
    v5 = swift_allocObject(v4, 40, 7);
    *(_OWORD *)(v5 + 16) = xmmword_1003B0F00;
    v6 = sub_1000D2B0C(&OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___lineMaterial);
    *(_QWORD *)(v5 + 32) = v6;
  }
  v82[0] = v5;
  specialized Array._endMutation()(v6);
  v7 = v5;
  v81 = v5;
  if (!objc_msgSend(v2, "jasperAvailable")
    || *((_BYTE *)v1 + OBJC_IVAR____TtC7Measure10LineRender_shouldOcclude) != 1
    || (v68 = (id)objc_opt_self(NSUserDefaults),
        v8 = objc_msgSend(v68, "standardUserDefaults"),
        v9 = objc_msgSend(v8, "isLineOcclusionEnabled"),
        v8,
        !v9))
  {
    swift_bridgeObjectRelease(v7);
    return;
  }
  v11 = *(_QWORD *)MeasureCore.shared.unsafeMutableAddressor(v10);
  swift_beginAccess(v11 + 112, v80, 0, 0);
  v12 = *(_QWORD *)(v11 + 112);
  if (!v12)
  {
    swift_bridgeObjectRelease(v7);
    return;
  }
  v13 = objc_msgSend(v68, "standardUserDefaults", swift_retain().n128_f64[0]);
  KeyPath = (char **)swift_getKeyPath(&unk_1003B5E58);
  if (qword_10047A930 != -1)
LABEL_31:
    swift_once(&qword_10047A930, sub_100083368);
  v15 = (void *)*((_QWORD *)&xmmword_1004AF258 + 1);
  if (!*((_QWORD *)&xmmword_1004AF258 + 1))
    goto LABEL_39;
  v16 = (void *)Contexts.PrivateQueue.init(_:)(*((_QWORD *)&xmmword_1004AF258 + 1));
  v17 = swift_allocObject(&unk_1004452A8, 24, 7);
  v64 = v1;
  swift_unknownObjectWeakInit(v17 + 16, v1);
  v18 = swift_allocObject(&unk_1004452D0, 32, 7);
  *(_QWORD *)(v18 + 16) = v17;
  *(_QWORD *)(v18 + 24) = v7;
  v19 = v15;
  swift_bridgeObjectRetain(v7);
  NSUserDefaults.performOnChange<A>(to:on:action:)(KeyPath, v16, sub_1000D9298, v18);

  swift_release();
  swift_release();
  swift_beginAccess(&v81, v79, 0, 0);
  v13 = (id)v81;
  v65 = (char *)v12;
  if ((unint64_t)v81 >> 62)
  {
    if (v81 < 0)
      v63 = v81;
    else
      v63 = v81 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v81);
    v20 = _CocoaArrayWrapper.endIndex.getter(v63);
    v12 = (unint64_t)v13;
    if (v20)
      goto LABEL_12;
LABEL_36:
    swift_bridgeObjectRelease(v12);
    swift_release();
    swift_bridgeObjectRelease(v81);
    *((_BYTE *)v64 + OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___isOcclusionInitialized) = 1;
    return;
  }
  v20 = *(_QWORD *)((v81 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v81);
  v12 = (unint64_t)v13;
  if (!v20)
    goto LABEL_36;
LABEL_12:
  v21 = (uint64_t *)(v65 + 208);
  v67 = v12 & 0xC000000000000001;
  swift_beginAccess(v65 + 208, v78, 0, 0);
  v22 = 4;
  KeyPath = &selRef_renderer_didAddNode_forAnchor_;
  v66 = v12;
  while (1)
  {
    v7 = v22 - 4;
    if (v67)
      v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v22 - 4, v12);
    else
      v29 = *(id *)(v12 + 8 * v22);
    v30 = v29;
    v31 = (id)(v22 - 3);
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (qword_10047AF18 != -1)
      swift_once(&qword_10047AF18, sub_1001963D0);
    v13 = (id)v20;
    v35 = UIColor.rgba.getter();
    v76 = 0u;
    v77 = 0u;
    v75 = 0u;
    if (!*v21)
      break;
    v36 = v32;
    v37 = v33;
    v38 = v34;
    swift_retain();
    ADProcessor.transformer.getter(v39);
    v40 = swift_release();
    Transformer.clipToCameraNormalized.getter(v82, v40);
    v41 = swift_release();
    simd_float3x3.copy(from:)(v82, v41);
    v42 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1003B19E0, v75.f32[0]), (float32x4_t)xmmword_1003B19F0, *(float32x2_t *)v75.f32, 1), (float32x4_t)xmmword_1003B1A00, v75, 2);
    v43 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1003B19E0, v76.f32[0]), (float32x4_t)xmmword_1003B19F0, *(float32x2_t *)v76.f32, 1), (float32x4_t)xmmword_1003B1A00, v76, 2);
    v42.i32[3] = v71.i32[3];
    v44 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1003B19E0, v77.f32[0]), (float32x4_t)xmmword_1003B19F0, *(float32x2_t *)v77.f32, 1), (float32x4_t)xmmword_1003B1A00, v77, 2);
    v43.i32[3] = v70.i32[3];
    v70 = v43;
    v71 = v42;
    v44.i32[3] = v69.i32[3];
    v69 = v44;
    v45 = objc_msgSend(v68, "standardUserDefaults");
    objc_msgSend(v45, "isLineOcclusionAlphaBlendingEnabled");

    isa = CGFloat._bridgeToObjectiveC()().super.super.isa;
    v47 = String._bridgeToObjectiveC()();
    objc_msgSend(v30, "setValue:forKeyPath:", isa, v47);

    SCNVector4.init(_:_:_:_:)(v35, v36, v37, v38);
    v48 = SCNVector4._bridgeToObjectiveC()().super.isa;
    v49 = String._bridgeToObjectiveC()();
    objc_msgSend(v30, "setValue:forKeyPath:", v48, v49);

    v50 = CGFloat._bridgeToObjectiveC()().super.super.isa;
    v51 = String._bridgeToObjectiveC()();
    objc_msgSend(v30, "setValue:forKeyPath:", v50, v51);

    v52 = CGFloat._bridgeToObjectiveC()().super.super.isa;
    v53 = String._bridgeToObjectiveC()();
    objc_msgSend(v30, "setValue:forKeyPath:", v52, v53);

    v54 = CGFloat._bridgeToObjectiveC()().super.super.isa;
    v55 = String._bridgeToObjectiveC()();
    objc_msgSend(v30, "setValue:forKeyPath:", v54, v55);

    SCNVector3.init(_:)(*(double *)v71.i64);
    v56 = SCNVector3._bridgeToObjectiveC()().super.isa;
    v57 = String._bridgeToObjectiveC()();
    v1 = &selRef_renderer_didAddNode_forAnchor_;
    objc_msgSend(v30, "setValue:forKey:", v56, v57);

    SCNVector3.init(_:)(*(double *)v70.i64);
    v58 = SCNVector3._bridgeToObjectiveC()().super.isa;
    v59 = String._bridgeToObjectiveC()();
    objc_msgSend(v30, "setValue:forKey:", v58, v59);

    SCNVector3.init(_:)(*(double *)v69.i64);
    v60 = SCNVector3._bridgeToObjectiveC()().super.isa;
    v61 = String._bridgeToObjectiveC()();
    objc_msgSend(v30, "setValue:forKey:", v60, v61);

    v62 = *v21;
    if (!*v21)
      goto LABEL_38;
    swift_beginAccess(v62 + 242, v74, 0, 0);
    if (*(_BYTE *)(v62 + 242) == 1)
    {
      swift_beginAccess(v62 + 256, v72, 0, 0);
      v24 = *(_QWORD *)(v62 + 256);
      if (!v24)
      {

        goto LABEL_16;
      }
      swift_unknownObjectRetain_n(*(_QWORD *)(v62 + 256), 2);
    }
    else
    {
      v23 = swift_retain();
      v24 = ADProcessor.outputDepthTexture.getter(v23);
      swift_release();
      swift_unknownObjectRetain(v24);
    }
    ObjectType = swift_getObjectType(v24);
    v73[3] = ObjectType;
    v73[0] = v24;
    swift_unknownObjectRetain(v24);
    v26 = _bridgeAnythingToObjectiveC<A>(_:)(v73, ObjectType);
    v27 = objc_msgSend((id)objc_opt_self(SCNMaterialProperty), "materialPropertyWithContents:", v26);
    swift_unknownObjectRelease(v26);
    sub_10000F690(v73);
    v28 = String._bridgeToObjectiveC()();
    objc_msgSend(v30, "setValue:forKey:", v27, v28);

    swift_unknownObjectRelease_n(v24, 2);
    v12 = v66;
LABEL_16:
    ++v22;
    v20 = (uint64_t)v13;
    if (v31 == v13)
      goto LABEL_36;
  }
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
}

uint64_t sub_1000D5960(id a1)
{
  char *v1;
  char **v2;
  char *v3;
  uint64_t v5;
  __int128 *v6;
  id v7;
  void *v8;
  id v9;
  char v10;
  float v11;
  id v12;
  char v13;
  double v14;
  double v15;
  char v16;
  BOOL v17;
  double v18;
  double v19;
  id v20;
  char v21;
  void *v22;
  id v23;
  void *v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  char v31;
  double v32;
  double v33;
  char v34;
  BOOL v35;
  double v36;
  double v37;
  id v38;
  char v39;
  char v40;
  void *v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  uint64_t v47;
  id v48;
  char v49;
  double v50;
  double v51;
  char v52;
  BOOL v53;
  double v54;
  double v55;
  char v56;
  float v57;
  char v58;
  BOOL v59;
  float v60;
  float v61;
  double v62;
  double v63;
  void *v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  __n128 *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  void *v75;
  void *v76;
  id v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  id v85;
  char *v86;
  uint64_t v87;
  id v88;
  char v89;
  char v90;
  void *v91;
  id v92;
  id v93;
  id v94;
  id v95;
  id v96;
  Class v97;
  id v98;
  char v99;
  char v100;
  void *v101;
  id v102;
  void *v103;
  char **v104;
  id v105;
  id v106;
  void *v107;
  id v108;
  id v109;
  char v110;
  float v111;
  float v112;
  char v113;
  float v114;
  id v115;
  char v116;
  char v117;
  float v118;
  float v119;
  void *v120;
  float32x4_t v121;
  int8x16_t *v122;
  char v123;
  double v124;
  int8x16_t v125;
  float32x4_t v126;
  int8x16_t v127;
  __n128 *v128;
  int8x16_t v129;
  float32x4_t v130;
  float32x4_t v131;
  uint64_t v132;
  int8x16_t v133;
  float32x4_t v134;
  float32x4_t v135;
  int8x16_t *v136;
  int8x16_t v137;
  double *v138;
  uint64_t v139;
  double v140;
  int8x16_t v141;
  __n128 *v142;
  int8x16_t v143;
  float32x4_t v144;
  float32x4_t v145;
  uint64_t v146;
  int8x16_t v147;
  float32x4_t v148;
  float32x4_t v149;
  id v150;
  id v151;
  Class v152;
  NSString v153;
  Class v154;
  NSString v155;
  id v156;
  Class v157;
  NSString v158;
  NSNumber v159;
  id v160;
  Class v161;
  NSString v162;
  id v163;
  Class isa;
  NSString v165;
  Class v166;
  id v167;
  id v168;
  uint64_t v169;
  __n128 *v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  id v174;
  void *v175;
  uint64_t v176;
  int8x16_t v178;
  float32x2_t v179;
  unsigned int v180;
  float32x2_t v181;
  void *v182;
  double v183;
  int8x16_t v184;
  int8x16_t v185;
  double v186;
  double v187;
  int8x16_t v188;
  double v189;
  double v190;
  double v191;
  id v192;
  id v193[3];
  _QWORD v194[46];

  v3 = v1;
  v5 = objc_opt_self(SCNTransaction);
  objc_msgSend((id)v5, "begin");
  objc_msgSend((id)v5, "setAnimationDuration:", 0.0);
  v6 = (__int128 *)&selRef_renderer_didAddNode_forAnchor_;
  objc_msgSend(v3, "setOpacity:", 1.0);
  switch((unint64_t)a1)
  {
    case 0uLL:
    case 2uLL:
    case 5uLL:
    case 7uLL:
      if (objc_msgSend((id)objc_opt_self(Gestalt), "jasperAvailable")
        && (v3[OBJC_IVAR____TtC7Measure10LineRender_shouldOcclude] & 1) == 0)
      {
        v7 = sub_1000D2FE0();
        v8 = *(void **)&v3[OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___lineMaterial];
        *(_QWORD *)&v3[OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___lineMaterial] = v7;

      }
      v2 = (char **)OBJC_IVAR____TtC7Measure10LineRender_isMinor;
      if (v3[OBJC_IVAR____TtC7Measure10LineRender_isMinor] == 1)
      {
        if (qword_10047A738 != -1)
          goto LABEL_214;
        goto LABEL_7;
      }
      if (qword_10047A738 != -1)
        swift_once(&qword_10047A738, sub_10000E4DC);
      v20 = (id)qword_1004AF068;
      v21 = UIContentSizeCategory.isAccessibilityCategory.getter(v20);

      if ((v21 & 1) != 0)
      {
        v11 = 0.0045;
      }
      else if (UIAccessibilityIsBoldTextEnabled())
      {
        v11 = 0.0045;
      }
      else
      {
        v11 = 0.00225;
      }
      a1 = (id)qword_1004AF068;
      v58 = UIContentSizeCategory.isAccessibilityCategory.getter(a1);

      if ((v58 & 1) != 0)
      {
        v57 = 0.0045;
        goto LABEL_83;
      }
      v59 = !UIAccessibilityIsBoldTextEnabled();
      v60 = 0.00225;
      v61 = 0.0045;
      goto LABEL_80;
    case 1uLL:
      v22 = *(void **)&v3[OBJC_IVAR____TtC7Measure10LineRender_line];
      v23 = objc_msgSend(v22, "geometry");
      if (v23)
      {
        v24 = v23;
        v2 = (char **)objc_msgSend(v23, "firstMaterial");

        if (v2)
        {
          v25 = objc_msgSend(v2, "diffuse");

          if (qword_10047AEE0 != -1)
            swift_once(&qword_10047AEE0, sub_100196344);
          objc_msgSend(v25, "setContents:", qword_1004AF9D8);

        }
      }
      v26 = objc_msgSend(v22, "geometry");
      if (v26)
      {
        v27 = v26;
        v28 = objc_msgSend(v26, "firstMaterial");

        if (v28)
        {
          v29 = objc_msgSend(v28, "emission");

          if (qword_10047AF08 != -1)
            swift_once(&qword_10047AF08, sub_1001963A8);
          objc_msgSend(v29, "setContents:", qword_1004AFA00);

        }
      }
      objc_msgSend(v3, "setOpacity:", 0.0);
      objc_msgSend(v3, "setHidden:", 1);
      goto LABEL_199;
    case 3uLL:
    case 4uLL:
      objc_msgSend(v3, "setOpacity:", 0.7);
      if (v3[OBJC_IVAR____TtC7Measure10LineRender_isMinor] == 1)
      {
        if (qword_10047A738 != -1)
          swift_once(&qword_10047A738, sub_10000E4DC);
        v12 = (id)qword_1004AF068;
        v13 = UIContentSizeCategory.isAccessibilityCategory.getter(v12);

        v14 = 0.00150000001;
        v15 = 0.00150000001;
        if ((v13 & 1) == 0)
        {
          if (UIAccessibilityIsBoldTextEnabled())
            v15 = 0.00150000001;
          else
            v15 = 0.000750000007;
        }
        a1 = (id)qword_1004AF068;
        v16 = UIContentSizeCategory.isAccessibilityCategory.getter(a1);

        if ((v16 & 1) == 0)
        {
          v17 = !UIAccessibilityIsBoldTextEnabled();
          v18 = 0.000750000007;
          v19 = 0.00150000001;
          goto LABEL_50;
        }
      }
      else
      {
        if (qword_10047A738 != -1)
          swift_once(&qword_10047A738, sub_10000E4DC);
        v38 = (id)qword_1004AF068;
        v39 = UIContentSizeCategory.isAccessibilityCategory.getter(v38);

        v14 = 0.00899999961;
        v15 = 0.00899999961;
        if ((v39 & 1) == 0)
        {
          if (UIAccessibilityIsBoldTextEnabled())
            v15 = 0.00899999961;
          else
            v15 = 0.00449999981;
        }
        a1 = (id)qword_1004AF068;
        v40 = UIContentSizeCategory.isAccessibilityCategory.getter(a1);

        if ((v40 & 1) == 0)
        {
          v17 = !UIAccessibilityIsBoldTextEnabled();
          v18 = 0.00449999981;
          v19 = 0.00899999961;
LABEL_50:
          if (v17)
            v14 = v18;
          else
            v14 = v19;
        }
      }
      objc_msgSend(v3, "setHidden:", 0);
      v41 = *(void **)&v3[OBJC_IVAR____TtC7Measure10LineRender_lineGeometry];
      if (v41)
      {
        objc_msgSend(*(id *)&v3[OBJC_IVAR____TtC7Measure10LineRender_lineGeometry], "setWidth:", v15);
        objc_msgSend(v41, "setHeight:", v14);
        v42 = sub_1000D2A1C();
        objc_msgSend(v41, "setFirstMaterial:", v42);

        v43 = sub_1000D2A1C();
        v44 = objc_msgSend(v43, "diffuse");

        if (qword_10047AEC8 != -1)
          swift_once(&qword_10047AEC8, sub_1001962D8);
        objc_msgSend(v44, "setContents:", qword_1004AF9C0);

        v45 = sub_1000D2A1C();
        v46 = objc_msgSend(v45, "emission");

        if (qword_10047AF00 != -1)
          swift_once(&qword_10047AF00, sub_100196394);
        v47 = qword_1004AF9F8;
        goto LABEL_120;
      }
LABEL_216:
      __break(1u);
LABEL_217:
      __break(1u);
      goto LABEL_218;
    case 6uLL:
      objc_msgSend(v3, "setOpacity:", 0.7);
      v2 = (char **)OBJC_IVAR____TtC7Measure10LineRender_isMinor;
      if (v3[OBJC_IVAR____TtC7Measure10LineRender_isMinor] == 1)
      {
        if (qword_10047A738 != -1)
          swift_once(&qword_10047A738, sub_10000E4DC);
        v6 = &xmmword_1004AF000;
        v48 = (id)qword_1004AF068;
        v49 = UIContentSizeCategory.isAccessibilityCategory.getter(v48);

        v50 = 0.00150000001;
        v51 = 0.00150000001;
        if ((v49 & 1) == 0)
        {
          if (UIAccessibilityIsBoldTextEnabled())
            v51 = 0.00150000001;
          else
            v51 = 0.000750000007;
        }
        a1 = (id)qword_1004AF068;
        v52 = UIContentSizeCategory.isAccessibilityCategory.getter(a1);

        if ((v52 & 1) == 0)
        {
          v53 = !UIAccessibilityIsBoldTextEnabled();
          v54 = 0.000750000007;
          v55 = 0.00150000001;
          goto LABEL_130;
        }
      }
      else
      {
        if (qword_10047A738 != -1)
          swift_once(&qword_10047A738, sub_10000E4DC);
        v6 = &xmmword_1004AF000;
        v98 = (id)qword_1004AF068;
        v99 = UIContentSizeCategory.isAccessibilityCategory.getter(v98);

        v50 = 0.00899999961;
        v51 = 0.00899999961;
        if ((v99 & 1) == 0)
        {
          if (UIAccessibilityIsBoldTextEnabled())
            v51 = 0.00899999961;
          else
            v51 = 0.00449999981;
        }
        a1 = (id)qword_1004AF068;
        v100 = UIContentSizeCategory.isAccessibilityCategory.getter(a1);

        if ((v100 & 1) == 0)
        {
          v53 = !UIAccessibilityIsBoldTextEnabled();
          v54 = 0.00449999981;
          v55 = 0.00899999961;
LABEL_130:
          if (v53)
            v50 = v54;
          else
            v50 = v55;
        }
      }
      objc_msgSend(v3, "setHidden:", 0);
      v101 = *(void **)&v3[OBJC_IVAR____TtC7Measure10LineRender_lineGeometry];
      if (v101)
      {
        objc_msgSend(*(id *)&v3[OBJC_IVAR____TtC7Measure10LineRender_lineGeometry], "setWidth:", v51);
        objc_msgSend(v101, "setHeight:", v50);
        if (*((_BYTE *)v2 + (_QWORD)v3) == 1)
          v102 = sub_1000D292C();
        else
          v102 = sub_1000D2A1C();
        v103 = v102;
        objc_msgSend(v101, "setFirstMaterial:", v102);

        v104 = (char **)objc_msgSend(v101, "firstMaterial");
        if (v104)
        {
          v2 = v104;
          v105 = objc_msgSend(v104, "diffuse");

          if (qword_10047AED0 != -1)
            swift_once(&qword_10047AED0, sub_1001962FC);
          objc_msgSend(v105, "setContents:", qword_1004AF9C8);

        }
        v106 = objc_msgSend(v101, "firstMaterial");
        if (v106)
        {
          v107 = v106;
          v108 = objc_msgSend(v106, "emission");

          if (qword_10047AEF0 != -1)
            swift_once(&qword_10047AEF0, sub_10019636C);
          objc_msgSend(v108, "setContents:", qword_1004AF9E8);

        }
        goto LABEL_199;
      }
      goto LABEL_219;
    case 8uLL:
      if (!objc_msgSend((id)objc_opt_self(Gestalt), "jasperAvailable"))
        goto LABEL_199;
      v76 = *(void **)&v3[OBJC_IVAR____TtC7Measure10LineRender_linePrime];
      if (v76)
      {
        v77 = v76;
        v78 = objc_msgSend(v3, "childNodes");
        v79 = sub_100018148(0, &qword_10047BCE8, SCNNode_ptr);
        v80 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v78, v79);

        LOBYTE(v78) = sub_1000F4044((uint64_t)v77, v80);
        swift_bridgeObjectRelease(v80);
        if ((v78 & 1) != 0)
        {
          objc_msgSend(v77, "removeFromParentNode");
          v81 = sub_10000EDC8((uint64_t *)&unk_1004866D0);
          v82 = swift_allocObject(v81, 40, 7);
          *(_OWORD *)(v82 + 16) = xmmword_1003B0F00;
          v83 = *(void **)&v3[OBJC_IVAR____TtC7Measure10LineRender_line];
          *(_QWORD *)(v82 + 32) = v83;
          v194[0] = v82;
          specialized Array._endMutation()(v82);
          v84 = v194[0];
          v85 = v83;

          v86 = &v3[OBJC_IVAR____TtC7Measure10LineRender_confirmedLineNodes];
          swift_beginAccess(&v3[OBJC_IVAR____TtC7Measure10LineRender_confirmedLineNodes], v194, 1, 0);
          v87 = *(_QWORD *)v86;
          *(_QWORD *)v86 = v84;
          swift_bridgeObjectRelease(v87);
        }
        else
        {

        }
      }
      if (v3[OBJC_IVAR____TtC7Measure10LineRender_isMinor] == 1)
      {
        if (qword_10047A738 != -1)
          swift_once(&qword_10047A738, sub_10000E4DC);
        v109 = (id)qword_1004AF068;
        v110 = UIContentSizeCategory.isAccessibilityCategory.getter(v109);

        v111 = 2.0;
        v112 = 2.0;
        if ((v110 & 1) == 0)
        {
          if (UIAccessibilityIsBoldTextEnabled())
            v112 = 2.0;
          else
            v112 = 1.0;
        }
        a1 = (id)qword_1004AF068;
        v113 = UIContentSizeCategory.isAccessibilityCategory.getter(a1);

        if ((v113 & 1) == 0)
        {
          if (UIAccessibilityIsBoldTextEnabled())
            v111 = 2.0;
          else
            v111 = 1.0;
        }
        v114 = 0.00075;
      }
      else
      {
        if (qword_10047A738 != -1)
          swift_once(&qword_10047A738, sub_10000E4DC);
        v115 = (id)qword_1004AF068;
        v116 = UIContentSizeCategory.isAccessibilityCategory.getter(v115);

        v111 = 2.0;
        v112 = 2.0;
        if ((v116 & 1) == 0)
        {
          if (UIAccessibilityIsBoldTextEnabled())
            v112 = 2.0;
          else
            v112 = 1.0;
        }
        a1 = (id)qword_1004AF068;
        v117 = UIContentSizeCategory.isAccessibilityCategory.getter(a1);

        if ((v117 & 1) == 0)
        {
          if (UIAccessibilityIsBoldTextEnabled())
            v111 = 2.0;
          else
            v111 = 1.0;
        }
        v114 = 0.0015;
      }
      v118 = v112 * v114;
      v119 = v111 * v114;
      objc_msgSend(v3, "setHidden:", 0);
      v120 = *(void **)&v3[OBJC_IVAR____TtC7Measure10LineRender_lineGeometry];
      if (!v120)
        goto LABEL_220;
      objc_msgSend(*(id *)&v3[OBJC_IVAR____TtC7Measure10LineRender_lineGeometry], "setWidth:", v118);
      objc_msgSend(v120, "setHeight:", v119);
      v2 = (char **)sub_1000D2C20();
      v122 = (int8x16_t *)&v3[OBJC_IVAR____TtC7Measure10LineRender_renderedSegment];
      if ((v3[OBJC_IVAR____TtC7Measure10LineRender_renderedSegment + 32] & 1) != 0)
      {
        v123 = 0;
        v124 = 0.0;
      }
      else
      {
        v125 = v122[1];
        v179 = *(float32x2_t *)v125.i8;
        v181 = *(float32x2_t *)v122->i8;
        *(float32x2_t *)v121.f32 = vsub_f32(*(float32x2_t *)v125.i8, *(float32x2_t *)v122->i8);
        v184 = v125;
        v188 = *v122;
        v121.f32[2] = *(float *)&v125.i32[2] - COERCE_FLOAT(v122->i64[1]);
        v126 = vmulq_f32(v121, v121);
        objc_msgSend(v3, "setHidden:", vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v126, 2), vaddq_f32(v126, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v126.f32, 1))).f32[0] <= 0.00000011921);
        if (objc_msgSend(v3, "isHidden"))
          goto LABEL_121;
        v127 = v184;
        v127.i32[0] = v184.i32[1];
        v178 = v127;
        v128 = (__n128 *)&v3[OBJC_IVAR____TtC7Measure10LineRender_endTransforms];
        *(double *)v129.i64 = simd_float4x4.position.getter(*(__n128 *)&v3[OBJC_IVAR____TtC7Measure10LineRender_endTransforms], *(__n128 *)&v3[OBJC_IVAR____TtC7Measure10LineRender_endTransforms + 16], *(__n128 *)&v3[OBJC_IVAR____TtC7Measure10LineRender_endTransforms + 32], *(__n128 *)&v3[OBJC_IVAR____TtC7Measure10LineRender_endTransforms + 48]);
        *(float32x2_t *)v130.f32 = vsub_f32(*(float32x2_t *)v129.i8, v181);
        *(float32x2_t *)&v130.u32[2] = vsub_f32((float32x2_t)*(_OWORD *)&vextq_s8(v129, v129, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v188, v188, 8uLL));
        v131 = vmulq_f32(v130, v130);
        if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v131, 2), vaddq_f32(v131, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v131.f32, 1))).f32[0] <= 0.00000011921&& (*(double *)v133.i64 = simd_float4x4.position.getter(v128[4], v128[5], v128[6], v128[7]), *(float32x2_t *)v134.f32 = vsub_f32(*(float32x2_t *)v133.i8, v179), *(float32x2_t *)&v134.u32[2] = vsub_f32((float32x2_t)*(_OWORD *)&vextq_s8(v133, v133, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v184, v184, 8uLL)), v135 = vmulq_f32(v134, v134), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v135, 2), vaddq_f32(v135, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v135.f32, 1))).f32[0] <= 0.00000011921))
        {
          v136 = (int8x16_t *)SIMD3<>.zero.unsafeMutableAddressor(v132);
          v123 = 0;
          v137.i32[0] = HIDWORD(v136->i64[0]);
          v178 = v137;
          v188 = *v136;
        }
        else
        {
          v123 = 1;
        }
        simd_float4x4.position.getter(*v128, v128[1], v128[2], v128[3]);
        v124 = *(double *)v188.i64;
      }
      v138 = (double *)&v3[OBJC_IVAR____TtC7Measure10LineRender_primarySegment];
      if ((v3[OBJC_IVAR____TtC7Measure10LineRender_primarySegment + 32] & 1) != 0)
        goto LABEL_186;
      v189 = v124;
      v182 = v120;
      v6 = (__int128 *)*((_QWORD *)v138 + 1);
      v139 = *((_QWORD *)v138 + 2);
      v140 = *v138;
      v180 = HIDWORD(*(_QWORD *)v138);
      v141.i64[0] = v139;
      v141.i64[1] = (uint64_t)v138[3];
      v185 = v141;
      v142 = (__n128 *)&v3[OBJC_IVAR____TtC7Measure10LineRender_endTransforms];
      *(double *)v143.i64 = simd_float4x4.position.getter(*(__n128 *)&v3[OBJC_IVAR____TtC7Measure10LineRender_endTransforms], *(__n128 *)&v3[OBJC_IVAR____TtC7Measure10LineRender_endTransforms + 16], *(__n128 *)&v3[OBJC_IVAR____TtC7Measure10LineRender_endTransforms + 32], *(__n128 *)&v3[OBJC_IVAR____TtC7Measure10LineRender_endTransforms + 48]);
      *(float32x2_t *)v144.f32 = vsub_f32(*(float32x2_t *)v143.i8, (float32x2_t)__PAIR64__(v180, LODWORD(v140)));
      *(float32x2_t *)&v144.u32[2] = vsub_f32((float32x2_t)*(_OWORD *)&vextq_s8(v143, v143, 8uLL), (float32x2_t)v6);
      v145 = vmulq_f32(v144, v144);
      if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v145, 2), vaddq_f32(v145, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v145.f32, 1))).f32[0] <= 0.00000011921&& (*(double *)v147.i64 = simd_float4x4.position.getter(v142[4], v142[5], v142[6], v142[7]), *(float32x2_t *)v148.f32 = vsub_f32(*(float32x2_t *)v147.i8, (float32x2_t)__PAIR64__(v185.u32[1], v139)), *(float32x2_t *)&v148.u32[2] = vsub_f32((float32x2_t)*(_OWORD *)&vextq_s8(v147, v147, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v185, v185, 8uLL)), v149 = vmulq_f32(v148, v148), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v149, 2), vaddq_f32(v149, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v149.f32, 1))).f32[0] <= 0.00000011921))
      {
        SIMD3<>.zero.unsafeMutableAddressor(v146);
        v120 = v182;
        v124 = v189;
LABEL_186:
        if ((v123 & 1) != 0)
        {
          v190 = v124;
          v163 = sub_1000D2D10();

          v156 = v163;
          SCNVector3.init(_:)(v190);
          isa = SCNVector3._bridgeToObjectiveC()().super.isa;
          v165 = String._bridgeToObjectiveC()();
          v6 = (__int128 *)&selRef_renderer_didAddNode_forAnchor_;
          objc_msgSend(v156, "setValue:forKeyPath:", isa, v165);

          v166 = CGFloat._bridgeToObjectiveC()().super.super.isa;
          v2 = (char **)String._bridgeToObjectiveC()();
          objc_msgSend(v156, "setValue:forKeyPath:", v166, v2);

        }
        else
        {
          v156 = sub_1000D2EF0();
        }
      }
      else
      {
        if ((v123 & 1) != 0)
        {
          v150 = sub_1000D2C20();

          v151 = v150;
          SCNVector3.init(_:)(v140);
          v152 = SCNVector3._bridgeToObjectiveC()().super.isa;
          v153 = String._bridgeToObjectiveC()();
          v6 = (__int128 *)&selRef_renderer_didAddNode_forAnchor_;
          objc_msgSend(v151, "setValue:forKeyPath:", v152, v153);

          SCNVector3.init(_:)(*(double *)v185.i64);
          v154 = SCNVector3._bridgeToObjectiveC()().super.isa;
          v155 = String._bridgeToObjectiveC()();
          objc_msgSend(v151, "setValue:forKeyPath:", v154, v155);

          v156 = v151;
          SCNVector3.init(_:)(v189);
          v157 = SCNVector3._bridgeToObjectiveC()().super.isa;
          v158 = String._bridgeToObjectiveC()();
          objc_msgSend(v156, "setValue:forKeyPath:", v157, v158);

          v159.super.super.isa = CGFloat._bridgeToObjectiveC()().super.super.isa;
        }
        else
        {
          v160 = sub_1000D2E00();

          v156 = v160;
          SCNVector3.init(_:)(v140);
          v161 = SCNVector3._bridgeToObjectiveC()().super.isa;
          v162 = String._bridgeToObjectiveC()();
          objc_msgSend(v156, "setValue:forKeyPath:", v161, v162);

          SCNVector3.init(_:)(*(double *)v185.i64);
          v159.super = SCNVector3._bridgeToObjectiveC()();
        }
        v2 = (char **)String._bridgeToObjectiveC()();
        objc_msgSend(v156, "setValue:forKeyPath:", v159.super.super.isa, v2, *(_OWORD *)&v178);

        v120 = v182;
      }

      objc_msgSend(v120, "setFirstMaterial:", v156);
      v167 = objc_msgSend(v156, "diffuse");
      if (qword_10047AEC0 != -1)
        swift_once(&qword_10047AEC0, sub_1001962C4);
      v2 = &selRef_renderer_didAddNode_forAnchor_;
      objc_msgSend(v167, "setContents:", qword_1004AF9B8, *(_OWORD *)&v178);

      v168 = objc_msgSend(v156, "emission");
      if (qword_10047AEF8 != -1)
        swift_once(&qword_10047AEF8, sub_100196380);
      objc_msgSend(v168, "setContents:", qword_1004AF9F0);

      goto LABEL_199;
    case 9uLL:
      objc_msgSend(v3, "setOpacity:", 0.7);
      if (v3[OBJC_IVAR____TtC7Measure10LineRender_isMinor] == 1)
      {
        if (qword_10047A738 != -1)
          swift_once(&qword_10047A738, sub_10000E4DC);
        v30 = (id)qword_1004AF068;
        v31 = UIContentSizeCategory.isAccessibilityCategory.getter(v30);

        v32 = 0.00150000001;
        v33 = 0.00150000001;
        if ((v31 & 1) == 0)
        {
          if (UIAccessibilityIsBoldTextEnabled())
            v33 = 0.00150000001;
          else
            v33 = 0.000750000007;
        }
        a1 = (id)qword_1004AF068;
        v34 = UIContentSizeCategory.isAccessibilityCategory.getter(a1);

        if ((v34 & 1) == 0)
        {
          v35 = !UIAccessibilityIsBoldTextEnabled();
          v36 = 0.000750000007;
          v37 = 0.00150000001;
          goto LABEL_111;
        }
      }
      else
      {
        if (qword_10047A738 != -1)
          swift_once(&qword_10047A738, sub_10000E4DC);
        v88 = (id)qword_1004AF068;
        v89 = UIContentSizeCategory.isAccessibilityCategory.getter(v88);

        v32 = 0.00899999961;
        v33 = 0.00899999961;
        if ((v89 & 1) == 0)
        {
          if (UIAccessibilityIsBoldTextEnabled())
            v33 = 0.00899999961;
          else
            v33 = 0.00449999981;
        }
        a1 = (id)qword_1004AF068;
        v90 = UIContentSizeCategory.isAccessibilityCategory.getter(a1);

        if ((v90 & 1) == 0)
        {
          v35 = !UIAccessibilityIsBoldTextEnabled();
          v36 = 0.00449999981;
          v37 = 0.00899999961;
LABEL_111:
          if (v35)
            v32 = v36;
          else
            v32 = v37;
        }
      }
      objc_msgSend(v3, "setHidden:", 0);
      v91 = *(void **)&v3[OBJC_IVAR____TtC7Measure10LineRender_lineGeometry];
      if (!v91)
      {
LABEL_218:
        __break(1u);
LABEL_219:
        __break(1u);
LABEL_220:
        __break(1u);
LABEL_221:
        v194[0] = a1;
        _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for MeasureObjectState, v194, &type metadata for MeasureObjectState, &type metadata for Int);
        __break(1u);
        JUMPOUT(0x1000D73C0);
      }
      objc_msgSend(*(id *)&v3[OBJC_IVAR____TtC7Measure10LineRender_lineGeometry], "setWidth:", v33);
      objc_msgSend(v91, "setHeight:", v32);
      v92 = sub_1000D2A1C();
      objc_msgSend(v91, "setFirstMaterial:", v92);

      v93 = sub_1000D2A1C();
      v94 = objc_msgSend(v93, "diffuse");

      if (qword_10047AED8 != -1)
        swift_once(&qword_10047AED8, sub_100196320);
      objc_msgSend(v94, "setContents:", qword_1004AF9D0);

      v95 = sub_1000D2A1C();
      v46 = objc_msgSend(v95, "emission");

      if (qword_10047AF10 != -1)
        swift_once(&qword_10047AF10, sub_1001963BC);
      v47 = qword_1004AFA08;
LABEL_120:
      objc_msgSend(v46, "setContents:", v47);

      v96 = sub_1000D2A1C();
      static ComputedCameraProperties.shared.getter(v194);
      v97 = Float._bridgeToObjectiveC()().super.super.isa;
      v2 = (char **)String._bridgeToObjectiveC()();
      objc_msgSend(v96, "setValue:forKeyPath:", v97, v2);

LABEL_121:
      while (1)
      {
LABEL_199:
        objc_msgSend((id)v5, "commit");
        v170 = (__n128 *)&v3[OBJC_IVAR____TtC7Measure10LineRender_currentTransforms];
        v191 = simd_float4x4.position.getter(*(__n128 *)&v3[OBJC_IVAR____TtC7Measure10LineRender_currentTransforms], *(__n128 *)&v3[OBJC_IVAR____TtC7Measure10LineRender_currentTransforms + 16], *(__n128 *)&v3[OBJC_IVAR____TtC7Measure10LineRender_currentTransforms + 32], *(__n128 *)&v3[OBJC_IVAR____TtC7Measure10LineRender_currentTransforms + 48]);
        v186 = simd_float4x4.position.getter(v170[4], v170[5], v170[6], v170[7]);
        v171 = (uint64_t *)&v3[OBJC_IVAR____TtC7Measure10LineRender_confirmedLineNodes];
        swift_beginAccess(&v3[OBJC_IVAR____TtC7Measure10LineRender_confirmedLineNodes], v193, 0, 0);
        v172 = *v171;
        if ((unint64_t)v172 >> 62)
        {
          if (v172 < 0)
            v176 = v172;
          else
            v176 = v172 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain_n(v172, 2);
          v5 = _CocoaArrayWrapper.endIndex.getter(v176);
          if (!v5)
            return swift_bridgeObjectRelease_n(v172, 2);
        }
        else
        {
          v5 = *(_QWORD *)((v172 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain_n(v172, 2);
          if (!v5)
            return swift_bridgeObjectRelease_n(v172, 2);
        }
        if (v5 >= 1)
          break;
        __break(1u);
        do
        {
          __break(1u);
LABEL_214:
          swift_once(&qword_10047A738, sub_10000E4DC);
LABEL_7:
          v9 = (id)qword_1004AF068;
          v10 = UIContentSizeCategory.isAccessibilityCategory.getter(v9);

          if ((v10 & 1) != 0)
          {
            v11 = 0.0015;
          }
          else if (UIAccessibilityIsBoldTextEnabled())
          {
            v11 = 0.0015;
          }
          else
          {
            v11 = 0.00075;
          }
          a1 = (id)qword_1004AF068;
          v56 = UIContentSizeCategory.isAccessibilityCategory.getter(a1);

          if ((v56 & 1) != 0)
          {
            v57 = 0.0015;
          }
          else
          {
            v59 = !UIAccessibilityIsBoldTextEnabled();
            v60 = 0.00075;
            v61 = 0.0015;
LABEL_80:
            if (v59)
              v57 = v60;
            else
              v57 = v61;
          }
LABEL_83:
          objc_msgSend(v3, "setHidden:", 0);
          if ((*((_BYTE *)v2 + (_QWORD)v3) & 1) == 0)
          {
            a1 = *(id *)&v3[OBJC_IVAR____TtC7Measure10LineRender_lineGeometry];
            if (!a1)
              goto LABEL_217;
            v62 = v57;
            v63 = v11;
            objc_msgSend(*(id *)&v3[OBJC_IVAR____TtC7Measure10LineRender_lineGeometry], "setWidth:", v63);
            objc_msgSend(a1, "setHeight:", v62);
            a1 = *(id *)&v3[OBJC_IVAR____TtC7Measure10LineRender_linePrimeGeometry];
            objc_msgSend(a1, "setWidth:", v63);
            objc_msgSend(a1, "setHeight:", v62);

          }
          v64 = *(void **)&v3[OBJC_IVAR____TtC7Measure10LineRender_lineGeometry];
          if (!v64)
          {
            __break(1u);
            goto LABEL_216;
          }
          v65 = sub_1000D2B0C(&OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___lineMaterial);
          objc_msgSend(v64, "setFirstMaterial:", v65);

          v66 = sub_1000D2B0C(&OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___lineMaterial);
          v67 = objc_msgSend(v66, "diffuse");

          if (qword_10047AEB8 != -1)
            swift_once(&qword_10047AEB8, sub_1001962B0);
          v2 = &selRef_renderer_didAddNode_forAnchor_;
          objc_msgSend(v67, "setContents:", qword_1004AF9B0);

          v68 = sub_1000D2B0C(&OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___lineMaterial);
          v69 = objc_msgSend(v68, "emission");

          if (qword_10047AEE8 != -1)
            swift_once(&qword_10047AEE8, sub_100196358);
          objc_msgSend(v69, "setContents:", qword_1004AF9E0);

          v70 = (__n128 *)&v3[OBJC_IVAR____TtC7Measure10LineRender_endTransforms];
          v187 = simd_float4x4.position.getter(*(__n128 *)&v3[OBJC_IVAR____TtC7Measure10LineRender_endTransforms], *(__n128 *)&v3[OBJC_IVAR____TtC7Measure10LineRender_endTransforms + 16], *(__n128 *)&v3[OBJC_IVAR____TtC7Measure10LineRender_endTransforms + 32], *(__n128 *)&v3[OBJC_IVAR____TtC7Measure10LineRender_endTransforms + 48]);
          v183 = simd_float4x4.position.getter(v70[4], v70[5], v70[6], v70[7]);
          v71 = (uint64_t *)&v3[OBJC_IVAR____TtC7Measure10LineRender_confirmedLineNodes];
          swift_beginAccess(&v3[OBJC_IVAR____TtC7Measure10LineRender_confirmedLineNodes], v194, 0, 0);
          v72 = *v71;
          if ((unint64_t)v72 >> 62)
          {
            if (v72 < 0)
              v169 = v72;
            else
              v169 = v72 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain_n(v72, 2);
            v73 = _CocoaArrayWrapper.endIndex.getter(v169);
            if (!v73)
              goto LABEL_198;
          }
          else
          {
            v73 = *(_QWORD *)((v72 & 0xFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain_n(v72, 2);
            if (!v73)
              goto LABEL_198;
          }
        }
        while (v73 < 1);
        v2 = 0;
        do
        {
          if ((v72 & 0xC000000000000001) != 0)
            v74 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v2, v72);
          else
            v74 = *(id *)(v72 + 8 * (_QWORD)v2 + 32);
          v75 = v74;
          v2 = (char **)((char *)v2 + 1);
          v193[0] = v74;
          sub_1000D8E1C(v193, (uint64_t)v3, v187, v183);

        }
        while ((char **)v73 != v2);
LABEL_198:
        swift_bridgeObjectRelease_n(v72, 2);
        objc_msgSend(v3, *((SEL *)v6 + 50), 1.0);
      }
      v173 = 0;
      do
      {
        if ((v172 & 0xC000000000000001) != 0)
          v174 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v173, v172);
        else
          v174 = *(id *)(v172 + 8 * v173 + 32);
        v175 = v174;
        ++v173;
        v192 = v174;
        sub_1000D8E1C(&v192, (uint64_t)v3, v191, v186);

      }
      while (v5 != v173);
      return swift_bridgeObjectRelease_n(v172, 2);
    default:
      goto LABEL_221;
  }
}

void sub_1000D73E8()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  char v10;
  id v11;
  char v12;
  __n128 *v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int32x4_t v17;
  float32x2_t v18;
  float32x2_t v19;
  Class isa;
  NSString v21;
  void *v22;
  id v23;
  char v24;
  id v25;
  char v26;
  __n128 *v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int32x4_t v31;
  float32x2_t v32;
  float32x2_t v33;
  Class v34;
  NSString v35;
  float32x2_t v36;
  Class v37;
  uint64_t v38;
  uint64_t v39;
  float32x4_t v40;
  float32x4_t v41;
  id v42;

  v1 = v0;
  v2 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC7Measure10LineRender_line), "geometry");
  if (!v2)
    return;
  v3 = v2;
  v4 = objc_msgSend(v2, "materials");

  v5 = sub_100018148(0, (unint64_t *)&qword_10048A110, SCNMaterial_ptr);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v5);

  if ((unint64_t)v6 >> 62)
  {
    if (v6 < 0)
      v38 = v6;
    else
      v38 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v6);
    v39 = _CocoaArrayWrapper.endIndex.getter(v38);
    swift_bridgeObjectRelease(v6);
    if (v39)
      goto LABEL_4;
LABEL_20:
    swift_bridgeObjectRelease(v6);
    return;
  }
  if (!*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_20;
LABEL_4:
  if ((v6 & 0xC000000000000001) != 0)
  {
    v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v6);
    goto LABEL_7;
  }
  if (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v7 = *(id *)(v6 + 32);
LABEL_7:
    v8 = v7;
    swift_bridgeObjectRelease(v6);
    sub_100018148(0, (unint64_t *)&qword_10047C128, NSObject_ptr);
    v42 = v8;
    v9 = sub_1000D2EF0();
    v10 = static NSObject.== infix(_:_:)(v42, v9);

    if ((v10 & 1) != 0
      || (v11 = sub_1000D2D10(), v12 = static NSObject.== infix(_:_:)(v42, v11), v11, (v12 & 1) != 0))
    {
      v13 = (__n128 *)(v1 + OBJC_IVAR____TtC7Measure10LineRender_endTransforms);
      *(double *)v14.i64 = simd_float4x4.position.getter(v13[4], v13[5], v13[6], v13[7]);
      v40 = v14;
      *(double *)v15.i64 = simd_float4x4.position.getter(*v13, v13[1], v13[2], v13[3]);
      v16 = vsubq_f32(v40, v15);
      v17 = (int32x4_t)vmulq_f32(v16, v16);
      v17.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v17, 2), vadd_f32(*(float32x2_t *)v17.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v17.i8, 1))).u32[0];
      v18 = vrsqrte_f32((float32x2_t)v17.u32[0]);
      v19 = vmul_f32(v18, vrsqrts_f32((float32x2_t)v17.u32[0], vmul_f32(v18, v18)));
      SCNVector3.init(_:)(COERCE_DOUBLE(vsub_f32(*(float32x2_t *)v40.f32, (float32x2_t)*(_OWORD *)&vmulq_n_f32(v16, vmul_f32(v19, vrsqrts_f32((float32x2_t)v17.u32[0], vmul_f32(v19, v19))).f32[0]))));
      isa = SCNVector3._bridgeToObjectiveC()().super.isa;
      v21 = String._bridgeToObjectiveC()();
      objc_msgSend(v42, "setValue:forKeyPath:", isa, v21);

    }
    else
    {
      v23 = sub_1000D2C20();
      v24 = static NSObject.== infix(_:_:)(v42, v23);

      if ((v24 & 1) != 0
        || (v25 = sub_1000D2E00(), v26 = static NSObject.== infix(_:_:)(v42, v25), v25, (v26 & 1) != 0))
      {
        v27 = (__n128 *)(v1 + OBJC_IVAR____TtC7Measure10LineRender_endTransforms);
        *(double *)v28.i64 = simd_float4x4.position.getter(*(__n128 *)(v1 + OBJC_IVAR____TtC7Measure10LineRender_endTransforms + 64), *(__n128 *)(v1 + OBJC_IVAR____TtC7Measure10LineRender_endTransforms + 80), *(__n128 *)(v1 + OBJC_IVAR____TtC7Measure10LineRender_endTransforms + 96), *(__n128 *)(v1 + OBJC_IVAR____TtC7Measure10LineRender_endTransforms + 112));
        v41 = v28;
        *(double *)v29.i64 = simd_float4x4.position.getter(*v27, v27[1], v27[2], v27[3]);
        v30 = vsubq_f32(v41, v29);
        v31 = (int32x4_t)vmulq_f32(v30, v30);
        v31.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v31, 2), vadd_f32(*(float32x2_t *)v31.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v31.i8, 1))).u32[0];
        v32 = vrsqrte_f32((float32x2_t)v31.u32[0]);
        v33 = vmul_f32(v32, vrsqrts_f32((float32x2_t)v31.u32[0], vmul_f32(v32, v32)));
        v41.i64[0] = vmulq_n_f32(v30, vmul_f32(v33, vrsqrts_f32((float32x2_t)v31.u32[0], vmul_f32(v33, v33))).f32[0]).u64[0];
        SCNVector3.init(_:)(COERCE_DOUBLE(vadd_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v41.f32)));
        v34 = SCNVector3._bridgeToObjectiveC()().super.isa;
        v35 = String._bridgeToObjectiveC()();
        objc_msgSend(v42, "setValue:forKeyPath:", v34, v35);

        *(double *)&v36 = simd_float4x4.position.getter(v27[4], v27[5], v27[6], v27[7]);
        SCNVector3.init(_:)(COERCE_DOUBLE(vsub_f32(v36, *(float32x2_t *)v41.f32)));
        v37 = SCNVector3._bridgeToObjectiveC()().super.isa;
        v41.i64[0] = (uint64_t)String._bridgeToObjectiveC()();
        objc_msgSend(v42, "setValue:forKeyPath:", v37, v41.i64[0]);

        v22 = (void *)v41.i64[0];
        goto LABEL_11;
      }
    }

    v22 = v42;
LABEL_11:

    return;
  }
  __break(1u);
}

uint64_t sub_1000D7844(double a1, double a2, double a3, double a4)
{
  uint64_t v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  id i;
  void *v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  Class isa;
  NSString v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  double v28;
  double v29;
  float v30;
  Class v31;
  NSString v32;
  uint64_t v33;
  _BYTE v34[24];

  v5 = SCNVector3.init(_:_:_:)(a3, a4, 0.0);
  v7 = v6;
  v9 = v8;
  v10 = (uint64_t *)(v4 + OBJC_IVAR____TtC7Measure10LineRender_confirmedLineNodes);
  swift_beginAccess(v4 + OBJC_IVAR____TtC7Measure10LineRender_confirmedLineNodes, v34, 0, 0);
  v11 = *v10;
  if ((unint64_t)v11 >> 62)
  {
    if (v11 < 0)
      v33 = v11;
    else
      v33 = v11 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v11, 2);
    result = _CocoaArrayWrapper.endIndex.getter(v33);
    v12 = result;
    if (result)
      goto LABEL_3;
    return swift_bridgeObjectRelease_n(v11, 2);
  }
  v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain_n(v11, 2);
  if (!v12)
    return swift_bridgeObjectRelease_n(v11, 2);
LABEL_3:
  v14 = v12 - 1;
  if (v12 >= 1)
  {
    v15 = 0;
    if ((v11 & 0xC000000000000001) == 0)
      goto LABEL_6;
    while (1)
    {
      for (i = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v15, v11);
            ;
            i = *(id *)(v11 + 8 * v15 + 32))
      {
        v17 = i;
        v18 = objc_msgSend(i, "geometry");
        if (v18)
        {
          v19 = v18;
          v20 = objc_msgSend(v18, "firstMaterial");

          if (v20)
          {
            v21 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
            objc_msgSend(v21, "nativeScale");

            isa = CGFloat._bridgeToObjectiveC()().super.super.isa;
            v23 = String._bridgeToObjectiveC()();
            objc_msgSend(v20, "setValue:forKeyPath:", isa, v23);

          }
        }
        v24 = objc_msgSend(v17, "geometry");
        if (v24
          && (v25 = v24,
              v26 = objc_msgSend(v24, "firstMaterial"),
              v25,
              v26))
        {
          v27 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
          objc_msgSend(v27, "nativeScale");
          v29 = v28;

          v30 = v29;
          * infix(_:_:)(v30, v5, v7, v9);
          v31 = SCNVector3._bridgeToObjectiveC()().super.isa;
          v32 = String._bridgeToObjectiveC()();
          objc_msgSend(v26, "setValue:forKeyPath:", v31, v32);

          if (v14 == v15)
            return swift_bridgeObjectRelease_n(v11, 2);
        }
        else
        {

          if (v14 == v15)
            return swift_bridgeObjectRelease_n(v11, 2);
        }
        ++v15;
        if ((v11 & 0xC000000000000001) != 0)
          break;
LABEL_6:
        ;
      }
    }
  }
  __break(1u);
  return result;
}

void sub_1000D7B44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  void *Strong;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  Class isa;
  NSString v12;
  uint64_t v13;
  _BYTE v14[24];

  v4 = a2 + 16;
  swift_beginAccess(a2 + 16, v14, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v4, v5);

  if (Strong)
  {
    if ((unint64_t)a3 >> 62)
    {
      if (a3 < 0)
        v13 = a3;
      else
        v13 = a3 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n(a3, 2);
      v7 = _CocoaArrayWrapper.endIndex.getter(v13);
      if (v7)
        goto LABEL_4;
    }
    else
    {
      v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n(a3, 2);
      if (v7)
      {
LABEL_4:
        if (v7 < 1)
        {
          __break(1u);
          return;
        }
        v8 = 0;
        do
        {
          if ((a3 & 0xC000000000000001) != 0)
            v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, a3);
          else
            v9 = *(id *)(a3 + 8 * v8 + 32);
          v10 = v9;
          ++v8;
          isa = CGFloat._bridgeToObjectiveC()().super.super.isa;
          v12 = String._bridgeToObjectiveC()();
          objc_msgSend(v10, "setValue:forKeyPath:", isa, v12);

        }
        while (v7 != v8);
      }
    }
    swift_bridgeObjectRelease_n(a3, 2);
  }
}

uint64_t sub_1000D7CC0(float32x4_t a1, float32x4_t a2, double a3, double a4, double a5, double a6)
{
  uint64_t v6;
  uint64_t v7;
  float32x4_t v8;
  float32x4_t v9;
  __n128 v10;
  void *v11;
  void *v12;
  id v13;
  __n128 *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char **v27;
  uint64_t v28;
  id v29;
  void *v30;
  uint64_t v31;
  id v32;
  void *v33;
  id v34;
  Class isa;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSString v40;
  uint64_t v41;
  float v42;
  double v43;
  __n128 v44;
  id v47;
  _BYTE v48[24];

  v7 = v6;
  v8 = vsubq_f32(a2, a1);
  v9 = vmulq_f32(v8, v8);
  *(float *)&a6 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1))).f32[0]);
  v10.n128_u64[0] = (unint64_t)vdiv_f32(*(float32x2_t *)v8.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a6, 0));
  v10.n128_f32[2] = v8.f32[2] / *(float *)&a6;
  v10.n128_u32[3] = 0;
  v44 = v10;
  v42 = *(float *)&a6;
  v43 = COERCE_DOUBLE(vadd_f32(*(float32x2_t *)a1.f32, vmul_f32(vmul_n_f32((float32x2_t)v10.n128_u64[0], *(float *)&a6), (float32x2_t)0x3F0000003F000000)));
  v11 = *(void **)(v6 + OBJC_IVAR____TtC7Measure10LineRender_line);
  objc_msgSend(v11, "removeAllActions");
  sub_1000D8084(v42);
  SCNVector3.init(_:)(v43);
  SCNNode.setForwardDirection(direction:)(objc_msgSend(v11, "setPosition:"), v44);
  v12 = *(void **)(v6 + OBJC_IVAR____TtC7Measure10LineRender_linePrime);
  if (v12)
  {
    v13 = v12;
    SCNVector3.init(_:)(v43);
    SCNNode.setForwardDirection(direction:)(objc_msgSend(v13, "setPosition:"), v44);

  }
  v14 = (__n128 *)(v7 + OBJC_IVAR____TtC7Measure10LineRender_currentPositions);
  *v14 = (__n128)a1;
  v14[1] = (__n128)a2;
  v15 = (uint64_t *)(v7 + OBJC_IVAR____TtC7Measure10LineRender_confirmedLineNodes);
  swift_beginAccess(v7 + OBJC_IVAR____TtC7Measure10LineRender_confirmedLineNodes, v48, 0, 0);
  v16 = *v15;
  if ((unint64_t)*v15 >> 62)
  {
    if (v16 < 0)
      v22 = *v15;
    else
      v22 = v16 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(*v15, 2);
    result = _CocoaArrayWrapper.endIndex.getter(v22);
    v17 = result;
    if (!result)
      goto LABEL_15;
  }
  else
  {
    v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain_n(*v15, 2);
    if (!v17)
      goto LABEL_15;
  }
  if (v17 < 1)
  {
    __break(1u);
    return result;
  }
  v19 = 0;
  do
  {
    if ((v16 & 0xC000000000000001) != 0)
      v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v19, v16);
    else
      v20 = *(id *)(v16 + 8 * v19 + 32);
    v21 = v20;
    ++v19;
    v47 = v20;
    sub_1000D8E1C(&v47, v7, *(double *)a1.i64, *(double *)a2.i64);

  }
  while (v17 != v19);
LABEL_15:
  swift_bridgeObjectRelease_n(v16, 2);
  *(_QWORD *)(v7 + OBJC_IVAR____TtC7Measure10LineRender_isLabelVisible) = *(_QWORD *)(v7
                                                                                    + OBJC_IVAR____TtC7Measure10LineRender_isLabelVisible) == 1;
  v23 = *v15;
  if ((unint64_t)v23 >> 62)
    goto LABEL_29;
  v24 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n(v23, 2);
  for (; v24; v24 = _CocoaArrayWrapper.endIndex.getter(v41))
  {
    v25 = v23 & 0xC000000000000001;
    v26 = 4;
    v27 = &selRef_renderer_didAddNode_forAnchor_;
    v28 = 0;
    if ((v23 & 0xC000000000000001) != 0)
    {
LABEL_18:
      v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v28, v23);
      goto LABEL_20;
    }
    while (1)
    {
      v29 = *(id *)(v23 + 8 * v26);
LABEL_20:
      v30 = v29;
      v31 = v28 + 1;
      if (__OFADD__(v28, 1))
        break;
      v32 = objc_msgSend(v29, v27[79]);
      if (v32
        && (v33 = v32,
            v34 = objc_msgSend(v32, "firstMaterial"),
            v33,
            v34))
      {
        isa = Int._bridgeToObjectiveC()().super.super.isa;
        v36 = v25;
        v37 = v23;
        v38 = v24;
        v39 = v7;
        v40 = String._bridgeToObjectiveC()();
        objc_msgSend(v34, "setValue:forKeyPath:", isa, v40);

        v7 = v39;
        v24 = v38;
        v23 = v37;
        v25 = v36;
        v27 = &selRef_renderer_didAddNode_forAnchor_;
        if (v31 == v24)
          return swift_bridgeObjectRelease_n(v23, 2);
      }
      else
      {

        if (v31 == v24)
          return swift_bridgeObjectRelease_n(v23, 2);
      }
      v28 = ++v26 - 4;
      if (v25)
        goto LABEL_18;
    }
    __break(1u);
LABEL_29:
    if (v23 < 0)
      v41 = v23;
    else
      v41 = v23 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v23, 2);
  }
  return swift_bridgeObjectRelease_n(v23, 2);
}

void sub_1000D8084(float a1)
{
  uint64_t v1;
  void *v2;
  double v4;
  float v5;
  uint64_t v6;
  id v7;

  v2 = *(void **)(v1 + OBJC_IVAR____TtC7Measure10LineRender_lineGeometry);
  if (!v2)
    goto LABEL_12;
  v4 = a1;
  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC7Measure10LineRender_lineGeometry), "setLength:", a1);
  v5 = a1 * 10.0;
  if ((~COERCE_INT(a1 * 10.0) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v5 <= -9.2234e18)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v5 >= 9.2234e18)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return;
  }
  if ((uint64_t)v5 <= 1)
    v6 = 1;
  else
    v6 = (uint64_t)v5;
  objc_msgSend(v2, "setLengthSegmentCount:", v6);
  v7 = *(id *)(v1 + OBJC_IVAR____TtC7Measure10LineRender_linePrimeGeometry);
  objc_msgSend(v7, "setLength:", v4);
  objc_msgSend(v7, "setLengthSegmentCount:", v6);

}

void sub_1000D8184(__n128 a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7, __n128 a8)
{
  uint64_t v8;
  uint64_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  float32x4_t v19;
  __n128 v20;
  __n128 v21;
  uint64_t v22;
  double v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  void *v28;
  id v29;
  __n128 *v30;
  __n128 *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char **v43;
  uint64_t v44;
  id v45;
  void *v46;
  uint64_t v47;
  id v48;
  void *v49;
  id v50;
  Class isa;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSString v56;
  uint64_t v57;
  double v58;
  __n128 v59;
  __n128 v60;
  float v61;
  __n128 v62;
  __n128 v63;
  __n128 v64;
  __n128 v65;
  double v74;
  float32x4_t v75;
  id v76;
  _BYTE v77[32];

  v9 = v8;
  *(double *)v10.i64 = simd_float4x4.position.getter(a5, a6, a7, a8);
  v75 = v10;
  *(double *)v11.i64 = simd_float4x4.position.getter(a1, a2, a3, a4);
  v74 = *(double *)v11.i64;
  v12 = vsubq_f32(v75, v11);
  v13 = vmulq_f32(v12, v12);
  v14 = vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1));
  v14.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), v14).f32[0]);
  v61 = v14.f32[0];
  *(float32x2_t *)v13.f32 = vdiv_f32(*(float32x2_t *)v12.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v14.f32, 0));
  v13.f32[2] = v12.f32[2] / v14.f32[0];
  v13.i32[3] = 0;
  v65 = (__n128)v13;
  LODWORD(v58) = 1056964608;
  v15.n128_f64[0] = slerp(transform1:transform2:percent:)(a1, a2, a3, a4, a5, a6, a7, a8, v58);
  v63 = v16;
  v64 = v15;
  v62 = v17;
  v60 = v18;
  *(double *)v19.i64 = simd_float4x4.up.getter(v15, v16, v17, v18);
  v20.n128_f64[0] = sub_1000D8658((float32x4_t)v65, v19);
  v59 = v20;
  v21.n128_f64[0] = simd_float4x4.position.getter(v64, v63, v62, v60);
  v23 = createTransform(forward:normal:position:)(v22, v65, v59, v21);
  v64.n128_u64[0] = v24;
  v65.n128_f64[0] = v23;
  v62.n128_u64[0] = v26;
  v63.n128_u64[0] = v25;
  v27 = *(void **)(v8 + OBJC_IVAR____TtC7Measure10LineRender_line);
  objc_msgSend(v27, "removeAllActions");
  sub_1000D8084(v61);
  objc_msgSend(v27, "setSimdWorldTransform:", v65.n128_f64[0], v64.n128_f64[0], v63.n128_f64[0], v62.n128_f64[0]);
  objc_msgSend(*(id *)(v8 + OBJC_IVAR____TtC7Measure10LineRender_linePrime), "setSimdWorldTransform:", v65.n128_f64[0], v64.n128_f64[0], v63.n128_f64[0], v62.n128_f64[0]);
  if (qword_10047AC58 != -1)
    swift_once(&qword_10047AC58, sub_1001833E8);
  if (byte_1004AF790 == 1 && *(_BYTE *)(v8 + OBJC_IVAR____TtC7Measure10LineRender_hasDivisions) == 1)
  {
    v28 = *(void **)(v8 + OBJC_IVAR____TtC7Measure10LineRender_lineDivisionsRender);
    if (v28)
    {
      if (*((_BYTE *)v28 + OBJC_IVAR____TtC7Measure19LineDivisionsRender_showState))
      {
        v29 = v28;
        sub_10002C3BC(v61);
        sub_10002C1C8(a1, a2, a3, a4, a5, a6, a7, a8);

      }
    }
  }
  v30 = (__n128 *)(v9 + OBJC_IVAR____TtC7Measure10LineRender_endTransforms);
  *v30 = a1;
  v30[1] = a2;
  v30[2] = a3;
  v30[3] = a4;
  v30[4] = a5;
  v30[5] = a6;
  v30[6] = a7;
  v30[7] = a8;
  v31 = (__n128 *)(v9 + OBJC_IVAR____TtC7Measure10LineRender_currentTransforms);
  *v31 = a1;
  v31[1] = a2;
  v31[2] = a3;
  v31[3] = a4;
  v31[4] = a5;
  v31[5] = a6;
  v31[6] = a7;
  v31[7] = a8;
  v32 = (uint64_t *)(v9 + OBJC_IVAR____TtC7Measure10LineRender_confirmedLineNodes);
  swift_beginAccess(v9 + OBJC_IVAR____TtC7Measure10LineRender_confirmedLineNodes, v77, 0, 0);
  v33 = *v32;
  if ((unint64_t)*v32 >> 62)
  {
    if (v33 < 0)
      v38 = *v32;
    else
      v38 = v33 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(*v32, 2);
    v34 = _CocoaArrayWrapper.endIndex.getter(v38);
    if (!v34)
      goto LABEL_20;
  }
  else
  {
    v34 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n(*v32, 2);
    if (!v34)
      goto LABEL_20;
  }
  if (v34 < 1)
  {
    __break(1u);
    return;
  }
  v35 = 0;
  do
  {
    if ((v33 & 0xC000000000000001) != 0)
      v36 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v35, v33);
    else
      v36 = *(id *)(v33 + 8 * v35 + 32);
    v37 = v36;
    ++v35;
    v76 = v36;
    sub_1000D8E1C(&v76, v9, v74, *(double *)v75.i64);

  }
  while (v34 != v35);
LABEL_20:
  swift_bridgeObjectRelease_n(v33, 2);
  *(_QWORD *)(v9 + OBJC_IVAR____TtC7Measure10LineRender_isLabelVisible) = *(_QWORD *)(v9
                                                                                    + OBJC_IVAR____TtC7Measure10LineRender_isLabelVisible) == 1;
  v39 = *v32;
  if ((unint64_t)v39 >> 62)
    goto LABEL_34;
  v40 = *(_QWORD *)((v39 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n(v39, 2);
  for (; v40; v40 = _CocoaArrayWrapper.endIndex.getter(v57))
  {
    v41 = v39 & 0xC000000000000001;
    v42 = 4;
    v43 = &selRef_renderer_didAddNode_forAnchor_;
    v44 = 0;
    if ((v39 & 0xC000000000000001) != 0)
    {
LABEL_23:
      v45 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v44, v39);
      goto LABEL_25;
    }
    while (1)
    {
      v45 = *(id *)(v39 + 8 * v42);
LABEL_25:
      v46 = v45;
      v47 = v44 + 1;
      if (__OFADD__(v44, 1))
        break;
      v48 = objc_msgSend(v45, v43[79]);
      if (v48
        && (v49 = v48,
            v50 = objc_msgSend(v48, "firstMaterial"),
            v49,
            v50))
      {
        isa = Int._bridgeToObjectiveC()().super.super.isa;
        v52 = v41;
        v53 = v39;
        v54 = v40;
        v55 = v9;
        v56 = String._bridgeToObjectiveC()();
        objc_msgSend(v50, "setValue:forKeyPath:", isa, v56);

        v9 = v55;
        v40 = v54;
        v39 = v53;
        v41 = v52;
        v43 = &selRef_renderer_didAddNode_forAnchor_;
        if (v47 == v40)
          goto LABEL_38;
      }
      else
      {

        if (v47 == v40)
          goto LABEL_38;
      }
      v44 = ++v42 - 4;
      if (v41)
        goto LABEL_23;
    }
    __break(1u);
LABEL_34:
    if (v39 < 0)
      v57 = v39;
    else
      v57 = v39 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v39, 2);
  }
LABEL_38:
  swift_bridgeObjectRelease_n(v39, 2);
}

double sub_1000D8658(float32x4_t a1, float32x4_t a2)
{
  uint64_t v2;
  unint64_t v3;
  float32x4_t v4;
  void (*v5)(_QWORD *__return_ptr, __n128);
  __n128 v6;
  void *v7;
  id v8;
  uint64_t v9;
  float32x4_t v10;
  float32x4_t v11;
  int32x4_t v12;
  float32x4_t v13;
  int32x4_t v14;
  unint64_t v17;
  float32x4_t v18;
  _QWORD __src[64];
  _BYTE __dst[512];

  if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC7Measure10LineRender_verticalLineNormalOverride + 16) & 1) != 0)
  {
    v3 = a2.i64[0];
    v4 = vmulq_f32(a1, a2);
    if ((float)(1.0 - fabsf(v4.f32[2] + vaddv_f32(*(float32x2_t *)v4.f32))) < 0.00000011921)
    {
      v17 = a2.i64[0];
      v5 = *(void (**)(_QWORD *__return_ptr, __n128))(**(_QWORD **)(v2
                                                                             + OBJC_IVAR____TtC7Measure10LineRender__arframe)
                                                               + 144);
      v6 = swift_retain();
      v5(__src, v6);
      swift_release();
      memcpy(__dst, __src, sizeof(__dst));
      v7 = (void *)sub_10008F8B8();
      sub_100012C00((uint64_t)__dst);
      v3 = v17;
      if (v7)
      {
        v8 = objc_msgSend(v7, "camera");
        objc_msgSend(v8, "transform");

        *(double *)v10.i64 = simd_float4x4.forward.getter(v9);
        v18 = v10;

        v11 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a1, (int32x4_t)a1), (int8x16_t)a1, 0xCuLL);
        v12 = (int32x4_t)vmlaq_f32(vmulq_f32(v11, vnegq_f32(v18)), a1, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v18, (int32x4_t)v18), (int8x16_t)v18, 0xCuLL));
        v13 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v12, v12), (int8x16_t)v12, 0xCuLL);
        v14 = (int32x4_t)vmlaq_f32(vmulq_f32(v11, vnegq_f32(v13)), a1, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v13, (int32x4_t)v13), (int8x16_t)v13, 0xCuLL));
        v3 = vextq_s8((int8x16_t)vuzp1q_s32(v14, v14), (int8x16_t)v14, 0xCuLL).u64[0];
      }
    }
  }
  else
  {
    v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7Measure10LineRender_verticalLineNormalOverride);
  }
  return *(double *)&v3;
}

void sub_1000D87C8(void *a1, uint64_t a2, Swift::Double a3)
{
  float v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;
  __n128 v9;
  __n128 *v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  float32x4_t v20;
  __n128 v21;
  __n128 v22;
  uint64_t v23;
  double v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  double v39;
  double v40;
  float v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  __n128 v45;
  __n128 v46;
  float32x4_t v47;
  __n128 v48;
  __n128 v49;
  __n128 v50;
  __n128 v51;
  __n128 v52;
  __n128 v53;
  __n128 v54;
  double v55;
  __n128 v56;
  __n128 v57;
  double v58;
  id v59;
  _BYTE v60[24];

  v5 = spring(tension:friction:velocity:elapsed:)(400.0, 40.0, 0.0, a3);
  v44 = *(__n128 *)(a2 + OBJC_IVAR____TtC7Measure10LineRender_endTransforms + 16);
  v45 = *(__n128 *)(a2 + OBJC_IVAR____TtC7Measure10LineRender_endTransforms);
  v42 = *(__n128 *)(a2 + OBJC_IVAR____TtC7Measure10LineRender_endTransforms + 48);
  v43 = *(__n128 *)(a2 + OBJC_IVAR____TtC7Measure10LineRender_endTransforms + 32);
  *(float *)&v39 = v5;
  v6.n128_f64[0] = slerp(transform1:transform2:percent:)(*(__n128 *)(a2 + OBJC_IVAR____TtC7Measure10LineRender_endTransforms + 64), *(__n128 *)(a2 + OBJC_IVAR____TtC7Measure10LineRender_endTransforms + 80), *(__n128 *)(a2 + OBJC_IVAR____TtC7Measure10LineRender_endTransforms + 96), *(__n128 *)(a2 + OBJC_IVAR____TtC7Measure10LineRender_endTransforms + 112), *(__n128 *)(a2 + OBJC_IVAR____TtC7Measure10LineRender_snapTargetEndTransforms + 64), *(__n128 *)(a2 + OBJC_IVAR____TtC7Measure10LineRender_snapTargetEndTransforms + 80), *(__n128 *)(a2 + OBJC_IVAR____TtC7Measure10LineRender_snapTargetEndTransforms + 96), *(__n128 *)(a2 + OBJC_IVAR____TtC7Measure10LineRender_snapTargetEndTransforms + 112), v39);
  v53 = v7;
  v56 = v6;
  v49 = v9;
  v51 = v8;
  v10 = (__n128 *)(a2 + OBJC_IVAR____TtC7Measure10LineRender_currentTransforms);
  *v10 = v45;
  v10[1] = v44;
  v10[2] = v43;
  v10[3] = v42;
  v10[4] = v6;
  v10[5] = v7;
  v10[6] = v8;
  v10[7] = v9;
  *(double *)v11.i64 = simd_float4x4.position.getter(v45, v44, v43, v42);
  v47 = v11;
  *(double *)v12.i64 = simd_float4x4.position.getter(v56, v53, v51, v49);
  v13 = vsubq_f32(v47, v12);
  v14 = vmulq_f32(v13, v13);
  v15 = vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1));
  v15.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2), v15).f32[0]);
  v41 = v15.f32[0];
  *(float32x2_t *)v14.f32 = vdiv_f32(*(float32x2_t *)v13.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v15.f32, 0));
  v14.f32[2] = v13.f32[2] / v15.f32[0];
  v14.i32[3] = 0;
  v48 = (__n128)v14;
  LODWORD(v40) = 1056964608;
  v16.n128_f64[0] = slerp(transform1:transform2:percent:)(v45, v44, v43, v42, v56, v53, v51, v49, v40);
  v54 = v17;
  v57 = v16;
  v50 = v19;
  v52 = v18;
  *(double *)v20.i64 = simd_float4x4.up.getter(v16, v17, v18, v19);
  v21.n128_f64[0] = sub_1000D8658((float32x4_t)v48, v20);
  v46 = v21;
  v22.n128_f64[0] = simd_float4x4.position.getter(v57, v54, v52, v50);
  v24 = createTransform(forward:normal:position:)(v23, v48, v46, v22);
  v54.n128_u64[0] = v25;
  v57.n128_f64[0] = v24;
  v50.n128_u64[0] = v27;
  v52.n128_u64[0] = v26;
  objc_msgSend(*(id *)(a2 + OBJC_IVAR____TtC7Measure10LineRender_line), "setSimdWorldTransform:");
  objc_msgSend(*(id *)(a2 + OBJC_IVAR____TtC7Measure10LineRender_linePrime), "setSimdWorldTransform:", v57.n128_f64[0], v54.n128_f64[0], v52.n128_f64[0], v50.n128_f64[0]);
  sub_1000D8084(v41);
  v58 = simd_float4x4.position.getter(*v10, v10[1], v10[2], v10[3]);
  v55 = simd_float4x4.position.getter(v10[4], v10[5], v10[6], v10[7]);
  v28 = (uint64_t *)(a2 + OBJC_IVAR____TtC7Measure10LineRender_confirmedLineNodes);
  swift_beginAccess(a2 + OBJC_IVAR____TtC7Measure10LineRender_confirmedLineNodes, v60, 0, 0);
  v29 = *v28;
  if ((unint64_t)v29 >> 62)
  {
    if (v29 < 0)
      v34 = v29;
    else
      v34 = v29 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v29, 2);
    v30 = _CocoaArrayWrapper.endIndex.getter(v34);
    if (!v30)
      goto LABEL_13;
  }
  else
  {
    v30 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n(v29, 2);
    if (!v30)
      goto LABEL_13;
  }
  if (v30 < 1)
  {
    __break(1u);
    return;
  }
  v31 = 0;
  do
  {
    if ((v29 & 0xC000000000000001) != 0)
      v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v31, v29);
    else
      v32 = *(id *)(v29 + 8 * v31 + 32);
    v33 = v32;
    ++v31;
    v59 = v32;
    sub_1000D8E1C(&v59, a2, v58, v55);

  }
  while (v30 != v31);
LABEL_13:
  swift_bridgeObjectRelease_n(v29, 2);
  if (qword_10047AC58 != -1)
    swift_once(&qword_10047AC58, sub_1001833E8);
  if ((byte_1004AF790 & 1) != 0 && *(_BYTE *)(a2 + OBJC_IVAR____TtC7Measure10LineRender_hasDivisions) == 1)
  {
    v35 = type metadata accessor for LineDivisionsRender();
    v36 = swift_dynamicCastClass(a1, v35);
    if (v36)
    {
      if (*(_BYTE *)(v36 + OBJC_IVAR____TtC7Measure19LineDivisionsRender_showState))
      {
        v37 = a1;
        sub_10002C3BC(v41);

      }
    }
  }
  v38 = a2 + OBJC_IVAR____TtC7Measure10LineRender_snapAnimationPercent;
  *(float *)v38 = v5;
  *(_BYTE *)(v38 + 4) = 0;
}

void sub_1000D8B74(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[41];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = &unk_1003B5C80;
  v4[2] = &unk_1003B5C80;
  v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[5] = &unk_1003B5C80;
  v4[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[7] = &unk_1003B5C98;
  v4[8] = &unk_1003B5C98;
  v4[9] = &unk_1003B5C98;
  v4[10] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[11] = &unk_1003B5CB0;
  v4[12] = &unk_1003B5CC8;
  v4[13] = &unk_1003B5CC8;
  v4[14] = &unk_1003B5CE0;
  v4[15] = &unk_1003B5CE0;
  v4[16] = &unk_1003B5CE0;
  v4[17] = &unk_1003B5C80;
  v4[18] = &unk_1003B5C98;
  v4[19] = &unk_1003B5C98;
  v4[20] = &unk_1003B5C98;
  v4[21] = &unk_1003B5C98;
  v4[22] = &unk_1003B5CF8;
  v4[23] = &unk_1003B5D10;
  v4[24] = &unk_1003B5C98;
  v4[25] = &unk_1003B5C98;
  v4[26] = &unk_1003B5C98;
  v4[27] = &unk_1003B5C98;
  v4[28] = &unk_1003B5C98;
  v4[29] = &unk_1003B5C98;
  v4[30] = &unk_1003B5D28;
  v4[31] = &unk_1003B5D28;
  sub_10005CFA4(319);
  if (v3 <= 0x3F)
  {
    v4[32] = *(_QWORD *)(v2 - 8) + 64;
    v4[33] = &unk_1003B5D10;
    v4[34] = &unk_1003B5C80;
    v4[35] = &unk_1003B5D40;
    v4[36] = &unk_1003B5C80;
    v4[37] = (char *)&value witness table for Builtin.Int32 + 64;
    v4[38] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[39] = &unk_1003B5C80;
    v4[40] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_updateClassMetadata2(a1, 256, 41, v4, a1 + 80);
  }
}

uint64_t storeEnumTagSinglePayload for LineRender.AnimationState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1000D8D0C + 4 * byte_1003B5C65[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000D8D40 + 4 * byte_1003B5C60[v4]))();
}

uint64_t sub_1000D8D40(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D8D48(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000D8D50);
  return result;
}

uint64_t sub_1000D8D5C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000D8D64);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000D8D68(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D8D70(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LineRender.AnimationState()
{
  return &type metadata for LineRender.AnimationState;
}

unint64_t sub_1000D8D90()
{
  unint64_t result;

  result = qword_100482700;
  if (!qword_100482700)
  {
    result = swift_getWitnessTable(&unk_1003B5DA8, &type metadata for LineRender.AnimationState);
    atomic_store(result, (unint64_t *)&qword_100482700);
  }
  return result;
}

uint64_t sub_1000D8DD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000EDC8(&qword_100482708);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1000D8E1C(id *a1, uint64_t a2, double a3, double a4)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  Class isa;
  NSString v10;
  id v11;
  void *v12;
  id v13;
  Class v14;
  NSString v15;
  id v16;
  void *v17;
  id v18;
  void (*v19)(_QWORD *__return_ptr, __n128);
  __n128 v20;
  double v21;
  Class v22;
  NSString v23;
  id v24;
  void *v25;
  id v26;
  void (*v27)(_QWORD *__return_ptr, __n128);
  __n128 v28;
  uint64_t v29;
  double v30;
  Class v31;
  NSString v32;
  id v33;
  void *v34;
  id v35;
  Class v36;
  NSString v37;
  _QWORD __src[64];
  __n128 __dst[32];

  v5 = *a1;
  v6 = objc_msgSend(*a1, "geometry");
  if (v6)
  {
    v7 = v6;
    v8 = objc_msgSend(v6, "firstMaterial");

    if (v8)
    {
      SCNVector3.init(_:)(a3);
      isa = SCNVector3._bridgeToObjectiveC()().super.isa;
      v10 = String._bridgeToObjectiveC()();
      objc_msgSend(v8, "setValue:forKeyPath:", isa, v10);

    }
  }
  v11 = objc_msgSend(v5, "geometry");
  if (v11)
  {
    v12 = v11;
    v13 = objc_msgSend(v11, "firstMaterial");

    if (v13)
    {
      SCNVector3.init(_:)(a4);
      v14 = SCNVector3._bridgeToObjectiveC()().super.isa;
      v15 = String._bridgeToObjectiveC()();
      objc_msgSend(v13, "setValue:forKeyPath:", v14, v15);

    }
  }
  v16 = objc_msgSend(v5, "geometry");
  if (v16)
  {
    v17 = v16;
    v18 = objc_msgSend(v16, "firstMaterial");

    if (v18)
    {
      v19 = *(void (**)(_QWORD *__return_ptr, __n128))(**(_QWORD **)(a2
                                                                              + OBJC_IVAR____TtC7Measure10LineRender__arframe)
                                                                + 144);
      v20 = swift_retain();
      v19(__src, v20);
      swift_release();
      memcpy(__dst, __src, sizeof(__dst));
      sub_100012C00((uint64_t)__dst);
      v21 = simd_float4x4.position.getter(__dst[21], __dst[22], __dst[23], __dst[24]);
      SCNVector3.init(_:)(v21);
      v22 = SCNVector3._bridgeToObjectiveC()().super.isa;
      v23 = String._bridgeToObjectiveC()();
      objc_msgSend(v18, "setValue:forKeyPath:", v22, v23);

    }
  }
  v24 = objc_msgSend(v5, "geometry");
  if (v24)
  {
    v25 = v24;
    v26 = objc_msgSend(v24, "firstMaterial");

    if (v26)
    {
      v27 = *(void (**)(_QWORD *__return_ptr, __n128))(**(_QWORD **)(a2
                                                                              + OBJC_IVAR____TtC7Measure10LineRender__arframe)
                                                                + 144);
      v28 = swift_retain();
      v27(__src, v28);
      swift_release();
      memcpy(__dst, __src, sizeof(__dst));
      v29 = sub_100012C00((uint64_t)__dst);
      v30 = simd_float4x4.forward.getter(v29);
      SCNVector3.init(_:)(v30);
      v31 = SCNVector3._bridgeToObjectiveC()().super.isa;
      v32 = String._bridgeToObjectiveC()();
      objc_msgSend(v26, "setValue:forKeyPath:", v31, v32);

    }
  }
  v33 = objc_msgSend(v5, "geometry");
  if (v33)
  {
    v34 = v33;
    v35 = objc_msgSend(v33, "firstMaterial");

    if (v35)
    {
      v36 = Float._bridgeToObjectiveC()().super.super.isa;
      v37 = String._bridgeToObjectiveC()();
      objc_msgSend(v35, "setValue:forKeyPath:", v36, v37);

    }
  }
}

uint64_t sub_1000D91B8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1000D91DC(void *a1, Swift::Double a2)
{
  uint64_t v2;

  sub_1000D87C8(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_1000D91E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000D91F4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

id sub_1000D9204@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "isLineOcclusionAlphaBlendingEnabled");
  *a2 = (_BYTE)result;
  return result;
}

id sub_1000D9234(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setIsLineOcclusionAlphaBlendingEnabled:", *a1);
}

uint64_t sub_1000D9248(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_unknownObjectWeakDestroy(v2 + 16, a2);
  return swift_deallocObject(v2, 24, 7);
}

uint64_t sub_1000D926C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1000D9298(uint64_t a1)
{
  uint64_t v1;

  sub_1000D7B44(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1000D92A0()
{
  _BYTE *v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, __n128);
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, __n128);
  __n128 v13;
  id v14;
  char v15;
  BOOL IsBoldTextEnabled;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t result;

  v1 = v0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC7Measure10LineRender_state] = static MeasureObjectState.default;
  v0[OBJC_IVAR____TtC7Measure10LineRender_shouldOcclude] = 1;
  v0[OBJC_IVAR____TtC7Measure10LineRender_hasDivisions] = 0;
  v2 = OBJC_IVAR____TtC7Measure10LineRender__render;
  KeyPath = swift_getKeyPath(&unk_1003B5DE0);
  v4 = sub_10000EDC8(&qword_100481998);
  if (qword_10047AD88 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v5 = qword_1004AF890;
  v6 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v4 + 272);
  v7 = swift_retain();
  *(_QWORD *)&v1[v2] = v6(KeyPath, v5, v7);
  v8 = OBJC_IVAR____TtC7Measure10LineRender__arframe;
  v9 = swift_getKeyPath(&unk_1003B5E08);
  v10 = sub_10000EDC8(&qword_10047BBD0);
  v11 = qword_1004AF890;
  v12 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v10 + 272);
  v13 = swift_retain();
  *(_QWORD *)&v1[v8] = v12(v9, v11, v13);
  if (qword_10047A738 != -1)
    swift_once(&qword_10047A738, sub_10000E4DC);
  v14 = (id)qword_1004AF068;
  v15 = UIContentSizeCategory.isAccessibilityCategory.getter(v14);

  IsBoldTextEnabled = 1;
  if ((v15 & 1) == 0)
    IsBoldTextEnabled = UIAccessibilityIsBoldTextEnabled();
  v1[OBJC_IVAR____TtC7Measure10LineRender_accessibleSizeOn] = IsBoldTextEnabled;
  v17 = OBJC_IVAR____TtC7Measure10LineRender_line;
  *(_QWORD *)&v1[v17] = objc_msgSend(objc_allocWithZone((Class)SCNNode), "init");
  *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure10LineRender_linePrime] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure10LineRender_linePrimeGeometry] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure10LineRender_confirmedLineNodes] = _swiftEmptyArrayStorage;
  v18 = &v1[OBJC_IVAR____TtC7Measure10LineRender_transformAtSnapStart];
  *((_OWORD *)v18 + 2) = 0u;
  *((_OWORD *)v18 + 3) = 0u;
  *(_OWORD *)v18 = 0u;
  *((_OWORD *)v18 + 1) = 0u;
  v18[64] = 1;
  v19 = &v1[OBJC_IVAR____TtC7Measure10LineRender_targetTransformAtSnap];
  *((_OWORD *)v19 + 2) = 0u;
  *((_OWORD *)v19 + 3) = 0u;
  *(_OWORD *)v19 = 0u;
  *((_OWORD *)v19 + 1) = 0u;
  v19[64] = 1;
  v1[OBJC_IVAR____TtC7Measure10LineRender_isMinor] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___lineMaterial] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___minorSuggestedMaterial] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___dashedLineMaterial] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___linePrimeMaterial] = 0;
  v20 = &v1[OBJC_IVAR____TtC7Measure10LineRender_snapAnimationPercent];
  *(_DWORD *)v20 = 0;
  v20[4] = 1;
  v1[OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___isOcclusionInitialized] = 2;
  *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___visibilityThicknessGuideMaterial] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___visibilityGuideMaterial] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___thicknessGuideMaterial] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___plainGuideMaterial] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___objectLineMaterial] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure10LineRender_lineDivisionsRender] = 0;
  v21 = &v1[OBJC_IVAR____TtC7Measure10LineRender_primarySegment];
  *(_OWORD *)v21 = 0u;
  *((_OWORD *)v21 + 1) = 0u;
  v21[32] = 1;
  v22 = &v1[OBJC_IVAR____TtC7Measure10LineRender_renderedSegment];
  *(_OWORD *)v22 = 0u;
  *((_OWORD *)v22 + 1) = 0u;
  v22[32] = 1;
  v23 = &v1[OBJC_IVAR____TtC7Measure10LineRender_startTime];
  v24 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v23, 1, 1, v24);
  v1[OBJC_IVAR____TtC7Measure10LineRender_animationState] = 0;
  v25 = &v1[OBJC_IVAR____TtC7Measure10LineRender_verticalLineNormalOverride];
  *(_QWORD *)v25 = 0;
  *((_QWORD *)v25 + 1) = 0;
  v25[16] = 1;
  v1[OBJC_IVAR____TtC7Measure10LineRender_shouldShowDivisions] = 0;
  *(_DWORD *)&v1[OBJC_IVAR____TtC7Measure10LineRender_dottedLineBreakPointDist] = 1075838976;
  *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___lock] = 0;
  v1[OBJC_IVAR____TtC7Measure10LineRender__needsRendering] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure10LineRender_isLabelVisible] = 1;

  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001003D8190, "Measure/LineRender.swift", 24, 2, 230, 0);
  __break(1u);
  return result;
}

void sub_1000D964C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *Strong;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  id v16;

  Strong = (void *)swift_unknownObjectWeakLoadStrong(v2 + OBJC_IVAR____TtC7Measure27SurfaceSideMeasurementStack_sideTitle, a2);
  if (!Strong)
  {
    __break(1u);
    goto LABEL_8;
  }
  v4 = Strong;
  objc_msgSend(Strong, "setSelectedRange:", 0, 0);

  v6 = (void *)swift_unknownObjectWeakLoadStrong(v2 + OBJC_IVAR____TtC7Measure27SurfaceSideMeasurementStack_mainUnit, v5);
  if (!v6)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v7 = v6;
  objc_msgSend(v6, "setSelectedRange:", 0, 0);

  v9 = swift_unknownObjectWeakLoadStrong(v2 + OBJC_IVAR____TtC7Measure27SurfaceSideMeasurementStack_secondaryLabelStack, v8);
  if (!v9)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v11 = (char *)v9;
  v12 = (void *)swift_unknownObjectWeakLoadStrong(v9 + OBJC_IVAR____TtC7Measure19SecondaryLabelStack_topLabel, v10);
  if (!v12)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v13 = v12;
  objc_msgSend(v12, "setSelectedRange:", 0, 0);

  v15 = (void *)swift_unknownObjectWeakLoadStrong(&v11[OBJC_IVAR____TtC7Measure19SecondaryLabelStack_bottomLabel], v14);
  if (v15)
  {
    v16 = v15;
    objc_msgSend(v15, "setSelectedRange:", 0, 0);

    return;
  }
LABEL_11:
  __break(1u);
}

void sub_1000D9838()
{
  char *v0;
  id v1;
  NSString v2;
  uint64_t v3;
  void *v4;
  id v5;
  char *v6;
  uint64_t v7;
  uint64_t Strong;
  void *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  char v20;
  uint64_t v21;
  char v22;
  id v23;
  id v24;
  id v25;

  v1 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v2 = String._bridgeToObjectiveC()();

  v3 = OBJC_IVAR____TtC7Measure27SurfaceSideMeasurementStack_contentView;
  if (!*(_QWORD *)&v0[OBJC_IVAR____TtC7Measure27SurfaceSideMeasurementStack_contentView])
  {
    __break(1u);
    goto LABEL_16;
  }
  objc_msgSend(v0, "addSubview:");
  v4 = *(void **)&v0[v3];
  if (!v4)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v5 = v4;
  objc_msgSend(v0, "bounds");
  objc_msgSend(v5, "setFrame:");

  v6 = &v0[OBJC_IVAR____TtC7Measure27SurfaceSideMeasurementStack_sideTitle];
  Strong = swift_unknownObjectWeakLoadStrong(&v0[OBJC_IVAR____TtC7Measure27SurfaceSideMeasurementStack_sideTitle], v7);
  if (!Strong)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v9 = (void *)Strong;
  v10 = (void *)objc_opt_self(UIFont);
  v11 = objc_msgSend(v10, "preferredFontForTextStyle:", UIFontTextStyleBody);
  v12 = objc_msgSend(v11, "fontDescriptor");

  v13 = objc_msgSend(v12, "fontDescriptorWithSymbolicTraits:", 2);
  if (!v13)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v14 = objc_msgSend(v10, "fontWithDescriptor:size:", v13, 0.0);

  objc_msgSend(v9, "setFont:", v14);
  v16 = swift_unknownObjectWeakLoadStrong(v6, v15);
  if (!v16)
  {
LABEL_19:
    __break(1u);
    return;
  }
  v17 = (void *)v16;
  if (qword_10047B120 != -1)
    swift_once(&qword_10047B120, sub_100197B60);
  v18 = (void *)qword_1004AFCA0;
  v19 = *(void **)algn_1004AFCA8;
  if ((byte_1004AFCB0 & 1) != 0)
  {
    v20 = byte_1004AFCC0;
    v21 = qword_1004AFCB8;
    v22 = byte_10048A2A0;
    v23 = (id)qword_1004AFCA0;
    v25 = sub_100070DBC(v22, v21, v20);
    sub_100021580(v18, v19, 1);
  }
  else
  {
    if ((byte_10048A2A0 & 1) != 0)
      v24 = *(id *)algn_1004AFCA8;
    else
      v24 = (id)qword_1004AFCA0;
    v25 = v24;
  }
  objc_msgSend(v17, "setTextColor:", v25);

}

id sub_1000D9BB8(void *a1)
{
  char *v1;
  objc_class *ObjectType;
  double v4;
  id v5;
  id v6;
  id v7;
  objc_super v9;

  ObjectType = (objc_class *)swift_getObjectType(v1);
  swift_unknownObjectWeakInit(&v1[OBJC_IVAR____TtC7Measure27SurfaceSideMeasurementStack_sideTitle], 0);
  swift_unknownObjectWeakInit(&v1[OBJC_IVAR____TtC7Measure27SurfaceSideMeasurementStack_mainUnit], 0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure27SurfaceSideMeasurementStack_contentView] = 0;
  *(_QWORD *)&v4 = swift_unknownObjectWeakInit(&v1[OBJC_IVAR____TtC7Measure27SurfaceSideMeasurementStack_secondaryLabelStack], 0).n128_u64[0];
  v9.receiver = v1;
  v9.super_class = ObjectType;
  v5 = objc_msgSendSuper2(&v9, "initWithCoder:", a1, v4);
  v6 = v5;
  if (v5)
  {
    v7 = v5;
    sub_1000D9838();

  }
  return v6;
}

uint64_t type metadata accessor for SurfaceSideMeasurementStack()
{
  return objc_opt_self(_TtC7Measure27SurfaceSideMeasurementStack);
}

double sub_1000D9D24(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  char *v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  char *v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _BYTE *v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  BOOL v29;
  char v30;
  char *v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  id v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int64_t v57;
  int64_t v58;
  uint64_t v59;
  double result;
  char *v61;
  uint64_t v62;
  int64_t v64;
  _QWORD v65[3];
  char v66[24];

  v7 = (uint64_t *)(v3 + OBJC_IVAR____TtC7Measure8LineView_worldLines);
  swift_beginAccess(v7, v66, 0, 0);
  v8 = *v7;
  v9 = *v7 + 64;
  v10 = 1 << *(_BYTE *)(*v7 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(*v7 + 64);
  v64 = (unint64_t)(v10 + 63) >> 6;
  swift_bridgeObjectRetain(v8);
  v13 = 0;
  while (1)
  {
    if (v12)
    {
      v16 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_24;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
      goto LABEL_114;
    if (v18 >= v64)
      break;
    v19 = *(_QWORD *)(v9 + 8 * v18);
    ++v13;
    if (!v19)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v64)
        break;
      v19 = *(_QWORD *)(v9 + 8 * v13);
      if (!v19)
      {
        v13 = v18 + 2;
        if (v18 + 2 >= v64)
          break;
        v19 = *(_QWORD *)(v9 + 8 * v13);
        if (!v19)
        {
          v18 += 3;
          if (v18 >= v64)
            break;
          v19 = *(_QWORD *)(v9 + 8 * v18);
          if (!v19)
          {
            while (1)
            {
              v13 = v18 + 1;
              if (__OFADD__(v18, 1))
                goto LABEL_115;
              if (v13 >= v64)
                goto LABEL_87;
              v19 = *(_QWORD *)(v9 + 8 * v13);
              ++v18;
              if (v19)
                goto LABEL_23;
            }
          }
          v13 = v18;
        }
      }
    }
LABEL_23:
    v12 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_24:
    v20 = *(void **)(*(_QWORD *)(v8 + 56) + 8 * v17);
    if (a2
      && ((v21 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v17), v22 = v21[1], *v21 == a1) ? (v23 = v22 == a2) : (v23 = 0),
          (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v21, v22, a1, a2, 0) & 1) != 0) && a3 != 2))
    {
      v24 = qword_10047AC58;
      v25 = v20;
      if (v24 != -1)
        swift_once(&qword_10047AC58, sub_1001833E8);
      if (byte_1004AF790 == 1 && v25[OBJC_IVAR____TtC7Measure10LineRender_hasDivisions] == 1)
      {
        v4 = *(char **)&v25[OBJC_IVAR____TtC7Measure10LineRender_lineDivisionsRender];
        if (v4)
        {
          if ((a3 & 1) == 0
            || ((v26 = *(_QWORD *)&v4[OBJC_IVAR____TtC7Measure19LineDivisionsRender_state],
                 v27 = v26 > 5,
                 v28 = (1 << v26) & 0x25,
                 !v27)
              ? (v29 = v28 == 0)
              : (v29 = 1),
                v29))
          {
            v25[OBJC_IVAR____TtC7Measure10LineRender_shouldShowDivisions] = 0;
          }
          else
          {
            v30 = v25[OBJC_IVAR____TtC7Measure10LineRender_shouldShowDivisions];
            v25[OBJC_IVAR____TtC7Measure10LineRender_shouldShowDivisions] = 1;
            if ((v30 & 1) == 0)
            {
              v31 = v4;
              sub_1000D31E8();
LABEL_57:
              v40 = *(_QWORD *)&v25[OBJC_IVAR____TtC7Measure10LineRender_state];
              v41 = *(_QWORD *)&v4[OBJC_IVAR____TtC7Measure19LineDivisionsRender_state];
              *(_QWORD *)&v4[OBJC_IVAR____TtC7Measure19LineDivisionsRender_state] = v40;
              if (v41 != v40)
              {
                switch(v40)
                {
                  case 0:
                  case 2:
                  case 5:
                  case 7:
                    if (qword_10047AEB8 != -1)
                      swift_once(&qword_10047AEB8, sub_1001962B0);
                    v42 = qword_1004AF9B0;
                    if (qword_10047AEE8 != -1)
                      swift_once(&qword_10047AEE8, sub_100196358);
                    v43 = qword_1004AF9E0;
                    goto LABEL_75;
                  case 1:
                  case 3:
                  case 4:
                  case 6:
                  case 8:
                    if (qword_10047AEE0 != -1)
                      swift_once(&qword_10047AEE0, sub_100196344);
                    v42 = qword_1004AF9D8;
                    if (qword_10047AF08 != -1)
                      swift_once(&qword_10047AF08, sub_1001963A8);
                    v43 = qword_1004AFA00;
LABEL_75:
                    sub_10002C618(v42, v43);
                    break;
                  case 9:
                    if (qword_10047AED8 != -1)
                      swift_once(&qword_10047AED8, sub_100196320);
                    v49 = qword_10047AF10;
                    v50 = (id)qword_1004AF9D0;
                    if (v49 != -1)
                      swift_once(&qword_10047AF10, sub_1001963BC);
                    sub_10002C618((uint64_t)v50, qword_1004AFA08);

                    break;
                  default:
                    v65[0] = v40;
                    goto LABEL_119;
                }
              }
              v15 = a3 & 1;
LABEL_6:
              sub_10002A8A8(v15);

              goto LABEL_7;
            }
          }
          v39 = v4;
          goto LABEL_57;
        }
      }
    }
    else
    {
      v32 = qword_10047AC58;
      v33 = v20;
      if (v32 != -1)
        swift_once(&qword_10047AC58, sub_1001833E8);
      if (byte_1004AF790 == 1 && v33[OBJC_IVAR____TtC7Measure10LineRender_hasDivisions] == 1)
      {
        v4 = *(char **)&v33[OBJC_IVAR____TtC7Measure10LineRender_lineDivisionsRender];
        if (v4)
        {
          v33[OBJC_IVAR____TtC7Measure10LineRender_shouldShowDivisions] = 0;
          v18 = *(_QWORD *)&v33[OBJC_IVAR____TtC7Measure10LineRender_state];
          v34 = *(_QWORD *)&v4[OBJC_IVAR____TtC7Measure19LineDivisionsRender_state];
          *(_QWORD *)&v4[OBJC_IVAR____TtC7Measure19LineDivisionsRender_state] = v18;
          if (v34 != v18)
          {
            switch(v18)
            {
              case 0:
              case 2:
              case 5:
              case 7:
                v44 = qword_10047AEB8;
                v45 = v4;
                if (v44 != -1)
                  swift_once(&qword_10047AEB8, sub_1001962B0);
                v37 = qword_1004AF9B0;
                if (qword_10047AEE8 != -1)
                  swift_once(&qword_10047AEE8, sub_100196358);
                v38 = qword_1004AF9E0;
                goto LABEL_69;
              case 1:
              case 3:
              case 4:
              case 6:
              case 8:
                v35 = qword_10047AEE0;
                v36 = v4;
                if (v35 != -1)
                  swift_once(&qword_10047AEE0, sub_100196344);
                v37 = qword_1004AF9D8;
                if (qword_10047AF08 != -1)
                  swift_once(&qword_10047AF08, sub_1001963A8);
                v38 = qword_1004AFA00;
LABEL_69:
                sub_10002C618(v37, v38);
                goto LABEL_5;
              case 9:
                v46 = qword_10047AED8;
                v4;
                if (v46 != -1)
                  swift_once(&qword_10047AED8, sub_100196320);
                v47 = qword_10047AF10;
                v48 = (id)qword_1004AF9D0;
                if (v47 != -1)
                  swift_once(&qword_10047AF10, sub_1001963BC);
                sub_10002C618((uint64_t)v48, qword_1004AFA08);

                goto LABEL_5;
              default:
                goto LABEL_117;
            }
          }
          v14 = v4;
LABEL_5:
          v15 = 0;
          goto LABEL_6;
        }
      }
    }
LABEL_7:
    sub_1000D4900();

  }
LABEL_87:
  swift_release();
  v51 = (uint64_t *)(v62 + OBJC_IVAR____TtC7Measure8LineView_worldPoints);
  swift_beginAccess(v62 + OBJC_IVAR____TtC7Measure8LineView_worldPoints, v65, 0, 0);
  v52 = *v51;
  v53 = v52 + 64;
  v54 = 1 << *(_BYTE *)(v52 + 32);
  v55 = -1;
  if (v54 < 64)
    v55 = ~(-1 << v54);
  v56 = v55 & *(_QWORD *)(v52 + 64);
  v57 = (unint64_t)(v54 + 63) >> 6;
  swift_bridgeObjectRetain_n(v52, 2);
  v58 = 0;
  while (2)
  {
    if (v56)
    {
      v56 &= v56 - 1;
      goto LABEL_110;
    }
    v18 = v58 + 1;
    if (__OFADD__(v58, 1))
    {
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
      goto LABEL_116;
    }
    if (v18 >= v57)
      goto LABEL_112;
    v59 = *(_QWORD *)(v53 + 8 * v18);
    ++v58;
    if (v59)
      goto LABEL_109;
    v58 = v18 + 1;
    if (v18 + 1 >= v57)
      goto LABEL_112;
    v59 = *(_QWORD *)(v53 + 8 * v58);
    if (v59)
      goto LABEL_109;
    v58 = v18 + 2;
    if (v18 + 2 >= v57)
      goto LABEL_112;
    v59 = *(_QWORD *)(v53 + 8 * v58);
    if (v59)
      goto LABEL_109;
    v58 = v18 + 3;
    if (v18 + 3 >= v57)
      goto LABEL_112;
    v59 = *(_QWORD *)(v53 + 8 * v58);
    if (v59)
      goto LABEL_109;
    v58 = v18 + 4;
    if (v18 + 4 >= v57)
      goto LABEL_112;
    v59 = *(_QWORD *)(v53 + 8 * v58);
    if (v59)
    {
LABEL_109:
      v56 = (v59 - 1) & v59;
LABEL_110:
      if ((sub_10012CE50() & 1) == 0)
        sub_10012E820();
      continue;
    }
    break;
  }
  v18 += 5;
  if (v18 < v57)
  {
    v59 = *(_QWORD *)(v53 + 8 * v18);
    if (!v59)
    {
      while (1)
      {
        v58 = v18 + 1;
        if (__OFADD__(v18, 1))
          break;
        if (v58 >= v57)
          goto LABEL_112;
        v59 = *(_QWORD *)(v53 + 8 * v58);
        ++v18;
        if (v59)
          goto LABEL_109;
      }
LABEL_116:
      __break(1u);
LABEL_117:
      v65[0] = v18;
      v61 = v4;
LABEL_119:
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for MeasureObjectState, v65, &type metadata for MeasureObjectState, &type metadata for Int);
      __break(1u);
      JUMPOUT(0x1000DA54CLL);
    }
    v58 = v18;
    goto LABEL_109;
  }
LABEL_112:
  swift_release();
  *(_QWORD *)&result = swift_bridgeObjectRelease(v52).n128_u64[0];
  return result;
}

void sub_1000DA59C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  int64_t v20;
  int64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  _BYTE v25[24];

  v1 = v0;
  v2 = (_QWORD *)(v0 + OBJC_IVAR____TtC7Measure8LineView_worldLines);
  swift_beginAccess(v2, v25, 0, 0);
  v3 = *v2;
  v4 = *v2 + 64;
  v5 = 1 << *(_BYTE *)(*v2 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(*v2 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain_n(*v2, 2);
  v9 = 0;
  while (1)
  {
    if (v7)
    {
      v7 &= v7 - 1;
      goto LABEL_5;
    }
    v10 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }
    if (v10 >= v8)
      goto LABEL_25;
    v11 = *(_QWORD *)(v4 + 8 * v10);
    ++v9;
    if (!v11)
    {
      v9 = v10 + 1;
      if (v10 + 1 >= v8)
        goto LABEL_25;
      v11 = *(_QWORD *)(v4 + 8 * v9);
      if (!v11)
      {
        v9 = v10 + 2;
        if (v10 + 2 >= v8)
          goto LABEL_25;
        v11 = *(_QWORD *)(v4 + 8 * v9);
        if (!v11)
        {
          v9 = v10 + 3;
          if (v10 + 3 >= v8)
            goto LABEL_25;
          v11 = *(_QWORD *)(v4 + 8 * v9);
          if (!v11)
          {
            v9 = v10 + 4;
            if (v10 + 4 >= v8)
              goto LABEL_25;
            v11 = *(_QWORD *)(v4 + 8 * v9);
            if (!v11)
              break;
          }
        }
      }
    }
LABEL_24:
    v7 = (v11 - 1) & v11;
LABEL_5:
    sub_1000D4900();
  }
  v12 = v10 + 5;
  if (v12 < v8)
  {
    v11 = *(_QWORD *)(v4 + 8 * v12);
    if (!v11)
    {
      while (1)
      {
        v9 = v12 + 1;
        if (__OFADD__(v12, 1))
          break;
        if (v9 >= v8)
          goto LABEL_25;
        v11 = *(_QWORD *)(v4 + 8 * v9);
        ++v12;
        if (v11)
          goto LABEL_24;
      }
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    v9 = v12;
    goto LABEL_24;
  }
LABEL_25:
  swift_release();
  swift_bridgeObjectRelease(v3);
  if (!objc_msgSend((id)objc_opt_self(Gestalt), "jasperAvailable"))
    return;
  v13 = (uint64_t *)(v1 + OBJC_IVAR____TtC7Measure8LineView_worldPoints);
  swift_beginAccess(v13, &v24, 0, 0);
  v14 = *v13;
  v15 = v14 + 64;
  v16 = 1 << *(_BYTE *)(v14 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & *(_QWORD *)(v14 + 64);
  v19 = (unint64_t)(v16 + 63) >> 6;
  swift_bridgeObjectRetain_n(v14, 2);
  v20 = 0;
  while (2)
  {
    if (v18)
    {
      v18 &= v18 - 1;
      goto LABEL_49;
    }
    v21 = v20 + 1;
    if (__OFADD__(v20, 1))
      goto LABEL_54;
    if (v21 >= v19)
    {
LABEL_51:
      swift_release();
      swift_bridgeObjectRelease(v14);
      return;
    }
    v22 = *(_QWORD *)(v15 + 8 * v21);
    ++v20;
    if (v22)
      goto LABEL_48;
    v20 = v21 + 1;
    if (v21 + 1 >= v19)
      goto LABEL_51;
    v22 = *(_QWORD *)(v15 + 8 * v20);
    if (v22)
      goto LABEL_48;
    v20 = v21 + 2;
    if (v21 + 2 >= v19)
      goto LABEL_51;
    v22 = *(_QWORD *)(v15 + 8 * v20);
    if (v22)
      goto LABEL_48;
    v20 = v21 + 3;
    if (v21 + 3 >= v19)
      goto LABEL_51;
    v22 = *(_QWORD *)(v15 + 8 * v20);
    if (v22)
      goto LABEL_48;
    v20 = v21 + 4;
    if (v21 + 4 >= v19)
      goto LABEL_51;
    v22 = *(_QWORD *)(v15 + 8 * v20);
    if (v22)
    {
LABEL_48:
      v18 = (v22 - 1) & v22;
LABEL_49:
      if ((sub_10012CE50() & 1) == 0)
        sub_10012E820();
      continue;
    }
    break;
  }
  v23 = v21 + 5;
  if (v23 >= v19)
    goto LABEL_51;
  v22 = *(_QWORD *)(v15 + 8 * v23);
  if (v22)
  {
    v20 = v23;
    goto LABEL_48;
  }
  while (1)
  {
    v20 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v20 >= v19)
      goto LABEL_51;
    v22 = *(_QWORD *)(v15 + 8 * v20);
    ++v23;
    if (v22)
      goto LABEL_48;
  }
LABEL_56:
  __break(1u);
}

void sub_1000DA8BC(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  void *v18;
  id v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int64_t v26;
  int64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  void *v31;
  char *v32;
  float v33;
  __n128 v34;
  void (*v35)(double *__return_ptr, __n128);
  __n128 v36;
  void (*v37)(_QWORD *__return_ptr, __n128);
  __n128 v38;
  uint64_t v39;
  double v40;
  CGFloat v41;
  double v42;
  CGFloat v43;
  int64_t v44;
  unint64_t v45;
  int64_t v46;
  uint64_t v47;
  __n128 v48;
  __n128 v49;
  __n128 v50;
  __n128 v51;
  __n128 v52;
  _QWORD v53[64];
  _OWORD __dst[32];
  double __src[64];
  char v56[32];
  CGPoint v57;
  CGRect v58;

  v7 = v6;
  v14 = (uint64_t *)(v6 + OBJC_IVAR____TtC7Measure8LineView_worldLines);
  swift_beginAccess(v14, __src, 32, 0);
  v15 = *v14;
  if (*(_QWORD *)(v15 + 16))
  {
    swift_bridgeObjectRetain(a2);
    v16 = sub_1000C80A8(a1, a2);
    if ((v17 & 1) != 0)
    {
      v18 = *(void **)(*(_QWORD *)(v15 + 56) + 8 * v16);
      swift_endAccess(__src);
      v19 = v18;
      swift_bridgeObjectRelease(a2);
      sub_1000D7844(a3, a4, a5, a6);

    }
    else
    {
      swift_endAccess(__src);
      swift_bridgeObjectRelease(a2);
    }
  }
  else
  {
    swift_endAccess(__src);
  }
  v20 = (uint64_t *)(v7 + OBJC_IVAR____TtC7Measure8LineView_worldPoints);
  swift_beginAccess(v7 + OBJC_IVAR____TtC7Measure8LineView_worldPoints, v56, 0, 0);
  v21 = *v20;
  v47 = *v20 + 64;
  v22 = 1 << *(_BYTE *)(*v20 + 32);
  v23 = -1;
  if (v22 < 64)
    v23 = ~(-1 << v22);
  v24 = v23 & *(_QWORD *)(*v20 + 64);
  v25 = OBJC_IVAR____TtC7Measure8LineView__currentFrame;
  v26 = (unint64_t)(v22 + 63) >> 6;
  swift_bridgeObjectRetain(v21);
  v27 = 0;
  while (1)
  {
    if (v24)
    {
      v28 = __clz(__rbit64(v24));
      v24 &= v24 - 1;
      v29 = v28 | (v27 << 6);
      goto LABEL_10;
    }
    v44 = v27 + 1;
    if (__OFADD__(v27, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v44 >= v26)
      goto LABEL_28;
    v45 = *(_QWORD *)(v47 + 8 * v44);
    ++v27;
    if (!v45)
    {
      v27 = v44 + 1;
      if (v44 + 1 >= v26)
        goto LABEL_28;
      v45 = *(_QWORD *)(v47 + 8 * v27);
      if (!v45)
      {
        v27 = v44 + 2;
        if (v44 + 2 >= v26)
          goto LABEL_28;
        v45 = *(_QWORD *)(v47 + 8 * v27);
        if (!v45)
        {
          v27 = v44 + 3;
          if (v44 + 3 >= v26)
            goto LABEL_28;
          v45 = *(_QWORD *)(v47 + 8 * v27);
          if (!v45)
            break;
        }
      }
    }
LABEL_27:
    v24 = (v45 - 1) & v45;
    v29 = __clz(__rbit64(v45)) + (v27 << 6);
LABEL_10:
    v30 = *(char **)(*(_QWORD *)(v21 + 56) + 8 * v29);
    type metadata accessor for MeasureCamera(0);
    v31 = *(void **)&v30[OBJC_IVAR____TtC7Measure11PointRender_point];
    v32 = v30;
    objc_msgSend(v31, "position");
    v34.n128_f64[0] = SIMD3<>.init(_:)(v33);
    v52 = v34;
    v35 = *(void (**)(double *__return_ptr, __n128))(**(_QWORD **)(v7 + v25) + 144);
    v36 = swift_retain();
    v35(__src, v36);
    swift_release();
    memcpy(__dst, __src, sizeof(__dst));
    sub_100012C00((uint64_t)__dst);
    v50 = (__n128)__dst[12];
    v51 = (__n128)__dst[11];
    v48 = (__n128)__dst[14];
    v49 = (__n128)__dst[13];
    v37 = *(void (**)(_QWORD *__return_ptr, __n128))(**(_QWORD **)(v7 + v25) + 144);
    v38 = swift_retain();
    v37(v53, v38);
    swift_release();
    memcpy(__src, v53, sizeof(__src));
    v39 = sub_100012C00((uint64_t)__src);
    v40 = static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)(v39, v52, v51, v50, v49, v48, __src[4]);
    v41 = CGPoint.init(_:)(v40);
    v43 = v42;
    v58.origin.x = CGRect.init(center:size:)(a5, a6, a3, a4);
    v57.x = v41;
    v57.y = v43;
    objc_msgSend(v32, "setHidden:", CGRectContainsPoint(v58, v57));

  }
  v46 = v44 + 4;
  if (v46 >= v26)
  {
LABEL_28:
    swift_release();
    return;
  }
  v45 = *(_QWORD *)(v47 + 8 * v46);
  if (v45)
  {
    v27 = v46;
    goto LABEL_27;
  }
  while (1)
  {
    v27 = v46 + 1;
    if (__OFADD__(v46, 1))
      break;
    if (v27 >= v26)
      goto LABEL_28;
    v45 = *(_QWORD *)(v47 + 8 * v27);
    ++v46;
    if (v45)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void sub_1000DAC50(_QWORD *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  id v15;
  char *v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v39;
  __n128 v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  uint64_t v44;
  _BYTE v45[24];
  _BYTE v46[24];

  v3 = v2;
  v6 = (_QWORD *)(v2 + OBJC_IVAR____TtC7Measure8LineView_worldPoints);
  swift_beginAccess(v2 + OBJC_IVAR____TtC7Measure8LineView_worldPoints, v46, 0, 0);
  v7 = *v6;
  v8 = *(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0xB8);
  v9 = swift_bridgeObjectRetain(*v6);
  v10 = v8(v9);
  v12 = v11;
  if (*(_QWORD *)(v7 + 16))
  {
    sub_1000C80A8(v10, v11);
    v14 = v13;
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v12);
    if ((v14 & 1) != 0)
      return;
  }
  else
  {
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v12);
  }
  v15 = objc_allocWithZone((Class)type metadata accessor for PointRender());
  v16 = sub_10012DE9C((void *)1, 0);
  v42 = (__n128)matrix_identity_float4x4.columns[1];
  v43 = (__n128)matrix_identity_float4x4.columns[0];
  v40 = (__n128)matrix_identity_float4x4.columns[3];
  v41 = (__n128)matrix_identity_float4x4.columns[2];
  v17.n128_f64[0] = (*(double (**)(void))((swift_isaMask & *a1) + 0x2B0))();
  v21.n128_f64[0] = simd_float4x4.position.getter(v17, v18, v19, v20);
  v22.n128_f64[0] = simd_float4x4.translated(to:)(v21, v43, v42, v41, v40);
  v26 = sub_10012CA94(v22, v23, v24, v25);
  v27 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0x2F0))(v26);
  v28 = *(_QWORD *)&v16[OBJC_IVAR____TtC7Measure11PointRender_type];
  *(_QWORD *)&v16[OBJC_IVAR____TtC7Measure11PointRender_type] = v27;
  if (v27 != v28)
    sub_10012D04C(*(id *)&v16[OBJC_IVAR____TtC7Measure11PointRender_state]);
  v29 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *a1) + 0xD0))();
  v30 = OBJC_IVAR____TtC7Measure11PointRender_state;
  v31 = *(void **)&v16[OBJC_IVAR____TtC7Measure11PointRender_state];
  *(_QWORD *)&v16[OBJC_IVAR____TtC7Measure11PointRender_state] = v29;
  if (v29 != v31)
    sub_10012D04C(v29);
  if ((a2 & 1) != 0)
  {
    v32 = *(_QWORD *)&v16[v30];
    *(_QWORD *)&v16[v30] = 1;
    if (v32 != 1)
      sub_10012D04C((id)1);
  }
  v33 = (void *)objc_opt_self(SCNTransaction);
  objc_msgSend(v33, "begin");
  objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC7Measure8LineView_lineParentNode), "addChildNode:", v16);
  v34 = v8((uint64_t)objc_msgSend(v33, "commit"));
  v36 = v35;
  swift_beginAccess(v6, v45, 33, 0);
  v37 = v16;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v6);
  v44 = *v6;
  *v6 = 0x8000000000000000;
  sub_1000BCBB4((uint64_t)v37, v34, v36, isUniquelyReferenced_nonNull_native);
  v39 = *v6;
  *v6 = v44;
  swift_bridgeObjectRelease(v36);
  swift_bridgeObjectRelease(v39);
  swift_endAccess(v45);

}

void sub_1000DAF0C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  void *v10;
  char *v11;
  double (*v12)(void);
  __n128 v13;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  void *v35;
  id v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  __n128 v45;
  __n128 v46;
  __n128 v47;
  __n128 v48;
  __n128 v49;
  __n128 v50;
  _BYTE v51[24];

  v3 = (*(uint64_t (**)(void))((swift_isaMask & *a1) + 0xB8))();
  v5 = v4;
  v6 = (uint64_t *)(v1 + OBJC_IVAR____TtC7Measure8LineView_worldPoints);
  swift_beginAccess(v1 + OBJC_IVAR____TtC7Measure8LineView_worldPoints, v51, 32, 0);
  v7 = *v6;
  if (*(_QWORD *)(*v6 + 16) && (v8 = sub_1000C80A8(v3, v5), (v9 & 1) != 0))
  {
    v10 = *(void **)(*(_QWORD *)(v7 + 56) + 8 * v8);
    swift_endAccess(v51);
    v11 = v10;
    swift_bridgeObjectRelease(v5);
    v49 = (__n128)matrix_identity_float4x4.columns[1];
    v50 = (__n128)matrix_identity_float4x4.columns[0];
    v47 = (__n128)matrix_identity_float4x4.columns[3];
    v48 = (__n128)matrix_identity_float4x4.columns[2];
    v12 = *(double (**)(void))((swift_isaMask & *a1) + 0x2B0);
    v13.n128_f64[0] = v12();
    v17.n128_f64[0] = simd_float4x4.position.getter(v13, v14, v15, v16);
    v18.n128_f64[0] = simd_float4x4.translated(to:)(v17, v50, v49, v48, v47);
    v22 = sub_10012CA94(v18, v19, v20, v21);
    v23 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0x2F0))(v22);
    v24 = *(_QWORD *)&v11[OBJC_IVAR____TtC7Measure11PointRender_type];
    *(_QWORD *)&v11[OBJC_IVAR____TtC7Measure11PointRender_type] = v23;
    if (v23 != v24)
      sub_10012D04C(*(id *)&v11[OBJC_IVAR____TtC7Measure11PointRender_state]);
    v25 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *a1) + 0xD0))();
    v26 = *(void **)&v11[OBJC_IVAR____TtC7Measure11PointRender_state];
    *(_QWORD *)&v11[OBJC_IVAR____TtC7Measure11PointRender_state] = v25;
    if (v25 != v26)
      sub_10012D04C(v25);
    if (objc_msgSend((id)objc_opt_self(Gestalt), "jasperAvailable"))
    {
      v27 = (_QWORD *)(*(uint64_t (**)(void))((swift_isaMask & *a1) + 0x2B8))();
      if (v27)
      {
        v28 = v27;
        v29 = (*(uint64_t (**)(void))((swift_isaMask & *v27) + 0xB8))();
        v31 = v30;
        swift_beginAccess(v6, v51, 32, 0);
        v32 = *v6;
        if (*(_QWORD *)(*v6 + 16) && (v33 = sub_1000C80A8(v29, v31), (v34 & 1) != 0))
        {
          v35 = *(void **)(*(_QWORD *)(v32 + 56) + 8 * v33);
          swift_endAccess(v51);
          v36 = v35;
          v37 = swift_bridgeObjectRelease(v31);
          v38.n128_f64[0] = ((double (*)(__n128))v12)(v37);
          v42.n128_f64[0] = simd_float4x4.position.getter(v38, v39, v40, v41);
          v43.n128_f64[0] = simd_float4x4.translated(to:)(v42, v50, v49, v48, v47);
          sub_10012CC80(v43, v44, v45, v46);

        }
        else
        {
          swift_bridgeObjectRelease(v31);
          swift_endAccess(v51);

        }
      }
    }

  }
  else
  {
    swift_bridgeObjectRelease(v5);
    swift_endAccess(v51);
  }
}

void sub_1000DB1A4(_QWORD *a1, char a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  unsigned int v17;
  uint64_t (*v18)(void);
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  __n128 v45;
  uint64_t v46;
  char v47;
  _QWORD *v48;
  __n128 v49;
  __n128 v50;
  __n128 v51;
  __n128 v52;
  __n128 v53;
  uint64_t v54;
  uint64_t (*v55)(void);
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;
  char v61;
  char v62;
  __n128 v63;
  __n128 v64;
  __n128 v65;
  __n128 v66;
  __n128 v67;
  __n128 v68;
  __n128 v69;
  __n128 v70;
  uint64_t v71;
  void *v72;
  void *v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v80;
  __n128 v81;
  __n128 v82;
  __n128 v83;
  __n128 v84;
  __n128 v85;
  __n128 v86;
  __n128 v87;
  __n128 v88;
  __n128 v89;
  __n128 v90;
  __n128 v91;
  char v92;
  __n128 v93;
  uint64_t v94;
  _BYTE v95[24];
  char v96[32];

  v4 = v3;
  v8 = (_QWORD *)(v3 + OBJC_IVAR____TtC7Measure8LineView_worldLines);
  swift_beginAccess(v3 + OBJC_IVAR____TtC7Measure8LineView_worldLines, v96, 0, 0);
  v9 = *v8;
  v10 = *(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0xB8);
  v11 = swift_bridgeObjectRetain(*v8);
  v12 = v10(v11);
  v14 = v13;
  if (*(_QWORD *)(v9 + 16))
  {
    sub_1000C80A8(v12, v13);
    v16 = v15;
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v14);
    if ((v16 & 1) != 0)
      return;
  }
  else
  {
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v14);
  }
  v92 = a3;
  v17 = objc_msgSend((id)objc_opt_self(Gestalt), "jasperAvailable");
  v18 = *(uint64_t (**)(void))((swift_isaMask & *a1) + 0x250);
  v19 = a1;
  v20 = v18();
  v21 = v20;
  v22 = v20 & 0xC000000000000001;
  if (!v17)
  {
    if (!v22)
    {
      if (!*(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        goto LABEL_34;
      }
      v39 = *(id *)(v20 + 32);
LABEL_17:
      v40 = v39;
      v41 = swift_bridgeObjectRelease(v21);
      v42.n128_f64[0] = (*(double (**)(__n128))((swift_isaMask & *v40) + 0x2B0))(v41);
      v90 = v43;
      v91 = v42;
      v88 = v45;
      v89 = v44;

      v46 = v18();
      v19 = (_QWORD *)v46;
      if ((v46 & 0xC000000000000001) == 0)
      {
        v47 = v92;
        if (*(_QWORD *)((v46 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
        {
          __break(1u);
          return;
        }
        v48 = *(id *)(v46 + 40);
        goto LABEL_20;
      }
LABEL_34:
      v48 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v19);
      v47 = v92;
LABEL_20:
      v49 = swift_bridgeObjectRelease(v19);
      v50.n128_f64[0] = (*(double (**)(__n128))((swift_isaMask & *v48) + 0x2B0))(v49);
      v93 = v50;
      v85 = v52;
      v87 = v51;
      v83 = v53;

      if ((a2 & 1) != 0)
        v54 = 1;
      else
        v54 = (*(uint64_t (**)(void))((swift_isaMask & *a1) + 0xD0))();
      objc_allocWithZone((Class)type metadata accessor for LineRender(0));
      v62 = v47 & 1;
      v64 = v90;
      v63 = v91;
      v66 = v88;
      v65 = v89;
      v67 = v93;
      v69 = v85;
      v68 = v87;
      v70 = v83;
      v71 = v54;
      v59 = 1;
      v60 = 0;
      v61 = 0;
      goto LABEL_26;
    }
LABEL_32:
    v39 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v21);
    goto LABEL_17;
  }
  if (v22)
  {
    v23 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v20);
  }
  else
  {
    if (!*(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_30;
    }
    v23 = *(id *)(v20 + 32);
  }
  v24 = v23;
  v25 = swift_bridgeObjectRelease(v21);
  v26.n128_f64[0] = (*(double (**)(__n128))((swift_isaMask & *v24) + 0x2B0))(v25);
  v90 = v27;
  v91 = v26;
  v88 = v29;
  v89 = v28;

  v30 = v18();
  v19 = (_QWORD *)v30;
  if ((v30 & 0xC000000000000001) != 0)
  {
LABEL_30:
    v31 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v19);
    goto LABEL_12;
  }
  if (*(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
  {
    __break(1u);
    goto LABEL_32;
  }
  v31 = *(id *)(v30 + 40);
LABEL_12:
  v32 = v31;
  v33 = swift_bridgeObjectRelease(v19);
  v34.n128_f64[0] = (*(double (**)(__n128))((swift_isaMask & *v32) + 0x2B0))(v33);
  v84 = v35;
  v86 = v34;
  v81 = v37;
  v82 = v36;

  if ((a2 & 1) != 0)
    v38 = 1;
  else
    v38 = (*(uint64_t (**)(void))((swift_isaMask & *a1) + 0xD0))();
  v55 = *(uint64_t (**)(void))((swift_isaMask & *a1) + 0x2C8);
  v56 = v55();
  v57 = v55();
  v58 = (*(uint64_t (**)(void))((swift_isaMask & *a1) + 0x298))();
  objc_allocWithZone((Class)type metadata accessor for LineRender(0));
  v59 = v56 & 1;
  v60 = v57 & 1;
  v61 = v58 & 1;
  v62 = v92 & 1;
  v64 = v90;
  v63 = v91;
  v66 = v88;
  v65 = v89;
  v68 = v84;
  v67 = v86;
  v70 = v81;
  v69 = v82;
  v71 = v38;
LABEL_26:
  sub_1000D34D0(v71, v62, v59, v60, v61, v63, v64, v65, v66, v67, v68, v69, v70);
  v73 = v72;
  v74 = (void *)objc_opt_self(SCNTransaction);
  objc_msgSend(v74, "begin");
  objc_msgSend(*(id *)(v4 + OBJC_IVAR____TtC7Measure8LineView_lineParentNode), "addChildNode:", v73);
  v75 = v10((uint64_t)objc_msgSend(v74, "commit"));
  v77 = v76;
  swift_beginAccess(v8, v95, 33, 0);
  v78 = v73;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v8);
  v94 = *v8;
  *v8 = 0x8000000000000000;
  sub_1000BCD34((uint64_t)v78, v75, v77, isUniquelyReferenced_nonNull_native);
  v80 = *v8;
  *v8 = v94;
  swift_bridgeObjectRelease(v77);
  swift_bridgeObjectRelease(v80);
  swift_endAccess(v95);

}

void sub_1000DB640(_QWORD *a1, char a2, char a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  void *v14;
  _BYTE *v15;
  char v16;
  uint64_t v17;
  uint64_t (*v18)(void);
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  __n128 v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  os_unfair_lock_s *v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  __n128 v45;
  __n128 v46;
  __n128 v47;
  __n128 v48;
  _BYTE v49[24];

  v7 = (*(uint64_t (**)(void))((swift_isaMask & *a1) + 0xB8))();
  v9 = v8;
  v10 = (uint64_t *)(v3 + OBJC_IVAR____TtC7Measure8LineView_worldLines);
  swift_beginAccess(v10, v49, 32, 0);
  v11 = *v10;
  if (!*(_QWORD *)(v11 + 16) || (v12 = sub_1000C80A8(v7, v9), (v13 & 1) == 0))
  {
    swift_bridgeObjectRelease(v9);
    swift_endAccess(v49);
    return;
  }
  v14 = *(void **)(*(_QWORD *)(v11 + 56) + 8 * v12);
  swift_endAccess(v49);
  v15 = v14;
  swift_bridgeObjectRelease(v9);
  if ((objc_msgSend((id)objc_opt_self(Gestalt), "jasperAvailable") & 1) != 0)
  {
    v16 = (*(uint64_t (**)(void))((swift_isaMask & *a1) + 0x298))() & 1;
    v15[OBJC_IVAR____TtC7Measure10LineRender_isOnVerticalGuide] = v16;
    v17 = *(_QWORD *)&v15[OBJC_IVAR____TtC7Measure10LineRender_lineDivisionsRender];
    if (v17)
      *(_BYTE *)(v17 + OBJC_IVAR____TtC7Measure19LineDivisionsRender_isOnVerticalGuide) = v16;
  }
  v18 = *(uint64_t (**)(void))((swift_isaMask & *a1) + 0x250);
  v19 = a1;
  v20 = v18();
  v21 = v20;
  if ((v20 & 0xC000000000000001) != 0)
  {
    v22 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v20);
  }
  else
  {
    if (!*(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_20;
    }
    v22 = *(id *)(v20 + 32);
  }
  v23 = v22;
  v24 = swift_bridgeObjectRelease(v21);
  v25.n128_f64[0] = (*(double (**)(__n128))((swift_isaMask & *v23) + 0x2B0))(v24);
  v47 = v26;
  v48 = v25;
  v45 = v28;
  v46 = v27;

  v29 = v18();
  v19 = (_QWORD *)v29;
  if ((v29 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
    {
      __break(1u);
      return;
    }
    v30 = *(id *)(v29 + 40);
    goto LABEL_12;
  }
LABEL_20:
  v30 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v19);
LABEL_12:
  v31 = v30;
  v32 = swift_bridgeObjectRelease(v19);
  v33.n128_f64[0] = (*(double (**)(__n128))((swift_isaMask & *v31) + 0x2B0))(v32);
  v43 = v34;
  v44 = v33;
  v41 = v36;
  v42 = v35;

  sub_1000D4000(a2 & 1, a3 & 1, v48, v47, v46, v45, v44, v43, v42, v41);
  v37 = (*(uint64_t (**)(void))((swift_isaMask & *a1) + 0xD0))();
  v38 = *(_QWORD *)&v15[OBJC_IVAR____TtC7Measure10LineRender_state];
  *(_QWORD *)&v15[OBJC_IVAR____TtC7Measure10LineRender_state] = v37;
  if (v38 != v37)
  {
    v39 = OBJC_IVAR____TtC7Measure10LineRender__needsRendering;
    if (v15[OBJC_IVAR____TtC7Measure10LineRender__needsRendering] != 1)
    {
      v40 = (os_unfair_lock_s *)sub_1000D3494();
      os_unfair_lock_lock(v40);
      v15[v39] = 1;
      os_unfair_lock_unlock(*(os_unfair_lock_t *)&v15[OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___lock]);
    }
  }

}

void sub_1000DB900(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  __n128 v4;
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;
  __n128 v9;
  __n128 v10;
  __n128 v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  id v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  uint64_t v32;
  _BYTE v33[24];

  v2 = v1;
  v4.n128_f64[0] = (*(double (**)(void))((swift_isaMask & *a1) + 0x2A0))();
  v31 = v4;
  v29 = v6;
  v30 = v5;
  v28 = v7;
  v8.n128_f64[0] = (*(double (**)(void))((swift_isaMask & *a1) + 0x2A8))();
  v26 = v9;
  v27 = v8;
  v24 = v11;
  v25 = v10;
  v12 = static MeasureObjectState.default;
  v13 = objc_allocWithZone((Class)type metadata accessor for LineRender(0));
  sub_1000D34D0(v12, 0, 1, 0, 0, v31, v30, v29, v28, v27, v26, v25, v24);
  v15 = (void *)v14;
  sub_1000DC968(v14, a1);
  v16 = (void *)objc_opt_self(SCNTransaction);
  objc_msgSend(v16, "begin");
  objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC7Measure8LineView_lineParentNode), "addChildNode:", v15);
  objc_msgSend(v16, "commit");
  sub_1000D4E10();
  v17 = (*(uint64_t (**)(void))((swift_isaMask & *a1) + 0xB8))();
  v19 = v18;
  v20 = (_QWORD *)(v2 + OBJC_IVAR____TtC7Measure8LineView_worldLines);
  swift_beginAccess(v20, v33, 33, 0);
  v21 = v15;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v20);
  v32 = *v20;
  *v20 = 0x8000000000000000;
  sub_1000BCD34((uint64_t)v21, v17, v19, isUniquelyReferenced_nonNull_native);
  v23 = *v20;
  *v20 = v32;
  swift_bridgeObjectRelease(v19);
  swift_bridgeObjectRelease(v23);
  swift_endAccess(v33);

}

uint64_t sub_1000DBACC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t result;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  char *v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  char v22[24];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC7Measure8LineView_worldLines);
  result = swift_beginAccess(v0 + OBJC_IVAR____TtC7Measure8LineView_worldLines, v22, 0, 0);
  v3 = 0;
  v4 = *v1;
  v5 = 1 << *(_BYTE *)(*v1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v8 = *(_QWORD *)(v4 + 64);
  v7 = v4 + 64;
  v9 = v6 & v8;
  v10 = (unint64_t)(v5 + 63) >> 6;
  while (v9)
  {
    v11 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v12 = v11 | (v3 << 6);
LABEL_5:
    v13 = *(char **)(*(_QWORD *)(*v1 + 56) + 8 * v12);
    if (*(_QWORD *)&v13[OBJC_IVAR____TtC7Measure10LineRender_state] == 3)
    {
      v20 = *(__n128 *)&v13[OBJC_IVAR____TtC7Measure10LineRender_currentTransforms + 80];
      v21 = *(__n128 *)&v13[OBJC_IVAR____TtC7Measure10LineRender_currentTransforms + 64];
      v18 = *(__n128 *)&v13[OBJC_IVAR____TtC7Measure10LineRender_currentTransforms + 112];
      v19 = *(__n128 *)&v13[OBJC_IVAR____TtC7Measure10LineRender_currentTransforms + 96];
      v17 = v13;
      v21.n128_u64[0] = simd_float4x4.position.getter(v21, v20, v19, v18);

      return v21.n128_u64[0];
    }
  }
  v14 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
    goto LABEL_27;
  }
  if (v14 >= v10)
    return 0;
  v15 = *(_QWORD *)(v7 + 8 * v14);
  ++v3;
  if (v15)
    goto LABEL_22;
  v3 = v14 + 1;
  if (v14 + 1 >= v10)
    return 0;
  v15 = *(_QWORD *)(v7 + 8 * v3);
  if (v15)
    goto LABEL_22;
  v3 = v14 + 2;
  if (v14 + 2 >= v10)
    return 0;
  v15 = *(_QWORD *)(v7 + 8 * v3);
  if (v15)
    goto LABEL_22;
  v3 = v14 + 3;
  if (v14 + 3 >= v10)
    return 0;
  v15 = *(_QWORD *)(v7 + 8 * v3);
  if (v15)
  {
LABEL_22:
    v9 = (v15 - 1) & v15;
    v12 = __clz(__rbit64(v15)) + (v3 << 6);
    goto LABEL_5;
  }
  v16 = v14 + 4;
  if (v16 >= v10)
    return 0;
  v15 = *(_QWORD *)(v7 + 8 * v16);
  if (v15)
  {
    v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    v3 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v3 >= v10)
      return 0;
    v15 = *(_QWORD *)(v7 + 8 * v3);
    ++v16;
    if (v15)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

double sub_1000DBC94(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  void *v10;
  id v11;
  __n128 v12;
  __n128 v13;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  double result;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  _BYTE v26[24];

  v3 = (*(uint64_t (**)(void))((swift_isaMask & *a1) + 0xB8))();
  v5 = v4;
  v6 = (uint64_t *)(v1 + OBJC_IVAR____TtC7Measure8LineView_worldLines);
  swift_beginAccess(v6, v26, 32, 0);
  v7 = *v6;
  if (*(_QWORD *)(v7 + 16) && (v8 = sub_1000C80A8(v3, v5), (v9 & 1) != 0))
  {
    v10 = *(void **)(*(_QWORD *)(v7 + 56) + 8 * v8);
    swift_endAccess(v26);
    v11 = v10;
    v12 = swift_bridgeObjectRelease(v5);
    v13.n128_f64[0] = (*(double (**)(__n128))((swift_isaMask & *a1) + 0x2A0))(v12);
    v24 = v14;
    v25 = v13;
    v22 = v16;
    v23 = v15;
    v17.n128_f64[0] = (*(double (**)(void))((swift_isaMask & *a1) + 0x2A8))();
    sub_1000D4000(0, 0, v25, v24, v23, v22, v17, v18, v19, v20);
    sub_1000DC968((uint64_t)v11, a1);

  }
  else
  {
    swift_bridgeObjectRelease(v5);
    *(_QWORD *)&result = swift_endAccess(v26).n128_u64[0];
  }
  return result;
}

id sub_1000DBDD0()
{
  char *v0;
  void *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  id result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  void *v30;
  char *v31;
  _QWORD v32[6];
  char v33[24];
  char v34[24];

  v1 = (void *)objc_opt_self(SCNTransaction);
  objc_msgSend(v1, "begin");
  v2 = &v0[OBJC_IVAR____TtC7Measure8LineView_worldLines];
  swift_beginAccess(&v0[OBJC_IVAR____TtC7Measure8LineView_worldLines], v34, 0, 0);
  v3 = *(_QWORD *)v2;
  v4 = v3 + 64;
  v5 = 1 << *(_BYTE *)(v3 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(v3 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = (id)swift_bridgeObjectRetain(v3);
  v10 = 0;
  while (1)
  {
    if (v7)
    {
      v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v12 = v11 | (v10 << 6);
      goto LABEL_5;
    }
    v13 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    if (v13 >= v8)
      goto LABEL_21;
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v10;
    if (!v14)
    {
      v10 = v13 + 1;
      if (v13 + 1 >= v8)
        goto LABEL_21;
      v14 = *(_QWORD *)(v4 + 8 * v10);
      if (!v14)
      {
        v10 = v13 + 2;
        if (v13 + 2 >= v8)
          goto LABEL_21;
        v14 = *(_QWORD *)(v4 + 8 * v10);
        if (!v14)
          break;
      }
    }
LABEL_20:
    v7 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v10 << 6);
LABEL_5:
    result = objc_msgSend(*(id *)(*(_QWORD *)(v3 + 56) + 8 * v12), "removeFromParentNode");
  }
  v15 = v13 + 3;
  if (v15 >= v8)
  {
LABEL_21:
    swift_release();
    v16 = &v0[OBJC_IVAR____TtC7Measure8LineView_worldPoints];
    swift_beginAccess(&v0[OBJC_IVAR____TtC7Measure8LineView_worldPoints], v33, 0, 0);
    v17 = *(_QWORD *)v16;
    v18 = v17 + 64;
    v19 = 1 << *(_BYTE *)(v17 + 32);
    v20 = -1;
    if (v19 < 64)
      v20 = ~(-1 << v19);
    v21 = v20 & *(_QWORD *)(v17 + 64);
    v22 = (unint64_t)(v19 + 63) >> 6;
    result = (id)swift_bridgeObjectRetain(v17);
    v23 = 0;
    while (1)
    {
      if (v21)
      {
        v24 = __clz(__rbit64(v21));
        v21 &= v21 - 1;
        v25 = v24 | (v23 << 6);
      }
      else
      {
        v26 = v23 + 1;
        if (__OFADD__(v23, 1))
          goto LABEL_43;
        if (v26 >= v22)
        {
LABEL_41:
          swift_release();
          v29 = swift_allocObject(&unk_100445378, 24, 7);
          *(_QWORD *)(v29 + 16) = v0;
          v32[4] = sub_1000DC940;
          v32[5] = v29;
          v32[0] = _NSConcreteStackBlock;
          v32[1] = 1107296256;
          v32[2] = sub_10003ECA0;
          v32[3] = &unk_100445390;
          v30 = _Block_copy(v32);
          v31 = v0;
          objc_msgSend(v1, "setCompletionBlock:", v30, swift_release().n128_f64[0]);
          _Block_release(v30);
          return objc_msgSend(v1, "commit");
        }
        v27 = *(_QWORD *)(v18 + 8 * v26);
        ++v23;
        if (!v27)
        {
          v23 = v26 + 1;
          if (v26 + 1 >= v22)
            goto LABEL_41;
          v27 = *(_QWORD *)(v18 + 8 * v23);
          if (!v27)
          {
            v23 = v26 + 2;
            if (v26 + 2 >= v22)
              goto LABEL_41;
            v27 = *(_QWORD *)(v18 + 8 * v23);
            if (!v27)
            {
              v28 = v26 + 3;
              if (v28 >= v22)
                goto LABEL_41;
              v27 = *(_QWORD *)(v18 + 8 * v28);
              if (!v27)
              {
                while (1)
                {
                  v23 = v28 + 1;
                  if (__OFADD__(v28, 1))
                    goto LABEL_45;
                  if (v23 >= v22)
                    goto LABEL_41;
                  v27 = *(_QWORD *)(v18 + 8 * v23);
                  ++v28;
                  if (v27)
                    goto LABEL_40;
                }
              }
              v23 = v28;
            }
          }
        }
LABEL_40:
        v21 = (v27 - 1) & v27;
        v25 = __clz(__rbit64(v27)) + (v23 << 6);
      }
      result = objc_msgSend(*(id *)(*(_QWORD *)(v17 + 56) + 8 * v25), "removeFromParentNode");
    }
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
    v10 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    v10 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v10 >= v8)
      goto LABEL_21;
    v14 = *(_QWORD *)(v4 + 8 * v10);
    ++v15;
    if (v14)
      goto LABEL_20;
  }
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
  return result;
}

uint64_t sub_1000DC120()
{
  return sub_1000DC148(&OBJC_IVAR____TtC7Measure8LineView_worldLines);
}

uint64_t sub_1000DC134()
{
  return sub_1000DC148(&OBJC_IVAR____TtC7Measure8LineView_worldPoints);
}

uint64_t sub_1000DC148(_QWORD *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  _BYTE v19[24];

  v2 = (uint64_t *)(v1 + *a1);
  swift_beginAccess(v2, v19, 0, 0);
  v3 = *v2;
  v4 = v3 + 64;
  v5 = 1 << *(_BYTE *)(v3 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(v3 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain(v3);
  v10 = 0;
  while (1)
  {
    if (v7)
    {
      v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v12 = v11 | (v10 << 6);
      goto LABEL_21;
    }
    v13 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v13 >= v8)
      return swift_release(v3);
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v10;
    if (!v14)
    {
      v10 = v13 + 1;
      if (v13 + 1 >= v8)
        return swift_release(v3);
      v14 = *(_QWORD *)(v4 + 8 * v10);
      if (!v14)
      {
        v10 = v13 + 2;
        if (v13 + 2 >= v8)
          return swift_release(v3);
        v14 = *(_QWORD *)(v4 + 8 * v10);
        if (!v14)
          break;
      }
    }
LABEL_20:
    v7 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v10 << 6);
LABEL_21:
    v16 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v12 + 8);
    v17 = *(void **)(*(_QWORD *)(v3 + 56) + 8 * v12);
    swift_bridgeObjectRetain(v16);
    v18 = v17;
    if (!MeasureObjectState.isCapturable()())
      objc_msgSend(v18, "removeFromParentNode");

    result = swift_bridgeObjectRelease(v16);
  }
  v15 = v13 + 3;
  if (v15 >= v8)
    return swift_release(v3);
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
    v10 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    v10 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v10 >= v8)
      return swift_release(v3);
    v14 = *(_QWORD *)(v4 + 8 * v10);
    ++v15;
    if (v14)
      goto LABEL_20;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1000DC2FC()
{
  return sub_1000DC314(&OBJC_IVAR____TtC7Measure8LineView_worldLines);
}

uint64_t sub_1000DC308()
{
  return sub_1000DC314(&OBJC_IVAR____TtC7Measure8LineView_worldPoints);
}

uint64_t sub_1000DC314(_QWORD *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v21;
  _BYTE v22[24];

  v2 = (uint64_t *)(v1 + *a1);
  swift_beginAccess(v2, v22, 0, 0);
  v3 = *v2;
  v4 = v3 + 64;
  v5 = 1 << *(_BYTE *)(v3 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(v3 + 64);
  v8 = OBJC_IVAR____TtC7Measure8LineView_lineParentNode;
  v9 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain(v3);
  v11 = 0;
  while (1)
  {
    if (v7)
    {
      v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v13 = v12 | (v11 << 6);
      goto LABEL_21;
    }
    v14 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v9)
      return swift_release(v3);
    v15 = *(_QWORD *)(v4 + 8 * v14);
    ++v11;
    if (!v15)
    {
      v11 = v14 + 1;
      if (v14 + 1 >= v9)
        return swift_release(v3);
      v15 = *(_QWORD *)(v4 + 8 * v11);
      if (!v15)
      {
        v11 = v14 + 2;
        if (v14 + 2 >= v9)
          return swift_release(v3);
        v15 = *(_QWORD *)(v4 + 8 * v11);
        if (!v15)
          break;
      }
    }
LABEL_20:
    v7 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v11 << 6);
LABEL_21:
    v17 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v13 + 8);
    v18 = *(void **)(*(_QWORD *)(v3 + 56) + 8 * v13);
    swift_bridgeObjectRetain(v17);
    v19 = v18;
    v20 = objc_msgSend(v19, "parentNode");

    if (!v20)
      objc_msgSend(*(id *)(v21 + v8), "addChildNode:", v19);

    result = swift_bridgeObjectRelease(v17);
  }
  v16 = v14 + 3;
  if (v16 >= v9)
    return swift_release(v3);
  v15 = *(_QWORD *)(v4 + 8 * v16);
  if (v15)
  {
    v11 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    v11 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v11 >= v9)
      return swift_release(v3);
    v15 = *(_QWORD *)(v4 + 8 * v11);
    ++v16;
    if (v15)
      goto LABEL_20;
  }
LABEL_25:
  __break(1u);
  return result;
}

void sub_1000DC4E4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v8;
  void *v9;
  _BYTE v10[24];

  v8 = (void *)objc_opt_self(SCNTransaction);
  objc_msgSend(v8, "begin");
  objc_msgSend(a1, "removeFromParentNode");
  objc_msgSend(v8, "commit");
  swift_beginAccess(a2 + OBJC_IVAR____TtC7Measure8LineView_worldLines, v10, 33, 0);
  v9 = (void *)sub_100093DAC(a3, a4);
  swift_endAccess(v10);

}

uint64_t sub_1000DC5A0(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __n128 v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  __n128 v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD aBlock[6];

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100049274();
  v11 = (void *)static OS_dispatch_queue.main.getter(v10);
  v12 = swift_allocObject(&unk_1004453C8, 24, 7);
  *(_QWORD *)(v12 + 16) = a1;
  aBlock[4] = sub_1000DC960;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003ECA0;
  aBlock[3] = &unk_1004453E0;
  v13 = _Block_copy(aBlock);
  v14 = a1;
  v15 = swift_release();
  static DispatchQoS.unspecified.getter(v15);
  aBlock[0] = _swiftEmptyArrayStorage;
  v16 = sub_100030E1C();
  v17 = sub_10000EDC8((uint64_t *)&unk_10047E430);
  v18 = sub_100030E64();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v17, v18, v2, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v5, v13);
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_1000DC768(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  _BYTE v8[24];

  v2 = (uint64_t *)(a1 + OBJC_IVAR____TtC7Measure8LineView_worldLines);
  swift_beginAccess(a1 + OBJC_IVAR____TtC7Measure8LineView_worldLines, v8, 1, 0);
  v3 = *v2;
  *v2 = (uint64_t)&_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease(v3);
  v4 = (uint64_t *)(a1 + OBJC_IVAR____TtC7Measure8LineView_worldPoints);
  swift_beginAccess(v4, &v7, 1, 0);
  v5 = *v4;
  *v4 = (uint64_t)&_swiftEmptyDictionarySingleton;
  return swift_bridgeObjectRelease(v5);
}

uint64_t type metadata accessor for LineView()
{
  return objc_opt_self(_TtC7Measure8LineView);
}

uint64_t sub_1000DC8BC()
{
  sub_1000DC148(&OBJC_IVAR____TtC7Measure8LineView_worldLines);
  return sub_1000DC148(&OBJC_IVAR____TtC7Measure8LineView_worldPoints);
}

uint64_t sub_1000DC8F4()
{
  sub_1000DC314(&OBJC_IVAR____TtC7Measure8LineView_worldLines);
  return sub_1000DC314(&OBJC_IVAR____TtC7Measure8LineView_worldPoints);
}

uint64_t sub_1000DC91C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000DC940()
{
  uint64_t v0;

  return sub_1000DC5A0(*(void **)(v0 + 16));
}

uint64_t sub_1000DC948(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000DC958(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000DC960()
{
  uint64_t v0;

  return sub_1000DC768(*(_QWORD *)(v0 + 16));
}

void sub_1000DC968(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  _QWORD v9[6];
  uint64_t v10;
  _BYTE v11[48];
  _BYTE v12[48];

  v4 = (*(uint64_t (**)(void))((swift_isaMask & *a2) + 0xD0))();
  v5 = OBJC_IVAR____TtC7Measure10LineRender_state;
  v6 = *(_QWORD *)(a1 + OBJC_IVAR____TtC7Measure10LineRender_state);
  *(_QWORD *)(a1 + OBJC_IVAR____TtC7Measure10LineRender_state) = v4;
  if (v6 != v4)
  {
    v7 = OBJC_IVAR____TtC7Measure10LineRender__needsRendering;
    if (*(_BYTE *)(a1 + OBJC_IVAR____TtC7Measure10LineRender__needsRendering) != 1)
    {
      v8 = (os_unfair_lock_s *)sub_1000D3494();
      os_unfair_lock_lock(v8);
      *(_BYTE *)(a1 + v7) = 1;
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(a1 + OBJC_IVAR____TtC7Measure10LineRender____lazy_storage___lock));
    }
  }
  (*(void (**)(_QWORD *__return_ptr))((swift_isaMask & *a2) + 0x2B0))(v9);
  if (*(_QWORD *)(a1 + v5) == 8)
  {
    sub_1000D8DD4((uint64_t)v9, (uint64_t)v12);
    sub_1000D30D0((uint64_t)v12);
    sub_1000D8DD4((uint64_t)&v10, (uint64_t)v11);
    sub_1000D30DC((uint64_t)v11);
  }
}

char *sub_1000DCA74(void *a1)
{
  void *v1;
  void *v2;
  objc_class *ObjectType;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, __n128);
  __n128 v12;
  uint64_t v13;
  char *v14;
  id v15;
  id v16;
  void *v17;
  char *v18;
  id v19;
  objc_super v21;

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType(v1);
  v5 = OBJC_IVAR____TtC7Measure8LineView__currentFrame;
  KeyPath = swift_getKeyPath(&unk_1003B5EE0);
  v7 = sub_10000EDC8(&qword_10047BBD0);
  v8 = qword_10047AD88;
  v9 = v2;
  if (v8 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v10 = qword_1004AF890;
  v11 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v7 + 272);
  v12 = swift_retain();
  *(_QWORD *)&v9[v5] = v11(KeyPath, v10, v12);
  v13 = OBJC_IVAR____TtC7Measure8LineView_lineParentNode;
  *(_QWORD *)&v9[v13] = objc_msgSend(objc_allocWithZone((Class)SCNNode), "init");
  *(_QWORD *)&v9[OBJC_IVAR____TtC7Measure8LineView_worldPoints] = _swiftEmptyDictionarySingleton;
  *(_QWORD *)&v9[OBJC_IVAR____TtC7Measure8LineView_worldLines] = _swiftEmptyDictionarySingleton;
  v14 = &v9[OBJC_IVAR____TtC7Measure8LineView_firstPointInSessionId];
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC7Measure8LineView_scene] = a1;
  v15 = a1;

  v21.receiver = v9;
  v21.super_class = ObjectType;
  v16 = objc_msgSendSuper2(&v21, "init");
  v17 = (void *)objc_opt_self(SCNTransaction);
  v18 = (char *)v16;
  objc_msgSend(v17, "begin");
  v19 = objc_msgSend(v15, "rootNode");
  objc_msgSend(v19, "addChildNode:", *(_QWORD *)&v18[OBJC_IVAR____TtC7Measure8LineView_lineParentNode]);

  objc_msgSend(v17, "commit");
  return v18;
}

uint64_t sub_1000DCC48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *);
  uint64_t v11;

  v4 = type metadata accessor for Notification(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void (**)(char *))(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)(a2);
  swift_retain(v8);
  v9(v7);
  swift_release(v8);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void sub_1000DCCEC()
{
  sub_1000DCDCC((uint64_t)&unk_100445518, (uint64_t)sub_1000E076C, (uint64_t)&unk_100445530);
}

void sub_1000DCD08()
{
  sub_1000DCDCC((uint64_t)&unk_100445568, (uint64_t)sub_1000E0774, (uint64_t)&unk_100445580);
}

void sub_1000DCD24()
{
  sub_1000DCDCC((uint64_t)&unk_1004459C8, (uint64_t)sub_1000E0B54, (uint64_t)&unk_1004459E0);
}

void sub_1000DCD40()
{
  sub_1000DCDCC((uint64_t)&unk_1004456A8, (uint64_t)sub_1000E0794, (uint64_t)&unk_1004456C0);
}

void sub_1000DCD5C()
{
  sub_1000DCDCC((uint64_t)&unk_100445658, (uint64_t)sub_1000E078C, (uint64_t)&unk_100445670);
}

void sub_1000DCD78()
{
  sub_1000DCDCC((uint64_t)&unk_100445978, (uint64_t)sub_1000E0B4C, (uint64_t)&unk_100445990);
}

void sub_1000DCD94()
{
  sub_1000DCDCC((uint64_t)&unk_100445608, (uint64_t)sub_1000E0784, (uint64_t)&unk_100445620);
}

void sub_1000DCDB0()
{
  sub_1000DCDCC((uint64_t)&unk_1004455B8, (uint64_t)sub_1000E077C, (uint64_t)&unk_1004455D0);
}

void sub_1000DCDCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  _QWORD v12[6];

  v7 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_10047A740 != -1)
    swift_once(&qword_10047A740, sub_10000E4F4);
  v8 = qword_1004AF070;
  v9 = swift_allocObject(a1, 24, 7);
  swift_unknownObjectWeakInit(v9 + 16, v3);
  v12[4] = a2;
  v12[5] = v9;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  v12[2] = sub_1000DCC48;
  v12[3] = a3;
  v10 = _Block_copy(v12);
  v11 = objc_msgSend(v7, "addObserverForName:object:queue:usingBlock:", v8, 0, 0, v10, swift_release().n128_f64[0]);
  _Block_release(v10);
  swift_unknownObjectRelease(v11);

}

void sub_1000DCEF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  char v6;
  _QWORD v7[4];
  _BYTE v8[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2, v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    Notification.object.getter(v7);
    if (v7[3])
    {
      if ((swift_dynamicCast(&v6, v7, (char *)&type metadata for Any + 8, &type metadata for AccessibilityEvent, 6) & 1) != 0)
        __asm { BR              X10 }

    }
    else
    {

      sub_100018180((uint64_t)v7);
    }
  }
}

void sub_1000DD124(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  char v6;
  _QWORD v7[4];
  _BYTE v8[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2, v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    Notification.object.getter(v7);
    if (v7[3])
    {
      if ((swift_dynamicCast(&v6, v7, (char *)&type metadata for Any + 8, &type metadata for AccessibilityEvent, 6) & 1) != 0)
        __asm { BR              X10 }

    }
    else
    {

      sub_100018180((uint64_t)v7);
    }
  }
}

void sub_1000DD25C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  char v6;
  _QWORD v7[4];
  _BYTE v8[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2, v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    Notification.object.getter(v7);
    if (v7[3])
    {
      if ((swift_dynamicCast(&v6, v7, (char *)&type metadata for Any + 8, &type metadata for AccessibilityEvent, 6) & 1) != 0)
        __asm { BR              X10 }

    }
    else
    {

      sub_100018180((uint64_t)v7);
    }
  }
}

void sub_1000DD3C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  char v6;
  _QWORD v7[4];
  _BYTE v8[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2, v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    Notification.object.getter(v7);
    if (v7[3])
    {
      if ((swift_dynamicCast(&v6, v7, (char *)&type metadata for Any + 8, &type metadata for AccessibilityEvent, 6) & 1) != 0)
        __asm { BR              X10 }

    }
    else
    {

      sub_100018180((uint64_t)v7);
    }
  }
}

void sub_1000DD510(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  char v6;
  char v7;
  _QWORD v8[4];
  _BYTE v9[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v9, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2, v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    Notification.object.getter(v8);
    if (v8[3])
    {
      swift_dynamicCast(&v7, v8, (char *)&type metadata for Any + 8, &type metadata for AccessibilityEvent, 6);
      if ((v6 & 1) != 0)
        __asm { BR              X10 }

    }
    else
    {

      sub_100018180((uint64_t)v8);
    }
  }
}

void sub_1000DD6EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  char v6;
  _QWORD v7[4];
  _BYTE v8[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2, v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    Notification.object.getter(v7);
    if (v7[3])
    {
      if ((swift_dynamicCast(&v6, v7, (char *)&type metadata for Any + 8, &type metadata for AccessibilityEvent, 6) & 1) != 0)
        __asm { BR              X10 }

    }
    else
    {

      sub_100018180((uint64_t)v7);
    }
  }
}

void sub_1000DD840(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  char v6;
  _QWORD v7[4];
  _BYTE v8[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2, v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    Notification.object.getter(v7);
    if (v7[3])
    {
      if ((swift_dynamicCast(&v6, v7, (char *)&type metadata for Any + 8, &type metadata for AccessibilityEvent, 6) & 1) != 0)
        __asm { BR              X10 }

    }
    else
    {

      sub_100018180((uint64_t)v7);
    }
  }
}

void sub_1000DD9C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  char v6;
  _QWORD v7[4];
  _BYTE v8[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2, v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    Notification.object.getter(v7);
    if (v7[3])
    {
      if ((swift_dynamicCast(&v6, v7, (char *)&type metadata for Any + 8, &type metadata for AccessibilityEvent, 6) & 1) != 0)
        __asm { BR              X10 }

    }
    else
    {

      sub_100018180((uint64_t)v7);
    }
  }
}

uint64_t sub_1000DDB60(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000DDB80(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

id sub_1000DDBA0(uint64_t a1)
{
  return *(id *)(a1 + qword_1004827B0);
}

id sub_1000DDBB0(uint64_t a1)
{
  return *(id *)(a1 + qword_1004827D0);
}

void sub_1000DDBC0(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  id v4;

  v4 = *(id *)(a1 + qword_1004827D0);
  *(_QWORD *)(a1 + qword_1004827D0) = a3;
  v3 = a3;

}

void sub_1000DDBF4(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v3;
  id v4;
  void *v5;
  _BYTE *v6;
  id v7;
  uint64_t v8;
  void *v9;
  _BYTE *v10;
  void **v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id (*v15)();
  uint64_t v16;

  v1[qword_100482818] = 1;
  v3 = swift_allocObject(&unk_1004458D8, 24, 7);
  *(_QWORD *)(v3 + 16) = v1;
  v4 = objc_allocWithZone((Class)UIViewPropertyAnimator);
  v15 = sub_1000E0854;
  v16 = v3;
  v11 = _NSConcreteStackBlock;
  v12 = 1107296256;
  v13 = sub_10003ECA0;
  v14 = &unk_1004458F0;
  v5 = _Block_copy(&v11);
  v6 = v1;
  swift_release();
  v7 = objc_msgSend(v4, "initWithDuration:dampingRatio:animations:", v5, 0.4, 0.9);
  _Block_release(v5);
  v8 = swift_allocObject(&unk_100445928, 32, 7);
  *(_QWORD *)(v8 + 16) = v6;
  *(_QWORD *)(v8 + 24) = a1;
  v15 = sub_1000E089C;
  v16 = v8;
  v11 = _NSConcreteStackBlock;
  v12 = 1107296256;
  v13 = sub_10002E168;
  v14 = &unk_100445940;
  v9 = _Block_copy(&v11);
  v10 = v6;
  objc_msgSend(v7, "addCompletion:", v9, swift_release().n128_f64[0]);
  _Block_release(v9);
  objc_msgSend(v7, "setInterruptible:", 0);
  objc_msgSend(v7, "startAnimation");

}

id sub_1000DDD9C(uint64_t a1)
{
  uint64_t v1;
  double v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat tx;
  CGFloat ty;
  CGFloat *v17;
  void *v18;
  CGAffineTransform v20;

  sub_1000DDF5C();
  v3 = 0.0;
  switch(a1)
  {
    case 0:
    case 1:
      v4 = *(void **)(v1 + qword_100482808);
      if (v4)
        objc_msgSend(v4, "setActive:", 1);
      v5 = *(void **)(v1 + qword_1004827E0);
      if (v5)
        goto LABEL_9;
      break;
    case 2:
      v6 = *(void **)(v1 + qword_100482808);
      if (v6)
        objc_msgSend(v6, "setActive:", 1);
      v5 = *(void **)(v1 + qword_1004827E8);
      v3 = 3.14159265;
      if (v5)
LABEL_9:
        objc_msgSend(v5, "setActive:", 1);
      break;
    case 3:
      v7 = *(void **)(v1 + qword_100482800);
      if (v7)
        objc_msgSend(v7, "setActive:", 1);
      v8 = *(id *)(v1 + qword_1004827F0);
      if (v8)
        v8 = objc_msgSend(v8, "setActive:", 1);
      v3 = *(double *)CGFloat.piDiv2.unsafeMutableAddressor(v8);
      break;
    case 4:
      v9 = *(void **)(v1 + qword_100482800);
      if (v9)
        objc_msgSend(v9, "setActive:", 1);
      v10 = *(id *)(v1 + qword_1004827F8);
      if (v10)
        v10 = objc_msgSend(v10, "setActive:", 1);
      v3 = -*(double *)CGFloat.piDiv2.unsafeMutableAddressor(v10);
      break;
    default:
      break;
  }
  CGAffineTransformMakeRotation(&v20, v3);
  a = v20.a;
  b = v20.b;
  c = v20.c;
  d = v20.d;
  tx = v20.tx;
  ty = v20.ty;
  v17 = (CGFloat *)(v1 + qword_100482810);
  *v17 = v20.a;
  v17[1] = b;
  v17[2] = c;
  v17[3] = d;
  v17[4] = tx;
  v17[5] = ty;
  v18 = *(void **)(v1 + qword_1004827C0);
  v20.a = a;
  v20.b = b;
  v20.c = c;
  v20.d = d;
  v20.tx = tx;
  v20.ty = ty;
  return objc_msgSend(v18, "setTransform:", &v20);
}

id sub_1000DDF5C()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id result;

  v1 = *(void **)(v0 + qword_1004827F8);
  if (v1)
    objc_msgSend(v1, "setActive:", 0);
  v2 = *(void **)(v0 + qword_1004827F0);
  if (v2)
    objc_msgSend(v2, "setActive:", 0);
  v3 = *(void **)(v0 + qword_1004827E8);
  if (v3)
    objc_msgSend(v3, "setActive:", 0);
  v4 = *(void **)(v0 + qword_1004827E0);
  if (v4)
    objc_msgSend(v4, "setActive:", 0);
  v5 = *(void **)(v0 + qword_100482800);
  if (v5)
    objc_msgSend(v5, "setActive:", 0);
  result = *(id *)(v0 + qword_100482808);
  if (result)
    return objc_msgSend(result, "setActive:", 0);
  return result;
}

id sub_1000DE028(void *a1, char a2)
{
  char *v2;
  objc_class *ObjectType;
  char *v6;
  uint64_t v7;
  id v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t KeyPath;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, __n128);
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, __n128);
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, __n128);
  __n128 v30;
  uint64_t v31;
  id v32;
  id v33;
  objc_super v35;

  ObjectType = (objc_class *)swift_getObjectType(v2);
  v6 = &v2[qword_1004827B8];
  *(_QWORD *)v6 = 0;
  v6[8] = 1;
  v7 = qword_1004827C0;
  v8 = objc_allocWithZone((Class)UIView);
  v9 = v2;
  *(_QWORD *)&v2[v7] = objc_msgSend(v8, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v10 = qword_1004827C8;
  *(_QWORD *)&v9[v10] = objc_msgSend(objc_allocWithZone((Class)CAShapeLayer), "init");
  v11 = qword_1004827D0;
  *(_QWORD *)&v9[v11] = objc_msgSend(objc_allocWithZone((Class)CAShapeLayer), "init");
  *(_QWORD *)&v9[qword_1004827E0] = 0;
  *(_QWORD *)&v9[qword_1004827E8] = 0;
  *(_QWORD *)&v9[qword_1004827F0] = 0;
  *(_QWORD *)&v9[qword_1004827F8] = 0;
  *(_QWORD *)&v9[qword_100482800] = 0;
  *(_QWORD *)&v9[qword_100482808] = 0;
  v12 = &v9[qword_100482810];
  *(_QWORD *)v12 = 0x3FF0000000000000;
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)v12 + 2) = 0;
  *((_QWORD *)v12 + 3) = 0x3FF0000000000000;
  *((_QWORD *)v12 + 4) = 0;
  *((_QWORD *)v12 + 5) = 0;
  v9[qword_100482818] = 0;
  *(_QWORD *)&v9[qword_100482820] = 0;
  v13 = qword_100482828;
  KeyPath = swift_getKeyPath(&unk_1003B5FA8);
  v15 = sub_10000EDC8((uint64_t *)&unk_100481B90);
  if (qword_10047AD88 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v16 = qword_1004AF890;
  v17 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v15 + 272);
  v18 = swift_retain();
  *(_QWORD *)&v9[v13] = v17(KeyPath, v16, v18);
  v19 = qword_100482830;
  v20 = swift_getKeyPath(&unk_1003B5FD0);
  v21 = sub_10000EDC8((uint64_t *)&unk_100486710);
  v22 = qword_1004AF890;
  v23 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v21 + 272);
  v24 = swift_retain();
  *(_QWORD *)&v9[v19] = v23(v20, v22, v24);
  v25 = qword_100482838;
  v26 = sub_10000EDC8((uint64_t *)&unk_1004810D0);
  v27 = swift_getKeyPath(&unk_1003B5FF8);
  v28 = qword_1004AF890;
  v29 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v26 + 272);
  v30 = swift_retain();
  *(_QWORD *)&v9[v25] = v29(v27, v28, v30);
  sub_1000E0540();
  *(_QWORD *)&v9[qword_1004827B0] = v31;
  v9[qword_1004827D8] = a2 & 1;

  objc_msgSend(a1, "frame");
  v35.receiver = v9;
  v35.super_class = ObjectType;
  v32 = objc_msgSendSuper2(&v35, "initWithFrame:");
  objc_msgSend(a1, "addSubview:", v32);
  v33 = v32;
  objc_msgSend(a1, "frame");
  objc_msgSend(v33, "frame");
  objc_msgSend(v33, "setFrame:");

  objc_msgSend(v33, "setUserInteractionEnabled:", 0);
  objc_msgSend(v33, "updateText:", 0);
  sub_1000DE3A4();
  sub_1000DCDCC((uint64_t)&unk_100445450, (uint64_t)sub_1000E0734, (uint64_t)&unk_100445468);

  return v33;
}

void sub_1000DE3A4()
{
  char *v0;
  double v1;
  double v2;
  double v3;
  double v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  CGFloat v16;
  void *v17;
  char *v18;
  char isEscapingClosureAtFileLocation;
  CGAffineTransform v20;

  sub_1000DF264();
  v2 = v1;
  v4 = v3;
  v5 = *(void **)&v0[qword_1004827D0];
  v6 = (void *)objc_opt_self(UIBezierPath);
  v7 = v5;
  v8 = objc_msgSend(v6, "bezierPathWithRoundedRect:byRoundingCorners:cornerRadii:", -1, 0.0, 0.0, v2, v4, 15.0, 15.0);
  v9 = objc_msgSend(v8, "CGPath");

  objc_msgSend(v7, "setPath:", v9);
  sub_1000DE684();
  sub_1000DE810();
  sub_1000DEB18();
  v10 = objc_msgSend((id)objc_opt_self(UIBlurEffect), "effectWithStyle:", 17);
  v11 = objc_msgSend(objc_allocWithZone((Class)UIVisualEffectView), "initWithEffect:", v10);
  objc_msgSend(v0, "bounds");
  objc_msgSend(v11, "setFrame:");
  objc_msgSend(v11, "setAutoresizingMask:", 18);
  v12 = qword_1004827C0;
  objc_msgSend(*(id *)&v0[qword_1004827C0], "insertSubview:atIndex:", v11, 0);

  objc_msgSend(v0, "setAlpha:", 0.0);
  v13 = *(void **)&v0[v12];
  CGAffineTransformMakeScale(&v20, 0.9, 0.9);
  objc_msgSend(v13, "setTransform:", &v20);
  v14 = (void *)objc_opt_self(UIView);
  v15 = swift_allocObject(&unk_1004454A0, 24, 7);
  *(_QWORD *)(v15 + 16) = v0;
  v16 = COERCE_DOUBLE(swift_allocObject(&unk_1004454C8, 32, 7));
  *(_QWORD *)(*(_QWORD *)&v16 + 16) = sub_1000E0754;
  *(_QWORD *)(*(_QWORD *)&v16 + 24) = v15;
  *(_QWORD *)&v20.tx = sub_10009036C;
  v20.ty = v16;
  *(_QWORD *)&v20.a = _NSConcreteStackBlock;
  *(_QWORD *)&v20.b = 1107296256;
  *(_QWORD *)&v20.c = sub_1000DDB80;
  *(_QWORD *)&v20.d = &unk_1004454E0;
  v17 = _Block_copy(&v20);
  v18 = v0;
  swift_retain();
  objc_msgSend(v14, "performWithoutAnimation:", v17, swift_release().n128_f64[0]);
  _Block_release(v17);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(*(_QWORD *)&v16, "", 99, 115, 40, 1);
  swift_release();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
}

void sub_1000DE684()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  double v8;
  double v9;
  double v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  CATransform3D v14;
  CGAffineTransform m;

  if (*(_BYTE *)(v0 + qword_1004827D8) == 1)
  {
    v1 = qword_1004827C8;
    v2 = *(id *)(v0 + qword_1004827C8);
    v3 = sub_1000DF328(-15.0, -0.7);
    v4 = objc_msgSend(v3, "CGPath");

    objc_msgSend(v2, "setPath:", v4);
    v5 = *(void **)(v0 + v1);
    CGAffineTransformMakeRotation((CGAffineTransform *)&v14, -1.57079625);
    v12 = *(_OWORD *)&v14.m13;
    v13 = *(_OWORD *)&v14.m11;
    v11 = *(_OWORD *)&v14.m21;
    v6 = v5;
    *(_OWORD *)&m.a = v13;
    *(_OWORD *)&m.c = v12;
    *(_OWORD *)&m.tx = v11;
    CATransform3DMakeAffineTransform(&v14, &m);
    objc_msgSend(v6, "setTransform:", &v14);

    objc_msgSend(*(id *)(v0 + qword_1004827D0), "addSublayer:", *(_QWORD *)(v0 + v1));
    v7 = *(id *)(v0 + v1);
    sub_1000DF264();
    v9 = v8;
    sub_1000DF264();
    objc_msgSend(v7, "setPosition:", v9, v10 * 0.5);

  }
}

void sub_1000DE810()
{
  _BYTE *v0;
  uint64_t v1;
  id v2;
  id v3;
  id v4;
  void *v5;
  double v6;
  double v7;
  double v8;
  void *v9;
  id v10;
  double v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;

  v1 = qword_1004827C0;
  v2 = objc_msgSend(*(id *)&v0[qword_1004827C0], "layer");
  objc_msgSend(v2, "setMask:", *(_QWORD *)&v0[qword_1004827D0]);

  v3 = objc_msgSend(*(id *)&v0[v1], "layer");
  objc_msgSend(v3, "setMasksToBounds:", 1);

  v4 = objc_msgSend(*(id *)&v0[v1], "layer");
  v5 = v4;
  v6 = 1.0;
  if (v0[qword_1004827D8])
  {
    v7 = 20.0;
  }
  else
  {
    v6 = 0.5;
    v7 = 18.0;
  }
  if (v0[qword_1004827D8])
    v8 = -32.0;
  else
    v8 = -18.0;
  objc_msgSend(v4, "setAnchorPoint:", v6);

  v9 = *(void **)&v0[qword_1004827B0];
  objc_msgSend(*(id *)&v0[v1], "addSubview:", v9);
  objc_msgSend(v0, "addSubview:", *(_QWORD *)&v0[v1]);
  objc_msgSend(*(id *)&v0[v1], "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v10 = objc_msgSend(*(id *)&v0[v1], "heightAnchor");
  sub_1000DF264();
  v12 = objc_msgSend(v10, "constraintEqualToConstant:", v11);

  objc_msgSend(v12, "setActive:", 1);
  v13 = objc_msgSend(v9, "centerYAnchor");
  v14 = objc_msgSend(*(id *)&v0[v1], "centerYAnchor");
  v15 = objc_msgSend(v13, "constraintEqualToAnchor:", v14);

  objc_msgSend(v15, "setActive:", 1);
  v16 = objc_msgSend(v9, "leftAnchor");
  v17 = objc_msgSend(*(id *)&v0[v1], "leftAnchor");
  v18 = objc_msgSend(v16, "constraintEqualToAnchor:constant:", v17, v7);

  objc_msgSend(v18, "setActive:", 1);
  v19 = objc_msgSend(v9, "rightAnchor");
  v20 = objc_msgSend(*(id *)&v0[v1], "rightAnchor");
  v21 = objc_msgSend(v19, "constraintEqualToAnchor:constant:", v20, v8);

  objc_msgSend(v21, "setActive:", 1);
}

void sub_1000DEB18()
{
  char *v0;
  double v1;
  double v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  id v30;
  id v31;
  id v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  void *v37;
  id v38;
  id v39;
  id v40;
  void *v41;
  id v42;
  id v43;
  id v44;
  void *v45;
  id v46;
  id v47;
  id v48;
  void *v49;
  id v50;
  id v51;
  void *v52;

  if (v0[qword_1004827D8] == 1)
  {
    if (qword_10047ADD8 != -1)
      swift_once(&qword_10047ADD8, sub_100195820);
    v1 = *(double *)&qword_1004AF8C0;
    if (qword_10047ADD0 != -1)
      swift_once(&qword_10047ADD0, sub_1001956EC);
    v2 = v1 + *(double *)&qword_1004AF8B8;
    v3 = qword_1004827C0;
    v4 = objc_msgSend(*(id *)&v0[qword_1004827C0], "centerYAnchor");
    v5 = objc_msgSend(v0, "topAnchor");
    v6 = objc_msgSend(v4, "constraintEqualToAnchor:constant:", v5, v2);

    v7 = *(void **)&v0[qword_1004827F8];
    *(_QWORD *)&v0[qword_1004827F8] = v6;

    v8 = objc_msgSend(*(id *)&v0[v3], "centerYAnchor");
    v9 = objc_msgSend(v0, "bottomAnchor");
    v10 = objc_msgSend(v8, "constraintEqualToAnchor:constant:", v9, -v2);

    v11 = *(void **)&v0[qword_1004827F0];
    *(_QWORD *)&v0[qword_1004827F0] = v10;

    v12 = objc_msgSend(*(id *)&v0[v3], "centerXAnchor");
    v13 = objc_msgSend(v0, "leftAnchor");
    v14 = objc_msgSend(v12, "constraintEqualToAnchor:constant:", v13, v2);

    v15 = *(void **)&v0[qword_1004827E8];
    *(_QWORD *)&v0[qword_1004827E8] = v14;

    v16 = objc_msgSend(*(id *)&v0[v3], "centerXAnchor");
    v17 = objc_msgSend(v0, "rightAnchor");
    v18 = objc_msgSend(v16, "constraintEqualToAnchor:constant:", v17, -v2);

    v19 = *(void **)&v0[qword_1004827E0];
    *(_QWORD *)&v0[qword_1004827E0] = v18;

    v20 = objc_msgSend(*(id *)&v0[v3], "centerXAnchor");
    v21 = objc_msgSend(v0, "centerXAnchor");
    v22 = objc_msgSend(v20, "constraintEqualToAnchor:", v21);

    v23 = *(void **)&v0[qword_100482800];
    *(_QWORD *)&v0[qword_100482800] = v22;

    v24 = objc_msgSend(*(id *)&v0[v3], "centerYAnchor");
    v25 = objc_msgSend(v0, "centerYAnchor");
    v26 = objc_msgSend(v24, "constraintEqualToAnchor:", v25);

    v27 = qword_100482808;
  }
  else
  {
    if (qword_10047B0B0 != -1)
      swift_once(&qword_10047B0B0, sub_100197654);
    v28 = *(double *)&qword_1004AFBB0;
    v29 = qword_1004827C0;
    v30 = objc_msgSend(*(id *)&v0[qword_1004827C0], "centerYAnchor");
    v31 = objc_msgSend(v0, "topAnchor");
    v32 = objc_msgSend(v30, "constraintEqualToAnchor:constant:", v31, v28);

    v33 = *(void **)&v0[qword_1004827E0];
    *(_QWORD *)&v0[qword_1004827E0] = v32;

    v34 = objc_msgSend(*(id *)&v0[v29], "centerYAnchor");
    v35 = objc_msgSend(v0, "bottomAnchor");
    v36 = objc_msgSend(v34, "constraintEqualToAnchor:constant:", v35, -v28);

    v37 = *(void **)&v0[qword_1004827E8];
    *(_QWORD *)&v0[qword_1004827E8] = v36;

    v38 = objc_msgSend(*(id *)&v0[v29], "centerXAnchor");
    v39 = objc_msgSend(v0, "leftAnchor");
    v40 = objc_msgSend(v38, "constraintEqualToAnchor:constant:", v39, v28);

    v41 = *(void **)&v0[qword_1004827F8];
    *(_QWORD *)&v0[qword_1004827F8] = v40;

    v42 = objc_msgSend(*(id *)&v0[v29], "centerXAnchor");
    v43 = objc_msgSend(v0, "rightAnchor");
    v44 = objc_msgSend(v42, "constraintEqualToAnchor:constant:", v43, -v28);

    v45 = *(void **)&v0[qword_1004827F0];
    *(_QWORD *)&v0[qword_1004827F0] = v44;

    v46 = objc_msgSend(*(id *)&v0[v29], "centerXAnchor");
    v47 = objc_msgSend(v0, "centerXAnchor");
    v48 = objc_msgSend(v46, "constraintEqualToAnchor:", v47);

    v49 = *(void **)&v0[qword_100482808];
    *(_QWORD *)&v0[qword_100482808] = v48;

    v50 = objc_msgSend(*(id *)&v0[v29], "centerYAnchor");
    v51 = objc_msgSend(v0, "centerYAnchor");
    v26 = objc_msgSend(v50, "constraintEqualToAnchor:", v51);

    v27 = qword_100482800;
  }
  v52 = *(void **)&v0[v27];
  *(_QWORD *)&v0[v27] = v26;

}

id sub_1000DF144()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  swift_retain();
  StateValue.wrappedValue.getter(&v3, v0);
  swift_release();
  sub_1000DDBF4(v3);
  swift_retain();
  StateValue.wrappedValue.getter(&v3, v1);
  swift_release();
  return sub_1000DDD9C(v3);
}

void sub_1000DF1C8(char *a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  NSString v8;
  char *v9;

  v4 = &a1[qword_1004827B8];
  *(_QWORD *)v4 = a3;
  v4[8] = 0;
  v5 = *(void **)&a1[qword_1004827B0];
  v9 = a1;
  sub_10006CAF8(a3);
  v7 = v6;
  v8 = String._bridgeToObjectiveC()();
  objc_msgSend(v5, "setText:", v8, swift_bridgeObjectRelease(v7).n128_f64[0]);

  objc_msgSend(v5, "sizeToFit");
}

void sub_1000DF264()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  CGRect v4;

  v1 = *(void **)(v0 + qword_1004827B0);
  objc_msgSend(v1, "frame");
  CGRectGetWidth(v4);
  v2 = objc_msgSend(v1, "font");
  if (v2)
  {
    v3 = v2;
    objc_msgSend(v2, "capHeight");

  }
  else
  {
    __break(1u);
  }
}

id sub_1000DF328(double a1, double a2)
{
  id v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;

  v4 = objc_msgSend(objc_allocWithZone((Class)UIBezierPath), "init");
  v16 = a2 + 0.0;
  objc_msgSend(v4, "moveToPoint:", a1 + 0.0, a2 + 0.0);
  v15 = a2 + 0.03;
  v17 = a2 + 0.1;
  objc_msgSend(v4, "addCurveToPoint:controlPoint1:controlPoint2:", a1 + 1.11);
  v14 = a2 + 0.13;
  objc_msgSend(v4, "addLineToPoint:", a1 + 2.22);
  v13 = a2 + 0.65;
  objc_msgSend(v4, "addLineToPoint:", a1 + 4.25);
  v5 = a2 + 1.86;
  objc_msgSend(v4, "addLineToPoint:", a1 + 6.03, a2 + 1.86);
  v6 = a2 + 3.94;
  objc_msgSend(v4, "addLineToPoint:", a1 + 7.89, a2 + 3.94);
  v7 = a2 + 6.19;
  objc_msgSend(v4, "addLineToPoint:", a1 + 9.57, a2 + 6.19);
  v8 = a2 + 8.2;
  objc_msgSend(v4, "addLineToPoint:", a1 + 11.05, a2 + 8.2);
  v9 = a2 + 10.19;
  objc_msgSend(v4, "addLineToPoint:", a1 + 12.55, a2 + 10.19);
  v10 = a2 + 12.0;
  v11 = a2 + 11.4;
  objc_msgSend(v4, "addCurveToPoint:controlPoint1:controlPoint2:", a1 + 15.0, v10, a1 + 13.6, v11, a1 + 14.3, v10);
  objc_msgSend(v4, "addCurveToPoint:controlPoint1:controlPoint2:", a1 + 17.45, v9, a1 + 15.8, v10, a1 + 16.2, v11);
  objc_msgSend(v4, "addLineToPoint:", a1 + 18.95, v8);
  objc_msgSend(v4, "addLineToPoint:", a1 + 20.43, v7);
  objc_msgSend(v4, "addLineToPoint:", a1 + 22.11, v6);
  objc_msgSend(v4, "addLineToPoint:", a1 + 23.97, v5);
  objc_msgSend(v4, "addLineToPoint:", a1 + 25.75, v13);
  objc_msgSend(v4, "addLineToPoint:", a1 + 27.78, v14);
  objc_msgSend(v4, "addLineToPoint:", a1 + 28.89, v15);
  objc_msgSend(v4, "addCurveToPoint:controlPoint1:controlPoint2:", a1 + 30.0, v16, a1 + 29.0, v17, a1 + 29.3, v16);
  objc_msgSend(v4, "setLineJoinStyle:", 0);
  objc_msgSend(v4, "setMiterLimit:", 0.0);
  return v4;
}

uint64_t sub_1000DF6DC(char a1, uint64_t a2, char a3)
{
  void *v3;
  void *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  __n128 v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  id v21;
  __n128 v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  void **aBlock;
  uint64_t v30;
  uint64_t (*v31)(uint64_t);
  void *v32;
  void (*v33)();
  uint64_t v34;

  v4 = v3;
  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v28 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100049274();
  v16 = (void *)static OS_dispatch_queue.main.getter(v15);
  if ((a1 & 1) != 0)
  {
    v17 = swift_allocObject(&unk_100445748, 33, 7);
    *(_QWORD *)(v17 + 16) = v4;
    *(_QWORD *)(v17 + 24) = a2;
    *(_BYTE *)(v17 + 32) = a3 & 1;
    v33 = sub_1000E0804;
    v34 = v17;
    aBlock = _NSConcreteStackBlock;
    v30 = 1107296256;
    v18 = &unk_100445760;
  }
  else
  {
    v19 = swift_allocObject(&unk_1004456F8, 24, 7);
    *(_QWORD *)(v19 + 16) = v4;
    v33 = sub_1000E07D8;
    v34 = v19;
    aBlock = _NSConcreteStackBlock;
    v30 = 1107296256;
    v18 = &unk_100445710;
  }
  v31 = sub_10003ECA0;
  v32 = v18;
  v20 = _Block_copy(&aBlock);
  v21 = v4;
  v22 = swift_release();
  static DispatchQoS.unspecified.getter(v22);
  aBlock = (void **)_swiftEmptyArrayStorage;
  v23 = sub_100030E1C();
  v24 = sub_10000EDC8((uint64_t *)&unk_10047E430);
  v25 = sub_100030E64();
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v24, v25, v8, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v10, v20);
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v28 + 8))(v10, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

void sub_1000DF924(uint64_t a1, char a2)
{
  char *v2;
  char *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  double v15;
  double v16;
  double v17;
  void (*v18)(unint64_t *__return_ptr, __n128);
  __n128 v19;
  void (*v20)(unint64_t *__return_ptr, __n128);
  __n128 v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  char *v28;
  id v29;
  void *v30;
  uint64_t v31;
  id v32;
  void *v33;
  char *v34;
  id v35;
  unint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  void *v40;
  uint64_t v41;

  v3 = v2;
  if ((a2 & 1) == 0)
  {
    objc_msgSend(v2, "updateText:", a1);
    sub_1000DF264();
    v5 = v4;
    v7 = v6;
    v8 = *(void **)&v2[qword_1004827D0];
    v9 = (void *)objc_opt_self(UIBezierPath);
    v10 = v8;
    v11 = objc_msgSend(v9, "bezierPathWithRoundedRect:byRoundingCorners:cornerRadii:", -1, 0.0, 0.0, v5, v7, 15.0, 15.0);
    v12 = objc_msgSend(v11, "CGPath");

    objc_msgSend(v10, "setPath:", v12);
    v13 = (void *)objc_opt_self(CATransaction);
    objc_msgSend(v13, "begin");
    objc_msgSend(v13, "setDisableActions:", 1);
    v14 = *(id *)&v3[qword_1004827C8];
    sub_1000DF264();
    v16 = v15;
    sub_1000DF264();
    objc_msgSend(v14, "setPosition:", v16, v17 * 0.5);

    objc_msgSend(v13, "commit");
  }
  v18 = *(void (**)(unint64_t *__return_ptr, __n128))(**(_QWORD **)&v3[qword_100482828] + 144);
  v19 = swift_retain();
  v18(&v36, v19);
  swift_release();
  if ((v36 & 0x1000000) == 0)
  {
    v20 = *(void (**)(unint64_t *__return_ptr, __n128))(**(_QWORD **)&v3[qword_100482830] + 144);
    v21 = swift_retain();
    v20(&v36, v21);
    swift_release();
    v22 = v36;
    sub_10001A810(v36);
    if (v22 != 0xC000000000000018)
    {
      v23 = qword_100482820;
      v24 = *(void **)&v3[qword_100482820];
      if (v24)
        objc_msgSend(v24, "invalidate");
      v25 = (void *)objc_opt_self(NSTimer);
      v26 = swift_allocObject(&unk_100445798, 24, 7);
      *(_QWORD *)(v26 + 16) = v3;
      v40 = sub_1000E082C;
      v41 = v26;
      v36 = (unint64_t)_NSConcreteStackBlock;
      v37 = 1107296256;
      v38 = sub_10004C834;
      v39 = &unk_1004457B0;
      v27 = _Block_copy(&v36);
      v28 = v3;
      swift_release();
      v29 = objc_msgSend(v25, "scheduledTimerWithTimeInterval:repeats:block:", 0, v27, 1.0);
      _Block_release(v27);
      v30 = *(void **)&v3[v23];
      *(_QWORD *)&v3[v23] = v29;

      if ((v28[qword_100482818] & 1) == 0)
      {
        v31 = swift_allocObject(&unk_1004457E8, 24, 7);
        *(_QWORD *)(v31 + 16) = v28;
        v32 = objc_allocWithZone((Class)UIViewPropertyAnimator);
        v40 = sub_1000E0834;
        v41 = v31;
        v36 = (unint64_t)_NSConcreteStackBlock;
        v37 = 1107296256;
        v38 = sub_10003ECA0;
        v39 = &unk_100445800;
        v33 = _Block_copy(&v36);
        v34 = v28;
        swift_release();
        v35 = objc_msgSend(v32, "initWithDuration:dampingRatio:animations:", v33, 0.4, 0.9);
        _Block_release(v33);
        objc_msgSend(v35, "setInterruptible:", 0);
        objc_msgSend(v35, "startAnimation");

      }
    }
  }
}

void sub_1000DFCD8(void *a1)
{
  uint64_t v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  _QWORD v7[6];

  if ((*((_BYTE *)a1 + qword_100482818) & 1) == 0)
  {
    v2 = swift_allocObject(&unk_100445888, 24, 7);
    *(_QWORD *)(v2 + 16) = a1;
    v3 = objc_allocWithZone((Class)UIViewPropertyAnimator);
    v7[4] = sub_1000E0C08;
    v7[5] = v2;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 1107296256;
    v7[2] = sub_10003ECA0;
    v7[3] = &unk_1004458A0;
    v4 = _Block_copy(v7);
    v5 = a1;
    swift_release();
    v6 = objc_msgSend(v3, "initWithDuration:dampingRatio:animations:", v4, 0.4, 0.9);
    _Block_release(v4);
    objc_msgSend(v6, "setInterruptible:", 0);
    objc_msgSend(v6, "startAnimation");

  }
}

uint64_t sub_1000DFDEC(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __n128 v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  __n128 v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD aBlock[6];

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100049274();
  v12 = (void *)static OS_dispatch_queue.main.getter(v11);
  v13 = swift_allocObject(&unk_100445838, 24, 7);
  *(_QWORD *)(v13 + 16) = a2;
  aBlock[4] = sub_1000E0BFC;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003ECA0;
  aBlock[3] = &unk_100445850;
  v14 = _Block_copy(aBlock);
  v15 = a2;
  v16 = swift_release();
  static DispatchQoS.unspecified.getter(v16);
  aBlock[0] = _swiftEmptyArrayStorage;
  v17 = sub_100030E1C();
  v18 = sub_10000EDC8((uint64_t *)&unk_10047E430);
  v19 = sub_100030E64();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v18, v19, v3, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v6, v14);
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

id sub_1000DFFB4(char *a1, double a2, CGFloat a3)
{
  void *v5;
  CGFloat v6;
  CGFloat v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v12;
  __int128 v13;
  CGAffineTransform v14;
  CGAffineTransform t2;
  CGAffineTransform t1;

  objc_msgSend(a1, "setAlpha:");
  v5 = *(void **)&a1[qword_1004827C0];
  v12 = *(_OWORD *)&a1[qword_100482810 + 16];
  v13 = *(_OWORD *)&a1[qword_100482810];
  v6 = *(double *)&a1[qword_100482810 + 32];
  v7 = *(double *)&a1[qword_100482810 + 40];
  CGAffineTransformMakeScale(&t1, a3, a3);
  v8 = *(_OWORD *)&t1.a;
  v9 = *(_OWORD *)&t1.c;
  v10 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.a = v13;
  *(_OWORD *)&t1.c = v12;
  t1.tx = v6;
  t1.ty = v7;
  *(_OWORD *)&t2.a = v8;
  *(_OWORD *)&t2.c = v9;
  *(_OWORD *)&t2.tx = v10;
  CGAffineTransformConcat(&v14, &t1, &t2);
  t1 = v14;
  return objc_msgSend(v5, "setTransform:", &t1);
}

void sub_1000E0084(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;

  v3 = a3;
  sub_1000E08CC();
}

void sub_1000E00A8()
{
  _swift_stdlib_reportUnimplementedInitializer("Measure.CalloutViewSpatial", 26, "init(frame:)", 12, 0);
  __break(1u);
}

uint64_t sub_1000E00D4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + qword_100482828));
  swift_release(*(_QWORD *)(v0 + qword_100482830));
  return swift_release(*(_QWORD *)(v0 + qword_100482838));
}

uint64_t sub_1000E01C0(uint64_t a1)
{

  swift_release(*(_QWORD *)(a1 + qword_100482828));
  swift_release(*(_QWORD *)(a1 + qword_100482830));
  return swift_release(*(_QWORD *)(a1 + qword_100482838));
}

uint64_t type metadata accessor for CalloutViewSpatial(uint64_t a1)
{
  uint64_t result;

  result = qword_100482868;
  if (!qword_100482868)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CalloutViewSpatial);
  return result;
}

uint64_t sub_1000E02F4(uint64_t a1)
{
  _QWORD v2[18];

  v2[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[1] = "\t";
  v2[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[5] = &unk_1003B5F50;
  v2[6] = &unk_1003B5F68;
  v2[7] = &unk_1003B5F68;
  v2[8] = &unk_1003B5F68;
  v2[9] = &unk_1003B5F68;
  v2[10] = &unk_1003B5F68;
  v2[11] = &unk_1003B5F68;
  v2[12] = &unk_1003B5F80;
  v2[13] = &unk_1003B5F50;
  v2[14] = &unk_1003B5F68;
  v2[15] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[16] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[17] = (char *)&value witness table for Builtin.NativeObject + 64;
  return swift_initClassMetadata2(a1, 256, 18, v2, a1 + 264);
}

uint64_t sub_1000E0384()
{
  return type metadata accessor for CalloutViewSpatial(0);
}

uint64_t sub_1000E038C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  *a2 = v2;
  return swift_retain(v2);
}

uint64_t sub_1000E039C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 56);
  *a2 = v2;
  return swift_retain(v2);
}

uint64_t sub_1000E03AC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 56);
  *a2 = v2;
  return swift_retain(v2);
}

uint64_t sub_1000E03BC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  *a2 = v2;
  return swift_retain(v2);
}

uint64_t sub_1000E03CC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 168);
  *a2 = v2;
  return swift_retain(v2);
}

uint64_t sub_1000E03DC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 168);
  *a2 = v2;
  return swift_retain(v2);
}

void sub_1000E03EC()
{
  char *v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  void *v8;

  v1 = *(void **)&v0[qword_1004827B0];
  v2 = (void *)objc_opt_self(UIFont);
  v3 = objc_msgSend(v2, "preferredFontForTextStyle:", UIFontTextStyleSubheadline);
  v4 = objc_msgSend(v3, "fontDescriptor");

  v5 = objc_msgSend(v4, "fontDescriptorWithSymbolicTraits:", 2);
  if (v5)
  {
    v6 = objc_msgSend(v2, "fontWithDescriptor:size:", v5, 0.0);

    objc_msgSend(v1, "setFont:", v6);
    if ((v0[qword_1004827B8 + 8] & 1) == 0)
      objc_msgSend(v0, "updateText:", *(_QWORD *)&v0[qword_1004827B8]);
    v7 = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
    v8 = *(void **)&v0[qword_1004827C0];
    *(_QWORD *)&v0[qword_1004827C0] = v7;

    sub_1000DE3A4();
  }
  else
  {
    __break(1u);
  }
}

void sub_1000E0540()
{
  id v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  id v5;
  NSString v6;

  v0 = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v0, "setTextAlignment:", 1);
  if (qword_10047B080 != -1)
    swift_once(&qword_10047B080, sub_1001971F0);
  objc_msgSend(v0, "setTextColor:", qword_1004AFB90);
  v1 = (void *)objc_opt_self(UIFont);
  v2 = objc_msgSend(v1, "preferredFontForTextStyle:", UIFontTextStyleSubheadline);
  v3 = objc_msgSend(v2, "fontDescriptor");

  v4 = objc_msgSend(v3, "fontDescriptorWithSymbolicTraits:", 2);
  if (v4)
  {
    v5 = objc_msgSend(v1, "fontWithDescriptor:size:", v4, 0.0);

    objc_msgSend(v0, "setFont:", v5);
    v6 = String._bridgeToObjectiveC()();
    objc_msgSend(v0, "setText:", v6);

    objc_msgSend(v0, "setAdjustsFontSizeToFitWidth:", 1);
    objc_msgSend(v0, "setBaselineAdjustment:", 1);
    objc_msgSend(v0, "sizeToFit");
    objc_msgSend(v0, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000E0710(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_unknownObjectWeakDestroy(v2 + 16, a2);
  return swift_deallocObject(v2, 24, 7);
}

void sub_1000E0734(uint64_t a1)
{
  uint64_t v1;

  sub_1000DD124(a1, v1);
}

uint64_t sub_1000E073C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000E074C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

id sub_1000E0754()
{
  return sub_1000DF144();
}

uint64_t sub_1000E075C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1000E076C(uint64_t a1)
{
  uint64_t v1;

  sub_1000DCEF8(a1, v1);
}

void sub_1000E0774(uint64_t a1)
{
  uint64_t v1;

  sub_1000DD25C(a1, v1);
}

void sub_1000E077C(uint64_t a1)
{
  uint64_t v1;

  sub_1000DD9C0(a1, v1);
}

void sub_1000E0784(uint64_t a1)
{
  uint64_t v1;

  sub_1000DD840(a1, v1);
}

void sub_1000E078C(uint64_t a1)
{
  uint64_t v1;

  sub_1000DD510(a1, v1);
}

void sub_1000E0794(uint64_t a1)
{
  uint64_t v1;

  sub_1000DD3C0(a1, v1);
}

uint64_t sub_1000E07B4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1000E07D8()
{
  uint64_t v0;

  sub_1000DFCD8(*(void **)(v0 + 16));
}

uint64_t sub_1000E07E0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 33, 7);
}

void sub_1000E0804()
{
  uint64_t v0;

  sub_1000DF924(*(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
}

uint64_t sub_1000E082C(uint64_t a1)
{
  uint64_t v1;

  return sub_1000DFDEC(a1, *(void **)(v1 + 16));
}

id sub_1000E0834()
{
  uint64_t v0;

  return sub_1000DFFB4(*(char **)(v0 + 16), 1.0, 1.0);
}

id sub_1000E0854()
{
  uint64_t v0;

  return sub_1000DFFB4(*(char **)(v0 + 16), 0.0, 0.9);
}

uint64_t sub_1000E0878()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_1000E089C()
{
  uint64_t v0;
  uint64_t v1;
  id result;

  v1 = *(_QWORD *)(v0 + 16);
  result = sub_1000DDD9C(*(_QWORD *)(v0 + 24));
  *(_BYTE *)(v1 + qword_100482818) = 0;
  return result;
}

void sub_1000E08CC()
{
  _BYTE *v0;
  _BYTE *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, __n128);
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, __n128);
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, __n128);
  __n128 v24;

  v1 = v0;
  v2 = &v0[qword_1004827B8];
  *(_QWORD *)v2 = 0;
  v2[8] = 1;
  v3 = qword_1004827C0;
  *(_QWORD *)&v1[v3] = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v4 = qword_1004827C8;
  *(_QWORD *)&v1[v4] = objc_msgSend(objc_allocWithZone((Class)CAShapeLayer), "init");
  v5 = qword_1004827D0;
  *(_QWORD *)&v1[v5] = objc_msgSend(objc_allocWithZone((Class)CAShapeLayer), "init");
  *(_QWORD *)&v1[qword_1004827E0] = 0;
  *(_QWORD *)&v1[qword_1004827E8] = 0;
  *(_QWORD *)&v1[qword_1004827F0] = 0;
  *(_QWORD *)&v1[qword_1004827F8] = 0;
  *(_QWORD *)&v1[qword_100482800] = 0;
  *(_QWORD *)&v1[qword_100482808] = 0;
  v6 = &v1[qword_100482810];
  *v6 = 0x3FF0000000000000;
  v6[1] = 0;
  v6[2] = 0;
  v6[3] = 0x3FF0000000000000;
  v6[4] = 0;
  v6[5] = 0;
  v1[qword_100482818] = 0;
  *(_QWORD *)&v1[qword_100482820] = 0;
  v7 = qword_100482828;
  KeyPath = swift_getKeyPath(&unk_1003B5FA8);
  v9 = sub_10000EDC8((uint64_t *)&unk_100481B90);
  if (qword_10047AD88 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v10 = qword_1004AF890;
  v11 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v9 + 272);
  v12 = swift_retain();
  *(_QWORD *)&v1[v7] = v11(KeyPath, v10, v12);
  v13 = qword_100482830;
  v14 = swift_getKeyPath(&unk_1003B5FD0);
  v15 = sub_10000EDC8((uint64_t *)&unk_100486710);
  v16 = qword_1004AF890;
  v17 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v15 + 272);
  v18 = swift_retain();
  *(_QWORD *)&v1[v13] = v17(v14, v16, v18);
  v19 = qword_100482838;
  v20 = sub_10000EDC8((uint64_t *)&unk_1004810D0);
  v21 = swift_getKeyPath(&unk_1003B5FF8);
  v22 = qword_1004AF890;
  v23 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v20 + 272);
  v24 = swift_retain();
  *(_QWORD *)&v1[v19] = v23(v21, v22, v24);

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001003D8190, "Measure/CalloutViewSpatial.swift", 32, 2, 307, 0);
  __break(1u);
}

void sub_1000E0B4C(uint64_t a1)
{
  uint64_t v1;

  sub_1000DD6EC(a1, v1);
}

void sub_1000E0B54(uint64_t a1)
{
  uint64_t v1;

  sub_1000DD3C0(a1, v1);
}

__n128 initializeWithCopy for FloorCeilingState(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 137) = *(_OWORD *)(a2 + 137);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for FloorCeilingState(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 153))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for FloorCeilingState(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 152) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 153) = v3;
  return result;
}

ValueMetadata *type metadata accessor for FloorCeilingState()
{
  return &type metadata for FloorCeilingState;
}

id sub_1000E0CF4()
{
  id result;
  id v1;

  if (qword_10047A930 != -1)
    swift_once(&qword_10047A930, sub_100083368);
  result = (id)*((_QWORD *)&xmmword_1004AF258 + 1);
  if (*((_QWORD *)&xmmword_1004AF258 + 1))
  {
    v1 = (id)*((_QWORD *)&xmmword_1004AF258 + 1);
    qword_1004AF418 = Contexts.PrivateQueue.init(_:)(*((_QWORD *)&xmmword_1004AF258 + 1));
    return v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1000E0D58@<X0>(_QWORD *a1@<X8>)
{
  void *v2;

  if (qword_10047AA10 != -1)
    swift_once(&qword_10047AA10, sub_1000E0CF4);
  v2 = (void *)qword_1004AF418;
  *a1 = qword_1004AF418;
  return v2;
}

BOOL sub_1000E0DA8(uint64_t a1, uint64_t a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v11[8];
  _OWORD v12[2];
  float32x4_t v13[8];
  _OWORD v14[2];

  v2 = *(float32x4_t *)(a1 + 112);
  v11[6] = *(float32x4_t *)(a1 + 96);
  v11[7] = v2;
  v12[0] = *(_OWORD *)(a1 + 128);
  *(_OWORD *)((char *)v12 + 9) = *(_OWORD *)(a1 + 137);
  v3 = *(float32x4_t *)(a1 + 48);
  v11[2] = *(float32x4_t *)(a1 + 32);
  v11[3] = v3;
  v4 = *(float32x4_t *)(a1 + 80);
  v11[4] = *(float32x4_t *)(a1 + 64);
  v11[5] = v4;
  v5 = *(float32x4_t *)(a1 + 16);
  v11[0] = *(float32x4_t *)a1;
  v11[1] = v5;
  v6 = *(float32x4_t *)(a2 + 112);
  v13[6] = *(float32x4_t *)(a2 + 96);
  v13[7] = v6;
  v14[0] = *(_OWORD *)(a2 + 128);
  *(_OWORD *)((char *)v14 + 9) = *(_OWORD *)(a2 + 137);
  v7 = *(float32x4_t *)(a2 + 48);
  v13[2] = *(float32x4_t *)(a2 + 32);
  v13[3] = v7;
  v8 = *(float32x4_t *)(a2 + 80);
  v13[4] = *(float32x4_t *)(a2 + 64);
  v13[5] = v8;
  v9 = *(float32x4_t *)(a2 + 16);
  v13[0] = *(float32x4_t *)a2;
  v13[1] = v9;
  return sub_1000E0EA4(v11, v13);
}

unint64_t sub_1000E0E3C(uint64_t a1)
{
  unint64_t result;

  result = sub_1000E0E60();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000E0E60()
{
  unint64_t result;

  result = qword_100482A70;
  if (!qword_100482A70)
  {
    result = swift_getWitnessTable(&unk_1003B6034, &type metadata for FloorCeilingState);
    atomic_store(result, (unint64_t *)&qword_100482A70);
  }
  return result;
}

BOOL sub_1000E0EA4(float32x4_t *a1, float32x4_t *a2)
{
  char v2;

  if ((a1[4].i8[0] & 1) != 0)
  {
    if (!a2[4].i8[0])
      return 0;
  }
  else if ((a2[4].i8[0] & 1) != 0
         || (vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(a1[2], a2[2]), (int8x16_t)vceqq_f32(a1[3], a2[3])), vandq_s8((int8x16_t)vceqq_f32(a1[1], a2[1]), (int8x16_t)vceqq_f32(*a1, *a2)))) & 0x80000000) == 0)
  {
    return 0;
  }
  if ((a1[9].i8[0] & 1) != 0)
  {
    if (!a2[9].i8[0])
      return 0;
  }
  else if ((a2[9].i8[0] & 1) != 0
         || (vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(a1[7], a2[7]), (int8x16_t)vceqq_f32(a1[8], a2[8])), vandq_s8((int8x16_t)vceqq_f32(a1[6], a2[6]), (int8x16_t)vceqq_f32(a1[5], a2[5])))) & 0x80000000) == 0)
  {
    return 0;
  }
  v2 = a2[9].i8[8];
  if ((a1[9].i8[8] & 1) == 0)
  {
    if (a1[9].f32[1] != a2[9].f32[1])
      v2 = 1;
    return (v2 & 1) == 0;
  }
  return (a2[9].i8[8] & 1) != 0;
}

uint64_t sub_1000E1018()
{
  uint64_t KeyPath;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  KeyPath = swift_getKeyPath(&unk_1003B6540);
  result = Log.init(category:enabledInDebugKey:)(0x70616E5365676445, 0xEC000000676E6970, KeyPath);
  qword_1004AF420 = result;
  *(_QWORD *)algn_1004AF428 = v2;
  qword_1004AF430 = v3;
  return result;
}

uint64_t sub_1000E1068()
{
  uint64_t KeyPath;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  KeyPath = swift_getKeyPath(&unk_1003B6090);
  result = Log.init(category:enabledInDebugKey:)(0x65486E6F73726550, 0xEC00000074686769, KeyPath);
  qword_1004AF438 = result;
  unk_1004AF440 = v2;
  qword_1004AF448 = v3;
  return result;
}

const char *sub_1000E10B8()
{
  return "logPersonHeight";
}

id sub_1000E10C4@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "logPersonHeight");
  *a2 = (_BYTE)result;
  return result;
}

id sub_1000E10F4(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setLogPersonHeight:", *a1);
}

uint64_t sub_1000E1108()
{
  uint64_t KeyPath;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  KeyPath = swift_getKeyPath(&unk_1003B61F8);
  result = Log.init(category:enabledInDebugKey:)(0x636552646C726F57, 0xEE00656C676E6174, KeyPath);
  qword_1004AF450 = result;
  qword_1004AF458 = v2;
  qword_1004AF460 = v3;
  return result;
}

uint64_t sub_1000E115C()
{
  uint64_t KeyPath;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  KeyPath = swift_getKeyPath(&unk_1003B6298);
  result = Log.init(category:enabledInDebugKey:)(0x7865746E6F434955, 0xE900000000000074, KeyPath);
  qword_1004AF468 = result;
  unk_1004AF470 = v2;
  qword_1004AF478 = v3;
  return result;
}

uint64_t sub_1000E11A8()
{
  uint64_t KeyPath;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  KeyPath = swift_getKeyPath(&unk_1003B63C8);
  result = Log.init(category:enabledInDebugKey:)(0x6546636974706148, 0xEE006B6361626465, KeyPath);
  qword_1004AF480 = result;
  *(_QWORD *)algn_1004AF488 = v2;
  qword_1004AF490 = v3;
  return result;
}

uint64_t sub_1000E11FC()
{
  uint64_t KeyPath;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  KeyPath = swift_getKeyPath(&unk_1003B6488);
  result = Log.init(category:enabledInDebugKey:)(0x72657475706D6F43, 0xEE006E6F69736956, KeyPath);
  qword_1004AF498 = result;
  unk_1004AF4A0 = v2;
  qword_1004AF4A8 = v3;
  return result;
}

uint64_t sub_1000E1250()
{
  uint64_t KeyPath;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  KeyPath = swift_getKeyPath(&unk_1003B6408);
  result = Log.init(category:enabledInDebugKey:)(0x6C6553656E616C50, 0xEE006E6F69746365, KeyPath);
  qword_1004AF4B0 = result;
  qword_1004AF4B8 = v2;
  qword_1004AF4C0 = v3;
  return result;
}

uint64_t sub_1000E12A4()
{
  uint64_t KeyPath;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  KeyPath = swift_getKeyPath(&unk_1003B6138);
  result = Log.init(category:enabledInDebugKey:)(0x6F69737365535241, 0xE90000000000006ELL, KeyPath);
  qword_1004AF4C8 = result;
  unk_1004AF4D0 = v2;
  qword_1004AF4D8 = v3;
  return result;
}

uint64_t sub_1000E12F0()
{
  uint64_t KeyPath;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  KeyPath = swift_getKeyPath(&unk_1003B6388);
  result = Log.init(category:enabledInDebugKey:)(0x6F69737365535241, 0xEF79616C7065526ELL, KeyPath);
  qword_1004AF4E0 = result;
  *(_QWORD *)algn_1004AF4E8 = v2;
  qword_1004AF4F0 = v3;
  return result;
}

uint64_t sub_1000E1344()
{
  uint64_t KeyPath;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  KeyPath = swift_getKeyPath(&unk_1003B6348);
  result = Log.init(category:enabledInDebugKey:)(0xD000000000000012, 0x80000001003D7940, KeyPath);
  qword_1004AF4F8 = result;
  unk_1004AF500 = v2;
  qword_1004AF508 = v3;
  return result;
}

uint64_t sub_1000E1390()
{
  uint64_t KeyPath;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  KeyPath = swift_getKeyPath(&unk_1003B6448);
  result = Log.init(category:enabledInDebugKey:)(0x70556E6F69746F4DLL, 0xED00007365746164, KeyPath);
  qword_1004AF510 = result;
  *(_QWORD *)algn_1004AF518 = v2;
  qword_1004AF520 = v3;
  return result;
}

uint64_t sub_1000E13E4()
{
  uint64_t KeyPath;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  KeyPath = swift_getKeyPath(&unk_1003B6308);
  result = Log.init(category:enabledInDebugKey:)(0xD000000000000010, 0x80000001003D79A0, KeyPath);
  qword_1004AF528 = result;
  unk_1004AF530 = v2;
  qword_1004AF538 = v3;
  return result;
}

uint64_t sub_1000E1430()
{
  uint64_t KeyPath;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  KeyPath = swift_getKeyPath(&unk_1003B6178);
  result = Log.init(category:enabledInDebugKey:)(0x4F6572757361654DLL, 0xED00007463656A62, KeyPath);
  qword_1004AF540 = result;
  qword_1004AF548 = v2;
  qword_1004AF550 = v3;
  return result;
}

uint64_t sub_1000E1484()
{
  uint64_t KeyPath;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  KeyPath = swift_getKeyPath(&unk_1003B6508);
  result = Log.init(category:enabledInDebugKey:)(0x747345746867694CLL, 0xEF6E6F6974616D69, KeyPath);
  qword_1004AF558 = result;
  unk_1004AF560 = v2;
  qword_1004AF568 = v3;
  return result;
}

uint64_t sub_1000E14D8()
{
  uint64_t KeyPath;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  KeyPath = swift_getKeyPath(&unk_1003B64C0);
  result = Log.init(category:enabledInDebugKey:)(0x676E696863616F43, 0xE800000000000000, KeyPath);
  qword_1004AF570 = result;
  *(_QWORD *)algn_1004AF578 = v2;
  qword_1004AF580 = v3;
  return result;
}

uint64_t sub_1000E1520()
{
  uint64_t KeyPath;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  KeyPath = swift_getKeyPath(&unk_1003B60C8);
  result = Log.init(category:enabledInDebugKey:)(0x6C6562614CLL, 0xE500000000000000, KeyPath);
  qword_1004AF588 = result;
  unk_1004AF590 = v2;
  qword_1004AF598 = v3;
  return result;
}

const char *sub_1000E1564()
{
  return "logLabel";
}

id sub_1000E1570@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "logLabel");
  *a2 = (_BYTE)result;
  return result;
}

id sub_1000E15A0(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setLogLabel:", *a1);
}

uint64_t sub_1000E15B4()
{
  uint64_t KeyPath;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  KeyPath = swift_getKeyPath(&unk_1003B6100);
  result = Log.init(category:enabledInDebugKey:)(0x6E6F697463414955, 0xE800000000000000, KeyPath);
  qword_1004AF5A0 = result;
  *(_QWORD *)algn_1004AF5A8 = v2;
  qword_1004AF5B0 = v3;
  return result;
}

const char *sub_1000E15FC()
{
  return "logUIAction";
}

id sub_1000E1608@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "logUIAction");
  *a2 = (_BYTE)result;
  return result;
}

id sub_1000E1638(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setLogUIAction:", *a1);
}

const char *sub_1000E164C()
{
  return "logARSession";
}

id sub_1000E1658@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "logARSession");
  *a2 = (_BYTE)result;
  return result;
}

id sub_1000E1688(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setLogARSession:", *a1);
}

const char *sub_1000E169C()
{
  return "logMeasureObject";
}

id sub_1000E16A8@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "logMeasureObject");
  *a2 = (_BYTE)result;
  return result;
}

id sub_1000E16D8(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setLogMeasureObject:", *a1);
}

uint64_t sub_1000E16EC()
{
  uint64_t KeyPath;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  KeyPath = swift_getKeyPath(&unk_1003B61B8);
  result = Log.init(category:enabledInDebugKey:)(0x6574654465676445, 0xED00006E6F697463, KeyPath);
  qword_1004AF5B8 = result;
  unk_1004AF5C0 = v2;
  qword_1004AF5C8 = v3;
  return result;
}

const char *sub_1000E1740()
{
  return "logEdgeDetection";
}

id sub_1000E174C@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "logEdgeDetection");
  *a2 = (_BYTE)result;
  return result;
}

id sub_1000E177C(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setLogEdgeDetection:", *a1);
}

const char *sub_1000E1790()
{
  return "logWorldRectangle";
}

id sub_1000E179C@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "logWorldRectangle");
  *a2 = (_BYTE)result;
  return result;
}

id sub_1000E17CC(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setLogWorldRectangle:", *a1);
}

uint64_t sub_1000E17E0()
{
  uint64_t KeyPath;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  KeyPath = swift_getKeyPath(&unk_1003B6260);
  result = Log.init(category:enabledInDebugKey:)(0x616D726F66726550, 0xEB0000000065636ELL, KeyPath);
  qword_1004AF5D0 = result;
  *(_QWORD *)algn_1004AF5D8 = v2;
  qword_1004AF5E0 = v3;
  return result;
}

uint64_t sub_1000E1830()
{
  uint64_t KeyPath;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  KeyPath = swift_getKeyPath(&unk_1003B6230);
  result = Log.init(category:enabledInDebugKey:)(0x73726564616853, 0xE700000000000000, KeyPath);
  qword_1004AF5E8 = result;
  unk_1004AF5F0 = v2;
  qword_1004AF5F8 = v3;
  return result;
}

const char *sub_1000E1878()
{
  return "logShaders";
}

id sub_1000E1884@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "logShaders");
  *a2 = (_BYTE)result;
  return result;
}

id sub_1000E18B4(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setLogShaders:", *a1);
}

const char *sub_1000E18C8()
{
  return "logPerf";
}

id sub_1000E18D4@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "logPerf");
  *a2 = (_BYTE)result;
  return result;
}

id sub_1000E1904(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setLogPerf:", *a1);
}

const char *sub_1000E1918()
{
  return "logUIContext";
}

id sub_1000E1924@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "logUIContext");
  *a2 = (_BYTE)result;
  return result;
}

id sub_1000E1954(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setLogUIContext:", *a1);
}

uint64_t sub_1000E1968()
{
  uint64_t KeyPath;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  KeyPath = swift_getKeyPath(&unk_1003B62C8);
  result = Log.init(category:enabledInDebugKey:)(0x6F67657461636E55, 0xED000064657A6972, KeyPath);
  qword_1004AF600 = result;
  *(_QWORD *)algn_1004AF608 = v2;
  qword_1004AF610 = v3;
  return result;
}

const char *sub_1000E19BC()
{
  return "logMisc";
}

id sub_1000E19C8@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "logMisc");
  *a2 = (_BYTE)result;
  return result;
}

id sub_1000E19F8(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setLogMisc:", *a1);
}

const char *sub_1000E1A0C()
{
  return "logApplicationState";
}

id sub_1000E1A18@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "logApplicationState");
  *a2 = (_BYTE)result;
  return result;
}

id sub_1000E1A48(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setLogApplicationState:", *a1);
}

const char *sub_1000E1A5C()
{
  return "logARSessionRecording";
}

id sub_1000E1A68@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "logARSessionRecording");
  *a2 = (_BYTE)result;
  return result;
}

id sub_1000E1A98(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setLogARSessionRecording:", *a1);
}

const char *sub_1000E1AAC()
{
  return "logARSessionReplay";
}

id sub_1000E1AB8@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "logARSessionReplay");
  *a2 = (_BYTE)result;
  return result;
}

id sub_1000E1AE8(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setLogARSessionReplay:", *a1);
}

const char *sub_1000E1AFC()
{
  return "logHapticFeedback";
}

id sub_1000E1B08@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "logHapticFeedback");
  *a2 = (_BYTE)result;
  return result;
}

id sub_1000E1B38(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setLogHapticFeedback:", *a1);
}

const char *sub_1000E1B4C()
{
  return "logPlaneSelection";
}

id sub_1000E1B58@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "logPlaneSelection");
  *a2 = (_BYTE)result;
  return result;
}

id sub_1000E1B88(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setLogPlaneSelection:", *a1);
}

const char *sub_1000E1B9C()
{
  return "logMotionUpdates";
}

id sub_1000E1BA8@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "logMotionUpdates");
  *a2 = (_BYTE)result;
  return result;
}

id sub_1000E1BD8(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setLogMotionUpdates:", *a1);
}

const char *sub_1000E1BEC()
{
  return "logComputerVision";
}

id sub_1000E1BF8@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "logComputerVision");
  *a2 = (_BYTE)result;
  return result;
}

id sub_1000E1C28(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setLogComputerVision:", *a1);
}

uint64_t sub_1000E1C3C()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = Log.init(category:enabledInDebugKey:)(0x57656D6172465241, 0xEF676F6468637461, 0);
  qword_1004AF618 = result;
  unk_1004AF620 = v1;
  qword_1004AF628 = v2;
  return result;
}

const char *sub_1000E1C84()
{
  return "logCoaching";
}

id sub_1000E1C90@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "logCoaching");
  *a2 = (_BYTE)result;
  return result;
}

id sub_1000E1CC0(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setLogCoaching:", *a1);
}

const char *sub_1000E1CD4()
{
  return "logLightEstimation";
}

id sub_1000E1CE0@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "logLightEstimation");
  *a2 = (_BYTE)result;
  return result;
}

id sub_1000E1D10(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setLogLightEstimation:", *a1);
}

const char *sub_1000E1D24()
{
  return "logEdgeSnapping";
}

id sub_1000E1D30@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "logEdgeSnapping");
  *a2 = (_BYTE)result;
  return result;
}

id sub_1000E1D60(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setLogEdgeSnapping:", *a1);
}

id sub_1000E1D74()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC7Measure15SessionRecorder____lazy_storage___eventRecorder;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC7Measure15SessionRecorder____lazy_storage___eventRecorder);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC7Measure15SessionRecorder____lazy_storage___eventRecorder);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for EventsRecorder(0)), "init");
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

id sub_1000E1DE4(uint64_t a1)
{
  _BYTE *v1;
  objc_class *ObjectType;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  objc_super v9;

  ObjectType = (objc_class *)swift_getObjectType(v1);
  v4 = &v1[OBJC_IVAR____TtC7Measure15SessionRecorder_state];
  *v4 = 0;
  v4[1] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure15SessionRecorder____lazy_storage___eventRecorder] = 0;
  v1[OBJC_IVAR____TtC7Measure15SessionRecorder_recordReplayOption] = 5;
  *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure15SessionRecorder_screenRecorder] = 0;
  v5 = &v1[OBJC_IVAR____TtC7Measure15SessionRecorder_stopCompletion];
  *v5 = 0;
  v5[1] = 0;
  v6 = &v1[OBJC_IVAR____TtC7Measure15SessionRecorder_onStopped];
  *v6 = 0;
  v6[1] = 0;
  v7 = &v1[OBJC_IVAR____TtC7Measure15SessionRecorder_recordFilePath];
  *v7 = 0;
  v7[1] = 0xE000000000000000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC7Measure15SessionRecorder_target] = a1;
  v9.receiver = v1;
  v9.super_class = ObjectType;
  return objc_msgSendSuper2(&v9, "init");
}

id sub_1000E1E9C(void *a1, uint64_t a2, void *a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  NSURL *v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  Swift::String v30;
  Swift::String v31;
  void *object;
  _BYTE *v33;
  uint64_t v34;
  _QWORD *v35;
  void *v36;
  uint64_t v37;
  id v38;
  id v39;
  void *v40;
  id v41;
  void *v42;
  uint64_t v44;
  Swift::String aBlock;
  void (*v46)(uint64_t, void *);
  void *v47;
  uint64_t (*v48)(uint64_t);
  uint64_t v49;
  _BYTE v50[24];

  v7 = v6;
  v14 = sub_10000EDC8((uint64_t *)&unk_100482AF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (uint64_t *)(v7 + OBJC_IVAR____TtC7Measure15SessionRecorder_recordFilePath);
  v18 = *(_QWORD *)(v7 + OBJC_IVAR____TtC7Measure15SessionRecorder_recordFilePath + 8);
  *v17 = a2;
  v17[1] = (uint64_t)a3;
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRelease(v18);
  v44 = OBJC_IVAR____TtC7Measure15SessionRecorder_recordReplayOption;
  *(_BYTE *)(v7 + OBJC_IVAR____TtC7Measure15SessionRecorder_recordReplayOption) = a4;
  v19 = (uint64_t *)(v7 + OBJC_IVAR____TtC7Measure15SessionRecorder_onStopped);
  swift_beginAccess(v7 + OBJC_IVAR____TtC7Measure15SessionRecorder_onStopped, v50, 1, 0);
  v20 = *v19;
  v21 = v19[1];
  *v19 = a5;
  v19[1] = a6;
  sub_100036254(a5, a6);
  sub_1000217BC(v20, v21);
  v22 = a1;
  URL.init(fileURLWithPath:)(a2, a3);
  v23 = type metadata accessor for URL(0);
  v24 = *(_QWORD *)(v23 - 8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v16, 0, 1, v23);
  v26 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v16, 1, v23) != 1)
  {
    URL._bridgeToObjectiveC()(v25);
    v26 = v27;
    (*(void (**)(char *, uint64_t))(v24 + 8))(v16, v23);
  }
  v28 = objc_msgSend(objc_allocWithZone((Class)ARRecordingConfiguration), "initWithBaseConfiguration:fileURL:", v22, v26);

  v29 = objc_msgSend(v28, "recordingTechnique");
  if (qword_10047AA60 != -1)
    swift_once(&qword_10047AA60, sub_1000E1344);
  aBlock._countAndFlagsBits = 0;
  aBlock._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(50);
  swift_bridgeObjectRelease(aBlock._object);
  aBlock._countAndFlagsBits = 0xD00000000000002FLL;
  aBlock._object = (void *)0x80000001003DEAF0;
  v30._countAndFlagsBits = a2;
  v30._object = a3;
  String.append(_:)(v30);
  v31._countAndFlagsBits = 39;
  v31._object = (void *)0xE100000000000000;
  String.append(_:)(v31);
  object = aBlock._object;
  Log.debug(_:isPrivate:)(aBlock, 0);
  swift_bridgeObjectRelease(object);
  objc_msgSend(v29, "setShouldSaveVideoInPhotosLibrary:", 0);
  objc_msgSend(v29, "setExpectCustomData:", 1);
  objc_msgSend(v28, "startRecording");
  v33 = sub_1000E1D74();
  v34 = *(_QWORD *)&v33[qword_10047EA50];
  *(_QWORD *)&v33[qword_10047EA50] = v29;
  swift_unknownObjectRelease(v34);
  swift_unknownObjectRetain(v29);
  sub_100068CFC();
  v33[qword_10047EA38] = 1;

  v35 = (_QWORD *)(v7 + OBJC_IVAR____TtC7Measure15SessionRecorder_state);
  v36 = *(void **)(v7 + OBJC_IVAR____TtC7Measure15SessionRecorder_state);
  v37 = *(_QWORD *)(v7 + OBJC_IVAR____TtC7Measure15SessionRecorder_state + 8);
  *v35 = v28;
  v35[1] = v29;
  swift_unknownObjectRetain(v29);
  v38 = v28;
  sub_1000AA080(v36, v37);
  if (*(_BYTE *)(v7 + v44) == 2)
  {
    v39 = objc_msgSend(objc_allocWithZone((Class)ARScreenRecording), "init");
    v40 = *(void **)(v7 + OBJC_IVAR____TtC7Measure15SessionRecorder_screenRecorder);
    *(_QWORD *)(v7 + OBJC_IVAR____TtC7Measure15SessionRecorder_screenRecorder) = v39;
    v41 = v39;

    objc_msgSend(v41, "setSaveInPhotosLibrary:", 1);
    v48 = sub_1000E2294;
    v49 = 0;
    aBlock._countAndFlagsBits = (uint64_t)_NSConcreteStackBlock;
    aBlock._object = (void *)1107296256;
    v46 = sub_1000E22B4;
    v47 = &unk_100445C10;
    v42 = _Block_copy(&aBlock);
    objc_msgSend(v41, "startRecordingWithHandler:", v42);
    swift_unknownObjectRelease(v29);
    _Block_release(v42);

  }
  else
  {
    swift_unknownObjectRelease(v29);
  }
  return v38;
}

uint64_t sub_1000E2294(uint64_t a1)
{
  return sub_1000E2C5C(a1, 38, 0xD000000000000023, (void *)0x80000001003DEB20);
}

void sub_1000E22B4(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void *);
  id v5;

  v4 = *(void (**)(void *))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4(a2);
  swift_release(v3);

}

uint64_t sub_1000E2308(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  NSURL *v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  Swift::String v17;
  void *v18;
  uint64_t v19;
  id v20;
  uint64_t result;
  uint64_t v22;

  v3 = sub_10000EDC8((uint64_t *)&unk_100482AF0);
  __chkstk_darwin(v3);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v1 + OBJC_IVAR____TtC7Measure15SessionRecorder_state;
  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC7Measure15SessionRecorder_state))
  {
    v7 = *(_QWORD *)(v6 + 8);
    v8 = a1;
    v9 = objc_msgSend((id)swift_unknownObjectRetain(v7), "outputFileURL");
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v10 = type metadata accessor for URL(0);
    v11 = *(_QWORD *)(v10 - 8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v5, 0, 1, v10);
    v13 = 0;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v5, 1, v10) != 1)
    {
      URL._bridgeToObjectiveC()(v12);
      v13 = v14;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v5, v10);
    }
    v15 = objc_msgSend(objc_allocWithZone((Class)ARRecordingConfiguration), "initWithBaseConfiguration:fileURL:", v8, v13);

    v16 = objc_msgSend(v15, "recordingTechnique");
    objc_msgSend(v15, "startRecording");
    objc_msgSend(v16, "setShouldSaveVideoInPhotosLibrary:", 0);
    objc_msgSend(v16, "setExpectCustomData:", 1);
    if (qword_10047AA60 != -1)
      swift_once(&qword_10047AA60, sub_1000E1344);
    v17._object = (void *)0x80000001003DEBA0;
    v17._countAndFlagsBits = 0xD000000000000019;
    Log.default(_:isPrivate:)(v17, 0);
    swift_unknownObjectRelease(v7);
    v18 = *(void **)v6;
    v19 = *(_QWORD *)(v6 + 8);
    *(_QWORD *)v6 = v15;
    *(_QWORD *)(v6 + 8) = v16;
    v20 = v15;
    sub_1000AA080(v18, v19);
    return (uint64_t)v20;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000021, 0x80000001003DEB70, "Measure/SessionRecorder.swift", 29, 2, 69, 0);
    __break(1u);
  }
  return result;
}

void sub_1000E2584(void (*a1)(void), uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void (**v9)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  void (*v16)(__n128);
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void **aBlock;
  uint64_t v24;
  void (*v25)(uint64_t, void *);
  void *v26;
  void *v27;
  _QWORD *v28;
  _BYTE v29[24];

  v3 = v2;
  v6 = v2 + OBJC_IVAR____TtC7Measure15SessionRecorder_state;
  v7 = *(void **)(v2 + OBJC_IVAR____TtC7Measure15SessionRecorder_state);
  if (v7)
  {
    v8 = *(_QWORD *)(v6 + 8);
    v9 = (void (**)(void))(v3 + OBJC_IVAR____TtC7Measure15SessionRecorder_stopCompletion);
    v10 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7Measure15SessionRecorder_stopCompletion);
    v11 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7Measure15SessionRecorder_stopCompletion + 8);
    *v9 = a1;
    v9[1] = (void (*)(void))a2;
    sub_1000E2E88(v7, v8);
    sub_100036254((uint64_t)a1, a2);
    sub_1000217BC(v10, v11);
    v12 = swift_allocObject(&unk_100445BA8, 24, 7);
    swift_unknownObjectWeakInit(v12 + 16, v3);
    v13 = (_QWORD *)swift_allocObject(&unk_100445BD0, 48, 7);
    v13[2] = v12;
    v13[3] = v8;
    v13[4] = a1;
    v13[5] = a2;
    v27 = sub_1000E2F14;
    v28 = v13;
    aBlock = _NSConcreteStackBlock;
    v24 = 1107296256;
    v25 = sub_1000E22B4;
    v26 = &unk_100445BE8;
    v14 = _Block_copy(&aBlock);
    sub_100036254((uint64_t)a1, a2);
    swift_unknownObjectRetain(v8);
    objc_msgSend(v7, "finishRecordingWithHandler:", v14, swift_release().n128_f64[0]);
    _Block_release(v14);

    swift_unknownObjectRelease(v8);
  }
  else
  {
    if (a1)
      a1();
    v15 = v3 + OBJC_IVAR____TtC7Measure15SessionRecorder_onStopped;
    swift_beginAccess(v3 + OBJC_IVAR____TtC7Measure15SessionRecorder_onStopped, v29, 0, 0);
    v16 = *(void (**)(__n128))v15;
    if (*(_QWORD *)v15)
    {
      v17 = *(_QWORD *)(v15 + 8);
      v18 = swift_retain();
      v16(v18);
      sub_1000217BC((uint64_t)v16, v17);
    }
  }
  v19 = OBJC_IVAR____TtC7Measure15SessionRecorder_screenRecorder;
  v20 = *(void **)(v3 + OBJC_IVAR____TtC7Measure15SessionRecorder_screenRecorder);
  if (v20)
  {
    v27 = sub_1000E2C3C;
    v28 = 0;
    aBlock = _NSConcreteStackBlock;
    v24 = 1107296256;
    v25 = sub_1000E22B4;
    v26 = &unk_100445B70;
    v21 = _Block_copy(&aBlock);
    objc_msgSend(v20, "stopRecordingWithHandler:", v21);
    _Block_release(v21);
    v22 = *(void **)(v3 + v19);
    *(_QWORD *)(v3 + v19) = 0;

  }
}

void sub_1000E27A8(uint64_t a1, uint64_t a2, void *a3, void (*a4)(__n128), uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *Strong;
  char *v19;
  _BYTE *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  Swift::String v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void (*v34)(char *, uint64_t);
  Swift::String v35;
  void *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  Swift::String v49;
  void *v50;
  __n128 v51;
  id v52;
  char *v53;
  __n128 v54;
  void (*v55)(__n128);
  uint64_t v56;
  __n128 v57;
  _QWORD v58[2];
  void (*v59)(__n128);
  char *v60;
  _QWORD v61[3];
  _BYTE v62[8];
  uint64_t v63;
  void *v64;
  _BYTE v65[24];

  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)v58 - v15;
  a2 += 16;
  swift_beginAccess(a2, v65, 0, 0);
  Strong = (char *)swift_unknownObjectWeakLoadStrong(a2, v17);
  if (Strong)
  {
    v58[1] = a5;
    v59 = a4;
    v60 = Strong;
    v19 = (char *)sub_1000E1D74();
    v20 = v19;
    v21 = *(_QWORD *)&v19[qword_10047EA50];
    if (v21)
    {
      v22 = objc_msgSend((id)swift_unknownObjectRetain(*(_QWORD *)&v19[qword_10047EA50]), "outputFileURL");
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      v24 = URL.path.getter(v23);
      v26 = v25;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
      v63 = v24;
      v64 = v26;
      swift_bridgeObjectRetain(v26);
      v27._countAndFlagsBits = 1735355438;
      v27._object = (void *)0xE400000000000000;
      String.append(_:)(v27);
      swift_bridgeObjectRelease(v26);
      v28 = v64;
      sub_100068E3C(v63, v64);
      swift_unknownObjectRelease(v21);
      swift_bridgeObjectRelease(v28);
    }
    v20[qword_10047EA38] = 0;

    v29 = objc_msgSend(a3, "outputFileURL");
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v31 = URL.path.getter(v30);
    v33 = v32;
    v34 = *(void (**)(char *, uint64_t))(v11 + 8);
    v34(v16, v10);
    v63 = v31;
    v64 = v33;
    swift_bridgeObjectRetain(v33);
    v35._countAndFlagsBits = 1852011310;
    v35._object = (void *)0xE400000000000000;
    String.append(_:)(v35);
    swift_bridgeObjectRelease(v33);
    v36 = v64;
    URL.init(fileURLWithPath:)(v63, v64);
    swift_bridgeObjectRelease(v36);
    if (qword_10047A930 != -1)
      swift_once(&qword_10047A930, sub_100083368);
    if (qword_1004AF238)
    {
      v37 = *(id *)(qword_1004AF238 + 64);
      sub_100175A9C((uint64_t)v14);

      if (a1)
      {
        swift_getErrorValue(a1, v62, v61);
        v38 = v61[1];
        v39 = v61[2];
        swift_errorRetain(a1);
        v40 = Error.localizedDescription.getter(v38, v39);
        v42 = v41;
        sub_10004FE04(v40, v41, 0xD000000000000012, 0x80000001003DEAA0);
        swift_bridgeObjectRelease(v42);
        swift_errorRelease(a1);

      }
      else
      {
        if (objc_msgSend(a3, "shouldSaveVideoInPhotosLibrary"))
        {
          v63 = 0;
          v64 = (void *)0xE000000000000000;
          _StringGuts.grow(_:)(45);
          *(_QWORD *)&v43 = swift_bridgeObjectRelease(v64).n128_u64[0];
          v63 = 0xD00000000000002BLL;
          v64 = (void *)0x80000001003DEA70;
        }
        else
        {
          v63 = 0;
          v64 = (void *)0xE000000000000000;
          _StringGuts.grow(_:)(17);
          *(_QWORD *)&v43 = swift_bridgeObjectRelease(v64).n128_u64[0];
          v63 = 0x6976206465766153;
          v64 = (void *)0xEF206F74206F6564;
        }
        v44 = objc_msgSend(a3, "outputFileURL", v43);
        static URL._unconditionallyBridgeFromObjectiveC(_:)();

        v46 = URL.path.getter(v45);
        v48 = v47;
        v34(v16, v10);
        v49._countAndFlagsBits = v46;
        v49._object = v48;
        String.append(_:)(v49);
        swift_bridgeObjectRelease(v48);
        v50 = v64;
        sub_10004FE04(v63, (uint64_t)v64, 0xD000000000000012, 0x80000001003DEA50);
        v51 = swift_bridgeObjectRelease(v50);
        if (v59)
          v59(v51);
        v52 = v60;
        v53 = &v60[OBJC_IVAR____TtC7Measure15SessionRecorder_onStopped];
        v54 = swift_beginAccess(&v60[OBJC_IVAR____TtC7Measure15SessionRecorder_onStopped], &v63, 32, 0);
        v55 = *(void (**)(__n128))v53;
        if (!*(_QWORD *)v53)
        {
          ((void (*)(char *, uint64_t, __n128))v34)(v14, v10, v54);
          swift_endAccess(&v63);

          return;
        }
        v56 = *((_QWORD *)v53 + 1);
        swift_endAccess(&v63);
        v57 = swift_retain();
        v55(v57);
        sub_1000217BC((uint64_t)v55, v56);

      }
      v34(v14, v10);
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t sub_1000E2C3C(uint64_t a1)
{
  return sub_1000E2C5C(a1, 37, 0xD000000000000022, (void *)0x80000001003DEAC0);
}

uint64_t sub_1000E2C5C(uint64_t result, Swift::Int a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  Swift::String v8;
  uint64_t v9;
  Swift::String v10;
  void *object;
  uint64_t v12;
  Swift::String v13;

  if (result)
  {
    v7 = result;
    swift_errorRetain(result);
    if (qword_10047AA60 != -1)
      swift_once(&qword_10047AA60, sub_1000E1344);
    v13._countAndFlagsBits = 0;
    v13._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(a2);
    v8._countAndFlagsBits = a3;
    v8._object = a4;
    String.append(_:)(v8);
    v12 = v7;
    v9 = sub_10000EDC8(&qword_10047ECA8);
    _print_unlocked<A, B>(_:_:)(&v12, &v13, v9, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v10._countAndFlagsBits = 39;
    v10._object = (void *)0xE100000000000000;
    String.append(_:)(v10);
    object = v13._object;
    Log.error(_:isPrivate:)(v13, 0);
    swift_bridgeObjectRelease(object);
    return swift_errorRelease(v7);
  }
  return result;
}

uint64_t type metadata accessor for SessionRecorder()
{
  return objc_opt_self(_TtC7Measure15SessionRecorder);
}

ValueMetadata *type metadata accessor for SessionRecorder.State()
{
  return &type metadata for SessionRecorder.State;
}

uint64_t sub_1000E2E70(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000E2E80(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void *sub_1000E2E88(void *result, uint64_t a2)
{
  id v3;

  if (result)
  {
    v3 = result;
    return (void *)swift_unknownObjectRetain(a2);
  }
  return result;
}

uint64_t sub_1000E2EB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_unknownObjectWeakDestroy(v2 + 16, a2);
  return swift_deallocObject(v2, 24, 7);
}

uint64_t sub_1000E2ED8()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_unknownObjectRelease(v0[3]);
  if (v0[4])
    swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

void sub_1000E2F14(uint64_t a1)
{
  uint64_t v1;

  sub_1000E27A8(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(void (**)(__n128))(v1 + 32), *(_QWORD *)(v1 + 40));
}

void *sub_1000E2F30@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  _BYTE v14[24];
  _BYTE __src[488];
  _BYTE v16[488];
  _QWORD __dst[64];

  memcpy(__dst, (const void *)(v1 + 32), sizeof(__dst));
  v3 = *(void **)(v1 + 16);
  v4 = __dst[0];
  memcpy(v16, &__dst[3], sizeof(v16));
  sub_1000471E8((uint64_t)__dst);
  if (v3)
  {
    v5 = v3;
    objc_msgSend(v5, "timestamp");
    v7 = v6;
    v8 = sub_10000EDC8(&qword_10047DDD8);
    v9 = swift_allocObject(v8, 32, 7);
    swift_unknownObjectWeakInit(v9 + 16, 0);
    swift_beginAccess(v10, v14, 1, 0);
    swift_unknownObjectWeakAssign(v9 + 16, v5);
    v11 = v5;
    v12 = NSObject.hashValue.getter();

    *(_QWORD *)(v9 + 24) = v12;
  }
  else
  {
    v9 = 0;
    v7 = 0;
  }
  swift_release();
  memcpy(&__src[8], &v16[8], 0x1E0uLL);
  *a1 = v4;
  a1[1] = v7;
  a1[2] = v9;
  return memcpy(a1 + 3, __src, 0x1E8uLL);
}

uint64_t sub_1000E3078()
{
  uint64_t v0;
  _BYTE v2[512];

  memcpy(v2, (const void *)(v0 + 32), sizeof(v2));
  sub_100012C00((uint64_t)v2);
  return swift_deallocClassInstance(v0, 544, 15);
}

uint64_t type metadata accessor for RetainedFrame()
{
  return objc_opt_self(_TtC7Measure13RetainedFrame);
}

char *sub_1000E30E8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void *v7;
  void *v8;
  objc_class *ObjectType;
  uint64_t v12;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, __n128);
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t, __n128);
  __n128 v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  id v36;
  char *v37;
  char *v38;
  void *v39;
  char *v40;
  id v41;
  char *v42;
  id v46;
  objc_super v50;
  uint64_t v51;
  char v52;

  v8 = v7;
  ObjectType = (objc_class *)swift_getObjectType(v7);
  v12 = qword_100482BB0;
  KeyPath = swift_getKeyPath(&unk_1003B6660);
  v14 = sub_10000EDC8((uint64_t *)&unk_100481B90);
  v15 = qword_10047AD88;
  v16 = v8;
  if (v15 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v17 = qword_1004AF890;
  v18 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v14 + 272);
  v19 = swift_retain(qword_1004AF890);
  *(_QWORD *)&v16[v12] = v18(KeyPath, v17, v19);
  v20 = qword_100482BB8;
  sub_10000EDC8(&qword_100482EF8);
  v21 = swift_getKeyPath(&unk_1003B6688);
  *(_QWORD *)&v16[v20] = MutableStateValue.__allocating_init(_:_:)(v21, ObjectType);
  v22 = qword_100482BC0;
  sub_10000EDC8(&qword_100482F00);
  v23 = swift_getKeyPath(&unk_1003B66B0);
  *(_QWORD *)&v16[v22] = MutableStateValue.__allocating_init(_:_:)(v23, ObjectType);
  v24 = qword_100482BC8;
  sub_10000EDC8(&qword_100482F08);
  v25 = swift_getKeyPath(&unk_1003B6638);
  *(_QWORD *)&v16[v24] = MutableStateValue.__allocating_init(_:_:)(v25, ObjectType);
  v26 = qword_100482BD0;
  v27 = swift_getKeyPath(&unk_1003B66D8);
  v28 = sub_10000EDC8(&qword_100482F10);
  v29 = qword_1004AF890;
  v30 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v28 + 272);
  v31 = swift_retain(qword_1004AF890);
  *(_QWORD *)&v16[v26] = v30(v27, v29, v31);
  v16[qword_100482C08] = 0;
  *(_QWORD *)&v16[qword_100482C18] = 0;
  v32 = &v16[qword_100482C20];
  v51 = 0;
  v52 = 1;
  v33 = sub_10000EDC8(&qword_100482F18);
  swift_allocObject(v33, 40, 7);
  v34 = Synchronized.init(wrappedValue:)(&v51);
  *(_QWORD *)v32 = 0;
  *((_QWORD *)v32 + 1) = v34;
  v32[16] = 0;
  *(_QWORD *)&v16[qword_100482C00] = a1;
  *(_QWORD *)&v16[qword_100482BF8] = a2;
  v35 = &v16[qword_100482BD8];
  *v35 = a3;
  v35[1] = a4;
  *(_QWORD *)&v16[qword_100482BE8] = a5;
  *(_QWORD *)&v16[qword_100482BF0] = a6;
  *(_QWORD *)&v16[qword_100482BE0] = a7;
  v36 = objc_allocWithZone((Class)type metadata accessor for MainLoop.InternalObserver());
  swift_retain(a1);
  v46 = a2;
  swift_retain(a4);
  swift_retain(a5);
  swift_retain(a6);
  *(_QWORD *)&v16[qword_100482C10] = objc_msgSend(v36, "init", swift_retain(a7).n128_f64[0]);

  v50.receiver = v16;
  v50.super_class = ObjectType;
  v37 = (char *)objc_msgSendSuper2(&v50, "init");
  v38 = *(char **)&v37[qword_100482C10];
  swift_unknownObjectWeakAssign(&v38[OBJC_IVAR____TtCC7Measure8MainLoopP33_3089E251FF26A255EE4B430BFB36566C16InternalObserver_mainLoop], v37);
  v39 = *(void **)(a1 + 16);
  v40 = v37;
  objc_msgSend(v39, "setDelegate:", v40);
  v41 = v39;
  v42 = v38;
  objc_msgSend(v41, "_addObserver:", v42);

  swift_release(a1);
  swift_release(a4);
  swift_release(a5);
  swift_release(a6);
  swift_release(a7);
  return v40;
}

void sub_1000E346C()
{
  objc_class *v0;
  id v1;

  v1 = objc_allocWithZone(v0);
  sub_1000E3488();
}

void sub_1000E3488()
{
  _BYTE *v0;
  _BYTE *v1;
  uint64_t ObjectType;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, __n128);
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, __n128);
  __n128 v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v1 = v0;
  ObjectType = swift_getObjectType(v0);
  v3 = qword_100482BB0;
  KeyPath = swift_getKeyPath(&unk_1003B6660);
  v5 = sub_10000EDC8((uint64_t *)&unk_100481B90);
  if (qword_10047AD88 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v6 = qword_1004AF890;
  v7 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v5 + 272);
  v8 = swift_retain();
  *(_QWORD *)&v1[v3] = v7(KeyPath, v6, v8);
  v9 = qword_100482BB8;
  sub_10000EDC8(&qword_100482EF8);
  v10 = swift_getKeyPath(&unk_1003B6688);
  *(_QWORD *)&v1[v9] = MutableStateValue.__allocating_init(_:_:)(v10, ObjectType);
  v11 = qword_100482BC0;
  sub_10000EDC8(&qword_100482F00);
  v12 = swift_getKeyPath(&unk_1003B66B0);
  *(_QWORD *)&v1[v11] = MutableStateValue.__allocating_init(_:_:)(v12, ObjectType);
  v13 = qword_100482BC8;
  sub_10000EDC8(&qword_100482F08);
  v14 = swift_getKeyPath(&unk_1003B6638);
  *(_QWORD *)&v1[v13] = MutableStateValue.__allocating_init(_:_:)(v14, ObjectType);
  v15 = qword_100482BD0;
  v16 = swift_getKeyPath(&unk_1003B66D8);
  v17 = sub_10000EDC8(&qword_100482F10);
  v18 = qword_1004AF890;
  v19 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v17 + 272);
  v20 = swift_retain();
  *(_QWORD *)&v1[v15] = v19(v16, v18, v20);
  v1[qword_100482C08] = 0;
  *(_QWORD *)&v1[qword_100482C18] = 0;
  v21 = &v1[qword_100482C20];
  v24 = 0;
  v25 = 1;
  v22 = sub_10000EDC8(&qword_100482F18);
  swift_allocObject(v22, 40, 7);
  v23 = Synchronized.init(wrappedValue:)(&v24);
  *(_QWORD *)v21 = 0;
  *((_QWORD *)v21 + 1) = v23;
  v21[16] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000002DLL, 0x80000001003D7D70, "Measure/MainLoop.swift", 22, 2, 89, 0);
  __break(1u);
}

double sub_1000E36B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t Strong;
  uint64_t v4;
  double result;
  void *v6;
  char *v7;
  uint64_t (*v8)(_BYTE *, __n128);
  __n128 v9;
  void (*v10)(_BYTE *, _QWORD);
  unint64_t *v11;
  unint64_t v12;
  _BYTE v13[32];
  _BYTE v14[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v14, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1, v2);
  if (Strong)
  {
    v6 = (void *)Strong;
    v7 = (char *)swift_unknownObjectWeakLoadStrong(Strong+ OBJC_IVAR____TtCC7Measure8MainLoopP33_3089E251FF26A255EE4B430BFB36566C16InternalObserver_mainLoop, v4);

    if (v7)
    {
      v8 = *(uint64_t (**)(_BYTE *, __n128))(**(_QWORD **)&v7[qword_100482BC0] + 400);
      v9 = swift_retain();
      v10 = (void (*)(_BYTE *, _QWORD))v8(v13, v9);
      v12 = *v11;
      *v11 = 3;
      sub_1000E6348(v12);
      v10(v13, 0);

      *(_QWORD *)&result = swift_release().n128_u64[0];
    }
  }
  return result;
}

void sub_1000E376C()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;
  void **v11;
  uint64_t v12;
  void (*v13)(uint64_t, void *);
  void *v14;
  void (*v15)();
  uint64_t v16;

  v1 = v0;
  if (qword_10047AAC0 != -1)
    swift_once(&qword_10047AAC0, sub_1000E1C3C);
  v2._countAndFlagsBits = 0x676E697472617453;
  v2._object = (void *)0xE800000000000000;
  Log.default(_:isPrivate:)(v2, 0);
  v3 = v0 + qword_100482C20;
  v11 = 0;
  LOBYTE(v12) = 1;
  swift_retain();
  Synchronized.wrappedValue.setter(&v11);
  swift_release();
  *(_BYTE *)(v3 + 16) = 0;
  *(CFTimeInterval *)v3 = CACurrentMediaTime();
  v4 = qword_100482C18;
  v5 = *(void **)(v0 + qword_100482C18);
  if (v5)
    objc_msgSend(v5, "invalidate", v11, v12);
  v6 = (void *)objc_opt_self(NSTimer);
  v7 = swift_allocObject(&unk_100445D20, 24, 7);
  swift_unknownObjectUnownedInit(v7 + 16, v1);
  v15 = sub_1000E637C;
  v16 = v7;
  v11 = _NSConcreteStackBlock;
  v12 = 1107296256;
  v13 = sub_10004C834;
  v14 = &unk_100445D38;
  v8 = _Block_copy(&v11);
  swift_release();
  v9 = objc_msgSend(v6, "scheduledTimerWithTimeInterval:repeats:block:", 1, v8, 1.0);
  _Block_release(v8);
  v10 = *(void **)(v1 + v4);
  *(_QWORD *)(v1 + v4) = v9;

}

id sub_1000E3AD4()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MainLoop.InternalObserver();
  return objc_msgSendSuper2(&v2, "dealloc");
}

void sub_1000E3B40()
{
  _swift_stdlib_reportUnimplementedInitializer("Measure.MainLoop", 16, "init()", 6, 0);
  __break(1u);
}

uint64_t sub_1000E3B6C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + qword_100482BB0));
  swift_release(*(_QWORD *)(v0 + qword_100482BB8));
  swift_release(*(_QWORD *)(v0 + qword_100482BC0));
  swift_release(*(_QWORD *)(v0 + qword_100482BC8));
  swift_release(*(_QWORD *)(v0 + qword_100482BD0));
  swift_release(*(_QWORD *)(v0 + qword_100482BD8 + 8));
  swift_release(*(_QWORD *)(v0 + qword_100482BE0));
  swift_release(*(_QWORD *)(v0 + qword_100482BE8));
  swift_release(*(_QWORD *)(v0 + qword_100482BF0));

  swift_release(*(_QWORD *)(v0 + qword_100482C00));
  return swift_release(*(_QWORD *)(v0 + qword_100482C20 + 8));
}

uint64_t sub_1000E3C60(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + qword_100482BB0));
  swift_release(*(_QWORD *)(a1 + qword_100482BB8));
  swift_release(*(_QWORD *)(a1 + qword_100482BC0));
  swift_release(*(_QWORD *)(a1 + qword_100482BC8));
  swift_release(*(_QWORD *)(a1 + qword_100482BD0));
  swift_release(*(_QWORD *)(a1 + qword_100482BD8 + 8));
  swift_release(*(_QWORD *)(a1 + qword_100482BE0));
  swift_release(*(_QWORD *)(a1 + qword_100482BE8));
  swift_release(*(_QWORD *)(a1 + qword_100482BF0));

  swift_release(*(_QWORD *)(a1 + qword_100482C00));
  return swift_release(*(_QWORD *)(a1 + qword_100482C20 + 8));
}

uint64_t type metadata accessor for MainLoop(uint64_t a1)
{
  uint64_t result;

  result = qword_100482CB0;
  if (!qword_100482CB0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MainLoop);
  return result;
}

uint64_t sub_1000E3D9C(uint64_t a1)
{
  _QWORD v2[15];

  v2[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[4] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[5] = (char *)&value witness table for () + 64;
  v2[6] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[7] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[10] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[11] = &unk_1003B65B8;
  v2[8] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[9] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[12] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[13] = &unk_1003B65D0;
  v2[14] = &unk_1003B65E8;
  return swift_initClassMetadata2(a1, 256, 15, v2, a1 + 200);
}

uint64_t sub_1000E3E2C()
{
  return type metadata accessor for MainLoop(0);
}

uint64_t type metadata accessor for MainLoop.InternalObserver()
{
  return objc_opt_self(_TtCC7Measure8MainLoopP33_3089E251FF26A255EE4B430BFB36566C16InternalObserver);
}

void sub_1000E3F78(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  const char *v19;
  Swift::String v20;
  void *object;
  __n128 v22;
  id v23;
  void *v24;
  Swift::Bool v25;
  unint64_t v26;
  uint64_t (*v27)(_QWORD *, __n128);
  __n128 v28;
  void (*v29)(_QWORD *, _QWORD);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Swift::String v33;
  void (*v34)(Swift::String *__return_ptr, __n128);
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t i;
  uint64_t v40;
  uint64_t v41;
  uint64_t Strong;
  uint64_t v43;
  uint64_t v44;
  uint64_t ObjectType;
  uint64_t v46;
  uint64_t v47;
  __n128 v48;
  uint64_t v49;
  void (*v50)(_QWORD *__return_ptr, __n128);
  __n128 v51;
  char v52;
  _QWORD v53[65];
  uint64_t v54;
  Swift::String v55;

  v2 = v1;
  v4 = type metadata accessor for ARCamera.TrackingState.Reason(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ARCamera.TrackingState(0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)v53 - v13;
  v15 = ARCamera.trackingState.getter(v12);
  v16 = qword_100482C08;
  *(_BYTE *)(v1 + qword_100482C08) = 0;
  ARCamera.trackingState.getter(v15);
  v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v11, 2, v4);
  if (!v17)
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v11, v4);
    if (qword_10047AA70 != -1)
      swift_once(&qword_10047AA70, sub_1000E13E4);
    v55._countAndFlagsBits = 0;
    v55._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(35);
    v20._countAndFlagsBits = 0xD000000000000021;
    v20._object = (void *)0x80000001003DEDF0;
    String.append(_:)(v20);
    _print_unlocked<A, B>(_:_:)(v7, &v55, v4, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    object = v55._object;
    Log.error(_:isPrivate:)(v55, 0);
    v22 = swift_bridgeObjectRelease(object);
    (*(void (**)(char *, uint64_t, __n128))(v5 + 8))(v7, v4, v22);
    goto LABEL_15;
  }
  if (v17 != 1)
  {
    v23 = objc_msgSend(a1, "currentFrame");
    if (!v23 || (v24 = v23, v25 = ARFrame.isVIOTrackingUnacceptable()(), v24, v25))
    {
      sub_10003E57C((uint64_t)v14);
      (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v14, enum case for ARCamera.TrackingState.Reason.insufficientFeatures(_:), v4);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v14, 0, 2, v4);
      *(_BYTE *)(v2 + v16) = 1;
      if (qword_10047AA70 != -1)
        swift_once(&qword_10047AA70, sub_1000E13E4);
      v18 = 0xD00000000000003ALL;
      v19 = "Tracking State: limited, reason: VIO tracking unacceptable";
      goto LABEL_14;
    }
    if (qword_10047AA70 != -1)
      swift_once(&qword_10047AA70, sub_1000E13E4);
    v33._object = (void *)0x80000001003DEE60;
    v33._countAndFlagsBits = 0xD000000000000016;
    Log.default(_:isPrivate:)(v33, 0);
    *(_BYTE *)(*(_QWORD *)(v2 + qword_100482C00) + 24) = 0;
    type metadata accessor for WorldAnchor(0);
    static WorldAnchor.resetPlanesConfidence()();
    v34 = *(void (**)(Swift::String *__return_ptr, __n128))(**(_QWORD **)(v2 + qword_100482BB0) + 144);
    v35 = swift_retain();
    v34(&v55, v35);
    swift_release();
    if ((v55._countAndFlagsBits & 0x1000000) != 0)
    {
LABEL_37:
      v47 = *(_QWORD *)(v2 + qword_100482BE8);
      LOBYTE(v55._countAndFlagsBits) = 1;
      swift_retain();
      Synchronized.wrappedValue.setter(&v55);
      v48 = swift_release();
      v49 = *(_QWORD *)SnapType.all.unsafeMutableAddressor(v48);
      v50 = *(void (**)(_QWORD *__return_ptr, __n128))(**(_QWORD **)(v2 + qword_100482BB8) + 144);
      v51 = swift_retain();
      v50(v53, v51);
      swift_release();
      memcpy(&v55, v53, 0x200uLL);
      if (*(_BYTE *)(v47 + 544) == 3)
      {
        sub_1000F6208(v49, (uint64_t)&v55);
        LOBYTE(v53[0]) = v52 & 1;
        swift_retain();
        Synchronized.wrappedValue.setter(v53);
        swift_release();
      }
      sub_100012C00((uint64_t)&v55);
      goto LABEL_15;
    }
    v36 = *(_QWORD *)(v2 + qword_100482BE0);
    swift_beginAccess(v36 + 64, &v54, 0, 0);
    v37 = *(_QWORD *)(v36 + 64);
    if ((unint64_t)v37 >> 62)
    {
      if (v37 < 0)
        v46 = *(_QWORD *)(v36 + 64);
      else
        v46 = v37 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v37);
      v38 = _CocoaArrayWrapper.endIndex.getter(v46);
      if (v38)
        goto LABEL_23;
    }
    else
    {
      v38 = *(_QWORD *)((v37 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(*(_QWORD *)(v36 + 64));
      if (v38)
      {
LABEL_23:
        if (v38 < 1)
        {
          __break(1u);
          return;
        }
        for (i = 0; i != v38; ++i)
        {
          if ((v37 & 0xC000000000000001) != 0)
          {
            v41 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v37);
          }
          else
          {
            v41 = *(_QWORD *)(v37 + 8 * i + 32);
            swift_retain();
          }
          Strong = swift_unknownObjectWeakLoadStrong(v41 + 16, v40);
          if (Strong)
          {
            v43 = Strong;
            v44 = *(_QWORD *)(v41 + 24);
            ObjectType = swift_getObjectType(Strong);
            (*(void (**)(_QWORD, uint64_t, uint64_t))(v44 + 120))(0, ObjectType, v44);
            swift_release();
            swift_unknownObjectRelease(v43);
          }
          else
          {
            swift_release();
          }
        }
      }
    }
    swift_bridgeObjectRelease(v37);
    goto LABEL_37;
  }
  if (qword_10047AA70 != -1)
    swift_once(&qword_10047AA70, sub_1000E13E4);
  v18 = 0xD00000000000001CLL;
  v19 = "Tracking State: notAvailable";
LABEL_14:
  v26 = (unint64_t)(v19 - 32) | 0x8000000000000000;
  Log.error(_:isPrivate:)(*(Swift::String *)&v18, 0);
LABEL_15:
  if (qword_10047AB68 != -1)
    swift_once(&qword_10047AB68, sub_10011E814);
  sub_10011CAC8((uint64_t)v14);
  v27 = *(uint64_t (**)(_QWORD *, __n128))(**(_QWORD **)(v2 + qword_100482BC0) + 400);
  v28 = swift_retain();
  v29 = (void (*)(_QWORD *, _QWORD))v27(v53, v28);
  v31 = v30;
  v32 = type metadata accessor for SessionState(0);
  sub_1000E6304((uint64_t)v14, v31 + *(int *)(v32 + 20));
  v29(v53, 0);
  swift_release();
  sub_10003E57C((uint64_t)v14);
}

void sub_1000E460C(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  void *object;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  void (*v16)(Swift::String *__return_ptr, __n128);
  __n128 v17;
  Swift::String v18;
  uint64_t v19;
  void (*v20)(Swift::String *, __n128);
  __n128 v21;
  ARFrame v22;
  uint64_t v23;
  void (*v24)(Swift::String *__return_ptr, __n128);
  __n128 v25;
  uint64_t countAndFlagsBits;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  id v35;
  double v36;
  uint64_t v37;
  _QWORD *v38;
  void (*v39)(Swift::String *);
  uint64_t v40;
  void (*v41)(_BYTE *, __n128);
  __n128 v42;
  uint64_t v43;
  void *Strong;
  id v45;
  double v46;
  uint64_t v47;
  _BYTE v48[512];
  _QWORD __src[60];
  _QWORD v50[65];
  char v51[24];
  Swift::String _[33];

  v3 = v2;
  ariadne_trace(_:_:_:_:_:)(727056404, 0, 0, 0, 0);
  if (qword_10047AA50 != -1)
    swift_once(&qword_10047AA50, sub_1000E12A4);
  _StringGuts.grow(_:)(29);
  _[0]._countAndFlagsBits = 0xD00000000000001BLL;
  _[0]._object = (void *)0x80000001003DED80;
  v6 = objc_msgSend(a2, "anchors", swift_bridgeObjectRelease(0xE000000000000000).n128_f64[0]);
  v7 = sub_100018148(0, (unint64_t *)&unk_100482ED0, ARAnchor_ptr);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

  if ((unint64_t)v8 >> 62)
  {
    if (v8 < 0)
      v47 = v8;
    else
      v47 = v8 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v8);
    v9 = _CocoaArrayWrapper.endIndex.getter(v47);
    swift_bridgeObjectRelease(v8);
  }
  else
  {
    v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease(v8);
  v50[0] = v9;
  v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v10._object;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(object);
  Log.debug(_:isPrivate:)(_[0], 0);
  swift_bridgeObjectRelease(_[0]._object);
  sub_1000E4B60(a2);
  if (qword_10047A930 != -1)
    swift_once(&qword_10047A930, sub_100083368);
  if (!qword_1004AF238)
    goto LABEL_30;
  v12 = *(_QWORD *)(qword_1004AF238 + 32);
  if (v12)
  {
    swift_retain();
    sub_10004CCC8(a2, v13);
  }
  if (*(_BYTE *)(v3 + qword_100482C08) == 1 && !ARFrame.isVIOTrackingUnacceptable()())
  {
    v14 = objc_msgSend(a2, "camera");
    sub_1000E3F78(a1);

  }
  v15 = qword_100482BC8;
  v16 = *(void (**)(Swift::String *__return_ptr, __n128))(**(_QWORD **)(v3 + qword_100482BC8) + 144);
  v17 = swift_retain();
  v16(_, v17);
  swift_release();
  if (!LOBYTE(_[0]._countAndFlagsBits))
  {
    v18._countAndFlagsBits = 0xD00000000000002ALL;
    v18._object = (void *)0x80000001003DEDA0;
    Log.default(_:isPrivate:)(v18, 0);
    v19 = *(_QWORD *)(v3 + v15);
    LOBYTE(_[0]._countAndFlagsBits) = 1;
    v20 = *(void (**)(Swift::String *, __n128))(*(_QWORD *)v19 + 392);
    v21 = swift_retain();
    v20(_, v21);
    swift_release();
  }
  v22.super.isa = (Class)a2;
  sub_1000F43F0(v22);
  v23 = qword_100482BB8;
  v24 = *(void (**)(Swift::String *__return_ptr, __n128))(**(_QWORD **)(v3 + qword_100482BB8) + 144);
  v25 = swift_retain();
  v24(_, v25);
  swift_release();
  countAndFlagsBits = _[0]._countAndFlagsBits;
  v27 = a2;
  objc_msgSend(v27, "timestamp");
  v29 = v28;
  v30 = sub_10000EDC8(&qword_10047DDD8);
  v31 = swift_allocObject(v30, 32, 7);
  swift_unknownObjectWeakInit(v31 + 16, 0);
  swift_beginAccess(v32, v51, 1, 0);
  swift_unknownObjectWeakAssign(v31 + 16, v27);
  v33 = v27;
  v34 = NSObject.hashValue.getter();

  *(_QWORD *)(v31 + 24) = v34;
  v35 = objc_msgSend(v33, "camera", swift_release().n128_f64[0]);
  if (qword_10047B190 != -1)
    swift_once(&qword_10047B190, sub_1001C81CC);
  if ((*(_BYTE *)(qword_1004AFD08 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 80) & 1) != 0)
    goto LABEL_31;
  v36 = SIMD2<>.init(_:)(*(double *)(qword_1004AFD08 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 64), *(double *)(qword_1004AFD08 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 72));
  v38 = (_QWORD *)effectiveStatusBarOrientation.unsafeMutableAddressor(v37);
  ComputedCameraProperties.init(camera:viewportSize:orientation:)(__src, v35, *v38, v36);
  if (countAndFlagsBits == -1)
  {
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    return;
  }
  v39 = *(void (**)(Swift::String *))(v3 + qword_100482BD8);
  v50[0] = countAndFlagsBits + 1;
  v50[1] = v29;
  v50[2] = v31;
  memcpy(&v50[4], __src, 0x1E0uLL);
  memcpy(_, v50, 0x200uLL);
  sub_1000471E8((uint64_t)v50);
  v39(_);
  swift_release();
  v40 = *(_QWORD *)(v3 + v23);
  memcpy(v48, _, sizeof(v48));
  v41 = *(void (**)(_BYTE *, __n128))(*(_QWORD *)v40 + 392);
  swift_retain();
  v42 = swift_retain();
  v41(v48, v42);
  swift_release();
  swift_release();
  if (v12)
  {
    Strong = (void *)swift_unknownObjectWeakLoadStrong(v12 + 192, v43);
    if (Strong)
    {
      v45 = Strong;

      if (v45 == v33)
      {
        v46 = CACurrentMediaTime();
        sub_10004C884(v46);
      }
    }
    swift_release();
  }
  ariadne_trace(_:_:_:_:_:)(727056408, 0, 0, 0, 0);
}

void sub_1000E4B60(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t countAndFlagsBits;
  uint64_t v7;
  double v8;
  double v9;
  Swift::String v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  void *object;
  Swift::String v19;

  v3 = v1 + qword_100482C20;
  if (*(_BYTE *)(v1 + qword_100482C20 + 16) == 1)
  {
    swift_retain();
    Synchronized.wrappedValue.getter(&v19, v4);
    *(_QWORD *)&v5 = swift_release().n128_u64[0];
    if (LOBYTE(v19._object) == 1)
      countAndFlagsBits = *(uint64_t *)v3;
    else
      countAndFlagsBits = v19._countAndFlagsBits;
    objc_msgSend(a1, "timestamp", v5);
    v9 = v8 - *(double *)&countAndFlagsBits;
    if (qword_10047AAC0 != -1)
      swift_once(&qword_10047AAC0, sub_1000E1C3C);
    v19._countAndFlagsBits = 0;
    v19._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(53);
    v10._object = (void *)0x80000001003DEE80;
    v10._countAndFlagsBits = 0xD00000000000001DLL;
    String.append(_:)(v10);
    v11 = objc_msgSend(a1, "description");
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v14 = v13;

    v15._countAndFlagsBits = v12;
    v15._object = v14;
    String.append(_:)(v15);
    swift_bridgeObjectRelease(v14);
    v16._countAndFlagsBits = 0x7420686369687720;
    v16._object = (void *)0xEC000000206B6F6FLL;
    String.append(_:)(v16);
    Double.write<A>(to:)(&v19, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, v9);
    v17._countAndFlagsBits = 0x73646E6F63657320;
    v17._object = (void *)0xE800000000000000;
    String.append(_:)(v17);
    object = v19._object;
    Log.error(_:isPrivate:)(v19, 0);
    swift_bridgeObjectRelease(object);
    *(_BYTE *)(v3 + 16) = 0;
    objc_msgSend(a1, "timestamp", swift_retain().n128_f64[0]);
  }
  else
  {
    objc_msgSend(a1, "timestamp", swift_retain().n128_f64[0]);
  }
  v19._countAndFlagsBits = v7;
  LOBYTE(v19._object) = 0;
  Synchronized.wrappedValue.setter(&v19);
  swift_release();
}

uint64_t destroy for MainLoop.ARFrameWatchdogStats(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 8));
}

uint64_t _s7Measure8MainLoopC20ARFrameWatchdogStatsVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_retain(v3);
  return a1;
}

uint64_t assignWithCopy for MainLoop.ARFrameWatchdogStats(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_retain(v4);
  swift_release(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for MainLoop.ARFrameWatchdogStats(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release(v4);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for MainLoop.ARFrameWatchdogStats(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 17))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MainLoop.ARFrameWatchdogStats(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MainLoop.ARFrameWatchdogStats()
{
  return &type metadata for MainLoop.ARFrameWatchdogStats;
}

void sub_1000E50F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  Swift::String v9;
  Swift::String v10;
  double v11;
  uint64_t countAndFlagsBits;
  double v13;
  Swift::String v14;
  id v15;
  id v16;
  uint64_t v17;
  void *v18;
  void *v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  void *object;
  Swift::String v24;

  v1 = v0 + qword_100482C20;
  if ((*(_BYTE *)(v0 + qword_100482C20 + 16) & 1) == 0)
  {
    swift_retain();
    Synchronized.wrappedValue.getter(&v24, v2);
    swift_release();
    if (((uint64_t)v24._object & 1) != 0)
    {
      if (qword_10047AAC0 != -1)
        swift_once(&qword_10047AAC0, sub_1000E1C3C);
      v24._countAndFlagsBits = 0;
      v24._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(88);
      v3._countAndFlagsBits = 0xD000000000000029;
      v3._object = (void *)0x80000001003DEEC0;
      String.append(_:)(v3);
      v4 = *(id *)(*(_QWORD *)(v0 + qword_100482C00) + 16);
      v5 = objc_msgSend(v4, "description");
      v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
      v8 = v7;

      v9._countAndFlagsBits = v6;
      v9._object = v8;
      String.append(_:)(v9);

      swift_bridgeObjectRelease(v8);
      v10._countAndFlagsBits = 0x20726574666120;
      v10._object = (void *)0xE700000000000000;
      String.append(_:)(v10);
      v11 = 1.0;
    }
    else
    {
      countAndFlagsBits = v24._countAndFlagsBits;
      v13 = CACurrentMediaTime() - *(double *)&countAndFlagsBits;
      if (v13 <= 1.0)
        return;
      if (qword_10047AAC0 != -1)
        swift_once(&qword_10047AAC0, sub_1000E1C3C);
      v24._countAndFlagsBits = 0;
      v24._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(84);
      v14._countAndFlagsBits = 0xD000000000000025;
      v14._object = (void *)0x80000001003DEF20;
      String.append(_:)(v14);
      v15 = *(id *)(*(_QWORD *)(v0 + qword_100482C00) + 16);
      v16 = objc_msgSend(v15, "description");
      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      v19 = v18;

      v20._countAndFlagsBits = v17;
      v20._object = v19;
      String.append(_:)(v20);

      swift_bridgeObjectRelease(v19);
      v21._countAndFlagsBits = 0x20726574666120;
      v21._object = (void *)0xE700000000000000;
      String.append(_:)(v21);
      v11 = v13;
    }
    Double.write<A>(to:)(&v24, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, v11);
    v22._object = (void *)0x80000001003DEEF0;
    v22._countAndFlagsBits = 0xD000000000000024;
    String.append(_:)(v22);
    object = v24._object;
    Log.error(_:isPrivate:)(v24, 0);
    swift_bridgeObjectRelease(object);
    *(_BYTE *)(v1 + 16) = 1;
  }
}

void sub_1000E53F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  uint64_t Strong;
  char *v15;
  Swift::String v16;
  uint64_t v17;
  void *v18;
  __n128 v19;
  uint64_t v20;
  void *v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  Swift::String v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  id v35;
  _QWORD aBlock[6];

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 == 2)
  {
    Strong = swift_unknownObjectWeakLoadStrong(v2 + OBJC_IVAR____TtCC7Measure8MainLoopP33_3089E251FF26A255EE4B430BFB36566C16InternalObserver_mainLoop, v10);
    if (Strong)
    {
      v15 = (char *)Strong;
      if (qword_10047AAC0 != -1)
        swift_once(&qword_10047AAC0, sub_1000E1C3C);
      v16._countAndFlagsBits = 0x676E6970706F7453;
      v16._object = (void *)0xE800000000000000;
      Log.default(_:isPrivate:)(v16, 0);
      v17 = qword_100482C18;
      v18 = *(void **)&v15[qword_100482C18];
      if (v18)
      {
        objc_msgSend(v18, "invalidate");
        v35 = *(id *)&v15[v17];
      }
      else
      {
        v35 = 0;
      }
      *(_QWORD *)&v15[v17] = 0;

      goto LABEL_18;
    }
  }
  else if (a1 == 1)
  {
    v13 = (void *)swift_unknownObjectWeakLoadStrong(v2+ OBJC_IVAR____TtCC7Measure8MainLoopP33_3089E251FF26A255EE4B430BFB36566C16InternalObserver_mainLoop, v10);
    if (v13)
    {
      v35 = v13;
      sub_1000E376C();
LABEL_18:

    }
  }
  else if (a1)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Measure/MainLoop.swift", 22, 2, 112, 0);
    __break(1u);
  }
  else
  {
    sub_100018148(0, (unint64_t *)&qword_10047FB70, OS_dispatch_queue_ptr);
    v35 = (id)static OS_dispatch_queue.main.getter(v19);
    v20 = swift_allocObject(&unk_100445D70, 24, 7);
    swift_unknownObjectWeakInit(v20 + 16, v2);
    aBlock[4] = sub_1000E63F4;
    aBlock[5] = v20;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10003ECA0;
    aBlock[3] = &unk_100445D88;
    v21 = _Block_copy(aBlock);
    v22 = swift_release();
    static DispatchQoS.unspecified.getter(v22);
    aBlock[0] = _swiftEmptyArrayStorage;
    v23 = sub_10000C4B0((unint64_t *)&qword_10047D7F0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v24 = sub_10000EDC8((uint64_t *)&unk_10047E430);
    v25 = sub_100030E64();
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v24, v25, v4, v23);
    v26 = v35;
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v7, v21);
    _Block_release(v21);

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    v28 = swift_unknownObjectWeakLoadStrong(v2 + OBJC_IVAR____TtCC7Measure8MainLoopP33_3089E251FF26A255EE4B430BFB36566C16InternalObserver_mainLoop, v27);
    if (v28)
    {
      v29 = (char *)v28;
      if (qword_10047AAC0 != -1)
        swift_once(&qword_10047AAC0, sub_1000E1C3C);
      v30._countAndFlagsBits = 0x676E6970706F7453;
      v30._object = (void *)0xE800000000000000;
      Log.default(_:isPrivate:)(v30, 0);
      v31 = qword_100482C18;
      v32 = *(void **)&v29[qword_100482C18];
      if (v32)
      {
        objc_msgSend(v32, "invalidate");
        v33 = *(void **)&v29[v31];
      }
      else
      {
        v33 = 0;
      }
      *(_QWORD *)&v29[v31] = 0;

    }
  }
}

void sub_1000E57C8(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v4)(Swift::String *, __n128);
  __n128 v5;
  void (*v6)(Swift::String *, _QWORD);
  unint64_t *v7;
  unint64_t v8;
  Swift::String v9;
  void *object;
  void *v11;
  __n128 v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void (*v19)(void **, __n128);
  __n128 v20;
  void *v21;
  _QWORD v22[3];
  _BYTE v23[8];
  Swift::String v24[2];

  v2 = v1;
  v4 = *(uint64_t (**)(Swift::String *, __n128))(**(_QWORD **)(v1 + qword_100482BC0) + 400);
  v5 = swift_retain();
  v6 = (void (*)(Swift::String *, _QWORD))v4(v24, v5);
  v8 = *v7;
  *v7 = a1;
  swift_errorRetain(a1);
  sub_1000E6348(v8);
  v6(v24, 0);
  swift_release();
  if (qword_10047AA50 != -1)
    swift_once(&qword_10047AA50, sub_1000E12A4);
  v24[0]._countAndFlagsBits = 0;
  v24[0]._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease(v24[0]._object);
  v24[0]._countAndFlagsBits = 0xD00000000000001CLL;
  v24[0]._object = (void *)0x80000001003DEF70;
  swift_getErrorValue(a1, v23, v22);
  v9._countAndFlagsBits = Error.localizedDescription.getter(v22[1], v22[2]);
  object = v9._object;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(object);
  v11 = v24[0]._object;
  Log.error(_:isPrivate:)(v24[0], 0);
  v12 = swift_bridgeObjectRelease(v11);
  v13 = (void *)_convertErrorToNSError(_:)(a1, v12);
  v21 = v13;
  type metadata accessor for ARError(0);
  v15 = v14;
  v16 = sub_10000C4B0(&qword_100482EE0, (uint64_t (*)(uint64_t))type metadata accessor for ARError, (uint64_t)&unk_1003B0528);
  _BridgedStoredNSError.code.getter(v24, v15, v16);
  v17 = *(_QWORD *)(v2 + qword_100482BC8);
  if (v24[0]._countAndFlagsBits == 102)
    v18 = 4;
  else
    v18 = 2;
  LOBYTE(v21) = v18;
  v19 = *(void (**)(void **, __n128))(*(_QWORD *)v17 + 392);
  v20 = swift_retain();
  v19(&v21, v20);
  swift_release();
  sub_1000E376C();

}

void sub_1000E59C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(_BYTE *, __n128);
  __n128 v3;
  void (*v4)(_BYTE *, _QWORD);
  unint64_t *v5;
  unint64_t v6;
  Swift::String v7;
  uint64_t v8;
  void (*v9)(_BYTE *, __n128);
  __n128 v10;
  Swift::String v11;
  uint64_t v12;
  void *v13;
  void *v14;
  _BYTE v15[32];

  v1 = v0;
  v2 = *(uint64_t (**)(_BYTE *, __n128))(**(_QWORD **)(v0 + qword_100482BC0) + 400);
  v3 = swift_retain();
  v4 = (void (*)(_BYTE *, _QWORD))v2(v15, v3);
  v6 = *v5;
  *v5 = 2;
  sub_1000E6348(v6);
  v4(v15, 0);
  swift_release();
  if (qword_10047AA50 != -1)
    swift_once(&qword_10047AA50, sub_1000E12A4);
  v7._object = (void *)0x80000001003DEF50;
  v7._countAndFlagsBits = 0xD000000000000018;
  Log.error(_:isPrivate:)(v7, 0);
  v8 = *(_QWORD *)(v0 + qword_100482BC8);
  v15[0] = 0;
  v9 = *(void (**)(_BYTE *, __n128))(*(_QWORD *)v8 + 392);
  v10 = swift_retain();
  v9(v15, v10);
  swift_release();
  if (qword_10047AAC0 != -1)
    swift_once(&qword_10047AAC0, sub_1000E1C3C);
  v11._countAndFlagsBits = 0x676E6970706F7453;
  v11._object = (void *)0xE800000000000000;
  Log.default(_:isPrivate:)(v11, 0);
  v12 = qword_100482C18;
  v13 = *(void **)(v1 + qword_100482C18);
  if (v13)
  {
    objc_msgSend(v13, "invalidate");
    v14 = *(void **)(v1 + v12);
  }
  else
  {
    v14 = 0;
  }
  *(_QWORD *)(v1 + v12) = 0;

}

void sub_1000E5B44()
{
  uint64_t v0;
  uint64_t (*v1)(_BYTE *, __n128);
  __n128 v2;
  void (*v3)(_BYTE *, _QWORD);
  unint64_t *v4;
  unint64_t v5;
  Swift::String v6;
  _BYTE v7[32];

  v1 = *(uint64_t (**)(_BYTE *, __n128))(**(_QWORD **)(v0 + qword_100482BC0) + 400);
  v2 = swift_retain();
  v3 = (void (*)(_BYTE *, _QWORD))v1(v7, v2);
  v5 = *v4;
  *v4 = 1;
  sub_1000E6348(v5);
  v3(v7, 0);
  swift_release();
  if (qword_10047AA50 != -1)
    swift_once(&qword_10047AA50, sub_1000E12A4);
  v6._object = (void *)0x80000001003DEEA0;
  v6._countAndFlagsBits = 0xD00000000000001BLL;
  Log.default(_:isPrivate:)(v6, 0);
  sub_1000E376C();
}

uint64_t sub_1000E5C1C(void *a1, Swift::OpaquePointer a2)
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _OWORD v27[4];
  BOOL v28;

  ariadne_trace(_:_:_:_:_:)(727056412, 0, 0, 0, 0);
  v4 = objc_msgSend(a1, "currentFrame");
  if (v4)
  {
    v5 = v4;
    v6 = objc_msgSend(v4, "worldTrackingState");
    if (v6)
    {
      v7 = v6;
      if ((objc_msgSend(v6, "majorRelocalization") & 1) != 0
        || objc_msgSend(v7, "minorRelocalization"))
      {
        type metadata accessor for WorldAnchor(0);
        static WorldAnchor.resetPlanesConfidence()();
        v8 = 1;
        v9 = v7;
      }
      else
      {
        v8 = 0;
        v9 = v5;
        v5 = v7;
      }

    }
    else
    {
      v8 = 0;
    }

  }
  else
  {
    v8 = 0;
  }
  v10 = *(_QWORD *)MeasureCore.shared.unsafeMutableAddressor();
  swift_retain(v10);
  MeasureCore.didUpdate(anchors:)(a2);
  swift_release(v10);
  v11 = objc_msgSend(a1, "currentFrame");
  v12 = v11;
  if (v11)
  {
    v13 = objc_msgSend(v11, "camera");

    objc_msgSend(v13, "transform");
    v25 = v15;
    v26 = v14;
    v23 = v17;
    v24 = v16;

    v19 = v23;
    v18 = v24;
    v21 = v25;
    v20 = v26;
  }
  else
  {
    v20 = 0uLL;
    v21 = 0uLL;
    v18 = 0uLL;
    v19 = 0uLL;
  }
  v27[0] = v20;
  v27[1] = v21;
  v27[2] = v18;
  v27[3] = v19;
  v28 = v12 == 0;
  type metadata accessor for WorldAnchor(0);
  static WorldAnchor.didUpdate(anchors:camera:forceUpdate:)(a2._rawValue, v27, v8);
  return ariadne_trace(_:_:_:_:_:)(727056416, 0, 0, 0, 0);
}

void sub_1000E5DF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t j;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t (*v27)(__n128);
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(id (*)(uint64_t), uint64_t);
  id v32;
  id (*v33)(uint64_t);
  id v34;
  void *v35;
  char *v36;
  int v37;
  uint64_t (*v38)(__n128);
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v2 = type metadata accessor for ARPlaneAnchor.Classification(0);
  v47 = *(_QWORD *)(v2 - 8);
  v48 = v2;
  v3 = __chkstk_darwin(v2);
  v46 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MeasureCore.shared.unsafeMutableAddressor(v3);
  swift_retain();
  MeasureCore.didAdd(anchors:)((Swift::OpaquePointer)a1);
  swift_release();
  type metadata accessor for WorldAnchor(0);
  static WorldAnchor.didAdd(anchors:)(a1);
  if (qword_10047AB68 != -1)
    swift_once(&qword_10047AB68, sub_10011E814);
  sub_10011CCFC(a1);
  v49 = (uint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v22 = a1;
    else
      v22 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v5 = _CocoaArrayWrapper.endIndex.getter(v22);
    if (!v5)
      goto LABEL_24;
  }
  else
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (!v5)
      goto LABEL_24;
  }
  if (v5 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v5; ++i)
      {
        v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
        v8 = objc_opt_self(ARPlaneAnchor);
        v9 = swift_dynamicCastObjCClass(v7, v8);
        if (v9)
        {
          v10 = v9;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v9);
          v12 = *(_QWORD *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v11 = *(_QWORD *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v12 >= v11 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
          v13 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v10);
          specialized Array._endMutation()(v13);
        }
        else
        {
          swift_unknownObjectRelease(v7);
        }
      }
    }
    else
    {
      for (j = 0; j != v5; ++j)
      {
        v16 = *(void **)(a1 + 8 * j + 32);
        v17 = objc_opt_self(ARPlaneAnchor);
        v18 = swift_dynamicCastObjCClass(v16, v17);
        if (v18)
        {
          v19 = v18;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v16);
          v21 = *(_QWORD *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v20 = *(_QWORD *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v21 >= v20 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
          v15 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v19);
          specialized Array._endMutation()(v15);
        }
      }
    }
LABEL_24:
    swift_bridgeObjectRelease(a1);
    v23 = v49;
    if ((unint64_t)v49 >> 62)
    {
      if (v49 < 0)
        v41 = v49;
      else
        v41 = v49 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v49);
      v24 = _CocoaArrayWrapper.endIndex.getter(v41);
      swift_bridgeObjectRelease(v23);
      if (v24)
      {
LABEL_26:
        if (v24 >= 1)
        {
          v25 = 0;
          v44 = qword_100482BD0;
          v26 = enum case for ARPlaneAnchor.Classification.floor(_:);
          v43 = enum case for ARPlaneAnchor.Classification.ceiling(_:);
          while (1)
          {
            if ((v23 & 0xC000000000000001) != 0)
              v34 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v25, v23);
            else
              v34 = *(id *)(v23 + 8 * v25 + 32);
            v35 = v34;
            v36 = v46;
            ARPlaneAnchor.classification.getter();
            v37 = (*(uint64_t (**)(char *, uint64_t))(v47 + 88))(v36, v48);
            if (v37 == v26)
            {
              v27 = *(uint64_t (**)(__n128))(**(_QWORD **)(v45 + v44) + 200);
              v28 = swift_retain();
              v29 = v27(v28);
              swift_release();
              v30 = swift_allocObject(&unk_100445CF8, 24, 7);
              *(_QWORD *)(v30 + 16) = v35;
              v31 = *(void (**)(id (*)(uint64_t), uint64_t))(*(_QWORD *)v29 + 280);
              v32 = v35;
              v33 = sub_1000E62CC;
            }
            else
            {
              if (v37 != v43)
              {

                (*(void (**)(char *, uint64_t))(v47 + 8))(v46, v48);
                goto LABEL_30;
              }
              v38 = *(uint64_t (**)(__n128))(**(_QWORD **)(v45 + v44) + 200);
              v39 = swift_retain();
              v40 = v38(v39);
              swift_release();
              v30 = swift_allocObject(&unk_100445CD0, 24, 7);
              *(_QWORD *)(v30 + 16) = v35;
              v31 = *(void (**)(id (*)(uint64_t), uint64_t))(*(_QWORD *)v40 + 280);
              v32 = v35;
              v33 = sub_1000E6294;
            }
            v31(v33, v30);
            swift_release();
            swift_release();

LABEL_30:
            if (v24 == ++v25)
              goto LABEL_43;
          }
        }
        goto LABEL_45;
      }
    }
    else
    {
      v24 = *(_QWORD *)((v49 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v24)
        goto LABEL_26;
    }
LABEL_43:
    swift_bridgeObjectRelease(v23);
    return;
  }
  __break(1u);
LABEL_45:
  __break(1u);
}

uint64_t sub_1000E6270()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_1000E6294(uint64_t a1)
{
  uint64_t v1;
  id result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  result = objc_msgSend(*(id *)(v1 + 16), "transform");
  *(_OWORD *)(a1 + 80) = v4;
  *(_OWORD *)(a1 + 96) = v5;
  *(_OWORD *)(a1 + 112) = v6;
  *(_OWORD *)(a1 + 128) = v7;
  *(_BYTE *)(a1 + 144) = 0;
  return result;
}

id sub_1000E62CC(uint64_t a1)
{
  uint64_t v1;
  id result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  result = objc_msgSend(*(id *)(v1 + 16), "transform");
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = v7;
  *(_BYTE *)(a1 + 64) = 0;
  return result;
}

uint64_t sub_1000E6304(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ARCamera.TrackingState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000E6348(unint64_t result)
{
  if (result >= 4)
    return swift_errorRelease();
  return result;
}

uint64_t sub_1000E6358()
{
  uint64_t v0;

  swift_unknownObjectUnownedDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000E637C()
{
  uint64_t v0;
  id Strong;

  Strong = (id)swift_unknownObjectUnownedLoadStrong(v0 + 16);
  sub_1000E50F8();

}

uint64_t sub_1000E63B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000E63C4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000E63D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_unknownObjectWeakDestroy(v2 + 16, a2);
  return swift_deallocObject(v2, 24, 7);
}

double sub_1000E63F4()
{
  uint64_t v0;

  return sub_1000E36B0(v0);
}

uint64_t sub_1000E6418(uint64_t a1, uint64_t (*a2)(_OWORD *))
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[9];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 112);
  v7[6] = *(_OWORD *)(a1 + 96);
  v7[7] = v2;
  v7[8] = *(_OWORD *)(a1 + 128);
  v8 = *(_QWORD *)(a1 + 144);
  v3 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v3;
  v4 = *(_OWORD *)(a1 + 80);
  v7[4] = *(_OWORD *)(a1 + 64);
  v7[5] = v4;
  v5 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v5;
  return a2(v7);
}

double sub_1000E6474()
{
  uint64_t v0;
  uint64_t (*v1)(__n128);
  __n128 v2;
  uint64_t v3;
  void (*v4)(uint64_t (*)(uint64_t), _BYTE *, __n128);
  __n128 v5;
  double result;
  _QWORD v7[3];
  uint64_t v8;
  _BYTE v9[16];
  uint64_t (*v10)();
  uint64_t v11;
  _BYTE v12[16];
  uint64_t (*v13)();
  uint64_t v14;

  v13 = sub_1000E8094;
  v14 = v0;
  swift_retain();
  swift_retain();
  StateValue.ifUpdated(_:)(sub_1000E8098, v12);
  swift_release();
  swift_release();
  v1 = *(uint64_t (**)(__n128))(**(_QWORD **)(v0 + 96) + 200);
  v2 = swift_retain();
  v3 = v1(v2);
  swift_release();
  v10 = sub_1000E80C4;
  v11 = v0;
  v4 = *(void (**)(uint64_t (*)(uint64_t), _BYTE *, __n128))(*(_QWORD *)v3 + 296);
  v5 = swift_retain();
  v4(sub_1000E80C8, v9, v5);
  swift_release();
  swift_release();
  v7[2] = sub_1000E8124;
  v8 = v0;
  swift_retain();
  swift_retain();
  StateValue.ifUpdated(_:)(sub_1000127BC, v7);
  swift_release();
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

void sub_1000E6584(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  void (*v4)(__n128, __n128);
  _QWORD *v5;
  void *v6;
  void *v7;
  id v8;
  unsigned __int32 v9;
  _QWORD *v10;
  unsigned __int32 v11;
  double (*v12)(void);
  id v13;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  double (*v19)(void);
  id v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  float32x4_t v26;
  float32x4_t v27;
  float v28;
  _QWORD *v29;
  __n128 v30;
  __n128 v31;
  __n128 v32;
  __n128 v33;
  __n128 v34;
  _QWORD *v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;
  __n128 v40;
  float32x4_t v41;
  float32x2_t v42;
  float32x4_t v43;
  float v44;
  id v46;
  void (*v47)(_QWORD *__return_ptr, __n128);
  __n128 v48;
  void (*v49)(_QWORD *__return_ptr, __n128);
  __n128 v50;
  uint64_t v51;
  void (*v52)(_QWORD *__return_ptr, __n128);
  __n128 v53;
  void (*v54)(_QWORD *__return_ptr, __n128);
  __n128 v55;
  uint64_t v56;
  float32x2_t v57;
  _QWORD *v58;
  __n128 v59;
  __n128 v60;
  __n128 v61;
  __n128 v62;
  int8x16_t v63;
  float32x4_t v64;
  float32x4_t v65;
  _QWORD *v66;
  __n128 v67;
  __n128 v68;
  __n128 v69;
  __n128 v70;
  int8x16_t v71;
  float32x4_t v72;
  float32x4_t v73;
  unsigned __int8 v74;
  _QWORD *v75;
  double (*v76)(void);
  __n128 v77;
  __n128 v78;
  __n128 v79;
  __n128 v80;
  __n128 v81;
  void (*v82)(__n128, __n128);
  _QWORD *v83;
  __n128 v84;
  __n128 v85;
  __n128 v86;
  __n128 v87;
  __n128 v88;
  __n128 v89;
  __n128 v90;
  __n128 v91;
  __n128 v92;
  __n128 v93;
  __n128 v94;
  __n128 v95;
  __n128 v96;
  __n128 v97;
  __n128 v98;
  __n128 v99;
  __n128 v100;
  __n128 v101;
  __n128 v102;
  __n128 v103;
  __n128 v104;
  __n128 v105;
  __n128 v106;
  __n128 v107;
  __n128 v108;
  __n128 v109;
  __n128 v110;
  __n128 v111;
  __n128 v112;
  __n128 v113;
  __n128 v114;
  float32x4_t v115;
  __n128 v116;
  float32x2_t v117;
  __n128 v118;
  unsigned __int32 v119;
  __n128 v120;
  __n128 v121;
  __n128 v122;
  __n128 v123;
  _QWORD __src[64];
  _OWORD __dst[32];
  double v126[64];
  _OWORD v127[32];
  _QWORD v128[64];
  id v129[18];
  id v130[18];
  uint64_t v131[2];
  __n128 v132;
  __n128 v133;
  char v134;

  v2 = v1;
  sub_100012C58(a1, (uint64_t)v130, (uint64_t *)&unk_100486700);
  sub_100012C58((uint64_t)v130, (uint64_t)v131, (uint64_t *)&unk_100486700);
  if (sub_1000127D0(v131) == 1)
  {
    v3 = *(_QWORD **)(v1 + 120);
    if (v3)
    {
      v4 = *(void (**)(__n128, __n128))((swift_isaMask & *v3) + 0x2E0);
      v5 = v3;
      v4((__n128)0, (__n128)0);

      v3 = *(_QWORD **)(v2 + 120);
    }
    *(_QWORD *)(v2 + 120) = 0;

  }
  else
  {
    if ((v134 & 1) != 0)
    {
      sub_100012C58((uint64_t)v130, (uint64_t)v128, (uint64_t *)&unk_100486700);
      v6 = (void *)v128[0];
      v7 = *(void **)(v1 + 120);
      *(_QWORD *)(v2 + 120) = v128[0];
      v8 = v6;
    }
    else
    {
      v9 = v133.n128_u32[0];
      v10 = (_QWORD *)v131[0];
      v119 = v132.n128_u32[1];
      v11 = v132.n128_u32[0];
      v120 = v132;
      v123 = v133;
      v12 = *(double (**)(void))((swift_isaMask & *(_QWORD *)v131[0]) + 0x2A0);
      sub_100012C58((uint64_t)v130, (uint64_t)v129, (uint64_t *)&unk_100486700);
      v13 = v129[0];
      v14.n128_f64[0] = v12();
      v18.n128_f64[0] = simd_float4x4.position.getter(v14, v15, v16, v17);
      v110 = v18;
      v19 = *(double (**)(void))((swift_isaMask & *v10) + 0x2A8);
      v20 = v13;
      v21.n128_f64[0] = v19();
      v95 = v22;
      v102 = v21;
      v84 = v24;
      v88 = v23;
      sub_100012810(v130);
      v25.n128_f64[0] = simd_float4x4.position.getter(v102, v95, v88, v84);
      *(double *)v26.i64 = closestPointOnLine(lineP1:lineP2:point:)(v110, v25, v120);
      v27 = vsubq_f32(v26, (float32x4_t)v120);
      v117 = (float32x2_t)__PAIR64__(v119, v11);
      *(float32x2_t *)v26.f32 = vsub_f32(*(float32x2_t *)v26.f32, v117);
      v28 = COERCE_FLOAT(vmulq_f32(v27, v27).i32[2])
          + vaddv_f32(vmul_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v26.f32));
      v29 = v10;
      v30.n128_f64[0] = v12();
      v103 = v31;
      v111 = v30;
      v89 = v33;
      v96 = v32;
      sub_100012810(v130);
      v34.n128_f64[0] = simd_float4x4.position.getter(v111, v103, v96, v89);
      v112 = v34;
      v35 = v29;
      v36.n128_f64[0] = v19();
      v97 = v37;
      v104 = v36;
      v85 = v39;
      v90 = v38;
      sub_100012810(v130);
      v40.n128_f64[0] = simd_float4x4.position.getter(v104, v97, v90, v85);
      *(double *)v41.i64 = closestPointOnLine(lineP1:lineP2:point:)(v112, v40, v123);
      v42 = vsub_f32(*(float32x2_t *)v41.f32, (float32x2_t)__PAIR64__(v123.n128_u32[1], v9));
      v43 = vsubq_f32(v41, (float32x4_t)v123);
      v44 = COERCE_FLOAT(vmulq_f32(v43, v43).i32[2]) + vaddv_f32(vmul_f32(v42, v42));
      if (v28 < 0.0001 && v44 < 0.0001)
      {
        type metadata accessor for MeasureCamera(0);
        v47 = *(void (**)(_QWORD *__return_ptr, __n128))(**(_QWORD **)(v2 + 80) + 144);
        v48 = swift_retain();
        v47(__src, v48);
        swift_release();
        memcpy(__dst, __src, sizeof(__dst));
        sub_100012C00((uint64_t)__dst);
        v105 = (__n128)__dst[12];
        v113 = (__n128)__dst[11];
        v91 = (__n128)__dst[14];
        v98 = (__n128)__dst[13];
        v49 = *(void (**)(_QWORD *__return_ptr, __n128))(**(_QWORD **)(v2 + 80) + 144);
        v50 = swift_retain();
        v49(__src, v50);
        swift_release();
        memcpy(v126, __src, sizeof(v126));
        v51 = sub_100012C00((uint64_t)v126);
        v113.n128_u64[0] = static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)(v51, v120, v113, v105, v98, v91, v126[4]);
        v52 = *(void (**)(_QWORD *__return_ptr, __n128))(**(_QWORD **)(v2 + 80) + 144);
        v53 = swift_retain();
        v52(__src, v53);
        swift_release();
        memcpy(v127, __src, sizeof(v127));
        sub_100012C00((uint64_t)v127);
        v99 = (__n128)v127[12];
        v106 = (__n128)v127[11];
        v86 = (__n128)v127[14];
        v92 = (__n128)v127[13];
        v54 = *(void (**)(_QWORD *__return_ptr, __n128))(**(_QWORD **)(v2 + 80) + 144);
        v55 = swift_retain();
        v54(__src, v55);
        swift_release();
        memcpy(v128, __src, sizeof(v128));
        v56 = sub_100012C00((uint64_t)v128);
        v57 = vsub_f32((float32x2_t)v113.n128_u64[0], COERCE_FLOAT32X2_T(static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)(v56, v123, v106, v99, v92, v86, *(double *)&v128[4])));
        if (vaddv_f32(vmul_f32(v57, v57)) > 900.0)
        {
          v58 = v35;
          v59.n128_f64[0] = v19();
          v107 = v60;
          v114 = v59;
          v93 = v62;
          v100 = v61;
          sub_100012810(v130);
          *(double *)v63.i64 = simd_float4x4.position.getter(v114, v107, v100, v93);
          *(float32x2_t *)v64.f32 = vsub_f32((float32x2_t)__PAIR64__(v123.n128_u32[1], v9), *(float32x2_t *)v63.i8);
          *(float32x2_t *)&v64.u32[2] = vsub_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v123, (int8x16_t)v123, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v63, v63, 8uLL));
          v65 = vmulq_f32(v64, v64);
          v115 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v65, 2), vaddq_f32(v65, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v65.f32, 1)));
          v66 = v58;
          v67.n128_f64[0] = v19();
          v101 = v68;
          v108 = v67;
          v87 = v70;
          v94 = v69;
          sub_100012810(v130);
          *(double *)v71.i64 = simd_float4x4.position.getter(v108, v101, v94, v87);
          *(float32x2_t *)v72.f32 = vsub_f32(v117, *(float32x2_t *)v71.i8);
          *(float32x2_t *)&v72.u32[2] = vsub_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v120, (int8x16_t)v120, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v71, v71, 8uLL));
          v73 = vmulq_f32(v72, v72);
          v74 = vmovn_s32(vcgtq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v73, 2), vaddq_f32(v73, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v73.f32, 1))), v115)).u8[0];
          v75 = v66;
          if ((v74 & 1) != 0)
            v76 = v19;
          else
            v76 = v12;
          v77.n128_f64[0] = v76();
          v118 = v78;
          v121 = v77;
          v109 = v80;
          v116 = v79;
          sub_100012810(v130);
          v81.n128_f64[0] = simd_float4x4.position.getter(v121, v118, v116, v109);
          v122 = v81;
          v82 = *(void (**)(__n128, __n128))((swift_isaMask & *v75) + 0x2E0);
          v83 = v75;
          v82(v123, v122);
          sub_100012810(v130);
        }
      }
      sub_100012810(v130);
      v7 = *(void **)(v2 + 120);
      *(_QWORD *)(v2 + 120) = v20;
      v46 = v20;
    }

  }
}

void sub_1000E6AD4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  _QWORD *v7;
  id v8;
  __n128 v9;
  __n128 v10;
  __n128 v11;
  __n128 v12;
  __int128 v13;
  BOOL v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  _QWORD v19[4];

  if (a1 == 0xC000000000000010)
  {
    v3 = *(_QWORD *)(a2 + 104);
    v4 = swift_retain(v3);
    StateValue.wrappedValue.getter(v19, v4);
    swift_release(v3);
    v5 = (void *)v19[0];
    v6 = (void *)v19[1];
    v7 = (_QWORD *)v19[3];
    v8 = (id)v19[2];

    if (v7)
    {
      v9.n128_f64[0] = (*(double (**)(void))((swift_isaMask & *v7) + 0x2B0))();
      v17 = v10;
      v18 = v9;
      v15 = v12;
      v16 = v11;

      *(double *)&v13 = simd_float4x4.position.getter(v18, v17, v16, v15);
    }
    else
    {
      v13 = 0uLL;
    }
    v14 = v7 == 0;
    *(_OWORD *)(a2 + 128) = v13;
  }
  else
  {
    *(_QWORD *)(a2 + 128) = 0;
    *(_QWORD *)(a2 + 136) = 0;
    v14 = 1;
  }
  *(_BYTE *)(a2 + 144) = v14;
}

uint64_t sub_1000E6BB0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, __n128);
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, __n128);
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, __n128);
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, __n128);
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v34[24];
  void *v35;
  void *v36;

  v1 = v0;
  v2 = *v0;
  v0[8] = 0;
  v0[9] = 0;
  KeyPath = swift_getKeyPath(&unk_1003B6798);
  v4 = sub_10000EDC8(&qword_10047BBD0);
  v5 = qword_10047AD88;
  swift_retain(v1);
  if (v5 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v6 = qword_1004AF890;
  v7 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v4 + 272);
  v8 = swift_retain(qword_1004AF890);
  v1[10] = v7(KeyPath, v6, v8);
  v9 = swift_getKeyPath(&unk_1003B67C0);
  v10 = sub_10000EDC8(&qword_1004830F0);
  v11 = qword_1004AF890;
  v12 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v10 + 272);
  v13 = swift_retain(qword_1004AF890);
  v1[11] = v12(v9, v11, v13);
  sub_10000EDC8(&qword_1004830F8);
  v14 = swift_getKeyPath(&unk_1003B67E8);
  v1[12] = MutableStateBinding.__allocating_init(_:_:)(v14, v2);
  v15 = sub_10000EDC8(&qword_10047D440);
  v16 = swift_getKeyPath(&unk_1003B6810);
  v17 = qword_1004AF890;
  v18 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v15 + 272);
  v19 = swift_retain(qword_1004AF890);
  v1[13] = v18(v16, v17, v19);
  v20 = sub_10000EDC8(&qword_10047BBA8);
  v21 = swift_getKeyPath(&unk_1003B6838);
  v22 = qword_1004AF890;
  v23 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v20 + 272);
  v24 = swift_retain(qword_1004AF890);
  v1[14] = v23(v21, v22, v24);
  v1[15] = 0;
  v1[16] = 0;
  v1[17] = 0;
  *((_BYTE *)v1 + 144) = 1;
  swift_release(v1);
  v35 = &type metadata for Configurations.Default;
  v36 = &protocol witness table for Configurations.Default;
  v25 = StateObserver.init(configuration:)(v34);
  v26 = type metadata accessor for EdgeGuidesInstrument(0);
  swift_allocObject(v26, 232, 7);
  swift_retain(v25);
  sub_10000F708();
  v27 = *(_QWORD *)(v25 + 64);
  *(_QWORD *)(v25 + 64) = v28;
  swift_release(v27);
  v29 = type metadata accessor for VerticalGuidesInstrument(0);
  v30 = (uint64_t *)swift_allocObject(v29, 216, 15);
  v31 = sub_1000E812C(v30);
  swift_release(v25);
  v32 = *(_QWORD *)(v25 + 72);
  *(_QWORD *)(v25 + 72) = v31;
  swift_release(v32);
  return v25;
}

void sub_1000E6DF8()
{
  uint64_t v0;

  swift_allocObject(v0, 145, 15);
  sub_1000E6E1C();
}

void sub_1000E6E1C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, __n128);
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, __n128);
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, __n128);
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, __n128);
  __n128 v23;

  v1 = v0;
  v2 = *v0;
  v0[8] = 0;
  v0[9] = 0;
  KeyPath = swift_getKeyPath(&unk_1003B6798);
  v4 = sub_10000EDC8(&qword_10047BBD0);
  if (qword_10047AD88 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v5 = qword_1004AF890;
  v6 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v4 + 272);
  v7 = swift_retain();
  v1[10] = v6(KeyPath, v5, v7);
  v8 = swift_getKeyPath(&unk_1003B67C0);
  v9 = sub_10000EDC8(&qword_1004830F0);
  v10 = qword_1004AF890;
  v11 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v9 + 272);
  v12 = swift_retain();
  v1[11] = v11(v8, v10, v12);
  sub_10000EDC8(&qword_1004830F8);
  v13 = swift_getKeyPath(&unk_1003B67E8);
  v1[12] = MutableStateBinding.__allocating_init(_:_:)(v13, v2);
  v14 = sub_10000EDC8(&qword_10047D440);
  v15 = swift_getKeyPath(&unk_1003B6810);
  v16 = qword_1004AF890;
  v17 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v14 + 272);
  v18 = swift_retain();
  v1[13] = v17(v15, v16, v18);
  v19 = sub_10000EDC8(&qword_10047BBA8);
  v20 = swift_getKeyPath(&unk_1003B6838);
  v21 = qword_1004AF890;
  v22 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v19 + 272);
  v23 = swift_retain();
  v1[14] = v22(v20, v21, v23);
  v1[15] = 0;
  v1[16] = 0;
  v1[17] = 0;
  *((_BYTE *)v1 + 144) = 1;
  swift_release();
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000002DLL, 0x80000001003D7D70, "Measure/GuidesCoordinator.swift", 31, 2, 59, 0);
  __break(1u);
}

void sub_1000E6FFC()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  void (*v3)(_BYTE *__return_ptr, __n128);
  __n128 v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  double (*v9)(void);
  __n128 v10;
  __n128 v11;
  __n128 v12;
  __n128 v13;
  float32x4_t v14;
  float32x4_t v15;
  int8x16_t v16;
  int32x2_t v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  float32x4_t v22;
  float32x4_t v23;
  int8x16_t v24;
  int32x2_t v25;
  unsigned __int8 v26;
  unsigned int v27;
  float32x4_t v28;
  int32x4_t v29;
  float32x2_t v30;
  float32x2_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float v34;
  float v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;
  float32x4_t v40;
  float v41;
  float32x4_t v42;
  float v43;
  float v44;
  float v45;
  __n128 v46;
  __n128 v47;
  __n128 v48;
  __n128 v49;
  __n128 v50;
  __n128 v51;
  double (*v52)(void);
  __n128 v53;
  __n128 v54;
  __n128 v55;
  __n128 v56;
  __int128 v57;
  double (*v58)(void);
  __n128 v59;
  __n128 v60;
  __n128 v61;
  __n128 v62;
  float32x4_t v63;
  __n128 v64;
  __n128 v65;
  __n128 v66;
  __n128 v67;
  float32x4_t v68;
  float32x4_t v69;
  int32x4_t v70;
  float32x2_t v71;
  float32x2_t v72;
  __n128 v73;
  __n128 v74;
  __n128 v75;
  __n128 v76;
  float32x4_t v77;
  float v78;
  __n128 v79;
  __n128 v80;
  __n128 v81;
  __n128 v82;
  float32x4_t v83;
  __n128 v84;
  __n128 v85;
  __n128 v86;
  __n128 v87;
  float32x4_t v88;
  float32x4_t v89;
  int32x4_t v90;
  float32x2_t v91;
  float32x2_t v92;
  float32x4_t v93;
  float v94;
  float v95;
  __n128 v96;
  __n128 v97;
  __n128 v98;
  __n128 v99;
  __int128 v100;
  __n128 v101;
  __n128 v102;
  __n128 v103;
  __n128 v104;
  float32x4_t v105;
  __n128 v106;
  __n128 v107;
  __n128 v108;
  __n128 v109;
  float32x4_t v110;
  float32x4_t v111;
  int32x4_t v112;
  float32x2_t v113;
  float32x2_t v114;
  float32x4_t v115;
  __n128 v116;
  uint64_t v117;
  __n128 v118;
  __n128 v119;
  __n128 v120;
  __n128 v121;
  __n128 v122;
  __n128 v123;
  __n128 v124;
  __n128 v125;
  __n128 v126;
  __n128 v127;
  __n128 v128;
  __n128 v129;
  __n128 v130;
  __n128 v131;
  __n128 v132;
  __n128 v133;
  __n128 v134;
  __n128 v135;
  __n128 v136;
  __n128 v137;
  __n128 v138;
  __n128 v139;
  int32x2_t v140;
  float v141;
  __n128 v142;
  float32x4_t v143;
  float32x4_t v144;
  __n128 v145;
  float32x4_t v146;
  __n128 v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  __int128 v153;
  __n128 v154;
  int32x2_t v155;
  int8x16_t v156;
  __int128 v157;
  float32x4_t v158;
  float v159;
  __n128 v160;
  _BYTE v161[152];
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  _BYTE v171[152];
  uint64_t v172[18];
  _QWORD v173[12];
  _BYTE v174[48];
  _OWORD v175[2];
  char v176;

  swift_retain();
  StateValue.wrappedValue.getter(v171, v1);
  swift_release();
  v2 = *(_OWORD *)v171;

  if (*((_QWORD *)&v2 + 1))
  {
    v3 = *(void (**)(_BYTE *__return_ptr, __n128))(**(_QWORD **)(v0 + 96) + 144);
    v4 = swift_retain();
    v3(v161, v4);
    swift_release();
    *(_OWORD *)&v171[96] = *(_OWORD *)&v161[96];
    *(_OWORD *)&v171[112] = *(_OWORD *)&v161[112];
    *(_OWORD *)&v171[32] = *(_OWORD *)&v161[32];
    *(_OWORD *)&v171[48] = *(_OWORD *)&v161[48];
    *(_OWORD *)&v171[128] = *(_OWORD *)&v161[128];
    *(_QWORD *)&v171[144] = *(_QWORD *)&v161[144];
    *(_OWORD *)&v171[64] = *(_OWORD *)&v161[64];
    *(_OWORD *)&v171[80] = *(_OWORD *)&v161[80];
    *(_OWORD *)v171 = *(_OWORD *)v161;
    *(_OWORD *)&v171[16] = *(_OWORD *)&v161[16];
    v5 = *(void **)v161;
    v168 = *(_OWORD *)&v171[104];
    v169 = *(_OWORD *)&v171[120];
    v170 = *(_OWORD *)&v171[136];
    v164 = *(_OWORD *)&v171[40];
    v165 = *(_OWORD *)&v171[56];
    v166 = *(_OWORD *)&v171[72];
    v167 = *(_OWORD *)&v171[88];
    v162 = *(_OWORD *)&v171[8];
    v163 = *(_OWORD *)&v171[24];
    sub_100012C58((uint64_t)v171, (uint64_t)v172, (uint64_t *)&unk_100486700);
    if (sub_1000127D0(v172) == 1)
    {

      sub_100012BC4((uint64_t)v171);
      return;
    }
    *(_OWORD *)&v161[88] = v167;
    *(_OWORD *)&v161[104] = v168;
    *(_OWORD *)&v161[120] = v169;
    *(_OWORD *)&v161[136] = v170;
    *(_OWORD *)&v161[24] = v163;
    *(_OWORD *)&v161[40] = v164;
    *(_OWORD *)&v161[56] = v165;
    *(_OWORD *)&v161[72] = v166;
    *(_QWORD *)v161 = v5;
    *(_OWORD *)&v161[8] = v162;
    v6 = v5;
    v7 = sub_100012BC4((uint64_t)v161);
    if (((*(uint64_t (**)(uint64_t))((swift_isaMask & *v6) + 0x240))(v7) & 1) != 0)
    {
      v52 = *(double (**)(void))((swift_isaMask & *v6) + 0x2A0);
      v53.n128_f64[0] = v52();
      *(double *)&v57 = simd_float4x4.position.getter(v53, v54, v55, v56);
      v157 = v57;
      v58 = *(double (**)(void))((swift_isaMask & *v6) + 0x2A8);
      v59.n128_f64[0] = v58();
      *(double *)v63.i64 = simd_float4x4.position.getter(v59, v60, v61, v62);
      v150 = v63;
      v64.n128_f64[0] = v52();
      *(double *)v68.i64 = simd_float4x4.position.getter(v64, v65, v66, v67);
      v69 = vsubq_f32(v150, v68);
      v70 = (int32x4_t)vmulq_f32(v69, v69);
      v70.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v70, 2), vadd_f32(*(float32x2_t *)v70.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v70.i8, 1))).u32[0];
      v71 = vrsqrte_f32((float32x2_t)v70.u32[0]);
      v72 = vmul_f32(v71, vrsqrts_f32((float32x2_t)v70.u32[0], vmul_f32(v71, v71)));
      v151 = vmulq_n_f32(v69, vmul_f32(v72, vrsqrts_f32((float32x2_t)v70.u32[0], vmul_f32(v72, v72))).f32[0]);
      v73.n128_f64[0] = (*(double (**)(void))((swift_isaMask & **((_QWORD **)&v2 + 1)) + 0x2B0))();
      *(float32x2_t *)v77.f32 = vsub_f32(COERCE_FLOAT32X2_T(simd_float4x4.position.getter(v73, v74, v75, v76)), vadd_f32(*(float32x2_t *)&v157, vmul_f32(*(float32x2_t *)v151.f32, (float32x2_t)vdup_n_s32(0x3E99999Au))));
      v77.f32[2] = v78 - (float)(*((float *)&v157 + 2) + vmuls_lane_f32(0.3, v151, 2));
      v158 = v77;
      v79.n128_f64[0] = v58();
      *(double *)v83.i64 = simd_float4x4.position.getter(v79, v80, v81, v82);
      v152 = v83;
      v84.n128_f64[0] = v52();
      *(double *)v88.i64 = simd_float4x4.position.getter(v84, v85, v86, v87);
      v89 = vsubq_f32(v152, v88);
      v90 = (int32x4_t)vmulq_f32(v89, v89);
      v90.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v90, 2), vadd_f32(*(float32x2_t *)v90.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v90.i8, 1))).u32[0];
      v91 = vrsqrte_f32((float32x2_t)v90.u32[0]);
      v92 = vmul_f32(v91, vrsqrts_f32((float32x2_t)v90.u32[0], vmul_f32(v91, v91)));
      v93 = vmulq_f32(v158, vmulq_n_f32(v89, vmul_f32(v92, vrsqrts_f32((float32x2_t)v90.u32[0], vmul_f32(v92, v92))).f32[0]));
      v94 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v93, 2), vaddq_f32(v93, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v93.f32, 1))).f32[0];
      if (v94 >= 0.0)
      {
        v95 = v94 + 1.3;
        if (v95 > 10.0)
          v95 = 10.0;
        v159 = v95;
        v96.n128_f64[0] = v52();
        *(double *)&v100 = simd_float4x4.position.getter(v96, v97, v98, v99);
        v153 = v100;
        v101.n128_f64[0] = v58();
        *(double *)v105.i64 = simd_float4x4.position.getter(v101, v102, v103, v104);
        v146 = v105;
        v106.n128_f64[0] = v52();
        *(double *)v110.i64 = simd_float4x4.position.getter(v106, v107, v108, v109);
        v111 = vsubq_f32(v146, v110);
        v112 = (int32x4_t)vmulq_f32(v111, v111);
        v112.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v112, 2), vadd_f32(*(float32x2_t *)v112.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v112.i8, 1))).u32[0];
        v113 = vrsqrte_f32((float32x2_t)v112.u32[0]);
        v114 = vmul_f32(v113, vrsqrts_f32((float32x2_t)v112.u32[0], vmul_f32(v113, v113)));
        v115 = vmulq_n_f32(v111, vmul_f32(v114, vrsqrts_f32((float32x2_t)v112.u32[0], vmul_f32(v114, v114))).f32[0]);
        v116.n128_u64[0] = (unint64_t)vadd_f32(*(float32x2_t *)&v153, vmul_n_f32(*(float32x2_t *)v115.f32, v159));
        v116.n128_f32[2] = *((float *)&v153 + 2) + vmuls_lane_f32(v159, v115, 2);
        v116.n128_u32[3] = 0;
        v139 = v116;
        v117 = ((uint64_t (*)(void))v52)();
        goto LABEL_24;
      }
    }
    else
    {
      (*(void (**)(_QWORD *__return_ptr))((swift_isaMask & *v6) + 0x2B0))(v173);
      sub_100012C58((uint64_t)v173, (uint64_t)v174, &qword_100482708);
      v8 = sub_100012C58((uint64_t)v174, (uint64_t)v175, &qword_100482708);
      if ((v176 & 1) == 0)
      {
        v143 = (float32x4_t)v175[1];
        v148 = (float32x4_t)v175[0];
        v9 = *(double (**)(void))((swift_isaMask & **((_QWORD **)&v2 + 1)) + 0x2B0);
        v10.n128_f64[0] = ((double (*)(uint64_t))v9)(v8);
        *(double *)v14.i64 = simd_float4x4.position.getter(v10, v11, v12, v13);
        v155 = *(int32x2_t *)v14.f32;
        v15 = vsubq_f32(v14, v148);
        v16 = (int8x16_t)vmulq_f32(v15, v15);
        v17.i32[0] = vextq_s8(v16, v16, 8uLL).u32[0];
        v17.i32[1] = v16.i32[0];
        v140 = v17;
        v18.n128_f64[0] = v9();
        *(double *)v22.i64 = simd_float4x4.position.getter(v18, v19, v20, v21);
        v23 = vsubq_f32(v22, v143);
        v24 = (int8x16_t)vmulq_f32(v23, v23);
        v25.i32[0] = vextq_s8(v24, v24, 8uLL).u32[0];
        v25.i32[1] = v24.i32[0];
        *(float32x2_t *)v22.f32 = vsub_f32((float32x2_t)vzip2_s32(v155, *(int32x2_t *)v22.f32), (float32x2_t)vzip2_s32(*(int32x2_t *)v148.f32, *(int32x2_t *)v143.f32));
        *(float32x2_t *)v22.f32 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v140, v25), vadd_f32((float32x2_t)vzip2_s32(v140, v25), vmul_f32(*(float32x2_t *)v22.f32, *(float32x2_t *)v22.f32))));
        v26 = vcgt_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v22.f32, 1), *(float32x2_t *)v22.f32).u8[0];
        if ((v26 & 1) != 0)
          v27 = -1;
        else
          v27 = 0;
        v156 = vbslq_s8((int8x16_t)vdupq_n_s32(v27), (int8x16_t)v148, (int8x16_t)v143);
        v28 = vsubq_f32(v143, v148);
        v29 = (int32x4_t)vmulq_f32(v28, v28);
        v29.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v29, 2), vadd_f32(*(float32x2_t *)v29.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v29.i8, 1))).u32[0];
        v30 = vrsqrte_f32((float32x2_t)v29.u32[0]);
        v31 = vmul_f32(v30, vrsqrts_f32((float32x2_t)v29.u32[0], vmul_f32(v30, v30)));
        v144 = v28;
        v32 = vmulq_n_f32(v28, vmul_f32(v31, vrsqrts_f32((float32x2_t)v29.u32[0], vmul_f32(v31, v31))).f32[0]);
        if ((v26 & 1) != 0)
        {
          *(float32x2_t *)v33.f32 = vsub_f32(0, *(float32x2_t *)v32.f32);
          v33.f32[2] = 0.0 - v32.f32[2];
          v33.i32[3] = 0;
          v32 = v33;
        }
        v149 = v32;
        v34 = v32.f32[2];
        v35 = *(float *)&v156.i32[2] + vmuls_lane_f32(0.3, v32, 2);
        v36.n128_f64[0] = v9();
        *(float32x2_t *)v40.f32 = vsub_f32(COERCE_FLOAT32X2_T(simd_float4x4.position.getter(v36, v37, v38, v39)), vadd_f32(*(float32x2_t *)v156.i8, vmul_f32(*(float32x2_t *)v149.f32, (float32x2_t)vdup_n_s32(0x3E99999Au))));
        v40.f32[2] = v41 - v35;
        v42 = vmulq_f32(v149, v40);
        v43 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v42, 2), vaddq_f32(v42, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v42.f32, 1))).f32[0];
        if (v43 <= 0.0)
        {
          v45 = 1.3;
          if ((v26 & 1) == 0)
          {
LABEL_15:
            v141 = v45;
            v46.n128_f64[0] = (*(double (**)(void))((swift_isaMask & *v6) + 0x2A0))();
            v50.n128_f64[0] = simd_float4x4.position.getter(v46, v47, v48, v49);
            v145 = v50;
            v51.n128_u64[0] = (unint64_t)vadd_f32(*(float32x2_t *)v156.i8, vmul_n_f32(*(float32x2_t *)v149.f32, v141));
            v51.n128_f32[2] = *(float *)&v156.i32[2] + (float)(v34 * v141);
            v51.n128_u32[3] = 0;
LABEL_23:
            v139 = v51;
            v52 = *(double (**)(void))((swift_isaMask & *v6) + 0x2A0);
            v127.n128_f64[0] = v52();
            v118.n128_f64[0] = simd_float4x4.translated(to:)(v145, v127, v128, v129, v130);
LABEL_24:
            v154 = v119;
            v160 = v118;
            v142 = v121;
            v147 = v120;
            v131.n128_f64[0] = ((double (*)(uint64_t))v52)(v117);
            v135.n128_f64[0] = simd_float4x4.translated(to:)(v139, v131, v132, v133, v134);
            (*(void (**)(__n128, __n128, __n128, __n128, __n128, __n128, __n128, __n128))((swift_isaMask & *v6) + 0x2D0))(v160, v154, v147, v142, v135, v136, v137, v138);

            return;
          }
        }
        else
        {
          v44 = v43 + 1.3;
          v45 = (float)((float)(20.0
                              - sqrtf((float)(v144.f32[2] * v144.f32[2])+ vaddv_f32(vmul_f32(*(float32x2_t *)v144.f32, *(float32x2_t *)v144.f32))))+ -0.6)+ -2.0;
          if (v45 >= v44)
            v45 = v44;
          if ((v26 & 1) == 0)
            goto LABEL_15;
        }
        v122.n128_u64[0] = (unint64_t)vadd_f32(*(float32x2_t *)v156.i8, vmul_n_f32(*(float32x2_t *)v149.f32, v45));
        v122.n128_f32[2] = *(float *)&v156.i32[2] + (float)(v34 * v45);
        v122.n128_u32[3] = 0;
        v145 = v122;
        v123.n128_f64[0] = (*(double (**)(void))((swift_isaMask & *v6) + 0x2A8))();
        v51.n128_f64[0] = simd_float4x4.position.getter(v123, v124, v125, v126);
        goto LABEL_23;
      }
    }

  }
}

void sub_1000E7738()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  void (*v6)(_OWORD *__return_ptr, __n128);
  __n128 v7;
  void *v8;
  uint64_t (*v9)(_OWORD *, __n128);
  __n128 v10;
  void (*v11)(_OWORD *, _QWORD, __n128);
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  _QWORD *v15;
  uint64_t v16;
  double (*v17)(void);
  __n128 v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  float32x4_t v22;
  double (*v23)(void);
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  float32x4_t v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  __n128 v32;
  float32x4_t v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  float32x4_t v38;
  void (*v39)(_QWORD *__return_ptr, __n128);
  __n128 v40;
  void *v41;
  float32x4_t v42;
  int32x4_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  id v49;
  unint64_t v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char **v58;
  id v59;
  void *v60;
  id v61;
  void *v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  int v71;
  __int128 v72;
  const double *v73;
  uint64_t v74;
  float64x2_t v75;
  __n128 v76;
  __n128 v77;
  __n128 v78;
  __n128 v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  uint64_t (*v93)(_QWORD *, __n128);
  __n128 v94;
  void (*v95)(_QWORD *, _QWORD, __n128);
  uint64_t v96;
  uint64_t v97;
  __n128 v98;
  uint64_t v99;
  uint64_t (*v100)(_QWORD *, __n128);
  uint64_t v101;
  __n128 v102;
  void (*v103)(_QWORD *, _QWORD, __n128);
  uint64_t v104;
  uint64_t v105;
  __n128 v106;
  id v107;
  id v108;
  int v109;
  uint64_t v110;
  int v111;
  int v112;
  int v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD v124[64];
  void *v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  _BYTE v144[152];
  uint64_t v145[18];
  _OWORD v146[33];

  v1 = v0;
  v2 = type metadata accessor for ARPlaneAnchor.Classification(0);
  v122 = *(_QWORD *)(v2 - 8);
  v123 = v2;
  __chkstk_darwin(v2);
  v121 = (char *)&v107 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  StateValue.wrappedValue.getter(v146, v4);
  swift_release();
  v5 = v146[0];

  if (!*((_QWORD *)&v5 + 1))
    goto LABEL_4;
  v6 = *(void (**)(_OWORD *__return_ptr, __n128))(**(_QWORD **)(v0 + 96) + 144);
  v7 = swift_retain();
  v6(v146, v7);
  swift_release();
  *(_OWORD *)&v144[112] = v146[7];
  *(_OWORD *)&v144[96] = v146[6];
  *(_OWORD *)&v144[48] = v146[3];
  *(_OWORD *)&v144[32] = v146[2];
  *(_OWORD *)&v144[128] = v146[8];
  *(_QWORD *)&v144[144] = *(_QWORD *)&v146[9];
  *(_OWORD *)&v144[64] = v146[4];
  *(_OWORD *)&v144[80] = v146[5];
  *(_OWORD *)v144 = v146[0];
  *(_OWORD *)&v144[16] = v146[1];
  v8 = *(void **)&v146[0];
  v141 = *(_OWORD *)&v144[104];
  v142 = *(_OWORD *)&v144[120];
  v143 = *(_OWORD *)&v144[136];
  v137 = *(_OWORD *)&v144[40];
  v138 = *(_OWORD *)&v144[56];
  v139 = *(_OWORD *)&v144[72];
  v140 = *(_OWORD *)&v144[88];
  v135 = *(_OWORD *)&v144[8];
  v136 = *(_OWORD *)&v144[24];
  sub_100012C58((uint64_t)v144, (uint64_t)v145, (uint64_t *)&unk_100486700);
  if (sub_1000127D0(v145) == 1)
  {
    sub_100012BC4((uint64_t)v144);
LABEL_4:
    v9 = *(uint64_t (**)(_OWORD *, __n128))(**(_QWORD **)(v1 + 96) + 400);
    v10 = swift_retain();
    v11 = (void (*)(_OWORD *, _QWORD, __n128))v9(v146, v10);
    v13 = *(_QWORD *)(v12 + 144);
    *(_QWORD *)(v12 + 144) = _swiftEmptyArrayStorage;
    v14 = swift_bridgeObjectRelease(v13);
    v11(v146, 0, v14);
LABEL_5:
    swift_release();
    return;
  }
  v131 = v140;
  v132 = v141;
  v133 = v142;
  v134 = v143;
  v127 = v136;
  v128 = v137;
  v129 = v138;
  v130 = v139;
  v125 = v8;
  v126 = v135;
  v15 = v8;
  v16 = sub_100012BC4((uint64_t)&v125);
  v17 = *(double (**)(void))((swift_isaMask & *v15) + 0x2A8);
  v18.n128_f64[0] = ((double (*)(uint64_t))v17)(v16);
  *(double *)v22.i64 = simd_float4x4.position.getter(v18, v19, v20, v21);
  v120 = v22;
  v23 = *(double (**)(void))((swift_isaMask & *v15) + 0x2A0);
  v24.n128_f64[0] = v23();
  *(double *)v28.i64 = simd_float4x4.position.getter(v24, v25, v26, v27);
  v119 = v28;
  v29.n128_f64[0] = v23();
  *(double *)v33.i64 = simd_float4x4.position.getter(v29, v30, v31, v32);
  v118 = v33;
  v34.n128_f64[0] = v17();
  *(double *)v38.i64 = simd_float4x4.position.getter(v34, v35, v36, v37);
  v117 = v38;
  v39 = *(void (**)(_QWORD *__return_ptr, __n128))(**(_QWORD **)(v1 + 80) + 144);
  v40 = swift_retain();
  v39(v124, v40);
  swift_release();
  memcpy(v146, v124, 0x200uLL);
  v41 = (void *)sub_10008F8B8();
  sub_100012C00((uint64_t)v146);
  if (!v41)
  {

    v93 = *(uint64_t (**)(_QWORD *, __n128))(**(_QWORD **)(v1 + 96) + 400);
    v94 = swift_retain();
    v95 = (void (*)(_QWORD *, _QWORD, __n128))v93(v124, v94);
    v97 = *(_QWORD *)(v96 + 144);
    *(_QWORD *)(v96 + 144) = _swiftEmptyArrayStorage;
    v98 = swift_bridgeObjectRelease(v97);
    v95(v124, 0, v98);
    goto LABEL_5;
  }
  v42 = vsubq_f32(v120, v119);
  v43 = (int32x4_t)vmulq_f32(v42, v42);
  v43.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v43, 2), vadd_f32(*(float32x2_t *)v43.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v43.i8, 1))).u32[0];
  v44 = vrsqrte_f32((float32x2_t)v43.u32[0]);
  v45 = vmul_f32(v44, vrsqrts_f32((float32x2_t)v43.u32[0], vmul_f32(v44, v44)));
  v46 = vmulq_n_f32(v42, vmul_f32(v45, vrsqrts_f32((float32x2_t)v43.u32[0], vmul_f32(v45, v45))).f32[0]);
  v47 = vaddq_f32(v118, v117);
  *(float32x2_t *)v48.f32 = vmul_f32(*(float32x2_t *)v47.f32, (float32x2_t)0x3F0000003F000000);
  v48.i64[1] = COERCE_UNSIGNED_INT(vmuls_lane_f32(0.5, v47, 2));
  v119 = v46;
  v120 = v48;
  v49 = objc_msgSend(v41, "_hitTestFromOrigin:withDirection:types:", 32, *(double *)v48.i64, *(double *)v46.i64);
  v50 = sub_1000E8884();
  v51 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v49, v50);

  v107 = v41;
  v52 = objc_msgSend(v41, "_hitTestFromOrigin:withDirection:types:", 32, *(double *)v120.i64, COERCE_DOUBLE(vsub_f32(0, *(float32x2_t *)v119.f32)));
  v53 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v52, v50);

  v124[0] = v51;
  sub_1001001C8(v53);
  v54 = v124[0];
  v108 = v15;
  if (!(v124[0] >> 62))
  {
    v55 = *(_QWORD *)((v124[0] & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v55)
      goto LABEL_9;
LABEL_41:
    v120.i64[0] = (uint64_t)_swiftEmptyArrayStorage;
LABEL_42:

    swift_bridgeObjectRelease(v54);
    v100 = *(uint64_t (**)(_QWORD *, __n128))(**(_QWORD **)(v1 + 96) + 400);
    v101 = v120.i64[0];
    swift_bridgeObjectRetain(v120.i64[0]);
    v102 = swift_retain();
    v103 = (void (*)(_QWORD *, _QWORD, __n128))v100(v124, v102);
    v105 = *(_QWORD *)(v104 + 144);
    *(_QWORD *)(v104 + 144) = v101;
    v106 = swift_bridgeObjectRelease(v105);
    v103(v124, 0, v106);
    swift_bridgeObjectRelease(v101);
    goto LABEL_5;
  }
  if (v124[0] < 0)
    v99 = v124[0];
  else
    v99 = v124[0] & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v124[0]);
  v55 = _CocoaArrayWrapper.endIndex.getter(v99);
  swift_bridgeObjectRelease(v54);
  if (!v55)
    goto LABEL_41;
LABEL_9:
  if (v55 >= 1)
  {
    v56 = 0;
    v57 = v54 & 0xC000000000000001;
    v118.i32[0] = enum case for ARPlaneAnchor.Classification.wall(_:);
    v113 = enum case for ARPlaneAnchor.Classification.floor(_:);
    v112 = enum case for ARPlaneAnchor.Classification.ceiling(_:);
    v120.i64[0] = (uint64_t)_swiftEmptyArrayStorage;
    v111 = enum case for ARPlaneAnchor.Classification.table(_:);
    v109 = enum case for ARPlaneAnchor.Classification.door(_:);
    v58 = &selRef_renderer_didAddNode_forAnchor_;
    v110 = v1;
    while (1)
    {
      if (v57)
        v59 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v56, v54);
      else
        v59 = *(id *)(v54 + 8 * v56 + 32);
      v60 = v59;
      v61 = objc_msgSend(v59, v58[313]);
      if (!v61)
        goto LABEL_12;
      v62 = v61;
      v63 = objc_opt_self(ARPlaneAnchor);
      if (!swift_dynamicCastObjCClass(v62, v63))
        break;
      v64 = v60;
      v65 = v54;
      v66 = v55;
      v67 = v57;
      v68 = v1;
      v69 = v121;
      ARPlaneAnchor.classification.getter();
      v70 = v69;
      v1 = v68;
      v57 = v67;
      v55 = v66;
      v54 = v65;
      v71 = (*(uint64_t (**)(char *, uint64_t))(v122 + 88))(v70, v123);
      if (v71 == v118.i32[0])
        goto LABEL_20;
      if (v71 == v113 || v71 == v112 || v71 == v111)
      {
        if ((SIMD3<>.isAlmostVertical(withinDegrees:)(5.0, (__n128)v119) & 1) != 0)
        {
LABEL_28:
          if ((*(_BYTE *)(v1 + 144) & 1) != 0)
            goto LABEL_31;
          v73 = (const double *)(v1 + 136);
          v74 = *(_QWORD *)(v1 + 128);
          *(_QWORD *)&v72 = v74;
          v116 = v72;
          v75 = vld1q_dup_f64(v73);
          v117 = (float32x4_t)v75;
          objc_msgSend(v64, "worldTransform");
          *(double *)v80.i64 = simd_float4x4.position.getter(v76, v77, v78, v79);
          *(float32x2_t *)v81.f32 = vsub_f32((float32x2_t)__PAIR64__(DWORD1(v116), v74), *(float32x2_t *)v80.f32);
          v81.i64[1] = vsubq_f32(v117, v80).u32[2];
          v82 = vmulq_f32(v81, v81);
          if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v82, 2), vaddq_f32(v82, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v82.f32, 1))).f32[0]) >= 0.0001)
          {
LABEL_31:
            objc_msgSend(v64, "worldTransform");
            v116 = v84;
            v117 = v83;
            v114 = v86;
            v115 = v85;
            if ((swift_isUniquelyReferenced_nonNull_native(v120.i64[0]) & 1) == 0)
              v120.i64[0] = (uint64_t)sub_10005F028(0, *(_QWORD *)(v120.i64[0] + 16) + 1, 1, (char *)v120.i64[0]);
            v88 = *(_QWORD *)(v120.i64[0] + 16);
            v87 = *(_QWORD *)(v120.i64[0] + 24);
            if (v88 >= v87 >> 1)
              v120.i64[0] = (uint64_t)sub_10005F028((char *)(v87 > 1), v88 + 1, 1, (char *)v120.i64[0]);
            v89 = v120.i64[0];
            *(_QWORD *)(v120.i64[0] + 16) = v88 + 1;
            v90 = v89 + (v88 << 6);
            v91 = v116;
            *(float32x4_t *)(v90 + 32) = v117;
            *(_OWORD *)(v90 + 48) = v91;
            v92 = v114;
            *(_OWORD *)(v90 + 64) = v115;
            *(_OWORD *)(v90 + 80) = v92;

            v1 = v110;
            v58 = &selRef_renderer_didAddNode_forAnchor_;
            goto LABEL_13;
          }
        }
LABEL_30:

        v58 = &selRef_renderer_didAddNode_forAnchor_;
        goto LABEL_13;
      }
      if (v71 == v109)
      {
LABEL_20:
        if ((SIMD3<>.isAlmostHorizontal(withinDegrees:)(5.0, (__n128)v119) & 1) != 0)
          goto LABEL_28;
        goto LABEL_30;
      }

      (*(void (**)(char *, uint64_t))(v122 + 8))(v121, v123);
      v58 = &selRef_renderer_didAddNode_forAnchor_;
LABEL_13:
      if (v55 == ++v56)
        goto LABEL_42;
    }

LABEL_12:
    goto LABEL_13;
  }
  __break(1u);
}

void sub_1000E7F14()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 64));
  swift_release(*(_QWORD *)(v0 + 72));
  swift_release(*(_QWORD *)(v0 + 80));
  swift_release(*(_QWORD *)(v0 + 88));
  swift_release(*(_QWORD *)(v0 + 96));
  swift_release(*(_QWORD *)(v0 + 104));
  swift_release(*(_QWORD *)(v0 + 112));

}

uint64_t sub_1000E7F60()
{
  uint64_t v0;

  v0 = StateObserver.deinit();
  swift_release(*(_QWORD *)(v0 + 64));
  swift_release(*(_QWORD *)(v0 + 72));
  swift_release(*(_QWORD *)(v0 + 80));
  swift_release(*(_QWORD *)(v0 + 88));
  swift_release(*(_QWORD *)(v0 + 96));
  swift_release(*(_QWORD *)(v0 + 104));
  swift_release(*(_QWORD *)(v0 + 112));

  return v0;
}

uint64_t sub_1000E7FC4()
{
  uint64_t v0;

  v0 = sub_1000E7F60();
  return swift_deallocClassInstance(v0, 145, 15);
}

uint64_t type metadata accessor for GuidesCoordinator(uint64_t a1)
{
  uint64_t result;

  result = qword_100482FA8;
  if (!qword_100482FA8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for GuidesCoordinator);
  return result;
}

uint64_t sub_1000E801C(uint64_t a1)
{
  _QWORD v2[9];

  v2[0] = "\b";
  v2[1] = "\b";
  v2[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[4] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[5] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[6] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[7] = "\b";
  v2[8] = &unk_1003B6780;
  return swift_initClassMetadata2(a1, 256, 9, v2, a1 + 208);
}

uint64_t sub_1000E8098(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v1 + 16))(*a1, a1[1], a1[2], a1[3]);
}

uint64_t sub_1000E80C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(_OWORD *);
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[9];
  uint64_t v9;

  v2 = *(uint64_t (**)(_OWORD *))(v1 + 16);
  v3 = *(_OWORD *)(a1 + 112);
  v8[6] = *(_OWORD *)(a1 + 96);
  v8[7] = v3;
  v8[8] = *(_OWORD *)(a1 + 128);
  v9 = *(_QWORD *)(a1 + 144);
  v4 = *(_OWORD *)(a1 + 48);
  v8[2] = *(_OWORD *)(a1 + 32);
  v8[3] = v4;
  v5 = *(_OWORD *)(a1 + 80);
  v8[4] = *(_OWORD *)(a1 + 64);
  v8[5] = v5;
  v6 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v6;
  return v2(v8);
}

void sub_1000E8124(uint64_t a1)
{
  uint64_t v1;

  sub_1000E6AD4(a1, v1);
}

uint64_t sub_1000E812C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, __n128);
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, __n128);
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, __n128);
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, __n128);
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, __n128);
  __n128 v29;
  uint64_t v35;
  _BYTE v37[40];
  _QWORD v38[5];

  v2 = *a1;
  v38[3] = &type metadata for Configurations.Default;
  v38[4] = &protocol witness table for Configurations.Default;
  a1[8] = (uint64_t)_swiftEmptyArrayStorage;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *((_BYTE *)a1 + 144) = 1;
  KeyPath = swift_getKeyPath(&unk_1003B6810);
  v4 = sub_10000EDC8(&qword_10047BBA0);
  v5 = qword_10047AD88;
  swift_retain(a1);
  if (v5 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v6 = qword_1004AF890;
  v7 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v4 + 272);
  v8 = swift_retain(qword_1004AF890);
  a1[19] = v7(KeyPath, v6, v8);
  v9 = sub_10000EDC8(&qword_10047BBA8);
  v10 = swift_getKeyPath(&unk_1003B6838);
  v11 = qword_1004AF890;
  v12 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v9 + 272);
  v13 = swift_retain(qword_1004AF890);
  a1[20] = v12(v10, v11, v13);
  sub_10000EDC8(&qword_100483108);
  v14 = swift_getKeyPath(&unk_1003B67C0);
  a1[21] = MutableStateValue.__allocating_init(_:_:)(v14, v2);
  v15 = sub_10000EDC8(&qword_100483110);
  v16 = swift_getKeyPath(&unk_1003B6860);
  v17 = qword_1004AF890;
  v18 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v15 + 272);
  v19 = swift_retain(qword_1004AF890);
  a1[22] = v18(v16, v17, v19);
  v20 = swift_getKeyPath(&unk_1003B6888);
  v21 = sub_10000EDC8(&qword_10047BBC8);
  v22 = qword_1004AF890;
  v23 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v21 + 272);
  v24 = swift_retain(qword_1004AF890);
  a1[23] = v23(v20, v22, v24);
  v25 = swift_getKeyPath(&unk_1003B6798);
  v26 = sub_10000EDC8(&qword_10047BBD0);
  v27 = qword_1004AF890;
  v28 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v26 + 272);
  v29 = swift_retain(qword_1004AF890);
  a1[24] = v28(v25, v27, v29);
  *((_DWORD *)a1 + 50) = 0;
  *((_BYTE *)a1 + 204) = 1;
  __asm { FMOV            V0.2S, #10.0 }
  a1[26] = _D0;
  swift_release(a1);
  sub_100068B24((uint64_t)v38, (uint64_t)v37);
  v35 = StateObserver.init(configuration:)(v37);
  sub_10000F690(v38);
  return v35;
}

void sub_1000E8388(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  float32x2_t v4;
  float32x2_t v5;
  void (*v6)(_OWORD *__return_ptr, __n128);
  __n128 v7;
  void (*v8)(_OWORD *__return_ptr, __n128);
  __n128 v9;
  uint64_t v10;
  void (*v11)(_OWORD *__return_ptr, __n128);
  __n128 v12;
  uint64_t v13;
  void (*v14)(_OWORD *__return_ptr, __n128);
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float32x2_t v21;
  float v22;
  unint64_t v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  __n128 v32;
  __n128 v33;
  _QWORD *v34;
  _QWORD *v35;
  void (*v36)(_BYTE *__return_ptr, __n128);
  __n128 v37;
  void *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t (*v41)(void);
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(void);
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  __n128 v53;
  __n128 v54;
  uint64_t v55;
  __n128 v56;
  uint64_t v57;
  uint64_t v58;
  __n128 v59;
  unint64_t v60;
  __n128 v61;
  float32x2_t v62;
  __n128 v63;
  _BYTE v64[152];
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74[18];
  _OWORD __src[32];
  _OWORD __dst[32];
  double v77[66];

  v2 = v1;
  sub_1000E6FFC();
  sub_1000E7738();
  if (!a1)
    return;
  (*(void (**)(void))((swift_isaMask & *a1) + 0x200))();
  if ((*(_BYTE *)(v1 + 144) & 1) != 0)
    return;
  v5 = v4;
  v61 = *(__n128 *)(v1 + 128);
  type metadata accessor for MeasureCamera(0);
  v6 = *(void (**)(_OWORD *__return_ptr, __n128))(**(_QWORD **)(v1 + 80) + 144);
  v7 = swift_retain();
  v6(__src, v7);
  swift_release();
  memcpy(__dst, __src, sizeof(__dst));
  sub_100012C00((uint64_t)__dst);
  v59 = (__n128)__dst[11];
  v54 = (__n128)__dst[13];
  v56 = (__n128)__dst[12];
  v53 = (__n128)__dst[14];
  v8 = *(void (**)(_OWORD *__return_ptr, __n128))(**(_QWORD **)(v1 + 80) + 144);
  v9 = swift_retain();
  v8(__src, v9);
  swift_release();
  memcpy(v77, __src, 0x200uLL);
  v10 = sub_100012C00((uint64_t)v77);
  v62 = COERCE_FLOAT32X2_T(static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)(v10, v61, v59, v56, v54, v53, v77[4]));
  v11 = *(void (**)(_OWORD *__return_ptr, __n128))(**(_QWORD **)(v1 + 88) + 144);
  v12 = swift_retain();
  v11(__src, v12);
  swift_release();
  v13 = *(_QWORD *)&__src[0];
  swift_bridgeObjectRelease(*((_QWORD *)&__src[0] + 1));
  swift_bridgeObjectRelease(*(_QWORD *)&__src[1]);
  v14 = *(void (**)(_OWORD *__return_ptr, __n128))(**(_QWORD **)(v1 + 88) + 144);
  v15 = swift_retain();
  v14(__src, v15);
  swift_release();
  v16 = *(_QWORD *)&__src[0];
  v17 = *(_QWORD *)&__src[1];
  swift_bridgeObjectRelease(*((_QWORD *)&__src[0] + 1));
  swift_bridgeObjectRelease(v16);
  *(_QWORD *)&__src[0] = v13;
  sub_1000FFED0(v17);
  v18 = *(_QWORD *)&__src[0];
  if (*(_QWORD *)&__src[0] >> 62)
  {
    if (*(uint64_t *)&__src[0] < 0)
      v52 = *(_QWORD *)&__src[0];
    else
      v52 = *(_QWORD *)&__src[0] & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)&__src[0]);
    v19 = _CocoaArrayWrapper.endIndex.getter(v52);
    swift_bridgeObjectRelease(v18);
    if (v19)
      goto LABEL_5;
LABEL_28:
    swift_bridgeObjectRelease(v18);
    return;
  }
  v19 = *(_QWORD *)((*(_QWORD *)&__src[0] & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v19)
    goto LABEL_28;
LABEL_5:
  if (v19 >= 1)
  {
    v20 = 0;
    v21 = vsub_f32(v62, v5);
    v22 = vaddv_f32(vmul_f32(v21, v21));
    v23 = v18 & 0xC000000000000001;
    v58 = v1;
    v60 = v18 & 0xC000000000000001;
    v57 = v18;
    v55 = v19;
    while (1)
    {
      v34 = v23
          ? (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v20, v18)
          : *(id *)(v18 + 8 * v20 + 32);
      v35 = v34;
      if (v22 > 900.0)
        break;
      v24.n128_f64[0] = (*(double (**)(void))((swift_isaMask & *v34) + 0x2A0))();
      v28.n128_f64[0] = simd_float4x4.position.getter(v24, v25, v26, v27);
      v63 = v28;
      v29.n128_f64[0] = (*(double (**)(void))((swift_isaMask & *v35) + 0x2A8))();
      v33.n128_f64[0] = simd_float4x4.position.getter(v29, v30, v31, v32);
      (*(void (**)(__n128, __n128))((swift_isaMask & *v35) + 0x2E0))(v63, v33);

LABEL_8:
      if (v19 == ++v20)
        goto LABEL_28;
    }
    v36 = *(void (**)(_BYTE *__return_ptr, __n128))(**(_QWORD **)(v2 + 96) + 144);
    v37 = swift_retain();
    v36(v64, v37);
    swift_release();
    __src[6] = *(_OWORD *)&v64[96];
    __src[7] = *(_OWORD *)&v64[112];
    __src[8] = *(_OWORD *)&v64[128];
    *(_QWORD *)&__src[9] = *(_QWORD *)&v64[144];
    __src[2] = *(_OWORD *)&v64[32];
    __src[3] = *(_OWORD *)&v64[48];
    __src[4] = *(_OWORD *)&v64[64];
    __src[5] = *(_OWORD *)&v64[80];
    __src[0] = *(_OWORD *)v64;
    __src[1] = *(_OWORD *)&v64[16];
    v38 = *(void **)v64;
    v71 = *(_OWORD *)((char *)&__src[6] + 8);
    v72 = *(_OWORD *)((char *)&__src[7] + 8);
    v73 = *(_OWORD *)((char *)&__src[8] + 8);
    v67 = *(_OWORD *)((char *)&__src[2] + 8);
    v68 = *(_OWORD *)((char *)&__src[3] + 8);
    v69 = *(_OWORD *)((char *)&__src[4] + 8);
    v70 = *(_OWORD *)((char *)&__src[5] + 8);
    v65 = *(_OWORD *)((char *)__src + 8);
    v66 = *(_OWORD *)((char *)&__src[1] + 8);
    sub_100012C58((uint64_t)__src, (uint64_t)v74, (uint64_t *)&unk_100486700);
    if (sub_1000127D0(v74) == 1)
    {
      v39 = sub_100012BC4((uint64_t)__src);
LABEL_15:
      (*(void (**)(uint64_t, __n128, __n128))((swift_isaMask & *v35) + 0x2E0))(v39, (__n128)0, (__n128)0);

LABEL_22:
      v23 = v60;
      goto LABEL_8;
    }
    *(_QWORD *)v64 = v38;
    *(_OWORD *)&v64[104] = v71;
    *(_OWORD *)&v64[120] = v72;
    *(_OWORD *)&v64[136] = v73;
    *(_OWORD *)&v64[40] = v67;
    *(_OWORD *)&v64[56] = v68;
    *(_OWORD *)&v64[72] = v69;
    *(_OWORD *)&v64[88] = v70;
    *(_OWORD *)&v64[8] = v65;
    *(_OWORD *)&v64[24] = v66;
    v40 = v38;
    sub_100012BC4((uint64_t)v64);
    v41 = *(uint64_t (**)(void))((swift_isaMask & *v40) + 0xB8);
    v42 = v40;
    v43 = v41();
    v45 = v44;

    v46 = *(uint64_t (**)(void))((swift_isaMask & *v35) + 0xB8);
    v47 = v35;
    v48 = v46();
    v50 = v49;

    if (v43 == v48 && v45 == v50)
    {

      swift_bridgeObjectRelease_n(v45, 2);
    }
    else
    {
      v51 = _stringCompareWithSmolCheck(_:_:expecting:)(v43, v45, v48, v50, 0);
      swift_bridgeObjectRelease(v45);
      swift_bridgeObjectRelease(v50);

      if ((v51 & 1) == 0)
      {
        v2 = v58;
        v18 = v57;
        v19 = v55;
        goto LABEL_15;
      }

    }
    v2 = v58;
    v18 = v57;
    v19 = v55;
    goto LABEL_22;
  }
  __break(1u);
}

unint64_t sub_1000E8884()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100483100;
  if (!qword_100483100)
  {
    v1 = objc_opt_self(ARHitTestResult);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100483100);
  }
  return result;
}

void sub_1000E88C8()
{
  qword_100483118 = 0x4044000000000000;
}

void sub_1000E88D8()
{
  qword_100483120 = 0x4034000000000000;
}

void sub_1000E88E8(uint64_t a1)
{
  char *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  double *v9;
  double v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  double *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  CGFloat m43;
  CGFloat m44;
  double v25;
  char *v26;
  uint64_t v27;
  double v28;
  CGFloat v29;
  CGFloat v30;
  CGFloat v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  CGFloat v41;
  void *v42;
  id v43;
  id v44;
  id v45;
  id v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  double v62;
  CATransform3D aBlock;
  CGAffineTransform m;

  v2 = *(void **)&v1[qword_10047F648];
  if (v2)
  {
    v3 = *(void **)&v1[qword_10047F628];
    if (v3)
    {
      v4 = *(void **)&v1[qword_10047F630];
      if (v4)
      {
        v5 = *(void **)&v1[qword_10047F640];
        if (v5)
        {
          switch(a1)
          {
            case 2:
              v11 = v2;
              v12 = v3;
              v13 = v4;
              v14 = v5;
              v10 = 3.14159265;
              v62 = 3.14159265;
              break;
            case 4:
              v15 = v2;
              v16 = v3;
              v17 = v4;
              v18 = (double *)CGFloat.piDiv2.unsafeMutableAddressor(v5);
              v62 = -*v18;
              v10 = -*(double *)CGFloat.piDiv2.unsafeMutableAddressor(v18);
              break;
            case 3:
              v6 = v2;
              v7 = v3;
              v8 = v4;
              v9 = (double *)CGFloat.piDiv2.unsafeMutableAddressor(v5);
              v62 = *v9;
              v10 = *(double *)CGFloat.piDiv2.unsafeMutableAddressor(v9);
              break;
            default:
              v19 = v2;
              v20 = v3;
              v21 = v4;
              v22 = v5;
              v10 = 0.0;
              v62 = 0.0;
              break;
          }
          CGAffineTransformMakeRotation((CGAffineTransform *)&aBlock, v10);
          *(_OWORD *)&m.a = *(_OWORD *)&aBlock.m11;
          *(_OWORD *)&m.c = *(_OWORD *)&aBlock.m13;
          *(_OWORD *)&m.tx = *(_OWORD *)&aBlock.m21;
          CATransform3DMakeAffineTransform(&aBlock, &m);
          v60 = *(_OWORD *)&aBlock.m13;
          v61 = *(_OWORD *)&aBlock.m11;
          v58 = *(_OWORD *)&aBlock.m23;
          v59 = *(_OWORD *)&aBlock.m21;
          v56 = *(_OWORD *)&aBlock.m33;
          v57 = *(_OWORD *)&aBlock.m31;
          v55 = *(_OWORD *)&aBlock.m41;
          m43 = aBlock.m43;
          m44 = aBlock.m44;
          v25 = sub_1000E8C5C();
          v26 = &v1[qword_100483128];
          *(double *)v26 = v25;
          *((_QWORD *)v26 + 1) = v27;
          v28 = sub_1000E8F40();
          CATransform3DMakeTranslation(&aBlock, v28, v29, 0.0);
          v53 = *(_OWORD *)&aBlock.m13;
          v54 = *(_OWORD *)&aBlock.m11;
          v51 = *(_OWORD *)&aBlock.m23;
          v52 = *(_OWORD *)&aBlock.m21;
          v49 = *(_OWORD *)&aBlock.m33;
          v50 = *(_OWORD *)&aBlock.m31;
          v48 = *(_OWORD *)&aBlock.m41;
          v31 = aBlock.m43;
          v30 = aBlock.m44;
          sub_1000E91D8();
          v33 = v32;
          v35 = v34;
          sub_1000E948C();
          v37 = v36;
          v39 = v38;
          v40 = (void *)objc_opt_self(UIView);
          v41 = COERCE_DOUBLE(swift_allocObject(&unk_100445E98, 352, 7));
          *(_QWORD *)(*(_QWORD *)&v41 + 16) = v2;
          *(_OWORD *)(*(_QWORD *)&v41 + 24) = v54;
          *(_OWORD *)(*(_QWORD *)&v41 + 40) = v53;
          *(_OWORD *)(*(_QWORD *)&v41 + 56) = v52;
          *(_OWORD *)(*(_QWORD *)&v41 + 72) = v51;
          *(_OWORD *)(*(_QWORD *)&v41 + 88) = v50;
          *(_OWORD *)(*(_QWORD *)&v41 + 104) = v49;
          *(_OWORD *)(*(_QWORD *)&v41 + 120) = v48;
          *(CGFloat *)(*(_QWORD *)&v41 + 136) = v31;
          *(CGFloat *)(*(_QWORD *)&v41 + 144) = v30;
          *(_QWORD *)(*(_QWORD *)&v41 + 152) = v3;
          *(_QWORD *)(*(_QWORD *)&v41 + 160) = v1;
          *(_QWORD *)(*(_QWORD *)&v41 + 168) = v4;
          *(_QWORD *)(*(_QWORD *)&v41 + 176) = v33;
          *(_QWORD *)(*(_QWORD *)&v41 + 184) = v35;
          *(_OWORD *)(*(_QWORD *)&v41 + 192) = v61;
          *(_OWORD *)(*(_QWORD *)&v41 + 208) = v60;
          *(_OWORD *)(*(_QWORD *)&v41 + 224) = v59;
          *(_OWORD *)(*(_QWORD *)&v41 + 240) = v58;
          *(_OWORD *)(*(_QWORD *)&v41 + 256) = v57;
          *(_OWORD *)(*(_QWORD *)&v41 + 272) = v56;
          *(_OWORD *)(*(_QWORD *)&v41 + 288) = v55;
          *(CGFloat *)(*(_QWORD *)&v41 + 304) = m43;
          *(CGFloat *)(*(_QWORD *)&v41 + 312) = m44;
          *(_QWORD *)(*(_QWORD *)&v41 + 320) = v5;
          *(_QWORD *)(*(_QWORD *)&v41 + 328) = v37;
          *(_QWORD *)(*(_QWORD *)&v41 + 336) = v39;
          *(double *)(*(_QWORD *)&v41 + 344) = v62;
          *(_QWORD *)&aBlock.m21 = sub_1000EAA84;
          aBlock.m22 = v41;
          *(_QWORD *)&aBlock.m11 = _NSConcreteStackBlock;
          *(_QWORD *)&aBlock.m12 = 1107296256;
          *(_QWORD *)&aBlock.m13 = sub_10003ECA0;
          *(_QWORD *)&aBlock.m14 = &unk_100445EB0;
          v42 = _Block_copy(&aBlock);
          v43 = v2;
          v44 = v3;
          v45 = v4;
          v46 = v5;
          v47 = v1;
          swift_release();
          objc_msgSend(v40, "animateWithDuration:delay:options:animations:completion:", 0, v42, 0, 0.25, 0.25);
          _Block_release(v42);

        }
      }
    }
  }
}

double sub_1000E8C5C()
{
  void *v0;
  uint64_t v1;
  double v2;
  double Width;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t v11;
  CGRect v12;
  CGRect v13;
  CGRect v14;
  CGRect v15;
  CGRect v16;

  swift_retain();
  StateValue.wrappedValue.getter(&v11, v1);
  *(_QWORD *)&v2 = swift_release().n128_u64[0];
  if (v11 == 2)
  {
    if (qword_10047ADC8 != -1)
      swift_once(&qword_10047ADC8, sub_100195650);
    v6 = *(double *)&qword_1004AF8B0;
    if (qword_10047ADD0 == -1)
      goto LABEL_21;
    goto LABEL_23;
  }
  if (v11 != 4)
  {
    if (v11 == 3)
    {
      objc_msgSend(v0, "bounds", v2);
      Width = CGRectGetWidth(v12);
      if (qword_10047ADD0 != -1)
        swift_once(&qword_10047ADD0, sub_1001956EC);
      v4 = Width - *(double *)&qword_1004AF8B8;
      objc_msgSend(v0, "bounds");
      CGRectGetHeight(v13);
      if (qword_10047ADC8 != -1)
        swift_once(&qword_10047ADC8, sub_100195650);
      return v4 * 0.5;
    }
    objc_msgSend(v0, "bounds", v2);
    v9 = CGRectGetWidth(v15);
    if (qword_10047ADC8 != -1)
      swift_once(&qword_10047ADC8, sub_100195650);
    v6 = v9 - *(double *)&qword_1004AF8B0;
    if (qword_10047ADD0 == -1)
    {
LABEL_21:
      v5 = v6 - *(double *)&qword_1004AF8B8 * 0.5;
      objc_msgSend(v0, "bounds");
      CGRectGetHeight(v16);
      return v5;
    }
LABEL_23:
    swift_once(&qword_10047ADD0, sub_1001956EC);
    goto LABEL_21;
  }
  objc_msgSend(v0, "bounds", v2);
  v7 = CGRectGetWidth(v14);
  if (qword_10047ADD0 != -1)
    swift_once(&qword_10047ADD0, sub_1001956EC);
  v8 = v7 - *(double *)&qword_1004AF8B8;
  if (qword_10047ADC8 != -1)
    swift_once(&qword_10047ADC8, sub_100195650);
  return v8 * 0.5;
}

double sub_1000E8F40()
{
  uint64_t v0;
  void *v1;
  double *v2;
  double v3;
  uint64_t v4;
  id v5;
  double v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v20;
  CGRect v21;
  CGRect v22;
  CGRect v23;
  CGRect v24;

  v1 = *(void **)(v0 + qword_10047F648);
  if (!v1)
    return 0.0;
  v2 = (double *)(v0 + qword_100483128);
  v3 = *(double *)(v0 + qword_100483128);
  v4 = qword_10047ADD0;
  v5 = v1;
  if (v4 != -1)
    swift_once(&qword_10047ADD0, sub_1001956EC);
  v6 = v3 + *(double *)&qword_1004AF8B8 * 0.5;
  swift_retain();
  StateValue.wrappedValue.getter(&v20, v7);
  *(_QWORD *)&v8 = swift_release().n128_u64[0];
  switch(v20)
  {
    case 2:
      objc_msgSend(v5, "frame", v8);
      v15 = CGRectGetWidth(v21) * -0.5;
      if (qword_10047AAC8 != -1)
        swift_once(&qword_10047AAC8, sub_1000E88C8);
      v10 = v6 + v15;

      break;
    case 4:
      v16 = *v2;
      if (qword_10047AAC8 != -1)
        swift_once(&qword_10047AAC8, sub_1000E88C8);
      v17 = v16 - *(double *)&qword_100483118;
      objc_msgSend(v5, "frame");
      v10 = v17 - CGRectGetHeight(v22);
      objc_msgSend(v5, "frame");
      goto LABEL_17;
    case 3:
      v9 = *v2;
      if (qword_10047AAC8 != -1)
        swift_once(&qword_10047AAC8, sub_1000E88C8);
      v10 = v9 + *(double *)&qword_100483118 + *(double *)&qword_1004AF8B8;
      objc_msgSend(v5, "frame");
LABEL_17:
      CGRectGetHeight(*(CGRect *)&v11);

      return v10;
    default:
      objc_msgSend(v5, "frame", v8);
      v18 = CGRectGetWidth(v23) * -0.5;
      if (qword_10047AAC8 != -1)
        swift_once(&qword_10047AAC8, sub_1000E88C8);
      v10 = v6 + v18;
      objc_msgSend(v5, "frame");
      CGRectGetHeight(v24);

      break;
  }
  return v10;
}

void sub_1000E91D8()
{
  uint64_t v0;
  uint64_t v1;

  if (qword_10047ADD0 != -1)
    swift_once(&qword_10047ADD0, sub_1001956EC);
  swift_retain();
  StateValue.wrappedValue.getter(&v1, v0);
  swift_release();
  switch(v1)
  {
    case 2:
      if (qword_10047ADF0 != -1)
        swift_once(&qword_10047ADF0, sub_100195A24);
      if (qword_10047AAC8 != -1)
        goto LABEL_25;
      break;
    case 4:
      if (qword_10047AAC8 != -1)
        swift_once(&qword_10047AAC8, sub_1000E88C8);
      if (qword_10047ADF0 != -1)
        swift_once(&qword_10047ADF0, sub_100195A24);
      break;
    case 3:
      if (qword_10047ADF0 != -1)
        swift_once(&qword_10047ADF0, sub_100195A24);
      if (qword_10047AAC8 == -1)
        return;
LABEL_25:
      swift_once(&qword_10047AAC8, sub_1000E88C8);
      return;
    default:
      if (qword_10047ADF0 != -1)
        swift_once(&qword_10047ADF0, sub_100195A24);
      if (qword_10047AAC8 != -1)
        goto LABEL_25;
      break;
  }
}

void sub_1000E948C()
{
  uint64_t v0;
  uint64_t v1;

  sub_1000E91D8();
  if (qword_10047ADF0 != -1)
    swift_once(&qword_10047ADF0, sub_100195A24);
  swift_retain();
  StateValue.wrappedValue.getter(&v1, v0);
  swift_release();
  if (v1 == 2)
  {
    if (qword_10047AAD0 != -1)
      goto LABEL_13;
  }
  else
  {
    if (v1 != 4)
    {
      if (v1 == 3)
      {
        if (qword_10047AAD0 == -1)
          return;
      }
      else if (qword_10047AAD0 == -1)
      {
        return;
      }
LABEL_13:
      swift_once(&qword_10047AAD0, sub_1000E88D8);
      return;
    }
    if (qword_10047AAD0 != -1)
      goto LABEL_13;
  }
}

id sub_1000E966C(void *a1, __int128 *a2, void *a3, uint64_t a4, void *a5, __int128 *a6, void *a7, double a8, double a9, double a10, double a11, CGFloat a12)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  double v25;
  double v26;
  id v27;
  CGFloat tx;
  CGFloat ty;
  CGFloat v30;
  CGFloat v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  CGFloat v35;
  CGFloat v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  CGFloat anglea[2];
  CGAffineTransform v60;
  CGAffineTransform t2;
  CGAffineTransform t1;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;

  v53 = a6[1];
  v55 = *a6;
  v51 = a6[3];
  v52 = a6[2];
  v49 = a6[5];
  v50 = a6[4];
  v21 = *((_QWORD *)a6 + 14);
  v20 = *((_QWORD *)a6 + 15);
  v47 = *a2;
  v48 = a6[6];
  v45 = a2[2];
  v46 = a2[1];
  v43 = a2[4];
  v44 = a2[3];
  v41 = a2[6];
  v42 = a2[5];
  v22 = *((_QWORD *)a2 + 14);
  v23 = *((_QWORD *)a2 + 15);
  v24 = objc_msgSend(a1, "layer");
  *(_OWORD *)&t1.a = v47;
  *(_OWORD *)&t1.c = v46;
  *(_OWORD *)&t1.tx = v45;
  v63 = v44;
  v64 = v43;
  v65 = v42;
  v66 = v41;
  v67 = v22;
  v68 = v23;
  objc_msgSend(v24, "setTransform:", &t1);

  v25 = *(double *)(a4 + qword_100483128);
  v26 = *(double *)(a4 + qword_100483128 + 8);
  objc_msgSend(a3, "frame");
  objc_msgSend(a3, "setFrame:", v25, v26);
  objc_msgSend(a5, "frame");
  objc_msgSend(a5, "setFrame:", a8, a9);
  v27 = objc_msgSend(a5, "layer");
  *(_OWORD *)&t1.a = v55;
  *(_OWORD *)&t1.c = v53;
  *(_OWORD *)&t1.tx = v52;
  v63 = v51;
  v64 = v50;
  v65 = v49;
  v66 = v48;
  v67 = v21;
  v68 = v20;
  objc_msgSend(v27, "setTransform:", &t1);

  objc_msgSend(a7, "frame");
  objc_msgSend(a7, "setFrame:", a10, a11);
  objc_msgSend(a7, "transform");
  tx = t1.tx;
  ty = t1.ty;
  CGAffineTransformMakeScale(&t1, t1.a / fabs(t1.a) * sqrt(t1.a * t1.a + t1.c * t1.c), t1.a / fabs(t1.d) * sqrt(t1.b * t1.b + t1.d * t1.d));
  v54 = *(_OWORD *)&t1.c;
  v56 = *(_OWORD *)&t1.a;
  v30 = t1.tx;
  v31 = t1.ty;
  CGAffineTransformMakeRotation(&t1, a12);
  v32 = *(_OWORD *)&t1.a;
  v33 = *(_OWORD *)&t1.c;
  v34 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.a = v56;
  *(_OWORD *)&t1.c = v54;
  t1.tx = v30;
  t1.ty = v31;
  *(_OWORD *)&t2.a = v32;
  *(_OWORD *)&t2.c = v33;
  *(_OWORD *)&t2.tx = v34;
  CGAffineTransformConcat(&v60, &t1, &t2);
  v57 = *(_OWORD *)&v60.c;
  *(_OWORD *)anglea = *(_OWORD *)&v60.a;
  v35 = v60.tx;
  v36 = v60.ty;
  CGAffineTransformMakeTranslation(&t1, tx, ty);
  v37 = *(_OWORD *)&t1.a;
  v38 = *(_OWORD *)&t1.c;
  v39 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.a = *(_OWORD *)anglea;
  *(_OWORD *)&t1.c = v57;
  t1.tx = v35;
  t1.ty = v36;
  *(_OWORD *)&t2.a = v37;
  *(_OWORD *)&t2.c = v38;
  *(_OWORD *)&t2.tx = v39;
  CGAffineTransformConcat(&v60, &t1, &t2);
  t1 = v60;
  return objc_msgSend(a7, "setTransform:", &t1);
}

void sub_1000E998C()
{
  uint64_t v0;
  double v1;
  double v2;
  double v3;
  double v4;
  id v5;
  char *v6;
  void *v7;

  v1 = sub_1000E8C5C();
  v3 = v2;
  if (qword_10047ADD0 != -1)
    swift_once(&qword_10047ADD0, sub_1001956EC);
  v4 = *(double *)&qword_1004AF8B8;
  v5 = objc_allocWithZone((Class)type metadata accessor for EditButton());
  v6 = sub_10007BE0C(1u, v1, v3, v4, v4);
  v7 = *(void **)(v0 + qword_10047F628);
  *(_QWORD *)(v0 + qword_10047F628) = v6;

}

void sub_1000E9A30()
{
  uint64_t v0;
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  id v6;
  void *v7;
  uint64_t v8;

  sub_1000E91D8();
  v2 = v1;
  v4 = v3;
  if (qword_10047ADF0 != -1)
    swift_once(&qword_10047ADF0, sub_100195A24);
  v5 = *(double *)&qword_1004AF8D8;
  v6 = objc_allocWithZone((Class)type metadata accessor for UndoButton());
  sub_1001C92AC(1, v2, v4, v5, v5);
  v7 = *(void **)(v0 + qword_10047F630);
  *(_QWORD *)(v0 + qword_10047F630) = v8;

}

void sub_1000E9AD4()
{
  void *v0;
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  uint64_t v6;
  objc_class *v7;
  _BYTE *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  void *v14;
  objc_super v15;

  sub_1000E948C();
  v2 = v1;
  v4 = v3;
  if (qword_10047ADF0 != -1)
    swift_once(&qword_10047ADF0, sub_100195A24);
  v5 = *(double *)&qword_1004AF8D8;
  v6 = swift_allocObject(&unk_100445E70, 24, 7);
  *(_QWORD *)(v6 + 16) = v0;
  v7 = (objc_class *)type metadata accessor for HistoryButton();
  v8 = objc_allocWithZone(v7);
  v9 = (uint64_t *)&v8[OBJC_IVAR____TtC7Measure13HistoryButton_tapHandler];
  *v9 = 0;
  v9[1] = 0;
  *(_QWORD *)&v8[OBJC_IVAR____TtC7Measure13HistoryButton_button] = 0;
  v8[OBJC_IVAR____TtC7Measure13HistoryButton_controlType] = 0;
  v10 = *v9;
  v11 = v9[1];
  *v9 = (uint64_t)sub_1000EA9EC;
  v9[1] = v6;
  v12 = v0;
  swift_retain();
  sub_1000217BC(v10, v11);
  v15.receiver = v8;
  v15.super_class = v7;
  v13 = objc_msgSendSuper2(&v15, "initWithFrame:", v2, v4, v5, v5);
  sub_10008271C();

  swift_release();
  v14 = *(void **)&v12[qword_10047F640];
  *(_QWORD *)&v12[qword_10047F640] = v13;

}

uint64_t sub_1000E9C34()
{
  uint64_t v0;
  unint64_t v1;

  v0 = sub_10000EDC8(&qword_100483588);
  v1 = sub_1000EA9F4();
  return Subject<>.send()(v0, v1);
}

void sub_1000E9C78(char a1)
{
  uint64_t v1;
  void *v2;
  void (*v4)(_QWORD *__return_ptr, __n128);
  char *v5;
  __n128 v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  void *v11;
  void *v12;
  objc_class *v13;
  void *v14;
  objc_super v15;
  _QWORD v16[2];

  v2 = *(void **)(v1 + qword_10047F640);
  if (v2)
  {
    v4 = *(void (**)(_QWORD *__return_ptr, __n128))(**(_QWORD **)(v1 + qword_100483138) + 144);
    v5 = v2;
    v6 = swift_retain();
    v4(v16, v6);
    v7 = swift_release().n128_u64[0];
    if (v16[0] < 1)
    {
      v10 = 0;
      if ((a1 & 1) != 0)
      {
LABEL_4:
        v11 = *(void **)&v5[OBJC_IVAR____TtC7Measure13HistoryButton_button];
        if (v11)
          objc_msgSend(v11, "setEnabled:", v10, *(double *)&v7);
LABEL_11:

        return;
      }
    }
    else
    {
      swift_retain();
      StateValue.wrappedValue.getter(v16, v8);
      swift_release();
      v9 = *(_QWORD *)(v16[0] + 16);
      v7 = swift_bridgeObjectRelease(v16[0]).n128_u64[0];
      v10 = v9 == 0;
      if ((a1 & 1) != 0)
        goto LABEL_4;
    }
    v12 = *(void **)&v5[OBJC_IVAR____TtC7Measure13HistoryButton_button];
    if (v12
      && (v13 = (objc_class *)type metadata accessor for AnimatingUIControl(),
          (v14 = (void *)swift_dynamicCastClass(v12, v13)) != 0))
    {
      v15.receiver = v14;
      v15.super_class = v13;
      objc_msgSendSuper2(&v15, "setEnabled:", v10);
    }
    else
    {
      objc_msgSend(v12, "setEnabled:", v10, *(double *)&v7);
    }
    goto LABEL_11;
  }
}

double sub_1000E9DCC()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t *__return_ptr, __n128);
  __n128 v3;
  uint64_t v4;
  double result;
  uint64_t Strong;
  uint64_t v7;
  uint64_t (*v8)(__n128);
  __n128 v9;
  uint64_t v10;
  void (*v11)(void (*)(), uint64_t, __n128);
  __n128 v12;
  uint64_t (*v13)(uint64_t *, __n128);
  __n128 v14;
  void (*v15)(uint64_t *, _QWORD);
  uint64_t v16;
  uint64_t v17;
  char v18;

  v1 = qword_100483138;
  v2 = *(void (**)(uint64_t *__return_ptr, __n128))(**(_QWORD **)(v0 + qword_100483138) + 144);
  v3 = swift_retain();
  v2(&v17, v3);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  if (v18 == 1)
  {
    Strong = swift_unknownObjectWeakLoadStrong(v0 + qword_10047F620, v4);
    if (Strong)
    {
      v7 = Strong;
      v8 = *(uint64_t (**)(__n128))(**(_QWORD **)(Strong + 80) + 200);
      v9 = swift_retain();
      v10 = v8(v9);
      swift_release();
      v11 = *(void (**)(void (*)(), uint64_t, __n128))(*(_QWORD *)v10 + 280);
      v12 = swift_retain();
      v11(sub_1000814E0, v7, v12);
      swift_release();
      swift_release_n(v7, 2);
    }
    v13 = *(uint64_t (**)(uint64_t *, __n128))(**(_QWORD **)(v0 + v1) + 400);
    v14 = swift_retain();
    v15 = (void (*)(uint64_t *, _QWORD))v13(&v17, v14);
    *(_BYTE *)(v16 + 8) = 0;
    v15(&v17, 0);
    *(_QWORD *)&result = swift_release().n128_u64[0];
  }
  return result;
}

double sub_1000E9EE8()
{
  uint64_t v0;
  uint64_t (*v1)(__n128);
  __n128 v2;
  uint64_t v3;
  __n128 v4;
  double result;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[16];
  uint64_t v9;
  _BYTE v10[16];
  uint64_t v11;
  _BYTE v12[16];
  uint64_t v13;
  _BYTE v14[16];
  uint64_t v15;
  _BYTE v16[16];
  uint64_t v17;
  _BYTE v18[16];
  uint64_t v19;

  v19 = v0;
  swift_retain();
  StateValue.ifUpdated(_:)(sub_100082438, v18);
  swift_release();
  v17 = v0;
  swift_retain();
  StateValue.ifUpdated(_:)(sub_100082440, v16);
  swift_release();
  v15 = v0;
  swift_retain();
  StateValue.ifUpdated(_:)(sub_100082448, v14);
  swift_release();
  v1 = *(uint64_t (**)(__n128))(**(_QWORD **)(v0 + qword_100483138) + 200);
  v2 = swift_retain();
  v3 = v1(v2);
  v4 = swift_release();
  v13 = v0;
  (*(void (**)(double (*)(), _BYTE *, __n128))(*(_QWORD *)v3 + 296))(sub_1000EA920, v12, v4);
  swift_release();
  v11 = v0;
  swift_retain();
  StateValue.ifUpdated(_:)(sub_1000EA948, v10);
  swift_release();
  v9 = v0;
  swift_retain();
  StateValue.ifUpdated(_:)(sub_1000EA96C, v8);
  swift_release();
  v7 = v0;
  swift_retain();
  StateValue.ifUpdated(_:)(sub_1000EA990, &v6);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

void sub_1000EA088(unsigned __int8 *a1, void *a2)
{
  unsigned int v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  _QWORD v9[6];

  v2 = *a1 - 1;
  if (*((_BYTE *)a2 + qword_100483168) != v2 < 3)
  {
    v3 = a2;
    *((_BYTE *)a2 + qword_100483168) = v2 < 3;
    v4 = (void *)objc_opt_self(UIView);
    v5 = swift_allocObject(&unk_100445DF8, 24, 7);
    *(_QWORD *)(v5 + 16) = v3;
    v6 = swift_allocObject(&unk_100445E20, 32, 7);
    *(_QWORD *)(v6 + 16) = sub_1000EA9BC;
    *(_QWORD *)(v6 + 24) = v5;
    v9[4] = sub_100030C24;
    v9[5] = v6;
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 1107296256;
    v9[2] = sub_1000DDB80;
    v9[3] = &unk_100445E38;
    v7 = _Block_copy(v9);
    v8 = v3;
    swift_retain();
    objc_msgSend(v4, "performWithoutAnimation:", v7, swift_release().n128_f64[0]);
    _Block_release(v7);
    LOBYTE(v3) = swift_isEscapingClosureAtFileLocation(v6, "", 95, 316, 44, 1);
    swift_release();
    swift_release();
    if ((v3 & 1) != 0)
      __break(1u);
  }
}

void sub_1000EA1F0()
{
  uint64_t v0;
  uint64_t v1;

  swift_retain();
  StateValue.wrappedValue.getter(&v1, v0);
  swift_release();
  sub_1000E88E8(v1);
}

id sub_1000EA244(double a1, double a2, double a3, double a4)
{
  char *v4;
  objc_class *ObjectType;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t KeyPath;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, __n128);
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, __n128);
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t, __n128);
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t, __n128);
  __n128 v41;
  objc_super v43;

  ObjectType = (objc_class *)swift_getObjectType(v4);
  v10 = &v4[qword_100483128];
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  v11 = &v4[qword_100483130];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  v12 = qword_100483138;
  sub_10000EDC8(&qword_100483598);
  KeyPath = swift_getKeyPath(&unk_1003B6908);
  v14 = v4;
  *(_QWORD *)&v4[v12] = MutableStateBinding.__allocating_init(_:_:)(KeyPath, ObjectType);
  v15 = qword_100483140;
  v16 = sub_10000EDC8(&qword_10047D460);
  v17 = swift_getKeyPath(&unk_1003B6930);
  if (qword_10047AD88 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v18 = qword_1004AF890;
  v19 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v16 + 272);
  v20 = swift_retain();
  *(_QWORD *)&v14[v15] = v19(v17, v18, v20);
  v21 = qword_100483148;
  v22 = sub_10000EDC8(&qword_10047E5E0);
  v23 = swift_getKeyPath(&unk_1003B6958);
  v24 = qword_1004AF890;
  v25 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v22 + 272);
  v26 = swift_retain();
  *(_QWORD *)&v14[v21] = v25(v23, v24, v26);
  v27 = qword_100483150;
  v28 = sub_10000EDC8(&qword_1004835A0);
  v29 = swift_getKeyPath(&unk_1003B6980);
  v30 = qword_1004AF890;
  v31 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v28 + 272);
  v32 = swift_retain();
  *(_QWORD *)&v14[v27] = v31(v29, v30, v32);
  v33 = qword_100483158;
  v34 = sub_10000EDC8(&qword_100483588);
  swift_allocObject(v34, *(unsigned int *)(v34 + 48), *(unsigned __int16 *)(v34 + 52));
  *(_QWORD *)&v14[v33] = PassthroughSubject.init()(v35);
  v36 = qword_100483160;
  v37 = sub_10000EDC8(&qword_1004835A8);
  v38 = swift_getKeyPath(&unk_1003B69A8);
  v39 = qword_1004AF890;
  v40 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v37 + 272);
  v41 = swift_retain();
  *(_QWORD *)&v14[v36] = v40(v38, v39, v41);
  v14[qword_100483168] = 1;

  v43.receiver = v14;
  v43.super_class = ObjectType;
  return objc_msgSendSuper2(&v43, "initWithFrame:", a1, a2, a3, a4);
}

id sub_1000EA4BC(double a1, double a2, double a3, double a4)
{
  return sub_1000EA244(a1, a2, a3, a4);
}

id sub_1000EA4DC(void *a1)
{
  char *v1;
  objc_class *ObjectType;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t KeyPath;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, __n128);
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, __n128);
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t, __n128);
  __n128 v35;
  id v36;
  objc_super v38;

  ObjectType = (objc_class *)swift_getObjectType(v1);
  v4 = &v1[qword_100483128];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = &v1[qword_100483130];
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  v6 = qword_100483138;
  sub_10000EDC8(&qword_100483598);
  KeyPath = swift_getKeyPath(&unk_1003B6908);
  v8 = v1;
  *(_QWORD *)&v1[v6] = MutableStateBinding.__allocating_init(_:_:)(KeyPath, ObjectType);
  v9 = qword_100483140;
  v10 = sub_10000EDC8(&qword_10047D460);
  v11 = swift_getKeyPath(&unk_1003B6930);
  if (qword_10047AD88 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v12 = qword_1004AF890;
  v13 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v10 + 272);
  v14 = swift_retain();
  *(_QWORD *)&v8[v9] = v13(v11, v12, v14);
  v15 = qword_100483148;
  v16 = sub_10000EDC8(&qword_10047E5E0);
  v17 = swift_getKeyPath(&unk_1003B6958);
  v18 = qword_1004AF890;
  v19 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v16 + 272);
  v20 = swift_retain();
  *(_QWORD *)&v8[v15] = v19(v17, v18, v20);
  v21 = qword_100483150;
  v22 = sub_10000EDC8(&qword_1004835A0);
  v23 = swift_getKeyPath(&unk_1003B6980);
  v24 = qword_1004AF890;
  v25 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v22 + 272);
  v26 = swift_retain();
  *(_QWORD *)&v8[v21] = v25(v23, v24, v26);
  v27 = qword_100483158;
  v28 = sub_10000EDC8(&qword_100483588);
  swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
  *(_QWORD *)&v8[v27] = PassthroughSubject.init()(v29);
  v30 = qword_100483160;
  v31 = sub_10000EDC8(&qword_1004835A8);
  v32 = swift_getKeyPath(&unk_1003B69A8);
  v33 = qword_1004AF890;
  v34 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v31 + 272);
  v35 = swift_retain();
  *(_QWORD *)&v8[v30] = v34(v32, v33, v35);
  v8[qword_100483168] = 1;

  v38.receiver = v8;
  v38.super_class = ObjectType;
  v36 = objc_msgSendSuper2(&v38, "initWithCoder:", a1);

  return v36;
}

id sub_1000EA740(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_1000EA4DC(a3);
}

double sub_1000EA764()
{
  uint64_t v0;
  double result;

  sub_1000217BC(*(_QWORD *)(v0 + qword_100483130), *(_QWORD *)(v0 + qword_100483130 + 8));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

double sub_1000EA7E4(uint64_t a1)
{
  double result;

  sub_1000217BC(*(_QWORD *)(a1 + qword_100483130), *(_QWORD *)(a1 + qword_100483130 + 8));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t type metadata accessor for EditViewSpatial(uint64_t a1)
{
  uint64_t result;

  result = qword_100483198;
  if (!qword_100483198)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for EditViewSpatial);
  return result;
}

uint64_t sub_1000EA8AC(uint64_t a1)
{
  _QWORD v2[9];

  v2[0] = &unk_1003B68C0;
  v2[1] = &unk_1003B68D8;
  v2[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[4] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[5] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[6] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[7] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[8] = &unk_1003B68F0;
  return swift_initClassMetadata2(a1, 256, 9, v2, a1 + 872);
}

uint64_t sub_1000EA918()
{
  return type metadata accessor for EditViewSpatial(0);
}

double sub_1000EA920()
{
  sub_1000E9C78(1);
  return sub_1000E9DCC();
}

void sub_1000EA948()
{
  sub_1000E9C78(1);
}

void sub_1000EA96C()
{
  sub_1000E9C78(0);
}

void sub_1000EA990(unsigned __int8 *a1)
{
  uint64_t v1;

  sub_1000EA088(a1, *(void **)(v1 + 16));
}

uint64_t sub_1000EA998()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1000EA9BC()
{
  sub_1000EA1F0();
}

uint64_t sub_1000EA9C4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000EA9D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000EA9E4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000EA9EC()
{
  return sub_1000E9C34();
}

unint64_t sub_1000EA9F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100483590;
  if (!qword_100483590)
  {
    v1 = sub_100012B80(&qword_100483588);
    result = swift_getWitnessTable(&protocol conformance descriptor for PassthroughSubject<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100483590);
  }
  return result;
}

uint64_t sub_1000EAA40()
{
  id *v0;

  return swift_deallocObject(v0, 352, 7);
}

id sub_1000EAA84()
{
  uint64_t v0;

  return sub_1000E966C(*(void **)(v0 + 16), (__int128 *)(v0 + 24), *(void **)(v0 + 152), *(_QWORD *)(v0 + 160), *(void **)(v0 + 168), (__int128 *)(v0 + 192), *(void **)(v0 + 320), *(double *)(v0 + 176), *(double *)(v0 + 184), *(double *)(v0 + 328), *(double *)(v0 + 336), *(CGFloat *)(v0 + 344));
}

void sub_1000EAB48()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t ObjCClassFromMetadata;
  NSString v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  NSString v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  NSString v17;
  objc_super v18;

  v18.receiver = v0;
  v18.super_class = (Class)swift_getObjectType(v0);
  objc_msgSendSuper2(&v18, "viewDidLoad");
  v1 = objc_msgSend(v0, "tableView");
  if (v1)
  {
    v2 = v1;
    objc_msgSend(v1, "setAllowsSelection:", 0);

    v3 = objc_msgSend(v0, "tableView");
    if (v3)
    {
      v4 = v3;
      v5 = type metadata accessor for SwitchCell();
      ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v5);
      v7 = String._bridgeToObjectiveC()();
      objc_msgSend(v4, "registerClass:forCellReuseIdentifier:", ObjCClassFromMetadata, v7, swift_bridgeObjectRelease(0xE600000000000000).n128_f64[0]);

      v8 = objc_msgSend(v0, "tableView");
      if (v8)
      {
        v9 = v8;
        v10 = type metadata accessor for SliderCell();
        v11 = swift_getObjCClassFromMetadata(v10);
        v12 = String._bridgeToObjectiveC()();
        objc_msgSend(v9, "registerClass:forCellReuseIdentifier:", v11, v12, swift_bridgeObjectRelease(0xE600000000000000).n128_f64[0]);

        v13 = objc_msgSend(v0, "tableView");
        if (v13)
        {
          v14 = v13;
          v15 = type metadata accessor for ColorCell();
          v16 = swift_getObjCClassFromMetadata(v15);
          v17 = String._bridgeToObjectiveC()();
          objc_msgSend(v14, "registerClass:forCellReuseIdentifier:", v16, v17, swift_bridgeObjectRelease(0xE500000000000000).n128_f64[0]);

          return;
        }
      }
    }
    __break(1u);
  }
  __break(1u);
}

uint64_t type metadata accessor for DefaultsViewController()
{
  return objc_opt_self(_TtC7Measure22DefaultsViewController);
}

unint64_t sub_1000EAF3C(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  NSString v16;
  Class isa;
  id v18;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7Measure22DefaultsViewController_groups);
  result = IndexPath.section.getter();
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (result >= *(_QWORD *)(v3 + 16))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v5 = *(_QWORD *)(v3 + 24 * result + 48);
  swift_bridgeObjectRetain(v5);
  result = IndexPath.row.getter(v6);
  if ((result & 0x8000000000000000) != 0)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (result >= *(_QWORD *)(v5 + 16))
  {
LABEL_14:
    __break(1u);
    return result;
  }
  v7 = v5 + 48 * result;
  v9 = *(_QWORD *)(v7 + 32);
  v8 = *(_QWORD *)(v7 + 40);
  v11 = *(_QWORD *)(v7 + 48);
  v10 = *(_QWORD *)(v7 + 56);
  v12 = *(_QWORD *)(v7 + 64);
  v13 = *(unsigned __int8 *)(v7 + 72);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v5);
  v14 = 0xE500000000000000;
  if (!v12)
    v14 = 0xE600000000000000;
  if (v13)
    v15 = v14;
  else
    v15 = 0xE600000000000000;
  v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v15);
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v18 = objc_msgSend(a1, "dequeueReusableCellWithIdentifier:forIndexPath:", v16, isa);

  v19 = type metadata accessor for DefaultCell();
  v20 = (_QWORD *)swift_dynamicCastClassUnconditional(v18, v19, 0, 0, 0);
  v21 = (char *)v20 + OBJC_IVAR____TtC7Measure11DefaultCell_def;
  v22 = *(_QWORD *)((char *)v20 + OBJC_IVAR____TtC7Measure11DefaultCell_def);
  v23 = *(_QWORD *)((char *)v20 + OBJC_IVAR____TtC7Measure11DefaultCell_def + 8);
  v24 = *(_QWORD *)((char *)v20 + OBJC_IVAR____TtC7Measure11DefaultCell_def + 16);
  v25 = *(_QWORD *)((char *)v20 + OBJC_IVAR____TtC7Measure11DefaultCell_def + 24);
  *(_QWORD *)v21 = v9;
  *((_QWORD *)v21 + 1) = v8;
  *((_QWORD *)v21 + 2) = v11;
  *((_QWORD *)v21 + 3) = v10;
  *((_QWORD *)v21 + 4) = v12;
  v21[40] = v13;
  v26 = sub_100043264(v22, v23, v24, v25);
  (*(void (**)(uint64_t))((swift_isaMask & *v20) + 0x110))(v26);
  return (unint64_t)v20;
}

void sub_1000EB388()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  void (*v5)(__n128);
  uint64_t v6;
  __n128 v7;

  v1 = OBJC_IVAR____TtC7Measure25SpatialPlatterTitleButton_fadeOutAnimator;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC7Measure25SpatialPlatterTitleButton_fadeOutAnimator);
  if (v2)
  {
    v3 = v2;
    objc_msgSend(v3, "stopAnimation:", 1);
    v4 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = 0;

  }
  v5 = *(void (**)(__n128))(v0 + OBJC_IVAR____TtC7Measure25SpatialPlatterTitleButton_touchDownCallback);
  if (v5)
  {
    v6 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7Measure25SpatialPlatterTitleButton_touchDownCallback + 8);
    v7 = swift_retain();
    v5(v7);
    sub_1000217BC((uint64_t)v5, v6);
  }
  else
  {
    __break(1u);
  }
}

void sub_1000EB410()
{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  char *v7;
  id v8;
  void *v9;
  void **v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;

  v1 = (void *)objc_opt_self(UIViewPropertyAnimator);
  v2 = swift_allocObject(&unk_100445F80, 24, 7);
  *(_QWORD *)(v2 + 16) = v0;
  v14 = sub_1000EB7C8;
  v15 = v2;
  v10 = _NSConcreteStackBlock;
  v11 = 1107296256;
  v12 = sub_10003ECA0;
  v13 = &unk_100445F98;
  v3 = _Block_copy(&v10);
  v4 = v0;
  swift_release();
  v5 = swift_allocObject(&unk_100445FD0, 24, 7);
  *(_QWORD *)(v5 + 16) = v4;
  v14 = sub_1000EB7E8;
  v15 = v5;
  v10 = _NSConcreteStackBlock;
  v11 = 1107296256;
  v12 = sub_10002E168;
  v13 = &unk_100445FE8;
  v6 = _Block_copy(&v10);
  v7 = (char *)v4;
  swift_release();
  v8 = objc_msgSend(v1, "runningPropertyAnimatorWithDuration:delay:options:animations:completion:", 0x20000, v3, v6, 0.2, 0.0);
  _Block_release(v6);
  _Block_release(v3);
  v9 = *(void **)&v7[OBJC_IVAR____TtC7Measure25SpatialPlatterTitleButton_fadeOutAnimator];
  *(_QWORD *)&v7[OBJC_IVAR____TtC7Measure25SpatialPlatterTitleButton_fadeOutAnimator] = v8;

}

uint64_t sub_1000EB65C(uint64_t result)
{
  void (*v1)(__n128);
  uint64_t v2;
  __n128 v3;

  v1 = *(void (**)(__n128))(result + OBJC_IVAR____TtC7Measure25SpatialPlatterTitleButton_touchUpCallback);
  if (v1)
  {
    v2 = *(_QWORD *)(result + OBJC_IVAR____TtC7Measure25SpatialPlatterTitleButton_touchUpCallback + 8);
    v3 = swift_retain();
    v1(v3);
    return sub_1000217BC((uint64_t)v1, v2);
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1000EB704()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SpatialPlatterTitleButton();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SpatialPlatterTitleButton()
{
  return objc_opt_self(_TtC7Measure25SpatialPlatterTitleButton);
}

uint64_t sub_1000EB7A4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000EB7C8()
{
  uint64_t v0;

  return sub_1000EB65C(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000EB7D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000EB7E0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_1000EB7E8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(void **)(v1 + OBJC_IVAR____TtC7Measure25SpatialPlatterTitleButton_fadeOutAnimator);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC7Measure25SpatialPlatterTitleButton_fadeOutAnimator) = 0;

}

uint64_t destroy for PersonHeightState(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 496));
}

uint64_t initializeWithCopy for PersonHeightState(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;
  int v19;
  int v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v3 = *(_OWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = v3;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  v4 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v4;
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  v5 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v5;
  v6 = *(_OWORD *)(a2 + 208);
  v7 = *(_OWORD *)(a2 + 224);
  v8 = *(_OWORD *)(a2 + 240);
  v9 = *(_OWORD *)(a2 + 256);
  *(_BYTE *)(a1 + 272) = *(_BYTE *)(a2 + 272);
  *(_OWORD *)(a1 + 240) = v8;
  *(_OWORD *)(a1 + 256) = v9;
  *(_OWORD *)(a1 + 208) = v6;
  *(_OWORD *)(a1 + 224) = v7;
  v10 = *(_OWORD *)(a2 + 288);
  v11 = *(_OWORD *)(a2 + 304);
  v12 = *(_OWORD *)(a2 + 320);
  v13 = *(_OWORD *)(a2 + 336);
  *(_BYTE *)(a1 + 352) = *(_BYTE *)(a2 + 352);
  *(_OWORD *)(a1 + 320) = v12;
  *(_OWORD *)(a1 + 336) = v13;
  *(_OWORD *)(a1 + 288) = v10;
  *(_OWORD *)(a1 + 304) = v11;
  v14 = *(_OWORD *)(a2 + 360);
  v15 = *(_OWORD *)(a2 + 376);
  *(_BYTE *)(a1 + 392) = *(_BYTE *)(a2 + 392);
  *(_OWORD *)(a1 + 360) = v14;
  *(_OWORD *)(a1 + 376) = v15;
  v16 = *(_OWORD *)(a2 + 400);
  v17 = *(_OWORD *)(a2 + 416);
  *(_BYTE *)(a1 + 432) = *(_BYTE *)(a2 + 432);
  *(_OWORD *)(a1 + 400) = v16;
  *(_OWORD *)(a1 + 416) = v17;
  v18 = *(_DWORD *)(a2 + 436);
  *(_BYTE *)(a1 + 440) = *(_BYTE *)(a2 + 440);
  *(_DWORD *)(a1 + 436) = v18;
  v19 = *(_DWORD *)(a2 + 444);
  *(_BYTE *)(a1 + 448) = *(_BYTE *)(a2 + 448);
  *(_DWORD *)(a1 + 444) = v19;
  v20 = *(_DWORD *)(a2 + 452);
  *(_BYTE *)(a1 + 456) = *(_BYTE *)(a2 + 456);
  *(_DWORD *)(a1 + 452) = v20;
  v21 = *(_OWORD *)(a2 + 464);
  *(_BYTE *)(a1 + 480) = *(_BYTE *)(a2 + 480);
  *(_OWORD *)(a1 + 464) = v21;
  v22 = *(_QWORD *)(a2 + 496);
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  *(_QWORD *)(a1 + 496) = v22;
  v23 = *(_OWORD *)(a2 + 512);
  *(_BYTE *)(a1 + 528) = *(_BYTE *)(a2 + 528);
  *(_OWORD *)(a1 + 512) = v23;
  *(_BYTE *)(a1 + 529) = *(_BYTE *)(a2 + 529);
  *(_BYTE *)(a1 + 530) = *(_BYTE *)(a2 + 530);
  swift_bridgeObjectRetain(v22);
  return a1;
}

uint64_t assignWithCopy for PersonHeightState(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  int v22;
  int v23;
  int v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v4 = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v4;
  v5 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  v6 = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v6;
  v7 = *(_OWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = v7;
  v8 = *(_OWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v8;
  v10 = *(_OWORD *)(a2 + 160);
  v9 = *(_OWORD *)(a2 + 176);
  v11 = *(_OWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v10;
  *(_OWORD *)(a1 + 176) = v9;
  *(_OWORD *)(a1 + 144) = v11;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  v12 = *(_OWORD *)(a2 + 224);
  v13 = *(_OWORD *)(a2 + 240);
  v14 = *(_OWORD *)(a2 + 256);
  *(_BYTE *)(a1 + 272) = *(_BYTE *)(a2 + 272);
  *(_OWORD *)(a1 + 240) = v13;
  *(_OWORD *)(a1 + 256) = v14;
  *(_OWORD *)(a1 + 224) = v12;
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  v15 = *(_OWORD *)(a2 + 304);
  v16 = *(_OWORD *)(a2 + 320);
  v17 = *(_OWORD *)(a2 + 336);
  *(_BYTE *)(a1 + 352) = *(_BYTE *)(a2 + 352);
  *(_OWORD *)(a1 + 320) = v16;
  *(_OWORD *)(a1 + 336) = v17;
  *(_OWORD *)(a1 + 304) = v15;
  v18 = *(_OWORD *)(a2 + 360);
  v19 = *(_OWORD *)(a2 + 376);
  *(_BYTE *)(a1 + 392) = *(_BYTE *)(a2 + 392);
  *(_OWORD *)(a1 + 360) = v18;
  *(_OWORD *)(a1 + 376) = v19;
  v20 = *(_OWORD *)(a2 + 400);
  v21 = *(_OWORD *)(a2 + 416);
  *(_BYTE *)(a1 + 432) = *(_BYTE *)(a2 + 432);
  *(_OWORD *)(a1 + 400) = v20;
  *(_OWORD *)(a1 + 416) = v21;
  v22 = *(_DWORD *)(a2 + 436);
  *(_BYTE *)(a1 + 440) = *(_BYTE *)(a2 + 440);
  *(_DWORD *)(a1 + 436) = v22;
  v23 = *(_DWORD *)(a2 + 444);
  *(_BYTE *)(a1 + 448) = *(_BYTE *)(a2 + 448);
  *(_DWORD *)(a1 + 444) = v23;
  v24 = *(_DWORD *)(a2 + 452);
  *(_BYTE *)(a1 + 456) = *(_BYTE *)(a2 + 456);
  *(_DWORD *)(a1 + 452) = v24;
  v25 = *(_OWORD *)(a2 + 464);
  *(_BYTE *)(a1 + 480) = *(_BYTE *)(a2 + 480);
  *(_OWORD *)(a1 + 464) = v25;
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  v26 = *(_QWORD *)(a2 + 496);
  v27 = *(_QWORD *)(a1 + 496);
  *(_QWORD *)(a1 + 496) = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  v28 = *(_OWORD *)(a2 + 512);
  *(_BYTE *)(a1 + 528) = *(_BYTE *)(a2 + 528);
  *(_OWORD *)(a1 + 512) = v28;
  *(_BYTE *)(a1 + 529) = *(_BYTE *)(a2 + 529);
  *(_BYTE *)(a1 + 530) = *(_BYTE *)(a2 + 530);
  return a1;
}

void *initializeWithTake for PersonHeightState(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x213uLL);
}

uint64_t assignWithTake for PersonHeightState(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  int v15;
  int v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  v4 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v4;
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  v5 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v5;
  *(_BYTE *)(a1 + 272) = *(_BYTE *)(a2 + 272);
  v6 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = v6;
  v7 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v7;
  *(_BYTE *)(a1 + 352) = *(_BYTE *)(a2 + 352);
  v8 = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 336) = v8;
  v9 = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 304) = v9;
  v10 = *(_OWORD *)(a2 + 360);
  v11 = *(_OWORD *)(a2 + 376);
  *(_BYTE *)(a1 + 392) = *(_BYTE *)(a2 + 392);
  *(_OWORD *)(a1 + 360) = v10;
  *(_OWORD *)(a1 + 376) = v11;
  v12 = *(_OWORD *)(a2 + 400);
  v13 = *(_OWORD *)(a2 + 416);
  *(_BYTE *)(a1 + 432) = *(_BYTE *)(a2 + 432);
  *(_OWORD *)(a1 + 400) = v12;
  *(_OWORD *)(a1 + 416) = v13;
  v14 = *(_DWORD *)(a2 + 436);
  *(_BYTE *)(a1 + 440) = *(_BYTE *)(a2 + 440);
  *(_DWORD *)(a1 + 436) = v14;
  v15 = *(_DWORD *)(a2 + 444);
  *(_BYTE *)(a1 + 448) = *(_BYTE *)(a2 + 448);
  *(_DWORD *)(a1 + 444) = v15;
  v16 = *(_DWORD *)(a2 + 452);
  *(_BYTE *)(a1 + 456) = *(_BYTE *)(a2 + 456);
  *(_DWORD *)(a1 + 452) = v16;
  v17 = *(_OWORD *)(a2 + 464);
  *(_BYTE *)(a1 + 480) = *(_BYTE *)(a2 + 480);
  *(_OWORD *)(a1 + 464) = v17;
  v18 = *(_QWORD *)(a2 + 496);
  v19 = *(_QWORD *)(a1 + 496);
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  *(_QWORD *)(a1 + 496) = v18;
  swift_bridgeObjectRelease(v19);
  *(_OWORD *)(a1 + 512) = *(_OWORD *)(a2 + 512);
  *(_WORD *)(a1 + 528) = *(_WORD *)(a2 + 528);
  *(_BYTE *)(a1 + 530) = *(_BYTE *)(a2 + 530);
  return a1;
}

uint64_t getEnumTagSinglePayload for PersonHeightState(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 531))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 496);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PersonHeightState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 520) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 530) = 0;
    *(_WORD *)(result + 528) = 0;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 531) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 531) = 0;
    if (a2)
      *(_QWORD *)(result + 496) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PersonHeightState()
{
  return &type metadata for PersonHeightState;
}

id sub_1000EBDC8()
{
  id result;
  id v1;

  if (qword_10047A930 != -1)
    swift_once(&qword_10047A930, sub_100083368);
  result = (id)*((_QWORD *)&xmmword_1004AF258 + 1);
  if (*((_QWORD *)&xmmword_1004AF258 + 1))
  {
    v1 = (id)*((_QWORD *)&xmmword_1004AF258 + 1);
    qword_1004AF630 = Contexts.PrivateQueue.init(_:)(*((_QWORD *)&xmmword_1004AF258 + 1));
    return v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000EBE2C(void *__src, const void *a2)
{
  unsigned __int8 v4[544];
  unsigned __int8 __dst[544];

  memcpy(v4, __src, 0x213uLL);
  memcpy(__dst, a2, 0x213uLL);
  return sub_1000EBEE8(v4, __dst) & 1;
}

unint64_t sub_1000EBE80(uint64_t a1)
{
  unint64_t result;

  result = sub_1000EBEA4();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000EBEA4()
{
  unint64_t result;

  result = qword_100483658;
  if (!qword_100483658)
  {
    result = swift_getWitnessTable(&unk_1003B6A34, &type metadata for PersonHeightState);
    atomic_store(result, (unint64_t *)&qword_100483658);
  }
  return result;
}

uint64_t sub_1000EBEE8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  char v2;
  BOOL v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  BOOL v7;
  float v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  BOOL v18;
  float v19;
  float v20;
  int v21;
  int v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  BOOL v26;
  char v27;
  _BYTE *v30;
  _BYTE *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  if (((*a1 ^ *a2) & 1) != 0 || ((a1[1] ^ a2[1]) & 1) != 0 || ((a1[2] ^ a2[2]) & 1) != 0)
    goto LABEL_108;
  v2 = a2[24];
  if ((a1[24] & 1) != 0)
  {
    if (!a2[24])
      return v2 & 1;
  }
  else
  {
    if ((a2[24] & 1) != 0)
      goto LABEL_108;
    v3 = *((double *)a1 + 1) == *((double *)a2 + 1) && *((double *)a1 + 2) == *((double *)a2 + 2);
    if (!v3)
      goto LABEL_108;
  }
  v2 = a2[48];
  if ((a1[48] & 1) != 0)
  {
    if (!a2[48])
      return v2 & 1;
  }
  else
  {
    if ((a2[48] & 1) != 0)
      goto LABEL_108;
    v2 = 0;
    if (*((double *)a1 + 4) != *((double *)a2 + 4) || *((double *)a1 + 5) != *((double *)a2 + 5))
      return v2 & 1;
  }
  v2 = a2[72];
  if ((a1[72] & 1) != 0)
  {
    if (!a2[72])
      return v2 & 1;
  }
  else
  {
    if ((a2[72] & 1) != 0)
      goto LABEL_108;
    v2 = 0;
    if (*((double *)a1 + 7) != *((double *)a2 + 7) || *((double *)a1 + 8) != *((double *)a2 + 8))
      return v2 & 1;
  }
  v2 = a2[96];
  if ((a1[96] & 1) != 0)
  {
    if (!a2[96])
      return v2 & 1;
  }
  else
  {
    if ((a2[96] & 1) != 0)
      goto LABEL_108;
    v2 = 0;
    if (*((double *)a1 + 10) != *((double *)a2 + 10) || *((double *)a1 + 11) != *((double *)a2 + 11))
      return v2 & 1;
  }
  v2 = a2[120];
  if ((a1[120] & 1) != 0)
  {
    if (!a2[120])
      return v2 & 1;
  }
  else
  {
    if ((a2[120] & 1) != 0)
      goto LABEL_108;
    v2 = 0;
    if (*((double *)a1 + 13) != *((double *)a2 + 13) || *((double *)a1 + 14) != *((double *)a2 + 14))
      return v2 & 1;
  }
  v2 = a2[192];
  if ((a1[192] & 1) != 0)
  {
    if (!a2[192])
      return v2 & 1;
  }
  else if ((a2[192] & 1) != 0
         || (vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(*((float32x4_t *)a1 + 10), *((float32x4_t *)a2 + 10)), (int8x16_t)vceqq_f32(*((float32x4_t *)a1 + 11), *((float32x4_t *)a2 + 11))), vandq_s8((int8x16_t)vceqq_f32(*((float32x4_t *)a1 + 9), *((float32x4_t *)a2 + 9)), (int8x16_t)vceqq_f32(*((float32x4_t *)a1 + 8), *((float32x4_t *)a2 + 8))))) & 0x80000000) == 0)
  {
    goto LABEL_108;
  }
  if ((a1[272] & 1) != 0)
  {
    if (!a2[272])
      goto LABEL_108;
  }
  else if ((a2[272] & 1) != 0
         || (vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(*((float32x4_t *)a1 + 15), *((float32x4_t *)a2 + 15)), (int8x16_t)vceqq_f32(*((float32x4_t *)a1 + 16), *((float32x4_t *)a2 + 16))), vandq_s8((int8x16_t)vceqq_f32(*((float32x4_t *)a1 + 14), *((float32x4_t *)a2 + 14)), (int8x16_t)vceqq_f32(*((float32x4_t *)a1 + 13), *((float32x4_t *)a2 + 13))))) & 0x80000000) == 0)
  {
    goto LABEL_108;
  }
  v30 = a1 + 272;
  v31 = a2 + 272;
  v2 = a2[352];
  if ((a1[352] & 1) != 0)
  {
    if (!a2[352])
      return v2 & 1;
  }
  else if ((a2[352] & 1) != 0
         || (vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(*((float32x4_t *)a1 + 20), *((float32x4_t *)a2 + 20)), (int8x16_t)vceqq_f32(*((float32x4_t *)a1 + 21), *((float32x4_t *)a2 + 21))), vandq_s8((int8x16_t)vceqq_f32(*((float32x4_t *)a1 + 19), *((float32x4_t *)a2 + 19)), (int8x16_t)vceqq_f32(*((float32x4_t *)a1 + 18), *((float32x4_t *)a2 + 18))))) & 0x80000000) == 0)
  {
    goto LABEL_108;
  }
  v2 = a2[392];
  if ((a1[392] & 1) != 0)
  {
    if (!a2[392])
      return v2 & 1;
  }
  else if ((a2[392] & 1) != 0 || !CGRectEqualToRect(*(CGRect *)(a1 + 360), *(CGRect *)(a2 + 360)))
  {
    goto LABEL_108;
  }
  v2 = v31[160];
  if ((v30[160] & 1) != 0)
  {
    if (!v31[160])
      return v2 & 1;
  }
  else if ((v31[160] & 1) != 0 || !CGRectEqualToRect(*(CGRect *)(a1 + 400), *(CGRect *)(a2 + 400)))
  {
    goto LABEL_108;
  }
  v2 = v31[168];
  if ((v30[168] & 1) != 0)
  {
    if (!v31[168])
      return v2 & 1;
  }
  else
  {
    if (*((float *)a1 + 109) != *((float *)a2 + 109))
      v2 = 1;
    if ((v2 & 1) != 0)
      goto LABEL_108;
  }
  v2 = v31[176];
  if ((v30[176] & 1) != 0)
  {
    if (!v31[176])
      return v2 & 1;
  }
  else
  {
    if (*((float *)a1 + 111) != *((float *)a2 + 111))
      v2 = 1;
    if ((v2 & 1) != 0)
      goto LABEL_108;
  }
  v2 = v31[184];
  if ((v30[184] & 1) != 0)
  {
    if (!v31[184])
      return v2 & 1;
  }
  else
  {
    if (*((float *)a1 + 113) != *((float *)a2 + 113))
      v2 = 1;
    if ((v2 & 1) != 0)
      goto LABEL_108;
  }
  if ((v30[208] & 1) != 0)
  {
    if ((v31[208] & 1) == 0)
      goto LABEL_108;
  }
  else
  {
    if ((v31[208] & 1) != 0)
      goto LABEL_108;
    v4 = 0;
    v5 = *((_OWORD *)a1 + 29);
    v6 = *((_OWORD *)a2 + 29);
    while (1)
    {
      v34 = v5;
      v8 = *(float *)((unint64_t)&v34 & 0xFFFFFFFFFFFFFFF3 | (4 * (v4 & 3)));
      v35 = v6;
      v9 = *(float *)((unint64_t)&v35 & 0xFFFFFFFFFFFFFFF3 | (4 * (v4 & 3)));
      v7 = v8 == v9;
      if (v4 == 2)
        break;
      while (1)
      {
        ++v4;
        if (v7)
          break;
        v7 = 0;
        v2 = 0;
        if (v4 == 2)
          return v2 & 1;
      }
    }
    if (v8 != v9)
      goto LABEL_108;
  }
  v10 = *((_QWORD *)a1 + 62);
  v11 = *((_QWORD *)a2 + 62);
  if (!v10)
  {
    if (!v11)
    {
      sub_1000EC560((uint64_t)a2);
      goto LABEL_97;
    }
LABEL_108:
    v2 = 0;
    return v2 & 1;
  }
  if (!v11)
    goto LABEL_108;
  v12 = *((_QWORD *)a1 + 61);
  v13 = *((_QWORD *)a2 + 61);
  if (v12 == v13 && v10 == v11
    || (v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v10, v13, v11, 0), v2 = 0, (v14 & 1) != 0))
  {
LABEL_97:
    if ((v30[256] & 1) != 0)
    {
      if ((v31[256] & 1) == 0)
        goto LABEL_108;
    }
    else
    {
      if ((v31[256] & 1) != 0)
        goto LABEL_108;
      v15 = 0;
      v16 = *((_OWORD *)a1 + 32);
      v17 = *((_OWORD *)a2 + 32);
      while (1)
      {
        v32 = v16;
        v19 = *(float *)((unint64_t)&v32 & 0xFFFFFFFFFFFFFFF3 | (4 * (v15 & 3)));
        v33 = v17;
        v20 = *(float *)((unint64_t)&v33 & 0xFFFFFFFFFFFFFFF3 | (4 * (v15 & 3)));
        v18 = v19 == v20;
        if (v15 == 2)
          break;
        while (1)
        {
          ++v15;
          if (v18)
            break;
          v18 = 0;
          v2 = 0;
          if (v15 == 2)
            return v2 & 1;
        }
      }
      if (v19 != v20)
        goto LABEL_108;
    }
    v21 = a1[529];
    v22 = a2[529];
    if (v21 == 2)
    {
      v3 = v22 == 2;
      v24 = a1;
      v23 = a2;
      if (!v3)
        goto LABEL_108;
    }
    else
    {
      v2 = 0;
      v26 = (v21 & 1) == 0;
      if (v22 == 2)
        return v2 & 1;
      v27 = v26 ^ v22;
      v24 = a1;
      v23 = a2;
      if ((v27 & 1) == 0)
        return v2 & 1;
    }
    v2 = ((v24[530] & 1) == 0) ^ v23[530];
  }
  return v2 & 1;
}

uint64_t sub_1000EC560(uint64_t a1)
{
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 496));
  return a1;
}

uint64_t sub_1000EC588()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  sub_100026F30(v0 + 24);
  swift_release();
  return swift_deallocClassInstance(v0, 72, 7);
}

uint64_t type metadata accessor for MainLoopLocksteppedStateObserver()
{
  return objc_opt_self(_TtC7Measure32MainLoopLocksteppedStateObserver);
}

uint64_t sub_1000EC5DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + 24;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_100026E60(v3, a1);
}

double sub_1000EC624(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  double result;
  _BYTE v5[24];

  v3 = v1 + 24;
  swift_beginAccess(v3, v5, 33, 0);
  sub_100026E18(a1, v3);
  *(_QWORD *)&result = swift_endAccess(v5).n128_u64[0];
  return result;
}

uint64_t (*sub_1000EC674(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 24, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t sub_1000EC6B0()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 16, v2, 0, 0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000EC6E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 16, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease(v3);
}

uint64_t (*sub_1000EC728(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 16, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_1000EC764()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000012, 0x80000001003D8C90, "Measure/MainLoopLocksteppedStateObserver.swift", 46, 2, 57, 0);
  __break(1u);
}

uint64_t initializeBufferWithCopyOfBuffer for MeasureAppState(uint64_t result, int *a2)
{
  int v2;

  v2 = *a2;
  *(_BYTE *)(result + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for MeasureAppState(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 5))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 1);
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for MeasureAppState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 5) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 5) = 0;
    if (a2)
      *(_BYTE *)(result + 1) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for MeasureAppState()
{
  return &type metadata for MeasureAppState;
}

uint64_t sub_1000EC868()
{
  uint64_t result;

  result = Contexts.UIKit.init()();
  qword_1004AF638 = result;
  return result;
}

id sub_1000EC884@<X0>(_QWORD *a1@<X8>)
{
  void *v2;

  if (qword_10047AAE0 != -1)
    swift_once(&qword_10047AAE0, sub_1000EC868);
  v2 = (void *)qword_1004AF638;
  *a1 = qword_1004AF638;
  return v2;
}

uint64_t sub_1000EC8D4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  const mach_header_64 *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  const mach_header_64 *v20;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  v9 = a2[3];
  v10 = a2[4];
  if (a1[4])
    v11 = &_mh_execute_header;
  else
    v11 = 0;
  v12 = v5 == 0;
  v13 = 0x1000000;
  if (v12)
    v14 = 0;
  else
    v14 = 0x1000000;
  v12 = v4 == 0;
  v15 = 0x10000;
  if (v12)
    v16 = 0;
  else
    v16 = 0x10000;
  v12 = v3 == 0;
  v17 = 256;
  if (v12)
    v18 = 0;
  else
    v18 = 256;
  v19 = v18 | v2 | v16 | v14 | (unint64_t)v11;
  if (v10)
    v20 = &_mh_execute_header;
  else
    v20 = 0;
  if (!v9)
    v13 = 0;
  if (!v8)
    v15 = 0;
  if (!v7)
    v17 = 0;
  return sub_1000EC9D8(v19, v17 | v6 | v15 | v13 | (unint64_t)v20);
}

unint64_t sub_1000EC970(uint64_t a1)
{
  unint64_t result;

  result = sub_1000EC994();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000EC994()
{
  unint64_t result;

  result = qword_1004837F8;
  if (!qword_1004837F8)
  {
    result = swift_getWitnessTable(&unk_1003B6B04, &type metadata for MeasureAppState);
    atomic_store(result, (unint64_t *)&qword_1004837F8);
  }
  return result;
}

uint64_t sub_1000EC9D8(unint64_t a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  if (a2 != a1)
    return 0;
  if ((a1 & 0x100) != 0)
    v5 = 0x6C6576656CLL;
  else
    v5 = 0x6572757361656DLL;
  if ((a1 & 0x100) != 0)
    v6 = 0xE500000000000000;
  else
    v6 = 0xE700000000000000;
  if ((a2 & 0x100) != 0)
    v7 = 0x6C6576656CLL;
  else
    v7 = 0x6572757361656DLL;
  if ((a2 & 0x100) != 0)
    v8 = 0xE500000000000000;
  else
    v8 = 0xE700000000000000;
  if (v5 == v7 && v6 == v8)
  {
    v9 = (a2 >> 16) & 1;
    swift_bridgeObjectRelease_n(v6, 2);
    result = 0;
    if (((a1 >> 16) & 1) != (_DWORD)v9)
      return result;
    goto LABEL_21;
  }
  v10 = (a2 >> 16) & 1;
  v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v7, v8, 0);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v8);
  result = 0;
  if (((a1 >> 16) & 1) == (_DWORD)v10 && (v11 & 1) != 0)
  {
LABEL_21:
    if (((a1 >> 24) & 1) == ((a2 >> 24) & 1))
      return ((a1 & (unint64_t)&_mh_execute_header) == 0) ^ BYTE4(a2) & 1u;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MeasureAppState.SpringboardState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1000ECB3C + 4 * byte_1003B6AE5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000ECB70 + 4 * byte_1003B6AE0[v4]))();
}

uint64_t sub_1000ECB70(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000ECB78(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000ECB80);
  return result;
}

uint64_t sub_1000ECB8C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000ECB94);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1000ECB98(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000ECBA0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MeasureAppState.SpringboardState()
{
  return &type metadata for MeasureAppState.SpringboardState;
}

unint64_t sub_1000ECBC0()
{
  unint64_t result;

  result = qword_100483800;
  if (!qword_100483800)
  {
    result = swift_getWitnessTable(&unk_1003B6BA4, &type metadata for MeasureAppState.SpringboardState);
    atomic_store(result, (unint64_t *)&qword_100483800);
  }
  return result;
}

char *sub_1000ECC04(double a1, double a2, double a3, double a4)
{
  char *v4;
  uint64_t v9;
  uint64_t v10;
  id v11;
  char *v12;
  char *v13;
  void *v14;
  char *v15;
  objc_super v17;

  v9 = OBJC_IVAR____TtC7Measure24ViewWithInteractiveLabel_label;
  v10 = type metadata accessor for InteractiveLabel();
  v11 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v10));
  v12 = v4;
  *(_QWORD *)&v4[v9] = objc_msgSend(v11, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);

  v17.receiver = v12;
  v17.super_class = (Class)type metadata accessor for ViewWithInteractiveLabel();
  v13 = (char *)objc_msgSendSuper2(&v17, "initWithFrame:", a1, a2, a3, a4);
  v14 = *(void **)&v13[OBJC_IVAR____TtC7Measure24ViewWithInteractiveLabel_label];
  v15 = v13;
  objc_msgSend(v14, "setUserInteractionEnabled:", 1);
  objc_msgSend(v15, "addSubview:", v14);
  objc_msgSend(v14, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  sub_1000ECE64();

  return v15;
}

char *sub_1000ECD3C(void *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  id v5;
  char *v6;
  char *v7;
  char *v8;
  void *v9;
  char *v10;
  objc_super v12;

  v3 = OBJC_IVAR____TtC7Measure24ViewWithInteractiveLabel_label;
  v4 = type metadata accessor for InteractiveLabel();
  v5 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v4));
  v6 = v1;
  *(_QWORD *)&v1[v3] = objc_msgSend(v5, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);

  v12.receiver = v6;
  v12.super_class = (Class)type metadata accessor for ViewWithInteractiveLabel();
  v7 = (char *)objc_msgSendSuper2(&v12, "initWithCoder:", a1);
  v8 = v7;
  if (v7)
  {
    v9 = *(void **)&v7[OBJC_IVAR____TtC7Measure24ViewWithInteractiveLabel_label];
    v10 = v7;
    objc_msgSend(v9, "setUserInteractionEnabled:", 1);
    objc_msgSend(v10, "addSubview:", v9);
    objc_msgSend(v9, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    sub_1000ECE64();

  }
  return v8;
}

void sub_1000ECE64()
{
  char *v0;
  char *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  Class isa;

  v1 = v0;
  v2 = (void *)objc_opt_self(NSLayoutConstraint);
  v3 = sub_10000EDC8((uint64_t *)&unk_1004866D0);
  v4 = swift_allocObject(v3, 56, 7);
  *(_OWORD *)(v4 + 16) = xmmword_1003B5630;
  v5 = *(void **)&v1[OBJC_IVAR____TtC7Measure24ViewWithInteractiveLabel_label];
  v6 = objc_msgSend(v5, "bottomAnchor");
  v7 = objc_msgSend(v1, "bottomAnchor");
  v8 = objc_msgSend(v6, "constraintEqualToAnchor:", v7);

  *(_QWORD *)(v4 + 32) = v8;
  v9 = objc_msgSend(v5, "leadingAnchor");
  v10 = objc_msgSend(v1, "leadingAnchor");
  v11 = objc_msgSend(v9, "constraintEqualToAnchor:", v10);

  *(_QWORD *)(v4 + 40) = v11;
  v12 = objc_msgSend(v5, "trailingAnchor");
  v13 = objc_msgSend(v1, "trailingAnchor");
  v14 = objc_msgSend(v12, "constraintEqualToAnchor:", v13);

  *(_QWORD *)(v4 + 48) = v14;
  specialized Array._endMutation()(v15);
  sub_10002277C();
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v2, "activateConstraints:", isa, swift_bridgeObjectRelease(v4).n128_f64[0]);

}

id sub_1000ED044()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ViewWithInteractiveLabel();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ViewWithInteractiveLabel()
{
  return objc_opt_self(_TtC7Measure24ViewWithInteractiveLabel);
}

id sub_1000ED170(void *a1)
{
  void *v1;
  id v3;
  id v4;
  char *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  objc_super v12;

  v12.receiver = v1;
  v12.super_class = (Class)swift_getObjectType(v1);
  v3 = objc_msgSendSuper2(&v12, "initWithCoder:", a1);
  v4 = v3;
  if (v3)
  {
    v5 = (char *)v3;
    sub_1000ED270();
    v7 = v6;
    v9 = v8;
    v10 = *(void **)&v5[OBJC_IVAR____TtC7Measure24ViewWithInteractiveLabel_label];
    objc_msgSend(v10, "setFont:", v6);
    objc_msgSend(v10, "setTextColor:", v9);

    a1 = v7;
  }

  return v4;
}

uint64_t type metadata accessor for SecondaryLabelStackLabel()
{
  return objc_opt_self(_TtC7Measure24SecondaryLabelStackLabel);
}

void sub_1000ED270()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;

  v0 = (void *)objc_opt_self(UIFont);
  v1 = objc_msgSend(v0, "preferredFontForTextStyle:", UIFontTextStyleSubheadline);
  v2 = objc_msgSend(v1, "fontDescriptor");

  v3 = objc_msgSend(v2, "fontDescriptorWithSymbolicTraits:", 2);
  if (!v3)
  {
    __break(1u);
    goto LABEL_6;
  }
  objc_msgSend(v3, "pointSize");

  v4 = objc_msgSend(v0, "preferredFontForTextStyle:", UIFontTextStyleTitle3);
  v5 = objc_msgSend(v4, "fontDescriptor");

  v6 = objc_msgSend(v5, "fontDescriptorWithSymbolicTraits:", 2);
  if (!v6)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v7 = objc_msgSend(v0, "fontWithDescriptor:size:", v6, 0.0);

  objc_msgSend(v7, "pointSize");
  v8 = objc_msgSend(v0, "preferredFontForTextStyle:", UIFontTextStyleTitle3);
  v9 = objc_msgSend(v8, "fontDescriptor");

  v10 = objc_msgSend(v9, "fontDescriptorWithSymbolicTraits:", 2);
  if (v10)
  {
    objc_msgSend(v0, "fontWithDescriptor:size:", v10, 0.0);

    v11 = objc_msgSend((id)objc_opt_self(UIColor), "secondaryLabelColor");
    return;
  }
LABEL_7:
  __break(1u);
}

void sub_1000ED4A0()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  Swift::String v6;
  void *object;
  Swift::String v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  Class isa;
  id v21;
  id v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  id v28;
  void *v29;
  void *v30;
  id v31;
  void *v32;
  id v33;
  uint64_t v34;

  v1 = v0;
  static PlaneSelector.DebuggerClass[0] = type metadata accessor for SCNPlaneSelectionDebugger();
  static PlaneSelector.DebuggerClass[1] = &off_100449B80;
  static LocalPlaneDetector.DebuggerClass[0] = type metadata accessor for SCNLocalPlaneDebugger();
  static LocalPlaneDetector.DebuggerClass[1] = &off_10043FE50;
  static SegmentationProcessor.DebuggerClass[0] = type metadata accessor for SCNSegmentationDebugger();
  static SegmentationProcessor.DebuggerClass[1] = &protocol witness table for SCNSegmentationDebugger;
  static PatchTracker.DebuggerClass[0] = type metadata accessor for SCNPatchDebugger();
  static PatchTracker.DebuggerClass[1] = &protocol witness table for SCNPatchDebugger;
  v2 = objc_msgSend((id)objc_opt_self(MeasureApplication), "sharedApplication");
  objc_msgSend(v2, "setIdleTimerDisabled:", 1);

  sub_1000F2778();
  if (qword_10047AA70 != -1)
    swift_once(&qword_10047AA70, sub_1000E13E4);
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease(0xE000000000000000);
  v3 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v4 = objc_msgSend(v3, "dictionaryRepresentation");

  v5 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v4, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
  v6._countAndFlagsBits = Dictionary.description.getter(v5, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
  object = v6._object;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(object);
  v8._countAndFlagsBits = 0x6665442072657355;
  v8._object = (void *)0xEF0A3A73746C7561;
  Log.debug(_:isPrivate:)(v8, 0);
  swift_bridgeObjectRelease(0xEF0A3A73746C7561);
  v9 = type metadata accessor for LinesRenderer(0);
  v10 = (uint64_t *)swift_allocObject(v9, 153, 7);
  *(_QWORD *)(v1 + 224) = sub_1000F2238(v10);
  swift_release();
  if (qword_10047A930 != -1)
    swift_once(&qword_10047A930, sub_100083368);
  qword_1004AF248 = *(_QWORD *)(v1 + 224);
  swift_retain();
  swift_release();
  sub_1000EDBC0();
  v11 = sub_100018148(0, (unint64_t *)&qword_10047E560, UIDevice_ptr);
  if ((static UIDevice.isIPhone()(v11) & 1) != 0)
  {
    sub_1000EDE90();
    sub_1000EE104();
    v12 = *(void **)(v1 + 104);
    if (!v12)
    {
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    v13 = sub_10000EDC8((uint64_t *)&unk_1004866D0);
    v14 = swift_allocObject(v13, 48, 7);
    *(_OWORD *)(v14 + 16) = xmmword_1003B1460;
    v15 = *(void **)(v1 + 88);
    if (!v15)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    *(_QWORD *)(v14 + 32) = v15;
    v16 = *(void **)(v1 + 96);
    if (!v16)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    *(_QWORD *)(v14 + 40) = v16;
    v34 = v14;
    specialized Array._endMutation()(v14);
    sub_100018148(0, &qword_100483AD0, UIViewController_ptr);
    v17 = v12;
    v18 = v15;
    v19 = v16;
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v17, "setViewControllers:", isa, swift_bridgeObjectRelease(v34).n128_f64[0]);

  }
  sub_1000EE33C();
  v21 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v22 = objc_msgSend(v21, "userInterfaceIdiom");

  if (v22 == (id)1)
  {
LABEL_13:
    *(_BYTE *)(v1 + 80) = 1;
    v24 = *(void **)(v1 + 112);
    if (!v24)
    {
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
    v25 = objc_msgSend(v24, "view");
    if (!v25)
    {
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    v26 = v25;
    objc_msgSend(v25, "setAlpha:", 0.0);

LABEL_16:
    v27 = (void *)xmmword_1004AF258;
    *(_QWORD *)&xmmword_1004AF258 = *(_QWORD *)(v1 + 112);
    v28 = (id)xmmword_1004AF258;

    v29 = *(void **)(v1 + 64);
    objc_msgSend(v29, "setRootViewController:", *(_QWORD *)(v1 + 112));
    objc_msgSend(v29, "makeKeyAndVisible");
    v30 = *(void **)(v1 + 112);
    if (v30)
    {
      v31 = objc_msgSend(v30, "view");
      if (v31)
      {
        v32 = v31;
        v33 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UserInterfaceStyleObserverView()), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
        objc_msgSend(v32, "addSubview:", v33);

        sub_1000EE59C();
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_21;
  }
  v23 = *(void **)(v1 + 104);
  if (v23)
  {
    if (objc_msgSend(v23, "selectedIndex") != (id)1)
      goto LABEL_16;
    goto LABEL_13;
  }
LABEL_26:
  __break(1u);
}

uint64_t sub_1000ED998()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = qword_100483880;
  v2 = *(_QWORD *)((char *)v0 + qword_100483880);
  if (v2)
  {
    v3 = *(_QWORD *)((char *)v0 + qword_100483880);
  }
  else
  {
    v3 = sub_1000ED9FC(v0);
    v4 = *(_QWORD *)((char *)v0 + v1);
    *(_QWORD *)((char *)v0 + v1) = v3;
    swift_retain(v3);
    swift_release(v4);
    v2 = 0;
  }
  swift_retain(v2);
  return v3;
}

uint64_t sub_1000ED9FC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t inited;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _UNKNOWN **v7;
  uint64_t v8;
  _UNKNOWN **v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _UNKNOWN **v13;
  _UNKNOWN **v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __n128 v18;
  __n128 v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v24[80];

  v2 = sub_10000EDC8(&qword_100483B18);
  inited = swift_initStackObject(v2, v24);
  *(_OWORD *)(inited + 16) = xmmword_1003B0F50;
  *(_BYTE *)(inited + 32) = 0;
  v4 = sub_10000EDC8(&qword_100483B20);
  v5 = swift_allocObject(v4, 96, 7);
  *(_OWORD *)(v5 + 16) = xmmword_1003B0AF0;
  v6 = (void *)a1[23];
  v7 = &off_1004411C8;
  if (!v6)
    v7 = 0;
  *(_QWORD *)(v5 + 32) = v6;
  *(_QWORD *)(v5 + 40) = v7;
  v8 = a1[25];
  if (v8)
    v9 = &off_1004469E8;
  else
    v9 = 0;
  *(_QWORD *)(v5 + 48) = v8;
  *(_QWORD *)(v5 + 56) = v9;
  v12 = a1 + 20;
  v11 = a1[20];
  v10 = v12[1];
  if (v10)
    v13 = &off_1004476A0;
  else
    v13 = 0;
  *(_QWORD *)(v5 + 64) = v10;
  *(_QWORD *)(v5 + 72) = v13;
  v14 = &off_100446538;
  if (!v11)
    v14 = 0;
  *(_QWORD *)(v5 + 80) = v11;
  *(_QWORD *)(v5 + 88) = v14;
  *(_QWORD *)(inited + 40) = v5;
  *(_BYTE *)(inited + 48) = 1;
  v15 = swift_allocObject(v4, 48, 7);
  *(_OWORD *)(v15 + 16) = xmmword_1003B0BD0;
  *(_QWORD *)(v15 + 32) = v8;
  *(_QWORD *)(v15 + 40) = v9;
  *(_QWORD *)(inited + 56) = v15;
  *(_BYTE *)(inited + 64) = 2;
  v16 = swift_allocObject(v4, 48, 7);
  *(_OWORD *)(v16 + 16) = xmmword_1003B0BD0;
  *(_QWORD *)(v16 + 32) = v10;
  *(_QWORD *)(v16 + 40) = v13;
  *(_QWORD *)(inited + 72) = v16;
  v17 = sub_1000C9050(inited);
  swift_setDeallocating(inited);
  v18 = swift_retain(v11);
  swift_retain_n(v8, 2, v18);
  swift_retain_n(v10, 2, v19);
  v20 = v6;
  v21 = sub_10000EDC8(&qword_100483B28);
  swift_arrayDestroy(inited + 32, 3, v21);
  v22 = type metadata accessor for InstrumentationCoordinator(0);
  swift_allocObject(v22, 128, 7);
  return sub_1000AAA5C(v17);
}

void sub_1000EDBC0()
{
  uint64_t v0;
  Swift::String v1;
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  Swift::String v9;
  Swift::String v10;
  void *object;
  NSString v12;
  void *v13;
  id v14;
  void *v15;
  NSString v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  void *v21;
  NSString v22;
  id v23;
  id v24;
  id v25;
  Swift::String v26;

  if (qword_10047AA70 != -1)
    swift_once(&qword_10047AA70, sub_1000E13E4);
  v1._object = (void *)0x80000001003DF7C0;
  v1._countAndFlagsBits = 0xD000000000000018;
  Log.debug(_:isPrivate:)(v1, 0);
  v2 = (char *)objc_allocWithZone((Class)type metadata accessor for ViewController(0));
  v3 = sub_1000F194C(v2);
  v4 = *(void **)(v0 + 88);
  *(_QWORD *)(v0 + 88) = v3;

  v5 = *(void **)(v0 + 88);
  if (!v5)
  {
    __break(1u);
    goto LABEL_13;
  }
  v6 = objc_msgSend(v5, "tabBarItem");
  if (!v6)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v7 = v6;
  v8 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v26._object = (void *)0xE000000000000000;
  v9._countAndFlagsBits = 0x4552555341454DLL;
  v9._object = (void *)0xE700000000000000;
  v10._countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  v26._countAndFlagsBits = 0;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v9, (Swift::String_optional)0, (NSBundle)v8, v10, v26)._object;

  v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  objc_msgSend(v7, "setTitle:", v12);

  v13 = *(void **)(v0 + 88);
  if (!v13)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = objc_msgSend(v13, "tabBarItem");
  if (!v14)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v15 = v14;
  v16 = String._bridgeToObjectiveC()();
  v17 = (void *)objc_opt_self(UIImage);
  v18 = objc_msgSend(v17, "systemImageNamed:", v16);

  objc_msgSend(v15, "setImage:", v18);
  v19 = *(void **)(v0 + 88);
  if (!v19)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v20 = objc_msgSend(v19, "tabBarItem");
  if (!v20)
  {
LABEL_17:
    __break(1u);
    return;
  }
  v21 = v20;
  v22 = String._bridgeToObjectiveC()();
  v23 = objc_msgSend(v17, "systemImageNamed:", v22);

  objc_msgSend(v21, "setLandscapeImagePhone:", v23);
  if (qword_10047A930 != -1)
    swift_once(&qword_10047A930, sub_100083368);
  v25 = (id)*((_QWORD *)&xmmword_1004AF228 + 1);
  *((_QWORD *)&xmmword_1004AF228 + 1) = *(_QWORD *)(v0 + 88);
  v24 = *((id *)&xmmword_1004AF228 + 1);

}

void sub_1000EDE90()
{
  uint64_t v0;
  id v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  void *v22;
  id v23;

  v1 = objc_msgSend(objc_allocWithZone((Class)UITabBarController), "init");
  v2 = *(void **)(v0 + 104);
  *(_QWORD *)(v0 + 104) = v1;

  v3 = *(void **)(v0 + 104);
  if (!v3)
  {
    __break(1u);
    goto LABEL_13;
  }
  objc_msgSend(v3, "setDelegate:", *(_QWORD *)(v0 + 72));
  v4 = *(void **)(v0 + 104);
  if (!v4)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v5 = objc_msgSend(v4, "view");
  if (!v5)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v6 = v5;
  objc_msgSend(v5, "setAccessibilityIgnoresInvertColors:", 1);

  v7 = *(void **)(v0 + 104);
  if (!v7)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v8 = objc_msgSend(v7, "view");
  if (!v8)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v9 = v8;
  v10 = (void *)objc_opt_self(UIColor);
  v11 = objc_msgSend(v10, "clearColor");
  objc_msgSend(v9, "setBackgroundColor:", v11);

  v12 = *(void **)(v0 + 104);
  if (!v12)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v13 = objc_msgSend(v12, "tabBar");
  v14 = objc_msgSend(v10, "whiteColor");
  objc_msgSend(v13, "setTintColor:", v14);

  v15 = *(void **)(v0 + 104);
  if (!v15)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v16 = objc_msgSend(v15, "tabBar");
  objc_msgSend(v16, "setTranslucent:", objc_msgSend((id)objc_opt_self(Gestalt), "jasperAvailable"));

  v17 = *(void **)(v0 + 104);
  if (!v17)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v18 = objc_msgSend(v17, "tabBar");
  v19 = *(void **)(v0 + 104);
  if (!v19)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v20 = objc_msgSend(v19, "tabBar");
  v21 = objc_msgSend(v20, "standardAppearance");

  objc_msgSend(v18, "setScrollEdgeAppearance:", v21);
  v22 = *(void **)(v0 + 104);
  if (v22)
  {
    v23 = objc_msgSend(v22, "tabBar");
    objc_msgSend(v23, "setOverrideUserInterfaceStyle:", 2);

    return;
  }
LABEL_21:
  __break(1u);
}

void sub_1000EE104()
{
  uint64_t v0;
  id v1;
  void *v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  Swift::String v7;
  Swift::String v8;
  void *object;
  NSString v10;
  void *v11;
  id v12;
  void *v13;
  NSString v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  NSString v20;
  id v21;
  Swift::String v22;

  v1 = objc_msgSend(objc_allocWithZone((Class)LevelPageViewController), "init");
  v2 = *(void **)(v0 + 96);
  *(_QWORD *)(v0 + 96) = v1;

  v3 = *(void **)(v0 + 96);
  if (!v3)
  {
    __break(1u);
    goto LABEL_9;
  }
  v4 = objc_msgSend(v3, "tabBarItem");
  if (!v4)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v5 = v4;
  v6 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v22._object = (void *)0xE000000000000000;
  v7._countAndFlagsBits = 0x4C4556454CLL;
  v7._object = (void *)0xE500000000000000;
  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  v22._countAndFlagsBits = 0;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, (Swift::String_optional)0, (NSBundle)v6, v8, v22)._object;

  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  objc_msgSend(v5, "setTitle:", v10);

  v11 = *(void **)(v0 + 96);
  if (!v11)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v12 = objc_msgSend(v11, "tabBarItem");
  if (!v12)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v13 = v12;
  v14 = String._bridgeToObjectiveC()();
  v15 = (void *)objc_opt_self(UIImage);
  v16 = objc_msgSend(v15, "systemImageNamed:", v14);

  objc_msgSend(v13, "setImage:", v16);
  v17 = *(void **)(v0 + 96);
  if (!v17)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v18 = objc_msgSend(v17, "tabBarItem");
  if (v18)
  {
    v19 = v18;
    v20 = String._bridgeToObjectiveC()();
    v21 = objc_msgSend(v15, "systemImageNamed:", v20);

    objc_msgSend(v19, "setLandscapeImagePhone:", v21);
    return;
  }
LABEL_13:
  __break(1u);
}

void sub_1000EE33C()
{
  _QWORD *v0;
  _QWORD *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  Class isa;
  _QWORD v22[5];
  uint64_t v23;

  v1 = v0;
  v2 = objc_msgSend(objc_allocWithZone((Class)OrientationLockedViewController), "init");
  v3 = (void *)v0[14];
  v0[14] = v2;

  v4 = (void *)v0[14];
  if (!v4)
  {
    __break(1u);
    goto LABEL_13;
  }
  v5 = swift_allocObject(&unk_100446328, 24, 7);
  swift_weakInit(v5 + 16, v1);
  v22[4] = sub_1000F2E6C;
  v23 = v5;
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 1107296256;
  v22[2] = sub_1000F0148;
  v22[3] = &unk_1004464D0;
  v6 = _Block_copy(v22);
  v7 = v23;
  v8 = v4;
  objc_msgSend(v8, "setIsAutorotationEnabled:", v6, swift_release(v7).n128_f64[0]);
  _Block_release(v6);

  v9 = (void *)v1[14];
  if (!v9)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v10 = qword_10047A930;
  v11 = v9;
  if (v10 != -1)
    swift_once(&qword_10047A930, sub_100083368);
  objc_msgSend(v11, "setOrientationToLockTo:", qword_1004AF250);

  sub_100018148(0, (unint64_t *)&qword_10047E560, UIDevice_ptr);
  v12 = static UIDevice.isIPhone()();
  v13 = (void *)v1[14];
  if ((v12 & 1) == 0)
    goto LABEL_9;
  if (!v13)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = sub_10000EDC8((uint64_t *)&unk_1004866D0);
  v15 = swift_allocObject(v14, 40, 7);
  *(_OWORD *)(v15 + 16) = xmmword_1003B0F00;
  v16 = (void *)v1[13];
  if (v16)
  {
LABEL_11:
    *(_QWORD *)(v15 + 32) = v16;
    v22[0] = v15;
    specialized Array._endMutation()(v15);
    v18 = v22[0];
    sub_100018148(0, &qword_100483AD0, UIViewController_ptr);
    v19 = v13;
    v20 = v16;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v18);
    objc_msgSend(v19, "setViewControllers:", isa);

    return;
  }
  __break(1u);
LABEL_9:
  if (!v13)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v17 = sub_10000EDC8((uint64_t *)&unk_1004866D0);
  v15 = swift_allocObject(v17, 40, 7);
  *(_OWORD *)(v15 + 16) = xmmword_1003B0F00;
  v16 = (void *)v1[11];
  if (v16)
    goto LABEL_11;
LABEL_16:
  __break(1u);
}

void sub_1000EE59C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  id v50;
  __n128 v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  id v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  unsigned int v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  id v78;
  void **v79;
  void *v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  id v84;
  id v85;
  void *v86;
  uint64_t v87;
  void *v88;
  id v89;
  double (*v90)(const void *);
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  id v96;
  id v97;
  char *v98;
  void *v99;
  id v100;
  uint64_t KeyPath;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  uint64_t v119;
  __n128 v120;
  uint64_t v121;
  __n128 v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  id v126;
  id v127;
  void *v128;
  char *v129;
  void *v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  char v138[24];
  _QWORD v139[3];
  id v140;
  char v141[32];

  v1 = v0;
  v2 = sub_10000EDC8(&qword_1004816B0);
  __chkstk_darwin(v2);
  v4 = (char *)&v131 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10000EDC8(&qword_100483AD8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v131 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10000EDC8(&qword_100483AE0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v131 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (void *)v1[11];
  if (!v13)
  {
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v136 = v8;
  v14 = v13;
  v15 = sub_1001CA908();

  if (qword_10047B190 != -1)
    swift_once(&qword_10047B190, sub_1001C81CC);
  v137 = v6;
  v16 = qword_1004AFD08;
  objc_msgSend(v15, "center");
  v18 = v17;
  v20 = v19;
  objc_msgSend(v15, "frame");
  v22 = v21;
  v24 = v23;
  v26 = v25;
  v28 = v27;
  objc_msgSend(v15, "bounds");
  v29 = v16 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits;
  *(_QWORD *)v29 = v18;
  *(_QWORD *)(v29 + 8) = v20;
  *(_QWORD *)(v29 + 16) = v22;
  *(_QWORD *)(v29 + 24) = v24;
  *(_QWORD *)(v29 + 32) = v26;
  *(_QWORD *)(v29 + 40) = v28;
  *(_QWORD *)(v29 + 48) = v30;
  *(_QWORD *)(v29 + 56) = v31;
  *(_QWORD *)(v29 + 64) = v32;
  *(_QWORD *)(v29 + 72) = v33;
  *(_BYTE *)(v29 + 80) = 0;
  v34 = type metadata accessor for CVController();
  swift_allocObject(v34, 249, 15);
  v35 = v15;
  v36 = sub_100047274(v35);

  v1[27] = v36;
  swift_release();
  v37 = type metadata accessor for MotionObserver(0);
  v38 = (uint64_t *)swift_allocObject(v37, 104, 7);
  v1[15] = sub_1001CE9E0(v38);
  swift_release();
  v39 = v1[27];
  if (!v39)
    goto LABEL_31;
  v40 = v1[28];
  if (!v40)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v134 = v5;
  v41 = type metadata accessor for LinesInstrument(0);
  swift_allocObject(v41, 577, 15);
  swift_retain();
  swift_retain();
  v42 = sub_1000FF4C8(v39, v40);
  swift_release();
  swift_release();
  v1[20] = v42;
  swift_release();
  if (qword_10047A930 != -1)
    swift_once(&qword_10047A930, sub_100083368);
  v135 = v4;
  qword_1004AF278 = v1[20];
  swift_retain();
  swift_release();
  v43 = type metadata accessor for MeasurementsStateReducer(0);
  v44 = (uint64_t *)swift_allocObject(v43, 216, 7);
  v1[19] = sub_1000F1D70(v44);
  swift_release();
  v46 = MeasureCore.shared.unsafeMutableAddressor(v45);
  v47 = v1[15];
  if (!v47)
    goto LABEL_33;
  v48 = (uint64_t *)v46;
  v49 = *(_QWORD *)(v47 + 64);
  v50 = v35;
  swift_retain();
  v51 = swift_retain();
  MeasureCore.initialize(sceneView:motion:)(v50, &protocol witness table for ARSCNView, v49, v51);
  swift_release();

  swift_release();
  v52 = type metadata accessor for RectangleInstrument(0);
  swift_allocObject(v52, 288, 7);
  v53 = v50;
  sub_100136E14(v53);
  v1[21] = v54;
  swift_release();
  v55 = (void *)objc_opt_self(Gestalt);
  if (!objc_msgSend(v55, "jasperAvailable"))
    goto LABEL_18;
  v56 = type metadata accessor for HistoryTracker(0);
  v57 = (uint64_t *)swift_allocObject(v56, 96, 7);
  v1[24] = sub_1000F208C(v57);
  swift_release();
  v58 = v1[28];
  if (!v58)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  if (!v1[24])
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  swift_retain();
  swift_retain();
  sub_1001CEB00(v59, v58);
  swift_release();
  swift_release();
  v60 = type metadata accessor for GuidesCoordinator(0);
  swift_allocObject(v60, 145, 15);
  v1[22] = sub_1000E6BB0();
  swift_release();
  v61 = *v48;
  swift_beginAccess(*v48 + 112, v138, 0, 0);
  v62 = *(_QWORD *)(v61 + 112);
  if (!v62)
  {
LABEL_15:
    v69 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v70 = objc_msgSend(v69, "kPersonHeightEnabled");

    if (v70)
    {
      v71 = sub_100018148(0, &qword_100483B10, ARWorldTrackingConfiguration_ptr);
      if (objc_msgSend((id)swift_getObjCClassFromMetadata(v71), "supportsFrameSemantics:", 1))
      {
        v72 = objc_allocWithZone((Class)type metadata accessor for PersonHeightInstrument(0));
        v73 = sub_1000507C4((uint64_t)v53);
        v74 = (void *)v1[23];
        v1[23] = v73;

      }
    }
LABEL_18:
    v132 = v12;
    v133 = v10;
    v75 = type metadata accessor for Session();
    v76 = swift_allocObject(v75, 40, 7);
    *(_BYTE *)(v76 + 24) = 0;
    *(_QWORD *)(v76 + 32) = v53;
    v77 = v53;
    v78 = objc_msgSend(v77, "session");
    *(_QWORD *)(v76 + 16) = v78;
    v79 = (void **)WorldAnchor.arSession.unsafeMutableAddressor();
    swift_beginAccess(v79, v141, 1, 0);
    v80 = *v79;
    *v79 = v78;
    v81 = v78;

    v1[18] = v76;
    swift_release();
    v82 = v1[20];
    if (v82)
    {
      v83 = v1[28];
      if (v83)
      {
        objc_allocWithZone((Class)type metadata accessor for RenderLoop(0));
        v84 = v77;
        swift_retain();
        swift_retain();
        v85 = sub_100164D1C(v84, v82, v83);
        v86 = (void *)v1[17];
        v1[17] = v85;

        v87 = v1[18];
        if (v87)
        {
          v131 = v9;
          v88 = (void *)v1[17];
          if (v88)
          {
            swift_retain();
            v89 = v88;
            v90 = sub_100164B44();
            v92 = v91;

            v93 = v1[20];
            if (v93)
            {
              v94 = v1[27];
              if (v94)
              {
                v95 = v1[28];
                if (v95)
                {
                  v96 = objc_allocWithZone((Class)type metadata accessor for MainLoop(0));
                  v97 = v84;
                  swift_retain();
                  swift_retain();
                  swift_retain();
                  v98 = sub_1000E30E8(v87, v97, (uint64_t)v90, v92, v93, v94, v95);
                  v99 = (void *)v1[16];
                  v1[16] = v98;

                  if (objc_msgSend(v55, "jasperAvailable"))
                  {
                    v100 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
                    KeyPath = swift_getKeyPath(&unk_1003B6ED0);
                    v102 = swift_allocObject(&unk_100446328, 24, 7);
                    swift_weakInit(v102 + 16, v1);
                    sub_100018148(0, (unint64_t *)&qword_10047FB70, OS_dispatch_queue_ptr);
                    v103 = (void *)static OS_dispatch_queue.main.getter();
                    NSUserDefaults.performOnChange<A>(to:on:action:)(KeyPath, v103, sub_1000F2E24, v102);

                    swift_release();
                    swift_release();

                  }
                  v104 = sub_1000ED998();
                  v139[0] = *(_QWORD *)(v104 + 64);
                  v105 = swift_allocObject(&unk_100446490, 32, 7);
                  *(_QWORD *)(v105 + 16) = sub_1000F2CD8;
                  *(_QWORD *)(v105 + 24) = v104;
                  swift_retain();
                  swift_retain();
                  v106 = sub_10000EDC8(&qword_100481738);
                  v107 = sub_100043310(&qword_100483AE8, &qword_100481738, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
                  v108 = v136;
                  Publisher.map<A>(_:)(sub_1000F2D04, v105, v106, &type metadata for Session.Configuration, v107);
                  swift_release();
                  swift_release();
                  v109 = sub_100043310(&qword_100483AF0, &qword_100483AD8, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
                  v110 = v134;
                  v111 = Publisher.eraseToAnyPublisher()(v134, v109);
                  (*(void (**)(char *, uint64_t))(v137 + 8))(v108, v110);
                  swift_release();
                  v139[0] = v111;
                  v112 = sub_100018148(0, (unint64_t *)&qword_10047FB70, OS_dispatch_queue_ptr);
                  v140 = (id)static OS_dispatch_queue.main.getter();
                  v113 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
                  v114 = (uint64_t)v135;
                  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v113 - 8) + 56))(v135, 1, 1, v113);
                  v115 = sub_10000EDC8(&qword_100483AF8);
                  v116 = sub_100043310(&qword_100483B00, &qword_100483AF8, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
                  v117 = sub_1000F2D40();
                  v118 = v132;
                  Publisher.receive<A>(on:options:)(&v140, v114, v115, v112, v116, v117);
                  sub_100036600(v114, &qword_1004816B0);

                  swift_release();
                  v119 = sub_100043310(&qword_100483B08, &qword_100483AE0, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
                  v120 = swift_retain();
                  v121 = v131;
                  Publisher<>.sink(receiveValue:)(sub_1000F2D98, v1, v131, v119, v120);
                  v122 = swift_release();
                  (*(void (**)(char *, uint64_t, __n128))(v133 + 8))(v118, v121, v122);
                  swift_beginAccess(v1 + 29, v139, 33, 0);
                  v123 = sub_10000EDC8(&qword_10047D9A0);
                  v124 = sub_100043310(&qword_10047D9A8, &qword_10047D9A0, (uint64_t)&protocol conformance descriptor for [A]);
                  AnyCancellable.store<A>(in:)(v1 + 29, v123, v124);
                  swift_endAccess(v139);
                  swift_release();
                  v125 = (void *)v1[11];
                  if (v125)
                  {
                    v126 = v125;
                    v127 = sub_1001CA908();

                    v128 = (void *)v1[11];
                    if (v128)
                    {
                      objc_allocWithZone((Class)type metadata accessor for DebugSessionCoordinator(0));
                      swift_retain();
                      v129 = sub_1001769B0(v127, (char *)v128, sub_1000F2DCC, (uint64_t)v1);
                      v130 = (void *)qword_1004AF240;
                      qword_1004AF240 = (uint64_t)v129;

                      return;
                    }
                    goto LABEL_42;
                  }
LABEL_41:
                  __break(1u);
LABEL_42:
                  __break(1u);
                  goto LABEL_43;
                }
LABEL_40:
                __break(1u);
                goto LABEL_41;
              }
LABEL_39:
              __break(1u);
              goto LABEL_40;
            }
LABEL_38:
            __break(1u);
            goto LABEL_39;
          }
LABEL_37:
          __break(1u);
          goto LABEL_38;
        }
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v63 = (void *)v1[11];
  if (v63)
  {
    swift_retain();
    v64 = v63;
    v65 = sub_1001CA894();

    OverlayMetalView.populateScene(depthProcessor:)(v62);
    v66 = type metadata accessor for EdgeInstrument(0);
    swift_allocObject(v66, 264, 7);
    sub_10010F61C();
    v68 = v67;
    swift_release();
    v1[25] = v68;
    swift_release();
    goto LABEL_15;
  }
LABEL_45:
  __break(1u);
}

void sub_1000EF0AC()
{
  uint64_t v0;

  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  sub_1000EF0D0();
}

void sub_1000EF0D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, __n128);
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, __n128);
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, __n128);
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, __n128);
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, __n128);
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, __n128);
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t, __n128);
  __n128 v40;

  v1 = v0;
  *(_QWORD *)(v0 + 72) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for TabBarControllerDelegate(0)), "init");
  *(_BYTE *)(v0 + 80) = 0;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_OWORD *)(v0 + 104) = 0u;
  *(_OWORD *)(v0 + 120) = 0u;
  *(_OWORD *)(v0 + 136) = 0u;
  *(_OWORD *)(v0 + 152) = 0u;
  *(_OWORD *)(v0 + 168) = 0u;
  *(_OWORD *)(v0 + 184) = 0u;
  *(_QWORD *)(v0 + 200) = 0;
  v2 = sub_10000EDC8(&qword_100483AC8);
  KeyPath = swift_getKeyPath(&unk_1003B6D98);
  if (qword_10047AD88 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v4 = qword_1004AF890;
  v5 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v2 + 272);
  v6 = swift_retain();
  *(_QWORD *)(v1 + 208) = v5(KeyPath, v4, v6);
  *(_QWORD *)(v1 + 216) = 0;
  *(_QWORD *)(v1 + 224) = 0;
  *(_QWORD *)(v1 + 232) = _swiftEmptyArrayStorage;
  *(_BYTE *)(v1 + 240) = 0;
  *(_QWORD *)(v1 + 248) = 0;
  v7 = sub_10000EDC8(&qword_10047ECF0);
  v8 = swift_getKeyPath(&unk_1003B6DC0);
  v9 = qword_1004AF890;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v7 + 272);
  v11 = swift_retain();
  *(_QWORD *)(v1 + 256) = v10(v8, v9, v11);
  v12 = sub_10000EDC8(&qword_10047E5E0);
  v13 = swift_getKeyPath(&unk_1003B6DE8);
  v14 = qword_1004AF890;
  v15 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v12 + 272);
  v16 = swift_retain();
  *(_QWORD *)(v1 + 264) = v15(v13, v14, v16);
  v17 = swift_getKeyPath(&unk_1003B6E10);
  v18 = sub_10000EDC8((uint64_t *)&unk_10047E5C0);
  v19 = qword_1004AF890;
  v20 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v18 + 272);
  v21 = swift_retain();
  *(_QWORD *)(v1 + 272) = v20(v17, v19, v21);
  v22 = swift_getKeyPath(&unk_1003B6E38);
  v23 = sub_10000EDC8((uint64_t *)&unk_1004873C0);
  v24 = qword_1004AF890;
  v25 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v23 + 272);
  v26 = swift_retain();
  *(_QWORD *)(v1 + 280) = v25(v22, v24, v26);
  v27 = v1 + qword_100483860;
  v28 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v27, 1, 1, v28);
  v29 = qword_100483868;
  v30 = sub_10000EDC8(&qword_10047FAC8);
  v31 = swift_getKeyPath(&unk_1003B6E60);
  v32 = qword_1004AF890;
  v33 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v30 + 272);
  v34 = swift_retain();
  *(_QWORD *)(v1 + v29) = v33(v31, v32, v34);
  v35 = qword_100483870;
  v36 = swift_getKeyPath(&unk_1003B6E88);
  v37 = sub_10000EDC8((uint64_t *)&unk_100486710);
  v38 = qword_1004AF890;
  v39 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v37 + 272);
  v40 = swift_retain();
  *(_QWORD *)(v1 + v35) = v39(v36, v38, v40);
  *(_WORD *)(v1 + qword_100483878) = 0;
  *(_QWORD *)(v1 + qword_100483880) = 0;
  swift_release();
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000002DLL, 0x80000001003D7D70, "Measure/MeasureCoordinator.swift", 32, 2, 153, 0);
  __break(1u);
}

double sub_1000EF3E8()
{
  uint64_t v0;
  double result;

  swift_retain();
  StateValue.ifUpdated(_:)(sub_1000F0084, v0);
  swift_release();
  swift_retain();
  StateValue.ifUpdated(_:)(sub_1000F008C, v0);
  swift_release();
  if (objc_msgSend((id)objc_opt_self(Gestalt), "jasperAvailable"))
  {
    swift_retain();
    StateValue.ifUpdated(_:)(sub_1000F0094, v0);
    *(_QWORD *)&result = swift_release().n128_u64[0];
  }
  return result;
}

void sub_1000EF49C(unsigned __int8 *a1, _BYTE *a2)
{
  char v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;

  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = *a1;
  sub_1000F0444(*a1);
  sub_1000F0E84(v3);
  a2[288] = v7;
  a2[289] = v3;
  a2[290] = v4;
  a2[291] = v5;
  a2[292] = v6;
}

unsigned __int8 *sub_1000EF500(unsigned __int8 *result)
{
  uint64_t v1;
  Swift::String v2;
  void *object;
  char v4;
  Swift::String v5;

  v1 = *result;
  if ((_DWORD)v1 != 5)
  {
    if (qword_10047AA50 != -1)
      swift_once(&qword_10047AA50, sub_1000E12A4);
    v5._countAndFlagsBits = 0;
    v5._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(48);
    v2._object = (void *)0x80000001003DF6B0;
    v2._countAndFlagsBits = 0xD00000000000002ELL;
    String.append(_:)(v2);
    v4 = v1;
    _print_unlocked<A, B>(_:_:)(&v4, &v5, &type metadata for SessionResetEvent, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    object = v5._object;
    Log.default(_:isPrivate:)(v5, 0);
    swift_bridgeObjectRelease(object);
    __asm { BR              X9 }
  }
  return result;
}

void sub_1000EF778(char a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  double v21;
  __n128 v22;
  void *v23;
  void *v24;
  __n128 v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD aBlock[6];

  v4 = v3;
  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v34 = *(_QWORD *)(v8 - 8);
  v35 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v32 = *(_QWORD *)(v11 - 8);
  v33 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchTime(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v30 - v19;
  sub_1000F1404((a1 & 1) == 0, 0);
  if ((a3 & 1) != 0 || (v21 = *(double *)&a2, *(double *)&a2 <= 0.0))
  {
    sub_1000F119C(1);
  }
  else
  {
    sub_100018148(0, (unint64_t *)&qword_10047FB70, OS_dispatch_queue_ptr);
    v23 = (void *)static OS_dispatch_queue.main.getter(v22);
    static DispatchTime.now()();
    + infix(_:_:)(v18, v21);
    v31 = *(void (**)(char *, uint64_t))(v15 + 8);
    v31(v18, v14);
    aBlock[4] = sub_1000F2934;
    aBlock[5] = v4;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10003ECA0;
    aBlock[3] = &unk_1004462F0;
    v24 = _Block_copy(aBlock);
    swift_retain();
    v25 = swift_release();
    static DispatchQoS.unspecified.getter(v25);
    aBlock[0] = _swiftEmptyArrayStorage;
    v26 = sub_100030E1C();
    v27 = sub_10000EDC8((uint64_t *)&unk_10047E430);
    v28 = sub_100043310((unint64_t *)&qword_10047D800, (uint64_t *)&unk_10047E430, (uint64_t)&protocol conformance descriptor for [A]);
    v29 = v35;
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v27, v28, v35, v26);
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v20, v13, v10, v24);
    _Block_release(v24);

    (*(void (**)(char *, uint64_t))(v34 + 8))(v10, v29);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v13, v33);
    v31(v20, v14);
  }
}

void sub_1000EFA4C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[68];
  _BYTE v13[544];

  v3 = type metadata accessor for DebugSessionCoordinator.RecordReplayState(0);
  v4 = __chkstk_darwin(v3);
  __chkstk_darwin(v4);
  v6 = (char *)&v10 - v5;
  if (qword_10047A930 != -1)
    swift_once(&qword_10047A930, sub_100083368);
  if (qword_1004AF240)
  {
    v7 = qword_1004AF240 + qword_100487428;
    swift_beginAccess(qword_1004AF240 + qword_100487428, &v11, 0, 0);
    sub_10007F03C(v7, (uint64_t)v6);
    v8 = (char *)&loc_1000EFB38 + 4 * byte_1003B6C20[swift_getEnumCaseMultiPayload(v6, v3)];
    __asm { BR              X10 }
  }
  swift_retain();
  StateValue.wrappedValue.getter(v12, v9);
  swift_release();
  memcpy(v13, v12, 0x213uLL);
  sub_1000642CC((uint64_t)v13);
  if ((v13[2] & 1) != 0)
  {
    if ((v13[1] & 1) != 0)
      return;
  }
  else if ((v13[1] & 1) == 0)
  {
    return;
  }
  if (*(_BYTE *)(a2 + 240) == 1)
    sub_1000F184C(0);
}

double sub_1000EFCD0()
{
  uint64_t v0;
  double result;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 232));

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_100036600(v0 + qword_100483860, (uint64_t *)&unk_10047E440);
  swift_release();
  swift_release();
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t sub_1000EFDF4(uint64_t a1)
{
  uint64_t v1;

  v1 = StateObserver.deinit(a1);

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 232));

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_100036600(v1 + qword_100483860, (uint64_t *)&unk_10047E440);
  swift_release();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1000EFF30(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_1000EFDF4(a1);
  return swift_deallocClassInstance(v1, *(unsigned int *)(*(_QWORD *)v1 + 48), *(unsigned __int16 *)(*(_QWORD *)v1 + 52));
}

uint64_t type metadata accessor for MeasureCoordinator(uint64_t a1)
{
  uint64_t result;

  result = qword_1004838B0;
  if (!qword_1004838B0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MeasureCoordinator);
  return result;
}

void sub_1000EFF8C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[34];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[2] = &unk_1003B6D38;
  v4[3] = &unk_1003B6D50;
  v4[4] = &unk_1003B6D50;
  v4[5] = &unk_1003B6D50;
  v4[6] = &unk_1003B6D50;
  v4[7] = &unk_1003B6D50;
  v4[8] = &unk_1003B6D50;
  v4[9] = &unk_1003B6D50;
  v4[10] = &unk_1003B6D50;
  v4[11] = &unk_1003B6D50;
  v4[12] = &unk_1003B6D50;
  v4[13] = &unk_1003B6D50;
  v4[14] = &unk_1003B6D50;
  v4[15] = &unk_1003B6D50;
  v4[16] = &unk_1003B6D50;
  v4[17] = &unk_1003B6D50;
  v4[18] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[19] = &unk_1003B6D50;
  v4[20] = &unk_1003B6D50;
  v4[21] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[22] = &unk_1003B6D38;
  v4[23] = &unk_1003B6D50;
  v4[24] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[25] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[26] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[27] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[28] = &unk_1003B6D68;
  sub_10005CFA4(319);
  if (v3 <= 0x3F)
  {
    v4[29] = *(_QWORD *)(v2 - 8) + 64;
    v4[30] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[31] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[32] = &unk_1003B6D80;
    v4[33] = &unk_1003B6D50;
    swift_initClassMetadata2(a1, 256, 34, v4, a1 + 208);
  }
}

void sub_1000F0084(unsigned __int8 *a1)
{
  _BYTE *v1;

  sub_1000EF49C(a1, v1);
}

unsigned __int8 *sub_1000F008C(unsigned __int8 *result)
{
  return sub_1000EF500(result);
}

void sub_1000F0094(uint64_t a1)
{
  uint64_t v1;

  sub_1000EFA4C(a1, v1);
}

uint64_t sub_1000F009C(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(unint64_t *__return_ptr, __n128);
  __n128 v6;
  unint64_t v7;
  _BOOL8 v8;
  unint64_t v10;
  _BYTE v11[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v11, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (!Strong)
    return 1;
  v3 = Strong;
  v4 = *(_QWORD *)(Strong + qword_100483870);
  v5 = *(void (**)(unint64_t *__return_ptr, __n128))(*(_QWORD *)v4 + 144);
  v6 = swift_retain(v4);
  v5(&v10, v6);
  swift_release(v4);
  v7 = v10;
  swift_release(v3);
  v8 = v7 != 0xC000000000000018;
  sub_10001A810(v7);
  return v8;
}

uint64_t sub_1000F0148(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  LOBYTE(v1) = v1(v3);
  swift_release(v2);
  return v1 & 1;
}

void sub_1000F0180(char *a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  uint64_t Strong;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  char v9;
  _BYTE v10[24];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v10, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  if (Strong)
  {
    v5 = Strong;
    v6 = *(void **)(Strong + 184);
    if (!v6)
    {
      swift_release(Strong);
      return;
    }
    if ((v2 & 1) != 0)
    {
      v7 = qword_10047A930;
      v8 = v6;
      if (v7 != -1)
        swift_once(&qword_10047A930, sub_100083368);
      if (!qword_1004AF238)
      {
        __break(1u);
        return;
      }
      if (!*(_QWORD *)(qword_1004AF238 + 24))
      {
        sub_10005BAB8();
        goto LABEL_12;
      }
      v9 = 0;
    }
    else
    {
      v8 = v6;
      v9 = 1;
    }
    sub_10005BFBC(v9);
LABEL_12:
    swift_release(v5);

  }
}

uint64_t sub_1000F0260(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  __n128 v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  _QWORD aBlock[5];
  uint64_t v20;

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v18 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100018148(0, (unint64_t *)&qword_10047FB70, OS_dispatch_queue_ptr);
  v9 = (void *)static OS_dispatch_queue.main.getter();
  aBlock[4] = sub_1000F2E3C;
  v20 = a1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003ECA0;
  aBlock[3] = &unk_1004464A8;
  v10 = _Block_copy(aBlock);
  v11 = v20;
  swift_retain(a1);
  v12 = swift_release(v11);
  static DispatchQoS.unspecified.getter(v12);
  aBlock[0] = _swiftEmptyArrayStorage;
  v13 = sub_100030E1C();
  v14 = sub_10000EDC8((uint64_t *)&unk_10047E430);
  v15 = sub_100043310((unint64_t *)&qword_10047D800, (uint64_t *)&unk_10047E430, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v14, v15, v2, v13);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v4, v10);
  _Block_release(v10);

  (*(void (**)(char *, uint64_t))(v18 + 8))(v4, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_1000F0444(unsigned __int8 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  int v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  void *v32;
  __n128 v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t i;
  uint64_t v50;
  uint64_t v51;
  uint64_t Strong;
  uint64_t v53;
  uint64_t v54;
  uint64_t ObjectType;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  double v62;
  void (*v63)(char *, uint64_t);
  char v64;
  uint64_t v65;
  char v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  id v71;
  void *v72;
  Swift::String v73;
  char *v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  id v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(char *, uint64_t);
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98[24];
  void **aBlock;
  uint64_t v100;
  void *v101;
  void *v102;
  void *v103;
  uint64_t v104;

  v2 = a1;
  v3 = sub_10000EDC8((uint64_t *)&unk_10047E440);
  v4 = __chkstk_darwin(v3);
  v94 = (char *)&v86 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v93 = (uint64_t)&v86 - v6;
  v7 = type metadata accessor for Date(0);
  v95 = *(_QWORD *)(v7 - 8);
  v96 = v7;
  v8 = __chkstk_darwin(v7);
  v90 = (char *)&v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v89 = (char *)&v86 - v10;
  v11 = type metadata accessor for DispatchWorkItemFlags(0);
  v91 = *(_QWORD *)(v11 - 8);
  v92 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v86 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v86 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DispatchTime(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v86 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v24 = (char *)&v86 - v23;
  v97 = v1;
  v25 = *(unsigned __int8 *)(v1 + 288);
  if (v25 == (_DWORD)v2)
    return;
  if ((v2 - 2) < 2)
  {
    v26 = objc_msgSend((id)objc_opt_self(Gestalt), "jasperAvailable");
    v27 = v97;
    if ((_DWORD)v2 == 2)
    {
      if ((_DWORD)v26)
      {
        v28 = (uint64_t)v94;
        Date.init()(v26);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v95 + 56))(v28, 0, 1, v96);
        v29 = v27 + qword_100483860;
        swift_beginAccess(v27 + qword_100483860, &aBlock, 33, 0);
        sub_10006494C(v28, v29, (uint64_t *)&unk_10047E440);
        swift_endAccess(&aBlock);
      }
    }
    sub_1000F1404(1, (_DWORD)v2 == 3);
    return;
  }
  if ((_DWORD)v2)
  {
    v41 = v97;
    v45 = *(_QWORD *)(v97 + 160);
    if (!v45)
    {
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
    if ((*(_BYTE *)(v45 + 208) & 1) != 0)
    {
LABEL_48:
      v84 = *(void **)(v41 + 88);
      if (v84)
      {
        v85 = v84;
        sub_1001CAB1C();

        return;
      }
      goto LABEL_55;
    }
    v46 = *(_QWORD *)(v45 + 72);
    swift_beginAccess(v46 + 64, &aBlock, 0, 0);
    v47 = *(_QWORD *)(v46 + 64);
    if ((unint64_t)v47 >> 62)
    {
      if (v47 < 0)
        v83 = *(_QWORD *)(v46 + 64);
      else
        v83 = v47 & 0xFFFFFFFFFFFFFF8;
      swift_retain();
      swift_bridgeObjectRetain(v47);
      v48 = _CocoaArrayWrapper.endIndex.getter(v83);
      if (v48)
        goto LABEL_18;
    }
    else
    {
      v48 = *(_QWORD *)((v47 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_retain();
      swift_bridgeObjectRetain(v47);
      if (v48)
      {
LABEL_18:
        if (v48 < 1)
        {
          __break(1u);
LABEL_52:
          swift_once(&qword_10047AA50, sub_1000E12A4);
LABEL_39:
          v73._object = (void *)0x80000001003DF750;
          v73._countAndFlagsBits = 0xD000000000000020;
          Log.default(_:isPrivate:)(v73, 0);
          v74 = *(char **)(v41 + 88);
          if (!v74)
          {
LABEL_57:
            __break(1u);
            return;
          }
          v75 = *(void **)&v74[qword_10048A2F0];
          if (!v75)
            goto LABEL_42;
          v76 = objc_opt_self(UIView);
          v77 = swift_allocObject(&unk_1004463C8, 24, 7);
          *(_QWORD *)(v77 + 16) = v75;
          v78 = swift_allocObject(&unk_1004463F0, 32, 7);
          *(_QWORD *)(v78 + 16) = sub_1000F2C9C;
          *(_QWORD *)(v78 + 24) = v77;
          v103 = sub_100030C24;
          v104 = v78;
          aBlock = _NSConcreteStackBlock;
          v100 = 1107296256;
          v101 = sub_1000DDB80;
          v102 = &unk_100446408;
          v79 = _Block_copy(&aBlock);
          v80 = v75;
          v81 = v74;
          swift_retain();
          objc_msgSend((id)v76, "performWithoutAnimation:", v79, swift_release().n128_f64[0]);
          _Block_release(v79);
          LOBYTE(v76) = swift_isEscapingClosureAtFileLocation(v78, "", 102, 497, 40, 1);

          swift_release();
          swift_release();
          if ((v76 & 1) == 0)
          {
LABEL_42:
            sub_1000F1404(1, 0);
            sub_1000F119C(1);
            v82 = (uint64_t)v94;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v95 + 56))(v94, 1, 1, v96);
            swift_beginAccess(v2, &aBlock, 33, 0);
            sub_10006494C(v82, v2, (uint64_t *)&unk_10047E440);
            swift_endAccess(&aBlock);
            goto LABEL_33;
          }
          __break(1u);
          goto LABEL_54;
        }
        for (i = 0; i != v48; ++i)
        {
          if ((v47 & 0xC000000000000001) != 0)
          {
            v51 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v47);
          }
          else
          {
            v51 = *(_QWORD *)(v47 + 8 * i + 32);
            swift_retain();
          }
          Strong = swift_unknownObjectWeakLoadStrong(v51 + 16, v50);
          if (Strong)
          {
            v53 = Strong;
            v54 = *(_QWORD *)(v51 + 24);
            ObjectType = swift_getObjectType(Strong);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 120))(1, ObjectType, v54);
            swift_release();
            swift_unknownObjectRelease(v53);
          }
          else
          {
            swift_release();
          }
        }
      }
    }
    swift_bridgeObjectRelease(v47);
    *(_BYTE *)(v45 + 208) = 1;
    swift_release();
    goto LABEL_48;
  }
  if ((v25 - 2) >= 2)
  {
    if (!*(_BYTE *)(v1 + 288))
      return;
    v56 = *(char **)(v97 + 88);
    if (v56)
    {
      if (*(_QWORD *)&v56[qword_10048A348])
      {
        v57 = swift_allocObject(&unk_100446468, 24, 7);
        *(_QWORD *)(v57 + 16) = v56;
        v58 = v56;
        swift_retain();
        sub_1001307B8(0, 0, (uint64_t)sub_1000F2EB4, v57);

        swift_release();
        swift_release();
      }
      return;
    }
    goto LABEL_56;
  }
  if (*(_BYTE *)(v97 + 80) == 1)
  {
    v30 = v97;
    *(_BYTE *)(v97 + 80) = 0;
    sub_100018148(0, (unint64_t *)&qword_10047FB70, OS_dispatch_queue_ptr);
    v87 = static OS_dispatch_queue.main.getter(v31);
    static DispatchTime.now()();
    + infix(_:_:)(v22, 0.3);
    v88 = *(void (**)(char *, uint64_t))(v19 + 8);
    v88(v22, v18);
    v103 = sub_1000F2CB4;
    v104 = v30;
    aBlock = _NSConcreteStackBlock;
    v100 = 1107296256;
    v101 = sub_10003ECA0;
    v102 = &unk_100446430;
    v32 = _Block_copy(&aBlock);
    swift_retain();
    v33 = swift_release();
    static DispatchQoS.unspecified.getter(v33);
    aBlock = (void **)_swiftEmptyArrayStorage;
    v34 = sub_100030E1C();
    v35 = sub_10000EDC8((uint64_t *)&unk_10047E430);
    v36 = sub_100043310((unint64_t *)&qword_10047D800, (uint64_t *)&unk_10047E430, (uint64_t)&protocol conformance descriptor for [A]);
    v37 = v35;
    v38 = v92;
    dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v37, v36, v92, v34);
    v39 = (void *)v87;
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v24, v17, v13, v32);
    _Block_release(v32);

    (*(void (**)(char *, uint64_t))(v91 + 8))(v13, v38);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    v88(v24, v18);
  }
  v40 = objc_msgSend((id)objc_opt_self(Gestalt), "jasperAvailable");
  v41 = v97;
  if (!v40)
    goto LABEL_32;
  v2 = v97 + qword_100483860;
  swift_beginAccess(v97 + qword_100483860, v98, 0, 0);
  v42 = v93;
  sub_1000C219C(v2, v93);
  v43 = v95;
  v44 = v96;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v95 + 48))(v42, 1, v96) != 1)
  {
    v59 = v89;
    v60 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v43 + 32))(v89, v42, v44);
    v61 = v90;
    Date.init()(v60);
    v62 = Date.distance(to:)(v61);
    v63 = *(void (**)(char *, uint64_t))(v43 + 8);
    v63(v61, v44);
    v63(v59, v44);
    if (v62 < 600.0)
      goto LABEL_32;
    if (qword_10047AA50 == -1)
      goto LABEL_39;
    goto LABEL_52;
  }
  sub_100036600(v42, (uint64_t *)&unk_10047E440);
LABEL_32:
  v64 = sub_1000F29CC();
  sub_1000F119C(v64 & 1);
LABEL_33:
  swift_retain();
  StateValue.wrappedValue.getter(&aBlock, v65);
  swift_release();
  if (BYTE1(aBlock) == 1)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
  }
  else
  {
    v66 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6572757361656DLL, 0xE700000000000000, 0x6C6576656CLL, 0xE500000000000000, 0);
    swift_bridgeObjectRelease(0xE700000000000000);
    if ((v66 & 1) == 0)
      return;
  }
  if (!*(_QWORD *)(v97 + 248))
  {
    v67 = (void *)objc_opt_self(NSTimer);
    v68 = swift_allocObject(&unk_100446328, 24, 7);
    v69 = v97;
    swift_weakInit(v68 + 16, v97);
    v103 = sub_1000F2978;
    v104 = v68;
    aBlock = _NSConcreteStackBlock;
    v100 = 1107296256;
    v101 = sub_10004C834;
    v102 = &unk_100446390;
    v70 = _Block_copy(&aBlock);
    swift_release();
    v71 = objc_msgSend(v67, "scheduledTimerWithTimeInterval:repeats:block:", 0, v70, 5.0);
    _Block_release(v70);
    v72 = *(void **)(v69 + 248);
    *(_QWORD *)(v69 + 248) = v71;

  }
}

void sub_1000F0E84(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v12;
  double v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  id v19;
  void *v20;
  void (*v21)(__n128);
  __n128 v22;
  unint64_t v23;
  char v25;
  char *v26;
  uint64_t v27;
  char *v28;
  _QWORD aBlock[6];

  v2 = v1;
  v4 = type metadata accessor for SessionState(0);
  __chkstk_darwin(v4);
  v6 = (_QWORD *)((char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if ((a1 & 1) != 0)
    v7 = 0x6C6576656CLL;
  else
    v7 = 0x6572757361656DLL;
  if ((a1 & 1) != 0)
    v8 = 0xE500000000000000;
  else
    v8 = 0xE700000000000000;
  if (*(_BYTE *)(v2 + 289))
    v9 = 0x6C6576656CLL;
  else
    v9 = 0x6572757361656DLL;
  if (*(_BYTE *)(v2 + 289))
    v10 = 0xE500000000000000;
  else
    v10 = 0xE700000000000000;
  if (v7 == v9 && v8 == v10)
  {
    swift_bridgeObjectRelease_n(v8, 2);
    return;
  }
  v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, v9, v10, 0);
  swift_bridgeObjectRelease(v8);
  *(_QWORD *)&v13 = swift_bridgeObjectRelease(v10).n128_u64[0];
  if ((v12 & 1) != 0)
    return;
  v14 = *(void **)(v2 + 248);
  if ((a1 & 1) == 0)
  {
    if (v14)
    {
      objc_msgSend(v14, "invalidate", v13);
      v15 = *(void **)(v2 + 248);
    }
    else
    {
      v15 = 0;
    }
    *(_QWORD *)(v2 + 248) = 0;

    v21 = *(void (**)(__n128))(**(_QWORD **)(v2 + 272) + 144);
    v22 = swift_retain();
    v21(v22);
    swift_release();
    v23 = *v6;
    sub_1000F2980(*v6);
    sub_1000F2990((uint64_t)v6);
    if (v23 - 2 >= 2 && v23 != 0)
    {
      if (v23 == 1)
        goto LABEL_33;
      sub_1000E6348(v23);
    }
    v25 = sub_1000F29CC();
    sub_1000F119C(v25 & 1);
LABEL_33:
    v26 = *(char **)(v2 + 88);
    if (v26)
    {
      if (*(_QWORD *)&v26[qword_10048A348])
      {
        v27 = swift_allocObject(&unk_100446378, 24, 7);
        *(_QWORD *)(v27 + 16) = v26;
        v28 = v26;
        swift_retain();
        sub_1001307B8(0, 1, (uint64_t)sub_1000F2EB4, v27);

        swift_release();
        swift_release();
      }
    }
    else
    {
      __break(1u);
    }
    return;
  }
  if (!v14)
  {
    v16 = (void *)objc_opt_self(NSTimer);
    v17 = swift_allocObject(&unk_100446328, 24, 7);
    swift_weakInit(v17 + 16, v2);
    aBlock[4] = sub_1000F2978;
    aBlock[5] = v17;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10004C834;
    aBlock[3] = &unk_100446340;
    v18 = _Block_copy(aBlock);
    swift_release();
    v19 = objc_msgSend(v16, "scheduledTimerWithTimeInterval:repeats:block:", 0, v18, 5.0);
    _Block_release(v18);
    v20 = *(void **)(v2 + 248);
    *(_QWORD *)(v2 + 248) = v19;

  }
}

void sub_1000F1144(uint64_t a1)
{
  void *v1;
  id v2;
  id v3;

  v1 = *(void **)(a1 + 112);
  if (v1)
  {
    v2 = objc_msgSend(v1, "view");
    if (v2)
    {
      v3 = v2;
      objc_msgSend(v2, "setAlpha:", 1.0);

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_1000F119C(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v4)(__n128);
  __n128 v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  void *v9;
  id v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[3];

  if ((*(_BYTE *)(v1 + 240) & 1) == 0)
  {
    v2 = v1;
    if ((a1 & 1) != 0)
    {
      v4 = *(uint64_t (**)(__n128))(**(_QWORD **)(v1 + 280) + 200);
      v5 = swift_retain();
      v6 = v4(v5);
      v7 = swift_release();
      (*(void (**)(void (*)(), _QWORD, __n128))(*(_QWORD *)v6 + 280))(sub_1000F1828, 0, v7);
      swift_release();
    }
    sub_1000F184C(a1 & 1);
    if (*(_QWORD *)(v1 + 120))
    {
      swift_retain();
      sub_100125044();
      swift_release();
      v8 = *(_QWORD *)(v1 + 168);
      if (v8)
      {
        v9 = (void *)objc_opt_self(NSProcessInfo);
        v10 = objc_msgSend(v9, "processInfo", swift_retain().n128_f64[0]);
        v11 = (unint64_t)objc_msgSend(v10, "thermalState");

        if (v11 < 4)
        {
          v12 = 0x20303u >> (8 * v11);
          v13 = swift_allocObject(&unk_1004462B0, 25, 7);
          *(_QWORD *)(v13 + 16) = v8;
          *(_BYTE *)(v13 + 24) = v12;
          v14 = sub_10000EDC8((uint64_t *)&unk_10047E420);
          swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
          v20[0] = Future.init(_:)(sub_1000F2928, v13, v15);
          v16 = sub_100043310(&qword_1004816F0, (uint64_t *)&unk_10047E420, (uint64_t)&protocol conformance descriptor for Future<A, B>);
          Publisher<>.sink(receiveValue:)(nullsub_1, 0, v14, v16, v17);
          swift_release();
          swift_beginAccess(v2 + 232, v20, 33, 0);
          v18 = sub_10000EDC8(&qword_10047D9A0);
          v19 = sub_100043310(&qword_10047D9A8, &qword_10047D9A0, (uint64_t)&protocol conformance descriptor for [A]);
          AnyCancellable.store<A>(in:)(v2 + 232, v18, v19);
          swift_endAccess(v20);
          swift_release();
          *(_BYTE *)(v2 + 240) = 1;
          return;
        }
LABEL_11:
        _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Measure/InstrumentationCoordinator.swift", 40, 2, 102, 0);
        __break(1u);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_11;
  }
}

void sub_1000F1404(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  id v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  Class isa;
  uint64_t v28;
  uint64_t v29;
  NSString v30;
  _QWORD v32[3];

  v3 = v2;
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v32[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v3 + 240) == 1)
  {
    if ((a1 & 1) != 0)
    {
      v10 = *(void **)(v3 + 88);
      if (!v10)
      {
LABEL_24:
        __break(1u);
        return;
      }
      v11 = v10;
      sub_1001CAB1C();

    }
    v12 = *(_QWORD *)(v3 + 216);
    if (v12)
    {
      v13 = *(unsigned __int8 *)(v12 + 248);
      v14 = qword_10047AA40;
      swift_retain();
      if (v13 == 1)
      {
        if (v14 != -1)
          swift_once(&qword_10047AA40, sub_1000E11FC);
        v15._object = (void *)0x80000001003DA440;
        v15._countAndFlagsBits = 0xD000000000000021;
        Log.debug(_:isPrivate:)(v15, 0);
        *(_QWORD *)(v12 + 48) = 0;
        swift_release();
        *(_BYTE *)(v12 + 248) = 0;
      }
      else
      {
        if (v14 != -1)
          swift_once(&qword_10047AA40, sub_1000E11FC);
        v16._countAndFlagsBits = 0xD000000000000037;
        v16._object = (void *)0x80000001003DA400;
        Log.debug(_:isPrivate:)(v16, 0);
      }
      swift_release();
      v17 = *(_QWORD *)(v3 + 168);
      if (v17)
      {
        v18 = swift_allocObject(&unk_1004462D8, 25, 7);
        *(_QWORD *)(v18 + 16) = v17;
        *(_BYTE *)(v18 + 24) = 0;
        v19 = sub_10000EDC8((uint64_t *)&unk_10047E420);
        swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
        v20 = swift_retain();
        v32[0] = Future.init(_:)(sub_1000F2ECC, v18, v20);
        v21 = sub_100043310(&qword_1004816F0, (uint64_t *)&unk_10047E420, (uint64_t)&protocol conformance descriptor for Future<A, B>);
        Publisher<>.sink(receiveValue:)(nullsub_1, 0, v19, v21, v22);
        swift_release();
        swift_beginAccess(v3 + 232, v32, 33, 0);
        v23 = sub_10000EDC8(&qword_10047D9A0);
        v24 = sub_100043310(&qword_10047D9A8, &qword_10047D9A0, (uint64_t)&protocol conformance descriptor for [A]);
        AnyCancellable.store<A>(in:)(v3 + 232, v23, v24);
        swift_endAccess(v32);
        swift_release();
        if (qword_10047A938 != -1)
          swift_once(&qword_10047A938, sub_100083764);
        sub_100083D40();
        v25 = *(_QWORD *)(v3 + 120);
        if (v25)
        {
          objc_msgSend(*(id *)(v25 + 80), "stopDeviceMotionUpdates");
          if (*(_QWORD *)(v3 + 144))
          {
            swift_retain();
            sub_10017AF38(a2 & 1);
            swift_release();
            v26 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
            Date.init()(v26);
            isa = Date._bridgeToObjectiveC()().super.isa;
            v28 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
            v29 = *(_QWORD *)(Defaults.dateLastUse.unsafeMutableAddressor(v28) + 8);
            swift_bridgeObjectRetain(v29);
            v30 = String._bridgeToObjectiveC()();
            objc_msgSend(v26, "setObject:forKey:", isa, v30, swift_bridgeObjectRelease(v29).n128_f64[0]);

            *(_BYTE *)(v3 + 240) = 0;
            return;
          }
          goto LABEL_23;
        }
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
        goto LABEL_24;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_22;
  }
}

void sub_1000F17C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  uint64_t v4;
  void *v5;
  _BYTE v6[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0, 0);
  Strong = swift_weakLoadStrong(v2);
  if (Strong)
  {
    v4 = Strong;
    sub_1000F1404(1, 1);
    v5 = *(void **)(v4 + 248);
    *(_QWORD *)(v4 + 248) = 0;
    swift_release();

  }
}

void sub_1000F1828()
{
  sub_100090D48(9u);
}

void sub_1000F184C(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  void *v9;
  id v10;
  _QWORD __src[68];
  _BYTE __dst[544];

  v2 = v1;
  if (!objc_msgSend((id)objc_opt_self(Gestalt), "jasperAvailable"))
  {
    v8 = *(_QWORD *)(v1 + 144);
    if (v8)
    {
      swift_retain(*(_QWORD *)(v2 + 144));
      sub_10017B83C();
      v10 = v9;
      sub_10017B1AC(a1 & 1, v9);
      swift_release(v8);

      return;
    }
    goto LABEL_10;
  }
  v4 = *(_QWORD *)(v1 + 208);
  swift_retain(*(_QWORD *)(v2 + 208));
  StateValue.wrappedValue.getter(__src, v5);
  swift_release(v4);
  memcpy(__dst, __src, 0x213uLL);
  sub_1000642CC((uint64_t)__dst);
  v6 = *(_QWORD *)(v2 + 144);
  if (!v6)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return;
  }
  if (__dst[1])
    v7 = 256;
  else
    v7 = 0;
  swift_retain(v6);
  sub_10017B090(v7 & 0xFFFE | a1 & 1);
  swift_release(v6);
}

char *sub_1000F194C(char *a1)
{
  uint64_t ObjectType;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, __n128);
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t, __n128);
  __n128 v28;

  ObjectType = swift_getObjectType(a1);
  *(_QWORD *)&a1[qword_10048A2E0] = 0;
  *(_QWORD *)&a1[qword_10048A2E8] = 0;
  *(_QWORD *)&a1[qword_10048A2F0] = 0;
  v3 = qword_10048A2F8;
  v4 = sub_10000EDC8((uint64_t *)&unk_10048A5C0);
  KeyPath = swift_getKeyPath(&unk_1003B7088);
  v6 = qword_10047AD88;
  v7 = a1;
  if (v6 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v8 = qword_1004AF890;
  v9 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v4 + 272);
  v10 = swift_retain(qword_1004AF890);
  *(_QWORD *)&v7[v3] = v9(KeyPath, v8, v10);
  v11 = qword_10048A300;
  sub_10000EDC8(&qword_100483B60);
  v12 = swift_getKeyPath(&unk_1003B70B0);
  v13 = type metadata accessor for MainLoop(0);
  *(_QWORD *)&v7[v11] = MutableStateValue.__allocating_init(_:_:)(v12, v13);
  *(_QWORD *)&v7[qword_10048A308] = 0;
  *(_QWORD *)&v7[qword_10048A310] = 0;
  *(_QWORD *)&v7[qword_10048A318] = 0;
  *(_QWORD *)&v7[qword_10048A320] = 0;
  *(_QWORD *)&v7[qword_10048A328] = 0;
  *(_QWORD *)&v7[qword_10048A330] = 0;
  *(_QWORD *)&v7[qword_10048A338] = 0;
  *(_QWORD *)&v7[qword_10048A340] = 0;
  *(_QWORD *)&v7[qword_10048A348] = 0;
  *(_QWORD *)&v7[qword_10048A350] = 0;
  *(_QWORD *)&v7[qword_10048A358] = 0;
  *(_QWORD *)&v7[qword_10048A360] = 0;
  *(_QWORD *)&v7[qword_10048A368] = 0;
  *(_QWORD *)&v7[qword_10048A370] = 0;
  *(_QWORD *)&v7[qword_10048A378] = 0;
  *(_QWORD *)&v7[qword_10048A380] = 0;
  v14 = qword_10048A388;
  v15 = type metadata accessor for MotionObserver(0);
  v16 = (uint64_t *)swift_allocObject(v15, 104, 7);
  *(_QWORD *)&v7[v14] = sub_1001CE9E0(v16);
  v7[qword_10048A390] = 0;
  *(_QWORD *)&v7[qword_10048A398] = 0;
  v17 = qword_10048A3A0;
  sub_10000EDC8((uint64_t *)&unk_10048A5D0);
  v18 = swift_getKeyPath(&unk_1003B6E38);
  *(_QWORD *)&v7[v17] = MutableStateValue.__allocating_init(_:_:)(v18, ObjectType);
  v19 = qword_10048A3A8;
  sub_10000EDC8(&qword_100483B68);
  v20 = swift_getKeyPath(&unk_1003B6DE8);
  *(_QWORD *)&v7[v19] = MutableStateValue.__allocating_init(_:_:)(v20, ObjectType);
  v21 = qword_10048A3B0;
  sub_10000EDC8((uint64_t *)&unk_10048A5E0);
  v22 = swift_getKeyPath(&unk_1003B70D8);
  *(_QWORD *)&v7[v21] = MutableStateValue.__allocating_init(_:_:)(v22, ObjectType);
  v23 = qword_10048A3B8;
  v24 = sub_10000EDC8(&qword_10047EA08);
  v25 = swift_getKeyPath(&unk_1003B6FC0);
  v26 = qword_1004AF890;
  v27 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v24 + 272);
  v28 = swift_retain(qword_1004AF890);
  *(_QWORD *)&v7[v23] = v27(v25, v26, v28);

  return sub_1000F1C48(v7);
}

char *sub_1000F1C48(char *a1)
{
  char *v1;
  char *v2;
  uint64_t v3;
  char *v4;
  _BYTE v6[24];
  _BYTE v7[40];
  objc_super v8;
  _QWORD v9[5];

  v9[3] = &type metadata for Configurations.Default;
  v9[4] = &protocol witness table for Configurations.Default;
  *(_QWORD *)&a1[qword_100488310] = _swiftEmptyArrayStorage;
  v1 = &a1[qword_100488318];
  *(_OWORD *)v1 = 0u;
  *((_OWORD *)v1 + 1) = 0u;
  *((_QWORD *)v1 + 4) = 0;
  v8.receiver = a1;
  v8.super_class = (Class)sub_10000EDC8(&qword_100483B70);
  v2 = (char *)objc_msgSendSuper2(&v8, "initWithNibName:bundle:", 0, 0);
  sub_100068B24((uint64_t)v9, (uint64_t)v7);
  v3 = (uint64_t)&v2[qword_100488318];
  swift_beginAccess(&v2[qword_100488318], v6, 33, 0);
  v4 = v2;
  sub_10006494C((uint64_t)v7, v3, &qword_10047C518);
  swift_endAccess(v6);
  sub_100043310(&qword_100483B78, &qword_100483B70, (uint64_t)&unk_1003BAC20);
  StateObserving.setup()();

  sub_10000F690(v9);
  return v4;
}

uint64_t sub_1000F1D70(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, __n128);
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, __n128);
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, __n128);
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, __n128);
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, __n128);
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t, __n128);
  __n128 v38;
  uint64_t v39;
  _BYTE v41[40];
  _QWORD v42[5];

  v2 = *a1;
  v42[3] = &type metadata for Configurations.Default;
  v42[4] = &protocol witness table for Configurations.Default;
  v3 = sub_10000EDC8(&qword_10047D010);
  KeyPath = swift_getKeyPath(&unk_1003B6F98);
  v5 = qword_10047AD88;
  swift_retain(a1);
  if (v5 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v6 = qword_1004AF890;
  v7 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v3 + 272);
  v8 = swift_retain(qword_1004AF890);
  a1[8] = v7(KeyPath, v6, v8);
  v9 = sub_10000EDC8(&qword_10047ECF0);
  v10 = swift_getKeyPath(&unk_1003B6DC0);
  v11 = qword_1004AF890;
  v12 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v9 + 272);
  v13 = swift_retain(qword_1004AF890);
  a1[9] = v12(v10, v11, v13);
  v14 = sub_10000EDC8(&qword_10047EA08);
  v15 = swift_getKeyPath(&unk_1003B6FC0);
  v16 = qword_1004AF890;
  v17 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v14 + 272);
  v18 = swift_retain(qword_1004AF890);
  a1[10] = v17(v15, v16, v18);
  sub_10000EDC8(&qword_100483B30);
  v19 = swift_getKeyPath(&unk_1003B6FE8);
  a1[11] = MutableStateValue.__allocating_init(_:_:)(v19, v2);
  v20 = swift_getKeyPath(&unk_1003B7010);
  v21 = sub_10000EDC8(&qword_10047BBA0);
  v22 = qword_1004AF890;
  v23 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v21 + 272);
  v24 = swift_retain(qword_1004AF890);
  a1[12] = v23(v20, v22, v24);
  v25 = swift_getKeyPath(&unk_1003B6E38);
  v26 = sub_10000EDC8((uint64_t *)&unk_1004873C0);
  v27 = qword_1004AF890;
  v28 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v26 + 272);
  v29 = swift_retain(qword_1004AF890);
  a1[13] = v28(v25, v27, v29);
  sub_10000EDC8(&qword_100483B38);
  v30 = swift_getKeyPath(&unk_1003B7038);
  a1[14] = MutableStateValue.__allocating_init(_:_:)(v30, v2);
  sub_10000EDC8(&qword_100483B40);
  v31 = swift_getKeyPath(&unk_1003B6E88);
  a1[15] = MutableStateValue.__allocating_init(_:_:)(v31, v2);
  sub_10000EDC8(&qword_100483B48);
  v32 = swift_getKeyPath(&unk_1003B6EF8);
  a1[16] = MutableStateValue.__allocating_init(_:_:)(v32, v2);
  sub_10000EDC8(&qword_100483B50);
  v33 = swift_getKeyPath(&unk_1003B6F20);
  a1[17] = MutableStateValue.__allocating_init(_:_:)(v33, v2);
  v34 = sub_10000EDC8(&qword_100483B58);
  v35 = swift_getKeyPath(&unk_1003B7060);
  v36 = qword_1004AF890;
  v37 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v34 + 272);
  v38 = swift_retain(qword_1004AF890);
  a1[18] = v37(v35, v36, v38);
  *(_OWORD *)(a1 + 19) = 0u;
  *(_OWORD *)(a1 + 21) = 0u;
  *(_OWORD *)(a1 + 23) = 0u;
  *(_OWORD *)(a1 + 25) = 0u;
  swift_release(a1);
  sub_100068B24((uint64_t)v42, (uint64_t)v41);
  v39 = StateObserver.init(configuration:)(v41);
  sub_10000F690(v42);
  return v39;
}

uint64_t sub_1000F208C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, __n128);
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, __n128);
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, __n128);
  __n128 v18;
  uint64_t v19;
  _BYTE v21[40];
  _QWORD v22[5];

  v2 = *a1;
  v22[3] = &type metadata for Configurations.Default;
  v22[4] = &protocol witness table for Configurations.Default;
  sub_10000EDC8(&qword_100481248);
  KeyPath = swift_getKeyPath(&unk_1003B6EF8);
  swift_retain(a1);
  a1[8] = MutableStateBinding.__allocating_init(_:_:)(KeyPath, v2);
  v4 = sub_10000EDC8(&qword_100481250);
  v5 = swift_getKeyPath(&unk_1003B6F20);
  if (qword_10047AD88 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v6 = qword_1004AF890;
  v7 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v4 + 272);
  v8 = swift_retain(qword_1004AF890);
  a1[9] = v7(v5, v6, v8);
  v9 = swift_getKeyPath(&unk_1003B6F48);
  v10 = sub_10000EDC8(&qword_100482F10);
  v11 = qword_1004AF890;
  v12 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v10 + 272);
  v13 = swift_retain(qword_1004AF890);
  a1[10] = v12(v9, v11, v13);
  v14 = swift_getKeyPath(&unk_1003B6F70);
  v15 = sub_10000EDC8(&qword_100481258);
  v16 = qword_1004AF890;
  v17 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v15 + 272);
  v18 = swift_retain(qword_1004AF890);
  a1[11] = v17(v14, v16, v18);
  swift_release(a1);
  sub_100068B24((uint64_t)v22, (uint64_t)v21);
  v19 = StateObserver.init(configuration:)(v21);
  sub_10000F690(v22);
  return v19;
}

uint64_t sub_1000F2238(uint64_t *a1)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, __n128);
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, __n128);
  __n128 v18;
  uint64_t v19;
  _QWORD v21[5];
  _QWORD v22[5];

  v2 = *a1;
  v22[3] = &type metadata for Configurations.Default;
  v22[4] = &protocol witness table for Configurations.Default;
  a1[8] = (uint64_t)_swiftEmptyArrayStorage;
  sub_10000EDC8(&qword_100483B80);
  KeyPath = swift_getKeyPath(&unk_1003B7038);
  swift_retain();
  a1[9] = MutableStateValue.__allocating_init(_:_:)(KeyPath, v2);
  a1[10] = (uint64_t)_swiftEmptyDictionarySingleton;
  v4 = type metadata accessor for WorldLine(0);
  a1[11] = OrderedDictionary.init()(&type metadata for String, v4, &protocol witness table for String);
  a1[12] = v5;
  a1[13] = v6;
  v21[0] = _swiftEmptyDictionarySingleton;
  v7 = sub_10000EDC8(&qword_100483B88);
  swift_allocObject(v7, 32, 7);
  a1[14] = Synchronized.init(wrappedValue:)(v21);
  v8 = swift_getKeyPath(&unk_1003B7100);
  v9 = sub_10000EDC8(&qword_1004830F0);
  if (qword_10047AD88 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v10 = qword_1004AF890;
  v11 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v9 + 272);
  v12 = swift_retain();
  a1[15] = v11(v8, v10, v12);
  a1[16] = (uint64_t)_swiftEmptyArrayStorage;
  sub_10000EDC8(&qword_100483B90);
  v13 = swift_getKeyPath(&unk_1003B7128);
  a1[17] = MutableStateValue.__allocating_init(_:_:)(v13, v2);
  v14 = swift_getKeyPath(&unk_1003B6DC0);
  v15 = sub_10000EDC8(&qword_10047BBD0);
  v16 = qword_1004AF890;
  v17 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v15 + 272);
  v18 = swift_retain();
  a1[18] = v17(v14, v16, v18);
  *((_BYTE *)a1 + 152) = 1;
  swift_release();
  sub_100068B24((uint64_t)v22, (uint64_t)v21);
  v19 = StateObserver.init(configuration:)(v21);
  sub_10000F690(v22);
  return v19;
}

uint64_t sub_1000F2440(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, __n128);
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, __n128);
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, __n128);
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, __n128);
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t, __n128);
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, uint64_t, __n128);
  __n128 v43;
  id v44;
  _BYTE v46[24];
  void *v47;
  void *v48;

  v2 = v1;
  v4 = objc_allocWithZone((Class)type metadata accessor for TabBarControllerDelegate(0));
  *(_QWORD *)(v2 + 72) = objc_msgSend(v4, "init", swift_retain().n128_f64[0]);
  *(_BYTE *)(v2 + 80) = 0;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_QWORD *)(v2 + 200) = 0;
  v5 = sub_10000EDC8(&qword_100483AC8);
  KeyPath = swift_getKeyPath(&unk_1003B6D98);
  if (qword_10047AD88 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v7 = qword_1004AF890;
  v8 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v5 + 272);
  v9 = swift_retain();
  *(_QWORD *)(v2 + 208) = v8(KeyPath, v7, v9);
  *(_QWORD *)(v2 + 216) = 0;
  *(_QWORD *)(v2 + 224) = 0;
  *(_QWORD *)(v2 + 232) = _swiftEmptyArrayStorage;
  *(_BYTE *)(v2 + 240) = 0;
  *(_QWORD *)(v2 + 248) = 0;
  v10 = sub_10000EDC8(&qword_10047ECF0);
  v11 = swift_getKeyPath(&unk_1003B6DC0);
  v12 = qword_1004AF890;
  v13 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v10 + 272);
  v14 = swift_retain();
  *(_QWORD *)(v2 + 256) = v13(v11, v12, v14);
  v15 = sub_10000EDC8(&qword_10047E5E0);
  v16 = swift_getKeyPath(&unk_1003B6DE8);
  v17 = qword_1004AF890;
  v18 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v15 + 272);
  v19 = swift_retain();
  *(_QWORD *)(v2 + 264) = v18(v16, v17, v19);
  v20 = swift_getKeyPath(&unk_1003B6E10);
  v21 = sub_10000EDC8((uint64_t *)&unk_10047E5C0);
  v22 = qword_1004AF890;
  v23 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v21 + 272);
  v24 = swift_retain();
  *(_QWORD *)(v2 + 272) = v23(v20, v22, v24);
  v25 = swift_getKeyPath(&unk_1003B6E38);
  v26 = sub_10000EDC8((uint64_t *)&unk_1004873C0);
  v27 = qword_1004AF890;
  v28 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v26 + 272);
  v29 = swift_retain();
  *(_QWORD *)(v2 + 280) = v28(v25, v27, v29);
  v30 = v2 + qword_100483860;
  v31 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v30, 1, 1, v31);
  v32 = qword_100483868;
  v33 = sub_10000EDC8(&qword_10047FAC8);
  v34 = swift_getKeyPath(&unk_1003B6E60);
  v35 = qword_1004AF890;
  v36 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v33 + 272);
  v37 = swift_retain();
  *(_QWORD *)(v2 + v32) = v36(v34, v35, v37);
  v38 = qword_100483870;
  v39 = swift_getKeyPath(&unk_1003B6E88);
  v40 = sub_10000EDC8((uint64_t *)&unk_100486710);
  v41 = qword_1004AF890;
  v42 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v40 + 272);
  v43 = swift_retain();
  *(_QWORD *)(v2 + v38) = v42(v39, v41, v43);
  *(_WORD *)(v2 + qword_100483878) = 0;
  *(_QWORD *)(v2 + qword_100483880) = 0;
  *(_QWORD *)(v2 + 64) = a1;
  *(_BYTE *)(v2 + 288) = 2;
  *(_DWORD *)(v2 + 289) = 0;
  v44 = a1;
  swift_release();
  v47 = &type metadata for Configurations.Default;
  v48 = &protocol witness table for Configurations.Default;
  return StateObserver.init(configuration:)(v46);
}

void sub_1000F2778()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  NSString v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  id v9;

  static DefaultsManager.registerDefaults()();
  v0 = (void *)objc_opt_self(NSUserDefaults);
  v1 = objc_msgSend(v0, "standardUserDefaults");
  v2 = Defaults.resetDefaultSettingsOnStart.unsafeMutableAddressor();
  v3 = *(_QWORD *)(v2 + 8);
  swift_bridgeObjectRetain(v3);
  v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3);
  LODWORD(v3) = objc_msgSend(v1, "BOOLForKey:", v4);

  if ((_DWORD)v3)
    static DefaultsManager.reset()();
  v5 = objc_msgSend(v0, "standardUserDefaults");
  v6 = String._bridgeToObjectiveC()();
  objc_msgSend(v5, "setBool:forKey:", 1, v6);

  v7 = objc_msgSend(v0, "standardUserDefaults");
  v8 = *(_QWORD *)(v2 + 8);
  swift_bridgeObjectRetain(v8);
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v8);
  objc_msgSend(v7, "setBool:forKey:", 0, v9);

}

uint64_t sub_1000F28D8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_1000F28FC()
{
  uint64_t v0;

  return sub_1001CDAF0(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000F2904()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

double sub_1000F2928(void (*a1)(char *, __n128), uint64_t a2)
{
  uint64_t v2;

  return sub_100138A6C(a1, a2, *(_QWORD *)(v2 + 16), *(_BYTE *)(v2 + 24));
}

void sub_1000F2934()
{
  sub_1000F119C(1);
}

uint64_t sub_1000F293C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000F294C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000F2954()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000F2978(uint64_t a1)
{
  uint64_t v1;

  sub_1000F17C0(a1, v1);
}

unint64_t sub_1000F2980(unint64_t result)
{
  if (result >= 4)
    return swift_errorRetain();
  return result;
}

uint64_t sub_1000F2990(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SessionState(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000F29CC()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  id v10;
  uint64_t v11;
  NSString v12;
  id v13;
  int v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  Swift::String v17;
  _OWORD v19[2];
  _BYTE v20[24];
  uint64_t v21;

  v0 = sub_10000EDC8((uint64_t *)&unk_10047E440);
  __chkstk_darwin(v0);
  v2 = (char *)v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)v19 - v8;
  v10 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v11 = *(_QWORD *)(Defaults.dateLastUse.unsafeMutableAddressor(v10) + 8);
  swift_bridgeObjectRetain(v11);
  v12 = String._bridgeToObjectiveC()();
  v13 = objc_msgSend(v10, "objectForKey:", v12, swift_bridgeObjectRelease(v11).n128_f64[0]);

  if (v13)
  {
    _bridgeAnyObjectToAny(_:)(v19, v13);
    swift_unknownObjectRelease(v13);
  }
  else
  {
    memset(v19, 0, sizeof(v19));
  }
  sub_10006C868((uint64_t)v19, (uint64_t)v20);
  if (!v21)
  {
    sub_100036600((uint64_t)v20, (uint64_t *)&unk_10047ED00);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, 1, 1, v3);
    goto LABEL_10;
  }
  v14 = swift_dynamicCast(v2, v20, (char *)&type metadata for Any + 8, v3, 6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v2, v14 ^ 1u, 1, v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
LABEL_10:
    sub_100036600((uint64_t)v2, (uint64_t *)&unk_10047E440);
    return 0;
  }
  v15 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 32))(v9, v2, v3);
  Date.init()(v15);
  Date.timeIntervalSince(_:)(v9);
  v16 = *(void (**)(char *, uint64_t))(v4 + 8);
  v16(v7, v3);
  if (qword_10047AA50 != -1)
    swift_once(&qword_10047AA50, sub_1000E12A4);
  v17._object = (void *)0x80000001003DF720;
  v17._countAndFlagsBits = 0xD000000000000023;
  Log.default(_:isPrivate:)(v17, 0);
  v16(v9, v3);
  return 1;
}

void sub_1000F2C9C()
{
  sub_100149B14();
}

uint64_t sub_1000F2CA4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1000F2CB4()
{
  uint64_t v0;

  sub_1000F1144(v0);
}

uint64_t sub_1000F2CD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000AA9D0(a1, a2, v2);
}

uint64_t sub_1000F2CE0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000F2D04@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD))(v2 + 16))(*a1, *((_QWORD *)a1 + 1));
  *a2 = result & 1;
  a2[1] = BYTE1(result) & 1;
  return result;
}

unint64_t sub_1000F2D40()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1004816E0;
  if (!qword_1004816E0)
  {
    v1 = sub_100018148(255, (unint64_t *)&qword_10047FB70, OS_dispatch_queue_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for OS_dispatch_queue, v1);
    atomic_store(result, (unint64_t *)&qword_1004816E0);
  }
  return result;
}

void sub_1000F2D98(_BYTE *a1)
{
  uint64_t v1;
  char v2;
  _BYTE *v3;

  v2 = a1[1];
  v3 = (_BYTE *)(v1 + qword_100483878);
  *v3 = *a1;
  v3[1] = v2;
  if (*(_BYTE *)(v1 + 240) == 1)
    sub_1000F184C(0);
}

uint64_t sub_1000F2DCC()
{
  uint64_t v0;

  return sub_1000F0260(v0);
}

const char *sub_1000F2DD4()
{
  return "kPersonHeightDebugViewEnabled";
}

id sub_1000F2DE0@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "kPersonHeightDebugViewEnabled");
  *a2 = (_BYTE)result;
  return result;
}

id sub_1000F2E10(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setKPersonHeightDebugViewEnabled:", *a1);
}

void sub_1000F2E24(char *a1)
{
  uint64_t v1;

  sub_1000F0180(a1, v1);
}

void sub_1000F2E3C()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 240) == 1)
    sub_1000F184C(0);
}

uint64_t sub_1000F2E6C()
{
  uint64_t v0;

  return sub_1000F009C(v0);
}

uint64_t sub_1000F2ED0(unsigned __int8 *a1, uint64_t (*a2)(_QWORD))
{
  return a2(*a1);
}

uint64_t sub_1000F2EF4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = (uint64_t *)swift_allocObject(v1, 216, 15);
  v4 = a1[3];
  v5 = a1[4];
  v6 = sub_1000A8224((uint64_t)a1, v4);
  __chkstk_darwin(v6);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v9 + 16))(v8);
  v10 = sub_1000F3978((uint64_t)v8, v3, v4, v5);
  sub_10000F690(a1);
  return v10;
}

double sub_1000F2FAC()
{
  uint64_t v0;
  uint64_t (*v1)(__n128);
  __n128 v2;
  uint64_t v3;
  void (*v4)(uint64_t (*)(unsigned __int8 *), _BYTE *, __n128);
  __n128 v5;
  double result;
  _QWORD v7[3];
  uint64_t v8;
  _BYTE v9[16];
  uint64_t (*v10)(uint64_t);
  uint64_t v11;

  v1 = *(uint64_t (**)(__n128))(**(_QWORD **)(v0 + 184) + 200);
  v2 = swift_retain();
  v3 = v1(v2);
  swift_release();
  v10 = sub_1000F3C00;
  v11 = v0;
  v4 = *(void (**)(uint64_t (*)(unsigned __int8 *), _BYTE *, __n128))(*(_QWORD *)v3 + 296);
  v5 = swift_retain();
  v4(sub_1000F3C08, v9, v5);
  swift_release();
  swift_release();
  v7[2] = sub_1000F3C2C;
  v8 = v0;
  swift_retain();
  swift_retain();
  StateValue.ifUpdated(_:)(sub_1000127BC, v7);
  swift_release();
  swift_release();
  swift_retain();
  StateValue.ifUpdated(_:)(sub_1000F3C30, v0);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t sub_1000F30A0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(_QWORD *);
  void (*v6)(_QWORD *, _QWORD);
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[8];

  if (result >= 2u)
  {
    v9[6] = v2;
    v9[7] = v3;
    v4 = *(_QWORD *)(a2 + 168);
    v5 = *(uint64_t (**)(_QWORD *))(*(_QWORD *)v4 + 400);
    swift_retain(v4);
    v6 = (void (*)(_QWORD *, _QWORD))v5(v9);
    v8 = *(_QWORD *)(v7 + 16);
    *(_QWORD *)(v7 + 16) = &_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(v8);
    v6(v9, 0);
    return swift_release(v4);
  }
  return result;
}

double sub_1000F3114(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(_QWORD *__return_ptr, __n128);
  __n128 v4;
  void *v5;
  _QWORD *v6;
  uint64_t (*v7)(void);
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD *v14;
  uint64_t *v15;
  void *v16;
  uint64_t v17;
  id v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t (*v26)(_QWORD *, __n128);
  __n128 v27;
  void (*v28)(_QWORD *, _QWORD, __n128);
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  double result;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _QWORD v38[4];
  char v39;
  _BYTE v40[24];

  v2 = v1;
  if (a1 == 0xC000000000000010)
  {
    v3 = *(void (**)(_QWORD *__return_ptr, __n128))(**(_QWORD **)(v1 + 152) + 144);
    v4 = swift_retain();
    v3(v38, v4);
    swift_release();
    v5 = (void *)v38[0];
    v6 = (_QWORD *)v38[1];

    if (v6)
    {
      v7 = *(uint64_t (**)(void))((swift_isaMask & *v6) + 0x2C0);
      v8 = v7();
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 368))(v8);
      swift_release();
      if (simd_float4x4.isAlmostHorizontal(marginInDegrees:)(10.0)
        && (unint64_t)(*(uint64_t (**)(void))((swift_isaMask & *v6) + 0x2F0))() < 3)
      {
        v9 = v7();
        *(double *)&v10 = (*(double (**)(uint64_t))(*(_QWORD *)v9 + 368))(v9);
        v36 = v11;
        v37 = v10;
        v34 = v13;
        v35 = v12;
        swift_release();
        *(_OWORD *)(v2 + 80) = v37;
        *(_OWORD *)(v2 + 96) = v36;
        *(_OWORD *)(v2 + 112) = v35;
        *(_OWORD *)(v2 + 128) = v34;
        *(_BYTE *)(v2 + 144) = 0;
        v14 = sub_1000F35E0();
        v15 = (uint64_t *)(v2 + 64);
        if (!v14)
        {

          v24 = v40;
          v23 = v2 + 64;
          goto LABEL_12;
        }
        v16 = v14;
        swift_beginAccess(v2 + 64, v40, 1, 0);
        v17 = *v15;
        *v15 = (uint64_t)_swiftEmptyArrayStorage;
        swift_bridgeObjectRelease(v17);
        swift_beginAccess(v2 + 64, v38, 33, 0);
        v18 = v16;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v18);
        v19 = *(_QWORD *)((*v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v20 = *(_QWORD *)((*v15 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v19 >= v20 >> 1)
        {
          v33 = *(_QWORD *)((*v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v19 + 1, 1);
          v19 = v33;
        }
        v21 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, v18);
        specialized Array._endMutation()(v21);
        swift_endAccess(v38);

      }
      else
      {

      }
    }
  }
  else
  {
    swift_beginAccess(v1 + 64, v40, 1, 0);
    v22 = *(_QWORD *)(v1 + 64);
    *(_QWORD *)(v1 + 64) = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(v22);
  }
  v23 = v2 + 64;
  v24 = &v39;
LABEL_12:
  swift_beginAccess(v23, v24, 0, 0);
  v25 = *(_QWORD *)(v2 + 64);
  v26 = *(uint64_t (**)(_QWORD *, __n128))(**(_QWORD **)(v2 + 168) + 400);
  swift_bridgeObjectRetain(v25);
  v27 = swift_retain();
  v28 = (void (*)(_QWORD *, _QWORD, __n128))v26(v38, v27);
  v30 = *(_QWORD *)(v29 + 16);
  *(_QWORD *)(v29 + 16) = v25;
  v31 = swift_bridgeObjectRelease(v30);
  v28(v38, 0, v31);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

void sub_1000F33A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  float v3;
  char v4;
  double v5;
  char v6;
  int v7;
  double v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  id v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(_BYTE *, __n128);
  __n128 v20;
  void (*v21)(_BYTE *, _QWORD, __n128);
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _BYTE v28[32];
  char v29[24];
  _BYTE v30[80];
  __n128 v31[4];
  char v32;
  __n128 v33[4];
  char v34;

  v2 = v1;
  v3 = *(float *)(v1 + 200);
  v4 = *(_BYTE *)(v1 + 204);
  sub_1000F3C80(a1 + 80, (uint64_t)v30);
  sub_1000F3C80((uint64_t)v30, (uint64_t)v33);
  if (v34 == 1)
  {
    if ((v4 & 1) != 0)
      return;
  }
  else
  {
    v5 = simd_float4x4.position.getter(v33[0], v33[1], v33[2], v33[3]);
    if ((v4 & 1) == 0 && vabds_f32(v3, *((float *)&v5 + 1)) <= 0.00000011921)
      return;
  }
  sub_1000F3C80((uint64_t)v30, (uint64_t)v31);
  v6 = v32;
  if ((v32 & 1) != 0)
  {
    v7 = 0;
  }
  else
  {
    v8 = simd_float4x4.position.getter(v31[0], v31[1], v31[2], v31[3]);
    v7 = HIDWORD(v8);
  }
  *(_DWORD *)(v1 + 200) = v7;
  *(_BYTE *)(v1 + 204) = v6;
  v9 = (uint64_t *)(v1 + 64);
  swift_beginAccess(v1 + 64, v29, 1, 0);
  v10 = *(_QWORD *)(v1 + 64);
  if ((unint64_t)v10 >> 62)
  {
    if (v10 < 0)
      v25 = *(_QWORD *)(v2 + 64);
    else
      v25 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)(v2 + 64));
    v26 = _CocoaArrayWrapper.endIndex.getter(v25);
    swift_bridgeObjectRelease(v10);
    if (v26 < 1)
      return;
  }
  else if (*(uint64_t *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10) < 1)
  {
    return;
  }
  if ((*(_BYTE *)(v2 + 144) & 1) == 0)
  {
    v11 = sub_1000F35E0();
    if (v11)
    {
      v12 = v11;
      v13 = *v9;
      *v9 = (uint64_t)_swiftEmptyArrayStorage;
      swift_bridgeObjectRelease(v13);
      swift_beginAccess(v2 + 64, v28, 33, 0);
      v14 = v12;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v14);
      v15 = *(_QWORD *)((*v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v16 = *(_QWORD *)((*v9 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v15 >= v16 >> 1)
      {
        v27 = *(_QWORD *)((*v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v15 + 1, 1);
        v15 = v27;
      }
      v17 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, v14);
      specialized Array._endMutation()(v17);
      swift_endAccess(v28);
      v18 = *(_QWORD *)(v2 + 64);
      v19 = *(uint64_t (**)(_BYTE *, __n128))(**(_QWORD **)(v2 + 168) + 400);
      swift_bridgeObjectRetain(v18);
      v20 = swift_retain();
      v21 = (void (*)(_BYTE *, _QWORD, __n128))v19(v28, v20);
      v23 = *(_QWORD *)(v22 + 16);
      *(_QWORD *)(v22 + 16) = v18;
      v24 = swift_bridgeObjectRelease(v23);
      v21(v28, 0, v24);

      swift_release();
    }
  }
}

_QWORD *sub_1000F35E0()
{
  uint64_t v0;
  _QWORD *v1;
  __n128 v2;
  __n128 v3;
  __n128 v4;
  __n128 v5;
  float v6;
  float v7;
  double v8;
  __n128 v9;
  float32x2_t *v10;
  __n128 v11;
  __n128 v12;
  __n128 v13;
  __n128 v14;
  __n128 v15;
  id v16;
  void (*v17)(_QWORD *__return_ptr, __n128);
  __n128 v18;
  void *v19;
  id v20;
  __n128 v21;
  __n128 v22;
  float32x4_t v23;
  __n128 v24;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  __n128 v32;
  __n128 v33;
  float32x4_t v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  _QWORD __src[64];
  _BYTE __dst[512];

  if ((*(_BYTE *)(v0 + 144) & 1) != 0)
    return 0;
  v2 = *(__n128 *)(v0 + 80);
  v3 = *(__n128 *)(v0 + 96);
  v4 = *(__n128 *)(v0 + 112);
  v5 = *(__n128 *)(v0 + 128);
  v6 = 10.0;
  v35 = v3;
  v37 = v2;
  v31 = v5;
  v33 = v4;
  if ((*(_BYTE *)(v0 + 204) & 1) == 0)
  {
    v7 = *(float *)(v0 + 200);
    v8 = simd_float4x4.position.getter(v2, v3, v4, v5);
    v5 = v31;
    v4 = v33;
    v3 = v35;
    v2 = v37;
    v6 = v7 - *((float *)&v8 + 1);
  }
  *(float *)(v0 + 212) = v6;
  v9.n128_f64[0] = simd_float4x4.position.getter(v2, v3, v4, v5);
  v29 = v9;
  v10 = (float32x2_t *)SIMD3<>.up.unsafeMutableAddressor(v9);
  v11.n128_u64[0] = (unint64_t)vadd_f32((float32x2_t)v29.n128_u64[0], vmul_f32(*v10, (float32x2_t)vdup_n_s32(0x3FA66666u)));
  v11.n128_f32[2] = v29.n128_f32[2] + (float)(v10[1].f32[0] * 1.3);
  v11.n128_u32[3] = 0;
  v12.n128_f64[0] = simd_float4x4.translated(to:)(v11, v37, v35, v33, v31);
  v28 = v13;
  v30 = v12;
  v26 = v15;
  v27 = v14;
  v16 = objc_allocWithZone((Class)type metadata accessor for WorldLineGuide(0));
  v1 = (_QWORD *)WorldLineGuide.init(guideType:end1:end2:primarySegmentEnd1:primarySegmentEnd2:backingPlanes:anchorState:)(3, 0, 0, 1, 0, 0, 1, 0, v37, v35, v33, v31, v30, v28, v27, v26, 1);
  v17 = *(void (**)(_QWORD *__return_ptr, __n128))(**(_QWORD **)(v0 + 192) + 144);
  v18 = swift_retain();
  v17(__src, v18);
  swift_release();
  memcpy(__dst, __src, sizeof(__dst));
  v19 = (void *)sub_10008F8B8();
  sub_100012C00((uint64_t)__dst);
  if (v19)
  {
    v20 = objc_msgSend(v19, "camera");

    objc_msgSend(v20, "transform");
    v36 = v22;
    v38 = v21;
    v32 = v24;
    v34 = v23;

    if (qword_10047AB68 != -1)
      swift_once(&qword_10047AB68, sub_10011E814);
    sub_10011CE70(v1, v38, v36, v34, v32);
  }
  return v1;
}

uint64_t sub_1000F3800()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[8]);
  swift_release(v0[19]);
  swift_release(v0[20]);
  swift_release(v0[21]);
  swift_release(v0[22]);
  swift_release(v0[23]);
  return swift_release(v0[24]);
}

_QWORD *sub_1000F3844()
{
  _QWORD *v0;

  v0 = (_QWORD *)StateObserver.deinit();
  swift_bridgeObjectRelease(v0[8]);
  swift_release(v0[19]);
  swift_release(v0[20]);
  swift_release(v0[21]);
  swift_release(v0[22]);
  swift_release(v0[23]);
  swift_release(v0[24]);
  return v0;
}

uint64_t sub_1000F38A0()
{
  _QWORD *v0;

  v0 = sub_1000F3844();
  return swift_deallocClassInstance(v0, 216, 15);
}

uint64_t type metadata accessor for VerticalGuidesInstrument(uint64_t a1)
{
  uint64_t result;

  result = qword_100483BC0;
  if (!qword_100483BC0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for VerticalGuidesInstrument);
  return result;
}

uint64_t sub_1000F38F8(uint64_t a1)
{
  _QWORD v2[11];

  v2[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2[1] = "A";
  v2[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[4] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[5] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[6] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[7] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[8] = &unk_1003B71E8;
  v2[9] = (char *)&value witness table for Builtin.Int32 + 64;
  v2[10] = (char *)&value witness table for Builtin.Int32 + 64;
  return swift_initClassMetadata2(a1, 256, 11, v2, a1 + 208);
}

uint64_t sub_1000F3978(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, __n128);
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t, __n128);
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, __n128);
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t, __n128);
  __n128 v35;
  uint64_t v41;
  _BYTE v43[40];
  _QWORD v44[5];

  v7 = *a2;
  v44[3] = a3;
  v44[4] = a4;
  v8 = sub_100068AE8(v44);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(v8, a1, a3);
  a2[8] = (uint64_t)_swiftEmptyArrayStorage;
  *((_OWORD *)a2 + 5) = 0u;
  *((_OWORD *)a2 + 6) = 0u;
  *((_OWORD *)a2 + 7) = 0u;
  *((_OWORD *)a2 + 8) = 0u;
  *((_BYTE *)a2 + 144) = 1;
  KeyPath = swift_getKeyPath(&unk_1003B7200);
  v10 = sub_10000EDC8(&qword_10047BBA0);
  v11 = qword_10047AD88;
  swift_retain();
  if (v11 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v12 = qword_1004AF890;
  v13 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v10 + 272);
  v14 = swift_retain();
  a2[19] = v13(KeyPath, v12, v14);
  v15 = sub_10000EDC8(&qword_10047BBA8);
  v16 = swift_getKeyPath(&unk_1003B7228);
  v17 = qword_1004AF890;
  v18 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v15 + 272);
  v19 = swift_retain();
  a2[20] = v18(v16, v17, v19);
  sub_10000EDC8(&qword_100483108);
  v20 = swift_getKeyPath(&unk_1003B7250);
  a2[21] = MutableStateValue.__allocating_init(_:_:)(v20, v7);
  v21 = sub_10000EDC8(&qword_100483110);
  v22 = swift_getKeyPath(&unk_1003B7278);
  v23 = qword_1004AF890;
  v24 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v21 + 272);
  v25 = swift_retain();
  a2[22] = v24(v22, v23, v25);
  v26 = swift_getKeyPath(&unk_1003B72A0);
  v27 = sub_10000EDC8(&qword_10047BBC8);
  v28 = qword_1004AF890;
  v29 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v27 + 272);
  v30 = swift_retain();
  a2[23] = v29(v26, v28, v30);
  v31 = swift_getKeyPath(&unk_1003B72C8);
  v32 = sub_10000EDC8(&qword_10047BBD0);
  v33 = qword_1004AF890;
  v34 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v32 + 272);
  v35 = swift_retain();
  a2[24] = v34(v31, v33, v35);
  *((_DWORD *)a2 + 50) = 0;
  *((_BYTE *)a2 + 204) = 1;
  __asm { FMOV            V0.2S, #10.0 }
  a2[26] = _D0;
  swift_release();
  sub_100068B24((uint64_t)v44, (uint64_t)v43);
  v41 = StateObserver.init(configuration:)(v43);
  sub_10000F690(v44);
  return v41;
}

uint64_t sub_1000F3C00(uint64_t a1)
{
  uint64_t v1;

  return sub_1000F30A0(a1, v1);
}

uint64_t sub_1000F3C08(unsigned __int8 *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(*a1);
}

void sub_1000F3C30(_OWORD *a1)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  _OWORD v5[8];
  _OWORD v6[2];

  v1 = a1[7];
  v5[6] = a1[6];
  v5[7] = v1;
  v6[0] = a1[8];
  *(_OWORD *)((char *)v6 + 9) = *(_OWORD *)((char *)a1 + 137);
  v2 = a1[3];
  v5[2] = a1[2];
  v5[3] = v2;
  v3 = a1[5];
  v5[4] = a1[4];
  v5[5] = v3;
  v4 = a1[1];
  v5[0] = *a1;
  v5[1] = v4;
  sub_1000F33A4((uint64_t)v5);
}

uint64_t sub_1000F3C80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000EDC8(&qword_10047BBE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000F3CC8(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 0x73746E657665;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x6D69547472617473;
    else
      v4 = 0x656D6954646E65;
    if (v3 == 1)
      v5 = 0xE900000000000065;
    else
      v5 = 0xE700000000000000;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v2 = 0x6D69547472617473;
      else
        v2 = 0x656D6954646E65;
      if (v6 == 1)
        v7 = 0xE900000000000065;
      else
        v7 = 0xE700000000000000;
      if (v4 != v2)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0xE600000000000000;
    v4 = 0x73746E657665;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE600000000000000;
  if (v4 != 0x73746E657665)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

uint64_t sub_1000F3DE0(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6C6576656CLL;
  else
    v3 = 0x6572757361656DLL;
  if (v2)
    v4 = 0xE700000000000000;
  else
    v4 = 0xE500000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x6C6576656CLL;
  else
    v5 = 0x6572757361656DLL;
  if ((a2 & 1) != 0)
    v6 = 0xE500000000000000;
  else
    v6 = 0xE700000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_1000F3E80(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x72656E726F63;
  else
    v3 = 1701274725;
  if (v2)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE600000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x72656E726F63;
  else
    v5 = 1701274725;
  if ((a2 & 1) != 0)
    v6 = 0xE600000000000000;
  else
    v6 = 0xE400000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_1000F3F18(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xEC00000074686769;
  v3 = 0x65486E6F73726550;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0xD000000000000010;
    else
      v5 = 0xD000000000000011;
    if (v4 == 1)
      v6 = 0x80000001003D68A0;
    else
      v6 = 0x80000001003D68C0;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0x65486E6F73726550;
  v6 = 0xEC00000074686769;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v3 = 0xD000000000000010;
    else
      v3 = 0xD000000000000011;
    if (v7 == 1)
      v2 = 0x80000001003D68A0;
    else
      v2 = 0x80000001003D68C0;
  }
LABEL_15:
  if (v5 == v3 && v6 == v2)
  {
    v8 = 1;
    v2 = v6;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v3, v2, 0);
  }
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v2);
  return v8 & 1;
}

BOOL sub_1000F4020(char a1, char a2)
{
  return dbl_1003B7750[a1] == dbl_1003B7750[a2];
}

uint64_t sub_1000F4044(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  id v6;
  void *v7;
  char v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  id v16;
  char v17;
  uint64_t v18;

  if ((unint64_t)a2 >> 62)
    goto LABEL_20;
  v4 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a2);
  for (; v4; v4 = _CocoaArrayWrapper.endIndex.getter(v18))
  {
    v5 = a2 & 0xC000000000000001;
    if ((a2 & 0xC000000000000001) == 0)
    {
      v6 = *(id *)(a2 + 32);
      goto LABEL_5;
    }
    while (1)
    {
      v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2);
LABEL_5:
      v7 = v6;
      sub_100018148(0, &qword_10047BCE8, SCNNode_ptr);
      v8 = static NSObject.== infix(_:_:)(v7, a1);

      if ((v8 & 1) != 0)
      {
LABEL_6:
        swift_bridgeObjectRelease(a2);
        return 1;
      }
      if (v4 == 1)
        goto LABEL_18;
      if (v5)
        break;
      v5 = 5;
      while (1)
      {
        v15 = v5 - 3;
        if (__OFADD__(v5 - 4, 1))
          break;
        v16 = *(id *)(a2 + 8 * v5);
        v17 = static NSObject.== infix(_:_:)(v16, a1);

        if ((v17 & 1) != 0)
          goto LABEL_6;
        ++v5;
        if (v15 == v4)
          goto LABEL_18;
      }
      __break(1u);
    }
    v10 = 1;
    while (1)
    {
      v11 = specialized _ArrayBuffer._getElementSlowPath(_:)(v10, a2);
      v12 = v10 + 1;
      if (__OFADD__(v10, 1))
        break;
      v13 = v11;
      v14 = static NSObject.== infix(_:_:)(v11, a1);
      swift_unknownObjectRelease(v13);
      if ((v14 & 1) != 0)
        goto LABEL_6;
      ++v10;
      if (v12 == v4)
        goto LABEL_18;
    }
    __break(1u);
LABEL_20:
    if (a2 < 0)
      v18 = a2;
    else
      v18 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
  }
LABEL_18:
  swift_bridgeObjectRelease(a2);
  return 0;
}

uint64_t sub_1000F41C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  id v6;
  void *v7;
  char v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  id v16;
  char v17;
  uint64_t v18;

  if ((unint64_t)a2 >> 62)
    goto LABEL_20;
  v4 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a2);
  for (; v4; v4 = _CocoaArrayWrapper.endIndex.getter(v18))
  {
    v5 = a2 & 0xC000000000000001;
    if ((a2 & 0xC000000000000001) == 0)
    {
      v6 = *(id *)(a2 + 32);
      goto LABEL_5;
    }
    while (1)
    {
      v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2);
LABEL_5:
      v7 = v6;
      type metadata accessor for WorldLineGuide(0);
      v8 = static NSObject.== infix(_:_:)(v7, a1);

      if ((v8 & 1) != 0)
      {
LABEL_6:
        swift_bridgeObjectRelease(a2);
        return 1;
      }
      if (v4 == 1)
        goto LABEL_18;
      if (v5)
        break;
      v5 = 5;
      while (1)
      {
        v15 = v5 - 3;
        if (__OFADD__(v5 - 4, 1))
          break;
        v16 = *(id *)(a2 + 8 * v5);
        v17 = static NSObject.== infix(_:_:)(v16, a1);

        if ((v17 & 1) != 0)
          goto LABEL_6;
        ++v5;
        if (v15 == v4)
          goto LABEL_18;
      }
      __break(1u);
    }
    v10 = 1;
    while (1)
    {
      v11 = specialized _ArrayBuffer._getElementSlowPath(_:)(v10, a2);
      v12 = v10 + 1;
      if (__OFADD__(v10, 1))
        break;
      v13 = v11;
      v14 = static NSObject.== infix(_:_:)(v11, a1);
      swift_unknownObjectRelease(v13);
      if ((v14 & 1) != 0)
        goto LABEL_6;
      ++v10;
      if (v12 == v4)
        goto LABEL_18;
    }
    __break(1u);
LABEL_20:
    if (a2 < 0)
      v18 = a2;
    else
      v18 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
  }
LABEL_18:
  swift_bridgeObjectRelease(a2);
  return 0;
}

uint64_t sub_1000F433C(uint64_t a1, uint64_t a2)
{
  return sub_1000F4360(a1, a2, &qword_100483F90, &qword_100483F98);
}

uint64_t sub_1000F4360(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  sub_1000A8224(a1, v7);
  v9 = sub_10000EDC8(a3);
  v10 = sub_100043310(a4, a3, (uint64_t)&protocol conformance descriptor for MeasurementEvent<A>);
  return dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(a2, v9, v10, v7, v8);
}

void sub_1000F43F0(ARFrame a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  __n128 v14;
  char v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  void (*v20)(void ***__return_ptr, __n128);
  __n128 v21;
  void *v22;
  void **v23;
  uint64_t (*v24)(uint64_t);
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  id v30;
  uint64_t (*v31)(void);
  _QWORD *v32;
  _QWORD *v33;
  __n128 v34;
  uint64_t v35;
  double (*v36)(__n128);
  __n128 v37;
  double v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t (*v43)(__n128);
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(void (*)(void **), uint64_t);
  void *v48;
  _QWORD *v49;
  void *v50;
  void **v51;
  _QWORD *v52;
  id v53;
  __n128 v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  id v64;
  id v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  void **v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  double *v75;
  void **aBlock;
  uint64_t v77;
  uint64_t (*v78)(uint64_t);
  void *v79;
  uint64_t (*v80)(_QWORD);
  _QWORD *v81;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v74 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v73 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchPredicate(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (uint64_t *)((char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100018148(0, (unint64_t *)&qword_10047FB70, OS_dispatch_queue_ptr);
  *v13 = static OS_dispatch_queue.main.getter(v14);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  v15 = _dispatchPreconditionTest(_:)(v13);
  v16 = (*(uint64_t (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
  if ((v15 & 1) == 0)
  {
    __break(1u);
LABEL_16:
    swift_once(&qword_10047A930, sub_100083368);
    goto LABEL_4;
  }
  MeasureCore.shared.unsafeMutableAddressor(v16);
  swift_retain();
  MeasureCore.didUpdate(with:)(a1);
  swift_release();
  if (!objc_msgSend((id)objc_opt_self(Gestalt), "jasperAvailable"))
    goto LABEL_6;
  if (qword_10047A930 != -1)
    goto LABEL_16;
LABEL_4:
  if (!*((_QWORD *)&xmmword_1004AF228 + 1))
  {
    __break(1u);
    goto LABEL_18;
  }
  v17 = *((id *)&xmmword_1004AF228 + 1);
  v18 = sub_1001CA894();

  OverlayMetalView.didUpdate(frame:)(a1);
LABEL_6:
  swift_retain();
  Synchronized.wrappedValue.getter(&aBlock, v19);
  swift_release();
  if (aBlock != 1)
    return;
  v66 = v8;
  v67 = v7;
  v68 = v5;
  v69 = v4;
  v20 = *(void (**)(void ***__return_ptr, __n128))(**(_QWORD **)(v2 + 128) + 144);
  v21 = swift_retain();
  v20(&aBlock, v21);
  swift_release();
  v23 = aBlock;
  v22 = (void *)v77;
  v24 = v78;
  v25 = v79;
  v71 = aBlock;
  v70 = v22;

  v26 = 0;
  v72 = v2;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  if (v23 && v22)
  {
    v30 = v70;
    v31 = *(uint64_t (**)(void))((swift_isaMask & *v70) + 0x2C0);
    v32 = v71;
    v33 = v30;
    v26 = v31();
    type metadata accessor for WorldAnchor(0);
    v34 = swift_retain();
    v27 = WorldAnchor.__allocating_init(anchor:shouldAutoUpdate:)(v35, 2, v34);
    v36 = *(double (**)(__n128))((swift_isaMask & *v32) + 0x200);
    v37 = swift_retain();
    v38 = v36(v37);
    v39 = objc_allocWithZone((Class)type metadata accessor for ScreenPoint(0));
    v29 = (void *)ScreenPoint.init(_:)(v38);
    v40 = (*(uint64_t (**)(void))((swift_isaMask & *v33) + 0x2F0))();
    v2 = v72;
    v41 = (*(uint64_t (**)(void))((swift_isaMask & *v33) + 0xD0))();
    v42 = objc_allocWithZone((Class)type metadata accessor for WorldPoint(0));
    v28 = (void *)WorldPoint.init(anchor:type:state:)(v27, v40, v41);

  }
  v43 = *(uint64_t (**)(__n128))(**(_QWORD **)(v2 + 128) + 200);
  v44 = swift_retain();
  v45 = v43(v44);
  swift_release();
  v46 = swift_allocObject(&unk_100446768, 32, 7);
  *(_QWORD *)(v46 + 16) = v29;
  *(_QWORD *)(v46 + 24) = v28;
  v47 = *(void (**)(void (*)(void **), uint64_t))(*(_QWORD *)v45 + 280);
  v65 = v28;
  v64 = v29;
  v47(sub_1000FFE70, v46);
  swift_release();
  swift_release();
  if (qword_10047A930 != -1)
    swift_once(&qword_10047A930, sub_100083368);
  v48 = (void *)*((_QWORD *)&xmmword_1004AF258 + 1);
  if (!*((_QWORD *)&xmmword_1004AF258 + 1))
  {
LABEL_18:
    __break(1u);
    return;
  }
  v63 = Contexts.PrivateQueue.init(_:)(*((_QWORD *)&xmmword_1004AF258 + 1));
  v49 = (_QWORD *)swift_allocObject(&unk_100446790, 48, 7);
  v49[2] = v23;
  v49[3] = v22;
  v49[4] = v27;
  v49[5] = v26;
  v80 = nullsub_1;
  v81 = v49;
  aBlock = _NSConcreteStackBlock;
  v77 = 1107296256;
  v78 = sub_10003ECA0;
  v79 = &unk_1004467A8;
  v50 = _Block_copy(&aBlock);
  swift_retain();
  v51 = v71;
  v52 = v70;
  v53 = v48;
  v54 = swift_retain();
  v55 = v73;
  static DispatchQoS.unspecified.getter(v54);
  v75 = _swiftEmptyArrayStorage;
  v56 = sub_10000C4B0((unint64_t *)&qword_10047D7F0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v57 = sub_10000EDC8((uint64_t *)&unk_10047E430);
  v58 = sub_100043310((unint64_t *)&qword_10047D800, (uint64_t *)&unk_10047E430, (uint64_t)&protocol conformance descriptor for [A]);
  v59 = v67;
  v60 = v57;
  v61 = v69;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v75, v60, v58, v69, v56);
  v62 = (void *)v63;
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v55, v59, v50);
  _Block_release(v50);
  swift_release();
  swift_release();

  (*(void (**)(char *, uint64_t))(v68 + 8))(v59, v61);
  (*(void (**)(char *, uint64_t))(v74 + 8))(v55, v66);
  swift_release();
  LOBYTE(aBlock) = 0;
  swift_retain();
  Synchronized.wrappedValue.setter(&aBlock);
  swift_release();
}

uint64_t sub_1000F4A00()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for UUID(0);
  sub_1000477C8(v0, qword_1004AF640);
  v1 = sub_1000362E8(v0, (uint64_t)qword_1004AF640);
  return UUID.init()(v1);
}

void sub_1000F4A48()
{
  uint64_t v0;

  swift_allocObject(v0, 577, 15);
  sub_1000F4A6C();
}

void sub_1000F4A6C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, __n128);
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, __n128);
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t, __n128);
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, __n128);
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t, __n128);
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t, __n128);
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t, __n128);
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, uint64_t, __n128);
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(uint64_t, uint64_t, __n128);
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(uint64_t, uint64_t, __n128);
  __n128 v57;
  uint64_t v58;
  simd_float4 v59;
  simd_float4 v60;
  simd_float4 v61;
  id v62;
  uint64_t v63;
  NSString v64;
  uint64_t v65;
  __n128 v66;
  char v67;

  v1 = v0;
  v2 = *v0;
  v67 = 0;
  v3 = sub_10000EDC8(&qword_10047E638);
  swift_allocObject(v3, 32, 7);
  v0[8] = Synchronized.init(wrappedValue:)(&v67);
  sub_10000EDC8(&qword_100483FA0);
  KeyPath = swift_getKeyPath(&unk_1003B74F8);
  v0[11] = MutableStateValue.__allocating_init(_:_:)(KeyPath, v2);
  v5 = swift_getKeyPath(&unk_1003B7520);
  v6 = sub_10000EDC8(&qword_100481BA0);
  if (qword_10047AD88 != -1)
    swift_once(&qword_10047AD88, sub_1001883CC);
  v7 = qword_1004AF890;
  v8 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v6 + 272);
  v9 = swift_retain();
  v1[12] = v8(v5, v7, v9);
  sub_10000EDC8(&qword_100483FA8);
  v10 = swift_getKeyPath(&unk_1003B7548);
  v1[13] = MutableStateValue.__allocating_init(_:_:)(v10, v2);
  sub_10000EDC8(&qword_100483FB0);
  v11 = swift_getKeyPath(&unk_1003B7570);
  v1[14] = MutableStateValue.__allocating_init(_:_:)(v11, v2);
  v12 = swift_getKeyPath(&unk_1003B7598);
  v13 = sub_10000EDC8((uint64_t *)&unk_1004873C0);
  v14 = qword_1004AF890;
  v15 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v13 + 272);
  v16 = swift_retain();
  v1[15] = v15(v12, v14, v16);
  sub_10000EDC8(&qword_100483FB8);
  v17 = swift_getKeyPath(&unk_1003B75C0);
  v1[16] = MutableStateValue.__allocating_init(_:_:)(v17, v2);
  v18 = swift_getKeyPath(&unk_1003B75E8);
  v19 = sub_10000EDC8((uint64_t *)&unk_10047E5C0);
  v20 = qword_1004AF890;
  v21 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v19 + 272);
  v22 = swift_retain();
  v1[17] = v21(v18, v20, v22);
  v23 = swift_getKeyPath(&unk_1003B7610);
  v24 = sub_10000EDC8(&qword_10047BBD0);
  v25 = qword_1004AF890;
  v26 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v24 + 272);
  v27 = swift_retain();
  v1[18] = v26(v23, v25, v27);
  v28 = swift_getKeyPath(&unk_1003B7638);
  v29 = sub_10000EDC8((uint64_t *)&unk_10047E5D0);
  v30 = qword_1004AF890;
  v31 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v29 + 272);
  v32 = swift_retain();
  v1[19] = v31(v28, v30, v32);
  v33 = sub_10000EDC8(&qword_10047E5E0);
  v34 = swift_getKeyPath(&unk_1003B7660);
  v35 = qword_1004AF890;
  v36 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v33 + 272);
  v37 = swift_retain();
  v1[20] = v36(v34, v35, v37);
  v38 = swift_getKeyPath(&unk_1003B7688);
  v39 = sub_10000EDC8((uint64_t *)&unk_100487000);
  v40 = qword_1004AF890;
  v41 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v39 + 272);
  v42 = swift_retain();
  v1[21] = v41(v38, v40, v42);
  v43 = swift_getKeyPath(&unk_1003B76B0);
  v44 = sub_10000EDC8(&qword_1004830F0);
  v45 = qword_1004AF890;
  v46 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v44 + 272);
  v47 = swift_retain();
  v1[22] = v46(v43, v45, v47);
  v48 = sub_10000EDC8(&qword_100483B58);
  v49 = swift_getKeyPath(&unk_1003B76D8);
  v50 = qword_1004AF890;
  v51 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v48 + 272);
  v52 = swift_retain();
  v1[23] = v51(v49, v50, v52);
  v53 = swift_getKeyPath(&unk_1003B7700);
  v54 = sub_10000EDC8(&qword_100482548);
  v55 = qword_1004AF890;
  v56 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v54 + 272);
  v57 = swift_retain();
  v1[24] = v56(v53, v55, v57);
  sub_10000EDC8(&qword_100483FC0);
  v58 = swift_getKeyPath(&unk_1003B7728);
  v1[25] = MutableStateValue.__allocating_init(_:_:)(v58, v2);
  *((_BYTE *)v1 + 208) = 0;
  *(_OWORD *)(v1 + 27) = 0u;
  v59 = matrix_identity_float4x4.columns[1];
  v60 = matrix_identity_float4x4.columns[2];
  v61 = matrix_identity_float4x4.columns[3];
  *((_OWORD *)v1 + 15) = matrix_identity_float4x4.columns[0];
  *((simd_float4 *)v1 + 16) = v59;
  *((simd_float4 *)v1 + 17) = v60;
  *((simd_float4 *)v1 + 18) = v61;
  *((_OWORD *)v1 + 19) = 0u;
  *(_DWORD *)((char *)v1 + 319) = 0;
  *((_OWORD *)v1 + 21) = 0u;
  *((_OWORD *)v1 + 22) = 0u;
  *((_OWORD *)v1 + 23) = 0u;
  *((_OWORD *)v1 + 24) = 0u;
  *((_OWORD *)v1 + 25) = 0u;
  *((_OWORD *)v1 + 26) = 0u;
  *((_OWORD *)v1 + 27) = 0u;
  *((_DWORD *)v1 + 112) = 0;
  *(_OWORD *)(v1 + 57) = 0u;
  *((_DWORD *)v1 + 118) = 1106247680;
  *((_OWORD *)v1 + 30) = 0u;
  *((_OWORD *)v1 + 31) = 0u;
  *((_OWORD *)v1 + 32) = xmmword_1003B39C0;
  v62 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v63 = *(_QWORD *)(Defaults.snapReticleToEdges.unsafeMutableAddressor() + 8);
  swift_bridgeObjectRetain(v63);
  v64 = String._bridgeToObjectiveC()();
  LOBYTE(v63) = objc_msgSend(v62, "BOOLForKey:", v64, swift_bridgeObjectRelease(v63).n128_f64[0]);

  *((_BYTE *)v1 + 528) = v63;
  v1[67] = 0xC000000000000000;
  *((_BYTE *)v1 + 544) = 3;
  v65 = sub_10000EDC8(&qword_10047E470);
  swift_allocObject(v65, *(unsigned int *)(v65 + 48), *(unsigned __int16 *)(v65 + 52));
  v1[69] = PassthroughSubject.init()(v66);
  *((_OWORD *)v1 + 35) = 0u;
  *((_BYTE *)v1 + 576) = 1;
  swift_release();
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000002DLL, 0x80000001003D7D70, "Measure/LinesInstrument.swift", 29, 2, 110, 0);
  __break(1u);
}

void sub_1000F4FB8(void (*a1)(_QWORD, __n128), uint64_t a2, uint64_t a3, int a4)
{
  void *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  void (*v29)(_QWORD, __n128);
  double *v30;
  _QWORD aBlock[6];

  LODWORD(v4) = a4;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v4 >= 2u)
  {
    v24 = swift_retain();
    goto LABEL_7;
  }
  v26 = v13;
  v28 = (int)v4;
  v16 = qword_10047A930;
  swift_retain();
  if (v16 != -1)
    swift_once(&qword_10047A930, sub_100083368);
  v27 = v8;
  v29 = a1;
  v17 = (void *)*((_QWORD *)&xmmword_1004AF258 + 1);
  if (*((_QWORD *)&xmmword_1004AF258 + 1))
  {
    v25 = Contexts.PrivateQueue.init(_:)(*((_QWORD *)&xmmword_1004AF258 + 1));
    aBlock[4] = sub_1000FA678;
    aBlock[5] = a3;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10003ECA0;
    aBlock[3] = &unk_1004465A0;
    v18 = _Block_copy(aBlock);
    v19 = v17;
    v20 = swift_retain();
    static DispatchQoS.unspecified.getter(v20);
    v30 = _swiftEmptyArrayStorage;
    v21 = sub_10000C4B0((unint64_t *)&qword_10047D7F0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v22 = sub_10000EDC8((uint64_t *)&unk_10047E430);
    v23 = sub_100043310((unint64_t *)&qword_10047D800, (uint64_t *)&unk_10047E430, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v30, v22, v23, v7, v21);
    v4 = (void *)v25;
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v10, v18);
    _Block_release(v18);

    (*(void (**)(char *, uint64_t))(v27 + 8))(v10, v7);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v26);
    v24 = swift_release();
    a1 = v29;
    LOBYTE(v4) = v28;
LABEL_7:
    *(_BYTE *)(a3 + 544) = (_BYTE)v4;
    LOBYTE(aBlock[0]) = 0;
    a1(aBlock, v24);
    swift_release();
    return;
  }
  swift_release();
  __break(1u);
}

uint64_t sub_1000F5234(uint64_t a1)
{
  void (*v1)(_QWORD *__return_ptr, __n128);
  __n128 v2;
  _QWORD v4[64];
  _QWORD __dst[64];

  v1 = *(void (**)(_QWORD *__return_ptr, __n128))(**(_QWORD **)(a1 + 144) + 144);
  v2 = swift_retain();
  v1(v4, v2);
  swift_release();
  memcpy(__dst, v4, sizeof(__dst));
  sub_1000F52B0((uint64_t)&off_10043BF40, __dst);
  return sub_100012C00((uint64_t)__dst);
}

void sub_1000F52B0(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(unint64_t *__return_ptr, __n128);
  __n128 v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(__n128);
  __n128 v21;
  uint64_t v22;
  void (*v23)(double (*)(uint64_t), uint64_t, __n128);
  __n128 v24;
  void (*v25)(unint64_t *__return_ptr, __n128);
  __n128 v26;
  unint64_t v27;
  uint64_t v28;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v30;
  void (*v31)(unint64_t *__return_ptr, __n128);
  __n128 v32;
  unint64_t v33;
  void (*v34)(unint64_t *__return_ptr, __n128);
  __n128 v35;
  unint64_t v36;
  uint64_t (*v37)(__n128);
  uint64_t (*v38)(__n128);
  uint64_t (*v39)(void);
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t (*v48)(void);
  uint64_t (*v49)(__n128);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  void *v55;
  uint64_t (*v56)(unint64_t *, __n128);
  __n128 v57;
  void (*v58)(unint64_t *, _QWORD);
  uint64_t v59;
  void *v60;
  void *v61;
  uint64_t v62;
  void (*v63)(unint64_t *, __n128);
  __n128 v64;
  void *v65;
  uint64_t v66;
  void *v67;
  id v68;
  id v69;
  char v70;
  void (*v71)(unint64_t *__return_ptr, __n128);
  __n128 v72;
  void (*v73)(unint64_t *__return_ptr, __n128);
  __n128 v74;
  unint64_t v75;
  double *v76;
  uint64_t v77;
  void (*v78)(unint64_t *, __n128);
  __n128 v79;
  uint64_t v80;
  __n128 v81;
  uint64_t *v82;
  _QWORD *v83;
  void (*v84)(unint64_t *__return_ptr, __n128);
  __n128 v85;
  unint64_t v86;
  uint64_t (*v87)(__n128);
  __n128 v88;
  uint64_t v89;
  void (*v90)(double (*)(uint64_t), uint64_t, __n128);
  __n128 v91;
  void (*v92)(unint64_t *__return_ptr, __n128);
  __n128 v93;
  unint64_t v94;
  uint64_t v95;
  char v96;
  unint64_t v97;
  uint64_t v98;
  void (*v99)(unint64_t *, __n128);
  __n128 v100;
  void (*v101)(unint64_t *__return_ptr, __n128);
  __n128 v102;
  unint64_t v103;
  void (*v104)(unint64_t *__return_ptr, __n128);
  __n128 v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t (*v114)(__n128);
  uint64_t (*v115)(__n128);
  __n128 v116;
  uint64_t (*v117)(__n128);
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  uint64_t (*v126)(void);
  uint64_t (*v127)(__n128);
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  uint64_t v132;
  void (*v133)(unint64_t *, __n128);
  __n128 v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  void **v138;
  void *v139;
  id v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  id v145;
  uint64_t v146;
  void **v147;
  void **v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  _BYTE v152[24];
  _BYTE v153[24];
  _BYTE v154[24];
  unint64_t v155;
  _BYTE v156[24];
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;

  v3 = v2;
  v150 = a2;
  v5 = type metadata accessor for DebugSessionCoordinator.RecordReplayState(0);
  v6 = __chkstk_darwin(v5);
  v8 = (void **)((char *)&v147 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = __chkstk_darwin(v6);
  v148 = (void **)((char *)&v147 - v10);
  __chkstk_darwin(v9);
  v147 = (void **)((char *)&v147 - v11);
  v12 = *(void (**)(unint64_t *__return_ptr, __n128))(**(_QWORD **)(v2 + 120) + 144);
  v13 = swift_retain();
  v12(&v157, v13);
  swift_release();
  v14 = v157;
  v15 = v158;
  v16 = v160;
  v17 = v161;
  swift_bridgeObjectRelease(v159);
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v14);
  *(_QWORD *)(v3 + 464) = v16;
  *(_DWORD *)(v3 + 472) = v17;
  v18 = *(_QWORD *)(a1 + 16);
  if (v18)
  {
    swift_bridgeObjectRetain(a1);
    v19 = 0;
    v149 = v5;
    v151 = v18;
    while (*(unsigned __int8 *)(v3 + 544) <= 1u)
    {
      if (*(_BYTE *)(a1 + v19 + 32) != 9)
      {
LABEL_100:
        swift_bridgeObjectRelease(a1);
        return;
      }
LABEL_9:
      v25 = *(void (**)(unint64_t *__return_ptr, __n128))(**(_QWORD **)(v3 + 88) + 144);
      v26 = swift_retain();
      v25(&v157, v26);
      swift_release();
      v27 = v157;
      sub_10001A810(v157);
      if (v27 == 0xC000000000000010)
      {
        if (qword_10047A938 != -1)
          swift_once(&qword_10047A938, sub_100083764);
        swift_retain();
        Synchronized.wrappedValue.getter(&v157, v28);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v157);
        v155 = v157;
        v157 = 0x8000000000000000;
        sub_1000BC69C(1, 7, isUniquelyReferenced_nonNull_native);
        v30 = v157;
        v157 = v155;
        swift_bridgeObjectRelease(v30);
        v155 = v157;
        Synchronized.wrappedValue.setter(&v155);
        swift_release();
      }
      v31 = *(void (**)(unint64_t *__return_ptr, __n128))(**(_QWORD **)(v3 + 88) + 144);
      v32 = swift_retain();
      v31(&v157, v32);
      swift_release();
      v33 = v157;
      sub_10001A810(v157);
      if (v33 == 0xC000000000000010)
      {
        v34 = *(void (**)(unint64_t *__return_ptr, __n128))(**(_QWORD **)(v3 + 88) + 144);
        v35 = swift_retain();
        v34(&v157, v35);
        swift_release();
        v36 = v157;
        if (!(v157 >> 62) || v157 >> 62 == 3 && (v157 == 0xC000000000000010 || v157 == 0xC000000000000008))
        {
          v37 = (uint64_t (*)(__n128))sub_100101D38();
          if (v37)
          {
            v38 = v37;
            v39 = *(uint64_t (**)(void))((swift_isaMask & *(_QWORD *)v37) + 0x250);
            v40 = v39();
            v41 = v40;
            if ((v40 & 0xC000000000000001) != 0)
            {
              v42 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v40);
            }
            else
            {
              if (!*(_QWORD *)((v40 & 0xFFFFFFFFFFFFF8) + 0x10))
              {
                __break(1u);
LABEL_103:
                __break(1u);
LABEL_104:
                __break(1u);
LABEL_105:
                __break(1u);
LABEL_106:
                __break(1u);
LABEL_107:
                __break(1u);
LABEL_108:
                __break(1u);
LABEL_109:
                __break(1u);
LABEL_110:
                __break(1u);
LABEL_111:
                __break(1u);
                JUMPOUT(0x1000F61A8);
              }
              v42 = *(id *)(v40 + 32);
            }
            v43 = v42;
            swift_bridgeObjectRelease(v41);
            sub_1000FEC3C(v38, v43);

            v44 = v39();
            v45 = v44;
            if ((v44 & 0xC000000000000001) != 0)
            {
              v46 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v44);
            }
            else
            {
              if (*(_QWORD *)((v44 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
                goto LABEL_103;
              v46 = *(id *)(v44 + 40);
            }
            v47 = v46;
            swift_bridgeObjectRelease(v45);
            sub_1000FEC3C(v38, v47);

            v48 = *(uint64_t (**)(void))((swift_isaMask & *(_QWORD *)v38) + 0xB8);
            v49 = v38;
            v50 = v48();
            v52 = v51;

            sub_100101018(v50, v52);
            swift_bridgeObjectRelease(v52);
            v53 = *(void **)(v3 + 312);
            *(_QWORD *)(v3 + 312) = 0;

            sub_100101E84();
            v5 = v149;
          }
        }
        sub_10001A810(v36);
        v18 = v151;
      }
      v54 = *(void **)(v3 + 224);
      *(_QWORD *)(v3 + 224) = 0;

      v55 = *(void **)(v3 + 312);
      *(_QWORD *)(v3 + 312) = 0;

      sub_10010099C();
      v56 = *(uint64_t (**)(unint64_t *, __n128))(**(_QWORD **)(v3 + 128) + 400);
      v57 = swift_retain();
      v58 = (void (*)(unint64_t *, _QWORD))v56(&v157, v57);
      v60 = *(void **)(v59 + 16);
      v61 = *(void **)(v59 + 24);
      *(_QWORD *)(v59 + 16) = 0;
      *(_QWORD *)(v59 + 24) = 0;

      v58(&v157, 0);
      swift_release();
      v62 = *(_QWORD *)(v3 + 88);
      v157 = 0xC000000000000000;
      v63 = *(void (**)(unint64_t *, __n128))(*(_QWORD *)v62 + 392);
      v64 = swift_retain();
      v63(&v157, v64);
      swift_release();
      if (qword_10047A930 != -1)
        swift_once(&qword_10047A930, sub_100083368);
      v65 = (void *)qword_1004AF240;
      if (qword_1004AF240)
      {
        v66 = qword_1004AF240 + qword_100487428;
        swift_beginAccess(qword_1004AF240 + qword_100487428, v156, 0, 0);
        sub_100036344(v66, (uint64_t)v8, type metadata accessor for DebugSessionCoordinator.RecordReplayState);
        if (swift_getEnumCaseMultiPayload(v8, v5) != 1)
        {
          v80 = (uint64_t)v8;
LABEL_90:
          sub_1000258F8(v80, type metadata accessor for DebugSessionCoordinator.RecordReplayState);
          goto LABEL_6;
        }
        v67 = *v8;
        v68 = v65;
        v69 = sub_1000E1D74();

        v70 = 3;
LABEL_32:
        sub_1000695D4(v70, 0, 0, 1);

      }
LABEL_6:
      if (v18 == ++v19)
        goto LABEL_100;
    }
    switch(*(_BYTE *)(a1 + v19 + 32))
    {
      case 4:
        v71 = *(void (**)(unint64_t *__return_ptr, __n128))(**(_QWORD **)(v3 + 88) + 144);
        v72 = swift_retain();
        v71(&v157, v72);
        swift_release();
        if (v157 == 0xC000000000000018)
          goto LABEL_6;
        sub_10001A810(v157);
        v73 = *(void (**)(unint64_t *__return_ptr, __n128))(**(_QWORD **)(v3 + 88) + 144);
        v74 = swift_retain();
        v73(&v157, v74);
        swift_release();
        v75 = v157;
        if (v157 == 0xC000000000000000 || v157 == 0xC000000000000008)
        {
          sub_1000FDA90(v150);
          v132 = *(_QWORD *)(v3 + 104);
          LOBYTE(v157) = 3;
          v133 = *(void (**)(unint64_t *, __n128))(*(_QWORD *)v132 + 392);
          v134 = swift_retain();
          v133(&v157, v134);
          sub_10001A810(v75);
LABEL_75:
          swift_release();
          goto LABEL_84;
        }
        if (v157 == 0xC000000000000010)
        {
          sub_1000FCDB8((uint64_t)v150);
          if (qword_10047AB68 != -1)
            swift_once(&qword_10047AB68, sub_10011E814);
          v76 = (double *)(qword_1004AF6B8 + OBJC_IVAR____TtC7Measure14MetricsManager_measurementState);
          swift_beginAccess(qword_1004AF6B8 + OBJC_IVAR____TtC7Measure14MetricsManager_measurementState, v152, 1, 0);
          *v76 = *v76 + 1.0;
          v77 = *(_QWORD *)(v3 + 104);
          LOBYTE(v157) = 3;
          v78 = *(void (**)(unint64_t *, __n128))(*(_QWORD *)v77 + 392);
          v79 = swift_retain();
          v78(&v157, v79);
          goto LABEL_75;
        }
        sub_10001A810(v157);
LABEL_84:
        if (qword_10047A930 != -1)
          swift_once(&qword_10047A930, sub_100083368);
        v141 = (void *)qword_1004AF240;
        if (!qword_1004AF240)
          goto LABEL_111;
        v142 = qword_1004AF240 + qword_100487428;
        swift_beginAccess(qword_1004AF240 + qword_100487428, v153, 0, 0);
        v143 = v142;
        v138 = v147;
        sub_100036344(v143, (uint64_t)v147, type metadata accessor for DebugSessionCoordinator.RecordReplayState);
        if (swift_getEnumCaseMultiPayload(v138, v5) == 1)
        {
          v144 = *v138;
          v145 = v141;
          v69 = sub_1000E1D74();

          v70 = 1;
          goto LABEL_32;
        }
LABEL_89:
        v80 = (uint64_t)v138;
        break;
      case 6:
        if (qword_10047A938 != -1)
          swift_once(&qword_10047A938, sub_100083764);
        LOBYTE(v157) = 1;
        swift_retain();
        Synchronized.wrappedValue.setter(&v157);
        v81 = swift_release();
        v82 = (uint64_t *)SnapType.standard.unsafeMutableAddressor(v81);
        v83 = v150;
        sub_1000F6208(*v82, (uint64_t)v150);
        sub_1000F8C6C();
        sub_1000F94A4(v83);
        v84 = *(void (**)(unint64_t *__return_ptr, __n128))(**(_QWORD **)(v3 + 88) + 144);
        v85 = swift_retain();
        v84(&v157, v85);
        swift_release();
        v86 = v157;
        sub_10001A810(v157);
        if (v86 == 0xC000000000000018)
          goto LABEL_5;
        if (qword_10047B190 != -1)
          swift_once(&qword_10047B190, sub_1001C81CC);
        if ((*(_BYTE *)(qword_1004AFD08 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 80) & 1) != 0)
          goto LABEL_110;
        *(double *)(v3 + 464) = SIMD2<>.init(_:)(*(double *)(qword_1004AFD08 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits), *(double *)(qword_1004AFD08+ OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits+ 8));
        *(_DWORD *)(v3 + 472) = 1106247680;
        v20 = *(uint64_t (**)(__n128))(**(_QWORD **)(v3 + 120) + 200);
        v21 = swift_retain();
        v22 = v20(v21);
        swift_release();
        v23 = *(void (**)(double (*)(uint64_t), uint64_t, __n128))(*(_QWORD *)v22 + 280);
        v24 = swift_retain();
        v23(sub_1000FFEC0, v3, v24);
        swift_release();
        swift_release();
LABEL_5:
        LOBYTE(v157) = 0;
        swift_retain();
        Synchronized.wrappedValue.setter(&v157);
        swift_release();
        goto LABEL_6;
      case 7:
        sub_1000FA884(1, (uint64_t)v150);
        if (qword_10047B190 != -1)
          swift_once(&qword_10047B190, sub_1001C81CC);
        if ((*(_BYTE *)(qword_1004AFD08 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 80) & 1) != 0)
          goto LABEL_109;
        *(double *)(v3 + 464) = SIMD2<>.init(_:)(*(double *)(qword_1004AFD08 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits), *(double *)(qword_1004AFD08+ OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits+ 8));
        *(_DWORD *)(v3 + 472) = 1106247680;
        v87 = *(uint64_t (**)(__n128))(**(_QWORD **)(v3 + 120) + 200);
        v88 = swift_retain();
        v89 = v87(v88);
        swift_release();
        v90 = *(void (**)(double (*)(uint64_t), uint64_t, __n128))(*(_QWORD *)v89 + 280);
        v91 = swift_retain();
        v90(sub_1000FF254, v3, v91);
        swift_release();
        swift_release();
        goto LABEL_6;
      case 8:
        v92 = *(void (**)(unint64_t *__return_ptr, __n128))(**(_QWORD **)(v3 + 88) + 144);
        v93 = swift_retain();
        v92(&v157, v93);
        swift_release();
        v94 = v157;
        sub_10001A810(v157);
        if (v94 == 0xC000000000000010)
        {
          if (qword_10047A938 != -1)
            swift_once(&qword_10047A938, sub_100083764);
          swift_retain();
          Synchronized.wrappedValue.getter(&v157, v95);
          v96 = swift_isUniquelyReferenced_nonNull_native(v157);
          v155 = v157;
          v157 = 0x8000000000000000;
          sub_1000BC69C(1, 7, v96);
          v97 = v157;
          v157 = v155;
          swift_bridgeObjectRelease(v97);
          v155 = v157;
          Synchronized.wrappedValue.setter(&v155);
          swift_release();
          v98 = *(_QWORD *)(v3 + 88);
          v157 = 0xC000000000000008;
          v99 = *(void (**)(unint64_t *, __n128))(*(_QWORD *)v98 + 392);
          v100 = swift_retain();
          v99(&v157, v100);
          swift_release();
        }
        v101 = *(void (**)(unint64_t *__return_ptr, __n128))(**(_QWORD **)(v3 + 88) + 144);
        v102 = swift_retain();
        v101(&v157, v102);
        swift_release();
        v103 = v157;
        if (v157 >> 62 && (v157 >> 62 != 3 || v157 != 0xC000000000000010 && v157 != 0xC000000000000008))
          goto LABEL_78;
        v104 = *(void (**)(unint64_t *__return_ptr, __n128))(**(_QWORD **)(*(_QWORD *)(v3 + 72) + 72)
                                                                             + 144);
        v105 = swift_retain();
        v104(&v157, v105);
        swift_release();
        v106 = v157;
        v107 = v158;
        v108 = v159;
        v155 = v157;
        swift_bridgeObjectRetain(v157);
        v109 = sub_10000EDC8(&qword_10047C018);
        v110 = sub_10000EDC8(&qword_10047C020);
        swift_dynamicCast(&v157, &v155, v109, v110, 7);
        v111 = v157;
        swift_bridgeObjectRelease(v108);
        swift_bridgeObjectRelease(v107);
        swift_bridgeObjectRelease(v106);
        if ((unint64_t)v111 >> 62)
        {
          if (v111 < 0)
            v146 = v111;
          else
            v146 = v111 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v111);
          v112 = _CocoaArrayWrapper.endIndex.getter(v146);
          swift_bridgeObjectRelease(v111);
        }
        else
        {
          v112 = *(_QWORD *)((v111 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        v5 = v149;
        if (v112)
        {
          v113 = v112 - 1;
          if (__OFSUB__(v112, 1))
            goto LABEL_104;
          if ((v111 & 0xC000000000000001) != 0)
          {
            v114 = (uint64_t (*)(__n128))specialized _ArrayBuffer._getElementSlowPath(_:)(v113, v111);
          }
          else
          {
            if ((v113 & 0x8000000000000000) != 0)
              goto LABEL_105;
            if (v113 >= *(_QWORD *)((v111 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_106;
            v114 = (uint64_t (*)(__n128))*(id *)(v111 + 8 * v113 + 32);
          }
          v115 = v114;
          v116 = swift_bridgeObjectRelease(v111);
          v117 = *(uint64_t (**)(__n128))((swift_isaMask & *(_QWORD *)v115) + 0x250);
          v118 = v117(v116);
          v119 = v118;
          if ((v118 & 0xC000000000000001) != 0)
          {
            v120 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v118);
          }
          else
          {
            if (!*(_QWORD *)((v118 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_107;
            v120 = *(id *)(v118 + 32);
          }
          v121 = v120;
          swift_bridgeObjectRelease(v119);
          sub_1000FEC3C(v115, v121);

          v122 = ((uint64_t (*)(void))v117)();
          v123 = v122;
          if ((v122 & 0xC000000000000001) != 0)
          {
            v124 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v122);
          }
          else
          {
            if (*(_QWORD *)((v122 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
              goto LABEL_108;
            v124 = *(id *)(v122 + 40);
          }
          v125 = v124;
          swift_bridgeObjectRelease(v123);
          sub_1000FEC3C(v115, v125);

          v126 = *(uint64_t (**)(void))((swift_isaMask & *(_QWORD *)v115) + 0xB8);
          v127 = v115;
          v128 = v126();
          v130 = v129;

          sub_100101018(v128, v130);
          swift_bridgeObjectRelease(v130);
          v131 = *(void **)(v3 + 312);
          *(_QWORD *)(v3 + 312) = 0;

          sub_100101E84();
          v5 = v149;
        }
        else
        {
          swift_bridgeObjectRelease(v111);
        }
        v18 = v151;
LABEL_78:
        sub_10001A810(v103);
        if (qword_10047A930 != -1)
          swift_once(&qword_10047A930, sub_100083368);
        v135 = (void *)qword_1004AF240;
        if (!qword_1004AF240)
          goto LABEL_6;
        v136 = qword_1004AF240 + qword_100487428;
        swift_beginAccess(qword_1004AF240 + qword_100487428, v154, 0, 0);
        v137 = v136;
        v138 = v148;
        sub_100036344(v137, (uint64_t)v148, type metadata accessor for DebugSessionCoordinator.RecordReplayState);
        if (swift_getEnumCaseMultiPayload(v138, v5) != 1)
          goto LABEL_89;
        v139 = *v138;
        v140 = v135;
        v69 = sub_1000E1D74();

        v70 = 4;
        goto LABEL_32;
      case 9:
        goto LABEL_9;
      default:
        goto LABEL_6;
    }
    goto LABEL_90;
  }
}

void sub_1000F61C0(void **a1, void *a2, void *a3)
{
  void *v6;
  id v7;
  id v8;

  v6 = *a1;
  v7 = a2;
  v8 = a3;

  *a1 = a2;
  a1[1] = a3;
}

void sub_1000F6208(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double v3;
  double v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void (*v20)(__n128);
  __n128 v21;
  int v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  uint64_t v29;
  uint64_t v30;
  uint64_t ObjectType;
  uint64_t v32;
  uint64_t v33;
  uint64_t Strong;
  uint64_t j;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(id *__return_ptr, __n128);
  __n128 v43;
  id v44;
  id v45;
  void *v46;
  char **v47;
  void (*v48)(_BYTE *__return_ptr, __n128);
  __n128 v49;
  void (*v50)(_BYTE *__return_ptr, __n128);
  __n128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  char v55;
  void (*v56)(_BYTE *__return_ptr, __n128);
  __n128 v57;
  void *v58;
  void (*v59)(_BYTE *__return_ptr, __n128);
  __n128 v60;
  void *v61;
  char v62;
  void (*v63)(_BYTE *__return_ptr, __n128);
  __n128 v64;
  uint64_t v65;
  void (*v66)(_BYTE *__return_ptr, __n128);
  __n128 v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(_BYTE *__return_ptr, __n128);
  __n128 v71;
  uint64_t v72;
  uint64_t v73;
  SEL *v74;
  uint64_t v75;
  void (*v76)(_BYTE *__return_ptr, __n128);
  __n128 v77;
  void *v78;
  uint64_t v79;
  __n128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  _QWORD *v87;
  void (*v88)(_BYTE *__return_ptr, __n128);
  __n128 v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t (*v92)(void);
  _QWORD *v93;
  _QWORD *v94;
  __n128 v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  void (*v100)(void);
  _QWORD *v101;
  void (*v102)(_QWORD);
  _QWORD *v103;
  void *v104;
  _QWORD *v105;
  void *v106;
  _QWORD *v107;
  uint64_t (*v108)(_BYTE *, __n128);
  __n128 v109;
  void (*v110)(_BYTE *, _QWORD);
  uint64_t v111;
  void *v112;
  void *v113;
  void (*v114)(_BYTE *__return_ptr, __n128);
  __n128 v115;
  void (*v116)(_BYTE *__return_ptr, __n128);
  __n128 v117;
  unint64_t v118;
  void (*v119)(_BYTE *__return_ptr, __n128);
  __n128 v120;
  id v121;
  void (*v122)(_BYTE *__return_ptr, __n128);
  __n128 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  double v127;
  __n128 v128;
  __n128 v129;
  uint64_t v130;
  float v131;
  char v132;
  __n128 *v133;
  __n128 v134;
  __n128 v135;
  __n128 v136;
  uint64_t v137;
  __n128 v138;
  uint64_t v139;
  double v140;
  float32x2_t v141;
  float v142;
  float v143;
  BOOL v145;
  _QWORD *v146;
  char v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  float32x2_t v155;
  __n128 v156;
  __n128 v157;
  __n128 v158;
  __n128 v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  __n128 v166;
  unint64_t v167;
  double v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unsigned __int8 v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  void (*v180)(__int128 *__return_ptr, __n128);
  __n128 v181;
  unint64_t v182;
  float v183;
  _QWORD *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  double v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  id v193;
  double v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  uint64_t v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  id v204;
  id v205;
  void (*v206)(_BYTE *__return_ptr, __n128);
  __n128 v207;
  uint64_t v208;
  void (*v209)(_BYTE *__return_ptr, __n128);
  __n128 v210;
  uint64_t v211;
  void (*v212)(_BYTE *__return_ptr, __n128);
  __n128 v213;
  void *v214;
  void *v215;
  double v216;
  double v217;
  uint64_t v218;
  uint64_t v219;
  double v220;
  double v221;
  double v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  void *v226;
  void (*v227)(_BYTE *__return_ptr, __n128);
  __n128 v228;
  void *v229;
  void *v230;
  void *v231;
  uint64_t v232;
  void (*v233)(_BYTE *__return_ptr, __n128);
  __n128 v234;
  uint64_t v235;
  uint64_t v236;
  __int128 v237;
  float *v238;
  float32x4_t v239;
  float32x4_t v240;
  float32x4_t v241;
  float32x4_t v242;
  float32x4_t v243;
  float32x4_t v244;
  _QWORD *v245;
  __n128 v246;
  __n128 v247;
  __n128 v248;
  __n128 v249;
  float32x4_t v250;
  double (*v251)(void);
  _QWORD *v252;
  __n128 v253;
  __n128 v254;
  __n128 v255;
  __n128 v256;
  float32x4_t v257;
  float32x4_t v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  uint64_t v263;
  unint64_t v264;
  _QWORD *v265;
  uint64_t v266;
  __n128 v267;
  _OWORD *v268;
  char v269;
  uint64_t v270;
  uint64_t v271;
  _OWORD *v272;
  char v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  char v279;
  uint64_t v280;
  uint64_t v281;
  __n128 v282;
  float32x4_t v283;
  float32x4_t v284;
  float32x4_t v285;
  float32x4_t v286;
  __n128 v287;
  float32x4_t v288;
  __n128 v289;
  float32x4_t v290;
  float32x4_t v291;
  int32x4_t v292;
  float32x2_t v293;
  float32x2_t v294;
  float32x4_t v295;
  __n128 v296;
  uint64_t v297;
  uint64_t v298;
  _QWORD *v299;
  void (*v300)(uint64_t);
  _QWORD *v301;
  __n128 v302;
  unint64_t v303;
  id v304;
  __n128 v305;
  uint64_t v306;
  __int128 v307;
  float32x2_t v308;
  uint64_t v309;
  uint64_t v310;
  unint64_t v311;
  unint64_t v312;
  unint64_t v313;
  unint64_t v314;
  __int128 *v315;
  char *v316;
  void *v317;
  id v318;
  char *v319;
  uint64_t v320;
  char *v321;
  double v322;
  uint64_t v323;
  unsigned __int8 v324;
  uint64_t v325;
  uint64_t v326;
  unint64_t v327;
  unint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  unint64_t v333;
  unint64_t v334;
  Swift::String v335;
  Swift::String v336;
  void *object;
  uint64_t v338;
  unint64_t v339;
  uint64_t v340;
  unint64_t v341;
  double v342;
  __n128 v343;
  uint64_t v344;
  uint64_t v345;
  double v346;
  _BYTE *v347;
  char v348;
  void *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  id v353;
  void *v354;
  uint64_t (*v355)(_BYTE *, __n128);
  __n128 v356;
  uint64_t v357;
  unint64_t v358;
  void (*v359)(_BYTE *, _QWORD);
  uint64_t v360;
  void *v361;
  void *v362;
  void (*v363)(uint64_t);
  _QWORD *v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  id v368;
  double v369;
  unint64_t v370;
  unint64_t v371;
  unint64_t v372;
  __int128 v373;
  __n128 v374;
  __n128 v375;
  __n128 v376;
  __n128 v377;
  float32x4_t v378;
  __n128 v379;
  __n128 v380;
  float32x4_t v381;
  float32x4_t v382;
  float32x4_t v383;
  __n128 v384;
  __n128 v385;
  __n128 v386;
  __n128 v387;
  void *v388;
  _QWORD *v389;
  __int128 v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  float32x4_t v394;
  __n128 v395;
  __n128 v396;
  __n128 v397;
  __n128 v398;
  __n128 v399;
  __n128 v400;
  __n128 v401;
  __n128 v402;
  _QWORD v403[2];
  unint64_t v404;
  unint64_t v405;
  unint64_t v406;
  unint64_t v407;
  unsigned __int8 v408;
  __int128 v409;
  __int128 v410;
  __int128 v411;
  __int128 v412;
  char v413;
  id v414[18];
  _BYTE v415[152];
  _BYTE v416[152];
  __int128 v417;
  __n128 v418;
  __n128 v419;
  __n128 v420;
  __n128 v421;
  unint64_t v422;
  unint64_t v423;
  unint64_t v424;
  uint64_t v425;
  unint64_t v426;
  unint64_t v427;
  char v428;
  uint64_t v429;
  __int128 v430;
  __n128 v431;
  __n128 v432;
  __n128 v433;
  __n128 v434;
  __int128 v435;
  __int128 v436;
  __int128 v437;
  __int128 v438;
  char v439;
  uint64_t v440;
  _BYTE v441[152];
  _BYTE v442[152];
  _OWORD v443[9];
  double *v444;
  unint64_t v445;
  id v446[20];
  unint64_t v447;
  unint64_t v448;
  unint64_t v449;
  unint64_t v450;
  unsigned __int8 v451;
  __int128 v452;
  __int128 v453;
  __int128 v454;
  __int128 v455;
  __int128 v456;
  __int128 v457;
  __int128 v458;
  __int128 v459;
  __int128 v460;
  unint64_t v461;
  unint64_t v462;
  unint64_t v463;
  unint64_t v464;
  unsigned __int8 v465;
  uint64_t v466;
  _OWORD v467[2];
  uint64_t v468;
  _BYTE v469[32];
  _BYTE v470[24];
  _OWORD v471[4];
  char v472;
  _BYTE v473[48];
  _BYTE v474[48];
  _BYTE v475[48];
  __int128 v476;
  __int128 v477;
  __int128 v478;
  __int128 v479;
  char v480;
  __int128 v481;
  __int128 v482;
  __int128 v483;
  __int128 v484;
  char v485;
  __int128 v486;
  __int128 v487;
  __int128 v488;
  __int128 v489;
  __int128 v490;
  __int128 v491;
  __int128 v492;
  char v493;
  _QWORD v494[2];
  char v495;

  v5 = v2;
  v391 = a1;
  v7 = type metadata accessor for ARCamera.TrackingState.Reason(0);
  v8 = *(unint64_t **)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v365 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v389 = (uint64_t *)((char *)&v365 - v12);
  v13 = type metadata accessor for ARCamera.TrackingState(0);
  __chkstk_darwin(v13);
  v15 = (_OWORD *)((char *)&v365 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = type metadata accessor for SessionState(0);
  __chkstk_darwin(v16);
  v18 = (uint64_t)&v365 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v390 = a2;
  v19 = (void *)sub_10008F8B8();
  if (v19)
  {
    v388 = v19;

    v20 = *(void (**)(__n128))(**(_QWORD **)(v5 + 136) + 144);
    v21 = swift_retain();
    v20(v21);
    swift_release();
    sub_100036344(v18 + *(int *)(v16 + 20), (uint64_t)v15, (uint64_t (*)(_QWORD))&type metadata accessor for ARCamera.TrackingState);
    sub_1000258F8(v18, type metadata accessor for SessionState);
    v22 = ((uint64_t (*)(_OWORD *, uint64_t, uint64_t))v8[6])(v15, 2, v7);
    v392 = v5;
    if (v22)
    {
      if (v22 == 1)
      {
        sub_1000FA698();
        sub_1000258F8((uint64_t)v15, (uint64_t (*)(_QWORD))&type metadata accessor for ARCamera.TrackingState);
        return;
      }
      swift_retain();
      StateValue.wrappedValue.getter(v446, v25);
      swift_release();
      if ((BYTE3(v446[0]) & 1) != 0 || *(_BYTE *)(v5 + 208) != 1)
      {
LABEL_38:
        v18 = (uint64_t)v442;
        v15 = v441;
        v445 = 0;
        v42 = *(void (**)(id *__return_ptr, __n128))(**(_QWORD **)(v5 + 128) + 144);
        v43 = swift_retain();
        v42(v446, v43);
        swift_release();
        v44 = v446[1];
        v45 = v446[2];
        v389 = v446[3];

        v46 = (void *)objc_opt_self(Gestalt);
        v47 = &selRef_renderer_didAddNode_forAnchor_;
        if (objc_msgSend(v46, "jasperAvailable"))
        {
          sub_100047238((uint64_t)v441);
          sub_100012C58((uint64_t)v441, (uint64_t)v442, (uint64_t *)&unk_100486700);
          *(_QWORD *)&v442[136] = 0;
          *(_QWORD *)&v442[144] = _swiftEmptyArrayStorage;
          v444 = _swiftEmptyArrayStorage;
          v443[6] = *(_OWORD *)&v442[96];
          v443[7] = *(_OWORD *)&v442[112];
          v443[2] = *(_OWORD *)&v442[32];
          v443[3] = *(_OWORD *)&v442[48];
          v443[4] = *(_OWORD *)&v442[64];
          v443[5] = *(_OWORD *)&v442[80];
          v443[0] = *(_OWORD *)v442;
          v443[1] = *(_OWORD *)&v442[16];
          v443[8] = *(unint64_t *)&v442[128];
          nullsub_1(v443);
        }
        else
        {
          sub_1000FFA34((uint64_t)v443);
        }
        sub_100012C58((uint64_t)v443, (uint64_t)v446, &qword_100483F60);
        sub_100012C58((uint64_t)v446, (uint64_t)v443, &qword_100483F60);
        v48 = *(void (**)(_BYTE *__return_ptr, __n128))(**(_QWORD **)(v5 + 152) + 144);
        v49 = swift_retain();
        v48(v442, v49);
        swift_release();
        v490 = *(_OWORD *)&v442[64];
        v491 = *(_OWORD *)&v442[80];
        v492 = *(_OWORD *)&v442[96];
        v493 = v442[112];
        v486 = *(_OWORD *)v442;
        v487 = *(_OWORD *)&v442[16];
        v488 = *(_OWORD *)&v442[32];
        v489 = *(_OWORD *)&v442[48];
        v379.n128_u32[0] = sub_10007089C();
        v378.i64[0] = (uint64_t)v46;
        if ((v379.n128_u8[0] & 1) != 0)
          goto LABEL_53;
        if (!objc_msgSend(v46, "jasperAvailable"))
          goto LABEL_50;
        v50 = *(void (**)(_BYTE *__return_ptr, __n128))(**(_QWORD **)(v5 + 200) + 144);
        v51 = swift_retain();
        v50(v441, v51);
        swift_release();
        *(_OWORD *)&v442[96] = *(_OWORD *)&v441[96];
        *(_OWORD *)&v442[112] = *(_OWORD *)&v441[112];
        *(_OWORD *)&v442[128] = *(_OWORD *)&v441[128];
        *(_QWORD *)&v442[144] = *(_QWORD *)&v441[144];
        *(_OWORD *)&v442[32] = *(_OWORD *)&v441[32];
        *(_OWORD *)&v442[48] = *(_OWORD *)&v441[48];
        *(_OWORD *)&v442[64] = *(_OWORD *)&v441[64];
        *(_OWORD *)&v442[80] = *(_OWORD *)&v441[80];
        *(_OWORD *)v442 = *(_OWORD *)v441;
        *(_OWORD *)&v442[16] = *(_OWORD *)&v441[16];
        v476 = *(_OWORD *)v441;
        v477 = *(_OWORD *)&v441[16];
        v478 = *(_OWORD *)&v441[32];
        v479 = *(_OWORD *)&v441[48];
        v52 = *(_OWORD *)&v441[64];
        v53 = *(_OWORD *)&v441[80];
        v54 = *(_OWORD *)&v441[96];
        v386.n128_u64[0] = *(_QWORD *)&v441[120];
        v387.n128_u64[0] = *(_QWORD *)&v441[112];
        v55 = v441[128];
        *(_QWORD *)((char *)v471 + 15) = *(_QWORD *)&v441[144];
        v471[0] = *(_OWORD *)&v442[129];
        sub_100012C58((uint64_t)v442, (uint64_t)&v430, (uint64_t *)&unk_100486700);
        if (sub_1000127D0((uint64_t *)&v430) == 1)
        {
          sub_100012BC4((uint64_t)v442);
        }
        else
        {
          *(_OWORD *)v441 = v476;
          *(_OWORD *)&v441[16] = v477;
          *(_OWORD *)&v441[32] = v478;
          *(_OWORD *)&v441[48] = v479;
          *(_OWORD *)&v441[64] = v52;
          v385.n128_u64[0] = *((_QWORD *)&v53 + 1);
          *(_OWORD *)&v441[80] = v53;
          *(_OWORD *)&v441[96] = v54;
          *(_QWORD *)&v441[112] = v387.n128_u64[0];
          *(_QWORD *)&v441[120] = v386.n128_u64[0];
          v441[128] = v55;
          *(_QWORD *)&v441[144] = *(_QWORD *)((char *)v471 + 15);
          *(_OWORD *)&v441[129] = v471[0];
          sub_100012BC4((uint64_t)v441);
          if ((v55 & 1) == 0)
          {
            v380.n128_u64[0] = *((_QWORD *)&v54 + 1);
            v382.i64[0] = *((_QWORD *)&v52 + 1);
            v381.i64[0] = v52;
            v383.i64[0] = v53;
            v384.n128_u64[0] = v54;
            v5 = v392;
            v56 = *(void (**)(_BYTE *__return_ptr, __n128))(**(_QWORD **)(v392 + 200) + 144);
            v57 = swift_retain();
            v56(v415, v57);
            swift_release();
            *(_OWORD *)&v416[96] = *(_OWORD *)&v415[96];
            *(_OWORD *)&v416[112] = *(_OWORD *)&v415[112];
            *(_OWORD *)&v416[32] = *(_OWORD *)&v415[32];
            *(_OWORD *)&v416[48] = *(_OWORD *)&v415[48];
            *(_OWORD *)&v416[128] = *(_OWORD *)&v415[128];
            *(_QWORD *)&v416[144] = *(_QWORD *)&v415[144];
            *(_OWORD *)&v416[64] = *(_OWORD *)&v415[64];
            *(_OWORD *)&v416[80] = *(_OWORD *)&v415[80];
            *(_OWORD *)v416 = *(_OWORD *)v415;
            *(_OWORD *)&v416[16] = *(_OWORD *)&v415[16];
            v58 = *(void **)v415;
            v18 = (uint64_t)v442;
            v458 = *(_OWORD *)&v416[104];
            v459 = *(_OWORD *)&v416[120];
            v460 = *(_OWORD *)&v416[136];
            v454 = *(_OWORD *)&v416[40];
            v455 = *(_OWORD *)&v416[56];
            v456 = *(_OWORD *)&v416[72];
            v457 = *(_OWORD *)&v416[88];
            v452 = *(_OWORD *)&v416[8];
            v453 = *(_OWORD *)&v416[24];
            sub_100012C58((uint64_t)v416, (uint64_t)&v417, (uint64_t *)&unk_100486700);
            if (sub_1000127D0((uint64_t *)&v417) != 1)
            {
              v302.n128_u64[0] = v381.i64[0];
              v302.n128_u64[1] = v382.i64[0];
              v377 = v302;
              *(_OWORD *)&v415[88] = v457;
              *(_OWORD *)&v415[104] = v458;
              *(_OWORD *)&v415[120] = v459;
              *(_OWORD *)&v415[136] = v460;
              *(_OWORD *)&v415[24] = v453;
              *(_OWORD *)&v415[40] = v454;
              v302.n128_u64[0] = v383.i64[0];
              v303 = v385.n128_u64[0];
              v302.n128_u64[1] = v385.n128_u64[0];
              v376 = v302;
              *(_OWORD *)&v415[56] = v455;
              v302.n128_u64[0] = v384.n128_u64[0];
              v302.n128_u64[1] = v380.n128_u64[0];
              v375 = v302;
              *(_OWORD *)&v415[72] = v456;
              v302.n128_u64[0] = v387.n128_u64[0];
              v302.n128_u64[1] = v386.n128_u64[0];
              v374 = v302;
              *(_QWORD *)v415 = v58;
              *(_OWORD *)&v415[8] = v452;
              v304 = v58;
              sub_100012BC4((uint64_t)v415);
              type metadata accessor for MeasureCamera(0);
              v305.n128_f64[0] = simd_float4x4.position.getter(v377, v376, v375, v374);
              *(double *)&v307 = static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)(v306, v305, *(__n128 *)(v390 + 176), *(__n128 *)(v390 + 192), *(__n128 *)(v390 + 208), *(__n128 *)(v390 + 224), *(double *)(v390 + 32));
              v308 = vsub_f32(*(float32x2_t *)&v307, *(float32x2_t *)(v5 + 464));
              v15 = v441;
              if (vaddv_f32(vmul_f32(v308, v308)) < 900.0)
              {
                v481 = 0u;
                v482 = 0u;
                v483 = 0u;
                v484 = 0u;
                v485 = 1;
                v373 = v307;
                v309 = type metadata accessor for WorldAnchor(0);
                swift_allocObject(v309, *(unsigned int *)(v309 + 48), *(unsigned __int16 *)(v309 + 52));
                v310 = WorldAnchor.init(transform:viewTransform:plane:confidence:shouldAutoUpdate:viewTarget:)(&v481, 0, 1, &v481, v377, v376, v375, v374, 0.0);
                sub_1000FBA24(v310, 8, 3, *(double *)&v373);
                sub_1000FB874(v5, (uint64_t)&v447, v377, v376, v375, v374);
                v311 = v447;
                v312 = v448;
                v313 = v449;
                v314 = v450;
                v377.n128_u32[0] = v451;
                swift_release();
                sub_100012C58((uint64_t)v446, (uint64_t)&v394, &qword_100483F60);
                if (sub_1000FFB04((uint64_t)&v394) == 1)
                {

                  goto LABEL_236;
                }
                v403[0] = v304;
                v404 = v311;
                v405 = v312;
                v406 = v313;
                v407 = v314;
                v408 = v377.n128_u8[0];
                *(_QWORD *)&v409 = v381.i64[0];
                *((_QWORD *)&v409 + 1) = v382.i64[0];
                *(_QWORD *)&v410 = v383.i64[0];
                *((_QWORD *)&v410 + 1) = v303;
                *(_QWORD *)&v411 = v384.n128_u64[0];
                *((_QWORD *)&v411 + 1) = v380.n128_u64[0];
                *(_QWORD *)&v412 = v387.n128_u64[0];
                *((_QWORD *)&v412 + 1) = v386.n128_u64[0];
                v413 = 0;
                nullsub_1(v403);
                sub_100012C58((uint64_t)v443, (uint64_t)v414, (uint64_t *)&unk_100486700);
                sub_100012810(v414);
                v315 = (__int128 *)v403;
LABEL_235:
                sub_100012C58((uint64_t)v315, (uint64_t)v443, (uint64_t *)&unk_100486700);
                goto LABEL_236;
              }

              v46 = (void *)v378.i64[0];
              v47 = &selRef_renderer_didAddNode_forAnchor_;
LABEL_50:
              if (!objc_msgSend(v46, v47[43]))
              {
LABEL_53:
                v62 = 0;
                goto LABEL_54;
              }
              v59 = *(void (**)(_BYTE *__return_ptr, __n128))(**(_QWORD **)(v5 + 200) + 144);
              v60 = swift_retain();
              v59(v441, v60);
              swift_release();
              *(_OWORD *)&v442[96] = *(_OWORD *)&v441[96];
              *(_OWORD *)&v442[112] = *(_OWORD *)&v441[112];
              *(_OWORD *)&v442[32] = *(_OWORD *)&v441[32];
              *(_OWORD *)&v442[48] = *(_OWORD *)&v441[48];
              *(_OWORD *)&v442[128] = *(_OWORD *)&v441[128];
              *(_QWORD *)&v442[144] = *(_QWORD *)&v441[144];
              *(_OWORD *)&v442[64] = *(_OWORD *)&v441[64];
              *(_OWORD *)&v442[80] = *(_OWORD *)&v441[80];
              *(_OWORD *)v442 = *(_OWORD *)v441;
              *(_OWORD *)&v442[16] = *(_OWORD *)&v441[16];
              v61 = *(void **)v441;
              v399 = *(__n128 *)&v442[88];
              v400 = *(__n128 *)&v442[104];
              v401 = *(__n128 *)&v442[120];
              v402 = *(__n128 *)&v442[136];
              v396 = *(__n128 *)&v442[40];
              v397 = *(__n128 *)&v442[56];
              v398 = *(__n128 *)&v442[72];
              v394 = *(float32x4_t *)&v442[8];
              v395 = *(__n128 *)&v442[24];
              sub_100012C58((uint64_t)v442, (uint64_t)&v452, (uint64_t *)&unk_100486700);
              if (sub_1000127D0((uint64_t *)&v452) == 1)
              {
                sub_100012BC4((uint64_t)v442);
                goto LABEL_53;
              }
              *(__n128 *)&v416[88] = v399;
              *(__n128 *)&v416[104] = v400;
              *(__n128 *)&v416[120] = v401;
              *(__n128 *)&v416[136] = v402;
              *(__n128 *)&v416[24] = v395;
              *(__n128 *)&v416[40] = v396;
              *(__n128 *)&v416[56] = v397;
              *(__n128 *)&v416[72] = v398;
              *(_QWORD *)v416 = v61;
              *(float32x4_t *)&v416[8] = v394;
              v121 = v61;
              sub_100012BC4((uint64_t)v416);
              v481 = 0u;
              v482 = 0u;
              v483 = 0u;
              v484 = 0u;
              v485 = 1;
              v122 = *(void (**)(_BYTE *__return_ptr, __n128))(**(_QWORD **)(v5 + 200) + 144);
              v123 = swift_retain();
              v122(v415, v123);
              swift_release();
              *(_OWORD *)&v441[96] = *(_OWORD *)&v415[96];
              *(_OWORD *)&v441[112] = *(_OWORD *)&v415[112];
              *(_OWORD *)&v441[128] = *(_OWORD *)&v415[128];
              *(_QWORD *)&v441[144] = *(_QWORD *)&v415[144];
              *(_OWORD *)&v441[32] = *(_OWORD *)&v415[32];
              *(_OWORD *)&v441[48] = *(_OWORD *)&v415[48];
              *(_OWORD *)&v441[64] = *(_OWORD *)&v415[64];
              *(_OWORD *)&v441[80] = *(_OWORD *)&v415[80];
              *(_OWORD *)v441 = *(_OWORD *)v415;
              *(_OWORD *)&v441[16] = *(_OWORD *)&v415[16];
              v124 = *(_QWORD *)&v415[144];
              swift_bridgeObjectRetain(*(_QWORD *)&v415[144]);
              sub_100012BC4((uint64_t)v441);
              v125 = *(_QWORD *)(v124 + 16);
              if (!v125)
              {

                swift_bridgeObjectRelease(v124);
LABEL_118:
                v62 = 0;
                v5 = v392;
LABEL_54:
                v63 = *(void (**)(_BYTE *__return_ptr, __n128))(**(_QWORD **)(v5 + 176) + 144);
                v64 = swift_retain();
                v63(v442, v64);
                swift_release();
                swift_bridgeObjectRelease(*(_QWORD *)v442);
                v65 = *(_QWORD *)&v442[8];
                swift_bridgeObjectRelease(*(_QWORD *)&v442[16]);
                v66 = *(void (**)(_BYTE *__return_ptr, __n128))(**(_QWORD **)(v5 + 176) + 144);
                v67 = swift_retain();
                v66(v442, v67);
                swift_release();
                v68 = *(_QWORD *)v442;
                swift_bridgeObjectRelease(*(_QWORD *)&v442[8]);
                swift_bridgeObjectRelease(*(_QWORD *)&v442[16]);
                *(_QWORD *)v442 = v65;
                sub_1000FFED0(v68);
                v69 = *(_QWORD *)v442;
                v70 = *(void (**)(_BYTE *__return_ptr, __n128))(**(_QWORD **)(v5 + 176) + 144);
                v71 = swift_retain();
                v70(v442, v71);
                swift_release();
                v72 = *(_QWORD *)v442;
                v73 = *(_QWORD *)&v442[16];
                swift_bridgeObjectRelease(*(_QWORD *)&v442[8]);
                swift_bridgeObjectRelease(v72);
                *(_QWORD *)v442 = v69;
                sub_1000FFED0(v73);
                v74 = *(SEL **)v442;
                if ((v62 & 1) != 0)
                {
                  swift_bridgeObjectRelease(*(_QWORD *)v442);
                  v385.n128_u64[0] = 0;
                  v386.n128_u64[0] = 0;
LABEL_56:
                  v387.n128_u64[0] = 0;
                  LOBYTE(v5) = 1;
LABEL_141:
                  v202 = v392;
                  swift_retain();
                  StateValue.wrappedValue.getter(v442, v203);
                  swift_release();
                  if ((v442[3] & 1) == 0 && *(_BYTE *)(v202 + 544) == 3)
                  {
                    v204 = objc_msgSend((id)objc_opt_self(NSProcessInfo), "processInfo");
                    v205 = objc_msgSend(v204, "thermalState");

                    if ((unint64_t)v205 >= 3)
                    {
                      v202 = v392;
                      if (v205 == (id)3)
                        goto LABEL_152;
                      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Measure/InstrumentationCoordinator.swift", 40, 2, 102, 0);
                      __break(1u);
                      goto LABEL_150;
                    }
                    v202 = v392;
                    v206 = *(void (**)(_BYTE *__return_ptr, __n128))(**(_QWORD **)(v392 + 88) + 144);
                    v207 = swift_retain();
                    v206(v442, v207);
                    swift_release();
                    v208 = *(_QWORD *)v442;
                    sub_10001A810(*(unint64_t *)v442);
                    if (v208 == 0xC000000000000008
                      || (v209 = *(void (**)(_BYTE *__return_ptr, __n128))(**(_QWORD **)(v202 + 88) + 144),
                          v210 = swift_retain(),
                          v209(v442, v210),
                          swift_release(),
                          v211 = *(_QWORD *)v442,
                          sub_10001A810(*(unint64_t *)v442),
                          v211 == 0xC000000000000010))
                    {
                      v212 = *(void (**)(_BYTE *__return_ptr, __n128))(**(_QWORD **)(v202 + 128) + 144);
                      v213 = swift_retain();
                      v212(v442, v213);
                      swift_release();
                      v214 = *(void **)v442;
                      v215 = *(void **)&v442[8];
                      v74 = *(SEL **)&v442[16];

                      if (v74)
                      {
                        v216 = (*(double (**)(void))((swift_isaMask & (unint64_t)*v74) + 0x200))();

                        v217 = CGPoint.init(_:)(v216);
                        v219 = v218;
                        goto LABEL_151;
                      }
LABEL_150:
                      v217 = 0.0;
                      v219 = 0;
LABEL_151:
                      v202 = v392;
                      v220 = CGPoint.init(_:)(*(double *)(v392 + 464));
                      v222 = v221;
                      v223 = *(_QWORD *)(v202 + 80);
                      v224 = *(_QWORD *)(v202 + 216);
                      swift_retain();
                      sub_1000465CC(v390, v224, (uint64_t)v415, v220, v222);
                      swift_release();
                      sub_100012C58((uint64_t)v415, (uint64_t)v416, &qword_10047DB20);
                      if (sub_1000127D0((uint64_t *)v416) == 1)
                        goto LABEL_152;
                      *(double *)v383.i64 = v217;
                      v382.i64[0] = v223;
                      v259 = *(_OWORD *)&v416[112];
                      v15[6] = *(_OWORD *)&v416[96];
                      v15[7] = v259;
                      v441[128] = v416[128];
                      v260 = *(_OWORD *)&v416[48];
                      v15[2] = *(_OWORD *)&v416[32];
                      v15[3] = v260;
                      v261 = *(_OWORD *)&v416[80];
                      v15[4] = *(_OWORD *)&v416[64];
                      v15[5] = v261;
                      v262 = *(_OWORD *)&v416[16];
                      *v15 = *(_OWORD *)v416;
                      v15[1] = v262;
                      v263 = v202 + 480;
                      v264 = *(_QWORD *)(v202 + 512);
                      v265 = (_QWORD *)SnapType.worldCorner.unsafeMutableAddressor();
                      v266 = v391;
                      v145 = (*v265 & ~v391) == 0;
                      v381.i64[0] = v264;
                      v270 = v202 + 480;
                      if (v145)
                      {
                        sub_100012C58(v263, (uint64_t)v475, &qword_10047F0B8);
                        v267.n128_f64[0] = v220;
                        v384.n128_u64[0] = sub_1000711C8(v383.i64[0], v219, v74 == 0, (uint64_t)v475, (__n128 *)v390, v267, v222);
                        v15 = v268;
                        LOBYTE(v86) = v269;
                        v271 = 3;
                      }
                      else
                      {
                        v271 = 0;
                        v384.n128_u64[0] = 0;
                        v15 = 0;
                        LOBYTE(v86) = 2;
                      }
                      if ((*(_QWORD *)SnapType.worldEdge.unsafeMutableAddressor() & ~v266) == 0
                        && v86 == 2)
                      {
                        sub_100012C58(v270, (uint64_t)v474, &qword_10047F0B8);
                        v384.n128_u64[0] = sub_100071604(v383.i64[0], v219, v74 == 0, (uint64_t)v474, v220, v222);
                        v15 = v272;
                        LOBYTE(v86) = v273;
                        v271 = 4;
                      }
                      v96 = v271;
                      v7 = v270;
                      sub_100012C58(v270, (uint64_t)v473, &qword_10047F0B8);
                      sub_100071928((uint64_t)v473, v384.n128_i64[0], (uint64_t)v15, v86, (uint64_t)&v466);
                      v274 = LODWORD(v467[0]);
                      v275 = BYTE8(v467[1]);
                      v276 = v468;
                      v277 = v392;
                      *(_QWORD *)(v392 + 480) = v466;
                      *(_QWORD *)(v277 + 488) = v274;
                      *(_OWORD *)(v277 + 496) = *(_OWORD *)(v18 + 752);
                      *(_QWORD *)(v277 + 512) = v275;
                      *(_QWORD *)(v277 + 520) = v276;
                      if ((v379.n128_u8[0] & 1) != 0)
                      {
                        if ((v5 & 1) == 0)
                          goto LABEL_189;
                        goto LABEL_167;
                      }
                      if ((v5 & 1) != 0)
                      {
LABEL_167:
                        v383.i32[0] = 1;
                        v278 = v392;
                        v279 = v86;
LABEL_168:
                        v280 = (uint64_t)v15;
                        v281 = v384.n128_u64[0];
                        goto LABEL_190;
                      }
                      if (*(_BYTE *)(v392 + 528) != 1)
                        goto LABEL_189;
                      *(_OWORD *)(v18 + 784) = v467[0];
                      *(_OWORD *)&v469[1] = *(_OWORD *)((char *)v467 + 9);
                      sub_100012C58((uint64_t)v469, (uint64_t)v470, &qword_10047F0C0);
                      sub_100012C58((uint64_t)v470, (uint64_t)v494, &qword_10047F0C0);
                      if (v495 == 2)
                        goto LABEL_189;
                      v3 = *(double *)v494;
                      v4 = *(double *)&v494[1];
                      if (qword_10047A930 == -1)
                      {
LABEL_182:
                        if (*((_QWORD *)&xmmword_1004AF228 + 1))
                        {
                          v316 = *(char **)(*((_QWORD *)&xmmword_1004AF228 + 1) + qword_10048A350);
                          if (!v316)
                            goto LABEL_189;
                          v317 = *(void **)&v316[OBJC_IVAR____TtC7Measure11ReticleView_reticleBoundsLayer];
                          v318 = *((id *)&xmmword_1004AF228 + 1);
                          v319 = v316;
                          v320 = v7;
                          v321 = v319;
                          objc_msgSend(v317, "convertPoint:fromLayer:", 0, v3, v4);
                          LODWORD(v317) = objc_msgSend(v317, "containsPoint:");

                          v7 = v320;
                          if (!(_DWORD)v317)
                            goto LABEL_189;
                          v322 = SIMD2<>.init(_:)(v3, v4);
                          sub_1000FC584(v390, (uint64_t)v442, v322);
                          if ((v442[8] & 1) == 0)
                          {
                            if (!*(_QWORD *)&v442[16])
                            {
LABEL_189:
                              v281 = 0;
                              v280 = 0;
                              v383.i32[0] = 0;
                              *(_OWORD *)v7 = 0u;
                              *(_OWORD *)(v7 + 16) = 0u;
                              v278 = v392;
                              *(_OWORD *)(v392 + 512) = xmmword_1003B39C0;
                              v279 = 2;
LABEL_190:
                              v323 = v381.i8[0] & 0xFE;
                              v324 = v381.i8[0];
                              v325 = *(_QWORD *)(v278 + 216);
                              swift_retain();
                              v225 = v390;
                              sub_100046BE4(v281, v280, v279, (const void *)v390, v325);
                              swift_release();
                              if (v279 == 2)
                              {
                                if (v323 != 2)
                                {
                                  if (qword_10047AAA0 != -1)
                                    swift_once(&qword_10047AAA0, sub_1000E16EC);
                                  strcpy(v442, "Unsnapped ");
                                  v442[11] = 0;
                                  *(_DWORD *)&v442[12] = -369098752;
                                  if ((v324 & 1) != 0)
                                    v326 = 0x72656E726F63;
                                  else
                                    v326 = 1701274725;
                                  if ((v324 & 1) != 0)
                                    v327 = 0xE600000000000000;
                                  else
                                    v327 = 0xE400000000000000;
                                  v328 = v327;
                                  String.append(_:)(*(Swift::String *)&v326);
                                  swift_bridgeObjectRelease(v327);
                                  v329 = *(_QWORD *)v442;
                                  v330 = *(_QWORD *)&v442[8];
                                  v331 = *(_QWORD *)&v442[8];
LABEL_211:
                                  Log.default(_:isPrivate:)(*(Swift::String *)&v329, 0);
                                  sub_1000FFAA4((uint64_t)v415);
                                  swift_bridgeObjectRelease(v330);
                                  goto LABEL_232;
                                }
LABEL_231:
                                sub_1000FFAA4((uint64_t)v415);
LABEL_232:
                                v202 = v392;
                                v226 = (void *)v385.n128_u64[0];
                                if ((v383.i8[0] & 1) == 0)
                                  goto LABEL_153;
                                goto LABEL_233;
                              }
                              if (v323 != 2)
                              {
                                if ((v279 & 1) != 0)
                                  v338 = 0x72656E726F63;
                                else
                                  v338 = 1701274725;
                                if ((v279 & 1) != 0)
                                  v339 = 0xE600000000000000;
                                else
                                  v339 = 0xE400000000000000;
                                if ((v324 & 1) != 0)
                                  v340 = 0x72656E726F63;
                                else
                                  v340 = 1701274725;
                                if ((v324 & 1) != 0)
                                  v341 = 0xE600000000000000;
                                else
                                  v341 = 0xE400000000000000;
                                if (v338 == v340 && v339 == v341)
                                {
                                  swift_bridgeObjectRelease_n(v339, 2);
                                  goto LABEL_231;
                                }
                                v348 = _stringCompareWithSmolCheck(_:_:expecting:)(v338, v339, v340, v341, 0);
                                swift_bridgeObjectRelease(v339);
                                swift_bridgeObjectRelease(v341);
                                if ((v348 & 1) != 0)
                                  goto LABEL_231;
                              }
                              if (qword_10047AAA0 != -1)
                                swift_once(&qword_10047AAA0, sub_1000E16EC);
                              *(_QWORD *)v442 = 0;
                              *(_QWORD *)&v442[8] = 0xE000000000000000;
                              _StringGuts.grow(_:)(25);
                              swift_bridgeObjectRelease(*(_QWORD *)&v442[8]);
                              strcpy(v442, "Snapped to ");
                              *(_DWORD *)&v442[12] = -352321536;
                              if ((v279 & 1) != 0)
                                v332 = 0x72656E726F63;
                              else
                                v332 = 1701274725;
                              if ((v279 & 1) != 0)
                                v333 = 0xE600000000000000;
                              else
                                v333 = 0xE400000000000000;
                              v334 = v333;
                              String.append(_:)(*(Swift::String *)&v332);
                              swift_bridgeObjectRelease(v333);
                              v335._object = (void *)0xEA00000000002074;
                              v335._countAndFlagsBits = 0x6120746E696F7020;
                              String.append(_:)(v335);
                              v336._countAndFlagsBits = CGPoint.debugDescription.getter(*(double *)&v281, *(double *)&v280);
                              object = v336._object;
                              String.append(_:)(v336);
                              swift_bridgeObjectRelease(object);
                              v329 = *(_QWORD *)v442;
                              v330 = *(_QWORD *)&v442[8];
                              v331 = *(_QWORD *)&v442[8];
                              goto LABEL_211;
                            }
                            if (!v442[32])
                            {
                              v278 = v392;
                              sub_1000FBA24(*(uint64_t *)&v442[16], v96, *(uint64_t *)&v442[24], *(double *)v442);
                              swift_release();
                              v383.i32[0] = 1;
                              v279 = v86;
                              goto LABEL_168;
                            }
                          }
                          swift_release();
                          goto LABEL_189;
                        }
                        goto LABEL_269;
                      }
LABEL_267:
                      swift_once(&qword_10047A930, sub_100083368);
                      goto LABEL_182;
                    }
                  }
LABEL_152:
                  v225 = v390;
                  v226 = (void *)v385.n128_u64[0];
                  if ((v5 & 1) == 0)
                  {
LABEL_153:
                    sub_1000FCC64(v225);
                    v227 = *(void (**)(_BYTE *__return_ptr, __n128))(**(_QWORD **)(v202 + 128) + 144);
                    v228 = swift_retain();
                    v227(v442, v228);
                    swift_release();
                    v229 = *(void **)v442;
                    v230 = *(void **)&v442[8];
                    v231 = *(void **)&v442[16];
                    v232 = *(_QWORD *)&v442[24];

                    if (!v232)
                    {
                      v233 = *(void (**)(_BYTE *__return_ptr, __n128))(**(_QWORD **)(v202 + 88) + 144);
                      v234 = swift_retain();
                      v233(v442, v234);
                      swift_release();
                      v235 = *(_QWORD *)v442;
                      sub_10001A810(*(unint64_t *)v442);
                      if (v235 == 0xC000000000000010)
                      {
                        *(_QWORD *)&v237 = *(_QWORD *)(v202 + 464);
                        v390 = v237;
                        v238 = (float *)Float.piDiv2.unsafeMutableAddressor(v236);
                        *(double *)v239.i64 = static simd_float4x4.makeRotation(_:_:_:_:)(*v238, 1.0, 0.0, 0.0);
                        v240 = v239;
                        v242 = v241;
                        v244 = v243;
                        v245 = *(_QWORD **)(v202 + 304);
                        if (v245)
                        {
                          v246 = *(__n128 *)(v202 + 240);
                          v247 = *(__n128 *)(v202 + 256);
                          v248 = *(__n128 *)(v202 + 272);
                          v249 = *(__n128 *)(v202 + 288);
                          v384 = (__n128)v242;
                          v385 = (__n128)v244;
                          v383 = v240;
                          *(double *)v250.i64 = simd_float4x4.position.getter(v246, v247, v248, v249);
                          v382 = v250;
                          v251 = *(double (**)(void))((swift_isaMask & *v245) + 0x2B0);
                          v252 = v245;
                          v253.n128_f64[0] = v251();
                          *(double *)v257.i64 = simd_float4x4.position.getter(v253, v254, v255, v256);
                          v381 = v257;

                          v240 = v383;
                          v242 = (float32x4_t)v384;
                          v244 = (float32x4_t)v385;
                          v258 = vsubq_f32(v382, v381);
                          v239 = vmulq_f32(v258, v258);
                          v239.f32[0] = sqrtf(v239.f32[2] + vaddv_f32(*(float32x2_t *)v239.f32));
                        }
                        else
                        {
                          v239.i32[0] = 1050253722;
                        }
                        v377 = (__n128)v239;
                        v282 = *(__n128 *)(v225 + 240);
                        v384 = *(__n128 *)(v225 + 256);
                        v385 = v282;
                        v283 = *(float32x4_t *)(v225 + 272);
                        v382 = *(float32x4_t *)(v225 + 288);
                        v383 = v283;
                        v284 = *(float32x4_t *)(v225 + 336);
                        v285 = *(float32x4_t *)(v225 + 352);
                        v286 = *(float32x4_t *)(v225 + 368);
                        v381 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v284, v240.f32[0]), v285, *(float32x2_t *)v240.f32, 1), v286, v240, 2), (float32x4_t)xmmword_1003B72F0, v240, 3);
                        v379 = (__n128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v284, v244.f32[0]), v285, *(float32x2_t *)v244.f32, 1), v286, v244, 2), (float32x4_t)xmmword_1003B72F0, v244, 3);
                        v380 = (__n128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v284, v242.f32[0]), v285, *(float32x2_t *)v242.f32, 1), v286, v242, 2), (float32x4_t)xmmword_1003B72F0, v242, 3);
                        type metadata accessor for MeasureCamera(0);
                        v287 = (__n128)v390;
                        v287.n128_u32[2] = 0;
                        *(double *)v288.i64 = static MeasureCamera.unprojectPoint(_:viewProjectionInv:viewportSize:)(v287);
                        v378 = v288;
                        v289 = (__n128)v390;
                        v289.n128_u32[2] = 1.0;
                        *(double *)v290.i64 = static MeasureCamera.unprojectPoint(_:viewProjectionInv:viewportSize:)(v289);
                        v291 = vsubq_f32(v290, v378);
                        v292 = (int32x4_t)vmulq_f32(v291, v291);
                        v292.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v292, 2), vadd_f32(*(float32x2_t *)v292.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v292.i8, 1))).u32[0];
                        v293 = vrsqrte_f32((float32x2_t)v292.u32[0]);
                        v294 = vmul_f32(v293, vrsqrts_f32((float32x2_t)v292.u32[0], vmul_f32(v293, v293)));
                        v295 = vmulq_n_f32(v291, vmul_f32(v294, vrsqrts_f32((float32x2_t)v292.u32[0], vmul_f32(v294, v294))).f32[0]);
                        v296.n128_u64[0] = (unint64_t)vadd_f32(*(float32x2_t *)v378.f32, vmul_n_f32(*(float32x2_t *)v295.f32, v377.n128_f32[0]));
                        v296.n128_f32[2] = v378.f32[2] + vmuls_lane_f32(v377.n128_f32[0], v295, 2);
                        v296.n128_u32[3] = 1.0;
                        v385 = v296;
                        memset(v471, 0, sizeof(v471));
                        v472 = 1;
                        v297 = type metadata accessor for WorldAnchor(0);
                        swift_allocObject(v297, *(unsigned int *)(v297 + 48), *(unsigned __int16 *)(v297 + 52));
                        v298 = WorldAnchor.init(transform:viewTransform:plane:confidence:shouldAutoUpdate:viewTarget:)(v471, 0, 0, v471, (__n128)v381, v380, v379, v385, 0.0);
                        sub_1000FBA24(v298, 0, 4, *(double *)&v390);
                        v299 = *(_QWORD **)(v202 + 312);
                        if (v299)
                        {
                          v300 = *(void (**)(uint64_t))((swift_isaMask & *v299) + 0xD8);
                          v301 = v299;
                          v300(4);

                        }
                        swift_release();
                        v202 = v392;
                      }
                    }
                  }
LABEL_233:
                  v349 = v389;
                  sub_1000FB388(v202, (void **)&v445, v389, v225, v391, (uint64_t)v443);

                  sub_100012C58((uint64_t)v443, (uint64_t)v442, &qword_100483F60);
                  sub_1000FFD08(v442, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000FFA54);
                  return;
                }
                v75 = v391;
                if ((v379.n128_u8[0] & 1) != 0)
                {
                  swift_bridgeObjectRelease(*(_QWORD *)v442);
                  v74 = (SEL *)&selRef_renderer_didAddNode_forAnchor_;
LABEL_82:
                  v99 = v392;
                  if (v389)
                  {
                    v100 = *(void (**)(void))((swift_isaMask & *v389) + 0x2F0);
                    v101 = v389;
                    v100();

                    if (!WorldPointType.isSnap()())
                    {
                      v102 = *(void (**)(_QWORD))((swift_isaMask & *v101) + 0xD8);
                      v103 = v101;
                      v102(0);

                      v104 = *(void **)(v99 + 312);
                      if (v104)
                      {
                        v105 = v104;
                        sub_100100854(v105);

                        v106 = *(void **)(v99 + 312);
                        if (!v106)
                        {
                          __break(1u);
LABEL_269:

                          __break(1u);
                          return;
                        }
                        v107 = v106;
                        sub_100100C00(v107);

                      }
                      v108 = *(uint64_t (**)(_BYTE *, __n128))(**(_QWORD **)(v99 + 128) + 400);
                      v109 = swift_retain();
                      v110 = (void (*)(_BYTE *, _QWORD))v108(v442, v109);
                      v112 = *(void **)(v111 + 16);
                      v113 = *(void **)(v111 + 24);
                      *(_QWORD *)(v111 + 16) = 0;
                      *(_QWORD *)(v111 + 24) = 0;

                      v110(v442, 0);
                      swift_release();
                    }
                  }
                  if (qword_10047AC58 != -1)
                    swift_once(&qword_10047AC58, sub_1001833E8);
                  if (byte_1004AF790 == 1)
                  {
                    v114 = *(void (**)(_BYTE *__return_ptr, __n128))(**(_QWORD **)(v99 + 192) + 144);
                    v115 = swift_retain();
                    v114(v441, v115);
                    swift_release();
                    *(_OWORD *)&v442[96] = *(_OWORD *)&v441[96];
                    *(_OWORD *)&v442[112] = *(_OWORD *)&v441[112];
                    *(_OWORD *)&v442[128] = *(_OWORD *)&v441[128];
                    v442[144] = v441[144];
                    *(_OWORD *)&v442[32] = *(_OWORD *)&v441[32];
                    *(_OWORD *)&v442[48] = *(_OWORD *)&v441[48];
                    *(_OWORD *)&v442[64] = *(_OWORD *)&v441[64];
                    *(_OWORD *)&v442[80] = *(_OWORD *)&v441[80];
                    *(_OWORD *)v442 = *(_OWORD *)v441;
                    *(_OWORD *)&v442[16] = *(_OWORD *)&v441[16];
                    sub_1000D2080(v442);
                    if (v442[1] == 1)
                    {
                      v116 = *(void (**)(_BYTE *__return_ptr, __n128))(**(_QWORD **)(v99 + 192) + 144);
                      v117 = swift_retain();
                      v116(v416, v117);
                      swift_release();
                      *(_OWORD *)&v441[96] = *(_OWORD *)&v416[96];
                      *(_OWORD *)&v441[112] = *(_OWORD *)&v416[112];
                      *(_OWORD *)&v441[128] = *(_OWORD *)&v416[128];
                      v441[144] = v416[144];
                      *(_OWORD *)&v441[32] = *(_OWORD *)&v416[32];
                      *(_OWORD *)&v441[48] = *(_OWORD *)&v416[48];
                      *(_OWORD *)&v441[64] = *(_OWORD *)&v416[64];
                      *(_OWORD *)&v441[80] = *(_OWORD *)&v416[80];
                      *(_OWORD *)v441 = *(_OWORD *)v416;
                      *(_OWORD *)&v441[16] = *(_OWORD *)&v416[16];
                      v118 = *(_QWORD *)&v416[48];
                      v74 = (SEL *)*(id *)&v416[48];
                      sub_1000D2080(v441);
                      if (v118)
                      {
                        v387.n128_u64[0] = v118;
                        v119 = *(void (**)(_BYTE *__return_ptr, __n128))(**(_QWORD **)(v99 + 192) + 144);
                        v120 = swift_retain();
                        v119(v415, v120);
                        swift_release();
                        *(_OWORD *)&v416[96] = *(_OWORD *)&v415[96];
                        *(_OWORD *)&v416[112] = *(_OWORD *)&v415[112];
                        *(_OWORD *)&v416[128] = *(_OWORD *)&v415[128];
                        v416[144] = v415[144];
                        *(_OWORD *)&v416[32] = *(_OWORD *)&v415[32];
                        *(_OWORD *)&v416[48] = *(_OWORD *)&v415[48];
                        *(_OWORD *)&v416[64] = *(_OWORD *)&v415[64];
                        *(_OWORD *)&v416[80] = *(_OWORD *)&v415[80];
                        *(_OWORD *)v416 = *(_OWORD *)v415;
                        *(_OWORD *)&v416[16] = *(_OWORD *)&v415[16];
                        sub_1000D2080(v416);
                        if ((v416[128] & 1) != 0)
                        {

                        }
                        else
                        {
                          v177 = v99;
                          v382.i64[0] = *(_QWORD *)&v416[120];
                          v178 = *(_QWORD *)&v416[112];
                          v384.n128_u64[0] = *(_QWORD *)&v416[104];
                          v179 = *(_QWORD *)&v416[96];
                          v385.n128_u64[0] = *(_QWORD *)&v416[88];
                          v381.i64[0] = *(_QWORD *)&v416[80];
                          v386.n128_u64[0] = *(_QWORD *)&v416[72];
                          v383.i64[0] = *(_QWORD *)&v416[64];
                          v180 = *(void (**)(__int128 *__return_ptr, __n128))(**(_QWORD **)(v177 + 192)
                                                                                       + 144);
                          v181 = swift_retain();
                          v180(&v430, v181);
                          swift_release();
                          *(_OWORD *)&v415[96] = v436;
                          *(_OWORD *)&v415[112] = v437;
                          *(_OWORD *)&v415[128] = v438;
                          v415[144] = v439;
                          *(__n128 *)&v415[32] = v432;
                          *(__n128 *)&v415[48] = v433;
                          *(__n128 *)&v415[64] = v434;
                          *(_OWORD *)&v415[80] = v435;
                          *(_OWORD *)v415 = v430;
                          *(__n128 *)&v415[16] = v431;
                          sub_1000D2080(v415);
                          if ((v415[144] & 1) == 0)
                          {
                            v342 = *(double *)&v415[136];
                            v343.n128_u64[0] = v178;
                            v343.n128_u64[1] = v382.i64[0];
                            v382 = (float32x4_t)v343;
                            v343.n128_u64[0] = v179;
                            v343.n128_u64[1] = v384.n128_u64[0];
                            v384 = v343;
                            v343.n128_u64[0] = v381.i64[0];
                            v343.n128_u64[1] = v385.n128_u64[0];
                            v385 = v343;
                            v343.n128_u64[0] = v383.i64[0];
                            v343.n128_u64[1] = v386.n128_u64[0];
                            v386 = v343;
                            v430 = 0u;
                            v431 = 0u;
                            v432 = 0u;
                            v433 = 0u;
                            LOBYTE(v5) = 1;
                            v434.n128_u8[0] = 1;
                            v344 = type metadata accessor for WorldAnchor(0);
                            swift_allocObject(v344, *(unsigned int *)(v344 + 48), *(unsigned __int16 *)(v344 + 52));
                            v345 = WorldAnchor.init(transform:viewTransform:plane:confidence:shouldAutoUpdate:viewTarget:)(&v430, 0, 0, &v430, v386, v385, v384, (__n128)v382, 0.0);
                            sub_1000FBA24(v345, 7, 3, v342);
                            *(_QWORD *)&v346 = swift_release().n128_u64[0];
                            v445 = v387.n128_u64[0];
                            objc_msgSend((id)v378.i64[0], "jasperAvailable", v346);
                            v385.n128_u64[0] = 0;
                            v386.n128_u64[0] = 0;
                            goto LABEL_141;
                          }

                          v75 = v391;
                        }
                      }
                      v74 = (SEL *)&selRef_renderer_didAddNode_forAnchor_;
                    }
                  }
                  if ((objc_msgSend((id)v378.i64[0], v74[43]) & 1) != 0)
                  {
                    if ((v379.n128_u8[0] & 1) != 0)
                      goto LABEL_139;
                    LODWORD(v5) = (*(_QWORD *)SnapType.guideLine.unsafeMutableAddressor() & ~v75) == 0;
                  }
                  else
                  {
                    LODWORD(v5) = 0;
                    if ((v379.n128_u8[0] & 1) != 0)
                      goto LABEL_140;
                  }
                  if ((*(_QWORD *)SnapType.userLine.unsafeMutableAddressor() & ~v75) == 0)
                  {
                    v182 = *(_QWORD *)(v392 + 464);
                    v183 = *(float *)(v392 + 472);
                    v184 = *(_QWORD **)(v392 + 72);
                    swift_beginAccess(v184 + 11, &v440, 0, 0);
                    v185 = v184[11];
                    v186 = v184[12];
                    v187 = v184[13];
                    swift_bridgeObjectRetain(v185);
                    swift_bridgeObjectRetain(v186);
                    swift_bridgeObjectRetain(v187);
                    sub_1000921EC(v185, v186, v187, (__n128 *)v390, (uint64_t)v403, v182, v183);
                    swift_bridgeObjectRelease(v187);
                    swift_bridgeObjectRelease(v186);
                    swift_bridgeObjectRelease(v185);
                    sub_100012C58((uint64_t)v403, (uint64_t)&v430, &qword_100483F70);
                    v188 = v430;
                    if ((_QWORD)v430)
                    {
                      v386 = v432;
                      v387 = v431;
                      v384 = v434;
                      v385 = v433;
                      v189 = *(double *)&v435;
                      v417 = 0u;
                      v418 = 0u;
                      v419 = 0u;
                      v420 = 0u;
                      LOBYTE(v5) = 1;
                      v421.n128_u8[0] = 1;
                      v190 = type metadata accessor for WorldAnchor(0);
                      swift_allocObject(v190, *(unsigned int *)(v190 + 48), *(unsigned __int16 *)(v190 + 52));
                      v191 = WorldAnchor.init(transform:viewTransform:plane:confidence:shouldAutoUpdate:viewTarget:)(&v417, 0, 0, &v417, v387, v386, v385, v384, 0.0);
                      sub_1000FBA24(v191, 0, 3, v189);
                      swift_release();
                      v385.n128_u64[0] = 0;
                      v386.n128_u64[0] = 0;
                      v387.n128_u64[0] = v188;
                      v445 = v188;
                      goto LABEL_141;
                    }
                  }
                  if ((_DWORD)v5)
                  {
                    if (objc_msgSend((id)v378.i64[0], v74[43]))
                    {
                      v192 = v392;
                      sub_1000FC044((__n128 *)v390, (uint64_t)v414);
                      v193 = v414[0];
                      sub_100012C58((uint64_t)v414, (uint64_t)&v417, &qword_100483F68);
                      v74 = (SEL *)v417;
                      if ((_QWORD)v417)
                      {
                        v386 = v419;
                        v387 = v418;
                        v384 = v421;
                        v385 = v420;
                        v194 = *(double *)&v422;
                        v476 = 0u;
                        v477 = 0u;
                        v478 = 0u;
                        v479 = 0u;
                        LOBYTE(v5) = 1;
                        v480 = 1;
                        v195 = type metadata accessor for WorldAnchor(0);
                        swift_allocObject(v195, *(unsigned int *)(v195 + 48), *(unsigned __int16 *)(v195 + 52));
                        v196 = WorldAnchor.init(transform:viewTransform:plane:confidence:shouldAutoUpdate:viewTarget:)(&v476, 0, 1, &v476, v387, v386, v385, v384, 0.0);
                        v197 = (*(unsigned __int8 (**)(id))((swift_isaMask & (unint64_t)*v74) + 0x258))(v193);
                        sub_100012810(v414);
                        if (v197 == 3)
                          v198 = 6;
                        else
                          v198 = 5;
                        sub_1000FBA24(v196, v198, 3, v194);
                        sub_1000FB874(v192, (uint64_t)&v461, v387, v386, v385, v384);
                        v199 = v461;
                        v200 = v462;
                        v201 = v463;
                        v387.n128_u64[0] = v464;
                        v386.n128_u32[0] = v465;
                        swift_release();
                        sub_100012C58((uint64_t)v443, (uint64_t)v441, &qword_100483F60);
                        sub_100012C58((uint64_t)v441, (uint64_t)v442, &qword_100483F60);
                        if (sub_1000FFB04((uint64_t)v442) == 1)
                        {
                          sub_100012810(v414);
                          goto LABEL_140;
                        }
                        *(_QWORD *)v415 = v74;
                        *(_QWORD *)&v415[16] = v199;
                        *(_QWORD *)&v415[24] = v200;
                        *(_QWORD *)&v415[32] = v201;
                        *(_QWORD *)&v415[40] = v387.n128_u64[0];
                        v415[48] = v386.n128_u8[0];
                        memset(&v415[64], 0, 64);
                        v415[128] = 1;
                        nullsub_1(v415);
                        sub_100012C58((uint64_t)v443, (uint64_t)v416, (uint64_t *)&unk_100486700);
                        sub_100012810((id *)v416);
                        v347 = v415;
LABEL_238:
                        sub_100012C58((uint64_t)v347, (uint64_t)v443, (uint64_t *)&unk_100486700);
                        goto LABEL_140;
                      }
                    }
LABEL_139:
                    LOBYTE(v5) = 0;
                  }
LABEL_140:
                  v385.n128_u64[0] = 0;
                  v386.n128_u64[0] = 0;
                  v387.n128_u64[0] = 0;
                  goto LABEL_141;
                }
                if (objc_msgSend((id)v378.i64[0], "jasperAvailable"))
                {
                  v76 = *(void (**)(_BYTE *__return_ptr, __n128))(**(_QWORD **)(v5 + 200) + 144);
                  v77 = swift_retain();
                  v76(v441, v77);
                  swift_release();
                  *(_OWORD *)&v442[96] = *(_OWORD *)&v441[96];
                  *(_OWORD *)&v442[112] = *(_OWORD *)&v441[112];
                  *(_OWORD *)&v442[32] = *(_OWORD *)&v441[32];
                  *(_OWORD *)&v442[48] = *(_OWORD *)&v441[48];
                  *(_OWORD *)&v442[128] = *(_OWORD *)&v441[128];
                  *(_QWORD *)&v442[144] = *(_QWORD *)&v441[144];
                  *(_OWORD *)&v442[64] = *(_OWORD *)&v441[64];
                  *(_OWORD *)&v442[80] = *(_OWORD *)&v441[80];
                  *(_OWORD *)v442 = *(_OWORD *)v441;
                  *(_OWORD *)&v442[16] = *(_OWORD *)&v441[16];
                  v78 = *(void **)v441;
                  v436 = *(_OWORD *)&v442[104];
                  v437 = *(_OWORD *)&v442[120];
                  v438 = *(_OWORD *)&v442[136];
                  v432 = *(__n128 *)&v442[40];
                  v433 = *(__n128 *)&v442[56];
                  v434 = *(__n128 *)&v442[72];
                  v435 = *(_OWORD *)&v442[88];
                  v430 = *(_OWORD *)&v442[8];
                  v431 = *(__n128 *)&v442[24];
                  sub_100012C58((uint64_t)v442, (uint64_t)&v417, (uint64_t *)&unk_100486700);
                  if (sub_1000127D0((uint64_t *)&v417) == 1)
                  {
                    swift_bridgeObjectRelease(v74);
                    v79 = sub_100012BC4((uint64_t)v442);
                  }
                  else
                  {
                    *(_OWORD *)&v441[88] = v435;
                    *(_OWORD *)&v441[104] = v436;
                    *(_OWORD *)&v441[120] = v437;
                    *(_OWORD *)&v441[136] = v438;
                    *(__n128 *)&v441[24] = v431;
                    *(__n128 *)&v441[40] = v432;
                    *(__n128 *)&v441[56] = v433;
                    *(__n128 *)&v441[72] = v434;
                    *(_QWORD *)v441 = v78;
                    *(_OWORD *)&v441[8] = v430;
                    v146 = v78;
                    sub_100012BC4((uint64_t)v441);
                    v147 = sub_1000F41C8((uint64_t)v146, (uint64_t)v74);
                    swift_bridgeObjectRelease(v74);
                    if ((v147 & 1) != 0)
                    {
                      sub_1000FBC90(v146, (__n128 *)v390, (uint64_t)&v452);
                      sub_100012C58((uint64_t)&v452, (uint64_t)&v394, &qword_100483F78);
                      v74 = (SEL *)&selRef_renderer_didAddNode_forAnchor_;
                      if (sub_1000FFB1C((uint64_t)&v394) != 1)
                      {
                        v155 = vsub_f32(*(float32x2_t *)(v5 + 464), *(float32x2_t *)v394.f32);
                        if (vaddv_f32(vmul_f32(v155, v155)) < 900.0)
                        {
                          v383 = v394;
                          v156 = sub_1000FFB38(*(double *)v394.i64, v395, v396, v397, v398, v399, v400, v401, v390, v148, v149, v150, v151, v152, v153, v154, v402);
                          v386 = v157;
                          v387 = v156;
                          v384 = v159;
                          v385 = v158;
                          v476 = 0u;
                          v477 = 0u;
                          v478 = 0u;
                          v479 = 0u;
                          v160 = v5;
                          LOBYTE(v5) = 1;
                          v480 = 1;
                          v161 = type metadata accessor for WorldAnchor(0);
                          swift_allocObject(v161, *(unsigned int *)(v161 + 48), *(unsigned __int16 *)(v161 + 52));
                          v74 = (SEL *)WorldAnchor.init(transform:viewTransform:plane:confidence:shouldAutoUpdate:viewTarget:)(&v476, 0, 1, &v476, v387, v386, v385, v384, 0.0);
                          if ((*(unsigned __int8 (**)(void))((swift_isaMask & *v146) + 0x258))() == 3)
                            v162 = 6;
                          else
                            v162 = 5;
                          sub_1000FBA24((uint64_t)v74, v162, 3, *(double *)v383.i64);
                          sub_1000FB874(v160, (uint64_t)&v461, v387, v386, v385, v384);
                          v163 = v461;
                          v164 = v462;
                          v165 = v463;
                          v387.n128_u64[0] = v464;
                          v386.n128_u32[0] = v465;
                          swift_release();
                          sub_100012C58((uint64_t)v443, (uint64_t)v415, &qword_100483F60);
                          sub_100012C58((uint64_t)v415, (uint64_t)v416, &qword_100483F60);
                          if (sub_1000FFB04((uint64_t)v416) != 1)
                          {
                            v403[0] = v146;
                            v404 = v163;
                            v405 = v164;
                            v406 = v165;
                            v407 = v387.n128_u64[0];
                            v408 = v386.n128_u8[0];
                            v409 = 0u;
                            v410 = 0u;
                            v411 = 0u;
                            v412 = 0u;
                            v413 = 1;
                            nullsub_1(v403);
                            sub_100012C58((uint64_t)v443, (uint64_t)v414, (uint64_t *)&unk_100486700);
                            sub_100012810(v414);
                            v347 = v403;
                            goto LABEL_238;
                          }

                          goto LABEL_140;
                        }
                      }

LABEL_64:
                      if ((*(_QWORD *)SnapType.userPoint.unsafeMutableAddressor(v79, v80) & ~v75) != 0)
                        goto LABEL_82;
                      v3 = *(double *)(v392 + 464);
                      LODWORD(v4) = *(_DWORD *)(v392 + 472);
                      v81 = *(_QWORD *)(v392 + 72);
                      swift_beginAccess(v81 + 80, &v429, 0, 0);
                      v82 = *(_QWORD *)(v81 + 80);
                      v83 = ((uint64_t (*)(uint64_t))swift_bridgeObjectRetain)(v82);
                      sub_100091F0C(v83, (__n128 *)v390, *(float32x2_t *)&v3, *(float *)&v4);
                      v16 = v84;
                      v86 = v85;
                      swift_bridgeObjectRelease(v82);
                      if (!v16)
                        goto LABEL_82;
                      v87 = v389;
                      if (v389 && v389 == (_QWORD *)v16)
                        goto LABEL_261;
                      v88 = *(void (**)(_BYTE *__return_ptr, __n128))(**(_QWORD **)(v392 + 88) + 144);
                      v89 = swift_retain();
                      v88(v442, v89);
                      swift_release();
                      v90 = *(_QWORD *)v442;
                      sub_10001A810(*(unint64_t *)v442);
                      if (v90 == 0xC000000000000010)
                        sub_100100854((_QWORD *)v16);
                      sub_100100C00((_QWORD *)v16);
                      v91 = *(_QWORD **)(v392 + 312);
                      v87 = v389;
                      if (!v91)
                      {
LABEL_261:
                        v353 = objc_allocWithZone((Class)type metadata accessor for ScreenPoint(0));
                        v354 = (void *)ScreenPoint.init(_:)(*(double *)&v86);
                        v355 = *(uint64_t (**)(_BYTE *, __n128))(**(_QWORD **)(v392 + 128) + 400);
                        v74 = (SEL *)(id)v16;
                        v385.n128_u64[0] = (unint64_t)v354;
                        v356 = swift_retain();
                        v357 = v355(v442, v356);
                        v358 = v16;
                        v359 = (void (*)(_BYTE *, _QWORD))v357;
                        v361 = *(void **)(v360 + 16);
                        v362 = *(void **)(v360 + 24);
                        *(_QWORD *)(v360 + 16) = v354;
                        *(_QWORD *)(v360 + 24) = v358;
                        v386.n128_u64[0] = v358;

                        v359(v442, 0);
                        swift_release();
                        if (v87)
                        {
                          v363 = *(void (**)(uint64_t))((swift_isaMask & *v87) + 0xD8);
                          v364 = v87;
                          v363(2);

                        }
                        goto LABEL_56;
                      }
                      v387.n128_u64[0] = v86;
                      v8 = (unint64_t *)&swift_isaMask;
                      v92 = *(uint64_t (**)(void))((swift_isaMask & *v91) + 0x238);
                      v7 = v91;
                      v26 = v92();
                      if (!((unint64_t)v26 >> 62))
                      {
                        v86 = v387.n128_u64[0];
                        if (*(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10))
                          goto LABEL_73;
LABEL_253:

                        swift_bridgeObjectRelease(v26);
                        v87 = v389;
                        goto LABEL_261;
                      }
LABEL_249:
                      if (v26 < 0)
                        v350 = v26;
                      else
                        v350 = v26 & 0xFFFFFFFFFFFFFF8;
                      v351 = _CocoaArrayWrapper.endIndex.getter(v350);
                      v86 = v387.n128_u64[0];
                      if (v351)
                      {
LABEL_73:
                        if ((v26 & 0xC000000000000001) != 0)
                        {
                          v86 = v16;
                          v93 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v26);
                        }
                        else
                        {
                          if (!*(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10))
                          {
                            __break(1u);
                            goto LABEL_265;
                          }
                          v86 = v16;
                          v93 = *(id *)(v26 + 32);
                        }
                        v94 = v93;
                        v95 = swift_bridgeObjectRelease(v26);
                        v26 = (*(uint64_t (**)(__n128))((*v8 & *v94) + 0x250))(v95);

                        if ((unint64_t)v26 >> 62)
                        {
                          if (v26 < 0)
                            v352 = v26;
                          else
                            v352 = v26 & 0xFFFFFFFFFFFFFF8;
                          swift_bridgeObjectRetain(v26);
                          v96 = _CocoaArrayWrapper.endIndex.getter(v352);
                          swift_bridgeObjectRelease(v26);
                          if (v96)
                          {
LABEL_78:
                            if ((v26 & 0xC000000000000001) == 0)
                            {
                              if (!*(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10))
                              {
                                __break(1u);
                                goto LABEL_267;
                              }
                              v97 = *(id *)(v26 + 32);
                              goto LABEL_81;
                            }
LABEL_265:
                            v97 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v26);
LABEL_81:
                            v98 = v97;
                            swift_bridgeObjectRelease(v26);
                            sub_100100C00(v98);

LABEL_260:
                            v87 = v389;
                            v16 = v86;
                            v86 = v387.n128_u64[0];
                            goto LABEL_261;
                          }
                        }
                        else
                        {
                          v96 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10);
                          if (v96)
                            goto LABEL_78;
                        }

                        swift_bridgeObjectRelease(v26);
                        goto LABEL_260;
                      }
                      goto LABEL_253;
                    }

                  }
                }
                else
                {
                  v80 = swift_bridgeObjectRelease(v74);
                }
                v74 = (SEL *)&selRef_renderer_didAddNode_forAnchor_;
                goto LABEL_64;
              }
              v368 = v121;
              type metadata accessor for MeasureCamera(0);
              v377.n128_u64[0] = 0;
              v370 = 0;
              v371 = 0;
              v376.n128_u64[0] = 0;
              v375.n128_u64[0] = 0;
              v374.n128_u64[0] = 0;
              v372 = 0;
              *(_QWORD *)&v373 = 0;
              v369 = 0.0;
              v126 = 0;
              v127 = *(double *)(v390 + 32);
              v128 = *(__n128 *)(v390 + 176);
              v386 = *(__n128 *)(v390 + 192);
              v387 = v128;
              v129 = *(__n128 *)(v390 + 208);
              v384 = *(__n128 *)(v390 + 224);
              v385 = v129;
              v130 = v124 + 80;
              v131 = 900.0;
              v132 = 1;
              v366 = v124 + 80;
              v367 = v125 - 1;
LABEL_97:
              v133 = (__n128 *)(v130 + (v126 << 6));
              do
              {
                v134 = v133[-2];
                v135 = v133[-1];
                v136 = *v133;
                v137 = v126 + 1;
                v380 = v133[-3];
                v381 = (float32x4_t)v134;
                v382 = (float32x4_t)v135;
                v383 = (float32x4_t)v136;
                v138.n128_f64[0] = simd_float4x4.position.getter(v380, v134, v135, v136);
                v140 = static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)(v139, v138, v387, v386, v385, v384, v127);
                v141 = vsub_f32(*(float32x2_t *)&v140, *(float32x2_t *)(v392 + 464));
                v142 = vaddv_f32(vmul_f32(v141, v141));
                if (v143 < 1.0 && v142 < v131)
                {
                  v132 = 0;
                  v369 = v140;
                  v377.n128_u64[0] = v380.n128_u64[0];
                  v375.n128_u64[0] = v381.u64[1];
                  v376.n128_u64[0] = v381.i64[0];
                  v374.n128_u64[0] = v382.i64[0];
                  v372 = v383.i64[0];
                  *(_QWORD *)&v373 = v382.i64[1];
                  v370 = v380.n128_u64[1];
                  v371 = v383.u64[1];
                  v131 = v142;
                  v130 = v366;
                  v145 = v367 == v126++;
                  if (!v145)
                    goto LABEL_97;
                  swift_bridgeObjectRelease(v124);
                  goto LABEL_119;
                }
                v133 += 4;
                ++v126;
              }
              while (v125 != v137);
              swift_bridgeObjectRelease(v124);
              if ((v132 & 1) != 0)
              {

                goto LABEL_118;
              }
LABEL_119:
              v166.n128_u64[0] = v372;
              v167 = v370;
              v166.n128_u64[1] = v371;
              v387 = v166;
              v166.n128_u64[0] = v374.n128_u64[0];
              v166.n128_u64[1] = v373;
              v386 = v166;
              v166.n128_u64[0] = v376.n128_u64[0];
              v166.n128_u64[1] = v375.n128_u64[0];
              v385 = v166;
              v166.n128_u64[0] = v377.n128_u64[0];
              v166.n128_u64[1] = v370;
              v384 = v166;
              v168 = v369;
              v169 = type metadata accessor for WorldAnchor(0);
              swift_allocObject(v169, *(unsigned int *)(v169 + 48), *(unsigned __int16 *)(v169 + 52));
              v170 = WorldAnchor.init(transform:viewTransform:plane:confidence:shouldAutoUpdate:viewTarget:)(&v481, 0, 1, &v481, v384, v385, v386, v387, 0.0);
              v171 = v392;
              sub_1000FBA24(v170, 8, 3, v168);
              sub_1000FB874(v171, (uint64_t)&v447, v384, v385, v386, v387);
              v172 = v447;
              v173 = v448;
              v174 = v449;
              v175 = v450;
              v176 = v451;
              swift_release();
              sub_100012C58((uint64_t)v446, (uint64_t)v415, &qword_100483F60);
              if (sub_1000FFB04((uint64_t)v415) == 1)
              {

LABEL_236:
                v62 = 1;
                v5 = v392;
                goto LABEL_54;
              }
              *(_QWORD *)&v417 = v368;
              v418.n128_u64[0] = v172;
              v418.n128_u64[1] = v173;
              v419.n128_u64[0] = v174;
              v419.n128_u64[1] = v175;
              v420.n128_u8[0] = v176;
              v421.n128_u64[0] = v377.n128_u64[0];
              v421.n128_u64[1] = v167;
              v422 = v376.n128_u64[0];
              v423 = v375.n128_u64[0];
              v424 = v374.n128_u64[0];
              v425 = v373;
              v426 = v372;
              v427 = v371;
              v428 = 0;
              nullsub_1(&v417);
              sub_100012C58((uint64_t)v443, (uint64_t)&v430, (uint64_t *)&unk_100486700);
              sub_100012810((id *)&v430);
              v315 = &v417;
              goto LABEL_235;
            }
            sub_100012BC4((uint64_t)v416);
            v46 = (void *)v378.i64[0];
            v47 = &selRef_renderer_didAddNode_forAnchor_;
LABEL_49:
            v15 = v441;
            goto LABEL_50;
          }
        }
        v5 = v392;
        v46 = (void *)v378.i64[0];
        v47 = &selRef_renderer_didAddNode_forAnchor_;
        v18 = (uint64_t)v442;
        goto LABEL_49;
      }
      v26 = *(_QWORD *)(v5 + 72);
      swift_beginAccess(v26 + 64, &v393, 0, 0);
      v7 = *(_QWORD *)(v26 + 64);
      if ((unint64_t)v7 >> 62)
      {
        if (v7 < 0)
          v26 = *(_QWORD *)(v26 + 64);
        else
          v26 = v7 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v7);
        v27 = _CocoaArrayWrapper.endIndex.getter(v26);
        if (v27)
          goto LABEL_12;
      }
      else
      {
        v27 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(*(_QWORD *)(v26 + 64));
        if (v27)
        {
LABEL_12:
          if (v27 >= 1)
          {
            for (i = 0; i != v27; ++i)
            {
              if ((v7 & 0xC000000000000001) != 0)
              {
                v33 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v7);
              }
              else
              {
                v33 = *(_QWORD *)(v7 + 8 * i + 32);
                swift_retain();
              }
              Strong = swift_unknownObjectWeakLoadStrong(v33 + 16, v32);
              if (Strong)
              {
                v29 = Strong;
                v30 = *(_QWORD *)(v33 + 24);
                ObjectType = swift_getObjectType(Strong);
                (*(void (**)(_QWORD, uint64_t, uint64_t))(v30 + 120))(0, ObjectType, v30);
                swift_release();
                swift_unknownObjectRelease(v29);
              }
              else
              {
                swift_release();
              }
            }
            goto LABEL_37;
          }
          __break(1u);
LABEL_248:
          __break(1u);
          goto LABEL_249;
        }
      }
LABEL_37:
      swift_bridgeObjectRelease(v7);
      v5 = v392;
      *(_BYTE *)(v392 + 208) = 0;
      goto LABEL_38;
    }
    v23 = v389;
    ((void (*)(_QWORD *, _OWORD *, uint64_t))v8[4])(v389, v15, v7);
    ((void (*)(char *, _QWORD *, uint64_t))v8[2])(v11, v23, v7);
    v24 = ((uint64_t (*)(char *, uint64_t))v8[11])(v11, v7);
    if (v24 != enum case for ARCamera.TrackingState.Reason.initializing(_:)
      && v24 != enum case for ARCamera.TrackingState.Reason.relocalizing(_:))
    {
      ((void (*)(char *, uint64_t))v8[1])(v11, v7);
LABEL_245:
      sub_1000FA698();
      ((void (*)(_QWORD *, uint64_t))v8[1])(v23, v7);
      return;
    }
    if ((*(_BYTE *)(v5 + 208) & 1) != 0)
      goto LABEL_245;
    v26 = *(_QWORD *)(v5 + 72);
    swift_beginAccess(v26 + 64, v446, 0, 0);
    v16 = *(_QWORD *)(v26 + 64);
    if ((unint64_t)v16 >> 62)
    {
      if (v16 < 0)
        v26 = *(_QWORD *)(v26 + 64);
      else
        v26 = v16 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v16);
      v18 = _CocoaArrayWrapper.endIndex.getter(v26);
      if (v18)
        goto LABEL_24;
    }
    else
    {
      v18 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(*(_QWORD *)(v26 + 64));
      if (v18)
      {
LABEL_24:
        if (v18 < 1)
          goto LABEL_248;
        for (j = 0; j != v18; ++j)
        {
          if ((v16 & 0xC000000000000001) != 0)
          {
            v37 = specialized _ArrayBuffer._getElementSlowPath(_:)(j, v16);
          }
          else
          {
            v37 = *(_QWORD *)(v16 + 8 * j + 32);
            swift_retain();
          }
          v38 = swift_unknownObjectWeakLoadStrong(v37 + 16, v36);
          if (v38)
          {
            v39 = v38;
            v40 = *(_QWORD *)(v37 + 24);
            v41 = swift_getObjectType(v38);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 120))(1, v41, v40);
            swift_release();
            swift_unknownObjectRelease(v39);
          }
          else
          {
            swift_release();
          }
        }
      }
    }
    swift_bridgeObjectRelease(v16);
    *(_BYTE *)(v392 + 208) = 1;
    v23 = v389;
    goto LABEL_245;
  }
}

void sub_1000F8C6C()
{
  uint64_t v0;
  void (*v1)(id *__return_ptr, __n128);
  __n128 v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t *v5;
  void (*v6)(id *__return_ptr);
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t (*v42)(void);
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v54;
  __n128 v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  __n128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  char v68;
  __n128 v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  __n128 v80;
  uint64_t v81;
  void (*v82)(id *__return_ptr, __n128);
  __n128 v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t (*v87)(void);
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t (*v91)(void);
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  void *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t (*v105)(void);
  unint64_t v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t (*v113)(void);
  id v114[5];

  v1 = *(void (**)(id *__return_ptr, __n128))(**(_QWORD **)(v0 + 128) + 144);
  v2 = swift_retain();
  v1(v114, v2);
  swift_release();

  v3 = v114[1];
  if (v3)
  {
    v4 = *(_QWORD **)(v0 + 312);
    if (!v4)
    {
      v77 = v3;
LABEL_105:

      return;
    }
    v5 = (uint64_t *)0xC000000000000018;
    v6 = *(void (**)(id *__return_ptr))(**(_QWORD **)(v0 + 88) + 144);
    swift_retain();
    v110 = v4;
    v7 = v4;
    v8 = v0;
    v9 = v7;
    v6(v114);
    swift_release();
    v10 = v114[0];
    sub_10001A810((unint64_t)v114[0]);
    v11 = (uint64_t *)&swift_isaMask;
    if (v10 == (id)0xC000000000000018)
    {
      v108 = v9;
      v109 = v0;
      v12 = (*(uint64_t (**)(void))((swift_isaMask & *v9) + 0x238))();
      v96 = v12;
      if ((unint64_t)v12 >> 62)
        goto LABEL_90;
      v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v13)
      {
LABEL_6:
        v14 = 0;
        v97 = v12 & 0xC000000000000001;
        v93 = v12 + 32;
        v94 = v12 & 0xFFFFFFFFFFFFFF8;
        v95 = v13;
        v102 = v3;
        do
        {
          if (v97)
          {
            v15 = v14;
            v16 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v14, v12);
            v17 = __OFADD__(v15, 1);
            v18 = v15 + 1;
            if (v17)
              goto LABEL_89;
          }
          else
          {
            if (v14 >= *(_QWORD *)(v94 + 16))
            {
              __break(1u);
              return;
            }
            v19 = v14;
            v16 = *(id *)(v93 + 8 * v14);
            v17 = __OFADD__(v19, 1);
            v18 = v19 + 1;
            if (v17)
              goto LABEL_89;
          }
          v98 = v16;
          v99 = v18;
          v20 = (*(uint64_t (**)(void))((*v11 & *v16) + 0x280))();
          v21 = v20;
          if ((unint64_t)v20 >> 62)
          {
            if (v20 >= 0)
              v20 &= 0xFFFFFFFFFFFFFF8uLL;
            v22 = _CocoaArrayWrapper.endIndex.getter(v20);
            if (!v22)
              goto LABEL_7;
LABEL_16:
            v23 = 0;
            v105 = *(uint64_t (**)(void))((*v11 & *v3) + 0xB8);
            v106 = v21 & 0xC000000000000001;
            v12 = v21 & 0xFFFFFFFFFFFFFF8;
            v100 = v21 + 32;
            v101 = v21 & 0xFFFFFFFFFFFFFF8;
            v103 = v21;
            v104 = v22;
            while (2)
            {
              if (v106)
              {
                v24 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v23, v21);
              }
              else
              {
                if (v23 >= *(_QWORD *)(v101 + 16))
                  goto LABEL_88;
                v24 = *(id *)(v100 + 8 * v23);
              }
              v112 = v24;
              v17 = __OFADD__(v23, 1);
              v25 = v23 + 1;
              if (v17)
                goto LABEL_86;
              v107 = v25;
              v113 = *(uint64_t (**)(void))((*v11 & *v24) + 0xB8);
              v26 = v113();
              v28 = v27;
              v29 = v3;
              v30 = v105();
              v32 = v31;

              if (v26 == v30 && v28 == v32)
              {
                v35 = swift_bridgeObjectRelease_n(v28, 2);
              }
              else
              {
                v34 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v28, v30, v32, 0);
                swift_bridgeObjectRelease(v28);
                v35 = swift_bridgeObjectRelease(v32);
                if ((v34 & 1) == 0)
                {

LABEL_72:
                  v23 = v107;
LABEL_18:
                  if (v23 == v104)
                    goto LABEL_7;
                  continue;
                }
              }
              break;
            }
            v36 = (*(uint64_t (**)(__n128))((*v11 & *v112) + 0x238))(v35);
            v37 = v36;
            v23 = v107;
            if ((unint64_t)v36 >> 62)
            {
              if (v36 >= 0)
                v36 &= 0xFFFFFFFFFFFFFF8uLL;
              v38 = _CocoaArrayWrapper.endIndex.getter(v36);
              if (v38)
              {
LABEL_33:
                if (v38 < 1)
                  goto LABEL_87;
                v39 = 0;
                v111 = v38;
                while (2)
                {
                  if ((v37 & 0xC000000000000001) != 0)
                    v40 = (uint64_t *)specialized _ArrayBuffer._getElementSlowPath(_:)(v39, v37);
                  else
                    v40 = (uint64_t *)*(id *)(v37 + 8 * v39 + 32);
                  v41 = v40;
                  v42 = *(uint64_t (**)(void))((*v11 & *v40) + 0x250);
                  v43 = v42();
                  v44 = v43;
                  if ((v43 & 0xC000000000000001) != 0)
                  {
                    v45 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v43);
LABEL_41:
                    v46 = v45;
                    v47 = swift_bridgeObjectRelease(v44);
                    v48 = (*(uint64_t (**)(__n128))((*v11 & *v46) + 0xB8))(v47);
                    v50 = v49;

                    v3 = v112;
                    v5 = (uint64_t *)v113();
                    v52 = v51;

                    if ((uint64_t *)v48 == v5 && v50 == v52)
                    {
                      swift_bridgeObjectRelease_n(v50, 2);
                    }
                    else
                    {
                      v54 = _stringCompareWithSmolCheck(_:_:expecting:)(v48, v50, v5, v52, 0);
                      swift_bridgeObjectRelease(v50);
                      v55 = swift_bridgeObjectRelease(v52);
                      if ((v54 & 1) == 0)
                      {
                        v56 = ((uint64_t (*)(__n128))v42)(v55);
                        v57 = v56;
                        if ((v56 & 0xC000000000000001) != 0)
                        {
                          v58 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v56);
                        }
                        else
                        {
                          if (*(_QWORD *)((v56 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
                            goto LABEL_84;
                          v58 = *(id *)(v56 + 40);
                        }
                        v59 = v58;
                        v60 = swift_bridgeObjectRelease(v57);
                        v61 = (*(uint64_t (**)(__n128))((*v11 & *v59) + 0xB8))(v60);
                        v63 = v62;

                        v64 = v3;
                        v5 = (uint64_t *)v113();
                        v66 = v65;

                        if ((uint64_t *)v61 == v5 && v63 == v66)
                        {
                          v69 = swift_bridgeObjectRelease_n(v63, 2);
                        }
                        else
                        {
                          v68 = _stringCompareWithSmolCheck(_:_:expecting:)(v61, v63, v5, v66, 0);
                          swift_bridgeObjectRelease(v63);
                          v69 = swift_bridgeObjectRelease(v66);
                          if ((v68 & 1) == 0)
                          {
                            v11 = (uint64_t *)&swift_isaMask;
                            goto LABEL_61;
                          }
                        }
                        v74 = ((uint64_t (*)(__n128))v42)(v69);
                        v75 = v74;
                        v11 = (uint64_t *)&swift_isaMask;
                        if ((v74 & 0xC000000000000001) != 0)
                        {
                          v76 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v74);
                        }
                        else
                        {
                          if (!*(_QWORD *)((v74 & 0xFFFFFFFFFFFFF8) + 0x10))
                            goto LABEL_85;
                          v76 = *(id *)(v74 + 32);
                        }
                        v73 = v76;
                        swift_bridgeObjectRelease(v75);
                        v5 = v108;
                        sub_10010154C((uint64_t)v41, v73, v110, 1);
LABEL_60:

LABEL_61:
                        ++v39;

                        if (v111 == v39)
                        {

                          swift_bridgeObjectRelease(v37);
                          v3 = v102;
                          v21 = v103;
                          v5 = (uint64_t *)0xC000000000000018;
                          goto LABEL_72;
                        }
                        continue;
                      }
                    }
                    v11 = v108;
                    v70 = v42();
                    v71 = v70;
                    if ((v70 & 0xC000000000000001) != 0)
                    {
                      v72 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v70);
                    }
                    else
                    {
                      if (*(_QWORD *)((v70 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
                        goto LABEL_83;
                      v72 = *(id *)(v70 + 40);
                    }
                    v73 = v72;
                    swift_bridgeObjectRelease(v71);
                    sub_10010154C((uint64_t)v41, v110, v73, 1);
                    v5 = v41;
                    v41 = v11;
                    v11 = (uint64_t *)&swift_isaMask;
                    goto LABEL_60;
                  }
                  break;
                }
                if (*(_QWORD *)((v43 & 0xFFFFFFFFFFFFF8) + 0x10))
                {
                  v45 = *(id *)(v43 + 32);
                  goto LABEL_41;
                }
                __break(1u);
LABEL_83:
                __break(1u);
LABEL_84:
                __break(1u);
LABEL_85:
                __break(1u);
LABEL_86:
                __break(1u);
LABEL_87:
                __break(1u);
LABEL_88:
                __break(1u);
LABEL_89:
                __break(1u);
LABEL_90:
                if (v12 < 0)
                  v78 = v12;
                else
                  v78 = v12 & 0xFFFFFFFFFFFFFF8;
                v13 = _CocoaArrayWrapper.endIndex.getter(v78);
                v12 = v96;
                if (!v13)
                  break;
                goto LABEL_6;
              }
            }
            else
            {
              v38 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFF8) + 0x10);
              if (v38)
                goto LABEL_33;
            }

            swift_bridgeObjectRelease(v37);
            v5 = (uint64_t *)0xC000000000000018;
            v21 = v103;
            goto LABEL_18;
          }
          v22 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (v22)
            goto LABEL_16;
LABEL_7:

          swift_bridgeObjectRelease(v21);
          v12 = v96;
          v14 = v99;
        }
        while (v99 != v95);
      }
      swift_bridgeObjectRelease(v12);
      v9 = v108;
      v8 = v109;
    }
    type metadata accessor for WorldAnchor(0);
    v79 = (*(uint64_t (**)(void))((*v11 & *v3) + 0x2C0))();
    v81 = WorldAnchor.__allocating_init(anchor:shouldAutoUpdate:)(v79, 1, v80);
    (*(void (**)(uint64_t))((*v11 & *v9) + 0x2C8))(v81);
    v82 = *(void (**)(id *__return_ptr, __n128))(**(_QWORD **)(v8 + 88) + 144);
    v83 = swift_retain();
    v82(v114, v83);
    swift_release();
    v84 = (uint64_t *)v114[0];
    sub_10001A810((unint64_t)v114[0]);
    v85 = *v11 & *v9;
    if (v84 == v5)
    {
      v86 = 7;
    }
    else
    {
      v87 = *(uint64_t (**)(void))((*v11 & *v9) + 0xD0);
      v88 = v9;
      v89 = v87();
      v90 = *v11;
      if ((unint64_t)(v89 - 3) > 1)
      {
        v86 = 3;
      }
      else
      {
        v91 = *(uint64_t (**)(void))((v90 & *v3) + 0xD0);
        if ((unint64_t)(v91() - 3) > 1 || (v92 = v87(), v92 == v91()))
        {
          v77 = v88;
LABEL_104:

          goto LABEL_105;
        }
        v86 = v91();
        v90 = *v11;
      }
      v9 = v88;
      v85 = v90 & *v88;
    }
    v77 = v3;
    (*(void (**)(uint64_t))(v85 + 216))(v86);
    v3 = v9;
    goto LABEL_104;
  }
}

void sub_1000F94A4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v4)(Swift::String *__return_ptr, __n128);
  __n128 v5;
  unint64_t countAndFlagsBits;
  void (*v7)(Swift::String *__return_ptr, __n128);
  __n128 v8;
  void *object;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  void (*v13)(Swift::String *, __n128);
  __n128 v14;
  void *v15;
  _QWORD *v16;
  uint64_t (*v17)(void);
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  void *v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  void (*v29)(uint64_t);
  _QWORD *v30;
  _QWORD *v31;
  uint64_t (*v32)(void);
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t (*v36)(Swift::String *, __n128);
  __n128 v37;
  void (*v38)(Swift::String *, _QWORD);
  uint64_t v39;
  void *v40;
  void *v41;
  unint64_t v42;
  uint64_t v43;
  void (*v44)(Swift::String *, __n128);
  __n128 v45;
  _QWORD *v46;
  _QWORD v47[3];
  Swift::String v48;
  void *v49;
  _QWORD *v50;

  v2 = v1;
  v4 = *(void (**)(Swift::String *__return_ptr, __n128))(**(_QWORD **)(v1 + 88) + 144);
  v5 = swift_retain();
  v4(&v48, v5);
  swift_release();
  countAndFlagsBits = v48._countAndFlagsBits;
  if ((v48._countAndFlagsBits | 8) == 0xC000000000000018)
    return;
  v7 = *(void (**)(Swift::String *__return_ptr, __n128))(**(_QWORD **)(v1 + 128) + 144);
  v8 = swift_retain();
  v7(&v48, v8);
  swift_release();
  object = v48._object;
  v11 = v49;
  v10 = v50;

  if (!v10)
  {
    sub_10001A810(countAndFlagsBits);
    return;
  }
  if ((*(uint64_t (**)(void))((swift_isaMask & *v10) + 0x2F0))() != 1
    || ((*(void (**)(void))((swift_isaMask & *v10) + 0xD0))(), !MeasureObjectState.isMovable()()))
  {
    sub_10001A810(countAndFlagsBits);

    return;
  }
  v12 = *(_QWORD *)(v2 + 104);
  LOBYTE(v48._countAndFlagsBits) = 4;
  v13 = *(void (**)(Swift::String *, __n128))(*(_QWORD *)v12 + 392);
  v14 = swift_retain();
  v13(&v48, v14);
  swift_release();
  v15 = *(void **)(v2 + 312);
  *(_QWORD *)(v2 + 312) = v10;
  v46 = v10;

  if (qword_10047AA78 != -1)
    swift_once(&qword_10047AA78, sub_1000E1430);
  v48._countAndFlagsBits = 0;
  v48._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(37);
  swift_bridgeObjectRelease(v48._object);
  v48._countAndFlagsBits = 0xD000000000000016;
  v48._object = (void *)0x80000001003DFAD0;
  v16 = *(_QWORD **)(v2 + 312);
  if (!v16)
  {
LABEL_18:
    __break(1u);
    return;
  }
  v17 = *(uint64_t (**)(void))((swift_isaMask & *v16) + 0xB8);
  v18 = v16;
  v19 = v17();
  v21 = v20;

  v22._countAndFlagsBits = v19;
  v22._object = v21;
  String.append(_:)(v22);
  swift_bridgeObjectRelease(v21);
  v23._countAndFlagsBits = 0x6D61726620746120;
  v23._object = (void *)0xEB00000000203A65;
  String.append(_:)(v23);
  v47[0] = *a1;
  v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt, &protocol witness table for UInt);
  v25 = v24._object;
  String.append(_:)(v24);
  swift_bridgeObjectRelease(v25);
  v26 = v48._object;
  Log.default(_:isPrivate:)(v48, 0);
  swift_bridgeObjectRelease(v26);
  if (qword_10047AB68 != -1)
    swift_once(&qword_10047AB68, sub_10011E814);
  v27 = qword_1004AF6B8 + OBJC_IVAR____TtC7Measure14MetricsManager_measurementState;
  swift_beginAccess(qword_1004AF6B8 + OBJC_IVAR____TtC7Measure14MetricsManager_measurementState, v47, 1, 0);
  *(double *)(v27 + 16) = *(double *)(v27 + 16) + 1.0;
  v28 = *(_QWORD **)(v2 + 312);
  if (!v28
    || (v29 = *(void (**)(uint64_t))((swift_isaMask & *v28) + 0xD8),
        v30 = v28,
        v29(7),
        v30,
        (v31 = *(_QWORD **)(v2 + 312)) == 0))
  {
    __break(1u);
    goto LABEL_18;
  }
  v32 = *(uint64_t (**)(void))((swift_isaMask & *v31) + 0x268);
  v33 = v31;
  v34 = (_QWORD *)v32();
  if (v34)
  {
    v35 = v34;
    (*(void (**)(_QWORD *))((swift_isaMask & *v34) + 0x338))(v33);

    v33 = v35;
  }

  sub_100100854(v46);
  sub_100100C00(v46);
  v36 = *(uint64_t (**)(Swift::String *, __n128))(**(_QWORD **)(v2 + 128) + 400);
  v37 = swift_retain();
  v38 = (void (*)(Swift::String *, _QWORD))v36(&v48, v37);
  v40 = *(void **)(v39 + 16);
  v41 = *(void **)(v39 + 24);
  *(_QWORD *)(v39 + 16) = 0;
  *(_QWORD *)(v39 + 24) = 0;

  v38(&v48, 0);
  swift_release();
  v42 = *(_QWORD *)(v2 + 536);
  *(_QWORD *)(v2 + 536) = countAndFlagsBits;
  sub_100068AC4(countAndFlagsBits);
  sub_10001A810(v42);
  v43 = *(_QWORD *)(v2 + 88);
  v48._countAndFlagsBits = 0xC000000000000018;
  v44 = *(void (**)(Swift::String *, __n128))(*(_QWORD *)v43 + 392);
  v45 = swift_retain();
  v44(&v48, v45);
  sub_10001A810(countAndFlagsBits);
  swift_release();

}

uint64_t sub_1000F98D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(id *__return_ptr, uint64_t);
  uint64_t v4;
  id v5;
  _QWORD *v6;
  id v7;
  uint64_t (*v8)(void);
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  id v17[4];

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(void (**)(id *__return_ptr, uint64_t))(*(_QWORD *)v2 + 144);
  v4 = swift_retain(v2);
  v3(v17, v4);
  swift_release(v2);
  v5 = v17[1];
  v7 = v17[2];
  v6 = v17[3];

  if (!v6)
    goto LABEL_7;
  v8 = *(uint64_t (**)(void))((swift_isaMask & *v6) + 0x2C0);
  v9 = v6;
  v10 = v8();

  v11 = (*(uint64_t (**)(void))(*(_QWORD *)v10 + 216))();
  swift_release(v10);
  if (!v11)
  {

LABEL_7:
    v15 = *(_QWORD *)(v1 + 216);
    *(_QWORD *)(v1 + 216) = 0;
    return swift_release(v15);
  }
  v12 = *(_QWORD *)(v1 + 216);
  if (!v12)
  {

    goto LABEL_9;
  }
  v13 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 280);
  swift_retain(*(_QWORD *)(v1 + 216));
  v14 = swift_retain(v11);
  LOBYTE(v13) = v13(v14);
  swift_release(v12);
  swift_release(v11);

  if ((v13 & 1) == 0)
  {
LABEL_9:
    v15 = *(_QWORD *)(v1 + 216);
    *(_QWORD *)(v1 + 216) = v11;
    return swift_release(v15);
  }
  v15 = v11;
  return swift_release(v15);
}

double sub_1000F99FC()
{
  uint64_t v0;
  uint64_t v1;
  double result;
  _QWORD v3[4];

  if (*(_BYTE *)(v0 + 544) == 3)
  {
    swift_retain();
    StateValue.ifUpdated(_:)(sub_1000FFDFC, v0);
    swift_release();
    __chkstk_darwin(v1);
    v3[2] = sub_1000FFE04;
    v3[3] = v0;
    swift_retain();
    swift_retain();
    StateValue.ifUpdated(_:)(sub_1000127BC, v3);
    swift_release();
    *(_QWORD *)&result = swift_release().n128_u64[0];
  }
  return result;
}

void sub_1000F9AB8(unsigned __int8 *a1, uint64_t a2)
{
  int v3;
  char v4;
  void (*v5)(_QWORD *__return_ptr, __n128);
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  uint64_t Strong;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjectType;
  uint64_t v17;
  _QWORD v18[64];
  _BYTE __dst[512];

  v3 = a1[3];
  v4 = *a1 - 1 < 3;
  v5 = *(void (**)(_QWORD *__return_ptr, __n128))(**(_QWORD **)(a2 + 144) + 144);
  v6 = swift_retain();
  v5(v18, v6);
  swift_release();
  memcpy(__dst, v18, sizeof(__dst));
  sub_1000F9C6C(v4, (uint64_t)__dst);
  sub_100012C00((uint64_t)__dst);
  if (v3 == 1 && (*(_BYTE *)(a2 + 208) & 1) == 0)
  {
    v7 = *(_QWORD *)(a2 + 72);
    swift_beginAccess(v7 + 64, v18, 0, 0);
    v8 = *(_QWORD *)(v7 + 64);
    if ((unint64_t)v8 >> 62)
    {
      if (v8 < 0)
        v17 = *(_QWORD *)(v7 + 64);
      else
        v17 = v8 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v8);
      v9 = _CocoaArrayWrapper.endIndex.getter(v17);
      if (v9)
        goto LABEL_5;
    }
    else
    {
      v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(*(_QWORD *)(v7 + 64));
      if (v9)
      {
LABEL_5:
        if (v9 < 1)
        {
          __break(1u);
          return;
        }
        for (i = 0; i != v9; ++i)
        {
          if ((v8 & 0xC000000000000001) != 0)
          {
            v12 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v8);
          }
          else
          {
            v12 = *(_QWORD *)(v8 + 8 * i + 32);
            swift_retain();
          }
          Strong = swift_unknownObjectWeakLoadStrong(v12 + 16, v11);
          if (Strong)
          {
            v14 = Strong;
            v15 = *(_QWORD *)(v12 + 24);
            ObjectType = swift_getObjectType(Strong);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 120))(1, ObjectType, v15);
            swift_release();
            swift_unknownObjectRelease(v14);
          }
          else
          {
            swift_release();
          }
        }
      }
    }
    swift_bridgeObjectRelease(v8);
    *(_BYTE *)(a2 + 208) = 1;
  }
}

void sub_1000F9C6C(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void (*v5)(unint64_t *__return_ptr, __n128);
  __n128 v6;
  unint64_t v7;
  uint64_t (*v8)(__n128);
  __n128 v9;
  uint64_t v10;
  void (*v11)(double (*)(uint64_t), uint64_t, __n128);
  __n128 v12;
  unint64_t v13;

  if ((a1 & 1) != 0)
  {
    v3 = v2;
    v5 = *(void (**)(unint64_t *__return_ptr, __n128))(**(_QWORD **)(v2 + 88) + 144);
    v6 = swift_retain();
    v5(&v13, v6);
    swift_release();
    v7 = v13;
    sub_10001A810(v13);
    if (v7 == 0xC000000000000018)
    {
      sub_1000FA884(1, a2);
      if (qword_10047B190 != -1)
        swift_once(&qword_10047B190, sub_1001C81CC);
      if ((*(_BYTE *)(qword_1004AFD08 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits + 80) & 1) != 0)
      {
        __break(1u);
      }
      else
      {
        *(double *)(v3 + 464) = SIMD2<>.init(_:)(*(double *)(qword_1004AFD08 + OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits), *(double *)(qword_1004AFD08+ OBJC_IVAR____TtC7Measure12UIKitContext_sceneViewTraits+ 8));
        *(_DWORD *)(v3 + 472) = 1106247680;
        v8 = *(uint64_t (**)(__n128))(**(_QWORD **)(v3 + 120) + 200);
        v9 = swift_retain();
        v10 = v8(v9);
        swift_release();
        v11 = *(void (**)(double (*)(uint64_t), uint64_t, __n128))(*(_QWORD *)v10 + 280);
        v12 = swift_retain();
        v11(sub_1000FFEC0, v3, v12);
        swift_release();
        swift_release();
      }
    }
  }
}

void sub_1000F9DA8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  _QWORD *v29;
  uint64_t (*v30)(void);
  _QWORD *v31;
  _QWORD *v32;
  __n128 v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  char v42[24];

  v4 = a1;
  v5 = 0;
  v39 = a1 + 56;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 56);
  v40 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    do
    {
LABEL_4:
      if (v8)
      {
        v9 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v10 = v9 | (v5 << 6);
      }
      else
      {
        v11 = v5 + 1;
        if (__OFADD__(v5, 1))
          goto LABEL_56;
        if (v11 >= v40)
          return;
        v12 = *(_QWORD *)(v39 + 8 * v11);
        ++v5;
        if (!v12)
        {
          v5 = v11 + 1;
          if (v11 + 1 >= v40)
            return;
          v12 = *(_QWORD *)(v39 + 8 * v5);
          if (!v12)
          {
            v5 = v11 + 2;
            if (v11 + 2 >= v40)
              return;
            v12 = *(_QWORD *)(v39 + 8 * v5);
            if (!v12)
            {
              v13 = v11 + 3;
              if (v13 >= v40)
                return;
              v12 = *(_QWORD *)(v39 + 8 * v13);
              if (!v12)
              {
                while (1)
                {
                  v5 = v13 + 1;
                  if (__OFADD__(v13, 1))
                    goto LABEL_57;
                  if (v5 >= v40)
                    return;
                  v12 = *(_QWORD *)(v39 + 8 * v5);
                  ++v13;
                  if (v12)
                    goto LABEL_19;
                }
              }
              v5 = v13;
            }
          }
        }
LABEL_19:
        v8 = (v12 - 1) & v12;
        v10 = __clz(__rbit64(v12)) + (v5 << 6);
      }
      v14 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v10);
      v15 = *v14;
      v2 = v14[1];
      v16 = *(_QWORD *)(v41 + 72);
      swift_beginAccess(v16 + 88, v42, 0, 0);
      v3 = *(uint64_t **)(v16 + 88);
      v17 = (_QWORD *)v3[2];
    }
    while (!v17);
    v18 = v4;
    v19 = v3[4];
    v20 = v3[5];
    v21 = v19 == v15 && v20 == v2;
    if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(v19, v20, v15, v2, 0) & 1) != 0)
    {
LABEL_42:
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v2);
      sub_100101018(v15, v2);
      swift_bridgeObjectRelease(v2);
      v29 = *(_QWORD **)(v41 + 312);
      if (v29)
      {
        v3 = (uint64_t *)&swift_isaMask;
        v30 = *(uint64_t (**)(void))((swift_isaMask & *v29) + 0x238);
        v1 = v29;
        v2 = v30();
        if ((unint64_t)v2 >> 62)
          goto LABEL_58;
        if (*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_45;
LABEL_69:
        swift_release();

        swift_bridgeObjectRelease(v2);
      }
      else
      {
        swift_release();
      }
      return;
    }
    if (v17 != (_QWORD *)1)
    {
      v22 = v3[6];
      v23 = v3[7];
      v24 = v22 == v15 && v23 == v2;
      if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, v15, v2, 0) & 1) != 0)
        goto LABEL_42;
      if (v17 != (_QWORD *)2)
        break;
    }
  }
  v3 += 9;
  v25 = 2;
  while (1)
  {
    v1 = (_QWORD *)(v25 + 1);
    if (__OFADD__(v25, 1))
      break;
    v26 = *(v3 - 1);
    v27 = *v3;
    v28 = v26 == v15 && v27 == v2;
    if (v28 || (_stringCompareWithSmolCheck(_:_:expecting:)(v26, v27, v15, v2, 0) & 1) != 0)
      goto LABEL_42;
    v3 += 2;
    ++v25;
    if (v1 == v17)
    {
      v4 = v18;
      goto LABEL_4;
    }
  }
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  if (v2 < 0)
    v36 = v2;
  else
    v36 = v2 & 0xFFFFFFFFFFFFFF8;
  if (!_CocoaArrayWrapper.endIndex.getter(v36))
    goto LABEL_69;
LABEL_45:
  if ((v2 & 0xC000000000000001) != 0)
  {
    v31 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v2);
LABEL_48:
    v32 = v31;
    v33 = swift_bridgeObjectRelease(v2);
    v2 = (*(uint64_t (**)(__n128))((*v3 & *v32) + 0x250))(v33);

    if ((unint64_t)v2 >> 62)
      goto LABEL_65;
    if (!*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_69;
  }
  else
  {
    if (*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v31 = *(id *)(v2 + 32);
      goto LABEL_48;
    }
    __break(1u);
LABEL_65:
    if (v2 < 0)
      v37 = v2;
    else
      v37 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v38 = _CocoaArrayWrapper.endIndex.getter(v37);
    swift_bridgeObjectRelease(v2);
    if (!v38)
      goto LABEL_69;
  }
  if ((v2 & 0xC000000000000001) != 0)
  {
    v34 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v2);
    goto LABEL_53;
  }
  if (*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v34 = *(id *)(v2 + 32);
LABEL_53:
    v35 = v34;
    swift_bridgeObjectRelease(v2);
    sub_100100854(v35);
    swift_release();

    return;
  }
  __break(1u);
}

double sub_1000FA190()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  double result;
  _OWORD v6[9];

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  v1 = *(_OWORD *)(v0 + 432);
  v6[6] = *(_OWORD *)(v0 + 416);
  v6[7] = v1;
  v6[8] = *(_OWORD *)(v0 + 448);
  v2 = *(_OWORD *)(v0 + 368);
  v6[2] = *(_OWORD *)(v0 + 352);
  v6[3] = v2;
  v3 = *(_OWORD *)(v0 + 400);
  v6[4] = *(_OWORD *)(v0 + 384);
  v6[5] = v3;
  v4 = *(_OWORD *)(v0 + 336);
  v6[0] = *(_OWORD *)(v0 + 320);
  v6[1] = v4;
  sub_1000FFCBC((uint64_t)v6);
  sub_10001A810(*(_QWORD *)(v0 + 536));
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t sub_1000FA298(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[9];

  v1 = StateObserver.deinit(a1);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  v2 = *(_OWORD *)(v1 + 432);
  v7[6] = *(_OWORD *)(v1 + 416);
  v7[7] = v2;
  v7[8] = *(_OWORD *)(v1 + 448);
  v3 = *(_OWORD *)(v1 + 368);
  v7[2] = *(_OWORD *)(v1 + 352);
  v7[3] = v3;
  v4 = *(_OWORD *)(v1 + 400);
  v7[4] = *(_OWORD *)(v1 + 384);
  v7[5] = v4;
  v5 = *(_OWORD *)(v1 + 336);
  v7[0] = *(_OWORD *)(v1 + 320);
  v7[1] = v5;
  sub_1000FFCBC((uint64_t)v7);
  sub_10001A810(*(_QWORD *)(v1 + 536));
  swift_release();
  return v1;
}

uint64_t sub_1000FA3B4(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_1000FA298(a1);
  return swift_deallocClassInstance(v1, 577, 15);
}

uint64_t type metadata accessor for LinesInstrument(uint64_t a1)
{
  uint64_t result;

  result = qword_100483D38;
  if (!qword_100483D38)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LinesInstrument);
  return result;
}

uint64_t sub_1000FA40C(uint64_t a1)
{
  _QWORD v2[32];

  v2[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[4] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[5] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[6] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[7] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[8] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[9] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[10] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[11] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[12] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[13] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[14] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[15] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[16] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[17] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[18] = &unk_1003B7410;
  v2[19] = &unk_1003B7428;
  v2[20] = &unk_1003B7428;
  v2[21] = &unk_1003B7440;
  v2[22] = &unk_1003B7428;
  v2[23] = &unk_1003B7428;
  v2[24] = &unk_1003B7458;
  v2[25] = &unk_1003B7470;
  v2[26] = &unk_1003B7488;
  v2[27] = &unk_1003B7410;
  v2[28] = &unk_1003B74A0;
  v2[29] = &unk_1003B74B8;
  v2[30] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[31] = &unk_1003B74D0;
  return swift_initClassMetadata2(a1, 256, 32, v2, a1 + 208);
}

uint64_t sub_1000FA4DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_10047AAE8 != -1)
    swift_once(&qword_10047AAE8, sub_1000F4A00);
  v2 = type metadata accessor for UUID(0);
  v3 = sub_1000362E8(v2, (uint64_t)qword_1004AF640);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_1000FA54C()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 544);
}

uint64_t sub_1000FA554()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10000EDC8(&qword_10047E470);
  v1 = sub_100043310(&qword_10047E478, &qword_10047E470, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  return Publisher.eraseToAnyPublisher()(v0, v1);
}

uint64_t sub_1000FA5C0(char a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;

  v3 = *v1;
  v4 = swift_allocObject(&unk_100446588, 40, 7);
  *(_QWORD *)(v4 + 16) = v1;
  *(_BYTE *)(v4 + 24) = a1;
  *(_QWORD *)(v4 + 32) = v3;
  v5 = sub_10000EDC8((uint64_t *)&unk_10047E420);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  v6 = swift_retain();
  return Future.init(_:)(sub_1000FA668, v4, v6);
}

uint64_t sub_1000FA644()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 40, 7);
}

void sub_1000FA668(void (*a1)(_QWORD, __n128), uint64_t a2)
{
  uint64_t v2;

  sub_1000F4FB8(a1, a2, *(_QWORD *)(v2 + 16), *(unsigned __int8 *)(v2 + 24));
}

uint64_t sub_1000FA678()
{
  uint64_t v0;

  return sub_1000F5234(v0);
}

uint64_t sub_1000FA680(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000FA690(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_1000FA698()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(__n128);
  __n128 v3;
  uint64_t v4;
  __n128 v5;
  void (*v6)(unint64_t *__return_ptr, __n128);
  __n128 v7;
  unint64_t v8;
  void (*v9)(_QWORD *__return_ptr, __n128);
  __n128 v10;
  void (*v11)(unint64_t *__return_ptr, __n128);
  __n128 v12;
  unint64_t v13;
  _QWORD *v14;
  void (*v15)(uint64_t);
  _QWORD *v16;
  uint64_t v17;
  _QWORD v18[64];
  unint64_t __dst[64];

  v1 = v0;
  v2 = *(uint64_t (**)(__n128))(**(_QWORD **)(v0 + 128) + 200);
  v3 = swift_retain();
  v4 = v2(v3);
  v5 = swift_release();
  (*(void (**)(void (*)(id *), _QWORD, __n128))(*(_QWORD *)v4 + 280))(sub_1000FA840, 0, v5);
  swift_release();
  v6 = *(void (**)(unint64_t *__return_ptr, __n128))(**(_QWORD **)(v0 + 88) + 144);
  v7 = swift_retain();
  v6(__dst, v7);
  swift_release();
  v8 = __dst[0];
  sub_10001A810(__dst[0]);
  if (v8 == 0xC000000000000018)
  {
    v9 = *(void (**)(_QWORD *__return_ptr, __n128))(**(_QWORD **)(v1 + 144) + 144);
    v10 = swift_retain();
    v9(v18, v10);
    swift_release();
    memcpy(__dst, v18, sizeof(__dst));
    sub_1000FA884(0, (uint64_t)__dst);
    sub_100012C00((uint64_t)__dst);
    return;
  }
  v11 = *(void (**)(unint64_t *__return_ptr, __n128))(**(_QWORD **)(v1 + 88) + 144);
  v12 = swift_retain();
  v11(__dst, v12);
  swift_release();
  v13 = __dst[0];
  sub_10001A810(__dst[0]);
  v14 = *(_QWORD **)(v1 + 312);
  if (v13 == 0xC000000000000010)
  {
    if (!v14)
      return;
    v15 = *(void (**)(uint64_t))((swift_isaMask & *v14) + 0xD8);
    v16 = v14;
    v17 = 3;
  }
  else
  {
    if (!v14)
      return;
    v15 = *(void (**)(uint64_t))((swift_isaMask & *v14) + 0xD8);
    v16 = v14;
    v17 = 1;
  }
  v15(v17);

}

void sub_1000FA840(id *a1)
{

  a1[2] = 0;
  a1[3] = 0;

  *a1 = 0;
  a1[1] = 0;
}

void sub_1000FA884(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v6;
  void (*v7)(Swift::String *__return_ptr, __n128);
  __n128 v8;
  uint64_t countAndFlagsBits;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  uint64_t (*v13)(void);
  uint64_t (*v14)(void);
  _QWORD *v15;
  uint64_t v16;
  char v17;
  char v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t (*v25)(void);
  uint64_t (*v26)(void);
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  void *v30;
  uint64_t (*v31)(void);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(void);
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v48;
  _QWORD *v49;
  uint64_t (*v50)(void);
  _QWORD *v51;
  uint64_t v52;
  void *v53;
  void *v54;
  Swift::String v55;
  Swift::String v56;
  Swift::String v57;
  void *object;
  void *v59;
  void *v60;
  unint64_t v61;
  uint64_t v62;
  void (*v63)(Swift::String *, __n128);
  __n128 v64;
  uint64_t (*v65)(void);
  _QWORD *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  id v71;
  void *v72;
  _QWORD *v73;
  void (*v74)(uint64_t);
  _QWORD *v75;
  uint64_t v76;
  void (*v77)(Swift::String *, __n128);
  __n128 v78;
  uint64_t v79;
  __n128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t (*v85)(void);
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  id v89;
  uint64_t (*v90)(void);
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  __n128 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v103;
  uint64_t (*v104)(void);
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  id v110;
  uint64_t v111;
  _QWORD *v112;
  _QWORD *v113;
  _QWORD *v114;
  _QWORD *v115;
  uint64_t (*v116)(void);
  uint64_t v117;
  uint64_t (*v118)(void);
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  __n128 v123;
  uint64_t v124;
  uint64_t (*v125)(void);
  uint64_t (*v126)(void);
  char v128;
  void *v129;
  uint64_t v130;
  char v131;
  uint64_t (*v132)(void);
  uint64_t (*v133)(void);
  uint64_t v134;
  uint64_t (*v135)(void);
  _QWORD *v136;
  uint64_t (*v137)(void);
  uint64_t (*v138)(void);
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  _QWORD *v142;
  uint64_t (*v143)(void);
  uint64_t (*v144)(void);
  Swift::String v145;

  v3 = v2;
  v6 = 0xC000000000000010;
  v7 = *(void (**)(Swift::String *__return_ptr, __n128))(**(_QWORD **)(v2 + 88) + 144);
  v8 = swift_retain();
  v7(&v145, v8);
  swift_release();
  countAndFlagsBits = v145._countAndFlagsBits;
  sub_10001A810(v145._countAndFlagsBits);
  if (countAndFlagsBits != 0xC000000000000018)
    return;
  if ((a1 & 1) != 0)
  {
    v10 = (_QWORD *)SnapType.all.unsafeMutableAddressor();
    sub_1000F6208(*v10, a2);
  }
  sub_1000F8C6C();
  v11 = *(_QWORD **)(v2 + 304);
  if (!v11)
    return;
  v12 = *(void **)(v2 + 312);
  if (!v12)
    return;
  v13 = *(uint64_t (**)(void))((swift_isaMask & *v11) + 0x2C0);
  v14 = v11;
  v15 = v12;
  v16 = v13();
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 376))(v16);
  v18 = v17;
  v19 = swift_release();
  if ((v18 & 1) == 0)
  {
    v20 = ((uint64_t (*)(__n128))v13)(v19);
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 216))(v20);
    swift_release();
    swift_release();
    if (v21)
    {
      type metadata accessor for WorldAnchor(0);
      v22 = v13();
      v24 = WorldAnchor.__allocating_init(anchor:shouldAutoUpdate:)(v22, 1, v23);
      (*(void (**)(uint64_t))((swift_isaMask & *v15) + 0x2E0))(v24);
    }
  }
  v25 = *(uint64_t (**)(void))((swift_isaMask & *(_QWORD *)v14) + 0x2F0);
  v26 = v15;
  v27 = v25();
  v28 = v27 > 8 || ((1 << v27) & 0x1E9) == 0;
  v132 = v26;
  v133 = v26;
  v136 = (_QWORD *)v2;
  v137 = v14;
  v29 = (uint64_t)&swift_isaMask;
  if (v28)
  {
    v65 = *(uint64_t (**)(void))((swift_isaMask & *(_QWORD *)v14) + 0x238);
    v69 = v65();
    if ((unint64_t)v69 >> 62)
      goto LABEL_82;
    v79 = *(_QWORD *)((v69 & 0xFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_52;
  }
  while (1)
  {
    (*(void (**)(_QWORD))((swift_isaMask & *(_QWORD *)v26) + 0xD8))(0);
    v30 = *(void **)(v3 + 224);
    if (v30)
    {
      v31 = *(uint64_t (**)(void))((swift_isaMask & *(_QWORD *)v26) + 0x238);
      v142 = v30;
      v32 = v31();
      v33 = v32;
      if ((unint64_t)v32 >> 62)
      {
        if (v32 >= 0)
          v32 &= 0xFFFFFFFFFFFFFF8uLL;
        v34 = _CocoaArrayWrapper.endIndex.getter(v32);
      }
      else
      {
        v34 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v29 = (uint64_t)&swift_isaMask;
      if (v34)
      {
        v35 = 0;
        v36 = 0;
        v138 = *(uint64_t (**)(void))((swift_isaMask & *v142) + 0xB8);
        v140 = v33 & 0xC000000000000001;
        v134 = v33 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
        v131 = v35;
        v6 = v36;
        do
        {
          if (v140)
          {
            v37 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v33);
          }
          else
          {
            if (v6 >= *(_QWORD *)(v134 + 16))
              goto LABEL_74;
            v37 = *(id *)(v33 + 8 * v6 + 32);
          }
          v38 = v37;
          v36 = v6 + 1;
          v29 = (uint64_t)&swift_isaMask;
          if (__OFADD__(v6, 1))
          {
            __break(1u);
LABEL_74:
            __break(1u);
LABEL_75:
            __break(1u);
            goto LABEL_76;
          }
          v3 = v33;
          v39 = v142;
          v40 = v138();
          v42 = v41;

          v43 = *(uint64_t (**)(void))((swift_isaMask & *v38) + 0xB8);
          v44 = v38;
          v29 = v43();
          v46 = v45;

          if (v40 == v29 && v42 == v46)
          {
            swift_bridgeObjectRelease_n(v42, 2);

            v33 = v3;
LABEL_32:
            v35 = 1;
            if (v36 != v34)
              goto LABEL_18;

            swift_bridgeObjectRelease(v33);
            v3 = (uint64_t)v136;
            v29 = (uint64_t)&swift_isaMask;
            v6 = 0xC000000000000010;
            goto LABEL_38;
          }
          v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v40, v42, v29, v46, 0);
          swift_bridgeObjectRelease(v42);
          swift_bridgeObjectRelease(v46);

          v33 = v3;
          if ((v29 & 1) != 0)
            goto LABEL_32;
          ++v6;
        }
        while (v36 != v34);
        v48 = swift_bridgeObjectRelease(v3);
        v3 = (uint64_t)v136;
        v29 = (uint64_t)&swift_isaMask;
        v6 = 0xC000000000000010;
        if ((v131 & 1) != 0)
        {

          goto LABEL_38;
        }
      }
      else
      {
        v48 = swift_bridgeObjectRelease(v33);
      }
      (*(void (**)(uint64_t (*)(void), __n128))((swift_isaMask & *v142) + 0x330))(v133, v48);

    }
LABEL_38:
    if (qword_10047AA78 != -1)
LABEL_76:
      swift_once(&qword_10047AA78, sub_1000E1430);
    v11 = (_QWORD *)qword_1004AF548;
    v145._countAndFlagsBits = 0;
    v145._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease(v145._object);
    v145._countAndFlagsBits = 0xD000000000000014;
    v145._object = (void *)0x80000001003DFAF0;
    v49 = *(_QWORD **)(v3 + 312);
    if (!v49)
      goto LABEL_119;
    v50 = *(uint64_t (**)(void))((*(_QWORD *)v29 & *v49) + 0xB8);
    v51 = v49;
    v52 = v50();
    v54 = v53;

    v55._countAndFlagsBits = v52;
    v55._object = v54;
    String.append(_:)(v55);
    swift_bridgeObjectRelease(v54);
    v56._countAndFlagsBits = 0x6D61726620746120;
    v56._object = (void *)0xEB00000000203A65;
    String.append(_:)(v56);
    v57._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt, &protocol witness table for UInt);
    object = v57._object;
    String.append(_:)(v57);
    swift_bridgeObjectRelease(object);
    v59 = v145._object;
    Log.default(_:isPrivate:)(v145, 0);
    swift_bridgeObjectRelease(v59);
    v14 = v132;
    sub_100100C00(v132);
    sub_100101BD8(v132);
    v60 = *(void **)(v3 + 312);
    *(_QWORD *)(v3 + 312) = 0;

    v61 = *(_QWORD *)(v3 + 536);
    v62 = *(_QWORD *)(v3 + 88);
    v145._countAndFlagsBits = v61;
    v63 = *(void (**)(Swift::String *, __n128))(*(_QWORD *)v62 + 392);
    sub_100068AC4(v61);
    sub_100068AC4(v61);
    v64 = swift_retain();
    v63(&v145, v64);
    sub_10001A810(v61);
    swift_release();
    v26 = v137;
    v65 = v133;
    if (*(_QWORD *)(v3 + 536) != v6)
      goto LABEL_48;
    v66 = (_QWORD *)sub_100101D38();
    if (!v66)
      goto LABEL_48;
    v67 = v66;
    v68 = (*(uint64_t (**)(void))((swift_isaMask & *v66) + 0x250))();
    v69 = v68;
    if ((v68 & 0xC000000000000001) != 0)
    {
      v70 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v68);
LABEL_45:
      v71 = v70;
      swift_bridgeObjectRelease(v69);
      v72 = *(void **)(v3 + 312);
      *(_QWORD *)(v3 + 312) = v71;

      v73 = *(_QWORD **)(v3 + 312);
      if (v73)
      {
        v74 = *(void (**)(uint64_t))((swift_isaMask & *v73) + 0xD8);
        v75 = v73;
        v74(3);

      }
LABEL_48:
      v76 = *(_QWORD *)(v3 + 104);
      LOBYTE(v145._countAndFlagsBits) = 5;
      v77 = *(void (**)(Swift::String *, __n128))(*(_QWORD *)v76 + 392);
      v78 = swift_retain();
      v77(&v145, v78);
      swift_release();

      return;
    }
    if (*(_QWORD *)((v68 & 0xFFFFFFFFFFFFF8) + 0x10) >= 2uLL)
    {
      v70 = *(id *)(v68 + 40);
      goto LABEL_45;
    }
    __break(1u);
LABEL_82:
    if (v69 < 0)
      v105 = v69;
    else
      v105 = v69 & 0xFFFFFFFFFFFFFF8;
    v79 = _CocoaArrayWrapper.endIndex.getter(v105);
LABEL_52:
    v80 = swift_bridgeObjectRelease(v69);
    v132 = v26;
    if (!v79)
    {
      v29 = (uint64_t)&swift_isaMask;
      v81 = (*(uint64_t (**)(__n128))((swift_isaMask & *(_QWORD *)v26) + 0x238))(v80);
      v82 = v81;
      v135 = v65;
      if (!((unint64_t)v81 >> 62))
      {
        v83 = *(_QWORD *)((v81 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v83)
          goto LABEL_55;
        goto LABEL_89;
      }
      if (v81 >= 0)
        v81 &= 0xFFFFFFFFFFFFFF8uLL;
      v83 = _CocoaArrayWrapper.endIndex.getter(v81);
      if (!v83)
      {
LABEL_89:

        swift_bridgeObjectRelease(v82);
        v132 = v14;
        v65 = v135;
        goto LABEL_90;
      }
LABEL_55:
      if (v83 < 1)
        goto LABEL_118;
      v3 = 0;
      v141 = v82 & 0xC000000000000001;
      v143 = *(uint64_t (**)(void))((swift_isaMask & *(_QWORD *)v26) + 0xB8);
      v139 = v82;
      while (1)
      {
        if (v141)
          v89 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3, v82);
        else
          v89 = *(id *)(v82 + 8 * v3 + 32);
        v6 = (unint64_t)v89;
        v90 = v26;
        v91 = v143();
        v93 = v92;

        v94 = (*(uint64_t (**)(void))((swift_isaMask & *(_QWORD *)v6) + 0x250))();
        v95 = v94;
        if ((v94 & 0xC000000000000001) != 0)
        {
          v96 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v94);
        }
        else
        {
          if (!*(_QWORD *)((v94 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_75;
          v96 = *(id *)(v94 + 32);
        }
        v97 = v96;
        v98 = swift_bridgeObjectRelease(v95);
        v99 = (*(uint64_t (**)(__n128))((swift_isaMask & *v97) + 0xB8))(v98);
        v101 = v100;

        if (v91 == v99 && v93 == v101)
        {
          swift_bridgeObjectRelease_n(v93, 2);
          v84 = (_QWORD *)v83;
        }
        else
        {
          v103 = _stringCompareWithSmolCheck(_:_:expecting:)(v91, v93, v99, v101, 0);
          swift_bridgeObjectRelease(v101);
          swift_bridgeObjectRelease(v93);
          v84 = (_QWORD *)v83;
          if ((v103 & 1) == 0)
          {
            v14 = v137;
            v104 = v137;
            v86 = v6;
            v87 = 0;
            v88 = v11;
            goto LABEL_59;
          }
        }
        v14 = v137;
        v85 = v137;
        v86 = v6;
        v87 = v11;
        v88 = 0;
LABEL_59:
        sub_10010154C(v86, v87, v88, 1);
        v26 = v133;
        v82 = v139;
        ++v3;

        v29 = (uint64_t)&swift_isaMask;
        if (v84 == (_QWORD *)v3)
          goto LABEL_89;
      }
    }
LABEL_90:
    v106 = ((uint64_t (*)(__n128))v65)(v80);
    if ((unint64_t)v106 >> 62)
      goto LABEL_113;
    v107 = *(_QWORD *)((v106 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_92:
    v29 = (uint64_t)&swift_isaMask;
    if (v107)
      break;
LABEL_111:
    swift_bridgeObjectRelease(v106);
    v3 = (uint64_t)v136;
    v6 = 0xC000000000000010;
    v26 = v133;
  }
  if (v107 >= 1)
  {
    v108 = 0;
    v144 = *(uint64_t (**)(void))((swift_isaMask & *(_QWORD *)v14) + 0xB8);
    while (1)
    {
      if ((v106 & 0xC000000000000001) != 0)
        v114 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v108, v106);
      else
        v114 = *(id *)(v106 + 8 * v108 + 32);
      v115 = v114;
      v116 = v14;
      v117 = v144();
      v14 = v118;

      v119 = (*(uint64_t (**)(void))((swift_isaMask & *v115) + 0x250))();
      v120 = v119;
      if ((v119 & 0xC000000000000001) != 0)
      {
        v121 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v119);
      }
      else
      {
        if (!*(_QWORD *)((v119 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
LABEL_113:
          if (v106 < 0)
            v130 = v106;
          else
            v130 = v106 & 0xFFFFFFFFFFFFFF8;
          v107 = _CocoaArrayWrapper.endIndex.getter(v130);
          goto LABEL_92;
        }
        v121 = *(id *)(v119 + 32);
      }
      v122 = v121;
      v123 = swift_bridgeObjectRelease(v120);
      v124 = (*(uint64_t (**)(__n128))((swift_isaMask & *v122) + 0xB8))(v123);
      v126 = v125;

      if (v117 == v124 && v14 == v126)
      {
        swift_bridgeObjectRelease_n(v14, 2);
      }
      else
      {
        v128 = _stringCompareWithSmolCheck(_:_:expecting:)(v117, v14, v124, v126, 0);
        swift_bridgeObjectRelease(v126);
        swift_bridgeObjectRelease(v14);
        if ((v128 & 1) == 0)
        {
          v129 = (void *)v136[39];
          v110 = v129;
          v111 = (uint64_t)v115;
          v112 = 0;
          v113 = v129;
          goto LABEL_97;
        }
      }
      v109 = (void *)v136[39];
      v110 = v109;
      v111 = (uint64_t)v115;
      v112 = v109;
      v113 = 0;
LABEL_97:
      sub_10010154C(v111, v112, v113, 1);
      v14 = v137;
      ++v108;

      v29 = (uint64_t)&swift_isaMask;
      if (v107 == v108)
        goto LABEL_111;
    }
  }
  __break(1u);
LABEL_118:
  __break(1u);
LABEL_119:
  __break(1u);
}

_QWORD *sub_1000FB388(uint64_t a1, void **a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  __int128 v16;
  __int128 v17;
  void (*v18)(id *__return_ptr, __n128);
  __n128 v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  uint64_t (*v24)(id *, __n128);
  __n128 v25;
  void (*v26)(id *, _QWORD);
  uint64_t v27;
  void *v28;
  void *v29;
  double v30;
  char v31;
  id v32;
  char v33;
  void (*v34)(id *__return_ptr, __n128);
  __n128 v35;
  id v36;
  void *v37;
  id v38;
  id v39;
  _QWORD *v40;
  void (*v41)(id *__return_ptr, __n128);
  __n128 v42;
  void *v43;
  void *v44;
  uint64_t (*v45)(id *);
  id v46;
  id v47;
  void (*v48)(id *, _QWORD);
  uint64_t v49;
  void *v50;
  void *v51;
  _QWORD *result;
  void (*v53)(__int128 *__return_ptr, __n128);
  __n128 v54;
  uint64_t v55;
  id v56;
  void (*v57)(__int128 *__return_ptr, __n128);
  __n128 v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(_OWORD *);
  void (*v62)(double);
  id v63;
  __n128 v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  id v68;
  _OWORD v69[9];
  uint64_t v70;
  _OWORD v71[9];
  uint64_t v72;
  _OWORD v73[9];
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  _QWORD v85[20];
  id v86;
  void *v87;
  id v88;
  id v89;
  char v90;
  _OWORD __dst[30];

  v11 = *a2;
  v12 = *(void **)(a1 + 224);
  *(_QWORD *)(a1 + 224) = *a2;
  v13 = v11;

  if (a3)
  {
    v14 = *(void **)(a1 + 304);
    *(_QWORD *)(a1 + 304) = a3;
    v15 = a3;

    memcpy(__dst, (const void *)(a4 + 32), sizeof(__dst));
    v16 = __dst[20];
    *(_OWORD *)(a1 + 240) = __dst[19];
    *(_OWORD *)(a1 + 256) = v16;
    v17 = __dst[22];
    *(_OWORD *)(a1 + 272) = __dst[21];
    *(_OWORD *)(a1 + 288) = v17;
  }
  if (a5)
  {
    v18 = *(void (**)(id *__return_ptr, __n128))(**(_QWORD **)(a1 + 128) + 144);
    v19 = swift_retain();
    v18(&v86, v19);
    swift_release();
    v20 = v86;
    v21 = v87;
    v22 = v88;
    v23 = v89;

    v24 = *(uint64_t (**)(id *, __n128))(**(_QWORD **)(a1 + 128) + 400);
    v25 = swift_retain();
    v26 = (void (*)(id *, _QWORD))v24(&v86, v25);
    v28 = *(void **)v27;
    v29 = *(void **)(v27 + 8);
    *(_QWORD *)v27 = v22;
    *(_QWORD *)(v27 + 8) = v23;

    v26(&v86, 0);
  }
  else
  {
    sub_1000FC584(a4, (uint64_t)&v86, *(double *)(a1 + 464));
    v30 = *(double *)&v86;
    v31 = (char)v87;
    v32 = v88;
    v68 = v89;
    v33 = v90;
    v34 = *(void (**)(id *__return_ptr, __n128))(**(_QWORD **)(a1 + 128) + 144);
    v35 = swift_retain();
    v34(&v86, v35);
    swift_release();
    v36 = v86;
    v37 = v87;
    v38 = v88;
    v39 = v89;
    v40 = v86;

    v41 = *(void (**)(id *__return_ptr, __n128))(**(_QWORD **)(a1 + 128) + 144);
    v42 = swift_retain();
    v41(&v86, v42);
    swift_release();

    v43 = v87;
    if ((v31 & 1) != 0 || !v32 || (v33 & 1) != 0)
    {

      v44 = 0;
      v36 = 0;
    }
    else
    {
      if (v36)
      {
        v62 = *(void (**)(double))((swift_isaMask & *v40) + 0x208);
        swift_retain();
        v62(v30);

      }
      else
      {
        v63 = objc_allocWithZone((Class)type metadata accessor for ScreenPoint(0));
        swift_retain();
        v36 = (id)ScreenPoint.init(_:)(v30);
      }
      type metadata accessor for WorldAnchor(0);
      v64 = swift_retain();
      v66 = WorldAnchor.__allocating_init(anchor:shouldAutoUpdate:)(v65, 1, v64);
      v67 = objc_allocWithZone((Class)type metadata accessor for WorldPoint(0));
      v44 = (void *)WorldPoint.init(anchor:type:state:)(v66, 0, v68);
      swift_release();

    }
    v45 = *(uint64_t (**)(id *))(**(_QWORD **)(a1 + 128) + 400);
    v46 = v44;
    swift_retain();
    v47 = v36;
    v48 = (void (*)(id *, _QWORD))v45(&v86);
    v50 = *(void **)v49;
    v51 = *(void **)(v49 + 8);
    *(_QWORD *)v49 = v36;
    *(_QWORD *)(v49 + 8) = v44;

    v48(&v86, 0);
    swift_release();

  }
  swift_release();
  result = objc_msgSend((id)objc_opt_self(Gestalt), "jasperAvailable");
  if ((_DWORD)result)
  {
    sub_100012C58(a6, (uint64_t)v85, &qword_100483F60);
    sub_100012C58((uint64_t)v85, (uint64_t)&v86, &qword_100483F60);
    result = (_QWORD *)sub_1000FFB04((uint64_t)&v86);
    if ((_DWORD)result != 1)
    {
      v53 = *(void (**)(__int128 *__return_ptr, __n128))(**(_QWORD **)(a1 + 200) + 144);
      sub_1000FFD08(v85, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000FFD6C);
      sub_1000127E8(&v86);
      v54 = swift_retain();
      v53(&v75, v54);
      swift_release();
      v71[6] = v81;
      v71[7] = v82;
      v71[8] = v83;
      v72 = v84;
      v71[2] = v77;
      v71[3] = v78;
      v71[4] = v79;
      v71[5] = v80;
      v71[0] = v75;
      v71[1] = v76;
      v55 = *((_QWORD *)&v83 + 1);
      v56 = *((id *)&v83 + 1);
      sub_100012BC4((uint64_t)v71);
      v57 = *(void (**)(__int128 *__return_ptr, __n128))(**(_QWORD **)(a1 + 200) + 144);
      v58 = swift_retain();
      v57(&v75, v58);
      swift_release();
      v73[6] = v81;
      v73[7] = v82;
      v73[8] = v83;
      v74 = v84;
      v73[2] = v77;
      v73[3] = v78;
      v73[4] = v79;
      v73[5] = v80;
      v73[0] = v75;
      v73[1] = v76;
      v59 = v84;
      swift_bridgeObjectRetain(v84);
      sub_100012BC4((uint64_t)v73);
      sub_100012C58((uint64_t)&v86, (uint64_t)&v75, (uint64_t *)&unk_100486700);
      *((_QWORD *)&v83 + 1) = v55;
      v84 = v59;
      v60 = *(_QWORD *)(a1 + 200);
      v69[0] = v75;
      v69[1] = v76;
      v69[4] = v79;
      v69[5] = v80;
      v69[2] = v77;
      v69[3] = v78;
      v70 = v59;
      v69[7] = v82;
      v69[8] = v83;
      v69[6] = v81;
      v61 = *(void (**)(_OWORD *))(*(_QWORD *)v60 + 392);
      swift_retain();
      sub_1000FFDBC((uint64_t)&v75);
      v61(v69);
      sub_100012BC4((uint64_t)&v75);
      swift_release();
      return sub_1000FFD08(v85, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000FFA54);
    }
  }
  return result;
}

void sub_1000FB874(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>, __n128 a4@<Q1>, __n128 a5@<Q2>, __n128 a6@<Q3>)
{
  uint64_t v8;
  __n128 v9;
  unint64_t v10;
  __int128 v11;
  _QWORD *v12;
  uint64_t (*v13)(void);
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  __n128 v18;
  _QWORD *v19;
  _QWORD *v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __int128 v26;
  __int128 v27;
  char v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  __n128 v32;
  __int128 v33;
  unint64_t v38;

  v8 = *(_QWORD *)(**(_QWORD **)(a1 + 88) + 144);
  v9 = swift_retain();
  ((void (*)(unint64_t *__return_ptr, __n128))v8)(&v38, v9);
  swift_release();
  v10 = v38;
  sub_10001A810(v38);
  v11 = 0uLL;
  if (v10 != 0xC000000000000010 || (v12 = *(_QWORD **)(a1 + 312)) == 0)
  {
    v28 = 1;
    v27 = 0uLL;
    goto LABEL_11;
  }
  v13 = *(uint64_t (**)(void))((swift_isaMask & *v12) + 0x238);
  v14 = v12;
  v15 = v13();

  if ((v15 & 0xC000000000000001) != 0)
  {
    v16 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v15);
  }
  else
  {
    if (!*(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_14;
    }
    v16 = *(id *)(v15 + 32);
  }
  v17 = v16;
  v18 = swift_bridgeObjectRelease(v15);
  v8 = (*(uint64_t (**)(__n128))((swift_isaMask & *v17) + 0x250))(v18);

  if ((v8 & 0xC000000000000001) != 0)
  {
LABEL_14:
    v19 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v8);
    goto LABEL_9;
  }
  if (*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v19 = *(id *)(v8 + 32);
LABEL_9:
    v20 = v19;
    v21 = swift_bridgeObjectRelease(v8);
    v22.n128_f64[0] = (*(double (**)(__n128))((swift_isaMask & *v20) + 0x2B0))(v21);
    v31 = v23;
    v32 = v22;
    v29 = v25;
    v30 = v24;

    *(double *)&v26 = simd_float4x4.position.getter(v32, v31, v30, v29);
    v33 = v26;
    *(double *)&v27 = simd_float4x4.position.getter(a3, a4, a5, a6);
    v11 = v33;
    v28 = 0;
LABEL_11:
    *(_OWORD *)a2 = v11;
    *(_OWORD *)(a2 + 16) = v27;
    *(_BYTE *)(a2 + 32) = v28;
    return;
  }
  __break(1u);
}

void sub_1000FBA24(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  void (*v9)(void **__return_ptr, uint64_t);
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  _QWORD *v15;
  uint64_t v16;
  void (*v17)(void **__return_ptr, uint64_t);
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  _QWORD *v23;
  uint64_t v24;
  void (*v25)(void **__return_ptr, uint64_t);
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  void (*v31)(uint64_t);
  _QWORD *v32;
  uint64_t v33;
  void (*v34)(uint64_t);
  _QWORD *v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(void **);
  id v41;
  _QWORD *v42;
  void (*v43)(void **, _QWORD);
  uint64_t v44;
  void *v45;
  void *v46;
  void *v49;
  void *v50;
  id v51;
  id v52;

  v5 = v4;
  v8 = *(_QWORD *)(v4 + 128);
  v9 = *(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v8 + 144);
  v10 = swift_retain(v8);
  v9(&v49, v10);
  swift_release(v8);
  v11 = v49;
  v12 = v50;
  v13 = v51;
  v14 = v52;
  v15 = v51;

  v16 = *(_QWORD *)(v5 + 128);
  v17 = *(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v16 + 144);
  v18 = swift_retain(v16);
  v17(&v49, v18);
  swift_release(v16);
  v19 = v49;
  v20 = v50;
  v21 = v51;
  v22 = v52;
  v23 = v52;

  v24 = *(_QWORD *)(v5 + 128);
  v25 = *(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v24 + 144);
  v26 = swift_retain(v24);
  v25(&v49, v26);
  swift_release(v24);
  v27 = v49;
  v28 = v50;
  v29 = v51;
  v30 = v52;

  if (!v29)
  {

    v36 = objc_allocWithZone((Class)type metadata accessor for ScreenPoint(0));
    v13 = (id)ScreenPoint.init(_:)(a4);

    if (v22)
      goto LABEL_4;
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(double))((swift_isaMask & *v15) + 0x208))(a4);

    if (v22)
    {
LABEL_4:
      v31 = *(void (**)(uint64_t))((swift_isaMask & *v23) + 0x2C8);
      v32 = v23;
      v33 = swift_retain(a1);
      v31(v33);

      v34 = *(void (**)(uint64_t))((swift_isaMask & *v32) + 0x2F8);
      v35 = v32;
      v34(a2);

      (*(void (**)(uint64_t))((swift_isaMask & *v35) + 0xD8))(a3);
LABEL_7:
      v39 = *(_QWORD *)(v5 + 128);
      v40 = *(uint64_t (**)(void **))(*(_QWORD *)v39 + 400);
      v41 = v13;
      v42 = v35;
      swift_retain(v39);
      v43 = (void (*)(void **, _QWORD))v40(&v49);
      v45 = *(void **)(v44 + 16);
      v46 = *(void **)(v44 + 24);
      *(_QWORD *)(v44 + 16) = v13;
      *(_QWORD *)(v44 + 24) = v22;

      v43(&v49, 0);
      swift_release(v39);

      return;
    }
LABEL_6:
    v37 = objc_allocWithZone((Class)type metadata accessor for WorldPoint(0));
    v38 = swift_retain(a1);
    v35 = (_QWORD *)WorldPoint.init(anchor:type:state:)(v38, a2, a3);
    v22 = v35;
    goto LABEL_7;
  }

  __break(1u);
}

void *sub_1000FBC90@<X0>(_QWORD *a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  void *result;
  void *v9;
  id v10;
  __n128 v11;
  __n128 v12;
  __n128 v13;
  __n128 v14;
  uint64_t v15;
  int8x16_t v16;
  double v17;
  float v18;
  float v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  double v29;
  uint64_t v30;
  __n128 v31;
  __n128 v32;
  uint64_t v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  float32x2_t v37;
  float v38;
  int32x2_t v39;
  float32x2_t v40;
  int32x2_t v41;
  float32x2_t v42;
  __n128 v43;
  __n128 v44;
  uint64_t v45;
  __n128 v46;
  __n128 v47;
  float32x2_t v48;
  int32x2_t v49;
  float32x2_t v50;
  int32x2_t v51;
  float32x2_t v52;
  float v53;
  __n128 v54;
  __n128 v55;
  uint64_t v56;
  __int128 v57;
  int8x16_t v58;
  int8x16_t v59;
  __n128 v60;
  __n128 v61;
  __n128 v62;
  __n128 v63;
  __n128 v64;
  __n128 v65;
  float32x2_t v66;
  float v67;
  __n128 v68;
  __n128 v69;
  __n128 v70;
  __n128 v71;
  __n128 v72;
  __n128 v73;
  __n128 v74;
  __n128 v75;
  __n128 v76;
  __n128 v77;
  __n128 v78;
  __n128 v79;
  _OWORD v80[10];
  _BYTE v81[160];

  v4 = v3;
  result = (void *)sub_10008F8B8();
  if (result)
  {
    v9 = result;
    v10 = objc_msgSend(result, "camera");

    objc_msgSend(v10, "transform");
    v76 = v12;
    v78 = v11;
    v72 = v14;
    v74 = v13;

    *(double *)v16.i64 = simd_float4x4.forward.getter(v15);
    v67 = 0.0 - *(float *)v16.i32;
    v16.i32[0] = vextq_s8(v16, v16, 8uLL).u32[0];
    v66 = vsub_f32(0, *(float32x2_t *)v16.i8);
    v17 = simd_float4x4.position.getter(v78, v76, v74, v72);
    v19 = (float)((float)(v18 + (float)(0.1 * v66.f32[0])) * v66.f32[0])
        + (float)((float)(v67 * (float)(*(float *)&v17 + (float)(v67 * 0.1)))
                + vmuls_lane_f32(*((float *)&v17 + 1) + vmuls_lane_f32(0.1, v66, 1), v66, 1));
    v20.n128_f64[0] = (*(double (**)(void))((swift_isaMask & *a1) + 0x2A0))();
    v77 = v21;
    v79 = v20;
    v75 = v22;
    v68 = v23;
    v24.n128_f64[0] = (*(double (**)(void))((swift_isaMask & *a1) + 0x2A8))();
    v71 = v25;
    v73 = v24;
    v69 = v27;
    v70 = v26;
    type metadata accessor for MeasureCamera(0);
    v28.n128_f64[0] = simd_float4x4.position.getter(v79, v77, v75, v68);
    v59 = (int8x16_t)v28;
    v29 = a2[2].n128_f64[0];
    v62 = a2[11];
    v63 = a2[12];
    v64 = a2[13];
    v65 = a2[14];
    v31.n128_f64[0] = static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)(v30, v28, v62, v63, v64, v65, v29);
    v60 = v31;
    v32.n128_f64[0] = simd_float4x4.position.getter(v73, v71, v70, v69);
    v58 = (int8x16_t)v32;
    v34.n128_f64[0] = static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)(v33, v32, v62, v63, v64, v65, v29);
    v36 = v34;
    v37 = vsub_f32(*(float32x2_t *)v58.i8, *(float32x2_t *)v59.i8);
    v38 = *(float *)&v58.i32[2] - *(float *)&v59.i32[2];
    if (v60.n128_f32[2] <= 1.0)
    {
      if (v36.n128_f32[2] > 1.0)
      {
        v39 = (int32x2_t)vmul_f32(v66, (float32x2_t)__PAIR64__(v59.u32[1], vextq_s8(v59, v59, 8uLL).u32[0]));
        v40.i32[1] = v37.i32[1];
        v40.f32[0] = *(float *)&v58.i32[2] - *(float *)&v59.i32[2];
        v41 = (int32x2_t)vmul_f32(v66, v40);
        v42 = vadd_f32((float32x2_t)vzip1_s32(v39, v41), vadd_f32(vmul_n_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v59.i8, (int32x2_t)v37), v67), (float32x2_t)vzip2_s32(v39, v41)));
        v42.f32[0] = (float)(v19 - v42.f32[0]) / v42.f32[1];
        v43.n128_u64[0] = (unint64_t)vadd_f32(*(float32x2_t *)v59.i8, vmul_n_f32(v37, v42.f32[0]));
        v43.n128_u64[1] = __PAIR64__(1.0, *(float *)&v59.i32[2] + (float)(v38 * v42.f32[0]));
        v69 = v43;
        v44.n128_f64[0] = simd_float4x4.position.getter(v73, v71, v70, v43);
        v46.n128_f64[0] = static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)(v45, v44, v62, v63, v64, v65, v29);
        v36 = v46;
      }
      v47 = v60;
    }
    else
    {
      if (v36.n128_f32[2] > 1.0)
      {
        sub_1000FFC64((uint64_t)v80);
LABEL_10:
        sub_100012C58((uint64_t)v80, (uint64_t)v81, &qword_100483F78);
        return (void *)sub_100012C58((uint64_t)v81, a3, &qword_100483F78);
      }
      v61 = v36;
      v48.i32[1] = v58.i32[1];
      v48.i32[0] = vextq_s8(v58, v58, 8uLL).u32[0];
      v49 = (int32x2_t)vmul_f32(v66, v48);
      v50.i32[0] = v58.i32[0];
      v50.f32[1] = 0.0 - v37.f32[0];
      v51 = (int32x2_t)vmul_f32(v66, vsub_f32(0, (float32x2_t)__PAIR64__(v37.u32[1], LODWORD(v38))));
      v52 = vadd_f32((float32x2_t)vzip1_s32(v49, v51), vadd_f32(vmul_n_f32(v50, v67), (float32x2_t)vzip2_s32(v49, v51)));
      v52.f32[0] = (float)(v19 - v52.f32[0]) / v52.f32[1];
      v53 = v38 * v52.f32[0];
      v54.n128_u64[0] = (unint64_t)vsub_f32(*(float32x2_t *)v58.i8, vmul_n_f32(v37, v52.f32[0]));
      v54.n128_u64[1] = __PAIR64__(1.0, *(float *)&v58.i32[2] - v53);
      v68 = v54;
      v55.n128_f64[0] = simd_float4x4.position.getter(v79, v77, v75, v54);
      v47.n128_f64[0] = static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)(v56, v55, v62, v63, v64, v65, v29);
      v36 = v61;
    }
    v47.n128_u32[2] = 0;
    v36.n128_u32[2] = 0;
    v35.n128_u64[0] = *(_QWORD *)(v4 + 464);
    *(double *)&v57 = closestPointOnLine(lineP1:lineP2:point:)(v47, v36, v35);
    v80[0] = v57;
    v80[1] = v79;
    v80[2] = v77;
    v80[3] = v75;
    v80[4] = v68;
    v80[5] = v73;
    v80[6] = v71;
    v80[7] = v70;
    v80[8] = v69;
    sub_1000FFC5C((uint64_t)v80);
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

void sub_1000FC044(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v6;
  __n128 v7;
  void (*v8)(float32x2_t *__return_ptr, __n128);
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _QWORD *v15;
  void *v16;
  float32x2_t v17;
  void *v18;
  void *v19;
  float32x2_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(float32x2_t *__return_ptr, __n128);
  __n128 v32;
  float32x2_t v33;
  void (*v34)(float32x2_t *__return_ptr, __n128);
  __n128 v35;
  float32x2_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float v40;
  _QWORD *v41;
  float32x2_t v42;
  float v43;
  void *v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  __n128 v50;
  __n128 v51;
  __n128 v52;
  float32x2_t v53;
  char v54;
  void *v55;
  void *v56;
  __n128 v57;
  __n128 v58;
  __n128 v59;
  __n128 v60;
  _BYTE v61[24];
  _BYTE v62[24];
  void *v63;
  _BYTE v64[160];
  _BYTE v65[160];
  float32x2_t v66;
  uint64_t v67;
  __int128 v68;
  __n128 v69;
  __n128 v70;
  __n128 v71;
  __n128 v72;
  __n128 v73;
  __n128 v74;
  __n128 v75;
  float32x2_t v76[2];
  __n128 v77;
  __n128 v78;
  __n128 v79;
  __n128 v80;
  __n128 v81;
  __n128 v82;
  __n128 v83;
  __n128 v84;

  v3 = v2;
  v6 = objc_msgSend((id)objc_opt_self(Gestalt), "jasperAvailable");
  v7 = 0uLL;
  if (!v6)
  {
    v19 = 0;
    v20 = 0;
    v21 = 0uLL;
    v22 = 0uLL;
    v23 = 0uLL;
LABEL_47:
    *(_QWORD *)a2 = v19;
    *(_QWORD *)(a2 + 8) = 0;
    *(__n128 *)(a2 + 16) = v7;
    *(_OWORD *)(a2 + 32) = v21;
    *(_OWORD *)(a2 + 48) = v22;
    *(_OWORD *)(a2 + 64) = v23;
    *(float32x2_t *)(a2 + 80) = v20;
    return;
  }
  v48 = a2;
  v63 = 0;
  v8 = *(void (**)(float32x2_t *__return_ptr, __n128))(**(_QWORD **)(v2 + 176) + 144);
  v9 = swift_retain();
  v8(v76, v9);
  swift_release();
  swift_bridgeObjectRelease(*(_QWORD *)v76);
  v10 = (uint64_t)v76[1];
  swift_bridgeObjectRelease(v77.n128_u64[0]);
  if ((unint64_t)v10 >> 62)
  {
    if (v10 < 0)
      v46 = v10;
    else
      v46 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v10);
    v11 = _CocoaArrayWrapper.endIndex.getter(v46);
    swift_bridgeObjectRelease(v10);
  }
  else
  {
    v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v59 = (__n128)matrix_identity_float4x4.columns[1];
  v60 = (__n128)matrix_identity_float4x4.columns[2];
  v57 = (__n128)matrix_identity_float4x4.columns[3];
  v58 = (__n128)matrix_identity_float4x4.columns[0];
  if (v11)
  {
    if (v11 < 1)
    {
      __break(1u);
      goto LABEL_40;
    }
    v54 = 1;
    swift_beginAccess(&v63, v62, 1, 0);
    v12 = 0;
    v53 = 0;
    v55 = 0;
    v13 = 900.0;
    v49 = v58;
    v50 = v59;
    v51 = v60;
    v52 = v57;
    do
    {
      if ((v10 & 0xC000000000000001) != 0)
        v15 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v12, v10);
      else
        v15 = *(id *)(v10 + 8 * v12 + 32);
      v16 = v15;
      sub_1000FBC90(v15, a1, (uint64_t)v64);
      sub_100012C58((uint64_t)v64, (uint64_t)v76, &qword_100483F78);
      if (sub_1000FFB1C((uint64_t)v76) == 1
        || (v17 = vsub_f32(*(float32x2_t *)(v3 + 464), v76[0]), v14 = vaddv_f32(vmul_f32(v17, v17)), v14 >= v13))
      {
        v14 = v13;
      }
      else
      {
        v59 = v82;
        v60 = v83;
        v57 = v84;
        v58 = v81;
        v51 = v79;
        v52 = v80;
        v49 = v77;
        v50 = v78;
        v53 = v76[0];
        v54 = 0;
        v55 = v16;
        v18 = v63;
        v63 = v16;
        v16 = v18;
      }
      ++v12;

      v13 = v14;
    }
    while (v11 != v12);
    swift_bridgeObjectRelease(v10);
    v19 = v55;
    if (v55)
    {
LABEL_45:
      a2 = v48;
      if ((v54 & 1) == 0)
        goto LABEL_33;
LABEL_46:

      v19 = 0;
      v20 = 0;
      v21 = 0uLL;
      v22 = 0uLL;
      v23 = 0uLL;
      v7 = 0uLL;
      goto LABEL_47;
    }
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v53 = 0;
    v54 = 1;
    v49 = v58;
    v50 = v59;
    v51 = v60;
    v52 = v57;
  }
  v31 = *(void (**)(float32x2_t *__return_ptr, __n128))(**(_QWORD **)(v3 + 176) + 144);
  v32 = swift_retain();
  v31(&v66, v32);
  swift_release();
  v33 = v66;
  swift_bridgeObjectRelease(v67);
  swift_bridgeObjectRelease(v68);
  v34 = *(void (**)(float32x2_t *__return_ptr, __n128))(**(_QWORD **)(v3 + 176) + 144);
  v35 = swift_retain();
  v34(&v66, v35);
  swift_release();
  v36 = v66;
  v37 = v68;
  swift_bridgeObjectRelease(v67);
  swift_bridgeObjectRelease(*(_QWORD *)&v36);
  v66 = v33;
  sub_1000FFED0(v37);
  v10 = (uint64_t)v66;
  if (!(*(_QWORD *)&v66 >> 62))
  {
    v38 = *(_QWORD *)((*(_QWORD *)&v66 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v38)
      goto LABEL_21;
    goto LABEL_44;
  }
LABEL_40:
  if (v10 < 0)
    v47 = v10;
  else
    v47 = v10 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v10);
  v38 = _CocoaArrayWrapper.endIndex.getter(v47);
  swift_bridgeObjectRelease(v10);
  if (!v38)
  {
LABEL_44:
    swift_bridgeObjectRelease(v10);
    v19 = 0;
    goto LABEL_45;
  }
LABEL_21:
  if (v38 < 1)
  {
    __break(1u);
    goto LABEL_49;
  }
  swift_beginAccess(&v63, v61, 1, 0);
  v39 = 0;
  v56 = 0;
  v40 = 900.0;
  do
  {
    while (1)
    {
      v41 = (v10 & 0xC000000000000001) != 0
          ? (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v39, v10)
          : *(id *)(v10 + 32 + 8 * v39);
      v19 = v41;
      sub_1000FBC90(v41, a1, (uint64_t)v65);
      sub_100012C58((uint64_t)v65, (uint64_t)&v66, &qword_100483F78);
      if (sub_1000FFB1C((uint64_t)&v66) == 1)
        break;
      v42 = vsub_f32(*(float32x2_t *)(v3 + 464), v66);
      v43 = vaddv_f32(vmul_f32(v42, v42));
      if (v43 >= v40)
        break;
      v59 = v73;
      v60 = v74;
      v57 = v75;
      v58 = v72;
      v51 = v70;
      v52 = v71;
      v49 = (__n128)v68;
      v50 = v69;
      v53 = v66;
      v44 = v63;
      v63 = v19;

      v54 = 0;
      v56 = v19;
      v40 = v43;
      if (v38 - 1 == v39++)
      {
        swift_bridgeObjectRelease(v10);
        a2 = v48;
        goto LABEL_33;
      }
    }
    ++v39;

  }
  while (v38 != v39);
  swift_bridgeObjectRelease(v10);
  a2 = v48;
  v19 = v56;
  if ((v54 & 1) != 0)
    goto LABEL_46;
LABEL_33:
  v7 = sub_1000FFB38(*(double *)&v53, v49, v50, v51, v52, v58, v59, v60, (uint64_t)a1, v24, v25, v26, v27, v28, v29, v30, v57);
  if (v19)
  {
    v20 = v53;
    goto LABEL_47;
  }
LABEL_49:
  __break(1u);
}

void sub_1000FC584(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  unsigned int v16;
  uint64_t v17;
  __n128 v18;
  __n128 v19;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  const void *v26;
  void *v27;
  _QWORD *v28;
  uint64_t (*v29)(void);
  _QWORD *v30;
  uint64_t v31;
  void *v32;
  _QWORD *v33;
  _QWORD *v34;
  __n128 v35;
  _QWORD *v36;
  _QWORD *v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(unint64_t *__return_ptr, __n128);
  __n128 v46;
  BOOL v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  __n128 v61;
  __n128 v62;
  __n128 v63;
  __n128 v64;
  float v65;
  int v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  uint64_t v77;
  char v78;
  __n128 v79;
  __n128 v80;
  __n128 v81;
  uint64_t v82;
  __n128 v83;
  uint64_t v84;
  _OWORD v85[4];
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  _OWORD v91[9];
  _QWORD v92[9];
  _QWORD v93[16];
  __int128 v94;
  __n128 v95;
  __n128 v96;
  __n128 v97;
  __n128 v98;
  __int128 v99;
  unsigned __int8 v100;
  uint64_t v101;
  float v102;
  _OWORD v103[4];
  char v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  _OWORD v109[3];
  uint64_t v110;
  uint64_t v111;
  char v112;
  _BYTE v113[80];
  unint64_t aBlock[20];

  v4 = v3;
  v84 = a2;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v79 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83.n128_u64[0] = sub_10008F8B8();
  if (!v83.n128_u64[0])
    goto LABEL_35;
  v82 = a1;
  v15 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v16 = objc_msgSend(v15, "kPEShowStats");

  if (v16)
  {
    MeasureCore.shared.unsafeMutableAddressor(v17);
    v18 = swift_retain();
    MeasureCore.planeSelectionStats.getter(v92, v18);
    swift_release();
    sub_100012C58((uint64_t)v92, (uint64_t)v103, &qword_100483F88);
    if ((v104 & 1) == 0)
    {
      v105 = v103[0];
      v106 = v103[1];
      v107 = v103[2];
      v108 = v103[3];
      sub_100018148(0, (unint64_t *)&qword_10047FB70, OS_dispatch_queue_ptr);
      v81.n128_u64[0] = static OS_dispatch_queue.main.getter(v19);
      v20 = (_OWORD *)swift_allocObject(&unk_100446718, 80, 7);
      v21 = v106;
      v20[1] = v105;
      v20[2] = v21;
      v22 = v108;
      v20[3] = v107;
      v20[4] = v22;
      aBlock[4] = (unint64_t)sub_1000FFD00;
      aBlock[5] = (unint64_t)v20;
      aBlock[0] = (unint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (unint64_t)sub_10003ECA0;
      aBlock[3] = (unint64_t)&unk_100446730;
      v80.n128_u64[0] = (unint64_t)_Block_copy(aBlock);
      v23 = swift_release();
      static DispatchQoS.unspecified.getter(v23);
      aBlock[0] = (unint64_t)_swiftEmptyArrayStorage;
      v79.n128_u64[0] = sub_10000C4B0((unint64_t *)&qword_10047D7F0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v24 = sub_10000EDC8((uint64_t *)&unk_10047E430);
      v25 = sub_100043310((unint64_t *)&qword_10047D800, (uint64_t *)&unk_10047E430, (uint64_t)&protocol conformance descriptor for [A]);
      dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v24, v25, v7, v79.n128_u64[0]);
      v26 = (const void *)v80.n128_u64[0];
      v27 = (void *)v81.n128_u64[0];
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v10, v80.n128_u64[0]);
      _Block_release(v26);

      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    }
  }
  v28 = *(_QWORD **)(v4 + 312);
  if (!v28)
  {
    v40 = 0;
    v32 = (void *)v83.n128_u64[0];
    goto LABEL_30;
  }
  v29 = *(uint64_t (**)(void))((swift_isaMask & *v28) + 0x238);
  v30 = v28;
  v31 = v29();

  v32 = (void *)v83.n128_u64[0];
  if ((unint64_t)v31 >> 62)
  {
    if (v31 < 0)
      v41 = v31;
    else
      v41 = v31 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v31);
    v42 = _CocoaArrayWrapper.endIndex.getter(v41);
    swift_bridgeObjectRelease(v31);
    if (!v42)
      goto LABEL_29;
  }
  else if (!*(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_29;
  }
  if ((v31 & 0xC000000000000001) != 0)
  {
    v33 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v31);
  }
  else
  {
    if (!*(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_25;
    }
    v33 = *(id *)(v31 + 32);
  }
  v34 = v33;
  v35 = swift_bridgeObjectRelease(v31);
  v31 = (*(uint64_t (**)(__n128))((swift_isaMask & *v34) + 0x250))(v35);

  if (!((unint64_t)v31 >> 62))
  {
    if (*(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_13;
LABEL_29:
    swift_bridgeObjectRelease(v31);
    v40 = 0;
    goto LABEL_30;
  }
LABEL_25:
  if (v31 < 0)
    v43 = v31;
  else
    v43 = v31 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v31);
  v44 = _CocoaArrayWrapper.endIndex.getter(v43);
  swift_bridgeObjectRelease(v31);
  if (!v44)
    goto LABEL_29;
LABEL_13:
  if ((v31 & 0xC000000000000001) != 0)
  {
    v36 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v31);
    goto LABEL_16;
  }
  if (*(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v36 = *(id *)(v31 + 32);
LABEL_16:
    v37 = v36;
    v38 = swift_bridgeObjectRelease(v31);
    v39 = (*(uint64_t (**)(__n128))((swift_isaMask & *v37) + 0x2C0))(v38);

    v40 = (*(uint64_t (**)(void))(*(_QWORD *)v39 + 216))();
    swift_release();
LABEL_30:
    *(_BYTE *)(v4 + 321) = *(_QWORD *)(v4 + 312) == 0;
    v45 = *(void (**)(unint64_t *__return_ptr, __n128))(**(_QWORD **)(v4 + 88) + 144);
    v46 = swift_retain();
    v45(aBlock, v46);
    swift_release();
    v47 = aBlock[0] == 0xC000000000000018;
    sub_10001A810(aBlock[0]);
    *(_BYTE *)(v4 + 322) = v47;
    *(_QWORD *)(v4 + 456) = v40;
    swift_retain();
    swift_release();
    MeasureCore.shared.unsafeMutableAddressor(v48);
    v49 = *(_OWORD *)(v4 + 320);
    v50 = *(_OWORD *)(v4 + 336);
    v51 = *(_OWORD *)(v4 + 368);
    v85[2] = *(_OWORD *)(v4 + 352);
    v85[3] = v51;
    v52 = *(_OWORD *)(v4 + 336);
    v53 = *(_OWORD *)(v4 + 352);
    v54 = *(_OWORD *)(v4 + 320);
    v85[0] = v49;
    v85[1] = v52;
    v55 = *(_OWORD *)(v4 + 432);
    v90 = *(_OWORD *)(v4 + 448);
    v56 = *(_OWORD *)(v4 + 400);
    v57 = *(_OWORD *)(v4 + 432);
    v88 = *(_OWORD *)(v4 + 416);
    v89 = v57;
    v58 = *(_OWORD *)(v4 + 368);
    v59 = *(_OWORD *)(v4 + 400);
    v86 = *(_OWORD *)(v4 + 384);
    v87 = v59;
    v91[6] = v88;
    v91[7] = v55;
    v91[8] = *(_OWORD *)(v4 + 448);
    v91[2] = v53;
    v91[3] = v58;
    v91[4] = v86;
    v91[5] = v56;
    v91[0] = v54;
    v91[1] = v50;
    nullsub_1(v91);
    sub_100012C58((uint64_t)v91, (uint64_t)aBlock, &qword_100483F80);
    swift_retain();
    sub_1000FFC88((uint64_t)v85);
    MeasureCore.hitTest(screenPoint:frame:orientation:context:planeTypes:)(v93, v32, 1, aBlock, 0, a3);
    sub_1000FFCBC((uint64_t)v85);
    swift_release();
    sub_100012C58((uint64_t)v93, (uint64_t)&v94, &qword_1004866F0);
    v60 = v101;
    if (v101)
    {
      v61 = v95;
      v62 = v96;
      v63 = v97;
      v64 = v98;
      v65 = v102;
      v66 = *(unsigned __int8 *)(v101 + 48);
      v83 = v97;
      v80 = v95;
      v81 = v98;
      v79 = v96;
      if (v66 != 4)
      {
        v67 = v100;
        v68 = v99;
        *(_OWORD *)(v4 + 336) = v94;
        *(__n128 *)(v4 + 352) = v61;
        *(__n128 *)(v4 + 368) = v62;
        *(__n128 *)(v4 + 384) = v63;
        *(__n128 *)(v4 + 400) = v64;
        *(_OWORD *)(v4 + 416) = v68;
        *(_QWORD *)(v4 + 432) = v67;
        *(_QWORD *)(v4 + 440) = v60;
        *(float *)(v4 + 448) = v65;
        swift_retain();
        swift_release();
      }
      v69 = v84;
      v70 = *(_OWORD *)(v82 + 352);
      v71 = *(_OWORD *)(v82 + 368);
      v73 = *(_QWORD *)(v82 + 384);
      v72 = *(_QWORD *)(v82 + 392);
      v109[0] = *(_OWORD *)(v82 + 336);
      v109[1] = v70;
      v109[2] = v71;
      v110 = v73;
      v111 = v72;
      v112 = 0;
      memset(v113, 0, 64);
      v113[64] = 1;
      v74 = type metadata accessor for WorldAnchor(0);
      swift_allocObject(v74, *(unsigned int *)(v74 + 48), *(unsigned __int16 *)(v74 + 52));
      swift_retain();
      v75 = WorldAnchor.init(transform:viewTransform:plane:confidence:shouldAutoUpdate:viewTarget:)(v109, v60, 0, v113, v80, v79, v83, v81, v65);
      v76 = a3;
      v77 = static MeasureObjectState.default;
      sub_100047210((uint64_t)v93);

      swift_release();
      v78 = 0;
      goto LABEL_36;
    }

    swift_release();
LABEL_35:
    v76 = 0.0;
    v75 = 0;
    v77 = 0;
    v78 = 1;
    v69 = v84;
LABEL_36:
    *(double *)v69 = v76;
    *(_BYTE *)(v69 + 8) = v78;
    *(_QWORD *)(v69 + 16) = v75;
    *(_QWORD *)(v69 + 24) = v77;
    *(_BYTE *)(v69 + 32) = v78;
    return;
  }
  __break(1u);
}

double sub_1000FCC64(uint64_t a1)
{
  uint64_t v1;
  double result;
  uint64_t (*v3)(double *, __n128);
  __n128 v4;
  void (*v5)(double *, _QWORD);
  uint64_t v6;
  void *v7;
  void *v8;
  double v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  sub_1000FC584(a1, (uint64_t)&v9, *(double *)(v1 + 464));
  if ((v10 & 1) != 0 || !v11 || (v13 & 1) != 0)
  {
    v3 = *(uint64_t (**)(double *, __n128))(**(_QWORD **)(v1 + 128) + 400);
    v4 = swift_retain();
    v5 = (void (*)(double *, _QWORD))v3(&v9, v4);
    v7 = *(void **)(v6 + 16);
    v8 = *(void **)(v6 + 24);
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)(v6 + 24) = 0;

    v5(&v9, 0);
    swift_release();
    *(_QWORD *)&result = swift_release().n128_u64[0];
  }
  else
  {
    sub_1000FBA24(v11, 0, v12, v9);
    *(_QWORD *)&result = swift_release().n128_u64[0];
  }
  return result;
}

void sub_1000FCD28(uint64_t *a1)
{
  void *v2;
  id v3;

  if (qword_10047A930 != -1)
    swift_once(&qword_10047A930, sub_100083368);
  if (qword_1004AF238)
  {
    v2 = *(void **)(qword_1004AF238 + 104);
    if (v2)
    {
      v3 = v2;
      sub_1001C1BC4(a1);

    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1000FCDB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t (*v18)(void);
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(void);
  __n128 v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  __n128 v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  __n128 v31;
  uint64_t v32;
  unint64_t v33;
  BOOL v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t (*v37)(void);
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t (*v46)(uint64_t);
  _BOOL8 v47;
  uint64_t v48;
  unint64_t v49;
  void (*v50)(_OWORD *__return_ptr, __n128);
  __n128 v51;
  unsigned __int8 (*v52)(void);
  id v53;
  char *v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t (*v57)(void);
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t (*v61)(void);
  uint64_t (*v62)(void);
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  char v66;
  __n128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  double *v78;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v80;
  unint64_t v81;
  double *v82;
  uint64_t v83;
  uint64_t v84;
  double *v85;
  uint64_t v86;
  double *v87;
  void *v88;
  uint64_t v89;
  void (*v90)(__int128 *, __n128);
  __n128 v91;
  uint64_t (*v92)(__n128);
  __n128 v93;
  uint64_t v94;
  __n128 v95;
  uint64_t v96;
  uint64_t v97;
  id v98;
  void *v99;
  __n128 v100;
  uint64_t v101;
  id v102;
  unsigned int v103;
  __n128 v104;
  void *v105;
  uint64_t v106;
  void *v107;
  uint64_t (*v108)(void);
  __n128 v109;
  void *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t (*v121)(uint64_t);
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  _QWORD *v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t (*v129)(__n128);
  uint64_t v130;
  _OWORD v131[9];
  uint64_t v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  uint64_t v142;
  id v143[18];

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v117 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v123 = *(_QWORD *)(v8 - 8);
  v124 = v8;
  __chkstk_darwin(v8);
  v122 = (char *)&v117 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10000EDC8(&qword_100483F38);
  v127 = *(_QWORD *)(v10 - 8);
  v11 = *(_QWORD *)(v127 + 64);
  v12 = __chkstk_darwin(v10);
  __chkstk_darwin(v12);
  v130 = (uint64_t)&v117 - v13;
  v15 = (uint64_t *)SnapType.all.unsafeMutableAddressor(v14);
  sub_1000F6208(*v15, a1);
  sub_1000F8C6C();
  v16 = *(_QWORD **)(v1 + 304);
  if (!v16)
    return;
  v17 = *(_QWORD **)(v1 + 312);
  if (!v17)
    return;
  v119 = v5;
  v120 = (uint64_t)&v117 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(uint64_t (**)(void))((swift_isaMask & *v17) + 0x238);
  v19 = v16;
  v128 = v17;
  v20 = v18();
  v21 = v20;
  if ((v20 & 0xC000000000000001) != 0)
  {
    v22 = (uint64_t (*)(void))specialized _ArrayBuffer._getElementSlowPath(_:)(0, v20);
  }
  else
  {
    if (!*(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_55;
    }
    v22 = (uint64_t (*)(void))*(id *)(v20 + 32);
  }
  v18 = v22;
  v23 = swift_bridgeObjectRelease(v21);
  v129 = *(uint64_t (**)(__n128))((swift_isaMask & *(_QWORD *)v18) + 0x250);
  v24 = v129(v23);
  v21 = v24;
  v126 = v19;
  if ((v24 & 0xC000000000000001) != 0)
  {
LABEL_55:
    v25 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v21);
    goto LABEL_9;
  }
  if (!*(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_57;
  }
  v25 = *(id *)(v24 + 32);
LABEL_9:
  v26 = v25;
  v27 = swift_bridgeObjectRelease(v21);
  (*(void (**)(_QWORD, __n128))((swift_isaMask & *v26) + 0xD8))(0, v27);

  v28 = ((uint64_t (*)(void))v129)();
  v21 = v28;
  v125 = v7;
  if ((v28 & 0xC000000000000001) != 0)
  {
LABEL_57:
    v29 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v21);
LABEL_12:
    v30 = v29;
    v31 = swift_bridgeObjectRelease(v21);
    (*(void (**)(_QWORD, __n128))((swift_isaMask & *v30) + 0xD8))(0, v31);

    v26 = v126;
    if ((*(_BYTE *)(v2 + 576) & 1) == 0)
    {
      v33 = *(_QWORD *)(v2 + 560);
      v34 = *(_QWORD *)a1 >= v33;
      v35 = *(_QWORD *)a1 - v33;
      if (!v34)
      {
        __break(1u);
        JUMPOUT(0x1000FDA34);
      }
      v32 = (*(uint64_t (**)(double))((swift_isaMask & *(_QWORD *)v18) + 0x2E8))((double)v35 / (*(double *)(a1 + 8) - *(double *)(v2 + 568)));
    }
    v118 = v4;
    v121 = *(uint64_t (**)(uint64_t))((swift_isaMask & *v26) + 0x2F0);
    v36 = v121(v32);
    if (v36 <= 8 && ((1 << v36) & 0x1E9) != 0)
    {
      type metadata accessor for WorldAnchor(0);
      v37 = *(uint64_t (**)(void))((swift_isaMask & *v26) + 0x2C0);
      v38 = v37();
      v40 = WorldAnchor.__allocating_init(anchor:shouldAutoUpdate:)(v38, 1, v39);
      v16 = v128;
      v41 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v128) + 0x2C8))(v40);
      v42 = ((uint64_t (*)(uint64_t))v37)(v41);
      v44 = WorldAnchor.__allocating_init(anchor:shouldAutoUpdate:)(v42, 1, v43);
      (*(void (**)(uint64_t))((swift_isaMask & *v16) + 0x2E0))(v44);
      v45 = objc_msgSend((id)objc_opt_self(Gestalt), "jasperAvailable");
      v7 = v125;
      if (v45)
      {
        v46 = v121;
        v47 = ((uint64_t (*)(void))v121)() == 6;
        v48 = (*(uint64_t (**)(_BOOL8))((swift_isaMask & *(_QWORD *)v18) + 0x2A0))(v47);
        v49 = v46(v48);
        if (v49 <= 8 && ((1 << v49) & 0x160) != 0)
        {
          v50 = *(void (**)(_OWORD *__return_ptr, __n128))(**(_QWORD **)(v2 + 200) + 144);
          v51 = swift_retain();
          v50(v131, v51);
          swift_release();
          v139 = v131[6];
          v140 = v131[7];
          v141 = v131[8];
          v142 = v132;
          v135 = v131[2];
          v136 = v131[3];
          v137 = v131[4];
          v138 = v131[5];
          v133 = v131[0];
          v134 = v131[1];
          sub_1000127E8((id *)&v133);
          sub_100012BC4((uint64_t)&v133);
          sub_100012C58((uint64_t)&v133, (uint64_t)v143, (uint64_t *)&unk_100486700);
          if (sub_1000127D0((uint64_t *)v143) != 1)
          {
            v52 = *(unsigned __int8 (**)(void))((swift_isaMask & *(_QWORD *)v143[0]) + 0x258);
            v53 = v143[0];
            v54 = (char *)&loc_1000FD258 + *((int *)qword_1000FDA80 + v52());
            __asm { BR              X10 }
          }
        }
      }
      v56 = *(_QWORD **)(v2 + 224);
      if (v56)
      {
        v57 = *(uint64_t (**)(void))((swift_isaMask & *v56) + 0xB8);
        v58 = v56;
        v59 = v57();
        v16 = v60;
        v61 = *(uint64_t (**)(void))((swift_isaMask & *(_QWORD *)v18) + 0xB8);
        v62 = v18;
        v63 = v61();
        v65 = v64;

        if (v59 == v63 && v16 == v65)
        {

          swift_bridgeObjectRelease_n(v16, 2);
        }
        else
        {
          v66 = _stringCompareWithSmolCheck(_:_:expecting:)(v59, v16, v63, v65, 0);
          swift_bridgeObjectRelease(v16);
          v67 = swift_bridgeObjectRelease(v65);
          if ((v66 & 1) == 0)
            (*(void (**)(_QWORD *, __n128))((swift_isaMask & *v58) + 0x330))(v128, v67);

        }
        v7 = v125;
        v26 = v126;
      }
    }
    else
    {
      v55 = v26;
      sub_10010154C((uint64_t)v18, 0, v16, 1);

      v7 = v125;
    }
    v68 = sub_10000EDC8((uint64_t *)&unk_1004866D0);
    v69 = swift_allocObject(v68, 40, 7);
    *(_OWORD *)(v69 + 16) = xmmword_1003B0F00;
    *(_QWORD *)(v69 + 32) = v18;
    *(_QWORD *)&v133 = v69;
    specialized Array._endMutation()(v69);
    v70 = v133;
    v71 = type metadata accessor for WorldLine(0);
    v72 = sub_10000C4B0(&qword_100483F40, (uint64_t (*)(uint64_t))&type metadata accessor for WorldLine, (uint64_t)&protocol conformance descriptor for WorldLine);
    v18 = v18;
    MeasurementEvent.init(name:results:)(0x6C726F5720646E45, 0xED0000656E694C64, v70, v71, v72);
    if (qword_10047A930 == -1)
      goto LABEL_33;
    goto LABEL_59;
  }
  if (*(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10) >= 2uLL)
  {
    v29 = *(id *)(v28 + 40);
    goto LABEL_12;
  }
  __break(1u);
LABEL_59:
  swift_once(&qword_10047A930, sub_100083368);
LABEL_33:
  if (!qword_1004AF240)
  {
    __break(1u);
    JUMPOUT(0x1000FDA80);
  }
  v73 = *(_QWORD *)(qword_1004AF240 + qword_1004AF720);
  if (!v73)
    goto LABEL_39;
  v74 = v120;
  sub_1000FF2D4(v130, v120);
  v75 = *(unsigned __int8 *)(v127 + 80);
  v76 = (v75 + 16) & ~v75;
  v77 = swift_allocObject(&unk_100446628, v76 + v11, v75 | 7);
  sub_100012C58(v74, v77 + v76, &qword_100483F38);
  v16 = (_QWORD *)(v73 + OBJC_IVAR____TtC7Measure15ResultsReporter_report);
  v7 = (char *)*(int *)(type metadata accessor for Report(0) + 20);
  v78 = *(double **)&v7[(_QWORD)v16];
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v78);
  *(_QWORD *)&v7[(_QWORD)v16] = v78;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_67;
  while (1)
  {
    v81 = *((_QWORD *)v78 + 2);
    v80 = *((_QWORD *)v78 + 3);
    if (v81 >= v80 >> 1)
    {
      v78 = sub_10005FEE4((double *)(v80 > 1), v81 + 1, 1, v78);
      *(_QWORD *)&v7[(_QWORD)v16] = v78;
    }
    v7 = v125;
    *((_QWORD *)v78 + 2) = v81 + 1;
    v82 = &v78[2 * v81];
    *((_QWORD *)v82 + 4) = sub_1000FF3DC;
    *((_QWORD *)v82 + 5) = v77;
    sub_1000CE180();
    swift_release();
    v26 = v126;
LABEL_39:
    v83 = ((uint64_t (*)(void))v129)();
    v84 = v83;
    if ((v83 & 0xC000000000000001) != 0)
    {
      v85 = (double *)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v83);
    }
    else
    {
      if (*(_QWORD *)((v83 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
      {
        __break(1u);
LABEL_62:
        v87 = (double *)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v84);
LABEL_45:
        v78 = v87;
        swift_bridgeObjectRelease(v84);
        sub_100101BD8(v78);

        v88 = *(void **)(v2 + 312);
        *(_QWORD *)(v2 + 312) = 0;

        v89 = *(_QWORD *)(v2 + 88);
        *(_QWORD *)&v133 = 0xC000000000000008;
        v90 = *(void (**)(__int128 *, __n128))(*(_QWORD *)v89 + 392);
        v91 = swift_retain();
        v90(&v133, v91);
        swift_release();
        v92 = *(uint64_t (**)(__n128))(**(_QWORD **)(v2 + 168) + 200);
        v93 = swift_retain();
        v94 = v92(v93);
        v95 = swift_release();
        (*(void (**)(_BYTE *(*)(_BYTE *), _QWORD, __n128))(*(_QWORD *)v94 + 280))(sub_100022ABC, 0, v95);
        swift_release();
        if (qword_10047AB68 == -1)
          goto LABEL_46;
        goto LABEL_64;
      }
      v85 = (double *)*(id *)(v83 + 40);
    }
    v78 = v85;
    swift_bridgeObjectRelease(v84);
    sub_100100C00(v78);

    v86 = ((uint64_t (*)(void))v129)();
    v84 = v86;
    if ((v86 & 0xC000000000000001) != 0)
      goto LABEL_62;
    if (*(_QWORD *)((v86 & 0xFFFFFFFFFFFFF8) + 0x10) >= 2uLL)
    {
      v87 = (double *)*(id *)(v86 + 40);
      goto LABEL_45;
    }
    __break(1u);
LABEL_64:
    swift_once(&qword_10047AB68, sub_10011E814);
LABEL_46:
    v77 = qword_1004AF6B8;
    sub_10011DDFC(v18, v128);
    v96 = ((uint64_t (*)(void))v129)();
    v97 = v96;
    if ((v96 & 0xC000000000000001) != 0)
      break;
    if (*(_QWORD *)((v96 & 0xFFFFFFFFFFFFF8) + 0x10) >= 2uLL)
    {
      v98 = *(id *)(v96 + 40);
      goto LABEL_49;
    }
    __break(1u);
LABEL_67:
    v78 = sub_10005FEE4(0, *((_QWORD *)v78 + 2) + 1, 1, v78);
    *(_QWORD *)&v7[(_QWORD)v16] = v78;
  }
  v98 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v96);
LABEL_49:
  v99 = v98;
  v100 = swift_bridgeObjectRelease(v97);
  ((void (*)(__n128))v121)(v100);
  v101 = v77 + OBJC_IVAR____TtC7Measure14MetricsManager_measurementState;
  swift_beginAccess(v77 + OBJC_IVAR____TtC7Measure14MetricsManager_measurementState, v131, 1, 0);
  *(double *)(v101 + 64) = *(double *)(v101 + 64) + 1.0;

  v102 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v103 = objc_msgSend(v102, "kPEShowAccuracy");

  if (v103)
  {
    sub_100018148(0, (unint64_t *)&qword_10047FB70, OS_dispatch_queue_ptr);
    v105 = (void *)static OS_dispatch_queue.main.getter(v104);
    v106 = swift_allocObject(&unk_1004465D8, 24, 7);
    *(_QWORD *)(v106 + 16) = v18;
    *(_QWORD *)&v135 = sub_1000FF2CC;
    *((_QWORD *)&v135 + 1) = v106;
    *(_QWORD *)&v133 = _NSConcreteStackBlock;
    *((_QWORD *)&v133 + 1) = 1107296256;
    *(_QWORD *)&v134 = sub_10003ECA0;
    *((_QWORD *)&v134 + 1) = &unk_1004465F0;
    v107 = _Block_copy(&v133);
    v108 = v18;
    v109 = swift_release();
    v110 = v26;
    v111 = v122;
    static DispatchQoS.unspecified.getter(v109);
    *(_QWORD *)&v133 = _swiftEmptyArrayStorage;
    v112 = sub_10000C4B0((unint64_t *)&qword_10047D7F0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v113 = sub_10000EDC8((uint64_t *)&unk_10047E430);
    v114 = sub_100043310((unint64_t *)&qword_10047D800, (uint64_t *)&unk_10047E430, (uint64_t)&protocol conformance descriptor for [A]);
    v115 = v113;
    v116 = v118;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v133, v115, v114, v118, v112);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v111, v7, v107);

    _Block_release(v107);
    (*(void (**)(char *, uint64_t))(v119 + 8))(v7, v116);
    (*(void (**)(char *, uint64_t))(v123 + 8))(v111, v124);
    sub_1000FF268(v130);
  }
  else
  {
    sub_1000FF268(v130);

  }
}

void sub_1000FDA90(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  id v5;
  __n128 v6;
  uint64_t *v7;
  void (*v8)(Swift::String *__return_ptr, __n128);
  __n128 v9;
  void *object;
  __int128 v11;
  uint64_t (*v12)(void);
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  objc_class *v17;
  id v18;
  void *v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(double (*)(), uint64_t, __n128);
  _QWORD *v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(double (*)(), uint64_t, __n128);
  _QWORD *v37;
  __n128 v38;
  void (*v39)(uint64_t);
  _QWORD *v40;
  void (*v41)(uint64_t (*)(_QWORD), _QWORD);
  _QWORD *v42;
  void (*v43)(uint64_t (*)(), _QWORD);
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(BOOL (*)(double, double), uint64_t, __n128);
  _QWORD *v48;
  __n128 v49;
  uint64_t (*v50)(void);
  uint64_t v51;
  void (*v52)(double (*)(), uint64_t, __n128);
  _QWORD *v53;
  __n128 v54;
  __n128 v55;
  _QWORD *v56;
  unint64_t v57;
  Swift::String v58;
  char v59;
  uint64_t (*v60)(Swift::String *, __n128);
  __n128 v61;
  void (*v62)(Swift::String *, _QWORD);
  uint64_t v63;
  void *v64;
  void *v65;
  unint64_t v66;
  Swift::String v67;
  char v68;
  void *v69;
  uint64_t (*v70)(void);
  uint64_t v71;
  uint64_t v72;
  id v73;
  void *v74;
  __n128 v75;
  uint64_t (*v76)(void);
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  __n128 v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  __n128 v86;
  unint64_t v87;
  void (*v88)(_OWORD *__return_ptr, __n128);
  __n128 v89;
  _QWORD *v90;
  unsigned __int8 (*v91)(id);
  uint64_t (*v92)(__n128);
  __n128 v93;
  uint64_t v94;
  __n128 v95;
  __n128 v96;
  uint64_t v97;
  id v98;
  id v99;
  void *v100;
  void *v101;
  _QWORD *v102;
  uint64_t (*v103)(void);
  uint64_t v104;
  void *v105;
  void *v106;
  Swift::String v107;
  Swift::String v108;
  uint64_t v109;
  Swift::String v110;
  void *v111;
  void *v112;
  uint64_t v113;
  void (*v114)(Swift::String *, __n128);
  __n128 v115;
  void *v116;
  uint64_t v117;
  void (*v118)(void);
  id v119;
  uint64_t v120;
  uint64_t v121;
  Swift::String v122;
  uint64_t (*v123)(Swift::String *, __n128);
  __n128 v124;
  void (*v125)(Swift::String *, _QWORD);
  uint64_t v126;
  void *v127;
  void *v128;
  _QWORD *v129;
  id v130;
  void *v131;
  _QWORD *v132;
  _OWORD v133[9];
  uint64_t v134;
  Swift::String v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;
  uint64_t v145[18];

  v2 = v1;
  v4 = *(void **)(v1 + 304);
  v5 = v4;
  v7 = (uint64_t *)SnapType.all.unsafeMutableAddressor(v6);
  sub_1000F6208(*v7, (uint64_t)a1);
  sub_1000F8C6C();
  v8 = *(void (**)(Swift::String *__return_ptr, __n128))(**(_QWORD **)(v1 + 128) + 144);
  v9 = swift_retain();
  v8(&v135, v9);
  swift_release();
  object = v135._object;
  v11 = v136;

  if (!*((_QWORD *)&v11 + 1))
  {

    return;
  }
  v132 = v5;
  v129 = a1;
  type metadata accessor for WorldAnchor(0);
  v12 = *(uint64_t (**)(void))((swift_isaMask & **((_QWORD **)&v11 + 1)) + 0x2C0);
  v13 = v12();
  v15 = WorldAnchor.__allocating_init(anchor:shouldAutoUpdate:)(v13, 1, v14);
  v16 = static WorldPointType.default;
  v17 = (objc_class *)type metadata accessor for WorldPoint(0);
  v18 = objc_allocWithZone(v17);
  v19 = (void *)WorldPoint.init(anchor:type:state:)(v15, v16, 3);
  v20 = v12();
  v22 = WorldAnchor.__allocating_init(anchor:shouldAutoUpdate:)(v20, 1, v21);
  v23 = static WorldPointType.default;
  v24 = objc_allocWithZone(v17);
  v25 = (void *)WorldPoint.init(anchor:type:state:)(v22, v23, 3);
  v26 = objc_allocWithZone((Class)type metadata accessor for WorldLine(0));
  v27 = v19;
  v130 = v25;
  v131 = v27;
  v28 = (_QWORD *)WorldLine.init(end1:end2:initialState:)(v27, v130, 0, 1);
  v29 = swift_allocObject(&unk_100446650, 24, 7);
  swift_weakInit(v29 + 16, v2);
  v30 = swift_allocObject(&unk_100446678, 32, 7);
  *(_QWORD *)(v30 + 16) = v28;
  *(_QWORD *)(v30 + 24) = v29;
  v31 = *(void (**)(double (*)(), uint64_t, __n128))((swift_isaMask & *v28) + 0x150);
  v32 = v28;
  v33 = swift_retain();
  v31(sub_1000FF470, v30, v33);

  swift_release();
  v34 = swift_allocObject(&unk_100446650, 24, 7);
  swift_weakInit(v34 + 16, v2);
  v35 = swift_allocObject(&unk_1004466A0, 32, 7);
  *(_QWORD *)(v35 + 16) = v32;
  *(_QWORD *)(v35 + 24) = v34;
  v36 = *(void (**)(double (*)(), uint64_t, __n128))((swift_isaMask & *v32) + 0x168);
  v37 = v32;
  v38 = swift_retain();
  v36(sub_1000FF4A8, v35, v38);
  swift_release();
  v39 = *(void (**)(uint64_t))((swift_isaMask & *v37) + 0xD8);
  v40 = v37;
  v39(3);

  v41 = *(void (**)(uint64_t (*)(_QWORD), _QWORD))((swift_isaMask & *v40) + 0x138);
  v42 = v40;
  v41(nullsub_1, 0);

  v43 = *(void (**)(uint64_t (*)(), _QWORD))((swift_isaMask & *v42) + 0x108);
  v44 = v42;
  v43(variable initialization expression of SCNPatchDebugger.SKDebugRenderer.renderEmboss, 0);

  v45 = swift_allocObject(&unk_100446650, 24, 7);
  swift_weakInit(v45 + 16, v2);
  v46 = swift_allocObject(&unk_1004466C8, 32, 7);
  *(_QWORD *)(v46 + 16) = v45;
  *(_QWORD *)(v46 + 24) = v44;
  v47 = *(void (**)(BOOL (*)(double, double), uint64_t, __n128))((swift_isaMask & *v44) + 0x120);
  v48 = v44;
  v49 = swift_retain();
  v47(sub_1000FF4B4, v46, v49);
  swift_release();
  v50 = (uint64_t (*)(void))swift_allocObject(&unk_100446650, 24, 7);
  swift_weakInit((char *)v50 + 16, v2);
  v51 = swift_allocObject(&unk_1004466F0, 32, 7);
  *(_QWORD *)(v51 + 16) = v50;
  *(_QWORD *)(v51 + 24) = v48;
  v52 = *(void (**)(double (*)(), uint64_t, __n128))((swift_isaMask & *v48) + 0x180);
  v53 = v48;
  v54 = swift_retain();
  v52(sub_1000FF4C0, v51, v54);

  v55 = swift_release();
  if (v4)
  {
    v50 = *(uint64_t (**)(void))((swift_isaMask & *v132) + 0x2F0);
    v56 = v132;
    if (v50() == 1 || v50() == 2)
    {
      v57 = (*(uint64_t (**)(void))((swift_isaMask & **((_QWORD **)&v11 + 1)) + 0x2F0))();
      if (v57 <= 8 && ((1 << v57) & 0x1E9) != 0)
      {
        if (qword_10047AA78 != -1)
          goto LABEL_59;
        while (1)
        {
          v58._countAndFlagsBits = 0xD000000000000020;
          v58._object = (void *)0x80000001003DFAA0;
          Log.default(_:isPrivate:)(v58, 0);
          (*(void (**)(_QWORD))((swift_isaMask & **((_QWORD **)&v11 + 1)) + 0xD8))(0);
          (*(void (**)(uint64_t))((swift_isaMask & *v53) + 0x2D0))(1);
          (*(void (**)(_QWORD *))((swift_isaMask & *v53) + 0x318))(v56);
          v59 = sub_1001011A0(v53, 1);
          v60 = *(uint64_t (**)(Swift::String *, __n128))(**(_QWORD **)(v2 + 128) + 400);
          v61 = swift_retain();
          v62 = (void (*)(Swift::String *, _QWORD))v60(&v135, v61);
          v64 = *(void **)(v63 + 16);
          v65 = *(void **)(v63 + 24);
          *(_QWORD *)(v63 + 16) = 0;
          *(_QWORD *)(v63 + 24) = 0;

          v62(&v135, 0);
LABEL_9:
          swift_release();
          if ((v59 & 1) == 0)
            goto LABEL_10;
LABEL_30:
          if (objc_msgSend((id)objc_opt_self(Gestalt), "jasperAvailable"))
          {
            v87 = (*(uint64_t (**)(void))((swift_isaMask & **((_QWORD **)&v11 + 1)) + 0x2F0))();
            if (v87 <= 8 && ((1 << v87) & 0x160) != 0)
            {
              v88 = *(void (**)(_OWORD *__return_ptr, __n128))(**(_QWORD **)(v2 + 200) + 144);
              v89 = swift_retain();
              v88(v133, v89);
              swift_release();
              v141 = v133[6];
              v142 = v133[7];
              v143 = v133[8];
              v144 = v134;
              v137 = v133[2];
              v138 = v133[3];
              v139 = v133[4];
              v140 = v133[5];
              v135 = (Swift::String)v133[0];
              v136 = v133[1];
              sub_1000127E8((id *)&v135);
              sub_100012BC4((uint64_t)&v135);
              sub_100012C58((uint64_t)&v135, (uint64_t)v145, (uint64_t *)&unk_100486700);
              if (sub_1000127D0(v145) != 1)
              {
                v90 = (_QWORD *)v145[0];
                v91 = *(unsigned __int8 (**)(id))((swift_isaMask & *(_QWORD *)v145[0]) + 0x258);
                sub_100012C58((uint64_t)&v135, (uint64_t)v133, (uint64_t *)&unk_100486700);
                if (!v91(*(id *)&v133[0]))
                {
                  if (qword_10047AB68 != -1)
                    swift_once(&qword_10047AB68, sub_10011E814);
                  sub_10011D178(v90, *((unint64_t *)&v11 + 1));
                }
                sub_100012810((id *)&v135);
                sub_100012810((id *)&v135);
              }
            }
          }
          v92 = *(uint64_t (**)(__n128))(**(_QWORD **)(v2 + 168) + 200);
          v93 = swift_retain();
          v94 = v92(v93);
          v95 = swift_release();
          (*(void (**)(_BYTE *(*)(_BYTE *), _QWORD, __n128))(*(_QWORD *)v94 + 280))(sub_10002427C, 0, v95);
          v96 = swift_release();
          v97 = (*(uint64_t (**)(__n128))((swift_isaMask & *v53) + 0x250))(v96);
          v82 = (_QWORD *)v97;
          if ((v97 & 0xC000000000000001) != 0)
          {
LABEL_54:
            v98 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v82);
          }
          else
          {
            if (*(_QWORD *)((v97 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
            {
              __break(1u);
LABEL_56:
              swift_once(&qword_10047AA78, sub_1000E1430);
              goto LABEL_44;
            }
            v98 = *(id *)(v97 + 40);
          }
          v99 = v98;
          swift_bridgeObjectRelease(v82);
          v100 = *(void **)(v2 + 312);
          *(_QWORD *)(v2 + 312) = v99;

          v101 = *(void **)(v2 + 312);
          if (!v101)
          {
            __break(1u);
            return;
          }
          v102 = v101;
          sub_100100854(v102);

          if (qword_10047AA78 != -1)
            goto LABEL_56;
LABEL_44:
          v56 = (_QWORD *)qword_1004AF548;
          v135._countAndFlagsBits = 0;
          v135._object = (void *)0xE000000000000000;
          _StringGuts.grow(_:)(31);
          swift_bridgeObjectRelease(v135._object);
          v135._countAndFlagsBits = 0xD000000000000010;
          v135._object = (void *)0x80000001003DFA60;
          v103 = *(uint64_t (**)(void))((swift_isaMask & *v53) + 0xB8);
          v53 = v53;
          v104 = v103();
          v106 = v105;

          v107._countAndFlagsBits = v104;
          v107._object = v106;
          String.append(_:)(v107);
          swift_bridgeObjectRelease(v106);
          v108._countAndFlagsBits = 0x6D61726620746120;
          v108._object = (void *)0xEB00000000203A65;
          String.append(_:)(v108);
          v109 = *a1;
          *(_QWORD *)&v133[0] = *a1;
          v110._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt, &protocol witness table for UInt);
          v111 = v110._object;
          String.append(_:)(v110);
          swift_bridgeObjectRelease(v111);
          v112 = v135._object;
          Log.default(_:isPrivate:)(v135, 0);
          swift_bridgeObjectRelease(v112);
          v113 = *(_QWORD *)(v2 + 88);
          v135._countAndFlagsBits = 0xC000000000000010;
          v114 = *(void (**)(Swift::String *, __n128))(*(_QWORD *)v113 + 392);
          v115 = swift_retain();
          v114(&v135, v115);
          swift_release();
          if (qword_10047AB68 == -1)
          {
            v116 = *(void **)(v2 + 312);
            if (v116)
              goto LABEL_46;
          }
          else
          {
            swift_once(&qword_10047AB68, sub_10011E814);
            v116 = *(void **)(v2 + 312);
            if (v116)
            {
LABEL_46:
              v117 = qword_1004AF6B8;
              v118 = *(void (**)(void))((swift_isaMask & **((_QWORD **)&v11 + 1)) + 0x2F0);
              v119 = v116;
              v118();

              v120 = v117 + OBJC_IVAR____TtC7Measure14MetricsManager_measurementState;
              swift_beginAccess(v117 + OBJC_IVAR____TtC7Measure14MetricsManager_measurementState, &v135, 1, 0);
              *(double *)(v120 + 64) = *(double *)(v120 + 64) + 1.0;

              v121 = v129[1];
              *(_QWORD *)(v2 + 560) = v109;
              *(_QWORD *)(v2 + 568) = v121;
              *(_BYTE *)(v2 + 576) = 0;
              return;
            }
          }
          __break(1u);
LABEL_59:
          swift_once(&qword_10047AA78, sub_1000E1430);
        }
      }
    }

  }
  v66 = (*(uint64_t (**)(__n128))((swift_isaMask & **((_QWORD **)&v11 + 1)) + 0x2F0))(v55);
  if (v66 > 8 || ((1 << v66) & 0x1E9) == 0)
  {
    if (qword_10047AA78 != -1)
      swift_once(&qword_10047AA78, sub_1000E1430);
    v122._countAndFlagsBits = 0xD00000000000001FLL;
    v122._object = (void *)0x80000001003DFA40;
    Log.default(_:isPrivate:)(v122, 0);
    (*(void (**)(_QWORD))((swift_isaMask & **((_QWORD **)&v11 + 1)) + 0xD8))(0);
    (*(void (**)(uint64_t))((swift_isaMask & *v53) + 0x2D0))(1);
    (*(void (**)(_QWORD))((swift_isaMask & *v53) + 0x318))(*((_QWORD *)&v11 + 1));
    v59 = sub_1001011A0(v53, 1);
    v123 = *(uint64_t (**)(Swift::String *, __n128))(**(_QWORD **)(v2 + 128) + 400);
    v124 = swift_retain();
    v125 = (void (*)(Swift::String *, _QWORD))v123(&v135, v124);
    v127 = *(void **)(v126 + 16);
    v128 = *(void **)(v126 + 24);
    *(_QWORD *)(v126 + 16) = 0;
    *(_QWORD *)(v126 + 24) = 0;

    v125(&v135, 0);
    goto LABEL_9;
  }
  if ((*(_BYTE *)(*(_QWORD *)(v2 + 72) + 152) & 1) != 0)
    goto LABEL_18;
  if (qword_10047AA78 != -1)
    goto LABEL_62;
  while (1)
  {
    v67._countAndFlagsBits = 0xD00000000000001ALL;
    v67._object = (void *)0x80000001003DFA80;
    Log.default(_:isPrivate:)(v67, 0);
LABEL_18:
    (*(void (**)(uint64_t))((swift_isaMask & *v53) + 0x2D0))(1);
    v68 = sub_1001011A0(v53, 1);
    v69 = *(void **)(v2 + 224);
    if (!v69)
      break;
    v70 = *(uint64_t (**)(void))((swift_isaMask & *v53) + 0x250);
    v50 = v69;
    v71 = v70();
    v72 = v71;
    if ((v71 & 0xC000000000000001) != 0)
    {
      v73 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v71);
      goto LABEL_22;
    }
    if (*(_QWORD *)((v71 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v73 = *(id *)(v71 + 32);
LABEL_22:
      v74 = v73;
      v75 = swift_bridgeObjectRelease(v72);
      (*(void (**)(void *, __n128))((swift_isaMask & *(_QWORD *)v50) + 0x330))(v74, v75);

      break;
    }
    __break(1u);
LABEL_62:
    swift_once(&qword_10047AA78, sub_1000E1430);
  }
  v76 = *(uint64_t (**)(void))((swift_isaMask & *v53) + 0x250);
  v77 = v76();
  v78 = v77;
  if ((v77 & 0xC000000000000001) != 0)
  {
    v79 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v77);
  }
  else
  {
    if (!*(_QWORD *)((v77 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_52;
    }
    v79 = *(id *)(v77 + 32);
  }
  v80 = v79;
  v81 = swift_bridgeObjectRelease(v78);
  (*(void (**)(uint64_t, __n128))((swift_isaMask & *v80) + 0xD8))(6, v81);

  v82 = v53;
  v83 = v76();
  v50 = (uint64_t (*)(void))v83;
  if ((v83 & 0xC000000000000001) != 0)
  {
LABEL_52:
    v84 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v50);
    goto LABEL_29;
  }
  if (*(_QWORD *)((v83 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
  {
    __break(1u);
    goto LABEL_54;
  }
  v84 = *(id *)(v83 + 40);
LABEL_29:
  v85 = v84;
  v86 = swift_bridgeObjectRelease(v50);
  (*(void (**)(uint64_t, __n128))((swift_isaMask & *v85) + 0xD8))(3, v86);

  if ((v68 & 1) != 0)
    goto LABEL_30;
LABEL_10:

}

double sub_1000FE7E8(_QWORD *a1, uint64_t a2)
{
  uint64_t (*v3)(void);
  double result;
  uint64_t v5;
  _BYTE v6[24];

  v3 = *(uint64_t (**)(void))((swift_isaMask & *a1) + 0xD0);
  if (!v3() || v3() == 2)
  {
    v5 = a2 + 16;
    swift_beginAccess(v5, v6, 0, 0);
    if (swift_weakLoadStrong(v5))
    {
      swift_retain();
      swift_release();
      sub_100100D3C();
      *(_QWORD *)&result = swift_release().n128_u64[0];
    }
  }
  return result;
}

double sub_1000FE88C(_QWORD *a1, uint64_t a2)
{
  double result;
  uint64_t v4;
  _BYTE v5[24];

  if ((*(uint64_t (**)(void))((swift_isaMask & *a1) + 0xD0))() == 9)
  {
    v4 = a2 + 16;
    swift_beginAccess(v4, v5, 0, 0);
    if (swift_weakLoadStrong(v4))
    {
      swift_retain();
      swift_release();
      sub_100100D44();
      *(_QWORD *)&result = swift_release().n128_u64[0];
    }
  }
  return result;
}

BOOL sub_1000FE920(uint64_t a1, _QWORD *a2, double a3, double a4)
{
  uint64_t v7;
  BOOL v8;
  _BYTE v10[24];

  v7 = a1 + 16;
  swift_beginAccess(a1 + 16, v10, 0, 0);
  if (swift_weakLoadStrong(v7))
  {
    v8 = sub_1000FE9A4(a2, a3, a4);
    swift_release();
  }
  else
  {
    return 0;
  }
  return v8;
}

BOOL sub_1000FE9A4(_QWORD *a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v8)(void);
  _BOOL8 v9;
  float v10;
  float32x2_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(_QWORD *__return_ptr, __n128);
  __n128 v16;
  void *v17;
  void *v18;
  _QWORD v20[64];
  __n128 __dst[32];

  v4 = v3;
  v8 = *(uint64_t (**)(void))((swift_isaMask & *a1) + 0xD0);
  if (v8() != 5 && v8())
    return 0;
  v10 = *(float *)(v4 + 472);
  v11 = COERCE_FLOAT32X2_T(CGPoint.floats.getter(a2, a3));
  __dst[0].n128_u64[0] = (*(uint64_t (**)(void))((swift_isaMask & *a1) + 0x250))();
  v12 = sub_10000EDC8(&qword_100483F50);
  v13 = sub_100043310(&qword_100483F58, &qword_100483F50, (uint64_t)&protocol conformance descriptor for [A]);
  v14 = RangeReplaceableCollection<>.idToObjectMap.getter(v12, v13);
  swift_bridgeObjectRelease(__dst[0].n128_u64[0]);
  v15 = *(void (**)(_QWORD *__return_ptr, __n128))(**(_QWORD **)(v4 + 144) + 144);
  v16 = swift_retain();
  v15(v20, v16);
  swift_release();
  memcpy(__dst, v20, sizeof(__dst));
  sub_100091F0C(v14, __dst, v11, v10);
  v18 = v17;
  sub_100012C00((uint64_t)__dst);
  swift_bridgeObjectRelease(v14);
  v9 = v18 != 0;

  return v9;
}

double sub_1000FEB0C(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  double result;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v9, 0, 0);
  if (swift_weakLoadStrong(v3))
  {
    swift_retain();
    v5 = swift_release();
    v6 = (*(uint64_t (**)(__n128))((swift_isaMask & *a2) + 0xB8))(v5);
    v8 = v7;
    sub_100101018(v6, v7);
    swift_release();
    *(_QWORD *)&result = swift_bridgeObjectRelease(v8).n128_u64[0];
  }
  return result;
}

void sub_1000FEBAC(_QWORD *a1)
{
  void *v2;
  id v3;

  if (qword_10047A930 != -1)
    swift_once(&qword_10047A930, sub_100083368);
  if (qword_1004AF238)
  {
    v2 = *(void **)(qword_1004AF238 + 112);
    if (v2)
    {
      v3 = v2;
      sub_10004B834(a1);

    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1000FEC3C(uint64_t (*a1)(__n128), _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t (*v5)(void);
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  void *v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  char v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  char v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(void);
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  char v56;
  __n128 v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  __n128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  char v70;
  __n128 v71;
  void *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t (*v77)(void);
  _QWORD *v79;

  v3 = v2;
  v5 = *(uint64_t (**)(void))((swift_isaMask & *a2) + 0x238);
  v6 = v5();
  if ((unint64_t)v6 >> 62)
  {
LABEL_59:
    if (v6 < 0)
      v74 = v6;
    else
      v74 = v6 & 0xFFFFFFFFFFFFFF8;
    v7 = _CocoaArrayWrapper.endIndex.getter(v74);
  }
  else
  {
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v8 = swift_bridgeObjectRelease(v6);
  if (v7 <= 1)
  {
    v9 = (void *)(*(uint64_t (**)(__n128))((swift_isaMask & *a2) + 0x250))(v8);

    if (!v9)
      goto LABEL_57;
  }
  type metadata accessor for WorldAnchor(0);
  v10 = (*(uint64_t (**)(void))((swift_isaMask & *a2) + 0x2C0))();
  v12 = WorldAnchor.__allocating_init(anchor:shouldAutoUpdate:)(v10, 1, v11);
  v13 = (*(uint64_t (**)(void))((swift_isaMask & *a2) + 0x2F0))();
  v14 = (*(uint64_t (**)(void))((swift_isaMask & *a2) + 0xD0))();
  v15 = objc_allocWithZone((Class)type metadata accessor for WorldPoint(0));
  v79 = (_QWORD *)WorldPoint.init(anchor:type:state:)(v12, v13, v14);
  if ((sub_100102060(v79, 1) & 1) == 0)
  {

    return;
  }
  v16 = (_QWORD *)(*(uint64_t (**)(void))((swift_isaMask & *a2) + 0x250))();
  if (!v16)
    goto LABEL_17;
  v17 = v16;
  v18 = (_QWORD *)(*(uint64_t (**)(void))((swift_isaMask & *v16) + 0x268))();
  v19 = (*(uint64_t (**)(void))((swift_isaMask & *v18) + 0xB8))();
  v21 = v20;

  v22 = (*(uint64_t (**)(void))((swift_isaMask & *a2) + 0xB8))();
  if (v19 == v22 && v21 == v23)
  {
    v27 = swift_bridgeObjectRelease_n(v21, 2);
  }
  else
  {
    v25 = v23;
    v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v21, v22, v23, 0);
    swift_bridgeObjectRelease(v21);
    v27 = swift_bridgeObjectRelease(v25);
    if ((v26 & 1) == 0)
      goto LABEL_16;
  }
  (*(void (**)(_QWORD *, __n128))((swift_isaMask & *v17) + 0x328))(v79, v27);
LABEL_16:

LABEL_17:
  v28 = v5();
  v76 = v3;
  if ((unint64_t)v28 >> 62)
    goto LABEL_64;
  v29 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_19:
  v5 = (uint64_t (*)(void))&swift_isaMask;
  v30 = v79;
  if (!v29)
  {
LABEL_56:

    swift_bridgeObjectRelease(v28);
    v3 = v76;
LABEL_57:
    v72 = *(void **)(v3 + 312);
    *(_QWORD *)(v3 + 312) = a2;

    v73 = a2;
    return;
  }
  if (v29 >= 1)
  {
    v31 = 0;
    v77 = *(uint64_t (**)(void))((swift_isaMask & *(_QWORD *)a1) + 0xB8);
    v3 = v28 & 0xC000000000000001;
    while (1)
    {
      if (v3)
        v32 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v31, v28);
      else
        v32 = *(id *)(v28 + 8 * v31 + 32);
      v33 = v32;
      v34 = (*(uint64_t (**)(void))((swift_isaMask & *v32) + 0xB8))();
      v36 = v35;
      v37 = v77();
      if (v34 == v37 && v36 == v38)
      {

        swift_bridgeObjectRelease_n(v36, 2);
      }
      else
      {
        v40 = v38;
        v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v34, v36, v37, v38, 0);
        swift_bridgeObjectRelease(v36);
        v42 = swift_bridgeObjectRelease(v40);
        if ((v41 & 1) != 0)
        {

        }
        else
        {
          a1 = *(uint64_t (**)(__n128))((swift_isaMask & *v33) + 0x250);
          v6 = (uint64_t)v33;
          v43 = a1(v42);
          v44 = v43;
          if ((v43 & 0xC000000000000001) != 0)
          {
            v45 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v43);
          }
          else
          {
            if (!*(_QWORD *)((v43 & 0xFFFFFFFFFFFFF8) + 0x10))
            {
              __break(1u);
              goto LABEL_59;
            }
            v45 = *(id *)(v43 + 32);
          }
          v46 = v45;
          v47 = swift_bridgeObjectRelease(v44);
          v48 = (*(uint64_t (**)(__n128))((swift_isaMask & *v46) + 0xB8))(v47);
          v50 = v49;

          v51 = *(uint64_t (**)(void))((swift_isaMask & *a2) + 0xB8);
          v52 = v51();
          if (v48 == v52 && v50 == v53)
          {
            v57 = swift_bridgeObjectRelease_n(v50, 2);
LABEL_51:
            v5 = (uint64_t (*)(void))&swift_isaMask;
            (*(void (**)(_QWORD *, __n128))((swift_isaMask & *v33) + 0x318))(v79, v57);

            goto LABEL_23;
          }
          v55 = v53;
          v56 = _stringCompareWithSmolCheck(_:_:expecting:)(v48, v50, v52, v53, 0);
          swift_bridgeObjectRelease(v50);
          v57 = swift_bridgeObjectRelease(v55);
          if ((v56 & 1) != 0)
            goto LABEL_51;
          v58 = a1(v57);
          v59 = v58;
          if ((v58 & 0xC000000000000001) != 0)
          {
            v60 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v58);
          }
          else
          {
            if (*(_QWORD *)((v58 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
            {
              __break(1u);
LABEL_64:
              if (v28 < 0)
                v75 = v28;
              else
                v75 = v28 & 0xFFFFFFFFFFFFFF8;
              v29 = _CocoaArrayWrapper.endIndex.getter(v75);
              goto LABEL_19;
            }
            v60 = *(id *)(v58 + 40);
          }
          v61 = v60;
          v62 = swift_bridgeObjectRelease(v59);
          v63 = (*(uint64_t (**)(__n128))((swift_isaMask & *v61) + 0xB8))(v62);
          v65 = v64;

          v66 = v51();
          if (v63 == v66 && v65 == v67)
          {
            v71 = swift_bridgeObjectRelease_n(v65, 2);
LABEL_53:
            v5 = (uint64_t (*)(void))&swift_isaMask;
            (*(void (**)(_QWORD *, __n128))((swift_isaMask & *v33) + 0x320))(v79, v71);

            goto LABEL_23;
          }
          v69 = v67;
          v70 = _stringCompareWithSmolCheck(_:_:expecting:)(v63, v65, v66, v67, 0);
          swift_bridgeObjectRelease(v65);
          v71 = swift_bridgeObjectRelease(v69);
          if ((v70 & 1) != 0)
            goto LABEL_53;

          v5 = (uint64_t (*)(void))&swift_isaMask;
        }
      }
LABEL_23:
      ++v31;
      v30 = v79;
      if (v29 == v31)
        goto LABEL_56;
    }
  }
  __break(1u);
}

