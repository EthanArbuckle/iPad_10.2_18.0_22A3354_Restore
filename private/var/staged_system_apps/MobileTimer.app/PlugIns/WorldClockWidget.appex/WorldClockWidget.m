uint64_t sub_100003C70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  void (*v68)(char *, char *, uint64_t);
  char *v69;
  int *v70;

  v4 = sub_1000041D8(&qword_100084810);
  __chkstk_darwin(v4);
  v6 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v67 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v62 = (char *)&v55 - v12;
  v13 = __chkstk_darwin(v11);
  v61 = (char *)&v55 - v14;
  v15 = __chkstk_darwin(v13);
  v66 = (char *)&v55 - v16;
  __chkstk_darwin(v15);
  v65 = (char *)&v55 - v17;
  v70 = (int *)type metadata accessor for WorldClockCity(0);
  v18 = *((_QWORD *)v70 - 1);
  __chkstk_darwin(v70);
  v20 = (char *)&v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for TimelineReloadPolicy(0);
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v55 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(v22);
  v26 = *(_QWORD *)(v25 + 16);
  if (v26)
  {
    v56 = v24;
    v57 = a1;
    v58 = a2;
    v27 = *(unsigned __int8 *)(v18 + 80);
    v55 = v25;
    v28 = v25 + ((v27 + 32) & ~v27);
    v29 = (char *)&_swiftEmptyArrayStorage;
    v59 = *(_QWORD *)(v18 + 72);
    v60 = v6;
    v30 = (char *)&_swiftEmptyArrayStorage;
    v64 = v7;
    v69 = v20;
    do
    {
      v63 = v26;
      sub_10000DF30(v28, (uint64_t)v20, type metadata accessor for WorldClockCity);
      v31 = &v20[v70[9]];
      v68 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
      v68(v65, v31, v7);
      v32 = swift_bridgeObjectRetain(v29);
      if ((swift_isUniquelyReferenced_nonNull_native(v32) & 1) == 0)
        v30 = (char *)sub_10000C964(0, *((_QWORD *)v29 + 2) + 1, 1, v29, &qword_100085088, (uint64_t (*)(_QWORD))&type metadata accessor for Date);
      v34 = *((_QWORD *)v30 + 2);
      v33 = *((_QWORD *)v30 + 3);
      if (v34 >= v33 >> 1)
        v30 = (char *)sub_10000C964(v33 > 1, v34 + 1, 1, v30, &qword_100085088, (uint64_t (*)(_QWORD))&type metadata accessor for Date);
      *((_QWORD *)v30 + 2) = v34 + 1;
      v35 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v36 = *(_QWORD *)(v8 + 72);
      v37 = &v30[v35 + v36 * v34];
      v38 = v8;
      v39 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
      v40 = v64;
      v39(v37, v65, v64);
      v68(v66, &v69[v70[10]], v40);
      v42 = *((_QWORD *)v30 + 2);
      v41 = *((_QWORD *)v30 + 3);
      if (v42 >= v41 >> 1)
        v30 = (char *)sub_10000C964(v41 > 1, v42 + 1, 1, v30, &qword_100085088, (uint64_t (*)(_QWORD))&type metadata accessor for Date);
      *((_QWORD *)v30 + 2) = v42 + 1;
      v7 = v64;
      v39(&v30[v35 + v42 * v36], v66, v64);
      v43 = (uint64_t)v60;
      sub_10000C91C((uint64_t)&v69[v70[11]], (uint64_t)v60);
      v8 = v38;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v43, 1, v7) == 1)
      {
        v44 = sub_1000106A4(v43, &qword_100084810);
      }
      else
      {
        v45 = v61;
        v39(v61, (char *)v43, v7);
        v68(v62, v45, v7);
        v47 = *((_QWORD *)v30 + 2);
        v46 = *((_QWORD *)v30 + 3);
        if (v47 >= v46 >> 1)
          v30 = (char *)sub_10000C964(v46 > 1, v47 + 1, 1, v30, &qword_100085088, (uint64_t (*)(_QWORD))&type metadata accessor for Date);
        *((_QWORD *)v30 + 2) = v47 + 1;
        v39(&v30[v35 + v47 * v36], v62, v7);
        v44 = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v61, v7);
      }
      Date.init()(v44);
      v49 = *((_QWORD *)v30 + 2);
      v48 = *((_QWORD *)v30 + 3);
      if (v49 >= v48 >> 1)
        v30 = (char *)sub_10000C964(v48 > 1, v49 + 1, 1, v30, &qword_100085088, (uint64_t (*)(_QWORD))&type metadata accessor for Date);
      *((_QWORD *)v30 + 2) = v49 + 1;
      v39(&v30[v35 + v49 * v36], v67, v7);
      v20 = v69;
      sub_10000D330((uint64_t)v69, type metadata accessor for WorldClockCity);
      swift_bridgeObjectRelease(v29);
      v28 += v59;
      v29 = v30;
      v26 = v63 - 1;
    }
    while (v63 != 1);
    swift_bridgeObjectRelease(v55);
    a1 = v57;
    v24 = v56;
  }
  else
  {
    swift_bridgeObjectRelease(v25);
    v30 = (char *)&_swiftEmptyArrayStorage;
  }
  swift_retain(a1);
  v50 = sub_10000CCA4((uint64_t)v30, a1);
  swift_bridgeObjectRelease(v30);
  v51 = swift_release(a1);
  static TimelineReloadPolicy.atEnd.getter(v51);
  v52 = type metadata accessor for WorldClockEntry(0);
  v53 = sub_10000D36C(&qword_100084818, type metadata accessor for WorldClockEntry, (uint64_t)&unk_10006B208);
  return Timeline.init(entries:policy:)(v50, v24, v52, v53);
}

uint64_t sub_1000041D8(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t type metadata accessor for WorldClockCity(uint64_t a1)
{
  return sub_10000DEFC(a1, (uint64_t *)&unk_100088AC0, (uint64_t)&nominal type descriptor for WorldClockCity);
}

uint64_t sub_10000422C()
{
  return 0;
}

uint64_t sub_100004234@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t result;

  v8 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a4, a1, v8);
  result = type metadata accessor for WorldClockEntry(0);
  *(_QWORD *)(a4 + *(int *)(result + 20)) = a2;
  *(_BYTE *)(a4 + *(int *)(result + 24)) = a3;
  return result;
}

uint64_t sub_10000429C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000042A4()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t sub_1000042B4()
{
  uint64_t v0;

  return swift_allocObject(v0, 16, 7);
}

void *sub_1000042C4()
{
  return &unk_1000847F0;
}

uint64_t sub_1000042D0()
{
  return sub_100004494(&qword_1000847F0, &off_1000847F8);
}

uint64_t sub_1000042E0(uint64_t a1, uint64_t a2)
{
  return sub_1000044F4(a1, a2, &qword_1000847F0, (uint64_t *)&off_1000847F8);
}

void *sub_1000042F0(uint64_t a1)
{
  swift_beginAccess(&unk_1000847F0, a1, 33, 0);
  return &j_j__swift_endAccess;
}

uint64_t sub_100004334(void *a1, uint64_t a2, void (*a3)(char *), uint64_t a4)
{
  return sub_1000045F4(a1, a2, a3, a4, 66, 0xD000000000000040, (void *)0x800000010006E0B0);
}

uint64_t sub_100004358(void *a1, uint64_t a2, void (*a3)(char *), uint64_t a4)
{
  return sub_10000491C(a1, a2, a3, a4, 49, 0xD00000000000002FLL, (void *)0x800000010006E130);
}

uint64_t sub_10000437C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = type metadata accessor for WorldClockSingleProvider();
  return IntentTimelineProvider.recommendations()(v3, a2);
}

uint64_t sub_1000043A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;

  v6 = (_QWORD *)swift_task_alloc(async function pointer to IntentTimelineProvider.relevances()[1]);
  *(_QWORD *)(v3 + 16) = v6;
  v7 = type metadata accessor for WorldClockSingleProvider();
  *v6 = v3;
  v6[1] = sub_100010730;
  return IntentTimelineProvider.relevances()(a1, v7, a3);
}

uint64_t sub_10000440C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;

  v6 = (_QWORD *)swift_task_alloc(async function pointer to IntentTimelineProvider.relevance()[1]);
  *(_QWORD *)(v3 + 16) = v6;
  v7 = type metadata accessor for WorldClockSingleProvider();
  *v6 = v3;
  v6[1] = sub_100010730;
  return IntentTimelineProvider.relevance()(a1, v7, a3);
}

void *sub_100004478()
{
  return &unk_100084800;
}

uint64_t sub_100004484()
{
  return sub_100004494(&qword_100084800, &off_100084808);
}

uint64_t sub_100004494(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  _BYTE v6[24];

  swift_beginAccess(a1, v6, 0, 0);
  v4 = *a1;
  swift_bridgeObjectRetain(*a2);
  return v4;
}

uint64_t sub_1000044E4(uint64_t a1, uint64_t a2)
{
  return sub_1000044F4(a1, a2, &qword_100084800, (uint64_t *)&off_100084808);
}

uint64_t sub_1000044F4(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v8;
  _BYTE v10[24];

  swift_beginAccess(a3, v10, 1, 0);
  v8 = *a4;
  *a3 = a1;
  *a4 = a2;
  return swift_bridgeObjectRelease(v8);
}

void *sub_100004550(uint64_t a1)
{
  swift_beginAccess(&unk_100084800, a1, 33, 0);
  return &j_j__swift_endAccess;
}

uint64_t sub_100004590@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  Date.init()(a1);
  result = type metadata accessor for WorldClockEntry(0);
  *(_QWORD *)(a2 + *(int *)(result + 20)) = &_swiftEmptyArrayStorage;
  *(_BYTE *)(a2 + *(int *)(result + 24)) = 1;
  return result;
}

uint64_t sub_1000045D4(void *a1, uint64_t a2, void (*a3)(char *), uint64_t a4)
{
  return sub_1000045F4(a1, a2, a3, a4, 65, 0xD00000000000003FLL, (void *)0x800000010006E180);
}

uint64_t sub_1000045F4(void *a1, uint64_t a2, void (*a3)(char *), uint64_t a4, Swift::Int a5, uint64_t a6, void *a7)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::String v26;
  void *object;
  void *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD v32[2];
  void (*v33)(char *);
  uint64_t v34;
  unint64_t v35;
  Swift::String v36;
  uint64_t v37;
  unint64_t v38;

  v32[1] = a4;
  v33 = a3;
  v11 = type metadata accessor for WorldClockEntry(0);
  __chkstk_darwin(v11);
  v13 = (char *)v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for WorldClockIntentModel();
  v15 = swift_allocObject(v14, 32, 7);
  *(_QWORD *)(v15 + 16) = &_swiftEmptyArrayStorage;
  *(_QWORD *)(v15 + 24) = 0;
  v16 = a1;
  v17 = objc_msgSend(v16, "cities");
  if (v17)
  {
    v18 = v17;
    v19 = sub_10000DF74(0, &qword_100084820, MTCity_ptr);
    v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v18, v19);

  }
  else
  {
    v20 = 0;
  }
  sub_1000058D4(v20);

  swift_bridgeObjectRelease(v20);
  v21 = type metadata accessor for WidgetUtilities();
  v34 = 0;
  v35 = 0xE000000000000000;
  _StringGuts.grow(_:)(a5);
  v37 = v34;
  v38 = v35;
  v22._countAndFlagsBits = a6;
  v22._object = a7;
  String.append(_:)(v22);
  v34 = 0;
  v35 = 0xE000000000000000;
  _StringGuts.grow(_:)(37);
  swift_bridgeObjectRelease(v35);
  v36._countAndFlagsBits = 0xD000000000000023;
  v36._object = (void *)0x800000010006E100;
  swift_beginAccess(v15 + 16, &v34, 0, 0);
  v23 = *(_QWORD *)(v15 + 16);
  v24 = type metadata accessor for WorldClockCity(0);
  v25 = swift_bridgeObjectRetain(v23);
  v26._countAndFlagsBits = Array.description.getter(v25, v24);
  object = v26._object;
  String.append(_:)(v26);
  swift_bridgeObjectRelease(v23);
  swift_bridgeObjectRelease(object);
  v28 = v36._object;
  String.append(_:)(v36);
  swift_bridgeObjectRelease(v28);
  v29 = v38;
  (*(void (**)(uint64_t, unint64_t))(v21 + 80))(v37, v38);
  swift_bridgeObjectRelease(v29);
  sub_10000543C((uint64_t)v13);
  v30 = *(_QWORD *)(v15 + 16);
  *(_QWORD *)&v13[*(int *)(v11 + 20)] = v30;
  v13[*(int *)(v11 + 24)] = 0;
  swift_bridgeObjectRetain(v30);
  v33(v13);
  swift_release(v15);
  return sub_10000D330((uint64_t)v13, type metadata accessor for WorldClockEntry);
}

uint64_t sub_10000484C(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = swift_allocObject(v1, 32, 7);
  *(_QWORD *)(v3 + 16) = &_swiftEmptyArrayStorage;
  *(_QWORD *)(v3 + 24) = 0;
  v4 = objc_msgSend(a1, "cities");
  if (v4)
  {
    v5 = v4;
    v6 = sub_10000DF74(0, &qword_100084820, MTCity_ptr);
    v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);

  }
  else
  {
    v7 = 0;
  }
  sub_1000058D4(v7);

  swift_bridgeObjectRelease(v7);
  return v3;
}

uint64_t sub_1000048FC(void *a1, uint64_t a2, void (*a3)(char *), uint64_t a4)
{
  return sub_10000491C(a1, a2, a3, a4, 48, 0xD00000000000002ELL, (void *)0x800000010006E1C0);
}

uint64_t sub_10000491C(void *a1, uint64_t a2, void (*a3)(char *), uint64_t a4, Swift::Int a5, uint64_t a6, void *a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void (*v24)(unint64_t, unint64_t);
  char v25;
  Swift::String v26;
  void *object;
  unint64_t v28;
  Swift::String v30;
  uint64_t v31;
  void (*v32)(char *);
  unint64_t v33;
  unint64_t v34;

  v30._countAndFlagsBits = a6;
  v30._object = a7;
  v9 = v7;
  v31 = a4;
  v32 = a3;
  v11 = sub_1000041D8(&qword_100084828);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for WorldClockIntentModel();
  v16 = swift_allocObject(v15, 32, 7);
  *(_QWORD *)(v16 + 16) = &_swiftEmptyArrayStorage;
  *(_QWORD *)(v16 + 24) = 0;
  v17 = a1;
  v18 = objc_msgSend(v17, "cities");
  if (v18)
  {
    v19 = v18;
    v20 = sub_10000DF74(0, &qword_100084820, MTCity_ptr);
    v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v19, v20);

  }
  else
  {
    v21 = 0;
  }
  sub_1000058D4(v21);

  swift_bridgeObjectRelease(v21);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 80))(v16);
  v22 = type metadata accessor for WidgetUtilities();
  v33 = 0;
  v34 = 0xE000000000000000;
  _StringGuts.grow(_:)(a5);
  String.append(_:)(v30);
  _print_unlocked<A, B>(_:_:)(v14, &v33, v11, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v23 = v34;
  v24 = *(void (**)(unint64_t, unint64_t))(v22 + 80);
  v24(v33, v34);
  swift_bridgeObjectRelease(v23);
  v33 = 0;
  v34 = 0xE000000000000000;
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease(v34);
  v33 = 0xD000000000000012;
  v34 = 0x800000010006E160;
  v25 = sub_100022220();
  v26._countAndFlagsBits = sub_1000223B8(v25);
  object = v26._object;
  String.append(_:)(v26);
  swift_bridgeObjectRelease(object);
  v28 = v34;
  v24(v33, v34);
  swift_bridgeObjectRelease(v28);
  v32(v14);
  swift_release(v16);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_100004B48(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = type metadata accessor for WorldClockMultiProvider();
  return IntentTimelineProvider.recommendations()(v3, a2);
}

uint64_t sub_100004B6C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 96))();
}

uint64_t sub_100004B94()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 104))();
}

uint64_t sub_100004BBC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 112))();
}

uint64_t sub_100004BE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;

  v6 = (_QWORD *)swift_task_alloc(async function pointer to IntentTimelineProvider.relevances()[1]);
  *(_QWORD *)(v3 + 16) = v6;
  v7 = type metadata accessor for WorldClockMultiProvider();
  *v6 = v3;
  v6[1] = sub_100004C50;
  return IntentTimelineProvider.relevances()(a1, v7, a3);
}

uint64_t sub_100004C50()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *v0;
  v1 = *(_QWORD *)(v4 + 16);
  v2 = *v0;
  v4 = v2;
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100004C98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;

  v6 = (_QWORD *)swift_task_alloc(async function pointer to IntentTimelineProvider.relevance()[1]);
  *(_QWORD *)(v3 + 16) = v6;
  v7 = type metadata accessor for WorldClockMultiProvider();
  *v6 = v3;
  v6[1] = sub_100010730;
  return IntentTimelineProvider.relevance()(a1, v7, a3);
}

uint64_t (*sub_100004D0C())()
{
  return nullsub_1;
}

uint64_t sub_100004D1C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for WorldClockEntry(0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + *(int *)(v1 + 20)));
}

uint64_t sub_100004D3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for WorldClockEntry(0) + 20);
  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + v3));
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*sub_100004D78())()
{
  type metadata accessor for WorldClockEntry(0);
  return nullsub_1;
}

uint64_t sub_100004DA0()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for WorldClockEntry(0) + 24));
}

uint64_t sub_100004DC0(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for WorldClockEntry(0);
  *(_BYTE *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*sub_100004DEC())()
{
  type metadata accessor for WorldClockEntry(0);
  return nullsub_1;
}

unint64_t sub_100004E14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  void *object;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  void *v10;

  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease(0xE000000000000000);
  v1 = type metadata accessor for Date(0);
  v2 = sub_10000D36C(&qword_100084830, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v1, v2);
  object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  v5._countAndFlagsBits = 0x736569746963202CLL;
  v5._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v5);
  v6 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for WorldClockEntry(0) + 20));
  v7 = type metadata accessor for WorldClockCity(0);
  v8 = swift_bridgeObjectRetain(v6);
  v9._countAndFlagsBits = Array.description.getter(v8, v7);
  v10 = v9._object;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v10);
  return 0xD00000000000001BLL;
}

uint64_t sub_100004F30@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for WorldClockEntry(0) + 20));
  if (!*(_QWORD *)(v3 + 16))
    return sub_100004FA0(a1);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for WorldClockCity(0) - 8) + 80);
  return sub_10000DF30(v3 + ((v4 + 32) & ~v4), a1, type metadata accessor for WorldClockCity);
}

uint64_t sub_100004FA0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void *v15;
  __objc2_class_ro *v16;
  id v17;
  void *v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t (*v20)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  id v22;
  void *v23;
  char v24;
  void (*v25)(uint64_t, char *, uint64_t);
  int *v26;
  char *v27;
  uint64_t result;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;

  v2 = sub_1000041D8(&qword_100084810);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v32 - v6;
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v32 - v13;
  v15 = (void *)objc_opt_self(MTUtilities);
  v16 = &WorldClockBaseProvider;
  v17 = objc_msgSend(v15, "widgetOverrideDate");
  if (!v17)
  {
    v20 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v21 = v20(v7, 1, 1, v8);
    goto LABEL_5;
  }
  v18 = v17;
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v17);

  v19 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v19(v7, v12, v8);
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  v20(v7, 0, 1, v8);
  v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
  if ((_DWORD)v21 == 1)
  {
    v16 = &WorldClockBaseProvider;
LABEL_5:
    Date.init()(v21);
    sub_1000106A4((uint64_t)v7, &qword_100084810);
    goto LABEL_7;
  }
  v19(v14, v7, v8);
  v16 = &WorldClockBaseProvider;
LABEL_7:
  v22 = objc_msgSend(v15, (SEL)v16[21].base_meths);
  if (v22)
  {
    v23 = v22;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v22);

    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v5, v12, v8);
    v24 = 1;
    v20(v5, 0, 1, v8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v5, 1, v8) != 1)
      goto LABEL_12;
  }
  else
  {
    v20(v5, 1, 1, v8);
  }
  v24 = 0;
LABEL_12:
  sub_1000106A4((uint64_t)v5, &qword_100084810);
  v25 = *(void (**)(uint64_t, char *, uint64_t))(v9 + 16);
  v25(a1, v14, v8);
  v26 = (int *)type metadata accessor for WorldClockCity(0);
  v25(a1 + v26[9], v14, v8);
  v25(a1 + v26[10], v14, v8);
  v27 = (char *)(a1 + v26[11]);
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v27, v14, v8);
  result = v20(v27, 0, 1, v8);
  *(_BYTE *)(a1 + v26[5]) = v24;
  v29 = (_QWORD *)(a1 + v26[6]);
  *v29 = 0;
  v29[1] = 0xE000000000000000;
  v30 = (_QWORD *)(a1 + v26[7]);
  *v30 = 0;
  v30[1] = 0xE000000000000000;
  v31 = (_QWORD *)(a1 + v26[8]);
  *v31 = 0;
  v31[1] = 0xE000000000000000;
  *(_BYTE *)(a1 + v26[12]) = 0;
  *(_BYTE *)(a1 + v26[13]) = 1;
  return result;
}

void *sub_1000052B8()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t sub_1000052C4()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 16, v2, 0, 0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000052F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 16, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease(v3);
}

void *sub_10000533C(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 16, a1, 33, 0);
  return &j__swift_endAccess;
}

id sub_10000537C()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  id v5;

  v1 = *(void **)(v0 + 24);
  if (v1)
  {
    v2 = *(id *)(v0 + 24);
  }
  else
  {
    v3 = objc_msgSend(objc_allocWithZone((Class)GEOAlmanac), "init");
    v4 = *(void **)(v0 + 24);
    *(_QWORD *)(v0 + 24) = v3;
    v2 = v3;

    v1 = 0;
  }
  v5 = v1;
  return v2;
}

void sub_1000053E4(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + 24);
  *(_QWORD *)(v1 + 24) = a1;

}

void (*sub_1000053F0(id *a1))(uint64_t *a1)
{
  void *v1;

  a1[1] = v1;
  *a1 = sub_10000537C();
  return sub_100005424;
}

void sub_100005424(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *a1;
  v1 = a1[1];
  v3 = *(void **)(v1 + 24);
  *(_QWORD *)(v1 + 24) = v2;

}

uint64_t sub_100005434()
{
  return 0;
}

uint64_t sub_10000543C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  void *v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v14;

  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000041D8(&qword_100084810);
  __chkstk_darwin(v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = objc_msgSend((id)objc_opt_self(MTUtilities), "widgetOverrideDate");
  if (v9)
  {
    v10 = v9;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v11 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
    v11(v8, v5, v2);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
    v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2);
    if ((_DWORD)v12 != 1)
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v11)(a1, v8, v2);
  }
  else
  {
    v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
  }
  Date.init()(v12);
  return sub_1000106A4((uint64_t)v8, &qword_100084810);
}

uint64_t sub_10000559C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_allocObject(v0, 32, 7);
  sub_1000055D0();
  return v1;
}

_QWORD *sub_1000055D0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, unint64_t, uint64_t, unint64_t, unint64_t, unint64_t, uint64_t, unint64_t, double, double);
  uint64_t v5;
  _BYTE v7[24];

  v0[2] = &_swiftEmptyArrayStorage;
  v0[3] = 0;
  v1 = sub_1000041D8(&qword_100084838);
  v2 = *(_QWORD *)(type metadata accessor for WorldClockCity(0) - 8);
  v3 = swift_allocObject(v1, ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ 4 * *(_QWORD *)(v2 + 72), *(unsigned __int8 *)(v2 + 80) | 7);
  *(_OWORD *)(v3 + 16) = xmmword_10006B080;
  v4 = *(void (**)(uint64_t, unint64_t, uint64_t, unint64_t, unint64_t, unint64_t, uint64_t, unint64_t, double, double))(*v0 + 192);
  v4(4413774, 0xE300000000000000, 4413774, 0xE300000000000000, 0xD000000000000010, 0x800000010006E210, 0x342D544D47, 0xE500000000000000, 40.73061, -73.935242);
  v4(0x6F676163696843, 0xE700000000000000, 4802627, 0xE300000000000000, 0x2F61636972656D41uLL, 0xEF6F676163696843, 0x352D544D47, 0xE500000000000000, 41.881832, -87.623177);
  v4(0x676E696A696542, 0xE700000000000000, 5458498, 0xE300000000000000, 0x6168532F61697341uLL, 0xED0000696168676ELL, 0x362B544D47, 0xE500000000000000, 39.913818, 116.363625);
  v4(0x6E69747265707543, 0xE90000000000006FLL, 5264707, 0xE300000000000000, 0xD000000000000013, 0x800000010006E230, 0x372D544D47, 0xE500000000000000, 37.323, -122.03218);
  swift_beginAccess(v0 + 2, v7, 1, 0);
  v5 = v0[2];
  v0[2] = v3;
  swift_bridgeObjectRelease(v5);
  return v0;
}

_QWORD *sub_100005834(void *a1)
{
  _QWORD *v1;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v1[2] = &_swiftEmptyArrayStorage;
  v1[3] = 0;
  v3 = objc_msgSend(a1, "cities");
  if (v3)
  {
    v4 = v3;
    v5 = sub_10000DF74(0, &qword_100084820, MTCity_ptr);
    v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v5);

  }
  else
  {
    v6 = 0;
  }
  (*(void (**)(uint64_t))(*v1 + 176))(v6);

  swift_bridgeObjectRelease(v6);
  return v1;
}

id sub_1000058D4(uint64_t a1)
{
  void *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  id result;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  NSString v16;
  id v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;

  v2 = &_swiftEmptyArrayStorage;
  if (!a1)
    return (id)(*(uint64_t (**)(_QWORD *))(*(_QWORD *)v1 + 104))(v2);
  v4 = a1 & 0xFFFFFFFFFFFFFF8;
  if (!((unint64_t)a1 >> 62))
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n(a1, 2);
    if (v5)
      goto LABEL_4;
    goto LABEL_24;
  }
LABEL_20:
  if (a1 >= 0)
    v20 = v4;
  else
    v20 = a1;
  swift_bridgeObjectRetain_n(a1, 2);
  v5 = _CocoaArrayWrapper.endIndex.getter(v20);
  if (!v5)
  {
LABEL_24:
    swift_bridgeObjectRelease(a1);
LABEL_25:
    swift_bridgeObjectRelease(a1);
    swift_retain(v1);
    v2 = sub_10000D3AC((uint64_t)&_swiftEmptyArrayStorage, (uint64_t)v1);
    swift_bridgeObjectRelease(&_swiftEmptyArrayStorage);
    swift_release(v1);
    return (id)(*(uint64_t (**)(_QWORD *))(*(_QWORD *)v1 + 104))(v2);
  }
LABEL_4:
  v21 = v1;
  v22 = (id)objc_opt_self(WorldClockManager);
  v6 = 4;
  while (1)
  {
    if ((a1 & 0xC000000000000001) != 0)
      v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6 - 4, a1);
    else
      v8 = *(id *)(a1 + 8 * v6);
    v1 = v8;
    v9 = v6 - 3;
    if (__OFADD__(v6 - 4, 1))
    {
      __break(1u);
      goto LABEL_20;
    }
    result = objc_msgSend(v22, "sharedManager");
    if (!result)
      break;
    v11 = result;
    v12 = objc_msgSend(v1, "identifier");
    if (v12)
    {
      v13 = v12;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      v15 = v14;

      v16 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v15);
    }
    else
    {
      v16 = 0;
    }
    v17 = objc_msgSend(v11, "updatedDataForCityWithID:", v16, v21);

    if (v17)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      v19 = *(_QWORD *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
      v18 = *(_QWORD *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v19 >= v18 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
      v7 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, v17);
      specialized Array._endMutation()(v7);
    }
    ++v6;
    if (v9 == v5)
    {
      swift_bridgeObjectRelease(a1);
      v1 = v21;
      goto LABEL_25;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100005B20(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t (*v33)(void);
  void *v34;
  uint64_t v35;
  double v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  uint64_t (*v39)(void);
  void *v40;
  id v41;
  char v42;
  uint64_t v43;
  uint64_t (*v44)(void);
  void *v45;
  id v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  id v51;
  char *v52;
  uint64_t v53;
  __objc2_class_ro *v54;
  uint64_t v55;
  Swift::String v56;
  void *object;
  Swift::String v58;
  void *v59;
  id v60;
  char *v61;
  uint64_t v62;
  Swift::String v63;
  void *v64;
  Swift::String v65;
  void *v66;
  id v67;
  char *v68;
  uint64_t v69;
  Swift::String v70;
  void *v71;
  unint64_t v72;
  uint64_t v73;
  void *v74;
  id v75;
  char *v76;
  uint64_t (*v77)(uint64_t, char *, uint64_t);
  unsigned int (*v78)(char *, uint64_t, uint64_t);
  uint64_t v79;
  void *v80;
  id v81;
  char *v82;
  uint64_t v83;
  Swift::String v84;
  void *v85;
  unint64_t v86;
  uint64_t v87;
  void *v88;
  id v89;
  char *v90;
  uint64_t (*v91)(char *, uint64_t, uint64_t);
  uint64_t v92;
  void *v93;
  id v94;
  uint64_t result;
  uint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  uint64_t v105;
  unsigned int (*v106)(char *, uint64_t, uint64_t);
  void (*v107)(char *, char *, uint64_t);
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;

  v105 = a2;
  v108 = a1;
  v112 = sub_1000041D8(&qword_100084810);
  v7 = __chkstk_darwin(v112);
  v98 = (char *)&v96 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v104 = (char *)&v96 - v10;
  v11 = __chkstk_darwin(v9);
  v102 = (char *)&v96 - v12;
  v13 = __chkstk_darwin(v11);
  v100 = (char *)&v96 - v14;
  v15 = __chkstk_darwin(v13);
  v97 = (char *)&v96 - v16;
  v17 = __chkstk_darwin(v15);
  v103 = (char *)&v96 - v18;
  v19 = __chkstk_darwin(v17);
  v101 = (char *)&v96 - v20;
  v21 = __chkstk_darwin(v19);
  v99 = (char *)&v96 - v22;
  __chkstk_darwin(v21);
  v24 = (char *)&v96 - v23;
  v25 = type metadata accessor for Calendar(0);
  v109 = *(_QWORD *)(v25 - 8);
  v110 = v25;
  __chkstk_darwin(v25);
  v27 = (char *)&v96 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for Date(0);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = __chkstk_darwin(v28);
  v32 = (char *)&v96 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = *(uint64_t (**)(void))(*(_QWORD *)v4 + 120);
  v34 = (void *)((uint64_t (*)(uint64_t))v33)(v30);
  v35 = (*(uint64_t (**)(void))(*(_QWORD *)v4 + 144))();
  v36 = Date.timeIntervalSinceReferenceDate.getter(v35);
  v37 = *(void (**)(char *, uint64_t))(v29 + 8);
  v37(v32, v28);
  objc_msgSend(v34, "calculateAstronomicalTimeForLocation:time:altitudeInDegrees:", a3, a4, v36, GEOAlmanacAltitudeSunset);

  v38 = static Calendar.current.getter();
  v111 = v4;
  v39 = v33;
  v40 = (void *)((uint64_t (*)(uint64_t))v33)(v38);
  v41 = objc_msgSend(v40, "sunset");

  if (!v41)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v29 + 56))(v24, 1, 1, v28);
    goto LABEL_25;
  }
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v41);

  v107 = *(void (**)(char *, char *, uint64_t))(v29 + 32);
  v107(v24, v32, v28);
  v40 = *(void **)(v29 + 56);
  ((void (*)(char *, _QWORD, uint64_t, uint64_t))v40)(v24, 0, 1, v28);
  v106 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
  if (v106(v24, 1, v28) == 1)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v42 = Calendar.isDateInYesterday(_:)(v24);
  (*(void (**)(char *, uint64_t))(v109 + 8))(v27, v110);
  v37(v24, v28);
  if ((v42 & 1) != 0)
  {
    v113 = 0;
    v114 = 0xE000000000000000;
    _StringGuts.grow(_:)(44);
    v43 = swift_bridgeObjectRelease(v114);
    v113 = 0xD000000000000019;
    v114 = 0x800000010006E270;
    v44 = v33;
    v45 = (void *)((uint64_t (*)(uint64_t))v33)(v43);
    v46 = objc_msgSend(v45, "nextSunrise");

    if (v46)
    {
      v47 = v99;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v46);

      v48 = 0;
    }
    else
    {
      v48 = 1;
      v47 = v99;
    }
    v55 = 1;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v40)(v47, v48, 1, v28);
    v56._countAndFlagsBits = String.init<A>(describing:)(v47, v112);
    object = v56._object;
    String.append(_:)(v56);
    swift_bridgeObjectRelease(object);
    v58._countAndFlagsBits = 0x73207478656E202CLL;
    v58._object = (void *)0xEF203A7465736E75;
    String.append(_:)(v58);
    v59 = (void *)v39();
    v60 = objc_msgSend(v59, "nextSunset");

    v61 = v101;
    if (v60)
    {
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v60);

      v55 = 0;
    }
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v40)(v61, v55, 1, v28);
    v69 = type metadata accessor for WidgetUtilities();
    v70._countAndFlagsBits = String.init<A>(describing:)(v61, v112);
    v71 = v70._object;
    String.append(_:)(v70);
    swift_bridgeObjectRelease(v71);
    v72 = v114;
    (*(void (**)(unint64_t, unint64_t))(v69 + 80))(v113, v114);
    v73 = swift_bridgeObjectRelease(v72);
    v74 = (void *)((uint64_t (*)(uint64_t))v44)(v73);
    v75 = objc_msgSend(v74, "nextSunrise");

    if (v75)
    {
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v75);

      v76 = v103;
      v77 = (uint64_t (*)(uint64_t, char *, uint64_t))v107;
      v107(v103, v32, v28);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v40)(v76, 0, 1, v28);
      v78 = v106;
      if (v106(v76, 1, v28) != 1)
      {
        v79 = v77(v108, v76, v28);
        v80 = (void *)((uint64_t (*)(uint64_t))v44)(v79);
        v81 = objc_msgSend(v80, "nextSunset");

        if (v81)
        {
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v81);

          v82 = v97;
          v77((uint64_t)v97, v32, v28);
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))v40)(v82, 0, 1, v28);
          if (v78(v82, 1, v28) == 1)
            goto LABEL_29;
          return v77(v105, v82, v28);
        }
LABEL_28:
        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v40)(v97, 1, 1, v28);
LABEL_29:
        __break(1u);
LABEL_30:
        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v40)(v104, 1, 1, v28);
        goto LABEL_31;
      }
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
LABEL_26:
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v40)(v103, 1, 1, v28);
    goto LABEL_27;
  }
  v113 = 0;
  v114 = 0xE000000000000000;
  _StringGuts.grow(_:)(34);
  v49 = swift_bridgeObjectRelease(v114);
  v113 = 0xD000000000000014;
  v114 = 0x800000010006E250;
  v50 = (void *)((uint64_t (*)(uint64_t))v33)(v49);
  v51 = objc_msgSend(v50, "sunrise");

  if (v51)
  {
    v52 = v100;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v51);

    v53 = 0;
    v54 = &WorldClockBaseProvider;
  }
  else
  {
    v53 = 1;
    v54 = &WorldClockBaseProvider;
    v52 = v100;
  }
  v62 = 1;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v40)(v52, v53, 1, v28);
  v63._countAndFlagsBits = String.init<A>(describing:)(v52, v112);
  v64 = v63._object;
  String.append(_:)(v63);
  swift_bridgeObjectRelease(v64);
  v65._countAndFlagsBits = 0x7465736E7573202CLL;
  v65._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v65);
  v66 = (void *)v39();
  v67 = objc_msgSend(v66, *(SEL *)&v54[22].ivar_base_size);

  v68 = v102;
  if (v67)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v67);

    v62 = 0;
  }
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v40)(v68, v62, 1, v28);
  v83 = type metadata accessor for WidgetUtilities();
  v84._countAndFlagsBits = String.init<A>(describing:)(v68, v112);
  v85 = v84._object;
  String.append(_:)(v84);
  swift_bridgeObjectRelease(v85);
  v86 = v114;
  (*(void (**)(unint64_t, unint64_t))(v83 + 80))(v113, v114);
  v87 = swift_bridgeObjectRelease(v86);
  v88 = (void *)((uint64_t (*)(uint64_t))v39)(v87);
  v89 = objc_msgSend(v88, "sunrise");

  if (!v89)
    goto LABEL_30;
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v89);

  v90 = v104;
  v77 = (uint64_t (*)(uint64_t, char *, uint64_t))v107;
  v107(v104, v32, v28);
  ((void (*)(char *, _QWORD, uint64_t, uint64_t))v40)(v90, 0, 1, v28);
  v91 = (uint64_t (*)(char *, uint64_t, uint64_t))v106;
  if (v106(v90, 1, v28) == 1)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v92 = v77(v108, v90, v28);
  v93 = (void *)((uint64_t (*)(uint64_t))v39)(v92);
  v94 = objc_msgSend(v93, *(SEL *)&v54[22].ivar_base_size);

  if (!v94)
  {
LABEL_32:
    result = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v40)(v98, 1, 1, v28);
    goto LABEL_33;
  }
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v94);

  v82 = v98;
  v77((uint64_t)v98, v32, v28);
  ((void (*)(char *, _QWORD, uint64_t, uint64_t))v40)(v82, 0, 1, v28);
  result = v91(v82, 1, v28);
  if ((_DWORD)result != 1)
    return v77(v105, v82, v28);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_100006420@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, double a8@<D0>, double a9@<D1>)
{
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  _BYTE *v33;
  uint64_t v34;
  void (*v35)(uint64_t);
  id v36;
  void *v37;
  int v38;
  _BYTE *v39;
  void (*v40)(void);
  _BYTE *v41;
  void (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, _BYTE *, uint64_t);
  uint64_t v49;
  int *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  void (*v54)(_BYTE *, uint64_t);
  _BYTE v56[4];
  int v57;
  _BYTE *v58;
  _BYTE *v59;
  _BYTE *v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  uint64_t v69;
  _BYTE *v70;

  v69 = a6;
  v66 = a4;
  v67 = a5;
  v64 = a2;
  v65 = a3;
  v62 = a7;
  v63 = a1;
  v12 = sub_1000041D8(&qword_100084810);
  v13 = __chkstk_darwin(v12);
  v68 = &v56[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v13);
  v16 = &v56[-v15];
  v17 = type metadata accessor for Date(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = &v56[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v19);
  v23 = &v56[-v22];
  v24 = sub_1000041D8(&qword_100084840);
  v25 = __chkstk_darwin(v24);
  v70 = &v56[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v27 = __chkstk_darwin(v25);
  v29 = &v56[-v28];
  v30 = __chkstk_darwin(v27);
  v32 = &v56[-v31];
  v33 = &v56[*(int *)(v30 + 48) - v31];
  v34 = (*(uint64_t (**)(_BYTE *, _BYTE *, double, double))(*(_QWORD *)v9 + 184))(&v56[-v31], v33, a8, a9);
  v35 = *(void (**)(uint64_t))(*(_QWORD *)v9 + 144);
  v61 = v23;
  v35(v34);
  v36 = objc_msgSend((id)objc_opt_self(MTUtilities), "widgetOverrideDate");
  if (v36)
  {
    v37 = v36;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v36);

    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v18 + 32))(v16, v21, v17);
    v38 = 1;
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v16, 0, 1, v17);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) != 1)
      goto LABEL_6;
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v16, 1, 1, v17);
  }
  v38 = 0;
LABEL_6:
  v57 = v38;
  sub_1000106A4((uint64_t)v16, &qword_100084810);
  v39 = &v29[*(int *)(v24 + 48)];
  v59 = v29;
  v60 = v39;
  v40 = *(void (**)(void))(v18 + 16);
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v40)(v29, v32, v17);
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v40)(v39, v33, v17);
  v58 = &v70[*(int *)(v24 + 48)];
  v41 = v58;
  v40();
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v40)(v41, v33, v17);
  v42 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 200);
  v43 = v64;
  swift_bridgeObjectRetain(v64);
  v44 = v66;
  swift_bridgeObjectRetain(v66);
  v45 = v69;
  swift_bridgeObjectRetain(v69);
  v47 = v67;
  v46 = (uint64_t)v68;
  v42(v67, v45);
  sub_1000106A4((uint64_t)v32, &qword_100084840);
  v48 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v18 + 32);
  v49 = v62;
  v48(v62, v61, v17);
  v50 = (int *)type metadata accessor for WorldClockCity(0);
  *(_BYTE *)(v49 + v50[5]) = v57;
  v51 = (_QWORD *)(v49 + v50[6]);
  *v51 = v63;
  v51[1] = v43;
  v52 = (_QWORD *)(v49 + v50[7]);
  *v52 = v65;
  v52[1] = v44;
  v53 = (_QWORD *)(v49 + v50[8]);
  *v53 = v47;
  v53[1] = v45;
  v48(v49 + v50[9], v59, v17);
  v48(v49 + v50[10], v58, v17);
  sub_10000D9B4(v46, v49 + v50[11]);
  *(_BYTE *)(v49 + v50[12]) = 0;
  *(_BYTE *)(v49 + v50[13]) = 0;
  v54 = *(void (**)(_BYTE *, uint64_t))(v18 + 8);
  v54(v70, v17);
  return ((uint64_t (*)(_BYTE *, uint64_t))v54)(v60, v17);
}

uint64_t sub_1000067FC@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, char a13, char a14)
{
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  int *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t result;

  v21 = type metadata accessor for Date(0);
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32);
  v22(a9, a1, v21);
  v23 = (int *)type metadata accessor for WorldClockCity(0);
  *(_BYTE *)(a9 + v23[5]) = a2;
  v24 = (_QWORD *)(a9 + v23[6]);
  *v24 = a3;
  v24[1] = a4;
  v25 = (_QWORD *)(a9 + v23[7]);
  *v25 = a5;
  v25[1] = a6;
  v26 = (_QWORD *)(a9 + v23[8]);
  *v26 = a7;
  v26[1] = a8;
  v22(a9 + v23[9], a10, v21);
  v22(a9 + v23[10], a11, v21);
  result = sub_10000D9B4(a12, a9 + v23[11]);
  *(_BYTE *)(a9 + v23[12]) = a13;
  *(_BYTE *)(a9 + v23[13]) = a14;
  return result;
}

uint64_t sub_100006934@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  char *v28;
  uint64_t v29;
  uint64_t (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  Swift::String v34;
  uint64_t v35;
  Swift::String v36;
  void *object;
  uint64_t v38;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  Swift::String v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[2];

  v45 = a3;
  v5 = type metadata accessor for Date(0);
  v46 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v40 - v9;
  v11 = type metadata accessor for Calendar(0);
  v41 = *(_QWORD *)(v11 - 8);
  v42 = v11;
  __chkstk_darwin(v11);
  v40 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000041D8(&qword_100084848);
  __chkstk_darwin(v13);
  v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TimeZone(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)&v40 - v21;
  v43._countAndFlagsBits = a1;
  v43._object = a2;
  TimeZone.init(identifier:)(a1, a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    sub_1000106A4((uint64_t)v15, &qword_100084848);
    v23 = type metadata accessor for WidgetUtilities();
    v47[0] = 0;
    v47[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease(v47[1]);
    v47[0] = 0xD000000000000027;
    v47[1] = 0x800000010006E290;
    String.append(_:)(v43);
    v24 = v47[1];
    (*(void (**)(_QWORD, _QWORD))(v23 + 80))(v47[0], v47[1]);
    swift_bridgeObjectRelease(v24);
    v25 = 1;
    v26 = v45;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v22, v15, v16);
    v27 = objc_msgSend((id)objc_opt_self(NSCalendar), "currentCalendar");
    v28 = v40;
    static Calendar._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v20, v22, v16);
    v29 = Calendar.timeZone.setter(v20);
    Date.init()(v29);
    Calendar.startOfDay(for:)(v8);
    v30 = *(uint64_t (**)(char *, uint64_t))(v46 + 8);
    v31 = v30(v8, v5);
    v44 = v5;
    v32 = v45;
    Date.addingTimeInterval(_:)(v31, 86400.0);
    v30(v10, v44);
    v33 = type metadata accessor for WidgetUtilities();
    v47[0] = 0;
    v47[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease(v47[1]);
    strcpy((char *)v47, "For timezone: ");
    HIBYTE(v47[1]) = -18;
    String.append(_:)(v43);
    v34._object = (void *)0x800000010006E2C0;
    v34._countAndFlagsBits = 0xD000000000000020;
    String.append(_:)(v34);
    v35 = sub_10000D36C(&qword_100084830, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v36._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v44, v35);
    object = v36._object;
    String.append(_:)(v36);
    swift_bridgeObjectRelease(object);
    v38 = v47[1];
    (*(void (**)(_QWORD, _QWORD))(v33 + 80))(v47[0], v47[1]);
    swift_bridgeObjectRelease(v38);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v28, v42);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v22, v16);
    v25 = 0;
    v26 = v32;
    v5 = v44;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 56))(v26, v25, 1, v5);
}

unint64_t sub_100006D20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  void *object;

  _StringGuts.grow(_:)(37);
  v1 = swift_bridgeObjectRelease(0xE000000000000000);
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 96))(v1);
  v3 = type metadata accessor for WorldClockCity(0);
  v4._countAndFlagsBits = Array.description.getter(v2, v3);
  object = v4._object;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(object);
  return 0xD000000000000023;
}

uint64_t sub_100006DCC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));

  return v0;
}

uint64_t sub_100006DF0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t sub_100006E1C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 208))();
}

uint64_t sub_100006E44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v0 = type metadata accessor for UUID(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin();
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = UUID.init()(v2);
  v6 = UUID.uuidString.getter(v5);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  return v6;
}

uint64_t sub_100006ED4()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for WorldClockCity(0) + 20));
}

uint64_t sub_100006EF4(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for WorldClockCity(0);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_100006F20())()
{
  type metadata accessor for WorldClockCity(0);
  return nullsub_1;
}

uint64_t sub_100006F48()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for WorldClockCity(0) + 24));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t sub_100006F84()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for WorldClockCity(0) + 28));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t sub_100006FC0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for WorldClockCity(0) + 32));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t sub_100006FFC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for WorldClockCity(0) + 36);
  v4 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_100007044@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for WorldClockCity(0) + 40);
  v4 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_10000708C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for WorldClockCity(0) + 44);
  return sub_10000C91C(v3, a1);
}

uint64_t sub_1000070BC()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for WorldClockCity(0) + 48));
}

uint64_t sub_1000070DC(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for WorldClockCity(0);
  *(_BYTE *)(v1 + *(int *)(result + 48)) = a1;
  return result;
}

uint64_t (*sub_100007108())()
{
  type metadata accessor for WorldClockCity(0);
  return nullsub_1;
}

uint64_t sub_100007130()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for WorldClockCity(0) + 52));
}

uint64_t sub_100007150(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for WorldClockCity(0);
  *(_BYTE *)(v1 + *(int *)(result + 52)) = a1;
  return result;
}

uint64_t (*sub_10000717C())()
{
  type metadata accessor for WorldClockCity(0);
  return nullsub_1;
}

void *sub_1000071A4()
{
  return &unk_10006B118;
}

uint64_t sub_1000071B0()
{
  return 11565;
}

void *sub_1000071BC()
{
  return &unk_10006B128;
}

uint64_t sub_1000071C8()
{
  return 0;
}

BOOL sub_1000071D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, char *, uint64_t);
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  _BOOL8 v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;

  v1 = type metadata accessor for WorldClockCity(0);
  v2 = __chkstk_darwin(v1);
  v85 = (char *)&v66 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __chkstk_darwin(v2);
  v79 = (char *)&v66 - v5;
  v6 = __chkstk_darwin(v4);
  v76 = (uint64_t)&v66 - v7;
  __chkstk_darwin(v6);
  v75 = (uint64_t)&v66 - v8;
  v9 = type metadata accessor for Date(0);
  v10 = __chkstk_darwin(v9);
  v84 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v83 = (char *)&v66 - v13;
  v14 = __chkstk_darwin(v12);
  v15 = __chkstk_darwin(v14);
  v77 = (char *)&v66 - v16;
  v17 = __chkstk_darwin(v15);
  v74 = (char *)&v66 - v18;
  v19 = __chkstk_darwin(v17);
  v86 = (uint64_t)&v66 - v20;
  v21 = __chkstk_darwin(v19);
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v66 - v23;
  v25 = __chkstk_darwin(v22);
  v27 = (char *)&v66 - v26;
  v28 = __chkstk_darwin(v25);
  v30 = (char *)&v66 - v29;
  v31 = __chkstk_darwin(v28);
  v33 = (char *)&v66 - v32;
  v34 = __chkstk_darwin(v31);
  v36 = (char *)&v66 - v35;
  v37 = __chkstk_darwin(v34);
  v39 = (char *)&v66 - v38;
  __chkstk_darwin(v37);
  if ((*(_BYTE *)(v0 + *(int *)(v1 + 48)) & 1) == 0)
  {
    v67 = v42;
    v68 = v41;
    v45 = v0;
    v81 = v27;
    v78 = (uint64_t)&v66 - v40;
    v46 = v43;
    sub_10002197C(-2, (uint64_t)&v66 - v40);
    sub_10002197C(-1, (uint64_t)v39);
    v73 = 1;
    v80 = v36;
    sub_10002197C(1, (uint64_t)v36);
    v70 = v33;
    sub_10002197C(2, (uint64_t)v33);
    v66 = v1;
    sub_10002197C(-2, (uint64_t)v30);
    v47 = (uint64_t)v81;
    sub_10002197C(-1, (uint64_t)v81);
    v82 = v24;
    sub_10002197C(1, (uint64_t)v24);
    v72 = v46;
    sub_10002197C(2, v46);
    v71 = v30;
    v48 = sub_10000783C(v78, (uint64_t)v30, v0);
    v49 = v75;
    sub_10000DF30(v45, v75, type metadata accessor for WorldClockCity);
    v50 = v67;
    v51 = *(void (**)(uint64_t, char *, uint64_t))(v67 + 16);
    v69 = v39;
    v51(v86, v39, v9);
    v52 = (uint64_t)v74;
    v51((uint64_t)v74, (char *)v47, v9);
    if (!v48)
      v73 = sub_10000783C(v86, v52, v49);
    v53 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
    v53(v52, v9);
    v53(v86, v9);
    sub_10000D330(v49, type metadata accessor for WorldClockCity);
    v54 = v76;
    sub_10000DF30(v45, v76, type metadata accessor for WorldClockCity);
    v55 = (uint64_t)v79;
    v56 = (uint64_t)v77;
    if (v73)
    {
      sub_10000D330(v54, type metadata accessor for WorldClockCity);
      sub_10000DF30(v45, v55, type metadata accessor for WorldClockCity);
      v51(v56, v80, v9);
      v57 = v68;
      v51(v68, v82, v9);
      v58 = (uint64_t)v85;
      v59 = (uint64_t)v83;
    }
    else
    {
      v60 = sub_10000783C(v54 + *(int *)(v66 + 36), v54 + *(int *)(v66 + 40), v54);
      sub_10000D330(v54, type metadata accessor for WorldClockCity);
      sub_10000DF30(v45, v55, type metadata accessor for WorldClockCity);
      v51(v56, v80, v9);
      v57 = v68;
      v51(v68, v82, v9);
      v58 = (uint64_t)v85;
      v59 = (uint64_t)v83;
      if (!v60)
      {
        v64 = sub_10000783C(v56, v57, v55);
        v53(v57, v9);
        v53(v56, v9);
        sub_10000D330(v55, type metadata accessor for WorldClockCity);
        sub_10000DF30(v45, v58, type metadata accessor for WorldClockCity);
        v61 = v70;
        v51(v59, v70, v9);
        v62 = (uint64_t)v84;
        v51((uint64_t)v84, (char *)v72, v9);
        v44 = v64 || sub_10000783C(v59, v62, v58);
        v63 = v72;
        goto LABEL_13;
      }
    }
    v53(v57, v9);
    v53(v56, v9);
    sub_10000D330(v55, type metadata accessor for WorldClockCity);
    sub_10000DF30(v45, v58, type metadata accessor for WorldClockCity);
    v61 = v70;
    v51(v59, v70, v9);
    v62 = (uint64_t)v84;
    v63 = v72;
    v51((uint64_t)v84, (char *)v72, v9);
    v44 = 1;
LABEL_13:
    v53(v62, v9);
    v53(v59, v9);
    sub_10000D330(v58, type metadata accessor for WorldClockCity);
    v53(v63, v9);
    v53((uint64_t)v82, v9);
    v53((uint64_t)v81, v9);
    v53((uint64_t)v71, v9);
    v53((uint64_t)v61, v9);
    v53((uint64_t)v80, v9);
    v53((uint64_t)v69, v9);
    v53(v78, v9);
    return v44;
  }
  return 1;
}

BOOL sub_10000783C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  _BOOL8 v20;
  void (*v21)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;

  v24 = a2;
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = ((uint64_t (*)(void))__chkstk_darwin)();
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v23 - v11;
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v23 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v23 - v16;
  v18 = Date.compare(_:)(a3);
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v19(v17, a1, v5);
  v19(v15, a3, v5);
  if (v18)
    v20 = Date.compare(_:)(v15) == -1;
  else
    v20 = 1;
  v21 = *(void (**)(char *, uint64_t))(v6 + 8);
  v21(v15, v5);
  v21(v17, v5);
  v19(v12, v24, v5);
  v19(v9, a3, v5);
  if (v20)
    v20 = Date.compare(_:)(v9) == 1;
  v21(v9, v5);
  v21(v12, v5);
  return v20;
}

void sub_1000079D4(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_100007A30(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100007AF0 + 4 * byte_10006B0E8[a2]))(0x6D72616C41);
}

uint64_t sub_100007AF0(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6D72616C41 && v1 == 0xE500000000000000)
    v2 = 1;
  else
    v2 = ((uint64_t (*)(void))_stringCompareWithSmolCheck(_:_:expecting:))();
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE500000000000000);
  return v2 & 1;
}

uint64_t sub_100007C14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t (*v37)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;

  v1 = v0;
  v50 = type metadata accessor for Calendar(0);
  v2 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v4 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v51 - 8);
  v6 = __chkstk_darwin(v51);
  v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v47 - v10;
  __chkstk_darwin(v9);
  v52 = (char *)&v47 - v12;
  v13 = sub_1000041D8(&qword_100084848);
  __chkstk_darwin(v13);
  v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = type metadata accessor for TimeZone(0);
  v16 = *(_QWORD *)(v54 - 8);
  v17 = __chkstk_darwin(v54);
  v19 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v53 = (char *)&v47 - v20;
  v21 = (int *)type metadata accessor for WorldClockCity(0);
  if (*(_BYTE *)(v1 + v21[12]) == 1)
  {
    v55 = 11565;
    v56 = 0xE200000000000000;
LABEL_7:
    v23 = sub_10000D9FC();
    return Text.init<A>(_:)(&v55, &type metadata for String, v23);
  }
  if (*(_BYTE *)(v1 + v21[13]) == 1)
  {
LABEL_6:
    v55 = 0;
    v56 = 0xE000000000000000;
    goto LABEL_7;
  }
  TimeZone.init(identifier:)(*(_QWORD *)(v1 + v21[8]), *(_QWORD *)(v1 + v21[8] + 8));
  v22 = v54;
  if ((*(unsigned int (**)(char *, uint64_t))(v16 + 48))(v15, 1) == 1)
  {
    sub_1000106A4((uint64_t)v15, &qword_100084848);
    goto LABEL_6;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v53, v15, v22);
  v26 = v51;
  v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v11, v1, v51);
  Date.init()(v27);
  v49 = TimeZone.secondsFromGMT(for:)(v8);
  v28 = *(void (**)(char *, uint64_t))(v5 + 8);
  v29 = v26;
  v30 = v28;
  v31 = ((uint64_t (*)(char *, uint64_t))v28)(v8, v29);
  v32 = static TimeZone.current.getter(v31);
  Date.init()(v32);
  v33 = TimeZone.secondsFromGMT(for:)(v8);
  v30(v8, v29);
  v48 = *(uint64_t (**)(char *, uint64_t))(v16 + 8);
  v34 = v48(v19, v54);
  if (__OFSUB__(v49, v33))
  {
    __break(1u);
  }
  else
  {
    v35 = v52;
    Date.addingTimeInterval(_:)(v34, (double)(v49 - v33));
    v36 = ((uint64_t (*)(char *, uint64_t))v30)(v11, v29);
    static Calendar.current.getter(v36);
    Calendar.startOfDay(for:)(v1);
    v37 = *(uint64_t (**)(char *, uint64_t))(v2 + 8);
    v38 = v50;
    v39 = v37(v4, v50);
    static Calendar.current.getter(v39);
    Calendar.startOfDay(for:)(v35);
    v37(v4, v38);
    v33 = Date.compare(_:)(v8);
    v30(v8, v29);
    v30(v11, v29);
    if (v33 == -1)
    {
      v42 = LocalizedStringKey.init(stringLiteral:)(0x776F72726F6D6F54, 0xE800000000000000);
      v24 = Text.init(_:tableName:bundle:comment:)(v42);
      v30(v52, v29);
      v43 = v53;
      v44 = v54;
LABEL_17:
      v48(v43, v44);
      return v24;
    }
    v40 = v54;
    if (!v33)
    {
      v41 = LocalizedStringKey.init(stringLiteral:)(0x7961646F54, 0xE500000000000000);
      v24 = Text.init(_:tableName:bundle:comment:)(v41);
      v30(v52, v29);
LABEL_16:
      v43 = v53;
      v44 = v40;
      goto LABEL_17;
    }
    if (v33 == 1)
    {
      v45 = LocalizedStringKey.init(stringLiteral:)(0x6164726574736559, 0xE900000000000079);
      v24 = Text.init(_:tableName:bundle:comment:)(v45);
      v30(v52, v29);
      goto LABEL_16;
    }
  }
  type metadata accessor for ComparisonResult();
  v55 = v33;
  result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v46, &v55, v46, &type metadata for Int);
  __break(1u);
  return result;
}

uint64_t sub_100008130@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = sub_1000041D8(&qword_100084848);
  __chkstk_darwin(v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for WorldClockCity(0);
  TimeZone.init(identifier:)(*(_QWORD *)(v1 + *(int *)(v6 + 32)), *(_QWORD *)(v1 + *(int *)(v6 + 32) + 8));
  v7 = type metadata accessor for TimeZone(0);
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v7) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(a1, v5, v7);
  static TimeZone.autoupdatingCurrent.getter();
  return sub_1000106A4((uint64_t)v5, &qword_100084848);
}

void sub_100008208(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  int *v17;
  uint64_t (*v18)(char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  Class v26;
  id v27;
  id v28;
  Class isa;

  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000041D8(&qword_100084848);
  __chkstk_darwin(v7);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for TimeZone(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v28 - v15;
  v17 = (int *)type metadata accessor for WorldClockCity(0);
  if ((*(_BYTE *)(v1 + v17[12]) & 1) == 0 && (*(_BYTE *)(v1 + v17[13]) & 1) == 0)
  {
    TimeZone.init(identifier:)(*(_QWORD *)(v1 + v17[8]), *(_QWORD *)(v1 + v17[8] + 8));
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    {
      sub_1000106A4((uint64_t)v9, &qword_100084848);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v16, v9, v10);
      v28 = (id)objc_opt_self(MTUtilities);
      Date.init()(v28);
      isa = Date._bridgeToObjectiveC()().super.isa;
      v18 = *(uint64_t (**)(char *, uint64_t))(v4 + 8);
      v19 = v18(v6, v3);
      Date.init()(v19);
      v20 = TimeZone.secondsFromGMT(for:)(v6);
      v21 = v18(v6, v3);
      v22 = static TimeZone.current.getter(v21);
      Date.init()(v22);
      v23 = TimeZone.secondsFromGMT(for:)(v6);
      v18(v6, v3);
      v24 = *(void (**)(char *, uint64_t))(v11 + 8);
      v24(v14, v10);
      v25 = v20 - v23;
      if (__OFSUB__(v20, v23))
      {
        __break(1u);
      }
      else
      {
        v26 = isa;
        v27 = objc_msgSend(v28, "dayAndTimeZoneOffsetStringFromDate:withTimeZoneOffset:timeZoneAbbreviation:spaceBeforeTimeDesignator:hoursOnly:numericOnly:", isa, v25, 0, 0, 1, a1 & 1);

        if (v27)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(v27);

          v24(v16, v10);
          return;
        }
      }
      __break(1u);
    }
  }
}

uint64_t sub_1000084A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t);
  BOOL v24;
  uint64_t v25;
  uint64_t v26;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000041D8(&qword_100084848);
  __chkstk_darwin(v5);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TimeZone(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v26 - v13;
  v15 = type metadata accessor for WorldClockCity(0);
  TimeZone.init(identifier:)(*(_QWORD *)(v0 + *(int *)(v15 + 32)), *(_QWORD *)(v0 + *(int *)(v15 + 32) + 8));
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_1000106A4((uint64_t)v7, &qword_100084848);
    return 0;
  }
  v17 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(v14, v7, v8);
  Date.init()(v17);
  v18 = TimeZone.secondsFromGMT(for:)(v4);
  v19 = *(uint64_t (**)(char *, uint64_t))(v2 + 8);
  v20 = v19(v4, v1);
  v21 = static TimeZone.current.getter(v20);
  Date.init()(v21);
  v22 = TimeZone.secondsFromGMT(for:)(v4);
  v19(v4, v1);
  v23 = *(uint64_t (**)(char *, uint64_t))(v9 + 8);
  result = v23(v12, v8);
  v24 = __OFSUB__(v18, v22);
  v25 = v18 - v22;
  if (v24)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }
  if (v25 < 0)
  {
    v24 = __OFSUB__(0, v25);
    v25 = -v25;
    if (v24)
      goto LABEL_9;
  }
  v23(v14, v8);
  return v25 < 3600;
}

BOOL sub_100008698()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100008208(1);
  v1 = v0;
  v2 = String.count.getter();
  swift_bridgeObjectRelease(v1);
  return v2 > 0;
}

uint64_t sub_1000086D4@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v2 = (int *)type metadata accessor for WorldClockCity(0);
  v3 = a1 + v2[11];
  Date.init()(v2);
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v6(a1, v3, v4);
  v6(a1 + v2[9], v3, v4);
  v6(a1 + v2[10], v3, v4);
  result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v3, 0, 1, v4);
  *(_BYTE *)(a1 + v2[5]) = 0;
  v8 = (_QWORD *)(a1 + v2[6]);
  *v8 = 11565;
  v8[1] = 0xE200000000000000;
  v9 = (_QWORD *)(a1 + v2[7]);
  *v9 = 11565;
  v9[1] = 0xE200000000000000;
  v10 = (_QWORD *)(a1 + v2[8]);
  *v10 = 11565;
  v10[1] = 0xE200000000000000;
  *(_BYTE *)(a1 + v2[12]) = 1;
  *(_BYTE *)(a1 + v2[13]) = 0;
  return result;
}

uint64_t sub_1000087CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  Swift::String v4;
  int *v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t *v11;
  uint64_t v12;
  void *v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t *v16;
  uint64_t v17;
  void *v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  void *object;
  Swift::String v25;
  Swift::String v26;
  void *v27;
  Swift::String v28;
  Swift::String v29;
  void *v30;
  Swift::String v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  Swift::String v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD v40[2];

  v1 = sub_1000041D8(&qword_100084810);
  __chkstk_darwin(v1);
  v3 = (char *)v40 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40[0] = 0;
  v40[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(148);
  v4._countAndFlagsBits = 0xD000000000000021;
  v4._object = (void *)0x800000010006E300;
  String.append(_:)(v4);
  v5 = (int *)type metadata accessor for WorldClockCity(0);
  v6 = (uint64_t *)(v0 + v5[6]);
  v7 = *v6;
  v8 = (void *)v6[1];
  swift_bridgeObjectRetain(v8);
  v9._countAndFlagsBits = v7;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(v8);
  v10._object = (void *)0x800000010006E330;
  v10._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v10);
  v11 = (uint64_t *)(v0 + v5[7]);
  v12 = *v11;
  v13 = (void *)v11[1];
  swift_bridgeObjectRetain(v13);
  v14._countAndFlagsBits = v12;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(v13);
  v15._countAndFlagsBits = 0x6F7A656D6974202CLL;
  v15._object = (void *)0xEB000000003A656ELL;
  String.append(_:)(v15);
  v16 = (uint64_t *)(v0 + v5[8]);
  v17 = *v16;
  v18 = (void *)v16[1];
  swift_bridgeObjectRetain(v18);
  v19._countAndFlagsBits = v17;
  v19._object = v18;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(v18);
  v20._countAndFlagsBits = 0x7369726E7573202CLL;
  v20._object = (void *)0xEF203A6574614465;
  String.append(_:)(v20);
  v21 = type metadata accessor for Date(0);
  v22 = sub_10000D36C(&qword_100084830, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v21, v22);
  object = v23._object;
  String.append(_:)(v23);
  swift_bridgeObjectRelease(object);
  v25._countAndFlagsBits = 0x7465736E7573202CLL;
  v25._object = (void *)0xEE00203A65746144;
  String.append(_:)(v25);
  v26._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v21, v22);
  v27 = v26._object;
  String.append(_:)(v26);
  swift_bridgeObjectRelease(v27);
  v28._countAndFlagsBits = 0x694D7478656E202CLL;
  v28._object = (void *)0xEF3A746867696E64;
  String.append(_:)(v28);
  sub_10000C91C(v0 + v5[11], (uint64_t)v3);
  v29._countAndFlagsBits = String.init<A>(describing:)(v3, v1);
  v30 = v29._object;
  String.append(_:)(v29);
  swift_bridgeObjectRelease(v30);
  v31._countAndFlagsBits = 0xD000000000000011;
  v31._object = (void *)0x800000010006E350;
  String.append(_:)(v31);
  if (*(_BYTE *)(v0 + v5[12]))
    v32 = 1702195828;
  else
    v32 = 0x65736C6166;
  if (*(_BYTE *)(v0 + v5[12]))
    v33 = 0xE400000000000000;
  else
    v33 = 0xE500000000000000;
  v34 = v33;
  String.append(_:)(*(Swift::String *)&v32);
  swift_bridgeObjectRelease(v33);
  v35._countAndFlagsBits = 0x6E616C427369202CLL;
  v35._object = (void *)0xEB00000000203A6BLL;
  String.append(_:)(v35);
  if (*(_BYTE *)(v0 + v5[13]))
    v36 = 1702195828;
  else
    v36 = 0x65736C6166;
  if (*(_BYTE *)(v0 + v5[13]))
    v37 = 0xE400000000000000;
  else
    v37 = 0xE500000000000000;
  v38 = v37;
  String.append(_:)(*(Swift::String *)&v36);
  swift_bridgeObjectRelease(v37);
  return v40[0];
}

void sub_100008AFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = v1;
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000041D8(&qword_100084810);
  __chkstk_darwin(v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10000D36C(&qword_100084858, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(a1, v4, v11);
  v12 = (int *)type metadata accessor for WorldClockCity(0);
  Hasher._combine(_:)(*(_BYTE *)(v1 + v12[5]));
  v13 = (uint64_t *)(v1 + v12[6]);
  v14 = *v13;
  v15 = v13[1];
  swift_bridgeObjectRetain(v15);
  String.hash(into:)(a1, v14, v15);
  swift_bridgeObjectRelease(v15);
  v16 = (uint64_t *)(v2 + v12[7]);
  v17 = *v16;
  v18 = v16[1];
  swift_bridgeObjectRetain(v18);
  String.hash(into:)(a1, v17, v18);
  swift_bridgeObjectRelease(v18);
  v19 = (uint64_t *)(v2 + v12[8]);
  v20 = *v19;
  v21 = v19[1];
  swift_bridgeObjectRetain(v21);
  String.hash(into:)(a1, v20, v21);
  swift_bridgeObjectRelease(v21);
  dispatch thunk of Hashable.hash(into:)(a1, v4, v11);
  dispatch thunk of Hashable.hash(into:)(a1, v4, v11);
  sub_10000C91C(v2 + v12[11], (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)(a1, v4, v11);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  Hasher._combine(_:)(*(_BYTE *)(v2 + v12[12]));
  Hasher._combine(_:)(*(_BYTE *)(v2 + v12[13]));
}

Swift::Int sub_100008D58()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  sub_100008AFC((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t sub_100008D94@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = UUID.init()(v4);
  v8 = UUID.uuidString.getter(v7);
  v10 = v9;
  result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  *a1 = v8;
  a1[1] = v10;
  return result;
}

Swift::Int sub_100008E28(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  sub_100008AFC((uint64_t)v2);
  return Hasher._finalize()();
}

uint64_t sub_100008E60()
{
  return sub_1000087CC();
}

uint64_t sub_100008E78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  Date.init()(a1);
  v3 = type metadata accessor for DateTimeEntry(0);
  result = static TimeZone.current.getter(v3);
  *(_BYTE *)(a2 + *(int *)(v3 + 24)) = 1;
  return result;
}

uint64_t sub_100008EC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v8 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a4, a1, v8);
  v9 = type metadata accessor for DateTimeEntry(0);
  v10 = a4 + *(int *)(v9 + 20);
  v11 = type metadata accessor for TimeZone(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10, a2, v11);
  *(_BYTE *)(a4 + *(int *)(v9 + 24)) = a3;
  return result;
}

uint64_t sub_100008F58(uint64_t a1, void (*a2)(char *))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v3 = type metadata accessor for DateTimeEntry(0);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = Date.init()(v4);
  static TimeZone.current.getter(v7);
  v6[*(int *)(v3 + 24)] = 0;
  a2(v6);
  return sub_10000D330((uint64_t)v6, type metadata accessor for DateTimeEntry);
}

uint64_t sub_100008FFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  Date.init()(a1);
  v3 = type metadata accessor for DateTimeEntry(0);
  result = static TimeZone.current.getter(v3);
  *(_BYTE *)(a2 + *(int *)(v3 + 24)) = 0;
  return result;
}

uint64_t sub_10000903C(uint64_t a1, void (*a2)(char *))
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  Swift::String v22;
  void *object;
  unint64_t v24;
  unint64_t v26;
  unint64_t v27;

  v3 = type metadata accessor for TimelineReloadPolicy(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000041D8(&qword_100084860);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000041D8(&qword_100084868);
  v11 = type metadata accessor for DateTimeEntry(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 72);
  v14 = *(unsigned __int8 *)(v12 + 80);
  v15 = (v14 + 32) & ~v14;
  v16 = swift_allocObject(v10, v15 + v13, v14 | 7);
  *(_OWORD *)(v16 + 16) = xmmword_10006B090;
  v17 = Date.init()(v16);
  v18 = static TimeZone.current.getter(v17);
  *(_BYTE *)(v16 + v15 + *(int *)(v11 + 24)) = 0;
  static TimelineReloadPolicy.never.getter(v18);
  v19 = sub_10000D36C(&qword_100084870, type metadata accessor for DateTimeEntry, (uint64_t)&unk_10006B3A8);
  Timeline.init(entries:policy:)(v16, v5, v11, v19);
  a2(v9);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v20 = type metadata accessor for WidgetUtilities();
  v26 = 0;
  v27 = 0xE000000000000000;
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease(v27);
  v26 = 0xD000000000000012;
  v27 = 0x800000010006E160;
  v21 = sub_100022220();
  v22._countAndFlagsBits = sub_1000223B8(v21);
  object = v22._object;
  String.append(_:)(v22);
  swift_bridgeObjectRelease(object);
  v24 = v27;
  (*(void (**)(unint64_t, unint64_t))(v20 + 80))(v26, v27);
  return swift_bridgeObjectRelease(v24);
}

uint64_t sub_100009234()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 80))();
}

uint64_t sub_10000925C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 88))();
}

uint64_t sub_100009284()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 96))();
}

uint64_t sub_1000092AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(async function pointer to TimelineProvider.relevances()[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_100010730;
  return TimelineProvider.relevances()(a1, a2, a3);
}

uint64_t sub_100009318(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(async function pointer to TimelineProvider.relevance()[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_100010730;
  return TimelineProvider.relevance()(a1, a2, a3);
}

uint64_t sub_100009384@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DateTimeEntry(0) + 20);
  v4 = type metadata accessor for TimeZone(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_1000093CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DateTimeEntry(0) + 20);
  v4 = type metadata accessor for TimeZone(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*sub_100009414())()
{
  type metadata accessor for DateTimeEntry(0);
  return nullsub_1;
}

uint64_t sub_10000943C()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for DateTimeEntry(0) + 24));
}

uint64_t sub_10000945C(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for DateTimeEntry(0);
  *(_BYTE *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*sub_100009488())()
{
  type metadata accessor for DateTimeEntry(0);
  return nullsub_1;
}

unint64_t sub_1000094B0()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  void *object;

  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease(0xE000000000000000);
  type metadata accessor for DateTimeEntry(0);
  v0 = type metadata accessor for TimeZone(0);
  v1 = sub_10000D36C(&qword_100084878, (uint64_t (*)(uint64_t))&type metadata accessor for TimeZone, (uint64_t)&protocol conformance descriptor for TimeZone);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v0, v1);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  return 0xD00000000000001DLL;
}

uint64_t sub_10000956C()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for AlarmDataProvider();
  v1 = swift_allocObject(v0, 56, 7);
  sub_10000A224();
  return v1;
}

uint64_t sub_1000095A0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_allocObject(v0, 56, 7);
  sub_10000A224();
  return v1;
}

uint64_t sub_1000095D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;

  Date.init()(a1);
  v3 = (int *)type metadata accessor for AlarmEntry(0);
  v4 = a2 + v3[5];
  v5 = type metadata accessor for Date(0);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v6)(a2 + v3[6], 1, 1, v5);
  *(_BYTE *)(a2 + v3[7]) = 0;
  v8 = v3[8];
  v9 = (_QWORD *)(a2 + v3[9]);
  *v9 = 0;
  v9[1] = 0;
  v10 = (_QWORD *)(a2 + v3[10]);
  *v10 = 0;
  v10[1] = 0;
  v11 = (_QWORD *)(a2 + v3[11]);
  *v11 = 0;
  v11[1] = 0;
  v12 = (_QWORD *)(a2 + v3[12]);
  *v12 = 0;
  v12[1] = 0;
  *(_BYTE *)(a2 + v3[13]) = 0;
  *(_BYTE *)(a2 + v3[14]) = 0;
  v13 = (_QWORD *)(a2 + v3[15]);
  *v13 = 0;
  v13[1] = 0;
  *(_BYTE *)(a2 + v3[16]) = 0;
  *(_BYTE *)(a2 + v3[17]) = 0;
  *(_BYTE *)(a2 + v8) = 1;
  return result;
}

uint64_t sub_1000096C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19, char a20)
{
  uint64_t v26;
  int *v27;
  uint64_t result;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;

  v26 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(a9, a1, v26);
  v27 = (int *)type metadata accessor for AlarmEntry(0);
  sub_10000D9B4(a2, a9 + v27[5]);
  result = sub_10000D9B4(a3, a9 + v27[6]);
  *(_BYTE *)(a9 + v27[7]) = a4;
  *(_BYTE *)(a9 + v27[8]) = a5;
  v29 = (_QWORD *)(a9 + v27[9]);
  *v29 = a6;
  v29[1] = a7;
  v30 = (_QWORD *)(a9 + v27[10]);
  *v30 = a8;
  v30[1] = a10;
  v31 = (_QWORD *)(a9 + v27[11]);
  *v31 = a11;
  v31[1] = a12;
  v32 = (_QWORD *)(a9 + v27[12]);
  *v32 = a13;
  v32[1] = a14;
  *(_BYTE *)(a9 + v27[13]) = a15;
  *(_BYTE *)(a9 + v27[14]) = a16;
  v33 = (_QWORD *)(a9 + v27[15]);
  *v33 = a17;
  v33[1] = a18;
  *(_BYTE *)(a9 + v27[16]) = a19;
  *(_BYTE *)(a9 + v27[17]) = a20;
  return result;
}

uint64_t sub_100009848(uint64_t a1, void (*a2)(char *), uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v6 = type metadata accessor for AlarmEntry(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for WidgetUtilities();
  v10 = (*(uint64_t (**)(unint64_t, unint64_t))(v9 + 80))(0xD00000000000001FLL, 0x800000010006E390);
  (*(void (**)(uint64_t))(*(_QWORD *)a4 + 224))(v10);
  a2(v8);
  return sub_10000D330((uint64_t)v8, type metadata accessor for AlarmEntry);
}

uint64_t sub_100009914(uint64_t a1, void (*a2)(char *), uint64_t a3, id *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  Swift::String v37;
  void *object;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v43;
  char *v44;
  uint64_t (*v45)(unint64_t, unint64_t);
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  void (*v54)(char *);
  unint64_t v55;
  unint64_t v56;

  v53 = a3;
  v54 = a2;
  v5 = type metadata accessor for TimelineReloadPolicy(0);
  __chkstk_darwin(v5);
  v52 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000041D8(&qword_100084810);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v43 - v11;
  v13 = type metadata accessor for Date(0);
  v47 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v44 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000041D8(&qword_100084880);
  v50 = *(_QWORD *)(v15 - 8);
  v51 = v15;
  __chkstk_darwin(v15);
  v49 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for AlarmEntry(0);
  v17 = *(_QWORD *)(v46 - 8);
  v18 = __chkstk_darwin(v46);
  v20 = (char *)&v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)&v43 - v21;
  v45 = *(uint64_t (**)(unint64_t, unint64_t))(type metadata accessor for WidgetUtilities() + 80);
  v23 = v45(0xD00000000000001FLL, 0x800000010006E3B0);
  (*((void (**)(uint64_t))*a4 + 28))(v23);
  v48 = v22;
  sub_10000DF30((uint64_t)v22, (uint64_t)v20, type metadata accessor for AlarmEntry);
  v24 = (_QWORD *)sub_10000C964(0, 1, 1, &_swiftEmptyArrayStorage, &qword_100085058, type metadata accessor for AlarmEntry);
  v26 = v24[2];
  v25 = v24[3];
  if (v26 >= v25 >> 1)
    v24 = (_QWORD *)sub_10000C964(v25 > 1, v26 + 1, 1, v24, &qword_100085058, type metadata accessor for AlarmEntry);
  v24[2] = v26 + 1;
  sub_1000106E0((uint64_t)v20, (uint64_t)v24+ ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80))+ *(_QWORD *)(v17 + 72) * v26, type metadata accessor for AlarmEntry);
  v27 = objc_msgSend(a4[2], "nextExpectedRefreshDate");
  if (v27)
  {
    v28 = v27;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v27);

    v29 = 0;
  }
  else
  {
    v29 = 1;
  }
  v30 = v47;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v47 + 56))(v10, v29, 1, v13);
  sub_10000D9B4((uint64_t)v10, (uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v12, 1, v13) == 1)
  {
    sub_1000106A4((uint64_t)v12, &qword_100084810);
    v31 = v45(0xD00000000000001ELL, 0x800000010006E3D0);
    v32 = v52;
    static TimelineReloadPolicy.never.getter(v31);
    v33 = sub_10000D36C(&qword_100084888, type metadata accessor for AlarmEntry, (uint64_t)&unk_10006B458);
    v34 = v49;
    Timeline.init(entries:policy:)(v24, v32, v46, v33);
  }
  else
  {
    v35 = v44;
    (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v44, v12, v13);
    v55 = 0;
    v56 = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease(v56);
    v55 = 0xD000000000000021;
    v56 = 0x800000010006E3F0;
    v36 = sub_10000D36C(&qword_100084830, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v37._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v13, v36);
    object = v37._object;
    String.append(_:)(v37);
    swift_bridgeObjectRelease(object);
    v39 = v56;
    v45(v55, v56);
    swift_bridgeObjectRelease(v39);
    v40 = v52;
    static TimelineReloadPolicy.after(_:)(v35);
    v41 = sub_10000D36C(&qword_100084888, type metadata accessor for AlarmEntry, (uint64_t)&unk_10006B458);
    v34 = v49;
    Timeline.init(entries:policy:)(v24, v40, v46, v41);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v35, v13);
  }
  v54(v34);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v34, v51);
  return sub_10000D330((uint64_t)v48, type metadata accessor for AlarmEntry);
}

uint64_t sub_100009DE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  v3 = objc_msgSend(*(id *)(a1 + 16), "nextExpectedRefreshDate");
  if (v3)
  {
    v4 = v3;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v5 = type metadata accessor for Date(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a2;
    v8 = 0;
  }
  else
  {
    v5 = type metadata accessor for Date(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a2;
    v8 = 1;
  }
  return v6(v7, v8, 1, v5);
}

uint64_t sub_100009E64(uint64_t a1, void (*a2)(char *))
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = type metadata accessor for AlarmEntry(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v2;
  v8 = type metadata accessor for WidgetUtilities();
  v9 = (*(uint64_t (**)(unint64_t, unint64_t))(v8 + 80))(0xD00000000000001FLL, 0x800000010006E390);
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 224))(v9);
  a2(v6);
  return sub_10000D330((uint64_t)v6, type metadata accessor for AlarmEntry);
}

uint64_t sub_100009F30(uint64_t a1, void (*a2)(char *), uint64_t a3)
{
  id **v3;

  return sub_100009914(a1, a2, a3, *v3);
}

id sub_100009F38()
{
  return objc_msgSend(objc_allocWithZone((Class)MTAlarmManager), "init");
}

id sub_100009F5C()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

id sub_100009F64()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 24, v2, 0, 0);
  return *(id *)(v0 + 24);
}

void sub_100009F94(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  _BYTE v4[24];

  swift_beginAccess(v1 + 24, v4, 1, 0);
  v3 = *(void **)(v1 + 24);
  *(_QWORD *)(v1 + 24) = a1;

}

void *sub_100009FD8(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 24, a1, 33, 0);
  return &j_j__swift_endAccess;
}

id sub_10000A014()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 32, v2, 0, 0);
  return *(id *)(v0 + 32);
}

void sub_10000A044(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  _BYTE v4[24];

  swift_beginAccess(v1 + 32, v4, 1, 0);
  v3 = *(void **)(v1 + 32);
  *(_QWORD *)(v1 + 32) = a1;

}

void *sub_10000A088(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 32, a1, 33, 0);
  return &j_j__swift_endAccess;
}

id sub_10000A0C4()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 40, v2, 0, 0);
  return *(id *)(v0 + 40);
}

void sub_10000A0F4(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  _BYTE v4[24];

  swift_beginAccess(v1 + 40, v4, 1, 0);
  v3 = *(void **)(v1 + 40);
  *(_QWORD *)(v1 + 40) = a1;

}

void *sub_10000A138(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 40, a1, 33, 0);
  return &j_j__swift_endAccess;
}

id sub_10000A174()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 48, v2, 0, 0);
  return *(id *)(v0 + 48);
}

void sub_10000A1A4(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  _BYTE v4[24];

  swift_beginAccess(v1 + 48, v4, 1, 0);
  v3 = *(void **)(v1 + 48);
  *(_QWORD *)(v1 + 48) = a1;

}

void *sub_10000A1E8(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 48, a1, 33, 0);
  return &j_j__swift_endAccess;
}

uint64_t sub_10000A224()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  id *v10;
  id v11;
  Class isa;
  void (*v13)(char *, uint64_t);
  id v14;
  uint64_t v15;
  Class v16;
  id v17;
  uint64_t v18;
  id *v19;
  id v20;
  Class v21;
  id v22;
  void (*v23)(char *, uint64_t, uint64_t);
  id v24;
  Class v25;
  void (*v26)(char *, uint64_t);
  id v27;
  NSString v28;
  id v29;
  id v30;
  Class v31;
  void *v32;
  uint64_t v33;
  id v34;
  Class v35;
  id v36;
  NSString v37;
  id v38;
  id v39;
  Class v40;
  void *v41;
  id v42;
  Class v43;
  id v44;
  NSString v45;
  void (*v47)(char *, uint64_t);
  void (*v48)(char *, uint64_t, uint64_t);
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53[24];
  char v54[24];
  char v55[24];
  char v56[24];

  v1 = type metadata accessor for Locale(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TimeZone(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v0 + 16) = objc_msgSend(objc_allocWithZone((Class)MTAlarmManager), "init");
  v9 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  *(_QWORD *)(v0 + 24) = v9;
  v10 = (id *)(v0 + 24);
  v11 = v9;
  static TimeZone.current.getter(v11);
  isa = TimeZone._bridgeToObjectiveC()().super.isa;
  v13 = *(void (**)(char *, uint64_t))(v6 + 8);
  v52 = v5;
  v13(v8, v5);
  objc_msgSend(v11, "setTimeZone:", isa);

  swift_beginAccess(v10, v56, 0, 0);
  v14 = *v10;
  v15 = sub_100023A5C();
  v48 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
  v51 = v15;
  v48(v4, v15, v1);
  v16 = Locale._bridgeToObjectiveC()().super.isa;
  v49 = *(void (**)(char *, uint64_t))(v2 + 8);
  v49(v4, v1);
  objc_msgSend(v14, "setLocale:", v16);

  objc_msgSend(*v10, "setDateStyle:", 4);
  objc_msgSend(*v10, "setTimeStyle:", 0);
  objc_msgSend(*v10, "setDoesRelativeDateFormatting:", 1);
  objc_msgSend(*v10, "setFormattingContext:", 4);
  v17 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  v18 = v50;
  v19 = (id *)v50;
  *(_QWORD *)(v50 + 32) = v17;
  v19 += 4;
  v20 = v17;
  static TimeZone.current.getter(v20);
  v21 = TimeZone._bridgeToObjectiveC()().super.isa;
  v47 = v13;
  v13(v8, v5);
  objc_msgSend(v20, "setTimeZone:", v21);

  swift_beginAccess(v19, v55, 0, 0);
  v22 = *v19;
  v23 = v48;
  v48(v4, v15, v1);
  v24 = v22;
  v25 = Locale._bridgeToObjectiveC()().super.isa;
  v26 = v49;
  v49(v4, v1);
  objc_msgSend(v24, "setLocale:", v25);

  v27 = *v19;
  v28 = String._bridgeToObjectiveC()();
  objc_msgSend(v27, "setLocalizedDateFormatFromTemplate:", v28);

  objc_msgSend(*v19, "setDateStyle:", 0);
  objc_msgSend(*v19, "setTimeStyle:", 1);
  objc_msgSend(*v19, "setDoesRelativeDateFormatting:", 1);
  objc_msgSend(*v19, "setFormattingContext:", 4);
  v29 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  *(_QWORD *)(v18 + 40) = v29;
  v30 = v29;
  static TimeZone.current.getter(v30);
  v31 = TimeZone._bridgeToObjectiveC()().super.isa;
  v13(v8, v52);
  objc_msgSend(v30, "setTimeZone:", v31);

  swift_beginAccess(v18 + 40, v54, 0, 0);
  v32 = *(void **)(v18 + 40);
  v33 = v51;
  v23(v4, v51, v1);
  v34 = v32;
  v35 = Locale._bridgeToObjectiveC()().super.isa;
  v26(v4, v1);
  objc_msgSend(v34, "setLocale:", v35);

  v36 = *(id *)(v18 + 40);
  v37 = String._bridgeToObjectiveC()();
  objc_msgSend(v36, "setDateFormat:", v37);

  v38 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  *(_QWORD *)(v18 + 48) = v38;
  v39 = v38;
  static TimeZone.current.getter(v39);
  v40 = TimeZone._bridgeToObjectiveC()().super.isa;
  v47(v8, v52);
  objc_msgSend(v39, "setTimeZone:", v40);

  swift_beginAccess(v18 + 48, v53, 0, 0);
  v41 = *(void **)(v18 + 48);
  v23(v4, v33, v1);
  v42 = v41;
  v43 = Locale._bridgeToObjectiveC()().super.isa;
  v26(v4, v1);
  objc_msgSend(v42, "setLocale:", v43);

  v44 = *(id *)(v18 + 48);
  v45 = String._bridgeToObjectiveC()();
  objc_msgSend(v44, "setDateFormat:", v45);

  return v18;
}

uint64_t sub_10000A7A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void *v20;
  id v21;
  void *v22;
  Swift::String v23;
  id v24;
  uint64_t v25;
  void *v26;
  void *v27;
  Swift::String v28;
  Swift::String v29;
  unsigned int v30;
  BOOL v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  Swift::String v35;
  id v36;
  void *v37;
  void (*v38)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  id v67;
  void *v68;
  char *v69;
  uint64_t v70;
  id v71;
  id v72;
  id v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  id v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  id v93;
  void (*v94)(uint64_t, uint64_t, uint64_t, uint64_t);
  void *v95;
  char *v96;
  void (*v97)(char *, char *, uint64_t);
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  Class isa;
  id v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  void *v110;
  Class v111;
  id v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  void *v118;
  Class v119;
  id v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  void *v126;
  Class v127;
  id v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void (*v136)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v137;
  _QWORD *v138;
  _QWORD *v139;
  _QWORD *v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  void (*v144)(uint64_t, unint64_t);
  char *v145;
  char *v146;
  char *v147;
  char *v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  id v159;
  void (*v160)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v161;
  unint64_t v162;

  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v153 = (char *)&v144 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (char *)&v144 - v7;
  v9 = (int *)type metadata accessor for AlarmEntry(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v144 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v160 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000041D8(&qword_100084810);
  v12 = __chkstk_darwin(v160);
  v155 = (char *)&v144 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v154 = (char *)&v144 - v15;
  v16 = __chkstk_darwin(v14);
  v156 = (char *)&v144 - v17;
  __chkstk_darwin(v16);
  v19 = (char *)&v144 - v18;
  v151 = v1;
  v20 = *(void **)(v1 + 16);
  v21 = objc_msgSend(v20, "nextWidgetAlarmInThreshold");
  if (v21)
  {
    v22 = v21;
    v149 = v8;
    v157 = v4;
    v161 = 0;
    v162 = 0xE000000000000000;
    _StringGuts.grow(_:)(70);
    v23._countAndFlagsBits = 0xD00000000000001FLL;
    v23._object = (void *)0x800000010006E470;
    String.append(_:)(v23);
    v24 = objc_msgSend(v22, "description");
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    v27 = v26;

    v28._countAndFlagsBits = v25;
    v28._object = v27;
    String.append(_:)(v28);
    swift_bridgeObjectRelease(v27);
    v29._countAndFlagsBits = 0x6F6F6E537369202CLL;
    v29._object = (void *)0xED0000203A64657ALL;
    String.append(_:)(v29);
    v30 = objc_msgSend(v22, "isSnoozed");
    v31 = v30 == 0;
    if (v30)
      v32 = 1702195828;
    else
      v32 = 0x65736C6166;
    if (v31)
      v33 = 0xE500000000000000;
    else
      v33 = 0xE400000000000000;
    v34 = v33;
    String.append(_:)(*(Swift::String *)&v32);
    swift_bridgeObjectRelease(v33);
    v35._object = (void *)0x800000010006E490;
    v35._countAndFlagsBits = 0xD000000000000014;
    String.append(_:)(v35);
    v159 = v22;
    v36 = objc_msgSend(v22, "snoozeFireDate");
    v152 = a1;
    if (v36)
    {
      v37 = v36;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v36);

      v38 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v157 + 56);
      v38((uint64_t)v19, 0, 1, v3);
    }
    else
    {
      v38 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v157 + 56);
      v38((uint64_t)v19, 1, 1, v3);
    }
    v54 = type metadata accessor for WidgetUtilities();
    _print_unlocked<A, B>(_:_:)(v19, &v161, v160, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    sub_1000106A4((uint64_t)v19, &qword_100084810);
    v55 = v162;
    v144 = *(void (**)(uint64_t, unint64_t))(v54 + 80);
    v144(v161, v162);
    v56 = swift_bridgeObjectRelease(v55);
    Date.init()(v56);
    v57 = (uint64_t)&v11[v9[5]];
    v58 = 1;
    v38(v57, 1, 1, v3);
    v150 = &v11[v9[6]];
    v158 = v3;
    v160 = v38;
    ((void (*)(void))v38)();
    v59 = v9[7];
    v11[v59] = 0;
    v11[v9[8]] = 0;
    v60 = &v11[v9[9]];
    *(_QWORD *)v60 = 0;
    *((_QWORD *)v60 + 1) = 0;
    v145 = v60;
    v61 = &v11[v9[10]];
    *(_QWORD *)v61 = 0;
    *((_QWORD *)v61 + 1) = 0;
    v146 = v61;
    v62 = &v11[v9[11]];
    *(_QWORD *)v62 = 0;
    *((_QWORD *)v62 + 1) = 0;
    v147 = v62;
    v63 = &v11[v9[12]];
    *(_QWORD *)v63 = 0;
    *((_QWORD *)v63 + 1) = 0;
    v148 = v63;
    v64 = v9[13];
    v11[v64] = 0;
    v65 = v9[14];
    v11[v65] = 0;
    v66 = (uint64_t *)&v11[v9[15]];
    *v66 = 0;
    v66[1] = 0;
    v11[v9[16]] = 0;
    v11[v9[17]] = 0;
    v67 = objc_msgSend(v159, "nextFireDate");
    if (v67)
    {
      v68 = v67;
      v69 = v156;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v67);

      v70 = (uint64_t)v69;
      v58 = 0;
    }
    else
    {
      v70 = (uint64_t)v156;
    }
    v160(v70, v58, 1, v158);
    sub_10000DFAC(v70, v57);
    v71 = v159;
    v11[v59] = objc_msgSend(v159, "isSleepAlarm");
    if (objc_msgSend(v71, "isSleepAlarm"))
    {
      v72 = objc_msgSend((id)objc_opt_self(MTSleepManager), "nextSleepAlarm");

      if (!v72)
      {
        v133 = ((uint64_t (*)(unint64_t, unint64_t))v144)(0xD000000000000021, 0x800000010006E4B0);
        v134 = v152;
        Date.init()(v133);
        v135 = v158;
        v136 = v160;
        v160(v134 + v9[5], 1, 1, v158);
        v136(v134 + v9[6], 1, 1, v135);

        *(_BYTE *)(v134 + v9[7]) = 0;
        *(_BYTE *)(v134 + v9[8]) = 0;
        v137 = (_QWORD *)(v134 + v9[9]);
        *v137 = 0;
        v137[1] = 0;
        v138 = (_QWORD *)(v134 + v9[10]);
        *v138 = 0;
        v138[1] = 0;
        v139 = (_QWORD *)(v134 + v9[11]);
        *v139 = 0;
        v139[1] = 0;
        v140 = (_QWORD *)(v134 + v9[12]);
        *v140 = 0;
        v140[1] = 0;
        *(_BYTE *)(v134 + v9[13]) = 0;
        *(_BYTE *)(v134 + v9[14]) = 0;
        v141 = (_QWORD *)(v134 + v9[15]);
        *v141 = 0;
        v141[1] = 0;
        v142 = v9[16];
        *(_BYTE *)(v134 + v9[17]) = 0;
        *(_BYTE *)(v134 + v142) = 1;
        return sub_10000D330((uint64_t)v11, type metadata accessor for AlarmEntry);
      }
    }
    v11[v64] = objc_msgSend(v71, "isFiring");
    v11[v65] = 0;
    v73 = objc_msgSend(v71, "snoozeFireDate");
    if (v73)
    {
      v74 = v73;
      v75 = (uint64_t)v154;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v73);

      v76 = 0;
      v78 = v157;
      v77 = v158;
    }
    else
    {
      v76 = 1;
      v78 = v157;
      v77 = v158;
      v75 = (uint64_t)v154;
    }
    v160(v75, v76, 1, v77);
    sub_10000DFAC(v75, (uint64_t)v150);
    v87 = objc_msgSend(v71, "title");
    v88 = v152;
    if (v87)
    {
      v89 = v87;
      v90 = static String._unconditionallyBridgeFromObjectiveC(_:)(v87);
      v92 = v91;

    }
    else
    {
      v90 = 0;
      v92 = 0;
    }
    swift_bridgeObjectRelease(v66[1]);
    *v66 = v90;
    v66[1] = v92;
    v93 = objc_msgSend(v71, "nextFireDate");
    v94 = v160;
    if (v93)
    {
      v95 = v93;
      v96 = v153;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v93);

      v97 = *(void (**)(char *, char *, uint64_t))(v78 + 32);
      v98 = (uint64_t)v155;
      v97(v155, v96, v77);
      v94(v98, 0, 1, v77);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v78 + 48))(v98, 1, v77) != 1)
      {
        v99 = v149;
        v100 = ((uint64_t (*)(char *, uint64_t, uint64_t))v97)(v149, v98, v77);
        v101 = v151;
        v102 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v151 + 120))(v100);
        isa = Date._bridgeToObjectiveC()().super.isa;
        v104 = objc_msgSend(v102, "stringFromDate:", isa);

        v105 = static String._unconditionallyBridgeFromObjectiveC(_:)(v104);
        v107 = v106;

        v108 = (uint64_t *)v145;
        v109 = swift_bridgeObjectRelease(*((_QWORD *)v145 + 1));
        *v108 = v105;
        v108[1] = v107;
        v110 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v101 + 144))(v109);
        v111 = Date._bridgeToObjectiveC()().super.isa;
        v112 = objc_msgSend(v110, "stringFromDate:", v111);

        v113 = static String._unconditionallyBridgeFromObjectiveC(_:)(v112);
        v115 = v114;

        v116 = (uint64_t *)v146;
        v117 = swift_bridgeObjectRelease(*((_QWORD *)v146 + 1));
        *v116 = v113;
        v116[1] = v115;
        v118 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v101 + 168))(v117);
        v119 = Date._bridgeToObjectiveC()().super.isa;
        v120 = objc_msgSend(v118, "stringFromDate:", v119);

        v121 = static String._unconditionallyBridgeFromObjectiveC(_:)(v120);
        v123 = v122;

        v124 = (uint64_t *)v147;
        v125 = swift_bridgeObjectRelease(*((_QWORD *)v147 + 1));
        *v124 = v121;
        v124[1] = v123;
        v126 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v101 + 192))(v125);
        v127 = Date._bridgeToObjectiveC()().super.isa;
        v128 = objc_msgSend(v126, "stringFromDate:", v127);

        v129 = static String._unconditionallyBridgeFromObjectiveC(_:)(v128);
        v131 = v130;

        (*(void (**)(char *, uint64_t))(v78 + 8))(v99, v77);
        v132 = (uint64_t *)v148;
        swift_bridgeObjectRelease(*((_QWORD *)v148 + 1));
        *v132 = v129;
        v132[1] = v131;
        return sub_1000106E0((uint64_t)v11, v88, type metadata accessor for AlarmEntry);
      }
    }
    else
    {
      v98 = (uint64_t)v155;
      v160((uint64_t)v155, 1, 1, v77);
    }

    sub_1000106A4(v98, &qword_100084810);
    return sub_1000106E0((uint64_t)v11, v88, type metadata accessor for AlarmEntry);
  }
  v39 = objc_msgSend(v20, "alarmsSync");
  if (!v39)
    goto LABEL_23;
  v40 = v39;
  v41 = sub_10000DF74(0, qword_100084890, MTAlarm_ptr);
  v42 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v40, v41);

  if ((unint64_t)v42 >> 62)
  {
    v143 = v42 < 0 ? v42 : v42 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v42);
    v43 = _CocoaArrayWrapper.endIndex.getter(v143);
    swift_bridgeObjectRelease(v42);
  }
  else
  {
    v43 = *(_QWORD *)((v42 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease(v42);
  if (v43)
  {
    v44 = type metadata accessor for WidgetUtilities();
    v45 = (*(uint64_t (**)(unint64_t, unint64_t))(v44 + 80))(0xD00000000000001DLL, 0x800000010006E450);
    Date.init()(v45);
    v46 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v46(a1 + v9[5], 1, 1, v3);
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v46)(a1 + v9[6], 1, 1, v3);
    *(_BYTE *)(a1 + v9[7]) = 0;
    *(_BYTE *)(a1 + v9[8]) = 0;
    v48 = (_QWORD *)(a1 + v9[9]);
    *v48 = 0;
    v48[1] = 0;
    v49 = (_QWORD *)(a1 + v9[10]);
    *v49 = 0;
    v49[1] = 0;
    v50 = (_QWORD *)(a1 + v9[11]);
    *v50 = 0;
    v50[1] = 0;
    v51 = (_QWORD *)(a1 + v9[12]);
    *v51 = 0;
    v51[1] = 0;
    *(_BYTE *)(a1 + v9[13]) = 0;
    *(_BYTE *)(a1 + v9[14]) = 0;
    v52 = (_QWORD *)(a1 + v9[15]);
    *v52 = 0;
    v52[1] = 0;
    *(_BYTE *)(a1 + v9[16]) = 0;
    v53 = v9[17];
  }
  else
  {
LABEL_23:
    v79 = type metadata accessor for WidgetUtilities();
    v80 = (*(uint64_t (**)(unint64_t, unint64_t))(v79 + 80))(0xD00000000000002ALL, 0x800000010006E420);
    Date.init()(v80);
    v81 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v81(a1 + v9[5], 1, 1, v3);
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v81)(a1 + v9[6], 1, 1, v3);
    *(_BYTE *)(a1 + v9[7]) = 0;
    *(_BYTE *)(a1 + v9[8]) = 0;
    v82 = (_QWORD *)(a1 + v9[9]);
    *v82 = 0;
    v82[1] = 0;
    v83 = (_QWORD *)(a1 + v9[10]);
    *v83 = 0;
    v83[1] = 0;
    v84 = (_QWORD *)(a1 + v9[11]);
    *v84 = 0;
    v84[1] = 0;
    v85 = (_QWORD *)(a1 + v9[12]);
    *v85 = 0;
    v85[1] = 0;
    *(_BYTE *)(a1 + v9[13]) = 0;
    *(_BYTE *)(a1 + v9[14]) = 0;
    v86 = (_QWORD *)(a1 + v9[15]);
    *v86 = 0;
    v86[1] = 0;
    v53 = v9[16];
    *(_BYTE *)(a1 + v9[17]) = 0;
  }
  *(_BYTE *)(a1 + v53) = 1;
  return result;
}

uint64_t sub_10000B314@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  Date.init()(a1);
  v3 = (int *)type metadata accessor for AlarmEntry(0);
  v4 = a2 + v3[5];
  v5 = type metadata accessor for Date(0);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v6)(a2 + v3[6], 1, 1, v5);
  *(_BYTE *)(a2 + v3[7]) = 0;
  *(_BYTE *)(a2 + v3[8]) = 0;
  v8 = (_QWORD *)(a2 + v3[9]);
  *v8 = 0;
  v8[1] = 0;
  v9 = (_QWORD *)(a2 + v3[10]);
  *v9 = 0;
  v9[1] = 0;
  v10 = (_QWORD *)(a2 + v3[11]);
  *v10 = 0;
  v10[1] = 0;
  v11 = (_QWORD *)(a2 + v3[12]);
  *v11 = 0;
  v11[1] = 0;
  *(_BYTE *)(a2 + v3[13]) = 0;
  *(_BYTE *)(a2 + v3[14]) = 0;
  v12 = (_QWORD *)(a2 + v3[15]);
  *v12 = 0;
  v12[1] = 0;
  v13 = v3[16];
  *(_BYTE *)(a2 + v3[17]) = 0;
  *(_BYTE *)(a2 + v13) = 1;
  return result;
}

uint64_t sub_10000B404@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;

  Date.init()(a1);
  v3 = (int *)type metadata accessor for AlarmEntry(0);
  v4 = a2 + v3[5];
  v5 = type metadata accessor for Date(0);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v6)(a2 + v3[6], 1, 1, v5);
  *(_BYTE *)(a2 + v3[7]) = 0;
  *(_BYTE *)(a2 + v3[8]) = 0;
  v8 = (_QWORD *)(a2 + v3[9]);
  *v8 = 0;
  v8[1] = 0;
  v9 = (_QWORD *)(a2 + v3[10]);
  *v9 = 0;
  v9[1] = 0;
  v10 = (_QWORD *)(a2 + v3[11]);
  *v10 = 0;
  v10[1] = 0;
  v11 = (_QWORD *)(a2 + v3[12]);
  *v11 = 0;
  v11[1] = 0;
  *(_BYTE *)(a2 + v3[13]) = 0;
  *(_BYTE *)(a2 + v3[14]) = 0;
  v12 = (_QWORD *)(a2 + v3[15]);
  *v12 = 0;
  v12[1] = 0;
  *(_BYTE *)(a2 + v3[16]) = 0;
  *(_BYTE *)(a2 + v3[17]) = 1;
  return result;
}

id *sub_10000B4F8()
{
  id *v0;

  return v0;
}

uint64_t sub_10000B534()
{
  id *v0;

  return swift_deallocClassInstance(v0, 56, 7);
}

uint64_t sub_10000B578@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t sub_10000B5B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t sub_10000B5EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for AlarmEntry(0) + 20);
  return sub_10000C91C(v3, a1);
}

uint64_t sub_10000B61C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for AlarmEntry(0) + 20);
  return sub_10000DFAC(a1, v3);
}

uint64_t (*sub_10000B64C())()
{
  type metadata accessor for AlarmEntry(0);
  return nullsub_1;
}

uint64_t sub_10000B674@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t sub_10000B6B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for AlarmEntry(0) + 24);
  return sub_10000C91C(v3, a1);
}

uint64_t sub_10000B6E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for AlarmEntry(0) + 24);
  return sub_10000DFAC(a1, v3);
}

uint64_t (*sub_10000B710())()
{
  type metadata accessor for AlarmEntry(0);
  return nullsub_1;
}

uint64_t sub_10000B738()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t result;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;

  v1 = v0;
  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AlarmEntry(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000041D8(&qword_100084810);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v22 - v13;
  sub_10000C91C(v1 + *(int *)(v6 + 24), (uint64_t)&v22 - v13);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48);
  v16 = v15(v14, 1, v2);
  sub_1000106A4((uint64_t)v14, &qword_100084810);
  v17 = sub_10000DF30(v1, (uint64_t)v8, type metadata accessor for AlarmEntry);
  if (v16 == 1)
  {
    v18 = 0;
LABEL_5:
    sub_10000D330((uint64_t)v8, type metadata accessor for AlarmEntry);
    return v18;
  }
  Date.init()(v17);
  sub_10000C91C((uint64_t)&v8[*(int *)(v6 + 24)], (uint64_t)v12);
  result = v15(v12, 1, v2);
  if ((_DWORD)result != 1)
  {
    v20 = Date.compare(_:)(v12);
    v21 = *(void (**)(char *, uint64_t))(v3 + 8);
    v21(v5, v2);
    v21(v12, v2);
    v18 = v20 == -1;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t sub_10000B910()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AlarmEntry(0) + 28));
}

uint64_t sub_10000B930(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AlarmEntry(0);
  *(_BYTE *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*sub_10000B95C())()
{
  type metadata accessor for AlarmEntry(0);
  return nullsub_1;
}

uint64_t sub_10000B984()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AlarmEntry(0) + 32));
}

uint64_t sub_10000B9A4(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AlarmEntry(0);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*sub_10000B9D0())()
{
  type metadata accessor for AlarmEntry(0);
  return nullsub_1;
}

uint64_t sub_10000B9F8()
{
  return 0;
}

uint64_t sub_10000BA04()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for AlarmEntry(0) + 36));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t sub_10000BA40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for AlarmEntry(0) + 36));
  result = swift_bridgeObjectRelease(v5[1]);
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*sub_10000BA84())()
{
  type metadata accessor for AlarmEntry(0);
  return nullsub_1;
}

uint64_t sub_10000BAAC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for AlarmEntry(0) + 40));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t sub_10000BAE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for AlarmEntry(0) + 40));
  result = swift_bridgeObjectRelease(v5[1]);
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*sub_10000BB2C())()
{
  type metadata accessor for AlarmEntry(0);
  return nullsub_1;
}

uint64_t sub_10000BB54()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for AlarmEntry(0) + 44));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t sub_10000BB90(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for AlarmEntry(0) + 44));
  result = swift_bridgeObjectRelease(v5[1]);
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*sub_10000BBD4())()
{
  type metadata accessor for AlarmEntry(0);
  return nullsub_1;
}

uint64_t sub_10000BBFC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for AlarmEntry(0) + 48));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t sub_10000BC38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for AlarmEntry(0) + 48));
  result = swift_bridgeObjectRelease(v5[1]);
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*sub_10000BC7C())()
{
  type metadata accessor for AlarmEntry(0);
  return nullsub_1;
}

uint64_t sub_10000BCA4()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AlarmEntry(0) + 52));
}

uint64_t sub_10000BCC4(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AlarmEntry(0);
  *(_BYTE *)(v1 + *(int *)(result + 52)) = a1;
  return result;
}

uint64_t (*sub_10000BCF0())()
{
  type metadata accessor for AlarmEntry(0);
  return nullsub_1;
}

uint64_t sub_10000BD18()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AlarmEntry(0) + 56));
}

uint64_t sub_10000BD38(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AlarmEntry(0);
  *(_BYTE *)(v1 + *(int *)(result + 56)) = a1;
  return result;
}

uint64_t (*sub_10000BD64())()
{
  type metadata accessor for AlarmEntry(0);
  return nullsub_1;
}

uint64_t sub_10000BD8C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for AlarmEntry(0) + 60));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t sub_10000BDC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for AlarmEntry(0) + 60));
  result = swift_bridgeObjectRelease(v5[1]);
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*sub_10000BE0C())()
{
  type metadata accessor for AlarmEntry(0);
  return nullsub_1;
}

uint64_t sub_10000BE34()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AlarmEntry(0) + 64));
}

uint64_t sub_10000BE54(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AlarmEntry(0);
  *(_BYTE *)(v1 + *(int *)(result + 64)) = a1;
  return result;
}

uint64_t (*sub_10000BE80())()
{
  type metadata accessor for AlarmEntry(0);
  return nullsub_1;
}

uint64_t sub_10000BEA8()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AlarmEntry(0) + 68));
}

uint64_t sub_10000BEC8(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AlarmEntry(0);
  *(_BYTE *)(v1 + *(int *)(result + 68)) = a1;
  return result;
}

uint64_t (*sub_10000BEF4())()
{
  type metadata accessor for AlarmEntry(0);
  return nullsub_1;
}

uint64_t sub_10000BF1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  int *v4;
  uint64_t v5;
  int v6;
  uint64_t v8;

  v1 = sub_1000041D8(&qword_100084810);
  __chkstk_darwin(v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (int *)type metadata accessor for AlarmEntry(0);
  sub_10000C91C(v0 + v4[5], (uint64_t)v3);
  v5 = type metadata accessor for Date(0);
  v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5);
  sub_1000106A4((uint64_t)v3, &qword_100084810);
  if (v6 == 1)
  {
    if (*(_BYTE *)(v0 + v4[17]))
      return 6;
    else
      return 0;
  }
  else if (*(_BYTE *)(v0 + v4[7]))
  {
    return 3;
  }
  else
  {
    return 1;
  }
}

uint64_t sub_10000C004()
{
  return Image.init(_internalSystemName:)(0x69662E6D72616C61, 0xEA00000000006C6CLL);
}

uint64_t sub_10000C020()
{
  return 0x69662E6D72616C61;
}

uint64_t sub_10000C03C()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + *(int *)(type metadata accessor for AlarmEntry(0) + 28)) == 1)
    return Image.init(_internalSystemName:)(8026746, 0xE300000000000000);
  else
    return Image.init(_internalSystemName:)(0x69662E6D72616C61, 0xEA00000000006C6CLL);
}

BOOL sub_10000C090()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  v1 = sub_1000041D8(&qword_100084810);
  __chkstk_darwin(v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for AlarmEntry(0);
  sub_10000C91C(v0 + *(int *)(v4 + 20), (uint64_t)v3);
  v5 = type metadata accessor for Date(0);
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  sub_1000106A4((uint64_t)v3, &qword_100084810);
  return v6;
}

uint64_t sub_10000C140()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for AlarmEntry(0) + 36));
  v2 = v1[1];
  if (v2)
    v3 = *v1;
  else
    v3 = 0;
  swift_bridgeObjectRetain(v2);
  return v3;
}

uint64_t sub_10000C190()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for AlarmEntry(0) + 40));
  v2 = v1[1];
  if (v2)
    v3 = *v1;
  else
    v3 = 0;
  swift_bridgeObjectRetain(v2);
  return v3;
}

uint64_t sub_10000C1E0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for AlarmEntry(0) + 44));
  v2 = v1[1];
  if (v2)
    v3 = *v1;
  else
    v3 = 0;
  swift_bridgeObjectRetain(v2);
  return v3;
}

uint64_t sub_10000C230()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for AlarmEntry(0) + 48));
  v2 = v1[1];
  if (v2)
    v3 = *v1;
  else
    v3 = 0;
  swift_bridgeObjectRetain(v2);
  return v3;
}

uint64_t sub_10000C280()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(_QWORD);
  uint64_t v13;
  int v14;
  char v15;
  uint64_t v16;
  uint64_t v18;

  v1 = v0;
  v2 = sub_1000041D8(&qword_100084810);
  __chkstk_darwin(v2);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (int *)type metadata accessor for AlarmEntry(0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (uint64_t *)(v1 + *(int *)(v6 + 60));
  v10 = *v9;
  v11 = v9[1];
  sub_10000DF30(v1, (uint64_t)v8, v12);
  if (!v11)
  {
    sub_10000C91C((uint64_t)&v8[v5[5]], (uint64_t)v4);
    v13 = type metadata accessor for Date(0);
    v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v4, 1, v13);
    sub_1000106A4((uint64_t)v4, &qword_100084810);
    if (v14 == 1)
    {
      if (v8[v5[17]])
        v15 = 6;
      else
        v15 = 0;
    }
    else if (v8[v5[7]])
    {
      v15 = 3;
    }
    else
    {
      v15 = 1;
    }
    sub_10000C3F4(v15);
    v10 = v16;
    v11 = 0;
  }
  swift_bridgeObjectRetain(v11);
  sub_10000D330((uint64_t)v8, type metadata accessor for AlarmEntry);
  return v10;
}

void sub_10000C3F4(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_10000C43C()
{
  id v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t countAndFlagsBits;
  Swift::String v5;

  v0 = objc_msgSend((id)((uint64_t (*)(void *))objc_opt_self)(NSBundle), "mainBundle");
  v5._object = (void *)0xE500000000000000;
  v1._countAndFlagsBits = 0x6D72616C41;
  v1._object = (void *)0xE500000000000000;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v5._countAndFlagsBits = 0x6D72616C41;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v5)._countAndFlagsBits;
  ((void (*)(unint64_t, uint64_t))swift_bridgeObjectRelease_n)(0xE500000000000000, 2);

  return countAndFlagsBits;
}

uint64_t sub_10000C580(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10000C5B8 + 4 * byte_10006B0F0[a1]))(0x6D72616C41206F4ELL, 0xE900000000000073);
}

uint64_t sub_10000C5B8()
{
  return 0x6D72616C41;
}

uint64_t sub_10000C5CC()
{
  return 0x2064657A6F6F6E53;
}

uint64_t sub_10000C5F0()
{
  return 0x705520656B6157;
}

unint64_t sub_10000C608()
{
  return 0xD000000000000013;
}

uint64_t sub_10000C624()
{
  return 7827278;
}

uint64_t sub_10000C634()
{
  return 0x4F20736D72616C41;
}

uint64_t sub_10000C650()
{
  return 4605519;
}

void sub_10000C664(char *a1)
{
  sub_1000079D4(*a1);
}

void sub_10000C670()
{
  char *v0;

  sub_10000C78C(0, *v0);
}

void sub_10000C67C(uint64_t a1)
{
  char *v1;

  sub_10000C684(a1, *v1);
}

void sub_10000C684(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_10000C6C8(uint64_t a1)
{
  ((void (*)(uint64_t, uint64_t, unint64_t))String.hash(into:))(a1, 0x6D72616C41, 0xE500000000000000);
  return swift_bridgeObjectRelease(0xE500000000000000);
}

void sub_10000C784(uint64_t a1)
{
  char *v1;

  sub_10000C78C(a1, *v1);
}

void sub_10000C78C(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_10000C7DC()
{
  uint64_t v1;

  ((void (*)(uint64_t *, uint64_t, unint64_t))String.hash(into:))(&v1, 0x6D72616C41, 0xE500000000000000);
  swift_bridgeObjectRelease(0xE500000000000000);
  return Hasher._finalize()();
}

unint64_t sub_10000C8AC@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10000DFF4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10000C8D8@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10000C580(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

_QWORD *sub_10000C900@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_10000C910(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_10000C91C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000041D8(&qword_100084810);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

size_t sub_10000C964(size_t result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  char v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;

  v8 = result;
  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_1000041D8(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  result = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v17 == 0x8000000000000000 && v15 == -1)
    goto LABEL_29;
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(result - v17) / v15);
LABEL_19:
  v20 = a6(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  v23 = (char *)v18 + v22;
  v24 = (char *)a4 + v22;
  if ((v8 & 1) != 0)
  {
    if (v18 < a4 || v23 >= &v24[*(_QWORD *)(v21 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v23, v24, v11, v20);
    }
    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v23, v24, v11, v20);
  }
  swift_bridgeObjectRelease(a4);
  return (size_t)v18;
}

size_t sub_10000CAD8(size_t a1, int64_t a2, char a3)
{
  size_t *v3;
  size_t result;

  result = sub_10000CB30(a1, a2, a3, (_QWORD *)*v3, &qword_100085080, type metadata accessor for WorldClockEntry);
  *v3 = result;
  return result;
}

size_t sub_10000CB04(size_t a1, int64_t a2, char a3)
{
  size_t *v3;
  size_t result;

  result = sub_10000CB30(a1, a2, a3, (_QWORD *)*v3, &qword_100084838, type metadata accessor for WorldClockCity);
  *v3 = result;
  return result;
}

size_t sub_10000CB30(size_t result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  char v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;

  v8 = result;
  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_1000041D8(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  result = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v17 == 0x8000000000000000 && v15 == -1)
    goto LABEL_29;
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(result - v17) / v15);
LABEL_19:
  v20 = a6(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  v23 = (char *)v18 + v22;
  v24 = (char *)a4 + v22;
  if ((v8 & 1) != 0)
  {
    if (v18 < a4 || v23 >= &v24[*(_QWORD *)(v21 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v23, v24, v11, v20);
    }
    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v23, v24, v11, v20);
  }
  swift_release(a4);
  return (size_t)v18;
}

_QWORD *sub_10000CCA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int64_t v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  id v34;
  void *v35;
  char *v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v39;
  unsigned int (*v40)(uint64_t, uint64_t, uint64_t);
  char *v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  char *v44;
  id v45;
  void *v46;
  char *v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD v61[2];
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(size_t);
  uint64_t v67;
  int64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  void (*v80)(char *, uint64_t, uint64_t);
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  char *v84;
  _QWORD *v85;
  id v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;

  v5 = sub_1000041D8(&qword_100084810);
  v6 = __chkstk_darwin(v5);
  v79 = (char *)v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v78 = (char *)v61 - v8;
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v77 = (char *)v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v84 = (char *)v61 - v14;
  __chkstk_darwin(v13);
  v16 = (char *)v61 - v15;
  v76 = type metadata accessor for WorldClockCity(0);
  v64 = *(_QWORD *)(v76 - 8);
  v17 = __chkstk_darwin(v76);
  v87 = (uint64_t)v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v20 = (char *)v61 - v19;
  v21 = type metadata accessor for WorldClockEntry(0);
  v69 = *(_QWORD *)(v21 - 8);
  v70 = v21;
  __chkstk_darwin(v21);
  v23 = (char *)v61 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = *(_QWORD *)(a1 + 16);
  if (!v24)
    return &_swiftEmptyArrayStorage;
  v73 = v16;
  v61[1] = v2;
  v89 = &_swiftEmptyArrayStorage;
  v25 = sub_10000CAD8(0, v24, 0);
  v26 = 0;
  v67 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  v66 = *(uint64_t (**)(size_t))(*(_QWORD *)a2 + 96);
  v65 = *(_QWORD *)(v10 + 72);
  v63 = a2;
  v74 = v10;
  v75 = v20;
  v62 = v23;
  v68 = v24;
  do
  {
    v72 = v26;
    v83 = v67 + v65 * v26;
    v27 = v66(v25);
    v28 = *(_QWORD *)(v27 + 16);
    if (v28)
    {
      v88 = &_swiftEmptyArrayStorage;
      v29 = v27;
      sub_10000CB04(0, v28, 0);
      v30 = v88;
      v31 = v64;
      v32 = (*(unsigned __int8 *)(v64 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80);
      v71 = v29;
      v82 = v32;
      v33 = v29 + v32;
      v86 = (id)objc_opt_self(MTUtilities);
      v81 = *(_QWORD *)(v31 + 72);
      do
      {
        v85 = v30;
        sub_10000DF30(v33, v87, type metadata accessor for WorldClockCity);
        v34 = objc_msgSend(v86, "widgetOverrideDate");
        if (v34)
        {
          v35 = v34;
          v36 = v84;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          v37 = (uint64_t)v78;
          (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v78, v36, v9);
          v38 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
          v38(v37, 0, 1, v9);
        }
        else
        {
          v38 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
          v37 = (uint64_t)v78;
          v38((uint64_t)v78, 1, 1, v9);
        }
        v39 = v77;
        v80 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
        v80(v77, v83, v9);
        v40 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
        if (v40(v37, 1, v9) == 1)
        {
          v41 = v39;
          v42 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
          v43 = v9;
          v44 = v73;
          v42(v73, v41, v43);
          sub_1000106A4(v37, &qword_100084810);
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v10 + 8))(v39, v9);
          v42 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
          v43 = v9;
          v44 = v73;
          v42(v73, (char *)v37, v43);
        }
        (*(void (**)(uint64_t, char *, uint64_t))(v10 + 40))(v87, v44, v43);
        v45 = objc_msgSend(v86, "widgetOverrideDate");
        v9 = v43;
        if (v45)
        {
          v46 = v45;
          v47 = v84;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          v48 = (uint64_t)v79;
          v42(v79, v47, v43);
          v38(v48, 0, 1, v43);
          v49 = v40(v48, 1, v43) != 1;
        }
        else
        {
          v48 = (uint64_t)v79;
          v38((uint64_t)v79, 1, 1, v43);
          v49 = 0;
        }
        v50 = (uint64_t)v75;
        sub_1000106A4(v48, &qword_100084810);
        v51 = v87;
        *(_BYTE *)(v87 + *(int *)(v76 + 20)) = v49;
        sub_1000106E0(v51, v50, type metadata accessor for WorldClockCity);
        v30 = v85;
        v88 = v85;
        v53 = v85[2];
        v52 = v85[3];
        if (v53 >= v52 >> 1)
        {
          sub_10000CB04(v52 > 1, v53 + 1, 1);
          v30 = v88;
        }
        v30[2] = v53 + 1;
        v54 = v81;
        sub_1000106E0(v50, (uint64_t)v30 + v82 + v53 * v81, type metadata accessor for WorldClockCity);
        v33 += v54;
        --v28;
        v10 = v74;
      }
      while (v28);
      swift_bridgeObjectRelease(v71);
      v23 = v62;
      v80(v62, v83, v9);
    }
    else
    {
      swift_bridgeObjectRelease(v27);
      v30 = &_swiftEmptyArrayStorage;
      (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v23, v83, v9);
    }
    v55 = v70;
    *(_QWORD *)&v23[*(int *)(v70 + 20)] = v30;
    v23[*(int *)(v55 + 24)] = 0;
    v56 = v89;
    if ((swift_isUniquelyReferenced_nonNull_native(v89) & 1) == 0)
    {
      sub_10000CAD8(0, v56[2] + 1, 1);
      v56 = v89;
    }
    v57 = v72;
    v59 = v56[2];
    v58 = v56[3];
    if (v59 >= v58 >> 1)
    {
      sub_10000CAD8(v58 > 1, v59 + 1, 1);
      v57 = v72;
      v56 = v89;
    }
    v26 = v57 + 1;
    v56[2] = v59 + 1;
    v25 = sub_1000106E0((uint64_t)v23, (uint64_t)v56+ ((*(unsigned __int8 *)(v69 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80))+ *(_QWORD *)(v69 + 72) * v59, type metadata accessor for WorldClockEntry);
  }
  while (v26 != v68);
  return v56;
}

uint64_t type metadata accessor for WorldClockEntry(uint64_t a1)
{
  return sub_10000DEFC(a1, (uint64_t *)&unk_100088AB0, (uint64_t)&nominal type descriptor for WorldClockEntry);
}

uint64_t type metadata accessor for WorldClockIntentModel()
{
  return objc_opt_self(_TtC16WorldClockWidget21WorldClockIntentModel);
}

uint64_t sub_10000D330(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10000D36C(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

_QWORD *sub_10000D3AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  id v27;
  void *v28;
  id v29;
  void *v30;
  _QWORD *v31;
  Swift::String v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  Swift::String v39;
  void *object;
  Swift::String v41;
  id v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  Swift::String v48;
  void *v49;
  uint64_t v50;
  double v51;
  double v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;

  v3 = v2;
  v65 = a2;
  v5 = sub_1000041D8(&qword_100085070);
  __chkstk_darwin(v5);
  v7 = (char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for WorldClockCity(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v77 = (uint64_t)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v68 = (uint64_t)&v65 - v12;
  if ((unint64_t)a1 >> 62)
    goto LABEL_38;
  v13 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v13)
  {
    v76 = a1 & 0xC000000000000001;
    v14 = &_swiftEmptyArrayStorage;
    v15 = 4;
    v70 = (void *)0x800000010006E6A0;
    v73 = a1;
    v74 = v9;
    v78 = v7;
    v75 = v8;
    v72 = v13;
    while (1)
    {
      v16 = v76
          ? (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v15 - 4, a1)
          : (char *)*(id *)(a1 + 8 * v15);
      v7 = v16;
      v8 = v15 - 3;
      if (__OFADD__(v15 - 4, 1))
        break;
      v17 = objc_msgSend(v16, "cityName");
      if (!v17)
        v17 = objc_msgSend(v7, "displayString");
      v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
      v20 = v19;

      v21 = objc_msgSend(v7, "timeZoneName");
      v79 = v15 - 3;
      v80 = v14;
      if (!v21)
        goto LABEL_19;
      v22 = v21;
      v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
      v24 = v23;

      v25 = objc_msgSend(v7, "latitude");
      if (!v25)
        goto LABEL_18;
      v26 = v25;
      v69 = v18;
      v27 = objc_msgSend(v7, "longditude");
      if (!v27)
      {

LABEL_18:
        swift_bridgeObjectRelease(v24);
LABEL_19:
        swift_bridgeObjectRelease(v20);
        v83 = 0;
        v84 = 0xE000000000000000;
        _StringGuts.grow(_:)(62);
        v32._countAndFlagsBits = 0xD00000000000002ELL;
        v32._object = v70;
        String.append(_:)(v32);
        v33 = objc_msgSend(v7, "cityName");
        if (v33)
        {
          v34 = v33;
          v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
          v37 = v36;

        }
        else
        {
          v35 = 0;
          v37 = 0;
        }
        v81 = v35;
        v82 = v37;
        v38 = sub_1000041D8(&qword_100085078);
        v39._countAndFlagsBits = String.init<A>(describing:)(&v81, v38);
        object = v39._object;
        String.append(_:)(v39);
        swift_bridgeObjectRelease(object);
        v41._countAndFlagsBits = 0x6F7A656D6974202CLL;
        v41._object = (void *)0xEC000000203A656ELL;
        String.append(_:)(v41);
        v42 = objc_msgSend(v7, "timeZoneName");
        if (v42)
        {
          v43 = v42;
          v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
          v46 = v45;

        }
        else
        {
          v44 = 0;
          v46 = 0;
        }
        v47 = type metadata accessor for WidgetUtilities();
        v81 = v44;
        v82 = v46;
        v48._countAndFlagsBits = String.init<A>(describing:)(&v81, v38);
        v49 = v48._object;
        String.append(_:)(v48);
        swift_bridgeObjectRelease(v49);
        v14 = (_QWORD *)v84;
        (*(void (**)(uint64_t, unint64_t))(v47 + 80))(v83, v84);
        v50 = 1;
        goto LABEL_28;
      }
      v28 = v27;
      v67 = v3;
      v29 = objc_msgSend(v7, "abbreviation");
      if (v29)
      {
        v30 = v29;
        v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
        v14 = v31;

      }
      else
      {
        v66 = 0;
        v14 = (_QWORD *)0xE000000000000000;
      }
      v3 = v67;
      objc_msgSend(v26, "doubleValue", v65);
      v52 = v51;
      objc_msgSend(v28, "doubleValue");
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t, unint64_t, double, double))(*(_QWORD *)v65 + 192))(v69, v20, v66, v14, v71, v24, 0x372D544D47, 0xE500000000000000, v52, v53);

      swift_bridgeObjectRelease(v20);
      swift_bridgeObjectRelease(v24);
      v50 = 0;
LABEL_28:
      swift_bridgeObjectRelease(v14);
      v54 = v74;
      v55 = (uint64_t)v78;
      v56 = v50;
      v57 = v75;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v74 + 56))(v78, v56, 1, v75);
      if (v3)
      {
        swift_bridgeObjectRelease(v80);
        swift_bridgeObjectRelease(v73);

        return v14;
      }

      v58 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v55, 1, v57) == 1;
      a1 = v73;
      v14 = v80;
      if (v58)
      {
        sub_1000106A4(v55, &qword_100085070);
        v9 = v72;
      }
      else
      {
        v59 = v68;
        sub_1000106E0(v55, v68, type metadata accessor for WorldClockCity);
        sub_1000106E0(v59, v77, type metadata accessor for WorldClockCity);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v14);
        v9 = v72;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          v14 = (_QWORD *)sub_10000C964(0, v14[2] + 1, 1, v14, &qword_100084838, type metadata accessor for WorldClockCity);
        v62 = v14[2];
        v61 = v14[3];
        if (v62 >= v61 >> 1)
          v14 = (_QWORD *)sub_10000C964(v61 > 1, v62 + 1, 1, v14, &qword_100084838, type metadata accessor for WorldClockCity);
        v14[2] = v62 + 1;
        sub_1000106E0(v77, (uint64_t)v14+ ((*(unsigned __int8 *)(v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80))+ *(_QWORD *)(v54 + 72) * v62, type metadata accessor for WorldClockCity);
      }
      ++v15;
      if (v79 == v9)
      {
        swift_bridgeObjectRelease(a1);
        return v14;
      }
    }
    __break(1u);
LABEL_38:
    if (a1 < 0)
      v63 = a1;
    else
      v63 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v13 = _CocoaArrayWrapper.endIndex.getter(v63);
  }
  swift_bridgeObjectRelease(a1);
  return &_swiftEmptyArrayStorage;
}

uint64_t sub_10000D9B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000041D8(&qword_100084810);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10000D9FC()
{
  unint64_t result;

  result = qword_100084850;
  if (!qword_100084850)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100084850);
  }
  return result;
}

void type metadata accessor for ComparisonResult()
{
  unint64_t ForeignTypeMetadata;
  uint64_t v1;

  if (!qword_100085050)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, &unk_100081B50);
    if (!v1)
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_100085050);
  }
}

uint64_t sub_10000DA94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  unsigned int (*v45)(uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  char v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  int *v50;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000041D8(&qword_100085060);
  __chkstk_darwin(v8);
  v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000041D8(&qword_100084810);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v49 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v49 - v18;
  if ((static Date.== infix(_:_:)(a1, a2) & 1) == 0)
    goto LABEL_3;
  v20 = type metadata accessor for WorldClockCity(0);
  if (*(unsigned __int8 *)(a1 + *(int *)(v20 + 20)) != *(unsigned __int8 *)(a2 + *(int *)(v20 + 20)))
    goto LABEL_3;
  v23 = (int *)v20;
  v24 = *(int *)(v20 + 24);
  v25 = *(_QWORD *)(a1 + v24);
  v26 = *(_QWORD *)(a1 + v24 + 8);
  v27 = (uint64_t *)(a2 + v24);
  v28 = *v27;
  v29 = v27[1];
  v30 = v25 == *v27 && v26 == v29;
  v50 = v23;
  if (v30
    || (v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v26, v28, v29, 0), v23 = v50, v21 = 0, (v31 & 1) != 0))
  {
    v32 = v23[7];
    v33 = *(_QWORD *)(a1 + v32);
    v34 = *(_QWORD *)(a1 + v32 + 8);
    v35 = (_QWORD *)(a2 + v32);
    v36 = v35[1];
    if (v33 == *v35 && v34 == v36)
      goto LABEL_14;
    v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v34, *v35, v36, 0);
    v23 = v50;
    v21 = 0;
    if ((v37 & 1) != 0)
    {
LABEL_14:
      v38 = v23[8];
      v39 = *(_QWORD *)(a1 + v38);
      v40 = *(_QWORD *)(a1 + v38 + 8);
      v41 = (_QWORD *)(a2 + v38);
      v42 = v41[1];
      if (v39 == *v41 && v40 == v42)
        goto LABEL_17;
      v43 = _stringCompareWithSmolCheck(_:_:expecting:)(v39, v40, *v41, v42, 0);
      v23 = v50;
      v21 = 0;
      if ((v43 & 1) != 0)
      {
LABEL_17:
        if ((static Date.== infix(_:_:)(a1 + v23[9], a2 + v23[9]) & 1) == 0
          || (static Date.== infix(_:_:)(a1 + v50[10], a2 + v50[10]) & 1) == 0)
        {
          goto LABEL_3;
        }
        sub_10000C91C(a1 + v50[11], (uint64_t)v19);
        sub_10000C91C(a2 + v50[11], (uint64_t)v17);
        v44 = (uint64_t)&v10[*(int *)(v8 + 48)];
        sub_10000C91C((uint64_t)v19, (uint64_t)v10);
        v49 = v44;
        sub_10000C91C((uint64_t)v17, v44);
        v45 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
        if (v45((uint64_t)v10, 1, v4) == 1)
        {
          sub_1000106A4((uint64_t)v17, &qword_100084810);
          sub_1000106A4((uint64_t)v19, &qword_100084810);
          if (v45(v49, 1, v4) == 1)
          {
            sub_1000106A4((uint64_t)v10, &qword_100084810);
            goto LABEL_25;
          }
        }
        else
        {
          sub_10000C91C((uint64_t)v10, (uint64_t)v14);
          if (v45(v49, 1, v4) != 1)
          {
            (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v49, v4);
            v46 = sub_10000D36C(&qword_100085068, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
            v47 = dispatch thunk of static Equatable.== infix(_:_:)(v14, v7, v4, v46);
            v48 = *(void (**)(char *, uint64_t))(v5 + 8);
            v48(v7, v4);
            sub_1000106A4((uint64_t)v17, &qword_100084810);
            sub_1000106A4((uint64_t)v19, &qword_100084810);
            v48(v14, v4);
            sub_1000106A4((uint64_t)v10, &qword_100084810);
            if ((v47 & 1) != 0)
            {
LABEL_25:
              if (*(unsigned __int8 *)(a1 + v50[12]) == *(unsigned __int8 *)(a2 + v50[12]))
              {
                v21 = *(_BYTE *)(a1 + v50[13]) ^ *(_BYTE *)(a2 + v50[13]) ^ 1;
                return v21 & 1;
              }
            }
LABEL_3:
            v21 = 0;
            return v21 & 1;
          }
          sub_1000106A4((uint64_t)v17, &qword_100084810);
          sub_1000106A4((uint64_t)v19, &qword_100084810);
          (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);
        }
        sub_1000106A4((uint64_t)v10, &qword_100085060);
        goto LABEL_3;
      }
    }
  }
  return v21 & 1;
}

uint64_t type metadata accessor for DateTimeEntry(uint64_t a1)
{
  return sub_10000DEFC(a1, (uint64_t *)&unk_100088AD0, (uint64_t)&nominal type descriptor for DateTimeEntry);
}

uint64_t type metadata accessor for AlarmDataProvider()
{
  return objc_opt_self(_TtC16WorldClockWidget17AlarmDataProvider);
}

uint64_t type metadata accessor for AlarmEntry(uint64_t a1)
{
  return sub_10000DEFC(a1, qword_100088AE0, (uint64_t)&nominal type descriptor for AlarmEntry);
}

uint64_t sub_10000DEFC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

uint64_t sub_10000DF30(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10000DF74(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_10000DFAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000041D8(&qword_100084810);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_10000DFF4(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000818A0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 8)
    return 8;
  else
    return v3;
}

uint64_t sub_10000E03C()
{
  return sub_10000D36C(&qword_100084818, type metadata accessor for WorldClockEntry, (uint64_t)&unk_10006B208);
}

void *sub_10000E068()
{
  return &protocol witness table for String;
}

uint64_t sub_10000E074()
{
  return sub_10000D36C(qword_1000848B8, type metadata accessor for WorldClockCity, (uint64_t)&unk_10006B328);
}

uint64_t sub_10000E0A0()
{
  return sub_10000D36C(&qword_100084870, type metadata accessor for DateTimeEntry, (uint64_t)&unk_10006B3A8);
}

uint64_t sub_10000E0CC()
{
  return sub_10000D36C(&qword_100084888, type metadata accessor for AlarmEntry, (uint64_t)&unk_10006B458);
}

unint64_t sub_10000E0FC()
{
  unint64_t result;

  result = qword_1000848E0;
  if (!qword_1000848E0)
  {
    result = swift_getWitnessTable(&unk_10006B488, &type metadata for AlarmState);
    atomic_store(result, (unint64_t *)&qword_1000848E0);
  }
  return result;
}

uint64_t type metadata accessor for WorldClockBaseProvider()
{
  return objc_opt_self(_TtC16WorldClockWidget22WorldClockBaseProvider);
}

uint64_t type metadata accessor for WorldClockSingleProvider()
{
  return objc_opt_self(_TtC16WorldClockWidget24WorldClockSingleProvider);
}

uint64_t type metadata accessor for WorldClockMultiProvider()
{
  return objc_opt_self(_TtC16WorldClockWidget23WorldClockMultiProvider);
}

_QWORD *sub_10000E1A0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = *(_QWORD *)((char *)a2 + v8);
    *(_QWORD *)((char *)a1 + v8) = v10;
    *((_BYTE *)a1 + v9) = *((_BYTE *)a2 + v9);
    swift_bridgeObjectRetain(v10);
  }
  return a1;
}

uint64_t sub_10000E234(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20)));
}

uint64_t sub_10000E278(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v9;
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  swift_bridgeObjectRetain(v9);
  return a1;
}

uint64_t sub_10000E2E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a2 + v7);
  v9 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_10000E358(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  return a1;
}

uint64_t sub_10000E3BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  swift_bridgeObjectRelease(v8);
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_10000E42C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10000E438);
}

uint64_t sub_10000E438(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10000E4B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10000E4C0);
}

uint64_t sub_10000E4C0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_10000E538(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[2] = &unk_10006B5B8;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

char *sub_10000E5B8(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v29 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v29 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v29);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v9(a1, a2, v7);
    v10 = a3[6];
    a1[a3[5]] = a2[a3[5]];
    v11 = &a1[v10];
    v12 = &a2[v10];
    v13 = *((_QWORD *)v12 + 1);
    *(_QWORD *)v11 = *(_QWORD *)v12;
    *((_QWORD *)v11 + 1) = v13;
    v14 = a3[7];
    v15 = a3[8];
    v16 = &a1[v14];
    v17 = &a2[v14];
    v18 = *((_QWORD *)v17 + 1);
    *(_QWORD *)v16 = *(_QWORD *)v17;
    *((_QWORD *)v16 + 1) = v18;
    v19 = &a1[v15];
    v20 = &a2[v15];
    v21 = *((_QWORD *)v20 + 1);
    *(_QWORD *)v19 = *(_QWORD *)v20;
    *((_QWORD *)v19 + 1) = v21;
    v22 = a3[9];
    v23 = &a1[v22];
    v24 = &a2[v22];
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v21);
    v9(v23, v24, v7);
    v9(&a1[a3[10]], &a2[a3[10]], v7);
    v25 = a3[11];
    v26 = &a1[v25];
    v27 = &a2[v25];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(&a2[v25], 1, v7))
    {
      v28 = sub_1000041D8(&qword_100084810);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      v9(v26, v27, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v26, 0, 1, v7);
    }
    v30 = a3[13];
    a1[a3[12]] = a2[a3[12]];
    a1[v30] = a2[v30];
  }
  return a1;
}

uint64_t sub_10000E758(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  void (*v8)(uint64_t, uint64_t);

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v8 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v8(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8] + 8));
  v8(a1 + a2[9], v4);
  v8(a1 + a2[10], v4);
  v6 = a1 + a2[11];
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v8)(v6, v4);
  return result;
}

char *sub_10000E848(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 16);
  v8(a1, a2, v6);
  v9 = a3[6];
  a1[a3[5]] = a2[a3[5]];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = *((_QWORD *)v11 + 1);
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *((_QWORD *)v10 + 1) = v12;
  v13 = a3[7];
  v14 = a3[8];
  v15 = &a1[v13];
  v16 = &a2[v13];
  v17 = *((_QWORD *)v16 + 1);
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *((_QWORD *)v15 + 1) = v17;
  v18 = &a1[v14];
  v19 = &a2[v14];
  v20 = *((_QWORD *)v19 + 1);
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *((_QWORD *)v18 + 1) = v20;
  v21 = a3[9];
  v22 = &a1[v21];
  v23 = &a2[v21];
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v20);
  v8(v22, v23, v6);
  v8(&a1[a3[10]], &a2[a3[10]], v6);
  v24 = a3[11];
  v25 = &a1[v24];
  v26 = &a2[v24];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(&a2[v24], 1, v6))
  {
    v27 = sub_1000041D8(&qword_100084810);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    v8(v25, v26, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v25, 0, 1, v6);
  }
  v28 = a3[13];
  a1[a3[12]] = a2[a3[12]];
  a1[v28] = a2[v28];
  return a1;
}

char *sub_10000E9BC(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t (*v27)(const void *, uint64_t, uint64_t);
  int v28;
  int v29;
  uint64_t v30;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  a1[a3[5]] = a2[a3[5]];
  v9 = a3[6];
  v10 = &a1[v9];
  v11 = &a2[v9];
  *(_QWORD *)v10 = *(_QWORD *)v11;
  v12 = *((_QWORD *)v11 + 1);
  v13 = *((_QWORD *)v10 + 1);
  *((_QWORD *)v10 + 1) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = a3[7];
  v15 = &a1[v14];
  v16 = &a2[v14];
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v17 = *((_QWORD *)v16 + 1);
  v18 = *((_QWORD *)v15 + 1);
  *((_QWORD *)v15 + 1) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  v19 = a3[8];
  v20 = &a1[v19];
  v21 = &a2[v19];
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v22 = *((_QWORD *)v21 + 1);
  v23 = *((_QWORD *)v20 + 1);
  *((_QWORD *)v20 + 1) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  v8(&a1[a3[9]], &a2[a3[9]], v6);
  v8(&a1[a3[10]], &a2[a3[10]], v6);
  v24 = a3[11];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v27 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  v28 = v27(&a1[v24], 1, v6);
  v29 = v27(v26, 1, v6);
  if (!v28)
  {
    if (!v29)
    {
      v8(v25, v26, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v25, v6);
    goto LABEL_6;
  }
  if (v29)
  {
LABEL_6:
    v30 = sub_1000041D8(&qword_100084810);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v25, v26, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v25, 0, 1, v6);
LABEL_7:
  a1[a3[12]] = a2[a3[12]];
  a1[a3[13]] = a2[a3[13]];
  return a1;
}

char *sub_10000EBAC(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  v9 = a3[6];
  a1[a3[5]] = a2[a3[5]];
  *(_OWORD *)&a1[v9] = *(_OWORD *)&a2[v9];
  v10 = a3[8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  *(_OWORD *)&a1[v10] = *(_OWORD *)&a2[v10];
  v8(&a1[a3[9]], &a2[a3[9]], v6);
  v8(&a1[a3[10]], &a2[a3[10]], v6);
  v11 = a3[11];
  v12 = &a1[v11];
  v13 = &a2[v11];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(&a2[v11], 1, v6))
  {
    v14 = sub_1000041D8(&qword_100084810);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v8(v12, v13, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v12, 0, 1, v6);
  }
  v15 = a3[13];
  a1[a3[12]] = a2[a3[12]];
  a1[v15] = a2[v15];
  return a1;
}

char *sub_10000ECE4(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t (*v30)(const void *, uint64_t, uint64_t);
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = a3[6];
  a1[a3[5]] = a2[a3[5]];
  v10 = &a1[v9];
  v11 = (uint64_t *)&a2[v9];
  v13 = *v11;
  v12 = v11[1];
  v14 = *((_QWORD *)v10 + 1);
  *(_QWORD *)v10 = v13;
  *((_QWORD *)v10 + 1) = v12;
  swift_bridgeObjectRelease(v14);
  v15 = a3[7];
  v16 = &a1[v15];
  v17 = (uint64_t *)&a2[v15];
  v19 = *v17;
  v18 = v17[1];
  v20 = *((_QWORD *)v16 + 1);
  *(_QWORD *)v16 = v19;
  *((_QWORD *)v16 + 1) = v18;
  swift_bridgeObjectRelease(v20);
  v21 = a3[8];
  v22 = &a1[v21];
  v23 = (uint64_t *)&a2[v21];
  v25 = *v23;
  v24 = v23[1];
  v26 = *((_QWORD *)v22 + 1);
  *(_QWORD *)v22 = v25;
  *((_QWORD *)v22 + 1) = v24;
  swift_bridgeObjectRelease(v26);
  v8(&a1[a3[9]], &a2[a3[9]], v6);
  v8(&a1[a3[10]], &a2[a3[10]], v6);
  v27 = a3[11];
  v28 = &a1[v27];
  v29 = &a2[v27];
  v30 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  v31 = v30(&a1[v27], 1, v6);
  v32 = v30(v29, 1, v6);
  if (!v31)
  {
    if (!v32)
    {
      v8(v28, v29, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v28, v6);
    goto LABEL_6;
  }
  if (v32)
  {
LABEL_6:
    v33 = sub_1000041D8(&qword_100084810);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v28, v29, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v28, 0, 1, v6);
LABEL_7:
  v34 = a3[13];
  a1[a3[12]] = a2[a3[12]];
  a1[v34] = a2[v34];
  return a1;
}

uint64_t sub_10000EE9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10000EEA8);
}

uint64_t sub_10000EEA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = sub_1000041D8(&qword_100084810);
    v10 = a1 + *(int *)(a3 + 44);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_10000EF58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10000EF64);
}

uint64_t sub_10000EF64(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
      return result;
    }
    v10 = sub_1000041D8(&qword_100084810);
    v12 = a1 + *(int *)(a4 + 44);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_10000F010(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[10];

  v2 = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = &unk_10006B5B8;
    v6[2] = &unk_10006B608;
    v6[3] = &unk_10006B608;
    v6[4] = &unk_10006B608;
    v6[5] = v6[0];
    v6[6] = v6[0];
    sub_10000F0B4(319);
    if (v5 <= 0x3F)
    {
      v6[7] = *(_QWORD *)(v4 - 8) + 64;
      v6[8] = &unk_10006B5B8;
      v6[9] = &unk_10006B5B8;
      swift_initStructMetadata(a1, 256, 10, v6, a1 + 16);
    }
  }
}

void sub_10000F0B4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100084CF0)
  {
    v2 = type metadata accessor for Date(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100084CF0);
  }
}

uint64_t type metadata accessor for DateTimeProvider()
{
  return objc_opt_self(_TtC16WorldClockWidget16DateTimeProvider);
}

_QWORD *sub_10000F128(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  }
  return a1;
}

uint64_t sub_10000F1E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for TimeZone(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t sub_10000F240(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for TimeZone(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_10000F2D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for TimeZone(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_10000F360(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for TimeZone(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_10000F3F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for TimeZone(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_10000F480(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10000F48C);
}

uint64_t sub_10000F48C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for TimeZone(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
  if (v14 >= 2)
    return ((v14 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t sub_10000F544(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10000F550);
}

uint64_t sub_10000F550(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for TimeZone(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 24)) = a2 + 1;
  return result;
}

uint64_t sub_10000F5F4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[3];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for TimeZone(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      v5[2] = &unk_10006B5B8;
      swift_initStructMetadata(a1, 256, 3, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AlarmProvider()
{
  return &type metadata for AlarmProvider;
}

char *sub_10000F690(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  uint64_t v10;
  char *v11;
  char *v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v9(a1, a2, v7);
    v10 = a3[5];
    v11 = &a1[v10];
    v12 = &a2[v10];
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
    if (v13(&a2[v10], 1, v7))
    {
      v14 = sub_1000041D8(&qword_100084810);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v9(v11, v12, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v11, 0, 1, v7);
    }
    v16 = a3[6];
    v17 = &a1[v16];
    v18 = &a2[v16];
    if (v13(&a2[v16], 1, v7))
    {
      v19 = sub_1000041D8(&qword_100084810);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      v9(v17, v18, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v17, 0, 1, v7);
    }
    v20 = a3[8];
    a1[a3[7]] = a2[a3[7]];
    a1[v20] = a2[v20];
    v21 = a3[9];
    v22 = a3[10];
    v23 = &a1[v21];
    v24 = &a2[v21];
    v25 = *((_QWORD *)v24 + 1);
    *v23 = *(_QWORD *)v24;
    v23[1] = v25;
    v26 = &a1[v22];
    v27 = &a2[v22];
    v28 = *((_QWORD *)v27 + 1);
    *v26 = *(_QWORD *)v27;
    v26[1] = v28;
    v29 = a3[11];
    v30 = a3[12];
    v31 = &a1[v29];
    v32 = &a2[v29];
    v33 = *((_QWORD *)v32 + 1);
    *v31 = *(_QWORD *)v32;
    v31[1] = v33;
    v34 = &a1[v30];
    v35 = &a2[v30];
    v36 = *((_QWORD *)v35 + 1);
    *v34 = *(_QWORD *)v35;
    v34[1] = v36;
    v37 = a3[14];
    a1[a3[13]] = a2[a3[13]];
    a1[v37] = a2[v37];
    v38 = a3[15];
    v39 = a3[16];
    v40 = &a1[v38];
    v41 = &a2[v38];
    v42 = *((_QWORD *)v41 + 1);
    *v40 = *(_QWORD *)v41;
    v40[1] = v42;
    a1[v39] = a2[v39];
    a1[a3[17]] = a2[a3[17]];
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v36);
    swift_bridgeObjectRetain(v42);
  }
  return a1;
}

uint64_t sub_10000F8C0(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(a1, v4);
  v7 = a1 + a2[5];
  v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v8(v7, 1, v4))
    v6(v7, v4);
  v9 = a1 + a2[6];
  if (!v8(v9, 1, v4))
    v6(v9, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[9] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[10] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[12] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[15] + 8));
}

char *sub_10000F9B0(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 16);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v12(&a2[v9], 1, v6))
  {
    v13 = sub_1000041D8(&qword_100084810);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v8(v10, v11, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  }
  v14 = a3[6];
  v15 = &a1[v14];
  v16 = &a2[v14];
  if (v12(&a2[v14], 1, v6))
  {
    v17 = sub_1000041D8(&qword_100084810);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v8(v15, v16, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v15, 0, 1, v6);
  }
  v18 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  a1[v18] = a2[v18];
  v19 = a3[9];
  v20 = a3[10];
  v21 = &a1[v19];
  v22 = &a2[v19];
  v23 = *((_QWORD *)v22 + 1);
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *((_QWORD *)v21 + 1) = v23;
  v24 = &a1[v20];
  v25 = &a2[v20];
  v26 = *((_QWORD *)v25 + 1);
  *(_QWORD *)v24 = *(_QWORD *)v25;
  *((_QWORD *)v24 + 1) = v26;
  v27 = a3[11];
  v28 = a3[12];
  v29 = &a1[v27];
  v30 = &a2[v27];
  v31 = *((_QWORD *)v30 + 1);
  *(_QWORD *)v29 = *(_QWORD *)v30;
  *((_QWORD *)v29 + 1) = v31;
  v32 = &a1[v28];
  v33 = &a2[v28];
  v34 = *((_QWORD *)v33 + 1);
  *(_QWORD *)v32 = *(_QWORD *)v33;
  *((_QWORD *)v32 + 1) = v34;
  v35 = a3[14];
  a1[a3[13]] = a2[a3[13]];
  a1[v35] = a2[v35];
  v36 = a3[15];
  v37 = a3[16];
  v38 = &a1[v36];
  v39 = &a2[v36];
  v40 = *((_QWORD *)v39 + 1);
  *(_QWORD *)v38 = *(_QWORD *)v39;
  *((_QWORD *)v38 + 1) = v40;
  a1[v37] = a2[v37];
  a1[a3[17]] = a2[a3[17]];
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRetain(v40);
  return a1;
}

char *sub_10000FBB4(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t (*v12)(const void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  v13 = v12(&a1[v9], 1, v6);
  v14 = v12(v11, 1, v6);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v11, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
LABEL_6:
    v15 = sub_1000041D8(&qword_100084810);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  v8(v10, v11, v6);
LABEL_7:
  v16 = a3[6];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = v12(&a1[v16], 1, v6);
  v20 = v12(v18, 1, v6);
  if (!v19)
  {
    if (!v20)
    {
      v8(v17, v18, v6);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v17, v6);
    goto LABEL_12;
  }
  if (v20)
  {
LABEL_12:
    v21 = sub_1000041D8(&qword_100084810);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v17, v18, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v17, 0, 1, v6);
LABEL_13:
  a1[a3[7]] = a2[a3[7]];
  a1[a3[8]] = a2[a3[8]];
  v22 = a3[9];
  v23 = &a1[v22];
  v24 = &a2[v22];
  *(_QWORD *)v23 = *(_QWORD *)v24;
  v25 = *((_QWORD *)v24 + 1);
  v26 = *((_QWORD *)v23 + 1);
  *((_QWORD *)v23 + 1) = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease(v26);
  v27 = a3[10];
  v28 = &a1[v27];
  v29 = &a2[v27];
  *(_QWORD *)v28 = *(_QWORD *)v29;
  v30 = *((_QWORD *)v29 + 1);
  v31 = *((_QWORD *)v28 + 1);
  *((_QWORD *)v28 + 1) = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  v32 = a3[11];
  v33 = &a1[v32];
  v34 = &a2[v32];
  *(_QWORD *)v33 = *(_QWORD *)v34;
  v35 = *((_QWORD *)v34 + 1);
  v36 = *((_QWORD *)v33 + 1);
  *((_QWORD *)v33 + 1) = v35;
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRelease(v36);
  v37 = a3[12];
  v38 = &a1[v37];
  v39 = &a2[v37];
  *(_QWORD *)v38 = *(_QWORD *)v39;
  v40 = *((_QWORD *)v39 + 1);
  v41 = *((_QWORD *)v38 + 1);
  *((_QWORD *)v38 + 1) = v40;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRelease(v41);
  a1[a3[13]] = a2[a3[13]];
  a1[a3[14]] = a2[a3[14]];
  v42 = a3[15];
  v43 = &a1[v42];
  v44 = &a2[v42];
  *(_QWORD *)v43 = *(_QWORD *)v44;
  v45 = *((_QWORD *)v44 + 1);
  v46 = *((_QWORD *)v43 + 1);
  *((_QWORD *)v43 + 1) = v45;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRelease(v46);
  a1[a3[16]] = a2[a3[16]];
  a1[a3[17]] = a2[a3[17]];
  return a1;
}

char *sub_10000FEA8(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v12(&a2[v9], 1, v6))
  {
    v13 = sub_1000041D8(&qword_100084810);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v8(v10, v11, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  }
  v14 = a3[6];
  v15 = &a1[v14];
  v16 = &a2[v14];
  if (v12(&a2[v14], 1, v6))
  {
    v17 = sub_1000041D8(&qword_100084810);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v8(v15, v16, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v15, 0, 1, v6);
  }
  v18 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  a1[v18] = a2[v18];
  v19 = a3[10];
  *(_OWORD *)&a1[a3[9]] = *(_OWORD *)&a2[a3[9]];
  *(_OWORD *)&a1[v19] = *(_OWORD *)&a2[v19];
  v20 = a3[12];
  *(_OWORD *)&a1[a3[11]] = *(_OWORD *)&a2[a3[11]];
  *(_OWORD *)&a1[v20] = *(_OWORD *)&a2[v20];
  v21 = a3[14];
  a1[a3[13]] = a2[a3[13]];
  a1[v21] = a2[v21];
  v22 = a3[16];
  *(_OWORD *)&a1[a3[15]] = *(_OWORD *)&a2[a3[15]];
  a1[v22] = a2[v22];
  a1[a3[17]] = a2[a3[17]];
  return a1;
}

char *sub_100010060(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t (*v12)(const void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  v13 = v12(&a1[v9], 1, v6);
  v14 = v12(v11, 1, v6);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v11, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
LABEL_6:
    v15 = sub_1000041D8(&qword_100084810);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  v8(v10, v11, v6);
LABEL_7:
  v16 = a3[6];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = v12(&a1[v16], 1, v6);
  v20 = v12(v18, 1, v6);
  if (!v19)
  {
    if (!v20)
    {
      v8(v17, v18, v6);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v17, v6);
    goto LABEL_12;
  }
  if (v20)
  {
LABEL_12:
    v21 = sub_1000041D8(&qword_100084810);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v17, v18, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v17, 0, 1, v6);
LABEL_13:
  v22 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  a1[v22] = a2[v22];
  v23 = a3[9];
  v24 = &a1[v23];
  v25 = (uint64_t *)&a2[v23];
  v27 = *v25;
  v26 = v25[1];
  v28 = *((_QWORD *)v24 + 1);
  *(_QWORD *)v24 = v27;
  *((_QWORD *)v24 + 1) = v26;
  swift_bridgeObjectRelease(v28);
  v29 = a3[10];
  v30 = &a1[v29];
  v31 = (uint64_t *)&a2[v29];
  v33 = *v31;
  v32 = v31[1];
  v34 = *((_QWORD *)v30 + 1);
  *(_QWORD *)v30 = v33;
  *((_QWORD *)v30 + 1) = v32;
  swift_bridgeObjectRelease(v34);
  v35 = a3[11];
  v36 = &a1[v35];
  v37 = (uint64_t *)&a2[v35];
  v39 = *v37;
  v38 = v37[1];
  v40 = *((_QWORD *)v36 + 1);
  *(_QWORD *)v36 = v39;
  *((_QWORD *)v36 + 1) = v38;
  swift_bridgeObjectRelease(v40);
  v41 = a3[12];
  v42 = &a1[v41];
  v43 = (uint64_t *)&a2[v41];
  v45 = *v43;
  v44 = v43[1];
  v46 = *((_QWORD *)v42 + 1);
  *(_QWORD *)v42 = v45;
  *((_QWORD *)v42 + 1) = v44;
  swift_bridgeObjectRelease(v46);
  v47 = a3[14];
  a1[a3[13]] = a2[a3[13]];
  a1[v47] = a2[v47];
  v48 = a3[15];
  v49 = &a1[v48];
  v50 = (uint64_t *)&a2[v48];
  v52 = *v50;
  v51 = v50[1];
  v53 = *((_QWORD *)v49 + 1);
  *(_QWORD *)v49 = v52;
  *((_QWORD *)v49 + 1) = v51;
  swift_bridgeObjectRelease(v53);
  v54 = a3[17];
  a1[a3[16]] = a2[a3[16]];
  a1[v54] = a2[v54];
  return a1;
}

uint64_t sub_1000102F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100010304);
}

uint64_t sub_100010304(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  int v15;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_1000041D8(&qword_100084810);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 36) + 8);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  v15 = v14 - 1;
  if (v15 < 0)
    v15 = -1;
  return (v15 + 1);
}

uint64_t sub_1000103C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000103CC);
}

uint64_t sub_1000103CC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = sub_1000041D8(&qword_100084810);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 36) + 8) = a2;
  return result;
}

void sub_100010478(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  v2 = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v6 = *(_QWORD *)(v2 - 8) + 64;
    sub_10000F0B4(319);
    if (v5 <= 0x3F)
    {
      v7 = *(_QWORD *)(v4 - 8) + 64;
      v8 = v7;
      v9 = &unk_10006B5B8;
      v10 = &unk_10006B5B8;
      v11 = &unk_10006B6A0;
      v12 = &unk_10006B6A0;
      v13 = &unk_10006B6A0;
      v14 = &unk_10006B6A0;
      v15 = &unk_10006B5B8;
      v16 = &unk_10006B5B8;
      v17 = &unk_10006B6A0;
      v18 = &unk_10006B5B8;
      v19 = &unk_10006B5B8;
      swift_initStructMetadata(a1, 256, 14, &v6, a1 + 16);
    }
  }
}

_BYTE *initializeBufferWithCopyOfBuffer for AlarmState(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for AlarmState(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AlarmState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_100010610 + 4 * byte_10006B10D[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_100010644 + 4 * byte_10006B108[v4]))();
}

uint64_t sub_100010644(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001064C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100010654);
  return result;
}

uint64_t sub_100010660(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100010668);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_10001066C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100010674(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100010680(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_100010688(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for AlarmState()
{
  return &type metadata for AlarmState;
}

uint64_t sub_1000106A4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_1000041D8(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000106E0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100010740@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v13;
  os_log_type_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = v1;
  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000041D8(&qword_1000850C0);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001DEA0(v2, (uint64_t)v10, &qword_1000850C0);
  if (swift_getEnumCaseMultiPayload(v10, v8) == 1)
  {
    v11 = type metadata accessor for WidgetFamily(0);
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, v10, v11);
  }
  else
  {
    v13 = *v10;
    v14 = static os_log_type_t.fault.getter();
    v15 = static Log.runtimeIssuesLog.getter();
    if (os_log_type_enabled(v15, v14))
    {
      v16 = swift_slowAlloc(12, -1);
      v17 = swift_slowAlloc(32, -1);
      v19 = v17;
      *(_DWORD *)v16 = 136315138;
      *(_QWORD *)(v16 + 4) = sub_10001DEE4((char *)0x6146746567646957, (char *)0xEC000000796C696DLL, &v19);
      _os_log_impl((void *)&_mh_execute_header, v15, v14, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", (uint8_t *)v16, 0xCu);
      swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(v7, v13);
    swift_release(v13);
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t sub_100010958()
{
  return EnvironmentValues.widgetFamily.getter();
}

uint64_t sub_100010978@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, _QWORD, uint64_t);
  uint64_t OpaqueTypeConformance2;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v51 = a1;
  v1 = sub_1000041D8(&qword_1000850C8);
  v46 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v46 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1000041D8(&qword_1000850D0);
  v48 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000041D8(&qword_1000850D8);
  v8 = *(_QWORD *)(v7 - 8);
  v49 = v7;
  v50 = v8;
  __chkstk_darwin(v7);
  v47 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10000DF74(0, &qword_1000850E0, ClocksSingleIntent_ptr);
  v11 = type metadata accessor for WorldClockSingleProvider();
  v52 = sub_1000042B4();
  v12 = type metadata accessor for WorldClockWidgetSingle.WidgetView(0);
  v13 = sub_10000D36C(&qword_1000850E8, type metadata accessor for WorldClockWidgetSingle.WidgetView, (uint64_t)&unk_10006B79C);
  v14 = sub_10000D36C(&qword_1000850F0, (uint64_t (*)(uint64_t))type metadata accessor for WorldClockSingleProvider, (uint64_t)&unk_10006B138);
  IntentConfiguration.init<A>(kind:intent:provider:content:)(0xD00000000000001ALL, 0x800000010006E760, v10, &v52, sub_100010DB8, 0, v10, v12, v11, v13, v14);
  v15 = LocalizedStringKey.init(stringLiteral:)(0x492079746943, 0xE600000000000000);
  v16 = Text.init(_:tableName:bundle:comment:)(v15);
  v18 = v17;
  v20 = v19;
  v22 = v21 & 1;
  v23 = sub_10001DDB4(&qword_1000850F8, &qword_1000850C8, (uint64_t)&protocol conformance descriptor for IntentConfiguration<A, B>);
  WidgetConfiguration.configurationDisplayName(_:)(v16, v18, v22, v20, v1, v23);
  sub_100010E24(v16, v18, v22);
  swift_bridgeObjectRelease(v20);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v3, v1);
  v24 = sub_1000041D8(&qword_100085100);
  v25 = type metadata accessor for WidgetFamily(0);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(_QWORD *)(v26 + 72);
  v28 = *(unsigned __int8 *)(v26 + 80);
  v29 = (v28 + 32) & ~v28;
  v30 = swift_allocObject(v24, v29 + 2 * v27, v28 | 7);
  *(_OWORD *)(v30 + 16) = xmmword_10006B750;
  v31 = v30 + v29;
  v32 = *(void (**)(uint64_t, _QWORD, uint64_t))(v26 + 104);
  v32(v31, enum case for WidgetFamily.systemSmall(_:), v25);
  v32(v31 + v27, enum case for WidgetFamily.accessoryInline(_:), v25);
  v52 = v1;
  v53 = v23;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v52, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 1);
  v34 = v47;
  WidgetConfiguration.supportedFamilies(_:)(v30, v4, OpaqueTypeConformance2);
  swift_bridgeObjectRelease(v30);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v6, v4);
  v35 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000003ALL, 0x800000010006E7D0);
  v36 = Text.init(_:tableName:bundle:comment:)(v35);
  v38 = v37;
  v40 = v39;
  v42 = v41 & 1;
  v52 = v4;
  v53 = OpaqueTypeConformance2;
  v43 = swift_getOpaqueTypeConformance2(&v52, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v44 = v49;
  WidgetConfiguration.description(_:)(v36, v38, v42, v40, v49, v43);
  sub_100010E24(v36, v38, v42);
  swift_bridgeObjectRelease(v40);
  return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v34, v44);
}

uint64_t sub_100010DB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000170F4(a1, type metadata accessor for WorldClockEntry, type metadata accessor for WorldClockWidgetSingle.WidgetView, a2);
}

uint64_t type metadata accessor for WorldClockWidgetSingle.WidgetView(uint64_t a1)
{
  return sub_10000DEFC(a1, (uint64_t *)&unk_100089910, (uint64_t)&nominal type descriptor for WorldClockWidgetSingle.WidgetView);
}

uint64_t sub_100010DE0(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_100010E24(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_release();
  else
    return swift_bridgeObjectRelease(a2);
}

uint64_t sub_100010E34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10001722C(a1, a2, type metadata accessor for WorldClockEntry, type metadata accessor for WorldClockWidgetSingle.WidgetView, a3);
}

uint64_t sub_100010E48()
{
  return sub_100012E18((unsigned int *)&enum case for WidgetFamily.systemSmall(_:), (unsigned int *)&enum case for WidgetFamily.accessoryInline(_:));
}

uint64_t sub_100010E5C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10000DF30(v1, a1, type metadata accessor for WorldClockEntry);
}

uint64_t sub_100010E80(uint64_t a1)
{
  uint64_t v1;

  return sub_100017398(a1, v1, type metadata accessor for WorldClockEntry);
}

uint64_t sub_100010EA0@<X0>(uint64_t a1@<X8>)
{
  return sub_100011A38((void (*)(_QWORD))type metadata accessor for WorldClockWidgetSingle.WidgetView, a1);
}

uint64_t sub_100010EAC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100010EB4(v1, a1);
}

uint64_t sub_100010EB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  int v29;
  uint64_t v30;
  id v31;
  void *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  char v36;
  char v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t OpaqueTypeConformance2;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;

  v83 = a2;
  v3 = sub_1000041D8(&qword_100085B10);
  __chkstk_darwin(v3);
  v75 = (uint64_t *)((char *)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_1000041D8(&qword_100085108);
  __chkstk_darwin(v5);
  v71 = (uint64_t *)((char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v80 = type metadata accessor for WorldClockWidgetViewSingle(0);
  __chkstk_darwin(v80);
  v74 = (uint64_t)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = sub_1000041D8(&qword_100085B30);
  v79 = *(_QWORD *)(v81 - 8);
  v8 = __chkstk_darwin(v81);
  v76 = (char *)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v78 = (char *)&v70 - v10;
  v84 = sub_1000041D8(&qword_100085B60);
  __chkstk_darwin(v84);
  v86 = (char *)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000041D8(&qword_100085AC8);
  __chkstk_darwin(v12);
  v14 = (char *)&v70 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for WorldClockEntry(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = type metadata accessor for CityInlineComplication(0);
  __chkstk_darwin(v82);
  v19 = (char *)&v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = sub_1000041D8(&qword_100085B68);
  v77 = *(_QWORD *)(v85 - 8);
  v20 = __chkstk_darwin(v85);
  v22 = (char *)&v70 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v24 = (char *)&v70 - v23;
  v25 = type metadata accessor for WidgetFamily(0);
  v26 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v28 = (char *)&v70 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for WorldClockWidgetSingle.WidgetView(0);
  sub_100010740((uint64_t)v28);
  v72 = v26;
  v73 = v25;
  v29 = (*(uint64_t (**)(char *, uint64_t))(v26 + 88))(v28, v25);
  LODWORD(v25) = enum case for WidgetFamily.accessoryInline(_:);
  sub_10000DF30(a1, (uint64_t)v17, type metadata accessor for WorldClockEntry);
  if (v29 == (_DWORD)v25)
  {
    v30 = v80;
    sub_10004E480((uint64_t)v17, (uint64_t)v19);
    v31 = objc_msgSend((id)objc_opt_self(MTUtilities), "widgetURL");
    if (v31)
    {
      v32 = v31;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      v33 = type metadata accessor for URL(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v14, 0, 1, v33);
    }
    else
    {
      v58 = ((uint64_t (*)(void))type metadata accessor for URL)();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v14, 1, 1, v58);
    }
    v59 = sub_10000D36C(&qword_100085960, type metadata accessor for CityInlineComplication, (uint64_t)&unk_10006D8D8);
    v60 = v82;
    View.widgetURL(_:)(v14, v82, v59);
    sub_1000106A4((uint64_t)v14, &qword_100085AC8);
    sub_10000D330((uint64_t)v19, type metadata accessor for CityInlineComplication);
    v61 = v77;
    v62 = v22;
    v63 = v85;
    (*(void (**)(char *, char *, uint64_t))(v77 + 32))(v24, v62, v85);
    v64 = v86;
    (*(void (**)(char *, char *, uint64_t))(v61 + 16))(v86, v24, v63);
    swift_storeEnumTagMultiPayload(v64, v84, 0);
    v87 = v60;
    v88 = v59;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v87, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
    v66 = type metadata accessor for ClockWidgetEnvironmentObject(255);
    v67 = sub_10000D36C(&qword_100085968, type metadata accessor for WorldClockWidgetViewSingle, (uint64_t)&unk_10006CD40);
    v68 = sub_10000D36C((unint64_t *)&qword_100085240, type metadata accessor for ClockWidgetEnvironmentObject, (uint64_t)&unk_10006DF68);
    v87 = v30;
    v88 = v66;
    v89 = v67;
    v90 = v68;
    v69 = swift_getOpaqueTypeConformance2(&v87, &opaque type descriptor for <<opaque return type of View.environment<A>(_:)>>, 1);
    _ConditionalContent<>.init(storage:)(v64, v63, v81, OpaqueTypeConformance2, v69);
    return (*(uint64_t (**)(char *, uint64_t))(v61 + 8))(v24, v63);
  }
  else
  {
    v34 = v71;
    sub_1000256FC(v71);
    v35 = sub_1000678C4();
    v37 = v36 & 1;
    v38 = v75;
    v39 = sub_100025814(v75);
    v40 = sub_1000258AC(v39);
    v42 = v74;
    sub_100026AE0((uint64_t)v17, (uint64_t)v34, v35, v37, (uint64_t)v38, v40, v41 & 1, v74);
    v43 = type metadata accessor for ClockWidgetEnvironmentObject(0);
    v44 = sub_100067DF8();
    v45 = sub_100067E00(v44);
    v46 = sub_10000D36C(&qword_100085968, type metadata accessor for WorldClockWidgetViewSingle, (uint64_t)&unk_10006CD40);
    v47 = sub_10000D36C((unint64_t *)&qword_100085240, type metadata accessor for ClockWidgetEnvironmentObject, (uint64_t)&unk_10006DF68);
    v48 = v76;
    v49 = v80;
    View.environment<A>(_:)(v45, v80, v43, v46, v47);
    swift_release(v45);
    sub_10000D330(v42, type metadata accessor for WorldClockWidgetViewSingle);
    v50 = v78;
    v51 = v79;
    v52 = v81;
    (*(void (**)(char *, char *, uint64_t))(v79 + 32))(v78, v48, v81);
    v53 = v86;
    (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v86, v50, v52);
    swift_storeEnumTagMultiPayload(v53, v84, 1);
    v54 = sub_10000D36C(&qword_100085960, type metadata accessor for CityInlineComplication, (uint64_t)&unk_10006D8D8);
    v87 = v82;
    v88 = v54;
    v55 = swift_getOpaqueTypeConformance2(&v87, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
    v87 = v49;
    v88 = v43;
    v89 = v46;
    v90 = v47;
    v56 = swift_getOpaqueTypeConformance2(&v87, &opaque type descriptor for <<opaque return type of View.environment<A>(_:)>>, 1);
    _ConditionalContent<>.init(storage:)(v53, v85, v52, v55, v56);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v50, v52);
    return (*(uint64_t (**)(char *, uint64_t))(v72 + 8))(v28, v73);
  }
}

uint64_t sub_100011588@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10001DE5C(a1, a2, &qword_100085108);
}

uint64_t sub_1000115A8@<X0>(uint64_t a1@<X8>)
{
  return sub_100010978(a1);
}

uint64_t sub_1000115BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t OpaqueTypeConformance2;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v48 = a1;
  v1 = sub_1000041D8(&qword_100085110);
  v43 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v43 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1000041D8(&qword_100085118);
  v45 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000041D8(&qword_100085120);
  v8 = *(_QWORD *)(v7 - 8);
  v46 = v7;
  v47 = v8;
  __chkstk_darwin(v7);
  v44 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10000DF74(0, &qword_1000850E0, ClocksSingleIntent_ptr);
  v11 = type metadata accessor for WorldClockSingleProvider();
  v49 = sub_1000042B4();
  v12 = type metadata accessor for WorldClockNonNumericWidgetSingle.WidgetView(0);
  v13 = sub_10000D36C(&qword_100085128, type metadata accessor for WorldClockNonNumericWidgetSingle.WidgetView, (uint64_t)&unk_10006B82C);
  v14 = sub_10000D36C(&qword_1000850F0, (uint64_t (*)(uint64_t))type metadata accessor for WorldClockSingleProvider, (uint64_t)&unk_10006B138);
  IntentConfiguration.init<A>(kind:intent:provider:content:)(0xD000000000000024, 0x800000010006E810, v10, &v49, sub_1000119E4, 0, v10, v12, v11, v13, v14);
  v15 = LocalizedStringKey.init(stringLiteral:)(0x49492079746943, 0xE700000000000000);
  v16 = Text.init(_:tableName:bundle:comment:)(v15);
  v18 = v17;
  v20 = v19;
  v22 = v21 & 1;
  v23 = sub_10001DDB4(&qword_100085130, &qword_100085110, (uint64_t)&protocol conformance descriptor for IntentConfiguration<A, B>);
  WidgetConfiguration.configurationDisplayName(_:)(v16, v18, v22, v20, v1, v23);
  sub_100010E24(v16, v18, v22);
  swift_bridgeObjectRelease(v20);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v3, v1);
  v24 = sub_1000041D8(&qword_100085100);
  v25 = type metadata accessor for WidgetFamily(0);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(unsigned __int8 *)(v26 + 80);
  v28 = (v27 + 32) & ~v27;
  v29 = swift_allocObject(v24, v28 + *(_QWORD *)(v26 + 72), v27 | 7);
  *(_OWORD *)(v29 + 16) = xmmword_10006B090;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v26 + 104))(v29 + v28, enum case for WidgetFamily.systemSmall(_:), v25);
  v49 = v1;
  v50 = v23;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v49, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 1);
  v31 = v44;
  WidgetConfiguration.supportedFamilies(_:)(v29, v4, OpaqueTypeConformance2);
  swift_bridgeObjectRelease(v29);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v6, v4);
  v32 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000003ALL, 0x800000010006E7D0);
  v33 = Text.init(_:tableName:bundle:comment:)(v32);
  v35 = v34;
  v37 = v36;
  v39 = v38 & 1;
  v49 = v4;
  v50 = OpaqueTypeConformance2;
  v40 = swift_getOpaqueTypeConformance2(&v49, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v41 = v46;
  WidgetConfiguration.description(_:)(v33, v35, v39, v37, v46, v40);
  sub_100010E24(v33, v35, v39);
  swift_bridgeObjectRelease(v37);
  return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v31, v41);
}

uint64_t sub_1000119E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000170F4(a1, type metadata accessor for WorldClockEntry, type metadata accessor for WorldClockNonNumericWidgetSingle.WidgetView, a2);
}

uint64_t type metadata accessor for WorldClockNonNumericWidgetSingle.WidgetView(uint64_t a1)
{
  return sub_10000DEFC(a1, (uint64_t *)&unk_100089920, (uint64_t)&nominal type descriptor for WorldClockNonNumericWidgetSingle.WidgetView);
}

uint64_t sub_100011A0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10001722C(a1, a2, type metadata accessor for WorldClockEntry, type metadata accessor for WorldClockNonNumericWidgetSingle.WidgetView, a3);
}

uint64_t sub_100011A20()
{
  return sub_100018BB0((unsigned int *)&enum case for WidgetFamily.systemSmall(_:));
}

uint64_t sub_100011A2C@<X0>(uint64_t a1@<X8>)
{
  return sub_100011A38((void (*)(_QWORD))type metadata accessor for WorldClockNonNumericWidgetSingle.WidgetView, a1);
}

uint64_t sub_100011A38@<X0>(void (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  a1(0);
  return sub_100010740(a2);
}

uint64_t sub_100011A70@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100012700(v1, (void (*)(_QWORD))type metadata accessor for WorldClockNonNumericWidgetSingle.WidgetView, 3, a1);
}

uint64_t sub_100011A98@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t OpaqueTypeConformance2;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v75 = a1;
  v1 = type metadata accessor for WidgetBackgroundStyle(0);
  v73 = *(_QWORD *)(v1 - 8);
  v74 = v1;
  __chkstk_darwin(v1);
  v72 = (char *)&v61 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_1000041D8(&qword_100085138);
  v61 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000041D8(&qword_100085140);
  v63 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000041D8(&qword_100085148);
  v10 = *(_QWORD *)(v9 - 8);
  v66 = v9;
  v67 = v10;
  __chkstk_darwin(v9);
  v62 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000041D8(&qword_100085150);
  v13 = *(_QWORD *)(v12 - 8);
  v68 = v12;
  v69 = v13;
  __chkstk_darwin(v12);
  v64 = (char *)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000041D8(&qword_100085158);
  v16 = *(_QWORD *)(v15 - 8);
  v70 = v15;
  v71 = v16;
  __chkstk_darwin(v15);
  v65 = (char *)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10000DF74(0, &qword_1000850E0, ClocksSingleIntent_ptr);
  v19 = type metadata accessor for WorldClockSingleProvider();
  v76 = sub_1000042B4();
  v20 = type metadata accessor for WorldClockSquareWidgetSingle.WidgetView(0);
  v21 = sub_10000D36C(&qword_100085160, type metadata accessor for WorldClockSquareWidgetSingle.WidgetView, (uint64_t)&unk_10006B8BC);
  v22 = sub_10000D36C(&qword_1000850F0, (uint64_t (*)(uint64_t))type metadata accessor for WorldClockSingleProvider, (uint64_t)&unk_10006B138);
  IntentConfiguration.init<A>(kind:intent:provider:content:)(0xD000000000000020, 0x800000010006E840, v18, &v76, sub_10001205C, 0, v18, v20, v19, v21, v22);
  v23 = LocalizedStringKey.init(stringLiteral:)(0x4949492079746943, 0xE800000000000000);
  v24 = Text.init(_:tableName:bundle:comment:)(v23);
  v26 = v25;
  v28 = v27;
  v30 = v29 & 1;
  v31 = sub_10001DDB4(&qword_100085168, &qword_100085138, (uint64_t)&protocol conformance descriptor for IntentConfiguration<A, B>);
  WidgetConfiguration.configurationDisplayName(_:)(v24, v26, v30, v28, v3, v31);
  sub_100010E24(v24, v26, v30);
  swift_bridgeObjectRelease(v28);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v5, v3);
  v32 = sub_1000041D8(&qword_100085100);
  v33 = type metadata accessor for WidgetFamily(0);
  v34 = *(_QWORD *)(v33 - 8);
  v35 = *(unsigned __int8 *)(v34 + 80);
  v36 = (v35 + 32) & ~v35;
  v37 = swift_allocObject(v32, v36 + *(_QWORD *)(v34 + 72), v35 | 7);
  *(_OWORD *)(v37 + 16) = xmmword_10006B090;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v34 + 104))(v37 + v36, enum case for WidgetFamily.systemSmall(_:), v33);
  v76 = v3;
  v77 = v31;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v76, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 1);
  v39 = v62;
  WidgetConfiguration.supportedFamilies(_:)(v37, v6, OpaqueTypeConformance2);
  swift_bridgeObjectRelease(v37);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v8, v6);
  v40 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000003ALL, 0x800000010006E7D0);
  v41 = Text.init(_:tableName:bundle:comment:)(v40);
  v43 = v42;
  v45 = v44;
  v47 = v46 & 1;
  v76 = v6;
  v77 = OpaqueTypeConformance2;
  v48 = swift_getOpaqueTypeConformance2(&v76, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v49 = v64;
  v50 = v66;
  WidgetConfiguration.description(_:)(v41, v43, v47, v45, v66, v48);
  sub_100010E24(v41, v43, v47);
  swift_bridgeObjectRelease(v45);
  v51 = v50;
  (*(void (**)(char *, uint64_t))(v67 + 8))(v39, v50);
  v52 = v72;
  v53 = v73;
  v54 = v74;
  (*(void (**)(char *, _QWORD, uint64_t))(v73 + 104))(v72, enum case for WidgetBackgroundStyle.blur(_:), v74);
  v76 = v51;
  v77 = v48;
  v55 = swift_getOpaqueTypeConformance2(&v76, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>, 1);
  v56 = v65;
  v57 = v68;
  WidgetConfiguration.preferredBackgroundStyle(_:)(v52, v68, v55);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v52, v54);
  (*(void (**)(char *, uint64_t))(v69 + 8))(v49, v57);
  v76 = v57;
  v77 = v55;
  v58 = swift_getOpaqueTypeConformance2(&v76, &opaque type descriptor for <<opaque return type of WidgetConfiguration.preferredBackgroundStyle(_:)>>, 1);
  v59 = v70;
  WidgetConfiguration.supportsVibrantContent(_:)(1, v70, v58);
  return (*(uint64_t (**)(char *, uint64_t))(v71 + 8))(v56, v59);
}

uint64_t sub_10001205C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000170F4(a1, type metadata accessor for WorldClockEntry, type metadata accessor for WorldClockSquareWidgetSingle.WidgetView, a2);
}

uint64_t type metadata accessor for WorldClockSquareWidgetSingle.WidgetView(uint64_t a1)
{
  return sub_10000DEFC(a1, (uint64_t *)&unk_100089930, (uint64_t)&nominal type descriptor for WorldClockSquareWidgetSingle.WidgetView);
}

uint64_t sub_100012084@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10001722C(a1, a2, type metadata accessor for WorldClockEntry, type metadata accessor for WorldClockSquareWidgetSingle.WidgetView, a3);
}

uint64_t sub_100012098@<X0>(uint64_t a1@<X8>)
{
  return sub_100011A38((void (*)(_QWORD))type metadata accessor for WorldClockSquareWidgetSingle.WidgetView, a1);
}

uint64_t sub_1000120A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100012700(v1, (void (*)(_QWORD))type metadata accessor for WorldClockSquareWidgetSingle.WidgetView, 4, a1);
}

uint64_t sub_1000120CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t OpaqueTypeConformance2;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v75 = a1;
  v1 = type metadata accessor for WidgetBackgroundStyle(0);
  v73 = *(_QWORD *)(v1 - 8);
  v74 = v1;
  __chkstk_darwin(v1);
  v72 = (char *)&v61 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_1000041D8(&qword_100085170);
  v61 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000041D8(&qword_100085178);
  v63 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000041D8(&qword_100085180);
  v10 = *(_QWORD *)(v9 - 8);
  v66 = v9;
  v67 = v10;
  __chkstk_darwin(v9);
  v62 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000041D8(&qword_100085188);
  v13 = *(_QWORD *)(v12 - 8);
  v68 = v12;
  v69 = v13;
  __chkstk_darwin(v12);
  v64 = (char *)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000041D8(&qword_100085190);
  v16 = *(_QWORD *)(v15 - 8);
  v70 = v15;
  v71 = v16;
  __chkstk_darwin(v15);
  v65 = (char *)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10000DF74(0, &qword_1000850E0, ClocksSingleIntent_ptr);
  v19 = type metadata accessor for WorldClockSingleProvider();
  v76 = sub_1000042B4();
  v20 = type metadata accessor for WorldClockDigitalWidgetSingle.WidgetView(0);
  v21 = sub_10000D36C(&qword_100085198, type metadata accessor for WorldClockDigitalWidgetSingle.WidgetView, (uint64_t)&unk_10006B94C);
  v22 = sub_10000D36C(&qword_1000850F0, (uint64_t (*)(uint64_t))type metadata accessor for WorldClockSingleProvider, (uint64_t)&unk_10006B138);
  IntentConfiguration.init<A>(kind:intent:provider:content:)(0xD000000000000022, 0x800000010006E870, v18, &v76, sub_100012694, 0, v18, v20, v19, v21, v22);
  v23 = LocalizedStringKey.init(stringLiteral:)(0x6769442079746943, 0xEC0000006C617469);
  v24 = Text.init(_:tableName:bundle:comment:)(v23);
  v26 = v25;
  v28 = v27;
  v30 = v29 & 1;
  v31 = sub_10001DDB4(&qword_1000851A0, &qword_100085170, (uint64_t)&protocol conformance descriptor for IntentConfiguration<A, B>);
  WidgetConfiguration.configurationDisplayName(_:)(v24, v26, v30, v28, v3, v31);
  sub_100010E24(v24, v26, v30);
  swift_bridgeObjectRelease(v28);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v5, v3);
  v32 = sub_1000041D8(&qword_100085100);
  v33 = type metadata accessor for WidgetFamily(0);
  v34 = *(_QWORD *)(v33 - 8);
  v35 = *(unsigned __int8 *)(v34 + 80);
  v36 = (v35 + 32) & ~v35;
  v37 = swift_allocObject(v32, v36 + *(_QWORD *)(v34 + 72), v35 | 7);
  *(_OWORD *)(v37 + 16) = xmmword_10006B090;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v34 + 104))(v37 + v36, enum case for WidgetFamily.systemSmall(_:), v33);
  v76 = v3;
  v77 = v31;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v76, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 1);
  v39 = v62;
  WidgetConfiguration.supportedFamilies(_:)(v37, v6, OpaqueTypeConformance2);
  swift_bridgeObjectRelease(v37);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v8, v6);
  v40 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000003ALL, 0x800000010006E7D0);
  v41 = Text.init(_:tableName:bundle:comment:)(v40);
  v43 = v42;
  v45 = v44;
  v47 = v46 & 1;
  v76 = v6;
  v77 = OpaqueTypeConformance2;
  v48 = swift_getOpaqueTypeConformance2(&v76, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v49 = v64;
  v50 = v66;
  WidgetConfiguration.description(_:)(v41, v43, v47, v45, v66, v48);
  sub_100010E24(v41, v43, v47);
  swift_bridgeObjectRelease(v45);
  v51 = v50;
  (*(void (**)(char *, uint64_t))(v67 + 8))(v39, v50);
  v52 = v72;
  v53 = v73;
  v54 = v74;
  (*(void (**)(char *, _QWORD, uint64_t))(v73 + 104))(v72, enum case for WidgetBackgroundStyle.blur(_:), v74);
  v76 = v51;
  v77 = v48;
  v55 = swift_getOpaqueTypeConformance2(&v76, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>, 1);
  v56 = v65;
  v57 = v68;
  WidgetConfiguration.preferredBackgroundStyle(_:)(v52, v68, v55);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v52, v54);
  (*(void (**)(char *, uint64_t))(v69 + 8))(v49, v57);
  v76 = v57;
  v77 = v55;
  v58 = swift_getOpaqueTypeConformance2(&v76, &opaque type descriptor for <<opaque return type of WidgetConfiguration.preferredBackgroundStyle(_:)>>, 1);
  v59 = v70;
  WidgetConfiguration.supportsVibrantContent(_:)(1, v70, v58);
  return (*(uint64_t (**)(char *, uint64_t))(v71 + 8))(v56, v59);
}

uint64_t sub_100012694@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000170F4(a1, type metadata accessor for WorldClockEntry, type metadata accessor for WorldClockDigitalWidgetSingle.WidgetView, a2);
}

uint64_t type metadata accessor for WorldClockDigitalWidgetSingle.WidgetView(uint64_t a1)
{
  return sub_10000DEFC(a1, (uint64_t *)&unk_100089940, (uint64_t)&nominal type descriptor for WorldClockDigitalWidgetSingle.WidgetView);
}

uint64_t sub_1000126BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10001722C(a1, a2, type metadata accessor for WorldClockEntry, type metadata accessor for WorldClockDigitalWidgetSingle.WidgetView, a3);
}

uint64_t sub_1000126D0@<X0>(uint64_t a1@<X8>)
{
  return sub_100011A38((void (*)(_QWORD))type metadata accessor for WorldClockDigitalWidgetSingle.WidgetView, a1);
}

uint64_t sub_1000126DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100012700(v1, (void (*)(_QWORD))type metadata accessor for WorldClockDigitalWidgetSingle.WidgetView, 0, a1);
}

uint64_t sub_100012700@<X0>(uint64_t a1@<X0>, void (*a2)(_QWORD)@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v32[4];
  int v33;
  uint64_t v34;

  v33 = a3;
  v34 = a4;
  v6 = sub_1000041D8(&qword_100085B10);
  __chkstk_darwin(v6);
  v8 = &v32[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = sub_1000041D8(&qword_100085108);
  __chkstk_darwin(v9);
  v11 = &v32[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for WorldClockEntry(0);
  __chkstk_darwin(v12);
  v14 = &v32[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = type metadata accessor for WorldClockWidgetViewSingle(0);
  __chkstk_darwin(v15);
  v17 = &v32[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = type metadata accessor for WidgetFamily(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = &v32[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  a2(0);
  sub_100010740((uint64_t)v21);
  (*(void (**)(_BYTE *, uint64_t))(v19 + 8))(v21, v18);
  sub_10000DF30(a1, (uint64_t)v14, type metadata accessor for WorldClockEntry);
  sub_1000256FC(v11);
  v22 = sub_1000678C4();
  LOBYTE(a2) = v23 & 1;
  v24 = sub_100025814(v8);
  v25 = sub_1000258AC(v24);
  sub_100026AE0((uint64_t)v14, (uint64_t)v11, v22, (char)a2, (uint64_t)v8, v25, v26 & 1, (uint64_t)v17);
  v27 = type metadata accessor for ClockWidgetEnvironmentObject(0);
  v28 = sub_100067E00(v33);
  v29 = sub_10000D36C(&qword_100085968, type metadata accessor for WorldClockWidgetViewSingle, (uint64_t)&unk_10006CD40);
  v30 = sub_10000D36C((unint64_t *)&qword_100085240, type metadata accessor for ClockWidgetEnvironmentObject, (uint64_t)&unk_10006DF68);
  View.environment<A>(_:)(v28, v15, v27, v29, v30);
  swift_release(v28);
  return sub_10000D330((uint64_t)v17, type metadata accessor for WorldClockWidgetViewSingle);
}

uint64_t sub_10001297C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, _QWORD, uint64_t);
  uint64_t OpaqueTypeConformance2;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v51 = a1;
  v1 = sub_1000041D8(&qword_1000851A8);
  v46 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v46 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1000041D8(&qword_1000851B0);
  v48 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000041D8(&qword_1000851B8);
  v8 = *(_QWORD *)(v7 - 8);
  v49 = v7;
  v50 = v8;
  __chkstk_darwin(v7);
  v47 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10000DF74(0, &qword_1000850E0, ClocksSingleIntent_ptr);
  v11 = type metadata accessor for WorldClockSingleProvider();
  v52 = sub_1000042B4();
  v12 = type metadata accessor for CityWidgetDigital.WidgetView(0);
  v13 = sub_10000D36C(&qword_1000851C0, type metadata accessor for CityWidgetDigital.WidgetView, (uint64_t)&unk_10006B9DC);
  v14 = sub_10000D36C(&qword_1000850F0, (uint64_t (*)(uint64_t))type metadata accessor for WorldClockSingleProvider, (uint64_t)&unk_10006B138);
  IntentConfiguration.init<A>(kind:intent:provider:content:)(0xD000000000000022, 0x800000010006E8A0, v10, &v52, sub_100012DC8, 0, v10, v12, v11, v13, v14);
  v15 = LocalizedStringKey.init(stringLiteral:)(0x6769442079746943, 0xEC0000006C617469);
  v16 = Text.init(_:tableName:bundle:comment:)(v15);
  v18 = v17;
  v20 = v19;
  v22 = v21 & 1;
  v23 = sub_10001DDB4(&qword_1000851C8, &qword_1000851A8, (uint64_t)&protocol conformance descriptor for IntentConfiguration<A, B>);
  WidgetConfiguration.configurationDisplayName(_:)(v16, v18, v22, v20, v1, v23);
  sub_100010E24(v16, v18, v22);
  swift_bridgeObjectRelease(v20);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v3, v1);
  v24 = sub_1000041D8(&qword_100085100);
  v25 = type metadata accessor for WidgetFamily(0);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(_QWORD *)(v26 + 72);
  v28 = *(unsigned __int8 *)(v26 + 80);
  v29 = (v28 + 32) & ~v28;
  v30 = swift_allocObject(v24, v29 + 2 * v27, v28 | 7);
  *(_OWORD *)(v30 + 16) = xmmword_10006B750;
  v31 = v30 + v29;
  v32 = *(void (**)(uint64_t, _QWORD, uint64_t))(v26 + 104);
  v32(v31, enum case for WidgetFamily.accessoryRectangular(_:), v25);
  v32(v31 + v27, enum case for WidgetFamily.accessoryCircular(_:), v25);
  v52 = v1;
  v53 = v23;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v52, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 1);
  v34 = v47;
  WidgetConfiguration.supportedFamilies(_:)(v30, v4, OpaqueTypeConformance2);
  swift_bridgeObjectRelease(v30);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v6, v4);
  v35 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000003ALL, 0x800000010006E7D0);
  v36 = Text.init(_:tableName:bundle:comment:)(v35);
  v38 = v37;
  v40 = v39;
  v42 = v41 & 1;
  v52 = v4;
  v53 = OpaqueTypeConformance2;
  v43 = swift_getOpaqueTypeConformance2(&v52, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v44 = v49;
  WidgetConfiguration.description(_:)(v36, v38, v42, v40, v49, v43);
  sub_100010E24(v36, v38, v42);
  swift_bridgeObjectRelease(v40);
  return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v34, v44);
}

uint64_t sub_100012DC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000170F4(a1, type metadata accessor for WorldClockEntry, type metadata accessor for CityWidgetDigital.WidgetView, a2);
}

uint64_t type metadata accessor for CityWidgetDigital.WidgetView(uint64_t a1)
{
  return sub_10000DEFC(a1, (uint64_t *)&unk_100089960, (uint64_t)&nominal type descriptor for CityWidgetDigital.WidgetView);
}

uint64_t sub_100012DF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10001722C(a1, a2, type metadata accessor for WorldClockEntry, type metadata accessor for CityWidgetDigital.WidgetView, a3);
}

uint64_t sub_100012E04()
{
  return sub_100012E18((unsigned int *)&enum case for WidgetFamily.accessoryRectangular(_:), (unsigned int *)&enum case for WidgetFamily.accessoryCircular(_:));
}

uint64_t sub_100012E18(unsigned int *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);

  v4 = sub_1000041D8(&qword_100085100);
  v5 = type metadata accessor for WidgetFamily(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 72);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = swift_allocObject(v4, v9 + 2 * v7, v8 | 7);
  *(_OWORD *)(v10 + 16) = xmmword_10006B750;
  v11 = v10 + v9;
  v12 = *a1;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 104);
  v13(v11, v12, v5);
  v13(v11 + v7, *a2, v5);
  return v10;
}

uint64_t sub_100012ECC@<X0>(uint64_t a1@<X8>)
{
  return sub_100011A38((void (*)(_QWORD))type metadata accessor for CityWidgetDigital.WidgetView, a1);
}

uint64_t sub_100012ED8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100012EE0(v1, a1);
}

uint64_t sub_100012EE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  void (**v38)(uint64_t (**)(char *, uint64_t), uint64_t, __n128);
  uint64_t v39;
  uint64_t (**v40)(char *, uint64_t);
  uint64_t v41;
  char *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t (**v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  _OWORD *v49;
  __int128 v50;
  __int128 v51;
  char v52;
  char v53;
  char v54;
  uint64_t v55;
  id v56;
  void *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t (**v87)(char *, uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __n128 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t OpaqueTypeConformance2;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  char v102;
  char v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  char *v156;
  char *v157;
  uint64_t (**v158)(char *, uint64_t);
  char *v159;
  uint64_t v160;
  char *v161;
  char *v162;
  void (**v163)(uint64_t (**)(char *, uint64_t), uint64_t, __n128);
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  __int128 v177;
  ValueMetadata *v178;
  _UNKNOWN **v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;

  v175 = a2;
  v3 = sub_1000041D8(&qword_100085B10);
  __chkstk_darwin(v3);
  v143 = (_QWORD **)((char *)&v143 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_1000041D8(&qword_100085108);
  __chkstk_darwin(v5);
  v161 = (char *)&v143 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v150 = type metadata accessor for WorldClockWidgetViewSingle(0);
  __chkstk_darwin(v150);
  v144 = (uint64_t)&v143 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v152 = sub_1000041D8(&qword_100085B30);
  v146 = *(_QWORD *)(v152 - 8);
  v8 = __chkstk_darwin(v152);
  v145 = (char *)&v143 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v147 = (char *)&v143 - v10;
  v148 = sub_1000041D8(&qword_100085B38);
  __chkstk_darwin(v148);
  v151 = (uint64_t)&v143 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v174 = sub_1000041D8(&qword_1000859D8);
  __chkstk_darwin(v174);
  v153 = (char *)&v143 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149 = type metadata accessor for CityInlineComplication(0);
  __chkstk_darwin(v149);
  v159 = (char *)&v143 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for WorldClockEntry(0);
  __chkstk_darwin(v14);
  v176 = (uint64_t)&v143 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v155 = type metadata accessor for ClockCircularDigitalComplication(0);
  __chkstk_darwin(v155);
  v160 = (uint64_t)&v143 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v164 = sub_1000041D8(&qword_100085B40);
  v163 = *(void (***)(uint64_t (**)(char *, uint64_t), uint64_t, __n128))(v164 - 8);
  __chkstk_darwin(v164);
  v158 = (uint64_t (**)(char *, uint64_t))((char *)&v143 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v166 = sub_1000041D8(&qword_1000859C0);
  v18 = __chkstk_darwin(v166);
  v162 = (char *)&v143 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v157 = (char *)&v143 - v20;
  v171 = sub_1000041D8(&qword_100085B48);
  __chkstk_darwin(v171);
  v172 = (uint64_t)&v143 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v168 = sub_1000041D8(&qword_100085B50);
  __chkstk_darwin(v168);
  v170 = (uint64_t)&v143 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v173 = sub_1000041D8(&qword_1000859A8);
  __chkstk_darwin(v173);
  v165 = (char *)&v143 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_1000041D8(&qword_100085AC8);
  v25 = __chkstk_darwin(v24);
  v156 = (char *)&v143 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v154 = (char *)&v143 - v27;
  v28 = type metadata accessor for WorldClockCity(0);
  __chkstk_darwin(v28);
  v30 = (char *)&v143 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v167 = type metadata accessor for ClockRectangularComplication(0);
  __chkstk_darwin(v167);
  v32 = (char *)&v143 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v169 = sub_1000041D8(&qword_100085B58);
  v33 = *(_QWORD *)(v169 - 8);
  v34 = __chkstk_darwin(v169);
  v36 = (char *)&v143 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  v38 = (void (**)(uint64_t (**)(char *, uint64_t), uint64_t, __n128))((char *)&v143 - v37);
  v39 = type metadata accessor for WidgetFamily(0);
  v40 = *(uint64_t (***)(char *, uint64_t))(v39 - 8);
  __chkstk_darwin(v39);
  v42 = (char *)&v143 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CityWidgetDigital.WidgetView(0);
  v43 = a1;
  sub_100010740((uint64_t)v42);
  v44 = v40[11](v42, v39);
  if (v44 == enum case for WidgetFamily.accessoryCircular(_:))
  {
    v45 = (uint64_t)v156;
    v46 = v158;
    v47 = (uint64_t)v157;
    v48 = v176;
    sub_10000DF30(a1, v176, type metadata accessor for WorldClockEntry);
    sub_100039578(&v180);
    v178 = &type metadata for AnalogueCircularDimensions;
    v179 = &off_100082780;
    v49 = (_OWORD *)swift_allocObject(&unk_100081EC0, 80, 7);
    *(_QWORD *)&v177 = v49;
    v50 = v181;
    v49[1] = v180;
    v49[2] = v50;
    v51 = v183;
    v49[3] = v182;
    v49[4] = v51;
    v52 = sub_10000422C();
    v53 = sub_10000422C();
    v54 = sub_10000422C();
    v55 = v160;
    sub_10004B910(v48, &v177, v52 & 1, v53 & 1, v54 & 1, v160);
    v56 = objc_msgSend((id)objc_opt_self(MTUtilities), "widgetURL");
    if (v56)
    {
      v57 = v56;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      v58 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v45, 0, 1, v58);
    }
    else
    {
      v82 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 56))(v45, 1, 1, v82);
    }
    v83 = v171;
    v84 = v172;
    v85 = v166;
    v86 = (uint64_t)v165;
    v87 = v46;
    v88 = v155;
    v89 = sub_10000D36C(&qword_1000859C8, type metadata accessor for ClockCircularDigitalComplication, (uint64_t)&unk_10006D838);
    View.widgetURL(_:)(v45, v88, v89);
    sub_1000106A4(v45, &qword_100085AC8);
    v90 = sub_10000D330(v55, type metadata accessor for ClockCircularDigitalComplication);
    v91 = static Alignment.center.getter(v90);
    v92 = (uint64_t)v162;
    v94 = sub_100013E40(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v162, 0.0, 1, INFINITY, 0, v91, v93);
    v163[1](v87, v164, v94);
    sub_10001DE5C(v92, v47, &qword_1000859C0);
    v95 = v170;
    sub_10001DEA0(v47, v170, &qword_1000859C0);
    swift_storeEnumTagMultiPayload(v95, v168, 1);
    v96 = sub_10000D36C(&qword_1000859B0, type metadata accessor for ClockRectangularComplication, (uint64_t)&unk_10006CD90);
    *(_QWORD *)&v177 = v167;
    *((_QWORD *)&v177 + 1) = v96;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v177, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
    v98 = sub_10001CEDC();
    _ConditionalContent<>.init(storage:)(v95, v169, v85, OpaqueTypeConformance2, v98);
    sub_10001DEA0(v86, v84, &qword_1000859A8);
    swift_storeEnumTagMultiPayload(v84, v83, 0);
    v99 = sub_10001CE34();
    v100 = sub_10001CF84();
    _ConditionalContent<>.init(storage:)(v84, v173, v174, v99, v100);
    sub_1000106A4(v86, &qword_1000859A8);
    return sub_1000106A4(v47, &qword_1000859C0);
  }
  else
  {
    v59 = v44;
    v60 = (uint64_t)v30;
    v162 = v36;
    v157 = v42;
    v163 = v38;
    v158 = v40;
    v160 = v39;
    v164 = v33;
    v61 = v176;
    v62 = (uint64_t)v159;
    v63 = v161;
    if (v44 == enum case for WidgetFamily.accessoryRectangular(_:))
    {
      v64 = v60;
      sub_100004F30(v60);
      v65 = (uint64_t)v32;
      sub_100027B58(v64, (uint64_t)v32);
      v66 = objc_msgSend((id)objc_opt_self(MTUtilities), "widgetURL");
      if (v66)
      {
        v67 = v66;
        v68 = (uint64_t)v154;
        static URL._unconditionallyBridgeFromObjectiveC(_:)();

        v69 = type metadata accessor for URL(0);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 56))(v68, 0, 1, v69);
      }
      else
      {
        v127 = type metadata accessor for URL(0);
        v68 = (uint64_t)v154;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v127 - 8) + 56))(v154, 1, 1, v127);
      }
      v128 = v166;
      v129 = (uint64_t)v165;
      v130 = (char *)v163;
      v131 = (uint64_t)v162;
      v132 = sub_10000D36C(&qword_1000859B0, type metadata accessor for ClockRectangularComplication, (uint64_t)&unk_10006CD90);
      v133 = v167;
      View.widgetURL(_:)(v68, v167, v132);
      sub_1000106A4(v68, &qword_100085AC8);
      sub_10000D330(v65, type metadata accessor for ClockRectangularComplication);
      v134 = v164;
      v135 = v131;
      v136 = v169;
      (*(void (**)(char *, uint64_t, uint64_t))(v164 + 32))(v130, v135, v169);
      v137 = v170;
      (*(void (**)(uint64_t, char *, uint64_t))(v134 + 16))(v170, v130, v136);
      swift_storeEnumTagMultiPayload(v137, v168, 0);
      *(_QWORD *)&v180 = v133;
      *((_QWORD *)&v180 + 1) = v132;
      v138 = swift_getOpaqueTypeConformance2(&v180, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
      v139 = sub_10001CEDC();
      _ConditionalContent<>.init(storage:)(v137, v136, v128, v138, v139);
      v140 = v172;
      sub_10001DEA0(v129, v172, &qword_1000859A8);
      swift_storeEnumTagMultiPayload(v140, v171, 0);
      v141 = sub_10001CE34();
      v142 = sub_10001CF84();
      _ConditionalContent<>.init(storage:)(v140, v173, v174, v141, v142);
      sub_1000106A4(v129, &qword_1000859A8);
      return (*(uint64_t (**)(char *, uint64_t))(v134 + 8))(v130, v136);
    }
    else
    {
      v70 = enum case for WidgetFamily.accessoryInline(_:);
      sub_10000DF30(v43, v176, type metadata accessor for WorldClockEntry);
      if (v59 == v70)
      {
        sub_10004E480(v61, v62);
        v71 = v151;
        sub_10000DF30(v62, v151, type metadata accessor for CityInlineComplication);
        swift_storeEnumTagMultiPayload(v71, v148, 0);
        v72 = sub_10000D36C(&qword_100085960, type metadata accessor for CityInlineComplication, (uint64_t)&unk_10006D8D8);
        v73 = type metadata accessor for ClockWidgetEnvironmentObject(255);
        v74 = sub_10000D36C(&qword_100085968, type metadata accessor for WorldClockWidgetViewSingle, (uint64_t)&unk_10006CD40);
        v75 = sub_10000D36C((unint64_t *)&qword_100085240, type metadata accessor for ClockWidgetEnvironmentObject, (uint64_t)&unk_10006DF68);
        *(_QWORD *)&v180 = v150;
        *((_QWORD *)&v180 + 1) = v73;
        *(_QWORD *)&v181 = v74;
        *((_QWORD *)&v181 + 1) = v75;
        v76 = swift_getOpaqueTypeConformance2(&v180, &opaque type descriptor for <<opaque return type of View.environment<A>(_:)>>, 1);
        v77 = (uint64_t)v153;
        _ConditionalContent<>.init(storage:)(v71, v149, v152, v72, v76);
        v78 = v172;
        sub_10001DEA0(v77, v172, &qword_1000859D8);
        swift_storeEnumTagMultiPayload(v78, v171, 1);
        v79 = sub_10001CE34();
        v80 = sub_10001CF84();
        _ConditionalContent<>.init(storage:)(v78, v173, v174, v79, v80);
        sub_1000106A4(v77, &qword_1000859D8);
        return sub_10000D330(v62, type metadata accessor for CityInlineComplication);
      }
      else
      {
        sub_1000256FC(v63);
        v101 = sub_1000678C4();
        v103 = v102 & 1;
        v104 = v143;
        v105 = sub_100025814(v143);
        v106 = sub_1000258AC(v105);
        v108 = v144;
        sub_100026AE0(v61, (uint64_t)v63, v101, v103, (uint64_t)v104, v106, v107 & 1, v144);
        v109 = type metadata accessor for ClockWidgetEnvironmentObject(0);
        v110 = sub_100067DF8();
        v111 = sub_100067E00(v110);
        v112 = sub_10000D36C(&qword_100085968, type metadata accessor for WorldClockWidgetViewSingle, (uint64_t)&unk_10006CD40);
        v113 = sub_10000D36C((unint64_t *)&qword_100085240, type metadata accessor for ClockWidgetEnvironmentObject, (uint64_t)&unk_10006DF68);
        v114 = v145;
        v115 = v150;
        View.environment<A>(_:)(v111, v150, v109, v112, v113);
        swift_release(v111);
        sub_10000D330(v108, type metadata accessor for WorldClockWidgetViewSingle);
        v116 = v146;
        v117 = v147;
        v118 = v114;
        v119 = v152;
        (*(void (**)(char *, char *, uint64_t))(v146 + 32))(v147, v118, v152);
        v120 = v151;
        (*(void (**)(uint64_t, char *, uint64_t))(v116 + 16))(v151, v117, v119);
        swift_storeEnumTagMultiPayload(v120, v148, 1);
        v121 = sub_10000D36C(&qword_100085960, type metadata accessor for CityInlineComplication, (uint64_t)&unk_10006D8D8);
        *(_QWORD *)&v180 = v115;
        *((_QWORD *)&v180 + 1) = v109;
        *(_QWORD *)&v181 = v112;
        *((_QWORD *)&v181 + 1) = v113;
        v122 = swift_getOpaqueTypeConformance2(&v180, &opaque type descriptor for <<opaque return type of View.environment<A>(_:)>>, 1);
        v123 = (uint64_t)v153;
        _ConditionalContent<>.init(storage:)(v120, v149, v119, v121, v122);
        v124 = v172;
        sub_10001DEA0(v123, v172, &qword_1000859D8);
        swift_storeEnumTagMultiPayload(v124, v171, 1);
        v125 = sub_10001CE34();
        v126 = sub_10001CF84();
        _ConditionalContent<>.init(storage:)(v124, v173, v174, v125, v126);
        sub_1000106A4(v123, &qword_1000859D8);
        (*(void (**)(char *, uint64_t))(v116 + 8))(v117, v119);
        return v158[1](v157, v160);
      }
    }
  }
}

__n128 sub_100013E40@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v29;
  double v30;
  double v31;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __n128 result;
  unsigned int v40;
  double v41;
  double v42;
  double v43;
  double v44;
  _OWORD v45[7];

  v16 = v15;
  v18 = a15;
  v19 = a12;
  v20 = a10;
  v21 = a2 & 1;
  v22 = a1;
  if ((_DWORD)v21)
    v22 = -INFINITY;
  v23 = a4 & 1;
  v24 = a3;
  if ((a4 & 1) != 0)
    v24 = v22;
  v25 = a6 & 1;
  v26 = a8 & 1;
  v27 = a5;
  if ((a6 & 1) != 0)
    v27 = v24;
  if (v22 > v24 || v24 > v27)
    goto LABEL_22;
  v29 = a7;
  if ((a8 & 1) != 0)
    v29 = -INFINITY;
  v30 = a10;
  if ((a11 & 1) != 0)
    v30 = v29;
  v31 = a12;
  if ((a13 & 1) != 0)
    v31 = v30;
  if (v29 > v30 || v30 > v31)
  {
LABEL_22:
    v43 = a5;
    v44 = a7;
    v42 = a3;
    v41 = a1;
    v40 = v21;
    v33 = static os_log_type_t.fault.getter();
    v34 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v33, &_mh_execute_header, v34, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v18 = a15;
    v21 = v40;
    a1 = v41;
    v20 = a10;
    a3 = v42;
    v19 = a12;
    a5 = v43;
    a7 = v44;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v45, *(_QWORD *)&a1, v21, *(_QWORD *)&a3, v23, *(_QWORD *)&a5, v25, *(_QWORD *)&a7, v26, *(_QWORD *)&v20, a11 & 1, *(_QWORD *)&v19, a13 & 1, a14, v18);
  v35 = sub_1000041D8(&qword_100085B40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(a9, v16, v35);
  v36 = a9 + *(int *)(sub_1000041D8(&qword_1000859C0) + 36);
  v37 = v45[5];
  *(_OWORD *)(v36 + 64) = v45[4];
  *(_OWORD *)(v36 + 80) = v37;
  *(_OWORD *)(v36 + 96) = v45[6];
  v38 = v45[1];
  *(_OWORD *)v36 = v45[0];
  *(_OWORD *)(v36 + 16) = v38;
  result = (__n128)v45[3];
  *(_OWORD *)(v36 + 32) = v45[2];
  *(__n128 *)(v36 + 48) = result;
  return result;
}

__n128 sub_10001400C@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t (*a16)(_QWORD), uint64_t *a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v33;
  double v34;
  double v35;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __n128 result;
  unsigned int v45;
  unsigned int v46;
  double v47;
  double v48;
  double v49;
  double v50;
  _OWORD v51[7];

  v18 = v17;
  v19 = a9;
  v20 = a17;
  v22 = a14;
  v21 = a15;
  v23 = a12;
  v24 = a10;
  v25 = a2 & 1;
  v26 = a1;
  if ((_DWORD)v25)
    v26 = -INFINITY;
  v27 = a4 & 1;
  v28 = a3;
  if ((_DWORD)v27)
    v28 = v26;
  v29 = a6 & 1;
  v30 = a8 & 1;
  v31 = a5;
  if ((a6 & 1) != 0)
    v31 = v28;
  if (v26 > v28 || v28 > v31)
    goto LABEL_22;
  v33 = a7;
  if ((a8 & 1) != 0)
    v33 = -INFINITY;
  v34 = a10;
  if ((a11 & 1) != 0)
    v34 = v33;
  v35 = a12;
  if ((a13 & 1) != 0)
    v35 = v34;
  if (v33 > v34 || v34 > v35)
  {
LABEL_22:
    v49 = a5;
    v50 = a7;
    v47 = a3;
    v48 = a1;
    v46 = v25;
    v45 = v27;
    v38 = static os_log_type_t.fault.getter();
    v39 = (void *)static Log.runtimeIssuesLog.getter();
    v40 = v38;
    v19 = a9;
    os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v39, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v27 = v45;
    v22 = a14;
    v21 = a15;
    v25 = v46;
    v24 = a10;
    v23 = a12;
    a3 = v47;
    a1 = v48;
    a5 = v49;
    a7 = v50;
    v20 = a17;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v51, *(_QWORD *)&a1, v25, *(_QWORD *)&a3, v27, *(_QWORD *)&a5, v29, *(_QWORD *)&a7, v30, *(_QWORD *)&v24, a11 & 1, *(_QWORD *)&v23, a13 & 1, v22, v21);
  sub_10000DF30(v18, v19, a16);
  v41 = v19 + *(int *)(sub_1000041D8(v20) + 36);
  v42 = v51[5];
  *(_OWORD *)(v41 + 64) = v51[4];
  *(_OWORD *)(v41 + 80) = v42;
  *(_OWORD *)(v41 + 96) = v51[6];
  v43 = v51[1];
  *(_OWORD *)v41 = v51[0];
  *(_OWORD *)(v41 + 16) = v43;
  result = (__n128)v51[3];
  *(_OWORD *)(v41 + 32) = v51[2];
  *(__n128 *)(v41 + 48) = result;
  return result;
}

uint64_t sub_1000141D8()
{
  return static View._viewListCount(inputs:)();
}

uint64_t sub_1000141F0@<X0>(uint64_t a1@<X8>)
{
  return sub_10001297C(a1);
}

uint64_t sub_100014204@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, _QWORD, uint64_t);
  uint64_t OpaqueTypeConformance2;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v51 = a1;
  v1 = sub_1000041D8(&qword_1000851D0);
  v46 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v46 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1000041D8(&qword_1000851D8);
  v48 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000041D8(&qword_1000851E0);
  v8 = *(_QWORD *)(v7 - 8);
  v49 = v7;
  v50 = v8;
  __chkstk_darwin(v7);
  v47 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10000DF74(0, &qword_1000851E8, ClocksIntent_ptr);
  v11 = type metadata accessor for WorldClockMultiProvider();
  v52 = sub_1000042B4();
  v12 = type metadata accessor for WorldClockWidgetMulti.WidgetView(0);
  v13 = sub_10000D36C(&qword_1000851F0, type metadata accessor for WorldClockWidgetMulti.WidgetView, (uint64_t)&unk_10006BA6C);
  v14 = sub_10000D36C(&qword_1000851F8, (uint64_t (*)(uint64_t))type metadata accessor for WorldClockMultiProvider, (uint64_t)&unk_10006B1A0);
  IntentConfiguration.init<A>(kind:intent:provider:content:)(0xD000000000000020, 0x800000010006E8D0, v10, &v52, sub_100014674, 0, v10, v12, v11, v13, v14);
  v15 = LocalizedStringKey.init(stringLiteral:)(0x6C4320646C726F57, 0xEB000000006B636FLL);
  v16 = Text.init(_:tableName:bundle:comment:)(v15);
  v18 = v17;
  v20 = v19;
  v22 = v21 & 1;
  v23 = sub_10001DDB4(&qword_100085200, &qword_1000851D0, (uint64_t)&protocol conformance descriptor for IntentConfiguration<A, B>);
  WidgetConfiguration.configurationDisplayName(_:)(v16, v18, v22, v20, v1, v23);
  sub_100010E24(v16, v18, v22);
  swift_bridgeObjectRelease(v20);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v3, v1);
  v24 = sub_1000041D8(&qword_100085100);
  v25 = type metadata accessor for WidgetFamily(0);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(_QWORD *)(v26 + 72);
  v28 = *(unsigned __int8 *)(v26 + 80);
  v29 = (v28 + 32) & ~v28;
  v30 = swift_allocObject(v24, v29 + 3 * v27, v28 | 7);
  *(_OWORD *)(v30 + 16) = xmmword_10006B760;
  v31 = v30 + v29;
  v32 = *(void (**)(uint64_t, _QWORD, uint64_t))(v26 + 104);
  v32(v31, enum case for WidgetFamily.systemSmall(_:), v25);
  v32(v31 + v27, enum case for WidgetFamily.systemMedium(_:), v25);
  v32(v31 + 2 * v27, enum case for WidgetFamily.accessoryRectangular(_:), v25);
  v52 = v1;
  v53 = v23;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v52, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 1);
  v34 = v47;
  WidgetConfiguration.supportedFamilies(_:)(v30, v4, OpaqueTypeConformance2);
  swift_bridgeObjectRelease(v30);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v6, v4);
  v35 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000032, 0x800000010006E950);
  v36 = Text.init(_:tableName:bundle:comment:)(v35);
  v38 = v37;
  v40 = v39;
  v42 = v41 & 1;
  v52 = v4;
  v53 = OpaqueTypeConformance2;
  v43 = swift_getOpaqueTypeConformance2(&v52, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v44 = v49;
  WidgetConfiguration.description(_:)(v36, v38, v42, v40, v49, v43);
  sub_100010E24(v36, v38, v42);
  swift_bridgeObjectRelease(v40);
  return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v34, v44);
}

uint64_t sub_100014674@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000170F4(a1, type metadata accessor for WorldClockEntry, type metadata accessor for WorldClockWidgetMulti.WidgetView, a2);
}

uint64_t type metadata accessor for WorldClockWidgetMulti.WidgetView(uint64_t a1)
{
  return sub_10000DEFC(a1, (uint64_t *)&unk_100089980, (uint64_t)&nominal type descriptor for WorldClockWidgetMulti.WidgetView);
}

uint64_t sub_10001469C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10001722C(a1, a2, type metadata accessor for WorldClockEntry, type metadata accessor for WorldClockWidgetMulti.WidgetView, a3);
}

uint64_t sub_1000146B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, _QWORD, uint64_t);

  v0 = sub_1000041D8(&qword_100085100);
  v1 = type metadata accessor for WidgetFamily(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = *(unsigned __int8 *)(v2 + 80);
  v5 = (v4 + 32) & ~v4;
  v6 = swift_allocObject(v0, v5 + 3 * v3, v4 | 7);
  *(_OWORD *)(v6 + 16) = xmmword_10006B760;
  v7 = v6 + v5;
  v8 = *(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 104);
  v8(v7, enum case for WidgetFamily.systemSmall(_:), v1);
  v8(v7 + v3, enum case for WidgetFamily.systemMedium(_:), v1);
  v8(v7 + 2 * v3, enum case for WidgetFamily.accessoryRectangular(_:), v1);
  return v6;
}

uint64_t sub_100014784@<X0>(uint64_t a1@<X8>)
{
  return sub_100011A38((void (*)(_QWORD))type metadata accessor for WorldClockWidgetMulti.WidgetView, a1);
}

uint64_t sub_100014790@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100014798(v1, a1);
}

uint64_t sub_100014798@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  int v29;
  uint64_t v30;
  id v31;
  void *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  char v36;
  char v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t OpaqueTypeConformance2;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  char *v71;
  _QWORD *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v79 = a2;
  v3 = sub_1000041D8(&qword_100085B10);
  __chkstk_darwin(v3);
  v72 = (uint64_t *)((char *)&v66 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_1000041D8(&qword_100085108);
  __chkstk_darwin(v5);
  v70 = (uint64_t *)((char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v76 = type metadata accessor for WorldClockWidgetViewMulti(0);
  __chkstk_darwin(v76);
  v67 = (uint64_t)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = sub_1000041D8(&qword_100085B18);
  v75 = *(_QWORD *)(v77 - 8);
  v8 = __chkstk_darwin(v77);
  v71 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v74 = (char *)&v66 - v10;
  v80 = sub_1000041D8(&qword_100085B20);
  __chkstk_darwin(v80);
  v82 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000041D8(&qword_100085AC8);
  __chkstk_darwin(v12);
  v14 = (char *)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for WorldClockEntry(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = type metadata accessor for WorldClockRectangularSummary(0);
  __chkstk_darwin(v78);
  v19 = (char *)&v66 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = sub_1000041D8(&qword_100085B28);
  v73 = *(_QWORD *)(v81 - 8);
  v20 = __chkstk_darwin(v81);
  v22 = (char *)&v66 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v24 = (char *)&v66 - v23;
  v25 = type metadata accessor for WidgetFamily(0);
  v26 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v28 = (char *)&v66 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for WorldClockWidgetMulti.WidgetView(0);
  sub_100010740((uint64_t)v28);
  v68 = v26;
  v69 = v25;
  v29 = (*(uint64_t (**)(char *, uint64_t))(v26 + 88))(v28, v25);
  LODWORD(v25) = enum case for WidgetFamily.accessoryRectangular(_:);
  sub_10000DF30(a1, (uint64_t)v17, type metadata accessor for WorldClockEntry);
  if (v29 == (_DWORD)v25)
  {
    v30 = v76;
    sub_1000469F8((uint64_t)v17, (uint64_t)v19);
    v31 = objc_msgSend((id)objc_opt_self(MTUtilities), "widgetURL");
    if (v31)
    {
      v32 = v31;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      v33 = type metadata accessor for URL(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v14, 0, 1, v33);
    }
    else
    {
      v55 = type metadata accessor for URL(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v14, 1, 1, v55);
    }
    v56 = sub_10000D36C(&qword_100085A00, type metadata accessor for WorldClockRectangularSummary, (uint64_t)&unk_10006D6A8);
    v57 = v78;
    View.widgetURL(_:)(v14, v78, v56);
    sub_1000106A4((uint64_t)v14, &qword_100085AC8);
    sub_10000D330((uint64_t)v19, type metadata accessor for WorldClockRectangularSummary);
    v58 = v73;
    v59 = v81;
    (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v24, v22, v81);
    v60 = v82;
    (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v82, v24, v59);
    swift_storeEnumTagMultiPayload(v60, v80, 0);
    v83 = v57;
    v84 = v56;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v83, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
    v62 = type metadata accessor for ClockWidgetEnvironmentObject(255);
    v63 = sub_10000D36C(&qword_100085A08, type metadata accessor for WorldClockWidgetViewMulti, (uint64_t)&unk_10006CE30);
    v64 = sub_10000D36C((unint64_t *)&qword_100085240, type metadata accessor for ClockWidgetEnvironmentObject, (uint64_t)&unk_10006DF68);
    v83 = v30;
    v84 = v62;
    v85 = v63;
    v86 = v64;
    v65 = swift_getOpaqueTypeConformance2(&v83, &opaque type descriptor for <<opaque return type of View.environment<A>(_:)>>, 1);
    _ConditionalContent<>.init(storage:)(v60, v59, v77, OpaqueTypeConformance2, v65);
    return (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v24, v59);
  }
  else
  {
    v34 = v70;
    sub_1000256FC(v70);
    v35 = sub_1000678C4();
    v37 = v36 & 1;
    v38 = v72;
    sub_100025814(v72);
    v39 = v67;
    sub_100029DEC((uint64_t)v17, (uint64_t)v34, v35, v37, (uint64_t)v38, v67);
    v40 = type metadata accessor for ClockWidgetEnvironmentObject(0);
    v41 = sub_100067DF8();
    v42 = sub_100067E00(v41);
    v43 = sub_10000D36C(&qword_100085A08, type metadata accessor for WorldClockWidgetViewMulti, (uint64_t)&unk_10006CE30);
    v73 = v43;
    v44 = sub_10000D36C((unint64_t *)&qword_100085240, type metadata accessor for ClockWidgetEnvironmentObject, (uint64_t)&unk_10006DF68);
    v45 = v71;
    v46 = v76;
    View.environment<A>(_:)(v42, v76, v40, v43, v44);
    swift_release(v42);
    sub_10000D330(v39, type metadata accessor for WorldClockWidgetViewMulti);
    v47 = v74;
    v48 = v75;
    v49 = v77;
    (*(void (**)(char *, char *, uint64_t))(v75 + 32))(v74, v45, v77);
    v50 = v82;
    (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v82, v47, v49);
    swift_storeEnumTagMultiPayload(v50, v80, 1);
    v51 = sub_10000D36C(&qword_100085A00, type metadata accessor for WorldClockRectangularSummary, (uint64_t)&unk_10006D6A8);
    v83 = v78;
    v84 = v51;
    v52 = swift_getOpaqueTypeConformance2(&v83, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
    v83 = v46;
    v84 = v40;
    v85 = v73;
    v86 = v44;
    v53 = swift_getOpaqueTypeConformance2(&v83, &opaque type descriptor for <<opaque return type of View.environment<A>(_:)>>, 1);
    _ConditionalContent<>.init(storage:)(v50, v81, v49, v52, v53);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v47, v49);
    return (*(uint64_t (**)(char *, uint64_t))(v68 + 8))(v28, v69);
  }
}

uint64_t sub_100014E60@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  *a1 = swift_getKeyPath(&unk_10006B770);
  v2 = sub_1000041D8(&qword_1000850C0);
  return swift_storeEnumTagMultiPayload(a1, v2, 0);
}

uint64_t sub_100014EA4@<X0>(uint64_t a1@<X8>)
{
  return sub_100014204(a1);
}

uint64_t sub_100014EB8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t OpaqueTypeConformance2;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v79 = a1;
  v1 = type metadata accessor for WidgetBackgroundStyle(0);
  v77 = *(_QWORD *)(v1 - 8);
  v78 = v1;
  __chkstk_darwin(v1);
  v76 = (char *)&v64 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_1000041D8(&qword_100085208);
  v65 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000041D8(&qword_100085210);
  v67 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000041D8(&qword_100085218);
  v10 = *(_QWORD *)(v9 - 8);
  v70 = v9;
  v71 = v10;
  __chkstk_darwin(v9);
  v66 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000041D8(&qword_100085220);
  v13 = *(_QWORD *)(v12 - 8);
  v72 = v12;
  v73 = v13;
  __chkstk_darwin(v12);
  v68 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000041D8(&qword_100085228);
  v16 = *(_QWORD *)(v15 - 8);
  v74 = v15;
  v75 = v16;
  __chkstk_darwin(v15);
  v69 = (char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DateTimeProvider();
  v84 = sub_1000042B4();
  v19 = sub_1000041D8(&qword_100085230);
  v20 = type metadata accessor for DateTimeWidgetView(255);
  v21 = type metadata accessor for ClockWidgetEnvironmentObject(255);
  v22 = sub_10000D36C(&qword_100085238, type metadata accessor for DateTimeWidgetView, (uint64_t)&unk_10006D5B8);
  v23 = sub_10000D36C((unint64_t *)&qword_100085240, type metadata accessor for ClockWidgetEnvironmentObject, (uint64_t)&unk_10006DF68);
  v80 = v20;
  v81 = v21;
  v82 = v22;
  v83 = v23;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v80, &opaque type descriptor for <<opaque return type of View.environment<A>(_:)>>, 1);
  v25 = sub_10000D36C(&qword_100085248, (uint64_t (*)(uint64_t))type metadata accessor for DateTimeProvider, (uint64_t)&unk_10006B350);
  StaticConfiguration.init<A>(kind:provider:content:)(0xD00000000000001ELL, 0x800000010006E9E0, &v84, sub_1000154BC, 0, v19, v18, OpaqueTypeConformance2, v25);
  v26 = LocalizedStringKey.init(stringLiteral:)(0x49206B636F6C43, 0xE700000000000000);
  v27 = Text.init(_:tableName:bundle:comment:)(v26);
  v29 = v28;
  v31 = v30;
  v33 = v32 & 1;
  v34 = sub_10001DDB4(&qword_100085250, &qword_100085208, (uint64_t)&protocol conformance descriptor for StaticConfiguration<A>);
  WidgetConfiguration.configurationDisplayName(_:)(v27, v29, v33, v31, v3, v34);
  sub_100010E24(v27, v29, v33);
  swift_bridgeObjectRelease(v31);
  (*(void (**)(char *, uint64_t))(v65 + 8))(v5, v3);
  v35 = sub_1000041D8(&qword_100085100);
  v36 = type metadata accessor for WidgetFamily(0);
  v37 = *(_QWORD *)(v36 - 8);
  v38 = *(unsigned __int8 *)(v37 + 80);
  v39 = (v38 + 32) & ~v38;
  v40 = swift_allocObject(v35, v39 + *(_QWORD *)(v37 + 72), v38 | 7);
  *(_OWORD *)(v40 + 16) = xmmword_10006B090;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v37 + 104))(v40 + v39, enum case for WidgetFamily.systemSmall(_:), v36);
  v80 = v3;
  v81 = v34;
  v41 = swift_getOpaqueTypeConformance2(&v80, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 1);
  v42 = v66;
  WidgetConfiguration.supportedFamilies(_:)(v40, v6, v41);
  swift_bridgeObjectRelease(v40);
  (*(void (**)(char *, uint64_t))(v67 + 8))(v8, v6);
  v43 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000019, 0x800000010006EA40);
  v44 = Text.init(_:tableName:bundle:comment:)(v43);
  v46 = v45;
  v48 = v47;
  v50 = v49 & 1;
  v80 = v6;
  v81 = v41;
  v51 = swift_getOpaqueTypeConformance2(&v80, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v52 = v68;
  v53 = v70;
  WidgetConfiguration.description(_:)(v44, v46, v50, v48, v70, v51);
  sub_100010E24(v44, v46, v50);
  swift_bridgeObjectRelease(v48);
  v54 = v53;
  (*(void (**)(char *, uint64_t))(v71 + 8))(v42, v53);
  v55 = v76;
  v56 = v77;
  v57 = v78;
  (*(void (**)(char *, _QWORD, uint64_t))(v77 + 104))(v76, enum case for WidgetBackgroundStyle.blur(_:), v78);
  v80 = v54;
  v81 = v51;
  v58 = swift_getOpaqueTypeConformance2(&v80, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>, 1);
  v59 = v69;
  v60 = v72;
  WidgetConfiguration.preferredBackgroundStyle(_:)(v55, v72, v58);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v55, v57);
  (*(void (**)(char *, uint64_t))(v73 + 8))(v52, v60);
  v80 = v60;
  v81 = v58;
  v61 = swift_getOpaqueTypeConformance2(&v80, &opaque type descriptor for <<opaque return type of WidgetConfiguration.preferredBackgroundStyle(_:)>>, 1);
  v62 = v74;
  WidgetConfiguration.supportsVibrantContent(_:)(1, v74, v61);
  return (*(uint64_t (**)(char *, uint64_t))(v75 + 8))(v59, v62);
}

uint64_t sub_1000154BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v2 = sub_1000041D8(&qword_100085B10);
  __chkstk_darwin(v2);
  v4 = (uint64_t *)((char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for DateTimeWidgetView(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(a1) = *(_BYTE *)(a1 + *(int *)(type metadata accessor for DateTimeEntry(0) + 24));
  v8 = sub_1000678C4();
  v10 = v9 & 1;
  sub_100025814(v4);
  sub_100043074(a1, v8, v10, (uint64_t)v4, (uint64_t)v7);
  v11 = type metadata accessor for ClockWidgetEnvironmentObject(0);
  v12 = sub_100067DF8();
  v13 = sub_100067E00(v12);
  v14 = sub_10000D36C(&qword_100085238, type metadata accessor for DateTimeWidgetView, (uint64_t)&unk_10006D5B8);
  v15 = sub_10000D36C((unint64_t *)&qword_100085240, type metadata accessor for ClockWidgetEnvironmentObject, (uint64_t)&unk_10006DF68);
  View.environment<A>(_:)(v13, v5, v11, v14, v15);
  swift_release(v13);
  return sub_10000D330((uint64_t)v7, type metadata accessor for DateTimeWidgetView);
}

uint64_t sub_100015638@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t OpaqueTypeConformance2;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v79 = a1;
  v1 = type metadata accessor for WidgetBackgroundStyle(0);
  v77 = *(_QWORD *)(v1 - 8);
  v78 = v1;
  __chkstk_darwin(v1);
  v76 = (char *)&v64 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_1000041D8(&qword_100085258);
  v65 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000041D8(&qword_100085260);
  v67 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000041D8(&qword_100085268);
  v10 = *(_QWORD *)(v9 - 8);
  v70 = v9;
  v71 = v10;
  __chkstk_darwin(v9);
  v66 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000041D8(&qword_100085270);
  v13 = *(_QWORD *)(v12 - 8);
  v72 = v12;
  v73 = v13;
  __chkstk_darwin(v12);
  v68 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000041D8(&qword_100085278);
  v16 = *(_QWORD *)(v15 - 8);
  v74 = v15;
  v75 = v16;
  __chkstk_darwin(v15);
  v69 = (char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DateTimeProvider();
  v84 = sub_1000042B4();
  v19 = sub_1000041D8(&qword_100085280);
  v20 = type metadata accessor for NonNumericWidgetView(255);
  v21 = type metadata accessor for ClockWidgetEnvironmentObject(255);
  v22 = sub_10000D36C(&qword_100085288, type metadata accessor for NonNumericWidgetView, (uint64_t)&unk_10006D608);
  v23 = sub_10000D36C((unint64_t *)&qword_100085240, type metadata accessor for ClockWidgetEnvironmentObject, (uint64_t)&unk_10006DF68);
  v80 = v20;
  v81 = v21;
  v82 = v22;
  v83 = v23;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v80, &opaque type descriptor for <<opaque return type of View.environment<A>(_:)>>, 1);
  v25 = sub_10000D36C(&qword_100085248, (uint64_t (*)(uint64_t))type metadata accessor for DateTimeProvider, (uint64_t)&unk_10006B350);
  StaticConfiguration.init<A>(kind:provider:content:)(0xD00000000000001FLL, 0x800000010006EAA0, &v84, sub_100015C3C, 0, v19, v18, OpaqueTypeConformance2, v25);
  v26 = LocalizedStringKey.init(stringLiteral:)(0x4949206B636F6C43, 0xE800000000000000);
  v27 = Text.init(_:tableName:bundle:comment:)(v26);
  v29 = v28;
  v31 = v30;
  v33 = v32 & 1;
  v34 = sub_10001DDB4(&qword_100085290, &qword_100085258, (uint64_t)&protocol conformance descriptor for StaticConfiguration<A>);
  WidgetConfiguration.configurationDisplayName(_:)(v27, v29, v33, v31, v3, v34);
  sub_100010E24(v27, v29, v33);
  swift_bridgeObjectRelease(v31);
  (*(void (**)(char *, uint64_t))(v65 + 8))(v5, v3);
  v35 = sub_1000041D8(&qword_100085100);
  v36 = type metadata accessor for WidgetFamily(0);
  v37 = *(_QWORD *)(v36 - 8);
  v38 = *(unsigned __int8 *)(v37 + 80);
  v39 = (v38 + 32) & ~v38;
  v40 = swift_allocObject(v35, v39 + *(_QWORD *)(v37 + 72), v38 | 7);
  *(_OWORD *)(v40 + 16) = xmmword_10006B090;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v37 + 104))(v40 + v39, enum case for WidgetFamily.systemSmall(_:), v36);
  v80 = v3;
  v81 = v34;
  v41 = swift_getOpaqueTypeConformance2(&v80, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 1);
  v42 = v66;
  WidgetConfiguration.supportedFamilies(_:)(v40, v6, v41);
  swift_bridgeObjectRelease(v40);
  (*(void (**)(char *, uint64_t))(v67 + 8))(v8, v6);
  v43 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000019, 0x800000010006EA40);
  v44 = Text.init(_:tableName:bundle:comment:)(v43);
  v46 = v45;
  v48 = v47;
  v50 = v49 & 1;
  v80 = v6;
  v81 = v41;
  v51 = swift_getOpaqueTypeConformance2(&v80, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v52 = v68;
  v53 = v70;
  WidgetConfiguration.description(_:)(v44, v46, v50, v48, v70, v51);
  sub_100010E24(v44, v46, v50);
  swift_bridgeObjectRelease(v48);
  v54 = v53;
  (*(void (**)(char *, uint64_t))(v71 + 8))(v42, v53);
  v55 = v76;
  v56 = v77;
  v57 = v78;
  (*(void (**)(char *, _QWORD, uint64_t))(v77 + 104))(v76, enum case for WidgetBackgroundStyle.blur(_:), v78);
  v80 = v54;
  v81 = v51;
  v58 = swift_getOpaqueTypeConformance2(&v80, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>, 1);
  v59 = v69;
  v60 = v72;
  WidgetConfiguration.preferredBackgroundStyle(_:)(v55, v72, v58);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v55, v57);
  (*(void (**)(char *, uint64_t))(v73 + 8))(v52, v60);
  v80 = v60;
  v81 = v58;
  v61 = swift_getOpaqueTypeConformance2(&v80, &opaque type descriptor for <<opaque return type of WidgetConfiguration.preferredBackgroundStyle(_:)>>, 1);
  v62 = v74;
  WidgetConfiguration.supportsVibrantContent(_:)(1, v74, v61);
  return (*(uint64_t (**)(char *, uint64_t))(v75 + 8))(v59, v62);
}

uint64_t sub_100015C3C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v2 = sub_1000041D8(&qword_100085B10);
  __chkstk_darwin(v2);
  v4 = (uint64_t *)((char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for NonNumericWidgetView(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(a1) = *(_BYTE *)(a1 + *(int *)(type metadata accessor for DateTimeEntry(0) + 24));
  v8 = sub_1000678C4();
  v10 = v9 & 1;
  sub_100025814(v4);
  sub_100043C28(a1, v8, v10, (uint64_t)v4, (uint64_t)v7);
  v11 = type metadata accessor for ClockWidgetEnvironmentObject(0);
  v12 = sub_100067E00(3);
  v13 = sub_10000D36C(&qword_100085288, type metadata accessor for NonNumericWidgetView, (uint64_t)&unk_10006D608);
  v14 = sub_10000D36C((unint64_t *)&qword_100085240, type metadata accessor for ClockWidgetEnvironmentObject, (uint64_t)&unk_10006DF68);
  View.environment<A>(_:)(v12, v5, v11, v13, v14);
  swift_release(v12);
  return sub_10000D330((uint64_t)v7, type metadata accessor for NonNumericWidgetView);
}

uint64_t sub_100015DB8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t OpaqueTypeConformance2;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v79 = a1;
  v1 = type metadata accessor for WidgetBackgroundStyle(0);
  v77 = *(_QWORD *)(v1 - 8);
  v78 = v1;
  __chkstk_darwin(v1);
  v76 = (char *)&v64 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_1000041D8(&qword_100085298);
  v65 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000041D8(&qword_1000852A0);
  v67 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000041D8(&qword_1000852A8);
  v10 = *(_QWORD *)(v9 - 8);
  v70 = v9;
  v71 = v10;
  __chkstk_darwin(v9);
  v66 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000041D8(&qword_1000852B0);
  v13 = *(_QWORD *)(v12 - 8);
  v72 = v12;
  v73 = v13;
  __chkstk_darwin(v12);
  v68 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000041D8(&qword_1000852B8);
  v16 = *(_QWORD *)(v15 - 8);
  v74 = v15;
  v75 = v16;
  __chkstk_darwin(v15);
  v69 = (char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DateTimeProvider();
  v84 = sub_1000042B4();
  v19 = sub_1000041D8(&qword_1000852C0);
  v20 = type metadata accessor for SquareWidgetView(255);
  v21 = type metadata accessor for ClockWidgetEnvironmentObject(255);
  v22 = sub_10000D36C(&qword_1000852C8, type metadata accessor for SquareWidgetView, (uint64_t)&unk_10006D658);
  v23 = sub_10000D36C((unint64_t *)&qword_100085240, type metadata accessor for ClockWidgetEnvironmentObject, (uint64_t)&unk_10006DF68);
  v80 = v20;
  v81 = v21;
  v82 = v22;
  v83 = v23;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v80, &opaque type descriptor for <<opaque return type of View.environment<A>(_:)>>, 1);
  v25 = sub_10000D36C(&qword_100085248, (uint64_t (*)(uint64_t))type metadata accessor for DateTimeProvider, (uint64_t)&unk_10006B350);
  StaticConfiguration.init<A>(kind:provider:content:)(0xD00000000000001CLL, 0x800000010006EAC0, &v84, sub_1000163C0, 0, v19, v18, OpaqueTypeConformance2, v25);
  v26 = LocalizedStringKey.init(stringLiteral:)(0x4949206B636F6C43, 0xE900000000000049);
  v27 = Text.init(_:tableName:bundle:comment:)(v26);
  v29 = v28;
  v31 = v30;
  v33 = v32 & 1;
  v34 = sub_10001DDB4(&qword_1000852D0, &qword_100085298, (uint64_t)&protocol conformance descriptor for StaticConfiguration<A>);
  WidgetConfiguration.configurationDisplayName(_:)(v27, v29, v33, v31, v3, v34);
  sub_100010E24(v27, v29, v33);
  swift_bridgeObjectRelease(v31);
  (*(void (**)(char *, uint64_t))(v65 + 8))(v5, v3);
  v35 = sub_1000041D8(&qword_100085100);
  v36 = type metadata accessor for WidgetFamily(0);
  v37 = *(_QWORD *)(v36 - 8);
  v38 = *(unsigned __int8 *)(v37 + 80);
  v39 = (v38 + 32) & ~v38;
  v40 = swift_allocObject(v35, v39 + *(_QWORD *)(v37 + 72), v38 | 7);
  *(_OWORD *)(v40 + 16) = xmmword_10006B090;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v37 + 104))(v40 + v39, enum case for WidgetFamily.systemSmall(_:), v36);
  v80 = v3;
  v81 = v34;
  v41 = swift_getOpaqueTypeConformance2(&v80, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 1);
  v42 = v66;
  WidgetConfiguration.supportedFamilies(_:)(v40, v6, v41);
  swift_bridgeObjectRelease(v40);
  (*(void (**)(char *, uint64_t))(v67 + 8))(v8, v6);
  v43 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000019, 0x800000010006EA40);
  v44 = Text.init(_:tableName:bundle:comment:)(v43);
  v46 = v45;
  v48 = v47;
  v50 = v49 & 1;
  v80 = v6;
  v81 = v41;
  v51 = swift_getOpaqueTypeConformance2(&v80, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v52 = v68;
  v53 = v70;
  WidgetConfiguration.description(_:)(v44, v46, v50, v48, v70, v51);
  sub_100010E24(v44, v46, v50);
  swift_bridgeObjectRelease(v48);
  v54 = v53;
  (*(void (**)(char *, uint64_t))(v71 + 8))(v42, v53);
  v55 = v76;
  v56 = v77;
  v57 = v78;
  (*(void (**)(char *, _QWORD, uint64_t))(v77 + 104))(v76, enum case for WidgetBackgroundStyle.blur(_:), v78);
  v80 = v54;
  v81 = v51;
  v58 = swift_getOpaqueTypeConformance2(&v80, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>, 1);
  v59 = v69;
  v60 = v72;
  WidgetConfiguration.preferredBackgroundStyle(_:)(v55, v72, v58);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v55, v57);
  (*(void (**)(char *, uint64_t))(v73 + 8))(v52, v60);
  v80 = v60;
  v81 = v58;
  v61 = swift_getOpaqueTypeConformance2(&v80, &opaque type descriptor for <<opaque return type of WidgetConfiguration.preferredBackgroundStyle(_:)>>, 1);
  v62 = v74;
  WidgetConfiguration.supportsVibrantContent(_:)(1, v74, v61);
  return (*(uint64_t (**)(char *, uint64_t))(v75 + 8))(v59, v62);
}

uint64_t sub_1000163C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v2 = sub_1000041D8(&qword_100085B10);
  __chkstk_darwin(v2);
  v4 = (uint64_t *)((char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for SquareWidgetView(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(a1) = *(_BYTE *)(a1 + *(int *)(type metadata accessor for DateTimeEntry(0) + 24));
  v8 = sub_1000678C4();
  v10 = v9 & 1;
  sub_100025814(v4);
  sub_100044908(a1, v8, v10, (uint64_t)v4, (uint64_t)v7);
  v11 = type metadata accessor for ClockWidgetEnvironmentObject(0);
  v12 = sub_100067E00(4);
  v13 = sub_10000D36C(&qword_1000852C8, type metadata accessor for SquareWidgetView, (uint64_t)&unk_10006D658);
  v14 = sub_10000D36C((unint64_t *)&qword_100085240, type metadata accessor for ClockWidgetEnvironmentObject, (uint64_t)&unk_10006DF68);
  View.environment<A>(_:)(v12, v5, v11, v13, v14);
  swift_release(v12);
  return sub_10000D330((uint64_t)v7, type metadata accessor for SquareWidgetView);
}

uint64_t sub_10001653C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t OpaqueTypeConformance2;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v79 = a1;
  v1 = type metadata accessor for WidgetBackgroundStyle(0);
  v77 = *(_QWORD *)(v1 - 8);
  v78 = v1;
  __chkstk_darwin(v1);
  v76 = (char *)&v64 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_1000041D8(&qword_1000852D8);
  v65 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000041D8(&qword_1000852E0);
  v67 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000041D8(&qword_1000852E8);
  v10 = *(_QWORD *)(v9 - 8);
  v70 = v9;
  v71 = v10;
  __chkstk_darwin(v9);
  v66 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000041D8(&qword_1000852F0);
  v13 = *(_QWORD *)(v12 - 8);
  v72 = v12;
  v73 = v13;
  __chkstk_darwin(v12);
  v68 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000041D8(&qword_1000852F8);
  v16 = *(_QWORD *)(v15 - 8);
  v74 = v15;
  v75 = v16;
  __chkstk_darwin(v15);
  v69 = (char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DateTimeProvider();
  v84 = sub_1000042B4();
  v19 = sub_1000041D8(&qword_100085300);
  v20 = type metadata accessor for DigitalClockWidgetView(255);
  v21 = type metadata accessor for ClockWidgetEnvironmentObject(255);
  v22 = sub_10000D36C(&qword_100085308, type metadata accessor for DigitalClockWidgetView, (uint64_t)&unk_10006D568);
  v23 = sub_10000D36C((unint64_t *)&qword_100085240, type metadata accessor for ClockWidgetEnvironmentObject, (uint64_t)&unk_10006DF68);
  v80 = v20;
  v81 = v21;
  v82 = v22;
  v83 = v23;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v80, &opaque type descriptor for <<opaque return type of View.environment<A>(_:)>>, 1);
  v25 = sub_10000D36C(&qword_100085248, (uint64_t (*)(uint64_t))type metadata accessor for DateTimeProvider, (uint64_t)&unk_10006B350);
  StaticConfiguration.init<A>(kind:provider:content:)(0xD000000000000023, 0x800000010006EAE0, &v84, sub_100016B4C, 0, v19, v18, OpaqueTypeConformance2, v25);
  v26 = LocalizedStringKey.init(stringLiteral:)(0x6944206B636F6C43, 0xED00006C61746967);
  v27 = Text.init(_:tableName:bundle:comment:)(v26);
  v29 = v28;
  v31 = v30;
  v33 = v32 & 1;
  v34 = sub_10001DDB4(&qword_100085310, &qword_1000852D8, (uint64_t)&protocol conformance descriptor for StaticConfiguration<A>);
  WidgetConfiguration.configurationDisplayName(_:)(v27, v29, v33, v31, v3, v34);
  sub_100010E24(v27, v29, v33);
  swift_bridgeObjectRelease(v31);
  (*(void (**)(char *, uint64_t))(v65 + 8))(v5, v3);
  v35 = sub_1000041D8(&qword_100085100);
  v36 = type metadata accessor for WidgetFamily(0);
  v37 = *(_QWORD *)(v36 - 8);
  v38 = *(unsigned __int8 *)(v37 + 80);
  v39 = (v38 + 32) & ~v38;
  v40 = swift_allocObject(v35, v39 + *(_QWORD *)(v37 + 72), v38 | 7);
  *(_OWORD *)(v40 + 16) = xmmword_10006B090;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v37 + 104))(v40 + v39, enum case for WidgetFamily.systemSmall(_:), v36);
  v80 = v3;
  v81 = v34;
  v41 = swift_getOpaqueTypeConformance2(&v80, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 1);
  v42 = v66;
  WidgetConfiguration.supportedFamilies(_:)(v40, v6, v41);
  swift_bridgeObjectRelease(v40);
  (*(void (**)(char *, uint64_t))(v67 + 8))(v8, v6);
  v43 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000019, 0x800000010006EA40);
  v44 = Text.init(_:tableName:bundle:comment:)(v43);
  v46 = v45;
  v48 = v47;
  v50 = v49 & 1;
  v80 = v6;
  v81 = v41;
  v51 = swift_getOpaqueTypeConformance2(&v80, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v52 = v68;
  v53 = v70;
  WidgetConfiguration.description(_:)(v44, v46, v50, v48, v70, v51);
  sub_100010E24(v44, v46, v50);
  swift_bridgeObjectRelease(v48);
  v54 = v53;
  (*(void (**)(char *, uint64_t))(v71 + 8))(v42, v53);
  v55 = v76;
  v56 = v77;
  v57 = v78;
  (*(void (**)(char *, _QWORD, uint64_t))(v77 + 104))(v76, enum case for WidgetBackgroundStyle.blur(_:), v78);
  v80 = v54;
  v81 = v51;
  v58 = swift_getOpaqueTypeConformance2(&v80, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>, 1);
  v59 = v69;
  v60 = v72;
  WidgetConfiguration.preferredBackgroundStyle(_:)(v55, v72, v58);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v55, v57);
  (*(void (**)(char *, uint64_t))(v73 + 8))(v52, v60);
  v80 = v60;
  v81 = v58;
  v61 = swift_getOpaqueTypeConformance2(&v80, &opaque type descriptor for <<opaque return type of WidgetConfiguration.preferredBackgroundStyle(_:)>>, 1);
  v62 = v74;
  WidgetConfiguration.supportsVibrantContent(_:)(1, v74, v61);
  return (*(uint64_t (**)(char *, uint64_t))(v75 + 8))(v59, v62);
}

uint64_t sub_100016B4C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v2 = sub_1000041D8(&qword_100085B10);
  __chkstk_darwin(v2);
  v4 = (uint64_t *)((char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for DigitalClockWidgetView(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(a1) = *(_BYTE *)(a1 + *(int *)(type metadata accessor for DateTimeEntry(0) + 24));
  v8 = sub_1000678C4();
  v10 = v9 & 1;
  sub_100025814(v4);
  sub_100042CC4(a1, v8, v10, (uint64_t)v4, (uint64_t)v7);
  v11 = type metadata accessor for ClockWidgetEnvironmentObject(0);
  v12 = sub_100067E00(0);
  v13 = sub_10000D36C(&qword_100085308, type metadata accessor for DigitalClockWidgetView, (uint64_t)&unk_10006D568);
  v14 = sub_10000D36C((unint64_t *)&qword_100085240, type metadata accessor for ClockWidgetEnvironmentObject, (uint64_t)&unk_10006DF68);
  View.environment<A>(_:)(v12, v5, v11, v13, v14);
  swift_release(v12);
  return sub_10000D330((uint64_t)v7, type metadata accessor for DigitalClockWidgetView);
}

uint64_t sub_100016CC8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, _QWORD, uint64_t);
  uint64_t OpaqueTypeConformance2;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v50 = a1;
  v1 = sub_1000041D8(&qword_100085318);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000041D8(&qword_100085320);
  v47 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000041D8(&qword_100085328);
  v9 = *(_QWORD *)(v8 - 8);
  v48 = v8;
  v49 = v9;
  __chkstk_darwin(v8);
  v46 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_10000956C();
  v11 = type metadata accessor for AlarmsWidget.WidgetView(0);
  v12 = sub_10000D36C(&qword_100085330, type metadata accessor for AlarmsWidget.WidgetView, (uint64_t)&unk_10006BBFC);
  v13 = sub_1000171D4();
  StaticConfiguration.init<A>(kind:provider:content:)(0xD00000000000001BLL, 0x800000010006EB10, &v51, sub_1000170E0, 0, v11, &type metadata for AlarmProvider, v12, v13);
  v14 = LocalizedStringKey.init(stringLiteral:)(0x616C41207478654ELL, 0xEA00000000006D72);
  v15 = Text.init(_:tableName:bundle:comment:)(v14);
  v17 = v16;
  v19 = v18;
  v21 = v20 & 1;
  v22 = sub_10001DDB4(&qword_100085340, &qword_100085318, (uint64_t)&protocol conformance descriptor for StaticConfiguration<A>);
  WidgetConfiguration.configurationDisplayName(_:)(v15, v17, v21, v19, v1, v22);
  sub_100010E24(v15, v17, v21);
  swift_bridgeObjectRelease(v19);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  v23 = sub_1000041D8(&qword_100085100);
  v24 = type metadata accessor for WidgetFamily(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(_QWORD *)(v25 + 72);
  v27 = *(unsigned __int8 *)(v25 + 80);
  v28 = (v27 + 32) & ~v27;
  v29 = swift_allocObject(v23, v28 + 3 * v26, v27 | 7);
  *(_OWORD *)(v29 + 16) = xmmword_10006B760;
  v30 = v29 + v28;
  v31 = *(void (**)(uint64_t, _QWORD, uint64_t))(v25 + 104);
  v31(v30, enum case for WidgetFamily.accessoryRectangular(_:), v24);
  v31(v30 + v26, enum case for WidgetFamily.accessoryInline(_:), v24);
  v31(v30 + 2 * v26, enum case for WidgetFamily.accessoryCircular(_:), v24);
  v51 = v1;
  v52 = v22;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v51, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 1);
  v33 = v46;
  WidgetConfiguration.supportedFamilies(_:)(v29, v5, OpaqueTypeConformance2);
  swift_bridgeObjectRelease(v29);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v7, v5);
  v34 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000017, 0x800000010006EB60);
  v35 = Text.init(_:tableName:bundle:comment:)(v34);
  v37 = v36;
  v39 = v38;
  v41 = v40 & 1;
  v51 = v5;
  v52 = OpaqueTypeConformance2;
  v42 = swift_getOpaqueTypeConformance2(&v51, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v43 = v48;
  WidgetConfiguration.description(_:)(v35, v37, v41, v39, v48, v42);
  sub_100010E24(v35, v37, v41);
  swift_bridgeObjectRelease(v39);
  return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v33, v43);
}

uint64_t sub_1000170E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000170F4(a1, type metadata accessor for AlarmEntry, type metadata accessor for AlarmsWidget.WidgetView, a2);
}

uint64_t sub_1000170F4@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t (*a3)(_QWORD)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t KeyPath;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v15;

  v8 = a2(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v15 - v9;
  sub_10000DF30(a1, (uint64_t)&v15 - v9, a2);
  KeyPath = swift_getKeyPath(&unk_10006B770);
  v12 = (uint64_t *)(a4 + *(int *)(a3(0) + 20));
  *v12 = KeyPath;
  v13 = sub_1000041D8(&qword_1000850C0);
  swift_storeEnumTagMultiPayload(v12, v13, 0);
  return sub_1000106E0((uint64_t)v10, a4, a2);
}

uint64_t type metadata accessor for AlarmsWidget.WidgetView(uint64_t a1)
{
  return sub_10000DEFC(a1, (uint64_t *)&unk_100089990, (uint64_t)&nominal type descriptor for AlarmsWidget.WidgetView);
}

unint64_t sub_1000171D4()
{
  unint64_t result;

  result = qword_100085338;
  if (!qword_100085338)
  {
    result = swift_getWitnessTable(&unk_10006B400, &type metadata for AlarmProvider);
    atomic_store(result, (unint64_t *)&qword_100085338);
  }
  return result;
}

uint64_t sub_100017218@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10001722C(a1, a2, type metadata accessor for AlarmEntry, type metadata accessor for AlarmsWidget.WidgetView, a3);
}

uint64_t sub_10001722C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(_QWORD)@<X2>, uint64_t (*a4)(_QWORD)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;

  sub_1000106E0(a1, a5, a3);
  v8 = a4(0);
  return sub_10001DE5C(a2, a5 + *(int *)(v8 + 20), &qword_100085108);
}

uint64_t sub_100017280()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, _QWORD, uint64_t);

  v0 = sub_1000041D8(&qword_100085100);
  v1 = type metadata accessor for WidgetFamily(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = *(unsigned __int8 *)(v2 + 80);
  v5 = (v4 + 32) & ~v4;
  v6 = swift_allocObject(v0, v5 + 3 * v3, v4 | 7);
  *(_OWORD *)(v6 + 16) = xmmword_10006B760;
  v7 = v6 + v5;
  v8 = *(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 104);
  v8(v7, enum case for WidgetFamily.accessoryRectangular(_:), v1);
  v8(v7 + v3, enum case for WidgetFamily.accessoryInline(_:), v1);
  v8(v7 + 2 * v3, enum case for WidgetFamily.accessoryCircular(_:), v1);
  return v6;
}

uint64_t sub_100017354@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10000DF30(v1, a1, type metadata accessor for AlarmEntry);
}

uint64_t sub_100017378(uint64_t a1)
{
  uint64_t v1;

  return sub_100017398(a1, v1, type metadata accessor for AlarmEntry);
}

uint64_t sub_100017398(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000173DC@<X0>(uint64_t a1@<X8>)
{
  return sub_100011A38((void (*)(_QWORD))type metadata accessor for AlarmsWidget.WidgetView, a1);
}

uint64_t sub_1000173E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000173F0(v1, a1);
}

uint64_t sub_1000173F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  int v42;
  _OWORD *v43;
  __int128 v44;
  __int128 v45;
  _QWORD *v46;
  char v47;
  char v48;
  char v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t OpaqueTypeConformance2;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  char *v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  char *v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  __int128 v152;
  ValueMetadata *v153;
  _UNKNOWN **v154;
  _OWORD v155[4];

  v151 = a2;
  v144 = type metadata accessor for AlarmSmallWidgetView(0);
  __chkstk_darwin(v144);
  v123 = (uint64_t)&v118 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v146 = sub_1000041D8(&qword_100085AD8);
  v124 = *(_QWORD *)(v146 - 8);
  v4 = __chkstk_darwin(v146);
  v122 = (char *)&v118 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v126 = (char *)&v118 - v6;
  v141 = sub_1000041D8(&qword_100085AE0);
  __chkstk_darwin(v141);
  v143 = (char *)&v118 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v150 = sub_1000041D8(&qword_100085A58);
  __chkstk_darwin(v150);
  v145 = (char *)&v118 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000041D8(&qword_100085AD0);
  __chkstk_darwin(v9);
  v134 = (char **)((char *)&v118 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = type metadata accessor for AlarmComplicationCircularView(0);
  __chkstk_darwin(v11);
  v135 = (uint64_t)&v118 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = sub_1000041D8(&qword_100085A60);
  __chkstk_darwin(v140);
  v137 = (uint64_t)&v118 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = sub_1000041D8(&qword_100085AE8);
  v139 = *(_QWORD *)(v142 - 8);
  v14 = __chkstk_darwin(v142);
  v136 = (char *)&v118 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v138 = (char *)&v118 - v16;
  v131 = type metadata accessor for AlarmInlineComplicationView(0);
  __chkstk_darwin(v131);
  v119 = (uint64_t)&v118 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = sub_1000041D8(&qword_100085AF0);
  v121 = *(_QWORD *)(v133 - 8);
  v18 = __chkstk_darwin(v133);
  v118 = (char *)&v118 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v120 = (char *)&v118 - v20;
  v147 = sub_1000041D8(&qword_100085AF8);
  __chkstk_darwin(v147);
  v149 = (uint64_t)&v118 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = sub_1000041D8(&qword_100085B00);
  __chkstk_darwin(v128);
  v130 = (char *)&v118 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v148 = sub_1000041D8(&qword_100085A38);
  __chkstk_darwin(v148);
  v132 = (char *)&v118 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_1000041D8(&qword_100085AC8);
  __chkstk_darwin(v24);
  v26 = (char *)&v118 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for AlarmEntry(0);
  __chkstk_darwin(v27);
  v29 = (char *)&v118 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = type metadata accessor for AlarmComplicationRectangularView(0);
  __chkstk_darwin(v127);
  v31 = (char *)&v118 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = sub_1000041D8(&qword_100085B08);
  v125 = *(_QWORD *)(v129 - 8);
  v32 = __chkstk_darwin(v129);
  v34 = (char *)&v118 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v36 = (char *)&v118 - v35;
  v37 = type metadata accessor for WidgetFamily(0);
  v38 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v40 = (char *)&v118 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AlarmsWidget.WidgetView(0);
  v41 = a1;
  sub_100010740((uint64_t)v40);
  v42 = (*(uint64_t (**)(char *, uint64_t))(v38 + 88))(v40, v37);
  if (v42 == enum case for WidgetFamily.accessoryCircular(_:))
  {
    sub_10000DF30(a1, (uint64_t)v29, type metadata accessor for AlarmEntry);
    sub_100039578(v155);
    v153 = &type metadata for AnalogueCircularDimensions;
    v154 = &off_100082780;
    v43 = (_OWORD *)swift_allocObject(&unk_100081EC0, 80, 7);
    *(_QWORD *)&v152 = v43;
    v44 = v155[1];
    v43[1] = v155[0];
    v43[2] = v44;
    v45 = v155[3];
    v43[3] = v155[2];
    v43[4] = v45;
    v46 = v134;
    sub_100026660(v134);
    v47 = sub_10000422C();
    v48 = sub_10000422C();
    v49 = sub_10000422C();
    v50 = v48 & 1;
    v51 = v135;
    v52 = sub_10004DDCC((uint64_t)v46, (uint64_t)v29, &v152, v47 & 1, v50, v49 & 1, v135);
    v53 = static Alignment.center.getter(v52);
    v54 = v137;
    sub_10001400C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v137, 0.0, 1, INFINITY, 0, v53, v55, type metadata accessor for AlarmComplicationCircularView, &qword_100085A60);
    sub_10000D330(v51, type metadata accessor for AlarmComplicationCircularView);
    URL.init(string:)(0xD000000000000013, 0x800000010006ED10);
    v56 = sub_10001DACC();
    v57 = v136;
    v58 = v140;
    View.widgetURL(_:)(v26, v140, v56);
    sub_1000106A4((uint64_t)v26, &qword_100085AC8);
    sub_1000106A4(v54, &qword_100085A60);
    v59 = v139;
    v60 = v138;
    v61 = v142;
    (*(void (**)(char *, char *, uint64_t))(v139 + 32))(v138, v57, v142);
    v62 = v143;
    (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v143, v60, v61);
    swift_storeEnumTagMultiPayload(v62, v141, 0);
    *(_QWORD *)&v152 = v58;
    *((_QWORD *)&v152 + 1) = v56;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v152, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
    v64 = sub_10000D36C(&qword_100085A78, type metadata accessor for AlarmSmallWidgetView, (uint64_t)&unk_10006D6F8);
    *(_QWORD *)&v152 = v144;
    *((_QWORD *)&v152 + 1) = v64;
    v65 = swift_getOpaqueTypeConformance2(&v152, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
    v66 = (uint64_t)v145;
    _ConditionalContent<>.init(storage:)(v62, v61, v146, OpaqueTypeConformance2, v65);
    v67 = v149;
    sub_10001DEA0(v66, v149, &qword_100085A58);
    swift_storeEnumTagMultiPayload(v67, v147, 1);
    v68 = sub_10001D908();
    v69 = sub_10001D9F4();
    _ConditionalContent<>.init(storage:)(v67, v148, v150, v68, v69);
    sub_1000106A4(v66, &qword_100085A58);
    return (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v60, v61);
  }
  else
  {
    v71 = v42;
    if (v42 == enum case for WidgetFamily.accessoryRectangular(_:))
    {
      sub_10000DF30(v41, (uint64_t)v29, type metadata accessor for AlarmEntry);
      sub_100048488((uint64_t)v29, (uint64_t)v31);
      URL.init(string:)(0xD000000000000013, 0x800000010006ED10);
      v72 = sub_10000D36C(&qword_100085A40, type metadata accessor for AlarmComplicationRectangularView, (uint64_t)&unk_10006D748);
      v73 = v127;
      View.widgetURL(_:)(v26, v127, v72);
      sub_1000106A4((uint64_t)v26, &qword_100085AC8);
      sub_10000D330((uint64_t)v31, type metadata accessor for AlarmComplicationRectangularView);
      v74 = v125;
      v75 = v34;
      v76 = v129;
      (*(void (**)(char *, char *, uint64_t))(v125 + 32))(v36, v75, v129);
      v77 = v130;
      (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v130, v36, v76);
      swift_storeEnumTagMultiPayload(v77, v128, 0);
      *(_QWORD *)&v155[0] = v73;
      *((_QWORD *)&v155[0] + 1) = v72;
      v78 = swift_getOpaqueTypeConformance2(v155, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
      v79 = sub_10000D36C(&qword_100085A48, type metadata accessor for AlarmInlineComplicationView, (uint64_t)&unk_10006D798);
      *(_QWORD *)&v155[0] = v131;
      *((_QWORD *)&v155[0] + 1) = v79;
      v80 = swift_getOpaqueTypeConformance2(v155, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
      v81 = (uint64_t)v132;
      _ConditionalContent<>.init(storage:)(v77, v76, v133, v78, v80);
      v82 = v149;
      sub_10001DEA0(v81, v149, &qword_100085A38);
      swift_storeEnumTagMultiPayload(v82, v147, 0);
      v83 = sub_10001D908();
      v84 = sub_10001D9F4();
      _ConditionalContent<>.init(storage:)(v82, v148, v150, v83, v84);
      sub_1000106A4(v81, &qword_100085A38);
      return (*(uint64_t (**)(char *, uint64_t))(v74 + 8))(v36, v76);
    }
    else
    {
      v85 = enum case for WidgetFamily.accessoryInline(_:);
      sub_10000DF30(v41, (uint64_t)v29, type metadata accessor for AlarmEntry);
      if (v71 == v85)
      {
        v86 = v119;
        sub_100048488((uint64_t)v29, v119);
        URL.init(string:)(0xD000000000000013, 0x800000010006ED10);
        v87 = sub_10000D36C(&qword_100085A48, type metadata accessor for AlarmInlineComplicationView, (uint64_t)&unk_10006D798);
        v88 = v118;
        v89 = v131;
        View.widgetURL(_:)(v26, v131, v87);
        sub_1000106A4((uint64_t)v26, &qword_100085AC8);
        sub_10000D330(v86, type metadata accessor for AlarmInlineComplicationView);
        v90 = v121;
        v91 = v120;
        v92 = v88;
        v93 = v133;
        (*(void (**)(char *, char *, uint64_t))(v121 + 32))(v120, v92, v133);
        v94 = v130;
        (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v130, v91, v93);
        swift_storeEnumTagMultiPayload(v94, v128, 1);
        v95 = sub_10000D36C(&qword_100085A40, type metadata accessor for AlarmComplicationRectangularView, (uint64_t)&unk_10006D748);
        *(_QWORD *)&v155[0] = v127;
        *((_QWORD *)&v155[0] + 1) = v95;
        v96 = swift_getOpaqueTypeConformance2(v155, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
        *(_QWORD *)&v155[0] = v89;
        *((_QWORD *)&v155[0] + 1) = v87;
        v97 = swift_getOpaqueTypeConformance2(v155, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
        v98 = (uint64_t)v132;
        _ConditionalContent<>.init(storage:)(v94, v129, v93, v96, v97);
        v99 = v149;
        sub_10001DEA0(v98, v149, &qword_100085A38);
        swift_storeEnumTagMultiPayload(v99, v147, 0);
        v100 = sub_10001D908();
        v101 = sub_10001D9F4();
        _ConditionalContent<>.init(storage:)(v99, v148, v150, v100, v101);
        sub_1000106A4(v98, &qword_100085A38);
        return (*(uint64_t (**)(char *, uint64_t))(v90 + 8))(v91, v93);
      }
      else
      {
        v102 = v123;
        sub_100048488((uint64_t)v29, v123);
        URL.init(string:)(0xD000000000000013, 0x800000010006ED10);
        v103 = sub_10000D36C(&qword_100085A78, type metadata accessor for AlarmSmallWidgetView, (uint64_t)&unk_10006D6F8);
        v104 = v122;
        v105 = v144;
        View.widgetURL(_:)(v26, v144, v103);
        sub_1000106A4((uint64_t)v26, &qword_100085AC8);
        sub_10000D330(v102, type metadata accessor for AlarmSmallWidgetView);
        v106 = v124;
        v107 = v126;
        v108 = v104;
        v109 = v146;
        (*(void (**)(char *, char *, uint64_t))(v124 + 32))(v126, v108, v146);
        v110 = v143;
        (*(void (**)(char *, char *, uint64_t))(v106 + 16))(v143, v107, v109);
        swift_storeEnumTagMultiPayload(v110, v141, 1);
        v111 = sub_10001DACC();
        *(_QWORD *)&v155[0] = v140;
        *((_QWORD *)&v155[0] + 1) = v111;
        v112 = swift_getOpaqueTypeConformance2(v155, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
        *(_QWORD *)&v155[0] = v105;
        *((_QWORD *)&v155[0] + 1) = v103;
        v113 = swift_getOpaqueTypeConformance2(v155, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
        v114 = (uint64_t)v145;
        _ConditionalContent<>.init(storage:)(v110, v142, v109, v112, v113);
        v115 = v149;
        sub_10001DEA0(v114, v149, &qword_100085A58);
        swift_storeEnumTagMultiPayload(v115, v147, 1);
        v116 = sub_10001D908();
        v117 = sub_10001D9F4();
        _ConditionalContent<>.init(storage:)(v115, v148, v150, v116, v117);
        sub_1000106A4(v114, &qword_100085A58);
        (*(void (**)(char *, uint64_t))(v106 + 8))(v126, v109);
        return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v40, v37);
      }
    }
  }
}

uint64_t sub_10001824C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t OpaqueTypeConformance2;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v58 = a1;
  v1 = sub_1000041D8(&qword_100085348);
  v52 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v52 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1000041D8(&qword_100085350);
  v5 = *(_QWORD *)(v4 - 8);
  v54 = v4;
  v55 = v5;
  __chkstk_darwin(v4);
  v7 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000041D8(&qword_100085358);
  v9 = *(_QWORD *)(v8 - 8);
  v56 = v8;
  v57 = v9;
  __chkstk_darwin(v8);
  v53 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10000DF74(0, &qword_1000850E0, ClocksSingleIntent_ptr);
  v12 = type metadata accessor for WorldClockSingleProvider();
  v63 = sub_1000042B4();
  v13 = sub_1000041D8(&qword_100085360);
  v14 = sub_100010DE0(&qword_100085368);
  v15 = type metadata accessor for ClockWidgetEnvironmentObject(255);
  v16 = sub_100010DE0(&qword_100085370);
  v17 = sub_100018B20();
  v59 = v16;
  v60 = v17;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v59, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
  v19 = sub_10000D36C((unint64_t *)&qword_100085240, type metadata accessor for ClockWidgetEnvironmentObject, (uint64_t)&unk_10006DF68);
  v59 = v14;
  v60 = v15;
  v61 = OpaqueTypeConformance2;
  v62 = v19;
  v20 = swift_getOpaqueTypeConformance2(&v59, &opaque type descriptor for <<opaque return type of View.environment<A>(_:)>>, 1);
  v21 = sub_10000D36C(&qword_1000850F0, (uint64_t (*)(uint64_t))type metadata accessor for WorldClockSingleProvider, (uint64_t)&unk_10006B138);
  IntentConfiguration.init<A>(kind:intent:provider:content:)(0xD000000000000023, 0x800000010006EBC0, v11, &v63, sub_1000186E4, 0, v11, v13, v12, v20, v21);
  v22 = LocalizedStringKey.init(stringLiteral:)(0x616E412079746943, 0xEB00000000676F6CLL);
  v23 = Text.init(_:tableName:bundle:comment:)(v22);
  v25 = v24;
  v27 = v26;
  v29 = v28 & 1;
  v30 = sub_10001DDB4(&qword_100085388, &qword_100085348, (uint64_t)&protocol conformance descriptor for IntentConfiguration<A, B>);
  WidgetConfiguration.configurationDisplayName(_:)(v23, v25, v29, v27, v1, v30);
  sub_100010E24(v23, v25, v29);
  swift_bridgeObjectRelease(v27);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v3, v1);
  v31 = sub_1000041D8(&qword_100085100);
  v32 = type metadata accessor for WidgetFamily(0);
  v33 = *(_QWORD *)(v32 - 8);
  v34 = *(unsigned __int8 *)(v33 + 80);
  v35 = (v34 + 32) & ~v34;
  v36 = swift_allocObject(v31, v35 + *(_QWORD *)(v33 + 72), v34 | 7);
  *(_OWORD *)(v36 + 16) = xmmword_10006B090;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v33 + 104))(v36 + v35, enum case for WidgetFamily.accessoryCircular(_:), v32);
  v59 = v1;
  v60 = v30;
  v37 = swift_getOpaqueTypeConformance2(&v59, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 1);
  v39 = v53;
  v38 = v54;
  WidgetConfiguration.supportedFamilies(_:)(v36, v54, v37);
  swift_bridgeObjectRelease(v36);
  v40 = v38;
  (*(void (**)(char *, uint64_t))(v55 + 8))(v7, v38);
  v41 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000003ALL, 0x800000010006E7D0);
  v42 = Text.init(_:tableName:bundle:comment:)(v41);
  v44 = v43;
  v46 = v45;
  v48 = v47 & 1;
  v59 = v40;
  v60 = v37;
  v49 = swift_getOpaqueTypeConformance2(&v59, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v50 = v56;
  WidgetConfiguration.description(_:)(v42, v44, v48, v46, v56, v49);
  sub_100010E24(v42, v44, v48);
  swift_bridgeObjectRelease(v46);
  return (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v39, v50);
}

uint64_t sub_1000186E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _OWORD *v24;
  __int128 v25;
  __int128 v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t OpaqueTypeConformance2;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  ValueMetadata *v50;
  _UNKNOWN **v51;
  _OWORD v52[4];

  v48 = a2;
  v3 = sub_1000041D8(&qword_100085AC8);
  __chkstk_darwin(v3);
  v5 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000041D8(&qword_100085AD0);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for WorldClockEntry(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ClockCircularAnalogueComplication(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000041D8(&qword_100085370);
  __chkstk_darwin(v15);
  v17 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1000041D8(&qword_100085368);
  v46 = *(_QWORD *)(v18 - 8);
  v47 = v18;
  __chkstk_darwin(v18);
  v20 = (char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_1000041D8(&qword_100085360);
  v44 = *(_QWORD *)(v21 - 8);
  v45 = v21;
  __chkstk_darwin(v21);
  v23 = (char *)&v44 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000DF30(a1, (uint64_t)v11, type metadata accessor for WorldClockEntry);
  sub_100039578(v52);
  v50 = &type metadata for AnalogueCircularDimensions;
  v51 = &off_100082780;
  v24 = (_OWORD *)swift_allocObject(&unk_100081EC0, 80, 7);
  *(_QWORD *)&v49 = v24;
  v25 = v52[1];
  v24[1] = v52[0];
  v24[2] = v25;
  v26 = v52[3];
  v24[3] = v52[2];
  v24[4] = v26;
  sub_100026660(v8);
  LOBYTE(a1) = sub_10000422C();
  v27 = sub_10000422C();
  v28 = sub_10000422C();
  v29 = sub_10004A4B8((uint64_t)v11, (uint64_t)v8, &v49, a1 & 1, v27 & 1, v28 & 1, (uint64_t)v14);
  v30 = static Alignment.center.getter(v29);
  sub_10001400C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v17, 0.0, 1, INFINITY, 0, v30, v31, type metadata accessor for ClockCircularAnalogueComplication, &qword_100085370);
  sub_10000D330((uint64_t)v14, type metadata accessor for ClockCircularAnalogueComplication);
  v32 = objc_msgSend((id)objc_opt_self(MTUtilities), "widgetURL");
  if (v32)
  {
    v33 = v32;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v34 = type metadata accessor for URL(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v5, 0, 1, v34);
  }
  else
  {
    v35 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v5, 1, 1, v35);
  }
  v36 = sub_100018B20();
  View.widgetURL(_:)(v5, v15, v36);
  sub_1000106A4((uint64_t)v5, &qword_100085AC8);
  sub_1000106A4((uint64_t)v17, &qword_100085370);
  v37 = type metadata accessor for ClockWidgetEnvironmentObject(0);
  v38 = sub_100067DF8();
  v39 = sub_100067E00(v38);
  *(_QWORD *)&v49 = v15;
  *((_QWORD *)&v49 + 1) = v36;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v49, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
  v41 = sub_10000D36C((unint64_t *)&qword_100085240, type metadata accessor for ClockWidgetEnvironmentObject, (uint64_t)&unk_10006DF68);
  v42 = v47;
  View.environment<A>(_:)(v39, v47, v37, OpaqueTypeConformance2, v41);
  swift_release(v39);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v20, v42);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v44 + 32))(v48, v23, v45);
}

unint64_t sub_100018B20()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100085378;
  if (!qword_100085378)
  {
    v1 = sub_100010DE0(&qword_100085370);
    sub_10000D36C(&qword_100085380, type metadata accessor for ClockCircularAnalogueComplication, (uint64_t)&unk_10006D7E8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100085378);
  }
  return result;
}

uint64_t sub_100018BA4()
{
  return sub_100018BB0((unsigned int *)&enum case for WidgetFamily.accessoryCircular(_:));
}

uint64_t sub_100018BB0(unsigned int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = sub_1000041D8(&qword_100085100);
  v3 = type metadata accessor for WidgetFamily(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v2, v6 + *(_QWORD *)(v4 + 72), v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_10006B090;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v7 + v6, *a1, v3);
  return v7;
}

uint64_t sub_100018C48@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t KeyPath;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t);
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  void (*v52)(char *, uint64_t);
  uint64_t v53;
  void (*v54)(char *, uint64_t);
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  _QWORD *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79[10];

  v72 = a1;
  v1 = sub_1000041D8(&qword_100085390);
  v70 = *(_QWORD *)(v1 - 8);
  v71 = v1;
  v2 = __chkstk_darwin(v1);
  v78 = (char *)&v57 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v69 = (uint64_t)&v57 - v4;
  v5 = type metadata accessor for CityWidgetDigital(0);
  v6 = __chkstk_darwin(v5);
  v8 = (uint64_t *)((char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v6);
  v68 = (uint64_t)&v57 - v9;
  v10 = type metadata accessor for WorldClockWidgetMulti(0);
  v11 = __chkstk_darwin(v10);
  v13 = (uint64_t *)((char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v11);
  v15 = (char *)&v57 - v14;
  v58 = (uint64_t)&v57 - v14;
  v67 = sub_1000041D8(&qword_100085398);
  v66 = *(_QWORD *)(v67 - 8);
  v16 = __chkstk_darwin(v67);
  v77 = (char *)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v62 = (char *)&v57 - v18;
  v76 = sub_1000041D8(&qword_1000853A0);
  v60 = *(_QWORD *)(v76 - 8);
  v19 = v60;
  v20 = __chkstk_darwin(v76);
  v75 = (char *)&v57 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v23 = (char *)&v57 - v22;
  v24 = sub_1000041D8(&qword_1000853A8);
  v25 = *(_QWORD *)(v24 - 8);
  v63 = v24;
  v65 = v25;
  v26 = __chkstk_darwin(v24);
  v74 = (char *)&v57 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v29 = (char *)&v57 - v28;
  v30 = sub_1000191BC();
  v64 = v29;
  static WidgetBundleBuilder.buildBlock<A>(_:)(v30, &type metadata for DigitalClockWidget, v30);
  v31 = sub_1000041D8(&qword_1000853B8);
  v59 = v23;
  TupleWidget.init(_:)(v31, v31);
  sub_100019230();
  *v13 = swift_getKeyPath(&unk_10006B770);
  v32 = sub_1000041D8(&qword_1000850C0);
  swift_storeEnumTagMultiPayload(v13, v32, 0);
  sub_1000106E0((uint64_t)v13, (uint64_t)v15, type metadata accessor for WorldClockWidgetMulti);
  KeyPath = swift_getKeyPath(&unk_10006B770);
  v73 = v8;
  *v8 = KeyPath;
  swift_storeEnumTagMultiPayload(v8, v32, 0);
  v34 = v68;
  sub_1000106E0((uint64_t)v8, v68, type metadata accessor for CityWidgetDigital);
  v35 = v69;
  sub_100019378(v69);
  v36 = (uint64_t)v74;
  (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v74, v29, v24);
  v79[0] = v36;
  v37 = (uint64_t)v75;
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v75, v23, v76);
  v79[1] = v37;
  v38 = v66;
  v39 = (uint64_t)v77;
  v40 = v62;
  v41 = v67;
  (*(void (**)(char *, char *, uint64_t))(v66 + 16))(v77, v62, v67);
  v79[3] = v39;
  v42 = v58;
  v61 = v13;
  sub_10000DF30(v58, (uint64_t)v13, type metadata accessor for WorldClockWidgetMulti);
  v79[4] = (uint64_t)v13;
  v43 = (uint64_t)v73;
  sub_10000DF30(v34, (uint64_t)v73, type metadata accessor for CityWidgetDigital);
  v79[5] = v43;
  v44 = v70;
  v45 = (uint64_t)v78;
  v46 = v35;
  v47 = v35;
  v48 = v71;
  (*(void (**)(char *, uint64_t, uint64_t))(v70 + 16))(v78, v46, v71);
  v79[8] = v45;
  sub_100019674(v79);
  v49 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
  v50 = v48;
  v49(v47, v48);
  sub_10000D330(v34, type metadata accessor for CityWidgetDigital);
  sub_10000D330(v42, type metadata accessor for WorldClockWidgetMulti);
  v51 = *(void (**)(char *, uint64_t))(v38 + 8);
  v51(v40, v41);
  v52 = *(void (**)(char *, uint64_t))(v60 + 8);
  v53 = v76;
  v52(v59, v76);
  v54 = *(void (**)(char *, uint64_t))(v65 + 8);
  v55 = v63;
  v54(v64, v63);
  v49((uint64_t)v78, v50);
  sub_10000D330((uint64_t)v73, type metadata accessor for CityWidgetDigital);
  sub_10000D330((uint64_t)v61, type metadata accessor for WorldClockWidgetMulti);
  v51(v77, v41);
  v52(v75, v53);
  return ((uint64_t (*)(char *, uint64_t))v54)(v74, v55);
}

uint64_t type metadata accessor for CityWidgetDigital(uint64_t a1)
{
  return sub_10000DEFC(a1, (uint64_t *)&unk_100089950, (uint64_t)&nominal type descriptor for CityWidgetDigital);
}

uint64_t type metadata accessor for WorldClockWidgetMulti(uint64_t a1)
{
  return sub_10000DEFC(a1, (uint64_t *)&unk_100089970, (uint64_t)&nominal type descriptor for WorldClockWidgetMulti);
}

uint64_t sub_10001918C()
{
  unint64_t v0;

  v0 = sub_1000191BC();
  return static WidgetBundleBuilder.buildBlock<A>(_:)(v0, &type metadata for DigitalClockWidget, v0);
}

unint64_t sub_1000191BC()
{
  unint64_t result;

  result = qword_1000853B0;
  if (!qword_1000853B0)
  {
    result = swift_getWitnessTable(&unk_10006BBBC, &type metadata for DigitalClockWidget);
    atomic_store(result, (unint64_t *)&qword_1000853B0);
  }
  return result;
}

uint64_t sub_100019200()
{
  uint64_t v0;

  v0 = sub_1000041D8(&qword_1000853B8);
  return TupleWidget.init(_:)(v0, v0);
}

uint64_t sub_100019230()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v0 = sub_1000041D8(&qword_1000853C0);
  __chkstk_darwin(v0);
  v2 = (char *)&v11 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for WorldClockWidgetSingle(0);
  v4 = __chkstk_darwin(v3);
  v6 = (uint64_t *)((char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4);
  v8 = (char *)&v11 - v7;
  *v6 = swift_getKeyPath(&unk_10006B770);
  v9 = sub_1000041D8(&qword_1000850C0);
  swift_storeEnumTagMultiPayload(v6, v9, 0);
  sub_1000106E0((uint64_t)v6, (uint64_t)v8, type metadata accessor for WorldClockWidgetSingle);
  sub_10000DF30((uint64_t)v8, (uint64_t)v6, type metadata accessor for WorldClockWidgetSingle);
  sub_10000DF30((uint64_t)v6, (uint64_t)v2, type metadata accessor for WorldClockWidgetSingle);
  TupleWidget.init(_:)(v2, v0);
  sub_10000D330((uint64_t)v8, type metadata accessor for WorldClockWidgetSingle);
  return sub_10000D330((uint64_t)v6, type metadata accessor for WorldClockWidgetSingle);
}

uint64_t sub_100019378@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  void (*v23)(char *, char *, uint64_t);
  char *v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  void (*v33)(char *, uint64_t);
  void (*v34)(char *, uint64_t);
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;

  v52 = a1;
  v51 = sub_1000041D8(&qword_1000853C8);
  __chkstk_darwin(v51);
  v49 = (char *)&v38 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = sub_1000041D8(&qword_1000853D0);
  v40 = *(_QWORD *)(v50 - 8);
  v2 = v40;
  v3 = __chkstk_darwin(v50);
  v48 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v6 = (char *)&v38 - v5;
  v47 = sub_1000041D8(&qword_1000853D8);
  v43 = *(_QWORD *)(v47 - 8);
  v7 = v43;
  v8 = __chkstk_darwin(v47);
  v53 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v38 - v10;
  v12 = sub_1000041D8(&qword_1000853E0);
  v46 = *(_QWORD *)(v12 - 8);
  v13 = v46;
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v38 - v17;
  v19 = sub_1000197F0();
  v45 = v18;
  _ControlWidgetAdaptor.init(_:)(v19, &type metadata for AlarmControl, v19);
  v20 = sub_100019834();
  v42 = v11;
  _ControlWidgetAdaptor.init(_:)(v20, &type metadata for StopwatchControl, v20);
  v21 = sub_100019878();
  v39 = v6;
  _ControlWidgetAdaptor.init(_:)(v21, &type metadata for TimersControl, v21);
  v22 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  v44 = v16;
  v41 = v12;
  v22(v16, v18, v12);
  v23 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v24 = v53;
  v25 = v47;
  v23(v53, v11, v47);
  v26 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
  v27 = v48;
  v28 = v50;
  v26(v48, v6, v50);
  v29 = v49;
  v22(v49, v16, v12);
  v30 = v51;
  v31 = v25;
  v23(&v29[*(int *)(v51 + 48)], v24, v25);
  v32 = v27;
  v26(&v29[*(int *)(v30 + 64)], v27, v28);
  TupleWidget.init(_:)(v29, v30);
  v33 = *(void (**)(char *, uint64_t))(v40 + 8);
  v33(v39, v28);
  v34 = *(void (**)(char *, uint64_t))(v43 + 8);
  v34(v42, v31);
  v35 = *(void (**)(char *, uint64_t))(v46 + 8);
  v36 = v41;
  v35(v45, v41);
  v33(v32, v28);
  v34(v53, v31);
  return ((uint64_t (*)(char *, uint64_t))v35)(v44, v36);
}

uint64_t sub_100019674(uint64_t *a1)
{
  int *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v2 = (int *)sub_1000041D8(&qword_100085AC0);
  __chkstk_darwin(v2);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *a1;
  v6 = sub_1000041D8(&qword_1000853A8);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v4, v5, v6);
  v7 = &v4[v2[12]];
  v8 = a1[1];
  v9 = sub_1000041D8(&qword_1000853A0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = &v4[v2[20]];
  v11 = a1[3];
  v12 = sub_1000041D8(&qword_100085398);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  sub_10000DF30(a1[4], (uint64_t)&v4[v2[24]], type metadata accessor for WorldClockWidgetMulti);
  sub_10000DF30(a1[5], (uint64_t)&v4[v2[28]], type metadata accessor for CityWidgetDigital);
  v13 = &v4[v2[40]];
  v14 = a1[8];
  v15 = sub_1000041D8(&qword_100085390);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  return TupleWidget.init(_:)(v4, v2);
}

uint64_t type metadata accessor for WorldClockWidgetSingle(uint64_t a1)
{
  return sub_10000DEFC(a1, (uint64_t *)&unk_100089900, (uint64_t)&nominal type descriptor for WorldClockWidgetSingle);
}

unint64_t sub_1000197F0()
{
  unint64_t result;

  result = qword_1000853E8;
  if (!qword_1000853E8)
  {
    result = swift_getWitnessTable(&unk_10006BE0C, &type metadata for AlarmControl);
    atomic_store(result, (unint64_t *)&qword_1000853E8);
  }
  return result;
}

unint64_t sub_100019834()
{
  unint64_t result;

  result = qword_1000853F0;
  if (!qword_1000853F0)
  {
    result = swift_getWitnessTable(&unk_10006BE4C, &type metadata for StopwatchControl);
    atomic_store(result, (unint64_t *)&qword_1000853F0);
  }
  return result;
}

unint64_t sub_100019878()
{
  unint64_t result;

  result = qword_1000853F8;
  if (!qword_1000853F8)
  {
    result = swift_getWitnessTable(&unk_10006BE8C, &type metadata for TimersControl);
    atomic_store(result, (unint64_t *)&qword_1000853F8);
  }
  return result;
}

uint64_t sub_1000198BC()
{
  sub_1000198EC();
  return static WidgetBundle.main()();
}

unint64_t sub_1000198EC()
{
  unint64_t result;

  result = qword_100085400;
  if (!qword_100085400)
  {
    result = swift_getWitnessTable(&unk_10006BCCC, &type metadata for WorldClockWidget);
    atomic_store(result, (unint64_t *)&qword_100085400);
  }
  return result;
}

uint64_t *sub_100019940()
{
  return &qword_100085090;
}

uint64_t sub_10001994C()
{
  return sub_100004494(&qword_100085090, &off_100085098);
}

uint64_t sub_10001995C(uint64_t a1, uint64_t a2)
{
  return sub_1000044F4(a1, a2, &qword_100085090, (uint64_t *)&off_100085098);
}

void *sub_10001996C(uint64_t a1)
{
  swift_beginAccess(&qword_100085090, a1, 33, 0);
  return &j__swift_endAccess;
}

uint64_t sub_1000199AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t OpaqueTypeConformance2;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34[24];

  v31 = a1;
  v1 = type metadata accessor for LocalizedStringResource(0);
  v26 = *(_QWORD *)(v1 - 8);
  v27 = v1;
  __chkstk_darwin(v1);
  v3 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1000041D8(&qword_100085408);
  v25 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000041D8(&qword_100085410);
  v28 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000041D8(&qword_100085418);
  v11 = *(_QWORD *)(v10 - 8);
  v29 = v10;
  v30 = v11;
  __chkstk_darwin(v10);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(&qword_100085090, v34, 0, 0);
  v15 = qword_100085090;
  v14 = off_100085098;
  swift_bridgeObjectRetain(off_100085098);
  v16 = sub_1000041D8(&qword_100085420);
  v17 = sub_10001DDB4(&qword_100085428, &qword_100085420, (uint64_t)&protocol conformance descriptor for ControlWidgetButton<A, B, C>);
  StaticControlConfiguration.init(kind:content:)(v15, v14, sub_100019C88, 0, v16, v17);
  LocalizedStringResource.init(stringLiteral:)(0x6D72616C41, 0xE500000000000000);
  v18 = sub_10001DDB4(&qword_100085430, &qword_100085408, (uint64_t)&protocol conformance descriptor for StaticControlConfiguration<A>);
  ControlWidgetConfiguration.displayName(_:)(v3, v4, v18);
  v19 = v27;
  v20 = *(void (**)(char *, uint64_t))(v26 + 8);
  v20(v3, v27);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v6, v4);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000029, 0x800000010006EC50);
  v32 = v4;
  v33 = v18;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v32, &opaque type descriptor for <<opaque return type of ControlWidgetConfiguration.displayName(_:)>>, 1);
  ControlWidgetConfiguration.description(_:)(v3, v7, OpaqueTypeConformance2);
  v20(v3, v19);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v9, v7);
  v32 = v7;
  v33 = OpaqueTypeConformance2;
  v22 = swift_getOpaqueTypeConformance2(&v32, &opaque type descriptor for <<opaque return type of ControlWidgetConfiguration.description(_:)>>, 1);
  v23 = v29;
  ControlWidgetConfiguration.showsInSystemSpaces()(v29, v22);
  return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v13, v23);
}

uint64_t sub_100019C88()
{
  return sub_10001A080(1, (uint64_t)sub_100019C98);
}

uint64_t sub_100019C98()
{
  return Label.init(title:icon:)(sub_100019CD4, 0, sub_100019CE8, 0, &type metadata for Text, &type metadata for Image, &protocol witness table for Text, &protocol witness table for Image);
}

uint64_t sub_100019CD4@<X0>(uint64_t a1@<X8>)
{
  return sub_10001A554(a1);
}

uint64_t sub_100019CE8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Image.init(_internalSystemName:)(0x6D72616C61, 0xE500000000000000);
  *a1 = result;
  return result;
}

uint64_t *sub_100019D20()
{
  return &qword_1000850A0;
}

uint64_t sub_100019D2C()
{
  return sub_100004494(&qword_1000850A0, &off_1000850A8);
}

uint64_t sub_100019D3C(uint64_t a1, uint64_t a2)
{
  return sub_1000044F4(a1, a2, &qword_1000850A0, (uint64_t *)&off_1000850A8);
}

void *sub_100019D4C(uint64_t a1)
{
  swift_beginAccess(&qword_1000850A0, a1, 33, 0);
  return &j_j__swift_endAccess;
}

uint64_t sub_100019D8C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t OpaqueTypeConformance2;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34[24];

  v31 = a1;
  v1 = type metadata accessor for LocalizedStringResource(0);
  v26 = *(_QWORD *)(v1 - 8);
  v27 = v1;
  __chkstk_darwin(v1);
  v3 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1000041D8(&qword_100085408);
  v25 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000041D8(&qword_100085410);
  v28 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000041D8(&qword_100085418);
  v11 = *(_QWORD *)(v10 - 8);
  v29 = v10;
  v30 = v11;
  __chkstk_darwin(v10);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(&qword_1000850A0, v34, 0, 0);
  v15 = qword_1000850A0;
  v14 = off_1000850A8;
  swift_bridgeObjectRetain(off_1000850A8);
  v16 = sub_1000041D8(&qword_100085420);
  v17 = sub_10001DDB4(&qword_100085428, &qword_100085420, (uint64_t)&protocol conformance descriptor for ControlWidgetButton<A, B, C>);
  StaticControlConfiguration.init(kind:content:)(v15, v14, sub_10001A070, 0, v16, v17);
  LocalizedStringResource.init(stringLiteral:)(0x63746177706F7453, 0xE900000000000068);
  v18 = sub_10001DDB4(&qword_100085430, &qword_100085408, (uint64_t)&protocol conformance descriptor for StaticControlConfiguration<A>);
  ControlWidgetConfiguration.displayName(_:)(v3, v4, v18);
  v19 = v27;
  v20 = *(void (**)(char *, uint64_t))(v26 + 8);
  v20(v3, v27);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v6, v4);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000034, 0x800000010006EC80);
  v32 = v4;
  v33 = v18;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v32, &opaque type descriptor for <<opaque return type of ControlWidgetConfiguration.displayName(_:)>>, 1);
  ControlWidgetConfiguration.description(_:)(v3, v7, OpaqueTypeConformance2);
  v20(v3, v19);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v9, v7);
  v32 = v7;
  v33 = OpaqueTypeConformance2;
  v22 = swift_getOpaqueTypeConformance2(&v32, &opaque type descriptor for <<opaque return type of ControlWidgetConfiguration.description(_:)>>, 1);
  v23 = v29;
  ControlWidgetConfiguration.showsInSystemSpaces()(v29, v22);
  return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v13, v23);
}

uint64_t sub_10001A070()
{
  return sub_10001A080(3, (uint64_t)sub_10001A114);
}

uint64_t sub_10001A080(int a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;

  v7 = sub_10001F7F4(a1);
  v3 = sub_1000041D8(&qword_100085AA8);
  v4 = sub_10001DDB4(&qword_100085AB0, &qword_100085AA8, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  v5 = sub_10001DDF4();
  return ControlWidgetButton.init<>(action:label:)(&v7, a2, 0, v3, &type metadata for OpenTabIntent, v4, v5);
}

uint64_t sub_10001A114()
{
  return Label.init(title:icon:)(sub_10001A150, 0, sub_10001A16C, 0, &type metadata for Text, &type metadata for Image, &protocol witness table for Text, &protocol witness table for Image);
}

uint64_t sub_10001A150@<X0>(uint64_t a1@<X8>)
{
  return sub_10001A554(a1);
}

uint64_t sub_10001A16C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Image.init(_internalSystemName:)(0x63746177706F7473, 0xE900000000000068);
  *a1 = result;
  return result;
}

uint64_t *sub_10001A1AC()
{
  return &qword_1000850B0;
}

uint64_t sub_10001A1B8()
{
  return sub_100004494(&qword_1000850B0, &off_1000850B8);
}

uint64_t sub_10001A1C8(uint64_t a1, uint64_t a2)
{
  return sub_1000044F4(a1, a2, &qword_1000850B0, (uint64_t *)&off_1000850B8);
}

void *sub_10001A1D8(uint64_t a1)
{
  swift_beginAccess(&qword_1000850B0, a1, 33, 0);
  return &j_j__swift_endAccess;
}

uint64_t sub_10001A218@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t OpaqueTypeConformance2;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34[24];

  v31 = a1;
  v1 = type metadata accessor for LocalizedStringResource(0);
  v26 = *(_QWORD *)(v1 - 8);
  v27 = v1;
  __chkstk_darwin(v1);
  v3 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1000041D8(&qword_100085408);
  v25 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000041D8(&qword_100085410);
  v28 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000041D8(&qword_100085418);
  v11 = *(_QWORD *)(v10 - 8);
  v29 = v10;
  v30 = v11;
  __chkstk_darwin(v10);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(&qword_1000850B0, v34, 0, 0);
  v15 = qword_1000850B0;
  v14 = off_1000850B8;
  swift_bridgeObjectRetain(off_1000850B8);
  v16 = sub_1000041D8(&qword_100085420);
  v17 = sub_10001DDB4(&qword_100085428, &qword_100085420, (uint64_t)&protocol conformance descriptor for ControlWidgetButton<A, B, C>);
  StaticControlConfiguration.init(kind:content:)(v15, v14, sub_10001A4F4, 0, v16, v17);
  LocalizedStringResource.init(stringLiteral:)(0x72656D6954, 0xE500000000000000);
  v18 = sub_10001DDB4(&qword_100085430, &qword_100085408, (uint64_t)&protocol conformance descriptor for StaticControlConfiguration<A>);
  ControlWidgetConfiguration.displayName(_:)(v3, v4, v18);
  v19 = v27;
  v20 = *(void (**)(char *, uint64_t))(v26 + 8);
  v20(v3, v27);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v6, v4);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000012, 0x800000010006ECC0);
  v32 = v4;
  v33 = v18;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v32, &opaque type descriptor for <<opaque return type of ControlWidgetConfiguration.displayName(_:)>>, 1);
  ControlWidgetConfiguration.description(_:)(v3, v7, OpaqueTypeConformance2);
  v20(v3, v19);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v9, v7);
  v32 = v7;
  v33 = OpaqueTypeConformance2;
  v22 = swift_getOpaqueTypeConformance2(&v32, &opaque type descriptor for <<opaque return type of ControlWidgetConfiguration.description(_:)>>, 1);
  v23 = v29;
  ControlWidgetConfiguration.showsInSystemSpaces()(v29, v22);
  return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v13, v23);
}

uint64_t sub_10001A4F4()
{
  return sub_10001A080(2, (uint64_t)sub_10001A504);
}

uint64_t sub_10001A504()
{
  return Label.init(title:icon:)(sub_10001A540, 0, sub_10001A5B0, 0, &type metadata for Text, &type metadata for Image, &protocol witness table for Text, &protocol witness table for Image);
}

uint64_t sub_10001A540@<X0>(uint64_t a1@<X8>)
{
  return sub_10001A554(a1);
}

uint64_t sub_10001A554@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v2 = LocalizedStringKey.init(stringLiteral:)();
  result = Text.init(_:tableName:bundle:comment:)(v2);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5 & 1;
  *(_QWORD *)(a1 + 24) = v6;
  return result;
}

uint64_t sub_10001A5B0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Image.init(_internalSystemName:)(0x72656D6974, 0xE500000000000000);
  *a1 = result;
  return result;
}

int main(int argc, const char **argv, const char **envp)
{
  sub_1000198EC();
  static WidgetBundle.main()();
  return 0;
}

uint64_t sub_10001A61C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007B678, 1);
}

uint64_t sub_10001A62C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007B650, 1);
}

uint64_t sub_10001A63C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007B6C8, 1);
}

uint64_t sub_10001A64C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007B6A0, 1);
}

uint64_t sub_10001A65C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007B718, 1);
}

uint64_t sub_10001A66C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007B6F0, 1);
}

uint64_t sub_10001A67C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007B768, 1);
}

uint64_t sub_10001A68C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007B740, 1);
}

uint64_t sub_10001A69C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007B7B8, 1);
}

uint64_t sub_10001A6AC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007B790, 1);
}

uint64_t sub_10001A6BC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007B808, 1);
}

uint64_t sub_10001A6CC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007B7E0, 1);
}

uint64_t sub_10001A6DC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007B830, 1);
}

uint64_t sub_10001A6EC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007B858, 1);
}

uint64_t sub_10001A6FC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007B880, 1);
}

uint64_t sub_10001A70C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007B8A8, 1);
}

uint64_t sub_10001A71C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007B8F8, 1);
}

uint64_t sub_10001A72C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007B8D0, 1);
}

uint64_t sub_10001A73C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007B920, 1);
}

uint64_t sub_10001A74C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007B948, 1);
}

uint64_t sub_10001A75C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007B970, 1);
}

uint64_t sub_10001A76C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007B998, 1);
}

uint64_t sub_10001A77C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007B9C0, 1);
}

uint64_t sub_10001A78C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007B9E8, 1);
}

uint64_t sub_10001A79C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007BA10, 1);
}

uint64_t sub_10001A7AC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007BA38, 1);
}

uint64_t sub_10001A7BC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007BA60, 1);
}

uint64_t sub_10001A7E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001A7F0);
}

uint64_t sub_10001A7F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001A800);
}

void sub_10001A808(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100085490)
  {
    v2 = type metadata accessor for WidgetFamily(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100085490);
  }
}

uint64_t sub_10001A874(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001A880);
}

uint64_t sub_10001A880(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10001C4DC(a1, a2, a3, type metadata accessor for WorldClockEntry);
}

uint64_t sub_10001A88C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001A898);
}

uint64_t sub_10001A898(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_10001C56C(a1, a2, a3, a4, type metadata accessor for WorldClockEntry);
}

void sub_10001A8A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10001C5F8(a1, a2, a3, type metadata accessor for WorldClockEntry);
}

ValueMetadata *type metadata accessor for WorldClockNonNumericWidgetSingle()
{
  return &type metadata for WorldClockNonNumericWidgetSingle;
}

uint64_t sub_10001A8C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = type metadata accessor for WorldClockEntry(0);
  v8 = *(int *)(v7 + 20);
  v9 = *(_QWORD *)(a2 + v8);
  v10 = *(_QWORD *)(a1 + v8);
  *(_QWORD *)(a1 + v8) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  *(_BYTE *)(a1 + *(int *)(v7 + 24)) = *(_BYTE *)(a2 + *(int *)(v7 + 24));
  if (a1 != a2)
  {
    v11 = *(int *)(a3 + 20);
    v12 = (uint64_t *)(a1 + v11);
    v13 = (uint64_t *)(a2 + v11);
    sub_1000106A4(a1 + v11, &qword_1000850C0);
    v14 = sub_1000041D8(&qword_1000850C0);
    if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
    {
      v15 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v12, v13, v15);
      v16 = 1;
    }
    else
    {
      v17 = *v13;
      *v12 = *v13;
      swift_retain(v17);
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(v12, v14, v16);
  }
  return a1;
}

uint64_t sub_10001A9D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = type metadata accessor for WorldClockEntry(0);
  v8 = *(int *)(v7 + 20);
  v9 = *(_QWORD *)(a1 + v8);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + *(int *)(v7 + 24)) = *(_BYTE *)(a2 + *(int *)(v7 + 24));
  if (a1 != a2)
  {
    v10 = *(int *)(a3 + 20);
    v11 = (void *)(a1 + v10);
    v12 = (const void *)(a2 + v10);
    sub_1000106A4(a1 + v10, &qword_1000850C0);
    v13 = sub_1000041D8(&qword_1000850C0);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v11, v12, v14);
      swift_storeEnumTagMultiPayload(v11, v13, 1);
    }
    else
    {
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10001AAE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001AAF0);
}

uint64_t sub_10001AAF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10001C4DC(a1, a2, a3, type metadata accessor for WorldClockEntry);
}

uint64_t sub_10001AAFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001AB08);
}

uint64_t sub_10001AB08(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_10001C56C(a1, a2, a3, a4, type metadata accessor for WorldClockEntry);
}

ValueMetadata *type metadata accessor for WorldClockSquareWidgetSingle()
{
  return &type metadata for WorldClockSquareWidgetSingle;
}

uint64_t sub_10001AB24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001AB30);
}

uint64_t sub_10001AB30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10001C4DC(a1, a2, a3, type metadata accessor for WorldClockEntry);
}

uint64_t sub_10001AB3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001AB48);
}

uint64_t sub_10001AB48(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_10001C56C(a1, a2, a3, a4, type metadata accessor for WorldClockEntry);
}

ValueMetadata *type metadata accessor for WorldClockDigitalWidgetSingle()
{
  return &type metadata for WorldClockDigitalWidgetSingle;
}

uint64_t sub_10001AB64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001AB70);
}

uint64_t sub_10001AB70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10001C4DC(a1, a2, a3, type metadata accessor for WorldClockEntry);
}

uint64_t sub_10001AB7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001AB88);
}

uint64_t sub_10001AB88(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_10001C56C(a1, a2, a3, a4, type metadata accessor for WorldClockEntry);
}

uint64_t *sub_10001AB94(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1 != a2)
  {
    sub_1000106A4((uint64_t)a1, &qword_1000850C0);
    v4 = sub_1000041D8(&qword_1000850C0);
    if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
    {
      v5 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
      v6 = a1;
      v7 = v4;
      v8 = 1;
    }
    else
    {
      v9 = *a2;
      *a1 = *a2;
      swift_retain(v9);
      v6 = a1;
      v7 = v4;
      v8 = 0;
    }
    swift_storeEnumTagMultiPayload(v6, v7, v8);
  }
  return a1;
}

void *sub_10001AC48(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;

  if (a1 != a2)
  {
    sub_1000106A4((uint64_t)a1, &qword_1000850C0);
    v4 = sub_1000041D8(&qword_1000850C0);
    if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
    {
      v5 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
      swift_storeEnumTagMultiPayload(a1, v4, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10001ACF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001AD04);
}

uint64_t sub_10001AD08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001AD14);
}

uint64_t sub_10001AD18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001AD24);
}

uint64_t sub_10001AD24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10001C4DC(a1, a2, a3, type metadata accessor for WorldClockEntry);
}

uint64_t sub_10001AD30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001AD3C);
}

uint64_t sub_10001AD3C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_10001C56C(a1, a2, a3, a4, type metadata accessor for WorldClockEntry);
}

uint64_t *sub_10001AD48(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = sub_1000041D8(&qword_1000850C0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v11);
  }
  else
  {
    v6 = v4;
    if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
    {
      v7 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v12 = *a2;
      *a1 = *a2;
      swift_retain(v12);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  return a1;
}

uint64_t sub_10001AE10(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_1000041D8(&qword_1000850C0);
  if (swift_getEnumCaseMultiPayload(a1, v2) != 1)
    return swift_release(*a1);
  v3 = type metadata accessor for WidgetFamily(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
}

uint64_t *sub_10001AE74(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = sub_1000041D8(&qword_1000850C0);
  if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
  {
    v5 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
    v6 = a1;
    v7 = v4;
    v8 = 1;
  }
  else
  {
    v9 = *a2;
    *a1 = *a2;
    swift_retain(v9);
    v6 = a1;
    v7 = v4;
    v8 = 0;
  }
  swift_storeEnumTagMultiPayload(v6, v7, v8);
  return a1;
}

void *sub_10001AF10(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_1000041D8(&qword_1000850C0);
  if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
  {
    v5 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
    swift_storeEnumTagMultiPayload(a1, v4, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  return a1;
}

uint64_t sub_10001AFA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001AFB4);
}

uint64_t sub_10001AFB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000041D8(&qword_100085108);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_10001AFF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001B004);
}

uint64_t sub_10001B008(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000041D8(&qword_100085108);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

void sub_10001B04C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  sub_10001A808(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
  }
}

_QWORD *sub_10001B0B4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v19);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = type metadata accessor for WorldClockEntry(0);
    v9 = *(int *)(v8 + 20);
    v10 = *(_QWORD *)((char *)a2 + v9);
    *(_QWORD *)((char *)a1 + v9) = v10;
    *((_BYTE *)a1 + *(int *)(v8 + 24)) = *((_BYTE *)a2 + *(int *)(v8 + 24));
    v11 = *(int *)(a3 + 20);
    v12 = (_QWORD *)((char *)a1 + v11);
    v13 = (_QWORD *)((char *)a2 + v11);
    swift_bridgeObjectRetain(v10);
    v14 = sub_1000041D8(&qword_1000850C0);
    if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
    {
      v15 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v12, v13, v15);
      v16 = v12;
      v17 = v14;
      v18 = 1;
    }
    else
    {
      v20 = *v13;
      *v12 = *v13;
      swift_retain(v20);
      v16 = v12;
      v17 = v14;
      v18 = 0;
    }
    swift_storeEnumTagMultiPayload(v16, v17, v18);
  }
  return a1;
}

uint64_t sub_10001B1D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = type metadata accessor for WorldClockEntry(0);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v5 + 20)));
  v6 = (_QWORD *)(a1 + *(int *)(a2 + 20));
  v7 = sub_1000041D8(&qword_1000850C0);
  if (swift_getEnumCaseMultiPayload(v6, v7) != 1)
    return swift_release(*v6);
  v8 = type metadata accessor for WidgetFamily(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
}

uint64_t sub_10001B274(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = type metadata accessor for WorldClockEntry(0);
  v8 = *(int *)(v7 + 20);
  v9 = *(_QWORD *)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v9;
  *(_BYTE *)(a1 + *(int *)(v7 + 24)) = *(_BYTE *)(a2 + *(int *)(v7 + 24));
  v10 = *(int *)(a3 + 20);
  v11 = (uint64_t *)(a1 + v10);
  v12 = (uint64_t *)(a2 + v10);
  swift_bridgeObjectRetain(v9);
  v13 = sub_1000041D8(&qword_1000850C0);
  if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
  {
    v14 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
    v15 = 1;
  }
  else
  {
    v16 = *v12;
    *v11 = *v12;
    swift_retain(v16);
    v15 = 0;
  }
  swift_storeEnumTagMultiPayload(v11, v13, v15);
  return a1;
}

uint64_t sub_10001B360(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = type metadata accessor for WorldClockEntry(0);
  *(_QWORD *)(a1 + *(int *)(v7 + 20)) = *(_QWORD *)(a2 + *(int *)(v7 + 20));
  *(_BYTE *)(a1 + *(int *)(v7 + 24)) = *(_BYTE *)(a2 + *(int *)(v7 + 24));
  v8 = *(int *)(a3 + 20);
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = sub_1000041D8(&qword_1000850C0);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  return a1;
}

uint64_t sub_10001B448(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001B454);
}

uint64_t sub_10001B454(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10001C4DC(a1, a2, a3, type metadata accessor for WorldClockEntry);
}

uint64_t sub_10001B460(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001B46C);
}

uint64_t sub_10001B46C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_10001C56C(a1, a2, a3, a4, type metadata accessor for WorldClockEntry);
}

ValueMetadata *type metadata accessor for DateTimeWidget()
{
  return &type metadata for DateTimeWidget;
}

ValueMetadata *type metadata accessor for NonNumericWidget()
{
  return &type metadata for NonNumericWidget;
}

ValueMetadata *type metadata accessor for SquareWidget()
{
  return &type metadata for SquareWidget;
}

ValueMetadata *type metadata accessor for DigitalClockWidget()
{
  return &type metadata for DigitalClockWidget;
}

ValueMetadata *type metadata accessor for AlarmsWidget()
{
  return &type metadata for AlarmsWidget;
}

char *sub_10001B4C8(char *a1, char *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v9(a1, a2, v7);
    v10 = (int *)type metadata accessor for AlarmEntry(0);
    v11 = v10[5];
    v12 = &a1[v11];
    v13 = &a2[v11];
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
    if (v14(&a2[v11], 1, v7))
    {
      v15 = sub_1000041D8(&qword_100084810);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      v9(v12, v13, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v12, 0, 1, v7);
    }
    v17 = v10[6];
    v18 = &a1[v17];
    v19 = &a2[v17];
    if (v14(&a2[v17], 1, v7))
    {
      v20 = sub_1000041D8(&qword_100084810);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      v9(v18, v19, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v18, 0, 1, v7);
    }
    a1[v10[7]] = a2[v10[7]];
    a1[v10[8]] = a2[v10[8]];
    v21 = v10[9];
    v22 = &a1[v21];
    v23 = &a2[v21];
    v24 = *((_QWORD *)v23 + 1);
    *v22 = *(_QWORD *)v23;
    v22[1] = v24;
    v25 = v10[10];
    v26 = &a1[v25];
    v27 = &a2[v25];
    v28 = *((_QWORD *)v27 + 1);
    *v26 = *(_QWORD *)v27;
    v26[1] = v28;
    v29 = v10[11];
    v30 = &a1[v29];
    v31 = &a2[v29];
    v32 = *((_QWORD *)v31 + 1);
    *v30 = *(_QWORD *)v31;
    v30[1] = v32;
    v33 = v10[12];
    v34 = &a1[v33];
    v35 = &a2[v33];
    v36 = *((_QWORD *)v35 + 1);
    *v34 = *(_QWORD *)v35;
    v34[1] = v36;
    a1[v10[13]] = a2[v10[13]];
    a1[v10[14]] = a2[v10[14]];
    v37 = v10[15];
    v38 = &a1[v37];
    v39 = &a2[v37];
    v40 = *((_QWORD *)v39 + 1);
    *v38 = *(_QWORD *)v39;
    v38[1] = v40;
    a1[v10[16]] = a2[v10[16]];
    a1[v10[17]] = a2[v10[17]];
    v41 = *(int *)(a3 + 20);
    v42 = (uint64_t *)&a1[v41];
    v43 = (uint64_t *)&a2[v41];
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v36);
    swift_bridgeObjectRetain(v40);
    v44 = sub_1000041D8(&qword_1000850C0);
    if (swift_getEnumCaseMultiPayload(v43, v44) == 1)
    {
      v45 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v42, v43, v45);
      v46 = v42;
      v47 = v44;
      v48 = 1;
    }
    else
    {
      v49 = *v43;
      *v42 = *v43;
      swift_retain(v49);
      v46 = v42;
      v47 = v44;
      v48 = 0;
    }
    swift_storeEnumTagMultiPayload(v46, v47, v48);
  }
  return a1;
}

uint64_t sub_10001B794(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  int *v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(a1, v4);
  v7 = (int *)type metadata accessor for AlarmEntry(0);
  v8 = a1 + v7[5];
  v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v9(v8, 1, v4))
    v6(v8, v4);
  v10 = a1 + v7[6];
  if (!v9(v10, 1, v4))
    v6(v10, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v7[9] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v7[10] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v7[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v7[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v7[15] + 8));
  v11 = (_QWORD *)(a1 + *(int *)(a2 + 20));
  v12 = sub_1000041D8(&qword_1000850C0);
  if (swift_getEnumCaseMultiPayload(v11, v12) != 1)
    return swift_release(*v11);
  v13 = type metadata accessor for WidgetFamily(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v11, v13);
}

char *sub_10001B8F8(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 16);
  v8(a1, a2, v6);
  v9 = (int *)type metadata accessor for AlarmEntry(0);
  v10 = v9[5];
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v13(&a2[v10], 1, v6))
  {
    v14 = sub_1000041D8(&qword_100084810);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v8(v11, v12, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
  }
  v15 = v9[6];
  v16 = &a1[v15];
  v17 = &a2[v15];
  if (v13(&a2[v15], 1, v6))
  {
    v18 = sub_1000041D8(&qword_100084810);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    v8(v16, v17, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v16, 0, 1, v6);
  }
  a1[v9[7]] = a2[v9[7]];
  a1[v9[8]] = a2[v9[8]];
  v19 = v9[9];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v22 = *((_QWORD *)v21 + 1);
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *((_QWORD *)v20 + 1) = v22;
  v23 = v9[10];
  v24 = &a1[v23];
  v25 = &a2[v23];
  v26 = *((_QWORD *)v25 + 1);
  *(_QWORD *)v24 = *(_QWORD *)v25;
  *((_QWORD *)v24 + 1) = v26;
  v27 = v9[11];
  v28 = &a1[v27];
  v29 = &a2[v27];
  v30 = *((_QWORD *)v29 + 1);
  *(_QWORD *)v28 = *(_QWORD *)v29;
  *((_QWORD *)v28 + 1) = v30;
  v31 = v9[12];
  v32 = &a1[v31];
  v33 = &a2[v31];
  v34 = *((_QWORD *)v33 + 1);
  *(_QWORD *)v32 = *(_QWORD *)v33;
  *((_QWORD *)v32 + 1) = v34;
  a1[v9[13]] = a2[v9[13]];
  a1[v9[14]] = a2[v9[14]];
  v35 = v9[15];
  v36 = &a1[v35];
  v37 = &a2[v35];
  v38 = *((_QWORD *)v37 + 1);
  *(_QWORD *)v36 = *(_QWORD *)v37;
  *((_QWORD *)v36 + 1) = v38;
  a1[v9[16]] = a2[v9[16]];
  a1[v9[17]] = a2[v9[17]];
  v39 = *(int *)(a3 + 20);
  v40 = (uint64_t *)&a1[v39];
  v41 = (uint64_t *)&a2[v39];
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRetain(v38);
  v42 = sub_1000041D8(&qword_1000850C0);
  if (swift_getEnumCaseMultiPayload(v41, v42) == 1)
  {
    v43 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v40, v41, v43);
    v44 = 1;
  }
  else
  {
    v45 = *v41;
    *v40 = *v41;
    swift_retain(v45);
    v44 = 0;
  }
  swift_storeEnumTagMultiPayload(v40, v42, v44);
  return a1;
}

char *sub_10001BB90(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void *, const void *, uint64_t);
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t (*v12)(const void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(void *, const void *, uint64_t))(v6 + 24);
  v7(a1, a2, v5);
  v8 = (int *)type metadata accessor for AlarmEntry(0);
  v9 = v8[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v6 + 48);
  v13 = v12(&a1[v9], 1, v5);
  v14 = v12(v11, 1, v5);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v10, v11, v5);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v10, 0, 1, v5);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
LABEL_6:
    v15 = sub_1000041D8(&qword_100084810);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  v7(v10, v11, v5);
LABEL_7:
  v16 = v8[6];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = v12(&a1[v16], 1, v5);
  v20 = v12(v18, 1, v5);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v17, v18, v5);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v17, 0, 1, v5);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v20)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v17, v5);
LABEL_12:
    v21 = sub_1000041D8(&qword_100084810);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_13;
  }
  v7(v17, v18, v5);
LABEL_13:
  a1[v8[7]] = a2[v8[7]];
  a1[v8[8]] = a2[v8[8]];
  v22 = v8[9];
  v23 = &a1[v22];
  v24 = &a2[v22];
  *(_QWORD *)v23 = *(_QWORD *)v24;
  v25 = *((_QWORD *)v24 + 1);
  v26 = *((_QWORD *)v23 + 1);
  *((_QWORD *)v23 + 1) = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease(v26);
  v27 = v8[10];
  v28 = &a1[v27];
  v29 = &a2[v27];
  *(_QWORD *)v28 = *(_QWORD *)v29;
  v30 = *((_QWORD *)v29 + 1);
  v31 = *((_QWORD *)v28 + 1);
  *((_QWORD *)v28 + 1) = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  v32 = v8[11];
  v33 = &a1[v32];
  v34 = &a2[v32];
  *(_QWORD *)v33 = *(_QWORD *)v34;
  v35 = *((_QWORD *)v34 + 1);
  v36 = *((_QWORD *)v33 + 1);
  *((_QWORD *)v33 + 1) = v35;
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRelease(v36);
  v37 = v8[12];
  v38 = &a1[v37];
  v39 = &a2[v37];
  *(_QWORD *)v38 = *(_QWORD *)v39;
  v40 = *((_QWORD *)v39 + 1);
  v41 = *((_QWORD *)v38 + 1);
  *((_QWORD *)v38 + 1) = v40;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRelease(v41);
  a1[v8[13]] = a2[v8[13]];
  a1[v8[14]] = a2[v8[14]];
  v42 = v8[15];
  v43 = &a1[v42];
  v44 = &a2[v42];
  *(_QWORD *)v43 = *(_QWORD *)v44;
  v45 = *((_QWORD *)v44 + 1);
  v46 = *((_QWORD *)v43 + 1);
  *((_QWORD *)v43 + 1) = v45;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRelease(v46);
  a1[v8[16]] = a2[v8[16]];
  a1[v8[17]] = a2[v8[17]];
  if (a1 != a2)
  {
    v47 = *(int *)(a3 + 20);
    v48 = (uint64_t *)&a1[v47];
    v49 = (uint64_t *)&a2[v47];
    sub_1000106A4((uint64_t)&a1[v47], &qword_1000850C0);
    v50 = sub_1000041D8(&qword_1000850C0);
    if (swift_getEnumCaseMultiPayload(v49, v50) == 1)
    {
      v51 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v48, v49, v51);
      v52 = 1;
    }
    else
    {
      v53 = *v49;
      *v48 = *v49;
      swift_retain(v53);
      v52 = 0;
    }
    swift_storeEnumTagMultiPayload(v48, v50, v52);
  }
  return a1;
}

char *sub_10001BF28(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  v9 = (int *)type metadata accessor for AlarmEntry(0);
  v10 = v9[5];
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v13(&a2[v10], 1, v6))
  {
    v14 = sub_1000041D8(&qword_100084810);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v8(v11, v12, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
  }
  v15 = v9[6];
  v16 = &a1[v15];
  v17 = &a2[v15];
  if (v13(&a2[v15], 1, v6))
  {
    v18 = sub_1000041D8(&qword_100084810);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    v8(v16, v17, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v16, 0, 1, v6);
  }
  a1[v9[7]] = a2[v9[7]];
  a1[v9[8]] = a2[v9[8]];
  *(_OWORD *)&a1[v9[9]] = *(_OWORD *)&a2[v9[9]];
  *(_OWORD *)&a1[v9[10]] = *(_OWORD *)&a2[v9[10]];
  *(_OWORD *)&a1[v9[11]] = *(_OWORD *)&a2[v9[11]];
  *(_OWORD *)&a1[v9[12]] = *(_OWORD *)&a2[v9[12]];
  a1[v9[13]] = a2[v9[13]];
  a1[v9[14]] = a2[v9[14]];
  *(_OWORD *)&a1[v9[15]] = *(_OWORD *)&a2[v9[15]];
  a1[v9[16]] = a2[v9[16]];
  a1[v9[17]] = a2[v9[17]];
  v19 = *(int *)(a3 + 20);
  v20 = &a1[v19];
  v21 = &a2[v19];
  v22 = sub_1000041D8(&qword_1000850C0);
  if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
  {
    v23 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v20, v21, v23);
    swift_storeEnumTagMultiPayload(v20, v22, 1);
  }
  else
  {
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  return a1;
}

char *sub_10001C178(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void *, const void *, uint64_t);
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t (*v12)(const void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;

  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(void *, const void *, uint64_t))(v6 + 40);
  v7(a1, a2, v5);
  v8 = (int *)type metadata accessor for AlarmEntry(0);
  v9 = v8[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v6 + 48);
  v13 = v12(&a1[v9], 1, v5);
  v14 = v12(v11, 1, v5);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v10, v11, v5);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v10, 0, 1, v5);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
LABEL_6:
    v15 = sub_1000041D8(&qword_100084810);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  v7(v10, v11, v5);
LABEL_7:
  v16 = v8[6];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = v12(&a1[v16], 1, v5);
  v20 = v12(v18, 1, v5);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v17, v18, v5);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v17, 0, 1, v5);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v20)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v17, v5);
LABEL_12:
    v21 = sub_1000041D8(&qword_100084810);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_13;
  }
  v7(v17, v18, v5);
LABEL_13:
  a1[v8[7]] = a2[v8[7]];
  a1[v8[8]] = a2[v8[8]];
  v22 = v8[9];
  v23 = &a1[v22];
  v24 = (uint64_t *)&a2[v22];
  v26 = *v24;
  v25 = v24[1];
  v27 = *((_QWORD *)v23 + 1);
  *(_QWORD *)v23 = v26;
  *((_QWORD *)v23 + 1) = v25;
  swift_bridgeObjectRelease(v27);
  v28 = v8[10];
  v29 = &a1[v28];
  v30 = (uint64_t *)&a2[v28];
  v32 = *v30;
  v31 = v30[1];
  v33 = *((_QWORD *)v29 + 1);
  *(_QWORD *)v29 = v32;
  *((_QWORD *)v29 + 1) = v31;
  swift_bridgeObjectRelease(v33);
  v34 = v8[11];
  v35 = &a1[v34];
  v36 = (uint64_t *)&a2[v34];
  v38 = *v36;
  v37 = v36[1];
  v39 = *((_QWORD *)v35 + 1);
  *(_QWORD *)v35 = v38;
  *((_QWORD *)v35 + 1) = v37;
  swift_bridgeObjectRelease(v39);
  v40 = v8[12];
  v41 = &a1[v40];
  v42 = (uint64_t *)&a2[v40];
  v44 = *v42;
  v43 = v42[1];
  v45 = *((_QWORD *)v41 + 1);
  *(_QWORD *)v41 = v44;
  *((_QWORD *)v41 + 1) = v43;
  swift_bridgeObjectRelease(v45);
  a1[v8[13]] = a2[v8[13]];
  a1[v8[14]] = a2[v8[14]];
  v46 = v8[15];
  v47 = &a1[v46];
  v48 = (uint64_t *)&a2[v46];
  v50 = *v48;
  v49 = v48[1];
  v51 = *((_QWORD *)v47 + 1);
  *(_QWORD *)v47 = v50;
  *((_QWORD *)v47 + 1) = v49;
  swift_bridgeObjectRelease(v51);
  a1[v8[16]] = a2[v8[16]];
  a1[v8[17]] = a2[v8[17]];
  if (a1 != a2)
  {
    v52 = *(int *)(a3 + 20);
    v53 = &a1[v52];
    v54 = &a2[v52];
    sub_1000106A4((uint64_t)&a1[v52], &qword_1000850C0);
    v55 = sub_1000041D8(&qword_1000850C0);
    if (swift_getEnumCaseMultiPayload(v54, v55) == 1)
    {
      v56 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 32))(v53, v54, v56);
      swift_storeEnumTagMultiPayload(v53, v55, 1);
    }
    else
    {
      memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10001C4C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001C4D0);
}

uint64_t sub_10001C4D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10001C4DC(a1, a2, a3, type metadata accessor for AlarmEntry);
}

uint64_t sub_10001C4DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  v7 = a4(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (*(_DWORD *)(v8 + 84) == (_DWORD)a2)
  {
    v9 = v7;
    v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    v11 = a1;
  }
  else
  {
    v9 = sub_1000041D8(&qword_100085108);
    v11 = a1 + *(int *)(a3 + 20);
    v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48);
  }
  return v10(v11, a2, v9);
}

uint64_t sub_10001C554(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001C560);
}

uint64_t sub_10001C560(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_10001C56C(a1, a2, a3, a4, type metadata accessor for AlarmEntry);
}

uint64_t sub_10001C56C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;

  v9 = a5(0);
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) == a3)
  {
    v11 = v9;
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    v13 = a1;
  }
  else
  {
    v11 = sub_1000041D8(&qword_100085108);
    v13 = a1 + *(int *)(a4 + 20);
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56);
  }
  return v12(v13, a2, a2, v11);
}

void sub_10001C5EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10001C5F8(a1, a2, a3, type metadata accessor for AlarmEntry);
}

void sub_10001C5F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD v9[2];

  v5 = a4(319);
  if (v6 <= 0x3F)
  {
    v9[0] = *(_QWORD *)(v5 - 8) + 64;
    sub_10001A808(319);
    if (v8 <= 0x3F)
    {
      v9[1] = *(_QWORD *)(v7 - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v9, a1 + 16);
    }
  }
}

ValueMetadata *type metadata accessor for WorldClockCircularAnalogueComplication()
{
  return &type metadata for WorldClockCircularAnalogueComplication;
}

ValueMetadata *type metadata accessor for WorldClockWidget()
{
  return &type metadata for WorldClockWidget;
}

ValueMetadata *type metadata accessor for DigitalClockWidgetBundle()
{
  return &type metadata for DigitalClockWidgetBundle;
}

ValueMetadata *type metadata accessor for AnalogClockWidgetBundle()
{
  return &type metadata for AnalogClockWidgetBundle;
}

ValueMetadata *type metadata accessor for AnalogCityWidgetBundle()
{
  return &type metadata for AnalogCityWidgetBundle;
}

ValueMetadata *type metadata accessor for ControlCenterExtensionBundle()
{
  return &type metadata for ControlCenterExtensionBundle;
}

ValueMetadata *type metadata accessor for AlarmControl()
{
  return &type metadata for AlarmControl;
}

ValueMetadata *type metadata accessor for StopwatchControl()
{
  return &type metadata for StopwatchControl;
}

ValueMetadata *type metadata accessor for TimersControl()
{
  return &type metadata for TimersControl;
}

uint64_t sub_10001C70C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t OpaqueTypeConformance2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v0 = sub_100010DE0(&qword_1000850D8);
  v1 = sub_100010DE0(&qword_1000850D0);
  v5 = sub_100010DE0(&qword_1000850C8);
  v6 = sub_10001DDB4(&qword_1000850F8, &qword_1000850C8, (uint64_t)&protocol conformance descriptor for IntentConfiguration<A, B>);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 1);
  v5 = v1;
  v6 = OpaqueTypeConformance2;
  v3 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v5 = v0;
  v6 = v3;
  return swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>, 1);
}

uint64_t sub_10001C7C8()
{
  return sub_10001D174(&qword_100085940, &qword_100085948, (void (*)(void))sub_10001C7F4);
}

unint64_t sub_10001C7F4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = qword_100085950;
  if (!qword_100085950)
  {
    v1 = sub_100010DE0(&qword_100085958);
    v6 = type metadata accessor for CityInlineComplication(255);
    v7 = sub_10000D36C(&qword_100085960, type metadata accessor for CityInlineComplication, (uint64_t)&unk_10006D8D8);
    swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
    v2 = type metadata accessor for WorldClockWidgetViewSingle(255);
    v3 = type metadata accessor for ClockWidgetEnvironmentObject(255);
    v4 = sub_10000D36C(&qword_100085968, type metadata accessor for WorldClockWidgetViewSingle, (uint64_t)&unk_10006CD40);
    v5 = sub_10000D36C((unint64_t *)&qword_100085240, type metadata accessor for ClockWidgetEnvironmentObject, (uint64_t)&unk_10006DF68);
    v6 = v2;
    v7 = v3;
    v8 = v4;
    v9 = v5;
    swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.environment<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100085950);
  }
  return result;
}

uint64_t sub_10001C920()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t OpaqueTypeConformance2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v0 = sub_100010DE0(&qword_100085120);
  v1 = sub_100010DE0(&qword_100085118);
  v5 = sub_100010DE0(&qword_100085110);
  v6 = sub_10001DDB4(&qword_100085130, &qword_100085110, (uint64_t)&protocol conformance descriptor for IntentConfiguration<A, B>);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 1);
  v5 = v1;
  v6 = OpaqueTypeConformance2;
  v3 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v5 = v0;
  v6 = v3;
  return swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>, 1);
}

unint64_t sub_10001C9E0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_100085970;
  if (!qword_100085970)
  {
    v1 = sub_100010DE0(&qword_100085978);
    v2[0] = type metadata accessor for WorldClockWidgetViewSingle(255);
    v2[1] = type metadata accessor for ClockWidgetEnvironmentObject(255);
    v2[2] = sub_10000D36C(&qword_100085968, type metadata accessor for WorldClockWidgetViewSingle, (uint64_t)&unk_10006CD40);
    v2[3] = sub_10000D36C((unint64_t *)&qword_100085240, type metadata accessor for ClockWidgetEnvironmentObject, (uint64_t)&unk_10006DF68);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.environment<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100085970);
  }
  return result;
}

uint64_t sub_10001CAC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v0 = sub_100010DE0(&qword_100085158);
  v1 = sub_100010DE0(&qword_100085150);
  v2 = sub_100010DE0(&qword_100085148);
  v3 = sub_100010DE0(&qword_100085140);
  v9 = sub_100010DE0(&qword_100085138);
  v10 = sub_10001DDB4(&qword_100085168, &qword_100085138, (uint64_t)&protocol conformance descriptor for IntentConfiguration<A, B>);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 1);
  v9 = v3;
  v10 = OpaqueTypeConformance2;
  v5 = swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v9 = v2;
  v10 = v5;
  v6 = swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>, 1);
  v9 = v1;
  v10 = v6;
  v7 = swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of WidgetConfiguration.preferredBackgroundStyle(_:)>>, 1);
  v9 = v0;
  v10 = v7;
  return swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportsVibrantContent(_:)>>, 1);
}

uint64_t sub_10001CBDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v0 = sub_100010DE0(&qword_100085190);
  v1 = sub_100010DE0(&qword_100085188);
  v2 = sub_100010DE0(&qword_100085180);
  v3 = sub_100010DE0(&qword_100085178);
  v9 = sub_100010DE0(&qword_100085170);
  v10 = sub_10001DDB4(&qword_1000851A0, &qword_100085170, (uint64_t)&protocol conformance descriptor for IntentConfiguration<A, B>);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 1);
  v9 = v3;
  v10 = OpaqueTypeConformance2;
  v5 = swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v9 = v2;
  v10 = v5;
  v6 = swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>, 1);
  v9 = v1;
  v10 = v6;
  v7 = swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of WidgetConfiguration.preferredBackgroundStyle(_:)>>, 1);
  v9 = v0;
  v10 = v7;
  return swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportsVibrantContent(_:)>>, 1);
}

uint64_t sub_10001CCF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t OpaqueTypeConformance2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v0 = sub_100010DE0(&qword_1000851B8);
  v1 = sub_100010DE0(&qword_1000851B0);
  v5 = sub_100010DE0(&qword_1000851A8);
  v6 = sub_10001DDB4(&qword_1000851C8, &qword_1000851A8, (uint64_t)&protocol conformance descriptor for IntentConfiguration<A, B>);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 1);
  v5 = v1;
  v6 = OpaqueTypeConformance2;
  v3 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v5 = v0;
  v6 = v3;
  return swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>, 1);
}

unint64_t sub_10001CDB0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100085980;
  if (!qword_100085980)
  {
    v1 = sub_100010DE0(&qword_100085988);
    sub_10001D898(&qword_100085990, &qword_100085998, (void (*)(void))sub_10001CE34, (void (*)(void))sub_10001CF84);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100085980);
  }
  return result;
}

unint64_t sub_10001CE34()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1000859A0;
  if (!qword_1000859A0)
  {
    v1 = sub_100010DE0(&qword_1000859A8);
    v2[0] = type metadata accessor for ClockRectangularComplication(255);
    v2[1] = sub_10000D36C(&qword_1000859B0, type metadata accessor for ClockRectangularComplication, (uint64_t)&unk_10006CD90);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
    sub_10001CEDC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000859A0);
  }
  return result;
}

unint64_t sub_10001CEDC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1000859B8;
  if (!qword_1000859B8)
  {
    v1 = sub_100010DE0(&qword_1000859C0);
    v2[0] = type metadata accessor for ClockCircularDigitalComplication(255);
    v2[1] = sub_10000D36C(&qword_1000859C8, type metadata accessor for ClockCircularDigitalComplication, (uint64_t)&unk_10006D838);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000859B8);
  }
  return result;
}

unint64_t sub_10001CF84()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_1000859D0;
  if (!qword_1000859D0)
  {
    v1 = sub_100010DE0(&qword_1000859D8);
    sub_10000D36C(&qword_100085960, type metadata accessor for CityInlineComplication, (uint64_t)&unk_10006D8D8);
    v2[0] = type metadata accessor for WorldClockWidgetViewSingle(255);
    v2[1] = type metadata accessor for ClockWidgetEnvironmentObject(255);
    v2[2] = sub_10000D36C(&qword_100085968, type metadata accessor for WorldClockWidgetViewSingle, (uint64_t)&unk_10006CD40);
    v2[3] = sub_10000D36C((unint64_t *)&qword_100085240, type metadata accessor for ClockWidgetEnvironmentObject, (uint64_t)&unk_10006DF68);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.environment<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000859D0);
  }
  return result;
}

uint64_t sub_10001D08C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t OpaqueTypeConformance2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v0 = sub_100010DE0(&qword_1000851E0);
  v1 = sub_100010DE0(&qword_1000851D8);
  v5 = sub_100010DE0(&qword_1000851D0);
  v6 = sub_10001DDB4(&qword_100085200, &qword_1000851D0, (uint64_t)&protocol conformance descriptor for IntentConfiguration<A, B>);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 1);
  v5 = v1;
  v6 = OpaqueTypeConformance2;
  v3 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v5 = v0;
  v6 = v3;
  return swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>, 1);
}

uint64_t sub_10001D148()
{
  return sub_10001D174(&qword_1000859E0, &qword_1000859E8, (void (*)(void))sub_10001D1D8);
}

uint64_t sub_10001D174(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100010DE0(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10001D1D8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = qword_1000859F0;
  if (!qword_1000859F0)
  {
    v1 = sub_100010DE0(&qword_1000859F8);
    v6 = type metadata accessor for WorldClockRectangularSummary(255);
    v7 = sub_10000D36C(&qword_100085A00, type metadata accessor for WorldClockRectangularSummary, (uint64_t)&unk_10006D6A8);
    swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
    v2 = type metadata accessor for WorldClockWidgetViewMulti(255);
    v3 = type metadata accessor for ClockWidgetEnvironmentObject(255);
    v4 = sub_10000D36C(&qword_100085A08, type metadata accessor for WorldClockWidgetViewMulti, (uint64_t)&unk_10006CE30);
    v5 = sub_10000D36C((unint64_t *)&qword_100085240, type metadata accessor for ClockWidgetEnvironmentObject, (uint64_t)&unk_10006DF68);
    v6 = v2;
    v7 = v3;
    v8 = v4;
    v9 = v5;
    swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.environment<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000859F0);
  }
  return result;
}

uint64_t sub_10001D304()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v0 = sub_100010DE0(&qword_100085228);
  v1 = sub_100010DE0(&qword_100085220);
  v2 = sub_100010DE0(&qword_100085218);
  v3 = sub_100010DE0(&qword_100085210);
  v9 = sub_100010DE0(&qword_100085208);
  v10 = sub_10001DDB4(&qword_100085250, &qword_100085208, (uint64_t)&protocol conformance descriptor for StaticConfiguration<A>);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 1);
  v9 = v3;
  v10 = OpaqueTypeConformance2;
  v5 = swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v9 = v2;
  v10 = v5;
  v6 = swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>, 1);
  v9 = v1;
  v10 = v6;
  v7 = swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of WidgetConfiguration.preferredBackgroundStyle(_:)>>, 1);
  v9 = v0;
  v10 = v7;
  return swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportsVibrantContent(_:)>>, 1);
}

uint64_t sub_10001D418()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v0 = sub_100010DE0(&qword_100085278);
  v1 = sub_100010DE0(&qword_100085270);
  v2 = sub_100010DE0(&qword_100085268);
  v3 = sub_100010DE0(&qword_100085260);
  v9 = sub_100010DE0(&qword_100085258);
  v10 = sub_10001DDB4(&qword_100085290, &qword_100085258, (uint64_t)&protocol conformance descriptor for StaticConfiguration<A>);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 1);
  v9 = v3;
  v10 = OpaqueTypeConformance2;
  v5 = swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v9 = v2;
  v10 = v5;
  v6 = swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>, 1);
  v9 = v1;
  v10 = v6;
  v7 = swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of WidgetConfiguration.preferredBackgroundStyle(_:)>>, 1);
  v9 = v0;
  v10 = v7;
  return swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportsVibrantContent(_:)>>, 1);
}

uint64_t sub_10001D52C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v0 = sub_100010DE0(&qword_1000852B8);
  v1 = sub_100010DE0(&qword_1000852B0);
  v2 = sub_100010DE0(&qword_1000852A8);
  v3 = sub_100010DE0(&qword_1000852A0);
  v9 = sub_100010DE0(&qword_100085298);
  v10 = sub_10001DDB4(&qword_1000852D0, &qword_100085298, (uint64_t)&protocol conformance descriptor for StaticConfiguration<A>);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 1);
  v9 = v3;
  v10 = OpaqueTypeConformance2;
  v5 = swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v9 = v2;
  v10 = v5;
  v6 = swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>, 1);
  v9 = v1;
  v10 = v6;
  v7 = swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of WidgetConfiguration.preferredBackgroundStyle(_:)>>, 1);
  v9 = v0;
  v10 = v7;
  return swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportsVibrantContent(_:)>>, 1);
}

uint64_t sub_10001D640()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v0 = sub_100010DE0(&qword_1000852F8);
  v1 = sub_100010DE0(&qword_1000852F0);
  v2 = sub_100010DE0(&qword_1000852E8);
  v3 = sub_100010DE0(&qword_1000852E0);
  v9 = sub_100010DE0(&qword_1000852D8);
  v10 = sub_10001DDB4(&qword_100085310, &qword_1000852D8, (uint64_t)&protocol conformance descriptor for StaticConfiguration<A>);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 1);
  v9 = v3;
  v10 = OpaqueTypeConformance2;
  v5 = swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v9 = v2;
  v10 = v5;
  v6 = swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>, 1);
  v9 = v1;
  v10 = v6;
  v7 = swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of WidgetConfiguration.preferredBackgroundStyle(_:)>>, 1);
  v9 = v0;
  v10 = v7;
  return swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportsVibrantContent(_:)>>, 1);
}

uint64_t sub_10001D754()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t OpaqueTypeConformance2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v0 = sub_100010DE0(&qword_100085328);
  v1 = sub_100010DE0(&qword_100085320);
  v5 = sub_100010DE0(&qword_100085318);
  v6 = sub_10001DDB4(&qword_100085340, &qword_100085318, (uint64_t)&protocol conformance descriptor for StaticConfiguration<A>);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 1);
  v5 = v1;
  v6 = OpaqueTypeConformance2;
  v3 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v5 = v0;
  v6 = v3;
  return swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>, 1);
}

unint64_t sub_10001D814()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100085A10;
  if (!qword_100085A10)
  {
    v1 = sub_100010DE0(&qword_100085A18);
    sub_10001D898(&qword_100085A20, &qword_100085A28, (void (*)(void))sub_10001D908, (void (*)(void))sub_10001D9F4);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100085A10);
  }
  return result;
}

uint64_t sub_10001D898(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_100010DE0(a2);
    a3();
    a4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10001D908()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = qword_100085A30;
  if (!qword_100085A30)
  {
    v1 = sub_100010DE0(&qword_100085A38);
    v4 = type metadata accessor for AlarmComplicationRectangularView(255);
    v5 = sub_10000D36C(&qword_100085A40, type metadata accessor for AlarmComplicationRectangularView, (uint64_t)&unk_10006D748);
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
    v2 = type metadata accessor for AlarmInlineComplicationView(255);
    v3 = sub_10000D36C(&qword_100085A48, type metadata accessor for AlarmInlineComplicationView, (uint64_t)&unk_10006D798);
    v4 = v2;
    v5 = v3;
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100085A30);
  }
  return result;
}

unint64_t sub_10001D9F4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  result = qword_100085A50;
  if (!qword_100085A50)
  {
    v1 = sub_100010DE0(&qword_100085A58);
    v4 = sub_100010DE0(&qword_100085A60);
    v5 = sub_10001DACC();
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
    v2 = type metadata accessor for AlarmSmallWidgetView(255);
    v3 = sub_10000D36C(&qword_100085A78, type metadata accessor for AlarmSmallWidgetView, (uint64_t)&unk_10006D6F8);
    v4 = v2;
    v5 = v3;
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100085A50);
  }
  return result;
}

unint64_t sub_10001DACC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100085A68;
  if (!qword_100085A68)
  {
    v1 = sub_100010DE0(&qword_100085A60);
    sub_10000D36C(&qword_100085A70, type metadata accessor for AlarmComplicationCircularView, (uint64_t)&unk_10006D888);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100085A68);
  }
  return result;
}

uint64_t sub_10001DB50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t OpaqueTypeConformance2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v0 = sub_100010DE0(&qword_100085358);
  v1 = sub_100010DE0(&qword_100085350);
  v5 = sub_100010DE0(&qword_100085348);
  v6 = sub_10001DDB4(&qword_100085388, &qword_100085348, (uint64_t)&protocol conformance descriptor for IntentConfiguration<A, B>);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 1);
  v5 = v1;
  v6 = OpaqueTypeConformance2;
  v3 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v5 = v0;
  v6 = v3;
  return swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>, 1);
}

uint64_t sub_10001DC0C()
{
  return sub_10001DDB4(&qword_100085A80, &qword_100085A88, (uint64_t)&protocol conformance descriptor for TupleWidget<A>);
}

uint64_t sub_10001DC38()
{
  _QWORD v1[2];

  v1[0] = &type metadata for DigitalClockWidget;
  v1[1] = sub_1000191BC();
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of static WidgetBundleBuilder.buildBlock<A>(_:)>>, 1);
}

uint64_t sub_10001DC74()
{
  return sub_10001DDB4(&qword_100085A90, &qword_1000853A0, (uint64_t)&protocol conformance descriptor for TupleWidget<A>);
}

uint64_t sub_10001DCA0()
{
  return sub_10001DDB4(&qword_100085A98, &qword_100085398, (uint64_t)&protocol conformance descriptor for TupleWidget<A>);
}

uint64_t sub_10001DCCC()
{
  return sub_10001DDB4(&qword_100085AA0, &qword_100085390, (uint64_t)&protocol conformance descriptor for TupleWidget<A>);
}

uint64_t sub_10001DCF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t OpaqueTypeConformance2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v0 = sub_100010DE0(&qword_100085418);
  v1 = sub_100010DE0(&qword_100085410);
  v5 = sub_100010DE0(&qword_100085408);
  v6 = sub_10001DDB4(&qword_100085430, &qword_100085408, (uint64_t)&protocol conformance descriptor for StaticControlConfiguration<A>);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of ControlWidgetConfiguration.displayName(_:)>>, 1);
  v5 = v1;
  v6 = OpaqueTypeConformance2;
  v3 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of ControlWidgetConfiguration.description(_:)>>, 1);
  v5 = v0;
  v6 = v3;
  return swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of ControlWidgetConfiguration.showsInSystemSpaces()>>, 1);
}

uint64_t sub_10001DDB4(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100010DE0(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10001DDF4()
{
  unint64_t result;

  result = qword_100085AB8;
  if (!qword_100085AB8)
  {
    result = swift_getWitnessTable(&unk_10006C438, &type metadata for OpenTabIntent);
    atomic_store(result, (unint64_t *)&qword_100085AB8);
  }
  return result;
}

uint64_t sub_10001DE38()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_10001DE5C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_1000041D8(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10001DEA0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_1000041D8(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

char *sub_10001DEE4(char *a1, char *a2, uint64_t *a3)
{
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v12[3];
  void *ObjectType;

  v6 = sub_10001DFB4(v12, 0, 0, 1, (uint64_t)a1, (unint64_t)a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_10001E0D0((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_10001E0D0((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_10001E0B0(v12);
  return v7;
}

char *sub_10001DFB4(char **a1, void *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  char *result;
  uint64_t v10;
  char *v11;
  _QWORD v12[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v10 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v10)
        {
          v12[0] = a5;
          v12[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          memcpy(__dst, v12, HIBYTE(a6) & 0xF);
          result = 0;
          *((_BYTE *)__dst + v10) = 0;
          *a1 = (char *)__dst;
          return result;
        }
      }
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    result = sub_10001E10C(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    result = (char *)((a6 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    result = (char *)_StringObject.sharedUTF8.getter(a5, a6);
    if (!result)
    {
      __break(1u);
      return result;
    }
  }
  *a1 = result;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return (char *)swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL, __dst);
}

uint64_t sub_10001E0B0(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10001E0D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

char *sub_10001E10C(uint64_t a1, unint64_t a2)
{
  char *v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (char *)sub_10001E1A0(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_10001E29C(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
  v4 = *((_QWORD *)v2 + 2);
  v3 = *((_QWORD *)v2 + 3);
  if (v4 >= v3 >> 1)
    v2 = sub_10001E29C((char *)(v3 > 1), v4 + 1, 1, v2);
  *((_QWORD *)v2 + 2) = v4 + 1;
  v2[v4 + 32] = 0;
  return v2;
}

_QWORD *sub_10001E1A0(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  char v7;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_9;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_10001E238(v4, 0);
      result = (_QWORD *)_StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v7 & 1) != 0)
        break;
      if (result == (_QWORD *)v4)
        return v5;
      __break(1u);
LABEL_9:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return &_swiftEmptyArrayStorage;
    }
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_10001E238(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return &_swiftEmptyArrayStorage;
  v4 = sub_1000041D8(&qword_100085B70);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

char *sub_10001E29C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1000041D8(&qword_100085B70);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

const char *sub_10001E38C()
{
  return "default";
}

uint64_t sub_10001E398()
{
  return 0x746C7561666564;
}

void sub_10001E3B0(char a1)
{
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease(0xE000000000000000);
  __asm { BR              X10 }
}

uint64_t sub_10001E42C()
{
  Swift::String v0;
  Swift::String v1;
  uint64_t v3;

  v0._countAndFlagsBits = 0x6D72616C61;
  v0._object = (void *)0xE500000000000000;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(0xE500000000000000);
  v1._countAndFlagsBits = 0x746C75616665643ALL;
  v1._object = (void *)0xE800000000000000;
  String.append(_:)(v1);
  return v3;
}

uint64_t sub_10001E4B4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10001E4EC + 4 * byte_10006C104[a1]))(0x6F6C63646C726F77, 0xEA00000000006B63);
}

uint64_t sub_10001E4EC()
{
  return 0x6D72616C61;
}

uint64_t sub_10001E500()
{
  return 0x72656D6974;
}

uint64_t sub_10001E514()
{
  return 0x63746177706F7473;
}

uint64_t sub_10001E530()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v0 = sub_1000041D8(&qword_100085B78);
  sub_100021788(v0, qword_10008BE38);
  sub_10001EB00(v0, (uint64_t)qword_10008BE38);
  v1 = sub_1000041D8(&qword_100085C90);
  v2 = *(_QWORD *)(sub_1000041D8(&qword_100085C98) - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = *(unsigned __int8 *)(v2 + 80);
  v5 = (v4 + 32) & ~v4;
  v6 = swift_allocObject(v1, v5 + 4 * v3, v4 | 7);
  *(_OWORD *)(v6 + 16) = xmmword_10006B080;
  *(_BYTE *)(v6 + v5) = 0;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease(0xE000000000000000);
  v7 = sub_100020D80();
  EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)(0xD000000000000018, 0x800000010006EDA0, &type metadata for ClockDestination, v7);
  *(_BYTE *)(v6 + v5 + v3) = 1;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease(0xE000000000000000);
  EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)(0xD000000000000013, 0x800000010006ED10, &type metadata for ClockDestination, v7);
  *(_BYTE *)(v6 + v5 + 2 * v3) = 2;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease(0xE000000000000000);
  EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)(0xD000000000000013, 0x800000010006EDC0, &type metadata for ClockDestination, v7);
  *(_BYTE *)(v6 + v5 + 3 * v3) = 3;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease(0xE000000000000000);
  EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)(0xD000000000000017, 0x800000010006EDE0, &type metadata for ClockDestination, v7);
  sub_10001E77C(v6);
  return EnumURLRepresentation.init(_:)();
}

void sub_10001E77C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = sub_1000041D8(&qword_100085C98);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (v6
    && (sub_1000041D8(&qword_100085CA0),
        v7 = static _DictionaryStorage.allocate(capacity:)(v6),
        v8 = (_QWORD *)v7,
        (v9 = *(_QWORD *)(a1 + 16)) != 0))
  {
    v10 = &v5[*(int *)(v2 + 48)];
    v11 = v7 + 64;
    v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    v26 = a1;
    v13 = a1 + v12;
    v14 = *(_QWORD *)(v3 + 72);
    swift_retain(v7);
    while (1)
    {
      sub_10001DEA0(v13, (uint64_t)v5, &qword_100085C98);
      v15 = *v5;
      sub_100020460(*v5);
      if ((v17 & 1) != 0)
        break;
      v18 = v16;
      *(_QWORD *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_BYTE *)(v8[6] + v16) = v15;
      v19 = v8[7];
      v20 = sub_1000041D8(&qword_100085CA8);
      (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v18, v10, v20);
      v21 = v8[2];
      v22 = __OFADD__(v21, 1);
      v23 = v21 + 1;
      if (v22)
        goto LABEL_11;
      v8[2] = v23;
      v13 += v14;
      if (!--v9)
      {
        swift_release(v8);
        v24 = v26;
        goto LABEL_9;
      }
    }
    __break(1u);
LABEL_11:
    __break(1u);
  }
  else
  {
    v24 = a1;
LABEL_9:
    swift_bridgeObjectRelease(v24);
  }
}

void sub_10001E91C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = sub_1000041D8(&qword_100085C80);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (v6
    && (sub_1000041D8(&qword_100085C88),
        v7 = static _DictionaryStorage.allocate(capacity:)(v6),
        v8 = (_QWORD *)v7,
        (v9 = *(_QWORD *)(a1 + 16)) != 0))
  {
    v10 = &v5[*(int *)(v2 + 48)];
    v11 = v7 + 64;
    v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    v26 = a1;
    v13 = a1 + v12;
    v14 = *(_QWORD *)(v3 + 72);
    swift_retain(v7);
    while (1)
    {
      sub_10001DEA0(v13, (uint64_t)v5, &qword_100085C80);
      v15 = *v5;
      sub_100020460(*v5);
      if ((v17 & 1) != 0)
        break;
      v18 = v16;
      *(_QWORD *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_BYTE *)(v8[6] + v16) = v15;
      v19 = v8[7];
      v20 = type metadata accessor for DisplayRepresentation(0);
      (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v18, v10, v20);
      v21 = v8[2];
      v22 = __OFADD__(v21, 1);
      v23 = v21 + 1;
      if (v22)
        goto LABEL_11;
      v8[2] = v23;
      v13 += v14;
      if (!--v9)
      {
        swift_release(v8);
        v24 = v26;
        goto LABEL_9;
      }
    }
    __break(1u);
LABEL_11:
    __break(1u);
  }
  else
  {
    v24 = a1;
LABEL_9:
    swift_bridgeObjectRelease(v24);
  }
}

uint64_t sub_10001EAB4()
{
  uint64_t v0;

  if (qword_1000899A0 != -1)
    swift_once(&qword_1000899A0, sub_10001E530);
  v0 = sub_1000041D8(&qword_100085B78);
  return sub_10001EB00(v0, (uint64_t)qword_10008BE38);
}

uint64_t sub_10001EB00(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_10001EB18@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[24];

  if (qword_1000899A0 != -1)
    swift_once(&qword_1000899A0, sub_10001E530);
  v2 = sub_1000041D8(&qword_100085B78);
  v3 = sub_10001EB00(v2, (uint64_t)qword_10008BE38);
  swift_beginAccess(v3, v5, 0, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_10001EBB4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  if (qword_1000899A0 != -1)
    swift_once(&qword_1000899A0, sub_10001E530);
  v2 = sub_1000041D8(&qword_100085B78);
  v3 = sub_10001EB00(v2, (uint64_t)qword_10008BE38);
  swift_beginAccess(v3, v6, 33, 0);
  v4 = *(_QWORD *)(v2 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 24))(v3, a1, v2);
  swift_endAccess(v6);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v2);
}

uint64_t (*sub_10001EC68(uint64_t a1))(_QWORD)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1000899A0 != -1)
    swift_once(&qword_1000899A0, sub_10001E530);
  v2 = sub_1000041D8(&qword_100085B78);
  v3 = sub_10001EB00(v2, (uint64_t)qword_10008BE38);
  swift_beginAccess(v3, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t sub_10001ECE8()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];

  v0 = sub_1000041D8(&qword_100085B88);
  __chkstk_darwin(v0);
  v2 = (char *)v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v3 = *(_QWORD *)(v19[0] - 8);
  __chkstk_darwin(v19[0]);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v9);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_100021788(v16, qword_10008BE50);
  sub_10001EB00(v16, (uint64_t)qword_10008BE50);
  v17 = String.LocalizationValue.init(stringLiteral:)(0x6B636F6C43, 0xE500000000000000);
  static Locale.current.getter(v17);
  (*(void (**)(char *, _QWORD, _QWORD))(v3 + 104))(v5, enum case for LocalizedStringResource.BundleDescription.main(_:), v19[0]);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v11, 0x617A696C61636F4CLL, 0xEB00000000656C62, v8, v5, 0, 0, 256);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v2, 1, 1, v12);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v15, v2);
}

uint64_t sub_10001EF04()
{
  return sub_10001FD50(&qword_1000899A8, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_10008BE50);
}

uint64_t sub_10001EF28@<X0>(uint64_t a1@<X8>)
{
  return sub_10001FDB8(&qword_1000899A8, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_10008BE50, (uint64_t)sub_10001ECE8, a1);
}

uint64_t sub_10001EF4C(uint64_t a1)
{
  return sub_10001FE68(a1, &qword_1000899A8, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_10008BE50, (uint64_t)sub_10001ECE8);
}

uint64_t (*sub_10001EF70(uint64_t a1))(_QWORD)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1000899A8 != -1)
    swift_once(&qword_1000899A8, sub_10001ECE8);
  v2 = type metadata accessor for TypeDisplayRepresentation(0);
  v3 = sub_10001EB00(v2, (uint64_t)qword_10008BE50);
  swift_beginAccess(v3, a1, 33, 0);
  return j_j__swift_endAccess;
}

_UNKNOWN **sub_10001EFEC()
{
  return &off_100082020;
}

void sub_10001EFF8(char *a1)
{
  sub_10001F004(*a1);
}

void sub_10001F004(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_10001F060(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10001F0BC + 4 * byte_10006C10C[a2]))(0x6D72616C61);
}

uint64_t sub_10001F0BC(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6D72616C61 && v1 == 0xE500000000000000)
    v2 = 1;
  else
    v2 = ((uint64_t (*)(void))_stringCompareWithSmolCheck(_:_:expecting:))();
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE500000000000000);
  return v2 & 1;
}

void sub_10001F160()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_10001F1B0()
{
  uint64_t v1;

  ((void (*)(uint64_t *, uint64_t, unint64_t))String.hash(into:))(&v1, 0x6D72616C61, 0xE500000000000000);
  swift_bridgeObjectRelease(0xE500000000000000);
  return Hasher._finalize()();
}

void sub_10001F21C()
{
  __asm { BR              X10 }
}

uint64_t sub_10001F25C(uint64_t a1)
{
  ((void (*)(uint64_t, uint64_t, unint64_t))String.hash(into:))(a1, 0x6D72616C61, 0xE500000000000000);
  return swift_bridgeObjectRelease(0xE500000000000000);
}

void sub_10001F2B4(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_10001F300()
{
  uint64_t v1;

  ((void (*)(uint64_t *, uint64_t, unint64_t))String.hash(into:))(&v1, 0x6D72616C61, 0xE500000000000000);
  swift_bridgeObjectRelease(0xE500000000000000);
  return Hasher._finalize()();
}

unint64_t sub_10001F36C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100020D38(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10001F398()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_10001F3CC + 4 * byte_10006C11C[*v0]))();
}

void sub_10001F3CC(_QWORD *a1@<X8>)
{
  *a1 = 0x6D72616C61;
  a1[1] = 0xE500000000000000;
}

void sub_10001F3E4(_QWORD *a1@<X8>)
{
  *a1 = 0x72656D6974;
  a1[1] = 0xE500000000000000;
}

void sub_10001F3FC(_QWORD *a1@<X8>)
{
  *a1 = 0x63746177706F7473;
  a1[1] = 0xE900000000000068;
}

uint64_t sub_10001F41C(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_100021730();
  v4 = URLRepresentableEnum.urlRepresentationParameter.getter(a1, v3);
  return sub_100021774(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8), v1, v4, v5);
}

uint64_t sub_10001F468@<X0>(uint64_t a1@<X8>)
{
  return sub_1000201B4(&qword_1000899A8, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_10008BE50, (uint64_t)sub_10001ECE8, a1);
}

uint64_t sub_10001F48C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100020D80();
  return static AppEnum.defaultResolverSpecification.getter(a1, v2);
}

uint64_t sub_10001F4C4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100021298();
  return CaseDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

void sub_10001F4FC(_QWORD *a1@<X8>)
{
  *a1 = &off_100082048;
}

uint64_t sub_10001F50C()
{
  uint64_t v1;

  IntentParameter.wrappedValue.getter(&v1);
  return v1;
}

uint64_t sub_10001F53C(char a1)
{
  char v2;

  v2 = a1;
  return IntentParameter.wrappedValue.setter(&v2);
}

uint64_t (*sub_10001F56C(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = IntentParameter.wrappedValue.modify();
  return sub_10001F5B4;
}

uint64_t sub_10001F5B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  void (*v18)(_BYTE *, uint64_t, uint64_t, uint64_t);
  unint64_t v19;
  _BYTE v21[15];
  char v22;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v21[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = sub_1000041D8(&qword_100085B80);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  v9 = &v21[-v8];
  v10 = sub_1000041D8(&qword_100085B88);
  __chkstk_darwin(v10);
  v12 = &v21[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for LocalizedStringResource(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = &v21[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000041D8(&qword_100085B90);
  LocalizedStringResource.init(stringLiteral:)(0x74616E6974736544, 0xEB000000006E6F69);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, v13);
  v22 = 4;
  v17 = type metadata accessor for IntentDialog(0);
  v18 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
  v18(v9, 1, 1, v17);
  v18(v7, 1, 1, v17);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for InputConnectionBehavior.default(_:), v0);
  v19 = sub_100020D80();
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)(v16, v12, &v22, v9, v7, v3, &off_100082070, v19);
}

uint64_t sub_10001F7D0()
{
  return IntentParameter.projectedValue.getter();
}

uint64_t sub_10001F7F4(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;
  int v24;
  char v25;
  char v26;

  v24 = a1;
  v1 = type metadata accessor for InputConnectionBehavior(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000041D8(&qword_100085B80);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v23 - v9;
  v11 = sub_1000041D8(&qword_100085B88);
  __chkstk_darwin(v11);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for LocalizedStringResource(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000041D8(&qword_100085B90);
  LocalizedStringResource.init(stringLiteral:)(0x74616E6974736544, 0xEB000000006E6F69);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v13, 1, 1, v14);
  v26 = 4;
  v18 = type metadata accessor for IntentDialog(0);
  v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56);
  v19(v10, 1, 1, v18);
  v19(v8, 1, 1, v18);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for InputConnectionBehavior.default(_:), v1);
  v20 = sub_100020D80();
  v21 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)(v17, v13, &v26, v10, v8, v4, &off_1000820C0, v20);
  v25 = v24;
  swift_retain(v21);
  IntentParameter.wrappedValue.setter(&v25);
  swift_release(v21);
  return v21;
}

uint64_t sub_10001FA34@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[2];

  v25[0] = a1;
  v1 = sub_1000041D8(&qword_100085B88);
  __chkstk_darwin(v1);
  v3 = (char *)v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Locale(0);
  __chkstk_darwin(v8);
  v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v11);
  v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for LocalizedStringResource(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001BLL, 0x800000010006ED60);
  static Locale.current.getter(v18);
  v19 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 104);
  v20(v7, enum case for LocalizedStringResource.BundleDescription.main(_:), v4);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v13, 0x6E65746E49707041, 0xEA00000000007374, v10, v7, 0, 0, 256);
  v21 = String.LocalizationValue.init(stringLiteral:)(1396851028, 0xE400000000000000);
  static Locale.current.getter(v21);
  v20(v7, v19, v4);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v13, 0x6E65746E49707041, 0xEA00000000007374, v10, v7, 0, 0, 256);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v3, 0, 1, v14);
  v22 = v25[0];
  IntentDescription.init(_:categoryName:searchKeywords:)(v17, v3, &_swiftEmptyArrayStorage);
  v23 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v22, 0, 1, v23);
}

uint64_t sub_10001FCC4()
{
  uint64_t v0;

  v0 = type metadata accessor for LocalizedStringResource(0);
  sub_100021788(v0, qword_10008BE68);
  sub_10001EB00(v0, (uint64_t)qword_10008BE68);
  return LocalizedStringResource.init(stringLiteral:)(0x6F6C43206E65704FLL, 0xEE00626154206B63);
}

uint64_t sub_10001FD2C()
{
  return sub_10001FD50(qword_1000899B0, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_10008BE68);
}

uint64_t sub_10001FD50(_QWORD *a1, uint64_t (*a2)(_QWORD), uint64_t a3)
{
  uint64_t v5;

  if (*a1 != -1)
    swift_once();
  v5 = a2(0);
  return sub_10001EB00(v5, a3);
}

uint64_t sub_10001FD94@<X0>(uint64_t a1@<X8>)
{
  return sub_10001FDB8(qword_1000899B0, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_10008BE68, (uint64_t)sub_10001FCC4, a1);
}

uint64_t sub_10001FDB8@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[24];

  if (*a1 != -1)
    swift_once(a1, a4);
  v8 = a2(0);
  v9 = sub_10001EB00(v8, a3);
  swift_beginAccess(v9, v11, 0, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a5, v9, v8);
}

uint64_t sub_10001FE44(uint64_t a1)
{
  return sub_10001FE68(a1, qword_1000899B0, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_10008BE68, (uint64_t)sub_10001FCC4);
}

uint64_t sub_10001FE68(uint64_t a1, _QWORD *a2, uint64_t (*a3)(_QWORD), uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[24];

  if (*a2 != -1)
    swift_once(a2, a5);
  v8 = a3(0);
  v9 = sub_10001EB00(v8, a4);
  swift_beginAccess(v9, v12, 33, 0);
  v10 = *(_QWORD *)(v8 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 24))(v9, a1, v8);
  swift_endAccess(v12);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(a1, v8);
}

uint64_t (*sub_10001FF10(uint64_t a1))(_QWORD)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1000899B0[0] != -1)
    swift_once(qword_1000899B0, sub_10001FCC4);
  v2 = type metadata accessor for LocalizedStringResource(0);
  v3 = sub_10001EB00(v2, (uint64_t)qword_10008BE68);
  swift_beginAccess(v3, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t sub_10001FF88()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v5;

  v0 = sub_1000041D8(&qword_100085BA0);
  __chkstk_darwin(v0);
  v2 = (char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100021000();
  ParameterSummaryString.init(stringLiteral:)(0xD000000000000016, 0x800000010006ED80, &type metadata for OpenTabIntent, v3);
  return IntentParameterSummary.init(_:table:)(v2, 0x6E65746E49707041, 0xEA00000000007374, &type metadata for OpenTabIntent, v3);
}

_QWORD *sub_10002004C@<X0>(_BYTE *a1@<X8>)
{
  _QWORD *result;
  uint64_t v3;

  result = IntentParameter.wrappedValue.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_100020084(char *a1)
{
  char v2;

  v2 = *a1;
  return IntentParameter.wrappedValue.setter(&v2);
}

uint64_t (*sub_1000200B8(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = IntentParameter.wrappedValue.modify();
  return sub_10001F5B4;
}

void sub_100020100(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 32))(*a1, 0);
  free(v1);
}

uint64_t sub_100020130(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = sub_10001DDF4();
  v5 = sub_100021730();
  return static URLRepresentableIntent<>.urlRepresentation.getter(a1, v4, a2, v5);
}

uint64_t sub_100020190@<X0>(uint64_t a1@<X8>)
{
  return sub_1000201B4(qword_1000899B0, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_10008BE68, (uint64_t)sub_10001FCC4, a1);
}

uint64_t sub_1000201B4@<X0>(_QWORD *a1@<X2>, uint64_t (*a2)(_QWORD)@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[24];

  if (*a1 != -1)
    swift_once(a1, a4);
  v8 = a2(0);
  v9 = sub_10001EB00(v8, a3);
  swift_beginAccess(v9, v11, 0, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a5, v9, v8);
}

uint64_t sub_100020244(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001DDF4();
  return static OpenIntent.openAppWhenRun.getter(a1, v2);
}

uint64_t sub_100020274(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = sub_1000041D8(&qword_100085BA0);
  __chkstk_darwin(v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  ParameterSummaryString.init(stringLiteral:)(0xD000000000000016, 0x800000010006ED80, a1, a2);
  return IntentParameterSummary.init(_:table:)(v6, 0x6E65746E49707041, 0xEA00000000007374, a1, a2);
}

uint64_t sub_100020334(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v4 = (_QWORD *)swift_task_alloc(async function pointer to URLRepresentableIntent<>.perform()[1]);
  *(_QWORD *)(v2 + 16) = v4;
  v5 = sub_10001DDF4();
  v6 = sub_1000216EC();
  v7 = sub_100021730();
  *v4 = v2;
  v4[1] = sub_1000203B8;
  return URLRepresentableIntent<>.perform()(a2, v5, v6, v7);
}

uint64_t sub_1000203B8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_QWORD *)(*v1 + 16);
  v3 = *v1;
  result = swift_task_dealloc(v2);
  if (v0)
    return (*(uint64_t (**)(void))(v3 + 8))();
  return result;
}

uint64_t sub_100020414@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_100020DC4();
  *a1 = result;
  return result;
}

uint64_t sub_100020438(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100021000();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

void sub_100020460(char a1)
{
  uint64_t v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, *(_QWORD *)(v1 + 40));
  __asm { BR              X10 }
}

uint64_t sub_1000204BC()
{
  uint64_t v0;
  Swift::Int v1;
  uint64_t v3;

  String.hash(into:)(&v3, 0x6D72616C61, 0xE500000000000000);
  swift_bridgeObjectRelease(0xE500000000000000);
  v1 = Hasher._finalize()();
  return sub_100020534(v0, v1);
}

uint64_t sub_100020534(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v3 = a2 & ~(-1 << *(_BYTE *)(v2 + 32));
  if (((*(_QWORD *)(v2 + 64 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    __asm { BR              X9 }
  return a2 & ~(-1 << *(_BYTE *)(v2 + 32));
}

void sub_10002070C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t);
  char *v38;
  char *v39;
  void (*v40)(char *, uint64_t, uint64_t, uint64_t);
  char *v41;
  char *v42;
  _BYTE *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  void (*v49)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v50;
  char *v51;
  char *v52;
  _BYTE *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  void (*v58)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int v59;
  void (*v60)(char *);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  void (*v66)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;

  v0 = sub_1000041D8(&qword_100085C70);
  __chkstk_darwin(v0);
  v64 = (char *)&v51 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_1000041D8(&qword_100085B88);
  __chkstk_darwin(v2);
  v55 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v5 = *(_QWORD *)(v4 - 8);
  v67 = v4;
  __chkstk_darwin(v4);
  v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Locale(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = type metadata accessor for LocalizedStringResource(0);
  v14 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v16 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1000041D8(&qword_100085C78);
  v18 = sub_1000041D8(&qword_100085C80);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(_QWORD *)(v19 + 72);
  v62 = v18;
  v63 = v20;
  v21 = *(unsigned __int8 *)(v19 + 80);
  v22 = (v21 + 32) & ~v21;
  v23 = swift_allocObject(v17, v22 + 4 * v20, v21 | 7);
  v56 = v23;
  *(_OWORD *)(v23 + 16) = xmmword_10006B080;
  v61 = v23 + v22;
  v54 = v23 + v22 + *(int *)(v18 + 48);
  *(_BYTE *)(v23 + v22) = 0;
  v24 = String.LocalizationValue.init(stringLiteral:)(0x4C435F444C524F57, 0xEB000000004B434FLL);
  v57 = v10;
  static Locale.current.getter(v24);
  v59 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v60 = *(void (**)(char *))(v5 + 104);
  v60(v7);
  v25 = v7;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v13, 0x6E65746E49707041, 0xEA00000000007374, v10, v7, 0, 0, 256);
  v58 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
  v26 = v55;
  v58(v55, 1, 1, v68);
  v27 = v64;
  DisplayRepresentation.Image.init(systemName:isTemplate:)(0x65626F6C67, 0xE500000000000000, 2);
  v28 = type metadata accessor for DisplayRepresentation.Image(0);
  v29 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56);
  v65 = v28;
  v66 = v29;
  v29(v27, 0, 1, v28);
  v51 = v16;
  DisplayRepresentation.init(title:subtitle:image:)(v16, v26, v27);
  v31 = v62;
  v30 = v63;
  v32 = v61;
  v54 = v61 + v63 + *(int *)(v62 + 48);
  *(_BYTE *)(v61 + v63) = 1;
  v33 = v13;
  v34 = String.LocalizationValue.init(stringLiteral:)(0x4C5F534D52414C41, 0xEB00000000545349);
  v35 = v57;
  static Locale.current.getter(v34);
  v52 = v25;
  v36 = v59;
  v37 = (void (*)(char *, uint64_t, uint64_t))v60;
  ((void (*)(char *, _QWORD, uint64_t))v60)(v25, v59, v67);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v33, 0x6E65746E49707041, 0xEA00000000007374, v35, v25, 0, 0, 256);
  v38 = v26;
  v39 = v26;
  v40 = v58;
  v58(v38, 1, 1, v68);
  v41 = v64;
  DisplayRepresentation.Image.init(systemName:isTemplate:)(0x6D72616C61, 0xE500000000000000, 2);
  v66(v41, 0, 1, v65);
  v42 = v51;
  DisplayRepresentation.init(title:subtitle:image:)(v51, v39, v41);
  v54 = 2 * v30;
  v43 = (_BYTE *)(v32 + 2 * v30);
  v53 = &v43[*(int *)(v31 + 48)];
  *v43 = 3;
  v44 = String.LocalizationValue.init(stringLiteral:)(0x5441575F504F5453, 0xEA00000000004843);
  v45 = v57;
  static Locale.current.getter(v44);
  v46 = v52;
  v37(v52, v36, v67);
  v47 = v46;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v33, 0x6E65746E49707041, 0xEA00000000007374, v45, v46, 0, 0, 256);
  v40(v39, 1, 1, v68);
  DisplayRepresentation.Image.init(systemName:isTemplate:)(0x63746177706F7473, 0xE900000000000068, 2);
  v48 = v65;
  v49 = v66;
  v66(v41, 0, 1, v65);
  DisplayRepresentation.init(title:subtitle:image:)(v42, v39, v41);
  *(_BYTE *)(v61 + v54 + v63) = 2;
  v50 = String.LocalizationValue.init(stringLiteral:)(0x5352454D4954, 0xE600000000000000);
  static Locale.current.getter(v50);
  ((void (*)(char *, _QWORD, uint64_t))v60)(v47, v59, v67);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v33, 0x6E65746E49707041, 0xEA00000000007374, v45, v47, 0, 0, 256);
  v58(v39, 1, 1, v68);
  DisplayRepresentation.Image.init(systemName:isTemplate:)(0x72656D6974, 0xE500000000000000, 2);
  v49(v41, 0, 1, v48);
  DisplayRepresentation.init(title:subtitle:image:)(v42, v39, v41);
  sub_10001E91C(v56);
}

unint64_t sub_100020D38(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100081FA0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

unint64_t sub_100020D80()
{
  unint64_t result;

  result = qword_100085B98;
  if (!qword_100085B98)
  {
    result = swift_getWitnessTable(&unk_10006C1E8, &type metadata for ClockDestination);
    atomic_store(result, (unint64_t *)&qword_100085B98);
  }
  return result;
}

uint64_t sub_100020DC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  void (*v18)(_BYTE *, uint64_t, uint64_t, uint64_t);
  unint64_t v19;
  uint64_t v20;
  _BYTE v22[14];
  char v23;
  char v24;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v22[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = sub_1000041D8(&qword_100085B80);
  v5 = __chkstk_darwin(v4);
  v7 = &v22[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  v9 = &v22[-v8];
  v10 = sub_1000041D8(&qword_100085B88);
  __chkstk_darwin(v10);
  v12 = &v22[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for LocalizedStringResource(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = &v22[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000041D8(&qword_100085B90);
  LocalizedStringResource.init(stringLiteral:)(0x74616E6974736544, 0xEB000000006E6F69);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, v13);
  v24 = 4;
  v17 = type metadata accessor for IntentDialog(0);
  v18 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
  v18(v9, 1, 1, v17);
  v18(v7, 1, 1, v17);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for InputConnectionBehavior.default(_:), v0);
  v19 = sub_100020D80();
  v20 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)(v16, v12, &v24, v9, v7, v3, &off_100082098, v19);
  v23 = 3;
  swift_retain(v20);
  IntentParameter.wrappedValue.setter(&v23);
  swift_release(v20);
  return v20;
}

unint64_t sub_100021000()
{
  unint64_t result;

  result = qword_100085BA8;
  if (!qword_100085BA8)
  {
    result = swift_getWitnessTable(&unk_10006C520, &type metadata for OpenTabIntent);
    atomic_store(result, (unint64_t *)&qword_100085BA8);
  }
  return result;
}

unint64_t sub_100021048()
{
  unint64_t result;

  result = qword_100085BB0;
  if (!qword_100085BB0)
  {
    result = swift_getWitnessTable(&unk_10006C148, &type metadata for ClockDestination);
    atomic_store(result, (unint64_t *)&qword_100085BB0);
  }
  return result;
}

unint64_t sub_100021090()
{
  unint64_t result;

  result = qword_100085BB8;
  if (!qword_100085BB8)
  {
    result = swift_getWitnessTable(&unk_10006C260, &type metadata for ClockDestination);
    atomic_store(result, (unint64_t *)&qword_100085BB8);
  }
  return result;
}

unint64_t sub_1000210D8()
{
  unint64_t result;

  result = qword_100085BC0;
  if (!qword_100085BC0)
  {
    result = swift_getWitnessTable(&unk_10006C298, &type metadata for ClockDestination);
    atomic_store(result, (unint64_t *)&qword_100085BC0);
  }
  return result;
}

unint64_t sub_100021120()
{
  unint64_t result;

  result = qword_100085BC8;
  if (!qword_100085BC8)
  {
    result = swift_getWitnessTable(&unk_10006C1B0, &type metadata for ClockDestination);
    atomic_store(result, (unint64_t *)&qword_100085BC8);
  }
  return result;
}

void *sub_100021164()
{
  return &protocol witness table for String;
}

unint64_t sub_100021178()
{
  unint64_t result;

  result = qword_100085BD0;
  if (!qword_100085BD0)
  {
    result = swift_getWitnessTable(&unk_10006C2C8, &type metadata for ClockDestination);
    atomic_store(result, (unint64_t *)&qword_100085BD0);
  }
  return result;
}

unint64_t sub_1000211C0()
{
  unint64_t result;

  result = qword_100085BD8;
  if (!qword_100085BD8)
  {
    result = swift_getWitnessTable(&unk_10006C2F0, &type metadata for ClockDestination);
    atomic_store(result, (unint64_t *)&qword_100085BD8);
  }
  return result;
}

unint64_t sub_100021208()
{
  unint64_t result;

  result = qword_100085BE0;
  if (!qword_100085BE0)
  {
    result = swift_getWitnessTable(&unk_10006C318, &type metadata for ClockDestination);
    atomic_store(result, (unint64_t *)&qword_100085BE0);
  }
  return result;
}

unint64_t sub_100021250()
{
  unint64_t result;

  result = qword_100085BE8;
  if (!qword_100085BE8)
  {
    result = swift_getWitnessTable(&unk_10006C340, &type metadata for ClockDestination);
    atomic_store(result, (unint64_t *)&qword_100085BE8);
  }
  return result;
}

unint64_t sub_100021298()
{
  unint64_t result;

  result = qword_100085BF0;
  if (!qword_100085BF0)
  {
    result = swift_getWitnessTable(&unk_10006C398, &type metadata for ClockDestination);
    atomic_store(result, (unint64_t *)&qword_100085BF0);
  }
  return result;
}

uint64_t sub_1000212DC(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_100020D80();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppEnum.defaultResolverSpecification>>, 1);
}

unint64_t sub_100021320()
{
  unint64_t result;

  result = qword_100085C00;
  if (!qword_100085C00)
  {
    result = swift_getWitnessTable(&unk_10006C3D8, &type metadata for ClockDestination);
    atomic_store(result, (unint64_t *)&qword_100085C00);
  }
  return result;
}

unint64_t sub_100021368()
{
  unint64_t result;

  result = qword_100085C08;
  if (!qword_100085C08)
  {
    result = swift_getWitnessTable(&unk_10006C400, &type metadata for ClockDestination);
    atomic_store(result, (unint64_t *)&qword_100085C08);
  }
  return result;
}

unint64_t sub_1000213B0()
{
  unint64_t result;

  result = qword_100085C10;
  if (!qword_100085C10)
  {
    result = swift_getWitnessTable(&unk_10006C170, &type metadata for ClockDestination);
    atomic_store(result, (unint64_t *)&qword_100085C10);
  }
  return result;
}

uint64_t sub_1000213F4()
{
  return sub_10001DDB4(&qword_100085C18, &qword_100085C20, (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t sub_100021424()
{
  unint64_t result;

  result = qword_100085C28;
  if (!qword_100085C28)
  {
    result = swift_getWitnessTable(&unk_10006C4F8, &type metadata for OpenTabIntent);
    atomic_store(result, (unint64_t *)&qword_100085C28);
  }
  return result;
}

unint64_t sub_100021470()
{
  unint64_t result;

  result = qword_100085C30;
  if (!qword_100085C30)
  {
    result = swift_getWitnessTable(&unk_10006C5B0, &type metadata for OpenTabIntent);
    atomic_store(result, (unint64_t *)&qword_100085C30);
  }
  return result;
}

unint64_t sub_1000214B8()
{
  unint64_t result;

  result = qword_100085C38;
  if (!qword_100085C38)
  {
    result = swift_getWitnessTable(&unk_10006C5D8, &type metadata for OpenTabIntent);
    atomic_store(result, (unint64_t *)&qword_100085C38);
  }
  return result;
}

unint64_t sub_100021500()
{
  unint64_t result;

  result = qword_100085C40;
  if (!qword_100085C40)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Never, &type metadata for Never);
    atomic_store(result, (unint64_t *)&qword_100085C40);
  }
  return result;
}

uint64_t sub_100021544(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007BAC0, 1);
}

uint64_t getEnumTagSinglePayload for ClockDestination(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ClockDestination(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100021630 + 4 * byte_10006C131[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100021664 + 4 * byte_10006C12C[v4]))();
}

uint64_t sub_100021664(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002166C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100021674);
  return result;
}

uint64_t sub_100021680(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100021688);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10002168C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100021694(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ClockDestination()
{
  return &type metadata for ClockDestination;
}

ValueMetadata *type metadata accessor for OpenTabIntent()
{
  return &type metadata for OpenTabIntent;
}

uint64_t sub_1000216C0()
{
  return sub_10001DDB4(&qword_100085C50, &qword_100085C58, (uint64_t)&protocol conformance descriptor for IntentParameterSummary<A>);
}

unint64_t sub_1000216EC()
{
  unint64_t result;

  result = qword_100085C60;
  if (!qword_100085C60)
  {
    result = swift_getWitnessTable(&unk_10006C488, &type metadata for OpenTabIntent);
    atomic_store(result, (unint64_t *)&qword_100085C60);
  }
  return result;
}

unint64_t sub_100021730()
{
  unint64_t result;

  result = qword_100085C68;
  if (!qword_100085C68)
  {
    result = swift_getWitnessTable(&unk_10006C228, &type metadata for ClockDestination);
    atomic_store(result, (unint64_t *)&qword_100085C68);
  }
  return result;
}

uint64_t sub_100021774(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1(a3, a4);
}

uint64_t *sub_100021788(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

uint64_t sub_1000217C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t WitnessTable;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = type metadata accessor for Array(0, a3);
  v27 = Array.init()();
  result = Array.count.getter(a2, a3);
  if (result < 0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (a1)
  {
    v8 = result;
    v9 = 0;
    do
    {
      if (!v9 || v9 % a1)
      {
        if (v8 == v9)
        {
          v23 = Array.subscript.getter(v8 - 1, v8, a2, a3);
          v24 = v17;
          v25 = v18;
          v26 = v19;
          v20 = type metadata accessor for ArraySlice(0, a3);
          WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ArraySlice<A>, v20);
          v23 = Array.init<A>(_:)(&v23, a3, v20, WitnessTable);
          v22 = type metadata accessor for Array(0, v6);
          Array.append(_:)(&v23, v22);
          return v27;
        }
      }
      else
      {
        result = v9 - a1;
        if (__OFSUB__(v9, a1))
          goto LABEL_15;
        if (v9 < result)
          goto LABEL_16;
        v23 = Array.subscript.getter(result, v9, a2, a3);
        v24 = v11;
        v25 = v12;
        v26 = v13;
        v14 = type metadata accessor for ArraySlice(0, a3);
        v15 = swift_getWitnessTable(&protocol conformance descriptor for ArraySlice<A>, v14);
        v23 = Array.init<A>(_:)(&v23, a3, v14, v15);
        v16 = type metadata accessor for Array(0, v6);
        result = Array.append(_:)(&v23, v16);
        if (v8 == v9)
          return v27;
      }
    }
    while (!__OFADD__(v9++, 1));
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_10002197C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v42 = a1;
  v44 = a2;
  v41 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v40 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Calendar(0);
  v39 = *(_QWORD *)(v4 - 8);
  v5 = v39;
  __chkstk_darwin(v4);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000041D8(&qword_100084810);
  __chkstk_darwin(v8);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000041D8(&qword_100084848);
  __chkstk_darwin(v11);
  v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000041D8(&qword_100085CB0);
  __chkstk_darwin(v14);
  v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DateComponents(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v16, 1, 1, v4);
  v21 = type metadata accessor for TimeZone(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v13, 1, 1, v21);
  v38 = 1;
  v37 = 1;
  v36 = 1;
  v35 = 1;
  v34 = 1;
  v33 = 1;
  v32 = 1;
  v31 = 1;
  v30 = 1;
  v29 = 1;
  v28 = 1;
  v22 = v13;
  v23 = v40;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(v16, v22, 0, 1, 0, 1, 0, 1, 0, v28, 0, v29, 0, v30, 0, v31, 0, v32, 0,
    v33,
    0,
    v34,
    0,
    v35,
    0,
    v36,
    0,
    v37,
    0,
    v38);
  v24 = DateComponents.day.setter(v42, 0);
  static Calendar.current.getter(v24);
  v25 = v43;
  Calendar.date(byAdding:to:wrappingComponents:)(v20, v43, 0);
  v26 = v41;
  (*(void (**)(char *, uint64_t))(v39 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v23, v25, v26);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v10, 1, v26) == 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v2 + 32))(v44, v23, v26);
    return sub_1000106A4((uint64_t)v10, &qword_100084810);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v2 + 8))(v23, v26);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v2 + 32))(v44, v10, v26);
  }
}

uint64_t sub_100021CC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t (*v10)(char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  v0 = type metadata accessor for TimeZone(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()(v6);
  v9 = TimeZone.secondsFromGMT(for:)(v8);
  v10 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
  v11 = v10(v8, v4);
  v12 = static TimeZone.current.getter(v11);
  Date.init()(v12);
  v13 = TimeZone.secondsFromGMT(for:)(v8);
  v10(v8, v4);
  result = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if (!__OFSUB__(v9, v13))
    return Date.addingTimeInterval(_:)(result, (double)(v9 - v13));
  __break(1u);
  return result;
}

uint64_t sub_100021DF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t (*v10)(char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  v0 = type metadata accessor for TimeZone(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()(v6);
  v9 = TimeZone.secondsFromGMT(for:)(v8);
  v10 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
  v11 = v10(v8, v4);
  v12 = static TimeZone.current.getter(v11);
  Date.init()(v12);
  v13 = TimeZone.secondsFromGMT(for:)(v8);
  v10(v8, v4);
  result = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if (!__OFSUB__(v9, v13))
    return Date.addingTimeInterval(_:)(result, (double)(v9 - v13));
  __break(1u);
  return result;
}

uint64_t sub_100021F2C()
{
  id v0;
  NSString v1;
  Class isa;
  Class v3;
  id v4;
  uint64_t v5;

  v0 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  v1 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "setDateFormat:", v1);

  isa = TimeZone._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v0, "setTimeZone:", isa);

  v3 = Date._bridgeToObjectiveC()().super.isa;
  v4 = objc_msgSend(v0, "stringFromDate:", v3);

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  return v5;
}

void *sub_100022018()
{
  return &unk_10006C660;
}

double sub_100022024()
{
  return 1.0;
}

void *sub_100022030()
{
  return &unk_10006C670;
}

double sub_10002203C()
{
  return 1.2;
}

void *sub_100022050()
{
  return &unk_10006C680;
}

double sub_10002205C()
{
  return 1.0;
}

void *sub_100022068()
{
  return &unk_10006C690;
}

double sub_100022074()
{
  return 1.57079633;
}

void *sub_100022080()
{
  return &unk_10006C698;
}

double sub_10002208C()
{
  return 4.71238898;
}

uint64_t sub_100022098(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;

  v6 = sub_1000041D8(&qword_100085AD0);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for ContentSizeCategory(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CapMaxContentSizeCategory(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
  sub_100026660(v8);
  sub_10004182C((uint64_t)v8, (uint64_t)v12, (uint64_t)v15);
  View.modifier<A>(_:)(v15, a2, v13, a3);
  return sub_1000221E4((uint64_t)v15);
}

uint64_t sub_1000221E4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CapMaxContentSizeCategory(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100022220()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSString v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char v16;
  uint64_t v17;

  v0 = type metadata accessor for Locale(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (void *)objc_opt_self(IntlUtility);
  v5 = static Locale.current.getter();
  Locale.identifier.getter(v5);
  v7 = v6;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v7);
  v9 = objc_msgSend(v4, "numberingSystemForLocaleID:", v8);

  if (v9)
  {
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v12 = v11;

    if (v12)
    {
      v13 = v10 == 1650553441 && v12 == 0xE400000000000000;
      if (v13
        || (_stringCompareWithSmolCheck(_:_:expecting:)(1650553441, 0xE400000000000000, v10, v12, 0) & 1) != 0)
      {
        swift_bridgeObjectRelease(v12);
        return 1;
      }
      if (v10 == 1635149156 && v12 == 0xE400000000000000)
      {
        swift_bridgeObjectRelease(v12);
        return 2;
      }
      v16 = _stringCompareWithSmolCheck(_:_:expecting:)(1635149156, 0xE400000000000000, v10, v12, 0);
      swift_bridgeObjectRelease(v12);
      if ((v16 & 1) != 0)
        return 2;
    }
  }
  return 0;
}

uint64_t sub_1000223B8(char a1)
{
  return *(_QWORD *)&aLatn_0[8 * a1];
}

uint64_t sub_1000223D4(char *a1, char *a2)
{
  return sub_1000223E0(*a1, *a2);
}

uint64_t sub_1000223E0(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)&aLatn_0[8 * a1];
  v3 = *(_QWORD *)&aLatn_0[8 * a2];
  if (v2 == v3)
    v4 = 1;
  else
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, 0xE400000000000000, v3, 0xE400000000000000, 0);
  swift_bridgeObjectRelease_n(0xE400000000000000, 2);
  return v4 & 1;
}

Swift::Int sub_100022444()
{
  char *v0;

  return sub_10002244C(*v0);
}

Swift::Int sub_10002244C(char a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  String.hash(into:)(v3, *(_QWORD *)&aLatn_0[8 * a1], 0xE400000000000000);
  swift_bridgeObjectRelease(0xE400000000000000);
  return Hasher._finalize()();
}

uint64_t sub_1000224A8(uint64_t a1)
{
  char *v1;

  return sub_1000224B0(a1, *v1);
}

uint64_t sub_1000224B0(uint64_t a1, char a2)
{
  String.hash(into:)(a1, *(_QWORD *)&aLatn_0[8 * a2], 0xE400000000000000);
  return swift_bridgeObjectRelease(0xE400000000000000);
}

Swift::Int sub_1000224DC(uint64_t a1)
{
  char *v1;

  return sub_1000224E4(a1, *v1);
}

Swift::Int sub_1000224E4(uint64_t a1, char a2)
{
  _QWORD v4[9];

  Hasher.init(_seed:)(v4, a1);
  String.hash(into:)(v4, *(_QWORD *)&aLatn_0[8 * a2], 0xE400000000000000);
  swift_bridgeObjectRelease(0xE400000000000000);
  return Hasher._finalize()();
}

unint64_t sub_10002253C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100024D1C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100022568@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1000223B8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_100022590()
{
  byte_10008A448 = 1;
  qword_10008A450 = 0xE500000000000000;
}

uint64_t sub_1000225AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100021788(v0, qword_10008BE80);
  sub_10001EB00(v0, (uint64_t)qword_10008BE80);
  if (qword_10008A440 != -1)
    swift_once(&qword_10008A440, sub_100022590);
  if (byte_10008A448)
    v1 = 0x746E656741;
  else
    v1 = 0;
  v2 = qword_10008A450;
  swift_bridgeObjectRetain(qword_10008A450);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x800000010006F0C0, v1, v2);
}

uint64_t sub_100022674()
{
  return sub_10001FD50(&qword_10008A458, (uint64_t (*)(_QWORD))&type metadata accessor for Logger, (uint64_t)qword_10008BE80);
}

uint64_t sub_100022698@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_10008A458 != -1)
    swift_once(&qword_10008A458, sub_1000225AC);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10001EB00(v2, (uint64_t)qword_10008BE80);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

void sub_100022708(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;

  if (qword_10008A458 != -1)
    swift_once(&qword_10008A458, sub_1000225AC);
  v4 = type metadata accessor for Logger(0);
  sub_10001EB00(v4, (uint64_t)qword_10008BE80);
  v5 = swift_bridgeObjectRetain_n(a2, 2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v11 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_bridgeObjectRetain(a2);
    v10 = sub_10001DEE4(a1, a2, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "WorldClockWidget: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
}

uint64_t sub_1000228A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  Swift::String v31;
  uint64_t v32;
  Swift::String v33;
  Swift::String v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  Swift::String v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;

  v63 = a1;
  v64 = a2;
  v2 = type metadata accessor for Calendar(0);
  __chkstk_darwin(v2);
  v62 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for TimeZone(0);
  v60 = *(_QWORD *)(v4 - 8);
  v61 = v4;
  __chkstk_darwin(v4);
  v59 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000041D8(&qword_100085CB8);
  __chkstk_darwin(v6);
  v58 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date.FormatString(0);
  __chkstk_darwin(v8);
  v57 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date.FormatStyle.Symbol.DayPeriod.Width(0);
  v53 = *(_QWORD *)(v10 - 8);
  v54 = v10;
  __chkstk_darwin(v10);
  v52 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Date.FormatStyle.Symbol.DayPeriod(0);
  v55 = *(_QWORD *)(v12 - 8);
  v56 = v12;
  __chkstk_darwin(v12);
  v51 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Date.FormatStyle.Symbol.Minute(0);
  v49 = *(_QWORD *)(v14 - 8);
  v50 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = type metadata accessor for Date.FormatStyle.Symbol.VerbatimHour.HourCycle(0);
  v17 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v19 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for Date.FormatStyle.Symbol.VerbatimHour.Clock(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = (char *)&v47 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for Date.FormatStyle.Symbol.VerbatimHour(0);
  v25 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v27 = (char *)&v47 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for Date.FormatString.StringInterpolation(0);
  __chkstk_darwin(v28);
  v30 = (char *)&v47 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.FormatString.StringInterpolation.init(literalCapacity:interpolationCount:)(1, 3);
  v31._countAndFlagsBits = 0;
  v31._object = (void *)0xE000000000000000;
  Date.FormatString.StringInterpolation.appendLiteral(_:)(v31);
  v32 = static Date.FormatStyle.Symbol.VerbatimHour.Clock.twelveHour.getter();
  static Date.FormatStyle.Symbol.VerbatimHour.HourCycle.zeroBased.getter(v32);
  static Date.FormatStyle.Symbol.VerbatimHour.defaultDigits(clock:hourCycle:)(v23, v19);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v48);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  Date.FormatString.StringInterpolation.appendInterpolation(hour:)(v27);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v24);
  v33._countAndFlagsBits = 58;
  v33._object = (void *)0xE100000000000000;
  Date.FormatString.StringInterpolation.appendLiteral(_:)(v33);
  static Date.FormatStyle.Symbol.Minute.twoDigits.getter();
  Date.FormatString.StringInterpolation.appendInterpolation(minute:)(v16);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v16, v50);
  v34._countAndFlagsBits = 0;
  v34._object = (void *)0xE000000000000000;
  Date.FormatString.StringInterpolation.appendLiteral(_:)(v34);
  v36 = v52;
  v35 = v53;
  v37 = v54;
  (*(void (**)(char *, _QWORD, uint64_t))(v53 + 104))(v52, enum case for Date.FormatStyle.Symbol.DayPeriod.Width.abbreviated(_:), v54);
  v38 = v51;
  static Date.FormatStyle.Symbol.DayPeriod.standard(_:)(v36);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v37);
  Date.FormatString.StringInterpolation.appendInterpolation(dayPeriod:)(v38);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v38, v56);
  v39._countAndFlagsBits = 0;
  v39._object = (void *)0xE000000000000000;
  Date.FormatString.StringInterpolation.appendLiteral(_:)(v39);
  v40 = v57;
  Date.FormatString.init(stringInterpolation:)(v30);
  v41 = type metadata accessor for Locale(0);
  v42 = v58;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v58, 1, 1, v41);
  v43 = v59;
  v44 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v60 + 16))(v59, v63, v61);
  v45 = v62;
  static Calendar.current.getter(v44);
  return Date.VerbatimFormatStyle.init(format:locale:timeZone:calendar:)(v40, v42, v43, v45);
}

uint64_t sub_100022CE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  Swift::String v27;
  uint64_t v28;
  Swift::String v29;
  Swift::String v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;

  v48 = a1;
  v49 = a2;
  v2 = type metadata accessor for Calendar(0);
  __chkstk_darwin(v2);
  v47 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for TimeZone(0);
  v45 = *(_QWORD *)(v4 - 8);
  v46 = v4;
  __chkstk_darwin(v4);
  v44 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000041D8(&qword_100085CB8);
  __chkstk_darwin(v6);
  v43 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date.FormatString(0);
  __chkstk_darwin(v8);
  v42 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date.FormatStyle.Symbol.Minute(0);
  v40 = *(_QWORD *)(v10 - 8);
  v41 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = type metadata accessor for Date.FormatStyle.Symbol.VerbatimHour.HourCycle(0);
  v13 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Date.FormatStyle.Symbol.VerbatimHour.Clock(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for Date.FormatStyle.Symbol.VerbatimHour(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = (char *)&v38 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for Date.FormatString.StringInterpolation(0);
  __chkstk_darwin(v24);
  v26 = (char *)&v38 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.FormatString.StringInterpolation.init(literalCapacity:interpolationCount:)(1, 2);
  v27._countAndFlagsBits = 0;
  v27._object = (void *)0xE000000000000000;
  Date.FormatString.StringInterpolation.appendLiteral(_:)(v27);
  v28 = static Date.FormatStyle.Symbol.VerbatimHour.Clock.twelveHour.getter();
  static Date.FormatStyle.Symbol.VerbatimHour.HourCycle.zeroBased.getter(v28);
  static Date.FormatStyle.Symbol.VerbatimHour.defaultDigits(clock:hourCycle:)(v19, v15);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v39);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  Date.FormatString.StringInterpolation.appendInterpolation(hour:)(v23);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  v29._countAndFlagsBits = 58;
  v29._object = (void *)0xE100000000000000;
  Date.FormatString.StringInterpolation.appendLiteral(_:)(v29);
  static Date.FormatStyle.Symbol.Minute.twoDigits.getter();
  Date.FormatString.StringInterpolation.appendInterpolation(minute:)(v12);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v12, v41);
  v30._countAndFlagsBits = 0;
  v30._object = (void *)0xE000000000000000;
  Date.FormatString.StringInterpolation.appendLiteral(_:)(v30);
  v31 = v42;
  Date.FormatString.init(stringInterpolation:)(v26);
  v32 = type metadata accessor for Locale(0);
  v33 = v43;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v43, 1, 1, v32);
  v34 = v44;
  v35 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 16))(v44, v48, v46);
  v36 = v47;
  static Calendar.current.getter(v35);
  return Date.VerbatimFormatStyle.init(format:locale:timeZone:calendar:)(v31, v33, v34, v36);
}

uint64_t sub_100023044@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  Swift::String v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v39 = a1;
  v41 = a2;
  v40 = type metadata accessor for Calendar.Identifier(0);
  v38 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v3 = (char *)&v34 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Calendar(0);
  __chkstk_darwin(v4);
  v37 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for TimeZone(0);
  v35 = *(_QWORD *)(v6 - 8);
  v36 = v6;
  __chkstk_darwin(v6);
  v34 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000041D8(&qword_100085CB8);
  __chkstk_darwin(v8);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Date.FormatString(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Date.FormatStyle.Symbol.DayPeriod.Width(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Date.FormatStyle.Symbol.DayPeriod(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v34 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for Date.FormatString.StringInterpolation(0);
  __chkstk_darwin(v22);
  v24 = (char *)&v34 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.FormatString.StringInterpolation.init(literalCapacity:interpolationCount:)(0, 1);
  v25._countAndFlagsBits = 0;
  v25._object = (void *)0xE000000000000000;
  Date.FormatString.StringInterpolation.appendLiteral(_:)(v25);
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v17, enum case for Date.FormatStyle.Symbol.DayPeriod.Width.abbreviated(_:), v14);
  static Date.FormatStyle.Symbol.DayPeriod.standard(_:)(v17);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  Date.FormatString.StringInterpolation.appendInterpolation(dayPeriod:)(v21);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  v26._countAndFlagsBits = 0;
  v26._object = (void *)0xE000000000000000;
  Date.FormatString.StringInterpolation.appendLiteral(_:)(v26);
  v27 = Date.FormatString.init(stringInterpolation:)(v24);
  static Locale.current.getter(v27);
  v28 = type metadata accessor for Locale(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v10, 0, 1, v28);
  v29 = v34;
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v34, v39, v36);
  v30 = v38;
  v31 = v40;
  (*(void (**)(char *, _QWORD, uint64_t))(v38 + 104))(v3, enum case for Calendar.Identifier.gregorian(_:), v40);
  v32 = v37;
  Calendar.init(identifier:)(v3);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v3, v31);
  return Date.VerbatimFormatStyle.init(format:locale:timeZone:calendar:)(v13, v10, v29, v32);
}

uint64_t sub_100023370()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  v0 = (_QWORD *)static Locale.preferredLanguages.getter();
  v1 = v0;
  if (v0[2])
  {
    v2 = v0[4];
    swift_bridgeObjectRetain(v0[5]);
  }
  else
  {
    v2 = 0;
  }
  swift_bridgeObjectRelease(v1);
  return v2;
}

uint64_t sub_1000233C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];

  v4 = sub_1000041D8(&qword_100084848);
  v5 = __chkstk_darwin(v4);
  v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  v9 = &v13[-v8];
  TimeZone.init(identifier:)(a1, a2);
  v10 = type metadata accessor for TimeZone(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v7, 1, v10) == 1)
  {
    static TimeZone.autoupdatingCurrent.getter();
    sub_1000106A4((uint64_t)v7, &qword_100084848);
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 32))(v9, v7, v10);
  }
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
  return Text.init(dateFormatTemplate:timeZone:)(7171402, 0xE300000000000000, v9);
}

uint64_t sub_1000234E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;

  v25 = type metadata accessor for Text.Scale(0);
  v4 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000041D8(&qword_100084848);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v24 - v11;
  TimeZone.init(identifier:)(a1, a2);
  v13 = type metadata accessor for TimeZone(0);
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v10, 1, v13) == 1)
  {
    static TimeZone.autoupdatingCurrent.getter();
    sub_1000106A4((uint64_t)v10, &qword_100084848);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v12, v10, v13);
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v12, 0, 1, v13);
  v15 = Text.init(dateFormatTemplate:timeZone:)(97, 0xE100000000000000, v12);
  v17 = v16;
  v19 = v18;
  v21 = v20 & 1;
  static Text.Scale.secondary.getter();
  v22 = Text.textScale(_:isEnabled:)(v6, 1, v15, v17, v21, v19);
  sub_100010E24(v15, v17, v21);
  swift_bridgeObjectRelease(v19);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v25);
  return v22;
}

uint64_t sub_1000236CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v55 = a1;
  v56 = a2;
  v2 = type metadata accessor for AttributedString.Runs(0);
  v43 = *(_QWORD *)(v2 - 8);
  v44 = v2;
  __chkstk_darwin(v2);
  v42 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Date.AttributedStyle(0);
  v5 = *(_QWORD *)(v4 - 8);
  v53 = v4;
  v54 = v5;
  __chkstk_darwin(v4);
  v50 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date.FormatStyle.Symbol.Minute(0);
  v48 = *(_QWORD *)(v7 - 8);
  v49 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date.FormatStyle.Symbol.Hour.AMPMStyle(0);
  v46 = *(_QWORD *)(v10 - 8);
  v47 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = type metadata accessor for Date.FormatStyle.Symbol.Hour(0);
  v13 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Date.FormatStyle(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v18);
  v23 = (char *)&v42 - v22;
  __chkstk_darwin(v21);
  v25 = (char *)&v42 - v24;
  v26 = type metadata accessor for AttributedString(0);
  v51 = *(_QWORD *)(v26 - 8);
  v52 = v26;
  v27 = __chkstk_darwin(v26);
  v29 = (char *)&v42 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = static FormatStyle<>.dateTime.getter(v27);
  static Date.FormatStyle.Symbol.Hour.AMPMStyle.abbreviated.getter(v30);
  static Date.FormatStyle.Symbol.Hour.defaultDigits(amPM:)(v12);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v12, v47);
  Date.FormatStyle.hour(_:)(v15);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v45);
  v31 = *(uint64_t (**)(char *, uint64_t))(v17 + 8);
  v32 = v31(v20, v16);
  static Date.FormatStyle.Symbol.Minute.defaultDigits.getter(v32);
  Date.FormatStyle.minute(_:)(v9);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v9, v49);
  v33 = v31(v23, v16);
  v34 = v50;
  Date.FormatStyle.attributed.getter(v33);
  v31(v25, v16);
  v35 = sub_10000D36C(&qword_100085CC0, (uint64_t (*)(uint64_t))&type metadata accessor for Date.AttributedStyle, (uint64_t)&protocol conformance descriptor for Date.AttributedStyle);
  v36 = v34;
  v37 = v34;
  v38 = v53;
  Date.formatted<A>(_:)(v36, v53, v35);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v37, v38);
  if (qword_10008A460 != -1)
    swift_once(&qword_10008A460, sub_100024860);
  v39 = type metadata accessor for Locale(0);
  sub_10001EB00(v39, (uint64_t)qword_10008BE98);
  if ((sub_100023A80() & 1) == 0)
  {
    v40 = (uint64_t)v42;
    AttributedString.runs.getter();
    sub_100024018(v40, (uint64_t)v29);
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v40, v44);
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v51 + 32))(v56, v29, v52);
}

uint64_t sub_100023A5C()
{
  return sub_10001FD50(&qword_10008A460, (uint64_t (*)(_QWORD))&type metadata accessor for Locale, (uint64_t)qword_10008BE98);
}

uint64_t sub_100023A80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, _QWORD, uint64_t);
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  void (*v33)(char *, uint64_t);
  void *v34;
  NSString v35;
  char *v36;
  Class isa;
  id v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;

  v1 = sub_1000041D8(&qword_100085CB8);
  __chkstk_darwin(v1);
  v48 = (char *)&v47 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Locale(0);
  v4 = *(_QWORD *)(v3 - 8);
  v53 = v3;
  v54 = v4;
  v5 = __chkstk_darwin(v3);
  v49 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (char *)&v47 - v7;
  v9 = type metadata accessor for Locale.HourCycle(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v51 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v50 = (char *)&v47 - v14;
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v47 - v16;
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v47 - v19;
  v52 = v0;
  Locale.hourCycle.getter(v18);
  v21 = *(void (**)(char *, _QWORD, uint64_t))(v10 + 104);
  v21(v17, enum case for Locale.HourCycle.oneToTwentyFour(_:), v9);
  v22 = sub_10000D36C(&qword_100085CC8, (uint64_t (*)(uint64_t))&type metadata accessor for Locale.HourCycle, (uint64_t)&protocol conformance descriptor for Locale.HourCycle);
  dispatch thunk of RawRepresentable.rawValue.getter(&v57, v9, v22);
  dispatch thunk of RawRepresentable.rawValue.getter(&v55, v9, v22);
  v23 = v58;
  v24 = v56;
  if (v57 == v55 && v58 == v56)
  {
    v25 = 1;
    v24 = v58;
  }
  else
  {
    v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v57, v58, v55, v56, 0);
  }
  swift_bridgeObjectRelease(v23);
  swift_bridgeObjectRelease(v24);
  v26 = *(void (**)(char *, uint64_t))(v10 + 8);
  v26(v17, v9);
  v26(v20, v9);
  v28 = v53;
  v27 = v54;
  v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v54 + 16))(v8, v52, v53);
  if ((v25 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v27 + 8))(v8, v28);
    return 1;
  }
  Locale.hourCycle.getter(v29);
  v21(v51, enum case for Locale.HourCycle.zeroToTwentyThree(_:), v9);
  dispatch thunk of RawRepresentable.rawValue.getter(&v57, v9, v22);
  dispatch thunk of RawRepresentable.rawValue.getter(&v55, v9, v22);
  v30 = v58;
  v31 = v56;
  if (v57 == v55 && v58 == v56)
  {
    v32 = 1;
    v31 = v58;
  }
  else
  {
    v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v57, v58, v55, v56, 0);
  }
  swift_bridgeObjectRelease(v30);
  swift_bridgeObjectRelease(v31);
  v26(v51, v9);
  v26(v50, v9);
  v33 = *(void (**)(char *, uint64_t))(v27 + 8);
  v33(v8, v28);
  if ((v32 & 1) != 0)
    return 1;
  v34 = (void *)objc_opt_self(NSDateFormatter);
  v35 = String._bridgeToObjectiveC()();
  v36 = v49;
  static Locale.current.getter(v35);
  isa = Locale._bridgeToObjectiveC()().super.isa;
  v33(v36, v28);
  v38 = objc_msgSend(v34, "dateFormatFromTemplate:options:locale:", v35, 0, isa);

  if (!v38)
    return 1;
  v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
  v41 = v40;

  v57 = v39;
  v58 = v41;
  v55 = 97;
  v56 = 0xE100000000000000;
  v42 = (uint64_t)v48;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v54 + 56))(v48, 1, 1, v28);
  v43 = sub_10000D9FC();
  StringProtocol.range<A>(of:options:range:locale:)(&v55, 0, 0, 0, 1, v42, &type metadata for String, &type metadata for String, v43, v43);
  v45 = v44 & 1;
  sub_1000106A4(v42, &qword_100085CB8);
  swift_bridgeObjectRelease(v56);
  swift_bridgeObjectRelease(v58);
  return v45;
}

uint64_t sub_100023EDC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_100023F3C(a1, a2, a3, &qword_100085E20);
}

uint64_t sub_100023EE8(uint64_t a1, uint64_t a2)
{
  return sub_100023F9C(a1, a2, &qword_100085E20);
}

void sub_100023EF4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *a2;
  v3 = sub_10002509C();
  AttributeDynamicLookup.subscript.getter(v2, v3);
  __break(1u);
}

void sub_100023F18()
{
  AttributeScopes.FoundationAttributes.dateField.getter();
  __break(1u);
}

uint64_t sub_100023F30(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_100023F3C(a1, a2, a3, &qword_100085E18);
}

uint64_t sub_100023F3C(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v4 = *a2;
  v7 = *a1;
  v8 = v4;
  v5 = sub_1000041D8(a4);
  return dispatch thunk of static Equatable.== infix(_:_:)(&v8, &v7, v5, &protocol witness table for AnyKeyPath) & 1;
}

uint64_t sub_100023F90(uint64_t a1, uint64_t a2)
{
  return sub_100023F9C(a1, a2, &qword_100085E18);
}

uint64_t sub_100023F9C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_1000041D8(a3);
  return dispatch thunk of Hashable.hashValue.getter(v3, &protocol witness table for AnyKeyPath);
}

void sub_100023FDC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *a2;
  v3 = sub_100025110();
  AttributeDynamicLookup.subscript.getter(v2, v3);
  __break(1u);
}

void sub_100024000()
{
  AttributeScopes.SwiftUIAttributes.textScale.getter();
  __break(1u);
}

uint64_t sub_100024018(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  void (*v37)(_BYTE *, uint64_t);
  void (*v38)(_BYTE *, _QWORD);
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  _BYTE *v42;
  BOOL v43;
  uint64_t v44;
  uint64_t KeyPath;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  _BYTE *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  unint64_t v59;
  void (*v60)(_BYTE *, _QWORD);
  unint64_t v61;
  void (*v62)(_BYTE *, uint64_t);
  _BYTE v64[16];
  _BYTE *v65;
  uint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  int v69;
  _BYTE *v70;
  _BYTE *v71;
  uint64_t v72;
  _BYTE *v73;
  void (*v74)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v75;
  uint64_t v76;
  void (*v77)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  _BYTE *v81;
  uint64_t v82;
  _BYTE *v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  _BYTE *v87;
  _BYTE v88[40];
  uint64_t v89;

  v68 = a2;
  v3 = sub_1000041D8(&qword_100085DC0);
  __chkstk_darwin(v3);
  v67 = &v64[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v66 = sub_1000041D8(&qword_100085DC8);
  __chkstk_darwin(v66);
  v65 = &v64[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_1000041D8(&qword_100085DD0);
  __chkstk_darwin(v6);
  v73 = &v64[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v86 = type metadata accessor for AttributeScopes.FoundationAttributes.DateFieldAttribute.Field(0);
  v72 = *(_QWORD *)(v86 - 8);
  v8 = __chkstk_darwin(v86);
  v71 = &v64[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  v70 = &v64[-v10];
  v89 = type metadata accessor for AttributedString.Runs.Run(0);
  v82 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89);
  v87 = &v64[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v79 = type metadata accessor for AttributedString.Runs.Index(0);
  v12 = *(_QWORD *)(v79 - 8);
  v13 = __chkstk_darwin(v79);
  v84 = &v64[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v13);
  v83 = &v64[-v15];
  v16 = sub_1000041D8(&qword_100085DD8);
  __chkstk_darwin(v16);
  v81 = &v64[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = type metadata accessor for AttributedString.Runs(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = &v64[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v22 = sub_1000041D8(&qword_100085DE0);
  __chkstk_darwin(v22);
  v24 = &v64[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v76 = v19;
  v74 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v19 + 16);
  v74(v21, a1, v18);
  v25 = sub_10000D36C(&qword_100085DE8, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString.Runs, (uint64_t)&protocol conformance descriptor for AttributedString.Runs);
  v75 = v21;
  v78 = v18;
  dispatch thunk of Sequence.makeIterator()(v18, v25);
  v26 = *(int *)(v22 + 36);
  v80 = v24;
  v27 = &v24[v26];
  v85 = v12;
  v77 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v12 + 16);
  v69 = enum case for AttributeScopes.FoundationAttributes.DateFieldAttribute.Field.amPM(_:);
  while (1)
  {
    v28 = v83;
    v29 = v79;
    v77(v83, v27, v79);
    v30 = sub_10000D36C(&qword_100085DF0, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString.Runs, (uint64_t)&protocol conformance descriptor for AttributedString.Runs);
    v31 = v27;
    v32 = v84;
    v33 = (uint64_t)v80;
    v34 = v78;
    dispatch thunk of Collection.endIndex.getter(v78, v30);
    v35 = sub_10000D36C(&qword_100085DF8, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString.Runs.Index, (uint64_t)&protocol conformance descriptor for AttributedString.Runs.Index);
    v36 = dispatch thunk of static Equatable.== infix(_:_:)(v28, v32, v29, v35);
    v37 = *(void (**)(_BYTE *, uint64_t))(v85 + 8);
    v37(v32, v29);
    v37(v28, v29);
    if ((v36 & 1) != 0)
      break;
    v38 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read(v88, v31, v34, v30);
    v40 = v81;
    v39 = v82;
    v41 = v89;
    (*(void (**)(_BYTE *))(v82 + 16))(v81);
    v38(v88, 0);
    v42 = v75;
    v74(v75, v33, v34);
    dispatch thunk of Collection.formIndex(after:)(v31, v34, v30);
    (*(void (**)(_BYTE *, uint64_t))(v76 + 8))(v42, v34);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v40, 0, 1, v41);
    v43 = (*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v39 + 48))(v40, 1, v41) == 1;
    v44 = v33;
    if (v43)
      return sub_1000106A4(v44, &qword_100085DE0);
    v27 = v31;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v39 + 32))(v87, v40, v89);
    KeyPath = swift_getKeyPath(&unk_10006C788);
    *(_QWORD *)&v64[-16] = __chkstk_darwin(KeyPath);
    v46 = swift_getKeyPath(&unk_10006C7B8);
    v47 = sub_10002509C();
    v48 = (uint64_t)v73;
    AttributedString.Runs.Run.subscript.getter(v46, v47);
    swift_release(v46);
    v49 = v72;
    v50 = v86;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v72 + 48))(v48, 1, v86) == 1)
    {
      sub_1000106A4(v48, &qword_100085DD0);
    }
    else
    {
      v51 = v70;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v49 + 32))(v70, v48, v50);
      v52 = v71;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v49 + 16))(v71, v51, v50);
      v53 = (*(uint64_t (**)(_BYTE *, uint64_t))(v49 + 88))(v52, v50);
      if (v53 == v69)
      {
        v54 = (uint64_t)v65;
        AttributedString.Runs.Run.range.getter();
        v55 = swift_getKeyPath(&unk_10006C7F8);
        *(_QWORD *)&v64[-16] = __chkstk_darwin(v55);
        v56 = swift_getKeyPath(&unk_10006C828);
        v57 = v67;
        static Text.Scale.secondary.getter();
        v58 = type metadata accessor for Text.Scale(0);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v57, 0, 1, v58);
        v59 = sub_100025160();
        v60 = (void (*)(_BYTE *, _QWORD))AttributedString.subscript.modify(v88, v54, v66, v59);
        v61 = sub_100025110();
        AttributedSubstring.subscript.setter(v57, v56, v61);
        v60(v88, 0);
        sub_1000106A4(v54, &qword_100085DC8);
        (*(void (**)(_BYTE *, uint64_t))(v49 + 8))(v51, v86);
      }
      else
      {
        v62 = *(void (**)(_BYTE *, uint64_t))(v49 + 8);
        v62(v51, v50);
        v62(v52, v50);
      }
    }
    (*(void (**)(_BYTE *, uint64_t))(v39 + 8))(v87, v89);
  }
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v82 + 56))(v81, 1, 1, v89);
  v44 = v33;
  return sub_1000106A4(v44, &qword_100085DE0);
}

uint64_t sub_100024740()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;

  v0 = (_QWORD *)static Locale.preferredLanguages.getter();
  v1 = v0;
  if (v0[2])
  {
    v2 = v0[4];
    v3 = v0[5];
    swift_bridgeObjectRetain(v3);
    swift_bridgeObjectRelease(v1);
    v4 = sub_100024D64(2, v2, v3);
    v6 = v5;
    v8 = v7;
    v10 = v9;
    swift_bridgeObjectRelease(v3);
    if ((sub_100024DEC(29281, 0xE200000000000000, v4, v6, v8, v10) & 1) != 0
      || (sub_100024DEC(24938, 0xE200000000000000, v4, v6, v8, v10) & 1) != 0
      || (sub_100024DEC(28523, 0xE200000000000000, v4, v6, v8, v10) & 1) != 0)
    {
      swift_bridgeObjectRelease(v10);
      return 1;
    }
    v12 = sub_100024DEC(26746, 0xE200000000000000, v4, v6, v8, v10);
    swift_bridgeObjectRelease(v10);
    if ((v12 & 1) != 0)
      return 1;
  }
  else
  {
    swift_bridgeObjectRelease(v0);
  }
  return 0;
}

uint64_t sub_100024860()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v0 = type metadata accessor for Locale(0);
  sub_100021788(v0, qword_10008BE98);
  sub_10001EB00(v0, (uint64_t)qword_10008BE98);
  v1 = (_QWORD *)static Locale.preferredLanguages.getter();
  v2 = v1;
  if (v1[2])
  {
    v3 = v1[4];
    v4 = v1[5];
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRelease(v2);
    return Locale.init(identifier:)(v3, v4);
  }
  else
  {
    v6 = swift_bridgeObjectRelease(v1);
    return static Locale.current.getter(v6);
  }
}

uint64_t sub_1000248F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_10008A460 != -1)
    swift_once(&qword_10008A460, sub_100024860);
  v2 = type metadata accessor for Locale(0);
  v3 = sub_10001EB00(v2, (uint64_t)qword_10008BE98);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

unint64_t sub_100024964()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  NSString v8;
  Class isa;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v0 = sub_1000041D8(&qword_100085CB8);
  __chkstk_darwin(v0);
  v2 = (char *)&v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Locale(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (void *)objc_opt_self(NSDateFormatter);
  v8 = String._bridgeToObjectiveC()();
  static Locale.current.getter(v8);
  isa = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v10 = (unint64_t)objc_msgSend(v7, "dateFormatFromTemplate:options:locale:", v8, 0, isa);

  if (v10)
  {
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v13 = v12;

    v19 = v11;
    v20 = v13;
    v17 = 97;
    v18 = 0xE100000000000000;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, 1, 1, v3);
    v14 = sub_10000D9FC();
    StringProtocol.range<A>(of:options:range:locale:)(&v17, 0, 0, 0, 1, v2, &type metadata for String, &type metadata for String, v14, v14);
    v10 = (v15 & 1) == 0;
    sub_1000106A4((uint64_t)v2, &qword_100085CB8);
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(v20);
  }
  return v10;
}

uint64_t sub_100024B20()
{
  Class isa;
  id v2;

  if ((sub_100023A80() & 1) != 0)
    return 2;
  isa = Locale._bridgeToObjectiveC()().super.isa;
  v2 = -[objc_class positionOfDayPeriodInFormattedTime](isa, "positionOfDayPeriodInFormattedTime");

  if ((unint64_t)v2 <= 2)
    return (2 - (_DWORD)v2);
  else
    return 2;
}

void *sub_100024B74()
{
  return &unk_10006C6A0;
}

uint64_t sub_100024B80()
{
  return 0x20000;
}

uint64_t sub_100024B88(uint64_t a1)
{
  return sub_100024C14(81.0, a1, &qword_10008BEB0);
}

uint64_t *sub_100024BA0()
{
  if (qword_10008A468 != -1)
    swift_once(&qword_10008A468, sub_100024B88);
  return &qword_10008BEB0;
}

uint64_t sub_100024BE0()
{
  return sub_100024CE4(&qword_10008A468, &qword_10008BEB0);
}

uint64_t sub_100024BFC(uint64_t a1)
{
  return sub_100024C14(98.0, a1, &qword_10008BEB8);
}

uint64_t sub_100024C14(CGFloat a1, uint64_t a2, uint64_t *a3)
{
  __CFString *v5;
  CTFontRef v6;
  uint64_t result;

  v5 = (__CFString *)String._bridgeToObjectiveC()();
  v6 = CTFontCreateWithNameAndOptions(v5, a1, 0, 0x20000uLL);

  result = Font.init(_:)(v6);
  *a3 = result;
  return result;
}

uint64_t *sub_100024C88()
{
  if (qword_10008A470[0] != -1)
    swift_once(qword_10008A470, sub_100024BFC);
  return &qword_10008BEB8;
}

uint64_t sub_100024CC8()
{
  return sub_100024CE4(qword_10008A470, &qword_10008BEB8);
}

uint64_t sub_100024CE4(_QWORD *a1, _QWORD *a2)
{
  if (*a1 != -1)
    swift_once();
  return swift_retain(*a2);
}

unint64_t sub_100024D1C(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100082450, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

uint64_t sub_100024D64(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v5 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0)
      v5 = a2;
    v6 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v6 = 11;
    v7 = v6 | (v5 << 16);
    v8 = String.index(_:offsetBy:limitedBy:)(15, result, v7, a2, a3);
    if ((v9 & 1) != 0)
      v10 = v7;
    else
      v10 = v8;
    return String.subscript.getter(15, v10, a2, a3);
  }
  return result;
}

uint64_t sub_100024DEC(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;

  if ((a2 & 0x2000000000000000) != 0)
    v7 = HIBYTE(a2) & 0xF;
  else
    v7 = a1 & 0xFFFFFFFFFFFFLL;
  if (a1 == a5 && a2 == a6 && !(a3 >> 16) && v7 == a4 >> 16)
    return 1;
  else
    return _stringCompareInternal(_:_:_:_:expecting:)(a1) & 1;
}

unint64_t sub_100024E58()
{
  unint64_t result;

  result = qword_100085CD0;
  if (!qword_100085CD0)
  {
    result = swift_getWitnessTable(&unk_10006C6A8, &type metadata for NumberingSystem);
    atomic_store(result, (unint64_t *)&qword_100085CD0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for NumberingSystem(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for NumberingSystem(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100024F78 + 4 * byte_10006C655[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100024FAC + 4 * byte_10006C650[v4]))();
}

uint64_t sub_100024FAC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100024FB4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100024FBCLL);
  return result;
}

uint64_t sub_100024FC8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100024FD0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100024FD4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100024FDC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NumberingSystem()
{
  return &type metadata for NumberingSystem;
}

uint64_t type metadata accessor for WidgetUtilities()
{
  return objc_opt_self(_TtC16WorldClockWidget15WidgetUtilities);
}

uint64_t sub_100025018(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v2 = type metadata accessor for CapMaxContentSizeCategory(255);
  v3 = type metadata accessor for ModifiedContent(255, v1, v2);
  sub_10000D36C(&qword_100085DB8, type metadata accessor for CapMaxContentSizeCategory, (uint64_t)&unk_10006D4B0);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v3);
}

unint64_t sub_10002509C()
{
  unint64_t result;

  result = qword_100085E00;
  if (!qword_100085E00)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AttributeScopes.FoundationAttributes.DateFieldAttribute, &type metadata for AttributeScopes.FoundationAttributes.DateFieldAttribute);
    atomic_store(result, (unint64_t *)&qword_100085E00);
  }
  return result;
}

uint64_t sub_1000250E0()
{
  return 8;
}

uint64_t sub_1000250EC(_QWORD *a1)
{
  return swift_release(*a1);
}

uint64_t sub_1000250F4(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *a1;
  *a2 = v2;
  return swift_retain(v2);
}

_QWORD *sub_100025100(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

unint64_t sub_100025110()
{
  unint64_t result;

  result = qword_100085E08;
  if (!qword_100085E08)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AttributeScopes.SwiftUIAttributes.TextScaleAttribute, &type metadata for AttributeScopes.SwiftUIAttributes.TextScaleAttribute);
    atomic_store(result, (unint64_t *)&qword_100085E08);
  }
  return result;
}

uint64_t sub_100025154()
{
  return 8;
}

unint64_t sub_100025160()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100085E10;
  if (!qword_100085E10)
  {
    v1 = sub_100010DE0(&qword_100085DC8);
    result = swift_getWitnessTable(&protocol conformance descriptor for Range<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100085E10);
  }
  return result;
}

uint64_t sub_1000251B8@<X0>(uint64_t a1@<X8>)
{
  return sub_100028E58((void (*)(_QWORD))type metadata accessor for WorldClockWidgetViewSingle, a1);
}

uint64_t type metadata accessor for WorldClockWidgetViewSingle(uint64_t a1)
{
  return sub_10000DEFC(a1, (uint64_t *)&unk_10008BAC0, (uint64_t)&nominal type descriptor for WorldClockWidgetViewSingle);
}

uint64_t sub_1000251D8(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  os_log_type_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  unsigned __int8 v15;

  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
    return a1 & 1;
  v8 = swift_retain(a1);
  v9 = static os_log_type_t.fault.getter(v8);
  v10 = static Log.runtimeIssuesLog.getter();
  if (os_log_type_enabled(v10, v9))
  {
    v11 = swift_slowAlloc(12, -1);
    v12 = swift_slowAlloc(32, -1);
    v14 = v12;
    *(_DWORD *)v11 = 136315138;
    *(_QWORD *)(v11 + 4) = sub_10001DEE4((char *)0x6C6F6F42, (char *)0xE400000000000000, &v14);
    _os_log_impl((void *)&_mh_execute_header, v10, v9, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", (uint8_t *)v11, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath(v7, a1);
  sub_100025728(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v15;
}

uint64_t sub_100025364@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, char *a3@<X2>, char *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v20;
  os_log_type_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;

  v25 = a4;
  v9 = v5;
  v11 = type metadata accessor for EnvironmentValues(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000041D8(a1);
  __chkstk_darwin(v15);
  v17 = (uint64_t *)((char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001DEA0(v9, (uint64_t)v17, a1);
  if (swift_getEnumCaseMultiPayload(v17, v15) == 1)
  {
    v18 = a2(0);
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(a5, v17, v18);
  }
  else
  {
    v20 = *v17;
    v21 = static os_log_type_t.fault.getter();
    v22 = static Log.runtimeIssuesLog.getter();
    if (os_log_type_enabled(v22, v21))
    {
      v23 = swift_slowAlloc(12, -1);
      v24 = swift_slowAlloc(32, -1);
      v26 = v24;
      *(_DWORD *)v23 = 136315138;
      *(_QWORD *)(v23 + 4) = sub_10001DEE4(a3, v25, &v26);
      _os_log_impl((void *)&_mh_execute_header, v22, v21, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", (uint8_t *)v23, 0xCu);
      swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(v14, v20);
    swift_release(v20);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

uint64_t sub_10002556C(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  os_log_type_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = swift_retain(a1);
  if ((a2 & 1) == 0)
  {
    v9 = static os_log_type_t.fault.getter(v8);
    v10 = static Log.runtimeIssuesLog.getter();
    if (os_log_type_enabled(v10, v9))
    {
      v11 = swift_slowAlloc(12, -1);
      v12 = swift_slowAlloc(32, -1);
      v15 = v12;
      *(_DWORD *)v11 = 136315138;
      *(_QWORD *)(v11 + 4) = sub_10001DEE4((char *)0xD00000000000001CLL, (char *)0x800000010006F410, &v15);
      _os_log_impl((void *)&_mh_execute_header, v10, v9, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", (uint8_t *)v11, 0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(v7, a1);
    swift_release(a1);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return v15;
  }
  return a1;
}

uint64_t sub_1000256FC@<X0>(_QWORD *a1@<X8>)
{
  return sub_10004DD90((uint64_t)&unk_10006CB68, &qword_1000850C0, a1);
}

uint64_t sub_100025710()
{
  return sub_100028EC8(type metadata accessor for WorldClockWidgetViewSingle);
}

uint64_t sub_10002571C(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    return swift_retain(result);
  return result;
}

uint64_t sub_100025728(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    return swift_release(result);
  return result;
}

uint64_t sub_100025734()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v0 = type metadata accessor for EnvironmentValues.ShowsWidgetBackgroundKey(0);
  v1 = sub_10000D36C(&qword_1000880E0, (uint64_t (*)(uint64_t))&type metadata accessor for EnvironmentValues.ShowsWidgetBackgroundKey, (uint64_t)&protocol conformance descriptor for EnvironmentValues.ShowsWidgetBackgroundKey);
  EnvironmentValues.subscript.getter(&v3, v0, v0, v1);
  return v3;
}

_QWORD *sub_100025794@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;

  v2 = type metadata accessor for EnvironmentValues.ShowsWidgetBackgroundKey(0);
  v3 = sub_10000D36C(&qword_1000880E0, (uint64_t (*)(uint64_t))&type metadata accessor for EnvironmentValues.ShowsWidgetBackgroundKey, (uint64_t)&protocol conformance descriptor for EnvironmentValues.ShowsWidgetBackgroundKey);
  result = EnvironmentValues.subscript.getter(&v5, v2, v2, v3);
  *a1 = v5;
  return result;
}

uint64_t sub_100025808@<X0>(uint64_t a1@<X8>)
{
  return sub_100028F3C((void (*)(_QWORD))type metadata accessor for WorldClockWidgetViewSingle, a1);
}

uint64_t sub_100025814@<X0>(_QWORD *a1@<X8>)
{
  return sub_10004DD90((uint64_t)&unk_10006CBC0, &qword_100085E28, a1);
}

uint64_t sub_100025828()
{
  return EnvironmentValues.widgetRenderingMode.getter();
}

uint64_t sub_100025848(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002AD70(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(char *))&EnvironmentValues.widgetRenderingMode.setter);
}

uint64_t sub_10002585C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for WorldClockWidgetViewSingle(0) + 32));
  v2 = *v1;
  v3 = *((_BYTE *)v1 + 8);
  v4 = swift_retain(*v1);
  v5 = sub_10002556C(v4, v3);
  swift_release(v2);
  return v5;
}

uint64_t sub_1000258B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = type metadata accessor for AccentedWidgetBackground(0);
  __chkstk_darwin(v3);
  v5 = (uint64_t *)((char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_1000041D8(&qword_100085E30);
  __chkstk_darwin(v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000259FC(v1);
  *v5 = sub_1000267AC();
  v9 = (uint64_t *)((char *)v5 + *(int *)(v3 + 20));
  *v9 = swift_getKeyPath(&unk_10006CBC0);
  v10 = sub_1000041D8(&qword_100085E28);
  swift_storeEnumTagMultiPayload(v9, v10, 0);
  sub_10001DEA0((uint64_t)v8, a1, &qword_100085E30);
  v11 = sub_1000041D8(&qword_100085E38);
  sub_1000106E0((uint64_t)v5, a1 + *(int *)(v11 + 36), type metadata accessor for AccentedWidgetBackground);
  return sub_1000106A4((uint64_t)v8, &qword_100085E30);
}

uint64_t type metadata accessor for AccentedWidgetBackground(uint64_t a1)
{
  return sub_10000DEFC(a1, (uint64_t *)&unk_10008BB80, (uint64_t)&nominal type descriptor for AccentedWidgetBackground);
}

uint64_t sub_1000259FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (**v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = type metadata accessor for WorldClockWidgetViewSingle(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v5 = sub_1000041D8(&qword_1000880D0);
  __chkstk_darwin(v5);
  v7 = (uint64_t (**)(uint64_t))((char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for PlaceholderViewSingle(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(a1 + *(int *)(type metadata accessor for WorldClockEntry(0) + 24)) == 1)
  {
    v11 = a1 + *(int *)(v2 + 24);
    v12 = *(_QWORD *)v11;
    v13 = *(_BYTE *)(v11 + 8);
    sub_10002571C(*(_QWORD *)v11, v13);
    v14 = sub_1000251D8(v12, v13);
    sub_100025728(v12, v13);
    sub_100025364(&qword_100085E28, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, (char *)0xD000000000000013, (char *)0x800000010006F430, (uint64_t)&v10[*(int *)(v8 + 24)]);
    *v10 = 0;
    v10[1] = v14 & 1;
    sub_10000DF30((uint64_t)v10, (uint64_t)v7, type metadata accessor for PlaceholderViewSingle);
    swift_storeEnumTagMultiPayload(v7, v5, 0);
    v15 = sub_1000041D8(&qword_100087490);
    v16 = sub_10000D36C(&qword_100087480, type metadata accessor for PlaceholderViewSingle, (uint64_t)&unk_10006CE80);
    v17 = sub_10001DDB4(&qword_100087488, &qword_100087490, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
    _ConditionalContent<>.init(storage:)(v7, v8, v15, v16, v17);
    return sub_10000D330((uint64_t)v10, type metadata accessor for PlaceholderViewSingle);
  }
  else
  {
    sub_10000DF30(a1, (uint64_t)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for WorldClockWidgetViewSingle);
    v19 = *(unsigned __int8 *)(v3 + 80);
    v20 = (v19 + 16) & ~v19;
    v21 = swift_allocObject(&unk_1000832B8, v20 + v4, v19 | 7);
    sub_1000106E0((uint64_t)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v21 + v20, type metadata accessor for WorldClockWidgetViewSingle);
    *v7 = sub_1000677C0;
    v7[1] = (uint64_t (*)(uint64_t))v21;
    swift_storeEnumTagMultiPayload(v7, v5, 1);
    v22 = sub_1000041D8(&qword_100087490);
    v23 = sub_10000D36C(&qword_100087480, type metadata accessor for PlaceholderViewSingle, (uint64_t)&unk_10006CE80);
    v24 = sub_10001DDB4(&qword_100087488, &qword_100087490, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
    return _ConditionalContent<>.init(storage:)(v7, v8, v22, v23, v24);
  }
}

uint64_t sub_100025CF0@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  _BYTE *v5;
  uint64_t v6;

  *a4 = a1;
  a4[1] = a2;
  v5 = &a4[*(int *)(type metadata accessor for PlaceholderViewSingle(0) + 24)];
  v6 = type metadata accessor for WidgetRenderingMode(0);
  return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v5, a3, v6);
}

uint64_t sub_100025D44@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  unint64_t v66;
  uint64_t v67;
  char v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  double v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  double *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  ValueMetadata *v106;
  _UNKNOWN **v107;

  v103 = a2;
  v3 = type metadata accessor for WorldClockWidgetViewSingle(0);
  __chkstk_darwin(v3);
  v102 = (char *)&v85 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000041D8(&qword_100085AC8);
  __chkstk_darwin(v5);
  v97 = (char *)&v85 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = type metadata accessor for ContentSizeCategory(0);
  v91 = *(_QWORD *)(v92 - 8);
  __chkstk_darwin(v92);
  v90 = (char *)&v85 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = type metadata accessor for WidgetRenderingMode(0);
  v88 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89);
  v87 = (uint64_t)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for WorldClockCity(0);
  __chkstk_darwin(v9);
  v85 = (uint64_t)&v85 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (int *)type metadata accessor for SmallWorldClockView(0);
  __chkstk_darwin(v11);
  v13 = (uint64_t *)((char *)&v85 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v93 = sub_1000041D8(&qword_1000874F0);
  __chkstk_darwin(v93);
  v94 = (char *)&v85 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000041D8(&qword_100087BA0);
  v99 = *(_QWORD *)(v15 - 8);
  v100 = v15;
  __chkstk_darwin(v15);
  v98 = (char *)&v85 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = sub_1000041D8(&qword_1000880D8);
  __chkstk_darwin(v95);
  v96 = (char *)&v85 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1000041D8(&qword_100085E40);
  __chkstk_darwin(v18);
  v20 = (char *)&v85 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for Font.TextStyle(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = __chkstk_darwin(v21);
  v25 = (char *)&v85 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = GeometryProxy.size.getter(v23);
  v104 = v3;
  v27 = *(int *)(v3 + 24);
  v101 = a1;
  v28 = a1 + v27;
  v29 = *(_QWORD *)v28;
  v30 = *(_BYTE *)(v28 + 8);
  sub_10002571C(*(_QWORD *)v28, v30);
  LOBYTE(v3) = sub_1000251D8(v29, v30);
  sub_100025728(v29, v30);
  if ((v3 & 1) != 0)
  {
    v31 = 0.8967;
  }
  else
  {
    if (qword_10008A610 != -1)
      swift_once(&qword_10008A610, sub_100039268);
    v31 = *(double *)&qword_10008BEC0;
  }
  v32 = v26 * v31;
  (*(void (**)(char *, _QWORD, uint64_t))(v22 + 104))(v25, enum case for Font.TextStyle.subheadline(_:), v21);
  v33 = enum case for Font.Design.rounded(_:);
  v34 = type metadata accessor for Font.Design(0);
  v35 = *(_QWORD *)(v34 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 104))(v20, v33, v34);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v20, 0, 1, v34);
  v36 = static Font.system(_:design:weight:)(v25, v20, 0, 1);
  sub_1000106A4((uint64_t)v20, &qword_100085E40);
  v37 = (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v25, v21);
  static Font.Weight.regular.getter(v37);
  v38 = Font.weight(_:)(v36);
  swift_release(v36);
  v39 = v85;
  v40 = v101;
  sub_100004F30(v85);
  v106 = &type metadata for SmallSizeDimentions;
  v107 = &off_1000826A8;
  v41 = swift_allocObject(&unk_100082618, 80, 7);
  *(_QWORD *)&v105 = v41;
  *(double *)(v41 + 16) = v32;
  *(_QWORD *)(v41 + 24) = v38;
  __asm { FMOV            V1.2D, #8.0 }
  *(_OWORD *)(v41 + 32) = xmmword_10006C9E0;
  *(_OWORD *)(v41 + 48) = _Q1;
  *(_OWORD *)(v41 + 64) = xmmword_10006C9F0;
  v47 = *(_QWORD *)v28;
  LOBYTE(v34) = *(_BYTE *)(v28 + 8);
  v86 = v38;
  swift_retain(v38);
  sub_10002571C(v47, v34);
  LOBYTE(v38) = sub_1000251D8(v47, v34);
  sub_100025728(v47, v34);
  v48 = v87;
  sub_100025364(&qword_100085E28, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, (char *)0xD000000000000013, (char *)0x800000010006F430, v87);
  *v13 = swift_getKeyPath(&unk_10006CBF0);
  v49 = sub_1000041D8(&qword_100085E48);
  swift_storeEnumTagMultiPayload(v13, v49, 0);
  sub_1000106E0(v39, (uint64_t)v13 + v11[5], type metadata accessor for WorldClockCity);
  sub_10003928C(&v105, (uint64_t)v13 + v11[6]);
  *((_BYTE *)v13 + v11[7]) = 0;
  *((_BYTE *)v13 + v11[8]) = 0;
  *((_BYTE *)v13 + v11[9]) = 0;
  *((_BYTE *)v13 + v11[10]) = 0;
  v50 = (char *)v13 + v11[11];
  v51 = type metadata accessor for ClockWidgetEnvironmentObject(0);
  v52 = sub_10000D36C((unint64_t *)&qword_100085240, type metadata accessor for ClockWidgetEnvironmentObject, (uint64_t)&unk_10006DF68);
  *(_QWORD *)v50 = Environment.init<A>(_:)(v51, v51, v52);
  v50[8] = v53 & 1;
  *((_BYTE *)v13 + v11[12]) = v38 & 1;
  (*(void (**)(char *, uint64_t, uint64_t))(v88 + 32))((char *)v13 + v11[13], v48, v89);
  v54 = v91;
  v55 = (uint64_t)v90;
  v56 = v92;
  (*(void (**)(char *, _QWORD, uint64_t))(v91 + 104))(v90, enum case for ContentSizeCategory.extraExtraExtraLarge(_:), v92);
  v57 = sub_10000D36C(&qword_100085F00, type metadata accessor for SmallWorldClockView, (uint64_t)&unk_10006CF20);
  v58 = (uint64_t)v94;
  sub_100022098(v55, (uint64_t)v11, v57);
  (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v55, v56);
  sub_10000D330((uint64_t)v13, type metadata accessor for SmallWorldClockView);
  v59 = objc_msgSend((id)objc_opt_self(MTUtilities), "widgetURL");
  if (v59)
  {
    v60 = v59;
    v61 = (uint64_t)v97;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v62 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 56))(v61, 0, 1, v62);
  }
  else
  {
    v63 = type metadata accessor for URL(0);
    v61 = (uint64_t)v97;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56))(v97, 1, 1, v63);
  }
  v64 = (uint64_t)v102;
  v65 = v98;
  v66 = sub_100062E54();
  View.widgetURL(_:)(v61, v93, v66);
  sub_1000106A4(v61, &qword_100085AC8);
  sub_1000106A4(v58, &qword_1000874F0);
  v67 = *(_QWORD *)v28;
  v68 = *(_BYTE *)(v28 + 8);
  sub_10002571C(*(_QWORD *)v28, v68);
  v69 = sub_1000251D8(v67, v68);
  sub_100025728(v67, v68);
  sub_10000DF30(v40, v64, type metadata accessor for WorldClockWidgetViewSingle);
  if ((v69 & 1) == 0)
  {
    v75 = sub_10000D330(v64, type metadata accessor for WorldClockWidgetViewSingle);
    goto LABEL_13;
  }
  v70 = v64 + *(int *)(v104 + 32);
  v71 = *(_QWORD *)v70;
  v72 = *(_BYTE *)(v70 + 8);
  v73 = swift_retain(*(_QWORD *)v70);
  v74 = sub_10002556C(v73, v72);
  swift_release(v71);
  LOBYTE(v71) = sub_100067E80();
  swift_release(v74);
  v75 = sub_10000D330(v64, type metadata accessor for WorldClockWidgetViewSingle);
  if ((v71 & 1) == 0)
  {
LABEL_13:
    v76 = 1.0;
    goto LABEL_14;
  }
  v76 = 1.13;
LABEL_14:
  v77 = static UnitPoint.center.getter(v75);
  v79 = v78;
  swift_release(v86);
  v81 = v99;
  v80 = v100;
  v82 = (uint64_t)v96;
  (*(void (**)(char *, char *, uint64_t))(v99 + 16))(v96, v65, v100);
  v83 = (double *)(v82 + *(int *)(v95 + 36));
  *v83 = v76;
  v83[1] = v76;
  v83[2] = v77;
  *((_QWORD *)v83 + 3) = v79;
  (*(void (**)(char *, uint64_t))(v81 + 8))(v65, v80);
  return sub_10001DE5C(v82, v103, &qword_1000880D8);
}

void *sub_1000265E4()
{
  return &unk_10006CAF8;
}

uint64_t *sub_1000265F0()
{
  if (qword_10008A610 != -1)
    swift_once(&qword_10008A610, sub_100039268);
  return &qword_10008BEC0;
}

double sub_100026634()
{
  return 5.0;
}

double sub_10002663C()
{
  return 1.0;
}

double sub_100026644()
{
  return 8.0;
}

double sub_10002664C()
{
  return 4.0;
}

double sub_100026654()
{
  return 2.0;
}

uint64_t sub_100026660@<X0>(_QWORD *a1@<X8>)
{
  return sub_10004DD90((uint64_t)&unk_10006CBF0, &qword_100085E48, a1);
}

uint64_t sub_100026674@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, char a7@<W6>, char a8@<W7>, uint64_t a9@<X8>, uint64_t a10)
{
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;

  sub_10001DE5C(a1, a9, &qword_100085AD0);
  v18 = (int *)type metadata accessor for SmallWorldClockView(0);
  sub_1000106E0(a2, a9 + v18[5], type metadata accessor for WorldClockCity);
  sub_10003928C(a3, a9 + v18[6]);
  *(_BYTE *)(a9 + v18[7]) = a4;
  *(_BYTE *)(a9 + v18[8]) = a5;
  *(_BYTE *)(a9 + v18[9]) = a6;
  *(_BYTE *)(a9 + v18[10]) = a7;
  v19 = a9 + v18[11];
  v20 = type metadata accessor for ClockWidgetEnvironmentObject(0);
  v21 = sub_10000D36C((unint64_t *)&qword_100085240, type metadata accessor for ClockWidgetEnvironmentObject, (uint64_t)&unk_10006DF68);
  *(_QWORD *)v19 = Environment.init<A>(_:)(v20, v20, v21);
  *(_BYTE *)(v19 + 8) = v22 & 1;
  *(_BYTE *)(a9 + v18[12]) = a8;
  v23 = a9 + v18[13];
  v24 = type metadata accessor for WidgetRenderingMode(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v23, a10, v24);
}

uint64_t sub_1000267AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v1 = v0;
  v2 = type metadata accessor for WorldClockCity(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for WorldClockWidgetViewSingle(0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = v0 + *(int *)(v6 + 32);
  v10 = *(_QWORD *)v9;
  v11 = *(_BYTE *)(v9 + 8);
  v12 = swift_retain(*(_QWORD *)v9);
  v13 = sub_10002556C(v12, v11);
  swift_release(v10);
  LOBYTE(v10) = sub_100067E80();
  swift_release(v13);
  sub_10000DF30(v1, (uint64_t)v8, type metadata accessor for WorldClockWidgetViewSingle);
  if ((v10 & 1) == 0)
  {
    sub_10000D330((uint64_t)v8, type metadata accessor for WorldClockWidgetViewSingle);
    goto LABEL_8;
  }
  v14 = v8[*(int *)(type metadata accessor for WorldClockEntry(0) + 24)];
  sub_10000D330((uint64_t)v8, type metadata accessor for WorldClockWidgetViewSingle);
  if ((v14 & 1) != 0)
  {
LABEL_8:
    if (qword_10008A620 != -1)
      swift_once(&qword_10008A620, sub_100041AD8);
    v17 = qword_10008BED0;
    return swift_retain(v17);
  }
  sub_100004F30((uint64_t)v4);
  v15 = sub_1000071D4();
  v16 = sub_10000D330((uint64_t)v4, type metadata accessor for WorldClockCity);
  if (v15)
  {
    if (qword_10008A668 != -1)
      swift_once(&qword_10008A668, sub_100041F44);
    v17 = qword_10008BF18;
    return swift_retain(v17);
  }
  return static Color.black.getter(v16);
}

uint64_t sub_100026970(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;

  v6 = type metadata accessor for AccentedWidgetBackground(0);
  v7 = __chkstk_darwin(v6);
  v9 = (uint64_t *)((char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v9 = a1;
  v10 = (_QWORD *)((char *)v9 + *(int *)(v7 + 20));
  *v10 = swift_getKeyPath(&unk_10006CBC0);
  v11 = sub_1000041D8(&qword_100085E28);
  swift_storeEnumTagMultiPayload(v10, v11, 0);
  swift_retain(a1);
  View.modifier<A>(_:)(v9, a2, v6, a3);
  return sub_10000D330((uint64_t)v9, type metadata accessor for AccentedWidgetBackground);
}

uint64_t *sub_100026A60()
{
  if (qword_10008A668 != -1)
    swift_once(&qword_10008A668, sub_100041F44);
  return &qword_10008BF18;
}

uint64_t *sub_100026AA0()
{
  if (qword_10008A620 != -1)
    swift_once(&qword_10008A620, sub_100041AD8);
  return &qword_10008BED0;
}

uint64_t sub_100026AE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  int *v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;

  sub_1000106E0(a1, a8, type metadata accessor for WorldClockEntry);
  v15 = (int *)type metadata accessor for WorldClockWidgetViewSingle(0);
  sub_10001DE5C(a2, a8 + v15[5], &qword_100085108);
  v16 = a8 + v15[6];
  *(_QWORD *)v16 = a3;
  *(_BYTE *)(v16 + 8) = a4 & 1;
  result = sub_10001DE5C(a5, a8 + v15[7], &qword_100085B10);
  v18 = a8 + v15[8];
  *(_QWORD *)v18 = a6;
  *(_BYTE *)(v18 + 8) = a7 & 1;
  return result;
}

uint64_t sub_100026BA0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10000DF30(v1, a1, type metadata accessor for WorldClockCity);
}

uint64_t sub_100026BC4(uint64_t a1)
{
  uint64_t v1;

  return sub_100017398(a1, v1, type metadata accessor for WorldClockCity);
}

uint64_t sub_100026BE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v1 = type metadata accessor for AccessibilityChildBehavior(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000041D8(&qword_100085E50);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v8 = static HorizontalAlignment.leading.getter(v6);
  *((_QWORD *)v8 + 1) = 0x4000000000000000;
  v8[16] = 0;
  v9 = sub_1000041D8(&qword_100085E58);
  v10 = sub_100026D18(v0, (uint64_t)&v8[*(int *)(v9 + 44)]);
  static AccessibilityChildBehavior.combine.getter(v10);
  v11 = sub_10001DDB4(&qword_100085E60, &qword_100085E50, (uint64_t)&protocol conformance descriptor for VStack<A>);
  View.accessibilityElement(children:)(v4, v5, v11);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return sub_1000106A4((uint64_t)v8, &qword_100085E50);
}

uint64_t sub_100026D18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t KeyPath;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v46 = a1;
  v52 = a2;
  v50 = type metadata accessor for ClockDateText(0);
  v3 = __chkstk_darwin(v50);
  v51 = (uint64_t)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v6 = (char *)&v45 - v5;
  v7 = sub_1000041D8(&qword_100088068);
  __chkstk_darwin(v7);
  v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000041D8(&qword_100088070);
  __chkstk_darwin(v10);
  v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000041D8(&qword_100088078);
  __chkstk_darwin(v13);
  v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_1000041D8(&qword_100088080);
  __chkstk_darwin(v47);
  v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_1000041D8(&qword_100088088);
  v18 = __chkstk_darwin(v49);
  v20 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v18);
  v48 = (uint64_t)&v45 - v22;
  *(_QWORD *)v9 = static VerticalAlignment.center.getter(v21);
  *((_QWORD *)v9 + 1) = 0x4008000000000000;
  v9[16] = 0;
  v23 = sub_1000041D8(&qword_100088090);
  v24 = sub_10002717C(a1, (uint64_t)&v9[*(int *)(v23 + 44)]);
  v25 = static Font.headline.getter(v24);
  KeyPath = swift_getKeyPath(&unk_10006CC20);
  sub_10001DEA0((uint64_t)v9, (uint64_t)v12, &qword_100088068);
  v27 = (uint64_t *)&v12[*(int *)(v10 + 36)];
  *v27 = KeyPath;
  v27[1] = v25;
  v28 = sub_1000106A4((uint64_t)v9, &qword_100088068);
  v29 = static Alignment.leading.getter(v28);
  sub_10002793C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v15, 0.0, 1, 0.0, 1, v29, v30, &qword_100088070, &qword_100088078);
  v31 = sub_1000106A4((uint64_t)v12, &qword_100088070);
  v32 = static Color.white.getter(v31);
  v33 = swift_getKeyPath(&unk_10006CC50);
  sub_10001DEA0((uint64_t)v15, (uint64_t)v17, &qword_100088078);
  v34 = (uint64_t *)&v17[*(int *)(v47 + 36)];
  *v34 = v33;
  v34[1] = v32;
  sub_1000106A4((uint64_t)v15, &qword_100088078);
  v35 = swift_getKeyPath(&unk_10006CD10);
  sub_10001DEA0((uint64_t)v17, (uint64_t)v20, &qword_100088080);
  v36 = &v20[*(int *)(v49 + 36)];
  *(_QWORD *)v36 = v35;
  *((_QWORD *)v36 + 1) = 1;
  v36[16] = 0;
  sub_1000106A4((uint64_t)v17, &qword_100088080);
  v37 = v48;
  sub_10001DE5C((uint64_t)v20, v48, &qword_100088088);
  sub_10000DF30(v46, (uint64_t)v6, type metadata accessor for WorldClockCity);
  v38 = type metadata accessor for WorldClockCity(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v6, 0, 1, v38);
  v39 = &v6[*(int *)(v50 + 20)];
  v40 = type metadata accessor for AlarmEntry(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v39, 1, 1, v40);
  sub_10001DEA0(v37, (uint64_t)v20, &qword_100088088);
  v41 = v51;
  sub_10000DF30((uint64_t)v6, v51, type metadata accessor for ClockDateText);
  v42 = v52;
  sub_10001DEA0((uint64_t)v20, v52, &qword_100088088);
  v43 = sub_1000041D8(&qword_100088098);
  sub_10000DF30(v41, v42 + *(int *)(v43 + 48), type metadata accessor for ClockDateText);
  sub_10000D330((uint64_t)v6, type metadata accessor for ClockDateText);
  sub_1000106A4(v37, &qword_100088088);
  sub_10000D330(v41, type metadata accessor for ClockDateText);
  return sub_1000106A4((uint64_t)v20, &qword_100088088);
}

uint64_t sub_10002717C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[2];

  v4 = sub_1000041D8(&qword_1000880A0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)v23 - v8;
  v10 = (_QWORD *)(a1 + *(int *)(type metadata accessor for WorldClockCity(0) + 24));
  v11 = v10[1];
  v23[0] = *v10;
  v23[1] = v11;
  v12 = sub_10000D9FC();
  swift_bridgeObjectRetain(v11);
  v13 = Text.init<A>(_:)(v23, &type metadata for String, v12);
  v15 = v14;
  v17 = v16;
  v19 = v18 & 1;
  *(_QWORD *)v9 = static VerticalAlignment.firstTextBaseline.getter();
  *((_QWORD *)v9 + 1) = 0;
  v9[16] = 0;
  v20 = sub_1000041D8(&qword_1000880A8);
  sub_100027314((uint64_t)&v9[*(int *)(v20 + 44)]);
  sub_10001DEA0((uint64_t)v9, (uint64_t)v7, &qword_1000880A0);
  *(_QWORD *)a2 = v13;
  *(_QWORD *)(a2 + 8) = v15;
  *(_BYTE *)(a2 + 16) = v19;
  *(_QWORD *)(a2 + 24) = v17;
  v21 = sub_1000041D8(&qword_1000880B0);
  sub_10001DEA0((uint64_t)v7, a2 + *(int *)(v21 + 48), &qword_1000880A0);
  sub_1000511D8(v13, v15, v19);
  swift_bridgeObjectRetain(v17);
  sub_1000106A4((uint64_t)v9, &qword_1000880A0);
  sub_1000106A4((uint64_t)v7, &qword_1000880A0);
  sub_100010E24(v13, v15, v19);
  return swift_bridgeObjectRelease(v17);
}

uint64_t sub_100027314@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  char v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  char *v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;

  v64 = a1;
  v62 = type metadata accessor for Text.Scale(0);
  v1 = *(_QWORD *)(v62 - 8);
  __chkstk_darwin(v62);
  v61 = (char *)&v58 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_1000041D8(&qword_1000880B8);
  v4 = __chkstk_darwin(v3);
  v66 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v7 = (char *)&v58 - v6;
  sub_100008208(1);
  v68 = v8;
  v69 = v9;
  v10 = sub_10000D9FC();
  v11 = Text.init<A>(_:)(&v68, &type metadata for String, v10);
  v13 = v12;
  v15 = v14;
  v17 = v16 & 1;
  v18 = sub_10000422C();
  sub_100008208(v18 & 1);
  v20 = v19;
  v68 = v21;
  v69 = v19;
  v22 = Text.accessibilityLabel<A>(_:)(&v68, v11, v13, v17, v15, &type metadata for String, v10);
  v65 = v23;
  v63 = v24;
  v26 = v25;
  sub_100010E24(v11, v13, v17);
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v15);
  v27 = sub_100008698();
  v67 = v22;
  if (v27)
  {
    v59 = v1;
    v28 = sub_1000084A0();
    v29 = v64;
    v30 = v61;
    if ((v28 & 1) != 0)
      v31 = LocalizedStringKey.init(stringLiteral:)(1397639501, 0xE400000000000000);
    else
      v31 = LocalizedStringKey.init(stringLiteral:)(5460552, 0xE300000000000000);
    v35 = Text.init(_:tableName:bundle:comment:)(v31);
    v37 = v36;
    v39 = v38;
    v41 = v40 & 1;
    static Text.Scale.secondary.getter();
    v42 = v7;
    v43 = v30;
    v44 = Text.textScale(_:isEnabled:)(v30, 1, v35, v37, v41, v39);
    v46 = v45;
    v58 = v47;
    v60 = v26;
    v49 = v48 & 1;
    sub_100010E24(v35, v37, v41);
    swift_bridgeObjectRelease(v39);
    v50 = v43;
    v7 = v42;
    (*(void (**)(char *, uint64_t))(v59 + 8))(v50, v62);
    v68 = v44;
    v69 = v46;
    v70 = v49;
    v51 = v58;
    v71 = v58;
    View.accessibilityHidden(_:)(1, &type metadata for Text, &protocol witness table for Text);
    v52 = v49;
    v26 = v60;
    sub_100010E24(v44, v46, v52);
    swift_bridgeObjectRelease(v51);
    v53 = sub_1000041D8(&qword_1000880C0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v42, 0, 1, v53);
    v34 = v65;
    v33 = (uint64_t)v66;
  }
  else
  {
    v32 = sub_1000041D8(&qword_1000880C0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v7, 1, 1, v32);
    v34 = v65;
    v33 = (uint64_t)v66;
    v29 = v64;
  }
  v54 = v63 & 1;
  sub_10001DEA0((uint64_t)v7, v33, &qword_1000880B8);
  v55 = v67;
  *(_QWORD *)v29 = v67;
  *(_QWORD *)(v29 + 8) = v34;
  *(_BYTE *)(v29 + 16) = v54;
  *(_QWORD *)(v29 + 24) = v26;
  v56 = sub_1000041D8(&qword_1000880C8);
  sub_10001DEA0(v33, v29 + *(int *)(v56 + 48), &qword_1000880B8);
  sub_1000511D8(v55, v34, v54);
  swift_bridgeObjectRetain(v26);
  sub_1000106A4((uint64_t)v7, &qword_1000880B8);
  sub_1000106A4(v33, &qword_1000880B8);
  sub_100010E24(v55, v34, v54);
  return swift_bridgeObjectRelease(v26);
}

double sub_1000276D8@<D0>(char a1@<W0>, int64x2_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  int64x2_t v7;
  const char *v8;

  if ((a1 & 1) != 0)
  {
    v3 = LocalizedStringKey.init(stringLiteral:)(1397639501, 0xE400000000000000);
    v7 = vdupq_n_s64(0x9EuLL);
    v8 = "Time-Zone Widget: Abbreviation for 'minute' shown behind (trailing) a number for how many minutes the other tim"
         "e zone is apart from the current one, '+45 MIN'";
  }
  else
  {
    v3 = LocalizedStringKey.init(stringLiteral:)(5460552, 0xE300000000000000);
    v7 = vdupq_n_s64(0x9BuLL);
    v8 = "Time-Zone Widget: Abbreviation for 'hours' shown behind (trailing) a number for how many hours the other time z"
         "one is apart from the current one, '+10 HRS'";
  }
  v7.i64[0] = (uint64_t)v8;
  a2->i64[0] = v3;
  a2->i64[1] = v4;
  a2[1].i8[0] = v5 & 1;
  a2[1].i64[1] = v6;
  a2[2] = v7;
  a2[3].i8[0] = 2;
  return *(double *)v7.i64;
}

uint64_t sub_10002775C@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19)
{
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  double v34;
  double v36;
  double v37;
  double v38;
  uint64_t v40;
  void *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  unsigned int v46;
  unsigned int v47;
  double v48;
  double v49;
  double v50;
  double v51;
  _OWORD v52[7];

  v20 = a19;
  v21 = a18;
  v22 = a17;
  v24 = a14;
  v23 = a15;
  v25 = a12;
  v26 = a10;
  v27 = a2 & 1;
  v28 = a1;
  if ((_DWORD)v27)
    v28 = -INFINITY;
  v29 = a4 & 1;
  v30 = a3;
  if ((_DWORD)v29)
    v30 = v28;
  v31 = a6 & 1;
  v32 = a8 & 1;
  v33 = a13 & 1;
  v34 = a5;
  if ((a6 & 1) != 0)
    v34 = v30;
  if (v28 > v30 || v30 > v34)
    goto LABEL_22;
  v36 = a7;
  if ((a8 & 1) != 0)
    v36 = -INFINITY;
  v37 = a10;
  if ((a11 & 1) != 0)
    v37 = v36;
  v38 = a12;
  if ((a13 & 1) != 0)
    v38 = v37;
  if (v36 > v37 || v37 > v38)
  {
LABEL_22:
    v50 = a7;
    v51 = a5;
    v48 = a1;
    v49 = a3;
    v47 = v27;
    v46 = v29;
    v40 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v41 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v41, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v33 = a13 & 1;
    v29 = v46;
    v24 = a14;
    v23 = a15;
    v27 = v47;
    v26 = a10;
    v25 = a12;
    a1 = v48;
    a3 = v49;
    a7 = v50;
    a5 = v51;
    v21 = a18;
    v20 = a19;
    v22 = a17;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v52, *(_QWORD *)&a1, v27, *(_QWORD *)&a3, v29, *(_QWORD *)&a5, v31, *(_QWORD *)&a7, v32, *(_QWORD *)&v26, a11 & 1, *(_QWORD *)&v25, v33, v24, v23);
  *(_QWORD *)a9 = a16;
  *(_QWORD *)(a9 + 8) = v22;
  *(_BYTE *)(a9 + 16) = v21 & 1;
  *(_QWORD *)(a9 + 24) = v20;
  v42 = v52[5];
  *(_OWORD *)(a9 + 96) = v52[4];
  *(_OWORD *)(a9 + 112) = v42;
  *(_OWORD *)(a9 + 128) = v52[6];
  v43 = v52[1];
  *(_OWORD *)(a9 + 32) = v52[0];
  *(_OWORD *)(a9 + 48) = v43;
  v44 = v52[3];
  *(_OWORD *)(a9 + 64) = v52[2];
  *(_OWORD *)(a9 + 80) = v44;
  sub_1000511D8(a16, v22, v21 & 1);
  return swift_bridgeObjectRetain(v20);
}

__n128 sub_10002793C@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t *a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v33;
  double v34;
  double v35;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __n128 result;
  unsigned int v45;
  unsigned int v46;
  double v47;
  double v48;
  double v49;
  double v50;
  _OWORD v51[7];

  v18 = v17;
  v19 = a9;
  v20 = a17;
  v22 = a14;
  v21 = a15;
  v23 = a12;
  v24 = a10;
  v25 = a2 & 1;
  v26 = a1;
  if ((_DWORD)v25)
    v26 = -INFINITY;
  v27 = a4 & 1;
  v28 = a3;
  if ((_DWORD)v27)
    v28 = v26;
  v29 = a6 & 1;
  v30 = a8 & 1;
  v31 = a5;
  if ((a6 & 1) != 0)
    v31 = v28;
  if (v26 > v28 || v28 > v31)
    goto LABEL_22;
  v33 = a7;
  if ((a8 & 1) != 0)
    v33 = -INFINITY;
  v34 = a10;
  if ((a11 & 1) != 0)
    v34 = v33;
  v35 = a12;
  if ((a13 & 1) != 0)
    v35 = v34;
  if (v33 > v34 || v34 > v35)
  {
LABEL_22:
    v49 = a5;
    v50 = a7;
    v47 = a3;
    v48 = a1;
    v46 = v25;
    v45 = v27;
    v38 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v39 = (void *)static Log.runtimeIssuesLog.getter();
    v40 = v38;
    v19 = a9;
    os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v39, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v27 = v45;
    v22 = a14;
    v21 = a15;
    v25 = v46;
    v24 = a10;
    v23 = a12;
    a3 = v47;
    a1 = v48;
    a5 = v49;
    a7 = v50;
    v20 = a17;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v51, *(_QWORD *)&a1, v25, *(_QWORD *)&a3, v27, *(_QWORD *)&a5, v29, *(_QWORD *)&a7, v30, *(_QWORD *)&v24, a11 & 1, *(_QWORD *)&v23, a13 & 1, v22, v21);
  sub_10001DEA0(v18, v19, a16);
  v41 = v19 + *(int *)(sub_1000041D8(v20) + 36);
  v42 = v51[5];
  *(_OWORD *)(v41 + 64) = v51[4];
  *(_OWORD *)(v41 + 80) = v42;
  *(_OWORD *)(v41 + 96) = v51[6];
  v43 = v51[1];
  *(_OWORD *)v41 = v51[0];
  *(_OWORD *)(v41 + 16) = v43;
  result = (__n128)v51[3];
  *(_OWORD *)(v41 + 32) = v51[2];
  *(__n128 *)(v41 + 48) = result;
  return result;
}

uint64_t sub_100027B08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;

  sub_10001DE5C(a1, a3, &qword_100085070);
  v5 = type metadata accessor for ClockDateText(0);
  return sub_10001DE5C(a2, a3 + *(int *)(v5 + 20), &qword_100085E68);
}

uint64_t sub_100027B58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000106E0(a1, a2, type metadata accessor for WorldClockCity);
}

uint64_t sub_100027B78@<X0>(uint64_t a1@<X8>)
{
  return sub_100027BD4(type metadata accessor for WorldClockCity, a1);
}

uint64_t sub_100027B84@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10001DEA0(v1, a1, &qword_100085070);
}

uint64_t sub_100027BA8(uint64_t a1)
{
  uint64_t v1;

  return sub_100041F70(a1, v1, &qword_100085070);
}

uint64_t sub_100027BC8@<X0>(uint64_t a1@<X8>)
{
  return sub_100027BD4(type metadata accessor for AlarmEntry, a1);
}

uint64_t sub_100027BD4@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = a1(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a2, 1, 1, v3);
}

uint64_t sub_100027C14@<X0>(uint64_t a1@<X8>)
{
  return sub_100039D54(type metadata accessor for ClockDateText, (uint64_t)&qword_100085E68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10001DEA0, a1);
}

uint64_t sub_100027C30(uint64_t a1)
{
  return sub_10002FB2C(a1, type metadata accessor for ClockDateText, (uint64_t)&qword_100085E68, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100041F70);
}

uint64_t (*sub_100027C4C())()
{
  type metadata accessor for ClockDateText(0);
  return nullsub_1;
}

uint64_t sub_100027C74@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t KeyPath;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  double v30;
  uint64_t v31;
  char *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v37 = a1;
  v1 = type metadata accessor for Color.RGBColorSpace(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000041D8(&qword_100085E70);
  __chkstk_darwin(v5);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000041D8(&qword_100085E78);
  __chkstk_darwin(v8);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000041D8(&qword_100085E80);
  __chkstk_darwin(v11);
  v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_1000041D8(&qword_100085E88);
  __chkstk_darwin(v35);
  v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_1000041D8(&qword_100085E90);
  v16 = __chkstk_darwin(v36);
  v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v7 = static VerticalAlignment.center.getter(v16);
  *((_QWORD *)v7 + 1) = 0;
  v7[16] = 0;
  v19 = sub_1000041D8(&qword_100085E98);
  sub_100027FEC(v34, (uint64_t)&v7[*(int *)(v19 + 44)]);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for Color.RGBColorSpace.sRGBLinear(_:), v1);
  v20 = Color.init(_:white:opacity:)(v4, 0.0, 0.33);
  sub_10001DEA0((uint64_t)v7, (uint64_t)v10, &qword_100085E70);
  v21 = (uint64_t *)&v10[*(int *)(v8 + 36)];
  *v21 = v20;
  v21[1] = 0x3FF0000000000000;
  v21[2] = 0;
  v21[3] = 0;
  v22 = sub_1000106A4((uint64_t)v7, &qword_100085E70);
  v23 = static Font.title.getter(v22);
  KeyPath = swift_getKeyPath(&unk_10006CC20);
  sub_10001DEA0((uint64_t)v10, (uint64_t)v13, &qword_100085E78);
  v25 = (uint64_t *)&v13[*(int *)(v11 + 36)];
  *v25 = KeyPath;
  v25[1] = v23;
  v26 = sub_1000106A4((uint64_t)v10, &qword_100085E78);
  v27 = static Color.white.getter(v26);
  v28 = swift_getKeyPath(&unk_10006CC50);
  sub_10001DEA0((uint64_t)v13, (uint64_t)v15, &qword_100085E80);
  v29 = (uint64_t *)&v15[*(int *)(v35 + 36)];
  *v29 = v28;
  v29[1] = v27;
  sub_1000106A4((uint64_t)v13, &qword_100085E80);
  if (qword_10008A6D8 != -1)
    swift_once(&qword_10008A6D8, sub_1000427F0);
  if (byte_10008A6E0)
    v30 = 0.8;
  else
    v30 = 1.0;
  v31 = swift_getKeyPath(&unk_10006CC80);
  sub_10001DEA0((uint64_t)v15, (uint64_t)v18, &qword_100085E88);
  v32 = &v18[*(int *)(v36 + 36)];
  *(_QWORD *)v32 = v31;
  *((double *)v32 + 1) = v30;
  sub_1000106A4((uint64_t)v15, &qword_100085E88);
  return sub_10001DE5C((uint64_t)v18, v37, &qword_100085E90);
}

uint64_t sub_100027FEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t KeyPath;
  char *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  unint64_t v63;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  char v74;
  char v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD v101[4];
  unsigned __int8 v102;
  unsigned __int8 v103;

  v98 = a2;
  v3 = type metadata accessor for AttributedString(0);
  __chkstk_darwin(v3);
  v81 = (char *)&v79 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000041D8(&qword_100084810);
  __chkstk_darwin(v5);
  v91 = (uint64_t)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = type metadata accessor for Date(0);
  v83 = *(_QWORD *)(v84 - 8);
  __chkstk_darwin(v84);
  v82 = (char *)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = sub_1000041D8(&qword_100088008);
  __chkstk_darwin(v97);
  v96 = (uint64_t)&v79 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = sub_1000041D8(&qword_100088010);
  __chkstk_darwin(v94);
  v93 = (uint64_t *)((char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v99 = sub_1000041D8(&qword_100088018);
  __chkstk_darwin(v99);
  v95 = (char *)&v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = sub_1000041D8(&qword_1000878B8);
  __chkstk_darwin(v86);
  v90 = (uint64_t *)((char *)&v79 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = type metadata accessor for Locale(0);
  v88 = *(_QWORD *)(v12 - 8);
  v89 = v12;
  __chkstk_darwin(v12);
  v87 = (char *)&v79 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = sub_1000041D8(&qword_100088020);
  v14 = __chkstk_darwin(v100);
  v16 = (char *)&v79 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v92 = (uint64_t)&v79 - v17;
  v18 = sub_1000041D8(&qword_100085E68);
  __chkstk_darwin(v18);
  v20 = (char *)&v79 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = type metadata accessor for AlarmEntry(0);
  v21 = *(_QWORD *)(v85 - 8);
  __chkstk_darwin(v85);
  v23 = (char *)&v79 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_1000041D8(&qword_100085070);
  __chkstk_darwin(v24);
  v26 = (char *)&v79 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for WorldClockCity(0);
  v28 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v30 = (char *)&v79 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001DEA0(a1, (uint64_t)v26, &qword_100085070);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27) == 1)
  {
    v31 = v91;
    v32 = v96;
    v33 = v97;
    sub_1000106A4((uint64_t)v26, &qword_100085070);
    v34 = type metadata accessor for ClockDateText(0);
    sub_10001DEA0(a1 + *(int *)(v34 + 20), (uint64_t)v20, &qword_100085E68);
    v35 = v85;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v20, 1, v85) == 1)
    {
      sub_1000106A4((uint64_t)v20, &qword_100085E68);
      v36 = v32;
LABEL_7:
      v59 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000011, 0x800000010006F3F0);
      *(_QWORD *)v36 = Text.init(_:tableName:bundle:comment:)(v59);
      *(_QWORD *)(v36 + 8) = v60;
      *(_BYTE *)(v36 + 16) = v61 & 1;
      *(_QWORD *)(v36 + 24) = v62;
      swift_storeEnumTagMultiPayload(v36, v33, 1);
      v63 = sub_1000673F0();
      return _ConditionalContent<>.init(storage:)(v36, v99, &type metadata for Text, v63, &protocol witness table for Text);
    }
    v55 = (uint64_t)v20;
    v56 = (uint64_t)v23;
    sub_1000106E0(v55, (uint64_t)v23, type metadata accessor for AlarmEntry);
    sub_10001DEA0((uint64_t)&v23[*(int *)(v35 + 20)], v31, &qword_100084810);
    v57 = v83;
    v58 = v84;
    v36 = v32;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v83 + 48))(v31, 1, v84) == 1)
    {
      sub_10000D330(v56, type metadata accessor for AlarmEntry);
      sub_1000106A4(v31, &qword_100084810);
      goto LABEL_7;
    }
    v65 = v82;
    (*(void (**)(char *, uint64_t, uint64_t))(v57 + 32))(v82, v31, v58);
    v66 = type metadata accessor for WidgetUtilities();
    v67 = v81;
    (*(void (**)(char *))(v66 + 136))(v65);
    v68 = Text.init(_:)(v67);
    v70 = v69;
    v72 = v71;
    v73 = v93;
    *v93 = v68;
    v73[1] = v69;
    v75 = v74 & 1;
    *((_BYTE *)v73 + 16) = v74 & 1;
    v73[3] = v71;
    swift_storeEnumTagMultiPayload(v73, v94, 1);
    sub_1000511D8(v68, v70, v75);
    v76 = sub_10006745C();
    swift_bridgeObjectRetain(v72);
    v94 = v56;
    v77 = (uint64_t)v95;
    _ConditionalContent<>.init(storage:)(v73, v100, &type metadata for Text, v76, &protocol witness table for Text);
    sub_10001DEA0(v77, v36, &qword_100088018);
    swift_storeEnumTagMultiPayload(v36, v33, 0);
    v78 = sub_1000673F0();
    _ConditionalContent<>.init(storage:)(v36, v99, &type metadata for Text, v78, &protocol witness table for Text);
    sub_1000106A4(v77, &qword_100088018);
    sub_100010E24(v68, v70, v75);
    swift_bridgeObjectRelease(v72);
    (*(void (**)(char *, uint64_t))(v83 + 8))(v82, v84);
    v54 = type metadata accessor for AlarmEntry;
    v53 = v94;
  }
  else
  {
    v80 = v30;
    sub_1000106E0((uint64_t)v26, (uint64_t)v30, type metadata accessor for WorldClockCity);
    sub_100028888((uint64_t)v30, (uint64_t)v101);
    v37 = v101[0];
    v91 = v101[1];
    v38 = v101[2];
    v39 = v101[3];
    LODWORD(v85) = v103;
    v40 = v102;
    KeyPath = swift_getKeyPath(&unk_10006DEE8);
    v42 = v87;
    static Locale.autoupdatingCurrent.getter();
    v44 = v89;
    v43 = v90;
    v45 = v88;
    (*(void (**)(char *, char *, uint64_t))(v88 + 16))((char *)v90 + *(int *)(v86 + 28), v42, v89);
    *v43 = KeyPath;
    sub_10001DEA0((uint64_t)v43, (uint64_t)&v16[*(int *)(v100 + 36)], &qword_1000878B8);
    v46 = v91;
    *(_QWORD *)v16 = v37;
    *((_QWORD *)v16 + 1) = v46;
    *((_QWORD *)v16 + 2) = v38;
    *((_QWORD *)v16 + 3) = v39;
    v16[32] = v40;
    LOBYTE(KeyPath) = v85;
    v16[33] = v85;
    sub_1000675E8(v37, v46, v38, v39, v40, KeyPath);
    sub_1000106A4((uint64_t)v43, &qword_1000878B8);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v42, v44);
    sub_100067628(v37, v91, v38, v39, v40, KeyPath);
    v47 = v92;
    sub_10001DE5C((uint64_t)v16, v92, &qword_100088020);
    v48 = v93;
    sub_10001DEA0(v47, (uint64_t)v93, &qword_100088020);
    swift_storeEnumTagMultiPayload(v48, v94, 0);
    v49 = sub_10006745C();
    v50 = (uint64_t)v95;
    _ConditionalContent<>.init(storage:)(v48, v100, &type metadata for Text, v49, &protocol witness table for Text);
    v51 = v96;
    sub_10001DEA0(v50, v96, &qword_100088018);
    swift_storeEnumTagMultiPayload(v51, v97, 0);
    v52 = sub_1000673F0();
    _ConditionalContent<>.init(storage:)(v51, v99, &type metadata for Text, v52, &protocol witness table for Text);
    sub_1000106A4(v50, &qword_100088018);
    sub_1000106A4(v47, &qword_100088020);
    v53 = (uint64_t)v80;
    v54 = type metadata accessor for WorldClockCity;
  }
  return sub_10000D330(v53, v54);
}

double sub_100028888@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  char v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  Swift::String v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  Swift::String v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  Swift::String v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char v62;
  Swift::String v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  Swift::String v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  double result;
  __int128 v77;
  unsigned __int8 v78;
  char v79;
  uint64_t v80;
  _QWORD v81[4];
  __int128 v82;
  __int128 v83;
  __int16 v84;
  __int128 v85;
  __int128 v86;
  unsigned __int8 v87;
  char v88;

  v81[0] = a2;
  v3 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  __chkstk_darwin(v3);
  v5 = (char *)v81 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000041D8(&qword_100084848);
  __chkstk_darwin(v6);
  v8 = (char *)v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Locale(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)v81 - v14;
  v16 = sub_100023A5C();
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v17(v15, v16, v9);
  v18 = sub_100023A80();
  v19 = *(void (**)(char *, uint64_t))(v10 + 8);
  v19(v15, v9);
  if ((v18 & 1) != 0)
  {
    sub_100008130((uint64_t)v8);
    v20 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v8, 0, 1, v20);
    v21 = Text.init(dateFormatTemplate:timeZone:)(7171434, 0xE300000000000000, v8);
    v23 = v21;
    v24 = v22;
    v26 = v25;
    *(_QWORD *)&v82 = v21;
    *((_QWORD *)&v82 + 1) = v22;
    v28 = v27 & 1;
    *(_QWORD *)&v83 = v27 & 1;
    *((_QWORD *)&v83 + 1) = v25;
    LOBYTE(v84) = 0;
LABEL_6:
    sub_1000511D8(v21, v22, v28);
    swift_bridgeObjectRetain(v26);
    _ConditionalContent<>.init(storage:)(&v82, &type metadata for Text, &type metadata for Text, &protocol witness table for Text, &protocol witness table for Text);
    v82 = v85;
    v83 = v86;
    v84 = v87;
    v74 = sub_1000041D8(&qword_100088060);
    v75 = sub_100064B98(&qword_100088058, &qword_100088060);
    _ConditionalContent<>.init(storage:)(&v82, v74, &type metadata for Text, v75, &protocol witness table for Text);
    sub_100010E24(v23, v24, v28);
    swift_bridgeObjectRelease(v26);
    goto LABEL_7;
  }
  v17(v13, v16, v9);
  v29 = sub_100024B20();
  v19(v13, v9);
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(1, 2);
  v30._countAndFlagsBits = 0;
  v30._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v30);
  v31 = type metadata accessor for WidgetUtilities();
  v32 = (uint64_t *)(a1 + *(int *)(type metadata accessor for WorldClockCity(0) + 32));
  v33 = *v32;
  v34 = v32[1];
  if ((v29 & 1) != 0)
  {
    v56 = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 128))(v33, v34);
    v58 = v57;
    v60 = v59;
    v62 = v61 & 1;
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)();
    sub_100010E24(v56, v58, v62);
    swift_bridgeObjectRelease(v60);
    v63._countAndFlagsBits = 32;
    v63._object = (void *)0xE100000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v63);
    v64 = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 120))(v33, v34);
    v66 = v65;
    v68 = v67;
    LOBYTE(v56) = v69 & 1;
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)();
    sub_100010E24(v64, v66, v56);
    swift_bridgeObjectRelease(v68);
    v70._countAndFlagsBits = 0;
    v70._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v70);
    v71 = LocalizedStringKey.init(stringInterpolation:)(v5);
    v21 = Text.init(_:tableName:bundle:comment:)(v71);
    v23 = v21;
    v24 = v22;
    v26 = v72;
    *(_QWORD *)&v82 = v21;
    *((_QWORD *)&v82 + 1) = v22;
    v28 = v73 & 1;
    *(_QWORD *)&v83 = v73 & 1;
    *((_QWORD *)&v83 + 1) = v72;
    LOBYTE(v84) = 1;
    goto LABEL_6;
  }
  v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 120))(v33, v34);
  v37 = v36;
  v39 = v38;
  v41 = v40 & 1;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)();
  sub_100010E24(v35, v37, v41);
  swift_bridgeObjectRelease(v39);
  v42._countAndFlagsBits = 32;
  v42._object = (void *)0xE100000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v42);
  v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 128))(v33, v34);
  v45 = v44;
  v47 = v46;
  LOBYTE(v35) = v48 & 1;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)();
  sub_100010E24(v43, v45, v35);
  swift_bridgeObjectRelease(v47);
  v49._countAndFlagsBits = 0;
  v49._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v49);
  v50 = LocalizedStringKey.init(stringInterpolation:)(v5);
  *(_QWORD *)&v82 = Text.init(_:tableName:bundle:comment:)(v50);
  *((_QWORD *)&v82 + 1) = v51;
  *(_QWORD *)&v83 = v52 & 1;
  *((_QWORD *)&v83 + 1) = v53;
  v84 = 256;
  v54 = sub_1000041D8(&qword_100088060);
  v55 = sub_100064B98(&qword_100088058, &qword_100088060);
  _ConditionalContent<>.init(storage:)(&v82, v54, &type metadata for Text, v55, &protocol witness table for Text);
LABEL_7:
  result = *(double *)&v85;
  v77 = v86;
  v78 = v87;
  v79 = v88;
  v80 = v81[0];
  *(_OWORD *)v81[0] = v85;
  *(_OWORD *)(v80 + 16) = v77;
  *(_BYTE *)(v80 + 32) = v78;
  *(_BYTE *)(v80 + 33) = v79;
  return result;
}

uint64_t sub_100028DA4()
{
  return EnvironmentValues.locale.getter();
}

uint64_t sub_100028DC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002AD70(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for Locale, (uint64_t (*)(char *))&EnvironmentValues.locale.setter);
}

uint64_t sub_100028DD8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = type metadata accessor for WorldClockCity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
  v3 = a1 + *(int *)(type metadata accessor for ClockDateText(0) + 20);
  v4 = type metadata accessor for AlarmEntry(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
}

uint64_t sub_100028E4C@<X0>(uint64_t a1@<X8>)
{
  return sub_100028E58((void (*)(_QWORD))type metadata accessor for WorldClockWidgetViewMulti, a1);
}

uint64_t sub_100028E58@<X0>(void (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  a1(0);
  return sub_100025364(&qword_1000850C0, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetFamily, (char *)0x6146746567646957, (char *)0xEC000000796C696DLL, a2);
}

uint64_t sub_100028EBC()
{
  return sub_100028EC8(type metadata accessor for WorldClockWidgetViewMulti);
}

uint64_t sub_100028EC8(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;

  v2 = v1 + *(int *)(a1(0) + 24);
  v3 = *(_QWORD *)v2;
  v4 = *(_BYTE *)(v2 + 8);
  sub_10002571C(*(_QWORD *)v2, v4);
  v5 = sub_1000251D8(v3, v4);
  sub_100025728(v3, v4);
  return v5 & 1;
}

uint64_t sub_100028F30@<X0>(uint64_t a1@<X8>)
{
  return sub_100028F3C((void (*)(_QWORD))type metadata accessor for WorldClockWidgetViewMulti, a1);
}

uint64_t sub_100028F3C@<X0>(void (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  a1(0);
  return sub_100025364(&qword_100085E28, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, (char *)0xD000000000000013, (char *)0x800000010006F430, a2);
}

uint64_t sub_100028F9C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(char *, uint64_t);
  uint64_t v45;
  int v46;
  int v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char v53;
  char *v54;
  id v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char v69;
  int *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t OpaqueTypeConformance2;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  char *v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;

  v138 = a1;
  v134 = type metadata accessor for MediumWorldClockView(0);
  __chkstk_darwin(v134);
  v120 = (uint64_t)&v114 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = sub_1000041D8(&qword_100085EA0);
  v118 = *(_QWORD *)(v129 - 8);
  v3 = __chkstk_darwin(v129);
  v119 = (char *)&v114 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v121 = (char *)&v114 - v5;
  v130 = sub_1000041D8(&qword_100085EA8);
  __chkstk_darwin(v130);
  v128 = (char *)&v114 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000041D8(&qword_100085AC8);
  v8 = __chkstk_darwin(v7);
  v117 = (char *)&v114 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v122 = (char *)&v114 - v10;
  v136 = type metadata accessor for SmallMultiWorldClockView(0);
  __chkstk_darwin(v136);
  v132 = (char *)&v114 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = sub_1000041D8(&qword_100085EB0);
  v124 = *(_QWORD *)(v127 - 8);
  v12 = __chkstk_darwin(v127);
  v126 = (char *)&v114 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v123 = (char *)&v114 - v14;
  v137 = type metadata accessor for WidgetFamily(0);
  v135 = *(_QWORD *)(v137 - 8);
  v15 = __chkstk_darwin(v137);
  v125 = (uint64_t)&v114 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v18 = (char *)&v114 - v17;
  v140 = sub_1000041D8(&qword_100085EB8);
  v19 = __chkstk_darwin(v140);
  v131 = (char *)&v114 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v133 = (uint64_t)&v114 - v21;
  v139 = sub_1000041D8(&qword_100085EC0);
  __chkstk_darwin(v139);
  v23 = (char *)&v114 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for WidgetRenderingMode(0);
  v25 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v27 = (char *)&v114 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for PlaceholderViewMulti(0);
  __chkstk_darwin(v28);
  v30 = (uint64_t *)((char *)&v114 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  v31 = type metadata accessor for WorldClockEntry(0);
  v32 = v1;
  v33 = *(unsigned __int8 *)(v1 + *(int *)(v31 + 24));
  v34 = type metadata accessor for WorldClockWidgetViewMulti(0);
  if (v33 == 1)
  {
    v35 = v32 + *(int *)(v34 + 24);
    v36 = *(_QWORD *)v35;
    v37 = *(_BYTE *)(v35 + 8);
    sub_10002571C(*(_QWORD *)v35, v37);
    LODWORD(v137) = sub_1000251D8(v36, v37);
    sub_100025728(v36, v37);
    sub_100025364(&qword_100085E28, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, (char *)0xD000000000000013, (char *)0x800000010006F430, (uint64_t)v27);
    *v30 = swift_getKeyPath(&unk_10006CB68);
    v38 = sub_1000041D8(&qword_1000850C0);
    swift_storeEnumTagMultiPayload(v30, v38, 0);
    *((_BYTE *)v30 + *(int *)(v28 + 20)) = v137 & 1;
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))((char *)v30 + *(int *)(v28 + 24), v27, v24);
    sub_10000DF30((uint64_t)v30, (uint64_t)v23, type metadata accessor for PlaceholderViewMulti);
    swift_storeEnumTagMultiPayload(v23, v139, 0);
    v39 = sub_10000D36C(&qword_100085ED0, type metadata accessor for PlaceholderViewMulti, (uint64_t)&unk_10006CED0);
    v40 = sub_100067500(&qword_100085ED8, &qword_100085EB8, (void (*)(void))sub_10004F68C, (uint64_t)&protocol conformance descriptor for <A> A?);
    _ConditionalContent<>.init(storage:)(v23, v28, v140, v39, v40);
    return sub_10000D330((uint64_t)v30, type metadata accessor for PlaceholderViewMulti);
  }
  v116 = v28;
  v115 = v23;
  v42 = v34;
  sub_100025364(&qword_1000850C0, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetFamily, (char *)0x6146746567646957, (char *)0xEC000000796C696DLL, (uint64_t)v18);
  v43 = v135;
  v44 = *(uint64_t (**)(char *, uint64_t))(v135 + 88);
  v45 = v137;
  v46 = v44(v18, v137);
  v47 = enum case for WidgetFamily.systemSmall(_:);
  v48 = *(void (**)(char *, uint64_t))(v43 + 8);
  v48(v18, v45);
  if (v46 == v47)
  {
    v49 = *(_QWORD *)(v32 + *(int *)(v31 + 20));
    v50 = v32 + *(int *)(v42 + 24);
    v51 = *(_QWORD *)v50;
    v52 = *(_BYTE *)(v50 + 8);
    swift_bridgeObjectRetain(v49);
    sub_10002571C(v51, v52);
    v53 = sub_1000251D8(v51, v52);
    sub_100025728(v51, v52);
    v54 = v132;
    sub_100025364(&qword_100085E28, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, (char *)0xD000000000000013, (char *)0x800000010006F430, (uint64_t)&v132[*(int *)(v136 + 28)]);
    *(_QWORD *)v54 = v49;
    v54[8] = 0;
    v54[9] = v53 & 1;
    v55 = objc_msgSend((id)objc_opt_self(MTUtilities), "widgetURL");
    if (v55)
    {
      v56 = v55;
      v57 = (uint64_t)v122;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      v58 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v57, 0, 1, v58);
    }
    else
    {
      v82 = type metadata accessor for URL(0);
      v57 = (uint64_t)v122;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 56))(v122, 1, 1, v82);
    }
    v83 = v127;
    v84 = v128;
    v86 = v123;
    v85 = v124;
    v87 = sub_10000D36C(&qword_100085EE8, type metadata accessor for SmallMultiWorldClockView, (uint64_t)&unk_10006CF70);
    v88 = v126;
    v89 = v136;
    v90 = (uint64_t)v132;
    View.widgetURL(_:)(v57, v136, v87);
    sub_1000106A4(v57, &qword_100085AC8);
    sub_10000D330(v90, type metadata accessor for SmallMultiWorldClockView);
    (*(void (**)(char *, char *, uint64_t))(v85 + 32))(v86, v88, v83);
    (*(void (**)(char *, char *, uint64_t))(v85 + 16))(v84, v86, v83);
    swift_storeEnumTagMultiPayload(v84, v130, 0);
    v141 = v89;
    v142 = v87;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v141, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
    v92 = sub_10000D36C(&qword_100085EF0, type metadata accessor for MediumWorldClockView, (uint64_t)&unk_10006CFC0);
    v141 = v134;
    v142 = v92;
    v93 = swift_getOpaqueTypeConformance2(&v141, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
    v94 = (uint64_t)v131;
    _ConditionalContent<>.init(storage:)(v84, v83, v129, OpaqueTypeConformance2, v93);
    (*(void (**)(char *, uint64_t))(v85 + 8))(v86, v83);
    v95 = sub_1000041D8(&qword_100085EC8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v95 - 8) + 56))(v94, 0, 1, v95);
    v80 = v133;
    sub_10001DE5C(v94, v133, &qword_100085EB8);
    v81 = v140;
  }
  else
  {
    v59 = v125;
    sub_100025364(&qword_1000850C0, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetFamily, (char *)0x6146746567646957, (char *)0xEC000000796C696DLL, v125);
    v60 = v137;
    v61 = v44((char *)v59, v137);
    v62 = enum case for WidgetFamily.systemMedium(_:);
    v48((char *)v59, v60);
    if (v61 == v62)
    {
      v63 = v32;
      v64 = v32;
      v65 = v120;
      sub_10000DF30(v63, v120, type metadata accessor for WorldClockEntry);
      v66 = v64 + *(int *)(v42 + 24);
      v67 = *(_QWORD *)v66;
      v68 = *(_BYTE *)(v66 + 8);
      sub_10002571C(*(_QWORD *)v66, v68);
      v69 = sub_1000251D8(v67, v68);
      sub_100025728(v67, v68);
      v70 = (int *)v134;
      sub_100025364(&qword_100085E28, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, (char *)0xD000000000000013, (char *)0x800000010006F430, v65 + *(int *)(v134 + 32));
      *(_BYTE *)(v65 + v70[5]) = 0;
      v71 = v70[6];
      v72 = sub_1000041D8(&qword_100085EF8);
      v73 = swift_allocObject(v72, 64, 7);
      *(_OWORD *)(v73 + 16) = xmmword_10006B080;
      *(_QWORD *)(v73 + 32) = static Color.red.getter();
      *(_QWORD *)(v73 + 40) = static Color.green.getter();
      *(_QWORD *)(v73 + 48) = static Color.blue.getter();
      v74 = static Color.gray.getter();
      *(_QWORD *)(v73 + 56) = v74;
      v141 = v73;
      specialized Array._endMutation()(v74);
      *(_QWORD *)(v65 + v71) = v141;
      *(_BYTE *)(v65 + v70[7]) = v69 & 1;
      v75 = objc_msgSend((id)objc_opt_self(MTUtilities), "widgetURL");
      if (v75)
      {
        v76 = v75;
        v77 = (uint64_t)v117;
        static URL._unconditionallyBridgeFromObjectiveC(_:)();

        v78 = type metadata accessor for URL(0);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 56))(v77, 0, 1, v78);
      }
      else
      {
        v97 = type metadata accessor for URL(0);
        v77 = (uint64_t)v117;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v97 - 8) + 56))(v117, 1, 1, v97);
      }
      v96 = (uint64_t)v115;
      v98 = v129;
      v99 = v118;
      v100 = sub_10000D36C(&qword_100085EF0, type metadata accessor for MediumWorldClockView, (uint64_t)&unk_10006CFC0);
      v101 = v119;
      v102 = v134;
      View.widgetURL(_:)(v77, v134, v100);
      sub_1000106A4(v77, &qword_100085AC8);
      sub_10000D330(v65, type metadata accessor for MediumWorldClockView);
      v103 = v121;
      (*(void (**)(char *, char *, uint64_t))(v99 + 32))(v121, v101, v98);
      v104 = v128;
      (*(void (**)(char *, char *, uint64_t))(v99 + 16))(v128, v103, v98);
      swift_storeEnumTagMultiPayload(v104, v130, 1);
      v105 = sub_10000D36C(&qword_100085EE8, type metadata accessor for SmallMultiWorldClockView, (uint64_t)&unk_10006CF70);
      v141 = v136;
      v142 = v105;
      v106 = swift_getOpaqueTypeConformance2(&v141, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
      v141 = v102;
      v142 = v100;
      v107 = swift_getOpaqueTypeConformance2(&v141, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
      v108 = (uint64_t)v131;
      _ConditionalContent<>.init(storage:)(v104, v127, v98, v106, v107);
      (*(void (**)(char *, uint64_t))(v99 + 8))(v103, v98);
      v109 = sub_1000041D8(&qword_100085EC8);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v109 - 8) + 56))(v108, 0, 1, v109);
      v80 = v133;
      sub_10001DE5C(v108, v133, &qword_100085EB8);
      v81 = v140;
      goto LABEL_15;
    }
    v79 = sub_1000041D8(&qword_100085EC8);
    v80 = v133;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 56))(v133, 1, 1, v79);
    v81 = v140;
  }
  v96 = (uint64_t)v115;
LABEL_15:
  v110 = v116;
  v111 = v139;
  sub_10001DEA0(v80, v96, &qword_100085EB8);
  swift_storeEnumTagMultiPayload(v96, v111, 1);
  v112 = sub_10000D36C(&qword_100085ED0, type metadata accessor for PlaceholderViewMulti, (uint64_t)&unk_10006CED0);
  v113 = sub_100067500(&qword_100085ED8, &qword_100085EB8, (void (*)(void))sub_10004F68C, (uint64_t)&protocol conformance descriptor for <A> A?);
  _ConditionalContent<>.init(storage:)(v96, v110, v81, v112, v113);
  return sub_1000106A4(v80, &qword_100085EB8);
}

uint64_t sub_100029C34@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_10001DE5C(a1, a4, &qword_100085108);
  v7 = type metadata accessor for PlaceholderViewMulti(0);
  *(_BYTE *)(a4 + *(int *)(v7 + 20)) = a2;
  v8 = a4 + *(int *)(v7 + 24);
  v9 = type metadata accessor for WidgetRenderingMode(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8, a3, v9);
}

uint64_t sub_100029CA4@<X0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a5 = a1;
  *(_BYTE *)(a5 + 8) = a2;
  *(_BYTE *)(a5 + 9) = a3;
  v6 = a5 + *(int *)(type metadata accessor for SmallMultiWorldClockView(0) + 28);
  v7 = type metadata accessor for WidgetRenderingMode(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v6, a4, v7);
}

uint64_t sub_100029CFC@<X0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_1000106E0(a1, a5, type metadata accessor for WorldClockEntry);
  v9 = (int *)type metadata accessor for MediumWorldClockView(0);
  *(_BYTE *)(a5 + v9[5]) = a2;
  v10 = v9[6];
  v11 = sub_1000041D8(&qword_100085EF8);
  v12 = swift_allocObject(v11, 64, 7);
  *(_OWORD *)(v12 + 16) = xmmword_10006B080;
  *(_QWORD *)(v12 + 32) = static Color.red.getter();
  *(_QWORD *)(v12 + 40) = static Color.green.getter();
  *(_QWORD *)(v12 + 48) = static Color.blue.getter();
  v13 = static Color.gray.getter();
  *(_QWORD *)(v12 + 56) = v13;
  specialized Array._endMutation()(v13);
  *(_QWORD *)(a5 + v10) = v12;
  *(_BYTE *)(a5 + v9[7]) = a3;
  v14 = a5 + v9[8];
  v15 = type metadata accessor for WidgetRenderingMode(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v14, a4, v15);
}

uint64_t sub_100029DEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int *v11;
  uint64_t v12;

  sub_1000106E0(a1, a6, type metadata accessor for WorldClockEntry);
  v11 = (int *)type metadata accessor for WorldClockWidgetViewMulti(0);
  sub_10001DE5C(a2, a6 + v11[5], &qword_100085108);
  v12 = a6 + v11[6];
  *(_QWORD *)v12 = a3;
  *(_BYTE *)(v12 + 8) = a4 & 1;
  return sub_10001DE5C(a5, a6 + v11[7], &qword_100085B10);
}

uint64_t sub_100029E8C()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t sub_100029E94(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t sub_100029E9C()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t sub_100029EA4(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = result;
  return result;
}

uint64_t (*sub_100029EAC())()
{
  return nullsub_1;
}

uint64_t sub_100029EBC@<X0>(uint64_t a1@<X8>)
{
  return sub_10002A448(type metadata accessor for PlaceholderViewSingle, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, a1);
}

uint64_t sub_100029ED0(uint64_t a1)
{
  return sub_10002A4AC(a1, type metadata accessor for PlaceholderViewSingle);
}

uint64_t (*sub_100029EDC())()
{
  type metadata accessor for PlaceholderViewSingle(0);
  return nullsub_1;
}

uint64_t sub_100029F04@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v30;
  _BYTE *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  ValueMetadata *v55;
  _UNKNOWN **v56;

  v53 = a1;
  v1 = type metadata accessor for ContentSizeCategory(0);
  v51 = *(_QWORD *)(v1 - 8);
  v52 = v1;
  __chkstk_darwin(v1);
  v50 = (char *)&v45 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for WidgetRenderingMode(0);
  v47 = *(_QWORD *)(v3 - 8);
  v48 = v3;
  __chkstk_darwin(v3);
  v46 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000041D8(&qword_100085E40);
  __chkstk_darwin(v5);
  v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Font.TextStyle(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for WorldClockCity(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (int *)type metadata accessor for SmallWorldClockView(0);
  __chkstk_darwin(v15);
  v17 = (uint64_t *)((char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000086D4((uint64_t)v14);
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for Font.TextStyle.subheadline(_:), v8);
  v18 = enum case for Font.Design.rounded(_:);
  v19 = type metadata accessor for Font.Design(0);
  v20 = *(_QWORD *)(v19 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 104))(v7, v18, v19);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v7, 0, 1, v19);
  v21 = static Font.system(_:design:weight:)(v11, v7, 0, 1);
  sub_1000106A4((uint64_t)v7, &qword_100085E40);
  v22 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  static Font.Weight.regular.getter(v22);
  v23 = Font.weight(_:)(v21);
  swift_release(v21);
  v55 = &type metadata for SmallSizeDimentions;
  v56 = &off_1000826A8;
  v24 = swift_allocObject(&unk_100082618, 80, 7);
  *(_QWORD *)&v54 = v24;
  *(_QWORD *)(v24 + 16) = 0x4061000000000000;
  *(_QWORD *)(v24 + 24) = v23;
  __asm { FMOV            V1.2D, #8.0 }
  *(_OWORD *)(v24 + 32) = xmmword_10006C9E0;
  *(_OWORD *)(v24 + 48) = _Q1;
  *(_OWORD *)(v24 + 64) = xmmword_10006C9F0;
  LOBYTE(v23) = *v49;
  LOBYTE(v9) = v49[1];
  v30 = v49;
  v31 = &v30[*(int *)(type metadata accessor for PlaceholderViewSingle(0) + 24)];
  v33 = v46;
  v32 = v47;
  v34 = v48;
  (*(void (**)(char *, _BYTE *, uint64_t))(v47 + 16))(v46, v31, v48);
  *v17 = swift_getKeyPath(&unk_10006CBF0);
  v35 = sub_1000041D8(&qword_100085E48);
  swift_storeEnumTagMultiPayload(v17, v35, 0);
  sub_1000106E0((uint64_t)v14, (uint64_t)v17 + v15[5], type metadata accessor for WorldClockCity);
  sub_10003928C(&v54, (uint64_t)v17 + v15[6]);
  *((_BYTE *)v17 + v15[7]) = 1;
  *((_BYTE *)v17 + v15[8]) = 0;
  *((_BYTE *)v17 + v15[9]) = v23;
  *((_BYTE *)v17 + v15[10]) = 0;
  v36 = (char *)v17 + v15[11];
  v37 = type metadata accessor for ClockWidgetEnvironmentObject(0);
  v38 = sub_10000D36C((unint64_t *)&qword_100085240, type metadata accessor for ClockWidgetEnvironmentObject, (uint64_t)&unk_10006DF68);
  *(_QWORD *)v36 = Environment.init<A>(_:)(v37, v37, v38);
  v36[8] = v39 & 1;
  *((_BYTE *)v17 + v15[12]) = v9;
  (*(void (**)(char *, char *, uint64_t))(v32 + 32))((char *)v17 + v15[13], v33, v34);
  v41 = (uint64_t)v50;
  v40 = v51;
  v42 = v52;
  (*(void (**)(char *, _QWORD, uint64_t))(v51 + 104))(v50, enum case for ContentSizeCategory.extraExtraExtraLarge(_:), v52);
  v43 = sub_10000D36C(&qword_100085F00, type metadata accessor for SmallWorldClockView, (uint64_t)&unk_10006CF20);
  sub_100022098(v41, (uint64_t)v15, v43);
  (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v41, v42);
  return sub_10000D330((uint64_t)v17, type metadata accessor for SmallWorldClockView);
}

double sub_10002A340@<D0>(_OWORD *a1@<X8>)
{
  __int128 v2;
  double result;
  __int128 v4;
  _OWORD v5[2];
  __int128 v6;
  __int128 v7;

  sub_10004F9D8((uint64_t)v5);
  v2 = v5[1];
  *a1 = v5[0];
  a1[1] = v2;
  result = *(double *)&v6;
  v4 = v7;
  a1[2] = v6;
  a1[3] = v4;
  return result;
}

uint64_t sub_10002A380@<X0>(uint64_t a1@<X8>)
{
  return sub_100025364(&qword_1000850C0, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetFamily, (char *)0x6146746567646957, (char *)0xEC000000796C696DLL, a1);
}

uint64_t sub_10002A3C0()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for PlaceholderViewMulti(0) + 20));
}

uint64_t sub_10002A3E0(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for PlaceholderViewMulti(0);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_10002A40C())()
{
  type metadata accessor for PlaceholderViewMulti(0);
  return nullsub_1;
}

uint64_t sub_10002A434@<X0>(uint64_t a1@<X8>)
{
  return sub_10002A448(type metadata accessor for PlaceholderViewMulti, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, a1);
}

uint64_t sub_10002A448@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v6 = v3 + *(int *)(a1(0) + 24);
  v7 = a2(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a3, v6, v7);
}

uint64_t sub_10002A4A0(uint64_t a1)
{
  return sub_10002A4AC(a1, type metadata accessor for PlaceholderViewMulti);
}

uint64_t sub_10002A4AC(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2(0) + 24);
  v5 = type metadata accessor for WidgetRenderingMode(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*sub_10002A4F4())()
{
  type metadata accessor for PlaceholderViewMulti(0);
  return nullsub_1;
}

uint64_t sub_10002A51C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t (*v18)(_QWORD);
  uint64_t (*v19)(char *, uint64_t);
  int v20;
  int v21;
  uint64_t (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v67 = a1;
  v2 = type metadata accessor for Date(0);
  __chkstk_darwin(v2);
  v61 = (char *)&v60 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = type metadata accessor for MediumWorldClockView(0);
  __chkstk_darwin(v66);
  v62 = (uint64_t)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_1000041D8(&qword_100085F08);
  __chkstk_darwin(v63);
  v6 = (char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000041D8(&qword_100085F10);
  __chkstk_darwin(v7);
  v65 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_1000041D8(&qword_100085F18);
  __chkstk_darwin(v64);
  v10 = (_QWORD *)((char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = type metadata accessor for WidgetFamily(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v60 - v16;
  sub_100025364(&qword_1000850C0, v18, (char *)0x6146746567646957, (char *)0xEC000000796C696DLL, (uint64_t)&v60 - v16);
  v19 = *(uint64_t (**)(char *, uint64_t))(v12 + 88);
  v20 = v19(v17, v11);
  v21 = enum case for WidgetFamily.systemSmall(_:);
  v22 = *(uint64_t (**)(char *, uint64_t))(v12 + 8);
  v23 = v22(v17, v11);
  if (v20 == v21)
  {
    *v10 = static Alignment.center.getter(v23);
    v10[1] = v24;
    v25 = sub_1000041D8(&qword_100085F30);
    sub_10002AAF0(v1, (uint64_t)v10 + *(int *)(v25 + 44));
    sub_10001DEA0((uint64_t)v10, (uint64_t)v6, &qword_100085F18);
    swift_storeEnumTagMultiPayload(v6, v63, 0);
    v26 = sub_10001DDB4(&qword_100085F28, &qword_100085F18, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    v27 = sub_10000D36C(&qword_100085EF0, type metadata accessor for MediumWorldClockView, (uint64_t)&unk_10006CFC0);
    v28 = (uint64_t)v65;
    _ConditionalContent<>.init(storage:)(v6, v64, v66, v26, v27);
    sub_1000106A4((uint64_t)v10, &qword_100085F18);
    v29 = sub_1000041D8(&qword_100085F20);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v28, 0, 1, v29);
    return sub_10001DE5C(v28, v67, &qword_100085F10);
  }
  else
  {
    v31 = (uint64_t)v6;
    v32 = (uint64_t)v65;
    v33 = (int *)v66;
    v34 = v67;
    sub_100025364(&qword_1000850C0, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetFamily, (char *)0x6146746567646957, (char *)0xEC000000796C696DLL, (uint64_t)v15);
    v35 = v19(v15, v11);
    v36 = enum case for WidgetFamily.systemMedium(_:);
    v22(v15, v11);
    if (v35 == v36)
    {
      v37 = sub_1000041D8(&qword_100084838);
      v38 = *(_QWORD *)(type metadata accessor for WorldClockCity(0) - 8);
      v39 = *(_QWORD *)(v38 + 72);
      v40 = *(unsigned __int8 *)(v38 + 80);
      v41 = (v40 + 32) & ~v40;
      v42 = swift_allocObject(v37, v41 + 4 * v39, v40 | 7);
      v60 = xmmword_10006B080;
      *(_OWORD *)(v42 + 16) = xmmword_10006B080;
      v43 = v42 + v41;
      sub_1000086D4(v43);
      sub_1000086D4(v43 + v39);
      sub_1000086D4(v43 + 2 * v39);
      v44 = sub_1000086D4(v43 + 3 * v39);
      v45 = (uint64_t)v61;
      Date.init()(v44);
      v46 = sub_10000422C();
      v47 = v62;
      sub_100004234(v45, v42, v46 & 1, v62);
      v48 = type metadata accessor for PlaceholderViewMulti(0);
      LOBYTE(v43) = *(_BYTE *)(v1 + *(int *)(v48 + 20));
      v49 = v1 + *(int *)(v48 + 24);
      v50 = v47 + v33[8];
      v51 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v50, v49, v51);
      *(_BYTE *)(v47 + v33[5]) = 1;
      v52 = v33[6];
      v53 = sub_1000041D8(&qword_100085EF8);
      v54 = swift_allocObject(v53, 64, 7);
      *(_OWORD *)(v54 + 16) = v60;
      *(_QWORD *)(v54 + 32) = static Color.red.getter();
      *(_QWORD *)(v54 + 40) = static Color.green.getter();
      *(_QWORD *)(v54 + 48) = static Color.blue.getter();
      v55 = static Color.gray.getter();
      *(_QWORD *)(v54 + 56) = v55;
      v68 = v54;
      specialized Array._endMutation()(v55);
      *(_QWORD *)(v47 + v52) = v68;
      *(_BYTE *)(v47 + v33[7]) = v43;
      sub_10000DF30(v47, v31, type metadata accessor for MediumWorldClockView);
      swift_storeEnumTagMultiPayload(v31, v63, 1);
      v56 = sub_10001DDB4(&qword_100085F28, &qword_100085F18, (uint64_t)&protocol conformance descriptor for ZStack<A>);
      v57 = sub_10000D36C(&qword_100085EF0, type metadata accessor for MediumWorldClockView, (uint64_t)&unk_10006CFC0);
      _ConditionalContent<>.init(storage:)(v31, v64, v33, v56, v57);
      sub_10000D330(v47, type metadata accessor for MediumWorldClockView);
      v58 = sub_1000041D8(&qword_100085F20);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v32, 0, 1, v58);
      return sub_10001DE5C(v32, v34, &qword_100085F10);
    }
    else
    {
      v59 = sub_1000041D8(&qword_100085F20);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 56))(v34, 1, 1, v59);
    }
  }
}

uint64_t sub_10002AAF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v26[12];
  int v27;

  v4 = type metadata accessor for SmallMultiWorldClockView(0);
  v5 = __chkstk_darwin(v4);
  v7 = &v26[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  v9 = &v26[-v8];
  if (qword_10008A620 != -1)
    swift_once(&qword_10008A620, sub_100041AD8);
  v10 = qword_10008BED0;
  v11 = swift_retain(qword_10008BED0);
  v27 = static Edge.Set.all.getter(v11);
  v12 = sub_1000041D8(&qword_100084838);
  v13 = *(_QWORD *)(type metadata accessor for WorldClockCity(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = *(unsigned __int8 *)(v13 + 80);
  v16 = (v15 + 32) & ~v15;
  v17 = swift_allocObject(v12, v16 + 4 * v14, v15 | 7);
  *(_OWORD *)(v17 + 16) = xmmword_10006B080;
  v18 = v17 + v16;
  sub_1000086D4(v18);
  sub_1000086D4(v18 + v14);
  sub_1000086D4(v18 + 2 * v14);
  sub_1000086D4(v18 + 3 * v14);
  v19 = type metadata accessor for PlaceholderViewMulti(0);
  v20 = *(_BYTE *)(a1 + *(int *)(v19 + 20));
  v21 = a1 + *(int *)(v19 + 24);
  v22 = &v9[*(int *)(v4 + 28)];
  v23 = type metadata accessor for WidgetRenderingMode(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v22, v21, v23);
  *(_QWORD *)v9 = v17;
  v9[8] = 1;
  v9[9] = v20;
  sub_10000DF30((uint64_t)v9, (uint64_t)v7, type metadata accessor for SmallMultiWorldClockView);
  *(_QWORD *)a2 = v10;
  *(_BYTE *)(a2 + 8) = v27;
  v24 = sub_1000041D8(&qword_100088000);
  sub_10000DF30((uint64_t)v7, a2 + *(int *)(v24 + 48), type metadata accessor for SmallMultiWorldClockView);
  swift_retain(v10);
  sub_10000D330((uint64_t)v9, type metadata accessor for SmallMultiWorldClockView);
  sub_10000D330((uint64_t)v7, type metadata accessor for SmallMultiWorldClockView);
  return swift_release(v10);
}

uint64_t sub_10002AD00@<X0>(uint64_t a1@<X8>)
{
  return sub_100025364(&qword_100085E48, (uint64_t (*)(_QWORD))&type metadata accessor for ContentSizeCategory, (char *)0xD000000000000013, (char *)0x800000010006F3D0, a1);
}

uint64_t sub_10002AD3C()
{
  return EnvironmentValues.sizeCategory.getter();
}

uint64_t sub_10002AD5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002AD70(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for ContentSizeCategory, (uint64_t (*)(char *))&EnvironmentValues.sizeCategory.setter);
}

uint64_t sub_10002AD70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t (*a6)(char *))
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v8 = a5(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v13 - v9;
  (*(void (**)(char *, uint64_t))(v11 + 16))((char *)&v13 - v9, a1);
  return a6(v10);
}

uint64_t sub_10002ADEC@<X0>(uint64_t a1@<X8>)
{
  return sub_100039D54(type metadata accessor for SmallWorldClockView, (uint64_t)type metadata accessor for WorldClockCity, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10000DF30, a1);
}

uint64_t sub_10002AE08@<X0>(uint64_t a1@<X8>)
{
  return sub_10002FBA8(type metadata accessor for SmallWorldClockView, a1);
}

uint64_t sub_10002AE14()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for SmallWorldClockView(0) + 28));
}

uint64_t sub_10002AE34(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for SmallWorldClockView(0);
  *(_BYTE *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*sub_10002AE60())()
{
  type metadata accessor for SmallWorldClockView(0);
  return nullsub_1;
}

uint64_t sub_10002AE88()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for SmallWorldClockView(0) + 32));
}

uint64_t sub_10002AEA8(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for SmallWorldClockView(0);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*sub_10002AED4())()
{
  type metadata accessor for SmallWorldClockView(0);
  return nullsub_1;
}

uint64_t sub_10002AEFC()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for SmallWorldClockView(0) + 36));
}

uint64_t sub_10002AF1C(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for SmallWorldClockView(0);
  *(_BYTE *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*sub_10002AF48())()
{
  type metadata accessor for SmallWorldClockView(0);
  return nullsub_1;
}

uint64_t sub_10002AF70()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for SmallWorldClockView(0) + 40));
}

uint64_t sub_10002AF90(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for SmallWorldClockView(0);
  *(_BYTE *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*sub_10002AFBC())()
{
  type metadata accessor for SmallWorldClockView(0);
  return nullsub_1;
}

uint64_t sub_10002AFE4()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for SmallWorldClockView(0) + 48));
}

uint64_t sub_10002B004@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SmallWorldClockView(0) + 52);
  v4 = type metadata accessor for WidgetRenderingMode(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_10002B04C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  __int128 v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int *v38;
  uint64_t OpaqueTypeConformance2;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t KeyPath;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  int v55;
  unsigned __int8 v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  __n128 v63;
  int v64;
  double v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  int v77;
  int v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  __n128 v82;
  int v83;
  double v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD v111[2];
  _OWORD v112[3];

  v2 = v1;
  v110 = a1;
  v100 = type metadata accessor for SmallWorldClockView(0);
  v3 = __chkstk_darwin(v100);
  v109 = (uint64_t)&v94 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v105 = (uint64_t)&v94 - v5;
  v102 = type metadata accessor for WidgetRenderingMode(0);
  v101 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102);
  v95 = (char *)&v94 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000041D8(&qword_100085F38);
  __chkstk_darwin(v7);
  v9 = (char *)&v94 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = type metadata accessor for AccessibilityChildBehavior(0);
  v97 = *(_QWORD *)(v98 - 8);
  __chkstk_darwin(v98);
  v11 = (char *)&v94 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000041D8(&qword_100085F40);
  __chkstk_darwin(v12);
  v14 = (char *)&v94 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000041D8(&qword_100085F48);
  __chkstk_darwin(v15);
  v17 = (char *)&v94 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1000041D8(&qword_100085F50);
  v96 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v20 = (char *)&v94 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_1000041D8(&qword_100085F58);
  __chkstk_darwin(v21);
  v23 = (char *)&v94 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = sub_1000041D8(&qword_100085F60);
  __chkstk_darwin(v99);
  v103 = (char *)&v94 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = sub_1000041D8(&qword_100085F68);
  __chkstk_darwin(v104);
  v108 = (char *)&v94 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = sub_1000041D8(&qword_100085F70);
  v26 = __chkstk_darwin(v106);
  v107 = (uint64_t)&v94 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v14 = static Alignment.center.getter(v26);
  *((_QWORD *)v14 + 1) = v28;
  v29 = sub_1000041D8(&qword_100085F78);
  v30 = sub_10002B800(v2, &v14[*(int *)(v29 + 44)]);
  v31 = static Alignment.center.getter(v30);
  _FrameLayout.init(width:height:alignment:)(v112, 0, 1, 0, 1, v31, v32);
  sub_10001DEA0((uint64_t)v14, (uint64_t)v17, &qword_100085F40);
  v33 = &v17[*(int *)(v15 + 36)];
  v34 = v112[1];
  *(_OWORD *)v33 = v112[0];
  *((_OWORD *)v33 + 1) = v34;
  *((_OWORD *)v33 + 2) = v112[2];
  v35 = sub_1000106A4((uint64_t)v14, &qword_100085F40);
  static AccessibilityChildBehavior.combine.getter(v35);
  v36 = sub_10004FBC8();
  View.accessibilityElement(children:)(v11, v15, v36);
  (*(void (**)(char *, uint64_t))(v97 + 8))(v11, v98);
  sub_1000106A4((uint64_t)v17, &qword_100085F48);
  v37 = *(unsigned __int8 *)(v2 + *(int *)(v100 + 32));
  v111[0] = v15;
  v111[1] = v36;
  v38 = (int *)v100;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v111, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  View.accessibilityHidden(_:)(v37, v18, OpaqueTypeConformance2);
  v40 = v18;
  v41 = v2;
  v42 = (*(uint64_t (**)(char *, uint64_t))(v96 + 8))(v20, v40);
  v43 = v2 + v38[13];
  v44 = v95;
  static WidgetRenderingMode.fullColor.getter(v42);
  LOBYTE(v43) = static WidgetRenderingMode.== infix(_:_:)(v43, v44);
  v45 = (*(uint64_t (**)(char *, uint64_t))(v101 + 8))(v44, v102);
  if ((v43 & 1) != 0)
    static SymbolRenderingMode.multicolor.getter(v45);
  else
    static SymbolRenderingMode.monochrome.getter(v45);
  v46 = type metadata accessor for SymbolRenderingMode(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v9, 0, 1, v46);
  KeyPath = swift_getKeyPath(&unk_10006CCB0);
  v48 = (uint64_t)v103;
  v49 = (uint64_t *)&v103[*(int *)(v99 + 36)];
  v50 = sub_1000041D8(&qword_100085F90);
  sub_10001DEA0((uint64_t)v9, (uint64_t)v49 + *(int *)(v50 + 28), &qword_100085F38);
  *v49 = KeyPath;
  sub_10001DEA0((uint64_t)v23, v48, &qword_100085F58);
  sub_1000106A4((uint64_t)v9, &qword_100085F38);
  v51 = sub_1000106A4((uint64_t)v23, &qword_100085F58);
  v52 = static Edge.Set.top.getter(v51);
  v53 = static Edge.Set.leading.getter();
  v54 = Edge.Set.init(rawValue:)(0);
  v55 = Edge.Set.init(rawValue:)(v54);
  v56 = Edge.Set.init(rawValue:)(v55 & v52);
  v57 = (uint64_t)v108;
  if (v56 != v52)
    v54 = Edge.Set.init(rawValue:)(v54 | v52);
  v58 = Edge.Set.init(rawValue:)(v54);
  if (Edge.Set.init(rawValue:)(v58 & v53) != v53)
    LOBYTE(v54) = Edge.Set.init(rawValue:)(v54 | v53);
  v59 = v105;
  v60 = v38[10];
  v61 = *(_BYTE *)(v41 + v60);
  sub_10000DF30(v41, v105, type metadata accessor for SmallWorldClockView);
  if ((v61 & 1) != 0)
  {
    v62 = sub_10000D330(v59, type metadata accessor for SmallWorldClockView);
    v63.n128_u64[0] = 0;
  }
  else
  {
    v64 = *(unsigned __int8 *)(v59 + v38[12]);
    v62 = sub_10000D330(v59, type metadata accessor for SmallWorldClockView);
    v63.n128_u64[0] = 0;
    if (v64)
      v63.n128_f64[0] = 8.0;
  }
  v65 = EdgeInsets.init(_all:)(v62, v63);
  v67 = v66;
  v69 = v68;
  v71 = v70;
  sub_10001DEA0(v48, v57, &qword_100085F60);
  v72 = v57 + *(int *)(v104 + 36);
  *(_BYTE *)v72 = v54;
  *(double *)(v72 + 8) = v65;
  *(_QWORD *)(v72 + 16) = v67;
  *(_QWORD *)(v72 + 24) = v69;
  *(_QWORD *)(v72 + 32) = v71;
  *(_BYTE *)(v72 + 40) = 0;
  v73 = sub_1000106A4(v48, &qword_100085F60);
  v74 = static Edge.Set.bottom.getter(v73);
  v75 = static Edge.Set.trailing.getter();
  v76 = Edge.Set.init(rawValue:)(0);
  v77 = Edge.Set.init(rawValue:)(v76);
  if (Edge.Set.init(rawValue:)(v77 & v74) != v74)
    v76 = Edge.Set.init(rawValue:)(v76 | v74);
  v78 = Edge.Set.init(rawValue:)(v76);
  if (Edge.Set.init(rawValue:)(v78 & v75) != v75)
    LOBYTE(v76) = Edge.Set.init(rawValue:)(v76 | v75);
  v79 = v109;
  v80 = *(_BYTE *)(v41 + v60);
  sub_10000DF30(v41, v109, type metadata accessor for SmallWorldClockView);
  if ((v80 & 1) != 0)
  {
    v81 = sub_10000D330(v79, type metadata accessor for SmallWorldClockView);
    v82.n128_u64[0] = 0;
  }
  else
  {
    v83 = *(unsigned __int8 *)(v79 + v38[12]);
    v81 = sub_10000D330(v79, type metadata accessor for SmallWorldClockView);
    v82.n128_u64[0] = 0;
    if (v83)
      v82.n128_f64[0] = 8.0;
  }
  v84 = EdgeInsets.init(_all:)(v81, v82);
  v86 = v85;
  v88 = v87;
  v90 = v89;
  v91 = v107;
  sub_10001DEA0(v57, v107, &qword_100085F68);
  v92 = v91 + *(int *)(v106 + 36);
  *(_BYTE *)v92 = v76;
  *(double *)(v92 + 8) = v84;
  *(_QWORD *)(v92 + 16) = v86;
  *(_QWORD *)(v92 + 24) = v88;
  *(_QWORD *)(v92 + 32) = v90;
  *(_BYTE *)(v92 + 40) = 0;
  sub_1000106A4(v57, &qword_100085F68);
  return sub_10001DE5C(v91, v110, &qword_100085F70);
}

uint64_t sub_10002B800@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  int *v28;
  uint64_t v29;
  double *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  int v50;
  uint64_t *v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  uint64_t v58;
  char v59;
  uint64_t KeyPath;
  uint64_t *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  int *v78;
  BOOL *v79;
  uint64_t *v80;
  uint64_t v81;
  BOOL *v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  char *v87;
  void (*v88)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int *v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  char v113;
  uint64_t v114;
  BOOL *v115;
  BOOL *v116;
  BOOL *v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  void (*v124)(char *, char *, uint64_t);
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  void (*v131)(char *, uint64_t);
  uint64_t v133;
  char *v134;
  char *v135;
  BOOL *v136;
  uint64_t v137;
  void (*v138)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  BOOL *v145;
  uint64_t v146;
  uint64_t v147;
  _BOOL4 v148;
  int v149;
  int v150;
  uint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  __int128 v174;
  _BYTE v175[4];

  v160 = a2;
  v157 = type metadata accessor for Clock(0);
  v156 = *(_QWORD *)(v157 - 8);
  v3 = __chkstk_darwin(v157);
  v145 = (BOOL *)&v133 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v144 = (uint64_t)&v133 - v5;
  v6 = sub_1000041D8(&qword_100087FC8);
  v7 = __chkstk_darwin(v6);
  v159 = (uint64_t)&v133 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v158 = (uint64_t)&v133 - v9;
  v163 = type metadata accessor for WidgetRenderingMode(0);
  v162 = *(_QWORD *)(v163 - 8);
  __chkstk_darwin(v163);
  v134 = (char *)&v133 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for WorldClockCity(0);
  __chkstk_darwin(v11);
  v133 = (uint64_t)&v133 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = type metadata accessor for ClockText(0);
  __chkstk_darwin(v137);
  v136 = (BOOL *)&v133 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v147 = sub_1000041D8(&qword_100087FD0);
  v146 = *(_QWORD *)(v147 - 8);
  __chkstk_darwin(v147);
  v135 = (char *)&v133 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000041D8(&qword_100087FD8);
  v16 = __chkstk_darwin(v15);
  v155 = (uint64_t)&v133 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v167 = (char *)&v133 - v18;
  v19 = sub_1000041D8(&qword_100084810);
  v20 = __chkstk_darwin(v19);
  v165 = (uint64_t)&v133 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v23 = (char *)&v133 - v22;
  v169 = type metadata accessor for TimeZone(0);
  v151 = *(_QWORD *)(v169 - 8);
  v24 = __chkstk_darwin(v169);
  v164 = (uint64_t)&v133 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v27 = (char *)&v133 - v26;
  v28 = (int *)type metadata accessor for ClockFace(0);
  __chkstk_darwin(v28);
  v30 = (double *)((char *)&v133 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  v31 = sub_1000041D8(&qword_100087FE0);
  v171 = *(_QWORD *)(v31 - 8);
  v172 = v31;
  v32 = __chkstk_darwin(v31);
  v154 = (char *)&v133 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __chkstk_darwin(v32);
  v152 = (char *)&v133 - v35;
  __chkstk_darwin(v34);
  v170 = (char *)&v133 - v36;
  v37 = (int *)type metadata accessor for SmallWorldClockView(0);
  v38 = (_QWORD *)(a1 + v37[6]);
  v40 = v38[3];
  v39 = v38[4];
  v173 = v38;
  sub_100050938(v38, v40);
  v41 = (*(double (**)(uint64_t, uint64_t))(v39 + 24))(v40, v39);
  v148 = sub_10002C644();
  v42 = a1 + v37[5];
  sub_100008130((uint64_t)v27);
  v43 = v37[7];
  v44 = v37[8];
  v149 = *(unsigned __int8 *)(a1 + v44);
  v168 = v43;
  v150 = *(unsigned __int8 *)(a1 + v43);
  v139 = *(int *)(v11 + 20);
  LODWORD(v40) = *(unsigned __int8 *)(v42 + v139);
  v45 = type metadata accessor for Date(0);
  v46 = *(_QWORD *)(v45 - 8);
  v166 = v46;
  if ((_DWORD)v40 == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v166 + 16))(v23, v42, v45);
    v46 = v166;
    v47 = 0;
  }
  else
  {
    v47 = 1;
  }
  v48 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v46 + 56);
  v153 = v23;
  v48(v23, v47, 1, v45);
  sub_10004FB84((uint64_t)v173, (uint64_t)v175);
  v49 = sub_1000041D8(&qword_100085F98);
  v50 = swift_dynamicCast(&v174, v175, v49, &type metadata for SmallSizeDimentions, 6);
  v143 = v44;
  v140 = v45;
  v161 = v42;
  v138 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v48;
  if (v50)
  {
    swift_release(*((_QWORD *)&v174 + 1));
    v51 = (uint64_t *)(a1 + v37[11]);
    v52 = *v51;
    v53 = *((_BYTE *)v51 + 8);
    v54 = swift_retain(*v51);
    v55 = sub_10002556C(v54, v53);
    swift_release(v52);
    v56 = sub_100067914();
    swift_release(v55);
  }
  else
  {
    v56 = 1;
  }
  v142 = v37[10];
  v57 = *(_BYTE *)(a1 + v142);
  v58 = v37[12];
  v59 = *(_BYTE *)(a1 + v58);
  KeyPath = swift_getKeyPath(&unk_10006CBC0);
  v61 = (uint64_t *)((char *)v30 + v28[14]);
  *v61 = KeyPath;
  v62 = sub_1000041D8(&qword_100085E28);
  swift_storeEnumTagMultiPayload(v61, v62, 0);
  *v30 = v41;
  *((_BYTE *)v30 + 8) = v148;
  v63 = (char *)v30 + v28[6];
  v151 = *(_QWORD *)(v151 + 32);
  ((void (*)(char *, char *, uint64_t))v151)(v63, v27, v169);
  *((_BYTE *)v30 + v28[7]) = v149;
  *((_BYTE *)v30 + v28[8]) = v150;
  sub_10001DE5C((uint64_t)v153, (uint64_t)v30 + v28[9], &qword_100084810);
  *((_BYTE *)v30 + v28[10]) = v56;
  *((_BYTE *)v30 + v28[11]) = v57;
  v64 = v28[12];
  *((_BYTE *)v30 + v64) = sub_100022220();
  *((_BYTE *)v30 + v28[13]) = v59;
  v65 = sub_10000D36C(&qword_100087FE8, type metadata accessor for ClockFace, (uint64_t)&unk_10006D060);
  v66 = v152;
  View.unredacted()(v28, v65);
  sub_10000D330((uint64_t)v30, type metadata accessor for ClockFace);
  (*(void (**)(char *, char *, uint64_t))(v171 + 32))(v170, v66, v172);
  v67 = *(_BYTE *)(a1 + v168);
  v141 = v58;
  if ((v67 & 1) != 0)
  {
    v68 = 1;
    v69 = (uint64_t)v167;
    v70 = v147;
    v71 = v146;
  }
  else
  {
    v72 = sub_10002C644();
    v73 = v133;
    sub_10000DF30(v161, v133, type metadata accessor for WorldClockCity);
    sub_10004FB84((uint64_t)v173, (uint64_t)&v174);
    LODWORD(v152) = *(unsigned __int8 *)(a1 + v37[9]);
    LODWORD(v153) = *(unsigned __int8 *)(a1 + v58);
    v74 = v162;
    v75 = v134;
    v76 = v163;
    (*(void (**)(char *, uint64_t, uint64_t))(v162 + 16))(v134, a1 + v37[13], v163);
    v77 = swift_getKeyPath(&unk_10006CBF0);
    v78 = (int *)v137;
    v79 = v136;
    v80 = (uint64_t *)&v136[*(int *)(v137 + 32)];
    *v80 = v77;
    v81 = sub_1000041D8(&qword_100085E48);
    swift_storeEnumTagMultiPayload(v80, v81, 0);
    *v79 = v72;
    sub_1000106E0(v73, (uint64_t)&v79[v78[5]], type metadata accessor for WorldClockCity);
    sub_10003928C(&v174, (uint64_t)&v79[v78[6]]);
    v79[v78[7]] = (char)v152;
    v79[v78[9]] = (char)v153;
    (*(void (**)(BOOL *, char *, uint64_t))(v74 + 32))(&v79[v78[10]], v75, v76);
    v82 = &v79[v78[11]];
    v83 = type metadata accessor for ClockWidgetEnvironmentObject(0);
    v84 = sub_10000D36C((unint64_t *)&qword_100085240, type metadata accessor for ClockWidgetEnvironmentObject, (uint64_t)&unk_10006DF68);
    *(_QWORD *)v82 = Environment.init<A>(_:)(v83, v83, v84);
    v82[8] = v85 & 1;
    v86 = sub_10000D36C(&qword_100087FF0, type metadata accessor for ClockText, (uint64_t)&unk_10006D1E0);
    v87 = v135;
    View.hideViewOnSnapshot()(v78, v86);
    sub_10000D330((uint64_t)v79, type metadata accessor for ClockText);
    v71 = v146;
    v69 = (uint64_t)v167;
    v70 = v147;
    (*(void (**)(char *, char *, uint64_t))(v146 + 32))(v167, v87, v147);
    v68 = 0;
  }
  v88 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v71 + 56);
  v89 = 1;
  v88(v69, v68, 1, v70);
  v90 = (uint64_t *)(a1 + v37[11]);
  v91 = *v90;
  v92 = *((_BYTE *)v90 + 8);
  v93 = swift_retain(*v90);
  v94 = sub_10002556C(v93, v92);
  swift_release(v91);
  LODWORD(v91) = sub_100067914();
  swift_release(v94);
  if ((_DWORD)v91)
  {
    v95 = sub_10002C644();
    v96 = v161;
    sub_100008130(v164);
    sub_10004FB84((uint64_t)v173, (uint64_t)&v174);
    v97 = *(_BYTE *)(a1 + v168);
    if (*(_BYTE *)(v96 + v139) == 1)
    {
      v98 = v165;
      v99 = v140;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v166 + 16))(v165, v96, v140);
      v100 = 0;
      v101 = v143;
      v102 = v141;
    }
    else
    {
      v100 = 1;
      v98 = v165;
      v101 = v143;
      v102 = v141;
      v99 = v140;
    }
    v138(v98, v100, 1, v99);
    v105 = *(_BYTE *)(a1 + v101);
    if (sub_10002C644())
    {
      if (qword_10008A678 != -1)
        swift_once(&qword_10008A678, sub_10004204C);
      v106 = qword_10008BF28;
      v107 = qword_10008A668;
      swift_retain(qword_10008BF28);
      if (v107 != -1)
      {
        swift_once(&qword_10008A668, sub_100041F44);
        v110 = qword_10008BF28;
        v108 = &qword_10008BF18;
        goto LABEL_25;
      }
      v108 = &qword_10008BF18;
    }
    else
    {
      if (qword_10008A648 != -1)
        swift_once(&qword_10008A648, sub_100041D98);
      v106 = qword_10008BEF8;
      v109 = qword_10008A638;
      swift_retain(qword_10008BEF8);
      if (v109 != -1)
      {
        swift_once(&qword_10008A638, sub_100041C24);
        v110 = qword_10008BEF8;
        v108 = &qword_10008BEE8;
        goto LABEL_25;
      }
      v108 = &qword_10008BEE8;
    }
    v110 = v106;
LABEL_25:
    v111 = *v108;
    swift_retain(*v108);
    swift_retain(v110);
    v112 = *(_BYTE *)(a1 + v142);
    v113 = *(_BYTE *)(a1 + v102);
    v114 = a1 + v37[13];
    v104 = (int *)v157;
    v115 = v145;
    (*(void (**)(BOOL *, uint64_t, uint64_t))(v162 + 16))(&v145[*(int *)(v157 + 56)], v114, v163);
    *v115 = v95;
    ((void (*)(BOOL *, uint64_t, uint64_t))v151)(&v115[v104[5]], v164, v169);
    sub_10003928C(&v174, (uint64_t)&v115[v104[6]]);
    v115[v104[7]] = v97;
    sub_10001DE5C(v165, (uint64_t)&v115[v104[8]], &qword_100084810);
    v115[v104[9]] = v105;
    v115[v104[10]] = 1;
    v116 = &v115[v104[11]];
    *(_OWORD *)v116 = xmmword_10006CA00;
    *((_QWORD *)v116 + 2) = 0x3F916872B020C49CLL;
    *((_QWORD *)v116 + 3) = v106;
    *((_QWORD *)v116 + 4) = v111;
    v116[40] = 1;
    *((_QWORD *)v116 + 6) = v110;
    *((_QWORD *)v116 + 7) = 0x3FC3333333333333;
    v115[v104[12]] = v112;
    v115[v104[13]] = v113;
    v117 = &v115[v104[15]];
    v118 = type metadata accessor for ClockWidgetEnvironmentObject(0);
    v119 = sub_10000D36C((unint64_t *)&qword_100085240, type metadata accessor for ClockWidgetEnvironmentObject, (uint64_t)&unk_10006DF68);
    *(_QWORD *)v117 = Environment.init<A>(_:)(v118, v118, v119);
    v117[8] = v120 & 1;
    v121 = v144;
    sub_1000106E0((uint64_t)v115, v144, type metadata accessor for Clock);
    v103 = v158;
    sub_1000106E0(v121, v158, type metadata accessor for Clock);
    v89 = 0;
    v69 = (uint64_t)v167;
    goto LABEL_26;
  }
  v103 = v158;
  v104 = (int *)v157;
LABEL_26:
  (*(void (**)(uint64_t, uint64_t, uint64_t, int *))(v156 + 56))(v103, v89, 1, v104);
  v123 = v170;
  v122 = v171;
  v124 = *(void (**)(char *, char *, uint64_t))(v171 + 16);
  v125 = v154;
  v126 = v172;
  v124(v154, v170, v172);
  v127 = v155;
  sub_10001DEA0(v69, v155, &qword_100087FD8);
  v128 = v159;
  sub_10001DEA0(v103, v159, &qword_100087FC8);
  v129 = v160;
  v124(v160, v125, v126);
  v130 = sub_1000041D8(&qword_100087FF8);
  sub_10001DEA0(v127, (uint64_t)&v129[*(int *)(v130 + 48)], &qword_100087FD8);
  sub_10001DEA0(v128, (uint64_t)&v129[*(int *)(v130 + 64)], &qword_100087FC8);
  sub_1000106A4(v103, &qword_100087FC8);
  sub_1000106A4(v69, &qword_100087FD8);
  v131 = *(void (**)(char *, uint64_t))(v122 + 8);
  v131(v123, v126);
  sub_1000106A4(v128, &qword_100087FC8);
  sub_1000106A4(v127, &qword_100087FD8);
  return ((uint64_t (*)(char *, uint64_t))v131)(v125, v126);
}

BOOL sub_10002C644()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  int v20;
  char v21;
  char v22;
  uint64_t v23;
  char *v25;
  uint64_t v27;
  void (*v28)(char *, uint64_t);

  v1 = (int *)type metadata accessor for SmallWorldClockView(0);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v2);
  v7 = (char *)&v27 - v6;
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v27 - v9;
  __chkstk_darwin(v8);
  v12 = (char *)&v27 - v11;
  v13 = type metadata accessor for WidgetRenderingMode(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = v0 + v1[13];
  static WidgetRenderingMode.vibrant.getter(v15);
  LOBYTE(v18) = static WidgetRenderingMode.== infix(_:_:)(v18, v17);
  v19 = *(void (**)(char *, uint64_t))(v14 + 8);
  v19(v17, v13);
  sub_10000DF30(v0, (uint64_t)v12, type metadata accessor for SmallWorldClockView);
  v28 = v19;
  if ((v18 & 1) != 0)
  {
    v20 = v12[v1[12]];
    sub_10000D330((uint64_t)v12, type metadata accessor for SmallWorldClockView);
    sub_10000DF30(v0, (uint64_t)v10, type metadata accessor for SmallWorldClockView);
    if (v20 == 1)
    {
      sub_10000D330((uint64_t)v10, type metadata accessor for SmallWorldClockView);
      return 0;
    }
  }
  else
  {
    sub_10000D330((uint64_t)v12, type metadata accessor for SmallWorldClockView);
    sub_10000DF30(v0, (uint64_t)v10, type metadata accessor for SmallWorldClockView);
  }
  v21 = v10[v1[10]];
  sub_10000DF30((uint64_t)v10, (uint64_t)v7, type metadata accessor for SmallWorldClockView);
  if ((v21 & 1) != 0)
  {
    sub_10000D330((uint64_t)v7, type metadata accessor for SmallWorldClockView);
    sub_10000DF30((uint64_t)v10, (uint64_t)v4, type metadata accessor for SmallWorldClockView);
LABEL_8:
    sub_10000D330((uint64_t)v4, type metadata accessor for SmallWorldClockView);
    sub_10000D330((uint64_t)v10, type metadata accessor for SmallWorldClockView);
    return (*(_BYTE *)(v0 + v1[9]) & 1) != 0 || sub_1000071D4();
  }
  v22 = v7[v1[12]];
  sub_10000D330((uint64_t)v7, type metadata accessor for SmallWorldClockView);
  v23 = sub_10000DF30((uint64_t)v10, (uint64_t)v4, type metadata accessor for SmallWorldClockView);
  if ((v22 & 1) != 0)
    goto LABEL_8;
  v25 = &v4[v1[13]];
  static WidgetRenderingMode.fullColor.getter(v23);
  LOBYTE(v25) = static WidgetRenderingMode.== infix(_:_:)(v25, v17);
  v28(v17, v13);
  sub_10000D330((uint64_t)v4, type metadata accessor for SmallWorldClockView);
  sub_10000D330((uint64_t)v10, type metadata accessor for SmallWorldClockView);
  if ((v25 & 1) != 0)
    return 0;
  return (*(_BYTE *)(v0 + v1[9]) & 1) != 0 || sub_1000071D4();
}

uint64_t sub_10002C918()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[8];
  uint64_t v11;
  _BYTE v12[40];

  v1 = type metadata accessor for SmallWorldClockView(0);
  sub_10004FB84(v0 + *(int *)(v1 + 24), (uint64_t)v12);
  v2 = sub_1000041D8(&qword_100085F98);
  if ((swift_dynamicCast(v10, v12, v2, &type metadata for SmallSizeDimentions, 6) & 1) == 0)
    return 1;
  swift_release(v11);
  v3 = (uint64_t *)(v0 + *(int *)(v1 + 44));
  v4 = *v3;
  v5 = *((_BYTE *)v3 + 8);
  v6 = swift_retain(*v3);
  v7 = sub_10002556C(v6, v5);
  swift_release(v4);
  v8 = sub_100067914();
  swift_release(v7);
  return v8;
}

uint64_t sub_10002C9D0@<X0>(char a1@<W0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, char a7@<W6>, char a8@<W7>, uint64_t a9@<X8>, double a10@<D0>, uint64_t a11)
{
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(double *)a9 = a10;
  *(_BYTE *)(a9 + 8) = a1;
  v18 = (int *)type metadata accessor for ClockFace(0);
  v19 = a9 + v18[6];
  v20 = type metadata accessor for TimeZone(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v19, a2, v20);
  *(_BYTE *)(a9 + v18[7]) = a3;
  *(_BYTE *)(a9 + v18[8]) = a4;
  sub_10001DE5C(a5, a9 + v18[9], &qword_100084810);
  *(_BYTE *)(a9 + v18[10]) = a6;
  *(_BYTE *)(a9 + v18[11]) = a7;
  v21 = v18[12];
  *(_BYTE *)(a9 + v21) = sub_100022220();
  *(_BYTE *)(a9 + v18[13]) = a8;
  return sub_10001DE5C(a11, a9 + v18[14], &qword_100085B10);
}

uint64_t sub_10002CAD8@<X0>(char a1@<W0>, uint64_t a2@<X1>, __int128 *a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, _BYTE *a8@<X8>)
{
  int *v15;
  _BYTE *v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  char v22;

  *a8 = a1;
  v15 = (int *)type metadata accessor for ClockText(0);
  sub_1000106E0(a2, (uint64_t)&a8[v15[5]], type metadata accessor for WorldClockCity);
  sub_10003928C(a3, (uint64_t)&a8[v15[6]]);
  a8[v15[7]] = a4;
  sub_10001DE5C(a5, (uint64_t)&a8[v15[8]], &qword_100085AD0);
  a8[v15[9]] = a6;
  v16 = &a8[v15[10]];
  v17 = type metadata accessor for WidgetRenderingMode(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v16, a7, v17);
  v18 = &a8[v15[11]];
  v19 = type metadata accessor for ClockWidgetEnvironmentObject(0);
  v20 = sub_10000D36C((unint64_t *)&qword_100085240, type metadata accessor for ClockWidgetEnvironmentObject, (uint64_t)&unk_10006DF68);
  result = Environment.init<A>(_:)(v19, v19, v20);
  *(_QWORD *)v18 = result;
  v18[8] = v22 & 1;
  return result;
}

uint64_t sub_10002CBFC()
{
  return 1;
}

uint64_t sub_10002CC04@<X0>(char a1@<W0>, uint64_t a2@<X1>, __int128 *a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, char a7@<W6>, _OWORD *a8@<X7>, _BYTE *a9@<X8>, char a10, char a11, uint64_t a12)
{
  int *v20;
  _BYTE *v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  _BYTE *v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  char v32;

  *a9 = a1;
  v20 = (int *)type metadata accessor for Clock(0);
  v21 = &a9[v20[5]];
  v22 = type metadata accessor for TimeZone(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v21, a2, v22);
  sub_10003928C(a3, (uint64_t)&a9[v20[6]]);
  a9[v20[7]] = a4;
  sub_10001DE5C(a5, (uint64_t)&a9[v20[8]], &qword_100084810);
  a9[v20[9]] = a6;
  a9[v20[10]] = a7;
  v23 = &a9[v20[11]];
  v24 = a8[1];
  *v23 = *a8;
  v23[1] = v24;
  v25 = a8[3];
  v23[2] = a8[2];
  v23[3] = v25;
  a9[v20[12]] = a10;
  a9[v20[13]] = a11;
  v26 = &a9[v20[14]];
  v27 = type metadata accessor for WidgetRenderingMode(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v26, a12, v27);
  v28 = &a9[v20[15]];
  v29 = type metadata accessor for ClockWidgetEnvironmentObject(0);
  v30 = sub_10000D36C((unint64_t *)&qword_100085240, type metadata accessor for ClockWidgetEnvironmentObject, (uint64_t)&unk_10006DF68);
  result = Environment.init<A>(_:)(v29, v29, v30);
  *(_QWORD *)v28 = result;
  v28[8] = v32 & 1;
  return result;
}

void *sub_10002CD98()
{
  return &unk_10006CB40;
}

void *sub_10002CDA4()
{
  return &unk_10006CB58;
}

void *sub_10002CDB0()
{
  return &unk_10006CB60;
}

uint64_t sub_10002CDBC(char a1)
{
  uint64_t *v1;

  if ((a1 & 1) != 0)
  {
    if (qword_10008A678 != -1)
      swift_once(&qword_10008A678, sub_10004204C);
    v1 = &qword_10008BF28;
  }
  else
  {
    if (qword_10008A648 != -1)
      swift_once(&qword_10008A648, sub_100041D98);
    v1 = &qword_10008BEF8;
  }
  return swift_retain(*v1);
}

uint64_t sub_10002CE38(char a1)
{
  uint64_t *v1;

  if ((a1 & 1) != 0)
  {
    if (qword_10008A668 != -1)
      swift_once(&qword_10008A668, sub_100041F44);
    v1 = &qword_10008BF18;
  }
  else
  {
    if (qword_10008A638 != -1)
      swift_once(&qword_10008A638, sub_100041C24);
    v1 = &qword_10008BEE8;
  }
  return swift_retain(*v1);
}

double sub_10002CEB4()
{
  return 0.0585;
}

double sub_10002CEC0()
{
  return 0.036;
}

double sub_10002CECC()
{
  return 0.017;
}

uint64_t sub_10002CED8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>)
{
  *(double *)a3 = a4;
  *(double *)(a3 + 8) = a5;
  *(double *)(a3 + 16) = a6;
  *(_QWORD *)(a3 + 24) = result;
  *(_QWORD *)(a3 + 32) = a2;
  return result;
}

double sub_10002CEE8()
{
  return 0.15;
}

uint64_t sub_10002CEF8@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v5;

  v5 = *(_QWORD *)(result + 16);
  *(_OWORD *)a4 = *(_OWORD *)result;
  *(_QWORD *)(a4 + 16) = v5;
  *(_OWORD *)(a4 + 24) = *(_OWORD *)(result + 24);
  *(_BYTE *)(a4 + 40) = a2;
  *(_QWORD *)(a4 + 48) = a3;
  *(double *)(a4 + 56) = a5;
  return result;
}

uint64_t sub_10002CF24()
{
  _QWORD *v0;

  return swift_bridgeObjectRetain(*v0);
}

uint64_t sub_10002CF2C()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t sub_10002CF34(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 8) = result;
  return result;
}

uint64_t (*sub_10002CF3C())()
{
  return nullsub_1;
}

uint64_t sub_10002CF4C()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 9);
}

uint64_t sub_10002CF54(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 9) = result;
  return result;
}

uint64_t (*sub_10002CF5C())()
{
  return nullsub_1;
}

uint64_t sub_10002CF6C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SmallMultiWorldClockView(0) + 28);
  v4 = type metadata accessor for WidgetRenderingMode(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_10002CFB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SmallMultiWorldClockView(0) + 28);
  v4 = type metadata accessor for WidgetRenderingMode(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*sub_10002CFFC())()
{
  type metadata accessor for SmallMultiWorldClockView(0);
  return nullsub_1;
}

uint64_t sub_10002D024@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v3 = type metadata accessor for SmallMultiWorldClockView(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  sub_10000DF30(v1, (uint64_t)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for SmallMultiWorldClockView);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 16) & ~v6;
  v8 = swift_allocObject(&unk_100082640, v7 + v5, v6 | 7);
  result = sub_1000106E0((uint64_t)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v8 + v7, type metadata accessor for SmallMultiWorldClockView);
  *a1 = sub_10004FC8C;
  a1[1] = (uint64_t (*)(uint64_t))v8;
  return result;
}

uint64_t sub_10002D0E0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v4 = type metadata accessor for AccentedWidgetBackground(0);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_1000041D8(&qword_100087F40);
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_1000041D8(&qword_100087F48);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v9 = static Alignment.center.getter(v11);
  v9[1] = v14;
  v15 = sub_1000041D8(&qword_100087F50);
  v16 = sub_10002D2E4(a1, (uint64_t)v9 + *(int *)(v15 + 44));
  v17 = static Edge.Set.all.getter(v16);
  sub_10001DEA0((uint64_t)v9, (uint64_t)v13, &qword_100087F40);
  v13[*(int *)(v10 + 36)] = v17;
  sub_1000106A4((uint64_t)v9, &qword_100087F40);
  if (qword_10008A620 != -1)
    swift_once(&qword_10008A620, sub_100041AD8);
  v18 = qword_10008BED0;
  *v6 = qword_10008BED0;
  v19 = (_QWORD *)((char *)v6 + *(int *)(v4 + 20));
  *v19 = swift_getKeyPath(&unk_10006CBC0);
  v20 = sub_1000041D8(&qword_100085E28);
  swift_storeEnumTagMultiPayload(v19, v20, 0);
  sub_10001DEA0((uint64_t)v13, a2, &qword_100087F48);
  v21 = sub_1000041D8(&qword_100087F58);
  sub_1000106E0((uint64_t)v6, a2 + *(int *)(v21 + 36), type metadata accessor for AccentedWidgetBackground);
  swift_retain(v18);
  return sub_1000106A4((uint64_t)v13, &qword_100087F48);
}

uint64_t sub_10002D2E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  char v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  __n128 v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v59;
  uint64_t v60;

  v60 = a2;
  v3 = sub_1000041D8(&qword_100087F60);
  __chkstk_darwin(v3);
  v5 = (char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000041D8(&qword_100087F68);
  __chkstk_darwin(v6);
  v8 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000041D8(&qword_100087F70);
  __chkstk_darwin(v9);
  v11 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = sub_1000041D8(&qword_100087F78);
  v12 = __chkstk_darwin(v59);
  v14 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v5 = static HorizontalAlignment.leading.getter(v12);
  *((_QWORD *)v5 + 1) = 0;
  v5[16] = 1;
  v15 = sub_1000041D8(&qword_100087F80);
  v16 = sub_10002D6A4(a1, (uint64_t)&v5[*(int *)(v15 + 44)]);
  v17 = static Edge.Set.top.getter(v16);
  v18 = v17;
  v19 = static Edge.Set.leading.getter(v17);
  v20 = Edge.Set.init(rawValue:)(0);
  v21 = Edge.Set.init(rawValue:)(v20);
  if (Edge.Set.init(rawValue:)(v21 & v18) != v18)
    v20 = Edge.Set.init(rawValue:)(v20 | v18);
  v22 = Edge.Set.init(rawValue:)(v20);
  v23 = Edge.Set.init(rawValue:)(v22 & v19);
  if (v23 != v19)
  {
    v23 = Edge.Set.init(rawValue:)(v20 | v19);
    LOBYTE(v20) = v23;
  }
  v25 = 0;
  v24.n128_u64[0] = 0;
  if ((*(_BYTE *)(a1 + 9) & 1) != 0)
  {
    if (qword_10008A6C0 != -1)
      v23 = swift_once(&qword_10008A6C0, sub_1000426D0);
    v24.n128_u64[0] = qword_10008BF70;
  }
  v26 = EdgeInsets.init(_all:)(v23, v24);
  v28 = v27;
  v30 = v29;
  v32 = v31;
  sub_10001DEA0((uint64_t)v5, (uint64_t)v8, &qword_100087F60);
  v33 = &v8[*(int *)(v6 + 36)];
  *v33 = v20;
  *((double *)v33 + 1) = v26;
  *((_QWORD *)v33 + 2) = v28;
  *((_QWORD *)v33 + 3) = v30;
  *((_QWORD *)v33 + 4) = v32;
  v33[40] = 0;
  v34 = sub_1000106A4((uint64_t)v5, &qword_100087F60);
  v35 = static Edge.Set.bottom.getter(v34);
  v37 = v35;
  if (*(_BYTE *)(a1 + 9) == 1)
  {
    if (qword_10008A6D0 != -1)
      v35 = swift_once(&qword_10008A6D0, sub_100042758);
    v25 = qword_10008BF80;
  }
  v36.n128_u64[0] = v25;
  v38 = EdgeInsets.init(_all:)(v35, v36);
  v40 = v39;
  v42 = v41;
  v44 = v43;
  sub_10001DEA0((uint64_t)v8, (uint64_t)v11, &qword_100087F68);
  v45 = &v11[*(int *)(v9 + 36)];
  *v45 = v37;
  *((double *)v45 + 1) = v38;
  *((_QWORD *)v45 + 2) = v40;
  *((_QWORD *)v45 + 3) = v42;
  *((_QWORD *)v45 + 4) = v44;
  v45[40] = 0;
  v46 = sub_1000106A4((uint64_t)v8, &qword_100087F68);
  v47 = static Edge.Set.trailing.getter(v46);
  v48 = v47;
  v49.n128_u64[0] = 0;
  if (*(_BYTE *)(a1 + 9) == 1)
  {
    if (qword_10008A6C8 != -1)
      v47 = swift_once(&qword_10008A6C8, sub_100042730);
    v49.n128_u64[0] = qword_10008BF78;
  }
  v50 = EdgeInsets.init(_all:)(v47, v49);
  v52 = v51;
  v54 = v53;
  v56 = v55;
  sub_10001DEA0((uint64_t)v11, (uint64_t)v14, &qword_100087F70);
  v57 = &v14[*(int *)(v59 + 36)];
  *v57 = v48;
  *((double *)v57 + 1) = v50;
  *((_QWORD *)v57 + 2) = v52;
  *((_QWORD *)v57 + 3) = v54;
  *((_QWORD *)v57 + 4) = v56;
  v57[40] = 0;
  sub_1000106A4((uint64_t)v11, &qword_100087F70);
  return sub_10001DE5C((uint64_t)v14, v60, &qword_100087F78);
}

uint64_t sub_10002D6A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD v27[2];

  v27[1] = a2;
  v3 = type metadata accessor for SmallMultiWorldClockView(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v6 = sub_1000041D8(&qword_100085E40);
  __chkstk_darwin(v6);
  v8 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10002D8EC(*(_QWORD *)a1);
  GeometryProxy.size.getter(v9);
  v11 = 0.8888;
  if (*(_BYTE *)(a1 + 9))
    v11 = 0.7742;
  v12 = v10 * 0.5 * v11;
  v13 = static Font.Weight.semibold.getter();
  v14 = enum case for Font.Design.default(_:);
  v15 = type metadata accessor for Font.Design(0);
  v16 = *(_QWORD *)(v15 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 104))(v8, v14, v15);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v8, 0, 1, v15);
  v17 = static Font.system(size:weight:design:)(*(_QWORD *)&v13, 0, v8, 12.0);
  sub_1000106A4((uint64_t)v8, &qword_100085E40);
  v18 = type metadata accessor for WorldClockCity(0);
  v19 = sub_1000217C8(2, (uint64_t)v9, v18);
  swift_bridgeObjectRelease(v9);
  v20 = *(_QWORD *)(v19 + 16);
  sub_10000DF30(a1, (uint64_t)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for SmallMultiWorldClockView);
  v21 = *(unsigned __int8 *)(v4 + 80);
  v22 = (v21 + 80) & ~v21;
  v23 = swift_allocObject(&unk_100083240, v22 + v5, v21 | 7);
  *(_QWORD *)(v23 + 16) = v19;
  *(double *)(v23 + 24) = v12;
  *(_QWORD *)(v23 + 32) = v17;
  *(_OWORD *)(v23 + 40) = xmmword_10006CA10;
  *(_OWORD *)(v23 + 56) = xmmword_10006CA20;
  *(_QWORD *)(v23 + 72) = 0x3FF0000000000000;
  sub_1000106E0((uint64_t)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v23 + v22, type metadata accessor for SmallMultiWorldClockView);
  v24 = sub_1000041D8(&qword_100087F88);
  v25 = sub_1000671C0();
  return ForEach<>.init(_:content:)(0, v20, sub_10006716C, v23, v24, v25);
}

_QWORD *sub_10002D8EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v2 = type metadata accessor for WorldClockCity(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v21 - v7;
  v9 = 0;
  v22 = a1;
  v10 = *(_QWORD *)(a1 + 16);
  v11 = &_swiftEmptyArrayStorage;
  do
  {
    if (v9 >= v10)
    {
      sub_100004FA0((uint64_t)v6);
      if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
        v11 = (_QWORD *)sub_10004F818(0, v11[2] + 1, 1, v11);
      v19 = v11[2];
      v18 = v11[3];
      if (v19 >= v18 >> 1)
        v11 = (_QWORD *)sub_10004F818(v18 > 1, v19 + 1, 1, v11);
      v11[2] = v19 + 1;
      v16 = (uint64_t)v11
          + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
          + *(_QWORD *)(v3 + 72) * v19;
      v17 = (uint64_t)v6;
    }
    else
    {
      v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
      v13 = *(_QWORD *)(v3 + 72);
      sub_10000DF30(v22 + v12 + v13 * v9, (uint64_t)v8, type metadata accessor for WorldClockCity);
      if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
        v11 = (_QWORD *)sub_10004F818(0, v11[2] + 1, 1, v11);
      v15 = v11[2];
      v14 = v11[3];
      if (v15 >= v14 >> 1)
        v11 = (_QWORD *)sub_10004F818(v14 > 1, v15 + 1, 1, v11);
      v11[2] = v15 + 1;
      v16 = (uint64_t)v11 + v12 + v15 * v13;
      v17 = (uint64_t)v8;
    }
    sub_1000106E0(v17, v16, type metadata accessor for WorldClockCity);
    ++v9;
  }
  while (v9 != 4);
  return v11;
}

void *sub_10002DAE4()
{
  return &unk_10006CB08;
}

void *sub_10002DAF0()
{
  return &unk_10006CB10;
}

uint64_t sub_10002DAFC()
{
  return sub_10003938C((double (*)(uint64_t))&static Font.Weight.semibold.getter);
}

double sub_10002DB08()
{
  return 3.4;
}

double sub_10002DB18()
{
  return 2.2;
}

uint64_t sub_10002DB24@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>, double a7@<D4>, double a8@<D5>)
{
  *(double *)a2 = a3;
  *(_QWORD *)(a2 + 8) = result;
  *(double *)(a2 + 16) = a4;
  *(double *)(a2 + 24) = a5;
  *(double *)(a2 + 32) = a6;
  *(double *)(a2 + 40) = a7;
  *(double *)(a2 + 48) = a8;
  return result;
}

uint64_t sub_10002DB3C@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  char v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  _QWORD v46[2];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v10 = type metadata accessor for SmallMultiWorldClockView(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v13 = (char *)v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000041D8(&qword_100087FA0);
  __chkstk_darwin(v14);
  v16 = (char *)v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1000041D8(&qword_100087F88);
  result = __chkstk_darwin(v17);
  v20 = (char *)v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (*(_QWORD *)(a2 + 16) <= a1)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  v47 = result;
  v49 = a5;
  v21 = *(_QWORD *)(a2 + 32 + 8 * a1);
  v22 = swift_bridgeObjectRetain(v21);
  *(_QWORD *)v16 = static VerticalAlignment.center.getter(v22);
  *((_QWORD *)v16 + 1) = 0;
  v16[16] = 1;
  v46[1] = &v16[*(int *)(sub_1000041D8(&qword_100087FA8) + 44)];
  v50 = v21;
  v48 = a4;
  sub_10000DF30(a4, (uint64_t)v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for SmallMultiWorldClockView);
  v23 = *(unsigned __int8 *)(v11 + 80);
  v24 = (v23 + 72) & ~v23;
  v25 = (v12 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  v26 = swift_allocObject(&unk_100083268, v25 + 8, v23 | 7);
  v27 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v26 + 16) = *(_OWORD *)a3;
  *(_OWORD *)(v26 + 32) = v27;
  *(_OWORD *)(v26 + 48) = *(_OWORD *)(a3 + 32);
  *(_QWORD *)(v26 + 64) = *(_QWORD *)(a3 + 48);
  sub_1000106E0((uint64_t)v13, v26 + v24, type metadata accessor for SmallMultiWorldClockView);
  *(_QWORD *)(v26 + v25) = v21;
  swift_bridgeObjectRetain_n(v21, 2);
  sub_1000667B4(a3);
  v28 = sub_1000041D8(&qword_100087EF0);
  v29 = sub_1000041D8(&qword_100087FB0);
  v30 = sub_10001DDB4(&qword_100087F00, &qword_100087EF0, (uint64_t)&protocol conformance descriptor for [A]);
  v31 = sub_100067350(&qword_100087FB8, &qword_100087FB0);
  v32 = sub_10000D36C(&qword_100087F28, type metadata accessor for WorldClockCity, (uint64_t)&unk_10006B288);
  ForEach<>.init(_:content:)(&v50, sub_1000672EC, v26, v28, &type metadata for String, v29, v30, v31, v32);
  v33 = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v33);
  LOBYTE(v30) = sub_10004F394(v21, v33);
  swift_bridgeObjectRelease_n(v21, 2);
  v34 = swift_bridgeObjectRelease(v33);
  if ((v30 & 1) != 0)
    v35 = static Edge.Set.bottom.getter(v34);
  else
    v35 = static Edge.Set.top.getter(v34);
  v37 = v35;
  v36.n128_u64[0] = 4.0;
  if (*(_BYTE *)(v48 + 9))
    v36.n128_f64[0] = 0.0;
  v38 = EdgeInsets.init(_all:)(v35, v36);
  v40 = v39;
  v42 = v41;
  v44 = v43;
  sub_10001DEA0((uint64_t)v16, (uint64_t)v20, &qword_100087FA0);
  v45 = &v20[*(int *)(v47 + 36)];
  *v45 = v37;
  *((double *)v45 + 1) = v38;
  *((_QWORD *)v45 + 2) = v40;
  *((_QWORD *)v45 + 3) = v42;
  *((_QWORD *)v45 + 4) = v44;
  v45[40] = 0;
  sub_1000106A4((uint64_t)v16, &qword_100087FA0);
  return sub_10001DE5C((uint64_t)v20, v49, &qword_100087F88);
}

uint64_t sub_10002DEAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  void (*v44)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int (*v48)(uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  __n128 v55;
  char v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  ValueMetadata *v86;
  _UNKNOWN **v87;

  v78 = a4;
  v84 = a5;
  v79 = sub_1000041D8(&qword_100087FC0);
  __chkstk_darwin(v79);
  v82 = (uint64_t)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000041D8(&qword_100085070);
  v10 = __chkstk_darwin(v9);
  v69 = (uint64_t)&v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v77 = (uint64_t)&v67 - v13;
  __chkstk_darwin(v12);
  v76 = (char *)&v67 - v14;
  v74 = type metadata accessor for WidgetRenderingMode(0);
  v71 = *(_QWORD *)(v74 - 8);
  v15 = v71;
  __chkstk_darwin(v74);
  v17 = (char *)&v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for WorldClockCity(0);
  v75 = *(_QWORD *)(v18 - 8);
  v70 = v18;
  __chkstk_darwin(v18);
  v20 = (char *)&v67 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = (int *)type metadata accessor for SmallWorldClockView(0);
  __chkstk_darwin(v21);
  v23 = (uint64_t *)((char *)&v67 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  v80 = sub_1000041D8(&qword_100087FB0);
  __chkstk_darwin(v80);
  v81 = (uint64_t)&v67 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = a1;
  sub_10000DF30(a1, (uint64_t)v20, type metadata accessor for WorldClockCity);
  v86 = &type metadata for SmallMultiSizeDimentions;
  v87 = &off_100082858;
  v25 = swift_allocObject(&unk_100083290, 72, 7);
  *(_QWORD *)&v85 = v25;
  v26 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v25 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v25 + 32) = v26;
  *(_OWORD *)(v25 + 48) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v25 + 64) = *(_QWORD *)(a2 + 48);
  v27 = *(_BYTE *)(a3 + 8);
  LOBYTE(v18) = *(_BYTE *)(a1 + *(int *)(v18 + 52));
  v72 = *(unsigned __int8 *)(a3 + 9);
  v28 = *(int *)(type metadata accessor for SmallMultiWorldClockView(0) + 28);
  v83 = a3;
  v29 = a3 + v28;
  v30 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v31 = v74;
  v30(v17, v29, v74);
  *v23 = swift_getKeyPath(&unk_10006CBF0);
  v32 = sub_1000041D8(&qword_100085E48);
  swift_storeEnumTagMultiPayload(v23, v32, 0);
  v33 = (uint64_t)v23 + v21[5];
  v68 = v20;
  sub_1000106E0((uint64_t)v20, v33, type metadata accessor for WorldClockCity);
  sub_10003928C(&v85, (uint64_t)v23 + v21[6]);
  *((_BYTE *)v23 + v21[7]) = v27;
  v34 = v75;
  *((_BYTE *)v23 + v21[8]) = v18;
  *((_BYTE *)v23 + v21[9]) = 0;
  v35 = 1;
  *((_BYTE *)v23 + v21[10]) = 1;
  v36 = (char *)v23 + v21[11];
  v37 = type metadata accessor for ClockWidgetEnvironmentObject(0);
  sub_1000667B4(a2);
  v38 = v70;
  v39 = sub_10000D36C((unint64_t *)&qword_100085240, type metadata accessor for ClockWidgetEnvironmentObject, (uint64_t)&unk_10006DF68);
  v40 = v37;
  v41 = v37;
  v42 = (uint64_t)v76;
  *(_QWORD *)v36 = Environment.init<A>(_:)(v40, v41, v39);
  v36[8] = v43 & 1;
  *((_BYTE *)v23 + v21[12]) = v72;
  (*(void (**)(char *, char *, uint64_t))(v71 + 32))((char *)v23 + v21[13], v17, v31);
  sub_10000DF30(v73, v42, type metadata accessor for WorldClockCity);
  v44 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 56);
  v44(v42, 0, 1, v38);
  v45 = v77;
  if (*(_QWORD *)(v78 + 16))
  {
    sub_10000DF30(v78 + ((*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80)), v77, type metadata accessor for WorldClockCity);
    v35 = 0;
  }
  v44(v45, v35, 1, v38);
  v46 = v82;
  v47 = v82 + *(int *)(v79 + 48);
  sub_10001DEA0(v42, v82, &qword_100085070);
  sub_10001DEA0(v45, v47, &qword_100085070);
  v48 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48);
  if (v48(v46, 1, v38) == 1)
  {
    sub_1000106A4(v45, &qword_100085070);
    sub_1000106A4(v42, &qword_100085070);
    if (v48(v47, 1, v38) == 1)
    {
      v49 = sub_1000106A4(v46, &qword_100085070);
LABEL_10:
      v54 = static Edge.Set.trailing.getter(v49);
      goto LABEL_12;
    }
    goto LABEL_8;
  }
  v50 = v69;
  sub_10001DEA0(v46, v69, &qword_100085070);
  if (v48(v47, 1, v38) == 1)
  {
    sub_1000106A4(v45, &qword_100085070);
    sub_1000106A4(v42, &qword_100085070);
    sub_10000D330(v50, type metadata accessor for WorldClockCity);
LABEL_8:
    v49 = sub_1000106A4(v46, &qword_100087FC0);
    goto LABEL_11;
  }
  v51 = (uint64_t)v68;
  sub_1000106E0(v47, (uint64_t)v68, type metadata accessor for WorldClockCity);
  v52 = sub_10000D36C(qword_1000848B8, type metadata accessor for WorldClockCity, (uint64_t)&unk_10006B328);
  v53 = dispatch thunk of static Equatable.== infix(_:_:)(v50, v51, v38, v52);
  sub_10000D330(v51, type metadata accessor for WorldClockCity);
  sub_1000106A4(v45, &qword_100085070);
  sub_1000106A4(v42, &qword_100085070);
  sub_10000D330(v50, type metadata accessor for WorldClockCity);
  v49 = sub_1000106A4(v46, &qword_100085070);
  if ((v53 & 1) != 0)
    goto LABEL_10;
LABEL_11:
  v54 = static Edge.Set.leading.getter(v49);
LABEL_12:
  v56 = v54;
  v55.n128_u64[0] = 4.0;
  if (*(_BYTE *)(v83 + 9))
    v55.n128_f64[0] = 0.0;
  v57 = EdgeInsets.init(_all:)(v54, v55);
  v59 = v58;
  v61 = v60;
  v63 = v62;
  v64 = v81;
  sub_10000DF30((uint64_t)v23, v81, type metadata accessor for SmallWorldClockView);
  v65 = v64 + *(int *)(v80 + 36);
  *(_BYTE *)v65 = v56;
  *(double *)(v65 + 8) = v57;
  *(_QWORD *)(v65 + 16) = v59;
  *(_QWORD *)(v65 + 24) = v61;
  *(_QWORD *)(v65 + 32) = v63;
  *(_BYTE *)(v65 + 40) = 0;
  sub_10000D330((uint64_t)v23, type metadata accessor for SmallWorldClockView);
  return sub_10001DE5C(v64, v84, &qword_100087FB0);
}

uint64_t *sub_10002E548()
{
  if (qword_10008A6C0 != -1)
    swift_once(&qword_10008A6C0, sub_1000426D0);
  return &qword_10008BF70;
}

uint64_t *sub_10002E588()
{
  if (qword_10008A6D0 != -1)
    swift_once(&qword_10008A6D0, sub_100042758);
  return &qword_10008BF80;
}

uint64_t *sub_10002E5C8()
{
  if (qword_10008A6C8 != -1)
    swift_once(&qword_10008A6C8, sub_100042730);
  return &qword_10008BF78;
}

void *sub_10002E608()
{
  return &unk_10006CB50;
}

uint64_t sub_10002E614@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(uint64_t a1)@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(a1);
  sub_10000DF30(v2, (uint64_t)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for SmallMultiWorldClockView);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 16) & ~v6;
  v8 = swift_allocObject(&unk_1000830D8, v7 + v5, v6 | 7);
  result = sub_1000106E0((uint64_t)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v8 + v7, type metadata accessor for SmallMultiWorldClockView);
  *a2 = sub_10004FC8C;
  a2[1] = (uint64_t (*)(uint64_t))v8;
  return result;
}

uint64_t sub_10002E6C8()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for MediumWorldClockView(0) + 20));
}

uint64_t sub_10002E6E8(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for MediumWorldClockView(0);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_10002E714())()
{
  type metadata accessor for MediumWorldClockView(0);
  return nullsub_1;
}

uint64_t sub_10002E73C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_1000041D8(&qword_100085EF8);
  v1 = swift_allocObject(v0, 64, 7);
  *(_OWORD *)(v1 + 16) = xmmword_10006B080;
  *(_QWORD *)(v1 + 32) = static Color.red.getter();
  *(_QWORD *)(v1 + 40) = static Color.green.getter();
  *(_QWORD *)(v1 + 48) = static Color.blue.getter();
  v2 = static Color.gray.getter();
  *(_QWORD *)(v1 + 56) = v2;
  specialized Array._endMutation()(v2);
  return v1;
}

uint64_t sub_10002E7B4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for MediumWorldClockView(0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + *(int *)(v1 + 24)));
}

uint64_t sub_10002E7D4()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for MediumWorldClockView(0) + 28));
}

uint64_t sub_10002E7F4(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for MediumWorldClockView(0);
  *(_BYTE *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*sub_10002E820())()
{
  type metadata accessor for MediumWorldClockView(0);
  return nullsub_1;
}

uint64_t sub_10002E848@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for MediumWorldClockView(0) + 32);
  v4 = type metadata accessor for WidgetRenderingMode(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_10002E890(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for MediumWorldClockView(0) + 32);
  v4 = type metadata accessor for WidgetRenderingMode(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*sub_10002E8D8())()
{
  type metadata accessor for MediumWorldClockView(0);
  return nullsub_1;
}

uint64_t sub_10002E900@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v3 = type metadata accessor for MediumWorldClockView(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  sub_10000DF30(v1, (uint64_t)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for MediumWorldClockView);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 16) & ~v6;
  v8 = swift_allocObject(&unk_100082668, v7 + v5, v6 | 7);
  result = sub_1000106E0((uint64_t)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v8 + v7, type metadata accessor for MediumWorldClockView);
  *a1 = sub_10004FCA4;
  a1[1] = (uint64_t (*)(uint64_t))v8;
  return result;
}

uint64_t sub_10002E9BC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;

  v4 = type metadata accessor for AccentedWidgetBackground(0);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_1000041D8(&qword_100087EB8);
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_1000041D8(&qword_100087EC0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = GeometryProxy.size.getter(v11);
  v16 = v15;
  *v9 = static Alignment.center.getter(v17);
  v9[1] = v18;
  v19 = sub_1000041D8(&qword_100087EC8);
  v20 = sub_10002EBD8(a1, (uint64_t)v9 + *(int *)(v19 + 44), v14, v16);
  v21 = static Edge.Set.all.getter(v20);
  sub_10001DEA0((uint64_t)v9, (uint64_t)v13, &qword_100087EB8);
  v13[*(int *)(v10 + 36)] = v21;
  sub_1000106A4((uint64_t)v9, &qword_100087EB8);
  if (qword_10008A620 != -1)
    swift_once(&qword_10008A620, sub_100041AD8);
  v22 = qword_10008BED0;
  *v6 = qword_10008BED0;
  v23 = (_QWORD *)((char *)v6 + *(int *)(v4 + 20));
  *v23 = swift_getKeyPath(&unk_10006CBC0);
  v24 = sub_1000041D8(&qword_100085E28);
  swift_storeEnumTagMultiPayload(v23, v24, 0);
  sub_10001DEA0((uint64_t)v13, a2, &qword_100087EC0);
  v25 = sub_1000041D8(&qword_100087ED0);
  sub_1000106E0((uint64_t)v6, a2 + *(int *)(v25 + 36), type metadata accessor for AccentedWidgetBackground);
  swift_retain(v22);
  return sub_1000106A4((uint64_t)v13, &qword_100087EC0);
}

uint64_t sub_10002EBD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v75 = a2;
  v7 = type metadata accessor for MediumWorldClockView(0);
  v69 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v70 = v8;
  v72 = (uint64_t)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000041D8(&qword_100087ED8);
  v10 = __chkstk_darwin(v9);
  v74 = (uint64_t)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v13 = (double *)((char *)&v68 - v12);
  v14 = type metadata accessor for ClockWidgetAccentableOpacity(0);
  __chkstk_darwin(v14);
  v16 = (_OWORD *)((char *)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = type metadata accessor for WidgetRenderingMode(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v68 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_1000041D8(&qword_100087EE0);
  v22 = __chkstk_darwin(v21);
  v73 = (uint64_t)&v68 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v26 = (char *)&v68 - v25;
  v27 = __chkstk_darwin(v24);
  v76 = (uint64_t)&v68 - v28;
  v29 = *(int *)(v7 + 32);
  v71 = a1;
  v30 = a1 + v29;
  static WidgetRenderingMode.accented.getter(v27);
  LOBYTE(v30) = static WidgetRenderingMode.== infix(_:_:)(v30, v20);
  v31 = (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  if ((v30 & 1) != 0)
  {
    v32 = static Color.clear.getter(v31);
    v33 = v32;
  }
  else
  {
    if (qword_10008A620 != -1)
      swift_once(&qword_10008A620, sub_100041AD8);
    v33 = qword_10008BED0;
    v32 = swift_retain(qword_10008BED0);
  }
  v34 = static Edge.Set.all.getter(v32);
  __asm { FMOV            V0.2D, #1.0 }
  *v16 = _Q0;
  v40 = (_QWORD *)((char *)v16 + *(int *)(v14 + 24));
  *v40 = swift_getKeyPath(&unk_10006CBC0);
  v41 = sub_1000041D8(&qword_100085E28);
  swift_storeEnumTagMultiPayload(v40, v41, 0);
  sub_10000DF30((uint64_t)v16, (uint64_t)&v26[*(int *)(v21 + 36)], type metadata accessor for ClockWidgetAccentableOpacity);
  *(_QWORD *)v26 = v33;
  v26[8] = v34;
  sub_10000D330((uint64_t)v16, type metadata accessor for ClockWidgetAccentableOpacity);
  v42 = sub_10001DE5C((uint64_t)v26, v76, &qword_100087EE0);
  v43 = a3 * 0.2727 / 5.0;
  v44 = a3 * 0.7273 * 0.25;
  *(_QWORD *)v13 = static VerticalAlignment.center.getter(v42);
  v13[1] = v43;
  *((_BYTE *)v13 + 16) = 0;
  v45 = sub_1000041D8(&qword_100087EE8);
  v68 = (char *)v13 + *(int *)(v45 + 44);
  v46 = static Font.caption2.getter(v45);
  v47 = type metadata accessor for WorldClockEntry(0);
  v48 = v72;
  v77 = *(_QWORD *)(v71 + *(int *)(v47 + 20));
  v49 = v77;
  sub_10000DF30(v71, v72, type metadata accessor for MediumWorldClockView);
  v50 = *(unsigned __int8 *)(v69 + 80);
  v51 = (v50 + 16) & ~v50;
  v52 = (v70 + v51 + 7) & 0xFFFFFFFFFFFFFFF8;
  v53 = (v52 + 79) & 0xFFFFFFFFFFFFFFF8;
  v54 = (v53 + 15) & 0xFFFFFFFFFFFFFFF8;
  v55 = swift_allocObject(&unk_1000831F0, v54 + 8, v50 | 7);
  sub_1000106E0(v48, v55 + v51, type metadata accessor for MediumWorldClockView);
  v56 = v55 + v52;
  *(double *)v56 = v44;
  *(_QWORD *)(v56 + 8) = v46;
  *(_OWORD *)(v56 + 16) = xmmword_10006CA10;
  *(_OWORD *)(v56 + 32) = xmmword_10006CA30;
  *(_OWORD *)(v56 + 48) = xmmword_10006CA40;
  *(_QWORD *)(v56 + 64) = 0x3FECCCCCCCCCCCCDLL;
  *(double *)(v55 + v53) = v44;
  *(double *)(v55 + v54) = a4 * 0.7;
  swift_bridgeObjectRetain(v49);
  v57 = sub_1000041D8(&qword_100087EF0);
  v58 = sub_1000041D8(&qword_100087EF8);
  v59 = sub_10001DDB4(&qword_100087F00, &qword_100087EF0, (uint64_t)&protocol conformance descriptor for [A]);
  v60 = sub_100066FC4();
  v61 = sub_10000D36C(&qword_100087F28, type metadata accessor for WorldClockCity, (uint64_t)&unk_10006B288);
  ForEach<>.init(_:content:)(&v77, sub_100066F4C, v55, v57, &type metadata for String, v58, v59, v60, v61);
  v62 = v76;
  v63 = v73;
  sub_10001DEA0(v76, v73, &qword_100087EE0);
  v64 = v74;
  sub_10001DEA0((uint64_t)v13, v74, &qword_100087ED8);
  v65 = v75;
  sub_10001DEA0(v63, v75, &qword_100087EE0);
  v66 = sub_1000041D8(&qword_100087F30);
  sub_10001DEA0(v64, v65 + *(int *)(v66 + 48), &qword_100087ED8);
  sub_1000106A4((uint64_t)v13, &qword_100087ED8);
  sub_1000106A4(v62, &qword_100087EE0);
  sub_1000106A4(v64, &qword_100087ED8);
  return sub_1000106A4(v63, &qword_100087EE0);
}

uint64_t sub_10002F138()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = type metadata accessor for WidgetRenderingMode(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for MediumWorldClockView(0);
  v6 = v0 + *(int *)(v5 + 32);
  static WidgetRenderingMode.accented.getter(v5);
  LOBYTE(v6) = static WidgetRenderingMode.== infix(_:_:)(v6, v4);
  v7 = (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  if ((v6 & 1) != 0)
    return static Color.clear.getter(v7);
  if (qword_10008A620 != -1)
    swift_once(&qword_10008A620, sub_100041AD8);
  return swift_retain(qword_10008BED0);
}

uint64_t sub_10002F20C(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;

  v8 = type metadata accessor for ClockWidgetAccentableOpacity(0);
  v9 = __chkstk_darwin(v8);
  v11 = (double *)((char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v11 = a3;
  v11[1] = a4;
  v12 = (_QWORD *)((char *)v11 + *(int *)(v9 + 24));
  *v12 = swift_getKeyPath(&unk_10006CBC0);
  v13 = sub_1000041D8(&qword_100085E28);
  swift_storeEnumTagMultiPayload(v12, v13, 0);
  View.modifier<A>(_:)(v11, a1, v8, a2);
  return sub_10000D330((uint64_t)v11, type metadata accessor for ClockWidgetAccentableOpacity);
}

void *sub_10002F2F8()
{
  return &unk_10006CB28;
}

void *sub_10002F304()
{
  return &unk_10006CB20;
}

void *sub_10002F310()
{
  return &unk_10006CB18;
}

void *sub_10002F31C()
{
  return &unk_10006CB30;
}

double sub_10002F32C()
{
  return 74.0;
}

double sub_10002F33C()
{
  return 112.0;
}

double sub_10002F348()
{
  return 3.5;
}

double sub_10002F350()
{
  return 0.9;
}

uint64_t sub_10002F35C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>, double a7@<D4>, double a8@<D5>, double a9@<D6>, double a10@<D7>)
{
  *(double *)a2 = a3;
  *(_QWORD *)(a2 + 8) = result;
  *(double *)(a2 + 16) = a4;
  *(double *)(a2 + 24) = a5;
  *(double *)(a2 + 32) = a6;
  *(double *)(a2 + 40) = a7;
  *(double *)(a2 + 48) = a8;
  *(double *)(a2 + 56) = a9;
  *(double *)(a2 + 64) = a10;
  return result;
}

uint64_t sub_10002F378@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  int *v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  int *v54;
  char v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _OWORD *v66;
  __int128 v67;
  unint64_t v68;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;

  v79 = a4;
  v77 = sub_1000041D8(&qword_100087F38);
  __chkstk_darwin(v77);
  v78 = (uint64_t)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for WidgetRenderingMode(0);
  v72 = *(_QWORD *)(v12 - 8);
  v73 = v12;
  __chkstk_darwin(v12);
  v71 = (char *)&v70 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for WorldClockCity(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (int *)type metadata accessor for MediumClockFaceView(0);
  __chkstk_darwin(v18);
  v20 = (uint64_t *)((char *)&v70 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v76 = sub_1000041D8(&qword_100087F18);
  v21 = __chkstk_darwin(v76);
  v74 = (uint64_t)&v70 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v75 = (uint64_t)&v70 - v23;
  v24 = *(_QWORD *)(a2 + *(int *)(type metadata accessor for WorldClockEntry(0) + 20));
  v25 = *(_QWORD *)(v24 + 16);
  if (v25)
  {
    v26 = v24 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
    v27 = *(_QWORD *)(v15 + 72);
    swift_bridgeObjectRetain(v24);
    while ((sub_100008D54(v26, a1) & 1) == 0)
    {
      v26 += v27;
      if (!--v25)
      {
        swift_bridgeObjectRelease(v24);
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease(v24);
    sub_10000DF30(a1, (uint64_t)v17, type metadata accessor for WorldClockCity);
    *((_QWORD *)&v81 + 1) = &type metadata for MediumSizeDimentions;
    *(_QWORD *)&v82 = &off_100082930;
    v51 = swift_allocObject(&unk_100083218, 88, 7);
    *(_QWORD *)&v80 = v51;
    v52 = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(v51 + 48) = *(_OWORD *)(a3 + 32);
    *(_OWORD *)(v51 + 64) = v52;
    *(_QWORD *)(v51 + 80) = *(_QWORD *)(a3 + 64);
    v53 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)(v51 + 16) = *(_OWORD *)a3;
    *(_OWORD *)(v51 + 32) = v53;
    v54 = (int *)type metadata accessor for MediumWorldClockView(0);
    v55 = *(_BYTE *)(a2 + v54[5]);
    v56 = *(_BYTE *)(a2 + v54[7]);
    v57 = a2 + v54[8];
    v59 = v71;
    v58 = v72;
    v60 = v73;
    (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v71, v57, v73);
    *v20 = swift_getKeyPath(&unk_10006CBF0);
    v61 = sub_1000041D8(&qword_100085E48);
    swift_storeEnumTagMultiPayload(v20, v61, 0);
    sub_1000106E0((uint64_t)v17, (uint64_t)v20 + v18[5], type metadata accessor for WorldClockCity);
    sub_10003928C(&v80, (uint64_t)v20 + v18[6]);
    *((_BYTE *)v20 + v18[7]) = v55;
    *((_BYTE *)v20 + v18[8]) = 0;
    *(_QWORD *)((char *)v20 + v18[9]) = 0x3FE199999999999ALL;
    *((_BYTE *)v20 + v18[10]) = v56;
    (*(void (**)(char *, char *, uint64_t))(v58 + 32))((char *)v20 + v18[11], v59, v60);
    v62 = sub_1000667B4(a3);
    v63 = static Alignment.center.getter(v62);
    _FrameLayout.init(width:height:alignment:)(&v80, *(_QWORD *)&a5, 0, *(_QWORD *)&a6, 0, v63, v64);
    v65 = v74;
    sub_10000DF30((uint64_t)v20, v74, type metadata accessor for MediumClockFaceView);
    v43 = v76;
    v66 = (_OWORD *)(v65 + *(int *)(v76 + 36));
    v67 = v81;
    *v66 = v80;
    v66[1] = v67;
    v66[2] = v82;
    sub_10000D330((uint64_t)v20, type metadata accessor for MediumClockFaceView);
    v46 = v75;
    sub_10001DE5C(v65, v75, &qword_100087F18);
    v47 = v78;
    sub_10001DEA0(v46, v78, &qword_100087F18);
    v48 = v47;
    v49 = v77;
    v50 = 0;
  }
  else
  {
LABEL_6:
    sub_100004FA0((uint64_t)v17);
    *((_QWORD *)&v81 + 1) = &type metadata for MediumSizeDimentions;
    *(_QWORD *)&v82 = &off_100082930;
    v28 = swift_allocObject(&unk_100083218, 88, 7);
    *(_QWORD *)&v80 = v28;
    v29 = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(v28 + 48) = *(_OWORD *)(a3 + 32);
    *(_OWORD *)(v28 + 64) = v29;
    *(_QWORD *)(v28 + 80) = *(_QWORD *)(a3 + 64);
    v30 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)(v28 + 16) = *(_OWORD *)a3;
    *(_OWORD *)(v28 + 32) = v30;
    v31 = (int *)type metadata accessor for MediumWorldClockView(0);
    v32 = *(_BYTE *)(a2 + v31[5]);
    v33 = *(_BYTE *)(a2 + v31[7]);
    v34 = a2 + v31[8];
    v36 = v71;
    v35 = v72;
    v37 = v73;
    (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v71, v34, v73);
    *v20 = swift_getKeyPath(&unk_10006CBF0);
    v38 = sub_1000041D8(&qword_100085E48);
    swift_storeEnumTagMultiPayload(v20, v38, 0);
    sub_1000106E0((uint64_t)v17, (uint64_t)v20 + v18[5], type metadata accessor for WorldClockCity);
    sub_10003928C(&v80, (uint64_t)v20 + v18[6]);
    *((_BYTE *)v20 + v18[7]) = v32;
    *((_BYTE *)v20 + v18[8]) = 1;
    *(_QWORD *)((char *)v20 + v18[9]) = 0x3FE199999999999ALL;
    *((_BYTE *)v20 + v18[10]) = v33;
    (*(void (**)(char *, char *, uint64_t))(v35 + 32))((char *)v20 + v18[11], v36, v37);
    v39 = sub_1000667B4(a3);
    v40 = static Alignment.center.getter(v39);
    _FrameLayout.init(width:height:alignment:)(&v80, *(_QWORD *)&a5, 0, *(_QWORD *)&a6, 0, v40, v41);
    v42 = v74;
    sub_10000DF30((uint64_t)v20, v74, type metadata accessor for MediumClockFaceView);
    v43 = v76;
    v44 = (_OWORD *)(v42 + *(int *)(v76 + 36));
    v45 = v81;
    *v44 = v80;
    v44[1] = v45;
    v44[2] = v82;
    sub_10000D330((uint64_t)v20, type metadata accessor for MediumClockFaceView);
    v46 = v75;
    sub_10001DE5C(v42, v75, &qword_100087F18);
    v47 = v78;
    sub_10001DEA0(v46, v78, &qword_100087F18);
    v48 = v47;
    v49 = v77;
    v50 = 1;
  }
  swift_storeEnumTagMultiPayload(v48, v49, v50);
  v68 = sub_100067028();
  _ConditionalContent<>.init(storage:)(v47, v43, v43, v68, v68);
  return sub_1000106A4(v46, &qword_100087F18);
}

uint64_t sub_10002F960@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  int *v15;
  uint64_t v16;
  uint64_t v17;

  sub_10001DE5C(a1, a8, &qword_100085AD0);
  v15 = (int *)type metadata accessor for MediumClockFaceView(0);
  sub_1000106E0(a2, a8 + v15[5], type metadata accessor for WorldClockCity);
  sub_10003928C(a3, a8 + v15[6]);
  *(_BYTE *)(a8 + v15[7]) = a4;
  *(_BYTE *)(a8 + v15[8]) = a5;
  *(_QWORD *)(a8 + v15[9]) = 0x3FE199999999999ALL;
  *(_BYTE *)(a8 + v15[10]) = a6;
  v16 = a8 + v15[11];
  v17 = type metadata accessor for WidgetRenderingMode(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v16, a7, v17);
}

uint64_t sub_10002FA40@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(uint64_t a1)@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(a1);
  sub_10000DF30(v2, (uint64_t)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for MediumWorldClockView);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 16) & ~v6;
  v8 = swift_allocObject(&unk_1000830B0, v7 + v5, v6 | 7);
  result = sub_1000106E0((uint64_t)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v8 + v7, type metadata accessor for MediumWorldClockView);
  *a2 = sub_10004FCA4;
  a2[1] = (uint64_t (*)(uint64_t))v8;
  return result;
}

uint64_t sub_10002FAF4@<X0>(uint64_t a1@<X8>)
{
  return sub_100039D54(type metadata accessor for MediumClockFaceView, (uint64_t)type metadata accessor for WorldClockCity, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10000DF30, a1);
}

uint64_t sub_10002FB10(uint64_t a1)
{
  return sub_10002FB2C(a1, type metadata accessor for MediumClockFaceView, (uint64_t)type metadata accessor for WorldClockCity, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100017398);
}

uint64_t sub_10002FB2C(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v8;

  v8 = a2(0);
  return a4(a1, v4 + *(int *)(v8 + 20), a3);
}

uint64_t (*sub_10002FB74())()
{
  type metadata accessor for MediumClockFaceView(0);
  return nullsub_1;
}

uint64_t sub_10002FB9C@<X0>(uint64_t a1@<X8>)
{
  return sub_10002FBA8(type metadata accessor for MediumClockFaceView, a1);
}

uint64_t sub_10002FBA8@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = v2 + *(int *)(a1(0) + 24);
  return sub_10004FB84(v4, a2);
}

uint64_t sub_10002FBDC()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for MediumClockFaceView(0) + 28));
}

uint64_t sub_10002FBFC(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for MediumClockFaceView(0);
  *(_BYTE *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*sub_10002FC28())()
{
  type metadata accessor for MediumClockFaceView(0);
  return nullsub_1;
}

uint64_t sub_10002FC50()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for MediumClockFaceView(0) + 32));
}

uint64_t sub_10002FC70(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for MediumClockFaceView(0);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*sub_10002FC9C())()
{
  type metadata accessor for MediumClockFaceView(0);
  return nullsub_1;
}

double sub_10002FCC4()
{
  return 0.55;
}

double sub_10002FCD0()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for MediumClockFaceView(0) + 36));
}

uint64_t sub_10002FCF0()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for MediumClockFaceView(0) + 40));
}

uint64_t sub_10002FD10@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for MediumClockFaceView(0) + 44);
  v4 = type metadata accessor for WidgetRenderingMode(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_10002FD58@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t KeyPath;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t OpaqueTypeConformance2;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[2];

  v2 = v1;
  v49 = a1;
  v3 = type metadata accessor for AccessibilityChildBehavior(0);
  v46 = *(_QWORD *)(v3 - 8);
  v47 = v3;
  __chkstk_darwin(v3);
  v45 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for WidgetRenderingMode(0);
  v41 = *(_QWORD *)(v5 - 8);
  v42 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000041D8(&qword_100085F38);
  __chkstk_darwin(v8);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000041D8(&qword_100085FA0);
  __chkstk_darwin(v11);
  v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000041D8(&qword_100085FA8);
  __chkstk_darwin(v14);
  v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1000041D8(&qword_100085FB0);
  v43 = *(_QWORD *)(v17 - 8);
  v44 = v17;
  __chkstk_darwin(v17);
  v19 = (char *)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_1000041D8(&qword_100085FB8);
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v40 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v13 = static HorizontalAlignment.center.getter(v21);
  *((_QWORD *)v13 + 1) = 0;
  v13[16] = 1;
  v24 = sub_1000041D8(&qword_100085FC0);
  sub_100030100(v2, (uint64_t)&v13[*(int *)(v24 + 44)]);
  v25 = type metadata accessor for MediumClockFaceView(0);
  v26 = *(int *)(v25 + 44);
  v48 = v2;
  v27 = v2 + v26;
  static WidgetRenderingMode.fullColor.getter(v25);
  LOBYTE(v27) = static WidgetRenderingMode.== infix(_:_:)(v27, v7);
  v28 = (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v7, v42);
  if ((v27 & 1) != 0)
    static SymbolRenderingMode.multicolor.getter(v28);
  else
    static SymbolRenderingMode.monochrome.getter(v28);
  v29 = type metadata accessor for SymbolRenderingMode(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v10, 0, 1, v29);
  KeyPath = swift_getKeyPath(&unk_10006CCB0);
  v31 = (uint64_t *)&v16[*(int *)(v14 + 36)];
  v32 = sub_1000041D8(&qword_100085F90);
  sub_10001DEA0((uint64_t)v10, (uint64_t)v31 + *(int *)(v32 + 28), &qword_100085F38);
  *v31 = KeyPath;
  sub_10001DEA0((uint64_t)v13, (uint64_t)v16, &qword_100085FA0);
  sub_1000106A4((uint64_t)v10, &qword_100085F38);
  v33 = sub_1000106A4((uint64_t)v13, &qword_100085FA0);
  v34 = v45;
  static AccessibilityChildBehavior.combine.getter(v33);
  v35 = sub_10004FCE0();
  View.accessibilityElement(children:)(v34, v14, v35);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v34, v47);
  sub_1000106A4((uint64_t)v16, &qword_100085FA8);
  v36 = *(unsigned __int8 *)(v48 + *(int *)(v25 + 32));
  v50[0] = v14;
  v50[1] = v35;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v50, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v38 = v44;
  View.accessibilityHidden(_:)(v36, v44, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v19, v38);
  return sub_10001DE5C((uint64_t)v23, v49, &qword_100085FB8);
}

uint64_t sub_100030100@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  void (*v49)(uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  double v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  char v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  double v78;
  double v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  void (*v87)(uint64_t, uint64_t);
  uint64_t v88;
  uint64_t KeyPath;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(uint64_t, uint64_t);
  uint64_t *v96;
  uint64_t v97;
  _OWORD *v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  double v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  char v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  double v140;
  double v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t *v163;
  char v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char v172;
  uint64_t v173;
  double v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  double v184;
  double v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  _QWORD *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  uint64_t v230;
  uint64_t *v231;
  uint64_t v232;
  uint64_t v233;
  char *v234;
  uint64_t v235;
  uint64_t v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  unsigned int v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  char *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  char *v259;
  void (*v260)(char *);
  void (*v261)(uint64_t, uint64_t);
  uint64_t v262;
  uint64_t v263;
  char *v264;
  uint64_t v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  _OWORD v333[9];

  v256 = a2;
  v246 = type metadata accessor for ClockWidgetAccentableForegroundColor(0);
  __chkstk_darwin(v246);
  v251 = (uint64_t *)((char *)&v222 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = sub_1000041D8(&qword_100087E18);
  __chkstk_darwin(v4);
  v247 = (char *)&v222 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v243 = sub_1000041D8(&qword_100087E20);
  __chkstk_darwin(v243);
  v248 = (uint64_t)&v222 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v244 = sub_1000041D8(&qword_100087E28);
  __chkstk_darwin(v244);
  v250 = (uint64_t)&v222 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v245 = sub_1000041D8(&qword_100087E30);
  v8 = __chkstk_darwin(v245);
  v224 = (uint64_t)&v222 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v223 = (uint64_t)&v222 - v11;
  v12 = __chkstk_darwin(v10);
  v253 = (uint64_t)&v222 - v13;
  __chkstk_darwin(v12);
  v252 = (uint64_t)&v222 - v14;
  v15 = sub_1000041D8(&qword_100087E38);
  v16 = __chkstk_darwin(v15);
  v254 = (uint64_t)&v222 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v255 = (uint64_t)&v222 - v18;
  v232 = sub_1000041D8(&qword_1000860A8);
  __chkstk_darwin(v232);
  v231 = (uint64_t *)((char *)&v222 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = type metadata accessor for ContentSizeCategory(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = __chkstk_darwin(v20);
  v24 = (char *)&v222 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v26 = (char *)&v222 - v25;
  v230 = sub_1000041D8(&qword_100087E40);
  __chkstk_darwin(v230);
  v229 = (char *)&v222 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v236 = sub_1000041D8(&qword_100087E48);
  __chkstk_darwin(v236);
  v233 = (uint64_t)&v222 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v238 = sub_1000041D8(&qword_100087E50);
  __chkstk_darwin(v238);
  v235 = (uint64_t)&v222 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v239 = sub_1000041D8(&qword_100087E58);
  v30 = __chkstk_darwin(v239);
  v249 = (uint64_t)&v222 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __chkstk_darwin(v30);
  v234 = (char *)&v222 - v33;
  v34 = __chkstk_darwin(v32);
  v237 = (char *)&v222 - v35;
  __chkstk_darwin(v34);
  v263 = (uint64_t)&v222 - v36;
  v37 = sub_1000041D8(&qword_100087E60);
  v38 = __chkstk_darwin(v37);
  v242 = (uint64_t)&v222 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __chkstk_darwin(v38);
  v42 = (_QWORD **)((char *)&v222 - v41);
  v43 = __chkstk_darwin(v40);
  v45 = (char *)&v222 - v44;
  *v42 = static Alignment.center.getter(v43);
  v42[1] = v46;
  v47 = sub_1000041D8(&qword_100087E68);
  sub_1000314EC(a1, (uint64_t)v42 + *(int *)(v47 + 44));
  v241 = v45;
  sub_10001DE5C((uint64_t)v42, (uint64_t)v45, &qword_100087E60);
  v259 = (char *)0x800000010006F3D0;
  v264 = v26;
  v265 = a1;
  sub_100025364(&qword_100085E48, (uint64_t (*)(_QWORD))&type metadata accessor for ContentSizeCategory, (char *)0xD000000000000013, (char *)0x800000010006F3D0, (uint64_t)v26);
  v226 = v24;
  v227 = v21;
  v260 = *(void (**)(char *))(v21 + 104);
  v240 = enum case for ContentSizeCategory.extraExtraLarge(_:);
  v260(v24);
  v48 = sub_10004FD90((uint64_t)v26, (uint64_t)v24);
  v49 = *(void (**)(_QWORD, _QWORD))(v21 + 8);
  v261 = v49;
  v262 = v20;
  v49(v24, v20);
  v49(v26, v20);
  v50 = type metadata accessor for MediumClockFaceView(0);
  v51 = *(int *)(v50 + 20);
  v52 = v50;
  v257 = v50;
  v53 = a1 + v51;
  v54 = type metadata accessor for WorldClockCity(0);
  v228 = v54;
  v55 = 24;
  if (v48)
    v55 = 28;
  v56 = (uint64_t *)(v53 + *(int *)(v54 + v55));
  v57 = *v56;
  v58 = swift_bridgeObjectRetain(v56[1]);
  *(_QWORD *)&v323 = v57;
  *((_QWORD *)&v323 + 1) = v58;
  v258 = sub_10000D9FC();
  v59 = Text.init<A>(_:)(&v323, &type metadata for String, v258);
  v61 = v60;
  v63 = v62;
  v65 = v64 & 1;
  v66 = static Font.Weight.semibold.getter();
  v67 = Text.fontWeight(_:)(*(_QWORD *)&v66, 0, v59, v61, v65, v63);
  v69 = v68;
  v71 = v70;
  v73 = v72 & 1;
  sub_100010E24(v59, v61, v65);
  swift_bridgeObjectRelease(v63);
  v74 = (_QWORD *)(v265 + *(int *)(v52 + 24));
  v75 = v74[3];
  v76 = v74[4];
  sub_100050938(v74, v75);
  v77 = (*(uint64_t (**)(uint64_t, uint64_t))(v76 + 24))(v75, v76);
  v79 = v78;
  v80 = static Alignment.center.getter(v77);
  sub_10002775C(0.0, 1, 0.0, 1, v79, 0, 0.0, 1, (uint64_t)v333, 0.0, 1, 0.0, 1, v80, v81, v67, v69, v73, v71);
  sub_100010E24(v67, v69, v73);
  swift_bridgeObjectRelease(v71);
  v320 = v333[6];
  v321 = v333[7];
  v322 = v333[8];
  v316 = v333[2];
  v317 = v333[3];
  v319 = v333[5];
  v318 = v333[4];
  v315 = v333[1];
  v314 = v333[0];
  v82 = v74[3];
  v83 = v74[4];
  sub_100050938(v74, v82);
  v84 = (uint64_t)v264;
  v85 = v259;
  sub_100025364(&qword_100085E48, (uint64_t (*)(_QWORD))&type metadata accessor for ContentSizeCategory, (char *)0xD000000000000013, v259, (uint64_t)v264);
  v86 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v83 + 208))(v84, v82, v83);
  v87 = v261;
  v88 = v262;
  v261(v84, v262);
  KeyPath = swift_getKeyPath(&unk_10006CC20);
  v329 = v320;
  v330 = v321;
  v331 = v322;
  v325 = v316;
  v326 = v317;
  v328 = v319;
  v327 = v318;
  v324 = v315;
  v323 = v314;
  *(_QWORD *)&v332 = KeyPath;
  *((_QWORD *)&v332 + 1) = v86;
  v225 = swift_getKeyPath(&unk_10006CBF0);
  v90 = v74[3];
  v91 = v74[4];
  v222 = v74;
  sub_100050938(v74, v90);
  v92 = (uint64_t)v226;
  sub_100025364(&qword_100085E48, (uint64_t (*)(_QWORD))&type metadata accessor for ContentSizeCategory, (char *)0xD000000000000013, v85, (uint64_t)v226);
  v93 = (uint64_t)v264;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v91 + 200))(v92, v90, v91);
  v94 = v88;
  v95 = v87;
  v87(v92, v88);
  v96 = v231;
  v97 = v93;
  (*(void (**)(char *, uint64_t, uint64_t))(v227 + 16))((char *)v231 + *(int *)(v232 + 28), v93, v94);
  *v96 = v225;
  v98 = v229;
  sub_10001DEA0((uint64_t)v96, (uint64_t)&v229[*(int *)(v230 + 36)], &qword_1000860A8);
  v99 = v330;
  v98[6] = v329;
  v98[7] = v99;
  v100 = v332;
  v98[8] = v331;
  v98[9] = v100;
  v101 = v326;
  v98[2] = v325;
  v98[3] = v101;
  v102 = v328;
  v98[4] = v327;
  v98[5] = v102;
  v103 = v324;
  *v98 = v323;
  v98[1] = v103;
  sub_100066C08((uint64_t)&v323);
  sub_1000106A4((uint64_t)v96, &qword_1000860A8);
  v95(v97, v94);
  v104 = sub_100066C60((uint64_t)&v323);
  v105 = static Color.white.getter(v104);
  v106 = swift_getKeyPath(&unk_10006CC50);
  v107 = v233;
  sub_10001DEA0((uint64_t)v98, v233, &qword_100087E40);
  v108 = (uint64_t *)(v107 + *(int *)(v236 + 36));
  *v108 = v106;
  v108[1] = v105;
  sub_1000106A4((uint64_t)v98, &qword_100087E40);
  v109 = swift_getKeyPath(&unk_10006CD10);
  v110 = v235;
  sub_10001DEA0(v107, v235, &qword_100087E48);
  v111 = v238;
  v112 = v110 + *(int *)(v238 + 36);
  *(_QWORD *)v112 = v109;
  *(_QWORD *)(v112 + 8) = 1;
  *(_BYTE *)(v112 + 16) = 0;
  sub_1000106A4(v107, &qword_100087E48);
  v113 = sub_100066CB8();
  v114 = (uint64_t)v234;
  View.accessibilitySortPriority(_:)(v111, v113, 1.0);
  sub_1000106A4(v110, &qword_100087E50);
  v115 = (char *)(v265 + *(int *)(v257 + 20));
  v116 = &v115[*(int *)(v228 + 24)];
  v118 = *(_QWORD *)v116;
  v117 = *((_QWORD *)v116 + 1);
  *(_QWORD *)&v304 = v118;
  *((_QWORD *)&v304 + 1) = v117;
  v119 = (uint64_t)v237;
  ModifiedContent<>.accessibilityLabel<A>(_:)(&v304, v239, &type metadata for String, v258);
  sub_1000106A4(v114, &qword_100087E58);
  sub_10001DE5C(v119, v263, &qword_100087E58);
  sub_100025364(&qword_100085E48, (uint64_t (*)(_QWORD))&type metadata accessor for ContentSizeCategory, (char *)0xD000000000000013, v259, v97);
  ((void (*)(uint64_t, _QWORD, uint64_t))v260)(v92, enum case for ContentSizeCategory.accessibilityLarge(_:), v94);
  LOBYTE(v109) = sub_100050118(v97, v92);
  v95(v92, v94);
  v95(v97, v94);
  if ((v109 & 1) != 0)
  {
    v120 = sub_100007C14();
    v122 = v121;
    v124 = v123;
    v126 = v125 & 1;
    v127 = static Font.Weight.semibold.getter();
    v128 = Text.fontWeight(_:)(*(_QWORD *)&v127, 0, v120, v122, v126, v124);
    v237 = v115;
    v129 = v128;
    v131 = v130;
    v133 = v132;
    v135 = v134 & 1;
    sub_100010E24(v120, v122, v126);
    swift_bridgeObjectRelease(v124);
    v136 = v222;
    v137 = v222[3];
    v138 = v222[4];
    sub_100050938(v222, v137);
    v139 = (*(uint64_t (**)(uint64_t, uint64_t))(v138 + 24))(v137, v138);
    v141 = v140;
    v142 = static Alignment.center.getter(v139);
    sub_10002775C(0.0, 1, 0.0, 1, v141, 0, 0.0, 1, (uint64_t)&v304, 0.0, 1, 0.0, 1, v142, v143, v129, v131, v135, v133);
    sub_100010E24(v129, v131, v135);
    swift_bridgeObjectRelease(v133);
    v301 = v310;
    v302 = v311;
    v303 = v312;
    v297 = v306;
    v298 = v307;
    v299 = v308;
    v300 = v309;
    v295 = v304;
    v296 = v305;
    v144 = v136[3];
    v145 = v136[4];
    sub_100050938(v136, v144);
    v146 = (*(uint64_t (**)(uint64_t, uint64_t))(v145 + 48))(v144, v145);
    v147 = swift_getKeyPath(&unk_10006CC20);
    v291 = v301;
    v292 = v302;
    v293 = v303;
    v287 = v297;
    v288 = v298;
    v289 = v299;
    v290 = v300;
    v285 = v295;
    v286 = v296;
    *(_QWORD *)&v294 = v147;
    *((_QWORD *)&v294 + 1) = v146;
    v148 = (uint64_t)v264;
    v149 = v262;
    ((void (*)(char *, _QWORD, uint64_t))v260)(v264, v240, v262);
    v150 = (char *)sub_1000041D8(&qword_100087E90);
    v259 = v150;
    v239 = sub_100050D28(&qword_100087E88, &qword_100087E90, &qword_100086320, &qword_100086328);
    v151 = (uint64_t)v247;
    sub_100022098(v148, (uint64_t)v150, v239);
    v261(v148, v149);
    v310 = v291;
    v311 = v292;
    v312 = v293;
    v313 = v294;
    v307 = v288;
    v308 = v289;
    v309 = v290;
    v304 = v285;
    v305 = v286;
    v306 = v287;
    v152 = sub_100066C60((uint64_t)&v304);
    v153 = static Color.gray.getter(v152);
    v257 = *(int *)(v257 + 36);
    v154 = *(_QWORD *)(v265 + v257);
    v155 = (uint64_t)v251;
    *v251 = v153;
    *(_QWORD *)(v155 + 8) = v154;
    v156 = (_QWORD *)(v155 + *(int *)(v246 + 24));
    *v156 = swift_getKeyPath(&unk_10006CBC0);
    v238 = sub_1000041D8(&qword_100085E28);
    swift_storeEnumTagMultiPayload(v156, v238, 0);
    v157 = v248;
    sub_10001DEA0(v151, v248, &qword_100087E18);
    sub_1000106E0(v155, v157 + *(int *)(v243 + 36), type metadata accessor for ClockWidgetAccentableForegroundColor);
    sub_1000106A4(v151, &qword_100087E18);
    v158 = swift_getKeyPath(&unk_10006CD10);
    v159 = v250;
    sub_10001DEA0(v157, v250, &qword_100087E20);
    v160 = v159 + *(int *)(v244 + 36);
    *(_QWORD *)v160 = v158;
    *(_QWORD *)(v160 + 8) = 1;
    *(_BYTE *)(v160 + 16) = 0;
    sub_1000106A4(v157, &qword_100087E20);
    v161 = swift_getKeyPath(&unk_10006CC80);
    v162 = v253;
    sub_10001DEA0(v159, v253, &qword_100087E28);
    v163 = (uint64_t *)(v162 + *(int *)(v245 + 36));
    *v163 = v161;
    v163[1] = 0x3FE0000000000000;
    sub_1000106A4(v159, &qword_100087E28);
    sub_10001DE5C(v162, v252, &qword_100087E30);
    v164 = sub_10000422C();
    sub_100008208(v164 & 1);
    *(_QWORD *)&v285 = v165;
    *((_QWORD *)&v285 + 1) = v166;
    v167 = Text.init<A>(_:)(&v285, &type metadata for String, v258);
    v169 = v168;
    v171 = v170;
    v173 = v172 & 1;
    v174 = static Font.Weight.semibold.getter();
    v175 = Text.fontWeight(_:)(*(_QWORD *)&v174, 0, v167, v169, v173, v171);
    v177 = v176;
    v179 = v178;
    LOBYTE(v124) = v180 & 1;
    sub_100010E24(v167, v169, v173);
    swift_bridgeObjectRelease(v171);
    v181 = v136[3];
    v182 = v136[4];
    sub_100050938(v136, v181);
    v183 = (*(uint64_t (**)(uint64_t, uint64_t))(v182 + 24))(v181, v182);
    v185 = v184;
    v186 = static Alignment.center.getter(v183);
    sub_10002775C(0.0, 1, 0.0, 1, v185, 0, 0.0, 1, (uint64_t)&v285, 0.0, 1, 0.0, 1, v186, v187, v175, v177, v124, v179);
    sub_100010E24(v175, v177, v124);
    swift_bridgeObjectRelease(v179);
    v282 = v291;
    v283 = v292;
    v284 = v293;
    v278 = v287;
    v279 = v288;
    v280 = v289;
    v281 = v290;
    v276 = v285;
    v277 = v286;
    v188 = v136[3];
    v189 = v136[4];
    sub_100050938(v136, v188);
    v190 = (*(uint64_t (**)(uint64_t, uint64_t))(v189 + 48))(v188, v189);
    v191 = swift_getKeyPath(&unk_10006CC20);
    v272 = v282;
    v273 = v283;
    v274 = v284;
    v268 = v278;
    v269 = v279;
    v270 = v280;
    v271 = v281;
    v266 = v276;
    v267 = v277;
    *(_QWORD *)&v275 = v191;
    *((_QWORD *)&v275 + 1) = v190;
    v192 = (uint64_t)v264;
    v193 = v262;
    ((void (*)(char *, _QWORD, uint64_t))v260)(v264, v240, v262);
    v194 = (uint64_t)v247;
    sub_100022098(v192, (uint64_t)v259, v239);
    v261(v192, v193);
    v291 = v272;
    v292 = v273;
    v293 = v274;
    v294 = v275;
    v287 = v268;
    v288 = v269;
    v289 = v270;
    v290 = v271;
    v285 = v266;
    v286 = v267;
    v195 = sub_100066C60((uint64_t)&v285);
    v196 = static Color.gray.getter(v195);
    v197 = *(_QWORD *)(v265 + v257);
    v198 = (uint64_t)v251;
    *v251 = v196;
    *(_QWORD *)(v198 + 8) = v197;
    v199 = (_QWORD *)(v198 + *(int *)(v246 + 24));
    *v199 = swift_getKeyPath(&unk_10006CBC0);
    swift_storeEnumTagMultiPayload(v199, v238, 0);
    v200 = v248;
    sub_10001DEA0(v194, v248, &qword_100087E18);
    sub_1000106E0(v198, v200 + *(int *)(v243 + 36), type metadata accessor for ClockWidgetAccentableForegroundColor);
    sub_1000106A4(v194, &qword_100087E18);
    v201 = swift_getKeyPath(&unk_10006CD10);
    v202 = v250;
    sub_10001DEA0(v200, v250, &qword_100087E20);
    v203 = v202 + *(int *)(v244 + 36);
    *(_QWORD *)v203 = v201;
    *(_QWORD *)(v203 + 8) = 1;
    *(_BYTE *)(v203 + 16) = 0;
    sub_1000106A4(v200, &qword_100087E20);
    v204 = swift_getKeyPath(&unk_10006CC80);
    v205 = v223;
    sub_10001DEA0(v202, v223, &qword_100087E28);
    v206 = (uint64_t *)(v205 + *(int *)(v245 + 36));
    *v206 = v204;
    v206[1] = 0x3FE0000000000000;
    sub_1000106A4(v202, &qword_100087E28);
    v207 = v253;
    sub_10001DE5C(v205, v253, &qword_100087E30);
    v208 = v252;
    sub_10001DEA0(v252, v205, &qword_100087E30);
    v209 = v224;
    sub_10001DEA0(v207, v224, &qword_100087E30);
    v210 = v254;
    sub_10001DEA0(v205, v254, &qword_100087E30);
    v211 = sub_1000041D8(&qword_100087EA8);
    sub_10001DEA0(v209, v210 + *(int *)(v211 + 48), &qword_100087E30);
    sub_1000106A4(v207, &qword_100087E30);
    sub_1000106A4(v208, &qword_100087E30);
    sub_1000106A4(v209, &qword_100087E30);
    sub_1000106A4(v205, &qword_100087E30);
    v212 = sub_1000041D8(&qword_100087E98);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v212 - 8) + 56))(v210, 0, 1, v212);
    v213 = v255;
    sub_10001DE5C(v210, v255, &qword_100087E38);
  }
  else
  {
    v214 = sub_1000041D8(&qword_100087E98);
    v213 = v255;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v214 - 8) + 56))(v255, 1, 1, v214);
    v210 = v254;
  }
  v215 = (uint64_t)v241;
  v216 = v242;
  sub_10001DEA0((uint64_t)v241, v242, &qword_100087E60);
  v217 = v263;
  v218 = v249;
  sub_10001DEA0(v263, v249, &qword_100087E58);
  sub_10001DEA0(v213, v210, &qword_100087E38);
  v219 = v256;
  sub_10001DEA0(v216, v256, &qword_100087E60);
  v220 = sub_1000041D8(&qword_100087EA0);
  sub_10001DEA0(v218, v219 + *(int *)(v220 + 48), &qword_100087E58);
  sub_10001DEA0(v210, v219 + *(int *)(v220 + 64), &qword_100087E38);
  sub_1000106A4(v213, &qword_100087E38);
  sub_1000106A4(v217, &qword_100087E58);
  sub_1000106A4(v215, &qword_100087E60);
  sub_1000106A4(v210, &qword_100087E38);
  sub_1000106A4(v218, &qword_100087E58);
  return sub_1000106A4(v216, &qword_100087E60);
}

uint64_t sub_1000314EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  char v48;
  int *v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  char v57;
  uint64_t KeyPath;
  uint64_t *v59;
  uint64_t v60;
  char *v61;
  void (*v62)(_QWORD, _QWORD, _QWORD);
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  char v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  int *v84;
  BOOL *v85;
  BOOL *v86;
  BOOL *v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v99;
  int v100;
  _BOOL4 v101;
  uint64_t v102;
  uint64_t (*v103)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  BOOL *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  _QWORD *v118;
  void (*v119)(char *, uint64_t);
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126[3];

  v115 = a2;
  v113 = type metadata accessor for Clock(0);
  v3 = __chkstk_darwin(v113);
  v116 = (uint64_t)&v99 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v110 = (BOOL *)&v99 - v6;
  __chkstk_darwin(v5);
  v114 = (uint64_t)&v99 - v7;
  v8 = sub_1000041D8(&qword_100084810);
  v9 = __chkstk_darwin(v8);
  v123 = (uint64_t)&v99 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v117 = (char *)&v99 - v11;
  v121 = type metadata accessor for TimeZone(0);
  v105 = *(_QWORD *)(v121 - 8);
  v12 = __chkstk_darwin(v121);
  v120 = (uint64_t)&v99 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v118 = (uint64_t *)((char *)&v99 - v14);
  v15 = type metadata accessor for MediumClockFaceView(0);
  v16 = __chkstk_darwin(v15);
  v109 = (char *)&v99 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v107 = (uint64_t)&v99 - v19;
  __chkstk_darwin(v18);
  v108 = (uint64_t)&v99 - v20;
  v21 = type metadata accessor for WidgetRenderingMode(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v99 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = (int *)type metadata accessor for ClockFace(0);
  v26 = __chkstk_darwin(v25);
  v112 = (uint64_t)&v99 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v26);
  v30 = (char *)&v99 - v29;
  __chkstk_darwin(v28);
  v122 = (uint64_t)&v99 - v31;
  v32 = (_QWORD *)(a1 + *(int *)(v15 + 24));
  v34 = v32[3];
  v33 = v32[4];
  v106 = v32;
  sub_100050938(v32, v34);
  v35 = v34;
  v36 = (int *)v15;
  v37 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 24))(v35, v33);
  v39 = v38;
  v40 = *(int *)(v15 + 44);
  v41 = a1;
  v42 = v108;
  v43 = v24;
  v44 = v41 + v40;
  static WidgetRenderingMode.vibrant.getter(v37);
  v124 = v44;
  LOBYTE(v44) = static WidgetRenderingMode.== infix(_:_:)(v44, v24);
  v111 = v22;
  v45 = *(void (**)(char *, uint64_t))(v22 + 8);
  v125 = v21;
  v46 = v21;
  v47 = v41;
  v119 = v45;
  v45(v24, v46);
  sub_10000DF30(v41, v42, type metadata accessor for MediumClockFaceView);
  if ((v44 & 1) != 0)
  {
    v48 = *(_BYTE *)(v42 + v36[10]);
    sub_10000D330(v42, type metadata accessor for MediumClockFaceView);
    v49 = v36;
    if ((v48 & 1) != 0)
    {
      v101 = 0;
      goto LABEL_6;
    }
  }
  else
  {
    sub_10000D330(v42, type metadata accessor for MediumClockFaceView);
    v49 = v36;
  }
  v101 = sub_1000071D4();
LABEL_6:
  v50 = v41 + v49[5];
  sub_100008130((uint64_t)v118);
  v104 = v49[8];
  v100 = *(unsigned __int8 *)(v41 + v104);
  v102 = *(int *)(type metadata accessor for WorldClockCity(0) + 20);
  v51 = *(_BYTE *)(v50 + v102);
  v52 = type metadata accessor for Date(0);
  v53 = *(_QWORD *)(v52 - 8);
  v54 = 1;
  if ((v51 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v117, v50, v52);
    v54 = 0;
  }
  v99 = v53;
  v55 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v53 + 56);
  v56 = (uint64_t)v117;
  v103 = v55;
  v55((uint64_t)v117, v54, 1, v52);
  v108 = v49[10];
  v57 = *(_BYTE *)(v47 + v108);
  KeyPath = swift_getKeyPath(&unk_10006CBC0);
  v59 = (uint64_t *)&v30[v25[14]];
  *v59 = KeyPath;
  v60 = sub_1000041D8(&qword_100085E28);
  swift_storeEnumTagMultiPayload(v59, v60, 0);
  *(_QWORD *)v30 = v39;
  v30[8] = v101;
  v61 = &v30[v25[6]];
  v62 = (void (*)(_QWORD, _QWORD, _QWORD))v118;
  v118 = *(_QWORD **)(v105 + 32);
  ((void (*)(char *, _QWORD, uint64_t))v118)(v61, v62, v121);
  v30[v25[7]] = v100;
  v30[v25[8]] = 0;
  sub_10001DE5C(v56, (uint64_t)&v30[v25[9]], &qword_100084810);
  v30[v25[10]] = 1;
  v30[v25[11]] = 0;
  v63 = v25[12];
  v30[v63] = sub_100022220();
  v30[v25[13]] = v57;
  v64 = sub_1000106E0((uint64_t)v30, v122, type metadata accessor for ClockFace);
  static WidgetRenderingMode.vibrant.getter(v64);
  v65 = static WidgetRenderingMode.== infix(_:_:)(v124, v43);
  v119(v43, v125);
  v66 = v107;
  sub_10000DF30(v47, v107, type metadata accessor for MediumClockFaceView);
  if ((v65 & 1) != 0)
  {
    v67 = *(_BYTE *)(v66 + v49[10]);
    sub_10000D330(v66, type metadata accessor for MediumClockFaceView);
    v68 = v123;
    if ((v67 & 1) != 0)
    {
      v69 = 0;
      goto LABEL_13;
    }
  }
  else
  {
    sub_10000D330(v66, type metadata accessor for MediumClockFaceView);
    v68 = v123;
  }
  v69 = sub_1000071D4();
LABEL_13:
  v70 = (uint64_t)v109;
  sub_100008130(v120);
  sub_10004FB84((uint64_t)v106, (uint64_t)v126);
  v71 = *(_BYTE *)(v47 + v49[7]);
  if ((*(_BYTE *)(v50 + v102) & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v99 + 16))(v68, v50, v52);
    v72 = 0;
  }
  else
  {
    v72 = 1;
  }
  v73 = v103(v68, v72, 1, v52);
  v74 = *(_BYTE *)(v47 + v104);
  static WidgetRenderingMode.vibrant.getter(v73);
  v75 = static WidgetRenderingMode.== infix(_:_:)(v124, v43);
  v119(v43, v125);
  sub_10000DF30(v47, v70, type metadata accessor for MediumClockFaceView);
  if ((v75 & 1) != 0)
  {
    v76 = *(_BYTE *)(v70 + v49[10]);
    sub_10000D330(v70, type metadata accessor for MediumClockFaceView);
    if ((v76 & 1) == 0 && sub_1000071D4())
      goto LABEL_19;
  }
  else
  {
    sub_10000D330(v70, type metadata accessor for MediumClockFaceView);
    if (sub_1000071D4())
    {
LABEL_19:
      if (qword_10008A678 != -1)
        swift_once(&qword_10008A678, sub_10004204C);
      v77 = qword_10008BF28;
      v78 = qword_10008A668;
      swift_retain(qword_10008BF28);
      if (v78 != -1)
      {
        swift_once(&qword_10008A668, sub_100041F44);
        v81 = qword_10008BF28;
        v79 = &qword_10008BF18;
        goto LABEL_29;
      }
      v79 = &qword_10008BF18;
      goto LABEL_28;
    }
  }
  if (qword_10008A648 != -1)
    swift_once(&qword_10008A648, sub_100041D98);
  v77 = qword_10008BEF8;
  v80 = qword_10008A638;
  swift_retain(qword_10008BEF8);
  if (v80 != -1)
  {
    swift_once(&qword_10008A638, sub_100041C24);
    v81 = qword_10008BEF8;
    v79 = &qword_10008BEE8;
    goto LABEL_29;
  }
  v79 = &qword_10008BEE8;
LABEL_28:
  v81 = v77;
LABEL_29:
  v82 = *v79;
  swift_retain(*v79);
  swift_retain(v81);
  v83 = *(_BYTE *)(v47 + v108);
  v84 = (int *)v113;
  v85 = v110;
  (*(void (**)(BOOL *, uint64_t, uint64_t))(v111 + 16))(&v110[*(int *)(v113 + 56)], v124, v125);
  *v85 = v69;
  ((void (*)(BOOL *, uint64_t, uint64_t))v118)(&v85[v84[5]], v120, v121);
  sub_10003928C(v126, (uint64_t)&v85[v84[6]]);
  v85[v84[7]] = v71;
  sub_10001DE5C(v123, (uint64_t)&v85[v84[8]], &qword_100084810);
  v85[v84[9]] = v74;
  v85[v84[10]] = 1;
  v86 = &v85[v84[11]];
  *(_OWORD *)v86 = xmmword_10006CA00;
  *((_QWORD *)v86 + 2) = 0x3F916872B020C49CLL;
  *((_QWORD *)v86 + 3) = v77;
  *((_QWORD *)v86 + 4) = v82;
  v86[40] = 1;
  *((_QWORD *)v86 + 6) = v81;
  *((_QWORD *)v86 + 7) = 0x3FC3333333333333;
  v85[v84[12]] = 0;
  v85[v84[13]] = v83;
  v87 = &v85[v84[15]];
  v88 = type metadata accessor for ClockWidgetEnvironmentObject(0);
  v89 = sub_10000D36C((unint64_t *)&qword_100085240, type metadata accessor for ClockWidgetEnvironmentObject, (uint64_t)&unk_10006DF68);
  *(_QWORD *)v87 = Environment.init<A>(_:)(v88, v88, v89);
  v87[8] = v90 & 1;
  v91 = (uint64_t)v85;
  v92 = v114;
  sub_1000106E0(v91, v114, type metadata accessor for Clock);
  v93 = v122;
  v94 = v112;
  sub_10000DF30(v122, v112, type metadata accessor for ClockFace);
  v95 = v116;
  sub_10000DF30(v92, v116, type metadata accessor for Clock);
  v96 = v115;
  sub_10000DF30(v94, v115, type metadata accessor for ClockFace);
  v97 = sub_1000041D8(&qword_100087EB0);
  sub_10000DF30(v95, v96 + *(int *)(v97 + 48), type metadata accessor for Clock);
  sub_10000D330(v92, type metadata accessor for Clock);
  sub_10000D330(v93, type metadata accessor for ClockFace);
  sub_10000D330(v95, type metadata accessor for Clock);
  return sub_10000D330(v94, type metadata accessor for ClockFace);
}

BOOL sub_100031EA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  uint64_t v13;

  v1 = type metadata accessor for MediumClockFaceView(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for WidgetRenderingMode(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = v0 + *(int *)(v1 + 44);
  static WidgetRenderingMode.vibrant.getter(v6);
  LOBYTE(v9) = static WidgetRenderingMode.== infix(_:_:)(v9, v8);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  sub_10000DF30(v0, (uint64_t)v3, type metadata accessor for MediumClockFaceView);
  if ((v9 & 1) == 0)
  {
    sub_10000D330((uint64_t)v3, type metadata accessor for MediumClockFaceView);
    return sub_1000071D4();
  }
  v10 = v3[*(int *)(v1 + 40)];
  sub_10000D330((uint64_t)v3, type metadata accessor for MediumClockFaceView);
  if ((v10 & 1) == 0)
    return sub_1000071D4();
  return 0;
}

double sub_100031FD4@<D0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;

  if ((a1 & 1) != 0)
  {
    if (qword_10008A678 != -1)
      swift_once(&qword_10008A678, sub_10004204C);
    v3 = qword_10008BF28;
    v4 = qword_10008A668;
    swift_retain(qword_10008BF28);
    if (v4 != -1)
    {
      swift_once(&qword_10008A668, sub_100041F44);
      v7 = qword_10008BF28;
      v5 = &qword_10008BF18;
      goto LABEL_11;
    }
    v5 = &qword_10008BF18;
  }
  else
  {
    if (qword_10008A648 != -1)
      swift_once(&qword_10008A648, sub_100041D98);
    v3 = qword_10008BEF8;
    v6 = qword_10008A638;
    swift_retain(qword_10008BEF8);
    if (v6 != -1)
    {
      swift_once(&qword_10008A638, sub_100041C24);
      v7 = qword_10008BEF8;
      v5 = &qword_10008BEE8;
      goto LABEL_11;
    }
    v5 = &qword_10008BEE8;
  }
  v7 = v3;
LABEL_11:
  v8 = *v5;
  swift_retain(*v5);
  swift_retain(v7);
  result = 0.0585;
  *(_OWORD *)a2 = xmmword_10006CA00;
  *(_QWORD *)(a2 + 16) = 0x3F916872B020C49CLL;
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = v8;
  *(_BYTE *)(a2 + 40) = 1;
  *(_QWORD *)(a2 + 48) = v7;
  *(_QWORD *)(a2 + 56) = 0x3FC3333333333333;
  return result;
}

uint64_t sub_100032138(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  v8 = type metadata accessor for ClockWidgetAccentableForegroundColor(0);
  v9 = __chkstk_darwin(v8);
  v11 = (double *)((char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  *(_QWORD *)v11 = a1;
  v11[1] = a4;
  v12 = (char *)v11 + *(int *)(v9 + 24);
  *(_QWORD *)v12 = swift_getKeyPath(&unk_10006CBC0);
  v13 = sub_1000041D8(&qword_100085E28);
  swift_storeEnumTagMultiPayload(v12, v13, 0);
  swift_retain(a1);
  View.modifier<A>(_:)(v11, a2, v8, a3);
  return sub_10000D330((uint64_t)v11, type metadata accessor for ClockWidgetAccentableForegroundColor);
}

double sub_10003223C()
{
  uint64_t v0;

  return *(double *)v0;
}

uint64_t sub_100032244@<X0>(uint64_t a1@<X8>)
{
  return sub_10002A448(type metadata accessor for ClockFace, (uint64_t (*)(_QWORD))&type metadata accessor for TimeZone, a1);
}

uint64_t sub_100032258()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ClockFace(0) + 28));
}

uint64_t sub_100032278(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ClockFace(0);
  *(_BYTE *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*sub_1000322A4())()
{
  type metadata accessor for ClockFace(0);
  return nullsub_1;
}

uint64_t sub_1000322CC()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ClockFace(0) + 32));
}

uint64_t sub_1000322EC(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ClockFace(0);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*sub_100032318())()
{
  type metadata accessor for ClockFace(0);
  return nullsub_1;
}

uint64_t sub_100032340@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ClockFace(0);
  return sub_10001DEA0(v1 + *(int *)(v3 + 36), a1, &qword_100084810);
}

uint64_t sub_10003237C()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ClockFace(0) + 40));
}

uint64_t sub_10003239C(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ClockFace(0);
  *(_BYTE *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*sub_1000323C8())()
{
  type metadata accessor for ClockFace(0);
  return nullsub_1;
}

uint64_t sub_1000323F0()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ClockFace(0) + 44));
}

uint64_t sub_100032410(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ClockFace(0);
  *(_BYTE *)(v1 + *(int *)(result + 44)) = a1;
  return result;
}

uint64_t (*sub_10003243C())()
{
  type metadata accessor for ClockFace(0);
  return nullsub_1;
}

uint64_t sub_100032468()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ClockFace(0) + 48));
}

uint64_t sub_100032488()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ClockFace(0) + 52));
}

uint64_t sub_1000324A8(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ClockFace(0);
  *(_BYTE *)(v1 + *(int *)(result + 52)) = a1;
  return result;
}

uint64_t (*sub_1000324D4())()
{
  type metadata accessor for ClockFace(0);
  return nullsub_1;
}

uint64_t sub_1000324FC@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for ClockFace(0);
  return sub_100025364(&qword_100085E28, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, (char *)0xD000000000000013, (char *)0x800000010006F430, a1);
}

uint64_t sub_100032558()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = sub_1000041D8(&qword_100085FE0);
  v2 = __chkstk_darwin(v1);
  v4 = (uint64_t *)((char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v4 = static Alignment.center.getter(v2);
  v4[1] = v5;
  v6 = sub_1000041D8(&qword_100085FE8);
  sub_100032628(v0, (uint64_t)v4 + *(int *)(v6 + 44));
  v7 = sub_10001DDB4(&qword_100085FF0, &qword_100085FE0, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  View.accessibilityHidden(_:)(1, v1, v7);
  return sub_1000106A4((uint64_t)v4, &qword_100085FE0);
}

uint64_t sub_100032628@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  char v77;
  __int128 v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  __int128 v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t OpaqueTypeConformance2;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  uint64_t v222;
  char *v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v242;
  char *v243;
  uint64_t *v244;
  uint64_t *v245;
  char *v246;
  uint64_t v247;
  char *v248;
  uint64_t *v249;
  uint64_t v250;
  char *v251;
  uint64_t *v252;
  uint64_t v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  char *v261;
  char *v262;
  uint64_t v263;
  uint64_t v264;
  char *v265;
  char *v266;
  uint64_t v267;
  uint64_t v268;
  char *v269;
  uint64_t v270;
  char *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  char *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  char *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  _OWORD *v287;
  uint64_t v288;
  char *v289;
  char *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  char *v303;
  char *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;

  v305 = a2;
  v282 = sub_1000041D8(&qword_1000875B8);
  __chkstk_darwin(v282);
  v252 = (uint64_t *)((char *)&v242 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v283 = sub_1000041D8(&qword_100087D20);
  v255 = *(_QWORD *)(v283 - 8);
  v4 = __chkstk_darwin(v283);
  v251 = (char *)&v242 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v254 = (char *)&v242 - v6;
  v268 = sub_1000041D8(&qword_1000875A8);
  __chkstk_darwin(v268);
  v249 = (uint64_t *)((char *)&v242 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v272 = sub_1000041D8(&qword_100087D28);
  v256 = *(_QWORD *)(v272 - 8);
  v8 = __chkstk_darwin(v272);
  v248 = (char *)&v242 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v269 = (char *)&v242 - v10;
  v264 = sub_1000041D8(&qword_100087D30);
  __chkstk_darwin(v264);
  v266 = (char *)&v242 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v276 = sub_1000041D8(&qword_100087D38);
  __chkstk_darwin(v276);
  v271 = (char *)&v242 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v263 = sub_1000041D8(&qword_100086018);
  __chkstk_darwin(v263);
  v247 = (uint64_t)&v242 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v270 = sub_1000041D8(&qword_100087D40);
  v253 = *(_QWORD *)(v270 - 8);
  v14 = __chkstk_darwin(v270);
  v246 = (char *)&v242 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v265 = (char *)&v242 - v16;
  v260 = sub_1000041D8(&qword_100087580);
  __chkstk_darwin(v260);
  v245 = (uint64_t *)((char *)&v242 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v267 = sub_1000041D8(&qword_100087D48);
  v250 = *(_QWORD *)(v267 - 8);
  v18 = __chkstk_darwin(v267);
  v243 = (char *)&v242 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v262 = (char *)&v242 - v20;
  v278 = sub_1000041D8(&qword_100087D50);
  __chkstk_darwin(v278);
  v280 = (uint64_t)&v242 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v273 = sub_1000041D8(&qword_100087D58);
  __chkstk_darwin(v273);
  v275 = (uint64_t)&v242 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v257 = sub_1000041D8(&qword_100087D60);
  __chkstk_darwin(v257);
  v259 = (uint64_t)&v242 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v274 = sub_1000041D8(&qword_100087D68);
  __chkstk_darwin(v274);
  v261 = (char *)&v242 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v279 = sub_1000041D8(&qword_100087D70);
  __chkstk_darwin(v279);
  v277 = (char *)&v242 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v258 = sub_1000041D8(&qword_100087570);
  __chkstk_darwin(v258);
  v244 = (uint64_t *)((char *)&v242 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  v27 = sub_1000041D8(&qword_100087D78);
  v301 = *(_QWORD *)(v27 - 8);
  v302 = v27;
  v28 = __chkstk_darwin(v27);
  v281 = (char *)&v242 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v284 = (uint64_t)&v242 - v30;
  v31 = sub_1000041D8(&qword_100087D80);
  v32 = __chkstk_darwin(v31);
  v304 = (char *)&v242 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v303 = (char *)&v242 - v34;
  v286 = type metadata accessor for ClockWidgetAccentableOpacity(0);
  __chkstk_darwin(v286);
  v287 = (_OWORD *)((char *)&v242 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
  v296 = sub_1000041D8(&qword_100087D88);
  v36 = __chkstk_darwin(v296);
  v38 = (char *)&v242 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36);
  v288 = (uint64_t)&v242 - v39;
  v295 = sub_1000041D8(&qword_100087D90);
  __chkstk_darwin(v295);
  v299 = (uint64_t)&v242 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v298 = sub_1000041D8(&qword_100087D98);
  __chkstk_darwin(v298);
  v293 = (uint64_t)&v242 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_1000041D8(&qword_100087CC8);
  v43 = __chkstk_darwin(v42);
  v289 = (char *)&v242 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v43);
  v290 = (char *)&v242 - v45;
  v291 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v291);
  v47 = (_OWORD *)((char *)&v242 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0));
  v48 = sub_1000041D8(&qword_100087DA0);
  __chkstk_darwin(v48);
  v50 = (char *)&v242 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v292 = sub_1000041D8(&qword_100087DA8);
  v51 = __chkstk_darwin(v292);
  v53 = (char *)&v242 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v51);
  v307 = (uint64_t)&v242 - v54;
  v55 = type metadata accessor for ClockFace(0);
  v56 = __chkstk_darwin(v55);
  v297 = (uint64_t)&v242 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = __chkstk_darwin(v56);
  v285 = (uint64_t)&v242 - v59;
  v60 = __chkstk_darwin(v58);
  v62 = (char *)&v242 - v61;
  __chkstk_darwin(v60);
  v64 = (char *)&v242 - v63;
  v65 = sub_1000041D8(&qword_100087DB0);
  v66 = __chkstk_darwin(v65);
  v300 = (uint64_t)&v242 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v66);
  v308 = (uint64_t)&v242 - v68;
  v294 = *(int *)(v55 + 40);
  v69 = *((unsigned __int8 *)a1 + v294);
  sub_10000DF30((uint64_t)a1, (uint64_t)v64, type metadata accessor for ClockFace);
  v306 = v55;
  if (v69 == 4)
  {
    sub_10000D330((uint64_t)v64, type metadata accessor for ClockFace);
  }
  else
  {
    v70 = v64[*(int *)(v55 + 40)];
    sub_10000D330((uint64_t)v64, type metadata accessor for ClockFace);
    if (v70)
    {
      v71 = a1;
      v307 = sub_100034560();
      v72 = *a1;
      v73 = static Alignment.center.getter(v307);
      _FrameLayout.init(width:height:alignment:)(&v311, v72, 0, v72, 0, v73, v74);
      v293 = v311;
      v75 = BYTE8(v311);
      v76 = v312;
      v77 = BYTE8(v312);
      v78 = v313;
      v79 = (uint64_t)v287;
      *v287 = xmmword_10006CA50;
      v80 = (_QWORD *)(v79 + *(int *)(v286 + 24));
      *v80 = swift_getKeyPath(&unk_10006CBC0);
      v81 = sub_1000041D8(&qword_100085E28);
      swift_storeEnumTagMultiPayload(v80, v81, 0);
      v82 = v296;
      sub_10000DF30(v79, (uint64_t)&v38[*(int *)(v296 + 36)], type metadata accessor for ClockWidgetAccentableOpacity);
      *(_QWORD *)v38 = v307;
      *((_WORD *)v38 + 4) = 256;
      *((_QWORD *)v38 + 2) = v293;
      v38[24] = v75;
      v83 = v71;
      *((_QWORD *)v38 + 4) = v76;
      v38[40] = v77;
      *((_OWORD *)v38 + 3) = v78;
      sub_10000D330(v79, type metadata accessor for ClockWidgetAccentableOpacity);
      v84 = v288;
      sub_10001DE5C((uint64_t)v38, v288, &qword_100087D88);
      v85 = v299;
      sub_10001DEA0(v84, v299, &qword_100087D88);
      swift_storeEnumTagMultiPayload(v85, v295, 1);
      v86 = sub_10001DDB4(&qword_100087DB8, &qword_100087D98, (uint64_t)&protocol conformance descriptor for TupleView<A>);
      v87 = sub_100066948();
      _ConditionalContent<>.init(storage:)(v85, v298, v82, v86, v87);
      v88 = v84;
      v89 = &qword_100087D88;
      goto LABEL_13;
    }
  }
  v90 = (char *)v47 + *(int *)(v291 + 20);
  v91 = enum case for RoundedCornerStyle.continuous(_:);
  v92 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v92 - 8) + 104))(v90, v91, v92);
  __asm { FMOV            V0.2D, #20.0 }
  *v47 = _Q0;
  v98 = sub_1000342B8();
  sub_10000DF30((uint64_t)v47, (uint64_t)v50, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_QWORD *)&v50[*(int *)(v48 + 52)] = v98;
  v99 = *(int *)(v48 + 56);
  v83 = a1;
  *(_WORD *)&v50[v99] = 256;
  v100 = sub_10000D330((uint64_t)v47, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v101 = *a1;
  v102 = static Alignment.center.getter(v100);
  _FrameLayout.init(width:height:alignment:)(&v311, v101, 0, v101, 0, v102, v103);
  sub_10001DEA0((uint64_t)v50, (uint64_t)v53, &qword_100087DA0);
  v104 = &v53[*(int *)(v292 + 36)];
  v105 = v312;
  *(_OWORD *)v104 = v311;
  *((_OWORD *)v104 + 1) = v105;
  *((_OWORD *)v104 + 2) = v313;
  sub_1000106A4((uint64_t)v50, &qword_100087DA0);
  sub_10001DE5C((uint64_t)v53, v307, &qword_100087DA8);
  v106 = *((unsigned __int8 *)a1 + v294);
  sub_10000DF30((uint64_t)a1, (uint64_t)v62, type metadata accessor for ClockFace);
  if (!v106)
  {
    v112 = v306;
    v113 = v62[*(int *)(v306 + 28)];
    v114 = (uint64_t)v62;
    v115 = v285;
    sub_1000106E0(v114, v285, type metadata accessor for ClockFace);
    if (v113 == 1)
    {
      sub_10000D330(v115, type metadata accessor for ClockFace);
      v107 = v296;
      v108 = v295;
      v109 = (uint64_t)v290;
      v110 = (uint64_t)v289;
    }
    else
    {
      v116 = *(_BYTE *)(v115 + *(int *)(v112 + 32));
      sub_10000D330(v115, type metadata accessor for ClockFace);
      v107 = v296;
      v108 = v295;
      v109 = (uint64_t)v290;
      v110 = (uint64_t)v289;
      if ((v116 & 1) == 0)
        goto LABEL_7;
    }
    sub_100036E44(0, (uint64_t)v83, v109);
    v117 = sub_1000041D8(&qword_1000875C8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v117 - 8) + 56))(v109, 0, 1, v117);
    goto LABEL_12;
  }
  sub_10000D330((uint64_t)v62, type metadata accessor for ClockFace);
  v107 = v296;
  v108 = v295;
  v109 = (uint64_t)v290;
  v110 = (uint64_t)v289;
LABEL_7:
  v111 = sub_1000041D8(&qword_1000875C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v111 - 8) + 56))(v109, 1, 1, v111);
LABEL_12:
  v118 = v307;
  sub_10001DEA0(v307, (uint64_t)v53, &qword_100087DA8);
  sub_10001DEA0(v109, v110, &qword_100087CC8);
  v119 = v293;
  sub_10001DEA0((uint64_t)v53, v293, &qword_100087DA8);
  v120 = sub_1000041D8(&qword_100087E10);
  sub_10001DEA0(v110, v119 + *(int *)(v120 + 48), &qword_100087CC8);
  sub_1000106A4(v110, &qword_100087CC8);
  sub_1000106A4((uint64_t)v53, &qword_100087DA8);
  v121 = v299;
  sub_10001DEA0(v119, v299, &qword_100087D98);
  swift_storeEnumTagMultiPayload(v121, v108, 0);
  v122 = sub_10001DDB4(&qword_100087DB8, &qword_100087D98, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v123 = sub_100066948();
  _ConditionalContent<>.init(storage:)(v121, v298, v107, v122, v123);
  sub_1000106A4(v119, &qword_100087D98);
  sub_1000106A4(v109, &qword_100087CC8);
  v88 = v118;
  v89 = &qword_100087DA8;
LABEL_13:
  sub_1000106A4(v88, v89);
  v125 = (uint64_t)v304;
  v124 = v305;
  v126 = v306;
  v127 = *((_BYTE *)v83 + *(int *)(v306 + 28));
  v128 = v297;
  sub_10000DF30((uint64_t)v83, v297, type metadata accessor for ClockFace);
  v129 = (uint64_t)v303;
  if ((v127 & 1) != 0)
  {
    sub_10000D330(v128, type metadata accessor for ClockFace);
    v130 = 1;
  }
  else
  {
    v131 = *(_BYTE *)(v128 + *(int *)(v126 + 32));
    v132 = sub_10000D330(v128, type metadata accessor for ClockFace);
    if ((v131 & 1) != 0)
    {
      v130 = 1;
    }
    else
    {
      switch(*((_BYTE *)v83 + v294))
      {
        case 0:
          v133 = static Alignment.center.getter(v132);
          v134 = (uint64_t)v252;
          *v252 = v133;
          *(_QWORD *)(v134 + 8) = v135;
          v136 = sub_1000041D8(&qword_100086028);
          sub_10003664C(v83, v134 + *(int *)(v136 + 44));
          v137 = sub_10001DDB4(&qword_1000875B0, &qword_1000875B8, (uint64_t)&protocol conformance descriptor for ZStack<A>);
          v138 = v251;
          v139 = v282;
          View.widgetAccentable(_:)(1, v282, v137);
          sub_1000106A4(v134, &qword_1000875B8);
          v140 = v255;
          v141 = v254;
          v142 = v283;
          (*(void (**)(char *, char *, uint64_t))(v255 + 32))(v254, v138, v283);
          v143 = v280;
          (*(void (**)(uint64_t, char *, uint64_t))(v140 + 16))(v280, v141, v142);
          swift_storeEnumTagMultiPayload(v143, v278, 1);
          v144 = sub_10001D898(&qword_100087DF8, &qword_100087D70, (void (*)(void))sub_100066A50, (void (*)(void))sub_100066B24);
          v309 = v139;
          v310 = v137;
          OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v309, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
          v146 = v281;
          _ConditionalContent<>.init(storage:)(v143, v279, v142, v144, OpaqueTypeConformance2);
          (*(void (**)(char *, uint64_t))(v140 + 8))(v141, v142);
          v147 = sub_1000041D8(&qword_100087DE8);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v147 - 8) + 56))(v146, 0, 1, v147);
          v148 = (uint64_t)v146;
          goto LABEL_25;
        case 1:
          v151 = static Alignment.center.getter(v132);
          v152 = (uint64_t)v245;
          *v245 = v151;
          *(_QWORD *)(v152 + 8) = v153;
          v154 = sub_1000041D8(&qword_100086000);
          sub_100035AB8(v83, v152 + *(int *)(v154 + 44));
          v155 = sub_10001DDB4(&qword_100087578, &qword_100087580, (uint64_t)&protocol conformance descriptor for ZStack<A>);
          v156 = v243;
          v157 = v260;
          View.widgetAccentable(_:)(1, v260, v155);
          sub_1000106A4(v152, &qword_100087580);
          v158 = v250;
          v159 = v262;
          v160 = v267;
          (*(void (**)(char *, char *, uint64_t))(v250 + 32))(v262, v156, v267);
          v161 = v259;
          (*(void (**)(uint64_t, char *, uint64_t))(v158 + 16))(v259, v159, v160);
          swift_storeEnumTagMultiPayload(v161, v257, 1);
          v162 = sub_10001DDB4(&qword_100087568, &qword_100087570, (uint64_t)&protocol conformance descriptor for ZStack<A>);
          v309 = v157;
          v310 = v155;
          v163 = swift_getOpaqueTypeConformance2(&v309, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
          v164 = (uint64_t)v261;
          _ConditionalContent<>.init(storage:)(v161, v258, v160, v162, v163);
          v165 = v275;
          sub_10001DEA0(v164, v275, &qword_100087D68);
          swift_storeEnumTagMultiPayload(v165, v273, 0);
          v166 = sub_100066A50();
          v167 = sub_100066B24();
          v168 = (uint64_t)v277;
          _ConditionalContent<>.init(storage:)(v165, v274, v276, v166, v167);
          sub_1000106A4(v164, &qword_100087D68);
          v169 = v280;
          sub_10001DEA0(v168, v280, &qword_100087D70);
          swift_storeEnumTagMultiPayload(v169, v278, 0);
          v170 = sub_10001D898(&qword_100087DF8, &qword_100087D70, (void (*)(void))sub_100066A50, (void (*)(void))sub_100066B24);
          v171 = sub_10001DDB4(&qword_1000875B0, &qword_1000875B8, (uint64_t)&protocol conformance descriptor for ZStack<A>);
          v309 = v282;
          v310 = v171;
          v172 = swift_getOpaqueTypeConformance2(&v309, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
          v173 = v281;
          _ConditionalContent<>.init(storage:)(v169, v279, v283, v170, v172);
          sub_1000106A4(v168, &qword_100087D70);
          (*(void (**)(char *, uint64_t))(v158 + 8))(v262, v160);
          goto LABEL_24;
        case 2:
          v174 = static Alignment.center.getter(v132);
          v175 = (uint64_t)v244;
          *v244 = v174;
          *(_QWORD *)(v175 + 8) = v176;
          v177 = sub_1000041D8(&qword_100085FF8);
          sub_100034CF0(v83, v175 + *(int *)(v177 + 44));
          v178 = v259;
          sub_10001DEA0(v175, v259, &qword_100087570);
          swift_storeEnumTagMultiPayload(v178, v257, 0);
          v179 = sub_10001DDB4(&qword_100087568, &qword_100087570, (uint64_t)&protocol conformance descriptor for ZStack<A>);
          v180 = sub_10001DDB4(&qword_100087578, &qword_100087580, (uint64_t)&protocol conformance descriptor for ZStack<A>);
          v309 = v260;
          v310 = v180;
          v181 = swift_getOpaqueTypeConformance2(&v309, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
          v182 = (uint64_t)v261;
          _ConditionalContent<>.init(storage:)(v178, v258, v267, v179, v181);
          v183 = v275;
          sub_10001DEA0(v182, v275, &qword_100087D68);
          swift_storeEnumTagMultiPayload(v183, v273, 0);
          v184 = sub_100066A50();
          v185 = sub_100066B24();
          v186 = (uint64_t)v277;
          _ConditionalContent<>.init(storage:)(v183, v274, v276, v184, v185);
          sub_1000106A4(v182, &qword_100087D68);
          v187 = v280;
          sub_10001DEA0(v186, v280, &qword_100087D70);
          swift_storeEnumTagMultiPayload(v187, v278, 0);
          v188 = sub_10001D898(&qword_100087DF8, &qword_100087D70, (void (*)(void))sub_100066A50, (void (*)(void))sub_100066B24);
          v189 = sub_10001DDB4(&qword_1000875B0, &qword_1000875B8, (uint64_t)&protocol conformance descriptor for ZStack<A>);
          v309 = v282;
          v310 = v189;
          v190 = swift_getOpaqueTypeConformance2(&v309, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
          v191 = v281;
          _ConditionalContent<>.init(storage:)(v187, v279, v283, v188, v190);
          sub_1000106A4(v186, &qword_100087D70);
          sub_1000106A4(v175, &qword_100087570);
          v192 = sub_1000041D8(&qword_100087DE8);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v192 - 8) + 56))(v191, 0, 1, v192);
          v148 = (uint64_t)v191;
          goto LABEL_25;
        case 3:
          v193 = v247;
          sub_100034964(v247);
          v194 = sub_1000633D0();
          v195 = v246;
          v196 = v263;
          View.widgetAccentable(_:)(1, v263, v194);
          sub_1000106A4(v193, &qword_100086018);
          v197 = v253;
          v198 = v265;
          v199 = v270;
          (*(void (**)(char *, char *, uint64_t))(v253 + 32))(v265, v195, v270);
          v200 = v266;
          (*(void (**)(char *, char *, uint64_t))(v197 + 16))(v266, v198, v199);
          swift_storeEnumTagMultiPayload(v200, v264, 0);
          v309 = v196;
          v310 = v194;
          v201 = swift_getOpaqueTypeConformance2(&v309, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
          v202 = sub_10001DDB4(&qword_1000875A0, &qword_1000875A8, (uint64_t)&protocol conformance descriptor for ZStack<A>);
          v309 = v268;
          v310 = v202;
          v203 = swift_getOpaqueTypeConformance2(&v309, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
          v204 = (uint64_t)v271;
          _ConditionalContent<>.init(storage:)(v200, v199, v272, v201, v203);
          v205 = v275;
          sub_10001DEA0(v204, v275, &qword_100087D38);
          swift_storeEnumTagMultiPayload(v205, v273, 1);
          v206 = sub_100066A50();
          v207 = sub_100066B24();
          v208 = (uint64_t)v277;
          _ConditionalContent<>.init(storage:)(v205, v274, v276, v206, v207);
          sub_1000106A4(v204, &qword_100087D38);
          v209 = v280;
          sub_10001DEA0(v208, v280, &qword_100087D70);
          swift_storeEnumTagMultiPayload(v209, v278, 0);
          v210 = sub_10001D898(&qword_100087DF8, &qword_100087D70, (void (*)(void))sub_100066A50, (void (*)(void))sub_100066B24);
          v211 = sub_10001DDB4(&qword_1000875B0, &qword_1000875B8, (uint64_t)&protocol conformance descriptor for ZStack<A>);
          v309 = v282;
          v310 = v211;
          v212 = swift_getOpaqueTypeConformance2(&v309, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
          v173 = v281;
          _ConditionalContent<>.init(storage:)(v209, v279, v283, v210, v212);
          sub_1000106A4(v208, &qword_100087D70);
          (*(void (**)(char *, uint64_t))(v197 + 8))(v265, v199);
          goto LABEL_24;
        case 4:
          v213 = static Alignment.center.getter(v132);
          v214 = (uint64_t)v249;
          *v249 = v213;
          *(_QWORD *)(v214 + 8) = v215;
          v216 = sub_1000041D8(&qword_100086020);
          sub_100036014(v83, v214 + *(int *)(v216 + 44));
          v217 = sub_10001DDB4(&qword_1000875A0, &qword_1000875A8, (uint64_t)&protocol conformance descriptor for ZStack<A>);
          v218 = v248;
          v219 = v268;
          View.widgetAccentable(_:)(1, v268, v217);
          sub_1000106A4(v214, &qword_1000875A8);
          v220 = v256;
          v221 = v269;
          v222 = v272;
          (*(void (**)(char *, char *, uint64_t))(v256 + 32))(v269, v218, v272);
          v223 = v266;
          (*(void (**)(char *, char *, uint64_t))(v220 + 16))(v266, v221, v222);
          swift_storeEnumTagMultiPayload(v223, v264, 1);
          v224 = sub_1000633D0();
          v309 = v263;
          v310 = v224;
          v225 = swift_getOpaqueTypeConformance2(&v309, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
          v309 = v219;
          v310 = v217;
          v226 = swift_getOpaqueTypeConformance2(&v309, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
          v227 = (uint64_t)v271;
          _ConditionalContent<>.init(storage:)(v223, v270, v222, v225, v226);
          v228 = v275;
          sub_10001DEA0(v227, v275, &qword_100087D38);
          swift_storeEnumTagMultiPayload(v228, v273, 1);
          v229 = sub_100066A50();
          v230 = sub_100066B24();
          v231 = (uint64_t)v277;
          _ConditionalContent<>.init(storage:)(v228, v274, v276, v229, v230);
          sub_1000106A4(v227, &qword_100087D38);
          v232 = v280;
          sub_10001DEA0(v231, v280, &qword_100087D70);
          swift_storeEnumTagMultiPayload(v232, v278, 0);
          v233 = sub_10001D898(&qword_100087DF8, &qword_100087D70, (void (*)(void))sub_100066A50, (void (*)(void))sub_100066B24);
          v234 = sub_10001DDB4(&qword_1000875B0, &qword_1000875B8, (uint64_t)&protocol conformance descriptor for ZStack<A>);
          v309 = v282;
          v310 = v234;
          v235 = swift_getOpaqueTypeConformance2(&v309, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
          v173 = v281;
          _ConditionalContent<>.init(storage:)(v232, v279, v283, v233, v235);
          sub_1000106A4(v231, &qword_100087D70);
          (*(void (**)(char *, uint64_t))(v220 + 8))(v269, v222);
LABEL_24:
          v236 = sub_1000041D8(&qword_100087DE8);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v236 - 8) + 56))(v173, 0, 1, v236);
          v148 = (uint64_t)v173;
LABEL_25:
          v150 = v284;
          sub_10001DE5C(v148, v284, &qword_100087D78);
          break;
        default:
          v149 = sub_1000041D8(&qword_100087DE8);
          v150 = v284;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v149 - 8) + 56))(v284, 1, 1, v149);
          break;
      }
      sub_10001DE5C(v150, v129, &qword_100087D78);
      v130 = 0;
    }
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v301 + 56))(v129, v130, 1, v302);
  v237 = v308;
  v238 = v300;
  sub_10001DEA0(v308, v300, &qword_100087DB0);
  sub_10001DEA0(v129, v125, &qword_100087D80);
  sub_10001DEA0(v238, v124, &qword_100087DB0);
  v239 = sub_1000041D8(&qword_100087DF0);
  v240 = v124 + *(int *)(v239 + 48);
  *(_QWORD *)v240 = 0;
  *(_BYTE *)(v240 + 8) = 1;
  sub_10001DEA0(v125, v124 + *(int *)(v239 + 64), &qword_100087D80);
  sub_1000106A4(v129, &qword_100087D80);
  sub_1000106A4(v237, &qword_100087DB0);
  sub_1000106A4(v125, &qword_100087D80);
  return sub_1000106A4(v238, &qword_100087DB0);
}

BOOL sub_1000342A8(char a1, char a2)
{
  return a1 == a2;
}

uint64_t sub_1000342B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t (*v12)(_QWORD);
  uint64_t v13;
  char v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  int v18;
  int v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;

  v1 = v0;
  v2 = type metadata accessor for ClockFace(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for WidgetRenderingMode(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v25 - v10;
  v13 = sub_100025364(&qword_100085E28, v12, (char *)0xD000000000000013, (char *)0x800000010006F430, (uint64_t)&v25 - v10);
  static WidgetRenderingMode.accented.getter(v13);
  v14 = static WidgetRenderingMode.== infix(_:_:)(v11, v9);
  v15 = *(void (**)(char *, uint64_t))(v6 + 8);
  v15(v9, v5);
  v16 = ((uint64_t (*)(char *, uint64_t))v15)(v11, v5);
  if ((v14 & 1) != 0)
    return static Color.clear.getter(v16);
  v18 = *(unsigned __int8 *)(v0 + *(int *)(v2 + 32));
  v19 = *(unsigned __int8 *)(v0 + *(int *)(v2 + 52));
  if (v18 != 1)
  {
    v20 = sub_100025364(&qword_100085E28, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, (char *)0xD000000000000013, (char *)0x800000010006F430, (uint64_t)v11);
    if (v19)
    {
      static WidgetRenderingMode.fullColor.getter(v20);
      v21 = static WidgetRenderingMode.== infix(_:_:)(v11, v9);
      v15(v9, v5);
      v15(v11, v5);
      sub_10000DF30(v1, (uint64_t)v4, type metadata accessor for ClockFace);
      if ((v21 & 1) != 0)
      {
        v22 = v4[8];
        v23 = sub_10000D330((uint64_t)v4, type metadata accessor for ClockFace);
        if ((v22 & 1) != 0)
          goto LABEL_5;
      }
      else
      {
        v23 = sub_10000D330((uint64_t)v4, type metadata accessor for ClockFace);
      }
    }
    else
    {
      static WidgetRenderingMode.vibrant.getter(v20);
      v24 = static WidgetRenderingMode.== infix(_:_:)(v11, v9);
      v15(v9, v5);
      v23 = ((uint64_t (*)(char *, uint64_t))v15)(v11, v5);
      if ((v24 & 1) == 0)
        goto LABEL_13;
    }
    return static Color.black.getter(v23);
  }
  if (v19)
  {
LABEL_5:
    if (qword_10008A668 != -1)
      swift_once(&qword_10008A668, sub_100041F44);
    return swift_retain(qword_10008BF18);
  }
LABEL_13:
  if (qword_10008A630 != -1)
    swift_once(&qword_10008A630, sub_100041BCC);
  return swift_retain(qword_10008BEE0);
}

uint64_t sub_100034558@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100036E44(a1, v2, a2);
}

uint64_t sub_100034560()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t (*v14)(_QWORD);
  uint64_t v15;
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  int v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = v0;
  v2 = type metadata accessor for ClockFace(0);
  v3 = __chkstk_darwin(v2);
  v32 = (uint64_t)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v6 = (char *)&v31 - v5;
  v7 = type metadata accessor for WidgetRenderingMode(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v31 - v12;
  v15 = sub_100025364(&qword_100085E28, v14, (char *)0xD000000000000013, (char *)0x800000010006F430, (uint64_t)&v31 - v12);
  static WidgetRenderingMode.accented.getter(v15);
  v16 = static WidgetRenderingMode.== infix(_:_:)(v13, v11);
  v17 = *(void (**)(char *, uint64_t))(v8 + 8);
  v17(v11, v7);
  v18 = ((uint64_t (*)(char *, uint64_t))v17)(v13, v7);
  if ((v16 & 1) != 0)
    return static Color.white.getter(v18);
  v20 = *(unsigned __int8 *)(v1 + *(int *)(v2 + 52));
  v31 = v1;
  sub_10000DF30(v1, (uint64_t)v6, type metadata accessor for ClockFace);
  if (v20 == 1)
  {
    sub_10000D330((uint64_t)v6, type metadata accessor for ClockFace);
LABEL_5:
    v21 = sub_100025364(&qword_100085E28, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, (char *)0xD000000000000013, (char *)0x800000010006F430, (uint64_t)v13);
    static WidgetRenderingMode.fullColor.getter(v21);
    v22 = static WidgetRenderingMode.== infix(_:_:)(v13, v11);
    v17(v11, v7);
    v17(v13, v7);
    if ((v22 & 1) != 0 && *(_BYTE *)(v31 + 8) == 1)
    {
      if (qword_10008A668 != -1)
        swift_once(&qword_10008A668, sub_100041F44);
      v23 = qword_10008BF18;
    }
    else
    {
      if (qword_10008A638 != -1)
        swift_once(&qword_10008A638, sub_100041C24);
      v23 = qword_10008BEE8;
    }
    return swift_retain(v23);
  }
  v24 = v6[*(int *)(v2 + 44)];
  v25 = v32;
  sub_10000DF30((uint64_t)v6, v32, type metadata accessor for ClockFace);
  if (v24 == 1)
  {
    v26 = sub_100025364(&qword_100085E28, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, (char *)0xD000000000000013, (char *)0x800000010006F430, (uint64_t)v13);
    static WidgetRenderingMode.fullColor.getter(v26);
    v27 = static WidgetRenderingMode.== infix(_:_:)(v13, v11);
    v17(v11, v7);
    v17(v13, v7);
    sub_10000D330(v25, type metadata accessor for ClockFace);
    sub_10000D330((uint64_t)v6, type metadata accessor for ClockFace);
    if ((v27 & 1) != 0)
      goto LABEL_5;
  }
  else
  {
    sub_10000D330(v25, type metadata accessor for ClockFace);
    sub_10000D330((uint64_t)v6, type metadata accessor for ClockFace);
  }
  v28 = sub_100025364(&qword_100085E28, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, (char *)0xD000000000000013, (char *)0x800000010006F430, (uint64_t)v13);
  static WidgetRenderingMode.vibrant.getter(v28);
  v29 = static WidgetRenderingMode.== infix(_:_:)(v13, v11);
  v17(v11, v7);
  v30 = ((uint64_t (*)(char *, uint64_t))v17)(v13, v7);
  if ((v29 & 1) != 0)
    return static Color.black.getter(v30);
  if (qword_10008A630 != -1)
    swift_once(&qword_10008A630, sub_100041BCC);
  v23 = qword_10008BEE0;
  return swift_retain(v23);
}

uint64_t sub_10003493C@<X0>(_QWORD *a1@<X8>)
{
  return sub_100034CA4(&qword_100085FF8, (uint64_t (*)(uint64_t))sub_100034CF0, a1);
}

uint64_t sub_100034950@<X0>(_QWORD *a1@<X8>)
{
  return sub_100034CA4(&qword_100086000, (uint64_t (*)(uint64_t))sub_100035AB8, a1);
}

uint64_t sub_100034964@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  __int128 v30;
  uint64_t v32;
  uint64_t v33;
  _OWORD v34[3];

  v33 = a1;
  v32 = type metadata accessor for ClockWidgetAccentableForegroundColor(0);
  __chkstk_darwin(v32);
  v3 = (uint64_t *)((char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = sub_1000041D8(&qword_100086008);
  __chkstk_darwin(v4);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Image.ResizingMode(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000041D8(&qword_100086010);
  __chkstk_darwin(v11);
  v13 = (uint64_t *)((char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (*((_BYTE *)v1 + 8))
    v14 = 0xD000000000000014;
  else
    v14 = 0xD000000000000015;
  if (*((_BYTE *)v1 + 8))
    v15 = 0x800000010006F240;
  else
    v15 = 0x800000010006F220;
  v16 = Image.init(_:bundle:)(v14, v15, 0);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for Image.ResizingMode.stretch(_:), v7);
  v17 = Image.resizable(capInsets:resizingMode:)(v10, v16, 0.0, 0.0, 0.0, 0.0);
  swift_release(v16);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v18 = enum case for Image.TemplateRenderingMode.template(_:);
  v19 = type metadata accessor for Image.TemplateRenderingMode(0);
  v20 = *(_QWORD *)(v19 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 104))(v6, v18, v19);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v6, 0, 1, v19);
  v21 = Image.renderingMode(_:)(v6, v17);
  swift_release(v17);
  sub_1000106A4((uint64_t)v6, &qword_100086008);
  *v3 = sub_100035E7C();
  v3[1] = 0x3FF0000000000000;
  v22 = (uint64_t *)((char *)v3 + *(int *)(v32 + 24));
  *v22 = swift_getKeyPath(&unk_10006CBC0);
  v23 = sub_1000041D8(&qword_100085E28);
  swift_storeEnumTagMultiPayload(v22, v23, 0);
  sub_10000DF30((uint64_t)v3, (uint64_t)v13 + *(int *)(v11 + 36), type metadata accessor for ClockWidgetAccentableForegroundColor);
  *v13 = v21;
  v24 = sub_10000D330((uint64_t)v3, type metadata accessor for ClockWidgetAccentableForegroundColor);
  v25 = *v1;
  v26 = static Alignment.center.getter(v24);
  _FrameLayout.init(width:height:alignment:)(v34, v25, 0, v25, 0, v26, v27);
  v28 = v33;
  sub_10001DEA0((uint64_t)v13, v33, &qword_100086010);
  v29 = (_OWORD *)(v28 + *(int *)(sub_1000041D8(&qword_100086018) + 36));
  v30 = v34[1];
  *v29 = v34[0];
  v29[1] = v30;
  v29[2] = v34[2];
  return sub_1000106A4((uint64_t)v13, &qword_100086010);
}

uint64_t sub_100034C7C@<X0>(_QWORD *a1@<X8>)
{
  return sub_100034CA4(&qword_100086020, (uint64_t (*)(uint64_t))sub_100036014, a1);
}

uint64_t sub_100034C90@<X0>(_QWORD *a1@<X8>)
{
  return sub_100034CA4(&qword_100086028, (uint64_t (*)(uint64_t))sub_10003664C, a1);
}

uint64_t sub_100034CA4@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;

  *a3 = static Alignment.center.getter(a1);
  a3[1] = v7;
  sub_1000041D8(a1);
  return a2(v3);
}

uint64_t sub_100034CF0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(_QWORD);
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  __int128 v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _OWORD *v61;
  __int128 v62;
  _OWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _OWORD *v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  char *v103;
  _OWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(char *, uint64_t);
  void (*v115)(char *, _QWORD, uint64_t);
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _OWORD v120[3];
  _OWORD v121[3];
  _OWORD v122[3];

  v112 = a2;
  v105 = sub_1000041D8(&qword_100087CF0);
  __chkstk_darwin(v105);
  v108 = (uint64_t)&v95 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = sub_1000041D8(&qword_100087CF8);
  v4 = __chkstk_darwin(v107);
  v111 = (uint64_t)&v95 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v110 = (uint64_t)&v95 - v6;
  v118 = type metadata accessor for ClockWidgetAccentableOpacity(0);
  __chkstk_darwin(v118);
  v104 = (_OWORD *)((char *)&v95 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v100 = sub_1000041D8(&qword_100087D00);
  v8 = __chkstk_darwin(v100);
  v109 = (uint64_t)&v95 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v98 = (uint64_t)&v95 - v11;
  __chkstk_darwin(v10);
  v106 = (uint64_t)&v95 - v12;
  v119 = type metadata accessor for ClockWidgetAccentableForegroundColor(0);
  __chkstk_darwin(v119);
  v14 = (uint64_t *)((char *)&v95 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = type metadata accessor for Image.ResizingMode(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v95 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1000041D8(&qword_100086010);
  v20 = __chkstk_darwin(v19);
  v95 = (uint64_t *)((char *)&v95 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v20);
  v23 = (uint64_t *)((char *)&v95 - v22);
  v113 = sub_1000041D8(&qword_100086018);
  v24 = __chkstk_darwin(v113);
  v96 = (uint64_t)&v95 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __chkstk_darwin(v24);
  v28 = (char *)&v95 - v27;
  __chkstk_darwin(v26);
  v117 = (uint64_t)&v95 - v29;
  v30 = Image.init(_:bundle:)(0x6369742D72756F68, 0xEA0000000000736BLL, 0);
  v31 = *(void (**)(_QWORD))(v16 + 104);
  v116 = enum case for Image.ResizingMode.stretch(_:);
  v115 = (void (*)(char *, _QWORD, uint64_t))v31;
  v31(v18);
  v32 = Image.resizable(capInsets:resizingMode:)(v18, v30, 0.0, 0.0, 0.0, 0.0);
  swift_release(v30);
  v33 = *(void (**)(char *, uint64_t))(v16 + 8);
  v97 = v18;
  v99 = v15;
  v114 = v33;
  v33(v18, v15);
  v34 = sub_1000504A0();
  *v14 = v34;
  v14[1] = 0x3FF0000000000000;
  v35 = (uint64_t *)((char *)v14 + *(int *)(v119 + 24));
  *v35 = swift_getKeyPath(&unk_10006CBC0);
  v36 = sub_1000041D8(&qword_100085E28);
  swift_storeEnumTagMultiPayload(v35, v36, 0);
  v102 = v19;
  sub_10000DF30((uint64_t)v14, (uint64_t)v23 + *(int *)(v19 + 36), type metadata accessor for ClockWidgetAccentableForegroundColor);
  *v23 = v32;
  swift_retain(v34);
  v37 = sub_10000D330((uint64_t)v14, type metadata accessor for ClockWidgetAccentableForegroundColor);
  v38 = *a1;
  v39 = static Alignment.center.getter(v37);
  _FrameLayout.init(width:height:alignment:)(v120, v38, 0, v38, 0, v39, v40);
  sub_10001DEA0((uint64_t)v23, (uint64_t)v28, &qword_100086010);
  v41 = &v28[*(int *)(v113 + 36)];
  v42 = v120[1];
  *(_OWORD *)v41 = v120[0];
  *((_OWORD *)v41 + 1) = v42;
  *((_OWORD *)v41 + 2) = v120[2];
  v101 = v23;
  sub_1000106A4((uint64_t)v23, &qword_100086010);
  v103 = v28;
  sub_10001DE5C((uint64_t)v28, v117, &qword_100086018);
  v43 = *((unsigned __int8 *)a1 + *(int *)(type metadata accessor for ClockFace(0) + 48));
  v44 = 0xD00000000000001ALL;
  v45 = 0x800000010006F280;
  if (v43 != 1)
  {
    v44 = 0xD00000000000001ELL;
    v45 = 0x800000010006F260;
  }
  if (v43)
    v46 = v44;
  else
    v46 = 0xD000000000000013;
  if (v43)
    v47 = v45;
  else
    v47 = 0x800000010006F2A0;
  v48 = Image.init(_:bundle:)(v46, v47, 0);
  v49 = v97;
  v50 = v99;
  v115(v97, v116, v99);
  v51 = Image.resizable(capInsets:resizingMode:)(v49, v48, 0.0, 0.0, 0.0, 0.0);
  swift_release(v48);
  v114(v49, v50);
  v52 = sub_1000504A0();
  *v14 = v52;
  v14[1] = 0x3FF0000000000000;
  v53 = (uint64_t *)((char *)v14 + *(int *)(v119 + 24));
  *v53 = swift_getKeyPath(&unk_10006CBC0);
  swift_storeEnumTagMultiPayload(v53, v36, 0);
  v54 = v102;
  v55 = v95;
  sub_10000DF30((uint64_t)v14, (uint64_t)v95 + *(int *)(v102 + 36), type metadata accessor for ClockWidgetAccentableForegroundColor);
  *v55 = v51;
  swift_retain(v52);
  v56 = sub_10000D330((uint64_t)v14, type metadata accessor for ClockWidgetAccentableForegroundColor);
  v57 = *a1;
  v58 = static Alignment.center.getter(v56);
  _FrameLayout.init(width:height:alignment:)(v121, v57, 0, v57, 0, v58, v59);
  v60 = v96;
  sub_10001DEA0((uint64_t)v55, v96, &qword_100086010);
  v61 = (_OWORD *)(v60 + *(int *)(v113 + 36));
  v62 = v121[1];
  *v61 = v121[0];
  v61[1] = v62;
  v61[2] = v121[2];
  sub_1000106A4((uint64_t)v55, &qword_100086010);
  __asm { FMOV            V0.2D, #1.0 }
  v68 = v104;
  *v104 = _Q0;
  v69 = v36;
  v70 = (_QWORD *)((char *)v68 + *(int *)(v118 + 24));
  *v70 = swift_getKeyPath(&unk_10006CBC0);
  swift_storeEnumTagMultiPayload(v70, v69, 0);
  v71 = v98;
  sub_10001DEA0(v60, v98, &qword_100086018);
  sub_1000106E0((uint64_t)v68, v71 + *(int *)(v100 + 36), type metadata accessor for ClockWidgetAccentableOpacity);
  sub_1000106A4(v60, &qword_100086018);
  v72 = v71;
  v73 = v106;
  sub_10001DE5C(v72, v106, &qword_100087D00);
  v74 = Image.init(_:bundle:)(0x6572672D65636166, 0xE900000000000079, 0);
  v115(v49, v116, v50);
  v75 = Image.resizable(capInsets:resizingMode:)(v49, v74, 0.0, 0.0, 0.0, 0.0);
  swift_release(v74);
  v114(v49, v50);
  *v14 = sub_1000357E8();
  v14[1] = 0x3FF0000000000000;
  v76 = (uint64_t *)((char *)v14 + *(int *)(v119 + 24));
  *v76 = swift_getKeyPath(&unk_10006CBC0);
  swift_storeEnumTagMultiPayload(v76, v69, 0);
  v77 = *(int *)(v54 + 36);
  v78 = v101;
  sub_10000DF30((uint64_t)v14, (uint64_t)v101 + v77, type metadata accessor for ClockWidgetAccentableForegroundColor);
  *v78 = v75;
  sub_10000D330((uint64_t)v14, type metadata accessor for ClockWidgetAccentableForegroundColor);
  *v68 = xmmword_10006CA60;
  v79 = (_QWORD *)((char *)v68 + *(int *)(v118 + 24));
  *v79 = swift_getKeyPath(&unk_10006CBC0);
  swift_storeEnumTagMultiPayload(v79, v69, 0);
  v80 = v108;
  sub_10001DEA0((uint64_t)v78, v108, &qword_100086010);
  sub_1000106E0((uint64_t)v68, v80 + *(int *)(v105 + 36), type metadata accessor for ClockWidgetAccentableOpacity);
  v81 = sub_1000106A4((uint64_t)v78, &qword_100086010);
  v82 = *a1;
  v83 = static Alignment.center.getter(v81);
  _FrameLayout.init(width:height:alignment:)(v122, v82, 0, v82, 0, v83, v84);
  v85 = v111;
  sub_10001DEA0(v80, v111, &qword_100087CF0);
  v86 = (_OWORD *)(v85 + *(int *)(v107 + 36));
  v87 = v122[1];
  *v86 = v122[0];
  v86[1] = v87;
  v86[2] = v122[2];
  sub_1000106A4(v80, &qword_100087CF0);
  v88 = v110;
  sub_10001DE5C(v85, v110, &qword_100087CF8);
  v89 = v117;
  v90 = (uint64_t)v103;
  sub_10001DEA0(v117, (uint64_t)v103, &qword_100086018);
  v91 = v109;
  sub_10001DEA0(v73, v109, &qword_100087D00);
  sub_10001DEA0(v88, v85, &qword_100087CF8);
  v92 = v112;
  sub_10001DEA0(v90, v112, &qword_100086018);
  v93 = sub_1000041D8(&qword_100087D08);
  sub_10001DEA0(v91, v92 + *(int *)(v93 + 48), &qword_100087D00);
  sub_10001DEA0(v85, v92 + *(int *)(v93 + 64), &qword_100087CF8);
  sub_1000106A4(v88, &qword_100087CF8);
  sub_1000106A4(v73, &qword_100087D00);
  sub_1000106A4(v89, &qword_100086018);
  sub_1000106A4(v85, &qword_100087CF8);
  sub_1000106A4(v91, &qword_100087D00);
  return sub_1000106A4(v90, &qword_100086018);
}

uint64_t sub_10003574C()
{
  uint64_t v0;

  v0 = sub_1000504A0();
  return swift_retain(v0);
}

uint64_t sub_100035760(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100032138(a1, a2, a3, 1.0);
}

unint64_t sub_100035768()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  v1 = 0xD000000000000013;
  v2 = type metadata accessor for ClockFace(0);
  if (*(_BYTE *)(v0 + *(int *)(v2 + 48)))
  {
    if (*(_BYTE *)(v0 + *(int *)(v2 + 48)) == 1)
      return 0xD00000000000001ALL;
    else
      return 0xD00000000000001ELL;
  }
  return v1;
}

uint64_t sub_1000357E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t (*v15)(_QWORD);
  uint64_t v16;
  char v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;

  v1 = v0;
  v2 = type metadata accessor for ClockFace(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v26 - v6;
  v8 = type metadata accessor for WidgetRenderingMode(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v26 - v13;
  v16 = sub_100025364(&qword_100085E28, v15, (char *)0xD000000000000013, (char *)0x800000010006F430, (uint64_t)&v26 - v13);
  static WidgetRenderingMode.accented.getter(v16);
  v17 = static WidgetRenderingMode.== infix(_:_:)(v14, v12);
  v18 = *(void (**)(char *, uint64_t))(v9 + 8);
  v18(v12, v8);
  v19 = ((uint64_t (*)(char *, uint64_t))v18)(v14, v8);
  if ((v17 & 1) != 0)
    return static Color.white.getter(v19);
  v21 = *(unsigned __int8 *)(v1 + *(int *)(v2 + 52));
  sub_10000DF30(v1, (uint64_t)v7, type metadata accessor for ClockFace);
  if (v21 == 1)
  {
    sub_10000D330((uint64_t)v7, type metadata accessor for ClockFace);
  }
  else
  {
    v22 = v7[*(int *)(v2 + 44)];
    sub_10000DF30((uint64_t)v7, (uint64_t)v5, type metadata accessor for ClockFace);
    if (v22 != 1)
    {
      sub_10000D330((uint64_t)v5, type metadata accessor for ClockFace);
      sub_10000D330((uint64_t)v7, type metadata accessor for ClockFace);
      goto LABEL_12;
    }
    v23 = sub_100025364(&qword_100085E28, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, (char *)0xD000000000000013, (char *)0x800000010006F430, (uint64_t)v14);
    static WidgetRenderingMode.fullColor.getter(v23);
    v24 = static WidgetRenderingMode.== infix(_:_:)(v14, v12);
    v18(v12, v8);
    v18(v14, v8);
    sub_10000D330((uint64_t)v5, type metadata accessor for ClockFace);
    sub_10000D330((uint64_t)v7, type metadata accessor for ClockFace);
    if ((v24 & 1) == 0)
    {
LABEL_12:
      if (qword_10008A658 != -1)
        swift_once(&qword_10008A658, sub_100041E54);
      v25 = qword_10008BF08;
      return swift_retain(v25);
    }
  }
  if (*(_BYTE *)(v1 + 8) != 1)
    goto LABEL_12;
  if (qword_10008A688 != -1)
    swift_once(&qword_10008A688, sub_100042148);
  v25 = qword_10008BF38;
  return swift_retain(v25);
}

uint64_t sub_100035AB8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  __int128 v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD v35[3];

  v34 = a2;
  v32 = type metadata accessor for ClockWidgetAccentableForegroundColor(0);
  __chkstk_darwin(v32);
  v4 = (uint64_t *)((char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for Image.ResizingMode(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000041D8(&qword_100086010);
  __chkstk_darwin(v9);
  v11 = (uint64_t *)((char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v33 = sub_1000041D8(&qword_100086018);
  __chkstk_darwin(v33);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *((unsigned __int8 *)a1 + *(int *)(type metadata accessor for ClockFace(0) + 48));
  v15 = 0xEE00636962617261;
  v16 = 0x2D737265626D756ELL;
  if (v14 != 1)
  {
    v16 = 0xD000000000000012;
    v15 = 0x800000010006F2C0;
  }
  if (v14)
    v17 = v16;
  else
    v17 = 0x737265626D756ELL;
  if (v14)
    v18 = v15;
  else
    v18 = 0xE700000000000000;
  v19 = Image.init(_:bundle:)(v17, v18, 0);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for Image.ResizingMode.stretch(_:), v5);
  v20 = Image.resizable(capInsets:resizingMode:)(v8, v19, 0.0, 0.0, 0.0, 0.0);
  swift_release(v19);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v21 = sub_1000504A0();
  *v4 = v21;
  v4[1] = 0x3FF0000000000000;
  v22 = (uint64_t *)((char *)v4 + *(int *)(v32 + 24));
  *v22 = swift_getKeyPath(&unk_10006CBC0);
  v23 = sub_1000041D8(&qword_100085E28);
  swift_storeEnumTagMultiPayload(v22, v23, 0);
  sub_10000DF30((uint64_t)v4, (uint64_t)v11 + *(int *)(v9 + 36), type metadata accessor for ClockWidgetAccentableForegroundColor);
  *v11 = v20;
  swift_retain(v21);
  v24 = sub_10000D330((uint64_t)v4, type metadata accessor for ClockWidgetAccentableForegroundColor);
  v25 = *a1;
  v26 = static Alignment.center.getter(v24);
  _FrameLayout.init(width:height:alignment:)(v35, v25, 0, v25, 0, v26, v27);
  sub_10001DEA0((uint64_t)v11, (uint64_t)v13, &qword_100086010);
  v28 = &v13[*(int *)(v33 + 36)];
  v29 = v35[1];
  *(_OWORD *)v28 = v35[0];
  *((_OWORD *)v28 + 1) = v29;
  *((_OWORD *)v28 + 2) = v35[2];
  sub_1000106A4((uint64_t)v11, &qword_100086010);
  return sub_10001DE5C((uint64_t)v13, v34, &qword_100086018);
}

uint64_t sub_100035DB4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for ClockFace(0);
  if (!*(_BYTE *)(v0 + *(int *)(v1 + 48)))
    return 0x737265626D756ELL;
  if (*(_BYTE *)(v0 + *(int *)(v1 + 48)) == 1)
    return 0x2D737265626D756ELL;
  return 0xD000000000000012;
}

unint64_t sub_100035E3C()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 8))
    return 0xD000000000000014;
  else
    return 0xD000000000000015;
}

uint64_t sub_100035E7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  void (*v12)(char *, uint64_t);
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v1 = v0;
  v2 = type metadata accessor for WidgetRenderingMode(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v16 - v7;
  v9 = type metadata accessor for ClockFace(0);
  v10 = sub_100025364(&qword_100085E28, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, (char *)0xD000000000000013, (char *)0x800000010006F430, (uint64_t)v8);
  static WidgetRenderingMode.accented.getter(v10);
  v11 = static WidgetRenderingMode.== infix(_:_:)(v8, v6);
  v12 = *(void (**)(char *, uint64_t))(v3 + 8);
  v12(v6, v2);
  v13 = ((uint64_t (*)(char *, uint64_t))v12)(v8, v2);
  if ((v11 & 1) != 0)
    return static Color.white.getter(v13);
  if (*(_BYTE *)(v1 + *(int *)(v9 + 52)) == 1 && *(_BYTE *)(v1 + 8) == 1)
  {
    if (qword_10008A690 != -1)
      swift_once(&qword_10008A690, sub_1000421C0);
    v15 = qword_10008BF40;
  }
  else
  {
    if (qword_10008A660 != -1)
      swift_once(&qword_10008A660, sub_100041ECC);
    v15 = qword_10008BF10;
  }
  return swift_retain(v15);
}

uint64_t sub_100036014@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  void (*v60)(char *, uint64_t);
  uint64_t v61;
  void (*v62)(char *);
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  _OWORD v72[3];
  _OWORD v73[3];

  v71 = a2;
  v3 = type metadata accessor for ClockWidgetAccentableForegroundColor(0);
  __chkstk_darwin(v3);
  v5 = (uint64_t *)((char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for Image.ResizingMode(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_1000041D8(&qword_100086010);
  v10 = __chkstk_darwin(v65);
  v69 = (uint64_t *)((char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  v13 = (uint64_t *)((char *)&v59 - v12);
  v66 = sub_1000041D8(&qword_100086018);
  v14 = __chkstk_darwin(v66);
  v70 = (uint64_t)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v64 = (uint64_t)&v59 - v17;
  v18 = __chkstk_darwin(v16);
  v68 = (uint64_t)&v59 - v19;
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v59 - v21;
  __chkstk_darwin(v20);
  v67 = (uint64_t)&v59 - v23;
  v24 = *((unsigned __int8 *)a1 + *(int *)(type metadata accessor for ClockFace(0) + 48));
  v25 = 0xD000000000000018;
  v26 = 0x800000010006F300;
  if (v24 != 1)
  {
    v25 = 0xD00000000000001CLL;
    v26 = 0x800000010006F2E0;
  }
  if (v24)
    v27 = v25;
  else
    v27 = 0xD000000000000011;
  if (v24)
    v28 = v26;
  else
    v28 = 0x800000010006F320;
  v29 = Image.init(_:bundle:)(v27, v28, 0);
  v63 = enum case for Image.ResizingMode.stretch(_:);
  v62 = *(void (**)(char *))(v7 + 104);
  v62(v9);
  v30 = Image.resizable(capInsets:resizingMode:)(v9, v29, 0.0, 0.0, 0.0, 0.0);
  swift_release(v29);
  v60 = *(void (**)(char *, uint64_t))(v7 + 8);
  v60(v9, v6);
  v31 = sub_1000504A0();
  *v5 = v31;
  v5[1] = 0x3FF0000000000000;
  v32 = *(int *)(v3 + 24);
  v61 = v3;
  v33 = (uint64_t *)((char *)v5 + v32);
  *v33 = swift_getKeyPath(&unk_10006CBC0);
  v59 = sub_1000041D8(&qword_100085E28);
  swift_storeEnumTagMultiPayload(v33, v59, 0);
  v34 = v65;
  sub_10000DF30((uint64_t)v5, (uint64_t)v13 + *(int *)(v65 + 36), type metadata accessor for ClockWidgetAccentableForegroundColor);
  *v13 = v30;
  swift_retain(v31);
  v35 = sub_10000D330((uint64_t)v5, type metadata accessor for ClockWidgetAccentableForegroundColor);
  v36 = *a1;
  v37 = static Alignment.center.getter(v35);
  _FrameLayout.init(width:height:alignment:)(v72, v36, 0, v36, 0, v37, v38);
  sub_10001DEA0((uint64_t)v13, (uint64_t)v22, &qword_100086010);
  v39 = v66;
  v40 = &v22[*(int *)(v66 + 36)];
  v41 = v72[1];
  *(_OWORD *)v40 = v72[0];
  *((_OWORD *)v40 + 1) = v41;
  *((_OWORD *)v40 + 2) = v72[2];
  sub_1000106A4((uint64_t)v13, &qword_100086010);
  v42 = v67;
  sub_10001DE5C((uint64_t)v22, v67, &qword_100086018);
  v43 = Image.init(_:bundle:)(0xD000000000000010, 0x800000010006F3B0, 0);
  ((void (*)(char *, _QWORD, uint64_t))v62)(v9, v63, v6);
  v44 = Image.resizable(capInsets:resizingMode:)(v9, v43, 0.0, 0.0, 0.0, 0.0);
  swift_release(v43);
  v60(v9, v6);
  *v5 = sub_1000357E8();
  v5[1] = 0x3FD3333333333333;
  v45 = (uint64_t *)((char *)v5 + *(int *)(v61 + 24));
  *v45 = swift_getKeyPath(&unk_10006CBC0);
  swift_storeEnumTagMultiPayload(v45, v59, 0);
  v46 = v69;
  sub_10000DF30((uint64_t)v5, (uint64_t)v69 + *(int *)(v34 + 36), type metadata accessor for ClockWidgetAccentableForegroundColor);
  *v46 = v44;
  v47 = sub_10000D330((uint64_t)v5, type metadata accessor for ClockWidgetAccentableForegroundColor);
  v48 = *a1;
  v49 = static Alignment.center.getter(v47);
  _FrameLayout.init(width:height:alignment:)(v73, v48, 0, v48, 0, v49, v50);
  v51 = v64;
  sub_10001DEA0((uint64_t)v46, v64, &qword_100086010);
  v52 = (_OWORD *)(v51 + *(int *)(v39 + 36));
  v53 = v73[1];
  *v52 = v73[0];
  v52[1] = v53;
  v52[2] = v73[2];
  sub_1000106A4((uint64_t)v46, &qword_100086010);
  v54 = v68;
  sub_10001DE5C(v51, v68, &qword_100086018);
  sub_10001DEA0(v42, v51, &qword_100086018);
  v55 = v70;
  sub_10001DEA0(v54, v70, &qword_100086018);
  v56 = v71;
  sub_10001DEA0(v51, v71, &qword_100086018);
  v57 = sub_1000041D8(&qword_100087CE8);
  sub_10001DEA0(v55, v56 + *(int *)(v57 + 48), &qword_100086018);
  sub_1000106A4(v54, &qword_100086018);
  sub_1000106A4(v42, &qword_100086018);
  sub_1000106A4(v55, &qword_100086018);
  return sub_1000106A4(v51, &qword_100086018);
}

unint64_t sub_1000365CC()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  v1 = 0xD000000000000011;
  v2 = type metadata accessor for ClockFace(0);
  if (*(_BYTE *)(v0 + *(int *)(v2 + 48)))
  {
    if (*(_BYTE *)(v0 + *(int *)(v2 + 48)) == 1)
      return 0xD000000000000018;
    else
      return 0xD00000000000001CLL;
  }
  return v1;
}

uint64_t sub_10003664C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  double *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char v56;
  void (*v57)(char *, uint64_t);
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  _QWORD *v82;
  _OWORD v83[3];

  v82 = a1;
  v76 = a2;
  v2 = type metadata accessor for WidgetRenderingMode(0);
  v71 = *(_QWORD *)(v2 - 8);
  v72 = v2;
  v3 = __chkstk_darwin(v2);
  v70 = (char *)&v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v69 = (uint64_t)&v68 - v5;
  v78 = type metadata accessor for ClockFace(0);
  __chkstk_darwin(v78);
  v80 = (char *)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000041D8(&qword_100087CC8);
  v8 = __chkstk_darwin(v7);
  v75 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v74 = (char *)&v68 - v10;
  v81 = type metadata accessor for ClockWidgetAccentableForegroundColor(0);
  __chkstk_darwin(v81);
  v12 = (uint64_t *)((char *)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = sub_1000041D8(&qword_100086008);
  __chkstk_darwin(v13);
  v15 = (char *)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Image.ResizingMode(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_1000041D8(&qword_100087CD0);
  __chkstk_darwin(v20);
  v22 = (double *)((char *)&v68 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v79 = sub_1000041D8(&qword_100087CD8);
  v23 = __chkstk_darwin(v79);
  v73 = (char *)&v68 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v23);
  v27 = (char *)&v68 - v26;
  __chkstk_darwin(v25);
  v77 = (char *)&v68 - v28;
  v29 = Image.init(_:bundle:)(0xD000000000000012, 0x800000010006F390, 0);
  (*(void (**)(char *, _QWORD, uint64_t))(v17 + 104))(v19, enum case for Image.ResizingMode.stretch(_:), v16);
  v30 = Image.resizable(capInsets:resizingMode:)(v19, v29, 0.0, 0.0, 0.0, 0.0);
  swift_release(v29);
  v31 = v16;
  v32 = v78;
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v31);
  v33 = enum case for Image.TemplateRenderingMode.template(_:);
  v34 = type metadata accessor for Image.TemplateRenderingMode(0);
  v35 = *(_QWORD *)(v34 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 104))(v15, v33, v34);
  v36 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56);
  v37 = (uint64_t)v80;
  v38 = v34;
  v39 = v82;
  v36(v15, 0, 1, v38);
  v40 = Image.renderingMode(_:)(v15, v30);
  swift_release(v30);
  sub_1000106A4((uint64_t)v15, &qword_100086008);
  v41 = *(int *)(v32 + 52);
  if (*((_BYTE *)v39 + v41))
    v42 = 0.66;
  else
    v42 = 0.15;
  *v12 = sub_100035E7C();
  v12[1] = 0x3FF0000000000000;
  v43 = (uint64_t *)((char *)v12 + *(int *)(v81 + 24));
  *v43 = swift_getKeyPath(&unk_10006CBC0);
  v44 = sub_1000041D8(&qword_100085E28);
  swift_storeEnumTagMultiPayload(v43, v44, 0);
  sub_10000DF30((uint64_t)v12, (uint64_t)v22 + *(int *)(v20 + 36), type metadata accessor for ClockWidgetAccentableForegroundColor);
  *(_QWORD *)v22 = v40;
  v22[1] = v42;
  v45 = sub_10000D330((uint64_t)v12, type metadata accessor for ClockWidgetAccentableForegroundColor);
  v46 = *v39;
  v47 = static Alignment.center.getter(v45);
  _FrameLayout.init(width:height:alignment:)(v83, v46, 0, v46, 0, v47, v48);
  sub_10001DEA0((uint64_t)v22, (uint64_t)v27, &qword_100087CD0);
  v49 = &v27[*(int *)(v79 + 36)];
  v50 = v83[1];
  *(_OWORD *)v49 = v83[0];
  *((_OWORD *)v49 + 1) = v50;
  *((_OWORD *)v49 + 2) = v83[2];
  v51 = (uint64_t)v22;
  v52 = (uint64_t)v77;
  sub_1000106A4(v51, &qword_100087CD0);
  sub_10001DE5C((uint64_t)v27, v52, &qword_100087CD8);
  LODWORD(v46) = *((unsigned __int8 *)v39 + v41);
  sub_10000DF30((uint64_t)v39, v37, type metadata accessor for ClockFace);
  if ((_DWORD)v46 != 1)
  {
    sub_10000D330(v37, type metadata accessor for ClockFace);
    v61 = (uint64_t)v75;
    v60 = v76;
    v63 = (uint64_t)v73;
    v62 = (uint64_t)v74;
    goto LABEL_8;
  }
  v53 = v69;
  v54 = sub_100025364(&qword_100085E28, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, (char *)0xD000000000000013, (char *)0x800000010006F430, v69);
  v55 = v70;
  static WidgetRenderingMode.vibrant.getter(v54);
  v56 = static WidgetRenderingMode.== infix(_:_:)(v53, v55);
  v57 = *(void (**)(char *, uint64_t))(v71 + 8);
  v58 = v55;
  v59 = v72;
  v57(v58, v72);
  v57((char *)v53, v59);
  sub_10000D330(v37, type metadata accessor for ClockFace);
  v61 = (uint64_t)v75;
  v60 = v76;
  v63 = (uint64_t)v73;
  v62 = (uint64_t)v74;
  if ((v56 & 1) == 0)
  {
LABEL_8:
    sub_100036E44(1, (uint64_t)v39, v62);
    v65 = sub_1000041D8(&qword_1000875C8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56))(v62, 0, 1, v65);
    goto LABEL_9;
  }
  v64 = sub_1000041D8(&qword_1000875C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(v62, 1, 1, v64);
LABEL_9:
  sub_10001DEA0(v52, v63, &qword_100087CD8);
  sub_10001DEA0(v62, v61, &qword_100087CC8);
  sub_10001DEA0(v63, v60, &qword_100087CD8);
  v66 = sub_1000041D8(&qword_100087CE0);
  sub_10001DEA0(v61, v60 + *(int *)(v66 + 48), &qword_100087CC8);
  sub_1000106A4(v62, &qword_100087CC8);
  sub_1000106A4(v52, &qword_100087CD8);
  sub_1000106A4(v61, &qword_100087CC8);
  return sub_1000106A4(v63, &qword_100087CD8);
}

uint64_t *sub_100036CCC()
{
  if (qword_10008A630 != -1)
    swift_once(&qword_10008A630, sub_100041BCC);
  return &qword_10008BEE0;
}

uint64_t *sub_100036D0C()
{
  if (qword_10008A648 != -1)
    swift_once(&qword_10008A648, sub_100041D98);
  return &qword_10008BEF8;
}

uint64_t sub_100036D4C(char a1)
{
  uint64_t *v1;

  if ((a1 & 1) != 0)
  {
    if (qword_10008A688 != -1)
      swift_once(&qword_10008A688, sub_100042148);
    v1 = &qword_10008BF38;
  }
  else
  {
    if (qword_10008A658 != -1)
      swift_once(&qword_10008A658, sub_100041E54);
    v1 = &qword_10008BF08;
  }
  return swift_retain(*v1);
}

uint64_t sub_100036DC8(char a1)
{
  uint64_t *v1;

  if ((a1 & 1) != 0)
  {
    if (qword_10008A690 != -1)
      swift_once(&qword_10008A690, sub_1000421C0);
    v1 = &qword_10008BF40;
  }
  else
  {
    if (qword_10008A660 != -1)
      swift_once(&qword_10008A660, sub_100041ECC);
    v1 = &qword_10008BF10;
  }
  return swift_retain(*v1);
}

uint64_t sub_100036E44@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t, uint64_t);
  uint64_t *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  uint64_t v68;
  char *v69;
  __int128 v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  double *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  void (*v82)(char *, uint64_t);
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  double v90;
  uint64_t v91;
  char *v92;
  __int128 v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  double v97;
  uint64_t v98;
  uint64_t v99;
  double *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  void (*v105)(char *, uint64_t);
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  double v113;
  uint64_t v114;
  uint64_t v115;
  double *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _OWORD *v124;
  __int128 v125;
  uint64_t *v126;
  uint64_t v127;
  double v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  double *v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  double v139;
  double v140;
  double v141;
  unint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  double v177;
  uint64_t v178;
  uint64_t v179;
  double *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  _OWORD *v188;
  __int128 v189;
  uint64_t *v190;
  uint64_t v191;
  double v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  double *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  unint64_t v225;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  char *v237;
  char *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  char *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  int v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  char *v262;
  uint64_t v263;
  uint64_t v264;
  char *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  __int128 v271;
  __int128 v272;
  uint64_t v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  uint64_t v277;
  char v278;
  uint64_t v279;
  char v280;
  uint64_t v281;
  uint64_t v282;

  v252 = a2;
  v250 = a1;
  v269 = a3;
  v245 = sub_1000041D8(&qword_100087698);
  __chkstk_darwin(v245);
  v247 = (uint64_t)&v227 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v246 = sub_1000041D8(&qword_100087688);
  __chkstk_darwin(v246);
  v261 = (uint64_t)&v227 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v268 = sub_1000041D8(&qword_100087678);
  v5 = __chkstk_darwin(v268);
  v248 = (uint64_t)&v227 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v249 = (uint64_t)&v227 - v7;
  v266 = sub_1000041D8(&qword_100087D10);
  __chkstk_darwin(v266);
  v267 = (uint64_t)&v227 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000041D8(&qword_100086008);
  __chkstk_darwin(v9);
  v265 = (char *)&v227 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v264 = type metadata accessor for Image.ResizingMode(0);
  v263 = *(_QWORD *)(v264 - 8);
  __chkstk_darwin(v264);
  v262 = (char *)&v227 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v244 = type metadata accessor for _ClockHandRotationEffect.Period(0);
  v243 = *(_QWORD *)(v244 - 8);
  __chkstk_darwin(v244);
  v242 = (char *)&v227 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v260 = type metadata accessor for ClockFace(0);
  v13 = __chkstk_darwin(v260);
  v235 = (uint64_t)&v227 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v236 = (uint64_t)&v227 - v15;
  v257 = type metadata accessor for WidgetRenderingMode(0);
  v256 = *(_QWORD *)(v257 - 8);
  v16 = __chkstk_darwin(v257);
  v254 = (char *)&v227 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v255 = (uint64_t)&v227 - v18;
  v19 = type metadata accessor for RoundedRectangle(0);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v227 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v24 = (char *)&v227 - v23;
  v251 = sub_1000041D8(&qword_100087658);
  v25 = __chkstk_darwin(v251);
  v27 = (char *)&v227 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v29 = (char *)&v227 - v28;
  v253 = sub_1000041D8(&qword_100087648);
  v30 = __chkstk_darwin(v253);
  v32 = (char *)&v227 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v229 = (uint64_t)&v227 - v33;
  v258 = sub_1000041D8(&qword_100087638);
  v34 = __chkstk_darwin(v258);
  v36 = (char *)&v227 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  v38 = (char *)&v227 - v37;
  v259 = sub_1000041D8(&qword_100087628);
  v39 = __chkstk_darwin(v259);
  v231 = (uint64_t)&v227 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v39);
  v42 = (char *)&v227 - v41;
  v227 = sub_1000041D8(&qword_100087618);
  __chkstk_darwin(v227);
  v230 = (uint64_t)&v227 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v228 = sub_1000041D8(&qword_100087608);
  __chkstk_darwin(v228);
  v232 = (uint64_t)&v227 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v233 = sub_1000041D8(&qword_1000875F0);
  __chkstk_darwin(v233);
  v234 = (uint64_t)&v227 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v240 = sub_1000041D8(&qword_100087D18);
  v239 = *(_QWORD *)(v240 - 8);
  __chkstk_darwin(v240);
  v238 = (char *)&v227 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v270 = sub_1000041D8(&qword_1000875E8);
  v47 = __chkstk_darwin(v270);
  v237 = (char *)&v227 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v47);
  v241 = (uint64_t)&v227 - v49;
  v50 = *(int *)(v19 + 20);
  v51 = enum case for RoundedCornerStyle.continuous(_:);
  v52 = type metadata accessor for RoundedCornerStyle(0);
  v53 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 104);
  if ((v250 & 1) == 0)
  {
    v53(&v22[v50], v51, v52);
    __asm { FMOV            V0.2D, #20.0 }
    *(_OWORD *)v22 = _Q0;
    v63 = (uint64_t *)v252;
    if (*(_BYTE *)(v252 + 8) == 1)
    {
      if (qword_10008A6B0 != -1)
        swift_once(&qword_10008A6B0, sub_1000424C4);
      v64 = &qword_10008BF60;
    }
    else
    {
      if (qword_10008A6B8 != -1)
        swift_once(&qword_10008A6B8, sub_1000425BC);
      v64 = &qword_10008BF68;
    }
    v88 = *v64;
    v89 = swift_bridgeObjectRetain(*v64);
    v90 = static UnitPoint.center.getter(v89);
    AngularGradient.init(gradient:center:angle:)(&v271, v88, v90);
    sub_10000DF30((uint64_t)v22, (uint64_t)v27, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
    v91 = v251;
    v92 = &v27[*(int *)(v251 + 52)];
    v93 = v272;
    *(_OWORD *)v92 = v271;
    *((_OWORD *)v92 + 1) = v93;
    *((_QWORD *)v92 + 4) = v273;
    *(_WORD *)&v27[*(int *)(v91 + 56)] = 256;
    sub_10000D330((uint64_t)v22, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
    v94 = (uint64_t *)sub_100022030();
    v95 = *v94;
    v96 = v94[1];
    v97 = static UnitPoint.center.getter(v94);
    v99 = v98;
    sub_10001DEA0((uint64_t)v27, (uint64_t)v32, &qword_100087658);
    v100 = (double *)&v32[*(int *)(v253 + 36)];
    *(_QWORD *)v100 = v95;
    *((_QWORD *)v100 + 1) = v96;
    v100[2] = v97;
    *((_QWORD *)v100 + 3) = v99;
    sub_1000106A4((uint64_t)v27, &qword_100087658);
    v101 = v260;
    v102 = v255;
    v103 = sub_100025364(&qword_100085E28, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, (char *)0xD000000000000013, (char *)0x800000010006F430, v255);
    v104 = v254;
    static WidgetRenderingMode.vibrant.getter(v103);
    LOBYTE(v88) = static WidgetRenderingMode.== infix(_:_:)(v102, v104);
    v105 = *(void (**)(char *, uint64_t))(v256 + 8);
    v106 = v104;
    v107 = v257;
    v105(v106, v257);
    v105((char *)v102, v107);
    v108 = v235;
    sub_10000DF30((uint64_t)v63, v235, type metadata accessor for ClockFace);
    if ((v88 & 1) != 0)
    {
      v109 = *(_BYTE *)(v108 + *(int *)(v101 + 52));
      sub_10000D330(v108, type metadata accessor for ClockFace);
      if ((v109 & 1) == 0)
      {
        v110 = (uint64_t *)sub_100022050();
LABEL_27:
        v176 = *v110;
        v175 = v110[1];
        v177 = static UnitPoint.center.getter(v110);
        v179 = v178;
        sub_10001DEA0((uint64_t)v32, (uint64_t)v36, &qword_100087648);
        v180 = (double *)&v36[*(int *)(v258 + 36)];
        *(_QWORD *)v180 = v176;
        *((_QWORD *)v180 + 1) = v175;
        v180[2] = v177;
        *((_QWORD *)v180 + 3) = v179;
        sub_1000106A4((uint64_t)v32, &qword_100087648);
        v181 = v231;
        sub_10001DEA0((uint64_t)v36, v231, &qword_100087638);
        v182 = v181 + *(int *)(v259 + 36);
        *(_QWORD *)v182 = 0x4000000000000000;
        *(_BYTE *)(v182 + 8) = 0;
        v183 = sub_1000106A4((uint64_t)v36, &qword_100087638);
        v184 = *v63;
        v185 = static Alignment.center.getter(v183);
        _FrameLayout.init(width:height:alignment:)(&v274, v184, 0, v184, 0, v185, v186);
        v187 = v247;
        sub_10001DEA0(v181, v247, &qword_100087628);
        v188 = (_OWORD *)(v187 + *(int *)(v245 + 36));
        v189 = v275;
        *v188 = v274;
        v188[1] = v189;
        v188[2] = v276;
        sub_1000106A4(v181, &qword_100087628);
        v190 = (uint64_t *)sub_100022068();
        v191 = *v190;
        v192 = static UnitPoint.center.getter(v190);
        v194 = v193;
        v195 = v261;
        sub_10001DEA0(v187, v261, &qword_100087698);
        v196 = (double *)(v195 + *(int *)(v246 + 36));
        *(_QWORD *)v196 = v191;
        v196[1] = v192;
        *((_QWORD *)v196 + 2) = v194;
        v197 = sub_1000106A4(v187, &qword_100087698);
        v260 = static Alignment.center.getter(v197);
        v259 = v198;
        v199 = Image.init(_:bundle:)(0xD000000000000012, 0x800000010006F390, 0);
        v200 = v263;
        v201 = v262;
        v202 = v264;
        (*(void (**)(char *, _QWORD, uint64_t))(v263 + 104))(v262, enum case for Image.ResizingMode.stretch(_:), v264);
        v203 = Image.resizable(capInsets:resizingMode:)(v201, v199, 0.0, 0.0, 0.0, 0.0);
        swift_release(v199);
        (*(void (**)(char *, uint64_t))(v200 + 8))(v201, v202);
        v204 = enum case for Image.TemplateRenderingMode.template(_:);
        v205 = v63;
        v206 = type metadata accessor for Image.TemplateRenderingMode(0);
        v207 = *(_QWORD *)(v206 - 8);
        v208 = (uint64_t)v265;
        (*(void (**)(char *, uint64_t, uint64_t))(v207 + 104))(v265, v204, v206);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v207 + 56))(v208, 0, 1, v206);
        v264 = Image.renderingMode(_:)(v208, v203);
        swift_release(v203);
        v209 = sub_1000106A4(v208, &qword_100086008);
        v210 = *v205;
        v211 = static Alignment.center.getter(v209);
        _FrameLayout.init(width:height:alignment:)(&v277, v210, 0, v210, 0, v211, v212);
        v213 = v277;
        LOBYTE(v207) = v278;
        v214 = v279;
        LOBYTE(v208) = v280;
        v215 = v281;
        v216 = v282;
        v217 = v261;
        v218 = v248;
        sub_10001DEA0(v261, v248, &qword_100087688);
        v219 = v268;
        v220 = v218 + *(int *)(v268 + 36);
        v221 = v259;
        *(_QWORD *)v220 = v260;
        *(_QWORD *)(v220 + 8) = v221;
        *(_QWORD *)(v220 + 16) = v264;
        *(_QWORD *)(v220 + 24) = v213;
        *(_BYTE *)(v220 + 32) = v207;
        *(_QWORD *)(v220 + 40) = v214;
        *(_BYTE *)(v220 + 48) = v208;
        *(_QWORD *)(v220 + 56) = v215;
        *(_QWORD *)(v220 + 64) = v216;
        sub_1000106A4(v217, &qword_100087688);
        v169 = &qword_100087678;
        v222 = v249;
        sub_10001DE5C(v218, v249, &qword_100087678);
        v223 = v267;
        sub_10001DEA0(v222, v267, &qword_100087678);
        swift_storeEnumTagMultiPayload(v223, v266, 1);
        v224 = sub_1000635A0();
        v225 = sub_1000638EC();
        _ConditionalContent<>.init(storage:)(v223, v270, v219, v224, v225);
        v174 = v222;
        return sub_1000106A4(v174, v169);
      }
    }
    else
    {
      sub_10000D330(v108, type metadata accessor for ClockFace);
    }
    v110 = (uint64_t *)sub_100022018();
    goto LABEL_27;
  }
  v53(&v24[v50], v51, v52);
  __asm { FMOV            V0.2D, #20.0 }
  *(_OWORD *)v24 = _Q0;
  v59 = (uint64_t *)v252;
  if (*(_BYTE *)(v252 + 8) == 1)
  {
    v60 = v260;
    if (qword_10008A6B0 != -1)
      swift_once(&qword_10008A6B0, sub_1000424C4);
    v61 = &qword_10008BF60;
  }
  else
  {
    v60 = v260;
    if (qword_10008A6B8 != -1)
      swift_once(&qword_10008A6B8, sub_1000425BC);
    v61 = &qword_10008BF68;
  }
  v65 = *v61;
  v66 = swift_bridgeObjectRetain(*v61);
  v67 = static UnitPoint.center.getter(v66);
  AngularGradient.init(gradient:center:angle:)(&v271, v65, v67);
  sub_10000DF30((uint64_t)v24, (uint64_t)v29, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v68 = v251;
  v69 = &v29[*(int *)(v251 + 52)];
  v70 = v272;
  *(_OWORD *)v69 = v271;
  *((_OWORD *)v69 + 1) = v70;
  *((_QWORD *)v69 + 4) = v273;
  *(_WORD *)&v29[*(int *)(v68 + 56)] = 256;
  sub_10000D330((uint64_t)v24, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v71 = (uint64_t *)sub_100022030();
  v72 = *v71;
  v73 = v71[1];
  v74 = static UnitPoint.center.getter(v71);
  v76 = v75;
  v77 = v229;
  sub_10001DEA0((uint64_t)v29, v229, &qword_100087658);
  v78 = (double *)(v77 + *(int *)(v253 + 36));
  *(_QWORD *)v78 = v72;
  *((_QWORD *)v78 + 1) = v73;
  v78[2] = v74;
  *((_QWORD *)v78 + 3) = v76;
  sub_1000106A4((uint64_t)v29, &qword_100087658);
  v79 = v255;
  v80 = sub_100025364(&qword_100085E28, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, (char *)0xD000000000000013, (char *)0x800000010006F430, v255);
  v81 = v254;
  static WidgetRenderingMode.vibrant.getter(v80);
  LOBYTE(v65) = static WidgetRenderingMode.== infix(_:_:)(v79, v81);
  v82 = *(void (**)(char *, uint64_t))(v256 + 8);
  v83 = v81;
  v84 = v257;
  v82(v83, v257);
  v82((char *)v79, v84);
  v85 = v236;
  sub_10000DF30((uint64_t)v59, v236, type metadata accessor for ClockFace);
  if ((v65 & 1) == 0)
  {
    sub_10000D330(v85, type metadata accessor for ClockFace);
    goto LABEL_23;
  }
  v86 = *(_BYTE *)(v85 + *(int *)(v60 + 52));
  sub_10000D330(v85, type metadata accessor for ClockFace);
  if ((v86 & 1) != 0)
  {
LABEL_23:
    v87 = (uint64_t *)sub_100022018();
    goto LABEL_24;
  }
  v87 = (uint64_t *)sub_100022050();
LABEL_24:
  v112 = *v87;
  v111 = v87[1];
  v113 = static UnitPoint.center.getter(v87);
  v115 = v114;
  sub_10001DEA0(v77, (uint64_t)v38, &qword_100087648);
  v116 = (double *)&v38[*(int *)(v258 + 36)];
  *(_QWORD *)v116 = v112;
  *((_QWORD *)v116 + 1) = v111;
  v116[2] = v113;
  *((_QWORD *)v116 + 3) = v115;
  sub_1000106A4(v77, &qword_100087648);
  sub_10001DEA0((uint64_t)v38, (uint64_t)v42, &qword_100087638);
  v117 = &v42[*(int *)(v259 + 36)];
  *(_QWORD *)v117 = 0x4000000000000000;
  v117[8] = 0;
  sub_1000106A4((uint64_t)v38, &qword_100087638);
  v118 = v230;
  sub_10001DEA0((uint64_t)v42, v230, &qword_100087628);
  *(_DWORD *)(v118 + *(int *)(v227 + 36)) = 3;
  v119 = sub_1000106A4((uint64_t)v42, &qword_100087628);
  v120 = *v59;
  v121 = static Alignment.center.getter(v119);
  _FrameLayout.init(width:height:alignment:)(&v274, v120, 0, v120, 0, v121, v122);
  v123 = v232;
  sub_10001DEA0(v118, v232, &qword_100087618);
  v124 = (_OWORD *)(v123 + *(int *)(v228 + 36));
  v125 = v275;
  *v124 = v274;
  v124[1] = v125;
  v124[2] = v276;
  sub_1000106A4(v118, &qword_100087618);
  v126 = (uint64_t *)sub_100022080();
  v127 = *v126;
  v128 = static UnitPoint.center.getter(v126);
  v130 = v129;
  v131 = v234;
  sub_10001DEA0(v123, v234, &qword_100087608);
  v132 = v233;
  v133 = (double *)(v131 + *(int *)(v233 + 36));
  *(_QWORD *)v133 = v127;
  v133[1] = v128;
  *((_QWORD *)v133 + 2) = v130;
  sub_1000106A4(v123, &qword_100087608);
  v134 = v243;
  v135 = v242;
  v136 = v244;
  v137 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v243 + 104))(v242, enum case for _ClockHandRotationEffect.Period.secondHand(_:), v244);
  v138 = (char *)v59 + *(int *)(v60 + 24);
  v139 = static UnitPoint.center.getter(v137);
  v141 = v140;
  v142 = sub_10006364C();
  v143 = v238;
  View._clockHandRotationEffect(_:in:anchor:)(v135, v138, v132, v142, v139, v141);
  (*(void (**)(char *, uint64_t))(v134 + 8))(v135, v136);
  v144 = sub_1000106A4(v131, &qword_1000875F0);
  v261 = static Alignment.center.getter(v144);
  v260 = v145;
  v146 = Image.init(_:bundle:)(0xD000000000000012, 0x800000010006F390, 0);
  v147 = v263;
  v148 = v262;
  v149 = v264;
  (*(void (**)(char *, _QWORD, uint64_t))(v263 + 104))(v262, enum case for Image.ResizingMode.stretch(_:), v264);
  v150 = Image.resizable(capInsets:resizingMode:)(v148, v146, 0.0, 0.0, 0.0, 0.0);
  swift_release(v146);
  (*(void (**)(char *, uint64_t))(v147 + 8))(v148, v149);
  v151 = enum case for Image.TemplateRenderingMode.template(_:);
  v152 = v59;
  v153 = type metadata accessor for Image.TemplateRenderingMode(0);
  v154 = *(_QWORD *)(v153 - 8);
  v155 = (uint64_t)v265;
  (*(void (**)(char *, uint64_t, uint64_t))(v154 + 104))(v265, v151, v153);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v154 + 56))(v155, 0, 1, v153);
  v264 = Image.renderingMode(_:)(v155, v150);
  swift_release(v150);
  v156 = sub_1000106A4(v155, &qword_100086008);
  v157 = *v152;
  v158 = static Alignment.center.getter(v156);
  _FrameLayout.init(width:height:alignment:)(&v277, v157, 0, v157, 0, v158, v159);
  v160 = v277;
  LOBYTE(v153) = v278;
  v161 = v279;
  LOBYTE(v152) = v280;
  v162 = v281;
  v163 = v282;
  v164 = v239;
  v165 = (uint64_t)v237;
  v166 = v240;
  (*(void (**)(char *, char *, uint64_t))(v239 + 16))(v237, v143, v240);
  v167 = v165 + *(int *)(v270 + 36);
  v168 = v260;
  *(_QWORD *)v167 = v261;
  *(_QWORD *)(v167 + 8) = v168;
  *(_QWORD *)(v167 + 16) = v264;
  *(_QWORD *)(v167 + 24) = v160;
  *(_BYTE *)(v167 + 32) = v153;
  *(_QWORD *)(v167 + 40) = v161;
  *(_BYTE *)(v167 + 48) = (_BYTE)v152;
  *(_QWORD *)(v167 + 56) = v162;
  *(_QWORD *)(v167 + 64) = v163;
  (*(void (**)(char *, uint64_t))(v164 + 8))(v143, v166);
  v169 = &qword_1000875E8;
  v170 = v241;
  sub_10001DE5C(v165, v241, &qword_1000875E8);
  v171 = v267;
  sub_10001DEA0(v170, v267, &qword_1000875E8);
  swift_storeEnumTagMultiPayload(v171, v266, 0);
  v172 = sub_1000635A0();
  v173 = sub_1000638EC();
  _ConditionalContent<>.init(storage:)(v171, v270, v268, v172, v173);
  v174 = v170;
  return sub_1000106A4(v174, v169);
}

uint64_t *sub_100038214()
{
  if (qword_10008A6B0 != -1)
    swift_once(&qword_10008A6B0, sub_1000424C4);
  return &qword_10008BF60;
}

uint64_t *sub_100038254()
{
  if (qword_10008A6B8 != -1)
    swift_once(&qword_10008A6B8, sub_1000425BC);
  return &qword_10008BF68;
}

double sub_100038294()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

uint64_t sub_10003829C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3 = v2;
  v24 = a1;
  v27 = a2;
  v4 = type metadata accessor for WidgetRenderingMode(0);
  v26 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v24 - v8;
  v10 = sub_1000041D8(&qword_100086030);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_1000041D8(&qword_100086038);
  __chkstk_darwin(v25);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000041D8(&qword_100086040);
  v17 = sub_10001DDB4(&qword_100086048, &qword_100086040, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
  View.widgetAccentable(_:)(1, v16, v17);
  type metadata accessor for ClockWidgetAccentableOpacity(0);
  v18 = sub_100025364(&qword_100085E28, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, (char *)0xD000000000000013, (char *)0x800000010006F430, (uint64_t)v9);
  static WidgetRenderingMode.accented.getter(v18);
  v19 = static WidgetRenderingMode.== infix(_:_:)(v9, v7);
  v20 = *(void (**)(char *, uint64_t))(v26 + 8);
  v20(v7, v4);
  v20(v9, v4);
  v21 = 8;
  if ((v19 & 1) != 0)
    v21 = 0;
  v22 = *(_QWORD *)(v3 + v21);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v15, v13, v10);
  *(_QWORD *)&v15[*(int *)(v25 + 36)] = v22;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return sub_10001DE5C((uint64_t)v15, v27, &qword_100086038);
}

uint64_t sub_1000384D0@<X0>(double *a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  _QWORD *v3;
  uint64_t v4;

  *a1 = a2;
  a1[1] = a3;
  v3 = (_QWORD *)((char *)a1 + *(int *)(type metadata accessor for ClockWidgetAccentableOpacity(0) + 24));
  *v3 = swift_getKeyPath(&unk_10006CBC0);
  v4 = sub_1000041D8(&qword_100085E28);
  return swift_storeEnumTagMultiPayload(v3, v4, 0);
}

uint64_t sub_100038534()
{
  _QWORD *v0;

  return swift_retain(*v0);
}

uint64_t sub_10003853C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[2];
  _BYTE v17[16];
  uint64_t v18;

  v16[1] = a1;
  v2 = type metadata accessor for ContainerBackgroundPlacement(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = static ContainerBackgroundPlacement.widget.getter(v4);
  v18 = v1;
  v8 = static Alignment.center.getter(v7);
  v10 = v9;
  v11 = sub_1000041D8(&qword_100086050);
  v12 = sub_1000041D8(&qword_100086058);
  v13 = sub_10001DDB4(&qword_100086060, &qword_100086050, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
  v14 = sub_100050B5C(&qword_100086068, &qword_100086058);
  View.containerBackground<A>(for:alignment:content:)(v6, v8, v10, sub_1000507DC, v17, v11, v12, v13, v14);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

uint64_t sub_100038680@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  void (*v13)(char *, uint64_t);
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;

  v4 = type metadata accessor for WidgetRenderingMode(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v18 - v9;
  type metadata accessor for AccentedWidgetBackground(0);
  v11 = sub_100025364(&qword_100085E28, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, (char *)0xD000000000000013, (char *)0x800000010006F430, (uint64_t)v10);
  static WidgetRenderingMode.accented.getter(v11);
  v12 = static WidgetRenderingMode.== infix(_:_:)(v10, v8);
  v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v8, v4);
  v13(v10, v4);
  if ((v12 & 1) != 0)
  {
    v14 = objc_msgSend((id)objc_opt_self(UIColor), "systemBackgroundColor");
    v15 = Color.init(uiColor:)(v14);
    v16 = v15;
  }
  else
  {
    v16 = *a1;
    v15 = swift_retain(*a1);
  }
  result = static Edge.Set.all.getter(v15);
  *(_QWORD *)a2 = v16;
  *(_BYTE *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1000387D0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  *a2 = a1;
  v2 = (_QWORD *)((char *)a2 + *(int *)(type metadata accessor for AccentedWidgetBackground(0) + 20));
  *v2 = swift_getKeyPath(&unk_10006CBC0);
  v3 = sub_1000041D8(&qword_100085E28);
  return swift_storeEnumTagMultiPayload(v2, v3, 0);
}

uint64_t type metadata accessor for PlaceholderViewSingle(uint64_t a1)
{
  return sub_10000DEFC(a1, (uint64_t *)&unk_10008BB00, (uint64_t)&nominal type descriptor for PlaceholderViewSingle);
}

uint64_t sub_10003883C()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

uint64_t sub_100038854(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[2];
  _BYTE v17[16];
  uint64_t v18;

  v16[1] = a1;
  v2 = type metadata accessor for ContainerBackgroundPlacement(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = static ContainerBackgroundPlacement.widget.getter(v4);
  v18 = v1;
  v8 = static Alignment.center.getter(v7);
  v10 = v9;
  v11 = sub_1000041D8(&qword_100086050);
  v12 = sub_1000041D8(&qword_100086058);
  v13 = sub_10001DDB4(&qword_100086060, &qword_100086050, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
  v14 = sub_100050B5C(&qword_100086068, &qword_100086058);
  View.containerBackground<A>(for:alignment:content:)(v6, v8, v10, sub_1000678BC, v17, v11, v12, v13, v14);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

uint64_t sub_100038998@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t KeyPath;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;

  v3 = v2;
  v27 = a1;
  v28 = a2;
  v4 = type metadata accessor for WidgetRenderingMode(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v27 - v9;
  v11 = sub_1000041D8(&qword_100086070);
  __chkstk_darwin(v11);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000041D8(&qword_100086078);
  __chkstk_darwin(v14);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ClockWidgetAccentableForegroundColor(0);
  v17 = sub_100025364(&qword_100085E28, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, (char *)0xD000000000000013, (char *)0x800000010006F430, (uint64_t)v10);
  static WidgetRenderingMode.accented.getter(v17);
  v18 = static WidgetRenderingMode.== infix(_:_:)(v10, v8);
  v19 = *(void (**)(char *, uint64_t))(v5 + 8);
  v19(v8, v4);
  v20 = ((uint64_t (*)(char *, uint64_t))v19)(v10, v4);
  if ((v18 & 1) != 0)
  {
    v21 = static Color.white.getter(v20);
  }
  else
  {
    v21 = *v3;
    swift_retain(*v3);
  }
  KeyPath = swift_getKeyPath(&unk_10006CC50);
  v23 = sub_1000041D8(&qword_100086080);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v13, v27, v23);
  v24 = (uint64_t *)&v13[*(int *)(v11 + 36)];
  *v24 = KeyPath;
  v24[1] = v21;
  v25 = v3[1];
  sub_10001DEA0((uint64_t)v13, (uint64_t)v16, &qword_100086070);
  *(_QWORD *)&v16[*(int *)(v14 + 36)] = v25;
  sub_1000106A4((uint64_t)v13, &qword_100086070);
  return sub_10001DE5C((uint64_t)v16, v28, &qword_100086078);
}

uint64_t sub_100038BC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a2 = a1;
  *(double *)(a2 + 8) = a3;
  v3 = (_QWORD *)(a2 + *(int *)(type metadata accessor for ClockWidgetAccentableForegroundColor(0) + 24));
  *v3 = swift_getKeyPath(&unk_10006CBC0);
  v4 = sub_1000041D8(&qword_100085E28);
  return swift_storeEnumTagMultiPayload(v3, v4, 0);
}

double sub_100038C28@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double result;
  uint64_t v19;

  v4 = sub_1000041D8(&qword_100085E40);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10008A6D8 != -1)
    v5 = swift_once(&qword_10008A6D8, sub_1000427F0);
  v8 = static Font.Weight.regular.getter(v5);
  v9 = enum case for Font.Design.default(_:);
  v10 = type metadata accessor for Font.Design(0);
  v11 = *(_QWORD *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 104))(v7, v9, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
  v12 = static Font.system(size:weight:design:)(*(_QWORD *)&v8, 0, v7, 12.0);
  sub_1000106A4((uint64_t)v7, &qword_100085E40);
  *(_QWORD *)(a1 + 8) = v12;
  __asm { FMOV            V1.2D, #4.0 }
  *(_OWORD *)(a1 + 16) = xmmword_10006CA70;
  *(_OWORD *)(a1 + 32) = _Q1;
  result = 2.0;
  *(_OWORD *)(a1 + 48) = xmmword_10006CA10;
  *(double *)a1 = a2;
  return result;
}

uint64_t sub_100038D60(uint64_t a1, uint64_t a2, double a3)
{
  (*(void (**)(void))(a2 + 8))();
  return (*(uint64_t (**)(uint64_t, uint64_t, double))(a2 + 32))(a1, a2, a3);
}

uint64_t sub_100038DB8@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void (*v8)(char *, uint64_t, uint64_t);
  int v9;
  uint64_t v21;

  v4 = type metadata accessor for ContentSizeCategory(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v8(v7, a1, v4);
  v9 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (v9 == enum case for ContentSizeCategory.extraSmall(_:)
    || v9 == enum case for ContentSizeCategory.small(_:)
    || v9 == enum case for ContentSizeCategory.medium(_:)
    || v9 == enum case for ContentSizeCategory.large(_:)
    || v9 == enum case for ContentSizeCategory.extraLarge(_:)
    || v9 == enum case for ContentSizeCategory.extraExtraLarge(_:)
    || v9 == enum case for ContentSizeCategory.extraExtraExtraLarge(_:)
    || v9 == enum case for ContentSizeCategory.accessibilityMedium(_:)
    || v9 == enum case for ContentSizeCategory.accessibilityLarge(_:)
    || v9 == enum case for ContentSizeCategory.accessibilityExtraLarge(_:))
  {
    return ((uint64_t (*)(char *, uint64_t, uint64_t))v8)(a2, a1, v4);
  }
  if (v9 == enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:)
    || v9 == enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
  {
    return (*(uint64_t (**)(char *, _QWORD, uint64_t))(v5 + 104))(a2, enum case for ContentSizeCategory.accessibilityExtraLarge(_:), v4);
  }
  v8(a2, a1, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_100038F58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  uint64_t v13;
  uint64_t v15;

  v6 = type metadata accessor for ContentSizeCategory(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  v10 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v9, v6);
  if (v10 == enum case for ContentSizeCategory.accessibilityExtraLarge(_:)
    || v10 == enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:)
    || v10 == enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
  {
    return static Font.headline.getter();
  }
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 48))(a2, a3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return v13;
}

double sub_10003905C()
{
  return 136.0;
}

void sub_100039068(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t sub_100039070()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v0 = sub_1000041D8(&qword_100085E40);
  __chkstk_darwin(v0);
  v2 = (char *)&v14 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Font.TextStyle(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for Font.TextStyle.subheadline(_:), v3);
  v7 = enum case for Font.Design.rounded(_:);
  v8 = type metadata accessor for Font.Design(0);
  v9 = *(_QWORD *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 104))(v2, v7, v8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v2, 0, 1, v8);
  v10 = static Font.system(_:design:weight:)(v6, v2, 0, 1);
  sub_1000106A4((uint64_t)v2, &qword_100085E40);
  v11 = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  static Font.Weight.regular.getter(v11);
  v12 = Font.weight(_:)(v10);
  swift_release(v10);
  return v12;
}

uint64_t sub_1000391CC()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 8));
}

uint64_t sub_1000391D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_release(*(_QWORD *)(v1 + 8));
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

double sub_1000391FC()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void sub_100039204(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 16) = a1;
}

uint64_t (*sub_10003920C())()
{
  return nullsub_1;
}

double sub_10003921C()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

void sub_100039224(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 24) = a1;
}

uint64_t (*sub_10003922C())()
{
  return nullsub_1;
}

double sub_10003923C()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

void sub_100039244(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 32) = a1;
}

uint64_t (*sub_10003924C())()
{
  return nullsub_1;
}

double sub_10003925C()
{
  return 0.8967;
}

void sub_100039268()
{
  qword_10008BEC0 = 0x3FF0000000000000;
}

uint64_t type metadata accessor for SmallWorldClockView(uint64_t a1)
{
  return sub_10000DEFC(a1, (uint64_t *)&unk_10008BB20, (uint64_t)&nominal type descriptor for SmallWorldClockView);
}

uint64_t sub_10003928C(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

double sub_1000392A4()
{
  return sub_1000426F8(&qword_10008A610, (uint64_t)&qword_10008BEC0);
}

double sub_1000392C0()
{
  uint64_t v0;

  return *(double *)(v0 + 40);
}

void sub_1000392C8(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 40) = a1;
}

uint64_t (*sub_1000392D0())()
{
  return nullsub_1;
}

double sub_1000392E0()
{
  uint64_t v0;

  return *(double *)(v0 + 48);
}

void sub_1000392E8(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 48) = a1;
}

uint64_t (*sub_1000392F0())()
{
  return nullsub_1;
}

uint64_t (*sub_100039300())()
{
  return nullsub_1;
}

double sub_100039310@<D0>(double *a1@<X8>, double a2@<D0>)
{
  __int128 v4;
  double result;
  __int128 v6;
  _OWORD v7[2];
  __int128 v8;
  __int128 v9;

  sub_10004F9D8((uint64_t)v7);
  v4 = v7[1];
  *(_OWORD *)a1 = v7[0];
  *((_OWORD *)a1 + 1) = v4;
  result = *(double *)&v8;
  v6 = v9;
  *((_OWORD *)a1 + 2) = v8;
  *((_OWORD *)a1 + 3) = v6;
  *a1 = a2;
  return result;
}

double sub_10003935C()
{
  uint64_t v0;

  return *(double *)(v0 + 56);
}

void sub_100039364(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 56) = a1;
}

uint64_t sub_100039370(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100039634(a1, a2, a3, (uint64_t (*)(void))&static Font.headline.getter);
}

uint64_t sub_100039380()
{
  return sub_10003938C((double (*)(uint64_t))&static Font.Weight.regular.getter);
}

uint64_t sub_10003938C(double (*a1)(uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = sub_1000041D8(&qword_100085E40);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = a1(v3);
  v7 = enum case for Font.Design.default(_:);
  v8 = type metadata accessor for Font.Design(0);
  v9 = *(_QWORD *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 104))(v5, v7, v8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v5, 0, 1, v8);
  v10 = static Font.system(size:weight:design:)(*(_QWORD *)&v6, 0, v5, 12.0);
  sub_1000106A4((uint64_t)v5, &qword_100085E40);
  return v10;
}

double sub_100039470()
{
  return 2.65;
}

void *sub_100039480()
{
  return &unk_10006CB00;
}

uint64_t sub_10003948C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int v7;
  uint64_t v10;
  void (*v11)(char *, uint64_t);
  uint64_t v13;

  v3 = type metadata accessor for ContentSizeCategory(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  v7 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v6, v3);
  if (v7 == enum case for ContentSizeCategory.accessibilityExtraLarge(_:)
    || v7 == enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:)
    || v7 == enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
  {
    return static Font.subheadline.getter();
  }
  v10 = *(_QWORD *)(v1 + 8);
  v11 = *(void (**)(char *, uint64_t))(v4 + 8);
  swift_retain(v10);
  v11(v6, v3);
  return v10;
}

double sub_100039578@<D0>(_OWORD *a1@<X8>)
{
  __int128 v2;
  double result;
  __int128 v4;
  _OWORD v5[2];
  __int128 v6;
  __int128 v7;

  sub_1000507E4((uint64_t)v5);
  v2 = v5[1];
  *a1 = v5[0];
  a1[1] = v2;
  result = *(double *)&v6;
  v4 = v7;
  a1[2] = v6;
  a1[3] = v4;
  return result;
}

double sub_1000395B4()
{
  double result;

  if (qword_10008A6D8 != -1)
    swift_once(&qword_10008A6D8, sub_1000427F0);
  result = 56.0;
  if (byte_10008A6E0)
    return 50.0;
  return result;
}

uint64_t sub_10003960C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>, double a7@<D4>, double a8@<D5>, double a9@<D6>)
{
  *(double *)a2 = a3;
  *(_QWORD *)(a2 + 8) = result;
  *(double *)(a2 + 16) = a4;
  *(double *)(a2 + 24) = a5;
  *(double *)(a2 + 32) = a6;
  *(double *)(a2 + 40) = a7;
  *(double *)(a2 + 48) = a8;
  *(double *)(a2 + 56) = a9;
  return result;
}

uint64_t sub_100039628(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100039634(a1, a2, a3, (uint64_t (*)(void))&static Font.subheadline.getter);
}

uint64_t sub_100039634(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  v7 = type metadata accessor for ContentSizeCategory(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v4 + 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  v12 = (*(uint64_t (**)(char *, uint64_t))(v8 + 88))(v10, v7);
  if (v12 == enum case for ContentSizeCategory.accessibilityExtraLarge(_:)
    || v12 == enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:)
    || v12 == enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
  {
    return a4();
  }
  v15 = *(void (**)(char *, uint64_t))(v8 + 8);
  swift_retain(v11);
  v15(v10, v7);
  return v11;
}

double sub_100039724()
{
  return 64.0;
}

double sub_100039730()
{
  return 0.7742;
}

double sub_10003973C()
{
  return 0.8888;
}

uint64_t sub_100039748(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int v7;
  uint64_t v10;
  void (*v11)(char *, uint64_t);
  uint64_t v13;

  v3 = type metadata accessor for ContentSizeCategory(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  v7 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v6, v3);
  if (v7 == enum case for ContentSizeCategory.accessibilityExtraLarge(_:)
    || v7 == enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:)
    || v7 == enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
  {
    return static Font.caption.getter();
  }
  v10 = *(_QWORD *)(v1 + 8);
  v11 = *(void (**)(char *, uint64_t))(v4 + 8);
  swift_retain(v10);
  v11(v6, v3);
  return v10;
}

double sub_100039834@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  uint64_t v12;

  v2 = sub_1000041D8(&qword_100085E40);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = static Font.Weight.semibold.getter(v3);
  v7 = enum case for Font.Design.default(_:);
  v8 = type metadata accessor for Font.Design(0);
  v9 = *(_QWORD *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 104))(v5, v7, v8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v5, 0, 1, v8);
  v10 = static Font.system(size:weight:design:)(*(_QWORD *)&v6, 0, v5, 12.0);
  sub_1000106A4((uint64_t)v5, &qword_100085E40);
  *(_QWORD *)a1 = 0x4050000000000000;
  *(_QWORD *)(a1 + 8) = v10;
  result = 2.0;
  *(_OWORD *)(a1 + 16) = xmmword_10006CA10;
  *(_OWORD *)(a1 + 32) = xmmword_10006CA20;
  *(_QWORD *)(a1 + 48) = 0x3FF0000000000000;
  return result;
}

double sub_100039940@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double result;
  uint64_t v14;

  v4 = sub_1000041D8(&qword_100085E40);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = static Font.Weight.semibold.getter(v5);
  v9 = enum case for Font.Design.default(_:);
  v10 = type metadata accessor for Font.Design(0);
  v11 = *(_QWORD *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 104))(v7, v9, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
  v12 = static Font.system(size:weight:design:)(*(_QWORD *)&v8, 0, v7, 12.0);
  sub_1000106A4((uint64_t)v7, &qword_100085E40);
  *(_QWORD *)(a1 + 8) = v12;
  result = 2.0;
  *(_OWORD *)(a1 + 16) = xmmword_10006CA10;
  *(_OWORD *)(a1 + 32) = xmmword_10006CA20;
  *(_QWORD *)(a1 + 48) = 0x3FF0000000000000;
  *(double *)a1 = a2;
  return result;
}

uint64_t sub_100039A58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  int v8;
  void (*v11)(char *, uint64_t);
  uint64_t v13;

  v3 = type metadata accessor for ContentSizeCategory(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v1 + 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  v8 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v6, v3);
  if (v8 == enum case for ContentSizeCategory.accessibilityExtraLarge(_:)
    || v8 == enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:)
    || v8 == enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
  {
    return static Font.caption.getter();
  }
  v11 = *(void (**)(char *, uint64_t))(v4 + 8);
  swift_retain(v7);
  v11(v6, v3);
  return v7;
}

uint64_t sub_100039B44()
{
  return 4;
}

uint64_t sub_100039B4C()
{
  return 5;
}

double sub_100039B54()
{
  return 0.7273;
}

double sub_100039B60()
{
  return 0.7;
}

double sub_100039B70()
{
  uint64_t v0;

  return *(double *)(v0 + 64);
}

void sub_100039B78(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 64) = a1;
}

uint64_t (*sub_100039B80())()
{
  return nullsub_1;
}

double sub_100039B90@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = static Font.caption2.getter();
  *(_QWORD *)a1 = 0x4050000000000000;
  *(_QWORD *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = xmmword_10006CA10;
  *(_OWORD *)(a1 + 32) = xmmword_10006CA30;
  result = 3.5;
  *(_OWORD *)(a1 + 48) = xmmword_10006CA40;
  *(_QWORD *)(a1 + 64) = 0x3FECCCCCCCCCCCCDLL;
  return result;
}

double sub_100039BE8@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  double result;

  *(_QWORD *)(a1 + 8) = static Font.caption2.getter();
  *(_OWORD *)(a1 + 16) = xmmword_10006CA10;
  *(_OWORD *)(a1 + 32) = xmmword_10006CA30;
  result = 3.5;
  *(_OWORD *)(a1 + 48) = xmmword_10006CA40;
  *(_QWORD *)(a1 + 64) = 0x3FECCCCCCCCCCCCDLL;
  *(double *)a1 = a2;
  return result;
}

uint64_t sub_100039C4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  int v8;
  void (*v11)(char *, uint64_t);
  uint64_t v13;

  v3 = type metadata accessor for ContentSizeCategory(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v1 + 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  v8 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v6, v3);
  if (v8 == enum case for ContentSizeCategory.accessibilityExtraLarge(_:)
    || v8 == enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:)
    || v8 == enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
  {
    return static Font.headline.getter();
  }
  v11 = *(void (**)(char *, uint64_t))(v4 + 8);
  swift_retain(v7);
  v11(v6, v3);
  return v7;
}

uint64_t sub_100039D38@<X0>(uint64_t a1@<X8>)
{
  return sub_100039D54(type metadata accessor for ClockText, (uint64_t)type metadata accessor for WorldClockCity, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10000DF30, a1);
}

uint64_t sub_100039D54@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;

  v8 = a1(0);
  return a3(v4 + *(int *)(v8 + 20), a4, a2);
}

uint64_t sub_100039DA0@<X0>(uint64_t a1@<X8>)
{
  return sub_10002FBA8(type metadata accessor for ClockText, a1);
}

uint64_t sub_100039DAC()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ClockText(0) + 28));
}

uint64_t sub_100039DCC@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for ClockText(0);
  return sub_100025364(&qword_100085E48, (uint64_t (*)(_QWORD))&type metadata accessor for ContentSizeCategory, (char *)0xD000000000000013, (char *)0x800000010006F3D0, a1);
}

uint64_t sub_100039E28()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ClockText(0) + 36));
}

uint64_t sub_100039E48(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ClockText(0);
  *(_BYTE *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*sub_100039E74())()
{
  type metadata accessor for ClockText(0);
  return nullsub_1;
}

uint64_t sub_100039E9C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ClockText(0) + 40);
  v4 = type metadata accessor for WidgetRenderingMode(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_100039EE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ClockText(0) + 40);
  v4 = type metadata accessor for WidgetRenderingMode(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*sub_100039F2C())()
{
  type metadata accessor for ClockText(0);
  return nullsub_1;
}

uint64_t sub_100039F54@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  double v41;
  double v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t KeyPath;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v67 = a1;
  v2 = type metadata accessor for ContentSizeCategory(0);
  v63 = *(_QWORD *)(v2 - 8);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v58 - v6;
  v8 = sub_1000041D8(&qword_100086088);
  __chkstk_darwin(v8);
  v10 = (uint64_t)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = sub_1000041D8(&qword_100086090);
  __chkstk_darwin(v62);
  v61 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_1000041D8(&qword_100086098);
  __chkstk_darwin(v65);
  v64 = (uint64_t)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000041D8(&qword_1000860A0);
  __chkstk_darwin(v13);
  v66 = (uint64_t)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = v1;
  sub_10003A418(v1, v10);
  KeyPath = swift_getKeyPath(&unk_10006CBF0);
  v15 = type metadata accessor for ClockText(0);
  v16 = (_QWORD *)(v1 + *(int *)(v15 + 24));
  v18 = v16[3];
  v17 = v16[4];
  sub_100050938(v16, v18);
  sub_100025364(&qword_100085E48, (uint64_t (*)(_QWORD))&type metadata accessor for ContentSizeCategory, (char *)0xD000000000000013, (char *)0x800000010006F3D0, (uint64_t)v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 200))(v5, v18, v17);
  v19 = v63;
  v20 = *(void (**)(char *, uint64_t))(v63 + 8);
  v20(v5, v2);
  v21 = (uint64_t)v61;
  v22 = (uint64_t *)&v61[*(int *)(v62 + 36)];
  v23 = sub_1000041D8(&qword_1000860A8);
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))((char *)v22 + *(int *)(v23 + 28), v7, v2);
  *v22 = KeyPath;
  sub_10001DEA0(v10, v21, &qword_100086088);
  v20(v7, v2);
  sub_1000106A4(v10, &qword_100086088);
  v24 = v60 + *(int *)(v15 + 44);
  v25 = *(_QWORD *)v24;
  v26 = *(_BYTE *)(v24 + 8);
  v27 = swift_retain(*(_QWORD *)v24);
  v28 = sub_10002556C(v27, v26);
  swift_release(v25);
  LOBYTE(v10) = sub_100067E80();
  swift_release(v28);
  v29 = v16[3];
  v30 = v16[4];
  sub_100050938(v16, v29);
  (*(void (**)(uint64_t, uint64_t))(v30 + 24))(v29, v30);
  v32 = 0.256;
  if ((v10 & 1) != 0)
    v32 = 0.298;
  v33 = v31 * v32;
  v34 = swift_retain(v25);
  v35 = sub_10002556C(v34, v26);
  swift_release(v25);
  v36 = sub_100067E80();
  swift_release(v35);
  v37 = v16[3];
  v38 = v16[4];
  sub_100050938(v16, v37);
  v39 = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 24))(v37, v38);
  v41 = 0.252;
  if (v36)
    v41 = 0.295;
  v42 = v40 * v41;
  v43 = static Edge.Set.all.getter(v39);
  v44 = v64;
  sub_10001DEA0(v21, v64, &qword_100086090);
  v45 = v44 + *(int *)(v65 + 36);
  *(_BYTE *)v45 = v43;
  *(double *)(v45 + 8) = v33;
  *(_QWORD *)(v45 + 16) = 0;
  *(double *)(v45 + 24) = v42;
  *(_QWORD *)(v45 + 32) = 0;
  *(_BYTE *)(v45 + 40) = 0;
  sub_1000106A4(v21, &qword_100086090);
  v46 = v16[3];
  v47 = v16[4];
  sub_100050938(v16, v46);
  v48 = (*(double (**)(uint64_t, uint64_t))(v47 + 24))(v46, v47);
  v49 = v16[3];
  v50 = v16[4];
  sub_100050938(v16, v49);
  v51 = (*(uint64_t (**)(uint64_t, uint64_t))(v50 + 24))(v49, v50);
  v53 = v52;
  v54 = static Alignment.center.getter(v51);
  v55 = v66;
  sub_10002793C(0.0, 1, 0.0, 1, v48, 0, 0.0, 1, v66, 0.0, 1, v53, 0, v54, v56, &qword_100086098, &qword_1000860A0);
  sub_1000106A4(v44, &qword_100086098);
  return sub_10001DE5C(v55, v67, &qword_1000860A0);
}

uint64_t sub_10003A418@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v40 = a2;
  v37 = type metadata accessor for ClockWidgetAccentableOpacity(0);
  __chkstk_darwin(v37);
  v4 = (_OWORD *)((char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_1000041D8(&qword_100087720);
  __chkstk_darwin(v5);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = sub_1000041D8(&qword_100087710);
  v8 = __chkstk_darwin(v39);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v37 - v11;
  v13 = sub_1000041D8(&qword_100087C48);
  __chkstk_darwin(v13);
  v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_1000041D8(&qword_100087700);
  __chkstk_darwin(v38);
  v17 = (uint64_t *)((char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = a1 + *(int *)(type metadata accessor for ClockText(0) + 44);
  v19 = *(_QWORD *)v18;
  v20 = *(_BYTE *)(v18 + 8);
  v21 = swift_retain(*(_QWORD *)v18);
  v22 = sub_10002556C(v21, v20);
  swift_release(v19);
  LOBYTE(v19) = sub_100067F0C();
  v23 = swift_release(v22);
  if ((v19 & 1) != 0)
  {
    *v17 = static Alignment.center.getter(v23);
    v17[1] = v24;
    v25 = sub_1000041D8(&qword_100087C58);
    sub_10003A7B0(a1, (uint64_t)v17 + *(int *)(v25 + 44));
    sub_10001DEA0((uint64_t)v17, (uint64_t)v15, &qword_100087700);
    swift_storeEnumTagMultiPayload(v15, v13, 0);
    v26 = sub_10001DDB4(&qword_1000876F8, &qword_100087700, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    v27 = sub_100063F90();
    _ConditionalContent<>.init(storage:)(v15, v38, v39, v26, v27);
    v28 = (uint64_t)v17;
    v29 = &qword_100087700;
  }
  else
  {
    *(_QWORD *)v7 = static HorizontalAlignment.center.getter(v23);
    *((_QWORD *)v7 + 1) = 0;
    v7[16] = 1;
    v30 = sub_1000041D8(&qword_100087C50);
    sub_10003BED8(a1, (uint64_t)&v7[*(int *)(v30 + 44)]);
    *v4 = xmmword_10006CA80;
    v31 = (_QWORD *)((char *)v4 + *(int *)(v37 + 24));
    *v31 = swift_getKeyPath(&unk_10006CBC0);
    v32 = sub_1000041D8(&qword_100085E28);
    swift_storeEnumTagMultiPayload(v31, v32, 0);
    sub_10001DEA0((uint64_t)v7, (uint64_t)v10, &qword_100087720);
    v33 = v39;
    sub_1000106E0((uint64_t)v4, (uint64_t)&v10[*(int *)(v39 + 36)], type metadata accessor for ClockWidgetAccentableOpacity);
    sub_1000106A4((uint64_t)v7, &qword_100087720);
    sub_10001DE5C((uint64_t)v10, (uint64_t)v12, &qword_100087710);
    sub_10001DEA0((uint64_t)v12, (uint64_t)v15, &qword_100087710);
    swift_storeEnumTagMultiPayload(v15, v13, 1);
    v34 = sub_10001DDB4(&qword_1000876F8, &qword_100087700, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    v35 = sub_100063F90();
    _ConditionalContent<>.init(storage:)(v15, v38, v33, v34, v35);
    v28 = (uint64_t)v12;
    v29 = &qword_100087710;
  }
  return sub_1000106A4(v28, v29);
}

uint64_t sub_10003A7B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v36 = a1;
  v39 = a2;
  v2 = sub_1000041D8(&qword_100087C60);
  __chkstk_darwin(v2);
  v4 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_1000041D8(&qword_100087C68);
  v5 = __chkstk_darwin(v38);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v37 = (uint64_t)&v36 - v8;
  v9 = type metadata accessor for ClockWidgetAccentableOpacity(0);
  __chkstk_darwin(v9);
  v11 = (_OWORD *)((char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = sub_1000041D8(&qword_1000860B0);
  __chkstk_darwin(v12);
  v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000041D8(&qword_100087C70);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v36 - v19;
  sub_10003AB48((uint64_t)v14);
  __asm { FMOV            V0.2D, #1.0 }
  *v11 = _Q0;
  v26 = (_QWORD *)((char *)v11 + *(int *)(v9 + 24));
  *v26 = swift_getKeyPath(&unk_10006CBC0);
  v27 = sub_1000041D8(&qword_100085E28);
  swift_storeEnumTagMultiPayload(v26, v27, 0);
  sub_10001DEA0((uint64_t)v14, (uint64_t)v18, &qword_1000860B0);
  sub_1000106E0((uint64_t)v11, (uint64_t)&v18[*(int *)(v15 + 36)], type metadata accessor for ClockWidgetAccentableOpacity);
  sub_1000106A4((uint64_t)v14, &qword_1000860B0);
  v28 = sub_10001DE5C((uint64_t)v18, (uint64_t)v20, &qword_100087C70);
  *(_QWORD *)v4 = static HorizontalAlignment.center.getter(v28);
  *((_QWORD *)v4 + 1) = 0;
  v4[16] = 1;
  v29 = sub_1000041D8(&qword_100087C78);
  sub_10003AFAC(v36, (uint64_t)&v4[*(int *)(v29 + 44)]);
  *v11 = xmmword_10006CA80;
  v30 = (_QWORD *)((char *)v11 + *(int *)(v9 + 24));
  *v30 = swift_getKeyPath(&unk_10006CBC0);
  swift_storeEnumTagMultiPayload(v30, v27, 0);
  sub_10001DEA0((uint64_t)v4, (uint64_t)v7, &qword_100087C60);
  sub_1000106E0((uint64_t)v11, (uint64_t)&v7[*(int *)(v38 + 36)], type metadata accessor for ClockWidgetAccentableOpacity);
  sub_1000106A4((uint64_t)v4, &qword_100087C60);
  v31 = v37;
  sub_10001DE5C((uint64_t)v7, v37, &qword_100087C68);
  sub_10001DEA0((uint64_t)v20, (uint64_t)v18, &qword_100087C70);
  sub_10001DEA0(v31, (uint64_t)v7, &qword_100087C68);
  v32 = v39;
  sub_10001DEA0((uint64_t)v18, v39, &qword_100087C70);
  v33 = sub_1000041D8(&qword_100087C80);
  v34 = v32 + *(int *)(v33 + 48);
  *(_QWORD *)v34 = 0;
  *(_BYTE *)(v34 + 8) = 1;
  sub_10001DEA0((uint64_t)v7, v32 + *(int *)(v33 + 64), &qword_100087C68);
  sub_1000106A4(v31, &qword_100087C68);
  sub_1000106A4((uint64_t)v20, &qword_100087C70);
  sub_1000106A4((uint64_t)v7, &qword_100087C68);
  return sub_1000106A4((uint64_t)v18, &qword_100087C70);
}

uint64_t sub_10003AB48@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t KeyPath;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  char v83;
  int v84;
  __int16 v85;
  char v86;
  _BYTE v87[7];
  _OWORD v88[9];
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  char v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;

  v2 = v1;
  v68 = a1;
  v3 = sub_1000041D8(&qword_100084848);
  __chkstk_darwin(v3);
  v5 = (char *)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000041D8(&qword_1000860B0);
  __chkstk_darwin(v6);
  v67 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ClockText(0);
  v66 = v1 + *(int *)(v8 + 20);
  sub_100008130((uint64_t)v5);
  v9 = type metadata accessor for TimeZone(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v5, 0, 1, v9);
  v10 = Text.init(dateFormatTemplate:timeZone:)(7171402, 0xE300000000000000, v5);
  v12 = v11;
  v14 = v13;
  v16 = v15 & 1;
  v17 = sub_10003C854();
  v62 = Text.foregroundColor(_:)(v17, v10, v12, v16, v14);
  v63 = v18;
  v20 = v19;
  v22 = v21;
  swift_release(v17);
  sub_100010E24(v10, v12, v16);
  swift_bridgeObjectRelease(v14);
  v64 = v8;
  v65 = v2;
  if (*(_BYTE *)(v2 + *(int *)(v8 + 36)) == 1)
    v23 = sub_100024BA0();
  else
    v23 = sub_100024C88();
  v24 = v22 & 1;
  v25 = *v23;
  v26 = swift_retain(*v23);
  v28 = v62;
  v27 = v63;
  v29 = Text.font(_:)(v26, v62, v20, v24, v63);
  v31 = v30;
  v33 = v32;
  v35 = v34;
  swift_release(v25);
  LOBYTE(v25) = v33 & 1;
  sub_100010E24(v28, v20, v24);
  swift_bridgeObjectRelease(v27);
  v36 = (_QWORD *)(v65 + *(int *)(v64 + 24));
  v37 = v36[3];
  v38 = v36[4];
  sub_100050938(v36, v37);
  v39 = (*(double (**)(uint64_t, uint64_t))(v38 + 24))(v37, v38) * 0.78;
  v40 = v36[3];
  v41 = v36[4];
  sub_100050938(v36, v40);
  v42 = (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 24))(v40, v41);
  v44 = v43 * 0.78;
  v45 = static Alignment.center.getter(v42);
  sub_10002775C(0.0, 1, 0.0, 1, v39, 0, 0.0, 1, (uint64_t)&v95, 0.0, 1, v44, 0, v45, v46, v29, v31, v25, v35);
  sub_100010E24(v29, v31, v25);
  swift_bridgeObjectRelease(v35);
  KeyPath = swift_getKeyPath(&unk_10006CC80);
  LOBYTE(v25) = static Edge.Set.horizontal.getter();
  v86 = 1;
  v48 = swift_getKeyPath(&unk_10006CCE0);
  v88[6] = v101;
  v88[7] = v102;
  v88[8] = v103;
  v88[2] = v97;
  v88[3] = v98;
  v88[4] = v99;
  v88[5] = v100;
  v88[0] = v95;
  v88[1] = v96;
  LOWORD(v89) = 256;
  *(_DWORD *)((char *)&v89 + 2) = v84;
  WORD3(v89) = v85;
  *((_QWORD *)&v89 + 1) = KeyPath;
  *(_QWORD *)&v90 = 0x3FE4CCCCCCCCCCCDLL;
  BYTE8(v90) = v25;
  HIDWORD(v90) = *(_DWORD *)&v87[3];
  *(_DWORD *)((char *)&v90 + 9) = *(_DWORD *)v87;
  v91 = 0u;
  v92 = 0u;
  LOBYTE(v93) = v86;
  *((_QWORD *)&v93 + 1) = v48;
  v94 = 1;
  v81 = 0u;
  v82 = v93;
  v83 = 1;
  v77 = v103;
  v78 = v89;
  v79 = v90;
  v80 = 0u;
  v73 = v99;
  v74 = v100;
  v75 = v101;
  v76 = v102;
  v69 = v95;
  v70 = v96;
  v71 = v97;
  v72 = v98;
  v49 = type metadata accessor for WidgetUtilities();
  v50 = type metadata accessor for WorldClockCity(0);
  v51 = (*(uint64_t (**)(_QWORD, _QWORD))(v49 + 120))(*(_QWORD *)(v66 + *(int *)(v50 + 32)), *(_QWORD *)(v66 + *(int *)(v50 + 32) + 8));
  v53 = v52;
  v55 = v54;
  v57 = v56 & 1;
  v58 = sub_1000041D8(&qword_1000860B8);
  v59 = sub_10005095C();
  v60 = (uint64_t)v67;
  View.accessibilityLabel(_:)(v51, v53, v57, v55, v58, v59);
  sub_100010E24(v51, v53, v57);
  swift_bridgeObjectRelease(v55);
  sub_100050BBC((uint64_t)v88);
  return sub_10001DE5C(v60, v68, &qword_1000860B0);
}

uint64_t sub_10003AFAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  __n128 v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v78 = a2;
  v3 = sub_1000041D8(&qword_100086170);
  __chkstk_darwin(v3);
  v73 = (uint64_t)&v71 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = sub_1000041D8(&qword_100087C88);
  v5 = __chkstk_darwin(v72);
  v75 = (uint64_t)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v74 = (uint64_t)&v71 - v7;
  v8 = sub_1000041D8(&qword_100087C90);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v77 = (uint64_t)&v71 - v12;
  v13 = sub_1000041D8(&qword_100086128);
  __chkstk_darwin(v13);
  v15 = (char *)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000041D8(&qword_100087C98);
  v17 = __chkstk_darwin(v16);
  v76 = (uint64_t)&v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v71 - v20;
  __chkstk_darwin(v19);
  v23 = (char *)&v71 - v22;
  v24 = sub_10003B4D8((uint64_t)v15);
  v25 = static Edge.Set.bottom.getter(v24);
  v26 = *(int *)(type metadata accessor for ClockText(0) + 24);
  v71 = a1;
  v27 = (_QWORD *)(a1 + v26);
  v28 = *(_QWORD *)(a1 + v26 + 24);
  v29 = *(_QWORD *)(a1 + v26 + 32);
  sub_100050938((_QWORD *)(a1 + v26), v28);
  v30 = (*(double (**)(uint64_t, uint64_t))(v29 + 24))(v28, v29);
  v31 = v27[3];
  v32 = v27[4];
  sub_100050938(v27, v31);
  v33 = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 192))(v31, v32);
  v34.n128_u64[0] = 0x3FD8F5C28F5C28F6;
  if ((v33 & 1) != 0)
    v34.n128_f64[0] = 0.22;
  v34.n128_f64[0] = v30 * v34.n128_f64[0];
  v35 = EdgeInsets.init(_all:)(v33, v34);
  v37 = v36;
  v39 = v38;
  v41 = v40;
  sub_10001DEA0((uint64_t)v15, (uint64_t)v21, &qword_100086128);
  v42 = &v21[*(int *)(v16 + 36)];
  *v42 = v25;
  *((double *)v42 + 1) = v35;
  *((_QWORD *)v42 + 2) = v37;
  *((_QWORD *)v42 + 3) = v39;
  *((_QWORD *)v42 + 4) = v41;
  v42[40] = 0;
  sub_1000106A4((uint64_t)v15, &qword_100086128);
  sub_10001DE5C((uint64_t)v21, (uint64_t)v23, &qword_100087C98);
  v43 = v27[3];
  v44 = v27[4];
  sub_100050938(v27, v43);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v44 + 192))(v43, v44) & 1) != 0)
  {
    v45 = v73;
    v46 = sub_10003BA20(v73);
    v47 = static Edge.Set.top.getter(v46);
    v48 = v27[3];
    v49 = v27[4];
    sub_100050938(v27, v48);
    v50 = (*(uint64_t (**)(uint64_t, uint64_t))(v49 + 24))(v48, v49);
    v52.n128_f64[0] = v51 * 0.22;
    v53 = EdgeInsets.init(_all:)(v50, v52);
    v55 = v54;
    v57 = v56;
    v59 = v58;
    v60 = v75;
    sub_10001DEA0(v45, v75, &qword_100086170);
    v61 = v60 + *(int *)(v72 + 36);
    *(_BYTE *)v61 = v47;
    *(double *)(v61 + 8) = v53;
    *(_QWORD *)(v61 + 16) = v55;
    *(_QWORD *)(v61 + 24) = v57;
    *(_QWORD *)(v61 + 32) = v59;
    *(_BYTE *)(v61 + 40) = 0;
    sub_1000106A4(v45, &qword_100086170);
    v62 = v74;
    sub_10001DE5C(v60, v74, &qword_100087C88);
    sub_10001DEA0(v62, v60, &qword_100087C88);
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v63 = sub_1000041D8(&qword_100087CB0);
    sub_10001DEA0(v60, (uint64_t)&v11[*(int *)(v63 + 48)], &qword_100087C88);
    sub_1000106A4(v62, &qword_100087C88);
    sub_1000106A4(v60, &qword_100087C88);
    v64 = sub_1000041D8(&qword_100087CA0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(v11, 0, 1, v64);
    v65 = v77;
    sub_10001DE5C((uint64_t)v11, v77, &qword_100087C90);
  }
  else
  {
    v66 = sub_1000041D8(&qword_100087CA0);
    v65 = v77;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 56))(v77, 1, 1, v66);
  }
  v67 = v76;
  sub_10001DEA0((uint64_t)v23, v76, &qword_100087C98);
  sub_10001DEA0(v65, (uint64_t)v11, &qword_100087C90);
  v68 = v78;
  sub_10001DEA0(v67, v78, &qword_100087C98);
  v69 = sub_1000041D8(&qword_100087CA8);
  sub_10001DEA0((uint64_t)v11, v68 + *(int *)(v69 + 48), &qword_100087C90);
  sub_1000106A4(v65, &qword_100087C90);
  sub_1000106A4((uint64_t)v23, &qword_100087C98);
  sub_1000106A4((uint64_t)v11, &qword_100087C90);
  return sub_1000106A4(v67, &qword_100087C98);
}

uint64_t sub_10003B4D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t KeyPath;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  double v62;
  double v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  char v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  int *v90;
  _QWORD v91[2];
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  double v105;
  _OWORD v106[9];
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  double v111;
  char v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;

  v2 = v1;
  v89 = a1;
  v3 = type metadata accessor for ContentSizeCategory(0);
  v83 = *(_QWORD *)(v3 - 8);
  v84 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v79 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000041D8(&qword_100086128);
  __chkstk_darwin(v6);
  v88 = (char *)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = (int *)type metadata accessor for ClockText(0);
  v8 = v1 + v90[5];
  v85 = v8;
  v86 = type metadata accessor for WorldClockCity(0);
  v9 = (_QWORD *)(v8 + *(int *)(v86 + 28));
  v10 = v9[1];
  *(_QWORD *)&v106[0] = *v9;
  *((_QWORD *)&v106[0] + 1) = v10;
  v11 = sub_10000D9FC();
  v87 = v11;
  swift_bridgeObjectRetain(v10);
  v12 = Text.init<A>(_:)(v106, &type metadata for String, v11);
  v14 = v13;
  v16 = v15;
  v18 = v17 & 1;
  v19 = sub_10003C580();
  v20 = Text.foregroundColor(_:)(v19, v12, v14, v18, v16);
  v80 = v21;
  v81 = v22;
  v24 = v23;
  swift_release(v19);
  v25 = v24 & 1;
  sub_100010E24(v12, v14, v18);
  swift_bridgeObjectRelease(v16);
  v26 = v90[6];
  v82 = v2;
  v27 = *(_QWORD *)(v2 + v26 + 24);
  v28 = *(_QWORD *)(v2 + v26 + 32);
  sub_100050938((_QWORD *)(v2 + v26), v27);
  sub_100025364(&qword_100085E48, (uint64_t (*)(_QWORD))&type metadata accessor for ContentSizeCategory, (char *)0xD000000000000013, (char *)0x800000010006F3D0, (uint64_t)v5);
  v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 208))(v5, v27, v28);
  (*(void (**)(char *, uint64_t))(v83 + 8))(v5, v84);
  v31 = v80;
  v30 = v81;
  v32 = Text.font(_:)(v29, v20, v80, v25, v81);
  v34 = v33;
  LOBYTE(v27) = v35;
  v37 = v36;
  swift_release(v29);
  LOBYTE(v29) = v27 & 1;
  sub_100010E24(v20, v31, v25);
  v38 = swift_bridgeObjectRelease(v30);
  v39 = static Font.Weight.semibold.getter(v38);
  v40 = Text.fontWeight(_:)(*(_QWORD *)&v39, 0, v32, v34, v27 & 1, v37);
  v42 = v41;
  v44 = v43;
  v46 = v45 & 1;
  sub_100010E24(v32, v34, v29);
  swift_bridgeObjectRelease(v37);
  v47 = (_QWORD *)(v82 + v90[11]);
  v48 = *v47;
  LOBYTE(v25) = *((_BYTE *)v47 + 8);
  v49 = swift_retain(*v47);
  v50 = sub_10002556C(v49, v25);
  swift_release(v48);
  LOBYTE(v48) = sub_100067F0C();
  v51 = swift_release(v50);
  if ((v48 & 1) != 0)
    v52 = INFINITY;
  else
    v52 = 17.0;
  v53 = static Alignment.center.getter(v51);
  sub_10002775C(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, (uint64_t)&v113, 0.0, 1, v52, 0, v53, v54, v40, v42, v46, v44);
  sub_100010E24(v40, v42, v46);
  swift_bridgeObjectRelease(v44);
  KeyPath = swift_getKeyPath(&unk_10006CD10);
  v56 = *v47;
  v57 = *((_BYTE *)v47 + 8);
  v58 = swift_retain(*v47);
  v59 = sub_10002556C(v58, v57);
  swift_release(v56);
  v60 = sub_100067F0C();
  v61 = swift_release(v59);
  v62 = 1.0;
  if (v60)
    v63 = 0.8;
  else
    v63 = 1.0;
  v112 = 0;
  v64 = static UnitPoint.center.getter(v61);
  v66 = v65;
  v67 = swift_retain(v56);
  v68 = sub_10002556C(v67, v57);
  swift_release(v56);
  v69 = sub_100067F0C();
  swift_release(v68);
  if (!v69)
    v62 = 0.6;
  v70 = v112;
  v71 = swift_getKeyPath(&unk_10006CC80);
  v106[6] = v119;
  v106[7] = v120;
  v106[8] = v121;
  v106[2] = v115;
  v106[3] = v116;
  v106[4] = v117;
  v106[5] = v118;
  v106[0] = v113;
  v106[1] = v114;
  *(_QWORD *)&v107 = KeyPath;
  *((_QWORD *)&v107 + 1) = 1;
  LOBYTE(v108) = v70;
  *((double *)&v108 + 1) = v63;
  *(double *)&v109 = v63;
  *((double *)&v109 + 1) = v64;
  *(_QWORD *)&v110 = v66;
  *((_QWORD *)&v110 + 1) = v71;
  v111 = v62;
  v96 = v117;
  v97 = v118;
  v94 = v115;
  v95 = v116;
  v100 = v121;
  v101 = v107;
  v98 = v119;
  v99 = v120;
  v105 = v62;
  v103 = v109;
  v104 = v110;
  v102 = v108;
  v92 = v113;
  v93 = v114;
  v72 = (uint64_t *)(v85 + *(int *)(v86 + 24));
  v74 = *v72;
  v73 = v72[1];
  v91[0] = v74;
  v91[1] = v73;
  v75 = sub_1000041D8(&qword_100086130);
  v76 = sub_100050C18();
  v77 = (uint64_t)v88;
  View.accessibilityLabel<A>(_:)(v91, v75, &type metadata for String, v76, v87);
  sub_100050DD0((uint64_t)v106);
  return sub_10001DE5C(v77, v89, &qword_100086128);
}

uint64_t sub_10003BA20@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE v68[12];
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  _BYTE *v77;
  uint64_t v78;
  int *v79;
  _QWORD v80[2];
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  _OWORD v90[10];
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;

  v2 = v1;
  v78 = a1;
  v3 = type metadata accessor for ContentSizeCategory(0);
  v73 = *(_QWORD *)(v3 - 8);
  v74 = v3;
  __chkstk_darwin(v3);
  v5 = (uint64_t)&v68[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_1000041D8(&qword_100086170);
  __chkstk_darwin(v6);
  v77 = &v68[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v79 = (int *)type metadata accessor for ClockText(0);
  v75 = v1 + v79[5];
  sub_100008208(1);
  *(_QWORD *)&v91 = v8;
  *((_QWORD *)&v91 + 1) = v9;
  v76 = sub_10000D9FC();
  v10 = Text.init<A>(_:)(&v91, &type metadata for String, v76);
  v12 = v11;
  v14 = v13;
  v16 = v15 & 1;
  v17 = sub_10003C580();
  v18 = Text.foregroundColor(_:)(v17, v10, v12, v16, v14);
  v70 = v19;
  v71 = v20;
  v22 = v21;
  swift_release(v17);
  v69 = v22 & 1;
  sub_100010E24(v10, v12, v16);
  swift_bridgeObjectRelease(v14);
  v23 = v79[6];
  v72 = v2;
  v24 = (_QWORD *)(v2 + v23);
  v25 = *(_QWORD *)(v2 + v23 + 24);
  v26 = *(_QWORD *)(v2 + v23 + 32);
  sub_100050938((_QWORD *)(v2 + v23), v25);
  sub_100025364(&qword_100085E48, (uint64_t (*)(_QWORD))&type metadata accessor for ContentSizeCategory, (char *)0xD000000000000013, (char *)0x800000010006F3D0, v5);
  v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 208))(v5, v25, v26);
  (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v5, v74);
  v28 = v18;
  v29 = v18;
  v31 = v70;
  v30 = v71;
  LOBYTE(v25) = v69;
  v32 = Text.font(_:)(v27, v29, v70, v69, v71);
  v34 = v33;
  LOBYTE(v5) = v35;
  v74 = v36;
  swift_release(v27);
  LOBYTE(v27) = v5 & 1;
  sub_100010E24(v28, v31, v25);
  v37 = swift_bridgeObjectRelease(v30);
  v38 = static Font.Weight.semibold.getter(v37);
  v39 = v74;
  v40 = Text.fontWeight(_:)(*(_QWORD *)&v38, 0, v32, v34, v5 & 1, v74);
  v42 = v41;
  v44 = v43;
  v46 = v45;
  sub_100010E24(v32, v34, v27);
  swift_bridgeObjectRelease(v39);
  v47 = v24[3];
  v48 = v24[4];
  sub_100050938(v24, v47);
  v49 = (*(double (**)(uint64_t, uint64_t))(v48 + 24))(v47, v48);
  v50 = (uint64_t *)(v72 + v79[11]);
  v51 = *v50;
  LOBYTE(v47) = *((_BYTE *)v50 + 8);
  v52 = swift_retain(*v50);
  v53 = sub_10002556C(v52, v47);
  swift_release(v51);
  LOBYTE(v51) = sub_100067F0C();
  v54 = swift_release(v53);
  if ((v51 & 1) != 0)
  {
    v55 = INFINITY;
  }
  else
  {
    v56 = v24[3];
    v57 = v24[4];
    sub_100050938(v24, v56);
    v55 = (*(double (**)(uint64_t, uint64_t))(v57 + 24))(v56, v57);
  }
  v58 = static Alignment.center.getter(v54);
  sub_10002775C(0.0, 1, 0.0, 1, v49, 0, 0.0, 1, (uint64_t)&v91, 0.0, 1, v55, 0, v58, v59, v40, v42, v44 & 1, v46);
  sub_100010E24(v40, v42, v44 & 1);
  swift_bridgeObjectRelease(v46);
  v90[6] = v97;
  v90[7] = v98;
  v90[8] = v99;
  v90[2] = v93;
  v90[3] = v94;
  v90[4] = v95;
  v90[5] = v96;
  v90[0] = v91;
  v90[1] = v92;
  v87 = v97;
  v88 = v98;
  v89 = v99;
  v83 = v93;
  v84 = v94;
  v85 = v95;
  v86 = v96;
  v81 = v91;
  v82 = v92;
  v60 = sub_10000422C();
  sub_100008208(v60 & 1);
  v62 = v61;
  v80[0] = v63;
  v80[1] = v61;
  v64 = sub_1000041D8(&qword_100086100);
  v65 = sub_100050B5C(&qword_1000860F8, &qword_100086100);
  v66 = (uint64_t)v77;
  View.accessibilityLabel<A>(_:)(v80, v64, &type metadata for String, v65, v76);
  swift_bridgeObjectRelease(v62);
  sub_100050E2C((uint64_t)v90);
  return sub_10001DE5C(v66, v78, &qword_100086170);
}

uint64_t sub_10003BED8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  double v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __n128 v76;
  double v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;

  v108 = a2;
  v3 = sub_1000041D8(&qword_100086170);
  __chkstk_darwin(v3);
  v101 = (uint64_t)&v97 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = sub_1000041D8(&qword_100087C88);
  v5 = __chkstk_darwin(v100);
  v103 = (uint64_t)&v97 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v99 = (uint64_t)&v97 - v8;
  __chkstk_darwin(v7);
  v102 = (uint64_t)&v97 - v9;
  v10 = sub_1000041D8(&qword_100087C90);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v97 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v107 = (uint64_t)&v97 - v14;
  v15 = sub_1000041D8(&qword_100086128);
  __chkstk_darwin(v15);
  v17 = (char *)&v97 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1000041D8(&qword_100087C98);
  __chkstk_darwin(v18);
  v20 = (char *)&v97 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = sub_1000041D8(&qword_100087CB8);
  v21 = __chkstk_darwin(v104);
  v106 = (uint64_t)&v97 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v21);
  v25 = (char *)&v97 - v24;
  __chkstk_darwin(v23);
  v105 = (uint64_t)&v97 - v26;
  v27 = sub_10003B4D8((uint64_t)v17);
  v28 = static Edge.Set.top.getter(v27);
  v97 = type metadata accessor for ClockText(0);
  v98 = a1;
  v29 = (_QWORD *)(a1 + *(int *)(v97 + 24));
  v31 = v29[3];
  v30 = v29[4];
  sub_100050938(v29, v31);
  v32 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 192))(v31, v30);
  v33 = 0.0;
  v34.n128_u64[0] = 0;
  if ((v32 & 1) != 0)
  {
    v35 = v29[3];
    v36 = v29[4];
    sub_100050938(v29, v35);
    v34.n128_f64[0] = (*(double (**)(uint64_t, uint64_t))(v36 + 24))(v35, v36) * 0.004;
  }
  v37 = EdgeInsets.init(_all:)(v32, v34);
  v39 = v38;
  v41 = v40;
  v43 = v42;
  sub_10001DEA0((uint64_t)v17, (uint64_t)v20, &qword_100086128);
  v44 = &v20[*(int *)(v18 + 36)];
  *v44 = v28;
  *((double *)v44 + 1) = v37;
  *((_QWORD *)v44 + 2) = v39;
  *((_QWORD *)v44 + 3) = v41;
  *((_QWORD *)v44 + 4) = v43;
  v44[40] = 0;
  v45 = sub_1000106A4((uint64_t)v17, &qword_100086128);
  v46 = static Edge.Set.bottom.getter(v45);
  v47 = v29[3];
  v48 = v29[4];
  sub_100050938(v29, v47);
  v49 = (*(uint64_t (**)(uint64_t, uint64_t))(v48 + 192))(v47, v48);
  if ((v49 & 1) == 0)
  {
    v51 = v29[3];
    v52 = v29[4];
    sub_100050938(v29, v51);
    v33 = (*(double (**)(uint64_t, uint64_t))(v52 + 24))(v51, v52) * 0.39;
  }
  v50.n128_f64[0] = v33;
  v53 = EdgeInsets.init(_all:)(v49, v50);
  v55 = v54;
  v57 = v56;
  v59 = v58;
  sub_10001DEA0((uint64_t)v20, (uint64_t)v25, &qword_100087C98);
  v60 = &v25[*(int *)(v104 + 36)];
  *v60 = v46;
  *((double *)v60 + 1) = v53;
  *((_QWORD *)v60 + 2) = v55;
  *((_QWORD *)v60 + 3) = v57;
  *((_QWORD *)v60 + 4) = v59;
  v60[40] = 0;
  sub_1000106A4((uint64_t)v20, &qword_100087C98);
  v61 = v105;
  sub_10001DE5C((uint64_t)v25, v105, &qword_100087CB8);
  v62 = v29[3];
  v63 = v29[4];
  sub_100050938(v29, v62);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v63 + 192))(v62, v63) & 1) != 0)
  {
    v64 = v101;
    v65 = v98;
    v66 = sub_10003BA20(v101);
    v67 = static Edge.Set.top.getter(v66);
    v68 = v29[3];
    v69 = v29[4];
    sub_100050938(v29, v68);
    v70 = (*(double (**)(uint64_t, uint64_t))(v69 + 24))(v68, v69);
    v71 = (uint64_t *)(v65 + *(int *)(v97 + 44));
    v72 = *v71;
    LOBYTE(v68) = *((_BYTE *)v71 + 8);
    v73 = swift_retain(*v71);
    v74 = sub_10002556C(v73, v68);
    swift_release(v72);
    LOBYTE(v72) = sub_100067E80();
    v75 = swift_release(v74);
    v76.n128_u64[0] = 0x3FC5C28F5C28F5C3;
    if ((v72 & 1) != 0)
      v76.n128_f64[0] = 0.07;
    v76.n128_f64[0] = v70 * v76.n128_f64[0];
    v77 = EdgeInsets.init(_all:)(v75, v76);
    v79 = v78;
    v81 = v80;
    v83 = v82;
    v84 = v99;
    sub_10001DEA0(v64, v99, &qword_100086170);
    v85 = v84 + *(int *)(v100 + 36);
    *(_BYTE *)v85 = v67;
    *(double *)(v85 + 8) = v77;
    *(_QWORD *)(v85 + 16) = v79;
    *(_QWORD *)(v85 + 24) = v81;
    *(_QWORD *)(v85 + 32) = v83;
    *(_BYTE *)(v85 + 40) = 0;
    sub_1000106A4(v64, &qword_100086170);
    v86 = v84;
    v87 = v102;
    sub_10001DE5C(v86, v102, &qword_100087C88);
    v88 = v103;
    sub_10001DEA0(v87, v103, &qword_100087C88);
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    v89 = sub_1000041D8(&qword_100087CB0);
    sub_10001DEA0(v88, (uint64_t)&v13[*(int *)(v89 + 48)], &qword_100087C88);
    sub_1000106A4(v87, &qword_100087C88);
    sub_1000106A4(v88, &qword_100087C88);
    v90 = sub_1000041D8(&qword_100087CA0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v90 - 8) + 56))(v13, 0, 1, v90);
    v91 = v107;
    sub_10001DE5C((uint64_t)v13, v107, &qword_100087C90);
  }
  else
  {
    v92 = sub_1000041D8(&qword_100087CA0);
    v91 = v107;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v92 - 8) + 56))(v107, 1, 1, v92);
  }
  v93 = v106;
  sub_10001DEA0(v61, v106, &qword_100087CB8);
  sub_10001DEA0(v91, (uint64_t)v13, &qword_100087C90);
  v94 = v108;
  sub_10001DEA0(v93, v108, &qword_100087CB8);
  v95 = sub_1000041D8(&qword_100087CC0);
  sub_10001DEA0((uint64_t)v13, v94 + *(int *)(v95 + 48), &qword_100087C90);
  sub_1000106A4(v91, &qword_100087C90);
  sub_1000106A4(v61, &qword_100087CB8);
  sub_1000106A4((uint64_t)v13, &qword_100087C90);
  return sub_1000106A4(v93, &qword_100087CB8);
}

uint64_t sub_10003C580()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _BYTE *v9;
  char v10;
  uint64_t (*v11)(char *, uint64_t);
  uint64_t v12;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;

  v1 = type metadata accessor for ClockText(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for WidgetRenderingMode(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = &v0[*(int *)(v1 + 40)];
  static WidgetRenderingMode.accented.getter(v6);
  v10 = static WidgetRenderingMode.== infix(_:_:)(v9, v8);
  v11 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
  v12 = v11(v8, v4);
  if ((v10 & 1) != 0)
    return static Color.white.getter(v12);
  static WidgetRenderingMode.vibrant.getter(v12);
  v14 = static WidgetRenderingMode.== infix(_:_:)(v9, v8);
  v11(v8, v4);
  sub_10000DF30((uint64_t)v0, (uint64_t)v3, type metadata accessor for ClockText);
  if ((v14 & 1) != 0)
  {
    v15 = v3[*(int *)(v1 + 36)];
    sub_10000D330((uint64_t)v3, type metadata accessor for ClockText);
    if ((v15 & 1) != 0)
      goto LABEL_12;
  }
  else
  {
    sub_10000D330((uint64_t)v3, type metadata accessor for ClockText);
  }
  if (v0[*(int *)(v1 + 36)] == 1 && *v0 == 1)
  {
    if (qword_10008A670 != -1)
      swift_once(&qword_10008A670, sub_100041FD0);
    v16 = qword_10008BF20;
    return swift_retain(v16);
  }
LABEL_12:
  if (qword_10008A640 != -1)
    swift_once(&qword_10008A640, sub_100041D1C);
  v16 = qword_10008BEF0;
  return swift_retain(v16);
}

uint64_t sub_10003C750()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = type metadata accessor for ContentSizeCategory(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (_QWORD *)(v0 + *(int *)(type metadata accessor for ClockText(0) + 24));
  v6 = v5[3];
  v7 = v5[4];
  sub_100050938(v5, v6);
  sub_100025364(&qword_100085E48, (uint64_t (*)(_QWORD))&type metadata accessor for ContentSizeCategory, (char *)0xD000000000000013, (char *)0x800000010006F3D0, (uint64_t)v4);
  v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 208))(v4, v6, v7);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v8;
}

uint64_t sub_10003C854()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _BYTE *v9;
  char v10;
  uint64_t (*v11)(char *, uint64_t);
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v16;

  v1 = type metadata accessor for ClockText(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for WidgetRenderingMode(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = &v0[*(int *)(v1 + 40)];
  static WidgetRenderingMode.accented.getter(v6);
  v10 = static WidgetRenderingMode.== infix(_:_:)(v9, v8);
  v11 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
  v12 = v11(v8, v4);
  if ((v10 & 1) != 0)
    return static Color.white.getter(v12);
  static WidgetRenderingMode.vibrant.getter(v12);
  v13 = static WidgetRenderingMode.== infix(_:_:)(v9, v8);
  v11(v8, v4);
  sub_10000DF30((uint64_t)v0, (uint64_t)v3, type metadata accessor for ClockText);
  if ((v13 & 1) != 0)
  {
    v14 = v3[*(int *)(v1 + 36)];
    v12 = sub_10000D330((uint64_t)v3, type metadata accessor for ClockText);
    if ((v14 & 1) != 0)
      return static Color.white.getter(v12);
  }
  else
  {
    v12 = sub_10000D330((uint64_t)v3, type metadata accessor for ClockText);
  }
  if (v0[*(int *)(v1 + 36)] == 1 && *v0 == 1)
    return static Color.black.getter(v12);
  return static Color.white.getter(v12);
}

uint64_t sub_10003C9C0()
{
  uint64_t v0;
  uint64_t *v1;

  if (*(_BYTE *)(v0 + *(int *)(type metadata accessor for ClockText(0) + 36)) == 1)
    v1 = sub_100024BA0();
  else
    v1 = sub_100024C88();
  return swift_retain(*v1);
}

uint64_t sub_10003C9F8(char a1)
{
  uint64_t *v1;

  if ((a1 & 1) != 0)
  {
    if (qword_10008A670 != -1)
      swift_once(&qword_10008A670, sub_100041FD0);
    v1 = &qword_10008BF20;
  }
  else
  {
    if (qword_10008A640 != -1)
      swift_once(&qword_10008A640, sub_100041D1C);
    v1 = &qword_10008BEF0;
  }
  return swift_retain(*v1);
}

uint64_t sub_10003CA74(char a1)
{
  if ((a1 & 1) != 0)
    return static Color.black.getter();
  else
    return static Color.white.getter();
}

uint64_t sub_10003CA84@<X0>(uint64_t a1@<X8>)
{
  return sub_1000415A0(type metadata accessor for Clock, (uint64_t (*)(_QWORD))&type metadata accessor for TimeZone, a1);
}

uint64_t sub_10003CA98@<X0>(uint64_t a1@<X8>)
{
  return sub_10002FBA8(type metadata accessor for Clock, a1);
}

uint64_t sub_10003CAA4()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Clock(0) + 28));
}

uint64_t sub_10003CAC4(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Clock(0);
  *(_BYTE *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*sub_10003CAF0())()
{
  type metadata accessor for Clock(0);
  return nullsub_1;
}

uint64_t sub_10003CB18@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Clock(0);
  return sub_10001DEA0(v1 + *(int *)(v3 + 32), a1, &qword_100084810);
}

uint64_t sub_10003CB54()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Clock(0) + 36));
}

uint64_t sub_10003CB74(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Clock(0);
  *(_BYTE *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*sub_10003CBA0())()
{
  type metadata accessor for Clock(0);
  return nullsub_1;
}

uint64_t sub_10003CBC8()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Clock(0) + 40));
}

uint64_t sub_10003CBE8(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Clock(0);
  *(_BYTE *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*sub_10003CC14())()
{
  type metadata accessor for Clock(0);
  return nullsub_1;
}

uint64_t sub_10003CC3C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for Clock(0) + 44);
  return sub_100050E68(v3, a1);
}

uint64_t sub_10003CC6C()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Clock(0) + 48));
}

uint64_t sub_10003CC8C(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Clock(0);
  *(_BYTE *)(v1 + *(int *)(result + 48)) = a1;
  return result;
}

uint64_t (*sub_10003CCB8())()
{
  type metadata accessor for Clock(0);
  return nullsub_1;
}

uint64_t sub_10003CCE0()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Clock(0) + 52));
}

uint64_t sub_10003CD00(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Clock(0);
  *(_BYTE *)(v1 + *(int *)(result + 52)) = a1;
  return result;
}

uint64_t (*sub_10003CD2C())()
{
  type metadata accessor for Clock(0);
  return nullsub_1;
}

uint64_t sub_10003CD58@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for Clock(0) + 56);
  v4 = type metadata accessor for WidgetRenderingMode(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_10003CDA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for Clock(0) + 56);
  v4 = type metadata accessor for WidgetRenderingMode(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*sub_10003CDE8())()
{
  type metadata accessor for Clock(0);
  return nullsub_1;
}

uint64_t sub_10003CE10()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for ClockWidgetEnvironmentObject(0);
  v1 = sub_10000D36C((unint64_t *)&qword_100085240, type metadata accessor for ClockWidgetEnvironmentObject, (uint64_t)&unk_10006DF68);
  return Environment.init<A>(_:)(v0, v0, v1);
}

uint64_t sub_10003CE64@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  __int128 v44;
  uint64_t v45;
  char *v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t OpaqueTypeConformance2;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD v88[2];
  _OWORD v89[3];

  v87 = a1;
  v2 = type metadata accessor for AccessibilityTraits(0);
  v85 = *(_QWORD *)(v2 - 8);
  v86 = v2;
  __chkstk_darwin(v2);
  v84 = (char *)&v70 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1000041D8(&qword_100084848);
  __chkstk_darwin(v4);
  v83 = (char *)&v70 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AccessibilityChildBehavior(0);
  v81 = *(_QWORD *)(v6 - 8);
  v82 = v6;
  __chkstk_darwin(v6);
  v77 = (char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000041D8(&qword_100086178);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = sub_1000041D8(&qword_100086180);
  __chkstk_darwin(v11);
  v13 = (char *)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000041D8(&qword_100086188);
  __chkstk_darwin(v14);
  v16 = (char *)&v70 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = sub_1000041D8(&qword_100086190);
  __chkstk_darwin(v74);
  v18 = (char *)&v70 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_1000041D8(&qword_100086198);
  v80 = *(_QWORD *)(v78 - 8);
  __chkstk_darwin(v78);
  v73 = (char *)&v70 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = sub_1000041D8(&qword_1000861A0);
  v20 = __chkstk_darwin(v79);
  v75 = (char *)&v70 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v20);
  v76 = (char *)&v70 - v23;
  *(_QWORD *)v16 = static HorizontalAlignment.center.getter(v22);
  *((_QWORD *)v16 + 1) = 0;
  v16[16] = 1;
  v24 = sub_1000041D8(&qword_1000861A8);
  v71 = &v16[*(int *)(v24 + 44)];
  *v10 = static Alignment.center.getter(v24);
  v10[1] = v25;
  v26 = (uint64_t)v10 + *(int *)(sub_1000041D8(&qword_1000861B0) + 44);
  v72 = v1;
  sub_10003D47C(v1, v26);
  v27 = type metadata accessor for Clock(0);
  v28 = (_QWORD *)(v1 + *(int *)(v27 + 24));
  v29 = v28[3];
  v30 = v28[4];
  sub_100050938(v28, v29);
  v31 = (*(double (**)(uint64_t, uint64_t))(v30 + 24))(v29, v30);
  v33 = v28[3];
  v32 = v28[4];
  sub_100050938(v28, v33);
  v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 24))(v33, v32);
  v36 = v35;
  v37 = static Alignment.center.getter(v34);
  sub_10002793C(0.0, 1, 0.0, 1, v31, 0, 0.0, 1, (uint64_t)v13, 0.0, 1, v36, 0, v37, v38, &qword_100086178, &qword_100086180);
  sub_1000106A4((uint64_t)v10, &qword_100086178);
  v39 = sub_10001DE5C((uint64_t)v13, (uint64_t)v71, &qword_100086180);
  v40 = static Alignment.center.getter(v39);
  _FrameLayout.init(width:height:alignment:)(v89, 0, 1, 0, 1, v40, v41);
  sub_10001DEA0((uint64_t)v16, (uint64_t)v18, &qword_100086188);
  v42 = v74;
  v43 = &v18[*(int *)(v74 + 36)];
  v44 = v89[1];
  *(_OWORD *)v43 = v89[0];
  *((_OWORD *)v43 + 1) = v44;
  *((_OWORD *)v43 + 2) = v89[2];
  v45 = sub_1000106A4((uint64_t)v16, &qword_100086188);
  v46 = v77;
  static AccessibilityChildBehavior.ignore.getter(v45);
  v47 = sub_100050E78();
  v48 = v73;
  v49 = v42;
  View.accessibilityElement(children:)(v46, v42, v47);
  (*(void (**)(char *, uint64_t))(v81 + 8))(v46, v82);
  sub_1000106A4((uint64_t)v18, &qword_100086190);
  v50 = v72 + *(int *)(v27 + 20);
  v51 = type metadata accessor for TimeZone(0);
  v52 = *(_QWORD *)(v51 - 8);
  v53 = v83;
  (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v83, v50, v51);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v53, 0, 1, v51);
  v54 = Text.init(dateFormat:timeZone:)(0x61206D6D3A68, 0xE600000000000000, v53);
  v56 = v55;
  v58 = v57;
  v60 = v59 & 1;
  v88[0] = v49;
  v88[1] = v47;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v88, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v62 = (uint64_t)v75;
  v63 = v78;
  View.accessibilityLabel(_:)(v54, v56, v60, v58, v78, OpaqueTypeConformance2);
  sub_100010E24(v54, v56, v60);
  swift_bridgeObjectRelease(v58);
  v64 = (*(uint64_t (**)(char *, uint64_t))(v80 + 8))(v48, v63);
  v65 = v84;
  static AccessibilityTraits.updatesFrequently.getter(v64);
  v66 = (uint64_t)v76;
  ModifiedContent<>.accessibilityAddTraits(_:)(v65, v79);
  (*(void (**)(char *, uint64_t))(v85 + 8))(v65, v86);
  sub_1000106A4(v62, &qword_1000861A0);
  v67 = v87;
  sub_10001DEA0(v66, v87, &qword_1000861A0);
  v68 = v67 + *(int *)(sub_1000041D8(&qword_1000861C8) + 36);
  *(_QWORD *)v68 = 0;
  *(_BYTE *)(v68 + 8) = 0;
  return sub_1000106A4(v66, &qword_1000861A0);
}

uint64_t sub_10003D47C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v66;
  int *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  uint64_t v72;
  double v73;
  double v74;
  double v75;
  uint64_t v77;
  char v78;
  unint64_t v79;
  double v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  double v99;
  uint64_t v100;
  uint64_t v101;
  double (*v102)(uint64_t, uint64_t);
  double v103;
  uint64_t v104;
  _OWORD *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  double v121;
  double v122;
  double v123;
  unint64_t v124;
  char *v125;
  void (*v126)(char *, uint64_t);
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  double v130;
  uint64_t v131;
  uint64_t v132;
  double v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  double v137;
  double v138;
  double v139;
  unint64_t v140;
  char *v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  void (*v146)(char *, char *, uint64_t);
  char *v147;
  uint64_t v148;
  void (*v149)(char *, char *, uint64_t);
  uint64_t v150;
  uint64_t v151;
  void (*v152)(char *, uint64_t);
  void (*v153)(char *, uint64_t);
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char v159;
  unint64_t v160;
  double v161;
  char v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  double v173;
  int *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char v181;
  uint64_t v182;
  uint64_t v183;
  double v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t v187;
  double v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  char *v196;
  uint64_t v197;
  double *v198;
  int v199;
  double v200;
  double v201;
  double v202;
  double v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char v214;
  uint64_t v215;
  uint64_t v216;
  int v217;
  double v218;
  _QWORD *v219;
  uint64_t v220;
  uint64_t v221;
  double v222;
  uint64_t v223;
  uint64_t v224;
  double v225;
  uint64_t v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  double v231;
  double v232;
  double v233;
  unint64_t v234;
  char *v235;
  uint64_t v236;
  char *v237;
  char *v238;
  uint64_t v239;
  _BYTE *v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  char *v244;
  uint64_t v245;
  uint64_t v246;
  char *v247;
  uint64_t v248;
  double v249;
  double v250;
  long double v251;
  long double v252;
  uint64_t v253;
  double v254;
  _BYTE *v255;
  int *v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  unint64_t v260;
  uint64_t OpaqueTypeConformance2;
  uint64_t v262;
  double v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  int *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  int *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  char *v279;
  uint64_t v280;
  uint64_t v281;
  _QWORD *v282;
  char *v283;
  char *v284;
  char *v285;
  uint64_t v286;
  uint64_t v287;
  char *v288;
  char *v289;
  char *v290;
  uint64_t v291;
  uint64_t v292;
  char *v293;
  uint64_t v294;
  uint64_t v295;
  char *v296;
  char *v297;
  char *v298;
  char *v299;
  double *v300;
  char *v301;
  uint64_t v302;
  uint64_t v303;
  char *v304;
  uint64_t v305;
  uint64_t v306;
  _BYTE *v307;
  char *v308;
  __int128 v309;
  char *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  char *v318;
  __int128 v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  int *v335;
  ValueMetadata *v336;
  unint64_t v337;
  __int128 v338;
  double v339;
  char v340;
  __int128 v341;
  uint64_t v342;
  uint64_t v343;

  v334 = a2;
  v3 = sub_1000041D8(&qword_100087BA8);
  __chkstk_darwin(v3);
  v5 = (char *)&v277 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v287 = type metadata accessor for WidgetRenderingMode(0);
  v286 = *(_QWORD *)(v287 - 8);
  __chkstk_darwin(v287);
  v285 = (char *)&v277 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Clock(0);
  __chkstk_darwin(v7);
  v327 = (uint64_t)&v277 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v306 = sub_1000041D8(&qword_100087BB0);
  __chkstk_darwin(v306);
  v307 = (char *)&v277 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v303 = type metadata accessor for TimeZone(0);
  v302 = *(_QWORD *)(v303 - 8);
  __chkstk_darwin(v303);
  v310 = (char *)&v277 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v330 = sub_1000041D8(&qword_100087BB8);
  v329 = *(_QWORD *)(v330 - 8);
  v11 = __chkstk_darwin(v330);
  v290 = (char *)&v277 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v311 = (uint64_t)&v277 - v13;
  v14 = sub_1000041D8(&qword_100087BC0);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v277 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v333 = (uint64_t)&v277 - v18;
  v326 = sub_1000041D8(&qword_100087BC8);
  __chkstk_darwin(v326);
  v299 = (char *)&v277 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v313 = sub_1000041D8(&qword_100087BD0);
  v305 = *(_QWORD *)(v313 - 8);
  v20 = __chkstk_darwin(v313);
  v288 = (char *)&v277 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v20);
  v289 = (char *)&v277 - v23;
  v24 = __chkstk_darwin(v22);
  v297 = (char *)&v277 - v25;
  __chkstk_darwin(v24);
  v298 = (char *)&v277 - v26;
  v312 = type metadata accessor for _ClockHandRotationEffect.Period(0);
  v331 = *(_QWORD *)(v312 - 8);
  v27 = __chkstk_darwin(v312);
  v300 = (double *)((char *)&v277 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  v29 = __chkstk_darwin(v27);
  v301 = (char *)&v277 - v30;
  __chkstk_darwin(v29);
  v32 = (char *)&v277 - v31;
  v292 = sub_1000041D8(&qword_1000861D0);
  __chkstk_darwin(v292);
  v294 = (uint64_t)&v277 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v291 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v291);
  v293 = (char *)&v277 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v295 = sub_1000041D8(&qword_1000861D8);
  __chkstk_darwin(v295);
  v296 = (char *)&v277 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_1000041D8(&qword_100087BD8);
  *(_QWORD *)&v309 = *(_QWORD *)(v36 - 8);
  v37 = __chkstk_darwin(v36);
  v308 = (char *)&v277 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  *(_QWORD *)&v319 = (char *)&v277 - v39;
  v40 = sub_1000041D8(&qword_100084810);
  __chkstk_darwin(v40);
  v42 = (char *)&v277 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v323 = sub_1000041D8(&qword_100087BE0);
  __chkstk_darwin(v323);
  v325 = (uint64_t)&v277 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v314 = sub_1000041D8(&qword_100087BE8);
  __chkstk_darwin(v314);
  v317 = (uint64_t)&v277 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v315 = sub_1000041D8(&qword_100087BF0);
  __chkstk_darwin(v315);
  v316 = (uint64_t)&v277 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v324 = sub_1000041D8(&qword_100087BF8);
  __chkstk_darwin(v324);
  v318 = (char *)&v277 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_1000041D8(&qword_1000861E0);
  v48 = __chkstk_darwin(v47);
  v50 = (char *)&v277 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v48);
  v322 = (uint64_t)&v277 - v51;
  v52 = sub_1000041D8(&qword_100087C00);
  v53 = __chkstk_darwin(v52);
  v328 = (uint64_t)&v277 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v53);
  v332 = (uint64_t)&v277 - v55;
  v56 = type metadata accessor for Date(0);
  v57 = __chkstk_darwin(v56);
  v59 = (char *)&v277 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = __chkstk_darwin(v57);
  v63 = (char *)&v277 - v62;
  v335 = (int *)v7;
  if ((*(_BYTE *)(a1 + *(int *)(v7 + 36)) & 1) != 0)
  {
    v64 = sub_1000041D8(&qword_100087C30);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(v334, 1, 1, v64);
  }
  v66 = a1;
  v280 = v36;
  v279 = v32;
  v320 = v61;
  v321 = v60;
  v283 = v17;
  v284 = v5;
  v67 = v335;
  v68 = (_QWORD *)(a1 + v335[6]);
  v69 = v68[3];
  v70 = v68[4];
  v282 = v68;
  sub_100050938(v68, v69);
  v71 = (*(double (**)(uint64_t, uint64_t))(v70 + 24))(v69, v70);
  v72 = a1 + v67[11];
  v74 = *(double *)v72;
  v73 = *(double *)(v72 + 8);
  v75 = *(double *)(v72 + 16);
  sub_10003F068((uint64_t)v63);
  v281 = v67[7];
  _ZF = *(_BYTE *)(a1 + v281) == 1;
  v304 = v63;
  if (_ZF)
  {
    v77 = v322;
    sub_10003F354((uint64_t)v63, v322);
    sub_10003F828((uint64_t)v63, (uint64_t)&v336);
    v78 = (char)v336;
    v79 = v337;
    v319 = v338;
    v80 = v339;
    v81 = v340;
    v309 = v341;
    v82 = v342;
    v83 = v343;
    sub_10001DEA0(v77, (uint64_t)v50, &qword_1000861E0);
    v84 = v316;
    sub_10001DEA0((uint64_t)v50, v316, &qword_1000861E0);
    v85 = v84 + *(int *)(sub_1000041D8(&qword_100087C40) + 48);
    *(_BYTE *)v85 = v78;
    *(_QWORD *)(v85 + 8) = v79;
    *(_OWORD *)(v85 + 16) = v319;
    *(double *)(v85 + 32) = v80;
    *(_BYTE *)(v85 + 40) = v81;
    *(_OWORD *)(v85 + 48) = v309;
    *(_QWORD *)(v85 + 64) = v82;
    *(_QWORD *)(v85 + 72) = v83;
    swift_retain(v79);
    sub_1000106A4((uint64_t)v50, &qword_1000861E0);
    v86 = v317;
    sub_10001DEA0(v84, v317, &qword_100087BF0);
    swift_storeEnumTagMultiPayload(v86, v314, 0);
    v87 = sub_10001DDB4(&qword_100087C18, &qword_100087BF0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v88 = (uint64_t)v318;
    _ConditionalContent<>.init(storage:)(v86, v315, v315, v87, v87);
    sub_1000106A4(v84, &qword_100087BF0);
    v89 = v325;
    sub_10001DEA0(v88, v325, &qword_100087BF8);
    swift_storeEnumTagMultiPayload(v89, v323, 0);
    v90 = sub_1000668CC();
    v91 = sub_10001DDB4(&qword_100087C20, &qword_100087BC8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    _ConditionalContent<>.init(storage:)(v89, v324, v326, v90, v91);
    sub_1000106A4(v88, &qword_100087BF8);
    swift_release(v79);
    sub_1000106A4(v77, &qword_1000861E0);
  }
  else
  {
    sub_10001DEA0(a1 + v335[8], (uint64_t)v42, &qword_100084810);
    v92 = v320;
    v93 = v321;
    v94 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v320 + 48))(v42, 1, v321);
    if (v94 == 1)
    {
      sub_1000106A4((uint64_t)v42, &qword_100084810);
      v278 = v66;
      v95 = sub_10003FB38();
      v96 = v282;
      v97 = v282[3];
      v98 = v282[4];
      sub_100050938(v282, v97);
      v99 = (*(double (**)(uint64_t, uint64_t))(v98 + 24))(v97, v98);
      v100 = v96[3];
      v101 = v96[4];
      sub_100050938(v96, v100);
      v102 = *(double (**)(uint64_t, uint64_t))(v101 + 72);
      swift_retain(v95);
      v103 = v102(v100, v101);
      LOBYTE(v101) = *(_BYTE *)(v72 + 40);
      v104 = *(_QWORD *)(v72 + 56);
      v105 = v293;
      v106 = &v293[*(int *)(v291 + 20)];
      v107 = enum case for RoundedCornerStyle.continuous(_:);
      v108 = type metadata accessor for RoundedCornerStyle(0);
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v108 - 8) + 104))(v106, v107, v108);
      __asm { FMOV            V0.2D, #2.0 }
      *v105 = _Q0;
      v113 = v294;
      sub_10000DF30((uint64_t)v105, v294, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
      *(_WORD *)(v113 + *(int *)(v292 + 36)) = 256;
      v114 = v295;
      v115 = (uint64_t)v296;
      sub_10001DEA0(v113, (uint64_t)&v296[*(int *)(v295 + 36)], &qword_1000861D0);
      *(_BYTE *)v115 = 0;
      *(_QWORD *)(v115 + 8) = v95;
      *(double *)(v115 + 16) = v103;
      *(_QWORD *)(v115 + 24) = 0x3FE0B020C49BA5E3;
      *(double *)(v115 + 32) = v99;
      *(_BYTE *)(v115 + 40) = v101;
      *(_QWORD *)(v115 + 48) = v104;
      swift_retain(v95);
      sub_1000106A4(v113, &qword_1000861D0);
      sub_10000D330((uint64_t)v105, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
      swift_release_n(v95, 2);
      v116 = v331;
      v318 = *(char **)(v331 + 104);
      v117 = v279;
      v118 = v312;
      v119 = ((uint64_t (*)(char *, _QWORD, uint64_t))v318)(v279, enum case for _ClockHandRotationEffect.Period.hourHand(_:), v312);
      v322 = v278 + v335[5];
      v120 = v322;
      v121 = static UnitPoint.center.getter(v119);
      v123 = v122;
      v124 = sub_100064388();
      v125 = v308;
      View._clockHandRotationEffect(_:in:anchor:)(v117, v120, v114, v124, v121, v123);
      v126 = *(void (**)(char *, uint64_t))(v116 + 8);
      v126(v117, v118);
      sub_1000106A4(v115, &qword_1000861D8);
      (*(void (**)(_QWORD, char *, uint64_t))(v309 + 32))(v319, v125, v280);
      v127 = sub_10003FB38();
      v128 = v96[3];
      v129 = v96[4];
      sub_100050938(v96, v128);
      v130 = (*(double (**)(uint64_t, uint64_t))(v129 + 24))(v128, v129);
      v131 = v96[3];
      v132 = v96[4];
      sub_100050938(v96, v131);
      v133 = (*(double (**)(uint64_t, uint64_t))(v132 + 72))(v131, v132);
      v134 = *(_BYTE *)(v72 + 40);
      v135 = *(_QWORD *)(v72 + 56);
      LOBYTE(v336) = 0;
      v337 = v127;
      *(double *)&v338 = v133;
      *((_QWORD *)&v338 + 1) = 0x3FECCCCCCCCCCCCDLL;
      v339 = v130;
      v340 = v134;
      *(_QWORD *)&v341 = v135;
      v136 = ((uint64_t (*)(char *, _QWORD, uint64_t))v318)(v117, enum case for _ClockHandRotationEffect.Period.minuteHand(_:), v118);
      v137 = static UnitPoint.center.getter(v136);
      v139 = v138;
      v140 = sub_10006440C();
      v141 = v297;
      View._clockHandRotationEffect(_:in:anchor:)(v117, v322, &type metadata for Clock.ClockHand, v140, v137, v139);
      v126(v117, v118);
      swift_release(v337);
      v142 = v305;
      v143 = v298;
      v144 = v313;
      (*(void (**)(char *, char *, uint64_t))(v305 + 32))(v298, v141, v313);
      v145 = v309;
      v146 = *(void (**)(char *, char *, uint64_t))(v309 + 16);
      v147 = v308;
      v148 = v280;
      v146(v308, (char *)v319, v280);
      v149 = *(void (**)(char *, char *, uint64_t))(v142 + 16);
      v149(v141, v143, v144);
      v150 = (uint64_t)v299;
      v146(v299, v147, v148);
      v151 = sub_1000041D8(&qword_100087C08);
      v149((char *)(v150 + *(int *)(v151 + 48)), v141, v144);
      v152 = *(void (**)(char *, uint64_t))(v142 + 8);
      v152(v141, v144);
      v153 = *(void (**)(char *, uint64_t))(v145 + 8);
      v153(v147, v148);
      v154 = v325;
      sub_10001DEA0(v150, v325, &qword_100087BC8);
      swift_storeEnumTagMultiPayload(v154, v323, 1);
      v155 = sub_1000668CC();
      v156 = sub_10001DDB4(&qword_100087C20, &qword_100087BC8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
      _ConditionalContent<>.init(storage:)(v154, v324, v326, v155, v156);
      sub_1000106A4(v150, &qword_100087BC8);
      v152(v143, v144);
      v153((char *)v319, v148);
      v157 = v278;
      goto LABEL_10;
    }
    (*(void (**)(char *, char *, uint64_t))(v92 + 32))(v59, v42, v93);
    v158 = v322;
    a1 = v66;
    sub_10003F354((uint64_t)v59, v322);
    sub_10003F828((uint64_t)v59, (uint64_t)&v336);
    v159 = (char)v336;
    v160 = v337;
    v319 = v338;
    v161 = v339;
    v162 = v340;
    v309 = v341;
    v163 = v342;
    v164 = v343;
    sub_10001DEA0(v158, (uint64_t)v50, &qword_1000861E0);
    v165 = v316;
    sub_10001DEA0((uint64_t)v50, v316, &qword_1000861E0);
    v166 = v165 + *(int *)(sub_1000041D8(&qword_100087C40) + 48);
    *(_BYTE *)v166 = v159;
    *(_QWORD *)(v166 + 8) = v160;
    *(_OWORD *)(v166 + 16) = v319;
    *(double *)(v166 + 32) = v161;
    *(_BYTE *)(v166 + 40) = v162;
    *(_OWORD *)(v166 + 48) = v309;
    *(_QWORD *)(v166 + 64) = v163;
    *(_QWORD *)(v166 + 72) = v164;
    swift_retain(v160);
    sub_1000106A4((uint64_t)v50, &qword_1000861E0);
    v167 = v317;
    sub_10001DEA0(v165, v317, &qword_100087BF0);
    swift_storeEnumTagMultiPayload(v167, v314, 1);
    v168 = sub_10001DDB4(&qword_100087C18, &qword_100087BF0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v169 = (uint64_t)v318;
    _ConditionalContent<>.init(storage:)(v167, v315, v315, v168, v168);
    sub_1000106A4(v165, &qword_100087BF0);
    v170 = v325;
    sub_10001DEA0(v169, v325, &qword_100087BF8);
    swift_storeEnumTagMultiPayload(v170, v323, 0);
    v171 = sub_1000668CC();
    v172 = sub_10001DDB4(&qword_100087C20, &qword_100087BC8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    _ConditionalContent<>.init(storage:)(v170, v324, v326, v171, v172);
    sub_1000106A4(v169, &qword_100087BF8);
    swift_release(v160);
    sub_1000106A4(v322, &qword_1000861E0);
    (*(void (**)(char *, uint64_t))(v320 + 8))(v59, v321);
  }
  v157 = a1;
LABEL_10:
  v173 = v71 * 0.5;
  v326 = sub_100040008();
  v174 = v335;
  v175 = v335[10];
  v176 = v333;
  v177 = v327;
  if (*(_BYTE *)(v157 + v175) == 1)
  {
    if (*(_BYTE *)(v157 + v281) == 1)
    {
      if (qword_10008A680 != -1)
        swift_once(&qword_10008A680, sub_1000420D0);
      v178 = qword_10008BF30;
      v179 = v157 + v174[15];
      v180 = *(_QWORD *)v179;
      v181 = *(_BYTE *)(v179 + 8);
      swift_retain(qword_10008BF30);
      v182 = swift_retain(v180);
      v183 = sub_10002556C(v182, v181);
      swift_release(v180);
      LODWORD(v180) = sub_100067914();
      swift_release(v183);
      v184 = dbl_10006CA90[(_DWORD)v180 == 4];
      if ((_DWORD)v180 == 3)
        v184 = 0.93;
      v335 = *(int **)&v184;
      v185 = v282;
      v186 = v282[3];
      v187 = v282[4];
      sub_100050938(v282, v186);
      v188 = (*(double (**)(uint64_t, uint64_t))(v187 + 24))(v186, v187);
      v189 = v185[3];
      v190 = v185[4];
      sub_100050938(v185, v189);
      v191 = (*(uint64_t (**)(uint64_t, uint64_t))(v190 + 96))(v189, v190);
      v193 = v192;
      static TimeZone.current.getter(v191);
      v194 = enum case for _ClockHandRotationEffect.Period.secondHand(_:);
      v195 = v331;
      v196 = v301;
      v197 = v312;
      (*(void (**)(char *, _QWORD, uint64_t))(v331 + 104))(v301, enum case for _ClockHandRotationEffect.Period.secondHand(_:), v312);
      v198 = v300;
      (*(void (**)(double *, char *, uint64_t))(v195 + 16))(v300, v196, v197);
      v199 = (*(uint64_t (**)(double *, uint64_t))(v195 + 88))(v198, v197);
      if (v199 == enum case for _ClockHandRotationEffect.Period.custom(_:))
      {
        v200 = v75;
        v201 = v74;
        v202 = v73;
        (*(void (**)(double *, uint64_t))(v331 + 96))(v198, v197);
        v203 = *v198;
        v204 = v311;
      }
      else
      {
        v204 = v311;
        v200 = v75;
        if (v199 == enum case for _ClockHandRotationEffect.Period.hourHand(_:))
        {
          v201 = v74;
          v202 = v73;
          v203 = 43200.0;
        }
        else
        {
          v201 = v74;
          v202 = v73;
          if (v199 == enum case for _ClockHandRotationEffect.Period.minuteHand(_:))
          {
            v203 = 3600.0;
          }
          else if (v199 == v194)
          {
            v203 = 60.0;
          }
          else
          {
            (*(void (**)(double *, uint64_t))(v331 + 8))(v198, v197);
            v203 = 0.0;
          }
        }
      }
      (*(void (**)(char *, uint64_t))(v331 + 8))(v196, v197);
      v247 = v310;
      v248 = TimeZone.secondsFromGMT(for:)(v304);
      v249 = (double)v248;
      v250 = Date.timeIntervalSinceReferenceDate.getter(v248);
      v251 = fmod(v250 + v249, v203);
      v252 = (v251 + v251) * 3.14159265 / v203;
      v253 = (*(uint64_t (**)(char *, uint64_t))(v302 + 8))(v247, v303);
      v254 = static UnitPoint.center.getter(v253);
      v255 = v307;
      *v307 = 1;
      *((_QWORD *)v255 + 1) = v178;
      v256 = v335;
      *((_QWORD *)v255 + 2) = v193;
      *((_QWORD *)v255 + 3) = v256;
      *((double *)v255 + 4) = v188;
      v255[40] = 1;
      *((_QWORD *)v255 + 6) = 0x3FC3333333333333;
      *((long double *)v255 + 7) = v252;
      *((double *)v255 + 8) = v254;
      *((_QWORD *)v255 + 9) = v257;
      swift_storeEnumTagMultiPayload(v255, v306, 0);
      v258 = sub_1000041D8(&qword_100087790);
      v259 = sub_100064454();
      v260 = sub_10006440C();
      v336 = &type metadata for Clock.ClockHand;
      v337 = v260;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v336, &opaque type descriptor for <<opaque return type of View._clockHandRotationEffect(_:in:anchor:)>>, 1);
      _ConditionalContent<>.init(storage:)(v255, v258, v313, v259, OpaqueTypeConformance2);
      v262 = sub_1000041D8(&qword_100087C38);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v262 - 8) + 56))(v204, 0, 1, v262);
      v73 = v202;
      v74 = v201;
      v75 = v200;
      goto LABEL_35;
    }
    v206 = *(unsigned __int8 *)(v157 + v335[13]);
    v207 = sub_10000DF30(v157, v327, type metadata accessor for Clock);
    if (v206 == 1)
    {
      v208 = v177 + v174[14];
      v209 = v285;
      static WidgetRenderingMode.vibrant.getter(v207);
      LOBYTE(v208) = static WidgetRenderingMode.== infix(_:_:)(v208, v209);
      (*(void (**)(char *, uint64_t))(v286 + 8))(v209, v287);
      sub_10000D330(v177, type metadata accessor for Clock);
      if ((v208 & 1) != 0)
      {
        v210 = sub_1000041D8(&qword_100087C38);
        v204 = v311;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v210 - 8) + 56))(v311, 1, 1, v210);
LABEL_35:
        sub_10001DE5C(v204, v176, &qword_100087BB8);
        v205 = 0;
        goto LABEL_36;
      }
    }
    else
    {
      sub_10000D330(v177, type metadata accessor for Clock);
    }
    v211 = sub_10004050C();
    v212 = v157 + v174[15];
    v213 = *(_QWORD *)v212;
    v214 = *(_BYTE *)(v212 + 8);
    v215 = swift_retain(*(_QWORD *)v212);
    v216 = sub_10002556C(v215, v214);
    swift_release(v213);
    v217 = sub_100067914();
    swift_release(v216);
    if (v217 == 3)
      v218 = 0.93;
    else
      v218 = dbl_10006CA90[v217 == 4];
    v219 = v282;
    v220 = v282[3];
    v221 = v282[4];
    sub_100050938(v282, v220);
    v222 = (*(double (**)(uint64_t, uint64_t))(v221 + 24))(v220, v221);
    v223 = v219[3];
    v224 = v219[4];
    sub_100050938(v219, v223);
    v225 = (*(double (**)(uint64_t, uint64_t))(v224 + 96))(v223, v224);
    LOBYTE(v336) = 1;
    v337 = v211;
    *(double *)&v338 = v225;
    *((double *)&v338 + 1) = v218;
    v339 = v222;
    v340 = 1;
    *(_QWORD *)&v341 = 0x3FC3333333333333;
    v226 = v331;
    v227 = v279;
    v228 = v312;
    v229 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v331 + 104))(v279, enum case for _ClockHandRotationEffect.Period.secondHand(_:), v312);
    v230 = v157 + v174[5];
    v231 = static UnitPoint.center.getter(v229);
    v233 = v232;
    v234 = sub_10006440C();
    v235 = v288;
    View._clockHandRotationEffect(_:in:anchor:)(v227, v230, &type metadata for Clock.ClockHand, v234, v231, v233);
    (*(void (**)(char *, uint64_t))(v226 + 8))(v227, v228);
    swift_release(v337);
    v236 = v305;
    v237 = v289;
    v238 = v235;
    v239 = v313;
    (*(void (**)(char *, char *, uint64_t))(v305 + 32))(v289, v238, v313);
    v240 = v307;
    (*(void (**)(_BYTE *, char *, uint64_t))(v236 + 16))(v307, v237, v239);
    swift_storeEnumTagMultiPayload(v240, v306, 1);
    v241 = sub_1000041D8(&qword_100087790);
    v242 = sub_100064454();
    v336 = &type metadata for Clock.ClockHand;
    v337 = v234;
    v243 = swift_getOpaqueTypeConformance2(&v336, &opaque type descriptor for <<opaque return type of View._clockHandRotationEffect(_:in:anchor:)>>, 1);
    v244 = v290;
    _ConditionalContent<>.init(storage:)(v240, v241, v239, v242, v243);
    (*(void (**)(char *, uint64_t))(v236 + 8))(v237, v239);
    v245 = sub_1000041D8(&qword_100087C38);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v245 - 8) + 56))(v244, 0, 1, v245);
    v246 = (uint64_t)v244;
    v204 = v311;
    sub_10001DE5C(v246, v311, &qword_100087BB8);
    goto LABEL_35;
  }
  v205 = 1;
LABEL_36:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v329 + 56))(v176, v205, 1, v330);
  if (*(_BYTE *)(v157 + v175) == 1)
  {
    v263 = v173 - v173 * v73;
    v335 = (int *)sub_10004050C();
    LODWORD(v331) = 256;
  }
  else
  {
    v335 = 0;
    LODWORD(v331) = 0;
    v263 = 0.0;
  }
  v264 = sub_100040748();
  if (qword_10008A628 != -1)
    swift_once(&qword_10008A628, sub_100041B1C);
  v265 = qword_10008BED8;
  v266 = v332;
  v267 = v328;
  sub_10001DEA0(v332, v328, &qword_100087C00);
  v268 = (uint64_t)v283;
  sub_10001DEA0(v176, (uint64_t)v283, &qword_100087BC0);
  v269 = (uint64_t)v284;
  sub_10001DEA0(v267, (uint64_t)v284, &qword_100087C00);
  v270 = (int *)sub_1000041D8(&qword_100087C28);
  v271 = v269 + v270[12];
  *(double *)v271 = v173 - v173 * v74;
  v272 = v326;
  *(_QWORD *)(v271 + 8) = v326;
  *(_WORD *)(v271 + 16) = 256;
  sub_10001DEA0(v268, v269 + v270[16], &qword_100087BC0);
  v273 = v269 + v270[20];
  *(double *)v273 = v263;
  v274 = v335;
  *(_QWORD *)(v273 + 8) = v335;
  *(_WORD *)(v273 + 16) = v331;
  v275 = v269 + v270[24];
  *(double *)v275 = v173 - v173 * v75;
  *(_QWORD *)(v275 + 8) = v264;
  *(_WORD *)(v275 + 16) = 256;
  *(_QWORD *)(v275 + 24) = v265;
  *(_QWORD *)(v275 + 32) = 0x3FF0000000000000;
  *(_QWORD *)(v275 + 40) = 0;
  *(_QWORD *)(v275 + 48) = 0;
  swift_retain(v274);
  swift_retain(v264);
  swift_retain_n(v265, 2);
  swift_retain(v272);
  sub_1000106A4(v333, &qword_100087BC0);
  sub_1000106A4(v266, &qword_100087C00);
  (*(void (**)(char *, uint64_t))(v320 + 8))(v304, v321);
  swift_release(v274);
  swift_release(v265);
  swift_release(v264);
  sub_1000106A4(v268, &qword_100087BC0);
  swift_release(v272);
  sub_1000106A4(v267, &qword_100087C00);
  v276 = sub_1000041D8(&qword_100087C30);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v276 - 8) + 56))(v269, 0, 1, v276);
  return sub_10001DE5C(v269, v334, &qword_100087BA8);
}

uint64_t sub_10003F068@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;

  v24 = a1;
  v1 = type metadata accessor for Calendar(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000041D8(&qword_100084810);
  __chkstk_darwin(v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000041D8(&qword_100084848);
  __chkstk_darwin(v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000041D8(&qword_100085CB0);
  __chkstk_darwin(v11);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DateComponents(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56))(v13, 1, 1, v1);
  v18 = type metadata accessor for TimeZone(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v10, 1, 1, v18);
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(v13, v10, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1);
  DateComponents.year.setter(2020, 0);
  DateComponents.month.setter(2, 0);
  DateComponents.day.setter(21, 0);
  DateComponents.hour.setter(10, 0);
  DateComponents.minute.setter(9, 0);
  v19 = DateComponents.second.setter(30, 0);
  static Calendar.current.getter(v19);
  Calendar.date(from:)(v17);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  v20 = type metadata accessor for Date(0);
  v21 = *(_QWORD *)(v20 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48))(v7, 1, v20);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v21 + 32))(v24, v7, v20);
  }
  return result;
}

uint64_t sub_10003F354@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  int *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  double (*v22)(uint64_t, uint64_t);
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  int v46;
  int v47;
  double v48;
  uint64_t v49;
  double v50;
  double v51;
  long double v52;
  long double v53;
  uint64_t v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  double *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;

  v73 = a1;
  v74 = a2;
  v3 = type metadata accessor for _ClockHandRotationEffect.Period(0);
  v67 = *(_QWORD *)(v3 - 8);
  v68 = v3;
  v4 = __chkstk_darwin(v3);
  v71 = (double *)((char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4);
  v72 = (char *)&v61 - v6;
  v69 = type metadata accessor for TimeZone(0);
  v66 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69);
  v70 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_1000041D8(&qword_1000861D0);
  __chkstk_darwin(v65);
  v9 = (char *)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v63);
  v11 = (_OWORD *)((char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v64 = sub_1000041D8(&qword_1000861D8);
  __chkstk_darwin(v64);
  v13 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10003FB38();
  v15 = (int *)type metadata accessor for Clock(0);
  v16 = (_QWORD *)(v2 + v15[6]);
  v62 = v2;
  v18 = v16[3];
  v17 = v16[4];
  sub_100050938(v16, v18);
  v19 = (*(double (**)(uint64_t, uint64_t))(v17 + 24))(v18, v17);
  v20 = v16[3];
  v21 = v16[4];
  sub_100050938(v16, v20);
  v22 = *(double (**)(uint64_t, uint64_t))(v21 + 72);
  swift_retain(v14);
  v23 = v22(v20, v21);
  v24 = v2 + v15[11];
  LOBYTE(v20) = *(_BYTE *)(v24 + 40);
  v25 = *(_QWORD *)(v24 + 56);
  v26 = v67;
  v27 = (char *)v11 + *(int *)(v63 + 20);
  v28 = enum case for RoundedCornerStyle.continuous(_:);
  v29 = type metadata accessor for RoundedCornerStyle(0);
  v30 = v27;
  v31 = v68;
  v32 = v28;
  v33 = v66;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 104))(v30, v32, v29);
  __asm { FMOV            V0.2D, #2.0 }
  *v11 = _Q0;
  sub_10000DF30((uint64_t)v11, (uint64_t)v9, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)&v9[*(int *)(v65 + 36)] = 256;
  sub_10001DEA0((uint64_t)v9, (uint64_t)&v13[*(int *)(v64 + 36)], &qword_1000861D0);
  *v13 = 0;
  *((_QWORD *)v13 + 1) = v14;
  *((double *)v13 + 2) = v23;
  *((_QWORD *)v13 + 3) = 0x3FE0B020C49BA5E3;
  *((double *)v13 + 4) = v19;
  v13[40] = v20;
  v39 = v71;
  *((_QWORD *)v13 + 6) = v25;
  swift_retain(v14);
  v40 = (uint64_t)v9;
  v41 = v69;
  sub_1000106A4(v40, &qword_1000861D0);
  sub_10000D330((uint64_t)v11, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v42 = v14;
  v43 = v70;
  swift_release_n(v42, 2);
  v44 = v15[5];
  v45 = v72;
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v43, v62 + v44, v41);
  v46 = enum case for _ClockHandRotationEffect.Period.hourHand(_:);
  (*(void (**)(char *, _QWORD, uint64_t))(v26 + 104))(v45, enum case for _ClockHandRotationEffect.Period.hourHand(_:), v31);
  (*(void (**)(double *, char *, uint64_t))(v26 + 16))(v39, v45, v31);
  v47 = (*(uint64_t (**)(double *, uint64_t))(v26 + 88))(v39, v31);
  if (v47 == enum case for _ClockHandRotationEffect.Period.custom(_:))
  {
    (*(void (**)(double *, uint64_t))(v26 + 96))(v39, v31);
    v48 = *v39;
  }
  else if (v47 == v46)
  {
    v48 = 43200.0;
  }
  else if (v47 == enum case for _ClockHandRotationEffect.Period.minuteHand(_:))
  {
    v48 = 3600.0;
  }
  else if (v47 == enum case for _ClockHandRotationEffect.Period.secondHand(_:))
  {
    v48 = 60.0;
  }
  else
  {
    (*(void (**)(double *, uint64_t))(v26 + 8))(v39, v31);
    v48 = 0.0;
  }
  (*(void (**)(char *, uint64_t))(v26 + 8))(v45, v31);
  v49 = TimeZone.secondsFromGMT(for:)(v73);
  v50 = (double)v49;
  v51 = Date.timeIntervalSinceReferenceDate.getter(v49);
  v52 = fmod(v51 + v50, v48);
  v53 = (v52 + v52) * 3.14159265 / v48;
  v54 = (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v43, v41);
  v55 = static UnitPoint.center.getter(v54);
  v57 = v56;
  v58 = v74;
  sub_10001DEA0((uint64_t)v13, v74, &qword_1000861D8);
  v59 = v58 + *(int *)(sub_1000041D8(&qword_1000861E0) + 36);
  *(long double *)v59 = v53;
  *(double *)(v59 + 8) = v55;
  *(_QWORD *)(v59 + 16) = v57;
  return sub_1000106A4((uint64_t)v13, &qword_1000861D8);
}

void sub_10003F828(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  double (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  double *v32;
  int v33;
  int v34;
  double v35;
  uint64_t v36;
  double v37;
  double v38;
  long double v39;
  long double v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  double *v47;
  uint64_t v48;
  uint64_t v49;

  v49 = a1;
  v4 = type metadata accessor for _ClockHandRotationEffect.Period(0);
  v45 = *(_QWORD *)(v4 - 8);
  v46 = v4;
  v5 = __chkstk_darwin(v4);
  v47 = (double *)((char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  v44 = (char *)&v44 - v7;
  v8 = type metadata accessor for TimeZone(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = sub_10003FB38();
  v12 = (int *)type metadata accessor for Clock(0);
  v13 = (_QWORD *)(v2 + v12[6]);
  v14 = v13[3];
  v15 = v13[4];
  sub_100050938(v13, v14);
  v16 = (*(double (**)(uint64_t, uint64_t))(v15 + 24))(v14, v15);
  v17 = v13[3];
  v18 = v13[4];
  sub_100050938(v13, v17);
  v19 = *(double (**)(uint64_t, uint64_t))(v18 + 72);
  v20 = v17;
  v21 = v18;
  v22 = v9;
  v24 = v45;
  v23 = v46;
  v25 = v19(v20, v21);
  v26 = v2 + v12[11];
  v27 = *(_BYTE *)(v26 + 40);
  v28 = *(_QWORD *)(v26 + 56);
  v29 = v12[5];
  v30 = v8;
  v31 = v44;
  v32 = v47;
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v11, v2 + v29, v30);
  v33 = enum case for _ClockHandRotationEffect.Period.minuteHand(_:);
  (*(void (**)(char *, _QWORD, uint64_t))(v24 + 104))(v31, enum case for _ClockHandRotationEffect.Period.minuteHand(_:), v23);
  (*(void (**)(double *, char *, uint64_t))(v24 + 16))(v32, v31, v23);
  v34 = (*(uint64_t (**)(double *, uint64_t))(v24 + 88))(v32, v23);
  if (v34 == enum case for _ClockHandRotationEffect.Period.custom(_:))
  {
    (*(void (**)(double *, uint64_t))(v24 + 96))(v32, v23);
    v35 = *v32;
  }
  else if (v34 == enum case for _ClockHandRotationEffect.Period.hourHand(_:))
  {
    v35 = 43200.0;
  }
  else if (v34 == v33)
  {
    v35 = 3600.0;
  }
  else if (v34 == enum case for _ClockHandRotationEffect.Period.secondHand(_:))
  {
    v35 = 60.0;
  }
  else
  {
    (*(void (**)(double *, uint64_t))(v24 + 8))(v32, v23);
    v35 = 0.0;
  }
  (*(void (**)(char *, uint64_t))(v24 + 8))(v31, v23);
  v36 = TimeZone.secondsFromGMT(for:)(v49);
  v37 = (double)v36;
  v38 = Date.timeIntervalSinceReferenceDate.getter(v36);
  v39 = fmod(v38 + v37, v35);
  v40 = (v39 + v39) * 3.14159265 / v35;
  v41 = (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v11, v30);
  v42 = static UnitPoint.center.getter(v41);
  *(_BYTE *)a2 = 0;
  *(_QWORD *)(a2 + 8) = v48;
  *(double *)(a2 + 16) = v25;
  *(_QWORD *)(a2 + 24) = 0x3FECCCCCCCCCCCCDLL;
  *(double *)(a2 + 32) = v16;
  *(_BYTE *)(a2 + 40) = v27;
  *(_QWORD *)(a2 + 48) = v28;
  *(long double *)(a2 + 56) = v40;
  *(double *)(a2 + 64) = v42;
  *(_QWORD *)(a2 + 72) = v43;
}

uint64_t sub_10003FB38()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t);
  uint64_t v14;
  int v16;
  int v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;

  v1 = (int *)type metadata accessor for Clock(0);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v21 - v5;
  v7 = type metadata accessor for WidgetRenderingMode(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = v0 + v1[14];
  static WidgetRenderingMode.accented.getter(v9);
  LOBYTE(v12) = static WidgetRenderingMode.== infix(_:_:)(v12, v11);
  v13 = *(uint64_t (**)(char *, uint64_t))(v8 + 8);
  v14 = v13(v11, v7);
  if ((v12 & 1) != 0)
    return static Color.white.getter(v14);
  v16 = *(unsigned __int8 *)(v0 + v1[13]);
  sub_10000DF30(v0, (uint64_t)v6, type metadata accessor for Clock);
  if (v16 != 1)
  {
    v17 = v6[v1[12]];
    v18 = sub_10000DF30((uint64_t)v6, (uint64_t)v4, type metadata accessor for Clock);
    if (v17 == 1)
    {
      v19 = &v4[v1[14]];
      static WidgetRenderingMode.fullColor.getter(v18);
      LOBYTE(v19) = static WidgetRenderingMode.== infix(_:_:)(v19, v11);
      v13(v11, v7);
      sub_10000D330((uint64_t)v4, type metadata accessor for Clock);
      sub_10000D330((uint64_t)v6, type metadata accessor for Clock);
      if ((v19 & 1) != 0)
        goto LABEL_7;
    }
    else
    {
      sub_10000D330((uint64_t)v4, type metadata accessor for Clock);
      sub_10000D330((uint64_t)v6, type metadata accessor for Clock);
    }
    if (qword_10008A648 != -1)
      swift_once(&qword_10008A648, sub_100041D98);
    v20 = qword_10008BEF8;
    return swift_retain(v20);
  }
  sub_10000D330((uint64_t)v6, type metadata accessor for Clock);
LABEL_7:
  v20 = *(_QWORD *)(v0 + v1[11] + 48);
  return swift_retain(v20);
}

uint64_t sub_10003FD44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v3;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  double (*v15)(uint64_t, uint64_t);
  double v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;

  v32 = a1;
  v31 = sub_1000041D8(&qword_1000861D0);
  __chkstk_darwin(v31);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v8);
  v10 = (_OWORD *)((char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = type metadata accessor for Clock(0);
  v12 = (_QWORD *)(v3 + *(int *)(v11 + 24));
  v13 = v12[3];
  v14 = v12[4];
  sub_100050938(v12, v13);
  v15 = *(double (**)(uint64_t, uint64_t))(v14 + 72);
  swift_retain(v32);
  v16 = v15(v13, v14);
  v17 = v3 + *(int *)(v11 + 44);
  LOBYTE(v15) = *(_BYTE *)(v17 + 40);
  v18 = *(_QWORD *)(v17 + 56);
  v19 = (char *)v10 + *(int *)(v8 + 20);
  v20 = enum case for RoundedCornerStyle.continuous(_:);
  v21 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v19, v20, v21);
  __asm { FMOV            V0.2D, #2.0 }
  *v10 = _Q0;
  sub_10000DF30((uint64_t)v10, (uint64_t)v7, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)&v7[*(int *)(v31 + 36)] = 256;
  v27 = sub_1000041D8(&qword_1000861D8);
  sub_10001DEA0((uint64_t)v7, a2 + *(int *)(v27 + 36), &qword_1000861D0);
  *(_BYTE *)a2 = 0;
  v28 = v32;
  *(_QWORD *)(a2 + 8) = v32;
  *(double *)(a2 + 16) = v16;
  *(_QWORD *)(a2 + 24) = 0x3FE0B020C49BA5E3;
  *(double *)(a2 + 32) = a3;
  *(_BYTE *)(a2 + 40) = (_BYTE)v15;
  *(_QWORD *)(a2 + 48) = v18;
  v29 = v28;
  swift_retain(v28);
  sub_1000106A4((uint64_t)v7, &qword_1000861D0);
  sub_10000D330((uint64_t)v10, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  return swift_release(v29);
}

void sub_10003FF4C(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v3;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  double (*v11)(uint64_t, uint64_t);
  double v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v7 = type metadata accessor for Clock(0);
  v8 = (_QWORD *)(v3 + *(int *)(v7 + 24));
  v9 = v8[3];
  v10 = v8[4];
  sub_100050938(v8, v9);
  v11 = *(double (**)(uint64_t, uint64_t))(v10 + 72);
  swift_retain(a1);
  v12 = v11(v9, v10);
  v13 = v3 + *(int *)(v7 + 44);
  v14 = *(_BYTE *)(v13 + 40);
  v15 = *(_QWORD *)(v13 + 56);
  *(_BYTE *)a2 = 0;
  *(_QWORD *)(a2 + 8) = a1;
  *(double *)(a2 + 16) = v12;
  *(_QWORD *)(a2 + 24) = 0x3FECCCCCCCCCCCCDLL;
  *(double *)(a2 + 32) = a3;
  *(_BYTE *)(a2 + 40) = v14;
  *(_QWORD *)(a2 + 48) = v15;
}

uint64_t sub_100040008()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t);
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  char *v18;
  uint64_t v20;

  v1 = (int *)type metadata accessor for Clock(0);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v20 - v5;
  v7 = type metadata accessor for WidgetRenderingMode(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = v0 + v1[14];
  static WidgetRenderingMode.accented.getter(v9);
  LOBYTE(v12) = static WidgetRenderingMode.== infix(_:_:)(v12, v11);
  v13 = *(uint64_t (**)(char *, uint64_t))(v8 + 8);
  v14 = v13(v11, v7);
  if ((v12 & 1) == 0)
  {
    v15 = *(unsigned __int8 *)(v0 + v1[13]);
    sub_10000DF30(v0, (uint64_t)v6, type metadata accessor for Clock);
    if (v15 == 1)
    {
      sub_10000D330((uint64_t)v6, type metadata accessor for Clock);
      return swift_retain(*(_QWORD *)(v0 + v1[11] + 24));
    }
    v16 = v6[v1[12]];
    v17 = sub_10000DF30((uint64_t)v6, (uint64_t)v4, type metadata accessor for Clock);
    if (v16 == 1)
    {
      v18 = &v4[v1[14]];
      static WidgetRenderingMode.fullColor.getter(v17);
      LOBYTE(v18) = static WidgetRenderingMode.== infix(_:_:)(v18, v11);
      v13(v11, v7);
      sub_10000D330((uint64_t)v4, type metadata accessor for Clock);
      v14 = sub_10000D330((uint64_t)v6, type metadata accessor for Clock);
      if ((v18 & 1) != 0)
        return swift_retain(*(_QWORD *)(v0 + v1[11] + 24));
    }
    else
    {
      sub_10000D330((uint64_t)v4, type metadata accessor for Clock);
      v14 = sub_10000D330((uint64_t)v6, type metadata accessor for Clock);
    }
  }
  return static Color.white.getter(v14);
}

uint64_t sub_1000401E0(char a1)
{
  uint64_t *v1;

  if ((a1 & 1) != 0)
  {
    if (qword_10008A680 != -1)
      swift_once(&qword_10008A680, sub_1000420D0);
    v1 = &qword_10008BF30;
  }
  else
  {
    if (qword_10008A650 != -1)
      swift_once(&qword_10008A650, sub_100041DD8);
    v1 = &qword_10008BF00;
  }
  return swift_retain(*v1);
}

double sub_10004025C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for Clock(0) + 60));
  v2 = *v1;
  v3 = *((_BYTE *)v1 + 8);
  v4 = swift_retain(*v1);
  v5 = sub_10002556C(v4, v3);
  swift_release(v2);
  LODWORD(v2) = sub_100067914();
  swift_release(v5);
  result = dbl_10006CA90[(_DWORD)v2 == 4];
  if ((_DWORD)v2 == 3)
    return 0.93;
  return result;
}

void sub_1000402E4(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  double (*v12)(uint64_t, uint64_t);
  double v13;

  v9 = (_QWORD *)(v4 + *(int *)(type metadata accessor for Clock(0) + 24));
  v10 = v9[3];
  v11 = v9[4];
  sub_100050938(v9, v10);
  v12 = *(double (**)(uint64_t, uint64_t))(v11 + 96);
  swift_retain(a1);
  v13 = v12(v10, v11);
  *(_BYTE *)a2 = 1;
  *(_QWORD *)(a2 + 8) = a1;
  *(double *)(a2 + 16) = v13;
  *(double *)(a2 + 24) = a3;
  *(double *)(a2 + 32) = a4;
  *(_BYTE *)(a2 + 40) = 1;
  *(_QWORD *)(a2 + 48) = 0x3FC3333333333333;
}

double sub_100040380(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  uint64_t v8;

  v2 = type metadata accessor for _ClockHandRotationEffect.Period(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == enum case for _ClockHandRotationEffect.Period.custom(_:))
  {
    (*(void (**)(char *, uint64_t))(v3 + 96))(v5, v2);
    return *(double *)v5;
  }
  else if (v6 == enum case for _ClockHandRotationEffect.Period.hourHand(_:))
  {
    return 43200.0;
  }
  else if (v6 == enum case for _ClockHandRotationEffect.Period.minuteHand(_:))
  {
    return 3600.0;
  }
  else if (v6 == enum case for _ClockHandRotationEffect.Period.secondHand(_:))
  {
    return 60.0;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return 0.0;
  }
}

long double sub_1000404AC(uint64_t a1, long double a2)
{
  double v3;
  double v4;
  long double v5;

  v3 = (double)TimeZone.secondsFromGMT(for:)(a1);
  v4 = Date.timeIntervalSinceReferenceDate.getter();
  v5 = fmod(v4 + v3, a2);
  return (v5 + v5) * 3.14159265 / a2;
}

uint64_t sub_10004050C()
{
  _BYTE *v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _BYTE *v12;
  uint64_t (*v13)(char *, uint64_t);
  uint64_t v14;
  int v16;
  int v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;

  v1 = (int *)type metadata accessor for Clock(0);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v21 - v5;
  v7 = type metadata accessor for WidgetRenderingMode(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = &v0[v1[14]];
  static WidgetRenderingMode.accented.getter(v9);
  LOBYTE(v12) = static WidgetRenderingMode.== infix(_:_:)(v12, v11);
  v13 = *(uint64_t (**)(char *, uint64_t))(v8 + 8);
  v14 = v13(v11, v7);
  if ((v12 & 1) != 0)
    return static Color.white.getter(v14);
  v16 = v0[v1[13]];
  sub_10000DF30((uint64_t)v0, (uint64_t)v6, type metadata accessor for Clock);
  if (v16 == 1)
  {
    sub_10000D330((uint64_t)v6, type metadata accessor for Clock);
  }
  else
  {
    v17 = v6[v1[12]];
    v18 = sub_10000DF30((uint64_t)v6, (uint64_t)v4, type metadata accessor for Clock);
    if (v17 != 1)
    {
      sub_10000D330((uint64_t)v4, type metadata accessor for Clock);
      sub_10000D330((uint64_t)v6, type metadata accessor for Clock);
      goto LABEL_12;
    }
    v19 = &v4[v1[14]];
    static WidgetRenderingMode.fullColor.getter(v18);
    LOBYTE(v19) = static WidgetRenderingMode.== infix(_:_:)(v19, v11);
    v13(v11, v7);
    sub_10000D330((uint64_t)v4, type metadata accessor for Clock);
    sub_10000D330((uint64_t)v6, type metadata accessor for Clock);
    if ((v19 & 1) == 0)
    {
LABEL_12:
      if (qword_10008A650 != -1)
        swift_once(&qword_10008A650, sub_100041DD8);
      v20 = qword_10008BF00;
      return swift_retain(v20);
    }
  }
  if (*v0 != 1)
    goto LABEL_12;
  if (qword_10008A680 != -1)
    swift_once(&qword_10008A680, sub_1000420D0);
  v20 = qword_10008BF30;
  return swift_retain(v20);
}

uint64_t sub_100040748()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t);
  uint64_t v14;
  int v16;
  int v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;

  v1 = (int *)type metadata accessor for Clock(0);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v21 - v5;
  v7 = type metadata accessor for WidgetRenderingMode(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = v0 + v1[14];
  static WidgetRenderingMode.accented.getter(v9);
  LOBYTE(v12) = static WidgetRenderingMode.== infix(_:_:)(v12, v11);
  v13 = *(uint64_t (**)(char *, uint64_t))(v8 + 8);
  v14 = v13(v11, v7);
  if ((v12 & 1) != 0)
    return static Color.white.getter(v14);
  v16 = *(unsigned __int8 *)(v0 + v1[13]);
  sub_10000DF30(v0, (uint64_t)v6, type metadata accessor for Clock);
  if (v16 == 1)
  {
    sub_10000D330((uint64_t)v6, type metadata accessor for Clock);
    return swift_retain(*(_QWORD *)(v0 + v1[11] + 32));
  }
  v17 = v6[v1[12]];
  v18 = sub_10000DF30((uint64_t)v6, (uint64_t)v4, type metadata accessor for Clock);
  if (v17 == 1)
  {
    v19 = &v4[v1[14]];
    static WidgetRenderingMode.fullColor.getter(v18);
    LOBYTE(v19) = static WidgetRenderingMode.== infix(_:_:)(v19, v11);
    v13(v11, v7);
    sub_10000D330((uint64_t)v4, type metadata accessor for Clock);
    v20 = sub_10000D330((uint64_t)v6, type metadata accessor for Clock);
    if ((v19 & 1) != 0)
      return swift_retain(*(_QWORD *)(v0 + v1[11] + 32));
  }
  else
  {
    sub_10000D330((uint64_t)v4, type metadata accessor for Clock);
    v20 = sub_10000D330((uint64_t)v6, type metadata accessor for Clock);
  }
  return static Color.black.getter(v20);
}

uint64_t *sub_100040928()
{
  if (qword_10008A628 != -1)
    swift_once(&qword_10008A628, sub_100041B1C);
  return &qword_10008BED8;
}

uint64_t sub_100040968@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>)
{
  *(_BYTE *)a4 = result;
  *(_QWORD *)(a4 + 8) = a2;
  *(double *)(a4 + 16) = a5;
  *(double *)(a4 + 24) = a6;
  *(double *)(a4 + 32) = a7;
  *(_BYTE *)(a4 + 40) = a3;
  *(double *)(a4 + 48) = a8;
  return result;
}

uint64_t sub_100040984()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t sub_10004098C(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 40) = result;
  return result;
}

void *sub_100040994()
{
  return &unk_10006CB38;
}

double sub_1000409A0(double a1, double a2)
{
  return a2;
}

void sub_1000409A8(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
}

double sub_1000409B0@<D0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>, double a7@<D5>)
{
  double result;
  __int128 v9;
  _QWORD v10[9];
  _OWORD v11[2];
  char v12;

  *(double *)&v10[2] = a2;
  *(double *)&v10[3] = a3;
  *(double *)&v10[4] = a4;
  *(double *)&v10[5] = a5;
  *(double *)&v10[6] = a6;
  *(double *)&v10[7] = a7;
  Path.init(_:)(v11, sub_100050EFC, v10);
  result = *(double *)v11;
  v9 = v11[1];
  *(_OWORD *)a1 = v11[0];
  *(_OWORD *)(a1 + 16) = v9;
  *(_BYTE *)(a1 + 32) = v12;
  return result;
}

void sub_100040A08(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5, double a6)
{
  CGFloat MidX;
  unint64_t v13;
  double v14;
  CGRect v15;

  MidX = CGRectGetMidX(*(CGRect *)&a1);
  v15.origin.x = a1;
  v15.origin.y = a2;
  v15.size.width = a3;
  v15.size.height = a4;
  *(double *)&v13 = CGRectGetMidY(v15);
  v14 = *(double *)&v13;
  Path.move(to:)((CGPoint)__PAIR128__(v13, *(unint64_t *)&MidX));
  Path.addLine(to:)((CGPoint)__PAIR128__(v14 + a5 * -0.5 * a6, *(unint64_t *)&MidX));
}

double sub_100040AA0@<D0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  __int128 *v5;
  double result;
  __int128 v8;
  _QWORD v9[6];
  __int128 v10;
  _OWORD v11[2];
  char v12;

  *(double *)&v9[2] = a2;
  *(double *)&v9[3] = a3;
  *(double *)&v9[4] = a4;
  *(double *)&v9[5] = a5;
  v10 = *v5;
  Path.init(_:)(v11, sub_100050EFC, v9);
  result = *(double *)v11;
  v8 = v11[1];
  *(_OWORD *)a1 = v11[0];
  *(_OWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 32) = v12;
  return result;
}

uint64_t sub_100040B04()
{
  return Shape.sizeThatFits(_:)();
}

uint64_t (*sub_100040B1C(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Animatable<>.animatableData.modify();
  return sub_100040B78;
}

uint64_t sub_100040B80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10006515C();
  return static Shape._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_100040BD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10006515C();
  return static Shape._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_100040C20(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006515C();
  return Shape.body.getter(a1, v2);
}

uint64_t sub_100040C58(char a1)
{
  return a1 & 1;
}

double sub_100040C60(double a1, double a2, double a3)
{
  return a3;
}

double sub_100040C68@<D0>(char a1@<W0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>, double a7@<D4>, double a8@<D5>, double a9@<D6>)
{
  double result;
  __int128 v11;
  _QWORD v12[7];
  char v13;
  double v14;
  double v15;
  _OWORD v16[2];
  char v17;

  *(double *)&v12[2] = a3;
  *(double *)&v12[3] = a4;
  *(double *)&v12[4] = a5;
  *(double *)&v12[5] = a6;
  *(double *)&v12[6] = a7;
  v13 = a1;
  v14 = a8;
  v15 = a9;
  Path.init(_:)(v16, sub_100050F00, v12);
  result = *(double *)v16;
  v11 = v16[1];
  *(_OWORD *)a2 = v16[0];
  *(_OWORD *)(a2 + 16) = v11;
  *(_BYTE *)(a2 + 32) = v17;
  return result;
}

void sub_100040CC8(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5, double a6, double a7, uint64_t a8, char a9)
{
  CGFloat MidX;
  double MidY;
  double v19;
  double v20;
  CGRect v21;

  MidX = CGRectGetMidX(*(CGRect *)&a1);
  v21.origin.x = a1;
  v21.origin.y = a2;
  v21.size.width = a3;
  v21.size.height = a4;
  MidY = CGRectGetMidY(v21);
  v19 = a5 * 0.5;
  v20 = MidY * -0.15;
  if ((a9 & 1) == 0)
    v20 = v19 * a7;
  Path.move(to:)((CGPoint)__PAIR128__(MidY - v20, *(unint64_t *)&MidX));
  Path.addLine(to:)((CGPoint)__PAIR128__(MidY - v19 * a6, *(unint64_t *)&MidX));
}

double sub_100040D84@<D0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  uint64_t *v5;
  uint64_t v7;
  char v8;
  double result;
  __int128 v10;
  _QWORD v11[7];
  char v12;
  __int128 v13;
  _OWORD v14[2];
  char v15;

  v7 = *v5;
  v8 = *((_BYTE *)v5 + 8);
  *(double *)&v11[2] = a2;
  *(double *)&v11[3] = a3;
  *(double *)&v11[4] = a4;
  *(double *)&v11[5] = a5;
  v11[6] = v7;
  v12 = v8;
  v13 = *((_OWORD *)v5 + 1);
  Path.init(_:)(v14, sub_100050F00, v11);
  result = *(double *)v14;
  v10 = v14[1];
  *(_OWORD *)a1 = v14[0];
  *(_OWORD *)(a1 + 16) = v10;
  *(_BYTE *)(a1 + 32) = v15;
  return result;
}

void sub_100040DF0(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t sub_100040E1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100065100();
  return static Shape._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_100040E6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100065100();
  return static Shape._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_100040EBC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100065100();
  return Shape.body.getter(a1, v2);
}

double sub_100040EF4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  double result;
  __int128 v14;
  _OWORD v15[14];

  v4 = static Alignment.center.getter(a1);
  v6 = v5;
  sub_100040F90(v2, (uint64_t)v15);
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v6;
  v7 = v15[11];
  *(_OWORD *)(a2 + 176) = v15[10];
  *(_OWORD *)(a2 + 192) = v7;
  v8 = v15[13];
  *(_OWORD *)(a2 + 208) = v15[12];
  *(_OWORD *)(a2 + 224) = v8;
  v9 = v15[7];
  *(_OWORD *)(a2 + 112) = v15[6];
  *(_OWORD *)(a2 + 128) = v9;
  v10 = v15[9];
  *(_OWORD *)(a2 + 144) = v15[8];
  *(_OWORD *)(a2 + 160) = v10;
  v11 = v15[3];
  *(_OWORD *)(a2 + 48) = v15[2];
  *(_OWORD *)(a2 + 64) = v11;
  v12 = v15[5];
  *(_OWORD *)(a2 + 80) = v15[4];
  *(_OWORD *)(a2 + 96) = v12;
  result = *(double *)v15;
  v14 = v15[1];
  *(_OWORD *)(a2 + 16) = v15[0];
  *(_OWORD *)(a2 + 32) = v14;
  return result;
}

uint64_t sub_100040F90@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD v71[5];
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v33 = *a1;
  if (v33 == 1)
  {
    v4 = 0;
    v5 = 0;
    v41 = 0;
    v42 = 0;
    v37 = 0;
    v38 = 0;
    v6 = 0;
    v43 = 0;
    v36 = 0;
    v39 = 0;
    v40 = 0;
    v7 = *((_QWORD *)a1 + 4);
    v8 = *((_QWORD *)a1 + 6);
    v9 = *((_QWORD *)a1 + 1);
    v10 = *((double *)a1 + 2);
    v34 = 2;
  }
  else
  {
    v4 = *((_QWORD *)a1 + 4);
    v5 = *((_QWORD *)a1 + 6);
    v9 = *((_QWORD *)a1 + 1);
    v10 = *((double *)a1 + 2);
    if ((a1[40] & 1) != 0)
    {
      sub_1000667B4((uint64_t)a1);
      v34 = 1;
      v11 = StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v71, 1, 1, &_swiftEmptyArrayStorage, v10 * 0.5, 10.0, 0.0);
      v41 = v71[0];
      v6 = v71[3];
      v37 = v71[2];
      v38 = v71[1];
      v43 = v71[4];
      v12 = static Alignment.center.getter(v11);
      v39 = v13;
      v40 = v12;
      v36 = 256;
      v7 = v4;
      v8 = v5;
      v42 = v9;
    }
    else
    {
      v8 = *((_QWORD *)a1 + 6);
      v7 = *((_QWORD *)a1 + 4);
      v4 = 0;
      v5 = 0;
      v41 = 0;
      v42 = 0;
      v37 = 0;
      v38 = 0;
      v6 = 0;
      v43 = 0;
      v36 = 0;
      v39 = 0;
      v40 = 0;
      v34 = 1;
    }
  }
  v14 = *((_QWORD *)a1 + 3);
  sub_1000667B4((uint64_t)a1);
  v15 = StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(&v72, v34, 1, &_swiftEmptyArrayStorage, v10, 10.0, 0.0);
  v16 = v72;
  v17 = v73;
  v18 = v74;
  v19 = v75;
  v20 = v76;
  v21 = v77;
  v22 = static Alignment.center.getter(v15);
  if (qword_10008A628 != -1)
  {
    v35 = v22;
    v32 = v23;
    swift_once(&qword_10008A628, sub_100041B1C);
    v23 = v32;
    v22 = v35;
  }
  v24 = 1.0;
  *(_QWORD *)&v44 = v7;
  if (v33)
    v24 = 0.0;
  BYTE8(v44) = v33;
  *(_QWORD *)&v45 = v14;
  *((_QWORD *)&v45 + 1) = v8;
  *(_QWORD *)&v46 = v16;
  *((_QWORD *)&v46 + 1) = __PAIR64__(v18, v17);
  *(_QWORD *)&v47 = v19;
  *((_QWORD *)&v47 + 1) = v20;
  *(_QWORD *)&v48 = v21;
  *((_QWORD *)&v48 + 1) = v9;
  LOWORD(v49) = 256;
  *((_QWORD *)&v49 + 1) = v22;
  *(_QWORD *)&v50 = v23;
  *((_QWORD *)&v50 + 1) = qword_10008BED8;
  v25 = qword_10008BED8;
  v51 = *(unint64_t *)&v24;
  v52 = 0;
  v26 = v44;
  *(_OWORD *)(a2 + 104) = v45;
  v27 = v49;
  *(_OWORD *)(a2 + 152) = v48;
  v28 = v46;
  *(_OWORD *)(a2 + 136) = v47;
  *(_OWORD *)(a2 + 88) = v26;
  v29 = v50;
  *(_OWORD *)(a2 + 200) = v51;
  *(_OWORD *)(a2 + 184) = v29;
  *(_OWORD *)(a2 + 168) = v27;
  *(_QWORD *)(a2 + 216) = 0;
  *(_OWORD *)(a2 + 120) = v28;
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v41;
  *(_QWORD *)(a2 + 24) = v38;
  *(_QWORD *)(a2 + 32) = v37;
  *(_QWORD *)(a2 + 40) = v6;
  *(_QWORD *)(a2 + 48) = v43;
  *(_QWORD *)(a2 + 56) = v42;
  *(_QWORD *)(a2 + 64) = v36;
  *(_QWORD *)(a2 + 72) = v40;
  *(_QWORD *)(a2 + 80) = v39;
  v53 = v7;
  v54 = v33;
  v55 = v14;
  v56 = v8;
  v57 = v16;
  v58 = v17;
  v59 = v18;
  v60 = v19;
  v61 = v20;
  v62 = v21;
  v63 = v9;
  v64 = 256;
  v65 = v22;
  v66 = v23;
  v30 = v25;
  v67 = v25;
  v68 = v24;
  v69 = 0;
  v70 = 0;
  sub_1000667DC(v4, v5, v41, v38, v37, v6, v43, v42);
  sub_10006680C(&v44);
  swift_retain(v30);
  sub_100066854(&v53);
  return sub_10006689C(v4, v5, v41, v38, v37, v6, v43, v42);
}

double sub_100041324@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  double result;
  __int128 v15;
  _OWORD v16[3];
  uint64_t v17;
  _OWORD v18[14];

  v4 = *(_OWORD *)(v2 + 16);
  v16[0] = *(_OWORD *)v2;
  v16[1] = v4;
  v16[2] = *(_OWORD *)(v2 + 32);
  v17 = *(_QWORD *)(v2 + 48);
  v5 = static Alignment.center.getter(a1);
  v7 = v6;
  sub_100040F90((unsigned __int8 *)v16, (uint64_t)v18);
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v7;
  v8 = v18[11];
  *(_OWORD *)(a2 + 176) = v18[10];
  *(_OWORD *)(a2 + 192) = v8;
  v9 = v18[13];
  *(_OWORD *)(a2 + 208) = v18[12];
  *(_OWORD *)(a2 + 224) = v9;
  v10 = v18[7];
  *(_OWORD *)(a2 + 112) = v18[6];
  *(_OWORD *)(a2 + 128) = v10;
  v11 = v18[9];
  *(_OWORD *)(a2 + 144) = v18[8];
  *(_OWORD *)(a2 + 160) = v11;
  v12 = v18[3];
  *(_OWORD *)(a2 + 48) = v18[2];
  *(_OWORD *)(a2 + 64) = v12;
  v13 = v18[5];
  *(_OWORD *)(a2 + 80) = v18[4];
  *(_OWORD *)(a2 + 96) = v13;
  result = *(double *)v18;
  v15 = v18[1];
  *(_OWORD *)(a2 + 16) = v18[0];
  *(_OWORD *)(a2 + 32) = v15;
  return result;
}

uint64_t sub_1000413C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 32);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_QWORD *)(a1 + 16) = v2;
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = v4;
  swift_retain(v3);
  return swift_retain(v4);
}

__n128 sub_1000413FC(uint64_t a1)
{
  uint64_t v1;
  __n128 result;
  __int128 v4;

  swift_release(*(_QWORD *)(v1 + 24));
  swift_release(*(_QWORD *)(v1 + 32));
  result = *(__n128 *)a1;
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v1 = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 16) = v4;
  *(_QWORD *)(v1 + 32) = *(_QWORD *)(a1 + 32);
  return result;
}

uint64_t sub_10004143C()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 48));
}

uint64_t sub_100041444(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_release(*(_QWORD *)(v1 + 48));
  *(_QWORD *)(v1 + 48) = a1;
  return result;
}

uint64_t sub_10004146C()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 24));
}

uint64_t sub_100041474(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_release(*(_QWORD *)(v1 + 24));
  *(_QWORD *)(v1 + 24) = a1;
  return result;
}

uint64_t sub_1000414A0()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 32));
}

uint64_t sub_1000414A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_release(*(_QWORD *)(v1 + 32));
  *(_QWORD *)(v1 + 32) = a1;
  return result;
}

double sub_1000414D0@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double result;

  v2 = static Color.white.getter();
  v3 = static Color.black.getter();
  v4 = static Color.white.getter();
  result = 0.0585;
  *(_OWORD *)a1 = xmmword_10006CA00;
  *(_QWORD *)(a1 + 16) = 0x3F916872B020C49CLL;
  *(_QWORD *)(a1 + 24) = v2;
  *(_QWORD *)(a1 + 32) = v3;
  *(_BYTE *)(a1 + 40) = 1;
  *(_QWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 56) = 0x3FC3333333333333;
  return result;
}

double sub_100041540@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  double result;

  v2 = static Color.white.getter();
  v3 = static Color.black.getter();
  result = 0.0585;
  *(_OWORD *)a1 = xmmword_10006CA00;
  *(_QWORD *)(a1 + 16) = 0x3F916872B020C49CLL;
  *(_QWORD *)(a1 + 24) = v2;
  *(_QWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t sub_10004158C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000415A0(type metadata accessor for CapMaxContentSizeCategory, (uint64_t (*)(_QWORD))&type metadata accessor for ContentSizeCategory, a1);
}

uint64_t sub_1000415A0@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v6 = v3 + *(int *)(a1(0) + 20);
  v7 = a2(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a3, v6, v7);
}

uint64_t sub_1000415F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CapMaxContentSizeCategory(0) + 20);
  v4 = type metadata accessor for ContentSizeCategory(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*sub_100041640())()
{
  type metadata accessor for CapMaxContentSizeCategory(0);
  return nullsub_1;
}

uint64_t sub_100041668@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  BOOL v12;
  void (*v13)(char *, uint64_t);
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t v20;

  v20 = a1;
  v4 = type metadata accessor for ContentSizeCategory(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&KeyPath - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&KeyPath - v9;
  KeyPath = swift_getKeyPath(&unk_10006CBF0);
  sub_100025364(&qword_100085E48, (uint64_t (*)(_QWORD))&type metadata accessor for ContentSizeCategory, (char *)0xD000000000000013, (char *)0x800000010006F3D0, (uint64_t)v8);
  v11 = v2 + *(int *)(type metadata accessor for CapMaxContentSizeCategory(0) + 20);
  v12 = sub_10004FD90((uint64_t)v8, v11);
  v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v8, v4);
  if (v12)
  {
    v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v14(v10, v11, v4);
  }
  else
  {
    sub_100025364(&qword_100085E48, (uint64_t (*)(_QWORD))&type metadata accessor for ContentSizeCategory, (char *)0xD000000000000013, (char *)0x800000010006F3D0, (uint64_t)v10);
    v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  }
  v15 = (uint64_t *)(a2 + *(int *)(sub_1000041D8(&qword_1000861E8) + 36));
  v16 = sub_1000041D8(&qword_1000860A8);
  v14((char *)v15 + *(int *)(v16 + 28), (uint64_t)v10, v4);
  *v15 = KeyPath;
  v17 = sub_1000041D8(&qword_1000861F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(a2, v20, v17);
  return ((uint64_t (*)(char *, uint64_t))v13)(v10, v4);
}

uint64_t sub_10004182C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  sub_10001DE5C(a1, a3, &qword_100085AD0);
  v5 = a3 + *(int *)(type metadata accessor for CapMaxContentSizeCategory(0) + 20);
  v6 = type metadata accessor for ContentSizeCategory(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v5, a2, v6);
}

uint64_t sub_100041888@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  BOOL v14;
  void (*v15)(char *, uint64_t);
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t KeyPath;
  uint64_t v22;

  v22 = a1;
  v6 = type metadata accessor for ContentSizeCategory(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&KeyPath - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&KeyPath - v11;
  KeyPath = swift_getKeyPath(&unk_10006CBF0);
  sub_100025364(&qword_100085E48, (uint64_t (*)(_QWORD))&type metadata accessor for ContentSizeCategory, (char *)0xD000000000000013, (char *)0x800000010006F3D0, (uint64_t)v10);
  v13 = v3 + *(int *)(a2 + 20);
  v14 = sub_10004FD90((uint64_t)v10, v13);
  v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v10, v6);
  if (v14)
  {
    v16 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v16(v12, v13, v6);
  }
  else
  {
    sub_100025364(&qword_100085E48, (uint64_t (*)(_QWORD))&type metadata accessor for ContentSizeCategory, (char *)0xD000000000000013, (char *)0x800000010006F3D0, (uint64_t)v12);
    v16 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  }
  v17 = (uint64_t *)(a3 + *(int *)(sub_1000041D8(&qword_1000861E8) + 36));
  v18 = sub_1000041D8(&qword_1000860A8);
  v16((char *)v17 + *(int *)(v18 + 28), (uint64_t)v12, v6);
  *v17 = KeyPath;
  v19 = sub_1000041D8(&qword_1000861F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(a3, v22, v19);
  return ((uint64_t (*)(char *, uint64_t))v15)(v12, v6);
}

uint64_t sub_100041A48()
{
  uint64_t result;

  result = Image.init(systemName:)(0x69662E6D72616C61, 0xEA00000000006C6CLL);
  qword_10008BEC8 = result;
  return result;
}

uint64_t *sub_100041A7C()
{
  if (qword_10008A618 != -1)
    swift_once(&qword_10008A618, sub_100041A48);
  return &qword_10008BEC8;
}

uint64_t sub_100041ABC()
{
  return sub_100024CE4(&qword_10008A618, &qword_10008BEC8);
}

uint64_t sub_100041AD8(uint64_t a1)
{
  return sub_1000423C0(0.109803922, 0.109803922, 0.117647059, a1, &qword_10008BED0);
}

uint64_t sub_100041B00()
{
  return sub_100024CE4(&qword_10008A620, &qword_10008BED0);
}

uint64_t sub_100041B1C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v0 = type metadata accessor for Color.RGBColorSpace(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD))(v3 + 104))(v2, enum case for Color.RGBColorSpace.sRGB(_:));
  result = Color.init(_:red:green:blue:opacity:)(v2, 0.0, 0.0, 0.0, 0.3);
  qword_10008BED8 = result;
  return result;
}

uint64_t sub_100041BB0()
{
  return sub_100024CE4(&qword_10008A628, &qword_10008BED8);
}

uint64_t sub_100041BCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = static Color.clear.getter();
  v1 = Color.opacity(_:)(0.0);
  result = swift_release(v0);
  qword_10008BEE0 = v1;
  return result;
}

uint64_t sub_100041C08()
{
  return sub_100024CE4(&qword_10008A630, &qword_10008BEE0);
}

uint64_t sub_100041C24()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v0 = type metadata accessor for Color.RGBColorSpace(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD))(v3 + 104))(v2, enum case for Color.RGBColorSpace.sRGB(_:));
  result = Color.init(_:red:green:blue:opacity:)(v2, 0.22745098, 0.22745098, 0.235294118, 0.8);
  qword_10008BEE8 = result;
  return result;
}

uint64_t *sub_100041CC0()
{
  if (qword_10008A638 != -1)
    swift_once(&qword_10008A638, sub_100041C24);
  return &qword_10008BEE8;
}

uint64_t sub_100041D00()
{
  return sub_100024CE4(&qword_10008A638, &qword_10008BEE8);
}

uint64_t sub_100041D1C(uint64_t a1)
{
  return sub_1000423C0(0.682352941, 0.682352941, 0.698039216, a1, &qword_10008BEF0);
}

uint64_t *sub_100041D3C()
{
  if (qword_10008A640 != -1)
    swift_once(&qword_10008A640, sub_100041D1C);
  return &qword_10008BEF0;
}

uint64_t sub_100041D7C()
{
  return sub_100024CE4(&qword_10008A640, &qword_10008BEF0);
}

uint64_t sub_100041D98(uint64_t a1)
{
  return sub_1000423C0(0.960784314, 0.960784314, 0.97254902, a1, &qword_10008BEF8);
}

uint64_t sub_100041DBC()
{
  return sub_100024CE4(&qword_10008A648, &qword_10008BEF8);
}

uint64_t sub_100041DD8(uint64_t a1)
{
  return sub_1000423C0(1.0, 0.623529412, 0.0392156863, a1, &qword_10008BF00);
}

uint64_t *sub_100041DF8()
{
  if (qword_10008A650 != -1)
    swift_once(&qword_10008A650, sub_100041DD8);
  return &qword_10008BF00;
}

uint64_t sub_100041E38()
{
  return sub_100024CE4(&qword_10008A650, &qword_10008BF00);
}

uint64_t sub_100041E54(uint64_t a1)
{
  return sub_1000423C0(0.360784314, 0.360784314, 0.360784314, a1, &qword_10008BF08);
}

uint64_t *sub_100041E70()
{
  if (qword_10008A658 != -1)
    swift_once(&qword_10008A658, sub_100041E54);
  return &qword_10008BF08;
}

uint64_t sub_100041EB0()
{
  return sub_100024CE4(&qword_10008A658, &qword_10008BF08);
}

uint64_t sub_100041ECC(uint64_t a1)
{
  return sub_1000423C0(0.835294118, 0.835294118, 0.835294118, a1, &qword_10008BF10);
}

uint64_t *sub_100041EE8()
{
  if (qword_10008A660 != -1)
    swift_once(&qword_10008A660, sub_100041ECC);
  return &qword_10008BF10;
}

uint64_t sub_100041F28()
{
  return sub_100024CE4(&qword_10008A660, &qword_10008BF10);
}

uint64_t sub_100041F44(uint64_t a1)
{
  return sub_1000423C0(1.0, 1.0, 1.0, a1, &qword_10008BF18);
}

uint64_t type metadata accessor for ClockDateText(uint64_t a1)
{
  return sub_10000DEFC(a1, (uint64_t *)&unk_10008BAE0, (uint64_t)&nominal type descriptor for ClockDateText);
}

uint64_t sub_100041F70(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_1000041D8(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_100041FB4()
{
  return sub_100024CE4(&qword_10008A668, &qword_10008BF18);
}

uint64_t sub_100041FD0(uint64_t a1)
{
  return sub_1000423C0(0.556862745, 0.556862745, 0.576470588, a1, &qword_10008BF20);
}

uint64_t *sub_100041FF0()
{
  if (qword_10008A670 != -1)
    swift_once(&qword_10008A670, sub_100041FD0);
  return &qword_10008BF20;
}

uint64_t sub_100042030()
{
  return sub_100024CE4(&qword_10008A670, &qword_10008BF20);
}

uint64_t sub_10004204C(uint64_t a1)
{
  return sub_1000423C0(0.109803922, 0.109803922, 0.117647059, a1, &qword_10008BF28);
}

uint64_t *sub_100042074()
{
  if (qword_10008A678 != -1)
    swift_once(&qword_10008A678, sub_10004204C);
  return &qword_10008BF28;
}

uint64_t sub_1000420B4()
{
  return sub_100024CE4(&qword_10008A678, &qword_10008BF28);
}

uint64_t sub_1000420D0(uint64_t a1)
{
  return sub_1000423C0(1.0, 0.584313725, 0.0, a1, &qword_10008BF30);
}

uint64_t *sub_1000420EC()
{
  if (qword_10008A680 != -1)
    swift_once(&qword_10008A680, sub_1000420D0);
  return &qword_10008BF30;
}

uint64_t sub_10004212C()
{
  return sub_100024CE4(&qword_10008A680, &qword_10008BF30);
}

uint64_t sub_100042148(uint64_t a1)
{
  return sub_1000423C0(0.701960784, 0.701960784, 0.701960784, a1, &qword_10008BF38);
}

uint64_t *sub_100042164()
{
  if (qword_10008A688 != -1)
    swift_once(&qword_10008A688, sub_100042148);
  return &qword_10008BF38;
}

uint64_t sub_1000421A4()
{
  return sub_100024CE4(&qword_10008A688, &qword_10008BF38);
}

uint64_t sub_1000421C0()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v0 = type metadata accessor for Color.RGBColorSpace(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD))(v3 + 104))(v2, enum case for Color.RGBColorSpace.sRGB(_:));
  result = Color.init(_:red:green:blue:opacity:)(v2, 0.435294118, 0.435294118, 0.435294118, 0.8);
  qword_10008BF40 = result;
  return result;
}

uint64_t *sub_100042254()
{
  if (qword_10008A690 != -1)
    swift_once(&qword_10008A690, sub_1000421C0);
  return &qword_10008BF40;
}

uint64_t sub_100042294()
{
  return sub_100024CE4(&qword_10008A690, &qword_10008BF40);
}

uint64_t sub_1000422B0(uint64_t a1)
{
  return sub_1000423C0(0.411764706, 0.411764706, 0.411764706, a1, &qword_10008BF48);
}

uint64_t *sub_1000422CC()
{
  if (qword_10008A698 != -1)
    swift_once(&qword_10008A698, sub_1000422B0);
  return &qword_10008BF48;
}

uint64_t sub_10004230C()
{
  return sub_100024CE4(&qword_10008A698, &qword_10008BF48);
}

uint64_t sub_100042328(uint64_t a1)
{
  return sub_1000423C0(0.0235294118, 0.0235294118, 0.0235294118, a1, &qword_10008BF50);
}

uint64_t *sub_100042348()
{
  if (qword_10008A6A0 != -1)
    swift_once(&qword_10008A6A0, sub_100042328);
  return &qword_10008BF50;
}

uint64_t sub_100042388()
{
  return sub_100024CE4(&qword_10008A6A0, &qword_10008BF50);
}

uint64_t sub_1000423A4(uint64_t a1)
{
  return sub_1000423C0(0.929411765, 0.929411765, 0.929411765, a1, &qword_10008BF58);
}

uint64_t sub_1000423C0(double a1, double a2, double a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v9 = type metadata accessor for Color.RGBColorSpace(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD))(v12 + 104))(v11, enum case for Color.RGBColorSpace.sRGB(_:));
  result = Color.init(_:red:green:blue:opacity:)(v11, a1, a2, a3, 1.0);
  *a5 = result;
  return result;
}

uint64_t *sub_100042468()
{
  if (qword_10008A6A8 != -1)
    swift_once(&qword_10008A6A8, sub_1000423A4);
  return &qword_10008BF58;
}

uint64_t sub_1000424A8()
{
  return sub_100024CE4(&qword_10008A6A8, &qword_10008BF58);
}

uint64_t sub_1000424C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v0 = sub_1000041D8(&qword_100085EF8);
  v1 = swift_allocObject(v0, 56, 7);
  *(_OWORD *)(v1 + 16) = xmmword_10006B760;
  if (qword_10008A6A8 != -1)
    swift_once(&qword_10008A6A8, sub_1000423A4);
  v2 = qword_10008BF58;
  *(_QWORD *)(v1 + 32) = qword_10008BF58;
  v3 = qword_10008A698;
  swift_retain(v2);
  if (v3 != -1)
    swift_once(&qword_10008A698, sub_1000422B0);
  v4 = qword_10008BF48;
  *(_QWORD *)(v1 + 40) = qword_10008BF48;
  v5 = swift_retain(v4);
  v6 = static Color.black.getter(v5);
  *(_QWORD *)(v1 + 48) = v6;
  specialized Array._endMutation()(v6);
  result = Gradient.init(colors:)(v1);
  qword_10008BF60 = result;
  return result;
}

uint64_t sub_1000425A0()
{
  return sub_10004267C(&qword_10008A6B0, &qword_10008BF60);
}

uint64_t sub_1000425BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v0 = sub_1000041D8(&qword_100085EF8);
  v1 = swift_allocObject(v0, 48, 7);
  *(_OWORD *)(v1 + 16) = xmmword_10006B750;
  if (qword_10008A6A0 != -1)
    swift_once(&qword_10008A6A0, sub_100042328);
  v2 = qword_10008BF50;
  *(_QWORD *)(v1 + 32) = qword_10008BF50;
  v3 = swift_retain(v2);
  v4 = static Color.white.getter(v3);
  *(_QWORD *)(v1 + 40) = v4;
  specialized Array._endMutation()(v4);
  result = Gradient.init(colors:)(v1);
  qword_10008BF68 = result;
  return result;
}

uint64_t sub_100042660()
{
  return sub_10004267C(&qword_10008A6B8, &qword_10008BF68);
}

uint64_t sub_10004267C(_QWORD *a1, _QWORD *a2)
{
  if (*a1 != -1)
    swift_once();
  return swift_bridgeObjectRetain(*a2);
}

double sub_1000426B4()
{
  return 0.0;
}

void *sub_1000426BC()
{
  return &unk_10006CB48;
}

double sub_1000426C8()
{
  return 16.0;
}

void sub_1000426D0(uint64_t a1)
{
  sub_100042764(a1, (double *)&qword_10008BF70);
}

double sub_1000426DC()
{
  return sub_1000426F8(&qword_10008A6C0, (uint64_t)&qword_10008BF70);
}

double sub_1000426F8(_QWORD *a1, uint64_t a2)
{
  if (*a1 != -1)
    swift_once();
  return *(double *)a2;
}

void sub_100042730(uint64_t a1)
{
  sub_100042764(a1, (double *)&qword_10008BF78);
}

double sub_10004273C()
{
  return sub_1000426F8(&qword_10008A6C8, (uint64_t)&qword_10008BF78);
}

void sub_100042758(uint64_t a1)
{
  sub_100042764(a1, (double *)&qword_10008BF80);
}

void sub_100042764(uint64_t a1, double *a2)
{
  id v3;
  id v4;
  double v5;

  v3 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v4 = objc_msgSend(v3, "userInterfaceIdiom");

  v5 = 15.0;
  if (v4 == (id)1)
    v5 = 14.0;
  *a2 = v5;
}

double sub_1000427D4()
{
  return sub_1000426F8(&qword_10008A6D0, (uint64_t)&qword_10008BF80);
}

void sub_1000427F0()
{
  id v0;
  id v1;
  id v2;
  BOOL v3;

  if (sub_100067830())
  {
    v0 = objc_msgSend((id)objc_opt_self(DBSDisplayZoomConfigurationController), "defaultController");
    v1 = objc_msgSend(v0, "currentDisplayZoomMode");

    v2 = objc_msgSend(v1, "displayZoomOption");
    v3 = v2 == (id)1;
  }
  else
  {
    v3 = 0;
  }
  byte_10008A6E0 = v3;
}

void sub_100042880(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int sub_1000428A4(unsigned __int8 a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

BOOL sub_1000428E8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_1000428FC()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100042940()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100042968(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_1000429AC@<X0>(uint64_t a1@<X8>)
{
  return sub_100043C94((void (*)(_QWORD))type metadata accessor for DigitalClockWidgetView, a1);
}

uint64_t sub_1000429B8@<X0>(uint64_t a1@<X8>)
{
  return sub_100043D10(&qword_1000861F8, sub_1000429D4, &qword_100086200, a1);
}

uint64_t sub_1000429D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (**v7)@<X0>(uint64_t@<X8>);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = type metadata accessor for DigitalClockWidgetView(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v5 = sub_1000041D8(&qword_100087B68);
  __chkstk_darwin(v5);
  v7 = (uint64_t (**)@<X0>(uint64_t@<X8>))((char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for PlaceholderViewSingle(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)a1 == 1)
  {
    v11 = *(_QWORD *)(a1 + 8);
    v12 = *(_BYTE *)(a1 + 16);
    sub_10002571C(v11, v12);
    v13 = sub_1000251D8(v11, v12);
    sub_100025728(v11, v12);
    sub_100025364(&qword_100085E28, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, (char *)0xD000000000000013, (char *)0x800000010006F430, (uint64_t)&v10[*(int *)(v8 + 24)]);
    *v10 = 1;
    v10[1] = v13 & 1;
    sub_10000DF30((uint64_t)v10, (uint64_t)v7, type metadata accessor for PlaceholderViewSingle);
    swift_storeEnumTagMultiPayload(v7, v5, 0);
    v14 = sub_1000041D8(&qword_1000877E0);
    v15 = sub_10000D36C(&qword_100087480, type metadata accessor for PlaceholderViewSingle, (uint64_t)&unk_10006CE80);
    v16 = sub_10001DDB4(&qword_1000877D8, &qword_1000877E0, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
    _ConditionalContent<>.init(storage:)(v7, v8, v14, v15, v16);
    return sub_10000D330((uint64_t)v10, type metadata accessor for PlaceholderViewSingle);
  }
  else
  {
    sub_10000DF30(a1, (uint64_t)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for DigitalClockWidgetView);
    v18 = *(unsigned __int8 *)(v3 + 80);
    v19 = (v18 + 16) & ~v18;
    v20 = swift_allocObject(&unk_1000831C8, v19 + v4, v18 | 7);
    sub_1000106E0((uint64_t)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v20 + v19, type metadata accessor for DigitalClockWidgetView);
    *v7 = sub_100066750;
    v7[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v20;
    swift_storeEnumTagMultiPayload(v7, v5, 1);
    v21 = sub_1000041D8(&qword_1000877E0);
    v22 = sub_10000D36C(&qword_100087480, type metadata accessor for PlaceholderViewSingle, (uint64_t)&unk_10006CE80);
    v23 = sub_10001DDB4(&qword_1000877D8, &qword_1000877E0, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
    return _ConditionalContent<>.init(storage:)(v7, v8, v21, v22, v23);
  }
}

uint64_t sub_100042CB8@<X0>(uint64_t a1@<X8>)
{
  return sub_100043004(type metadata accessor for DigitalClockWidgetView, a1);
}

uint64_t sub_100042CC4@<X0>(char a1@<W0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_100043080(a1, a2, a3, a4, type metadata accessor for DigitalClockWidgetView, a5);
}

uint64_t sub_100042CD0@<X0>(uint64_t a1@<X8>)
{
  return sub_100044930(&qword_1000861F8, sub_1000429D4, &qword_100086200, a1);
}

uint64_t sub_100042CEC@<X0>(uint64_t a1@<X8>)
{
  return sub_100043C94((void (*)(_QWORD))type metadata accessor for DateTimeWidgetView, a1);
}

uint64_t sub_100042CF8@<X0>(uint64_t a1@<X8>)
{
  return sub_100043D10(&qword_100086208, sub_100042D14, &qword_100086210, a1);
}

uint64_t sub_100042D14(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (**v7)@<X0>(uint64_t@<X8>);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = type metadata accessor for DateTimeWidgetView(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v5 = sub_1000041D8(&qword_100087B98);
  __chkstk_darwin(v5);
  v7 = (uint64_t (**)@<X0>(uint64_t@<X8>))((char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for PlaceholderViewSingle(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)a1 == 1)
  {
    v11 = *(_QWORD *)(a1 + 8);
    v12 = *(_BYTE *)(a1 + 16);
    sub_10002571C(v11, v12);
    v13 = sub_1000251D8(v11, v12);
    sub_100025728(v11, v12);
    sub_100025364(&qword_100085E28, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, (char *)0xD000000000000013, (char *)0x800000010006F430, (uint64_t)&v10[*(int *)(v8 + 24)]);
    *v10 = 1;
    v10[1] = v13 & 1;
    sub_10000DF30((uint64_t)v10, (uint64_t)v7, type metadata accessor for PlaceholderViewSingle);
    swift_storeEnumTagMultiPayload(v7, v5, 0);
    v14 = sub_1000041D8(&qword_100087810);
    v15 = sub_10000D36C(&qword_100087480, type metadata accessor for PlaceholderViewSingle, (uint64_t)&unk_10006CE80);
    v16 = sub_10001DDB4(&qword_100087808, &qword_100087810, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
    _ConditionalContent<>.init(storage:)(v7, v8, v14, v15, v16);
    return sub_10000D330((uint64_t)v10, type metadata accessor for PlaceholderViewSingle);
  }
  else
  {
    sub_10000DF30(a1, (uint64_t)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for DateTimeWidgetView);
    v18 = *(unsigned __int8 *)(v3 + 80);
    v19 = (v18 + 16) & ~v18;
    v20 = swift_allocObject(&unk_1000831A0, v19 + v4, v18 | 7);
    sub_1000106E0((uint64_t)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v20 + v19, type metadata accessor for DateTimeWidgetView);
    *v7 = sub_100066738;
    v7[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v20;
    swift_storeEnumTagMultiPayload(v7, v5, 1);
    v21 = sub_1000041D8(&qword_100087810);
    v22 = sub_10000D36C(&qword_100087480, type metadata accessor for PlaceholderViewSingle, (uint64_t)&unk_10006CE80);
    v23 = sub_10001DDB4(&qword_100087808, &qword_100087810, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
    return _ConditionalContent<>.init(storage:)(v7, v8, v21, v22, v23);
  }
}

uint64_t sub_100042FF8@<X0>(uint64_t a1@<X8>)
{
  return sub_100043004(type metadata accessor for DateTimeWidgetView, a1);
}

uint64_t sub_100043004@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;

  *(_BYTE *)a2 = 0;
  *(_QWORD *)(a2 + 8) = swift_getKeyPath(&unk_10006CB98);
  *(_BYTE *)(a2 + 16) = 0;
  v4 = (_QWORD *)(a2 + *(int *)(a1(0) + 24));
  *v4 = swift_getKeyPath(&unk_10006CBC0);
  v5 = sub_1000041D8(&qword_100085E28);
  return swift_storeEnumTagMultiPayload(v4, v5, 0);
}

uint64_t sub_100043074@<X0>(char a1@<W0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_100043080(a1, a2, a3, a4, type metadata accessor for DateTimeWidgetView, a5);
}

uint64_t sub_100043080@<X0>(char a1@<W0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t (*a5)(_QWORD)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;

  *(_BYTE *)a6 = a1;
  *(_QWORD *)(a6 + 8) = a2;
  *(_BYTE *)(a6 + 16) = a3 & 1;
  v8 = a5(0);
  return sub_10001DE5C(a4, a6 + *(int *)(v8 + 24), &qword_100085B10);
}

uint64_t sub_1000430D0@<X0>(uint64_t a1@<X8>)
{
  return sub_100044930(&qword_100086208, sub_100042D14, &qword_100086210, a1);
}

uint64_t sub_1000430EC()
{
  return swift_getKeyPath(&unk_10006CB98);
}

uint64_t sub_10004310C@<X0>(uint64_t a1@<X8>)
{
  return sub_100043C94((void (*)(_QWORD))type metadata accessor for NonNumericWidgetView, a1);
}

uint64_t sub_100043118@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v2 = v1;
  v4 = type metadata accessor for AccentedWidgetBackground(0);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_1000041D8(&qword_100086208);
  __chkstk_darwin(v7);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100043280(v2);
  if (qword_10008A620 != -1)
    swift_once(&qword_10008A620, sub_100041AD8);
  v10 = qword_10008BED0;
  *v6 = qword_10008BED0;
  v11 = (_QWORD *)((char *)v6 + *(int *)(v4 + 20));
  *v11 = swift_getKeyPath(&unk_10006CBC0);
  v12 = sub_1000041D8(&qword_100085E28);
  swift_storeEnumTagMultiPayload(v11, v12, 0);
  sub_10001DEA0((uint64_t)v9, a1, &qword_100086208);
  v13 = sub_1000041D8(&qword_100086210);
  sub_1000106E0((uint64_t)v6, a1 + *(int *)(v13 + 36), type metadata accessor for AccentedWidgetBackground);
  swift_retain(v10);
  return sub_1000106A4((uint64_t)v9, &qword_100086208);
}

uint64_t sub_100043280(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (**v7)@<X0>(uint64_t@<X8>);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = type metadata accessor for NonNumericWidgetView(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v5 = sub_1000041D8(&qword_100087B98);
  __chkstk_darwin(v5);
  v7 = (uint64_t (**)@<X0>(uint64_t@<X8>))((char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for PlaceholderViewSingle(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)a1 == 1)
  {
    v11 = *(_QWORD *)(a1 + 8);
    v12 = *(_BYTE *)(a1 + 16);
    sub_10002571C(v11, v12);
    v13 = sub_1000251D8(v11, v12);
    sub_100025728(v11, v12);
    sub_100025364(&qword_100085E28, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, (char *)0xD000000000000013, (char *)0x800000010006F430, (uint64_t)&v10[*(int *)(v8 + 24)]);
    *v10 = 1;
    v10[1] = v13 & 1;
    sub_10000DF30((uint64_t)v10, (uint64_t)v7, type metadata accessor for PlaceholderViewSingle);
    swift_storeEnumTagMultiPayload(v7, v5, 0);
    v14 = sub_1000041D8(&qword_100087810);
    v15 = sub_10000D36C(&qword_100087480, type metadata accessor for PlaceholderViewSingle, (uint64_t)&unk_10006CE80);
    v16 = sub_10001DDB4(&qword_100087808, &qword_100087810, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
    _ConditionalContent<>.init(storage:)(v7, v8, v14, v15, v16);
    return sub_10000D330((uint64_t)v10, type metadata accessor for PlaceholderViewSingle);
  }
  else
  {
    sub_10000DF30(a1, (uint64_t)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for NonNumericWidgetView);
    v18 = *(unsigned __int8 *)(v3 + 80);
    v19 = (v18 + 16) & ~v18;
    v20 = swift_allocObject(&unk_100083178, v19 + v4, v18 | 7);
    sub_1000106E0((uint64_t)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v20 + v19, type metadata accessor for NonNumericWidgetView);
    *v7 = sub_1000666C8;
    v7[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v20;
    swift_storeEnumTagMultiPayload(v7, v5, 1);
    v21 = sub_1000041D8(&qword_100087810);
    v22 = sub_10000D36C(&qword_100087480, type metadata accessor for PlaceholderViewSingle, (uint64_t)&unk_10006CE80);
    v23 = sub_10001DDB4(&qword_100087808, &qword_100087810, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
    return _ConditionalContent<>.init(storage:)(v7, v8, v21, v22, v23);
  }
}

uint64_t sub_100043564@<X0>(uint64_t a1@<X1>, void (*a2)(_QWORD)@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  double v26;
  uint64_t v27;
  char v28;
  char v29;
  double v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(_QWORD);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  __int128 v82;
  ValueMetadata *v83;
  _UNKNOWN **v84;

  v68 = a2;
  v81 = a3;
  v4 = sub_1000041D8(&qword_100085AC8);
  __chkstk_darwin(v4);
  v80 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ContentSizeCategory(0);
  v73 = *(_QWORD *)(v6 - 8);
  v74 = v6;
  __chkstk_darwin(v6);
  v72 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for WidgetRenderingMode(0);
  v70 = *(_QWORD *)(v8 - 8);
  v71 = v8;
  __chkstk_darwin(v8);
  v69 = (uint64_t)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for WorldClockCity(0);
  __chkstk_darwin(v10);
  v67 = (uint64_t)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (int *)type metadata accessor for SmallWorldClockView(0);
  __chkstk_darwin(v12);
  v14 = (uint64_t *)((char *)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v76 = sub_1000041D8(&qword_1000874F0);
  __chkstk_darwin(v76);
  v79 = (char *)&v66 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000041D8(&qword_100087BA0);
  v77 = *(_QWORD *)(v16 - 8);
  v78 = v16;
  __chkstk_darwin(v16);
  v75 = (char *)&v66 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1000041D8(&qword_100085E40);
  __chkstk_darwin(v18);
  v20 = (char *)&v66 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for Font.TextStyle(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = __chkstk_darwin(v21);
  v25 = (char *)&v66 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = GeometryProxy.size.getter(v23);
  v27 = *(_QWORD *)(a1 + 8);
  v28 = *(_BYTE *)(a1 + 16);
  sub_10002571C(v27, v28);
  v29 = sub_1000251D8(v27, v28);
  sub_100025728(v27, v28);
  if ((v29 & 1) != 0)
  {
    v30 = 0.8967;
  }
  else
  {
    if (qword_10008A610 != -1)
      swift_once(&qword_10008A610, sub_100039268);
    v30 = *(double *)&qword_10008BEC0;
  }
  v31 = v26 * v30;
  (*(void (**)(char *, _QWORD, uint64_t))(v22 + 104))(v25, enum case for Font.TextStyle.subheadline(_:), v21);
  v32 = enum case for Font.Design.rounded(_:);
  v33 = type metadata accessor for Font.Design(0);
  v34 = *(_QWORD *)(v33 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 104))(v20, v32, v33);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v20, 0, 1, v33);
  v35 = static Font.system(_:design:weight:)(v25, v20, 0, 1);
  sub_1000106A4((uint64_t)v20, &qword_100085E40);
  v36 = (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v25, v21);
  static Font.Weight.regular.getter(v36);
  v37 = Font.weight(_:)(v35);
  swift_release(v35);
  v38 = v67;
  sub_100004FA0(v67);
  v83 = &type metadata for SmallSizeDimentions;
  v84 = &off_1000826A8;
  v39 = swift_allocObject(&unk_100082618, 80, 7);
  *(_QWORD *)&v82 = v39;
  *(double *)(v39 + 16) = v31;
  *(_QWORD *)(v39 + 24) = v37;
  __asm { FMOV            V1.2D, #8.0 }
  *(_OWORD *)(v39 + 32) = xmmword_10006C9E0;
  *(_OWORD *)(v39 + 48) = _Q1;
  *(_OWORD *)(v39 + 64) = xmmword_10006C9F0;
  v45 = *(_QWORD *)(a1 + 8);
  LOBYTE(v33) = *(_BYTE *)(a1 + 16);
  swift_retain(v37);
  sub_10002571C(v45, v33);
  v46 = sub_1000251D8(v45, v33);
  sub_100025728(v45, v33);
  v68(0);
  v47 = v69;
  sub_100025364(&qword_100085E28, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, (char *)0xD000000000000013, (char *)0x800000010006F430, v69);
  *v14 = swift_getKeyPath(&unk_10006CBF0);
  v48 = sub_1000041D8(&qword_100085E48);
  swift_storeEnumTagMultiPayload(v14, v48, 0);
  sub_1000106E0(v38, (uint64_t)v14 + v12[5], type metadata accessor for WorldClockCity);
  sub_10003928C(&v82, (uint64_t)v14 + v12[6]);
  *((_BYTE *)v14 + v12[7]) = 0;
  *((_BYTE *)v14 + v12[8]) = 0;
  *((_BYTE *)v14 + v12[9]) = 1;
  *((_BYTE *)v14 + v12[10]) = 0;
  v49 = (char *)v14 + v12[11];
  v50 = type metadata accessor for ClockWidgetEnvironmentObject(0);
  v51 = sub_10000D36C((unint64_t *)&qword_100085240, type metadata accessor for ClockWidgetEnvironmentObject, (uint64_t)&unk_10006DF68);
  *(_QWORD *)v49 = Environment.init<A>(_:)(v50, v50, v51);
  v49[8] = v52 & 1;
  *((_BYTE *)v14 + v12[12]) = v46 & 1;
  (*(void (**)(char *, uint64_t, uint64_t))(v70 + 32))((char *)v14 + v12[13], v47, v71);
  v54 = (uint64_t)v72;
  v53 = v73;
  v55 = v74;
  (*(void (**)(char *, _QWORD, uint64_t))(v73 + 104))(v72, enum case for ContentSizeCategory.extraExtraExtraLarge(_:), v74);
  v56 = sub_10000D36C(&qword_100085F00, type metadata accessor for SmallWorldClockView, (uint64_t)&unk_10006CF20);
  v57 = (uint64_t)v79;
  sub_100022098(v54, (uint64_t)v12, v56);
  (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v54, v55);
  sub_10000D330((uint64_t)v14, type metadata accessor for SmallWorldClockView);
  v58 = objc_msgSend((id)objc_opt_self(MTUtilities), "widgetURL");
  if (v58)
  {
    v59 = v58;
    v60 = (uint64_t)v80;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v61 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v60, 0, 1, v61);
  }
  else
  {
    v62 = type metadata accessor for URL(0);
    v60 = (uint64_t)v80;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 56))(v80, 1, 1, v62);
  }
  v63 = sub_100062E54();
  v64 = v75;
  View.widgetURL(_:)(v60, v76, v63);
  swift_release(v37);
  sub_1000106A4(v60, &qword_100085AC8);
  sub_1000106A4(v57, &qword_1000874F0);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v77 + 32))(v81, v64, v78);
}

uint64_t sub_100043C1C@<X0>(uint64_t a1@<X8>)
{
  return sub_100043004(type metadata accessor for NonNumericWidgetView, a1);
}

uint64_t sub_100043C28@<X0>(char a1@<W0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_100043080(a1, a2, a3, a4, type metadata accessor for NonNumericWidgetView, a5);
}

uint64_t sub_100043C34()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_BYTE *)(v0 + 16);
  sub_10002571C(v1, v2);
  v3 = sub_1000251D8(v1, v2);
  sub_100025728(v1, v2);
  return v3 & 1;
}

uint64_t sub_100043C88@<X0>(uint64_t a1@<X8>)
{
  return sub_100043C94((void (*)(_QWORD))type metadata accessor for SquareWidgetView, a1);
}

uint64_t sub_100043C94@<X0>(void (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  a1(0);
  return sub_100025364(&qword_100085E28, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, (char *)0xD000000000000013, (char *)0x800000010006F430, a2);
}

uint64_t sub_100043CF4@<X0>(uint64_t a1@<X8>)
{
  return sub_100043D10(&qword_1000861F8, sub_100043E54, &qword_100086200, a1);
}

uint64_t sub_100043D10@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v8 = v4;
  v10 = type metadata accessor for AccentedWidgetBackground(0);
  __chkstk_darwin(v10);
  v12 = (uint64_t *)((char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = sub_1000041D8(a1);
  __chkstk_darwin(v13);
  v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a2(v8);
  *v12 = static Color.clear.getter(v16);
  v17 = (_QWORD *)((char *)v12 + *(int *)(v10 + 20));
  *v17 = swift_getKeyPath(&unk_10006CBC0);
  v18 = sub_1000041D8(&qword_100085E28);
  swift_storeEnumTagMultiPayload(v17, v18, 0);
  sub_10001DEA0((uint64_t)v15, a4, a1);
  v19 = sub_1000041D8(a3);
  sub_1000106E0((uint64_t)v12, a4 + *(int *)(v19 + 36), type metadata accessor for AccentedWidgetBackground);
  return sub_1000106A4((uint64_t)v15, a1);
}

uint64_t sub_100043E54(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (**v7)@<X0>(uint64_t@<X8>);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = type metadata accessor for SquareWidgetView(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v5 = sub_1000041D8(&qword_100087B68);
  __chkstk_darwin(v5);
  v7 = (uint64_t (**)@<X0>(uint64_t@<X8>))((char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for PlaceholderViewSingle(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)a1 == 1)
  {
    v11 = *(_QWORD *)(a1 + 8);
    v12 = *(_BYTE *)(a1 + 16);
    sub_10002571C(v11, v12);
    v13 = sub_1000251D8(v11, v12);
    sub_100025728(v11, v12);
    sub_100025364(&qword_100085E28, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, (char *)0xD000000000000013, (char *)0x800000010006F430, (uint64_t)&v10[*(int *)(v8 + 24)]);
    *v10 = 1;
    v10[1] = v13 & 1;
    sub_10000DF30((uint64_t)v10, (uint64_t)v7, type metadata accessor for PlaceholderViewSingle);
    swift_storeEnumTagMultiPayload(v7, v5, 0);
    v14 = sub_1000041D8(&qword_1000877E0);
    v15 = sub_10000D36C(&qword_100087480, type metadata accessor for PlaceholderViewSingle, (uint64_t)&unk_10006CE80);
    v16 = sub_10001DDB4(&qword_1000877D8, &qword_1000877E0, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
    _ConditionalContent<>.init(storage:)(v7, v8, v14, v15, v16);
    return sub_10000D330((uint64_t)v10, type metadata accessor for PlaceholderViewSingle);
  }
  else
  {
    sub_10000DF30(a1, (uint64_t)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for SquareWidgetView);
    v18 = *(unsigned __int8 *)(v3 + 80);
    v19 = (v18 + 16) & ~v18;
    v20 = swift_allocObject(&unk_100083150, v19 + v4, v18 | 7);
    sub_1000106E0((uint64_t)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v20 + v19, type metadata accessor for SquareWidgetView);
    *v7 = sub_10006655C;
    v7[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v20;
    swift_storeEnumTagMultiPayload(v7, v5, 1);
    v21 = sub_1000041D8(&qword_1000877E0);
    v22 = sub_10000D36C(&qword_100087480, type metadata accessor for PlaceholderViewSingle, (uint64_t)&unk_10006CE80);
    v23 = sub_10001DDB4(&qword_1000877D8, &qword_1000877E0, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
    return _ConditionalContent<>.init(storage:)(v7, v8, v21, v22, v23);
  }
}

uint64_t sub_100044138@<X0>(uint64_t a1@<X1>, void (*a2)(_QWORD)@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  double v24;
  uint64_t v25;
  char v26;
  char v27;
  double v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  double v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(_QWORD);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  __int128 v93;
  ValueMetadata *v94;
  _UNKNOWN **v95;

  v77 = a2;
  v92 = a3;
  v4 = sub_1000041D8(&qword_100085AC8);
  __chkstk_darwin(v4);
  v91 = (char *)&v75 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = type metadata accessor for ContentSizeCategory(0);
  v87 = *(_QWORD *)(v90 - 8);
  __chkstk_darwin(v90);
  v83 = (char *)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = type metadata accessor for WidgetRenderingMode(0);
  v79 = *(_QWORD *)(v80 - 8);
  __chkstk_darwin(v80);
  v78 = (uint64_t)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for WorldClockCity(0);
  __chkstk_darwin(v8);
  v76 = (uint64_t)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (int *)type metadata accessor for SmallWorldClockView(0);
  __chkstk_darwin(v10);
  v12 = (uint64_t *)((char *)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v81 = sub_1000041D8(&qword_100087B70);
  __chkstk_darwin(v81);
  v82 = (uint64_t)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = sub_1000041D8(&qword_100087B78);
  __chkstk_darwin(v85);
  v89 = (char *)&v75 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_1000041D8(&qword_100087B80);
  v86 = *(_QWORD *)(v88 - 8);
  __chkstk_darwin(v88);
  v84 = (char *)&v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000041D8(&qword_100085E40);
  __chkstk_darwin(v16);
  v18 = (char *)&v75 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for Font.TextStyle(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v75 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = GeometryProxy.size.getter(v21);
  v25 = *(_QWORD *)(a1 + 8);
  v26 = *(_BYTE *)(a1 + 16);
  sub_10002571C(v25, v26);
  v27 = sub_1000251D8(v25, v26);
  sub_100025728(v25, v26);
  if ((v27 & 1) != 0)
  {
    v28 = 0.8967;
  }
  else
  {
    if (qword_10008A610 != -1)
      swift_once(&qword_10008A610, sub_100039268);
    v28 = *(double *)&qword_10008BEC0;
  }
  v29 = v24 * v28;
  (*(void (**)(char *, _QWORD, uint64_t))(v20 + 104))(v23, enum case for Font.TextStyle.subheadline(_:), v19);
  v30 = enum case for Font.Design.rounded(_:);
  v31 = type metadata accessor for Font.Design(0);
  v32 = *(_QWORD *)(v31 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 104))(v18, v30, v31);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v18, 0, 1, v31);
  v33 = static Font.system(_:design:weight:)(v23, v18, 0, 1);
  sub_1000106A4((uint64_t)v18, &qword_100085E40);
  v34 = (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v23, v19);
  static Font.Weight.regular.getter(v34);
  v35 = Font.weight(_:)(v33);
  swift_release(v33);
  v36 = v76;
  sub_100004FA0(v76);
  v94 = &type metadata for SmallSizeDimentions;
  v95 = &off_1000826A8;
  v37 = swift_allocObject(&unk_100082618, 80, 7);
  *(_QWORD *)&v93 = v37;
  *(double *)(v37 + 16) = v29;
  *(_QWORD *)(v37 + 24) = v35;
  __asm { FMOV            V1.2D, #8.0 }
  *(_OWORD *)(v37 + 32) = xmmword_10006C9E0;
  *(_OWORD *)(v37 + 48) = _Q1;
  *(_OWORD *)(v37 + 64) = xmmword_10006C9F0;
  v43 = *(_QWORD *)(a1 + 8);
  v44 = *(_BYTE *)(a1 + 16);
  swift_retain(v35);
  sub_10002571C(v43, v44);
  v45 = sub_1000251D8(v43, v44);
  sub_100025728(v43, v44);
  v77(0);
  v46 = v78;
  sub_100025364(&qword_100085E28, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, (char *)0xD000000000000013, (char *)0x800000010006F430, v78);
  *v12 = swift_getKeyPath(&unk_10006CBF0);
  v47 = sub_1000041D8(&qword_100085E48);
  swift_storeEnumTagMultiPayload(v12, v47, 0);
  sub_1000106E0(v36, (uint64_t)v12 + v10[5], type metadata accessor for WorldClockCity);
  sub_10003928C(&v93, (uint64_t)v12 + v10[6]);
  *((_BYTE *)v12 + v10[7]) = 0;
  *((_BYTE *)v12 + v10[8]) = 0;
  *((_BYTE *)v12 + v10[9]) = 1;
  *((_BYTE *)v12 + v10[10]) = 0;
  v48 = (char *)v12 + v10[11];
  v49 = type metadata accessor for ClockWidgetEnvironmentObject(0);
  v50 = sub_10000D36C((unint64_t *)&qword_100085240, type metadata accessor for ClockWidgetEnvironmentObject, (uint64_t)&unk_10006DF68);
  *(_QWORD *)v48 = Environment.init<A>(_:)(v49, v49, v50);
  v48[8] = v51 & 1;
  *((_BYTE *)v12 + v10[12]) = v45 & 1;
  (*(void (**)(char *, uint64_t, uint64_t))(v79 + 32))((char *)v12 + v10[13], v46, v80);
  v52 = *(_QWORD *)(a1 + 8);
  v53 = *(_BYTE *)(a1 + 16);
  sub_10002571C(v52, v53);
  LOBYTE(v46) = sub_1000251D8(v52, v53);
  v54 = sub_100025728(v52, v53);
  if ((v46 & 1) != 0)
    v55 = 1.13;
  else
    v55 = 1.0;
  v56 = static UnitPoint.center.getter(v54);
  v58 = v57;
  v59 = v82;
  sub_10000DF30((uint64_t)v12, v82, type metadata accessor for SmallWorldClockView);
  v60 = v81;
  v61 = v59 + *(int *)(v81 + 36);
  *(double *)v61 = v55;
  *(double *)(v61 + 8) = v55;
  *(double *)(v61 + 16) = v56;
  *(_QWORD *)(v61 + 24) = v58;
  sub_10000D330((uint64_t)v12, type metadata accessor for SmallWorldClockView);
  v62 = v87;
  v63 = (uint64_t)v83;
  v64 = v90;
  (*(void (**)(char *, _QWORD, uint64_t))(v87 + 104))(v83, enum case for ContentSizeCategory.extraExtraExtraLarge(_:), v90);
  v65 = sub_100067350(&qword_100087B88, &qword_100087B70);
  v66 = (uint64_t)v89;
  sub_100022098(v63, v60, v65);
  (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v63, v64);
  sub_1000106A4(v59, &qword_100087B70);
  v67 = objc_msgSend((id)objc_opt_self(MTUtilities), "widgetURL");
  if (v67)
  {
    v68 = v67;
    v69 = (uint64_t)v91;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v70 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 56))(v69, 0, 1, v70);
  }
  else
  {
    v71 = type metadata accessor for URL(0);
    v69 = (uint64_t)v91;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 56))(v91, 1, 1, v71);
  }
  v72 = sub_100066568();
  v73 = v84;
  View.widgetURL(_:)(v69, v85, v72);
  swift_release(v35);
  sub_1000106A4(v69, &qword_100085AC8);
  sub_1000106A4(v66, &qword_100087B78);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v86 + 32))(v92, v73, v88);
}

uint64_t sub_1000448FC@<X0>(uint64_t a1@<X8>)
{
  return sub_100043004(type metadata accessor for SquareWidgetView, a1);
}

uint64_t sub_100044908@<X0>(char a1@<W0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_100043080(a1, a2, a3, a4, type metadata accessor for SquareWidgetView, a5);
}

uint64_t sub_100044914@<X0>(uint64_t a1@<X8>)
{
  return sub_100044930(&qword_1000861F8, sub_100043E54, &qword_100086200, a1);
}

uint64_t sub_100044930@<X0>(uint64_t *a1@<X2>, uint64_t (*a2)(uint64_t)@<X3>, uint64_t *a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v8 = v4;
  v10 = type metadata accessor for AccentedWidgetBackground(0);
  __chkstk_darwin(v10);
  v12 = (uint64_t *)((char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = sub_1000041D8(a1);
  __chkstk_darwin(v13);
  v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a2(v8);
  *v12 = static Color.clear.getter(v16);
  v17 = (_QWORD *)((char *)v12 + *(int *)(v10 + 20));
  *v17 = swift_getKeyPath(&unk_10006CBC0);
  v18 = sub_1000041D8(&qword_100085E28);
  swift_storeEnumTagMultiPayload(v17, v18, 0);
  sub_10001DEA0((uint64_t)v15, a4, a1);
  v19 = sub_1000041D8(a3);
  sub_1000106E0((uint64_t)v12, a4 + *(int *)(v19 + 36), type metadata accessor for AccentedWidgetBackground);
  return sub_1000106A4((uint64_t)v15, a1);
}

uint64_t sub_100044A74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(__int128 *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v19;

  v0 = type metadata accessor for GridItem.Size(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (__int128 *)((char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = sub_1000041D8(&qword_100086218);
  v5 = type metadata accessor for GridItem(0);
  v6 = swift_allocObject(v4, ((*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80))+ 3 * *(_QWORD *)(*(_QWORD *)(v5 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80) | 7);
  *(_OWORD *)(v6 + 16) = xmmword_10006B760;
  v19 = xmmword_10006CAA0;
  *v3 = xmmword_10006CAA0;
  v7 = enum case for GridItem.Size.flexible(_:);
  v8 = *(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v1 + 104);
  v9 = v8(v3, enum case for GridItem.Size.flexible(_:), v0);
  v10 = static Alignment.bottomLeading.getter(v9);
  GridItem.init(_:spacing:alignment:)(v3, 0, 0, v10, v11, 0);
  *v3 = v19;
  v12 = v8(v3, v7, v0);
  v13 = static Alignment.bottomLeading.getter(v12);
  GridItem.init(_:spacing:alignment:)(v3, 0, 0, v13, v14, 0);
  *v3 = v19;
  v15 = v8(v3, v7, v0);
  v16 = static Alignment.bottomLeading.getter(v15);
  GridItem.init(_:spacing:alignment:)(v3, 0, 0, v16, v17, 0);
  return v6;
}

uint64_t sub_100044C1C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for WorldClockRectangularSummary(0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + *(int *)(v1 + 20)));
}

uint64_t sub_100044C3C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t OpaqueTypeConformance2;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[16];
  uint64_t v33;
  _BYTE v34[16];
  uint64_t v35;
  _QWORD v36[4];

  v2 = v1;
  v30 = a1;
  v31 = type metadata accessor for AccessibilityChildBehavior(0);
  v29 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PinnedScrollableViews(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000041D8(&qword_100086220);
  v27 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000041D8(&qword_100086228);
  v28 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v2 + *(int *)(type metadata accessor for WorldClockRectangularSummary(0) + 20));
  v35 = v2;
  v15 = swift_bridgeObjectRetain(v14);
  v16 = static HorizontalAlignment.center.getter(v15);
  LODWORD(v36[0]) = 0;
  v17 = sub_10000D36C(&qword_100086230, (uint64_t (*)(uint64_t))&type metadata accessor for PinnedScrollableViews, (uint64_t)&protocol conformance descriptor for PinnedScrollableViews);
  dispatch thunk of OptionSet.init(rawValue:)(v36, v5, v17);
  v18 = sub_1000041D8(&qword_100086238);
  v19 = sub_100050F84();
  LazyVGrid.init(columns:alignment:spacing:pinnedViews:content:)(v14, v16, 0, 1, v7, sub_100050F7C, v34, v18, v19);
  v33 = v2;
  v20 = sub_1000041D8(&qword_100086258);
  v21 = sub_10001DDB4(&qword_100086260, &qword_100086220, (uint64_t)&protocol conformance descriptor for LazyVGrid<A>);
  v22 = sub_10001DDB4(&qword_100086268, &qword_100086258, (uint64_t)&protocol conformance descriptor for Grid<A>);
  View.accessibilityRepresentation<A>(representation:)(sub_100051000, v32, v8, v20, v21, v22);
  v23 = (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v10, v8);
  static AccessibilityChildBehavior.combine.getter(v23);
  v36[0] = v8;
  v36[1] = v20;
  v36[2] = v21;
  v36[3] = v22;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v36, &opaque type descriptor for <<opaque return type of View.accessibilityRepresentation<A>(representation:)>>, 1);
  View.accessibilityElement(children:)(v4, v11, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v4, v31);
  return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v13, v11);
}

uint64_t sub_100044F0C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v14;

  v2 = type metadata accessor for WorldClockRectangularSummary(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v14 = xmmword_10006CAB0;
  KeyPath = swift_getKeyPath(&unk_10006DF20);
  sub_10000DF30(a1, (uint64_t)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for WorldClockRectangularSummary);
  v6 = *(unsigned __int8 *)(v3 + 80);
  v7 = (v6 + 16) & ~v6;
  v8 = swift_allocObject(&unk_100083128, v7 + v4, v6 | 7);
  sub_1000106E0((uint64_t)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v8 + v7, type metadata accessor for WorldClockRectangularSummary);
  v9 = sub_1000041D8(&qword_100087AB8);
  v10 = sub_1000041D8(&qword_100086250);
  v11 = sub_100066290();
  v12 = sub_10001DDB4(&qword_100086248, &qword_100086250, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  return ForEach<>.init(_:id:content:)(&v14, KeyPath, sub_100066464, v8, v9, v10, v11, &protocol witness table for Int, v12);
}

uint64_t sub_100045064@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t KeyPath;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  char *v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  char *v179;
  char *v180;
  char *v181;
  char *v182;
  char *v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;

  v184 = a2;
  v178 = a3;
  v4 = sub_1000041D8(&qword_100087B20);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v154 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v154 - v8;
  v175 = type metadata accessor for Color.RGBColorSpace(0);
  v173 = *(_QWORD *)(v175 - 8);
  __chkstk_darwin(v175);
  v174 = (char *)&v154 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v160 = sub_1000041D8(&qword_1000878B8);
  __chkstk_darwin(v160);
  v169 = (uint64_t *)((char *)&v154 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v168 = type metadata accessor for Locale(0);
  v165 = *(_QWORD *)(v168 - 8);
  __chkstk_darwin(v168);
  v163 = (char *)&v154 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000041D8(&qword_100084848);
  __chkstk_darwin(v13);
  v156 = (uint64_t)&v154 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v157 = sub_1000041D8(&qword_1000878C0);
  __chkstk_darwin(v157);
  v162 = (char *)&v154 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v158 = sub_1000041D8(&qword_100087AE0);
  __chkstk_darwin(v158);
  v164 = (uint64_t)&v154 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v159 = sub_1000041D8(&qword_100087B28);
  __chkstk_darwin(v159);
  v166 = (uint64_t)&v154 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v161 = sub_1000041D8(&qword_100087B30);
  __chkstk_darwin(v161);
  v171 = (uint64_t)&v154 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v167 = sub_1000041D8(&qword_100087B38);
  __chkstk_darwin(v167);
  v172 = (uint64_t)&v154 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v170 = sub_1000041D8(&qword_100087B40);
  v20 = __chkstk_darwin(v170);
  v22 = (char *)&v154 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v24 = (char *)&v154 - v23;
  v25 = sub_1000041D8(&qword_100087B48);
  v26 = __chkstk_darwin(v25);
  v28 = (char *)&v154 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v30 = (char *)&v154 - v29;
  v31 = type metadata accessor for WorldClockCity(0);
  v32 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v34 = (char *)&v154 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = *a1;
  v36 = type metadata accessor for WorldClockEntry(0);
  v179 = v7;
  v177 = v9;
  v182 = v22;
  v176 = v28;
  v180 = v30;
  v181 = v24;
  if (v35 < 0 || (v37 = *(_QWORD *)(v184 + *(int *)(v36 + 20)), v35 >= *(_QWORD *)(v37 + 16)))
    sub_100004FA0((uint64_t)v34);
  else
    sub_10000DF30(v37+ ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80))+ *(_QWORD *)(v32 + 72) * v35, (uint64_t)v34, type metadata accessor for WorldClockCity);
  v155 = v31;
  v38 = &v34[*(int *)(v31 + 28)];
  v39 = *((_QWORD *)v38 + 1);
  v187 = *(_QWORD *)v38;
  v188 = v39;
  v40 = sub_10000D9FC();
  v184 = v40;
  swift_bridgeObjectRetain(v39);
  v41 = Text.init<A>(_:)(&v187, &type metadata for String, v40);
  v43 = v42;
  v45 = v44;
  v47 = v46 & 1;
  v48 = static Font.headline.getter(v41);
  v49 = Text.font(_:)(v48, v41, v43, v47, v45);
  v51 = v50;
  v53 = v52;
  v183 = v34;
  v55 = v54;
  swift_release(v48);
  LOBYTE(v48) = v53 & 1;
  sub_100010E24(v41, v43, v47);
  swift_bridgeObjectRelease(v45);
  v56 = Text.bold()(v49, v51, v53 & 1, v55);
  v58 = v57;
  v60 = v59;
  v62 = v61 & 1;
  sub_100010E24(v49, v51, v48);
  v63 = swift_bridgeObjectRelease(v55);
  v64 = static Color.white.getter(v63);
  v65 = Text.foregroundColor(_:)(v64, v56, v58, v62, v60);
  v67 = v66;
  LOBYTE(v48) = v68;
  v70 = v69;
  swift_release(v64);
  LOBYTE(v64) = v48 & 1;
  sub_100010E24(v56, v58, v62);
  swift_bridgeObjectRelease(v60);
  KeyPath = swift_getKeyPath(&unk_10006CD10);
  v72 = swift_getKeyPath(&unk_10006CC80);
  v187 = v65;
  v188 = v67;
  v189 = v64;
  v190 = v70;
  v191 = KeyPath;
  v192 = 1;
  LOBYTE(v193) = 0;
  v194 = v72;
  v195 = 0x3FE3333333333333;
  v73 = &v183[*(int *)(v155 + 24)];
  v75 = *(_QWORD *)v73;
  v74 = *((_QWORD *)v73 + 1);
  v185 = v75;
  v186 = v74;
  v76 = sub_1000041D8(&qword_100087A20);
  v77 = sub_100065A60();
  View.accessibilityLabel<A>(_:)(&v185, v76, &type metadata for String, v77, v184);
  sub_100010E24(v65, v67, v64);
  swift_release(v72);
  swift_release(KeyPath);
  swift_bridgeObjectRelease(v70);
  v78 = v156;
  sub_100008130(v156);
  v79 = type metadata accessor for TimeZone(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 56))(v78, 0, 1, v79);
  v80 = Text.init(dateFormatTemplate:timeZone:)(7171402, 0xE300000000000000, v78);
  v82 = v81;
  v84 = v83;
  LOBYTE(v67) = v85 & 1;
  v86 = swift_getKeyPath(&unk_10006DEE8);
  v87 = v163;
  static Locale.autoupdatingCurrent.getter();
  v88 = v169;
  v89 = v165;
  v90 = v168;
  (*(void (**)(char *, char *, uint64_t))(v165 + 16))((char *)v169 + *(int *)(v160 + 28), v87, v168);
  *v88 = v86;
  v91 = (uint64_t)v162;
  sub_10001DEA0((uint64_t)v88, (uint64_t)&v162[*(int *)(v157 + 36)], &qword_1000878B8);
  *(_QWORD *)v91 = v80;
  *(_QWORD *)(v91 + 8) = v82;
  *(_BYTE *)(v91 + 16) = v67;
  *(_QWORD *)(v91 + 24) = v84;
  sub_1000511D8(v80, v82, v67);
  swift_bridgeObjectRetain(v84);
  sub_1000106A4((uint64_t)v88, &qword_1000878B8);
  (*(void (**)(char *, uint64_t))(v89 + 8))(v87, v90);
  sub_100010E24(v80, v82, v67);
  v92 = swift_bridgeObjectRelease(v84);
  v93 = static Font.body.getter(v92);
  v94 = swift_getKeyPath(&unk_10006CC20);
  v95 = v164;
  sub_10001DEA0(v91, v164, &qword_1000878C0);
  v96 = (uint64_t *)(v95 + *(int *)(v158 + 36));
  *v96 = v94;
  v96[1] = v93;
  sub_1000106A4(v91, &qword_1000878C0);
  v97 = swift_getKeyPath(&unk_10006CD10);
  v98 = v166;
  sub_10001DEA0(v95, v166, &qword_100087AE0);
  v99 = v98 + *(int *)(v159 + 36);
  *(_QWORD *)v99 = v97;
  *(_QWORD *)(v99 + 8) = 1;
  *(_BYTE *)(v99 + 16) = 0;
  v100 = sub_1000106A4(v95, &qword_100087AE0);
  v101 = static Color.white.getter(v100);
  v102 = swift_getKeyPath(&unk_10006CC50);
  v103 = v171;
  sub_10001DEA0(v98, v171, &qword_100087B28);
  v104 = (uint64_t *)(v103 + *(int *)(v161 + 36));
  *v104 = v102;
  v104[1] = v101;
  sub_1000106A4(v98, &qword_100087B28);
  v105 = v174;
  (*(void (**)(char *, _QWORD, uint64_t))(v173 + 104))(v174, enum case for Color.RGBColorSpace.sRGBLinear(_:), v175);
  v106 = Color.init(_:white:opacity:)(v105, 0.0, 0.33);
  v107 = v172;
  sub_10001DEA0(v103, v172, &qword_100087B30);
  v108 = (uint64_t *)(v107 + *(int *)(v167 + 36));
  *v108 = v106;
  v108[1] = 0x3FF0000000000000;
  v108[2] = 0;
  v108[3] = 0;
  sub_1000106A4(v103, &qword_100087B30);
  v109 = swift_getKeyPath(&unk_10006CCE0);
  v110 = (uint64_t)v182;
  sub_10001DEA0(v107, (uint64_t)v182, &qword_100087B38);
  v111 = v110 + *(int *)(v170 + 36);
  *(_QWORD *)v111 = v109;
  *(_BYTE *)(v111 + 8) = 1;
  sub_1000106A4(v107, &qword_100087B38);
  sub_10001DE5C(v110, (uint64_t)v181, &qword_100087B40);
  sub_100008208(1);
  v187 = v112;
  v188 = v113;
  v114 = Text.init<A>(_:)(&v187, &type metadata for String, v184);
  v116 = v115;
  v118 = v117;
  v120 = v119 & 1;
  v121 = static Font.body.getter(v114);
  v122 = Text.font(_:)(v121, v114, v116, v120, v118);
  v124 = v123;
  LOBYTE(v87) = v125;
  v127 = v126;
  swift_release(v121);
  v128 = v87 & 1;
  sub_100010E24(v114, v116, v120);
  v129 = swift_bridgeObjectRelease(v118);
  v130 = static Color.white.getter(v129);
  v131 = Text.foregroundColor(_:)(v130, v122, v124, v128, v127);
  v133 = v132;
  LOBYTE(v121) = v134;
  v136 = v135;
  swift_release(v130);
  LOBYTE(v121) = v121 & 1;
  sub_100010E24(v122, v124, v128);
  swift_bridgeObjectRelease(v127);
  v137 = swift_getKeyPath(&unk_10006CC80);
  v138 = swift_getKeyPath(&unk_10006CD10);
  v187 = v131;
  v188 = v133;
  v189 = v121;
  v190 = v136;
  v191 = v137;
  v192 = 0x3FE3333333333333;
  v193 = v138;
  v194 = 1;
  LOBYTE(v195) = 0;
  v139 = sub_10000422C();
  sub_100008208(v139 & 1);
  v141 = v140;
  v185 = v142;
  v186 = v140;
  v143 = sub_1000041D8(&qword_100087B50);
  v144 = sub_1000664CC();
  v145 = (uint64_t)v177;
  View.accessibilityLabel<A>(_:)(&v185, v143, &type metadata for String, v144, v184);
  swift_bridgeObjectRelease(v141);
  sub_100010E24(v131, v133, v121);
  swift_release(v138);
  swift_release(v137);
  swift_bridgeObjectRelease(v136);
  v146 = (uint64_t)v180;
  v147 = (uint64_t)v176;
  sub_10001DEA0((uint64_t)v180, (uint64_t)v176, &qword_100087B48);
  v148 = (uint64_t)v181;
  v149 = (uint64_t)v182;
  sub_10001DEA0((uint64_t)v181, (uint64_t)v182, &qword_100087B40);
  v150 = (uint64_t)v179;
  sub_10001DEA0(v145, (uint64_t)v179, &qword_100087B20);
  v151 = v178;
  sub_10001DEA0(v147, v178, &qword_100087B48);
  v152 = sub_1000041D8(&qword_100087B60);
  sub_10001DEA0(v149, v151 + *(int *)(v152 + 48), &qword_100087B40);
  sub_10001DEA0(v150, v151 + *(int *)(v152 + 64), &qword_100087B20);
  sub_1000106A4(v145, &qword_100087B20);
  sub_1000106A4(v148, &qword_100087B40);
  sub_1000106A4(v146, &qword_100087B48);
  sub_10000D330((uint64_t)v183, type metadata accessor for WorldClockCity);
  sub_1000106A4(v150, &qword_100087B20);
  sub_1000106A4(v149, &qword_100087B40);
  return sub_1000106A4(v147, &qword_100087B48);
}

uint64_t sub_100045CC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v18;

  v4 = type metadata accessor for WorldClockRectangularSummary(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = __chkstk_darwin(v4);
  *(_QWORD *)a2 = static Alignment.center.getter(v7);
  *(_QWORD *)(a2 + 8) = v8;
  *(_QWORD *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 24) = 1;
  *(_QWORD *)(a2 + 32) = 0;
  *(_BYTE *)(a2 + 40) = 1;
  sub_1000041D8(&qword_100087AB0);
  v18 = xmmword_10006CAB0;
  KeyPath = swift_getKeyPath(&unk_10006DF20);
  sub_10000DF30(a1, (uint64_t)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for WorldClockRectangularSummary);
  v10 = *(unsigned __int8 *)(v5 + 80);
  v11 = (v10 + 16) & ~v10;
  v12 = swift_allocObject(&unk_100083100, v11 + v6, v10 | 7);
  sub_1000106E0((uint64_t)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v12 + v11, type metadata accessor for WorldClockRectangularSummary);
  v13 = sub_1000041D8(&qword_100087AB8);
  v14 = sub_1000041D8(&qword_100087AC0);
  v15 = sub_100066290();
  v16 = sub_10001DDB4(&qword_100087AD8, &qword_100087AC0, (uint64_t)&protocol conformance descriptor for GridRow<A>);
  return ForEach<>.init(_:id:content:)(&v18, KeyPath, sub_100066284, v12, v13, v14, v15, &protocol witness table for Int, v16);
}

uint64_t sub_100045E50@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v6 = type metadata accessor for WorldClockCity(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a1;
  v11 = type metadata accessor for WorldClockEntry(0);
  if (v10 < 0 || (v12 = *(_QWORD *)(a2 + *(int *)(v11 + 20)), v10 >= *(_QWORD *)(v12 + 16)))
    sub_100004FA0((uint64_t)v9);
  else
    sub_10000DF30(v12+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v10, (uint64_t)v9, type metadata accessor for WorldClockCity);
  *(_QWORD *)a3 = 0;
  *(_BYTE *)(a3 + 8) = 1;
  v13 = sub_1000041D8(&qword_100087AC0);
  sub_100045F4C((uint64_t)v9, a3 + *(int *)(v13 + 36));
  return sub_10000D330((uint64_t)v9, type metadata accessor for WorldClockCity);
}

uint64_t sub_100045F4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t KeyPath;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  char *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;

  v154 = a2;
  v155 = a1;
  v151 = type metadata accessor for Color.RGBColorSpace(0);
  v150 = *(_QWORD *)(v151 - 8);
  __chkstk_darwin(v151);
  v148 = (char *)&v130 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = sub_1000041D8(&qword_1000878B8);
  __chkstk_darwin(v142);
  v140 = (uint64_t *)((char *)&v130 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v139 = type metadata accessor for Locale(0);
  v137 = *(_QWORD *)(v139 - 8);
  __chkstk_darwin(v139);
  v136 = (char *)&v130 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000041D8(&qword_100084848);
  __chkstk_darwin(v6);
  v131 = (uint64_t)&v130 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = sub_1000041D8(&qword_1000878C0);
  __chkstk_darwin(v135);
  v132 = (char *)&v130 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = sub_1000041D8(&qword_100087AE0);
  __chkstk_darwin(v143);
  v138 = (uint64_t)&v130 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = sub_1000041D8(&qword_100087AE8);
  __chkstk_darwin(v144);
  v141 = (uint64_t)&v130 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v146 = sub_1000041D8(&qword_100087AF0);
  __chkstk_darwin(v146);
  v145 = (uint64_t)&v130 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v147 = sub_1000041D8(&qword_100087AF8);
  v12 = __chkstk_darwin(v147);
  v156 = (uint64_t)&v130 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v158 = (uint64_t)&v130 - v14;
  v15 = sub_1000041D8(&qword_100087B00);
  v16 = __chkstk_darwin(v15);
  v153 = (uint64_t)&v130 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v152 = (uint64_t)&v130 - v19;
  v20 = __chkstk_darwin(v18);
  v149 = (char *)&v130 - v21;
  __chkstk_darwin(v20);
  v157 = (uint64_t)&v130 - v22;
  v134 = type metadata accessor for WorldClockCity(0);
  v23 = (uint64_t *)(a1 + *(int *)(v134 + 28));
  v24 = v23[1];
  v162 = *v23;
  v163 = v24;
  v25 = sub_10000D9FC();
  v159 = v25;
  swift_bridgeObjectRetain(v24);
  v26 = Text.init<A>(_:)(&v162, &type metadata for String, v25);
  v28 = v27;
  v30 = v29;
  v32 = v31 & 1;
  v33 = static Font.headline.getter(v26);
  v34 = Text.font(_:)(v33, v26, v28, v32, v30);
  v36 = v35;
  v38 = v37;
  v40 = v39;
  swift_release(v33);
  LOBYTE(v33) = v38 & 1;
  sub_100010E24(v26, v28, v32);
  swift_bridgeObjectRelease(v30);
  v41 = Text.bold()(v34, v36, v38 & 1, v40);
  v43 = v42;
  v45 = v44;
  v47 = v46 & 1;
  sub_100010E24(v34, v36, v33);
  v48 = swift_bridgeObjectRelease(v40);
  v49 = static Color.white.getter(v48);
  v50 = Text.foregroundColor(_:)(v49, v41, v43, v47, v45);
  v52 = v51;
  LOBYTE(v34) = v53;
  v55 = v54;
  swift_release(v49);
  LOBYTE(v34) = v34 & 1;
  sub_100010E24(v41, v43, v47);
  swift_bridgeObjectRelease(v45);
  KeyPath = swift_getKeyPath(&unk_10006CC80);
  v162 = v50;
  v163 = v52;
  v164 = v34;
  v165 = v55;
  v166 = KeyPath;
  v167 = 0x3FE3333333333333;
  v57 = (uint64_t *)(v155 + *(int *)(v134 + 24));
  v59 = *v57;
  v58 = v57[1];
  v160 = v59;
  v161 = v58;
  v60 = sub_1000041D8(&qword_100087B08);
  v134 = v60;
  v133 = sub_100066340();
  View.accessibilityLabel<A>(_:)(&v160, v60, &type metadata for String, v133, v159);
  sub_100010E24(v50, v52, v34);
  swift_release(KeyPath);
  swift_bridgeObjectRelease(v55);
  v61 = v131;
  sub_100008130(v131);
  v62 = type metadata accessor for TimeZone(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 56))(v61, 0, 1, v62);
  v63 = Text.init(dateFormatTemplate:timeZone:)(7171402, 0xE300000000000000, v61);
  v65 = v64;
  v67 = v66;
  LOBYTE(v61) = v68 & 1;
  v69 = swift_getKeyPath(&unk_10006DEE8);
  v70 = v136;
  static Locale.autoupdatingCurrent.getter();
  v71 = v140;
  v72 = v137;
  v73 = v139;
  (*(void (**)(char *, char *, uint64_t))(v137 + 16))((char *)v140 + *(int *)(v142 + 28), v70, v139);
  *v71 = v69;
  v74 = (uint64_t)v132;
  sub_10001DEA0((uint64_t)v71, (uint64_t)&v132[*(int *)(v135 + 36)], &qword_1000878B8);
  *(_QWORD *)v74 = v63;
  *(_QWORD *)(v74 + 8) = v65;
  *(_BYTE *)(v74 + 16) = v61;
  *(_QWORD *)(v74 + 24) = v67;
  sub_1000511D8(v63, v65, v61);
  swift_bridgeObjectRetain(v67);
  sub_1000106A4((uint64_t)v71, &qword_1000878B8);
  (*(void (**)(char *, uint64_t))(v72 + 8))(v70, v73);
  sub_100010E24(v63, v65, v61);
  v75 = swift_bridgeObjectRelease(v67);
  v76 = static Font.body.getter(v75);
  v77 = swift_getKeyPath(&unk_10006CC20);
  v78 = v138;
  sub_10001DEA0(v74, v138, &qword_1000878C0);
  v79 = (uint64_t *)(v78 + *(int *)(v143 + 36));
  *v79 = v77;
  v79[1] = v76;
  v80 = sub_1000106A4(v74, &qword_1000878C0);
  v81 = static Color.white.getter(v80);
  v82 = swift_getKeyPath(&unk_10006CC50);
  v83 = v141;
  sub_10001DEA0(v78, v141, &qword_100087AE0);
  v84 = (uint64_t *)(v83 + *(int *)(v144 + 36));
  *v84 = v82;
  v84[1] = v81;
  sub_1000106A4(v78, &qword_100087AE0);
  v85 = v148;
  (*(void (**)(char *, _QWORD, uint64_t))(v150 + 104))(v148, enum case for Color.RGBColorSpace.sRGBLinear(_:), v151);
  v86 = Color.init(_:white:opacity:)(v85, 0.0, 0.33);
  v87 = v145;
  sub_10001DEA0(v83, v145, &qword_100087AE8);
  v88 = (uint64_t *)(v87 + *(int *)(v146 + 36));
  *v88 = v86;
  v88[1] = 0x3FF0000000000000;
  v88[2] = 0;
  v88[3] = 0;
  sub_1000106A4(v83, &qword_100087AE8);
  v89 = swift_getKeyPath(&unk_10006CCE0);
  v90 = v156;
  sub_10001DEA0(v87, v156, &qword_100087AF0);
  v91 = v90 + *(int *)(v147 + 36);
  *(_QWORD *)v91 = v89;
  *(_BYTE *)(v91 + 8) = 1;
  sub_1000106A4(v87, &qword_100087AF0);
  sub_10001DE5C(v90, v158, &qword_100087AF8);
  sub_100008208(1);
  v162 = v92;
  v163 = v93;
  v94 = Text.init<A>(_:)(&v162, &type metadata for String, v159);
  v96 = v95;
  v98 = v97;
  v100 = v99 & 1;
  v101 = static Font.body.getter(v94);
  v102 = Text.font(_:)(v101, v94, v96, v100, v98);
  v104 = v103;
  LOBYTE(v78) = v105;
  v107 = v106;
  swift_release(v101);
  LOBYTE(v101) = v78 & 1;
  sub_100010E24(v94, v96, v100);
  v108 = swift_bridgeObjectRelease(v98);
  v109 = static Color.white.getter(v108);
  v110 = Text.foregroundColor(_:)(v109, v102, v104, v78 & 1, v107);
  v112 = v111;
  LOBYTE(v78) = v113;
  v115 = v114;
  swift_release(v109);
  LOBYTE(v78) = v78 & 1;
  sub_100010E24(v102, v104, v101);
  swift_bridgeObjectRelease(v107);
  v116 = swift_getKeyPath(&unk_10006CC80);
  v162 = v110;
  v163 = v112;
  v164 = v78;
  v165 = v115;
  v166 = v116;
  v167 = 0x3FE3333333333333;
  v117 = sub_10000422C();
  sub_100008208(v117 & 1);
  v119 = v118;
  v160 = v120;
  v161 = v118;
  v121 = (uint64_t)v149;
  View.accessibilityLabel<A>(_:)(&v160, v134, &type metadata for String, v133, v159);
  swift_bridgeObjectRelease(v119);
  sub_100010E24(v110, v112, v78);
  swift_release(v116);
  swift_bridgeObjectRelease(v115);
  v122 = v157;
  v123 = v152;
  sub_10001DEA0(v157, v152, &qword_100087B00);
  v124 = v158;
  v125 = v156;
  sub_10001DEA0(v158, v156, &qword_100087AF8);
  v126 = v153;
  sub_10001DEA0(v121, v153, &qword_100087B00);
  v127 = v154;
  sub_10001DEA0(v123, v154, &qword_100087B00);
  v128 = sub_1000041D8(&qword_100087B18);
  sub_10001DEA0(v125, v127 + *(int *)(v128 + 48), &qword_100087AF8);
  sub_10001DEA0(v126, v127 + *(int *)(v128 + 64), &qword_100087B00);
  sub_1000106A4(v121, &qword_100087B00);
  sub_1000106A4(v124, &qword_100087AF8);
  sub_1000106A4(v122, &qword_100087B00);
  sub_1000106A4(v126, &qword_100087B00);
  sub_1000106A4(v125, &qword_100087AF8);
  return sub_1000106A4(v123, &qword_100087B00);
}

uint64_t sub_1000469F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(__int128 *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;

  v4 = type metadata accessor for GridItem.Size(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (__int128 *)((char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000106E0(a1, a2, type metadata accessor for WorldClockEntry);
  v24 = *(int *)(type metadata accessor for WorldClockRectangularSummary(0) + 20);
  v8 = sub_1000041D8(&qword_100086218);
  v9 = *(_QWORD *)(type metadata accessor for GridItem(0) - 8);
  v10 = swift_allocObject(v8, ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ 3 * *(_QWORD *)(v9 + 72), *(unsigned __int8 *)(v9 + 80) | 7);
  *(_OWORD *)(v10 + 16) = xmmword_10006B760;
  v25 = xmmword_10006CAA0;
  *v7 = xmmword_10006CAA0;
  v11 = enum case for GridItem.Size.flexible(_:);
  v12 = *(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v5 + 104);
  v13 = v12(v7, enum case for GridItem.Size.flexible(_:), v4);
  v14 = static Alignment.bottomLeading.getter(v13);
  GridItem.init(_:spacing:alignment:)(v7, 0, 0, v14, v15, 0);
  *v7 = v25;
  v16 = v12(v7, v11, v4);
  v17 = static Alignment.bottomLeading.getter(v16);
  GridItem.init(_:spacing:alignment:)(v7, 0, 0, v17, v18, 0);
  *v7 = v25;
  v19 = v12(v7, v11, v4);
  v20 = static Alignment.bottomLeading.getter(v19);
  result = GridItem.init(_:spacing:alignment:)(v7, 0, 0, v20, v21, 0);
  *(_QWORD *)(a2 + v24) = v10;
  return result;
}

uint64_t sub_100046BD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v15)();
  uint64_t v16;

  v1 = type metadata accessor for AccessibilityChildBehavior(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AlarmSmallWidgetView(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5);
  sub_10000DF30(v0, (uint64_t)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AlarmSmallWidgetView);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = (v8 + 16) & ~v8;
  v10 = swift_allocObject(&unk_100082690, v9 + v7, v8 | 7);
  v11 = sub_1000106E0((uint64_t)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v10 + v9, type metadata accessor for AlarmSmallWidgetView);
  v15 = sub_100051020;
  v16 = v10;
  static AccessibilityChildBehavior.combine.getter(v11);
  v12 = sub_1000041D8(&qword_100086270);
  v13 = sub_10001DDB4(&qword_100086278, &qword_100086270, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
  View.accessibilityElement(children:)(v4, v12, v13);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return swift_release(v16);
}

void *sub_100046D40@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE v17[448];
  _BYTE __dst[417];
  _OWORD v19[28];
  _OWORD v20[28];
  _BYTE __src[376];

  v4 = type metadata accessor for AlarmEntry(0);
  if (*(_BYTE *)(a1 + *(int *)(v4 + 32)) == 1)
  {
    sub_100065CA4((uint64_t)v19);
  }
  else
  {
    v5 = static Alignment.center.getter(v4);
    v7 = v6;
    if (qword_10008A620 != -1)
      swift_once(&qword_10008A620, sub_100041AD8);
    v8 = qword_10008BED0;
    v9 = swift_retain(qword_10008BED0);
    v10 = static HorizontalAlignment.leading.getter(v9);
    sub_100046F60(a1, __src);
    __src[352] = 0;
    v11 = memcpy(&v17[7], __src, 0x159uLL);
    v12 = static Edge.Set.all.getter(v11);
    __src[360] = 1;
    v19[0] = (unint64_t)v10;
    LOBYTE(v19[1]) = 0;
    memcpy((char *)&v19[1] + 1, v17, 0x160uLL);
    BYTE8(v19[23]) = v12;
    memset(&v19[24], 0, 32);
    LOBYTE(v19[26]) = 1;
    memcpy(__dst, v19, sizeof(__dst));
    v20[0] = (unint64_t)v10;
    LOBYTE(v20[1]) = 0;
    memcpy((char *)&v20[1] + 1, v17, 0x160uLL);
    BYTE8(v20[23]) = v12;
    memset(&v20[24], 0, 32);
    LOBYTE(v20[26]) = 1;
    swift_retain(v8);
    sub_100065CAC((uint64_t)v19);
    sub_100065F44((uint64_t)v20);
    swift_release(v8);
    *(_QWORD *)&v19[0] = v5;
    *((_QWORD *)&v19[0] + 1) = v7;
    *(_QWORD *)&v19[1] = v8;
    memcpy((char *)&v19[1] + 8, __dst, 0x1A1uLL);
    sub_100065C54((uint64_t)v19);
  }
  sub_10001DE5C((uint64_t)v19, (uint64_t)v17, &qword_100087A60);
  v13 = sub_1000041D8(&qword_100087A68);
  v14 = sub_100065C60();
  v15 = sub_10001DDB4(&qword_100087A78, &qword_100087A68, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  _ConditionalContent<>.init(storage:)(v17, &type metadata for AlarmPlaceholder, v13, v14, v15);
  return memcpy(a2, v20, 0x1BAuLL);
}

uint64_t sub_100046F60@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(_BYTE *, _QWORD, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  __n128 v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t result;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  double v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _BYTE *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _BYTE *v106;
  _BYTE *v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  _BYTE *v115;
  uint64_t v116;
  _BYTE *v117;
  _BYTE *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _BYTE *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _BYTE *v126;
  _BYTE *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char v139;
  uint64_t v140;
  double v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char v148;
  char v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _BYTE *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  char v181;
  uint64_t v182;
  void (*v183)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v184;
  uint64_t v185;
  _BYTE *v186;
  _BYTE *v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  _BYTE *v193;
  uint64_t v194;
  void (*v195)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  _BYTE *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char v210;
  char v211;
  char v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  _BYTE v219[12];
  int v220;
  uint64_t v221;
  _BYTE *v222;
  uint64_t v223;
  _BYTE *v224;
  _BYTE *v225;
  _BYTE *v226;
  unint64_t v227;
  void (*v228)(_BYTE *, _QWORD, uint64_t);
  uint64_t KeyPath;
  void (*v230)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v231;
  _BYTE *v232;
  uint64_t v233;
  uint64_t v234;
  _BYTE *v235;
  int v236;
  int v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  int v242;
  int v243;
  uint64_t v244;
  uint64_t v245;
  void *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  char v252;
  char v253[8];
  _DWORD v254[2];
  char v255;
  _DWORD v256[2];
  char v257;
  char v258;
  char v259;
  _BYTE v260[7];
  _BYTE v261[7];
  _DWORD v262[2];
  _DWORD v263[2];
  _DWORD v264[2];
  char v265[8];
  _BYTE v266[168];
  _OWORD v267[10];
  char v268;
  _OWORD v269[22];
  void (*v270)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v271;
  char v272;
  _BYTE v273[7];
  uint64_t v274;
  uint64_t v275;
  char v276;
  _BYTE v277[7];
  _BYTE *v278;
  uint64_t v279;
  _BYTE *v280;
  uint64_t v281;
  unint64_t v282;
  uint64_t v283;
  _BYTE *v284;
  _BYTE *v285;
  uint64_t v286;
  uint64_t v287;
  _BYTE *v288;
  char v289;
  _BYTE v290[7];
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  unsigned __int8 v294;
  _BYTE *v295;
  unsigned __int8 v296;
  _BYTE *v297;
  uint64_t v298;
  _BYTE v299[184];

  v246 = a2;
  v3 = type metadata accessor for Font.Leading(0);
  v233 = *(_QWORD *)(v3 - 8);
  v234 = v3;
  __chkstk_darwin(v3);
  v232 = &v219[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for Text.DateStyle(0);
  __chkstk_darwin(v5);
  v225 = &v219[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_1000041D8(&qword_100084810);
  __chkstk_darwin(v7);
  v226 = &v219[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = sub_1000041D8(&qword_100085E40);
  v10 = __chkstk_darwin(v9);
  v12 = &v219[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v241 = static VerticalAlignment.center.getter(v10);
  sub_100048150((uint64_t)v269);
  v244 = *((_QWORD *)&v269[0] + 1);
  v245 = *(_QWORD *)&v269[0];
  v248 = *((_QWORD *)&v269[1] + 1);
  v249 = *((_QWORD *)&v269[2] + 1);
  v242 = LOBYTE(v269[1]);
  v243 = LOBYTE(v269[3]);
  v250 = *(_QWORD *)&v269[2];
  v251 = *((_QWORD *)&v269[3] + 1);
  v247 = a1;
  *(_QWORD *)&v269[0] = sub_10000C280();
  *((_QWORD *)&v269[0] + 1) = v13;
  v227 = sub_10000D9FC();
  v14 = Text.init<A>(_:)(v269, &type metadata for String, v227);
  v16 = v15;
  v18 = v17;
  v20 = v19 & 1;
  v21 = static Font.Weight.semibold.getter(v14);
  v22 = enum case for Font.Design.default(_:);
  v23 = type metadata accessor for Font.Design(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(void (**)(_BYTE *, _QWORD, uint64_t))(v24 + 104);
  LODWORD(KeyPath) = v22;
  v228 = v25;
  v25(v12, v22, v23);
  v230 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v24 + 56);
  v231 = v23;
  v230(v12, 0, 1, v23);
  v26 = static Font.system(size:weight:design:)(*(_QWORD *)&v21, 0, v12, 14.0);
  v235 = v12;
  sub_1000106A4((uint64_t)v12, &qword_100085E40);
  v27 = Text.font(_:)(v26, v14, v16, v20, v18);
  v29 = v28;
  v31 = v30;
  v33 = v32;
  swift_release(v26);
  sub_100010E24(v14, v16, v20);
  swift_bridgeObjectRelease(v18);
  if (qword_10008A680 != -1)
    swift_once(&qword_10008A680, sub_1000420D0);
  v34 = v31 & 1;
  v35 = Text.foregroundColor(_:)(qword_10008BF30, v27, v29, v34, v33);
  v37 = v36;
  v236 = v38;
  v40 = v39;
  sub_100010E24(v27, v29, v34);
  v41 = swift_bridgeObjectRelease(v33);
  v42 = static Edge.Set.bottom.getter(v41);
  v43 = v42;
  v44.n128_u64[0] = 8.0;
  v45 = EdgeInsets.init(_all:)(v42, v44);
  v47 = v46;
  v49 = v48;
  v51 = v50;
  v52 = v247;
  v53 = sub_10000B738();
  v239 = v35;
  v240 = v40;
  v238 = v37;
  v237 = v43;
  if ((v53 & 1) == 0)
  {
    if (!sub_10000C090())
    {
      sub_1000661DC((uint64_t)v269);
      goto LABEL_10;
    }
    *(_QWORD *)&v269[0] = sub_10000C190();
    *((_QWORD *)&v269[0] + 1) = v133;
    v134 = Text.init<A>(_:)(v269, &type metadata for String, v227);
    v136 = v135;
    v138 = v137;
    v140 = v139 & 1;
    v141 = static Font.Weight.thin.getter();
    v142 = (uint64_t)v235;
    v143 = v231;
    v228(v235, KeyPath, v231);
    v230((_BYTE *)v142, 0, 1, v143);
    v144 = static Font.system(size:weight:design:)(*(_QWORD *)&v141, 0, v142, 32.0);
    sub_1000106A4(v142, &qword_100085E40);
    v145 = Text.font(_:)(v144, v134, v136, v140, v138);
    v147 = v146;
    v149 = v148;
    v151 = v150;
    swift_release(v144);
    sub_100010E24(v134, v136, v140);
    v152 = swift_bridgeObjectRelease(v138);
    v153 = static Color.white.getter(v152);
    v230 = (void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))Text.foregroundColor(_:)(v153, v145, v147, v149 & 1, v151);
    v231 = v154;
    LOBYTE(v134) = v155;
    v235 = (_BYTE *)v156;
    swift_release(v153);
    LODWORD(v228) = v134 & 1;
    sub_100010E24(v145, v147, v149 & 1);
    swift_bridgeObjectRelease(v151);
    KeyPath = swift_getKeyPath(&unk_10006CCE0);
    v226 = (_BYTE *)swift_getKeyPath(&unk_10006CC80);
    *(_QWORD *)&v269[0] = sub_10000C140();
    *((_QWORD *)&v269[0] + 1) = v157;
    v158 = Text.init<A>(_:)(v269, &type metadata for String, v227);
    v160 = v159;
    v162 = v161;
    v164 = v163 & 1;
    v165 = static Font.caption.getter(v158);
    v167 = v232;
    v166 = v233;
    v168 = v234;
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v233 + 104))(v232, enum case for Font.Leading.tight(_:), v234);
    v169 = Font.leading(_:)(v167, v165);
    swift_release(v165);
    (*(void (**)(_BYTE *, uint64_t))(v166 + 8))(v167, v168);
    v170 = Text.font(_:)(v169, v158, v160, v164, v162);
    v172 = v171;
    LOBYTE(v167) = v173;
    v175 = v174;
    swift_release(v169);
    v176 = v167 & 1;
    sub_100010E24(v158, v160, v164);
    v177 = swift_bridgeObjectRelease(v162);
    v178 = static Color.gray.getter(v177);
    v232 = (_BYTE *)Text.foregroundColor(_:)(v178, v170, v172, v176, v175);
    v233 = v179;
    v227 = v180;
    LOBYTE(v169) = v181;
    swift_release(v178);
    LODWORD(v169) = v169 & 1;
    sub_100010E24(v170, v172, v176);
    swift_bridgeObjectRelease(v175);
    v247 = swift_getKeyPath(&unk_10006CCE0);
    v234 = swift_getKeyPath(&unk_10006CC80);
    LOBYTE(v162) = (_BYTE)v228;
    v253[0] = (char)v228;
    LOBYTE(v256[0]) = (_BYTE)v228;
    LOBYTE(v254[0]) = v169;
    LODWORD(v225) = v169;
    *(_DWORD *)v266 = v263[0];
    *(_DWORD *)&v266[3] = *(_DWORD *)((char *)v263 + 3);
    LODWORD(v293) = v262[0];
    *(_DWORD *)((char *)&v293 + 3) = *(_DWORD *)((char *)v262 + 3);
    *(_DWORD *)&v265[3] = *(_DWORD *)&v261[3];
    *(_DWORD *)v265 = *(_DWORD *)v261;
    *(_DWORD *)((char *)v264 + 3) = *(_DWORD *)&v260[3];
    v264[0] = *(_DWORD *)v260;
    v183 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v230;
    v182 = v231;
    sub_1000511D8((uint64_t)v230, v231, (char)v228);
    v184 = (uint64_t)v235;
    swift_bridgeObjectRetain(v235);
    v185 = KeyPath;
    swift_retain(KeyPath);
    v186 = v226;
    swift_retain(v226);
    v187 = v232;
    v188 = v227;
    sub_1000511D8((uint64_t)v232, v227, v169);
    v189 = v233;
    swift_bridgeObjectRetain(v233);
    swift_retain(v247);
    swift_retain(v234);
    sub_1000511D8((uint64_t)v183, v182, v162);
    swift_bridgeObjectRetain(v184);
    swift_retain(v185);
    swift_retain(v186);
    v190 = (uint64_t)v187;
    v191 = v188;
    v192 = v188;
    LOBYTE(v188) = (_BYTE)v225;
    sub_1000511D8((uint64_t)v187, v192, (char)v225);
    swift_bridgeObjectRetain(v189);
    v193 = (_BYTE *)v247;
    swift_retain(v247);
    v194 = v234;
    swift_retain(v234);
    sub_100010E24(v190, v191, v188);
    swift_release(v194);
    swift_release(v193);
    swift_bridgeObjectRelease(v189);
    v195 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v230;
    v196 = v231;
    sub_100010E24((uint64_t)v230, v231, v253[0]);
    swift_release(v186);
    v197 = KeyPath;
    swift_release(KeyPath);
    v198 = (uint64_t)v235;
    swift_bridgeObjectRelease(v235);
    v270 = v195;
    v271 = v196;
    v272 = (char)v228;
    *(_DWORD *)v273 = *(_DWORD *)v266;
    *(_DWORD *)&v273[3] = *(_DWORD *)&v266[3];
    v274 = v198;
    v275 = v197;
    v276 = 1;
    *(_DWORD *)v277 = v293;
    *(_DWORD *)&v277[3] = *(_DWORD *)((char *)&v293 + 3);
    v278 = v186;
    v279 = 0x3FE0000000000000;
    v199 = v232;
    v280 = v232;
    v281 = v191;
    LOBYTE(v282) = v188;
    HIDWORD(v282) = *(_DWORD *)&v265[3];
    *(_DWORD *)((char *)&v282 + 1) = *(_DWORD *)v265;
    v283 = v189;
    v284 = v193;
    LOBYTE(v285) = 0;
    HIDWORD(v285) = *(_DWORD *)((char *)v264 + 3);
    *(_DWORD *)((char *)&v285 + 1) = v264[0];
    v200 = v234;
    v286 = v234;
    v287 = 0x3FE0000000000000;
    sub_10006626C((uint64_t)&v270);
    sub_10001DE5C((uint64_t)&v270, (uint64_t)v269, &qword_100087A88);
    v201 = sub_1000041D8(&qword_100087A90);
    v202 = sub_1000041D8(&qword_100087A98);
    v203 = sub_10001DDB4(&qword_100087AA0, &qword_100087A90, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v204 = sub_10001DDB4(&qword_100087AA8, &qword_100087A98, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    _ConditionalContent<>.init(storage:)(v269, v201, v202, v203, v204);
    sub_100010E24((uint64_t)v199, v191, v188);
    swift_release(v200);
    swift_release(v247);
    swift_bridgeObjectRelease(v233);
    sub_100010E24((uint64_t)v230, v231, (char)v228);
    swift_release(v226);
    swift_release(KeyPath);
    v132 = (uint64_t)v235;
LABEL_8:
    swift_bridgeObjectRelease(v132);
    v269[8] = v267[8];
    v269[9] = v267[9];
    LOBYTE(v269[10]) = v268;
    v269[4] = v267[4];
    v269[5] = v267[5];
    v269[6] = v267[6];
    v269[7] = v267[7];
    v269[0] = v267[0];
    v269[1] = v267[1];
    v269[2] = v267[2];
    v269[3] = v267[3];
    nullsub_1(v269);
LABEL_10:
    sub_10001DE5C((uint64_t)v269, (uint64_t)v299, &qword_100087A80);
    v206 = v250;
    v205 = v251;
    v207 = v249;
    v209 = v244;
    v208 = v245;
    v210 = v236 & 1;
    LODWORD(v247) = v236 & 1;
    v211 = v242;
    v212 = v243;
    v265[0] = v242;
    LOBYTE(v264[0]) = v243;
    sub_10001DE5C((uint64_t)v299, (uint64_t)v266, &qword_100087A80);
    sub_10001DE5C((uint64_t)v266, (uint64_t)v267, &qword_100087A80);
    *(_QWORD *)&v269[0] = v241;
    *((_QWORD *)&v269[0] + 1) = 0x4014000000000000;
    LOBYTE(v269[1]) = 0;
    *((_QWORD *)&v269[1] + 1) = v208;
    *(_QWORD *)&v269[2] = v209;
    BYTE8(v269[2]) = v211;
    v213 = v248;
    *(_QWORD *)&v269[3] = v248;
    *((_QWORD *)&v269[3] + 1) = v206;
    *(_QWORD *)&v269[4] = v207;
    BYTE8(v269[4]) = v212;
    *(_QWORD *)&v269[5] = v205;
    v215 = v238;
    v214 = v239;
    *((_QWORD *)&v269[5] + 1) = v239;
    *(_QWORD *)&v269[6] = v238;
    BYTE8(v269[6]) = v210;
    v216 = v240;
    *(_QWORD *)&v269[7] = v240;
    BYTE8(v269[7]) = v237;
    *(double *)&v269[8] = v45;
    *((_QWORD *)&v269[8] + 1) = v47;
    *(_QWORD *)&v269[9] = v49;
    *((_QWORD *)&v269[9] + 1) = v51;
    LOBYTE(v269[10]) = 0;
    sub_10001DE5C((uint64_t)v267, (uint64_t)&v269[10] + 8, &qword_100087A80);
    *(_QWORD *)&v269[21] = 0;
    BYTE8(v269[21]) = 1;
    memcpy(v246, v269, 0x159uLL);
    sub_10001DE5C((uint64_t)v266, (uint64_t)&v270, &qword_100087A80);
    sub_1000511D8(v208, v209, v211);
    swift_bridgeObjectRetain(v213);
    v217 = v250;
    sub_1000511D8(v250, v207, v212);
    v218 = v251;
    swift_bridgeObjectRetain(v251);
    LOBYTE(v207) = v247;
    sub_1000511D8(v214, v215, v247);
    swift_bridgeObjectRetain(v216);
    sub_100066200((uint64_t)v267, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_100065DF4);
    sub_100066200((uint64_t)&v270, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10006608C);
    sub_100010E24(v214, v215, v207);
    swift_bridgeObjectRelease(v216);
    LOBYTE(v216) = v264[0];
    sub_100010E24(v208, v209, v265[0]);
    swift_bridgeObjectRelease(v248);
    sub_100010E24(v217, v249, v216);
    return swift_bridgeObjectRelease(v218);
  }
  v54 = type metadata accessor for AlarmEntry(0);
  v55 = v226;
  sub_10001DEA0(v52 + *(int *)(v54 + 24), (uint64_t)v226, &qword_100084810);
  v56 = type metadata accessor for Date(0);
  result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 48))(v55, 1, v56);
  if ((_DWORD)result != 1)
  {
    v58 = v225;
    static Text.DateStyle.timer.getter();
    v59 = Text.init(_:style:)(v55, v58);
    v61 = v60;
    v63 = v62;
    v65 = v64 & 1;
    v66 = static Font.Weight.thin.getter();
    v67 = (uint64_t)v235;
    v68 = v231;
    v228(v235, KeyPath, v231);
    v230((_BYTE *)v67, 0, 1, v68);
    v69 = static Font.system(size:weight:design:)(*(_QWORD *)&v66, 0, v67, 32.0);
    sub_1000106A4(v67, &qword_100085E40);
    v70 = Text.font(_:)(v69, v59, v61, v65, v63);
    v72 = v71;
    v74 = v73;
    v76 = v75;
    swift_release(v69);
    sub_100010E24(v59, v61, v65);
    v77 = swift_bridgeObjectRelease(v63);
    v78 = static Color.white.getter(v77);
    KeyPath = Text.foregroundColor(_:)(v78, v70, v72, v74 & 1, v76);
    v235 = (_BYTE *)v79;
    LOBYTE(v65) = v80;
    v247 = v81;
    swift_release(v78);
    LODWORD(v228) = v65 & 1;
    sub_100010E24(v70, v72, v74 & 1);
    v82 = swift_bridgeObjectRelease(v76);
    v83 = static Alignment.leading.getter(v82);
    _FrameLayout.init(width:height:alignment:)(&v293, 0x4054000000000000, 0, 0, 1, v83, v84);
    LODWORD(v230) = v294;
    v221 = v293;
    v222 = v295;
    LODWORD(v231) = v296;
    v223 = v298;
    v224 = v297;
    v227 = swift_getKeyPath(&unk_10006CC80);
    v85 = LocalizedStringKey.init(stringLiteral:)(0x64657A6F6F6E53, 0xE700000000000000);
    v86 = Text.init(_:tableName:bundle:comment:)(v85);
    v88 = v87;
    v90 = v89;
    v92 = v91 & 1;
    v93 = static Font.caption.getter(v86);
    v95 = v232;
    v94 = v233;
    v96 = v234;
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v233 + 104))(v232, enum case for Font.Leading.tight(_:), v234);
    v97 = Font.leading(_:)(v95, v93);
    swift_release(v93);
    (*(void (**)(_BYTE *, uint64_t))(v94 + 8))(v95, v96);
    v98 = Text.font(_:)(v97, v86, v88, v92, v90);
    v100 = v99;
    LOBYTE(v93) = v101;
    v103 = v102;
    swift_release(v97);
    LOBYTE(v97) = v93 & 1;
    sub_100010E24(v86, v88, v92);
    v104 = swift_bridgeObjectRelease(v90);
    v105 = static Color.gray.getter(v104);
    v106 = (_BYTE *)Text.foregroundColor(_:)(v105, v98, v100, v93 & 1, v103);
    v225 = v106;
    v226 = v107;
    LOBYTE(v93) = v108;
    v233 = v109;
    swift_release(v105);
    LODWORD(v105) = v93 & 1;
    sub_100010E24(v98, v100, v97);
    swift_bridgeObjectRelease(v103);
    v232 = (_BYTE *)swift_getKeyPath(&unk_10006CCE0);
    v110 = swift_getKeyPath(&unk_10006CC80);
    LOBYTE(v93) = (_BYTE)v228;
    v252 = (char)v228;
    v259 = (char)v228;
    v258 = (char)v230;
    v257 = v231;
    v255 = v105;
    LOBYTE(v98) = v105;
    LODWORD(v234) = v105;
    *(_DWORD *)v266 = *(_DWORD *)v261;
    *(_DWORD *)&v266[3] = *(_DWORD *)&v261[3];
    *(_DWORD *)v265 = *(_DWORD *)v260;
    *(_DWORD *)&v265[3] = *(_DWORD *)&v260[3];
    *(_DWORD *)((char *)v264 + 3) = *(_DWORD *)((char *)v256 + 3);
    v264[0] = v256[0];
    v220 = v105;
    *(_DWORD *)((char *)v263 + 3) = *(_DWORD *)((char *)v254 + 3);
    v263[0] = v254[0];
    *(_DWORD *)((char *)v262 + 3) = *(_DWORD *)&v253[3];
    v262[0] = *(_DWORD *)v253;
    v111 = KeyPath;
    v112 = (uint64_t)v235;
    sub_1000511D8(KeyPath, (uint64_t)v235, (char)v228);
    v113 = v247;
    swift_bridgeObjectRetain(v247);
    v114 = v227;
    swift_retain(v227);
    v115 = v226;
    sub_1000511D8((uint64_t)v106, (uint64_t)v226, v98);
    v116 = v233;
    swift_bridgeObjectRetain(v233);
    v117 = v232;
    swift_retain(v232);
    swift_retain(v110);
    sub_1000511D8(v111, v112, v93);
    swift_bridgeObjectRetain(v113);
    swift_retain(v114);
    v118 = v225;
    v119 = (uint64_t)v115;
    v120 = (uint64_t)v115;
    LOBYTE(v115) = v234;
    sub_1000511D8((uint64_t)v225, v120, v234);
    swift_bridgeObjectRetain(v116);
    swift_retain(v117);
    swift_retain(v110);
    sub_100010E24((uint64_t)v118, v119, (char)v115);
    v121 = v110;
    swift_release(v110);
    v122 = v117;
    swift_release(v117);
    v123 = v116;
    swift_bridgeObjectRelease(v116);
    v124 = (uint64_t)v235;
    sub_100010E24(v111, (uint64_t)v235, v252);
    swift_release(v114);
    v125 = v247;
    swift_bridgeObjectRelease(v247);
    v270 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v111;
    v271 = v124;
    LOBYTE(v117) = (_BYTE)v228;
    v272 = (char)v228;
    *(_DWORD *)v273 = *(_DWORD *)v266;
    *(_DWORD *)&v273[3] = *(_DWORD *)&v266[3];
    v274 = v125;
    v275 = v221;
    v276 = (char)v230;
    *(_DWORD *)v277 = *(_DWORD *)v265;
    *(_DWORD *)&v277[3] = *(_DWORD *)&v265[3];
    v278 = v222;
    LOBYTE(v279) = v231;
    HIDWORD(v279) = *(_DWORD *)((char *)v264 + 3);
    *(_DWORD *)((char *)&v279 + 1) = v264[0];
    v126 = v225;
    v280 = v224;
    v281 = v223;
    v282 = v114;
    v283 = 0x3FE0000000000000;
    v284 = v225;
    v127 = v226;
    v285 = v226;
    LOBYTE(v286) = v220;
    HIDWORD(v286) = *(_DWORD *)((char *)v263 + 3);
    *(_DWORD *)((char *)&v286 + 1) = v263[0];
    v287 = v123;
    v288 = v122;
    v289 = 1;
    *(_DWORD *)&v290[3] = *(_DWORD *)((char *)v262 + 3);
    *(_DWORD *)v290 = v262[0];
    v291 = v121;
    v292 = 0x3FE0000000000000;
    sub_100066278((uint64_t)&v270);
    sub_10001DE5C((uint64_t)&v270, (uint64_t)v269, &qword_100087A88);
    v128 = sub_1000041D8(&qword_100087A90);
    v129 = sub_1000041D8(&qword_100087A98);
    v130 = sub_10001DDB4(&qword_100087AA0, &qword_100087A90, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v131 = sub_10001DDB4(&qword_100087AA8, &qword_100087A98, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    _ConditionalContent<>.init(storage:)(v269, v128, v129, v130, v131);
    sub_100010E24((uint64_t)v126, (uint64_t)v127, v234);
    swift_release(v121);
    swift_release(v232);
    swift_bridgeObjectRelease(v233);
    sub_100010E24(KeyPath, (uint64_t)v235, (char)v117);
    swift_release(v227);
    v132 = v247;
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

uint64_t sub_100048150@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;

  v2 = sub_1000041D8(&qword_100085E40);
  __chkstk_darwin(v2);
  v62 = (char *)&v62 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10000C004();
  v5 = Text.init(_:)(v4);
  v7 = v6;
  v9 = v8;
  v11 = v10 & 1;
  v12 = static Font.footnote.getter();
  v13 = Text.font(_:)(v12, v5, v7, v11, v9);
  v15 = v14;
  v17 = v16;
  v19 = v18;
  swift_release(v12);
  v20 = v17 & 1;
  sub_100010E24(v5, v7, v11);
  v21 = swift_bridgeObjectRelease(v9);
  v22 = static Color.white.getter(v21);
  v23 = Text.foregroundColor(_:)(v22, v13, v15, v20, v19);
  v64 = v24;
  v65 = v23;
  LOBYTE(v12) = v25;
  v66 = v26;
  swift_release(v22);
  v63 = v12 & 1;
  sub_100010E24(v13, v15, v20);
  swift_bridgeObjectRelease(v19);
  v27 = LocalizedStringKey.init(stringLiteral:)(0x616C41207478654ELL, 0xEA00000000006D72);
  v28 = Text.init(_:tableName:bundle:comment:)(v27);
  v30 = v29;
  v32 = v31;
  v34 = v33 & 1;
  v35 = static Font.Weight.semibold.getter(v28);
  v36 = enum case for Font.Design.default(_:);
  v37 = type metadata accessor for Font.Design(0);
  v38 = *(_QWORD *)(v37 - 8);
  v39 = (uint64_t)v62;
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 104))(v62, v36, v37);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v39, 0, 1, v37);
  v40 = static Font.system(size:weight:design:)(*(_QWORD *)&v35, 0, v39, 18.0);
  sub_1000106A4(v39, &qword_100085E40);
  v41 = Text.font(_:)(v40, v28, v30, v34, v32);
  v43 = v42;
  LOBYTE(v38) = v44;
  v46 = v45;
  swift_release(v40);
  v47 = v38 & 1;
  sub_100010E24(v28, v30, v34);
  v48 = swift_bridgeObjectRelease(v32);
  v49 = static Color.white.getter(v48);
  v50 = Text.foregroundColor(_:)(v49, v41, v43, v47, v46);
  v52 = v51;
  LOBYTE(v28) = v53;
  v55 = v54;
  swift_release(v49);
  sub_100010E24(v41, v43, v47);
  swift_bridgeObjectRelease(v46);
  v56 = v63;
  v67 = v63;
  v58 = v64;
  v57 = v65;
  *(_QWORD *)a1 = v65;
  *(_QWORD *)(a1 + 8) = v58;
  *(_BYTE *)(a1 + 16) = v56;
  v59 = v66;
  *(_QWORD *)(a1 + 24) = v66;
  *(_QWORD *)(a1 + 32) = v50;
  *(_QWORD *)(a1 + 40) = v52;
  *(_BYTE *)(a1 + 48) = v28 & 1;
  *(_QWORD *)(a1 + 56) = v55;
  v60 = v57;
  sub_1000511D8(v57, v58, v56);
  swift_bridgeObjectRetain(v59);
  sub_1000511D8(v50, v52, v28 & 1);
  swift_bridgeObjectRetain(v55);
  sub_100010E24(v50, v52, v28 & 1);
  swift_bridgeObjectRelease(v55);
  sub_100010E24(v60, v58, v67);
  return swift_bridgeObjectRelease(v59);
}

uint64_t sub_100048488@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000106E0(a1, a2, type metadata accessor for AlarmEntry);
}

uint64_t sub_1000484A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v17)();
  uint64_t v18;

  v3 = type metadata accessor for AccessibilityChildBehavior(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a1 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v5);
  sub_10000DF30(v1, (uint64_t)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AlarmSmallWidgetView);
  v10 = *(unsigned __int8 *)(v8 + 80);
  v11 = (v10 + 16) & ~v10;
  v12 = swift_allocObject(&unk_100083088, v11 + v9, v10 | 7);
  v13 = sub_1000106E0((uint64_t)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v12 + v11, type metadata accessor for AlarmSmallWidgetView);
  v17 = sub_100051020;
  v18 = v12;
  static AccessibilityChildBehavior.combine.getter(v13);
  v14 = sub_1000041D8(&qword_100086270);
  v15 = sub_10001DDB4(&qword_100086278, &qword_100086270, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
  View.accessibilityElement(children:)(v7, v14, v15);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  return swift_release(v18);
}

uint64_t sub_100048610()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v1 = type metadata accessor for AccessibilityChildBehavior(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000041D8(&qword_100086280);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v8 = static HorizontalAlignment.leading.getter(v6);
  *((_QWORD *)v8 + 1) = 0;
  v8[16] = 0;
  v9 = sub_1000041D8(&qword_100086288);
  v10 = sub_100048740(v0, (uint64_t)&v8[*(int *)(v9 + 44)]);
  static AccessibilityChildBehavior.combine.getter(v10);
  v11 = sub_10001DDB4(&qword_100086290, &qword_100086280, (uint64_t)&protocol conformance descriptor for VStack<A>);
  View.accessibilityElement(children:)(v4, v5, v11);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return sub_1000106A4((uint64_t)v8, &qword_100086280);
}

uint64_t sub_100048740@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  uint64_t KeyPath;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned __int8 v96;
  _BYTE v97[7];
  uint64_t v98;
  uint64_t v99;
  char v100;
  _BYTE v101[7];
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  unsigned __int8 v110;
  char v111;
  char v112;
  char v113;
  _BYTE v114[7];
  _BYTE v115[7];
  _DWORD v116[3];

  v52 = sub_1000041D8(&qword_100087A40);
  __chkstk_darwin(v52);
  v5 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v53 = type metadata accessor for ClockDateText(0);
  __chkstk_darwin(v53);
  v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000041D8(&qword_100084810);
  __chkstk_darwin(v8);
  v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000041D8(&qword_100087A48);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v57 = (uint64_t)&v51 - v16;
  v59 = static VerticalAlignment.lastTextBaseline.getter(v15);
  v17 = sub_100048D48((uint64_t)&v82);
  v18 = v83;
  v19 = v84;
  v20 = v85;
  v21 = v86;
  v62 = v87;
  v63 = v82;
  v22 = v88;
  v23 = v89;
  v24 = v90;
  v60 = v92;
  v61 = v91;
  v66 = v95;
  v67 = v94;
  v112 = 0;
  v64 = v93;
  v111 = v93;
  v110 = v96;
  v58 = v96;
  v65 = static Font.headline.getter(v17);
  KeyPath = swift_getKeyPath(&unk_10006CC20);
  *((_QWORD *)&v55 + 1) = static Color.white.getter(KeyPath);
  *(_QWORD *)&v55 = swift_getKeyPath(&unk_10006CC50);
  v54 = swift_getKeyPath(&unk_10006CD10);
  v113 = 0;
  v25 = type metadata accessor for AlarmEntry(0);
  sub_10001DEA0(a1 + *(int *)(v25 + 20), (uint64_t)v10, &qword_100084810);
  v26 = type metadata accessor for Date(0);
  v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 48))(v10, 1, v26);
  sub_1000106A4((uint64_t)v10, &qword_100084810);
  if (v27 == 1)
  {
    *(_QWORD *)v5 = 0x4038000000000000;
    v5[8] = 0;
    swift_storeEnumTagMultiPayload(v5, v52, 1);
    v28 = sub_10000D36C(&qword_100087A50, type metadata accessor for ClockDateText, (uint64_t)&unk_10006CDE0);
    _ConditionalContent<>.init(storage:)(v5, v53, &type metadata for Spacer, v28, &protocol witness table for Spacer);
  }
  else
  {
    v29 = type metadata accessor for WorldClockCity(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v7, 1, 1, v29);
    v30 = v53;
    v31 = (uint64_t)&v7[*(int *)(v53 + 20)];
    sub_10000DF30(a1, v31, type metadata accessor for AlarmEntry);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v31, 0, 1, v25);
    sub_10000DF30((uint64_t)v7, (uint64_t)v5, type metadata accessor for ClockDateText);
    swift_storeEnumTagMultiPayload(v5, v52, 0);
    v32 = sub_10000D36C(&qword_100087A50, type metadata accessor for ClockDateText, (uint64_t)&unk_10006CDE0);
    _ConditionalContent<>.init(storage:)(v5, v30, &type metadata for Spacer, v32, &protocol witness table for Spacer);
    sub_10000D330((uint64_t)v7, type metadata accessor for ClockDateText);
  }
  v33 = v113;
  v34 = v57;
  sub_10001DEA0(v57, (uint64_t)v14, &qword_100087A48);
  *(_QWORD *)&v68 = v59;
  *((_QWORD *)&v68 + 1) = 0x4008000000000000;
  LOBYTE(v69) = 0;
  *(_DWORD *)((char *)&v69 + 1) = v116[0];
  DWORD1(v69) = *(_DWORD *)((char *)v116 + 3);
  *((_QWORD *)&v69 + 1) = v63;
  *(_QWORD *)&v70 = v18;
  *((_QWORD *)&v70 + 1) = v19;
  *(_QWORD *)&v71 = v20;
  *((_QWORD *)&v71 + 1) = v21;
  *(_QWORD *)&v72 = v62;
  *((_QWORD *)&v72 + 1) = v22;
  *(_QWORD *)&v73 = v23;
  *((_QWORD *)&v73 + 1) = v24;
  *(_QWORD *)&v74 = v61;
  *((_QWORD *)&v74 + 1) = v60;
  LOBYTE(v75) = v64;
  *(_DWORD *)((char *)&v75 + 1) = *(_DWORD *)v115;
  DWORD1(v75) = *(_DWORD *)&v115[3];
  *((_QWORD *)&v75 + 1) = v67;
  *(_QWORD *)&v76 = v66;
  BYTE8(v76) = v58;
  *(_DWORD *)((char *)&v76 + 9) = *(_DWORD *)v114;
  HIDWORD(v76) = *(_DWORD *)&v114[3];
  v53 = xmmword_10006CAC0;
  v77 = xmmword_10006CAC0;
  v36 = *((_QWORD *)&v55 + 1);
  v35 = KeyPath;
  *(_QWORD *)&v78 = KeyPath;
  *((_QWORD *)&v78 + 1) = v65;
  v37 = v54;
  v38 = v55;
  v79 = v55;
  *(_QWORD *)&v80 = v54;
  *((_QWORD *)&v80 + 1) = 1;
  v81 = v33;
  v39 = v78;
  v40 = v55;
  v41 = v80;
  *(_BYTE *)(a2 + 208) = v33;
  *(_OWORD *)(a2 + 176) = v40;
  *(_OWORD *)(a2 + 192) = v41;
  v42 = v69;
  *(_OWORD *)a2 = v68;
  *(_OWORD *)(a2 + 16) = v42;
  v43 = v70;
  v44 = v71;
  v45 = v73;
  *(_OWORD *)(a2 + 64) = v72;
  *(_OWORD *)(a2 + 80) = v45;
  *(_OWORD *)(a2 + 32) = v43;
  *(_OWORD *)(a2 + 48) = v44;
  v46 = v74;
  v47 = v75;
  v48 = v76;
  *(_OWORD *)(a2 + 144) = v77;
  *(_OWORD *)(a2 + 160) = v39;
  *(_OWORD *)(a2 + 112) = v47;
  *(_OWORD *)(a2 + 128) = v48;
  *(_OWORD *)(a2 + 96) = v46;
  v49 = sub_1000041D8(&qword_100087A58);
  sub_10001DEA0((uint64_t)v14, a2 + *(int *)(v49 + 48), &qword_100087A48);
  sub_100065AE4((uint64_t)&v68);
  sub_1000106A4(v34, &qword_100087A48);
  sub_1000106A4((uint64_t)v14, &qword_100087A48);
  v82 = v59;
  v83 = 0x4008000000000000;
  LOBYTE(v84) = 0;
  *(_DWORD *)((char *)&v84 + 1) = v116[0];
  HIDWORD(v84) = *(_DWORD *)((char *)v116 + 3);
  v85 = v63;
  v86 = v18;
  v87 = v19;
  v88 = v20;
  v89 = v21;
  v90 = v62;
  v91 = v22;
  v92 = v23;
  v93 = v24;
  v94 = v61;
  v95 = v60;
  v96 = v64;
  *(_DWORD *)&v97[3] = *(_DWORD *)&v115[3];
  *(_DWORD *)v97 = *(_DWORD *)v115;
  v98 = v67;
  v99 = v66;
  v100 = v58;
  *(_DWORD *)&v101[3] = *(_DWORD *)&v114[3];
  *(_DWORD *)v101 = *(_DWORD *)v114;
  v102 = v53;
  v103 = v35;
  v104 = v65;
  v105 = v38;
  v106 = v36;
  v107 = v37;
  v108 = 1;
  v109 = v33;
  return sub_100065B9C((uint64_t)&v82);
}

uint64_t sub_100048D48@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  _QWORD v22[2];

  v2 = type metadata accessor for Color.RGBColorSpace(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10008A618 != -1)
    swift_once(&qword_10008A618, sub_100041A48);
  v6 = qword_10008BEC8;
  v7 = swift_retain(qword_10008BEC8);
  v8 = static UnitPoint.center.getter(v7);
  v10 = v9;
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for Color.RGBColorSpace.sRGBLinear(_:), v2);
  v11 = Color.init(_:white:opacity:)(v5, 0.0, 0.33);
  v22[0] = sub_10000C280();
  v22[1] = v12;
  v13 = sub_10000D9FC();
  v14 = Text.init<A>(_:)(v22, &type metadata for String, v13);
  v16 = v15;
  v18 = v17;
  *(_QWORD *)a1 = v6;
  *(int64x2_t *)(a1 + 8) = vdupq_n_s64(0x3FECCCCCCCCCCCCDuLL);
  v20 = v19 & 1;
  *(double *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 40) = v11;
  *(_QWORD *)(a1 + 48) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = v14;
  *(_QWORD *)(a1 + 80) = v15;
  *(_BYTE *)(a1 + 88) = v19 & 1;
  *(_QWORD *)(a1 + 96) = v17;
  *(_QWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 112) = 1;
  swift_retain(v6);
  swift_retain(v11);
  sub_1000511D8(v14, v16, v20);
  swift_bridgeObjectRetain(v18);
  sub_100010E24(v14, v16, v20);
  swift_release(v11);
  swift_release(v6);
  return swift_bridgeObjectRelease(v18);
}

uint64_t sub_100048EFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD v12[2];

  v1 = sub_1000041D8(&qword_100086298);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v4 = static VerticalAlignment.center.getter(v2);
  *((_QWORD *)v4 + 1) = 0;
  v4[16] = 1;
  v5 = sub_1000041D8(&qword_1000862A0);
  sub_100049000(v0, (uint64_t)&v4[*(int *)(v5 + 44)]);
  sub_100049364();
  v7 = v6;
  v12[0] = v8;
  v12[1] = v6;
  v9 = sub_10001DDB4(&qword_1000862A8, &qword_100086298, (uint64_t)&protocol conformance descriptor for HStack<A>);
  v10 = sub_10000D9FC();
  View.accessibilityLabel<A>(_:)(v12, v1, &type metadata for String, v9, v10);
  swift_bridgeObjectRelease(v7);
  return sub_1000106A4((uint64_t)v4, &qword_100086298);
}

uint64_t sub_100049000@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;

  v41 = a2;
  v3 = type metadata accessor for AttributedString(0);
  __chkstk_darwin(v3);
  v40 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000041D8(&qword_100084810);
  __chkstk_darwin(v5);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000041D8(&qword_100087A30);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v40 - v16;
  v18 = sub_10000C004();
  v47 = v18;
  View.accessibilityHidden(_:)(1, &type metadata for Image, &protocol witness table for Image);
  swift_release(v18);
  if (sub_10000C090())
  {
    v19 = type metadata accessor for AlarmEntry(0);
    sub_10001DEA0(a1 + *(int *)(v19 + 20), (uint64_t)v7, &qword_100084810);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
      v32 = type metadata accessor for WidgetUtilities();
      v33 = v40;
      (*(void (**)(char *))(v32 + 136))(v11);
      v42 = Text.init(_:)(v33);
      v43 = v34;
      v44 = v35 & 1;
      v45 = v36;
      v46 = 0;
      _ConditionalContent<>.init(storage:)(&v42, &type metadata for Text, &type metadata for Text, &protocol witness table for Text, &protocol witness table for Text);
      v27 = v47;
      v28 = v48;
      v29 = v49;
      v30 = v50;
      v31 = v51;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      goto LABEL_6;
    }
    sub_1000106A4((uint64_t)v7, &qword_100084810);
  }
  v20 = sub_10000BF1C();
  sub_10000C3F4(v20);
  v47 = v21;
  v48 = v22;
  v23 = sub_10000D9FC();
  v42 = Text.init<A>(_:)(&v47, &type metadata for String, v23);
  v43 = v24;
  v44 = v25 & 1;
  v45 = v26;
  v46 = 1;
  _ConditionalContent<>.init(storage:)(&v42, &type metadata for Text, &type metadata for Text, &protocol witness table for Text, &protocol witness table for Text);
  v27 = v47;
  v28 = v48;
  v29 = v49;
  v30 = v50;
  v31 = v51;
LABEL_6:
  sub_10001DEA0((uint64_t)v17, (uint64_t)v15, &qword_100087A30);
  v37 = v41;
  sub_10001DEA0((uint64_t)v15, v41, &qword_100087A30);
  v38 = v37 + *(int *)(sub_1000041D8(&qword_100087A38) + 48);
  *(_QWORD *)v38 = v27;
  *(_QWORD *)(v38 + 8) = v28;
  *(_QWORD *)(v38 + 16) = v29;
  *(_QWORD *)(v38 + 24) = v30;
  *(_BYTE *)(v38 + 32) = v31;
  sub_1000656F8(v27, v28, v29, v30);
  sub_1000106A4((uint64_t)v17, &qword_100087A30);
  sub_100065720(v27, v28, v29, v30);
  return sub_1000106A4((uint64_t)v15, &qword_100087A30);
}

void sub_100049364()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  id v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  Swift::String v15;
  Swift::String v16;

  v0 = sub_1000041D8(&qword_1000862B0);
  v1 = swift_allocObject(v0, 64, 7);
  *(_OWORD *)(v1 + 16) = xmmword_10006B750;
  v2 = (void *)objc_opt_self(NSBundle);
  v3 = objc_msgSend(v2, "mainBundle");
  v15._object = (void *)0x800000010006F340;
  v4._countAndFlagsBits = 0x616C41207478654ELL;
  v4._object = (void *)0xEA00000000006D72;
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v15._countAndFlagsBits = 0xD000000000000010;
  v6 = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, (Swift::String_optional)0, (NSBundle)v3, v5, v15);

  *(Swift::String *)(v1 + 32) = v6;
  *(_QWORD *)(v1 + 48) = sub_10000C190();
  *(_QWORD *)(v1 + 56) = v7;
  if (sub_10000C090())
  {
    v8 = objc_msgSend(v2, "mainBundle");
    v16._object = (void *)0xEE00616D6D6F6320;
    v9._countAndFlagsBits = 8236;
    v9._object = (void *)0xE200000000000000;
    v10._countAndFlagsBits = 0;
    v10._object = (void *)0xE000000000000000;
    v16._countAndFlagsBits = 0x726F746172706573;
    v11 = NSLocalizedString(_:tableName:bundle:value:comment:)(v9, (Swift::String_optional)0, (NSBundle)v8, v10, v16);

    v12 = sub_1000041D8(&qword_1000862B8);
    v13 = sub_10001DDB4(&qword_1000862C0, &qword_1000862B8, (uint64_t)&protocol conformance descriptor for [A]);
    BidirectionalCollection<>.joined(separator:)(v11._countAndFlagsBits, v11._object, v12, v13);
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v11._object);
  }
  else
  {
    swift_bridgeObjectRelease(v1);
    if (sub_10000C090())
    {
      sub_10000C190();
    }
    else
    {
      v14 = sub_10000BF1C();
      sub_10000C3F4(v14);
    }
  }
}

void sub_100049574()
{
  char v0;

  if (sub_10000C090())
  {
    sub_10000C190();
  }
  else
  {
    v0 = sub_10000BF1C();
    sub_10000C3F4(v0);
  }
}

uint64_t sub_100049598@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for ClockCircularAnalogueComplication(0);
  return sub_100025364(&qword_100085E48, (uint64_t (*)(_QWORD))&type metadata accessor for ContentSizeCategory, (char *)0xD000000000000013, (char *)0x800000010006F3D0, a1);
}

uint64_t sub_1000495F4@<X0>(uint64_t a1@<X8>)
{
  return sub_10002FBA8(type metadata accessor for ClockCircularAnalogueComplication, a1);
}

uint64_t sub_100049600()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ClockCircularAnalogueComplication(0) + 28));
}

uint64_t sub_100049620(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ClockCircularAnalogueComplication(0);
  *(_BYTE *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*sub_10004964C())()
{
  type metadata accessor for ClockCircularAnalogueComplication(0);
  return nullsub_1;
}

uint64_t sub_100049674()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ClockCircularAnalogueComplication(0) + 32));
}

uint64_t sub_100049694(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ClockCircularAnalogueComplication(0);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*sub_1000496C0())()
{
  type metadata accessor for ClockCircularAnalogueComplication(0);
  return nullsub_1;
}

uint64_t sub_1000496E8()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ClockCircularAnalogueComplication(0) + 36));
}

uint64_t sub_100049708(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ClockCircularAnalogueComplication(0);
  *(_BYTE *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*sub_100049734())()
{
  type metadata accessor for ClockCircularAnalogueComplication(0);
  return nullsub_1;
}

uint64_t sub_10004975C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t OpaqueTypeConformance2;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[2];
  _OWORD v38[3];

  v36 = a1;
  v2 = type metadata accessor for AccessibilityChildBehavior(0);
  v34 = *(_QWORD *)(v2 - 8);
  v35 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000041D8(&qword_1000862C8);
  __chkstk_darwin(v5);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000041D8(&qword_1000862D0);
  __chkstk_darwin(v8);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000041D8(&qword_1000862D8);
  v33 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000041D8(&qword_1000862E0);
  __chkstk_darwin(v14);
  v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for WorldClockCity(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100004F30((uint64_t)v19);
  *(_QWORD *)v7 = static Alignment.center.getter(v20);
  *((_QWORD *)v7 + 1) = v21;
  v22 = sub_1000041D8(&qword_1000862E8);
  v23 = sub_100049A4C(v1, (uint64_t)v19, &v7[*(int *)(v22 + 44)]);
  v24 = static Alignment.center.getter(v23);
  _FrameLayout.init(width:height:alignment:)(v38, 0, 1, 0, 1, v24, v25);
  sub_10001DEA0((uint64_t)v7, (uint64_t)v10, &qword_1000862C8);
  v26 = &v10[*(int *)(v8 + 36)];
  v27 = v38[1];
  *(_OWORD *)v26 = v38[0];
  *((_OWORD *)v26 + 1) = v27;
  *((_OWORD *)v26 + 2) = v38[2];
  v28 = sub_1000106A4((uint64_t)v7, &qword_1000862C8);
  static AccessibilityChildBehavior.combine.getter(v28);
  v29 = sub_100051038();
  View.accessibilityElement(children:)(v4, v8, v29);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v4, v35);
  sub_1000106A4((uint64_t)v10, &qword_1000862D0);
  v30 = *(unsigned __int8 *)(v1 + *(int *)(type metadata accessor for ClockCircularAnalogueComplication(0) + 32));
  v37[0] = v8;
  v37[1] = v29;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v37, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  View.accessibilityHidden(_:)(v30, v11, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v13, v11);
  sub_10001DE5C((uint64_t)v16, v36, &qword_1000862E0);
  return sub_10000D330((uint64_t)v19, type metadata accessor for WorldClockCity);
}

uint64_t sub_100049A4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  double v35;
  char v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  void (*v61)(char *, char *, uint64_t);
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  int *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(char *, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v84 = a2;
  v80 = a3;
  v4 = (int *)type metadata accessor for Clock(0);
  v5 = __chkstk_darwin(v4);
  v81 = (uint64_t)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (char *)&v73 - v7;
  v9 = sub_1000041D8(&qword_1000879D0);
  __chkstk_darwin(v9);
  v11 = (char *)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = sub_1000041D8(&qword_1000879D8);
  __chkstk_darwin(v73);
  v13 = (char *)&v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000041D8(&qword_1000879E0);
  v15 = __chkstk_darwin(v14);
  v79 = (uint64_t)&v73 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v86 = (uint64_t)&v73 - v17;
  v18 = type metadata accessor for Image.ResizingMode(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v73 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = type metadata accessor for AccessoryWidgetBackground(0);
  v85 = *(_QWORD *)(v78 - 8);
  v22 = __chkstk_darwin(v78);
  v77 = (char *)&v73 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v76 = (char *)&v73 - v25;
  AccessoryWidgetBackground.init()(v24);
  v26 = type metadata accessor for ClockCircularAnalogueComplication(0);
  v82 = 0;
  v83 = v26;
  v27 = 0;
  v74 = *(int *)(v26 + 28);
  if ((*(_BYTE *)(a1 + v74) & 1) == 0)
  {
    v28 = Image.init(_:bundle:)(0x736B636974, 0xE500000000000000, 0);
    (*(void (**)(char *, _QWORD, uint64_t))(v19 + 104))(v21, enum case for Image.ResizingMode.stretch(_:), v18);
    v82 = Image.resizable(capInsets:resizingMode:)(v21, v28, 0.0, 0.0, 0.0, 0.0);
    swift_release(v28);
    v26 = (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v21, v18);
    v27 = 0x3FE8000000000000;
  }
  v75 = v27;
  *(_QWORD *)v11 = static HorizontalAlignment.center.getter(v26);
  *((_QWORD *)v11 + 1) = 0;
  v11[16] = 1;
  v29 = sub_1000041D8(&qword_1000879E8);
  sub_10004A0D4(a1, v84, (uint64_t)&v11[*(int *)(v29 + 44)]);
  v30 = (_QWORD *)(a1 + *(int *)(v83 + 24));
  v32 = v30[3];
  v31 = v30[4];
  sub_100050938(v30, v32);
  v33 = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 24))(v32, v31);
  v35 = v34 * 0.446;
  v36 = static Edge.Set.all.getter(v33);
  sub_10001DEA0((uint64_t)v11, (uint64_t)v13, &qword_1000879D0);
  v37 = &v13[*(int *)(v73 + 36)];
  *v37 = v36;
  *((_QWORD *)v37 + 1) = 0;
  *((_QWORD *)v37 + 2) = 0;
  *((double *)v37 + 3) = v35;
  *((_QWORD *)v37 + 4) = 0;
  v37[40] = 0;
  sub_1000106A4((uint64_t)v11, &qword_1000879D0);
  v38 = v30[3];
  v39 = v30[4];
  sub_100050938(v30, v38);
  v40 = (*(double (**)(uint64_t, uint64_t))(v39 + 24))(v38, v39);
  v41 = v30[3];
  v42 = v30[4];
  sub_100050938(v30, v41);
  v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 24))(v41, v42);
  v45 = v44;
  v46 = static Alignment.center.getter(v43);
  v47 = v79;
  sub_10002793C(0.0, 1, 0.0, 1, v40, 0, 0.0, 1, v79, 0.0, 1, v45, 0, v46, v48, &qword_1000879D8, &qword_1000879E0);
  sub_1000106A4((uint64_t)v13, &qword_1000879D8);
  v49 = v86;
  sub_10001DE5C(v47, v86, &qword_1000879E0);
  sub_100008130((uint64_t)&v8[v4[5]]);
  sub_10004FB84((uint64_t)v30, (uint64_t)&v8[v4[6]]);
  LOBYTE(v30) = *(_BYTE *)(a1 + v74);
  v50 = &v8[v4[8]];
  v51 = type metadata accessor for Date(0);
  v52 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v50, 1, 1, v51);
  LOBYTE(v41) = *(_BYTE *)(a1 + *(int *)(v83 + 32));
  v53 = static Color.white.getter(v52);
  v54 = static Color.black.getter(v53);
  v55 = static Color.white.getter(v54);
  static WidgetRenderingMode.fullColor.getter(v55);
  *v8 = 1;
  v8[v4[7]] = (_BYTE)v30;
  v8[v4[9]] = v41;
  v8[v4[10]] = 0;
  v56 = &v8[v4[11]];
  *(_OWORD *)v56 = xmmword_10006CAD0;
  *((_QWORD *)v56 + 2) = 0x3FA999999999999ALL;
  *((_QWORD *)v56 + 3) = v53;
  *((_QWORD *)v56 + 4) = v54;
  v56[40] = 0;
  *((_QWORD *)v56 + 6) = v55;
  *((_QWORD *)v56 + 7) = 0;
  v8[v4[12]] = 0;
  v8[v4[13]] = 1;
  v57 = &v8[v4[15]];
  v58 = type metadata accessor for ClockWidgetEnvironmentObject(0);
  v59 = sub_10000D36C((unint64_t *)&qword_100085240, type metadata accessor for ClockWidgetEnvironmentObject, (uint64_t)&unk_10006DF68);
  *(_QWORD *)v57 = Environment.init<A>(_:)(v58, v58, v59);
  v57[8] = v60 & 1;
  v61 = *(void (**)(char *, char *, uint64_t))(v85 + 16);
  v62 = v76;
  v63 = v77;
  v64 = v78;
  v61(v77, v76, v78);
  sub_10001DEA0(v49, v47, &qword_1000879E0);
  v65 = v81;
  sub_10000DF30((uint64_t)v8, v81, type metadata accessor for Clock);
  v66 = v80;
  v61(v80, v63, v64);
  v67 = (int *)sub_1000041D8(&qword_1000879F0);
  v68 = (uint64_t *)&v66[v67[12]];
  v69 = v82;
  v70 = v75;
  *v68 = v82;
  v68[1] = v70;
  sub_10001DEA0(v47, (uint64_t)&v66[v67[16]], &qword_1000879E0);
  sub_10000DF30(v65, (uint64_t)&v66[v67[20]], type metadata accessor for Clock);
  swift_retain(v69);
  sub_10000D330((uint64_t)v8, type metadata accessor for Clock);
  sub_1000106A4(v86, &qword_1000879E0);
  v71 = *(void (**)(char *, uint64_t))(v85 + 8);
  v71(v62, v64);
  sub_10000D330(v65, type metadata accessor for Clock);
  sub_1000106A4(v47, &qword_1000879E0);
  swift_release(v69);
  return ((uint64_t (*)(char *, uint64_t))v71)(v63, v64);
}

uint64_t sub_10004A0D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t KeyPath;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD v56[2];
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v6 = sub_1000041D8(&qword_100085E40);
  __chkstk_darwin(v6);
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(a1 + *(int *)(type metadata accessor for ClockCircularAnalogueComplication(0) + 28)) & 1) != 0)
  {
    v9 = sub_1000041D8(&qword_100087A28);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(a3, 1, 1, v9);
  }
  else
  {
    v53 = type metadata accessor for WorldClockCity(0);
    v11 = (uint64_t *)(a2 + *(int *)(v53 + 28));
    v12 = v11[1];
    v57 = *v11;
    v58 = v12;
    v13 = sub_10000D9FC();
    v54 = v13;
    swift_bridgeObjectRetain(v12);
    v14 = Text.init<A>(_:)(&v57, &type metadata for String, v13);
    v52 = a2;
    v16 = v15;
    v18 = v17;
    v20 = v19 & 1;
    v21 = static Font.Weight.semibold.getter(v14);
    v22 = Text.fontWeight(_:)(*(_QWORD *)&v21, 0, v14, v16, v20, v18);
    v51 = v23;
    v55 = v24;
    v50 = v25 & 1;
    sub_100010E24(v14, v16, v20);
    swift_bridgeObjectRelease(v18);
    KeyPath = swift_getKeyPath(&unk_10006CD10);
    v47 = KeyPath;
    v27 = swift_getKeyPath(&unk_10006CC80);
    v48 = static Color.white.getter(v27);
    v46 = swift_getKeyPath(&unk_10006CC50);
    v28 = static Font.Weight.thin.getter();
    v29 = enum case for Font.Design.default(_:);
    v30 = type metadata accessor for Font.Design(0);
    v49 = a3;
    v31 = *(_QWORD *)(v30 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v31 + 104))(v8, v29, v30);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v8, 0, 1, v30);
    v32 = static Font.system(size:weight:design:)(*(_QWORD *)&v28, 0, v8, 10.0);
    v45 = v32;
    sub_1000106A4((uint64_t)v8, &qword_100085E40);
    v33 = swift_getKeyPath(&unk_10006CC20);
    v34 = v22;
    v57 = v22;
    v35 = v51;
    v58 = v51;
    LOBYTE(v18) = v50;
    v59 = v50;
    v60 = v55;
    v61 = KeyPath;
    v62 = 1;
    v63 = 0;
    v64 = v27;
    v65 = 0x3FE3333333333333;
    v36 = v46;
    v37 = v48;
    v66 = v46;
    v67 = v48;
    v68 = v33;
    v69 = v32;
    v38 = (uint64_t *)(v52 + *(int *)(v53 + 24));
    v40 = *v38;
    v39 = v38[1];
    v56[0] = v40;
    v56[1] = v39;
    v41 = sub_1000041D8(&qword_1000879F8);
    v42 = sub_100065958();
    v43 = v49;
    View.accessibilityLabel<A>(_:)(v56, v41, &type metadata for String, v42, v54);
    sub_100010E24(v34, v35, v18);
    swift_release(v45);
    swift_release(v33);
    swift_release(v37);
    swift_release(v36);
    swift_release(v27);
    swift_release(v47);
    swift_bridgeObjectRelease(v55);
    v44 = sub_1000041D8(&qword_100087A28);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v43, 0, 1, v44);
  }
}

double sub_10004A458@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double result;

  v2 = static Color.white.getter();
  v3 = static Color.black.getter();
  v4 = static Color.white.getter();
  result = 0.1;
  *(_OWORD *)a1 = xmmword_10006CAD0;
  *(_QWORD *)(a1 + 16) = 0x3FA999999999999ALL;
  *(_QWORD *)(a1 + 24) = v2;
  *(_QWORD *)(a1 + 32) = v3;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 56) = 0;
  return result;
}

uint64_t sub_10004A4B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, uint64_t a7@<X8>)
{
  int *v13;
  uint64_t result;

  sub_1000106E0(a1, a7, type metadata accessor for WorldClockEntry);
  v13 = (int *)type metadata accessor for ClockCircularAnalogueComplication(0);
  sub_10001DE5C(a2, a7 + v13[5], &qword_100085AD0);
  result = sub_10003928C(a3, a7 + v13[6]);
  *(_BYTE *)(a7 + v13[7]) = a4;
  *(_BYTE *)(a7 + v13[8]) = a5;
  *(_BYTE *)(a7 + v13[9]) = a6;
  return result;
}

uint64_t sub_10004A560@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for ClockCircularDigitalComplication(0) + 20);
  return sub_10004FB84(v3, a1);
}

uint64_t sub_10004A590()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ClockCircularDigitalComplication(0) + 24));
}

uint64_t sub_10004A5B0(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ClockCircularDigitalComplication(0);
  *(_BYTE *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*sub_10004A5DC())()
{
  type metadata accessor for ClockCircularDigitalComplication(0);
  return nullsub_1;
}

uint64_t sub_10004A604()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ClockCircularDigitalComplication(0) + 28));
}

uint64_t sub_10004A624(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ClockCircularDigitalComplication(0);
  *(_BYTE *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*sub_10004A650())()
{
  type metadata accessor for ClockCircularDigitalComplication(0);
  return nullsub_1;
}

uint64_t sub_10004A678()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ClockCircularDigitalComplication(0) + 32));
}

uint64_t sub_10004A698(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ClockCircularDigitalComplication(0);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*sub_10004A6C4())()
{
  type metadata accessor for ClockCircularDigitalComplication(0);
  return nullsub_1;
}

uint64_t sub_10004A6F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t KeyPath;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;

  v28 = a1;
  v1 = type metadata accessor for WorldClockCity(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v29[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100004F30((uint64_t)v3);
  v4 = (uint64_t *)&v3[*(int *)(v1 + 28)];
  v5 = *v4;
  v6 = v4[1];
  swift_bridgeObjectRetain(v6);
  sub_10000D330((uint64_t)v3, type metadata accessor for WorldClockCity);
  v30 = v5;
  v31 = v6;
  v7 = sub_10000D9FC();
  v8 = Text.init<A>(_:)(&v30, &type metadata for String, v7);
  v10 = v9;
  v12 = v11;
  v14 = v13;
  KeyPath = swift_getKeyPath(&unk_10006CD10);
  v16 = static Font.caption.getter(KeyPath);
  v17 = swift_getKeyPath(&unk_10006CC20);
  v30 = v8;
  v31 = v10;
  v32 = v12 & 1;
  v33 = v14;
  v34 = KeyPath;
  v35 = 1;
  v36 = 0;
  v37 = v17;
  v38 = v16;
  sub_100004F30((uint64_t)v3);
  v18 = &v3[*(int *)(v1 + 24)];
  v20 = *(_QWORD *)v18;
  v19 = *((_QWORD *)v18 + 1);
  swift_bridgeObjectRetain(v19);
  sub_10000D330((uint64_t)v3, type metadata accessor for WorldClockCity);
  v29[0] = v20;
  v29[1] = v19;
  v21 = sub_1000041D8(&qword_100086300);
  v22 = sub_1000510D0();
  View.accessibilityLabel<A>(_:)(v29, v21, &type metadata for String, v22, v7);
  swift_bridgeObjectRelease(v19);
  v23 = v33;
  v24 = v34;
  v25 = v37;
  v26 = v38;
  sub_100010E24(v30, v31, v32);
  swift_release(v25);
  swift_release(v24);
  swift_bridgeObjectRelease(v23);
  return swift_release(v26);
}

uint64_t sub_10004A8B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t KeyPath;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  char v43;

  v2 = type metadata accessor for WorldClockCity(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000041D8(&qword_100084848);
  __chkstk_darwin(v5);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Locale(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100023A5C();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v12, v8);
  v13 = sub_100023A80();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if ((v13 & 1) != 0)
  {
    v36 = 0;
    v37 = 1;
    result = _ConditionalContent<>.init(storage:)(&v36, &type metadata for AnyView, &type metadata for EmptyView, &protocol witness table for AnyView, &protocol witness table for EmptyView);
  }
  else
  {
    sub_100004F30((uint64_t)v4);
    sub_100008130((uint64_t)v7);
    sub_10000D330((uint64_t)v4, type metadata accessor for WorldClockCity);
    v15 = type metadata accessor for TimeZone(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v7, 0, 1, v15);
    v16 = Text.init(dateFormat:timeZone:)(97, 0xE100000000000000, v7);
    v18 = v17;
    v20 = v19;
    v22 = v21 & 1;
    v23 = static Font.caption.getter(v16);
    v24 = Text.font(_:)(v23, v16, v18, v22, v20);
    v26 = v25;
    v28 = v27;
    v30 = v29;
    swift_release(v23);
    sub_100010E24(v16, v18, v22);
    swift_bridgeObjectRelease(v20);
    KeyPath = swift_getKeyPath(&unk_10006CCE0);
    v38 = v24;
    v39 = v26;
    v40 = v28 & 1;
    v41 = v30;
    v42 = KeyPath;
    v43 = 1;
    sub_1000511D8(v24, v26, v28 & 1);
    swift_bridgeObjectRetain(v30);
    swift_retain(KeyPath);
    v32 = sub_1000041D8(&qword_100086330);
    v33 = sub_1000511E8();
    v36 = AnyView.init<A>(_:)(&v38, v32, v33);
    v37 = 0;
    _ConditionalContent<>.init(storage:)(&v36, &type metadata for AnyView, &type metadata for EmptyView, &protocol witness table for AnyView, &protocol witness table for EmptyView);
    sub_100010E24(v24, v26, v28 & 1);
    swift_release(KeyPath);
    result = swift_bridgeObjectRelease(v30);
  }
  v34 = v39;
  *(_QWORD *)a1 = v38;
  *(_BYTE *)(a1 + 8) = v34;
  return result;
}

uint64_t sub_10004AB98@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t KeyPath;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t OpaqueTypeConformance2;
  _QWORD v33[2];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[2];
  _OWORD v39[3];

  v2 = v1;
  v37 = a1;
  v3 = type metadata accessor for AccessibilityChildBehavior(0);
  v35 = *(_QWORD *)(v3 - 8);
  v36 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000041D8(&qword_100086340);
  __chkstk_darwin(v6);
  v8 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000041D8(&qword_100086348);
  __chkstk_darwin(v9);
  v11 = (char *)v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000041D8(&qword_100086350);
  __chkstk_darwin(v12);
  v14 = (char *)v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000041D8(&qword_100086358);
  v34 = *(_QWORD *)(v15 - 8);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v8 = static Alignment.center.getter(v16);
  *((_QWORD *)v8 + 1) = v19;
  v20 = sub_1000041D8(&qword_100086360);
  sub_10004AE70(v2, &v8[*(int *)(v20 + 44)]);
  KeyPath = swift_getKeyPath(&unk_10006CC80);
  sub_10001DEA0((uint64_t)v8, (uint64_t)v11, &qword_100086340);
  v22 = (uint64_t *)&v11[*(int *)(v9 + 36)];
  *v22 = KeyPath;
  v22[1] = 0x3FE8000000000000;
  v23 = sub_1000106A4((uint64_t)v8, &qword_100086340);
  v24 = static Alignment.center.getter(v23);
  _FrameLayout.init(width:height:alignment:)(v39, 0, 1, 0, 1, v24, v25);
  sub_10001DEA0((uint64_t)v11, (uint64_t)v14, &qword_100086348);
  v26 = &v14[*(int *)(v12 + 36)];
  v27 = v39[1];
  *(_OWORD *)v26 = v39[0];
  *((_OWORD *)v26 + 1) = v27;
  *((_OWORD *)v26 + 2) = v39[2];
  v28 = sub_1000106A4((uint64_t)v11, &qword_100086348);
  static AccessibilityChildBehavior.combine.getter(v28);
  v29 = sub_10005126C();
  View.accessibilityElement(children:)(v5, v12, v29);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v5, v36);
  sub_1000106A4((uint64_t)v14, &qword_100086350);
  v30 = *(unsigned __int8 *)(v33[1] + *(int *)(type metadata accessor for ClockCircularDigitalComplication(0) + 28));
  v38[0] = v12;
  v38[1] = v29;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v38, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  View.accessibilityHidden(_:)(v30, v15, OpaqueTypeConformance2);
  return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v18, v15);
}

uint64_t sub_10004AE70@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v24;

  v4 = sub_1000041D8(&qword_100087980);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v24 - v8;
  v10 = type metadata accessor for AccessoryWidgetBackground(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v24 - v16;
  v18 = AccessoryWidgetBackground.init()(v15);
  *(_QWORD *)v9 = static HorizontalAlignment.center.getter(v18);
  *((_QWORD *)v9 + 1) = 0;
  v9[16] = 0;
  v19 = sub_1000041D8(&qword_100087988);
  sub_10004B018(a1, &v9[*(int *)(v19 + 44)]);
  v20 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  v20(v14, v17, v10);
  sub_10001DEA0((uint64_t)v9, (uint64_t)v7, &qword_100087980);
  v20(a2, v14, v10);
  v21 = sub_1000041D8(&qword_100087990);
  sub_10001DEA0((uint64_t)v7, (uint64_t)&a2[*(int *)(v21 + 48)], &qword_100087980);
  sub_1000106A4((uint64_t)v9, &qword_100087980);
  v22 = *(void (**)(char *, uint64_t))(v11 + 8);
  v22(v17, v10);
  sub_1000106A4((uint64_t)v7, &qword_100087980);
  return ((uint64_t (*)(char *, uint64_t))v22)(v14, v10);
}

uint64_t sub_10004B018@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  int v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t KeyPath;
  uint64_t v69;
  char *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  int *v94;
  char *v95;
  char *v97;
  void (*v98)(char *, uint64_t, uint64_t);
  uint64_t v99;
  void (*v100)(char *, uint64_t);
  char *v101;
  char *v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  char *v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  char v119;

  v116 = a2;
  v117 = a1;
  v112 = sub_1000041D8(&qword_100087998);
  __chkstk_darwin(v112);
  v113 = (char **)((char *)&v97 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v3 = sub_1000041D8(&qword_1000879A0);
  v4 = __chkstk_darwin(v3);
  v115 = (uint64_t)&v97 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v114 = (char *)&v97 - v6;
  v105 = sub_1000041D8(&qword_1000878B8);
  __chkstk_darwin(v105);
  v108 = (uint64_t *)((char *)&v97 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for WorldClockCity(0);
  __chkstk_darwin(v8);
  v99 = (uint64_t)&v97 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000041D8(&qword_100084848);
  __chkstk_darwin(v10);
  v12 = (char *)&v97 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = sub_1000041D8(&qword_1000879A8);
  v13 = __chkstk_darwin(v107);
  v102 = (char *)&v97 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v106 = (uint64_t)&v97 - v15;
  v16 = sub_1000041D8(&qword_100087838);
  __chkstk_darwin(v16);
  v18 = (char *)&v97 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1000041D8(&qword_1000879B0);
  __chkstk_darwin(v19);
  v21 = (char *)&v97 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_1000041D8(&qword_1000879B8);
  v23 = __chkstk_darwin(v22);
  v111 = (uint64_t)&v97 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v26 = (char *)&v97 - v25;
  v27 = type metadata accessor for Locale(0);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = __chkstk_darwin(v27);
  v101 = (char *)&v97 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v32 = (char *)&v97 - v31;
  v33 = sub_100023A5C();
  v98 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 16);
  v98(v32, v33, v27);
  v34 = sub_100024B20();
  v35 = *(void (**)(char *, uint64_t))(v28 + 8);
  v103 = v27;
  v100 = v35;
  v35(v32, v27);
  v104 = v34;
  v109 = v16;
  v110 = v26;
  v97 = v18;
  if ((v34 & 1) != 0)
  {
    sub_10004A8B4((uint64_t)&v118);
    v39 = v119;
    *(_QWORD *)v21 = v118;
    v21[8] = v39;
    swift_storeEnumTagMultiPayload(v21, v19, 0);
    v40 = sub_1000041D8(&qword_100087848);
    v41 = sub_100064B98(&qword_100087840, &qword_100087848);
    v42 = sub_100064AE0();
    _ConditionalContent<>.init(storage:)(v21, v40, v16, v41, v42);
  }
  else
  {
    sub_10004A6F0((uint64_t)v18);
    sub_10001DEA0((uint64_t)v18, (uint64_t)v21, &qword_100087838);
    swift_storeEnumTagMultiPayload(v21, v19, 1);
    v36 = sub_1000041D8(&qword_100087848);
    v37 = sub_100064B98(&qword_100087840, &qword_100087848);
    v38 = sub_100064AE0();
    _ConditionalContent<>.init(storage:)(v21, v36, v16, v37, v38);
    sub_1000106A4((uint64_t)v18, &qword_100087838);
  }
  v43 = v99;
  sub_100004F30(v99);
  sub_100008130((uint64_t)v12);
  sub_10000D330(v43, type metadata accessor for WorldClockCity);
  v44 = type metadata accessor for TimeZone(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v12, 0, 1, v44);
  v45 = Text.init(dateFormatTemplate:timeZone:)(7171402, 0xE300000000000000, v12);
  v47 = v46;
  v49 = v48;
  v51 = v50 & 1;
  v52 = static Font.body.getter(v45);
  v53 = Text.font(_:)(v52, v45, v47, v51, v49);
  v55 = v54;
  LOBYTE(v43) = v56;
  v58 = v57;
  swift_release(v52);
  v59 = v43 & 1;
  sub_100010E24(v45, v47, v51);
  v60 = swift_bridgeObjectRelease(v49);
  v61 = static Font.Weight.medium.getter(v60);
  v62 = Text.fontWeight(_:)(*(_QWORD *)&v61, 0, v53, v55, v59, v58);
  v64 = v63;
  v66 = v65;
  LOBYTE(v51) = v67 & 1;
  sub_100010E24(v53, v55, v59);
  swift_bridgeObjectRelease(v58);
  KeyPath = swift_getKeyPath(&unk_10006CCE0);
  v69 = swift_getKeyPath(&unk_10006DEE8);
  v70 = v101;
  static Locale.autoupdatingCurrent.getter();
  v71 = v108;
  v72 = v103;
  v98((char *)v108 + *(int *)(v105 + 28), (uint64_t)v70, v103);
  *v71 = v69;
  v73 = v107;
  v74 = (uint64_t)v102;
  sub_10001DEA0((uint64_t)v71, (uint64_t)&v102[*(int *)(v107 + 36)], &qword_1000878B8);
  *(_QWORD *)v74 = v62;
  *(_QWORD *)(v74 + 8) = v64;
  *(_BYTE *)(v74 + 16) = v51;
  *(_QWORD *)(v74 + 24) = v66;
  *(_QWORD *)(v74 + 32) = KeyPath;
  *(_BYTE *)(v74 + 40) = 1;
  sub_1000511D8(v62, v64, v51);
  swift_bridgeObjectRetain(v66);
  swift_retain(KeyPath);
  sub_1000106A4((uint64_t)v71, &qword_1000878B8);
  v100(v70, v72);
  sub_100010E24(v62, v64, v51);
  swift_release(KeyPath);
  swift_bridgeObjectRelease(v66);
  v75 = v106;
  sub_10001DE5C(v74, v106, &qword_1000879A8);
  sub_10001DEA0(v75, v74, &qword_1000879A8);
  v76 = sub_1000658D4();
  v77 = AnyView.init<A>(_:)(v74, v73, v76);
  sub_1000106A4(v75, &qword_1000879A8);
  if ((v104 & 1) != 0)
  {
    v85 = (uint64_t)v97;
    sub_10004A6F0((uint64_t)v97);
    v86 = v113;
    sub_10001DEA0(v85, (uint64_t)v113, &qword_100087838);
    swift_storeEnumTagMultiPayload(v86, v112, 0);
    v87 = sub_1000041D8(&qword_100087848);
    v88 = sub_100064AE0();
    v89 = sub_100064B98(&qword_100087840, &qword_100087848);
    v84 = (uint64_t)v114;
    _ConditionalContent<>.init(storage:)(v86, v109, v87, v88, v89);
    sub_1000106A4(v85, &qword_100087838);
  }
  else
  {
    sub_10004A8B4((uint64_t)&v118);
    v78 = v119;
    v79 = v112;
    v80 = v113;
    *v113 = v118;
    *((_BYTE *)v80 + 8) = v78;
    swift_storeEnumTagMultiPayload(v80, v79, 1);
    v81 = sub_1000041D8(&qword_100087848);
    v82 = sub_100064AE0();
    v83 = sub_100064B98(&qword_100087840, &qword_100087848);
    v84 = (uint64_t)v114;
    _ConditionalContent<>.init(storage:)(v80, v109, v81, v82, v83);
  }
  v91 = (uint64_t)v110;
  v90 = v111;
  sub_10001DEA0((uint64_t)v110, v111, &qword_1000879B8);
  v92 = v115;
  sub_10001DEA0(v84, v115, &qword_1000879A0);
  v93 = v116;
  *v116 = 0;
  *((_BYTE *)v93 + 8) = 1;
  v94 = (int *)sub_1000041D8(&qword_1000879C8);
  sub_10001DEA0(v90, (uint64_t)v93 + v94[12], &qword_1000879B8);
  *(_QWORD *)((char *)v93 + v94[16]) = v77;
  sub_10001DEA0(v92, (uint64_t)v93 + v94[20], &qword_1000879A0);
  v95 = (char *)v93 + v94[24];
  *(_QWORD *)v95 = 0;
  v95[8] = 1;
  swift_retain(v77);
  sub_1000106A4(v84, &qword_1000879A0);
  sub_1000106A4(v91, &qword_1000879B8);
  sub_1000106A4(v92, &qword_1000879A0);
  swift_release(v77);
  return sub_1000106A4(v90, &qword_1000879B8);
}

uint64_t sub_10004B910@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, char a3@<W2>, char a4@<W3>, char a5@<W4>, uint64_t a6@<X8>)
{
  int *v11;
  uint64_t result;

  sub_1000106E0(a1, a6, type metadata accessor for WorldClockEntry);
  v11 = (int *)type metadata accessor for ClockCircularDigitalComplication(0);
  result = sub_10003928C(a2, a6 + v11[5]);
  *(_BYTE *)(a6 + v11[6]) = a3;
  *(_BYTE *)(a6 + v11[7]) = a4;
  *(_BYTE *)(a6 + v11[8]) = a5;
  return result;
}

uint64_t sub_10004B994@<X0>(uint64_t a1@<X8>)
{
  return sub_100039D54(type metadata accessor for AlarmComplicationCircularView, (uint64_t)type metadata accessor for AlarmEntry, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10000DF30, a1);
}

uint64_t sub_10004B9B0(uint64_t a1)
{
  return sub_10002FB2C(a1, type metadata accessor for AlarmComplicationCircularView, (uint64_t)type metadata accessor for AlarmEntry, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100017398);
}

uint64_t (*sub_10004B9CC())()
{
  type metadata accessor for AlarmComplicationCircularView(0);
  return nullsub_1;
}

uint64_t sub_10004B9F4@<X0>(uint64_t a1@<X8>)
{
  return sub_10002FBA8(type metadata accessor for AlarmComplicationCircularView, a1);
}

uint64_t sub_10004BA00()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AlarmComplicationCircularView(0) + 28));
}

uint64_t sub_10004BA20(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AlarmComplicationCircularView(0);
  *(_BYTE *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*sub_10004BA4C())()
{
  type metadata accessor for AlarmComplicationCircularView(0);
  return nullsub_1;
}

uint64_t sub_10004BA74()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AlarmComplicationCircularView(0) + 32));
}

uint64_t sub_10004BA94(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AlarmComplicationCircularView(0);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*sub_10004BAC0())()
{
  type metadata accessor for AlarmComplicationCircularView(0);
  return nullsub_1;
}

uint64_t sub_10004BAE8()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AlarmComplicationCircularView(0) + 36));
}

uint64_t sub_10004BB08(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AlarmComplicationCircularView(0);
  *(_BYTE *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*sub_10004BB34())()
{
  type metadata accessor for AlarmComplicationCircularView(0);
  return nullsub_1;
}

uint64_t sub_10004BB5C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD v29[2];
  _OWORD v30[3];

  v2 = v1;
  v29[1] = a1;
  v3 = type metadata accessor for AccessibilityChildBehavior(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000041D8(&qword_100086380);
  __chkstk_darwin(v7);
  v9 = (_QWORD *)((char *)v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_1000041D8(&qword_100086388);
  __chkstk_darwin(v10);
  v12 = (char *)v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000041D8(&qword_100086390);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v9 = static Alignment.center.getter(v14);
  v9[1] = v17;
  v18 = sub_1000041D8(&qword_100086398);
  sub_10004BD94(v2, (_BYTE *)v9 + *(int *)(v18 + 44));
  KeyPath = swift_getKeyPath(&unk_10006CC80);
  sub_10001DEA0((uint64_t)v9, (uint64_t)v12, &qword_100086380);
  v20 = (uint64_t *)&v12[*(int *)(v10 + 36)];
  *v20 = KeyPath;
  v20[1] = 0x3FE8000000000000;
  v21 = sub_1000106A4((uint64_t)v9, &qword_100086380);
  v22 = static Alignment.center.getter(v21);
  _FrameLayout.init(width:height:alignment:)(v30, 0, 1, 0, 1, v22, v23);
  sub_10001DEA0((uint64_t)v12, (uint64_t)v16, &qword_100086388);
  v24 = &v16[*(int *)(v13 + 36)];
  v25 = v30[1];
  *(_OWORD *)v24 = v30[0];
  *((_OWORD *)v24 + 1) = v25;
  *((_OWORD *)v24 + 2) = v30[2];
  v26 = sub_1000106A4((uint64_t)v12, &qword_100086388);
  static AccessibilityChildBehavior.combine.getter(v26);
  v27 = sub_100051388();
  View.accessibilityElement(children:)(v6, v13, v27);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return sub_1000106A4((uint64_t)v16, &qword_100086390);
}

uint64_t sub_10004BD94@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  _BYTE *v60;
  uint64_t v61;
  void (*v62)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v63;
  _BYTE *v64;
  _BYTE *v65;
  _BYTE *v66;
  uint64_t v67;
  void (*v68)(_BYTE *, uint64_t);
  _BYTE v70[12];
  int v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE *v74;
  _BYTE *v75;
  uint64_t v76;
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  uint64_t v81;
  _BYTE *v82;
  uint64_t v83;
  _BYTE *v84;
  _BYTE *v85;
  uint64_t v86;
  char v87;
  _BYTE *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned __int8 v93;
  uint64_t v94;
  uint64_t v95;
  char v96;

  v85 = a2;
  v83 = sub_1000041D8(&qword_1000863F0);
  __chkstk_darwin(v83);
  v77 = &v70[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v78 = sub_1000041D8(&qword_100087950);
  __chkstk_darwin(v78);
  v5 = &v70[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_1000041D8(&qword_100087958);
  __chkstk_darwin(v6);
  v8 = &v70[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = sub_1000041D8(&qword_100087960);
  __chkstk_darwin(v9);
  v11 = &v70[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = sub_1000041D8(&qword_100087868);
  __chkstk_darwin(v12);
  v14 = &v70[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = sub_1000041D8(&qword_100087968);
  v16 = __chkstk_darwin(v15);
  v84 = &v70[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v16);
  v19 = &v70[-v18];
  v79 = type metadata accessor for AccessoryWidgetBackground(0);
  v81 = *(_QWORD *)(v79 - 8);
  v20 = __chkstk_darwin(v79);
  v82 = &v70[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v22 = __chkstk_darwin(v20);
  v80 = &v70[-v23];
  AccessoryWidgetBackground.init()(v22);
  v24 = a1 + *(int *)(type metadata accessor for AlarmComplicationCircularView(0) + 20);
  if (sub_10000C090())
  {
    sub_10004C3D0((uint64_t)v14);
    sub_10001DEA0((uint64_t)v14, (uint64_t)v8, &qword_100087868);
    swift_storeEnumTagMultiPayload(v8, v6, 0);
    v25 = sub_1000041D8(&qword_100087878);
    v26 = sub_100064CF8();
    v27 = sub_10001DDB4(&qword_100087870, &qword_100087878, (uint64_t)&protocol conformance descriptor for VStack<A>);
    _ConditionalContent<>.init(storage:)(v8, v12, v25, v26, v27);
    sub_10001DEA0((uint64_t)v11, (uint64_t)v5, &qword_100087960);
    swift_storeEnumTagMultiPayload(v5, v78, 0);
    v28 = sub_100065850();
    v29 = sub_100064E24();
    _ConditionalContent<>.init(storage:)(v5, v9, v83, v28, v29);
    sub_1000106A4((uint64_t)v11, &qword_100087960);
    v30 = (uint64_t)v14;
    v31 = &qword_100087868;
LABEL_6:
    sub_1000106A4(v30, v31);
    goto LABEL_7;
  }
  v73 = v12;
  v74 = v11;
  v75 = v5;
  v76 = v9;
  v32 = type metadata accessor for AlarmEntry(0);
  if (*(_BYTE *)(v24 + *(int *)(v32 + 68)) != 1)
  {
    v56 = (uint64_t)v77;
    sub_10004C714();
    v57 = (uint64_t)v75;
    sub_10001DEA0(v56, (uint64_t)v75, &qword_1000863F0);
    swift_storeEnumTagMultiPayload(v57, v78, 1);
    v58 = sub_100065850();
    v59 = sub_100064E24();
    _ConditionalContent<>.init(storage:)(v57, v76, v83, v58, v59);
    v30 = v56;
    v31 = &qword_1000863F0;
    goto LABEL_6;
  }
  v33 = static HorizontalAlignment.center.getter(v32);
  sub_10004DB9C((uint64_t)&v86);
  v34 = v86;
  v35 = v87;
  v37 = v88;
  v36 = v89;
  v39 = v90;
  v38 = v91;
  v40 = v92;
  v41 = v93;
  v43 = v94;
  v42 = v95;
  v44 = v96;
  *(_QWORD *)v8 = v33;
  *((_QWORD *)v8 + 1) = 0;
  v8[16] = 0;
  *((_QWORD *)v8 + 3) = v34;
  v8[32] = v35;
  *((_QWORD *)v8 + 5) = v37;
  *((_QWORD *)v8 + 6) = v36;
  v77 = v37;
  *((_QWORD *)v8 + 7) = v39;
  *((_QWORD *)v8 + 8) = v38;
  *((_QWORD *)v8 + 9) = v40;
  v72 = v40;
  v8[80] = v41;
  v71 = v41;
  *((_QWORD *)v8 + 11) = v43;
  *((_QWORD *)v8 + 12) = v42;
  v45 = v43;
  v8[104] = v44;
  swift_storeEnumTagMultiPayload(v8, v6, 1);
  swift_retain(v39);
  swift_retain(v37);
  v46 = v36;
  swift_retain(v36);
  v47 = v38;
  sub_1000511D8(v38, v40, v41);
  v48 = v45;
  swift_bridgeObjectRetain(v45);
  v49 = sub_1000041D8(&qword_100087878);
  v50 = sub_100064CF8();
  v51 = sub_10001DDB4(&qword_100087870, &qword_100087878, (uint64_t)&protocol conformance descriptor for VStack<A>);
  v52 = (uint64_t)v74;
  _ConditionalContent<>.init(storage:)(v8, v73, v49, v50, v51);
  v53 = (uint64_t)v75;
  sub_10001DEA0(v52, (uint64_t)v75, &qword_100087960);
  swift_storeEnumTagMultiPayload(v53, v78, 0);
  v54 = sub_100065850();
  v55 = sub_100064E24();
  _ConditionalContent<>.init(storage:)(v53, v76, v83, v54, v55);
  sub_1000106A4(v52, &qword_100087960);
  swift_release(v39);
  swift_release(v46);
  swift_release(v77);
  sub_100010E24(v47, v72, v71);
  swift_bridgeObjectRelease(v48);
LABEL_7:
  v61 = v81;
  v60 = v82;
  v62 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v81 + 16);
  v63 = v79;
  v64 = v80;
  v62(v82, v80, v79);
  v65 = v84;
  sub_10001DEA0((uint64_t)v19, (uint64_t)v84, &qword_100087968);
  v66 = v85;
  v62(v85, v60, v63);
  v67 = sub_1000041D8(&qword_100087978);
  sub_10001DEA0((uint64_t)v65, (uint64_t)&v66[*(int *)(v67 + 48)], &qword_100087968);
  sub_1000106A4((uint64_t)v19, &qword_100087968);
  v68 = *(void (**)(_BYTE *, uint64_t))(v61 + 8);
  v68(v64, v63);
  sub_1000106A4((uint64_t)v65, &qword_100087968);
  return ((uint64_t (*)(_BYTE *, uint64_t))v68)(v60, v63);
}

uint64_t sub_10004C3D0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27[2];

  v27[1] = a1;
  v1 = sub_1000041D8(&qword_1000863B8);
  __chkstk_darwin(v1);
  v3 = (char *)v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1000041D8(&qword_1000863C0);
  __chkstk_darwin(v4);
  v6 = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000041D8(&qword_1000863C8);
  __chkstk_darwin(v7);
  v9 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Locale(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100023A5C();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v14, v10);
  v15 = sub_100023A80();
  v16 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v17 = static HorizontalAlignment.center.getter(v16);
  if ((v15 & 1) != 0)
  {
    *(_QWORD *)v9 = v17;
    *((_QWORD *)v9 + 1) = 0;
    v9[16] = 0;
    v18 = sub_1000041D8(&qword_1000863E8);
    sub_10004D5FC(v27[0], &v9[*(int *)(v18 + 44)]);
    v19 = &qword_1000863C8;
    sub_10001DEA0((uint64_t)v9, (uint64_t)v6, &qword_1000863C8);
    swift_storeEnumTagMultiPayload(v6, v4, 0);
    v20 = sub_10001DDB4(&qword_1000863D8, &qword_1000863C8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    v21 = sub_10001DDB4(&qword_1000863E0, &qword_1000863B8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    _ConditionalContent<>.init(storage:)(v6, v7, v1, v20, v21);
    v22 = (uint64_t)v9;
  }
  else
  {
    *(_QWORD *)v3 = v17;
    *((_QWORD *)v3 + 1) = 0;
    v3[16] = 0;
    v23 = sub_1000041D8(&qword_1000863D0);
    sub_10004C920(&v3[*(int *)(v23 + 44)]);
    v19 = &qword_1000863B8;
    sub_10001DEA0((uint64_t)v3, (uint64_t)v6, &qword_1000863B8);
    swift_storeEnumTagMultiPayload(v6, v4, 1);
    v24 = sub_10001DDB4(&qword_1000863D8, &qword_1000863C8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    v25 = sub_10001DDB4(&qword_1000863E0, &qword_1000863B8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    _ConditionalContent<>.init(storage:)(v6, v7, v1, v24, v25);
    v22 = (uint64_t)v3;
  }
  return sub_1000106A4(v22, v19);
}

__n128 sub_10004C68C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __n128 result;
  __int128 v12;
  uint64_t v13;
  char v14;
  __n128 v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v3 = static HorizontalAlignment.center.getter(a1);
  sub_10004DB9C((uint64_t)&v13);
  v4 = v13;
  v5 = v14;
  v6 = v17;
  v7 = v18;
  v8 = v19;
  v9 = v20;
  v10 = v21;
  result = v15;
  v12 = v16;
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = v4;
  *(_BYTE *)(a2 + 32) = v5;
  *(__n128 *)(a2 + 40) = result;
  *(_OWORD *)(a2 + 56) = v12;
  *(_QWORD *)(a2 + 72) = v6;
  *(_BYTE *)(a2 + 80) = v7;
  *(_QWORD *)(a2 + 88) = v8;
  *(_QWORD *)(a2 + 96) = v9;
  *(_BYTE *)(a2 + 104) = v10;
  return result;
}

uint64_t sub_10004C714()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v0 = type metadata accessor for AccessibilityTraits(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1000041D8(&qword_1000863F0);
  __chkstk_darwin(v4);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AlarmComplicationCircularView(0);
  v7 = sub_10000C004();
  v8 = static Font.title.getter(v7);
  KeyPath = swift_getKeyPath(&unk_10006CC20);
  v18 = v7;
  v19 = KeyPath;
  v20 = v8;
  static AccessibilityTraits.isImage.getter();
  v10 = sub_1000041D8(&qword_1000863F8);
  v11 = sub_100051490();
  View.accessibilityRemoveTraits(_:)(v3, v10, v11);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  swift_release(v18);
  swift_release(v19);
  swift_release(v20);
  sub_10000C3F4(0);
  v13 = v12;
  v18 = v14;
  v19 = v12;
  v15 = sub_10000D9FC();
  ModifiedContent<>.accessibilityLabel<A>(_:)(&v18, v4, &type metadata for String, v15);
  swift_bridgeObjectRelease(v13);
  return sub_1000106A4((uint64_t)v6, &qword_1000863F0);
}

uint64_t sub_10004C8A8@<X0>(uint64_t a1@<X8>)
{
  return sub_10004C8D0(&qword_1000863E8, (uint64_t (*)(uint64_t))sub_10004D5FC, a1);
}

uint64_t sub_10004C8BC@<X0>(uint64_t a1@<X8>)
{
  return sub_10004C8D0(&qword_1000863D0, (uint64_t (*)(uint64_t))sub_10004C920, a1);
}

uint64_t sub_10004C8D0@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  *(_QWORD *)a3 = static HorizontalAlignment.center.getter(a1);
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 0;
  sub_1000041D8(a1);
  return a2(v3);
}

uint64_t sub_10004C920@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  uint64_t v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  _BYTE *v76;
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  _BYTE *v91;
  char v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t KeyPath;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  char v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _BYTE *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _BYTE *v143;
  uint64_t v144;
  uint64_t v145;
  _BYTE *v146;
  uint64_t v147;
  uint64_t v148;
  _BYTE *v149;
  _QWORD *v150;
  uint64_t v151;
  char *v152;
  _BYTE v154[12];
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _BYTE *v159;
  int v160;
  uint64_t v161;
  _BYTE *v162;
  uint64_t v163;
  _BYTE *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _BYTE *v168;
  uint64_t v169;
  _BYTE *v170;
  uint64_t v171;
  _BYTE *v172;
  _BYTE *v173;
  uint64_t v174;
  _QWORD *v175;
  _BYTE *v176;
  _BYTE *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;

  v175 = a1;
  v174 = sub_1000041D8(&qword_1000878E0);
  __chkstk_darwin(v174);
  v164 = &v154[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v169 = sub_1000041D8(&qword_1000878E8);
  __chkstk_darwin(v169);
  v173 = &v154[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v171 = sub_1000041D8(&qword_1000878F0);
  __chkstk_darwin(v171);
  v159 = &v154[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v166 = type metadata accessor for AccessibilityTraits(0);
  v165 = *(_QWORD *)(v166 - 8);
  __chkstk_darwin(v166);
  v5 = &v154[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v167 = sub_1000041D8(&qword_1000878F8);
  v6 = __chkstk_darwin(v167);
  v162 = &v154[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = __chkstk_darwin(v6);
  v168 = &v154[-v9];
  v10 = __chkstk_darwin(v8);
  v12 = &v154[-v11];
  __chkstk_darwin(v10);
  v14 = &v154[-v13];
  v15 = type metadata accessor for Locale(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = &v154[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = sub_1000041D8(&qword_100087900);
  v20 = __chkstk_darwin(v19);
  v172 = &v154[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v20);
  v170 = &v154[-v22];
  v23 = sub_100023A5C();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v16 + 16))(v18, v23, v15);
  v24 = sub_100024B20();
  (*(void (**)(_BYTE *, uint64_t))(v16 + 8))(v18, v15);
  type metadata accessor for AlarmComplicationCircularView(0);
  v176 = v12;
  v177 = v14;
  if ((v24 & 1) != 0)
  {
    v178 = sub_10000C230();
    v179 = v81;
    v82 = sub_10000D9FC();
    v83 = Text.init<A>(_:)(&v178, &type metadata for String, v82);
    v85 = v84;
    v87 = v86;
    v89 = v88 & 1;
    v90 = static Font.caption.getter(v83);
    v161 = Text.font(_:)(v90, v83, v85, v89, v87);
    v164 = v91;
    v93 = v92;
    v158 = v94;
    swift_release(v90);
    v160 = v93 & 1;
    sub_100010E24(v83, v85, v89);
    swift_bridgeObjectRelease(v87);
    v178 = sub_10000C1E0();
    v179 = v95;
    v96 = Text.init<A>(_:)(&v178, &type metadata for String, v82);
    v98 = v97;
    v100 = v99;
    v102 = v101 & 1;
    v103 = static Font.body.getter(v96);
    v163 = Text.font(_:)(v103, v96, v98, v102, v100);
    v156 = v104;
    LOBYTE(v89) = v105;
    v157 = v106;
    swift_release(v103);
    v155 = v89 & 1;
    sub_100010E24(v96, v98, v102);
    swift_bridgeObjectRelease(v100);
    v107 = sub_10000C004();
    KeyPath = swift_getKeyPath(&unk_10006CC80);
    v109 = static Font.caption.getter(KeyPath);
    v110 = swift_getKeyPath(&unk_10006CC20);
    v178 = v107;
    v179 = KeyPath;
    v180 = 0x3FECCCCCCCCCCCCDLL;
    v181 = v110;
    v182 = v109;
    static AccessibilityTraits.isImage.getter();
    v111 = sub_1000041D8(&qword_100087908);
    v112 = sub_100065748();
    v113 = (uint64_t)v162;
    View.accessibilityRemoveTraits(_:)(v5, v111, v112);
    (*(void (**)(_BYTE *, uint64_t))(v165 + 8))(v5, v166);
    swift_release(v178);
    swift_release(v179);
    swift_release(v181);
    swift_release(v182);
    v114 = LocalizedStringKey.init(stringLiteral:)(0x616C41207478654ELL, 0xEA00000000006D72);
    v115 = Text.init(_:tableName:bundle:comment:)(v114);
    v117 = v116;
    v119 = v118;
    v121 = v120 & 1;
    v122 = (uint64_t)v168;
    v123 = v167;
    ModifiedContent<>.accessibilityLabel(_:)();
    sub_100010E24(v115, v117, v121);
    swift_bridgeObjectRelease(v119);
    sub_1000106A4(v113, &qword_1000878F8);
    v124 = (uint64_t)v176;
    ModifiedContent<>.accessibilitySortPriority(_:)(v123, 1.0);
    sub_1000106A4(v122, &qword_1000878F8);
    v125 = v124;
    v126 = v124;
    v127 = (uint64_t)v177;
    sub_10001DE5C(v126, (uint64_t)v177, &qword_1000878F8);
    LOBYTE(v123) = v160;
    LOBYTE(v178) = v160;
    v128 = (uint64_t)v159;
    sub_10001DEA0(v127, v125, &qword_1000878F8);
    v129 = v161;
    v130 = v164;
    *(_QWORD *)v128 = v161;
    *(_QWORD *)(v128 + 8) = v130;
    *(_BYTE *)(v128 + 16) = v123;
    v131 = v158;
    v132 = v163;
    *(_QWORD *)(v128 + 24) = v158;
    *(_QWORD *)(v128 + 32) = v132;
    v133 = v156;
    *(_QWORD *)(v128 + 40) = v156;
    v134 = v155;
    *(_BYTE *)(v128 + 48) = v155;
    v135 = v157;
    *(_QWORD *)(v128 + 56) = v157;
    v136 = sub_1000041D8(&qword_100087948);
    sub_10001DEA0(v125, v128 + *(int *)(v136 + 64), &qword_1000878F8);
    v137 = v129;
    v138 = (uint64_t)v130;
    LOBYTE(v130) = v123;
    sub_1000511D8(v129, v138, v123);
    v139 = v131;
    swift_bridgeObjectRetain(v131);
    v140 = v133;
    LOBYTE(v131) = v134;
    sub_1000511D8(v132, v133, v134);
    swift_bridgeObjectRetain(v135);
    v141 = v137;
    v142 = v137;
    v143 = v164;
    sub_1000511D8(v142, (uint64_t)v164, (char)v130);
    swift_bridgeObjectRetain(v139);
    v144 = v163;
    sub_1000511D8(v163, v133, v134);
    swift_bridgeObjectRetain(v135);
    sub_1000106A4((uint64_t)v176, &qword_1000878F8);
    sub_100010E24(v144, v133, v134);
    swift_bridgeObjectRelease(v135);
    sub_100010E24(v141, (uint64_t)v143, v178);
    v145 = v139;
    swift_bridgeObjectRelease(v139);
    v146 = v173;
    sub_10001DEA0(v128, (uint64_t)v173, &qword_1000878F0);
    swift_storeEnumTagMultiPayload(v146, v169, 0);
    v147 = sub_10001DDB4(&qword_100087930, &qword_1000878F0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v148 = sub_10001DDB4(&qword_100087938, &qword_1000878E0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v80 = (uint64_t)v170;
    _ConditionalContent<>.init(storage:)(v146, v171, v174, v147, v148);
    sub_1000106A4(v128, &qword_1000878F0);
    sub_1000106A4((uint64_t)v177, &qword_1000878F8);
    sub_100010E24(v163, v140, v131);
    swift_bridgeObjectRelease(v135);
    sub_100010E24(v161, (uint64_t)v164, v160);
    swift_bridgeObjectRelease(v145);
  }
  else
  {
    v25 = sub_10000C004();
    v26 = swift_getKeyPath(&unk_10006CC80);
    v27 = static Font.caption.getter(v26);
    v28 = swift_getKeyPath(&unk_10006CC20);
    v178 = v25;
    v179 = v26;
    v180 = 0x3FECCCCCCCCCCCCDLL;
    v181 = v28;
    v182 = v27;
    static AccessibilityTraits.isImage.getter();
    v29 = sub_1000041D8(&qword_100087908);
    v30 = sub_100065748();
    v31 = (uint64_t)v168;
    View.accessibilityRemoveTraits(_:)(v5, v29, v30);
    (*(void (**)(_BYTE *, uint64_t))(v165 + 8))(v5, v166);
    swift_release(v178);
    swift_release(v179);
    swift_release(v181);
    swift_release(v182);
    v32 = LocalizedStringKey.init(stringLiteral:)(0x616C41207478654ELL, 0xEA00000000006D72);
    v33 = Text.init(_:tableName:bundle:comment:)(v32);
    v35 = v34;
    v37 = v36;
    v39 = v38 & 1;
    ModifiedContent<>.accessibilityLabel(_:)();
    sub_100010E24(v33, v35, v39);
    swift_bridgeObjectRelease(v37);
    sub_1000106A4(v31, &qword_1000878F8);
    sub_10001DE5C((uint64_t)v12, (uint64_t)v14, &qword_1000878F8);
    v178 = sub_10000C1E0();
    v179 = v40;
    v41 = sub_10000D9FC();
    v42 = Text.init<A>(_:)(&v178, &type metadata for String, v41);
    v44 = v43;
    v46 = v45;
    v48 = v47 & 1;
    v49 = static Font.body.getter(v42);
    v167 = Text.font(_:)(v49, v42, v44, v48, v46);
    v166 = v50;
    v52 = v51;
    v168 = v53;
    swift_release(v49);
    LODWORD(v49) = v52 & 1;
    sub_100010E24(v42, v44, v48);
    swift_bridgeObjectRelease(v46);
    v178 = sub_10000C230();
    v179 = v54;
    v55 = Text.init<A>(_:)(&v178, &type metadata for String, v41);
    v57 = v56;
    v59 = v58;
    v61 = v60 & 1;
    v62 = static Font.caption.getter(v55);
    v63 = Text.font(_:)(v62, v55, v57, v61, v59);
    v65 = v64;
    LOBYTE(v31) = v66;
    v68 = v67;
    swift_release(v62);
    LOBYTE(v62) = v31 & 1;
    sub_100010E24(v55, v57, v61);
    swift_bridgeObjectRelease(v59);
    v69 = (uint64_t)v176;
    sub_10001DEA0((uint64_t)v177, (uint64_t)v176, &qword_1000878F8);
    LODWORD(v61) = v49;
    LOBYTE(v178) = v49;
    v70 = v164;
    sub_10001DEA0(v69, (uint64_t)v164, &qword_1000878F8);
    v71 = sub_1000041D8(&qword_100087928);
    v72 = &v70[*(int *)(v71 + 48)];
    v73 = v167;
    v74 = v166;
    *(_QWORD *)v72 = v167;
    *((_QWORD *)v72 + 1) = v74;
    v72[16] = v61;
    v75 = v168;
    *((_QWORD *)v72 + 3) = v168;
    v76 = &v70[*(int *)(v71 + 64)];
    *(_QWORD *)v76 = v63;
    *((_QWORD *)v76 + 1) = v65;
    v76[16] = v62;
    *((_QWORD *)v76 + 3) = v68;
    LODWORD(v165) = v61;
    sub_1000511D8(v73, v74, v61);
    swift_bridgeObjectRetain(v75);
    sub_1000511D8(v63, v65, v62);
    swift_bridgeObjectRetain(v68);
    sub_1000511D8(v73, v74, v61);
    swift_bridgeObjectRetain(v75);
    sub_1000511D8(v63, v65, v62);
    swift_bridgeObjectRetain(v68);
    sub_100010E24(v63, v65, v62);
    swift_bridgeObjectRelease(v68);
    sub_100010E24(v73, v74, v178);
    swift_bridgeObjectRelease(v75);
    sub_1000106A4((uint64_t)v176, &qword_1000878F8);
    v77 = v173;
    sub_10001DEA0((uint64_t)v70, (uint64_t)v173, &qword_1000878E0);
    swift_storeEnumTagMultiPayload(v77, v169, 1);
    v78 = sub_10001DDB4(&qword_100087930, &qword_1000878F0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v79 = sub_10001DDB4(&qword_100087938, &qword_1000878E0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v80 = (uint64_t)v170;
    _ConditionalContent<>.init(storage:)(v77, v171, v174, v78, v79);
    sub_1000106A4((uint64_t)v70, &qword_1000878E0);
    sub_100010E24(v63, v65, v62);
    swift_bridgeObjectRelease(v68);
    sub_100010E24(v167, v166, v165);
    swift_bridgeObjectRelease(v168);
    sub_1000106A4((uint64_t)v177, &qword_1000878F8);
  }
  v149 = v172;
  sub_10001DEA0(v80, (uint64_t)v172, &qword_100087900);
  v150 = v175;
  *v175 = 0;
  *((_BYTE *)v150 + 8) = 1;
  v151 = sub_1000041D8(&qword_100087940);
  sub_10001DEA0((uint64_t)v149, (uint64_t)v150 + *(int *)(v151 + 48), &qword_100087900);
  v152 = (char *)v150 + *(int *)(v151 + 64);
  *(_QWORD *)v152 = 0;
  v152[8] = 1;
  sub_1000106A4(v80, &qword_100087900);
  return sub_1000106A4((uint64_t)v149, &qword_100087900);
}

uint64_t sub_10004D5FC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t KeyPath;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  int *v39;
  char *v40;
  char *v41;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;

  v44 = a1;
  v45 = a2;
  v2 = type metadata accessor for AccessibilityTraits(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000041D8(&qword_1000863F0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v43 - v11;
  __chkstk_darwin(v10);
  v46 = (uint64_t)&v43 - v13;
  type metadata accessor for AlarmComplicationCircularView(0);
  v14 = sub_10000C004();
  v15 = static Font.caption.getter(v14);
  KeyPath = swift_getKeyPath(&unk_10006CC20);
  v47 = v14;
  v48 = KeyPath;
  v49 = v15;
  static AccessibilityTraits.isImage.getter();
  v17 = sub_1000041D8(&qword_1000863F8);
  v18 = sub_100051490();
  View.accessibilityRemoveTraits(_:)(v5, v17, v18);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  swift_release(v47);
  swift_release(v48);
  swift_release(v49);
  v19 = LocalizedStringKey.init(stringLiteral:)(0x616C41207478654ELL, 0xEA00000000006D72);
  v20 = Text.init(_:tableName:bundle:comment:)(v19);
  v22 = v21;
  v24 = v23;
  v26 = v25 & 1;
  ModifiedContent<>.accessibilityLabel(_:)();
  sub_100010E24(v20, v22, v26);
  swift_bridgeObjectRelease(v24);
  sub_1000106A4((uint64_t)v9, &qword_1000863F0);
  v27 = (uint64_t)v12;
  v28 = (uint64_t)v12;
  v29 = v46;
  sub_10001DE5C(v27, v46, &qword_1000863F0);
  v30 = sub_10004D958(v44, (uint64_t)&v47);
  v31 = v47;
  v32 = v48;
  v33 = v49;
  v34 = v50;
  LOBYTE(v22) = v51;
  v35 = static Font.body.getter(v30);
  v36 = swift_getKeyPath(&unk_10006CC20);
  v37 = v28;
  v43 = v28;
  sub_10001DEA0(v29, v28, &qword_1000863F0);
  v38 = v45;
  *v45 = 0;
  *((_BYTE *)v38 + 8) = 1;
  v39 = (int *)sub_1000041D8(&qword_1000878D8);
  sub_10001DEA0(v37, (uint64_t)v38 + v39[12], &qword_1000863F0);
  v40 = (char *)v38 + v39[16];
  *(_QWORD *)v40 = v31;
  *((_QWORD *)v40 + 1) = v32;
  *((_QWORD *)v40 + 2) = v33;
  *((_QWORD *)v40 + 3) = v34;
  v40[32] = v22;
  *((_QWORD *)v40 + 5) = v36;
  *((_QWORD *)v40 + 6) = v35;
  v41 = (char *)v38 + v39[20];
  *(_QWORD *)v41 = 0;
  v41[8] = 1;
  sub_1000656F8(v31, v32, v33, v34);
  swift_retain(v36);
  swift_retain(v35);
  sub_1000106A4(v46, &qword_1000863F0);
  sub_100065720(v31, v32, v33, v34);
  swift_release(v35);
  swift_release(v36);
  return sub_1000106A4(v43, &qword_1000863F0);
}

uint64_t sub_10004D958@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t result;
  __int128 v22;
  __int128 v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  __int128 v37;
  char v38;

  v4 = type metadata accessor for AttributedString(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000041D8(&qword_100084810);
  __chkstk_darwin(v7);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + *(int *)(type metadata accessor for AlarmComplicationCircularView(0) + 20);
  v15 = type metadata accessor for AlarmEntry(0);
  sub_10001DEA0(v14 + *(int *)(v15 + 20), (uint64_t)v9, &qword_100084810);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_1000106A4((uint64_t)v9, &qword_100084810);
    *(_QWORD *)&v36 = sub_10000C190();
    *((_QWORD *)&v36 + 1) = v16;
    v17 = sub_10000D9FC();
    v31 = Text.init<A>(_:)(&v36, &type metadata for String, v17);
    v32 = v18;
    v33 = v19 & 1;
    v34 = v20;
    v35 = 1;
    result = _ConditionalContent<>.init(storage:)(&v31, &type metadata for Text, &type metadata for Text, &protocol witness table for Text, &protocol witness table for Text);
    v22 = v36;
    v23 = v37;
    v24 = v38;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
    v25 = type metadata accessor for WidgetUtilities();
    (*(void (**)(char *))(v25 + 136))(v13);
    v31 = Text.init(_:)(v6);
    v32 = v26;
    v33 = v27 & 1;
    v34 = v28;
    v35 = 0;
    _ConditionalContent<>.init(storage:)(&v31, &type metadata for Text, &type metadata for Text, &protocol witness table for Text, &protocol witness table for Text);
    v29 = v37;
    v30 = v36;
    v24 = v38;
    result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    v23 = v29;
    v22 = v30;
  }
  *(_OWORD *)a2 = v22;
  *(_OWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 32) = v24;
  return result;
}

uint64_t sub_10004DB9C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v31;
  uint64_t KeyPath;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  type metadata accessor for AlarmComplicationCircularView(0);
  v34 = sub_10000C004();
  v33 = static Font.body.getter(v34);
  KeyPath = swift_getKeyPath(&unk_10006CC20);
  sub_10000C3F4(7);
  v35 = v2;
  v36 = v3;
  v31 = sub_10000D9FC();
  v4 = Text.init<A>(_:)(&v35, &type metadata for String, v31);
  v6 = v5;
  v8 = v7;
  v10 = v9 & 1;
  v11 = static Font.body.getter(v4);
  v12 = Text.font(_:)(v11, v4, v6, v10, v8);
  v14 = v13;
  v16 = v15;
  v18 = v17;
  swift_release(v11);
  v19 = v16 & 1;
  sub_100010E24(v4, v6, v10);
  swift_bridgeObjectRelease(v8);
  sub_10000C3F4(6);
  v21 = v20;
  v35 = v22;
  v36 = v20;
  v23 = v18;
  v24 = Text.accessibilityLabel<A>(_:)(&v35, v12, v14, v19, v18, &type metadata for String, v31);
  v26 = v25;
  v28 = v27;
  LOBYTE(v8) = v29 & 1;
  sub_100010E24(v12, v14, v19);
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease(v23);
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = v34;
  *(_QWORD *)(a1 + 24) = KeyPath;
  *(_QWORD *)(a1 + 32) = v33;
  *(_QWORD *)(a1 + 40) = v24;
  *(_QWORD *)(a1 + 48) = v26;
  *(_BYTE *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 64) = v28;
  *(_QWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 1;
  swift_retain(v34);
  swift_retain(KeyPath);
  swift_retain(v33);
  sub_1000511D8(v24, v26, v8);
  swift_bridgeObjectRetain(v28);
  sub_100010E24(v24, v26, v8);
  swift_release(v33);
  swift_release(KeyPath);
  swift_release(v34);
  return swift_bridgeObjectRelease(v28);
}

uint64_t sub_10004DD90@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;

  *a3 = swift_getKeyPath(a1);
  v5 = sub_1000041D8(a2);
  return swift_storeEnumTagMultiPayload(a3, v5, 0);
}

uint64_t sub_10004DDCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, uint64_t a7@<X8>)
{
  int *v13;
  uint64_t result;

  sub_10001DE5C(a1, a7, &qword_100085AD0);
  v13 = (int *)type metadata accessor for AlarmComplicationCircularView(0);
  sub_1000106E0(a2, a7 + v13[5], type metadata accessor for AlarmEntry);
  result = sub_10003928C(a3, a7 + v13[6]);
  *(_BYTE *)(a7 + v13[7]) = a4;
  *(_BYTE *)(a7 + v13[8]) = a5;
  *(_BYTE *)(a7 + v13[9]) = a6;
  return result;
}

uint64_t sub_10004DE74@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t OpaqueTypeConformance2;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  __int128 v37;

  v22 = a1;
  v1 = type metadata accessor for AccessibilityChildBehavior(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000041D8(&qword_100086408);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = static VerticalAlignment.center.getter(v7);
  v11 = sub_10004E038(&v23);
  v12 = v23;
  v13 = v24;
  v14 = static Alignment.center.getter(v11);
  v16 = _FrameLayout.init(width:height:alignment:)(&v33, 0, 1, 0, 1, v14, v15);
  v23 = v10;
  v24 = 0;
  v25 = 1;
  v26 = v12;
  v27 = v13;
  v28 = v33;
  v29 = v34;
  v30 = v35;
  v31 = v36;
  v32 = v37;
  static AccessibilityChildBehavior.combine.getter(v16);
  v17 = sub_1000041D8(&qword_100086410);
  v18 = sub_100051514();
  View.accessibilityElement(children:)(v4, v17, v18);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  v19 = v27;
  swift_release(v26);
  swift_release(v19);
  v23 = v17;
  v24 = v18;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v23, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  View.accessibilityHidden(_:)(0, v5, OpaqueTypeConformance2);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_10004E038@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  Swift::String v19;
  uint64_t *v20;
  uint64_t v21;
  void *v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  Swift::String v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t KeyPath;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t result;
  uint64_t *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;

  v57 = a1;
  v51 = sub_1000041D8(&qword_1000878B8);
  __chkstk_darwin(v51);
  v2 = (uint64_t *)((char *)&v50 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  v3 = type metadata accessor for Locale(0);
  v55 = *(_QWORD *)(v3 - 8);
  v56 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000041D8(&qword_100084848);
  __chkstk_darwin(v6);
  v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for WorldClockCity(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_1000041D8(&qword_1000878C0);
  v15 = __chkstk_darwin(v52);
  v17 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v53 = (uint64_t)&v50 - v18;
  v54 = Image.init(_internalSystemName:)(0x65626F6C67, 0xE500000000000000);
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(1, 2);
  v19._countAndFlagsBits = 0;
  v19._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v19);
  sub_100004F30((uint64_t)v11);
  v20 = (uint64_t *)&v11[*(int *)(v9 + 28)];
  v21 = *v20;
  v22 = (void *)v20[1];
  swift_bridgeObjectRetain(v22);
  sub_10000D330((uint64_t)v11, type metadata accessor for WorldClockCity);
  v23._countAndFlagsBits = v21;
  v23._object = v22;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v23);
  swift_bridgeObjectRelease(v22);
  v24._countAndFlagsBits = 32;
  v24._object = (void *)0xE100000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v24);
  sub_100004F30((uint64_t)v11);
  sub_100008130((uint64_t)v8);
  sub_10000D330((uint64_t)v11, type metadata accessor for WorldClockCity);
  v25 = type metadata accessor for TimeZone(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v8, 0, 1, v25);
  v26 = Text.init(dateFormatTemplate:timeZone:)(7171434, 0xE300000000000000, v8);
  v28 = v27;
  v30 = v29;
  LOBYTE(v22) = v31 & 1;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)();
  sub_100010E24(v26, v28, (char)v22);
  swift_bridgeObjectRelease(v30);
  v32._countAndFlagsBits = 0;
  v32._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v32);
  v33 = LocalizedStringKey.init(stringInterpolation:)(v14);
  v34 = Text.init(_:tableName:bundle:comment:)(v33);
  v36 = v35;
  v38 = v37;
  LOBYTE(v14) = v39 & 1;
  KeyPath = swift_getKeyPath(&unk_10006DEE8);
  v50 = v5;
  static Locale.autoupdatingCurrent.getter();
  v41 = v55;
  v42 = v56;
  (*(void (**)(char *, char *, uint64_t))(v55 + 16))((char *)v2 + *(int *)(v51 + 28), v5, v56);
  v43 = (uint64_t)v2;
  *v2 = KeyPath;
  v44 = v52;
  sub_10001DEA0(v43, (uint64_t)&v17[*(int *)(v52 + 36)], &qword_1000878B8);
  *(_QWORD *)v17 = v34;
  *((_QWORD *)v17 + 1) = v36;
  v17[16] = (char)v14;
  *((_QWORD *)v17 + 3) = v38;
  sub_1000511D8(v34, v36, (char)v14);
  swift_bridgeObjectRetain(v38);
  sub_1000106A4(v43, &qword_1000878B8);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v50, v42);
  sub_100010E24(v34, v36, (char)v14);
  swift_bridgeObjectRelease(v38);
  v45 = v53;
  sub_10001DE5C((uint64_t)v17, v53, &qword_1000878C0);
  sub_10001DEA0(v45, (uint64_t)v17, &qword_1000878C0);
  v46 = sub_100065674();
  v47 = AnyView.init<A>(_:)(v17, v44, v46);
  result = sub_1000106A4(v45, &qword_1000878C0);
  v49 = v57;
  *v57 = v54;
  v49[1] = v47;
  return result;
}

uint64_t sub_10004E480@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000106E0(a1, a2, type metadata accessor for WorldClockEntry);
}

void *sub_10004E4A4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[400];

  v3 = static Alignment.center.getter(a1);
  v5 = v4;
  sub_10004E4F8((uint64_t)v7);
  *a2 = v3;
  a2[1] = v5;
  return memcpy(a2 + 2, v7, 0x189uLL);
}

uint64_t sub_10004E4F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  _BYTE __src[360];
  _BYTE v9[368];
  _QWORD v10[48];
  _BYTE v11[384];
  _QWORD v12[2];
  char v13;
  _BYTE v14[360];

  if (qword_10008A620 != -1)
    swift_once(&qword_10008A620, sub_100041AD8);
  v2 = qword_10008BED0;
  v3 = swift_retain(qword_10008BED0);
  v4 = static Edge.Set.all.getter(v3);
  v5 = v4;
  v6 = static HorizontalAlignment.leading.getter(v4);
  sub_10004E624((uint64_t)__src);
  v9[360] = 0;
  memcpy(&v9[7], __src, 0x161uLL);
  v10[0] = v6;
  v10[1] = 0;
  LOBYTE(v10[2]) = 0;
  memcpy((char *)&v10[2] + 1, v9, 0x168uLL);
  memcpy(&v11[7], v10, 0x179uLL);
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v5;
  memcpy((void *)(a1 + 9), v11, 0x180uLL);
  v12[0] = v6;
  v12[1] = 0;
  v13 = 0;
  memcpy(v14, v9, sizeof(v14));
  swift_retain(v2);
  sub_100065304((uint64_t)v10);
  sub_10006544C((uint64_t)v12);
  return swift_release(v2);
}

uint64_t sub_10004E624@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, _QWORD, uint64_t);
  void (*v23)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char v64;
  void (*v65)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  void (*v68)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v69;
  void (*v70)(char *, _QWORD, uint64_t);
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  int v102;
  unsigned __int8 v103;
  unsigned __int8 v104;
  char v105;
  unsigned __int8 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void (*v119)(_QWORD, _QWORD, _QWORD);
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  void (*v124)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v131;
  int v132;
  int v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t KeyPath;
  void (*v145)(uint64_t, _QWORD, uint64_t, uint64_t);
  void (*v146)(char *, _QWORD, uint64_t);
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  char v159;
  char v160;
  _DWORD v161[2];
  _DWORD v162[2];
  _DWORD v163[2];
  _DWORD v164[14];
  unsigned __int8 v165;
  _BYTE v166[7];
  _BYTE v167[7];
  unsigned __int8 v168;
  _BYTE v169[7];
  unsigned __int8 v170;
  _BYTE v171[7];
  unsigned __int8 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  unsigned __int8 v181;
  char v182;
  _BYTE v183[7];
  _BYTE v184[7];
  char v185;
  _BYTE v186[7];
  _BYTE v187[7];
  char v188;
  _BYTE v189[7];
  char v190;
  _BYTE v191[7];
  _BYTE v192[7];
  char v193;
  uint64_t v194;
  uint64_t v195;
  unsigned __int8 v196;
  _BYTE v197[7];
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char v204;
  _BYTE v205[7];
  uint64_t v206;
  char v207;
  _BYTE v208[7];
  __int128 v209;
  __int128 v210;
  char v211;

  v2 = type metadata accessor for Font.Leading(0);
  v141 = *(_QWORD *)(v2 - 8);
  v142 = v2;
  __chkstk_darwin(v2);
  v140 = (uint64_t)&v131 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1000041D8(&qword_100085E40);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v131 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v153 = static VerticalAlignment.center.getter(v5);
  v8 = sub_10004F010((uint64_t)&v194);
  v151 = v195;
  v152 = v194;
  v9 = v196;
  v155 = v199;
  v156 = v198;
  v154 = v200;
  v10 = v201;
  v158 = v202;
  v157 = static Edge.Set.top.getter(v8);
  v172 = 0;
  v170 = v9;
  v168 = v10;
  v165 = 1;
  v11 = LocalizedStringKey.init(stringLiteral:)(0x6B6C615720676F44, 0xE800000000000000);
  v12 = Text.init(_:tableName:bundle:comment:)(v11);
  v149 = v13;
  v150 = v12;
  v15 = v14;
  v17 = v16 & 1;
  v18 = static Font.Weight.semibold.getter(v12);
  v19 = enum case for Font.Design.default(_:);
  v20 = type metadata accessor for Font.Design(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(void (**)(char *, _QWORD, uint64_t))(v21 + 104);
  LODWORD(v147) = v19;
  v146 = v22;
  v22(v7, v19, v20);
  v23 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v21 + 56);
  KeyPath = v20;
  v145 = v23;
  v23((uint64_t)v7, 0, 1, v20);
  v24 = static Font.system(size:weight:design:)(*(_QWORD *)&v18, 0, v7, 14.0);
  v143 = v7;
  sub_1000106A4((uint64_t)v7, &qword_100085E40);
  v25 = v149;
  v26 = v150;
  v27 = Text.font(_:)(v24, v150, v149, v17, v15);
  v29 = v28;
  LODWORD(v148) = v30;
  v32 = v31;
  swift_release(v24);
  sub_100010E24(v26, v25, v17);
  swift_bridgeObjectRelease(v15);
  if (qword_10008A680 != -1)
    swift_once(&qword_10008A680, sub_1000420D0);
  v33 = v148 & 1;
  v34 = Text.foregroundColor(_:)(qword_10008BF30, v27, v29, v148 & 1, v32);
  v149 = v35;
  v150 = v34;
  v148 = v36;
  v138 = v37 & 1;
  sub_100010E24(v27, v29, v33);
  v38 = swift_bridgeObjectRelease(v32);
  v39 = static Edge.Set.bottom.getter(v38);
  v137 = v39;
  v40.n128_u64[0] = 8.0;
  v41 = EdgeInsets.init(_all:)(v39, v40);
  v43 = v42;
  v45 = v44;
  v47 = v46;
  v48 = LocalizedStringKey.init(stringLiteral:)(0x39303A3031, 0xE500000000000000);
  v49 = Text.init(_:tableName:bundle:comment:)(v48);
  v51 = v50;
  v53 = v52;
  v55 = v54 & 1;
  v56 = static Font.Weight.thin.getter();
  v57 = (uint64_t)v143;
  v58 = KeyPath;
  v146(v143, v147, KeyPath);
  v145(v57, 0, 1, v58);
  v59 = static Font.system(size:weight:design:)(*(_QWORD *)&v56, 0, v57, 32.0);
  sub_1000106A4(v57, &qword_100085E40);
  v60 = Text.font(_:)(v59, v49, v51, v55, v53);
  v62 = v61;
  v64 = v63;
  v145 = v65;
  swift_release(v59);
  sub_100010E24(v49, v51, v55);
  v66 = swift_bridgeObjectRelease(v53);
  v67 = static Color.white.getter(v66);
  v68 = v145;
  v136 = Text.foregroundColor(_:)(v67, v60, v62, v64 & 1, v145);
  v146 = v70;
  v147 = v69;
  LOBYTE(v49) = v71;
  swift_release(v67);
  LODWORD(v143) = v49 & 1;
  sub_100010E24(v60, v62, v64 & 1);
  swift_bridgeObjectRelease(v68);
  KeyPath = swift_getKeyPath(&unk_10006CCE0);
  v145 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))swift_getKeyPath(&unk_10006CC80);
  v72 = LocalizedStringKey.init(stringLiteral:)(0x7961646F54, 0xE500000000000000);
  v73 = Text.init(_:tableName:bundle:comment:)(v72);
  v75 = v74;
  v139 = v76;
  v78 = v77 & 1;
  v79 = static Font.caption.getter(v73);
  v81 = v140;
  v80 = v141;
  v82 = v142;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v141 + 104))(v140, enum case for Font.Leading.tight(_:), v142);
  v83 = Font.leading(_:)(v81, v79);
  swift_release(v79);
  (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v81, v82);
  LOBYTE(v82) = v78;
  v84 = v78;
  v85 = v139;
  v86 = Text.font(_:)(v83, v73, v75, v84, v139);
  v88 = v87;
  LOBYTE(v81) = v89;
  v135 = v90;
  swift_release(v83);
  v91 = v81 & 1;
  sub_100010E24(v73, v75, v82);
  v92 = swift_bridgeObjectRelease(v85);
  v93 = static Color.gray.getter(v92);
  v94 = v135;
  v95 = Text.foregroundColor(_:)(v93, v86, v88, v91, v135);
  v140 = v96;
  v141 = v95;
  LOBYTE(v85) = v97;
  v142 = v98;
  swift_release(v93);
  v132 = v85 & 1;
  sub_100010E24(v86, v88, v91);
  swift_bridgeObjectRelease(v94);
  v139 = swift_getKeyPath(&unk_10006CCE0);
  v99 = swift_getKeyPath(&unk_10006CC80);
  v131 = v99;
  v100 = *(_DWORD *)v171;
  v164[0] = *(_DWORD *)v171;
  *(_DWORD *)((char *)v164 + 3) = *(_DWORD *)&v171[3];
  *(_DWORD *)(a1 + 257) = *(_DWORD *)v186;
  v101 = *(_DWORD *)v169;
  v163[0] = *(_DWORD *)v169;
  *(_DWORD *)((char *)v163 + 3) = *(_DWORD *)&v169[3];
  *(_DWORD *)(a1 + 297) = *(_DWORD *)v184;
  v102 = *(_DWORD *)v167;
  v162[0] = *(_DWORD *)v167;
  *(_DWORD *)((char *)v162 + 3) = *(_DWORD *)&v167[3];
  *(_DWORD *)((char *)v161 + 3) = *(_DWORD *)&v166[3];
  *(_DWORD *)(a1 + 324) = *(_DWORD *)&v183[3];
  *(_DWORD *)(a1 + 321) = *(_DWORD *)v183;
  v161[0] = *(_DWORD *)v166;
  DWORD1(v174) = *(_DWORD *)&v171[3];
  *(_DWORD *)((char *)&v174 + 1) = v100;
  HIDWORD(v175) = *(_DWORD *)&v169[3];
  *(_DWORD *)((char *)&v175 + 9) = v101;
  HIDWORD(v177) = *(_DWORD *)&v167[3];
  v103 = v172;
  *(_DWORD *)((char *)&v177 + 9) = v102;
  HIDWORD(v178) = *(_DWORD *)&v166[3];
  LOBYTE(v102) = v170;
  v133 = v172;
  v134 = v170;
  *(_DWORD *)((char *)&v178 + 9) = *(_DWORD *)v166;
  *(_DWORD *)(a1 + 153) = *(_DWORD *)v192;
  *(_DWORD *)(a1 + 156) = *(_DWORD *)&v192[3];
  *(_DWORD *)(a1 + 169) = *(_DWORD *)v191;
  *(_DWORD *)(a1 + 172) = *(_DWORD *)&v191[3];
  *(_DWORD *)(a1 + 209) = *(_DWORD *)v189;
  *(_DWORD *)(a1 + 212) = *(_DWORD *)&v189[3];
  *(_DWORD *)(a1 + 233) = *(_DWORD *)v187;
  *(_DWORD *)(a1 + 236) = *(_DWORD *)&v187[3];
  *(_DWORD *)(a1 + 260) = *(_DWORD *)&v186[3];
  *(_DWORD *)(a1 + 300) = *(_DWORD *)&v184[3];
  v104 = v168;
  LODWORD(v135) = v168;
  v190 = 0;
  v105 = (char)v143;
  v188 = (char)v143;
  v185 = v85 & 1;
  *(_BYTE *)(a1 + 168) = v137;
  *(_BYTE *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 232) = v105;
  *(_BYTE *)(a1 + 296) = v85 & 1;
  v106 = v165;
  v137 = v165;
  v182 = 1;
  *(_BYTE *)(a1 + 256) = 1;
  *(_BYTE *)(a1 + 320) = 1;
  *(_QWORD *)(a1 + 264) = v145;
  *(_QWORD *)(a1 + 272) = 0x3FE0000000000000;
  *(_QWORD *)(a1 + 328) = v99;
  *(_QWORD *)(a1 + 336) = 0x3FE0000000000000;
  *(_BYTE *)(a1 + 352) = v182;
  *(_QWORD *)&v173 = v153;
  *((_QWORD *)&v173 + 1) = 0x4014000000000000;
  LOBYTE(v174) = v103;
  *((_QWORD *)&v174 + 1) = v152;
  *(_QWORD *)&v175 = v151;
  BYTE8(v175) = v102;
  *(_QWORD *)&v176 = v156;
  *((_QWORD *)&v176 + 1) = v155;
  *(_QWORD *)&v177 = v154;
  BYTE8(v177) = v104;
  *(_QWORD *)&v178 = v158;
  BYTE8(v178) = v157;
  v179 = 0u;
  v180 = 0u;
  v107 = v173;
  v108 = v174;
  v109 = v176;
  *(_OWORD *)(a1 + 32) = v175;
  *(_OWORD *)(a1 + 48) = v109;
  *(_OWORD *)a1 = v107;
  *(_OWORD *)(a1 + 16) = v108;
  v110 = v177;
  v111 = v178;
  v112 = v179;
  v113 = v180;
  *(_BYTE *)(a1 + 128) = v106;
  *(_OWORD *)(a1 + 96) = v112;
  *(_OWORD *)(a1 + 112) = v113;
  *(_OWORD *)(a1 + 64) = v110;
  *(_OWORD *)(a1 + 80) = v111;
  v115 = v149;
  v114 = v150;
  *(_QWORD *)(a1 + 136) = v150;
  *(_QWORD *)(a1 + 144) = v115;
  LOBYTE(v100) = v138;
  *(_BYTE *)(a1 + 152) = v138;
  v116 = v147;
  v117 = v148;
  *(_QWORD *)(a1 + 160) = v148;
  *(double *)(a1 + 176) = v41;
  *(_QWORD *)(a1 + 184) = v43;
  *(_QWORD *)(a1 + 192) = v45;
  *(_QWORD *)(a1 + 200) = v47;
  v118 = v136;
  *(_QWORD *)(a1 + 216) = v136;
  *(_QWORD *)(a1 + 224) = v116;
  v119 = (void (*)(_QWORD, _QWORD, _QWORD))v146;
  v120 = KeyPath;
  *(_QWORD *)(a1 + 240) = v146;
  *(_QWORD *)(a1 + 248) = v120;
  v121 = v140;
  *(_QWORD *)(a1 + 280) = v141;
  *(_QWORD *)(a1 + 288) = v121;
  v122 = v139;
  *(_QWORD *)(a1 + 304) = v142;
  *(_QWORD *)(a1 + 312) = v122;
  *(_QWORD *)(a1 + 344) = 0;
  v160 = v100;
  v159 = v105;
  v181 = v106;
  v193 = v100;
  v123 = v100;
  sub_100065594((uint64_t)&v173);
  sub_1000511D8(v114, v115, v123);
  swift_bridgeObjectRetain(v117);
  sub_1000511D8(v118, v116, (char)v143);
  swift_bridgeObjectRetain(v119);
  swift_retain(v120);
  v124 = v145;
  swift_retain(v145);
  v125 = v140;
  v126 = v141;
  LOBYTE(v119) = v132;
  sub_1000511D8(v141, v140, v132);
  v127 = v142;
  swift_bridgeObjectRetain(v142);
  v128 = v139;
  swift_retain(v139);
  v129 = v131;
  swift_retain(v131);
  sub_100010E24(v126, v125, (char)v119);
  swift_release(v129);
  swift_release(v128);
  swift_bridgeObjectRelease(v127);
  sub_100010E24(v118, v147, v159);
  swift_release(v124);
  swift_release(KeyPath);
  swift_bridgeObjectRelease(v146);
  sub_100010E24(v150, v149, v160);
  swift_bridgeObjectRelease(v148);
  v194 = v153;
  v195 = 0x4014000000000000;
  v196 = v133;
  *(_DWORD *)v197 = v164[0];
  *(_DWORD *)&v197[3] = *(_DWORD *)((char *)v164 + 3);
  v198 = v152;
  v199 = v151;
  LOBYTE(v200) = v134;
  *(_DWORD *)((char *)&v200 + 1) = v163[0];
  HIDWORD(v200) = *(_DWORD *)((char *)v163 + 3);
  v201 = v156;
  v202 = v155;
  v203 = v154;
  v204 = v135;
  *(_DWORD *)&v205[3] = *(_DWORD *)((char *)v162 + 3);
  *(_DWORD *)v205 = v162[0];
  v206 = v158;
  v207 = v157;
  *(_DWORD *)&v208[3] = *(_DWORD *)((char *)v161 + 3);
  *(_DWORD *)v208 = v161[0];
  v209 = 0u;
  v210 = 0u;
  v211 = v137;
  return sub_100065604((uint64_t)&v194);
}

uint64_t sub_10004F010@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE v66[4];
  int v67;
  _BYTE *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;

  v2 = sub_1000041D8(&qword_100085E40);
  __chkstk_darwin(v2);
  v68 = &v66[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for AlarmEntry(0);
  v5 = __chkstk_darwin(v4);
  v7 = &v66[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000B314(v5, (uint64_t)v7);
  v8 = sub_10000C03C();
  sub_10000D330((uint64_t)v7, type metadata accessor for AlarmEntry);
  v9 = Text.init(_:)(v8);
  v11 = v10;
  v13 = v12;
  v15 = v14 & 1;
  v16 = static Font.footnote.getter();
  v17 = Text.font(_:)(v16, v9, v11, v15, v13);
  v19 = v18;
  v21 = v20;
  v23 = v22;
  swift_release(v16);
  v24 = v21 & 1;
  sub_100010E24(v9, v11, v15);
  v25 = swift_bridgeObjectRelease(v13);
  v26 = static Color.white.getter(v25);
  v27 = Text.foregroundColor(_:)(v26, v17, v19, v24, v23);
  v69 = v28;
  v70 = v27;
  LOBYTE(v16) = v29;
  v71 = v30;
  swift_release(v26);
  v67 = v16 & 1;
  sub_100010E24(v17, v19, v24);
  swift_bridgeObjectRelease(v23);
  v31 = LocalizedStringKey.init(stringLiteral:)(0x616C41207478654ELL, 0xEA00000000006D72);
  v32 = Text.init(_:tableName:bundle:comment:)(v31);
  v34 = v33;
  v36 = v35;
  v38 = v37 & 1;
  v39 = static Font.Weight.semibold.getter(v32);
  v40 = enum case for Font.Design.default(_:);
  v41 = type metadata accessor for Font.Design(0);
  v42 = *(_QWORD *)(v41 - 8);
  v43 = (uint64_t)v68;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v42 + 104))(v68, v40, v41);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v42 + 56))(v43, 0, 1, v41);
  v44 = static Font.system(size:weight:design:)(*(_QWORD *)&v39, 0, v43, 22.0);
  sub_1000106A4(v43, &qword_100085E40);
  v45 = Text.font(_:)(v44, v32, v34, v38, v36);
  v47 = v46;
  LOBYTE(v42) = v48;
  v50 = v49;
  swift_release(v44);
  v51 = v42 & 1;
  sub_100010E24(v32, v34, v38);
  v52 = swift_bridgeObjectRelease(v36);
  v53 = static Color.white.getter(v52);
  v54 = Text.foregroundColor(_:)(v53, v45, v47, v51, v50);
  v56 = v55;
  LOBYTE(v32) = v57;
  v59 = v58;
  swift_release(v53);
  sub_100010E24(v45, v47, v51);
  swift_bridgeObjectRelease(v50);
  v60 = v67;
  v72 = v67;
  v62 = v69;
  v61 = v70;
  *(_QWORD *)a1 = v70;
  *(_QWORD *)(a1 + 8) = v62;
  *(_BYTE *)(a1 + 16) = v60;
  v63 = v71;
  *(_QWORD *)(a1 + 24) = v71;
  *(_QWORD *)(a1 + 32) = v54;
  *(_QWORD *)(a1 + 40) = v56;
  *(_BYTE *)(a1 + 48) = v32 & 1;
  *(_QWORD *)(a1 + 56) = v59;
  v64 = v61;
  sub_1000511D8(v61, v62, v60);
  swift_bridgeObjectRetain(v63);
  sub_1000511D8(v54, v56, v32 & 1);
  swift_bridgeObjectRetain(v59);
  sub_100010E24(v54, v56, v32 & 1);
  swift_bridgeObjectRelease(v59);
  sub_100010E24(v64, v62, v72);
  return swift_bridgeObjectRelease(v63);
}

uint64_t sub_10004F394(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  BOOL v18;
  uint64_t v20;

  v4 = type metadata accessor for WorldClockCity(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v10 = (char *)&v20 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      v16 = 1;
    }
    else
    {
      v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v13 = *(_QWORD *)(v8 + 72);
      v14 = v11 - 1;
      do
      {
        sub_10000DF30(a1 + v12, (uint64_t)v10, type metadata accessor for WorldClockCity);
        sub_10000DF30(a2 + v12, (uint64_t)v7, type metadata accessor for WorldClockCity);
        v15 = sub_10000D36C(qword_1000848B8, type metadata accessor for WorldClockCity, (uint64_t)&unk_10006B328);
        v16 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v7, v4, v15);
        sub_10000D330((uint64_t)v7, type metadata accessor for WorldClockCity);
        sub_10000D330((uint64_t)v10, type metadata accessor for WorldClockCity);
        v18 = v14-- != 0;
        if ((v16 & 1) == 0)
          break;
        v12 += v13;
      }
      while (v18);
    }
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t sub_10004F4F4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10004F51C(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

uint64_t sub_10004F544@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10004F56C(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.foregroundColor.setter(v1);
}

uint64_t sub_10004F594@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_10004F5C4(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

void sub_10004F5F0(double *a1@<X8>)
{
  *a1 = EnvironmentValues.minimumScaleFactor.getter();
}

uint64_t sub_10004F618(double *a1)
{
  return EnvironmentValues.minimumScaleFactor.setter(*a1);
}

uint64_t type metadata accessor for WorldClockWidgetViewMulti(uint64_t a1)
{
  return sub_10000DEFC(a1, (uint64_t *)&unk_10008BAF0, (uint64_t)&nominal type descriptor for WorldClockWidgetViewMulti);
}

uint64_t type metadata accessor for MediumWorldClockView(uint64_t a1)
{
  return sub_10000DEFC(a1, (uint64_t *)&unk_10008BB40, (uint64_t)&nominal type descriptor for MediumWorldClockView);
}

uint64_t type metadata accessor for SmallMultiWorldClockView(uint64_t a1)
{
  return sub_10000DEFC(a1, (uint64_t *)&unk_10008BB30, (uint64_t)&nominal type descriptor for SmallMultiWorldClockView);
}

uint64_t type metadata accessor for PlaceholderViewMulti(uint64_t a1)
{
  return sub_10000DEFC(a1, (uint64_t *)&unk_10008BB10, (uint64_t)&nominal type descriptor for PlaceholderViewMulti);
}

unint64_t sub_10004F68C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = qword_100085EE0;
  if (!qword_100085EE0)
  {
    v1 = sub_100010DE0(&qword_100085EC8);
    v4 = type metadata accessor for SmallMultiWorldClockView(255);
    v5 = sub_10000D36C(&qword_100085EE8, type metadata accessor for SmallMultiWorldClockView, (uint64_t)&unk_10006CF70);
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
    v2 = type metadata accessor for MediumWorldClockView(255);
    v3 = sub_10000D36C(&qword_100085EF0, type metadata accessor for MediumWorldClockView, (uint64_t)&unk_10006CFC0);
    v4 = v2;
    v5 = v3;
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100085EE0);
  }
  return result;
}

uint64_t sub_10004F778()
{
  return EnvironmentValues.symbolRenderingMode.getter();
}

uint64_t sub_10004F798(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = sub_1000041D8(&qword_100085F38);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001DEA0(a1, (uint64_t)v4, &qword_100085F38);
  return EnvironmentValues.symbolRenderingMode.setter(v4);
}

size_t sub_10004F818(size_t result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v15 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_1000041D8(&qword_100084838);
  v11 = *(_QWORD *)(type metadata accessor for WorldClockCity(0) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  result = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v14 == 0x8000000000000000 && v12 == -1)
    goto LABEL_29;
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(result - v14) / v12);
LABEL_19:
  v17 = type metadata accessor for WorldClockCity(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  v20 = (char *)v15 + v19;
  v21 = (char *)a4 + v19;
  if ((v5 & 1) != 0)
  {
    if (v15 < a4 || v20 >= &v21[*(_QWORD *)(v18 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v20, v21, v8, v17);
    }
    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v20, v21, v8, v17);
  }
  swift_bridgeObjectRelease(a4);
  return (size_t)v15;
}

uint64_t sub_10004F98C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10004F9B4(unsigned __int8 *a1)
{
  return EnvironmentValues.multilineTextAlignment.setter(*a1);
}

double sub_10004F9D8@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double result;
  uint64_t v21;

  v2 = sub_1000041D8(&qword_100085E40);
  __chkstk_darwin(v2);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Font.TextStyle(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for Font.TextStyle.subheadline(_:), v5);
  v9 = enum case for Font.Design.rounded(_:);
  v10 = type metadata accessor for Font.Design(0);
  v11 = *(_QWORD *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 104))(v4, v9, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v4, 0, 1, v10);
  v12 = static Font.system(_:design:weight:)(v8, v4, 0, 1);
  sub_1000106A4((uint64_t)v4, &qword_100085E40);
  v13 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  static Font.Weight.regular.getter(v13);
  v14 = Font.weight(_:)(v12);
  swift_release(v12);
  *(_QWORD *)a1 = 0x4061000000000000;
  *(_QWORD *)(a1 + 8) = v14;
  __asm { FMOV            V1.2D, #8.0 }
  *(_OWORD *)(a1 + 16) = xmmword_10006C9E0;
  *(_OWORD *)(a1 + 32) = _Q1;
  result = 4.0;
  *(_OWORD *)(a1 + 48) = xmmword_10006C9F0;
  return result;
}

uint64_t sub_10004FB60()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_10004FB84(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t sub_10004FBC8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100085F80;
  if (!qword_100085F80)
  {
    v1 = sub_100010DE0(&qword_100085F48);
    sub_10001DDB4(&qword_100085F88, &qword_100085F40, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100085F80);
  }
  return result;
}

uint64_t type metadata accessor for ClockFace(uint64_t a1)
{
  return sub_10000DEFC(a1, (uint64_t *)&unk_10008BB60, (uint64_t)&nominal type descriptor for ClockFace);
}

uint64_t type metadata accessor for ClockText(uint64_t a1)
{
  return sub_10000DEFC(a1, (uint64_t *)&unk_10008BBA0, (uint64_t)&nominal type descriptor for ClockText);
}

uint64_t type metadata accessor for Clock(uint64_t a1)
{
  return sub_10000DEFC(a1, (uint64_t *)&unk_10008BBB0, (uint64_t)&nominal type descriptor for Clock);
}

uint64_t sub_10004FC8C(uint64_t a1)
{
  return sub_1000677D4(a1, type metadata accessor for SmallMultiWorldClockView, (uint64_t (*)(uint64_t, uint64_t))sub_10002D0E0);
}

uint64_t sub_10004FCA4(uint64_t a1)
{
  return sub_1000677D4(a1, type metadata accessor for MediumWorldClockView, (uint64_t (*)(uint64_t, uint64_t))sub_10002E9BC);
}

uint64_t type metadata accessor for ClockWidgetAccentableOpacity(uint64_t a1)
{
  return sub_10000DEFC(a1, (uint64_t *)&unk_10008BB70, (uint64_t)&nominal type descriptor for ClockWidgetAccentableOpacity);
}

uint64_t type metadata accessor for MediumClockFaceView(uint64_t a1)
{
  return sub_10000DEFC(a1, (uint64_t *)&unk_10008BB50, (uint64_t)&nominal type descriptor for MediumClockFaceView);
}

unint64_t sub_10004FCE0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100085FC8;
  if (!qword_100085FC8)
  {
    v1 = sub_100010DE0(&qword_100085FA8);
    sub_10001DDB4(&qword_100085FD0, &qword_100085FA0, (uint64_t)&protocol conformance descriptor for VStack<A>);
    sub_10001DDB4(&qword_100085FD8, &qword_100085F90, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100085FC8);
  }
  return result;
}

uint64_t type metadata accessor for ClockWidgetAccentableForegroundColor(uint64_t a1)
{
  return sub_10000DEFC(a1, (uint64_t *)&unk_10008BB90, (uint64_t)&nominal type descriptor for ClockWidgetAccentableForegroundColor);
}

BOOL sub_10004FD90(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t (*v12)(char *, uint64_t);
  int v13;
  unint64_t v14;
  int v15;
  int v16;
  unint64_t v17;
  uint64_t v19;

  v4 = type metadata accessor for ContentSizeCategory(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v19 - v9;
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11((char *)&v19 - v9, a2, v4);
  v12 = *(uint64_t (**)(char *, uint64_t))(v5 + 88);
  v13 = v12(v10, v4);
  v14 = 0;
  v15 = enum case for ContentSizeCategory.extraSmall(_:);
  if (v13 != enum case for ContentSizeCategory.extraSmall(_:))
  {
    if (v13 == enum case for ContentSizeCategory.small(_:))
    {
      v14 = 1;
      goto LABEL_24;
    }
    if (v13 == enum case for ContentSizeCategory.medium(_:))
    {
      v14 = 2;
      goto LABEL_24;
    }
    if (v13 == enum case for ContentSizeCategory.large(_:))
      goto LABEL_7;
    if (v13 == enum case for ContentSizeCategory.extraLarge(_:))
    {
      v14 = 4;
    }
    else if (v13 == enum case for ContentSizeCategory.extraExtraLarge(_:))
    {
      v14 = 5;
    }
    else if (v13 == enum case for ContentSizeCategory.extraExtraExtraLarge(_:))
    {
      v14 = 6;
    }
    else if (v13 == enum case for ContentSizeCategory.accessibilityMedium(_:))
    {
      v14 = 7;
    }
    else if (v13 == enum case for ContentSizeCategory.accessibilityLarge(_:))
    {
      v14 = 8;
    }
    else if (v13 == enum case for ContentSizeCategory.accessibilityExtraLarge(_:))
    {
      v14 = 9;
    }
    else if (v13 == enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:))
    {
      v14 = 10;
    }
    else
    {
      if (v13 != enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
      {
        (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
LABEL_7:
        v14 = 3;
        goto LABEL_24;
      }
      v14 = 11;
    }
  }
LABEL_24:
  v11(v8, a1, v4);
  v16 = v12(v8, v4);
  if (v16 == v15)
  {
    v17 = 0;
  }
  else if (v16 == enum case for ContentSizeCategory.small(_:))
  {
    v17 = 1;
  }
  else if (v16 == enum case for ContentSizeCategory.medium(_:))
  {
    v17 = 2;
  }
  else
  {
    if (v16 != enum case for ContentSizeCategory.large(_:))
    {
      if (v16 == enum case for ContentSizeCategory.extraLarge(_:))
      {
        v17 = 4;
        return v14 < v17;
      }
      if (v16 == enum case for ContentSizeCategory.extraExtraLarge(_:))
      {
        v17 = 5;
        return v14 < v17;
      }
      if (v16 == enum case for ContentSizeCategory.extraExtraExtraLarge(_:))
      {
        v17 = 6;
        return v14 < v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityMedium(_:))
      {
        v17 = 7;
        return v14 < v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityLarge(_:))
      {
        v17 = 8;
        return v14 < v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityExtraLarge(_:))
      {
        v17 = 9;
        return v14 < v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:))
      {
        v17 = 10;
        return v14 < v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
      {
        v17 = 11;
        return v14 < v17;
      }
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    }
    v17 = 3;
  }
  return v14 < v17;
}

BOOL sub_100050118(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t (*v12)(char *, uint64_t);
  int v13;
  unint64_t v14;
  int v15;
  int v16;
  unint64_t v17;
  uint64_t v19;

  v4 = type metadata accessor for ContentSizeCategory(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v19 - v9;
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11((char *)&v19 - v9, a2, v4);
  v12 = *(uint64_t (**)(char *, uint64_t))(v5 + 88);
  v13 = v12(v10, v4);
  v14 = 0;
  v15 = enum case for ContentSizeCategory.extraSmall(_:);
  if (v13 != enum case for ContentSizeCategory.extraSmall(_:))
  {
    if (v13 == enum case for ContentSizeCategory.small(_:))
    {
      v14 = 1;
      goto LABEL_24;
    }
    if (v13 == enum case for ContentSizeCategory.medium(_:))
    {
      v14 = 2;
      goto LABEL_24;
    }
    if (v13 == enum case for ContentSizeCategory.large(_:))
      goto LABEL_7;
    if (v13 == enum case for ContentSizeCategory.extraLarge(_:))
    {
      v14 = 4;
    }
    else if (v13 == enum case for ContentSizeCategory.extraExtraLarge(_:))
    {
      v14 = 5;
    }
    else if (v13 == enum case for ContentSizeCategory.extraExtraExtraLarge(_:))
    {
      v14 = 6;
    }
    else if (v13 == enum case for ContentSizeCategory.accessibilityMedium(_:))
    {
      v14 = 7;
    }
    else if (v13 == enum case for ContentSizeCategory.accessibilityLarge(_:))
    {
      v14 = 8;
    }
    else if (v13 == enum case for ContentSizeCategory.accessibilityExtraLarge(_:))
    {
      v14 = 9;
    }
    else if (v13 == enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:))
    {
      v14 = 10;
    }
    else
    {
      if (v13 != enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
      {
        (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
LABEL_7:
        v14 = 3;
        goto LABEL_24;
      }
      v14 = 11;
    }
  }
LABEL_24:
  v11(v8, a1, v4);
  v16 = v12(v8, v4);
  if (v16 == v15)
  {
    v17 = 0;
  }
  else if (v16 == enum case for ContentSizeCategory.small(_:))
  {
    v17 = 1;
  }
  else if (v16 == enum case for ContentSizeCategory.medium(_:))
  {
    v17 = 2;
  }
  else
  {
    if (v16 != enum case for ContentSizeCategory.large(_:))
    {
      if (v16 == enum case for ContentSizeCategory.extraLarge(_:))
      {
        v17 = 4;
        return v14 >= v17;
      }
      if (v16 == enum case for ContentSizeCategory.extraExtraLarge(_:))
      {
        v17 = 5;
        return v14 >= v17;
      }
      if (v16 == enum case for ContentSizeCategory.extraExtraExtraLarge(_:))
      {
        v17 = 6;
        return v14 >= v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityMedium(_:))
      {
        v17 = 7;
        return v14 >= v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityLarge(_:))
      {
        v17 = 8;
        return v14 >= v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityExtraLarge(_:))
      {
        v17 = 9;
        return v14 >= v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:))
      {
        v17 = 10;
        return v14 >= v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
      {
        v17 = 11;
        return v14 >= v17;
      }
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    }
    v17 = 3;
  }
  return v14 >= v17;
}

uint64_t sub_1000504A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  uint64_t (*v17)(_QWORD);
  uint64_t v18;
  char v19;
  void (*v20)(char *, uint64_t);
  uint64_t *v21;
  int v22;
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v29;

  v1 = v0;
  v2 = type metadata accessor for WidgetRenderingMode(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v29 - v7;
  v9 = type metadata accessor for ClockFace(0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v29 - v14;
  v16 = *(unsigned __int8 *)(v0 + *(int *)(v13 + 52));
  sub_10000DF30(v1, (uint64_t)&v29 - v14, v17);
  if (v16 != 1)
  {
    v22 = v15[*(int *)(v9 + 44)];
    sub_10000DF30((uint64_t)v15, (uint64_t)v12, type metadata accessor for ClockFace);
    if (v22 == 1)
    {
      v23 = sub_100025364(&qword_100085E28, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, (char *)0xD000000000000013, (char *)0x800000010006F430, (uint64_t)v8);
      static WidgetRenderingMode.fullColor.getter(v23);
      v24 = static WidgetRenderingMode.== infix(_:_:)(v8, v6);
      v25 = *(void (**)(char *, uint64_t))(v3 + 8);
      v25(v6, v2);
      v25(v8, v2);
      sub_10000D330((uint64_t)v12, type metadata accessor for ClockFace);
      sub_10000D330((uint64_t)v15, type metadata accessor for ClockFace);
      if ((v24 & 1) != 0)
        goto LABEL_3;
    }
    else
    {
      sub_10000D330((uint64_t)v12, type metadata accessor for ClockFace);
      sub_10000D330((uint64_t)v15, type metadata accessor for ClockFace);
    }
    v26 = sub_100025364(&qword_100085E28, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, (char *)0xD000000000000013, (char *)0x800000010006F430, (uint64_t)v8);
    static WidgetRenderingMode.vibrant.getter(v26);
    static WidgetRenderingMode.== infix(_:_:)(v8, v6);
    v27 = *(void (**)(char *, uint64_t))(v3 + 8);
    v27(v6, v2);
    v27(v8, v2);
    goto LABEL_13;
  }
  sub_10000D330((uint64_t)v15, type metadata accessor for ClockFace);
LABEL_3:
  v18 = sub_100025364(&qword_100085E28, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, (char *)0xD000000000000013, (char *)0x800000010006F430, (uint64_t)v8);
  static WidgetRenderingMode.fullColor.getter(v18);
  v19 = static WidgetRenderingMode.== infix(_:_:)(v8, v6);
  v20 = *(void (**)(char *, uint64_t))(v3 + 8);
  v20(v6, v2);
  v20(v8, v2);
  if ((v19 & 1) != 0 && *(_BYTE *)(v1 + 8) == 1)
  {
    if (qword_10008A678 != -1)
      swift_once(&qword_10008A678, sub_10004204C);
    v21 = &qword_10008BF28;
    return *v21;
  }
LABEL_13:
  if (qword_10008A648 != -1)
    swift_once(&qword_10008A648, sub_100041D98);
  v21 = &qword_10008BEF8;
  return *v21;
}

uint64_t sub_1000507DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100038680(*(uint64_t **)(v1 + 16), a1);
}

double sub_1000507E4@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  uint64_t v17;

  v2 = sub_1000041D8(&qword_100085E40);
  __chkstk_darwin(v2);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10008A6D8 != -1)
    swift_once(&qword_10008A6D8, sub_1000427F0);
  if (byte_10008A6E0)
    v5 = 50.0;
  else
    v5 = 56.0;
  v6 = static Font.Weight.regular.getter();
  v7 = enum case for Font.Design.default(_:);
  v8 = type metadata accessor for Font.Design(0);
  v9 = *(_QWORD *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 104))(v4, v7, v8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v4, 0, 1, v8);
  v10 = static Font.system(size:weight:design:)(*(_QWORD *)&v6, 0, v4, 12.0);
  sub_1000106A4((uint64_t)v4, &qword_100085E40);
  *(double *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v10;
  __asm { FMOV            V1.2D, #4.0 }
  *(_OWORD *)(a1 + 16) = xmmword_10006CA70;
  *(_OWORD *)(a1 + 32) = _Q1;
  result = 2.0;
  *(_OWORD *)(a1 + 48) = xmmword_10006CA10;
  return result;
}

_QWORD *sub_100050938(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_10005095C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000860C0;
  if (!qword_1000860C0)
  {
    v1 = sub_100010DE0(&qword_1000860B8);
    sub_1000509E0();
    sub_10001DDB4(&qword_100086118, &qword_100086120, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000860C0);
  }
  return result;
}

unint64_t sub_1000509E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000860C8;
  if (!qword_1000860C8)
  {
    v1 = sub_100010DE0(&qword_1000860D0);
    sub_100050A4C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000860C8);
  }
  return result;
}

unint64_t sub_100050A4C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000860D8;
  if (!qword_1000860D8)
  {
    v1 = sub_100010DE0(&qword_1000860E0);
    sub_100050AD0();
    sub_10001DDB4(&qword_100086108, &qword_100086110, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000860D8);
  }
  return result;
}

unint64_t sub_100050AD0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000860E8;
  if (!qword_1000860E8)
  {
    v1 = sub_100010DE0(&qword_1000860F0);
    sub_100050B5C(&qword_1000860F8, &qword_100086100);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000860E8);
  }
  return result;
}

uint64_t sub_100050B5C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100010DE0(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100050BBC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 152);
  v4 = *(_QWORD *)(a1 + 216);
  sub_100010E24(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_release(v4);
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

unint64_t sub_100050C18()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100086138;
  if (!qword_100086138)
  {
    v1 = sub_100010DE0(&qword_100086130);
    sub_100050C9C();
    sub_10001DDB4(&qword_100086108, &qword_100086110, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100086138);
  }
  return result;
}

unint64_t sub_100050C9C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100086140;
  if (!qword_100086140)
  {
    v1 = sub_100010DE0(&qword_100086148);
    sub_100050D28(&qword_100086150, &qword_100086158, &qword_100086160, &qword_100086168);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100086140);
  }
  return result;
}

uint64_t sub_100050D28(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_100010DE0(a2);
    sub_100050B5C(&qword_1000860F8, &qword_100086100);
    sub_10001DDB4(a3, a4, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100050DD0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 144);
  v4 = *(_QWORD *)(a1 + 200);
  sub_100010E24(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_release(v4);
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_100050E2C(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  sub_100010E24(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_100050E68(uint64_t a1, uint64_t a2)
{
  return initializeWithCopy for ClockUIConfig(a2, a1);
}

unint64_t sub_100050E78()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000861B8;
  if (!qword_1000861B8)
  {
    v1 = sub_100010DE0(&qword_100086190);
    sub_10001DDB4(&qword_1000861C0, &qword_100086188, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000861B8);
  }
  return result;
}

uint64_t type metadata accessor for CapMaxContentSizeCategory(uint64_t a1)
{
  return sub_10000DEFC(a1, (uint64_t *)&unk_10008BBC0, (uint64_t)&nominal type descriptor for CapMaxContentSizeCategory);
}

uint64_t type metadata accessor for DigitalClockWidgetView(uint64_t a1)
{
  return sub_10000DEFC(a1, (uint64_t *)&unk_10008BBD0, (uint64_t)&nominal type descriptor for DigitalClockWidgetView);
}

uint64_t type metadata accessor for DateTimeWidgetView(uint64_t a1)
{
  return sub_10000DEFC(a1, (uint64_t *)&unk_10008BBE0, (uint64_t)&nominal type descriptor for DateTimeWidgetView);
}

uint64_t type metadata accessor for NonNumericWidgetView(uint64_t a1)
{
  return sub_10000DEFC(a1, (uint64_t *)&unk_10008BBF0, (uint64_t)&nominal type descriptor for NonNumericWidgetView);
}

uint64_t type metadata accessor for SquareWidgetView(uint64_t a1)
{
  return sub_10000DEFC(a1, (uint64_t *)&unk_10008BC00, (uint64_t)&nominal type descriptor for SquareWidgetView);
}

uint64_t type metadata accessor for WorldClockRectangularSummary(uint64_t a1)
{
  return sub_10000DEFC(a1, (uint64_t *)&unk_10008BC10, (uint64_t)&nominal type descriptor for WorldClockRectangularSummary);
}

uint64_t sub_100050F7C()
{
  uint64_t v0;

  return sub_100044F0C(*(_QWORD *)(v0 + 16));
}

unint64_t sub_100050F84()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100086240;
  if (!qword_100086240)
  {
    v1 = sub_100010DE0(&qword_100086238);
    sub_10001DDB4(&qword_100086248, &qword_100086250, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_100086240);
  }
  return result;
}

uint64_t sub_100051000@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100045CC8(*(_QWORD *)(v1 + 16), a1);
}

uint64_t type metadata accessor for AlarmSmallWidgetView(uint64_t a1)
{
  return sub_10000DEFC(a1, (uint64_t *)&unk_10008BC20, (uint64_t)&nominal type descriptor for AlarmSmallWidgetView);
}

uint64_t type metadata accessor for ClockCircularAnalogueComplication(uint64_t a1)
{
  return sub_10000DEFC(a1, (uint64_t *)&unk_10008BC50, (uint64_t)&nominal type descriptor for ClockCircularAnalogueComplication);
}

unint64_t sub_100051038()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000862F0;
  if (!qword_1000862F0)
  {
    v1 = sub_100010DE0(&qword_1000862D0);
    sub_10001DDB4(&qword_1000862F8, &qword_1000862C8, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000862F0);
  }
  return result;
}

uint64_t type metadata accessor for ClockCircularDigitalComplication(uint64_t a1)
{
  return sub_10000DEFC(a1, (uint64_t *)&unk_10008BC60, (uint64_t)&nominal type descriptor for ClockCircularDigitalComplication);
}

unint64_t sub_1000510D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100086308;
  if (!qword_100086308)
  {
    v1 = sub_100010DE0(&qword_100086300);
    sub_100051154();
    sub_10001DDB4(&qword_100086320, &qword_100086328, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100086308);
  }
  return result;
}

unint64_t sub_100051154()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100086310;
  if (!qword_100086310)
  {
    v1 = sub_100010DE0(&qword_100086318);
    sub_10001DDB4(&qword_100086160, &qword_100086168, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100086310);
  }
  return result;
}

uint64_t sub_1000511D8(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_retain(a1);
  else
    return swift_bridgeObjectRetain(a2);
}

unint64_t sub_1000511E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100086338;
  if (!qword_100086338)
  {
    v1 = sub_100010DE0(&qword_100086330);
    sub_10001DDB4(&qword_100086118, &qword_100086120, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100086338);
  }
  return result;
}

unint64_t sub_10005126C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100086368;
  if (!qword_100086368)
  {
    v1 = sub_100010DE0(&qword_100086350);
    sub_1000512D8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100086368);
  }
  return result;
}

unint64_t sub_1000512D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100086370;
  if (!qword_100086370)
  {
    v1 = sub_100010DE0(&qword_100086348);
    sub_10001DDB4(&qword_100086378, &qword_100086340, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    sub_10001DDB4(&qword_100086108, &qword_100086110, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100086370);
  }
  return result;
}

uint64_t type metadata accessor for AlarmComplicationCircularView(uint64_t a1)
{
  return sub_10000DEFC(a1, (uint64_t *)&unk_10008BC70, (uint64_t)&nominal type descriptor for AlarmComplicationCircularView);
}

unint64_t sub_100051388()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000863A0;
  if (!qword_1000863A0)
  {
    v1 = sub_100010DE0(&qword_100086390);
    sub_1000513F4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000863A0);
  }
  return result;
}

unint64_t sub_1000513F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000863A8;
  if (!qword_1000863A8)
  {
    v1 = sub_100010DE0(&qword_100086388);
    sub_10001DDB4(&qword_1000863B0, &qword_100086380, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    sub_10001DDB4(&qword_100086108, &qword_100086110, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000863A8);
  }
  return result;
}

unint64_t sub_100051490()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100086400;
  if (!qword_100086400)
  {
    v1 = sub_100010DE0(&qword_1000863F8);
    sub_10001DDB4(&qword_100086320, &qword_100086328, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100086400);
  }
  return result;
}

unint64_t sub_100051514()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100086418;
  if (!qword_100086418)
  {
    v1 = sub_100010DE0(&qword_100086410);
    sub_10001DDB4(&qword_100086420, &qword_100086428, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100086418);
  }
  return result;
}

uint64_t sub_100051598(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007C330, 1);
}

uint64_t sub_1000515A8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007C358, 1);
}

uint64_t sub_1000515B8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007C380, 1);
}

uint64_t sub_1000515C8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007C3A8, 1);
}

uint64_t sub_1000515D8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007C3D0, 1);
}

uint64_t sub_1000515E8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007C3F8, 1);
}

uint64_t sub_1000515F8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007C420, 1);
}

uint64_t sub_100051608(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007C448, 1);
}

uint64_t sub_100051618(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007C470, 1);
}

uint64_t sub_100051628(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007C498, 1);
}

uint64_t sub_100051638(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007C4C0, 1);
}

uint64_t sub_100051648(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007C5D8, 1);
}

uint64_t sub_100051658(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007C600, 1);
}

uint64_t sub_100051668(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007C628, 1);
}

uint64_t sub_100051678(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007C7A0, 1);
}

unint64_t sub_10005168C()
{
  unint64_t result;

  result = qword_100086430;
  if (!qword_100086430)
  {
    result = swift_getWitnessTable(&unk_10006D280, &type metadata for Clock.ClockHand.ClockHandConnector);
    atomic_store(result, (unint64_t *)&qword_100086430);
  }
  return result;
}

unint64_t sub_1000516D4()
{
  unint64_t result;

  result = qword_100086438;
  if (!qword_100086438)
  {
    result = swift_getWitnessTable(&unk_10006D2D0, &type metadata for Clock.ClockHand.ClockHandConnector);
    atomic_store(result, (unint64_t *)&qword_100086438);
  }
  return result;
}

unint64_t sub_10005171C()
{
  unint64_t result;

  result = qword_100086440;
  if (!qword_100086440)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for EmptyAnimatableData, &type metadata for EmptyAnimatableData);
    atomic_store(result, (unint64_t *)&qword_100086440);
  }
  return result;
}

uint64_t sub_100051760()
{
  return sub_10001DDB4(&qword_100086448, &qword_100086450, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
}

unint64_t sub_100051790()
{
  unint64_t result;

  result = qword_100086458;
  if (!qword_100086458)
  {
    result = swift_getWitnessTable(&unk_10006D370, &type metadata for Clock.ClockHand.ClockHandShape);
    atomic_store(result, (unint64_t *)&qword_100086458);
  }
  return result;
}

unint64_t sub_1000517D8()
{
  unint64_t result;

  result = qword_100086460;
  if (!qword_100086460)
  {
    result = swift_getWitnessTable(&unk_10006D3C0, &type metadata for Clock.ClockHand.ClockHandShape);
    atomic_store(result, (unint64_t *)&qword_100086460);
  }
  return result;
}

uint64_t sub_10005181C()
{
  return sub_10001DDB4(&qword_100086468, &qword_100086470, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
}

uint64_t sub_100051848(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007C930, 1);
}

uint64_t sub_100051858(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007C840, 1);
}

uint64_t sub_100051868(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007C958, 1);
}

unint64_t sub_10005187C()
{
  unint64_t result;

  result = qword_100086478;
  if (!qword_100086478)
  {
    result = swift_getWitnessTable(&unk_10006D500, &type metadata for FaceType);
    atomic_store(result, (unint64_t *)&qword_100086478);
  }
  return result;
}

uint64_t sub_1000518C0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007C980, 1);
}

uint64_t sub_1000518D0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007C9A8, 1);
}

uint64_t sub_1000518E0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007C9D0, 1);
}

uint64_t sub_1000518F0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007C9F8, 1);
}

uint64_t sub_100051900(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007CA20, 1);
}

uint64_t sub_100051910(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007CA48, 1);
}

uint64_t sub_100051920(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007CA70, 1);
}

uint64_t sub_100051930(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007CA98, 1);
}

uint64_t sub_100051940(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007CAC0, 1);
}

uint64_t sub_100051950(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007CB38, 1);
}

uint64_t sub_100051960(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007CB60, 1);
}

uint64_t sub_100051970(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007CC50, 1);
}

uint64_t sub_100051980(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10007CC78, 1);
}

_QWORD *sub_100051990(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = type metadata accessor for WorldClockEntry(0);
    v9 = *(int *)(v8 + 20);
    v10 = *(_QWORD *)((char *)a2 + v9);
    *(_QWORD *)((char *)a1 + v9) = v10;
    *((_BYTE *)a1 + *(int *)(v8 + 24)) = *((_BYTE *)a2 + *(int *)(v8 + 24));
    v11 = a3[5];
    v12 = (_QWORD *)((char *)a1 + v11);
    v13 = (_QWORD *)((char *)a2 + v11);
    swift_bridgeObjectRetain(v10);
    v14 = sub_1000041D8(&qword_1000850C0);
    if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
    {
      v15 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v12, v13, v15);
      v16 = 1;
    }
    else
    {
      v18 = *v13;
      *v12 = *v13;
      swift_retain(v18);
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(v12, v14, v16);
    v19 = a3[6];
    v20 = (char *)a1 + v19;
    v21 = (char *)a2 + v19;
    v22 = *(_QWORD *)v21;
    v23 = v21[8];
    sub_10002571C(*(_QWORD *)v21, v23);
    *(_QWORD *)v20 = v22;
    v20[8] = v23;
    v24 = a3[7];
    v25 = (_QWORD *)((char *)a1 + v24);
    v26 = (_QWORD *)((char *)a2 + v24);
    v27 = sub_1000041D8(&qword_100085E28);
    if (swift_getEnumCaseMultiPayload(v26, v27) == 1)
    {
      v28 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v25, v26, v28);
      v29 = 1;
    }
    else
    {
      v30 = *v26;
      *v25 = *v26;
      swift_retain(v30);
      v29 = 0;
    }
    swift_storeEnumTagMultiPayload(v25, v27, v29);
    v31 = a3[8];
    v32 = (char *)a1 + v31;
    v33 = (char *)a2 + v31;
    v17 = *(_QWORD *)v33;
    LOBYTE(v33) = v33[8];
    *(_QWORD *)v32 = v17;
    v32[8] = (char)v33;
  }
  swift_retain(v17);
  return a1;
}

uint64_t sub_100051B68(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = type metadata accessor for WorldClockEntry(0);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v5 + 20)));
  v6 = (_QWORD *)(a1 + a2[5]);
  v7 = sub_1000041D8(&qword_1000850C0);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  sub_100025728(*(_QWORD *)(a1 + a2[6]), *(_BYTE *)(a1 + a2[6] + 8));
  v9 = (_QWORD *)(a1 + a2[7]);
  v10 = sub_1000041D8(&qword_100085E28);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v9, v11);
  }
  else
  {
    swift_release(*v9);
  }
  return swift_release(*(_QWORD *)(a1 + a2[8]));
}

uint64_t sub_100051C7C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = type metadata accessor for WorldClockEntry(0);
  v8 = *(int *)(v7 + 20);
  v9 = *(_QWORD *)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v9;
  *(_BYTE *)(a1 + *(int *)(v7 + 24)) = *(_BYTE *)(a2 + *(int *)(v7 + 24));
  v10 = a3[5];
  v11 = (uint64_t *)(a1 + v10);
  v12 = (uint64_t *)(a2 + v10);
  swift_bridgeObjectRetain(v9);
  v13 = sub_1000041D8(&qword_1000850C0);
  if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
  {
    v14 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
    v15 = 1;
  }
  else
  {
    v16 = *v12;
    *v11 = *v12;
    swift_retain(v16);
    v15 = 0;
  }
  swift_storeEnumTagMultiPayload(v11, v13, v15);
  v17 = a3[6];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = *(_QWORD *)v19;
  v21 = *(_BYTE *)(v19 + 8);
  sub_10002571C(*(_QWORD *)v19, v21);
  *(_QWORD *)v18 = v20;
  *(_BYTE *)(v18 + 8) = v21;
  v22 = a3[7];
  v23 = (uint64_t *)(a1 + v22);
  v24 = (uint64_t *)(a2 + v22);
  v25 = sub_1000041D8(&qword_100085E28);
  if (swift_getEnumCaseMultiPayload(v24, v25) == 1)
  {
    v26 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v23, v24, v26);
    v27 = 1;
  }
  else
  {
    v28 = *v24;
    *v23 = *v24;
    swift_retain(v28);
    v27 = 0;
  }
  swift_storeEnumTagMultiPayload(v23, v25, v27);
  v29 = a3[8];
  v30 = a1 + v29;
  v31 = (uint64_t *)(a2 + v29);
  v32 = *v31;
  LOBYTE(v31) = *((_BYTE *)v31 + 8);
  *(_QWORD *)v30 = v32;
  *(_BYTE *)(v30 + 8) = (_BYTE)v31;
  swift_retain(v32);
  return a1;
}

uint64_t sub_100051E2C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = type metadata accessor for WorldClockEntry(0);
  v8 = *(int *)(v7 + 20);
  v9 = *(_QWORD *)(a2 + v8);
  v10 = *(_QWORD *)(a1 + v8);
  *(_QWORD *)(a1 + v8) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  *(_BYTE *)(a1 + *(int *)(v7 + 24)) = *(_BYTE *)(a2 + *(int *)(v7 + 24));
  if (a1 != a2)
  {
    v11 = a3[5];
    v12 = (uint64_t *)(a1 + v11);
    v13 = (uint64_t *)(a2 + v11);
    sub_1000106A4(a1 + v11, &qword_1000850C0);
    v14 = sub_1000041D8(&qword_1000850C0);
    if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
    {
      v15 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v12, v13, v15);
      v16 = 1;
    }
    else
    {
      v17 = *v13;
      *v12 = *v13;
      swift_retain(v17);
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(v12, v14, v16);
  }
  v18 = a3[6];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = *(_QWORD *)v20;
  v22 = *(_BYTE *)(v20 + 8);
  sub_10002571C(*(_QWORD *)v20, v22);
  v23 = *(_QWORD *)v19;
  v24 = *(_BYTE *)(v19 + 8);
  *(_QWORD *)v19 = v21;
  *(_BYTE *)(v19 + 8) = v22;
  sub_100025728(v23, v24);
  if (a1 != a2)
  {
    v25 = a3[7];
    v26 = (uint64_t *)(a1 + v25);
    v27 = (uint64_t *)(a2 + v25);
    sub_1000106A4(a1 + v25, &qword_100085E28);
    v28 = sub_1000041D8(&qword_100085E28);
    if (swift_getEnumCaseMultiPayload(v27, v28) == 1)
    {
      v29 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v26, v27, v29);
      v30 = 1;
    }
    else
    {
      v31 = *v27;
      *v26 = *v27;
      swift_retain(v31);
      v30 = 0;
    }
    swift_storeEnumTagMultiPayload(v26, v28, v30);
  }
  v32 = a3[8];
  v33 = (uint64_t *)(a1 + v32);
  v34 = (uint64_t *)(a2 + v32);
  v35 = *v34;
  LOBYTE(v34) = *((_BYTE *)v34 + 8);
  v36 = *v33;
  *v33 = v35;
  *((_BYTE *)v33 + 8) = (_BYTE)v34;
  swift_retain(v35);
  swift_release(v36);
  return a1;
}

uint64_t sub_100052030(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = type metadata accessor for WorldClockEntry(0);
  *(_QWORD *)(a1 + *(int *)(v7 + 20)) = *(_QWORD *)(a2 + *(int *)(v7 + 20));
  *(_BYTE *)(a1 + *(int *)(v7 + 24)) = *(_BYTE *)(a2 + *(int *)(v7 + 24));
  v8 = a3[5];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = sub_1000041D8(&qword_1000850C0);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  v13 = a3[6];
  v14 = a3[7];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  v17 = (void *)(a1 + v14);
  v18 = (const void *)(a2 + v14);
  v19 = sub_1000041D8(&qword_100085E28);
  if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
  {
    v20 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v17, v18, v20);
    swift_storeEnumTagMultiPayload(v17, v19, 1);
  }
  else
  {
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  v21 = a3[8];
  v22 = a1 + v21;
  v23 = a2 + v21;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
  return a1;
}

uint64_t sub_1000521CC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  void *v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = type metadata accessor for WorldClockEntry(0);
  v8 = *(int *)(v7 + 20);
  v9 = *(_QWORD *)(a1 + v8);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + *(int *)(v7 + 24)) = *(_BYTE *)(a2 + *(int *)(v7 + 24));
  if (a1 != a2)
  {
    v10 = a3[5];
    v11 = (void *)(a1 + v10);
    v12 = (const void *)(a2 + v10);
    sub_1000106A4(a1 + v10, &qword_1000850C0);
    v13 = sub_1000041D8(&qword_1000850C0);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v11, v12, v14);
      swift_storeEnumTagMultiPayload(v11, v13, 1);
    }
    else
    {
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
  }
  v15 = a3[6];
  v16 = a1 + v15;
  v17 = (uint64_t *)(a2 + v15);
  v18 = *v17;
  LOBYTE(v17) = *((_BYTE *)v17 + 8);
  v19 = *(_QWORD *)v16;
  v20 = *(_BYTE *)(v16 + 8);
  *(_QWORD *)v16 = v18;
  *(_BYTE *)(v16 + 8) = (_BYTE)v17;
  sub_100025728(v19, v20);
  if (a1 != a2)
  {
    v21 = a3[7];
    v22 = (void *)(a1 + v21);
    v23 = (const void *)(a2 + v21);
    sub_1000106A4(a1 + v21, &qword_100085E28);
    v24 = sub_1000041D8(&qword_100085E28);
    if (swift_getEnumCaseMultiPayload(v23, v24) == 1)
    {
      v25 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v22, v23, v25);
      swift_storeEnumTagMultiPayload(v22, v24, 1);
    }
    else
    {
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
  }
  v26 = a3[8];
  v27 = (uint64_t *)(a1 + v26);
  v28 = (uint64_t *)(a2 + v26);
  v29 = *v28;
  LOBYTE(v28) = *((_BYTE *)v28 + 8);
  v30 = *v27;
  *v27 = v29;
  *((_BYTE *)v27 + 8) = (_BYTE)v28;
  swift_release(v30);
  return a1;
}

uint64_t sub_1000523BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000523C8);
}

uint64_t sub_1000523CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000523D8);
}

void sub_1000523DC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[5];

  v2 = type metadata accessor for WorldClockEntry(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10005A51C(319, (unint64_t *)&qword_100085490, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      v8[2] = "\t";
      sub_10005A51C(319, (unint64_t *)&unk_1000864D8, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
      if (v7 <= 0x3F)
      {
        v8[3] = *(_QWORD *)(v6 - 8) + 64;
        v8[4] = "\t";
        swift_initStructMetadata(a1, 256, 5, v8, a1 + 16);
      }
    }
  }
}

char *sub_1000524B4(char *a1, char *a2)
{
  uint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;

  v4 = type metadata accessor for WorldClockCity(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v29 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v29 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v29);
  }
  else
  {
    v6 = (int *)v4;
    v7 = type metadata accessor for Date(0);
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v9(a1, a2, v7);
    a1[v6[5]] = a2[v6[5]];
    v10 = v6[6];
    v11 = &a1[v10];
    v12 = &a2[v10];
    v13 = *((_QWORD *)v12 + 1);
    *(_QWORD *)v11 = *(_QWORD *)v12;
    *((_QWORD *)v11 + 1) = v13;
    v14 = v6[7];
    v15 = &a1[v14];
    v16 = &a2[v14];
    v17 = *((_QWORD *)v16 + 1);
    *(_QWORD *)v15 = *(_QWORD *)v16;
    *((_QWORD *)v15 + 1) = v17;
    v18 = v6[8];
    v19 = &a1[v18];
    v20 = &a2[v18];
    v21 = *((_QWORD *)v20 + 1);
    *(_QWORD *)v19 = *(_QWORD *)v20;
    *((_QWORD *)v19 + 1) = v21;
    v22 = v6[9];
    v23 = &a1[v22];
    v24 = &a2[v22];
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v21);
    v9(v23, v24, v7);
    v9(&a1[v6[10]], &a2[v6[10]], v7);
    v25 = v6[11];
    v26 = &a1[v25];
    v27 = &a2[v25];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(&a2[v25], 1, v7))
    {
      v28 = sub_1000041D8(&qword_100084810);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      v9(v26, v27, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v26, 0, 1, v7);
    }
    a1[v6[12]] = a2[v6[12]];
    a1[v6[13]] = a2[v6[13]];
  }
  return a1;
}

uint64_t sub_100052668(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t result;
  void (*v7)(uint64_t, uint64_t);

  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v7(a1, v2);
  v4 = (int *)type metadata accessor for WorldClockCity(0);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v4[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v4[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v4[8] + 8));
  v7(a1 + v4[9], v2);
  v7(a1 + v4[10], v2);
  v5 = a1 + v4[11];
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v5, 1, v2);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v7)(v5, v2);
  return result;
}

char *sub_100052760(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(void *, const void *, uint64_t);
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(void (**)(void *, const void *, uint64_t))(v5 + 16);
  v6(a1, a2, v4);
  v7 = (int *)type metadata accessor for WorldClockCity(0);
  a1[v7[5]] = a2[v7[5]];
  v8 = v7[6];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = *((_QWORD *)v10 + 1);
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *((_QWORD *)v9 + 1) = v11;
  v12 = v7[7];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = *((_QWORD *)v14 + 1);
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *((_QWORD *)v13 + 1) = v15;
  v16 = v7[8];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = *((_QWORD *)v18 + 1);
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *((_QWORD *)v17 + 1) = v19;
  v20 = v7[9];
  v21 = &a1[v20];
  v22 = &a2[v20];
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v19);
  v6(v21, v22, v4);
  v6(&a1[v7[10]], &a2[v7[10]], v4);
  v23 = v7[11];
  v24 = &a1[v23];
  v25 = &a2[v23];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(&a2[v23], 1, v4))
  {
    v26 = sub_1000041D8(&qword_100084810);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    v6(v24, v25, v4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v24, 0, 1, v4);
  }
  a1[v7[12]] = a2[v7[12]];
  a1[v7[13]] = a2[v7[13]];
  return a1;
}

char *sub_1000528E8(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(void *, const void *, uint64_t);
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t (*v26)(const void *, uint64_t, uint64_t);
  int v27;
  int v28;
  uint64_t v29;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(void (**)(void *, const void *, uint64_t))(v5 + 24);
  v6(a1, a2, v4);
  v7 = (int *)type metadata accessor for WorldClockCity(0);
  a1[v7[5]] = a2[v7[5]];
  v8 = v7[6];
  v9 = &a1[v8];
  v10 = &a2[v8];
  *(_QWORD *)v9 = *(_QWORD *)v10;
  v11 = *((_QWORD *)v10 + 1);
  v12 = *((_QWORD *)v9 + 1);
  *((_QWORD *)v9 + 1) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  v13 = v7[7];
  v14 = &a1[v13];
  v15 = &a2[v13];
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v16 = *((_QWORD *)v15 + 1);
  v17 = *((_QWORD *)v14 + 1);
  *((_QWORD *)v14 + 1) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  v18 = v7[8];
  v19 = &a1[v18];
  v20 = &a2[v18];
  *(_QWORD *)v19 = *(_QWORD *)v20;
  v21 = *((_QWORD *)v20 + 1);
  v22 = *((_QWORD *)v19 + 1);
  *((_QWORD *)v19 + 1) = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  v6(&a1[v7[9]], &a2[v7[9]], v4);
  v6(&a1[v7[10]], &a2[v7[10]], v4);
  v23 = v7[11];
  v24 = &a1[v23];
  v25 = &a2[v23];
  v26 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v5 + 48);
  v27 = v26(&a1[v23], 1, v4);
  v28 = v26(v25, 1, v4);
  if (!v27)
  {
    if (!v28)
    {
      v6(v24, v25, v4);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v24, v4);
    goto LABEL_6;
  }
  if (v28)
  {
LABEL_6:
    v29 = sub_1000041D8(&qword_100084810);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v24, v25, v4);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v24, 0, 1, v4);
LABEL_7:
  a1[v7[12]] = a2[v7[12]];
  a1[v7[13]] = a2[v7[13]];
  return a1;
}

char *sub_100052AE0(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(void *, const void *, uint64_t);
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(void (**)(void *, const void *, uint64_t))(v5 + 32);
  v6(a1, a2, v4);
  v7 = (int *)type metadata accessor for WorldClockCity(0);
  a1[v7[5]] = a2[v7[5]];
  *(_OWORD *)&a1[v7[6]] = *(_OWORD *)&a2[v7[6]];
  *(_OWORD *)&a1[v7[7]] = *(_OWORD *)&a2[v7[7]];
  *(_OWORD *)&a1[v7[8]] = *(_OWORD *)&a2[v7[8]];
  v6(&a1[v7[9]], &a2[v7[9]], v4);
  v6(&a1[v7[10]], &a2[v7[10]], v4);
  v8 = v7[11];
  v9 = &a1[v8];
  v10 = &a2[v8];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(&a2[v8], 1, v4))
  {
    v11 = sub_1000041D8(&qword_100084810);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v6(v9, v10, v4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v9, 0, 1, v4);
  }
  a1[v7[12]] = a2[v7[12]];
  a1[v7[13]] = a2[v7[13]];
  return a1;
}

char *sub_100052C2C(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(void *, const void *, uint64_t);
  int *v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t (*v29)(const void *, uint64_t, uint64_t);
  int v30;
  int v31;
  uint64_t v32;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(void (**)(void *, const void *, uint64_t))(v5 + 40);
  v6(a1, a2, v4);
  v7 = (int *)type metadata accessor for WorldClockCity(0);
  a1[v7[5]] = a2[v7[5]];
  v8 = v7[6];
  v9 = &a1[v8];
  v10 = (uint64_t *)&a2[v8];
  v12 = *v10;
  v11 = v10[1];
  v13 = *((_QWORD *)v9 + 1);
  *(_QWORD *)v9 = v12;
  *((_QWORD *)v9 + 1) = v11;
  swift_bridgeObjectRelease(v13);
  v14 = v7[7];
  v15 = &a1[v14];
  v16 = (uint64_t *)&a2[v14];
  v18 = *v16;
  v17 = v16[1];
  v19 = *((_QWORD *)v15 + 1);
  *(_QWORD *)v15 = v18;
  *((_QWORD *)v15 + 1) = v17;
  swift_bridgeObjectRelease(v19);
  v20 = v7[8];
  v21 = &a1[v20];
  v22 = (uint64_t *)&a2[v20];
  v24 = *v22;
  v23 = v22[1];
  v25 = *((_QWORD *)v21 + 1);
  *(_QWORD *)v21 = v24;
  *((_QWORD *)v21 + 1) = v23;
  swift_bridgeObjectRelease(v25);
  v6(&a1[v7[9]], &a2[v7[9]], v4);
  v6(&a1[v7[10]], &a2[v7[10]], v4);
  v26 = v7[11];
  v27 = &a1[v26];
  v28 = &a2[v26];
  v29 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v5 + 48);
  v30 = v29(&a1[v26], 1, v4);
  v31 = v29(v28, 1, v4);
  if (!v30)
  {
    if (!v31)
    {
      v6(v27, v28, v4);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v27, v4);
    goto LABEL_6;
  }
  if (v31)
  {
LABEL_6:
    v32 = sub_1000041D8(&qword_100084810);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v27, v28, v4);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v27, 0, 1, v4);
LABEL_7:
  a1[v7[12]] = a2[v7[12]];
  a1[v7[13]] = a2[v7[13]];
  return a1;
}

uint64_t sub_100052DF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100052E00);
}

uint64_t sub_100052E00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100062908(a1, a2, a3, type metadata accessor for WorldClockCity);
}

uint64_t sub_100052E0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100052E18);
}

uint64_t sub_100052E18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10006295C(a1, a2, a3, a4, type metadata accessor for WorldClockCity);
}

uint64_t type metadata accessor for ClockRectangularComplication(uint64_t a1)
{
  return sub_10000DEFC(a1, (uint64_t *)&unk_10008BAD0, (uint64_t)&nominal type descriptor for ClockRectangularComplication);
}

uint64_t sub_100052E38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000629BC(a1, a2, a3, type metadata accessor for WorldClockCity);
}

uint64_t *sub_100052E44(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  uint64_t v41;
  char *v42;
  char *v43;
  unsigned int (*v44)(char *, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  void (*v70)(char *, _QWORD, uint64_t, int *);
  void (*v72)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v73;
  uint64_t v74;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v10);
  }
  else
  {
    v7 = (int *)type metadata accessor for WorldClockCity(0);
    v8 = *((_QWORD *)v7 - 1);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, int *))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_1000041D8(&qword_100085070);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      v73 = v8;
      v11 = type metadata accessor for Date(0);
      v12 = *(_QWORD *)(v11 - 8);
      v72 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v12 + 16);
      v72(a1, a2, v11);
      *((_BYTE *)a1 + v7[5]) = *((_BYTE *)a2 + v7[5]);
      v13 = v7[6];
      v14 = (uint64_t *)((char *)a1 + v13);
      v15 = (uint64_t *)((char *)a2 + v13);
      v16 = v15[1];
      *v14 = *v15;
      v14[1] = v16;
      v17 = v7[7];
      v18 = (uint64_t *)((char *)a1 + v17);
      v19 = (uint64_t *)((char *)a2 + v17);
      v20 = v19[1];
      *v18 = *v19;
      v18[1] = v20;
      v21 = v7[8];
      v22 = (uint64_t *)((char *)a1 + v21);
      v23 = (uint64_t *)((char *)a2 + v21);
      v24 = v23[1];
      *v22 = *v23;
      v22[1] = v24;
      v25 = v7[9];
      v26 = (char *)a1 + v25;
      v27 = (char *)a2 + v25;
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRetain(v24);
      v72((uint64_t *)v26, (uint64_t *)v27, v11);
      v72((uint64_t *)((char *)a1 + v7[10]), (uint64_t *)((char *)a2 + v7[10]), v11);
      v28 = v7[11];
      v29 = (char *)a1 + v28;
      v30 = (char *)a2 + v28;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))((char *)a2 + v28, 1, v11))
      {
        v31 = sub_1000041D8(&qword_100084810);
        memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
      }
      else
      {
        v72((uint64_t *)v29, (uint64_t *)v30, v11);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v29, 0, 1, v11);
      }
      *((_BYTE *)a1 + v7[12]) = *((_BYTE *)a2 + v7[12]);
      *((_BYTE *)a1 + v7[13]) = *((_BYTE *)a2 + v7[13]);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, int *))(v73 + 56))(a1, 0, 1, v7);
    }
    v32 = *(int *)(a3 + 20);
    v33 = (char *)a1 + v32;
    v34 = (char *)a2 + v32;
    v35 = (int *)type metadata accessor for AlarmEntry(0);
    v36 = *((_QWORD *)v35 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v36 + 48))(v34, 1, v35))
    {
      v37 = sub_1000041D8(&qword_100085E68);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    }
    else
    {
      v74 = v36;
      v38 = type metadata accessor for Date(0);
      v39 = *(_QWORD *)(v38 - 8);
      v40 = *(void (**)(char *, char *, uint64_t))(v39 + 16);
      v40(v33, v34, v38);
      v41 = v35[5];
      v42 = &v33[v41];
      v43 = &v34[v41];
      v44 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48);
      if (v44(&v34[v41], 1, v38))
      {
        v45 = sub_1000041D8(&qword_100084810);
        memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
      }
      else
      {
        v40(v42, v43, v38);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v42, 0, 1, v38);
      }
      v46 = v35[6];
      v47 = &v33[v46];
      v48 = &v34[v46];
      if (v44(&v34[v46], 1, v38))
      {
        v49 = sub_1000041D8(&qword_100084810);
        memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
      }
      else
      {
        v40(v47, v48, v38);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v47, 0, 1, v38);
      }
      v33[v35[7]] = v34[v35[7]];
      v33[v35[8]] = v34[v35[8]];
      v50 = v35[9];
      v51 = &v33[v50];
      v52 = &v34[v50];
      v53 = *((_QWORD *)v52 + 1);
      *(_QWORD *)v51 = *(_QWORD *)v52;
      *((_QWORD *)v51 + 1) = v53;
      v54 = v35[10];
      v55 = &v33[v54];
      v56 = &v34[v54];
      v57 = *((_QWORD *)v56 + 1);
      *(_QWORD *)v55 = *(_QWORD *)v56;
      *((_QWORD *)v55 + 1) = v57;
      v58 = v35[11];
      v59 = &v33[v58];
      v60 = &v34[v58];
      v61 = *((_QWORD *)v60 + 1);
      *(_QWORD *)v59 = *(_QWORD *)v60;
      *((_QWORD *)v59 + 1) = v61;
      v62 = v35[12];
      v63 = &v33[v62];
      v64 = &v34[v62];
      v65 = *((_QWORD *)v64 + 1);
      *(_QWORD *)v63 = *(_QWORD *)v64;
      *((_QWORD *)v63 + 1) = v65;
      v33[v35[13]] = v34[v35[13]];
      v33[v35[14]] = v34[v35[14]];
      v66 = v35[15];
      v67 = &v33[v66];
      v68 = &v34[v66];
      v69 = *((_QWORD *)v68 + 1);
      *(_QWORD *)v67 = *(_QWORD *)v68;
      *((_QWORD *)v67 + 1) = v69;
      v33[v35[16]] = v34[v35[16]];
      v33[v35[17]] = v34[v35[17]];
      v70 = *(void (**)(char *, _QWORD, uint64_t, int *))(v74 + 56);
      swift_bridgeObjectRetain(v53);
      swift_bridgeObjectRetain(v57);
      swift_bridgeObjectRetain(v61);
      swift_bridgeObjectRetain(v65);
      swift_bridgeObjectRetain(v69);
      v70(v33, 0, 1, v35);
    }
  }
  return a1;
}

uint64_t sub_1000532BC(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  unsigned int (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;

  v4 = (int *)type metadata accessor for WorldClockCity(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v4 - 1) + 48))(a1, 1, v4))
  {
    v5 = type metadata accessor for Date(0);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v7(a1, v5);
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + v4[6] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + v4[7] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + v4[8] + 8));
    v7(a1 + v4[9], v5);
    v7(a1 + v4[10], v5);
    v8 = a1 + v4[11];
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5))
      v7(v8, v5);
  }
  v9 = a1 + *(int *)(a2 + 20);
  v10 = (int *)type metadata accessor for AlarmEntry(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v10 - 1) + 48))(v9, 1, v10);
  if (!(_DWORD)result)
  {
    v12 = type metadata accessor for Date(0);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v14(v9, v12);
    v15 = v9 + v10[5];
    v16 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
    if (!v16(v15, 1, v12))
      v14(v15, v12);
    v17 = v9 + v10[6];
    if (!v16(v17, 1, v12))
      v14(v17, v12);
    swift_bridgeObjectRelease(*(_QWORD *)(v9 + v10[9] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v9 + v10[10] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v9 + v10[11] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(v9 + v10[12] + 8));
    return swift_bridgeObjectRelease(*(_QWORD *)(v9 + v10[15] + 8));
  }
  return result;
}

char *sub_1000534B4(char *a1, char *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  char *v41;
  char *v42;
  unsigned int (*v43)(char *, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  void (*v69)(char *, _QWORD, uint64_t, int *);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v6 = (int *)type metadata accessor for WorldClockCity(0);
  v7 = *((_QWORD *)v6 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_1000041D8(&qword_100085070);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    v71 = v7;
    v72 = a3;
    v9 = type metadata accessor for Date(0);
    v10 = *(_QWORD *)(v9 - 8);
    v11 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
    v11(a1, a2, v9);
    a1[v6[5]] = a2[v6[5]];
    v12 = v6[6];
    v13 = &a1[v12];
    v14 = &a2[v12];
    v15 = *((_QWORD *)v14 + 1);
    *(_QWORD *)v13 = *(_QWORD *)v14;
    *((_QWORD *)v13 + 1) = v15;
    v16 = v6[7];
    v17 = &a1[v16];
    v18 = &a2[v16];
    v19 = *((_QWORD *)v18 + 1);
    *(_QWORD *)v17 = *(_QWORD *)v18;
    *((_QWORD *)v17 + 1) = v19;
    v20 = v6[8];
    v21 = &a1[v20];
    v22 = &a2[v20];
    v23 = *((_QWORD *)v22 + 1);
    *(_QWORD *)v21 = *(_QWORD *)v22;
    *((_QWORD *)v21 + 1) = v23;
    v24 = v6[9];
    v25 = &a1[v24];
    v26 = &a2[v24];
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v23);
    v11(v25, v26, v9);
    v11(&a1[v6[10]], &a2[v6[10]], v9);
    v27 = v6[11];
    v28 = &a1[v27];
    v29 = &a2[v27];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(&a2[v27], 1, v9))
    {
      v30 = sub_1000041D8(&qword_100084810);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      v11(v28, v29, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v28, 0, 1, v9);
    }
    a1[v6[12]] = a2[v6[12]];
    a1[v6[13]] = a2[v6[13]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v71 + 56))(a1, 0, 1, v6);
    a3 = v72;
  }
  v31 = *(int *)(a3 + 20);
  v32 = &a1[v31];
  v33 = &a2[v31];
  v34 = (int *)type metadata accessor for AlarmEntry(0);
  v35 = *((_QWORD *)v34 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v35 + 48))(v33, 1, v34))
  {
    v36 = sub_1000041D8(&qword_100085E68);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  else
  {
    v73 = v35;
    v37 = type metadata accessor for Date(0);
    v38 = *(_QWORD *)(v37 - 8);
    v39 = *(void (**)(char *, char *, uint64_t))(v38 + 16);
    v39(v32, v33, v37);
    v40 = v34[5];
    v41 = &v32[v40];
    v42 = &v33[v40];
    v43 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48);
    if (v43(&v33[v40], 1, v37))
    {
      v44 = sub_1000041D8(&qword_100084810);
      memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    }
    else
    {
      v39(v41, v42, v37);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v41, 0, 1, v37);
    }
    v45 = v34[6];
    v46 = &v32[v45];
    v47 = &v33[v45];
    if (v43(&v33[v45], 1, v37))
    {
      v48 = sub_1000041D8(&qword_100084810);
      memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    }
    else
    {
      v39(v46, v47, v37);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v46, 0, 1, v37);
    }
    v32[v34[7]] = v33[v34[7]];
    v32[v34[8]] = v33[v34[8]];
    v49 = v34[9];
    v50 = &v32[v49];
    v51 = &v33[v49];
    v52 = *((_QWORD *)v51 + 1);
    *(_QWORD *)v50 = *(_QWORD *)v51;
    *((_QWORD *)v50 + 1) = v52;
    v53 = v34[10];
    v54 = &v32[v53];
    v55 = &v33[v53];
    v56 = *((_QWORD *)v55 + 1);
    *(_QWORD *)v54 = *(_QWORD *)v55;
    *((_QWORD *)v54 + 1) = v56;
    v57 = v34[11];
    v58 = &v32[v57];
    v59 = &v33[v57];
    v60 = *((_QWORD *)v59 + 1);
    *(_QWORD *)v58 = *(_QWORD *)v59;
    *((_QWORD *)v58 + 1) = v60;
    v61 = v34[12];
    v62 = &v32[v61];
    v63 = &v33[v61];
    v64 = *((_QWORD *)v63 + 1);
    *(_QWORD *)v62 = *(_QWORD *)v63;
    *((_QWORD *)v62 + 1) = v64;
    v32[v34[13]] = v33[v34[13]];
    v32[v34[14]] = v33[v34[14]];
    v65 = v34[15];
    v66 = &v32[v65];
    v67 = &v33[v65];
    v68 = *((_QWORD *)v67 + 1);
    *(_QWORD *)v66 = *(_QWORD *)v67;
    *((_QWORD *)v66 + 1) = v68;
    v32[v34[16]] = v33[v34[16]];
    v32[v34[17]] = v33[v34[17]];
    v69 = *(void (**)(char *, _QWORD, uint64_t, int *))(v73 + 56);
    swift_bridgeObjectRetain(v52);
    swift_bridgeObjectRetain(v56);
    swift_bridgeObjectRetain(v60);
    swift_bridgeObjectRetain(v64);
    swift_bridgeObjectRetain(v68);
    v69(v32, 0, 1, v34);
  }
  return a1;
}

uint64_t sub_1000538FC(uint64_t a1, char *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, int *);
  int v9;
  int v10;
  size_t v11;
  void *v12;
  uint64_t v13;
  void (*v14)(uint64_t, char *, uint64_t);
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, char *, uint64_t);
  uint64_t v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  char *v54;
  uint64_t (*v55)(uint64_t, uint64_t, uint64_t);
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  int *v62;
  uint64_t v63;
  uint64_t (*v64)(char *, uint64_t, int *);
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(char *, char *, uint64_t);
  uint64_t v70;
  char *v71;
  char *v72;
  unsigned int (*v73)(char *, uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t (*v81)(char *, uint64_t, uint64_t);
  int v82;
  int v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  void (*v108)(char *, _QWORD, uint64_t, int *);
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  int v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void (*v145)(char *, char *, uint64_t);
  uint64_t v146;

  v6 = (int *)type metadata accessor for WorldClockCity(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v7 + 48);
  v146 = a1;
  v9 = v8(a1, 1, v6);
  v10 = v8((uint64_t)a2, 1, v6);
  if (!v9)
  {
    if (v10)
    {
      sub_10000D330(a1, type metadata accessor for WorldClockCity);
      v11 = *(_QWORD *)(*(_QWORD *)(sub_1000041D8(&qword_100085070) - 8) + 64);
      v12 = (void *)a1;
      goto LABEL_6;
    }
    v144 = a3;
    v34 = type metadata accessor for Date(0);
    v35 = *(_QWORD *)(v34 - 8);
    v36 = *(void (**)(uint64_t, char *, uint64_t))(v35 + 24);
    v36(a1, a2, v34);
    *(_BYTE *)(a1 + v6[5]) = a2[v6[5]];
    v37 = v6[6];
    v38 = (_QWORD *)(a1 + v37);
    v39 = &a2[v37];
    *v38 = *(_QWORD *)v39;
    v40 = *((_QWORD *)v39 + 1);
    v41 = v38[1];
    v38[1] = v40;
    swift_bridgeObjectRetain(v40);
    swift_bridgeObjectRelease(v41);
    v42 = v6[7];
    v43 = (_QWORD *)(a1 + v42);
    v44 = &a2[v42];
    *v43 = *(_QWORD *)v44;
    v45 = *((_QWORD *)v44 + 1);
    v46 = v43[1];
    v43[1] = v45;
    swift_bridgeObjectRetain(v45);
    swift_bridgeObjectRelease(v46);
    v47 = v6[8];
    v48 = (_QWORD *)(a1 + v47);
    v49 = &a2[v47];
    *v48 = *(_QWORD *)v49;
    v50 = *((_QWORD *)v49 + 1);
    v51 = v48[1];
    v48[1] = v50;
    swift_bridgeObjectRetain(v50);
    swift_bridgeObjectRelease(v51);
    v36(a1 + v6[9], &a2[v6[9]], v34);
    v36(a1 + v6[10], &a2[v6[10]], v34);
    v52 = v6[11];
    v53 = (void *)(a1 + v52);
    v54 = &a2[v52];
    v55 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v35 + 48);
    v56 = v55(a1 + v52, 1, v34);
    v57 = v55((uint64_t)v54, 1, v34);
    if (v56)
    {
      if (!v57)
      {
        (*(void (**)(void *, char *, uint64_t))(v35 + 16))(v53, v54, v34);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v53, 0, 1, v34);
LABEL_17:
        a3 = v144;
        *(_BYTE *)(a1 + v6[12]) = a2[v6[12]];
        *(_BYTE *)(a1 + v6[13]) = a2[v6[13]];
        goto LABEL_18;
      }
    }
    else
    {
      if (!v57)
      {
        v36((uint64_t)v53, v54, v34);
        goto LABEL_17;
      }
      (*(void (**)(void *, uint64_t))(v35 + 8))(v53, v34);
    }
    v58 = sub_1000041D8(&qword_100084810);
    memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    goto LABEL_17;
  }
  if (v10)
  {
    v11 = *(_QWORD *)(*(_QWORD *)(sub_1000041D8(&qword_100085070) - 8) + 64);
    v12 = (void *)a1;
LABEL_6:
    memcpy(v12, a2, v11);
    goto LABEL_18;
  }
  v143 = a3;
  v13 = type metadata accessor for Date(0);
  v142 = *(_QWORD *)(v13 - 8);
  v14 = *(void (**)(uint64_t, char *, uint64_t))(v142 + 16);
  v14(a1, a2, v13);
  *(_BYTE *)(a1 + v6[5]) = a2[v6[5]];
  v15 = v6[6];
  v16 = (_QWORD *)(a1 + v15);
  v17 = &a2[v15];
  *v16 = *(_QWORD *)v17;
  v18 = *((_QWORD *)v17 + 1);
  v16[1] = v18;
  v19 = v6[7];
  v20 = (_QWORD *)(a1 + v19);
  v21 = &a2[v19];
  *v20 = *(_QWORD *)v21;
  v22 = *((_QWORD *)v21 + 1);
  v20[1] = v22;
  v23 = v6[8];
  v24 = (_QWORD *)(a1 + v23);
  v25 = &a2[v23];
  *v24 = *(_QWORD *)v25;
  v26 = *((_QWORD *)v25 + 1);
  v24[1] = v26;
  v27 = v6[9];
  v28 = a1 + v27;
  v29 = &a2[v27];
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v26);
  v14(v28, v29, v13);
  v14(a1 + v6[10], &a2[v6[10]], v13);
  v30 = v6[11];
  v31 = (void *)(a1 + v30);
  v32 = &a2[v30];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v142 + 48))(&a2[v30], 1, v13))
  {
    v33 = sub_1000041D8(&qword_100084810);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  else
  {
    v14((uint64_t)v31, v32, v13);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v142 + 56))(v31, 0, 1, v13);
  }
  *(_BYTE *)(a1 + v6[12]) = a2[v6[12]];
  *(_BYTE *)(a1 + v6[13]) = a2[v6[13]];
  (*(void (**)(void))(v7 + 56))();
  a3 = v143;
LABEL_18:
  v59 = *(int *)(a3 + 20);
  v60 = (char *)(a1 + v59);
  v61 = &a2[v59];
  v62 = (int *)type metadata accessor for AlarmEntry(0);
  v63 = *((_QWORD *)v62 - 1);
  v64 = *(uint64_t (**)(char *, uint64_t, int *))(v63 + 48);
  v65 = v64(v60, 1, v62);
  v66 = v64(v61, 1, v62);
  if (!v65)
  {
    if (v66)
    {
      sub_10000D330((uint64_t)v60, type metadata accessor for AlarmEntry);
      goto LABEL_24;
    }
    v76 = type metadata accessor for Date(0);
    v77 = *(_QWORD *)(v76 - 8);
    v145 = *(void (**)(char *, char *, uint64_t))(v77 + 24);
    v145(v60, v61, v76);
    v78 = v62[5];
    v79 = &v60[v78];
    v80 = &v61[v78];
    v81 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v77 + 48);
    v82 = v81(&v60[v78], 1, v76);
    v83 = v81(v80, 1, v76);
    if (v82)
    {
      if (!v83)
      {
        (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v79, v80, v76);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v77 + 56))(v79, 0, 1, v76);
        goto LABEL_36;
      }
    }
    else
    {
      if (!v83)
      {
        v145(v79, v80, v76);
LABEL_36:
        v110 = v62[6];
        v111 = &v60[v110];
        v112 = &v61[v110];
        v113 = v81(&v60[v110], 1, v76);
        v114 = v81(v112, 1, v76);
        if (v113)
        {
          if (!v114)
          {
            (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v111, v112, v76);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v77 + 56))(v111, 0, 1, v76);
LABEL_42:
            v60[v62[7]] = v61[v62[7]];
            v60[v62[8]] = v61[v62[8]];
            v116 = v62[9];
            v117 = &v60[v116];
            v118 = &v61[v116];
            *(_QWORD *)v117 = *(_QWORD *)v118;
            v119 = *((_QWORD *)v118 + 1);
            v120 = *((_QWORD *)v117 + 1);
            *((_QWORD *)v117 + 1) = v119;
            swift_bridgeObjectRetain(v119);
            swift_bridgeObjectRelease(v120);
            v121 = v62[10];
            v122 = &v60[v121];
            v123 = &v61[v121];
            *(_QWORD *)v122 = *(_QWORD *)v123;
            v124 = *((_QWORD *)v123 + 1);
            v125 = *((_QWORD *)v122 + 1);
            *((_QWORD *)v122 + 1) = v124;
            swift_bridgeObjectRetain(v124);
            swift_bridgeObjectRelease(v125);
            v126 = v62[11];
            v127 = &v60[v126];
            v128 = &v61[v126];
            *(_QWORD *)v127 = *(_QWORD *)v128;
            v129 = *((_QWORD *)v128 + 1);
            v130 = *((_QWORD *)v127 + 1);
            *((_QWORD *)v127 + 1) = v129;
            swift_bridgeObjectRetain(v129);
            swift_bridgeObjectRelease(v130);
            v131 = v62[12];
            v132 = &v60[v131];
            v133 = &v61[v131];
            *(_QWORD *)v132 = *(_QWORD *)v133;
            v134 = *((_QWORD *)v133 + 1);
            v135 = *((_QWORD *)v132 + 1);
            *((_QWORD *)v132 + 1) = v134;
            swift_bridgeObjectRetain(v134);
            swift_bridgeObjectRelease(v135);
            v60[v62[13]] = v61[v62[13]];
            v60[v62[14]] = v61[v62[14]];
            v136 = v62[15];
            v137 = &v60[v136];
            v138 = &v61[v136];
            *(_QWORD *)v137 = *(_QWORD *)v138;
            v139 = *((_QWORD *)v138 + 1);
            v140 = *((_QWORD *)v137 + 1);
            *((_QWORD *)v137 + 1) = v139;
            swift_bridgeObjectRetain(v139);
            swift_bridgeObjectRelease(v140);
            v60[v62[16]] = v61[v62[16]];
            v60[v62[17]] = v61[v62[17]];
            return v146;
          }
        }
        else
        {
          if (!v114)
          {
            v145(v111, v112, v76);
            goto LABEL_42;
          }
          (*(void (**)(char *, uint64_t))(v77 + 8))(v111, v76);
        }
        v115 = sub_1000041D8(&qword_100084810);
        memcpy(v111, v112, *(_QWORD *)(*(_QWORD *)(v115 - 8) + 64));
        goto LABEL_42;
      }
      (*(void (**)(char *, uint64_t))(v77 + 8))(v79, v76);
    }
    v109 = sub_1000041D8(&qword_100084810);
    memcpy(v79, v80, *(_QWORD *)(*(_QWORD *)(v109 - 8) + 64));
    goto LABEL_36;
  }
  if (v66)
  {
LABEL_24:
    v75 = sub_1000041D8(&qword_100085E68);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
    return v146;
  }
  v67 = type metadata accessor for Date(0);
  v68 = *(_QWORD *)(v67 - 8);
  v69 = *(void (**)(char *, char *, uint64_t))(v68 + 16);
  v69(v60, v61, v67);
  v70 = v62[5];
  v71 = &v60[v70];
  v72 = &v61[v70];
  v73 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48);
  if (v73(&v61[v70], 1, v67))
  {
    v74 = sub_1000041D8(&qword_100084810);
    memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
  }
  else
  {
    v69(v71, v72, v67);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v71, 0, 1, v67);
  }
  v84 = v62[6];
  v85 = &v60[v84];
  v86 = &v61[v84];
  if (v73(&v61[v84], 1, v67))
  {
    v87 = sub_1000041D8(&qword_100084810);
    memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v87 - 8) + 64));
  }
  else
  {
    v69(v85, v86, v67);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v85, 0, 1, v67);
  }
  v60[v62[7]] = v61[v62[7]];
  v60[v62[8]] = v61[v62[8]];
  v88 = v62[9];
  v89 = &v60[v88];
  v90 = &v61[v88];
  *(_QWORD *)v89 = *(_QWORD *)v90;
  v91 = *((_QWORD *)v90 + 1);
  *((_QWORD *)v89 + 1) = v91;
  v92 = v62[10];
  v93 = &v60[v92];
  v94 = &v61[v92];
  *(_QWORD *)v93 = *(_QWORD *)v94;
  v95 = *((_QWORD *)v94 + 1);
  *((_QWORD *)v93 + 1) = v95;
  v96 = v62[11];
  v97 = &v60[v96];
  v98 = &v61[v96];
  *(_QWORD *)v97 = *(_QWORD *)v98;
  v99 = *((_QWORD *)v98 + 1);
  *((_QWORD *)v97 + 1) = v99;
  v100 = v62[12];
  v101 = &v60[v100];
  v102 = &v61[v100];
  *(_QWORD *)v101 = *(_QWORD *)v102;
  v103 = *((_QWORD *)v102 + 1);
  *((_QWORD *)v101 + 1) = v103;
  v60[v62[13]] = v61[v62[13]];
  v60[v62[14]] = v61[v62[14]];
  v104 = v62[15];
  v105 = &v60[v104];
  v106 = &v61[v104];
  *(_QWORD *)v105 = *(_QWORD *)v106;
  v107 = *((_QWORD *)v106 + 1);
  *((_QWORD *)v105 + 1) = v107;
  v60[v62[16]] = v61[v62[16]];
  v60[v62[17]] = v61[v62[17]];
  v108 = *(void (**)(char *, _QWORD, uint64_t, int *))(v63 + 56);
  swift_bridgeObjectRetain(v91);
  swift_bridgeObjectRetain(v95);
  swift_bridgeObjectRetain(v99);
  swift_bridgeObjectRetain(v103);
  swift_bridgeObjectRetain(v107);
  v108(v60, 0, 1, v62);
  return v146;
}

char *sub_100054278(char *a1, char *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  char *v26;
  char *v27;
  unsigned int (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v35;

  v6 = (int *)type metadata accessor for WorldClockCity(0);
  v7 = *((_QWORD *)v6 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_1000041D8(&qword_100085070);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    v9 = type metadata accessor for Date(0);
    v10 = *(_QWORD *)(v9 - 8);
    v11 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v11(a1, a2, v9);
    a1[v6[5]] = a2[v6[5]];
    *(_OWORD *)&a1[v6[6]] = *(_OWORD *)&a2[v6[6]];
    *(_OWORD *)&a1[v6[7]] = *(_OWORD *)&a2[v6[7]];
    *(_OWORD *)&a1[v6[8]] = *(_OWORD *)&a2[v6[8]];
    v11(&a1[v6[9]], &a2[v6[9]], v9);
    v11(&a1[v6[10]], &a2[v6[10]], v9);
    v12 = v6[11];
    v13 = &a1[v12];
    v14 = &a2[v12];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(&a2[v12], 1, v9))
    {
      v15 = sub_1000041D8(&qword_100084810);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      v11(v13, v14, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v13, 0, 1, v9);
    }
    a1[v6[12]] = a2[v6[12]];
    a1[v6[13]] = a2[v6[13]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v7 + 56))(a1, 0, 1, v6);
  }
  v16 = *(int *)(a3 + 20);
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = (int *)type metadata accessor for AlarmEntry(0);
  v20 = *((_QWORD *)v19 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v20 + 48))(v18, 1, v19))
  {
    v21 = sub_1000041D8(&qword_100085E68);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    v35 = v20;
    v22 = type metadata accessor for Date(0);
    v23 = *(_QWORD *)(v22 - 8);
    v24 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    v24(v17, v18, v22);
    v25 = v19[5];
    v26 = &v17[v25];
    v27 = &v18[v25];
    v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
    if (v28(&v18[v25], 1, v22))
    {
      v29 = sub_1000041D8(&qword_100084810);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      v24(v26, v27, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v26, 0, 1, v22);
    }
    v30 = v19[6];
    v31 = &v17[v30];
    v32 = &v18[v30];
    if (v28(&v18[v30], 1, v22))
    {
      v33 = sub_1000041D8(&qword_100084810);
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      v24(v31, v32, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v31, 0, 1, v22);
    }
    v17[v19[7]] = v18[v19[7]];
    v17[v19[8]] = v18[v19[8]];
    *(_OWORD *)&v17[v19[9]] = *(_OWORD *)&v18[v19[9]];
    *(_OWORD *)&v17[v19[10]] = *(_OWORD *)&v18[v19[10]];
    *(_OWORD *)&v17[v19[11]] = *(_OWORD *)&v18[v19[11]];
    *(_OWORD *)&v17[v19[12]] = *(_OWORD *)&v18[v19[12]];
    v17[v19[13]] = v18[v19[13]];
    v17[v19[14]] = v18[v19[14]];
    *(_OWORD *)&v17[v19[15]] = *(_OWORD *)&v18[v19[15]];
    v17[v19[16]] = v18[v19[16]];
    v17[v19[17]] = v18[v19[17]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v35 + 56))(v17, 0, 1, v19);
  }
  return a1;
}

char *sub_100054634(char *a1, char *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, int *);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  char *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t (*v43)(char *, uint64_t, uint64_t);
  int v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  int *v49;
  uint64_t v50;
  uint64_t (*v51)(char *, uint64_t, int *);
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t);
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t (*v67)(char *, uint64_t, uint64_t);
  int v68;
  int v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v112;
  unsigned int (*v113)(char *, uint64_t, uint64_t);
  void (*v114)(char *, char *, uint64_t);

  v6 = (int *)type metadata accessor for WorldClockCity(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(uint64_t (**)(char *, uint64_t, int *))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (v10)
    {
      sub_10000D330((uint64_t)a1, type metadata accessor for WorldClockCity);
      goto LABEL_7;
    }
    v19 = type metadata accessor for Date(0);
    v20 = *(_QWORD *)(v19 - 8);
    v21 = *(void (**)(char *, char *, uint64_t))(v20 + 40);
    v21(a1, a2, v19);
    a1[v6[5]] = a2[v6[5]];
    v22 = v6[6];
    v23 = &a1[v22];
    v24 = (uint64_t *)&a2[v22];
    v26 = *v24;
    v25 = v24[1];
    v27 = *((_QWORD *)v23 + 1);
    *(_QWORD *)v23 = v26;
    *((_QWORD *)v23 + 1) = v25;
    swift_bridgeObjectRelease(v27);
    v28 = v6[7];
    v29 = &a1[v28];
    v30 = (uint64_t *)&a2[v28];
    v32 = *v30;
    v31 = v30[1];
    v33 = *((_QWORD *)v29 + 1);
    *(_QWORD *)v29 = v32;
    *((_QWORD *)v29 + 1) = v31;
    swift_bridgeObjectRelease(v33);
    v34 = v6[8];
    v35 = &a1[v34];
    v36 = (uint64_t *)&a2[v34];
    v38 = *v36;
    v37 = v36[1];
    v39 = *((_QWORD *)v35 + 1);
    *(_QWORD *)v35 = v38;
    *((_QWORD *)v35 + 1) = v37;
    swift_bridgeObjectRelease(v39);
    v21(&a1[v6[9]], &a2[v6[9]], v19);
    v21(&a1[v6[10]], &a2[v6[10]], v19);
    v40 = v6[11];
    v41 = &a1[v40];
    v42 = &a2[v40];
    v112 = v20;
    v43 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
    LODWORD(v20) = v43(&a1[v40], 1, v19);
    v44 = v43(v42, 1, v19);
    if ((_DWORD)v20)
    {
      if (!v44)
      {
        (*(void (**)(char *, char *, uint64_t))(v112 + 32))(v41, v42, v19);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v112 + 56))(v41, 0, 1, v19);
LABEL_16:
        a1[v6[12]] = a2[v6[12]];
        a1[v6[13]] = a2[v6[13]];
        goto LABEL_17;
      }
    }
    else
    {
      if (!v44)
      {
        v21(v41, v42, v19);
        goto LABEL_16;
      }
      (*(void (**)(char *, uint64_t))(v112 + 8))(v41, v19);
    }
    v45 = sub_1000041D8(&qword_100084810);
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    goto LABEL_16;
  }
  if (v10)
  {
LABEL_7:
    v18 = sub_1000041D8(&qword_100085070);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_17;
  }
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v13(a1, a2, v11);
  a1[v6[5]] = a2[v6[5]];
  *(_OWORD *)&a1[v6[6]] = *(_OWORD *)&a2[v6[6]];
  *(_OWORD *)&a1[v6[7]] = *(_OWORD *)&a2[v6[7]];
  *(_OWORD *)&a1[v6[8]] = *(_OWORD *)&a2[v6[8]];
  v13(&a1[v6[9]], &a2[v6[9]], v11);
  v13(&a1[v6[10]], &a2[v6[10]], v11);
  v14 = v6[11];
  v15 = &a1[v14];
  v16 = &a2[v14];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(&a2[v14], 1, v11))
  {
    v17 = sub_1000041D8(&qword_100084810);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v13(v15, v16, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v15, 0, 1, v11);
  }
  a1[v6[12]] = a2[v6[12]];
  a1[v6[13]] = a2[v6[13]];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v7 + 56))(a1, 0, 1, v6);
LABEL_17:
  v46 = *(int *)(a3 + 20);
  v47 = &a1[v46];
  v48 = &a2[v46];
  v49 = (int *)type metadata accessor for AlarmEntry(0);
  v50 = *((_QWORD *)v49 - 1);
  v51 = *(uint64_t (**)(char *, uint64_t, int *))(v50 + 48);
  v52 = v51(v47, 1, v49);
  v53 = v51(v48, 1, v49);
  if (!v52)
  {
    if (v53)
    {
      sub_10000D330((uint64_t)v47, type metadata accessor for AlarmEntry);
      goto LABEL_23;
    }
    v62 = type metadata accessor for Date(0);
    v63 = *(_QWORD *)(v62 - 8);
    v114 = *(void (**)(char *, char *, uint64_t))(v63 + 40);
    v114(v47, v48, v62);
    v64 = v49[5];
    v65 = &v47[v64];
    v66 = &v48[v64];
    v67 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v63 + 48);
    v68 = v67(&v47[v64], 1, v62);
    v69 = v67(v66, 1, v62);
    if (v68)
    {
      if (!v69)
      {
        (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v65, v66, v62);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v65, 0, 1, v62);
        goto LABEL_35;
      }
    }
    else
    {
      if (!v69)
      {
        v114(v65, v66, v62);
LABEL_35:
        v75 = v49[6];
        v76 = &v47[v75];
        v77 = &v48[v75];
        v78 = v67(&v47[v75], 1, v62);
        v79 = v67(v77, 1, v62);
        if (v78)
        {
          if (!v79)
          {
            (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v76, v77, v62);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v76, 0, 1, v62);
LABEL_41:
            v47[v49[7]] = v48[v49[7]];
            v47[v49[8]] = v48[v49[8]];
            v81 = v49[9];
            v82 = &v47[v81];
            v83 = (uint64_t *)&v48[v81];
            v85 = *v83;
            v84 = v83[1];
            v86 = *((_QWORD *)v82 + 1);
            *(_QWORD *)v82 = v85;
            *((_QWORD *)v82 + 1) = v84;
            swift_bridgeObjectRelease(v86);
            v87 = v49[10];
            v88 = &v47[v87];
            v89 = (uint64_t *)&v48[v87];
            v91 = *v89;
            v90 = v89[1];
            v92 = *((_QWORD *)v88 + 1);
            *(_QWORD *)v88 = v91;
            *((_QWORD *)v88 + 1) = v90;
            swift_bridgeObjectRelease(v92);
            v93 = v49[11];
            v94 = &v47[v93];
            v95 = (uint64_t *)&v48[v93];
            v97 = *v95;
            v96 = v95[1];
            v98 = *((_QWORD *)v94 + 1);
            *(_QWORD *)v94 = v97;
            *((_QWORD *)v94 + 1) = v96;
            swift_bridgeObjectRelease(v98);
            v99 = v49[12];
            v100 = &v47[v99];
            v101 = (uint64_t *)&v48[v99];
            v103 = *v101;
            v102 = v101[1];
            v104 = *((_QWORD *)v100 + 1);
            *(_QWORD *)v100 = v103;
            *((_QWORD *)v100 + 1) = v102;
            swift_bridgeObjectRelease(v104);
            v47[v49[13]] = v48[v49[13]];
            v47[v49[14]] = v48[v49[14]];
            v105 = v49[15];
            v106 = &v47[v105];
            v107 = (uint64_t *)&v48[v105];
            v109 = *v107;
            v108 = v107[1];
            v110 = *((_QWORD *)v106 + 1);
            *(_QWORD *)v106 = v109;
            *((_QWORD *)v106 + 1) = v108;
            swift_bridgeObjectRelease(v110);
            v47[v49[16]] = v48[v49[16]];
            v47[v49[17]] = v48[v49[17]];
            return a1;
          }
        }
        else
        {
          if (!v79)
          {
            v114(v76, v77, v62);
            goto LABEL_41;
          }
          (*(void (**)(char *, uint64_t))(v63 + 8))(v76, v62);
        }
        v80 = sub_1000041D8(&qword_100084810);
        memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
        goto LABEL_41;
      }
      (*(void (**)(char *, uint64_t))(v63 + 8))(v65, v62);
    }
    v74 = sub_1000041D8(&qword_100084810);
    memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
    goto LABEL_35;
  }
  if (v53)
  {
LABEL_23:
    v61 = sub_1000041D8(&qword_100085E68);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    return a1;
  }
  v54 = type metadata accessor for Date(0);
  v55 = *(_QWORD *)(v54 - 8);
  v56 = *(void (**)(char *, char *, uint64_t))(v55 + 32);
  v56(v47, v48, v54);
  v57 = v49[5];
  v58 = &v47[v57];
  v59 = &v48[v57];
  v113 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48);
  if (v113(&v48[v57], 1, v54))
  {
    v60 = sub_1000041D8(&qword_100084810);
    memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
  }
  else
  {
    v56(v58, v59, v54);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v58, 0, 1, v54);
  }
  v70 = v49[6];
  v71 = &v47[v70];
  v72 = &v48[v70];
  if (v113(&v48[v70], 1, v54))
  {
    v73 = sub_1000041D8(&qword_100084810);
    memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
  }
  else
  {
    v56(v71, v72, v54);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v71, 0, 1, v54);
  }
  v47[v49[7]] = v48[v49[7]];
  v47[v49[8]] = v48[v49[8]];
  *(_OWORD *)&v47[v49[9]] = *(_OWORD *)&v48[v49[9]];
  *(_OWORD *)&v47[v49[10]] = *(_OWORD *)&v48[v49[10]];
  *(_OWORD *)&v47[v49[11]] = *(_OWORD *)&v48[v49[11]];
  *(_OWORD *)&v47[v49[12]] = *(_OWORD *)&v48[v49[12]];
  v47[v49[13]] = v48[v49[13]];
  v47[v49[14]] = v48[v49[14]];
  *(_OWORD *)&v47[v49[15]] = *(_OWORD *)&v48[v49[15]];
  v47[v49[16]] = v48[v49[16]];
  v47[v49[17]] = v48[v49[17]];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v50 + 56))(v47, 0, 1, v49);
  return a1;
}

uint64_t sub_100054E3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100054E48);
}

uint64_t sub_100054E48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = sub_1000041D8(&qword_100085070);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_1000041D8(&qword_100085E68);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_100054EC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100054ED0);
}

uint64_t sub_100054ED0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = sub_1000041D8(&qword_100085070);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_1000041D8(&qword_100085E68);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_100054F54(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  sub_10005A51C(319, &qword_1000865F0, type metadata accessor for WorldClockCity, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10005A51C(319, (unint64_t *)&unk_1000865F8, type metadata accessor for AlarmEntry, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v6, a1 + 16);
    }
  }
}

_QWORD *sub_100055008(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v17);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = type metadata accessor for WorldClockEntry(0);
    v9 = *(int *)(v8 + 20);
    v10 = *(_QWORD *)((char *)a2 + v9);
    *(_QWORD *)((char *)a1 + v9) = v10;
    *((_BYTE *)a1 + *(int *)(v8 + 24)) = *((_BYTE *)a2 + *(int *)(v8 + 24));
    v11 = a3[5];
    v12 = (_QWORD *)((char *)a1 + v11);
    v13 = (_QWORD *)((char *)a2 + v11);
    swift_bridgeObjectRetain(v10);
    v14 = sub_1000041D8(&qword_1000850C0);
    if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
    {
      v15 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v12, v13, v15);
      v16 = 1;
    }
    else
    {
      v18 = *v13;
      *v12 = *v13;
      swift_retain(v18);
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(v12, v14, v16);
    v19 = a3[6];
    v20 = (char *)a1 + v19;
    v21 = (char *)a2 + v19;
    v22 = *(_QWORD *)v21;
    v23 = v21[8];
    sub_10002571C(*(_QWORD *)v21, v23);
    *(_QWORD *)v20 = v22;
    v20[8] = v23;
    v24 = a3[7];
    v25 = (_QWORD *)((char *)a1 + v24);
    v26 = (_QWORD *)((char *)a2 + v24);
    v27 = sub_1000041D8(&qword_100085E28);
    if (swift_getEnumCaseMultiPayload(v26, v27) == 1)
    {
      v28 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v25, v26, v28);
      v29 = v25;
      v30 = v27;
      v31 = 1;
    }
    else
    {
      v32 = *v26;
      *v25 = *v26;
      swift_retain(v32);
      v29 = v25;
      v30 = v27;
      v31 = 0;
    }
    swift_storeEnumTagMultiPayload(v29, v30, v31);
  }
  return a1;
}

uint64_t sub_1000551CC(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = type metadata accessor for WorldClockEntry(0);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v5 + 20)));
  v6 = (_QWORD *)(a1 + a2[5]);
  v7 = sub_1000041D8(&qword_1000850C0);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  sub_100025728(*(_QWORD *)(a1 + a2[6]), *(_BYTE *)(a1 + a2[6] + 8));
  v9 = (_QWORD *)(a1 + a2[7]);
  v10 = sub_1000041D8(&qword_100085E28);
  if (swift_getEnumCaseMultiPayload(v9, v10) != 1)
    return swift_release(*v9);
  v11 = type metadata accessor for WidgetRenderingMode(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v9, v11);
}

uint64_t sub_1000552DC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = type metadata accessor for WorldClockEntry(0);
  v8 = *(int *)(v7 + 20);
  v9 = *(_QWORD *)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v9;
  *(_BYTE *)(a1 + *(int *)(v7 + 24)) = *(_BYTE *)(a2 + *(int *)(v7 + 24));
  v10 = a3[5];
  v11 = (uint64_t *)(a1 + v10);
  v12 = (uint64_t *)(a2 + v10);
  swift_bridgeObjectRetain(v9);
  v13 = sub_1000041D8(&qword_1000850C0);
  if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
  {
    v14 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
    v15 = 1;
  }
  else
  {
    v16 = *v12;
    *v11 = *v12;
    swift_retain(v16);
    v15 = 0;
  }
  swift_storeEnumTagMultiPayload(v11, v13, v15);
  v17 = a3[6];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = *(_QWORD *)v19;
  v21 = *(_BYTE *)(v19 + 8);
  sub_10002571C(*(_QWORD *)v19, v21);
  *(_QWORD *)v18 = v20;
  *(_BYTE *)(v18 + 8) = v21;
  v22 = a3[7];
  v23 = (uint64_t *)(a1 + v22);
  v24 = (uint64_t *)(a2 + v22);
  v25 = sub_1000041D8(&qword_100085E28);
  if (swift_getEnumCaseMultiPayload(v24, v25) == 1)
  {
    v26 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v23, v24, v26);
    v27 = 1;
  }
  else
  {
    v28 = *v24;
    *v23 = *v24;
    swift_retain(v28);
    v27 = 0;
  }
  swift_storeEnumTagMultiPayload(v23, v25, v27);
  return a1;
}

uint64_t sub_10005546C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = type metadata accessor for WorldClockEntry(0);
  v8 = *(int *)(v7 + 20);
  v9 = *(_QWORD *)(a2 + v8);
  v10 = *(_QWORD *)(a1 + v8);
  *(_QWORD *)(a1 + v8) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  *(_BYTE *)(a1 + *(int *)(v7 + 24)) = *(_BYTE *)(a2 + *(int *)(v7 + 24));
  if (a1 != a2)
  {
    v11 = a3[5];
    v12 = (uint64_t *)(a1 + v11);
    v13 = (uint64_t *)(a2 + v11);
    sub_1000106A4(a1 + v11, &qword_1000850C0);
    v14 = sub_1000041D8(&qword_1000850C0);
    if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
    {
      v15 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v12, v13, v15);
      v16 = 1;
    }
    else
    {
      v17 = *v13;
      *v12 = *v13;
      swift_retain(v17);
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(v12, v14, v16);
  }
  v18 = a3[6];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = *(_QWORD *)v20;
  v22 = *(_BYTE *)(v20 + 8);
  sub_10002571C(*(_QWORD *)v20, v22);
  v23 = *(_QWORD *)v19;
  v24 = *(_BYTE *)(v19 + 8);
  *(_QWORD *)v19 = v21;
  *(_BYTE *)(v19 + 8) = v22;
  sub_100025728(v23, v24);
  if (a1 != a2)
  {
    v25 = a3[7];
    v26 = (uint64_t *)(a1 + v25);
    v27 = (uint64_t *)(a2 + v25);
    sub_1000106A4(a1 + v25, &qword_100085E28);
    v28 = sub_1000041D8(&qword_100085E28);
    if (swift_getEnumCaseMultiPayload(v27, v28) == 1)
    {
      v29 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v26, v27, v29);
      v30 = 1;
    }
    else
    {
      v31 = *v27;
      *v26 = *v27;
      swift_retain(v31);
      v30 = 0;
    }
    swift_storeEnumTagMultiPayload(v26, v28, v30);
  }
  return a1;
}

uint64_t sub_100055644(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = type metadata accessor for WorldClockEntry(0);
  *(_QWORD *)(a1 + *(int *)(v7 + 20)) = *(_QWORD *)(a2 + *(int *)(v7 + 20));
  *(_BYTE *)(a1 + *(int *)(v7 + 24)) = *(_BYTE *)(a2 + *(int *)(v7 + 24));
  v8 = a3[5];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = sub_1000041D8(&qword_1000850C0);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  v13 = a3[6];
  v14 = a3[7];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  v17 = (void *)(a1 + v14);
  v18 = (const void *)(a2 + v14);
  v19 = sub_1000041D8(&qword_100085E28);
  if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
  {
    v20 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v17, v18, v20);
    swift_storeEnumTagMultiPayload(v17, v19, 1);
  }
  else
  {
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  return a1;
}

uint64_t sub_1000557C4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  void *v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = type metadata accessor for WorldClockEntry(0);
  v8 = *(int *)(v7 + 20);
  v9 = *(_QWORD *)(a1 + v8);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + *(int *)(v7 + 24)) = *(_BYTE *)(a2 + *(int *)(v7 + 24));
  if (a1 != a2)
  {
    v10 = a3[5];
    v11 = (void *)(a1 + v10);
    v12 = (const void *)(a2 + v10);
    sub_1000106A4(a1 + v10, &qword_1000850C0);
    v13 = sub_1000041D8(&qword_1000850C0);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v11, v12, v14);
      swift_storeEnumTagMultiPayload(v11, v13, 1);
    }
    else
    {
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
  }
  v15 = a3[6];
  v16 = a1 + v15;
  v17 = (uint64_t *)(a2 + v15);
  v18 = *v17;
  LOBYTE(v17) = *((_BYTE *)v17 + 8);
  v19 = *(_QWORD *)v16;
  v20 = *(_BYTE *)(v16 + 8);
  *(_QWORD *)v16 = v18;
  *(_BYTE *)(v16 + 8) = (_BYTE)v17;
  sub_100025728(v19, v20);
  if (a1 != a2)
  {
    v21 = a3[7];
    v22 = (void *)(a1 + v21);
    v23 = (const void *)(a2 + v21);
    sub_1000106A4(a1 + v21, &qword_100085E28);
    v24 = sub_1000041D8(&qword_100085E28);
    if (swift_getEnumCaseMultiPayload(v23, v24) == 1)
    {
      v25 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v22, v23, v25);
      swift_storeEnumTagMultiPayload(v22, v24, 1);
    }
    else
    {
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100055990(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005599C);
}

uint64_t sub_1000559A0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v6 = type metadata accessor for WorldClockEntry(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = sub_1000041D8(&qword_100085108);
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
  {
    v11 = v9;
    v12 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  if ((_DWORD)a2 != 254)
  {
    v11 = sub_1000041D8(&qword_100085B10);
    v10 = *(_QWORD *)(v11 - 8);
    v12 = a3[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  v13 = *(unsigned __int8 *)(a1 + a3[6] + 8);
  if (v13 > 1)
    return (v13 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t sub_100055A70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100055A7C);
}

uint64_t sub_100055A80(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  v8 = type metadata accessor for WorldClockEntry(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    result = sub_1000041D8(&qword_100085108);
    v14 = *(_QWORD *)(result - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = result;
      v15 = a4[5];
    }
    else
    {
      if (a3 == 254)
      {
        *(_BYTE *)(a1 + a4[6] + 8) = -(char)a2;
        return result;
      }
      v10 = sub_1000041D8(&qword_100085B10);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[7];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_100055B50(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[4];

  v2 = type metadata accessor for WorldClockEntry(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10005A51C(319, (unint64_t *)&qword_100085490, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      v8[2] = "\t";
      sub_10005A51C(319, (unint64_t *)&unk_1000864D8, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
      if (v7 <= 0x3F)
      {
        v8[3] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 4, v8, a1 + 16);
      }
    }
  }
}

uint64_t *sub_100055C28(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v9);
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    v5 = *(int *)(a3 + 24);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t sub_100055CB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 24);
  v3 = type metadata accessor for WidgetRenderingMode(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

_WORD *sub_100055CE8(_WORD *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for WidgetRenderingMode(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_BYTE *sub_100055D44(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = *(int *)(a3 + 24);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for WidgetRenderingMode(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_WORD *sub_100055DA8(_WORD *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for WidgetRenderingMode(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_BYTE *sub_100055E04(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = *(int *)(a3 + 24);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for WidgetRenderingMode(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t sub_100055E68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100055E74);
}

uint64_t sub_100055E74(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  uint64_t v10;

  if ((_DWORD)a2 == 254)
  {
    v4 = *a1;
    v5 = v4 >= 2;
    v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5)
      return (v6 + 1);
    else
      return 0;
  }
  else
  {
    v10 = type metadata accessor for WidgetRenderingMode(0);
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v10);
  }
}

uint64_t sub_100055EF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100055EFC);
}

_BYTE *sub_100055EFC(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *result = a2 + 1;
  }
  else
  {
    v7 = type metadata accessor for WidgetRenderingMode(0);
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_100055F6C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_10006DA48;
  v4[1] = &unk_10006DA48;
  result = type metadata accessor for WidgetRenderingMode(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

_QWORD *sub_100055FE0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_1000041D8(&qword_1000850C0);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = *(int *)(a3 + 24);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
  }
  return a1;
}

uint64_t sub_1000560E0(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  v4 = sub_1000041D8(&qword_1000850C0);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (char *)a1 + *(int *)(a2 + 24);
  v7 = type metadata accessor for WidgetRenderingMode(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

_QWORD *sub_100056168(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v6 = sub_1000041D8(&qword_1000850C0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = *(int *)(a3 + 24);
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for WidgetRenderingMode(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  return a1;
}

_QWORD *sub_10005623C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  if (a1 != a2)
  {
    sub_1000106A4((uint64_t)a1, &qword_1000850C0);
    v6 = sub_1000041D8(&qword_1000850C0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  v12 = *(int *)(a3 + 24);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for WidgetRenderingMode(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  return a1;
}

char *sub_10005632C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = sub_1000041D8(&qword_1000850C0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = *(int *)(a3 + 24);
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for WidgetRenderingMode(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  return a1;
}

char *sub_1000563FC(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  if (a1 != a2)
  {
    sub_1000106A4((uint64_t)a1, &qword_1000850C0);
    v6 = sub_1000041D8(&qword_1000850C0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = *(int *)(a3 + 24);
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for WidgetRenderingMode(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_1000564E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000564F0);
}

uint64_t sub_1000564F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unsigned int v11;

  v6 = sub_1000041D8(&qword_100085108);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 254)
  {
    v8 = type metadata accessor for WidgetRenderingMode(0);
    v10 = a1 + *(int *)(a3 + 24);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v11 >= 2)
    return ((v11 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t sub_1000565A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000565B4);
}

uint64_t sub_1000565B4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = sub_1000041D8(&qword_100085108);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 254)
    {
      *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
      return result;
    }
    v10 = type metadata accessor for WidgetRenderingMode(0);
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_100056658(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  sub_10005A51C(319, (unint64_t *)&qword_100085490, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = &unk_10006DA48;
    v4 = type metadata accessor for WidgetRenderingMode(319);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 3, v6, a1 + 16);
    }
  }
}

_QWORD *sub_1000566FC(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  void (*v51)(char *, char *, uint64_t);
  void (*v53)(char *, char *, uint64_t);
  uint64_t v54;
  int *v55;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_1000041D8(&qword_100085E48);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v55 = a3;
    v14 = a3[5];
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = type metadata accessor for Date(0);
    v54 = *(_QWORD *)(v17 - 8);
    v53 = *(void (**)(char *, char *, uint64_t))(v54 + 16);
    v53(v15, v16, v17);
    v18 = (int *)type metadata accessor for WorldClockCity(0);
    v15[v18[5]] = v16[v18[5]];
    v19 = v18[6];
    v20 = &v15[v19];
    v21 = &v16[v19];
    v22 = *((_QWORD *)v21 + 1);
    *(_QWORD *)v20 = *(_QWORD *)v21;
    *((_QWORD *)v20 + 1) = v22;
    v23 = v18[7];
    v24 = &v15[v23];
    v25 = &v16[v23];
    v26 = *((_QWORD *)v25 + 1);
    *(_QWORD *)v24 = *(_QWORD *)v25;
    *((_QWORD *)v24 + 1) = v26;
    v27 = v18[8];
    v28 = &v15[v27];
    v29 = &v16[v27];
    v30 = *((_QWORD *)v29 + 1);
    *(_QWORD *)v28 = *(_QWORD *)v29;
    *((_QWORD *)v28 + 1) = v30;
    v31 = v18[9];
    v32 = &v15[v31];
    v33 = &v16[v31];
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v30);
    v53(v32, v33, v17);
    v53(&v15[v18[10]], &v16[v18[10]], v17);
    v34 = v18[11];
    v35 = &v15[v34];
    v36 = &v16[v34];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(&v16[v34], 1, v17))
    {
      v37 = sub_1000041D8(&qword_100084810);
      memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    }
    else
    {
      v53(v35, v36, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v35, 0, 1, v17);
    }
    v15[v18[12]] = v16[v18[12]];
    v15[v18[13]] = v16[v18[13]];
    v38 = v55[6];
    v39 = *(_OWORD *)((char *)a2 + v38 + 24);
    *(_OWORD *)((char *)a1 + v38 + 24) = v39;
    (**(void (***)(void))(v39 - 8))();
    v40 = v55[8];
    *((_BYTE *)a1 + v55[7]) = *((_BYTE *)a2 + v55[7]);
    *((_BYTE *)a1 + v40) = *((_BYTE *)a2 + v40);
    v41 = v55[10];
    *((_BYTE *)a1 + v55[9]) = *((_BYTE *)a2 + v55[9]);
    *((_BYTE *)a1 + v41) = *((_BYTE *)a2 + v41);
    v42 = v55[11];
    v43 = v55[12];
    v44 = (char *)a1 + v42;
    v45 = (char *)a2 + v42;
    v46 = *(_QWORD *)v45;
    v44[8] = v45[8];
    LOBYTE(v45) = *((_BYTE *)a2 + v43);
    *(_QWORD *)v44 = v46;
    v47 = v55[13];
    v48 = (char *)a2 + v47;
    v49 = (char *)a1 + v47;
    *((_BYTE *)a1 + v43) = (_BYTE)v45;
    v50 = type metadata accessor for WidgetRenderingMode(0);
    v51 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 16);
    swift_retain(v46);
    v51(v49, v48, v50);
  }
  return a1;
}

uint64_t sub_1000569F4(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t);
  int *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = sub_1000041D8(&qword_100085E48);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (char *)a1 + a2[5];
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(char *, uint64_t))(v8 + 8);
  v9(v6, v7);
  v10 = (int *)type metadata accessor for WorldClockCity(0);
  swift_bridgeObjectRelease(*(_QWORD *)&v6[v10[6] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v6[v10[7] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v6[v10[8] + 8]);
  v9(&v6[v10[9]], v7);
  v9(&v6[v10[10]], v7);
  v11 = &v6[v10[11]];
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v11, 1, v7))
    v9(v11, v7);
  sub_10001E0B0((_QWORD *)((char *)a1 + a2[6]));
  swift_release(*(_QWORD *)((char *)a1 + a2[11]));
  v12 = (char *)a1 + a2[13];
  v13 = type metadata accessor for WidgetRenderingMode(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
}

_QWORD *sub_100056B5C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  void (*v49)(char *, char *, uint64_t);
  void (*v51)(char *, char *, uint64_t);
  uint64_t v52;
  int *v53;

  v6 = sub_1000041D8(&qword_100085E48);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v53 = a3;
  v12 = a3[5];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for Date(0);
  v52 = *(_QWORD *)(v15 - 8);
  v51 = *(void (**)(char *, char *, uint64_t))(v52 + 16);
  v51(v13, v14, v15);
  v16 = (int *)type metadata accessor for WorldClockCity(0);
  v13[v16[5]] = v14[v16[5]];
  v17 = v16[6];
  v18 = &v13[v17];
  v19 = &v14[v17];
  v20 = *((_QWORD *)v19 + 1);
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *((_QWORD *)v18 + 1) = v20;
  v21 = v16[7];
  v22 = &v13[v21];
  v23 = &v14[v21];
  v24 = *((_QWORD *)v23 + 1);
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *((_QWORD *)v22 + 1) = v24;
  v25 = v16[8];
  v26 = &v13[v25];
  v27 = &v14[v25];
  v28 = *((_QWORD *)v27 + 1);
  *(_QWORD *)v26 = *(_QWORD *)v27;
  *((_QWORD *)v26 + 1) = v28;
  v29 = v16[9];
  v30 = &v13[v29];
  v31 = &v14[v29];
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v28);
  v51(v30, v31, v15);
  v51(&v13[v16[10]], &v14[v16[10]], v15);
  v32 = v16[11];
  v33 = &v13[v32];
  v34 = &v14[v32];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(&v14[v32], 1, v15))
  {
    v35 = sub_1000041D8(&qword_100084810);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  else
  {
    v51(v33, v34, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v33, 0, 1, v15);
  }
  v13[v16[12]] = v14[v16[12]];
  v13[v16[13]] = v14[v16[13]];
  v36 = v53[6];
  v37 = *(_OWORD *)((char *)a2 + v36 + 24);
  *(_OWORD *)((char *)a1 + v36 + 24) = v37;
  (**(void (***)(void))(v37 - 8))();
  v38 = v53[8];
  *((_BYTE *)a1 + v53[7]) = *((_BYTE *)a2 + v53[7]);
  *((_BYTE *)a1 + v38) = *((_BYTE *)a2 + v38);
  v39 = v53[10];
  *((_BYTE *)a1 + v53[9]) = *((_BYTE *)a2 + v53[9]);
  *((_BYTE *)a1 + v39) = *((_BYTE *)a2 + v39);
  v40 = v53[11];
  v41 = v53[12];
  v42 = (char *)a1 + v40;
  v43 = (char *)a2 + v40;
  v44 = *(_QWORD *)v43;
  v42[8] = v43[8];
  LOBYTE(v43) = *((_BYTE *)a2 + v41);
  *(_QWORD *)v42 = v44;
  v45 = v53[13];
  v46 = (char *)a2 + v45;
  v47 = (char *)a1 + v45;
  *((_BYTE *)a1 + v41) = (_BYTE)v43;
  v48 = type metadata accessor for WidgetRenderingMode(0);
  v49 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 16);
  swift_retain(v44);
  v49(v47, v46, v48);
  return a1;
}

_QWORD *sub_100056E28(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t (*v37)(char *, uint64_t, uint64_t);
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  void (*v51)(char *, char *, uint64_t);
  uint64_t v52;
  int *v53;

  if (a1 != a2)
  {
    sub_1000106A4((uint64_t)a1, &qword_100085E48);
    v6 = sub_1000041D8(&qword_100085E48);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v53 = a3;
  v12 = a3[5];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(void (**)(char *, char *, uint64_t))(v16 + 24);
  v17(v13, v14, v15);
  v18 = (int *)type metadata accessor for WorldClockCity(0);
  v13[v18[5]] = v14[v18[5]];
  v19 = v18[6];
  v20 = &v13[v19];
  v21 = &v14[v19];
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v22 = *((_QWORD *)v21 + 1);
  v23 = *((_QWORD *)v20 + 1);
  *((_QWORD *)v20 + 1) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  v24 = v18[7];
  v25 = &v13[v24];
  v26 = &v14[v24];
  *(_QWORD *)v25 = *(_QWORD *)v26;
  v27 = *((_QWORD *)v26 + 1);
  v28 = *((_QWORD *)v25 + 1);
  *((_QWORD *)v25 + 1) = v27;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRelease(v28);
  v29 = v18[8];
  v30 = &v13[v29];
  v31 = &v14[v29];
  *(_QWORD *)v30 = *(_QWORD *)v31;
  v32 = *((_QWORD *)v31 + 1);
  v33 = *((_QWORD *)v30 + 1);
  *((_QWORD *)v30 + 1) = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v33);
  v17(&v13[v18[9]], &v14[v18[9]], v15);
  v51 = v17;
  v17(&v13[v18[10]], &v14[v18[10]], v15);
  v34 = v18[11];
  v35 = &v13[v34];
  v36 = &v14[v34];
  v52 = v16;
  v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v38 = v37(&v13[v34], 1, v15);
  v39 = v37(v36, 1, v15);
  if (!v38)
  {
    if (!v39)
    {
      v51(v35, v36, v15);
      goto LABEL_12;
    }
    (*(void (**)(char *, uint64_t))(v52 + 8))(v35, v15);
    goto LABEL_11;
  }
  if (v39)
  {
LABEL_11:
    v40 = sub_1000041D8(&qword_100084810);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v35, v36, v15);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v35, 0, 1, v15);
LABEL_12:
  v13[v18[12]] = v14[v18[12]];
  v13[v18[13]] = v14[v18[13]];
  sub_100057180((_QWORD *)((char *)a1 + v53[6]), (_QWORD *)((char *)a2 + v53[6]));
  *((_BYTE *)a1 + v53[7]) = *((_BYTE *)a2 + v53[7]);
  *((_BYTE *)a1 + v53[8]) = *((_BYTE *)a2 + v53[8]);
  *((_BYTE *)a1 + v53[9]) = *((_BYTE *)a2 + v53[9]);
  *((_BYTE *)a1 + v53[10]) = *((_BYTE *)a2 + v53[10]);
  v41 = v53[11];
  v42 = (char *)a1 + v41;
  v43 = (char *)a2 + v41;
  v44 = *(_QWORD *)v43;
  LOBYTE(v43) = v43[8];
  v45 = *(_QWORD *)v42;
  *(_QWORD *)v42 = v44;
  v42[8] = (char)v43;
  swift_retain(v44);
  swift_release(v45);
  *((_BYTE *)a1 + v53[12]) = *((_BYTE *)a2 + v53[12]);
  v46 = v53[13];
  v47 = (char *)a1 + v46;
  v48 = (char *)a2 + v46;
  v49 = type metadata accessor for WidgetRenderingMode(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 24))(v47, v48, v49);
  return a1;
}

_QWORD *sub_100057180(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v11 = *result;
        v12 = *a2;
        swift_retain(*a2);
        result = (_QWORD *)swift_release(v11);
        *v3 = v12;
      }
      else
      {
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *, _QWORD))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          v14 = *a2;
          *v3 = *a2;
          swift_retain(v14);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (_QWORD *)swift_release(v10);
      }
      else
      {
        (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          v13 = *a2;
          *v3 = *a2;
          swift_retain(v13);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }
  return result;
}

char *sub_1000572E8(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  int *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *__dst;

  v6 = sub_1000041D8(&qword_100085E48);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v13(v9, v10, v11);
  v14 = (int *)type metadata accessor for WorldClockCity(0);
  v9[v14[5]] = v10[v14[5]];
  *(_OWORD *)&v9[v14[6]] = *(_OWORD *)&v10[v14[6]];
  *(_OWORD *)&v9[v14[7]] = *(_OWORD *)&v10[v14[7]];
  *(_OWORD *)&v9[v14[8]] = *(_OWORD *)&v10[v14[8]];
  v13(&v9[v14[9]], &v10[v14[9]], v11);
  v13(&v9[v14[10]], &v10[v14[10]], v11);
  v15 = v14[11];
  __dst = &v9[v15];
  v16 = &v10[v15];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(&v10[v15], 1, v11))
  {
    v17 = sub_1000041D8(&qword_100084810);
    memcpy(__dst, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v13(__dst, v16, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
  }
  v9[v14[12]] = v10[v14[12]];
  v9[v14[13]] = v10[v14[13]];
  v18 = a3[6];
  v19 = a3[7];
  v20 = &a1[v18];
  v21 = &a2[v18];
  v22 = *((_OWORD *)v21 + 1);
  *(_OWORD *)v20 = *(_OWORD *)v21;
  *((_OWORD *)v20 + 1) = v22;
  *((_QWORD *)v20 + 4) = *((_QWORD *)v21 + 4);
  a1[v19] = a2[v19];
  v23 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  a1[v23] = a2[v23];
  v24 = a3[11];
  a1[a3[10]] = a2[a3[10]];
  v25 = &a1[v24];
  v26 = &a2[v24];
  *(_QWORD *)v25 = *(_QWORD *)v26;
  v25[8] = v26[8];
  v27 = a3[13];
  a1[a3[12]] = a2[a3[12]];
  v28 = &a1[v27];
  v29 = &a2[v27];
  v30 = type metadata accessor for WidgetRenderingMode(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v28, v29, v30);
  return a1;
}

char *sub_10005755C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t (*v35)(void);
  int v36;
  int v37;
  size_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v56;
  char *v57;
  int *v58;

  if (a1 != a2)
  {
    sub_1000106A4((uint64_t)a1, &qword_100085E48);
    v6 = sub_1000041D8(&qword_100085E48);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v58 = a3;
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(void (**)(char *, char *, uint64_t))(v12 + 40);
  v13(v9, v10, v11);
  v14 = (int *)type metadata accessor for WorldClockCity(0);
  v9[v14[5]] = v10[v14[5]];
  v15 = v14[6];
  v16 = &v9[v15];
  v17 = &v10[v15];
  v19 = *(_QWORD *)v17;
  v18 = *((_QWORD *)v17 + 1);
  v20 = *((_QWORD *)v16 + 1);
  *(_QWORD *)v16 = v19;
  *((_QWORD *)v16 + 1) = v18;
  swift_bridgeObjectRelease(v20);
  v21 = v14[7];
  v22 = &v9[v21];
  v23 = &v10[v21];
  v25 = *(_QWORD *)v23;
  v24 = *((_QWORD *)v23 + 1);
  v26 = *((_QWORD *)v22 + 1);
  *(_QWORD *)v22 = v25;
  *((_QWORD *)v22 + 1) = v24;
  swift_bridgeObjectRelease(v26);
  v27 = v14[8];
  v28 = &v9[v27];
  v29 = &v10[v27];
  v31 = *(_QWORD *)v29;
  v30 = *((_QWORD *)v29 + 1);
  v32 = *((_QWORD *)v28 + 1);
  *(_QWORD *)v28 = v31;
  *((_QWORD *)v28 + 1) = v30;
  swift_bridgeObjectRelease(v32);
  v13(&v9[v14[9]], &v10[v14[9]], v11);
  v13(&v9[v14[10]], &v10[v14[10]], v11);
  v33 = v14[11];
  v34 = &v10[v33];
  v56 = v12;
  v57 = &v9[v33];
  v35 = *(uint64_t (**)(void))(v12 + 48);
  v36 = v35();
  v37 = ((uint64_t (*)(char *, uint64_t, uint64_t))v35)(v34, 1, v11);
  if (v36)
  {
    if (!v37)
    {
      (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v57, v34, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v57, 0, 1, v11);
      goto LABEL_13;
    }
    v38 = *(_QWORD *)(*(_QWORD *)(sub_1000041D8(&qword_100084810) - 8) + 64);
    v39 = v57;
  }
  else
  {
    if (!v37)
    {
      v13(v57, v34, v11);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v56 + 8))(v57, v11);
    v38 = *(_QWORD *)(*(_QWORD *)(sub_1000041D8(&qword_100084810) - 8) + 64);
    v39 = v57;
  }
  memcpy(v39, v34, v38);
LABEL_13:
  v9[v14[12]] = v10[v14[12]];
  v9[v14[13]] = v10[v14[13]];
  v40 = v58[6];
  v41 = &a1[v40];
  v42 = &a2[v40];
  sub_10001E0B0(&a1[v40]);
  v43 = *((_OWORD *)v42 + 1);
  *(_OWORD *)v41 = *(_OWORD *)v42;
  *((_OWORD *)v41 + 1) = v43;
  *((_QWORD *)v41 + 4) = *((_QWORD *)v42 + 4);
  v44 = v58[8];
  a1[v58[7]] = a2[v58[7]];
  a1[v44] = a2[v44];
  v45 = v58[10];
  a1[v58[9]] = a2[v58[9]];
  a1[v45] = a2[v45];
  v46 = v58[11];
  v47 = &a1[v46];
  v48 = &a2[v46];
  v49 = *(_QWORD *)v48;
  LOBYTE(v48) = v48[8];
  v50 = *(_QWORD *)v47;
  *(_QWORD *)v47 = v49;
  v47[8] = (char)v48;
  swift_release(v50);
  v51 = v58[13];
  a1[v58[12]] = a2[v58[12]];
  v52 = &a1[v51];
  v53 = &a2[v51];
  v54 = type metadata accessor for WidgetRenderingMode(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 40))(v52, v53, v54);
  return a1;
}

uint64_t sub_100057890(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005789C);
}

uint64_t sub_10005789C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v6 = sub_1000041D8(&qword_100085AD0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for WorldClockCity(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_10:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = type metadata accessor for WidgetRenderingMode(0);
    v12 = *(_QWORD *)(v8 - 8);
    v13 = a3[13];
    goto LABEL_10;
  }
  v14 = *(_QWORD *)(a1 + a3[6] + 24);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_100057970(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005797C);
}

uint64_t sub_10005797C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_1000041D8(&qword_100085AD0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    result = type metadata accessor for WorldClockCity(0);
    v14 = *(_QWORD *)(result - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = result;
      v15 = a4[5];
    }
    else
    {
      if (a3 == 0x7FFFFFFF)
      {
        *(_QWORD *)(a1 + a4[6] + 24) = (a2 - 1);
        return result;
      }
      v10 = type metadata accessor for WidgetRenderingMode(0);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[13];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_100057A4C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[10];

  sub_10005A51C(319, (unint64_t *)&unk_100086818, (uint64_t (*)(uint64_t))&type metadata accessor for ContentSizeCategory, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for WorldClockCity(319);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      v8[2] = "(";
      v8[3] = &unk_10006DA48;
      v8[4] = &unk_10006DA48;
      v8[5] = &unk_10006DA48;
      v8[6] = &unk_10006DA48;
      v8[7] = "\t";
      v8[8] = &unk_10006DA48;
      v6 = type metadata accessor for WidgetRenderingMode(319);
      if (v7 <= 0x3F)
      {
        v8[9] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 10, v8, a1 + 16);
      }
    }
  }
}

uint64_t sub_100057B28(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain(v4);
  }
  else
  {
    v5 = a1;
    *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
    v6 = *(int *)(a3 + 28);
    v7 = a1 + v6;
    v8 = (uint64_t)a2 + v6;
    v9 = type metadata accessor for WidgetRenderingMode(0);
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain(v4);
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t sub_100057BC8(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*a1);
  v4 = (char *)a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for WidgetRenderingMode(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t sub_100057C10(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
  v5 = *(int *)(a3 + 28);
  v6 = a1 + v5;
  v7 = (uint64_t)a2 + v5;
  v8 = type metadata accessor for WidgetRenderingMode(0);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  v9(v6, v7, v8);
  return a1;
}

uint64_t *sub_100057C88(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  *((_BYTE *)a1 + 9) = *((_BYTE *)a2 + 9);
  v8 = *(int *)(a3 + 28);
  v9 = (uint64_t)a1 + v8;
  v10 = (uint64_t)a2 + v8;
  v11 = type metadata accessor for WidgetRenderingMode(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

uint64_t sub_100057D0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for WidgetRenderingMode(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t *sub_100057D70(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  *((_BYTE *)a1 + 9) = *((_BYTE *)a2 + 9);
  v7 = *(int *)(a3 + 28);
  v8 = (uint64_t)a1 + v7;
  v9 = (uint64_t)a2 + v7;
  v10 = type metadata accessor for WidgetRenderingMode(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_100057DEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100057DF8);
}

uint64_t sub_100057DF8(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for WidgetRenderingMode(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 28)], a2, v8);
  }
}

uint64_t sub_100057E74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100057E80);
}

char *sub_100057E80(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for WidgetRenderingMode(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 28)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_100057EF4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = &unk_10006DA48;
  v4[2] = &unk_10006DA48;
  result = type metadata accessor for WidgetRenderingMode(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

_QWORD *sub_100057F78(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v18);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = type metadata accessor for WorldClockEntry(0);
    v9 = *(int *)(v8 + 20);
    v10 = *(_QWORD *)((char *)a2 + v9);
    *(_QWORD *)((char *)a1 + v9) = v10;
    *((_BYTE *)a1 + *(int *)(v8 + 24)) = *((_BYTE *)a2 + *(int *)(v8 + 24));
    v11 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    v12 = *(_QWORD *)((char *)a2 + v11);
    *(_QWORD *)((char *)a1 + v11) = v12;
    v13 = a3[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    v16 = type metadata accessor for WidgetRenderingMode(0);
    v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v12);
    v17(v14, v15, v16);
  }
  return a1;
}

uint64_t sub_100058080(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = type metadata accessor for WorldClockEntry(0);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v5 + 20)));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 24)));
  v6 = a1 + *(int *)(a2 + 32);
  v7 = type metadata accessor for WidgetRenderingMode(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

uint64_t sub_1000580FC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = type metadata accessor for WorldClockEntry(0);
  v8 = *(int *)(v7 + 20);
  v9 = *(_QWORD *)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v9;
  *(_BYTE *)(a1 + *(int *)(v7 + 24)) = *(_BYTE *)(a2 + *(int *)(v7 + 24));
  v10 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v11 = *(_QWORD *)(a2 + v10);
  *(_QWORD *)(a1 + v10) = v11;
  v12 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for WidgetRenderingMode(0);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v11);
  v16(v13, v14, v15);
  return a1;
}

uint64_t sub_1000581D8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = type metadata accessor for WorldClockEntry(0);
  v8 = *(int *)(v7 + 20);
  v9 = *(_QWORD *)(a2 + v8);
  v10 = *(_QWORD *)(a1 + v8);
  *(_QWORD *)(a1 + v8) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  *(_BYTE *)(a1 + *(int *)(v7 + 24)) = *(_BYTE *)(a2 + *(int *)(v7 + 24));
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v11 = a3[6];
  v12 = *(_QWORD *)(a2 + v11);
  v13 = *(_QWORD *)(a1 + v11);
  *(_QWORD *)(a1 + v11) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v14 = a3[8];
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = type metadata accessor for WidgetRenderingMode(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 24))(v15, v16, v17);
  return a1;
}

uint64_t sub_1000582C4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = type metadata accessor for WorldClockEntry(0);
  *(_QWORD *)(a1 + *(int *)(v7 + 20)) = *(_QWORD *)(a2 + *(int *)(v7 + 20));
  *(_BYTE *)(a1 + *(int *)(v7 + 24)) = *(_BYTE *)(a2 + *(int *)(v7 + 24));
  v8 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  v9 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for WidgetRenderingMode(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  return a1;
}

uint64_t sub_10005837C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = type metadata accessor for WorldClockEntry(0);
  v8 = *(int *)(v7 + 20);
  v9 = *(_QWORD *)(a1 + v8);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + *(int *)(v7 + 24)) = *(_BYTE *)(a2 + *(int *)(v7 + 24));
  v10 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v11 = *(_QWORD *)(a1 + v10);
  *(_QWORD *)(a1 + v10) = *(_QWORD *)(a2 + v10);
  swift_bridgeObjectRelease(v11);
  v12 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for WidgetRenderingMode(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  return a1;
}

uint64_t sub_100058448(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100058454);
}

uint64_t sub_100058454(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = type metadata accessor for WorldClockEntry(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = type metadata accessor for WidgetRenderingMode(0);
    v10 = a1 + *(int *)(a3 + 32);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_1000584FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100058508);
}

uint64_t sub_100058508(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for WorldClockEntry(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
      return result;
    }
    v10 = type metadata accessor for WidgetRenderingMode(0);
    v12 = a1 + *(int *)(a4 + 32);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_1000585AC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[5];

  result = type metadata accessor for WorldClockEntry(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = &unk_10006DA48;
    v5[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v5[3] = &unk_10006DA48;
    result = type metadata accessor for WidgetRenderingMode(319);
    if (v4 <= 0x3F)
    {
      v5[4] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 5, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

_QWORD *sub_100058648(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  void (*v47)(char *, char *, uint64_t);
  uint64_t v48;
  int *v49;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_1000041D8(&qword_100085E48);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v49 = a3;
    v14 = a3[5];
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = type metadata accessor for Date(0);
    v48 = *(_QWORD *)(v17 - 8);
    v47 = *(void (**)(char *, char *, uint64_t))(v48 + 16);
    v47(v15, v16, v17);
    v18 = (int *)type metadata accessor for WorldClockCity(0);
    v15[v18[5]] = v16[v18[5]];
    v19 = v18[6];
    v20 = &v15[v19];
    v21 = &v16[v19];
    v22 = *((_QWORD *)v21 + 1);
    *(_QWORD *)v20 = *(_QWORD *)v21;
    *((_QWORD *)v20 + 1) = v22;
    v23 = v18[7];
    v24 = &v15[v23];
    v25 = &v16[v23];
    v26 = *((_QWORD *)v25 + 1);
    *(_QWORD *)v24 = *(_QWORD *)v25;
    *((_QWORD *)v24 + 1) = v26;
    v27 = v18[8];
    v28 = &v15[v27];
    v29 = &v16[v27];
    v30 = *((_QWORD *)v29 + 1);
    *(_QWORD *)v28 = *(_QWORD *)v29;
    *((_QWORD *)v28 + 1) = v30;
    v31 = v18[9];
    v32 = &v15[v31];
    v33 = &v16[v31];
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v30);
    v47(v32, v33, v17);
    v47(&v15[v18[10]], &v16[v18[10]], v17);
    v34 = v18[11];
    v35 = &v15[v34];
    v36 = &v16[v34];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(&v16[v34], 1, v17))
    {
      v37 = sub_1000041D8(&qword_100084810);
      memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    }
    else
    {
      v47(v35, v36, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v35, 0, 1, v17);
    }
    v15[v18[12]] = v16[v18[12]];
    v15[v18[13]] = v16[v18[13]];
    v38 = v49[6];
    v39 = *(_OWORD *)((char *)a2 + v38 + 24);
    *(_OWORD *)((char *)a1 + v38 + 24) = v39;
    (**(void (***)(void))(v39 - 8))();
    v40 = v49[8];
    *((_BYTE *)a1 + v49[7]) = *((_BYTE *)a2 + v49[7]);
    *((_BYTE *)a1 + v40) = *((_BYTE *)a2 + v40);
    v41 = v49[10];
    *(_QWORD *)((char *)a1 + v49[9]) = *(_QWORD *)((char *)a2 + v49[9]);
    *((_BYTE *)a1 + v41) = *((_BYTE *)a2 + v41);
    v42 = v49[11];
    v43 = (char *)a1 + v42;
    v44 = (char *)a2 + v42;
    v45 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v43, v44, v45);
  }
  return a1;
}

uint64_t sub_100058910(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t);
  int *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = sub_1000041D8(&qword_100085E48);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (char *)a1 + a2[5];
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(char *, uint64_t))(v8 + 8);
  v9(v6, v7);
  v10 = (int *)type metadata accessor for WorldClockCity(0);
  swift_bridgeObjectRelease(*(_QWORD *)&v6[v10[6] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v6[v10[7] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v6[v10[8] + 8]);
  v9(&v6[v10[9]], v7);
  v9(&v6[v10[10]], v7);
  v11 = &v6[v10[11]];
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v11, 1, v7))
    v9(v11, v7);
  sub_10001E0B0((_QWORD *)((char *)a1 + a2[6]));
  v12 = (char *)a1 + a2[11];
  v13 = type metadata accessor for WidgetRenderingMode(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
}

_QWORD *sub_100058A6C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  void (*v45)(char *, char *, uint64_t);
  uint64_t v46;
  int *v47;

  v6 = sub_1000041D8(&qword_100085E48);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v47 = a3;
  v12 = a3[5];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for Date(0);
  v46 = *(_QWORD *)(v15 - 8);
  v45 = *(void (**)(char *, char *, uint64_t))(v46 + 16);
  v45(v13, v14, v15);
  v16 = (int *)type metadata accessor for WorldClockCity(0);
  v13[v16[5]] = v14[v16[5]];
  v17 = v16[6];
  v18 = &v13[v17];
  v19 = &v14[v17];
  v20 = *((_QWORD *)v19 + 1);
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *((_QWORD *)v18 + 1) = v20;
  v21 = v16[7];
  v22 = &v13[v21];
  v23 = &v14[v21];
  v24 = *((_QWORD *)v23 + 1);
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *((_QWORD *)v22 + 1) = v24;
  v25 = v16[8];
  v26 = &v13[v25];
  v27 = &v14[v25];
  v28 = *((_QWORD *)v27 + 1);
  *(_QWORD *)v26 = *(_QWORD *)v27;
  *((_QWORD *)v26 + 1) = v28;
  v29 = v16[9];
  v30 = &v13[v29];
  v31 = &v14[v29];
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v28);
  v45(v30, v31, v15);
  v45(&v13[v16[10]], &v14[v16[10]], v15);
  v32 = v16[11];
  v33 = &v13[v32];
  v34 = &v14[v32];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(&v14[v32], 1, v15))
  {
    v35 = sub_1000041D8(&qword_100084810);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  else
  {
    v45(v33, v34, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v33, 0, 1, v15);
  }
  v13[v16[12]] = v14[v16[12]];
  v13[v16[13]] = v14[v16[13]];
  v36 = v47[6];
  v37 = *(_OWORD *)((char *)a2 + v36 + 24);
  *(_OWORD *)((char *)a1 + v36 + 24) = v37;
  (**(void (***)(void))(v37 - 8))();
  v38 = v47[8];
  *((_BYTE *)a1 + v47[7]) = *((_BYTE *)a2 + v47[7]);
  *((_BYTE *)a1 + v38) = *((_BYTE *)a2 + v38);
  v39 = v47[10];
  *(_QWORD *)((char *)a1 + v47[9]) = *(_QWORD *)((char *)a2 + v47[9]);
  *((_BYTE *)a1 + v39) = *((_BYTE *)a2 + v39);
  v40 = v47[11];
  v41 = (char *)a1 + v40;
  v42 = (char *)a2 + v40;
  v43 = type metadata accessor for WidgetRenderingMode(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v41, v42, v43);
  return a1;
}

_QWORD *sub_100058D08(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t (*v37)(char *, uint64_t, uint64_t);
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v46;
  _QWORD *v47;
  int *v48;

  if (a1 != a2)
  {
    sub_1000106A4((uint64_t)a1, &qword_100085E48);
    v6 = sub_1000041D8(&qword_100085E48);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v47 = a2;
  v48 = a3;
  v12 = a3[5];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(void (**)(char *, char *, uint64_t))(v16 + 24);
  v17(v13, v14, v15);
  v18 = (int *)type metadata accessor for WorldClockCity(0);
  v13[v18[5]] = v14[v18[5]];
  v19 = v18[6];
  v20 = &v13[v19];
  v21 = &v14[v19];
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v22 = *((_QWORD *)v21 + 1);
  v23 = *((_QWORD *)v20 + 1);
  *((_QWORD *)v20 + 1) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  v24 = v18[7];
  v25 = &v13[v24];
  v26 = &v14[v24];
  *(_QWORD *)v25 = *(_QWORD *)v26;
  v27 = *((_QWORD *)v26 + 1);
  v28 = *((_QWORD *)v25 + 1);
  *((_QWORD *)v25 + 1) = v27;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRelease(v28);
  v29 = v18[8];
  v30 = &v13[v29];
  v31 = &v14[v29];
  *(_QWORD *)v30 = *(_QWORD *)v31;
  v32 = *((_QWORD *)v31 + 1);
  v33 = *((_QWORD *)v30 + 1);
  *((_QWORD *)v30 + 1) = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v33);
  v17(&v13[v18[9]], &v14[v18[9]], v15);
  v17(&v13[v18[10]], &v14[v18[10]], v15);
  v34 = v18[11];
  v35 = &v13[v34];
  v36 = &v14[v34];
  v46 = v16;
  v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v38 = v37(&v13[v34], 1, v15);
  v39 = v37(v36, 1, v15);
  if (!v38)
  {
    if (!v39)
    {
      v17(v35, v36, v15);
      goto LABEL_12;
    }
    (*(void (**)(char *, uint64_t))(v46 + 8))(v35, v15);
    goto LABEL_11;
  }
  if (v39)
  {
LABEL_11:
    v40 = sub_1000041D8(&qword_100084810);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v35, v36, v15);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v35, 0, 1, v15);
LABEL_12:
  v13[v18[12]] = v14[v18[12]];
  v13[v18[13]] = v14[v18[13]];
  sub_100057180((_QWORD *)((char *)a1 + v48[6]), (_QWORD *)((char *)v47 + v48[6]));
  *((_BYTE *)a1 + v48[7]) = *((_BYTE *)v47 + v48[7]);
  *((_BYTE *)a1 + v48[8]) = *((_BYTE *)v47 + v48[8]);
  *(_QWORD *)((char *)a1 + v48[9]) = *(_QWORD *)((char *)v47 + v48[9]);
  *((_BYTE *)a1 + v48[10]) = *((_BYTE *)v47 + v48[10]);
  v41 = v48[11];
  v42 = (char *)a1 + v41;
  v43 = (char *)v47 + v41;
  v44 = type metadata accessor for WidgetRenderingMode(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 24))(v42, v43, v44);
  return a1;
}

char *sub_100059020(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  int *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *__dst;

  v6 = sub_1000041D8(&qword_100085E48);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v13(v9, v10, v11);
  v14 = (int *)type metadata accessor for WorldClockCity(0);
  v9[v14[5]] = v10[v14[5]];
  *(_OWORD *)&v9[v14[6]] = *(_OWORD *)&v10[v14[6]];
  *(_OWORD *)&v9[v14[7]] = *(_OWORD *)&v10[v14[7]];
  *(_OWORD *)&v9[v14[8]] = *(_OWORD *)&v10[v14[8]];
  v13(&v9[v14[9]], &v10[v14[9]], v11);
  v13(&v9[v14[10]], &v10[v14[10]], v11);
  v15 = v14[11];
  __dst = &v9[v15];
  v16 = &v10[v15];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(&v10[v15], 1, v11))
  {
    v17 = sub_1000041D8(&qword_100084810);
    memcpy(__dst, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v13(__dst, v16, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
  }
  v9[v14[12]] = v10[v14[12]];
  v9[v14[13]] = v10[v14[13]];
  v18 = a3[6];
  v19 = a3[7];
  v20 = &a1[v18];
  v21 = &a2[v18];
  v22 = *((_OWORD *)v21 + 1);
  *(_OWORD *)v20 = *(_OWORD *)v21;
  *((_OWORD *)v20 + 1) = v22;
  *((_QWORD *)v20 + 4) = *((_QWORD *)v21 + 4);
  a1[v19] = a2[v19];
  v23 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  *(_QWORD *)&a1[v23] = *(_QWORD *)&a2[v23];
  v24 = a3[11];
  a1[a3[10]] = a2[a3[10]];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v27 = type metadata accessor for WidgetRenderingMode(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v25, v26, v27);
  return a1;
}

char *sub_100059270(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t (*v36)(char *, uint64_t, uint64_t);
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v51;
  char *v52;
  int *v53;

  if (a1 != a2)
  {
    sub_1000106A4((uint64_t)a1, &qword_100085E48);
    v6 = sub_1000041D8(&qword_100085E48);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v53 = a3;
  v8 = a3[5];
  v9 = &a1[v8];
  v52 = a2;
  v10 = &a2[v8];
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(void (**)(char *, char *, uint64_t))(v12 + 40);
  v13(v9, v10, v11);
  v14 = (int *)type metadata accessor for WorldClockCity(0);
  v9[v14[5]] = v10[v14[5]];
  v15 = v14[6];
  v16 = &v9[v15];
  v17 = &v10[v15];
  v19 = *(_QWORD *)v17;
  v18 = *((_QWORD *)v17 + 1);
  v20 = *((_QWORD *)v16 + 1);
  *(_QWORD *)v16 = v19;
  *((_QWORD *)v16 + 1) = v18;
  swift_bridgeObjectRelease(v20);
  v21 = v14[7];
  v22 = &v9[v21];
  v23 = &v10[v21];
  v25 = *(_QWORD *)v23;
  v24 = *((_QWORD *)v23 + 1);
  v26 = *((_QWORD *)v22 + 1);
  *(_QWORD *)v22 = v25;
  *((_QWORD *)v22 + 1) = v24;
  swift_bridgeObjectRelease(v26);
  v27 = v14[8];
  v28 = &v9[v27];
  v29 = &v10[v27];
  v31 = *(_QWORD *)v29;
  v30 = *((_QWORD *)v29 + 1);
  v32 = *((_QWORD *)v28 + 1);
  *(_QWORD *)v28 = v31;
  *((_QWORD *)v28 + 1) = v30;
  swift_bridgeObjectRelease(v32);
  v13(&v9[v14[9]], &v10[v14[9]], v11);
  v13(&v9[v14[10]], &v10[v14[10]], v11);
  v33 = v14[11];
  v34 = &v9[v33];
  v35 = &v10[v33];
  v51 = v12;
  v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v37 = v36(&v9[v33], 1, v11);
  v38 = v36(v35, 1, v11);
  if (!v37)
  {
    if (!v38)
    {
      v13(v34, v35, v11);
      goto LABEL_11;
    }
    (*(void (**)(char *, uint64_t))(v51 + 8))(v34, v11);
    goto LABEL_10;
  }
  if (v38)
  {
LABEL_10:
    v39 = sub_1000041D8(&qword_100084810);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    goto LABEL_11;
  }
  (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v34, v35, v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v34, 0, 1, v11);
LABEL_11:
  v9[v14[12]] = v10[v14[12]];
  v9[v14[13]] = v10[v14[13]];
  v40 = v53[6];
  v41 = &a1[v40];
  v42 = &v52[v40];
  sub_10001E0B0(&a1[v40]);
  v43 = *((_OWORD *)v42 + 1);
  *(_OWORD *)v41 = *(_OWORD *)v42;
  *((_OWORD *)v41 + 1) = v43;
  *((_QWORD *)v41 + 4) = *((_QWORD *)v42 + 4);
  v44 = v53[8];
  a1[v53[7]] = v52[v53[7]];
  a1[v44] = v52[v44];
  v45 = v53[10];
  *(_QWORD *)&a1[v53[9]] = *(_QWORD *)&v52[v53[9]];
  a1[v45] = v52[v45];
  v46 = v53[11];
  v47 = &a1[v46];
  v48 = &v52[v46];
  v49 = type metadata accessor for WidgetRenderingMode(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 40))(v47, v48, v49);
  return a1;
}

uint64_t sub_10005956C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100059578);
}

uint64_t sub_100059578(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v6 = sub_1000041D8(&qword_100085AD0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for WorldClockCity(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_10:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = type metadata accessor for WidgetRenderingMode(0);
    v12 = *(_QWORD *)(v8 - 8);
    v13 = a3[11];
    goto LABEL_10;
  }
  v14 = *(_QWORD *)(a1 + a3[6] + 24);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_10005964C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100059658);
}

uint64_t sub_100059658(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_1000041D8(&qword_100085AD0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    result = type metadata accessor for WorldClockCity(0);
    v14 = *(_QWORD *)(result - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = result;
      v15 = a4[5];
    }
    else
    {
      if (a3 == 0x7FFFFFFF)
      {
        *(_QWORD *)(a1 + a4[6] + 24) = (a2 - 1);
        return result;
      }
      v10 = type metadata accessor for WidgetRenderingMode(0);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[11];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_100059728(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[8];

  sub_10005A51C(319, (unint64_t *)&unk_100086818, (uint64_t (*)(uint64_t))&type metadata accessor for ContentSizeCategory, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for WorldClockCity(319);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      v8[2] = "(";
      v8[3] = &unk_10006DA48;
      v8[4] = &unk_10006DA48;
      v8[5] = (char *)&value witness table for Builtin.Int64 + 64;
      v8[6] = &unk_10006DA48;
      v6 = type metadata accessor for WidgetRenderingMode(319);
      if (v7 <= 0x3F)
      {
        v8[7] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 8, v8, a1 + 16);
      }
    }
  }
}

_QWORD *sub_100059804(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v18);
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v7 = a3[6];
    v8 = a1 + v7;
    v9 = (uint64_t)a2 + v7;
    v10 = type metadata accessor for TimeZone(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = a3[8];
    *((_BYTE *)v4 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    *((_BYTE *)v4 + v11) = *((_BYTE *)a2 + v11);
    v12 = a3[9];
    v13 = (char *)v4 + v12;
    v14 = (char *)a2 + v12;
    v15 = type metadata accessor for Date(0);
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      v17 = sub_1000041D8(&qword_100084810);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    v19 = a3[11];
    *((_BYTE *)v4 + a3[10]) = *((_BYTE *)a2 + a3[10]);
    *((_BYTE *)v4 + v19) = *((_BYTE *)a2 + v19);
    v20 = a3[13];
    *((_BYTE *)v4 + a3[12]) = *((_BYTE *)a2 + a3[12]);
    *((_BYTE *)v4 + v20) = *((_BYTE *)a2 + v20);
    v21 = a3[14];
    v22 = (_QWORD *)((char *)v4 + v21);
    v23 = (uint64_t *)((char *)a2 + v21);
    v24 = sub_1000041D8(&qword_100085E28);
    if (swift_getEnumCaseMultiPayload(v23, v24) == 1)
    {
      v25 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v22, v23, v25);
      v26 = v22;
      v27 = v24;
      v28 = 1;
    }
    else
    {
      v29 = *v23;
      *v22 = *v23;
      swift_retain(v29);
      v26 = v22;
      v27 = v24;
      v28 = 0;
    }
    swift_storeEnumTagMultiPayload(v26, v27, v28);
  }
  return v4;
}

uint64_t sub_1000599E8(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a1 + a2[6];
  v5 = type metadata accessor for TimeZone(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + a2[9];
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  v9 = (_QWORD *)(a1 + a2[14]);
  v10 = sub_1000041D8(&qword_100085E28);
  if (swift_getEnumCaseMultiPayload(v9, v10) != 1)
    return swift_release(*v9);
  v11 = type metadata accessor for WidgetRenderingMode(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v9, v11);
}

uint64_t sub_100059AD4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for TimeZone(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  v11 = a3[9];
  v12 = (void *)(a1 + v11);
  v13 = (const void *)(a2 + v11);
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = sub_1000041D8(&qword_100084810);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v12, v13, v14);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v17 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + v17) = *(_BYTE *)(a2 + v17);
  v18 = a3[13];
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  *(_BYTE *)(a1 + v18) = *(_BYTE *)(a2 + v18);
  v19 = a3[14];
  v20 = (uint64_t *)(a1 + v19);
  v21 = (uint64_t *)(a2 + v19);
  v22 = sub_1000041D8(&qword_100085E28);
  if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
  {
    v23 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v20, v21, v23);
    v24 = 1;
  }
  else
  {
    v25 = *v21;
    *v20 = *v21;
    swift_retain(v25);
    v24 = 0;
  }
  swift_storeEnumTagMultiPayload(v20, v22, v24);
  return a1;
}

uint64_t sub_100059C84(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for TimeZone(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  v10 = a3[9];
  v11 = (void *)(a1 + v10);
  v12 = (void *)(a2 + v10);
  v13 = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    (*(void (**)(void *, uint64_t))(v14 + 8))(v11, v13);
LABEL_6:
    v18 = sub_1000041D8(&qword_100084810);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v14 + 24))(v11, v12, v13);
LABEL_7:
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  if (a1 != a2)
  {
    v19 = a3[14];
    v20 = (uint64_t *)(a1 + v19);
    v21 = (uint64_t *)(a2 + v19);
    sub_1000106A4(a1 + v19, &qword_100085E28);
    v22 = sub_1000041D8(&qword_100085E28);
    if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
    {
      v23 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v20, v21, v23);
      v24 = 1;
    }
    else
    {
      v25 = *v21;
      *v20 = *v21;
      swift_retain(v25);
      v24 = 0;
    }
    swift_storeEnumTagMultiPayload(v20, v22, v24);
  }
  return a1;
}

uint64_t sub_100059EA4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for TimeZone(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  v11 = a3[9];
  v12 = (void *)(a1 + v11);
  v13 = (const void *)(a2 + v11);
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = sub_1000041D8(&qword_100084810);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 32))(v12, v13, v14);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v17 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + v17) = *(_BYTE *)(a2 + v17);
  v18 = a3[13];
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  *(_BYTE *)(a1 + v18) = *(_BYTE *)(a2 + v18);
  v19 = a3[14];
  v20 = (void *)(a1 + v19);
  v21 = (const void *)(a2 + v19);
  v22 = sub_1000041D8(&qword_100085E28);
  if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
  {
    v23 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v20, v21, v23);
    swift_storeEnumTagMultiPayload(v20, v22, 1);
  }
  else
  {
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  return a1;
}

uint64_t sub_10005A058(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for TimeZone(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  v11 = a3[9];
  v12 = (void *)(a1 + v11);
  v13 = (void *)(a2 + v11);
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 32))(v12, v13, v14);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    (*(void (**)(void *, uint64_t))(v15 + 8))(v12, v14);
LABEL_6:
    v19 = sub_1000041D8(&qword_100084810);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v15 + 40))(v12, v13, v14);
LABEL_7:
  v20 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + v20) = *(_BYTE *)(a2 + v20);
  v21 = a3[13];
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  *(_BYTE *)(a1 + v21) = *(_BYTE *)(a2 + v21);
  if (a1 != a2)
  {
    v22 = a3[14];
    v23 = (void *)(a1 + v22);
    v24 = (const void *)(a2 + v22);
    sub_1000106A4(a1 + v22, &qword_100085E28);
    v25 = sub_1000041D8(&qword_100085E28);
    if (swift_getEnumCaseMultiPayload(v24, v25) == 1)
    {
      v26 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v23, v24, v26);
      swift_storeEnumTagMultiPayload(v23, v25, 1);
    }
    else
    {
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10005A270(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005A27C);
}

uint64_t sub_10005A27C(uint64_t a1, uint64_t a2, int *a3)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 8);
    v5 = v4 >= 2;
    v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5)
      return (v6 + 1);
    else
      return 0;
  }
  else
  {
    v10 = type metadata accessor for TimeZone(0);
    v11 = *(_QWORD *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == (_DWORD)a2)
    {
      v12 = v10;
      v13 = a3[6];
    }
    else
    {
      v14 = sub_1000041D8(&qword_100084810);
      v11 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v11 + 84) == (_DWORD)a2)
      {
        v12 = v14;
        v13 = a3[9];
      }
      else
      {
        v12 = sub_1000041D8(&qword_100085B10);
        v11 = *(_QWORD *)(v12 - 8);
        v13 = a3[14];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(a1 + v13, a2, v12);
  }
}

uint64_t sub_10005A348(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005A354);
}

uint64_t sub_10005A354(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 8) = a2 + 1;
  }
  else
  {
    v8 = type metadata accessor for TimeZone(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[6];
    }
    else
    {
      v12 = sub_1000041D8(&qword_100084810);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[9];
      }
      else
      {
        v10 = sub_1000041D8(&qword_100085B10);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[14];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_10005A418(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[11];

  v8[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v8[1] = &unk_10006DA48;
  v2 = type metadata accessor for TimeZone(319);
  if (v3 <= 0x3F)
  {
    v8[2] = *(_QWORD *)(v2 - 8) + 64;
    v8[3] = &unk_10006DA48;
    v8[4] = &unk_10006DA48;
    sub_10005A51C(319, (unint64_t *)&qword_100084CF0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    if (v5 <= 0x3F)
    {
      v8[5] = *(_QWORD *)(v4 - 8) + 64;
      v8[6] = &unk_10006DB10;
      v8[7] = &unk_10006DA48;
      v8[8] = &unk_10006DB28;
      v8[9] = &unk_10006DA48;
      sub_10005A51C(319, (unint64_t *)&unk_1000864D8, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
      if (v7 <= 0x3F)
      {
        v8[10] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 11, v8, a1 + 16);
      }
    }
  }
}

void sub_10005A51C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t *sub_10005A574(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v13 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v13 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v13);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v5 = *(int *)(a3 + 24);
    v6 = (uint64_t *)((char *)a1 + v5);
    v7 = (uint64_t *)((char *)a2 + v5);
    v8 = sub_1000041D8(&qword_100085E28);
    if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
    {
      v9 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v6, v7, v9);
      v10 = v6;
      v11 = v8;
      v12 = 1;
    }
    else
    {
      v14 = *v7;
      *v6 = *v7;
      swift_retain(v14);
      v10 = v6;
      v11 = v8;
      v12 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v11, v12);
  }
  return v3;
}

uint64_t sub_10005A64C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + *(int *)(a2 + 24));
  v3 = sub_1000041D8(&qword_100085E28);
  if (swift_getEnumCaseMultiPayload(v2, v3) != 1)
    return swift_release(*v2);
  v4 = type metadata accessor for WidgetRenderingMode(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v2, v4);
}

_OWORD *sub_10005A6B4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  v4 = *(int *)(a3 + 24);
  v5 = (uint64_t *)((char *)a1 + v4);
  v6 = (uint64_t *)((char *)a2 + v4);
  v7 = sub_1000041D8(&qword_100085E28);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v5, v6, v8);
    v9 = 1;
  }
  else
  {
    v10 = *v6;
    *v5 = *v6;
    swift_retain(v10);
    v9 = 0;
  }
  swift_storeEnumTagMultiPayload(v5, v7, v9);
  return a1;
}

_QWORD *sub_10005A758(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  a1[1] = a2[1];
  if (a1 != a2)
  {
    v4 = *(int *)(a3 + 24);
    v5 = (_QWORD *)((char *)a1 + v4);
    v6 = (_QWORD *)((char *)a2 + v4);
    sub_1000106A4((uint64_t)a1 + v4, &qword_100085E28);
    v7 = sub_1000041D8(&qword_100085E28);
    if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
    {
      v8 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v5, v6, v8);
      v9 = 1;
    }
    else
    {
      v10 = *v6;
      *v5 = *v6;
      swift_retain(v10);
      v9 = 0;
    }
    swift_storeEnumTagMultiPayload(v5, v7, v9);
  }
  return a1;
}

_OWORD *sub_10005A820(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = *a2;
  if (a1 != a2)
  {
    v4 = *(int *)(a3 + 24);
    v5 = (char *)a1 + v4;
    v6 = (char *)a2 + v4;
    sub_1000106A4((uint64_t)a1 + v4, &qword_100085E28);
    v7 = sub_1000041D8(&qword_100085E28);
    if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
    {
      v8 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v5, v6, v8);
      swift_storeEnumTagMultiPayload(v5, v7, 1);
    }
    else
    {
      memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10005A8E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005A8EC);
}

uint64_t sub_10005A8EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 24);
  v5 = sub_1000041D8(&qword_100085B10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t sub_10005A930(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005A93C);
}

uint64_t sub_10005A93C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 24);
  v6 = sub_1000041D8(&qword_100085B10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

void sub_10005A984(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10005A998(a1, a2, a3, (uint64_t)&value witness table for Builtin.Int64 + 64, (uint64_t)&value witness table for Builtin.Int64 + 64);
}

void sub_10005A998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[3];

  v8[0] = a4;
  v8[1] = a5;
  sub_10005A51C(319, (unint64_t *)&unk_1000864D8, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v7 <= 0x3F)
  {
    v8[2] = *(_QWORD *)(v6 - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v8, a1 + 16);
  }
}

uint64_t *sub_10005AA1C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v5);
  }
  else
  {
    v6 = *(int *)(a3 + 20);
    v7 = (uint64_t *)((char *)a1 + v6);
    v8 = (uint64_t *)((char *)a2 + v6);
    swift_retain(v5);
    v9 = sub_1000041D8(&qword_100085E28);
    if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
    {
      v10 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v7, v8, v10);
      v11 = v7;
      v12 = v9;
      v13 = 1;
    }
    else
    {
      v14 = *v8;
      *v7 = *v8;
      swift_retain(v14);
      v11 = v7;
      v12 = v9;
      v13 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v12, v13);
  }
  return a1;
}

uint64_t sub_10005AAF0(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  swift_release(*a1);
  v4 = (_QWORD *)((char *)a1 + *(int *)(a2 + 20));
  v5 = sub_1000041D8(&qword_100085E28);
  if (swift_getEnumCaseMultiPayload(v4, v5) != 1)
    return swift_release(*v4);
  v6 = type metadata accessor for WidgetRenderingMode(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
}

uint64_t *sub_10005AB68(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a2;
  *a1 = *a2;
  v5 = *(int *)(a3 + 20);
  v6 = (uint64_t *)((char *)a1 + v5);
  v7 = (uint64_t *)((char *)a2 + v5);
  swift_retain(v4);
  v8 = sub_1000041D8(&qword_100085E28);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v6, v7, v9);
    v10 = 1;
  }
  else
  {
    v11 = *v7;
    *v6 = *v7;
    swift_retain(v11);
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v6, v8, v10);
  return a1;
}

uint64_t *sub_10005AC10(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_retain(v6);
  swift_release(v7);
  if (a1 != a2)
  {
    v8 = *(int *)(a3 + 20);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    sub_1000106A4((uint64_t)a1 + v8, &qword_100085E28);
    v11 = sub_1000041D8(&qword_100085E28);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
      v13 = 1;
    }
    else
    {
      v14 = *v10;
      *v9 = *v10;
      swift_retain(v14);
      v13 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v11, v13);
  }
  return a1;
}

_QWORD *sub_10005ACE4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_1000041D8(&qword_100085E28);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v5, v6, v8);
    swift_storeEnumTagMultiPayload(v5, v7, 1);
  }
  else
  {
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  return a1;
}

uint64_t *sub_10005AD8C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  if (a1 != a2)
  {
    v7 = *(int *)(a3 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    sub_1000106A4((uint64_t)a1 + v7, &qword_100085E28);
    v10 = sub_1000041D8(&qword_100085E28);
    if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
    {
      v11 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
      swift_storeEnumTagMultiPayload(v8, v10, 1);
    }
    else
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10005AE5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005AE68);
}

uint64_t sub_10005AE68(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1000041D8(&qword_100085B10);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_10005AEE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005AEF4);
}

char *sub_10005AEF4(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_1000041D8(&qword_100085B10);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

void sub_10005AF6C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  sub_10005A51C(319, (unint64_t *)&unk_1000864D8, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

uint64_t *sub_10005AFFC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v5);
  }
  else
  {
    a1[1] = a2[1];
    v6 = *(int *)(a3 + 24);
    v7 = (uint64_t *)((char *)a1 + v6);
    v8 = (uint64_t *)((char *)a2 + v6);
    swift_retain(v5);
    v9 = sub_1000041D8(&qword_100085E28);
    if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
    {
      v10 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v7, v8, v10);
      v11 = v7;
      v12 = v9;
      v13 = 1;
    }
    else
    {
      v14 = *v8;
      *v7 = *v8;
      swift_retain(v14);
      v11 = v7;
      v12 = v9;
      v13 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v12, v13);
  }
  return a1;
}

uint64_t sub_10005B0D8(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  swift_release(*a1);
  v4 = (_QWORD *)((char *)a1 + *(int *)(a2 + 24));
  v5 = sub_1000041D8(&qword_100085E28);
  if (swift_getEnumCaseMultiPayload(v4, v5) != 1)
    return swift_release(*v4);
  v6 = type metadata accessor for WidgetRenderingMode(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
}

uint64_t *sub_10005B150(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a2;
  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = *(int *)(a3 + 24);
  v7 = (uint64_t *)((char *)a1 + v6);
  v8 = (uint64_t *)((char *)a2 + v6);
  swift_retain(v4);
  v9 = sub_1000041D8(&qword_100085E28);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v7, v8, v10);
    v11 = 1;
  }
  else
  {
    v12 = *v8;
    *v7 = *v8;
    swift_retain(v12);
    v11 = 0;
  }
  swift_storeEnumTagMultiPayload(v7, v9, v11);
  return a1;
}

uint64_t *sub_10005B1F8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_retain(v6);
  swift_release(v7);
  a1[1] = a2[1];
  if (a1 != a2)
  {
    v8 = *(int *)(a3 + 24);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    sub_1000106A4((uint64_t)a1 + v8, &qword_100085E28);
    v11 = sub_1000041D8(&qword_100085E28);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
      v13 = 1;
    }
    else
    {
      v14 = *v10;
      *v9 = *v10;
      swift_retain(v14);
      v13 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v11, v13);
  }
  return a1;
}

_OWORD *sub_10005B2D4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = *a2;
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_1000041D8(&qword_100085E28);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v5, v6, v8);
    swift_storeEnumTagMultiPayload(v5, v7, 1);
  }
  else
  {
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  return a1;
}

uint64_t *sub_10005B37C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  a1[1] = a2[1];
  if (a1 != a2)
  {
    v7 = *(int *)(a3 + 24);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    sub_1000106A4((uint64_t)a1 + v7, &qword_100085E28);
    v10 = sub_1000041D8(&qword_100085E28);
    if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
    {
      v11 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
      swift_storeEnumTagMultiPayload(v8, v10, 1);
    }
    else
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10005B454(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005B460);
}

uint64_t sub_10005B460(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1000041D8(&qword_100085B10);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t sub_10005B4E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005B4EC);
}

char *sub_10005B4EC(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_1000041D8(&qword_100085B10);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

void sub_10005B564(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10005A998(a1, a2, a3, (uint64_t)&value witness table for Builtin.NativeObject + 64, (uint64_t)&value witness table for Builtin.Int64 + 64);
}

__n128 initializeWithTake for SmallSizeDimentions(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for SmallSizeDimentions()
{
  return &type metadata for SmallSizeDimentions;
}

uint64_t _s16WorldClockWidget19SmallSizeDimentionsVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_retain(v3);
  return a1;
}

_QWORD *_s16WorldClockWidget19SmallSizeDimentionsVwca_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_retain(v4);
  swift_release(v5);
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  return a1;
}

uint64_t _s16WorldClockWidget19SmallSizeDimentionsVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release(v4);
  v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  return a1;
}

uint64_t _s16WorldClockWidget19SmallSizeDimentionsVwet_0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_10005B704(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AnalogueCircularDimensions()
{
  return &type metadata for AnalogueCircularDimensions;
}

uint64_t initializeWithCopy for SmallMultiSizeDimentions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain(v3);
  return a1;
}

_QWORD *assignWithCopy for SmallMultiSizeDimentions(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_retain(v4);
  swift_release(v5);
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  return a1;
}

__n128 initializeWithTake for SmallMultiSizeDimentions(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for SmallMultiSizeDimentions(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release(v4);
  v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

ValueMetadata *type metadata accessor for SmallMultiSizeDimentions()
{
  return &type metadata for SmallMultiSizeDimentions;
}

uint64_t initializeWithCopy for MediumSizeDimentions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_retain(v3);
  return a1;
}

_QWORD *assignWithCopy for MediumSizeDimentions(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_retain(v4);
  swift_release(v5);
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  return a1;
}

__n128 initializeWithTake for MediumSizeDimentions(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for MediumSizeDimentions(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release(v4);
  v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for MediumSizeDimentions(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MediumSizeDimentions(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MediumSizeDimentions()
{
  return &type metadata for MediumSizeDimentions;
}

_QWORD *sub_10005BA7C(_BYTE *a1, _QWORD *a2, int *a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v6;
  _BYTE *v7;
  char *v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  char *v25;
  uint64_t v26;
  _BYTE *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  void (*v48)(_BYTE *, char *, uint64_t);
  uint64_t v49;

  v3 = a1;
  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v30 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v30 + ((v4 + 16) & ~(unint64_t)v4));
  }
  else
  {
    *a1 = *(_BYTE *)a2;
    v6 = a3[5];
    v7 = &a1[v6];
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for Date(0);
    v49 = *(_QWORD *)(v9 - 8);
    v48 = *(void (**)(_BYTE *, char *, uint64_t))(v49 + 16);
    v48(v7, v8, v9);
    v10 = (int *)type metadata accessor for WorldClockCity(0);
    v7[v10[5]] = v8[v10[5]];
    v11 = v10[6];
    v12 = &v7[v11];
    v13 = &v8[v11];
    v14 = *((_QWORD *)v13 + 1);
    *v12 = *(_QWORD *)v13;
    v12[1] = v14;
    v15 = v10[7];
    v16 = &v7[v15];
    v17 = &v8[v15];
    v18 = *((_QWORD *)v17 + 1);
    *v16 = *(_QWORD *)v17;
    v16[1] = v18;
    v19 = v10[8];
    v20 = &v7[v19];
    v21 = &v8[v19];
    v22 = *((_QWORD *)v21 + 1);
    *v20 = *(_QWORD *)v21;
    v20[1] = v22;
    v23 = v10[9];
    v24 = &v7[v23];
    v25 = &v8[v23];
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v22);
    v48(v24, v25, v9);
    v48(&v7[v10[10]], &v8[v10[10]], v9);
    v26 = v10[11];
    v27 = &v7[v26];
    v28 = &v8[v26];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(&v8[v26], 1, v9))
    {
      v29 = sub_1000041D8(&qword_100084810);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      v48(v27, v28, v9);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v27, 0, 1, v9);
    }
    v7[v10[12]] = v8[v10[12]];
    v7[v10[13]] = v8[v10[13]];
    v31 = a3[6];
    v32 = *(_OWORD *)((char *)a2 + v31 + 24);
    *(_OWORD *)((char *)v3 + v31 + 24) = v32;
    (**(void (***)(void))(v32 - 8))();
    v33 = a3[8];
    *((_BYTE *)v3 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    v34 = (_QWORD *)((char *)v3 + v33);
    v35 = (_QWORD *)((char *)a2 + v33);
    v36 = sub_1000041D8(&qword_100085E48);
    if (swift_getEnumCaseMultiPayload(v35, v36) == 1)
    {
      v37 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v34, v35, v37);
      v38 = 1;
    }
    else
    {
      v39 = *v35;
      *v34 = *v35;
      swift_retain(v39);
      v38 = 0;
    }
    swift_storeEnumTagMultiPayload(v34, v36, v38);
    v40 = a3[10];
    *((_BYTE *)v3 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    v41 = (char *)v3 + v40;
    v42 = (char *)a2 + v40;
    v43 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v41, v42, v43);
    v44 = a3[11];
    v45 = (char *)v3 + v44;
    v46 = (char *)a2 + v44;
    v30 = *(_QWORD *)v46;
    LOBYTE(v46) = v46[8];
    *(_QWORD *)v45 = v30;
    v45[8] = (char)v46;
  }
  swift_retain(v30);
  return v3;
}

uint64_t sub_10005BD50(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  int *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = a1 + a2[5];
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  v8 = (int *)type metadata accessor for WorldClockCity(0);
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[8] + 8));
  v7(v4 + v8[9], v5);
  v7(v4 + v8[10], v5);
  v9 = v4 + v8[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v9, 1, v5))
    v7(v9, v5);
  sub_10001E0B0((_QWORD *)(a1 + a2[6]));
  v10 = (_QWORD *)(a1 + a2[8]);
  v11 = sub_1000041D8(&qword_100085E48);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
  }
  else
  {
    swift_release(*v10);
  }
  v13 = a1 + a2[10];
  v14 = type metadata accessor for WidgetRenderingMode(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  return swift_release(*(_QWORD *)(a1 + a2[11]));
}

_BYTE *sub_10005BEC0(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(_BYTE *, _BYTE *, uint64_t);
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  uint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  uint64_t v45;

  *a1 = *a2;
  v3 = a3[5];
  v4 = &a1[v3];
  v5 = &a2[v3];
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 16);
  v8(v4, v5, v6);
  v9 = (int *)type metadata accessor for WorldClockCity(0);
  v4[v9[5]] = v5[v9[5]];
  v10 = v9[6];
  v11 = &v4[v10];
  v12 = &v5[v10];
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  v14 = v9[7];
  v15 = &v4[v14];
  v16 = &v5[v14];
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  v18 = v9[8];
  v19 = &v4[v18];
  v20 = &v5[v18];
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  v22 = v9[9];
  v23 = &v4[v22];
  v24 = &v5[v22];
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v21);
  v8(v23, v24, v6);
  v8(&v4[v9[10]], &v5[v9[10]], v6);
  v25 = v9[11];
  v26 = &v4[v25];
  v27 = &v5[v25];
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v7 + 48))(&v5[v25], 1, v6))
  {
    v28 = sub_1000041D8(&qword_100084810);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    v8(v26, v27, v6);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v26, 0, 1, v6);
  }
  v4[v9[12]] = v5[v9[12]];
  v4[v9[13]] = v5[v9[13]];
  v29 = a3[6];
  v30 = *(_OWORD *)&a2[v29 + 24];
  *(_OWORD *)&a1[v29 + 24] = v30;
  (**(void (***)(void))(v30 - 8))();
  v31 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  v32 = (uint64_t *)&a1[v31];
  v33 = (uint64_t *)&a2[v31];
  v34 = sub_1000041D8(&qword_100085E48);
  if (swift_getEnumCaseMultiPayload(v33, v34) == 1)
  {
    v35 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v32, v33, v35);
    v36 = 1;
  }
  else
  {
    v37 = *v33;
    *v32 = *v33;
    swift_retain(v37);
    v36 = 0;
  }
  swift_storeEnumTagMultiPayload(v32, v34, v36);
  v38 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  v39 = &a1[v38];
  v40 = &a2[v38];
  v41 = type metadata accessor for WidgetRenderingMode(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v39, v40, v41);
  v42 = a3[11];
  v43 = &a1[v42];
  v44 = &a2[v42];
  v45 = *(_QWORD *)v44;
  LOBYTE(v44) = v44[8];
  *(_QWORD *)v43 = v45;
  v43[8] = (_BYTE)v44;
  swift_retain(v45);
  return a1;
}

_BYTE *sub_10005C160(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(_BYTE *, _BYTE *, uint64_t);
  int *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  uint64_t (*v29)(_BYTE *, uint64_t, uint64_t);
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;

  *a1 = *a2;
  v4 = a3[5];
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 24);
  v9(v5, v6, v7);
  v10 = (int *)type metadata accessor for WorldClockCity(0);
  v5[v10[5]] = v6[v10[5]];
  v11 = v10[6];
  v12 = &v5[v11];
  v13 = &v6[v11];
  *v12 = *v13;
  v14 = v13[1];
  v15 = v12[1];
  v12[1] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v16 = v10[7];
  v17 = &v5[v16];
  v18 = &v6[v16];
  *v17 = *v18;
  v19 = v18[1];
  v20 = v17[1];
  v17[1] = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  v21 = v10[8];
  v22 = &v5[v21];
  v23 = &v6[v21];
  *v22 = *v23;
  v24 = v23[1];
  v25 = v22[1];
  v22[1] = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  v9(&v5[v10[9]], &v6[v10[9]], v7);
  v9(&v5[v10[10]], &v6[v10[10]], v7);
  v26 = v10[11];
  v27 = &v5[v26];
  v28 = &v6[v26];
  v50 = v8;
  v29 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48);
  v30 = v29(&v5[v26], 1, v7);
  v31 = v29(v28, 1, v7);
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v50 + 16))(v27, v28, v7);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v27, 0, 1, v7);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v31)
  {
    (*(void (**)(_BYTE *, uint64_t))(v50 + 8))(v27, v7);
LABEL_6:
    v32 = sub_1000041D8(&qword_100084810);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_7;
  }
  v9(v27, v28, v7);
LABEL_7:
  v5[v10[12]] = v6[v10[12]];
  v5[v10[13]] = v6[v10[13]];
  sub_100057180(&a1[a3[6]], &a2[a3[6]]);
  a1[a3[7]] = a2[a3[7]];
  if (a1 != a2)
  {
    v33 = a3[8];
    v34 = (uint64_t *)&a1[v33];
    v35 = (uint64_t *)&a2[v33];
    sub_1000106A4((uint64_t)&a1[v33], &qword_100085E48);
    v36 = sub_1000041D8(&qword_100085E48);
    if (swift_getEnumCaseMultiPayload(v35, v36) == 1)
    {
      v37 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v34, v35, v37);
      v38 = 1;
    }
    else
    {
      v39 = *v35;
      *v34 = *v35;
      swift_retain(v39);
      v38 = 0;
    }
    swift_storeEnumTagMultiPayload(v34, v36, v38);
  }
  a1[a3[9]] = a2[a3[9]];
  v40 = a3[10];
  v41 = &a1[v40];
  v42 = &a2[v40];
  v43 = type metadata accessor for WidgetRenderingMode(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v43 - 8) + 24))(v41, v42, v43);
  v44 = a3[11];
  v45 = &a1[v44];
  v46 = &a2[v44];
  v47 = *(_QWORD *)v46;
  LOBYTE(v46) = v46[8];
  v48 = *(_QWORD *)v45;
  *(_QWORD *)v45 = v47;
  v45[8] = (_BYTE)v46;
  swift_retain(v47);
  swift_release(v48);
  return a1;
}

_BYTE *sub_10005C490(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(_BYTE *, _BYTE *, uint64_t);
  int *v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  __int128 v20;
  char v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  _BYTE *v33;

  *a1 = *a2;
  v5 = a3[5];
  v6 = &a1[v5];
  v7 = &a2[v5];
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 32);
  v10(v6, v7, v8);
  v11 = (int *)type metadata accessor for WorldClockCity(0);
  v6[v11[5]] = v7[v11[5]];
  *(_OWORD *)&v6[v11[6]] = *(_OWORD *)&v7[v11[6]];
  *(_OWORD *)&v6[v11[7]] = *(_OWORD *)&v7[v11[7]];
  *(_OWORD *)&v6[v11[8]] = *(_OWORD *)&v7[v11[8]];
  v10(&v6[v11[9]], &v7[v11[9]], v8);
  v10(&v6[v11[10]], &v7[v11[10]], v8);
  v12 = v11[11];
  v13 = &v6[v12];
  v14 = &v7[v12];
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v9 + 48))(&v7[v12], 1, v8))
  {
    v15 = sub_1000041D8(&qword_100084810);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    v10(v13, v14, v8);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v13, 0, 1, v8);
  }
  v6[v11[12]] = v7[v11[12]];
  v6[v11[13]] = v7[v11[13]];
  v16 = a3[6];
  v17 = a3[7];
  v18 = &a1[v16];
  v19 = &a2[v16];
  v20 = *((_OWORD *)v19 + 1);
  *(_OWORD *)v18 = *(_OWORD *)v19;
  *((_OWORD *)v18 + 1) = v20;
  v21 = a2[v17];
  *((_QWORD *)v18 + 4) = *((_QWORD *)v19 + 4);
  a1[v17] = v21;
  v22 = a3[8];
  v23 = &a1[v22];
  v24 = &a2[v22];
  v25 = sub_1000041D8(&qword_100085E48);
  if (swift_getEnumCaseMultiPayload(v24, v25) == 1)
  {
    v26 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v23, v24, v26);
    swift_storeEnumTagMultiPayload(v23, v25, 1);
  }
  else
  {
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  v27 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  v28 = &a1[v27];
  v29 = &a2[v27];
  v30 = type metadata accessor for WidgetRenderingMode(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v28, v29, v30);
  v31 = a3[11];
  v32 = &a1[v31];
  v33 = &a2[v31];
  *(_QWORD *)v32 = *(_QWORD *)v33;
  v32[8] = v33[8];
  return a1;
}

_BYTE *sub_10005C6F4(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(_BYTE *, _BYTE *, uint64_t);
  int *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  uint64_t (*v32)(_BYTE *, uint64_t, uint64_t);
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  _BYTE *v38;
  __int128 v39;
  uint64_t v40;
  _BYTE *v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;

  *a1 = *a2;
  v4 = a3[5];
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 40);
  v9(v5, v6, v7);
  v10 = (int *)type metadata accessor for WorldClockCity(0);
  v5[v10[5]] = v6[v10[5]];
  v11 = v10[6];
  v12 = &v5[v11];
  v13 = (uint64_t *)&v6[v11];
  v15 = *v13;
  v14 = v13[1];
  v16 = v12[1];
  *v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease(v16);
  v17 = v10[7];
  v18 = &v5[v17];
  v19 = (uint64_t *)&v6[v17];
  v21 = *v19;
  v20 = v19[1];
  v22 = v18[1];
  *v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease(v22);
  v23 = v10[8];
  v24 = &v5[v23];
  v25 = (uint64_t *)&v6[v23];
  v27 = *v25;
  v26 = v25[1];
  v28 = v24[1];
  *v24 = v27;
  v24[1] = v26;
  swift_bridgeObjectRelease(v28);
  v9(&v5[v10[9]], &v6[v10[9]], v7);
  v9(&v5[v10[10]], &v6[v10[10]], v7);
  v29 = v10[11];
  v30 = &v5[v29];
  v31 = &v6[v29];
  v55 = v8;
  v32 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48);
  v33 = v32(&v5[v29], 1, v7);
  v34 = v32(v31, 1, v7);
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v55 + 32))(v30, v31, v7);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v30, 0, 1, v7);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v34)
  {
    (*(void (**)(_BYTE *, uint64_t))(v55 + 8))(v30, v7);
LABEL_6:
    v35 = sub_1000041D8(&qword_100084810);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    goto LABEL_7;
  }
  v9(v30, v31, v7);
LABEL_7:
  v5[v10[12]] = v6[v10[12]];
  v5[v10[13]] = v6[v10[13]];
  v36 = a3[6];
  v37 = &a1[v36];
  v38 = &a2[v36];
  sub_10001E0B0(&a1[v36]);
  v39 = *((_OWORD *)v38 + 1);
  *(_OWORD *)v37 = *(_OWORD *)v38;
  *((_OWORD *)v37 + 1) = v39;
  *((_QWORD *)v37 + 4) = *((_QWORD *)v38 + 4);
  a1[a3[7]] = a2[a3[7]];
  if (a1 != a2)
  {
    v40 = a3[8];
    v41 = &a1[v40];
    v42 = &a2[v40];
    sub_1000106A4((uint64_t)&a1[v40], &qword_100085E48);
    v43 = sub_1000041D8(&qword_100085E48);
    if (swift_getEnumCaseMultiPayload(v42, v43) == 1)
    {
      v44 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v44 - 8) + 32))(v41, v42, v44);
      swift_storeEnumTagMultiPayload(v41, v43, 1);
    }
    else
    {
      memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    }
  }
  v45 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  v46 = &a1[v45];
  v47 = &a2[v45];
  v48 = type metadata accessor for WidgetRenderingMode(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v48 - 8) + 40))(v46, v47, v48);
  v49 = a3[11];
  v50 = &a1[v49];
  v51 = &a2[v49];
  v52 = *(_QWORD *)v51;
  LOBYTE(v51) = v51[8];
  v53 = *(_QWORD *)v50;
  *(_QWORD *)v50 = v52;
  v50[8] = (_BYTE)v51;
  swift_release(v53);
  return a1;
}

uint64_t sub_10005CA00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005CA0C);
}

uint64_t sub_10005CA0C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v6 = type metadata accessor for WorldClockCity(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v12 = sub_1000041D8(&qword_100085AD0);
    v7 = *(_QWORD *)(v12 - 8);
    if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    {
      v8 = v12;
      v9 = a3[8];
    }
    else
    {
      v8 = type metadata accessor for WidgetRenderingMode(0);
      v7 = *(_QWORD *)(v8 - 8);
      v9 = a3[10];
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = *(_QWORD *)(a1 + a3[6] + 24);
  if (v10 >= 0xFFFFFFFF)
    LODWORD(v10) = -1;
  return (v10 + 1);
}

uint64_t sub_10005CADC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005CAE8);
}

uint64_t sub_10005CAE8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = type metadata accessor for WorldClockCity(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[5];
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + a4[6] + 24) = (a2 - 1);
      return result;
    }
    v12 = sub_1000041D8(&qword_100085AD0);
    v9 = *(_QWORD *)(v12 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v12;
      v11 = a4[8];
    }
    else
    {
      v10 = type metadata accessor for WidgetRenderingMode(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = a4[10];
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

void sub_10005CBB4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[8];

  v8[0] = &unk_10006DA48;
  v2 = type metadata accessor for WorldClockCity(319);
  if (v3 <= 0x3F)
  {
    v8[1] = *(_QWORD *)(v2 - 8) + 64;
    v8[2] = "(";
    v8[3] = &unk_10006DA48;
    sub_10005A51C(319, (unint64_t *)&unk_100086818, (uint64_t (*)(uint64_t))&type metadata accessor for ContentSizeCategory, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v5 <= 0x3F)
    {
      v8[4] = *(_QWORD *)(v4 - 8) + 64;
      v8[5] = &unk_10006DA48;
      v6 = type metadata accessor for WidgetRenderingMode(319);
      if (v7 <= 0x3F)
      {
        v8[6] = *(_QWORD *)(v6 - 8) + 64;
        v8[7] = "\t";
        swift_initStructMetadata(a1, 256, 8, v8, a1 + 16);
      }
    }
  }
}

_QWORD *sub_10005CC8C(_BYTE *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  char *v35;
  char *v36;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    *a1 = *(_BYTE *)a2;
    v7 = a3[5];
    v8 = &a1[v7];
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for TimeZone(0);
    (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = a3[6];
    v12 = *(_OWORD *)((char *)a2 + v11 + 24);
    *(_OWORD *)((char *)v4 + v11 + 24) = v12;
    (**(void (***)(void))(v12 - 8))();
    v13 = a3[8];
    *((_BYTE *)v4 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    v14 = (char *)v4 + v13;
    v15 = (char *)a2 + v13;
    v16 = type metadata accessor for Date(0);
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      v18 = sub_1000041D8(&qword_100084810);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    v20 = a3[10];
    *((_BYTE *)v4 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    *((_BYTE *)v4 + v20) = *((_BYTE *)a2 + v20);
    v21 = a3[11];
    v22 = a3[12];
    v23 = (char *)v4 + v21;
    v24 = (char *)a2 + v21;
    *(_OWORD *)v23 = *(_OWORD *)v24;
    v25 = *((_QWORD *)v24 + 3);
    *((_QWORD *)v23 + 2) = *((_QWORD *)v24 + 2);
    *((_QWORD *)v23 + 3) = v25;
    v26 = *((_QWORD *)v24 + 4);
    *((_QWORD *)v23 + 4) = v26;
    v23[40] = v24[40];
    v28 = *((_QWORD *)v24 + 6);
    v27 = *((_QWORD *)v24 + 7);
    *((_QWORD *)v23 + 6) = v28;
    *((_QWORD *)v23 + 7) = v27;
    *((_BYTE *)v4 + v22) = *((_BYTE *)a2 + v22);
    v29 = a3[14];
    *((_BYTE *)v4 + a3[13]) = *((_BYTE *)a2 + a3[13]);
    v30 = (char *)v4 + v29;
    v31 = (char *)a2 + v29;
    v32 = type metadata accessor for WidgetRenderingMode(0);
    v33 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16);
    swift_retain(v25);
    swift_retain(v26);
    swift_retain(v28);
    v33(v30, v31, v32);
    v34 = a3[15];
    v35 = (char *)v4 + v34;
    v36 = (char *)a2 + v34;
    v19 = *(_QWORD *)v36;
    LOBYTE(v36) = v36[8];
    *(_QWORD *)v35 = v19;
    v35[8] = (char)v36;
  }
  swift_retain(v19);
  return v4;
}

uint64_t sub_10005CEA0(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a1 + a2[5];
  v5 = type metadata accessor for TimeZone(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  sub_10001E0B0((_QWORD *)(a1 + a2[6]));
  v6 = a1 + a2[8];
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  v9 = (_QWORD *)(a1 + a2[11]);
  swift_release(v9[3]);
  swift_release(v9[4]);
  swift_release(v9[6]);
  v10 = a1 + a2[14];
  v11 = type metadata accessor for WidgetRenderingMode(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  return swift_release(*(_QWORD *)(a1 + a2[15]));
}

_BYTE *sub_10005CF8C(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  uint64_t v30;
  void (*v31)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for TimeZone(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = a3[6];
  v11 = *(_OWORD *)&a2[v10 + 24];
  *(_OWORD *)&a1[v10 + 24] = v11;
  (**(void (***)(void))(v11 - 8))();
  v12 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = sub_1000041D8(&qword_100084810);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v16 + 16))(v13, v14, v15);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  v18 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  a1[v18] = a2[v18];
  v19 = a3[11];
  v20 = a3[12];
  v21 = &a1[v19];
  v22 = &a2[v19];
  *(_OWORD *)v21 = *(_OWORD *)v22;
  v23 = *((_QWORD *)v22 + 3);
  *((_QWORD *)v21 + 2) = *((_QWORD *)v22 + 2);
  *((_QWORD *)v21 + 3) = v23;
  v24 = *((_QWORD *)v22 + 4);
  *((_QWORD *)v21 + 4) = v24;
  v21[40] = v22[40];
  v26 = *((_QWORD *)v22 + 6);
  v25 = *((_QWORD *)v22 + 7);
  *((_QWORD *)v21 + 6) = v26;
  *((_QWORD *)v21 + 7) = v25;
  a1[v20] = a2[v20];
  v27 = a3[14];
  a1[a3[13]] = a2[a3[13]];
  v28 = &a1[v27];
  v29 = &a2[v27];
  v30 = type metadata accessor for WidgetRenderingMode(0);
  v31 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v30 - 8) + 16);
  swift_retain(v23);
  swift_retain(v24);
  swift_retain(v26);
  v31(v28, v29, v30);
  v32 = a3[15];
  v33 = &a1[v32];
  v34 = &a2[v32];
  v35 = *(_QWORD *)v34;
  LOBYTE(v34) = v34[8];
  *(_QWORD *)v33 = v35;
  v33[8] = (_BYTE)v34;
  swift_retain(v35);
  return a1;
}

_BYTE *sub_10005D178(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(_BYTE *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for TimeZone(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  sub_100057180(&a1[a3[6]], &a2[a3[6]]);
  a1[a3[7]] = a2[a3[7]];
  v10 = a3[8];
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v14 + 24))(v11, v12, v13);
      goto LABEL_7;
    }
    (*(void (**)(_BYTE *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    v18 = sub_1000041D8(&qword_100084810);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v14 + 16))(v11, v12, v13);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_7:
  a1[a3[9]] = a2[a3[9]];
  a1[a3[10]] = a2[a3[10]];
  v19 = a3[11];
  v20 = &a1[v19];
  v21 = &a2[v19];
  *(_QWORD *)v20 = *(_QWORD *)&a2[v19];
  *((_QWORD *)v20 + 1) = *(_QWORD *)&a2[v19 + 8];
  *((_QWORD *)v20 + 2) = *(_QWORD *)&a2[v19 + 16];
  v22 = *(_QWORD *)&a2[v19 + 24];
  v23 = *(_QWORD *)&a1[v19 + 24];
  *((_QWORD *)v20 + 3) = v22;
  swift_retain(v22);
  swift_release(v23);
  v24 = *((_QWORD *)v21 + 4);
  v25 = *((_QWORD *)v20 + 4);
  *((_QWORD *)v20 + 4) = v24;
  swift_retain(v24);
  swift_release(v25);
  v20[40] = v21[40];
  v26 = *((_QWORD *)v21 + 6);
  v27 = *((_QWORD *)v20 + 6);
  *((_QWORD *)v20 + 6) = v26;
  swift_retain(v26);
  swift_release(v27);
  *((_QWORD *)v20 + 7) = *((_QWORD *)v21 + 7);
  a1[a3[12]] = a2[a3[12]];
  a1[a3[13]] = a2[a3[13]];
  v28 = a3[14];
  v29 = &a1[v28];
  v30 = &a2[v28];
  v31 = type metadata accessor for WidgetRenderingMode(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v31 - 8) + 24))(v29, v30, v31);
  v32 = a3[15];
  v33 = &a1[v32];
  v34 = &a2[v32];
  v35 = *(_QWORD *)v34;
  LOBYTE(v34) = v34[8];
  v36 = *(_QWORD *)v33;
  *(_QWORD *)v33 = v35;
  v33[8] = (_BYTE)v34;
  swift_retain(v35);
  swift_release(v36);
  return a1;
}

_BYTE *sub_10005D3DC(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  _OWORD *v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  _BYTE *v35;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for TimeZone(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[6];
  v11 = a3[7];
  v12 = &a1[v10];
  v13 = &a2[v10];
  v14 = *(_OWORD *)v13;
  v15 = *((_OWORD *)v13 + 1);
  *((_QWORD *)v12 + 4) = *((_QWORD *)v13 + 4);
  LOBYTE(v13) = a2[v11];
  *(_OWORD *)v12 = v14;
  *((_OWORD *)v12 + 1) = v15;
  a1[v11] = (_BYTE)v13;
  v16 = a3[8];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = type metadata accessor for Date(0);
  v20 = *(_QWORD *)(v19 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
  {
    v21 = sub_1000041D8(&qword_100084810);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v20 + 32))(v17, v18, v19);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  v22 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  a1[v22] = a2[v22];
  v23 = a3[11];
  v24 = a3[12];
  v25 = &a1[v23];
  v26 = &a2[v23];
  v27 = v26[1];
  *v25 = *v26;
  v25[1] = v27;
  v28 = v26[3];
  v25[2] = v26[2];
  v25[3] = v28;
  a1[v24] = a2[v24];
  v29 = a3[14];
  a1[a3[13]] = a2[a3[13]];
  v30 = &a1[v29];
  v31 = &a2[v29];
  v32 = type metadata accessor for WidgetRenderingMode(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v30, v31, v32);
  v33 = a3[15];
  v34 = &a1[v33];
  v35 = &a2[v33];
  *(_QWORD *)v34 = *(_QWORD *)v35;
  v34[8] = v35[8];
  return a1;
}

_BYTE *sub_10005D580(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  __int128 v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(_BYTE *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for TimeZone(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[6];
  v11 = &a1[v10];
  v12 = &a2[v10];
  sub_10001E0B0(&a1[v10]);
  v13 = *((_OWORD *)v12 + 1);
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *((_OWORD *)v11 + 1) = v13;
  *((_QWORD *)v11 + 4) = *((_QWORD *)v12 + 4);
  v14 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  v15 = &a1[v14];
  v16 = &a2[v14];
  v17 = type metadata accessor for Date(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (!v20)
  {
    if (!v21)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v18 + 40))(v15, v16, v17);
      goto LABEL_7;
    }
    (*(void (**)(_BYTE *, uint64_t))(v18 + 8))(v15, v17);
    goto LABEL_6;
  }
  if (v21)
  {
LABEL_6:
    v22 = sub_1000041D8(&qword_100084810);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v18 + 32))(v15, v16, v17);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
LABEL_7:
  v23 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  a1[v23] = a2[v23];
  v24 = a3[11];
  v25 = &a1[v24];
  v26 = &a2[v24];
  *(_OWORD *)v25 = *(_OWORD *)&a2[v24];
  *((_QWORD *)v25 + 2) = *(_QWORD *)&a2[v24 + 16];
  v27 = *(_QWORD *)&a1[v24 + 24];
  *((_QWORD *)v25 + 3) = *(_QWORD *)&a2[v24 + 24];
  swift_release(v27);
  v28 = *((_QWORD *)v25 + 4);
  *((_QWORD *)v25 + 4) = *((_QWORD *)v26 + 4);
  swift_release(v28);
  v25[40] = v26[40];
  v29 = *((_QWORD *)v25 + 6);
  *((_QWORD *)v25 + 6) = *((_QWORD *)v26 + 6);
  swift_release(v29);
  *((_QWORD *)v25 + 7) = *((_QWORD *)v26 + 7);
  v30 = a3[13];
  a1[a3[12]] = a2[a3[12]];
  a1[v30] = a2[v30];
  v31 = a3[14];
  v32 = &a1[v31];
  v33 = &a2[v31];
  v34 = type metadata accessor for WidgetRenderingMode(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v34 - 8) + 40))(v32, v33, v34);
  v35 = a3[15];
  v36 = &a1[v35];
  v37 = &a2[v35];
  v38 = *(_QWORD *)v37;
  LOBYTE(v37) = v37[8];
  v39 = *(_QWORD *)v36;
  *(_QWORD *)v36 = v38;
  v36[8] = (_BYTE)v37;
  swift_release(v39);
  return a1;
}

uint64_t sub_10005D7C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005D7D0);
}

uint64_t sub_10005D7D0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v6 = type metadata accessor for TimeZone(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v12 = sub_1000041D8(&qword_100084810);
    v7 = *(_QWORD *)(v12 - 8);
    if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    {
      v8 = v12;
      v9 = a3[8];
    }
    else
    {
      v8 = type metadata accessor for WidgetRenderingMode(0);
      v7 = *(_QWORD *)(v8 - 8);
      v9 = a3[14];
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = *(_QWORD *)(a1 + a3[6] + 24);
  if (v10 >= 0xFFFFFFFF)
    LODWORD(v10) = -1;
  return (v10 + 1);
}

uint64_t sub_10005D8A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005D8AC);
}

uint64_t sub_10005D8AC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = type metadata accessor for TimeZone(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[5];
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + a4[6] + 24) = (a2 - 1);
      return result;
    }
    v12 = sub_1000041D8(&qword_100084810);
    v9 = *(_QWORD *)(v12 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v12;
      v11 = a4[8];
    }
    else
    {
      v10 = type metadata accessor for WidgetRenderingMode(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = a4[14];
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

void sub_10005D978(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[12];

  v8[0] = &unk_10006DA48;
  v2 = type metadata accessor for TimeZone(319);
  if (v3 <= 0x3F)
  {
    v8[1] = *(_QWORD *)(v2 - 8) + 64;
    v8[2] = "(";
    v8[3] = &unk_10006DA48;
    sub_10005A51C(319, (unint64_t *)&qword_100084CF0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    if (v5 <= 0x3F)
    {
      v8[4] = *(_QWORD *)(v4 - 8) + 64;
      v8[5] = &unk_10006DA48;
      v8[6] = &unk_10006DA48;
      v8[7] = "@";
      v8[8] = &unk_10006DA48;
      v8[9] = &unk_10006DA48;
      v6 = type metadata accessor for WidgetRenderingMode(319);
      if (v7 <= 0x3F)
      {
        v8[10] = *(_QWORD *)(v6 - 8) + 64;
        v8[11] = "\t";
        swift_initStructMetadata(a1, 256, 12, v8, a1 + 16);
      }
    }
  }
}

uint64_t destroy for Clock.ClockHand(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 8));
}

uint64_t initializeWithCopy for Clock.ClockHand(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain(v3);
  return a1;
}

uint64_t assignWithCopy for Clock.ClockHand(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_retain(v4);
  swift_release(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for Clock.ClockHand(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release(v4);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

uint64_t _s16WorldClockWidget24SmallMultiSizeDimentionsVwet_0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_10005DBD4(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Clock.ClockHand()
{
  return &type metadata for Clock.ClockHand;
}

__n128 initializeBufferWithCopyOfBuffer for Clock.ClockHand.ClockHandConnector(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for Clock.ClockHand.ClockHandConnector(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Clock.ClockHand.ClockHandConnector(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Clock.ClockHand.ClockHandConnector()
{
  return &type metadata for Clock.ClockHand.ClockHandConnector;
}

uint64_t initializeBufferWithCopyOfBuffer for Clock.ClockHand.ClockHandShape(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

__n128 initializeWithCopy for Clock.ClockHand.ClockHandShape(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for Clock.ClockHand.ClockHandShape(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Clock.ClockHand.ClockHandShape(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for Clock.ClockHand.ClockHandShape()
{
  return &type metadata for Clock.ClockHand.ClockHandShape;
}

uint64_t destroy for ClockUIConfig(_QWORD *a1)
{
  swift_release(a1[3]);
  swift_release(a1[4]);
  return swift_release(a1[6]);
}

uint64_t initializeWithCopy for ClockUIConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v5;
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v6);
  return a1;
}

uint64_t assignWithCopy for ClockUIConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  swift_retain(v4);
  swift_release(v5);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  swift_retain(v6);
  swift_release(v7);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v8;
  swift_retain(v8);
  swift_release(v9);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for ClockUIConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release(*(_QWORD *)(a1 + 24));
  v4 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release(v4);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_release(v5);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for ClockUIConfig(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ClockUIConfig(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ClockUIConfig()
{
  return &type metadata for ClockUIConfig;
}

uint64_t destroy for ClockUIConfig.RingConfig(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + 24));
  return swift_release(*(_QWORD *)(a1 + 32));
}

uint64_t initializeWithCopy for ClockUIConfig.RingConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

_QWORD *assignWithCopy for ClockUIConfig.RingConfig(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v4 = a2[3];
  v5 = a1[3];
  a1[3] = v4;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[4];
  v7 = a1[4];
  a1[4] = v6;
  swift_retain(v6);
  swift_release(v7);
  return a1;
}

__n128 initializeWithTake for ClockUIConfig.RingConfig(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ClockUIConfig.RingConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release(*(_QWORD *)(a1 + 24));
  v4 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ClockUIConfig.RingConfig(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ClockUIConfig.RingConfig(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ClockUIConfig.RingConfig()
{
  return &type metadata for ClockUIConfig.RingConfig;
}

uint64_t *sub_10005E19C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_1000041D8(&qword_100085E48);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = *(int *)(a3 + 20);
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
  }
  return a1;
}

uint64_t sub_10005E294(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  v4 = sub_1000041D8(&qword_100085E48);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (char *)a1 + *(int *)(a2 + 20);
  v7 = type metadata accessor for ContentSizeCategory(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

uint64_t *sub_10005E31C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v6 = sub_1000041D8(&qword_100085E48);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = *(int *)(a3 + 20);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for ContentSizeCategory(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  return a1;
}

uint64_t *sub_10005E3E8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  if (a1 != a2)
  {
    sub_1000106A4((uint64_t)a1, &qword_100085E48);
    v6 = sub_1000041D8(&qword_100085E48);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = *(int *)(a3 + 20);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for ContentSizeCategory(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  return a1;
}

char *sub_10005E4CC(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = sub_1000041D8(&qword_100085E48);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for ContentSizeCategory(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  return a1;
}

char *sub_10005E594(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  if (a1 != a2)
  {
    sub_1000106A4((uint64_t)a1, &qword_100085E48);
    v6 = sub_1000041D8(&qword_100085E48);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for ContentSizeCategory(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_10005E674(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005E680);
}

uint64_t sub_10005E680(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = sub_1000041D8(&qword_100085AD0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for ContentSizeCategory(0);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_10005E6F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005E704);
}

uint64_t sub_10005E704(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = sub_1000041D8(&qword_100085AD0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for ContentSizeCategory(0);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_10005E784(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  sub_10005A51C(319, (unint64_t *)&unk_100086818, (uint64_t (*)(uint64_t))&type metadata accessor for ContentSizeCategory, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for ContentSizeCategory(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v6, a1 + 16);
    }
  }
}

ValueMetadata *type metadata accessor for WidgetImages()
{
  return &type metadata for WidgetImages;
}

ValueMetadata *type metadata accessor for WidgetColors()
{
  return &type metadata for WidgetColors;
}

ValueMetadata *type metadata accessor for WidgetColors.Night()
{
  return &type metadata for WidgetColors.Night;
}

ValueMetadata *type metadata accessor for WidgetColors.Day()
{
  return &type metadata for WidgetColors.Day;
}

ValueMetadata *type metadata accessor for WidgetPadding()
{
  return &type metadata for WidgetPadding;
}

uint64_t getEnumTagSinglePayload for FaceType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FaceType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_10005E94C + 4 * byte_10006CAEF[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10005E980 + 4 * byte_10006CAEA[v4]))();
}

uint64_t sub_10005E980(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005E988(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10005E990);
  return result;
}

uint64_t sub_10005E99C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10005E9A4);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_10005E9A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005E9B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FaceType()
{
  return &type metadata for FaceType;
}

uint64_t sub_10005E9E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005E9F0);
}

uint64_t sub_10005E9F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005EA00);
}

void sub_10005EA04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10005A998(a1, a2, a3, (uint64_t)&unk_10006DA48, (uint64_t)"\t");
}

uint64_t sub_10005EA18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_BYTE *)(a2 + 16);
  sub_10002571C(v6, v7);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = v7;
  sub_100025728(v8, v9);
  if (a1 != a2)
  {
    v10 = *(int *)(a3 + 24);
    v11 = (uint64_t *)(a1 + v10);
    v12 = (uint64_t *)(a2 + v10);
    sub_1000106A4(a1 + v10, &qword_100085E28);
    v13 = sub_1000041D8(&qword_100085E28);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
      v15 = 1;
    }
    else
    {
      v16 = *v12;
      *v11 = *v12;
      swift_retain(v16);
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v13, v15);
  }
  return a1;
}

uint64_t sub_10005EB0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_BYTE *)(a2 + 16);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = v7;
  sub_100025728(v8, v9);
  if (a1 != a2)
  {
    v10 = *(int *)(a3 + 24);
    v11 = (void *)(a1 + v10);
    v12 = (const void *)(a2 + v10);
    sub_1000106A4(a1 + v10, &qword_100085E28);
    v13 = sub_1000041D8(&qword_100085E28);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v11, v12, v14);
      swift_storeEnumTagMultiPayload(v11, v13, 1);
    }
    else
    {
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10005EBF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005EBFC);
}

uint64_t sub_10005EC00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005EC0C);
}

uint64_t sub_10005EC10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005EC1C);
}

uint64_t sub_10005EC20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005EC2C);
}

_BYTE *sub_10005EC30(_BYTE *a1, uint64_t *a2, uint64_t a3)
{
  _BYTE *v4;
  int v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = (_BYTE *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v17);
  }
  else
  {
    *a1 = *(_BYTE *)a2;
    v7 = a2[1];
    v8 = *((_BYTE *)a2 + 16);
    sub_10002571C(v7, v8);
    *((_QWORD *)v4 + 1) = v7;
    v4[16] = v8;
    v9 = *(int *)(a3 + 24);
    v10 = (uint64_t *)&v4[v9];
    v11 = (uint64_t *)((char *)a2 + v9);
    v12 = sub_1000041D8(&qword_100085E28);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v13 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v10, v11, v13);
      v14 = v10;
      v15 = v12;
      v16 = 1;
    }
    else
    {
      v18 = *v11;
      *v10 = *v11;
      swift_retain(v18);
      v14 = v10;
      v15 = v12;
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(v14, v15, v16);
  }
  return v4;
}

uint64_t sub_10005ED34(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  sub_100025728(*(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  v4 = (_QWORD *)(a1 + *(int *)(a2 + 24));
  v5 = sub_1000041D8(&qword_100085E28);
  if (swift_getEnumCaseMultiPayload(v4, v5) != 1)
    return swift_release(*v4);
  v6 = type metadata accessor for WidgetRenderingMode(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
}

uint64_t sub_10005EDB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_BYTE *)(a2 + 16);
  sub_10002571C(v6, v7);
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = v7;
  v8 = *(int *)(a3 + 24);
  v9 = (uint64_t *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v11 = sub_1000041D8(&qword_100085E28);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
    v13 = 1;
  }
  else
  {
    v14 = *v10;
    *v9 = *v10;
    swift_retain(v14);
    v13 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v11, v13);
  return a1;
}

uint64_t sub_10005EE80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(int *)(a3 + 24);
  v5 = (void *)(a1 + v4);
  v6 = (const void *)(a2 + v4);
  v7 = sub_1000041D8(&qword_100085E28);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v5, v6, v8);
    swift_storeEnumTagMultiPayload(v5, v7, 1);
  }
  else
  {
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  return a1;
}

uint64_t sub_10005EF38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005EF44);
}

uint64_t sub_10005EF48(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  uint64_t v10;

  if ((_DWORD)a2 == 254)
  {
    v4 = *a1;
    v5 = v4 >= 2;
    v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5)
      return (v6 + 1);
    else
      return 0;
  }
  else
  {
    v10 = sub_1000041D8(&qword_100085B10);
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v10);
  }
}

uint64_t sub_10005EFC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005EFD4);
}

_BYTE *sub_10005EFD8(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *result = a2 + 1;
  }
  else
  {
    v7 = sub_1000041D8(&qword_100085B10);
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

_QWORD *sub_10005F04C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v13);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = type metadata accessor for WorldClockEntry(0);
    v9 = *(int *)(v8 + 20);
    v10 = *(_QWORD *)((char *)a2 + v9);
    *(_QWORD *)((char *)a1 + v9) = v10;
    *((_BYTE *)a1 + *(int *)(v8 + 24)) = *((_BYTE *)a2 + *(int *)(v8 + 24));
    v11 = *(int *)(a3 + 20);
    v12 = *(_QWORD *)((char *)a2 + v11);
    *(_QWORD *)((char *)a1 + v11) = v12;
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v12);
  }
  return a1;
}

uint64_t sub_10005F104(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = type metadata accessor for WorldClockEntry(0);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v5 + 20)));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20)));
}

uint64_t sub_10005F15C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = type metadata accessor for WorldClockEntry(0);
  v8 = *(int *)(v7 + 20);
  v9 = *(_QWORD *)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v9;
  *(_BYTE *)(a1 + *(int *)(v7 + 24)) = *(_BYTE *)(a2 + *(int *)(v7 + 24));
  v10 = *(int *)(a3 + 20);
  v11 = *(_QWORD *)(a2 + v10);
  *(_QWORD *)(a1 + v10) = v11;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v11);
  return a1;
}

uint64_t sub_10005F1E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = type metadata accessor for WorldClockEntry(0);
  v8 = *(int *)(v7 + 20);
  v9 = *(_QWORD *)(a2 + v8);
  v10 = *(_QWORD *)(a1 + v8);
  *(_QWORD *)(a1 + v8) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  *(_BYTE *)(a1 + *(int *)(v7 + 24)) = *(_BYTE *)(a2 + *(int *)(v7 + 24));
  v11 = *(int *)(a3 + 20);
  v12 = *(_QWORD *)(a2 + v11);
  v13 = *(_QWORD *)(a1 + v11);
  *(_QWORD *)(a1 + v11) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

uint64_t sub_10005F290(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = type metadata accessor for WorldClockEntry(0);
  *(_QWORD *)(a1 + *(int *)(v7 + 20)) = *(_QWORD *)(a2 + *(int *)(v7 + 20));
  *(_BYTE *)(a1 + *(int *)(v7 + 24)) = *(_BYTE *)(a2 + *(int *)(v7 + 24));
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10005F30C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = type metadata accessor for WorldClockEntry(0);
  v8 = *(int *)(v7 + 20);
  v9 = *(_QWORD *)(a1 + v8);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + *(int *)(v7 + 24)) = *(_BYTE *)(a2 + *(int *)(v7 + 24));
  v10 = *(int *)(a3 + 20);
  v11 = *(_QWORD *)(a1 + v10);
  *(_QWORD *)(a1 + v10) = *(_QWORD *)(a2 + v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t sub_10005F39C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005F3A8);
}

uint64_t sub_10005F3A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for WorldClockEntry(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10005F424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005F430);
}

uint64_t sub_10005F430(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for WorldClockEntry(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_10005F4A8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for WorldClockEntry(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10005F534(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005F540);
}

uint64_t sub_10005F540(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100062908(a1, a2, a3, type metadata accessor for AlarmEntry);
}

uint64_t sub_10005F54C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005F558);
}

uint64_t sub_10005F558(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10006295C(a1, a2, a3, a4, type metadata accessor for AlarmEntry);
}

uint64_t sub_10005F564(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000629BC(a1, a2, a3, type metadata accessor for AlarmEntry);
}

uint64_t sub_10005F570(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005F57C);
}

uint64_t sub_10005F57C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100062908(a1, a2, a3, type metadata accessor for AlarmEntry);
}

uint64_t sub_10005F588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005F594);
}

uint64_t sub_10005F594(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10006295C(a1, a2, a3, a4, type metadata accessor for AlarmEntry);
}

uint64_t type metadata accessor for AlarmComplicationRectangularView(uint64_t a1)
{
  return sub_10000DEFC(a1, (uint64_t *)&unk_10008BC30, (uint64_t)&nominal type descriptor for AlarmComplicationRectangularView);
}

char *sub_10005F5B4(char *a1, char *a2)
{
  uint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  uint64_t v10;
  char *v11;
  char *v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;

  v4 = type metadata accessor for AlarmEntry(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    v6 = (int *)v4;
    v7 = type metadata accessor for Date(0);
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v9(a1, a2, v7);
    v10 = v6[5];
    v11 = &a1[v10];
    v12 = &a2[v10];
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
    if (v13(&a2[v10], 1, v7))
    {
      v14 = sub_1000041D8(&qword_100084810);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v9(v11, v12, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v11, 0, 1, v7);
    }
    v16 = v6[6];
    v17 = &a1[v16];
    v18 = &a2[v16];
    if (v13(&a2[v16], 1, v7))
    {
      v19 = sub_1000041D8(&qword_100084810);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      v9(v17, v18, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v17, 0, 1, v7);
    }
    a1[v6[7]] = a2[v6[7]];
    a1[v6[8]] = a2[v6[8]];
    v20 = v6[9];
    v21 = &a1[v20];
    v22 = &a2[v20];
    v23 = *((_QWORD *)v22 + 1);
    *v21 = *(_QWORD *)v22;
    v21[1] = v23;
    v24 = v6[10];
    v25 = &a1[v24];
    v26 = &a2[v24];
    v27 = *((_QWORD *)v26 + 1);
    *v25 = *(_QWORD *)v26;
    v25[1] = v27;
    v28 = v6[11];
    v29 = &a1[v28];
    v30 = &a2[v28];
    v31 = *((_QWORD *)v30 + 1);
    *v29 = *(_QWORD *)v30;
    v29[1] = v31;
    v32 = v6[12];
    v33 = &a1[v32];
    v34 = &a2[v32];
    v35 = *((_QWORD *)v34 + 1);
    *v33 = *(_QWORD *)v34;
    v33[1] = v35;
    a1[v6[13]] = a2[v6[13]];
    a1[v6[14]] = a2[v6[14]];
    v36 = v6[15];
    v37 = &a1[v36];
    v38 = &a2[v36];
    v39 = *((_QWORD *)v38 + 1);
    *v37 = *(_QWORD *)v38;
    v37[1] = v39;
    a1[v6[16]] = a2[v6[16]];
    a1[v6[17]] = a2[v6[17]];
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRetain(v35);
    swift_bridgeObjectRetain(v39);
  }
  return a1;
}

uint64_t sub_10005F800(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  int *v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;

  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v4(a1, v2);
  v5 = (int *)type metadata accessor for AlarmEntry(0);
  v6 = a1 + v5[5];
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (!v7(v6, 1, v2))
    v4(v6, v2);
  v8 = a1 + v5[6];
  if (!v7(v8, 1, v2))
    v4(v8, v2);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v5[9] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v5[10] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v5[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v5[12] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + v5[15] + 8));
}

char *sub_10005F8F8(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(void *, const void *, uint64_t);
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  unsigned int (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(void (**)(void *, const void *, uint64_t))(v5 + 16);
  v6(a1, a2, v4);
  v7 = (int *)type metadata accessor for AlarmEntry(0);
  v8 = v7[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (v11(&a2[v8], 1, v4))
  {
    v12 = sub_1000041D8(&qword_100084810);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v6(v9, v10, v4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v9, 0, 1, v4);
  }
  v13 = v7[6];
  v14 = &a1[v13];
  v15 = &a2[v13];
  if (v11(&a2[v13], 1, v4))
  {
    v16 = sub_1000041D8(&qword_100084810);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v6(v14, v15, v4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v14, 0, 1, v4);
  }
  a1[v7[7]] = a2[v7[7]];
  a1[v7[8]] = a2[v7[8]];
  v17 = v7[9];
  v18 = &a1[v17];
  v19 = &a2[v17];
  v20 = *((_QWORD *)v19 + 1);
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *((_QWORD *)v18 + 1) = v20;
  v21 = v7[10];
  v22 = &a1[v21];
  v23 = &a2[v21];
  v24 = *((_QWORD *)v23 + 1);
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *((_QWORD *)v22 + 1) = v24;
  v25 = v7[11];
  v26 = &a1[v25];
  v27 = &a2[v25];
  v28 = *((_QWORD *)v27 + 1);
  *(_QWORD *)v26 = *(_QWORD *)v27;
  *((_QWORD *)v26 + 1) = v28;
  v29 = v7[12];
  v30 = &a1[v29];
  v31 = &a2[v29];
  v32 = *((_QWORD *)v31 + 1);
  *(_QWORD *)v30 = *(_QWORD *)v31;
  *((_QWORD *)v30 + 1) = v32;
  a1[v7[13]] = a2[v7[13]];
  a1[v7[14]] = a2[v7[14]];
  v33 = v7[15];
  v34 = &a1[v33];
  v35 = &a2[v33];
  v36 = *((_QWORD *)v35 + 1);
  *(_QWORD *)v34 = *(_QWORD *)v35;
  *((_QWORD *)v34 + 1) = v36;
  a1[v7[16]] = a2[v7[16]];
  a1[v7[17]] = a2[v7[17]];
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v36);
  return a1;
}

char *sub_10005FB18(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(void *, const void *, uint64_t);
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t (*v11)(const void *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(void (**)(void *, const void *, uint64_t))(v5 + 24);
  v6(a1, a2, v4);
  v7 = (int *)type metadata accessor for AlarmEntry(0);
  v8 = v7[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v5 + 48);
  v12 = v11(&a1[v8], 1, v4);
  v13 = v11(v10, 1, v4);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v9, v10, v4);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v9, 0, 1, v4);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
LABEL_6:
    v14 = sub_1000041D8(&qword_100084810);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  v6(v9, v10, v4);
LABEL_7:
  v15 = v7[6];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = v11(&a1[v15], 1, v4);
  v19 = v11(v17, 1, v4);
  if (!v18)
  {
    if (!v19)
    {
      v6(v16, v17, v4);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v16, v4);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    v20 = sub_1000041D8(&qword_100084810);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v16, v17, v4);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v16, 0, 1, v4);
LABEL_13:
  a1[v7[7]] = a2[v7[7]];
  a1[v7[8]] = a2[v7[8]];
  v21 = v7[9];
  v22 = &a1[v21];
  v23 = &a2[v21];
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v24 = *((_QWORD *)v23 + 1);
  v25 = *((_QWORD *)v22 + 1);
  *((_QWORD *)v22 + 1) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  v26 = v7[10];
  v27 = &a1[v26];
  v28 = &a2[v26];
  *(_QWORD *)v27 = *(_QWORD *)v28;
  v29 = *((_QWORD *)v28 + 1);
  v30 = *((_QWORD *)v27 + 1);
  *((_QWORD *)v27 + 1) = v29;
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRelease(v30);
  v31 = v7[11];
  v32 = &a1[v31];
  v33 = &a2[v31];
  *(_QWORD *)v32 = *(_QWORD *)v33;
  v34 = *((_QWORD *)v33 + 1);
  v35 = *((_QWORD *)v32 + 1);
  *((_QWORD *)v32 + 1) = v34;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRelease(v35);
  v36 = v7[12];
  v37 = &a1[v36];
  v38 = &a2[v36];
  *(_QWORD *)v37 = *(_QWORD *)v38;
  v39 = *((_QWORD *)v38 + 1);
  v40 = *((_QWORD *)v37 + 1);
  *((_QWORD *)v37 + 1) = v39;
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRelease(v40);
  a1[v7[13]] = a2[v7[13]];
  a1[v7[14]] = a2[v7[14]];
  v41 = v7[15];
  v42 = &a1[v41];
  v43 = &a2[v41];
  *(_QWORD *)v42 = *(_QWORD *)v43;
  v44 = *((_QWORD *)v43 + 1);
  v45 = *((_QWORD *)v42 + 1);
  *((_QWORD *)v42 + 1) = v44;
  swift_bridgeObjectRetain(v44);
  swift_bridgeObjectRelease(v45);
  a1[v7[16]] = a2[v7[16]];
  a1[v7[17]] = a2[v7[17]];
  return a1;
}

char *sub_10005FE14(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(void *, const void *, uint64_t);
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  unsigned int (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(void (**)(void *, const void *, uint64_t))(v5 + 32);
  v6(a1, a2, v4);
  v7 = (int *)type metadata accessor for AlarmEntry(0);
  v8 = v7[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (v11(&a2[v8], 1, v4))
  {
    v12 = sub_1000041D8(&qword_100084810);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v6(v9, v10, v4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v9, 0, 1, v4);
  }
  v13 = v7[6];
  v14 = &a1[v13];
  v15 = &a2[v13];
  if (v11(&a2[v13], 1, v4))
  {
    v16 = sub_1000041D8(&qword_100084810);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v6(v14, v15, v4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v14, 0, 1, v4);
  }
  a1[v7[7]] = a2[v7[7]];
  a1[v7[8]] = a2[v7[8]];
  *(_OWORD *)&a1[v7[9]] = *(_OWORD *)&a2[v7[9]];
  *(_OWORD *)&a1[v7[10]] = *(_OWORD *)&a2[v7[10]];
  *(_OWORD *)&a1[v7[11]] = *(_OWORD *)&a2[v7[11]];
  *(_OWORD *)&a1[v7[12]] = *(_OWORD *)&a2[v7[12]];
  a1[v7[13]] = a2[v7[13]];
  a1[v7[14]] = a2[v7[14]];
  *(_OWORD *)&a1[v7[15]] = *(_OWORD *)&a2[v7[15]];
  a1[v7[16]] = a2[v7[16]];
  a1[v7[17]] = a2[v7[17]];
  return a1;
}

char *sub_10005FFE8(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(void *, const void *, uint64_t);
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t (*v11)(const void *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(void (**)(void *, const void *, uint64_t))(v5 + 40);
  v6(a1, a2, v4);
  v7 = (int *)type metadata accessor for AlarmEntry(0);
  v8 = v7[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v5 + 48);
  v12 = v11(&a1[v8], 1, v4);
  v13 = v11(v10, 1, v4);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v9, v10, v4);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v9, 0, 1, v4);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
LABEL_6:
    v14 = sub_1000041D8(&qword_100084810);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  v6(v9, v10, v4);
LABEL_7:
  v15 = v7[6];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = v11(&a1[v15], 1, v4);
  v19 = v11(v17, 1, v4);
  if (!v18)
  {
    if (!v19)
    {
      v6(v16, v17, v4);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v16, v4);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    v20 = sub_1000041D8(&qword_100084810);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v16, v17, v4);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v16, 0, 1, v4);
LABEL_13:
  a1[v7[7]] = a2[v7[7]];
  a1[v7[8]] = a2[v7[8]];
  v21 = v7[9];
  v22 = &a1[v21];
  v23 = (uint64_t *)&a2[v21];
  v25 = *v23;
  v24 = v23[1];
  v26 = *((_QWORD *)v22 + 1);
  *(_QWORD *)v22 = v25;
  *((_QWORD *)v22 + 1) = v24;
  swift_bridgeObjectRelease(v26);
  v27 = v7[10];
  v28 = &a1[v27];
  v29 = (uint64_t *)&a2[v27];
  v31 = *v29;
  v30 = v29[1];
  v32 = *((_QWORD *)v28 + 1);
  *(_QWORD *)v28 = v31;
  *((_QWORD *)v28 + 1) = v30;
  swift_bridgeObjectRelease(v32);
  v33 = v7[11];
  v34 = &a1[v33];
  v35 = (uint64_t *)&a2[v33];
  v37 = *v35;
  v36 = v35[1];
  v38 = *((_QWORD *)v34 + 1);
  *(_QWORD *)v34 = v37;
  *((_QWORD *)v34 + 1) = v36;
  swift_bridgeObjectRelease(v38);
  v39 = v7[12];
  v40 = &a1[v39];
  v41 = (uint64_t *)&a2[v39];
  v43 = *v41;
  v42 = v41[1];
  v44 = *((_QWORD *)v40 + 1);
  *(_QWORD *)v40 = v43;
  *((_QWORD *)v40 + 1) = v42;
  swift_bridgeObjectRelease(v44);
  a1[v7[13]] = a2[v7[13]];
  a1[v7[14]] = a2[v7[14]];
  v45 = v7[15];
  v46 = &a1[v45];
  v47 = (uint64_t *)&a2[v45];
  v49 = *v47;
  v48 = v47[1];
  v50 = *((_QWORD *)v46 + 1);
  *(_QWORD *)v46 = v49;
  *((_QWORD *)v46 + 1) = v48;
  swift_bridgeObjectRelease(v50);
  a1[v7[16]] = a2[v7[16]];
  a1[v7[17]] = a2[v7[17]];
  return a1;
}

uint64_t sub_100060294(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000602A0);
}

uint64_t sub_1000602A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100062908(a1, a2, a3, type metadata accessor for AlarmEntry);
}

uint64_t sub_1000602AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000602B8);
}

uint64_t sub_1000602B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10006295C(a1, a2, a3, a4, type metadata accessor for AlarmEntry);
}

uint64_t type metadata accessor for AlarmInlineComplicationView(uint64_t a1)
{
  return sub_10000DEFC(a1, (uint64_t *)&unk_10008BC40, (uint64_t)&nominal type descriptor for AlarmInlineComplicationView);
}

_QWORD *sub_1000602D8(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v17);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = type metadata accessor for WorldClockEntry(0);
    v9 = *(int *)(v8 + 20);
    v10 = *(_QWORD *)((char *)a2 + v9);
    *(_QWORD *)((char *)a1 + v9) = v10;
    *((_BYTE *)a1 + *(int *)(v8 + 24)) = *((_BYTE *)a2 + *(int *)(v8 + 24));
    v11 = a3[5];
    v12 = (_QWORD *)((char *)a1 + v11);
    v13 = (_QWORD *)((char *)a2 + v11);
    swift_bridgeObjectRetain(v10);
    v14 = sub_1000041D8(&qword_100085E48);
    if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
    {
      v15 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v12, v13, v15);
      v16 = 1;
    }
    else
    {
      v18 = *v13;
      *v12 = *v13;
      swift_retain(v18);
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(v12, v14, v16);
    v19 = a3[6];
    v20 = *(_OWORD *)((char *)a2 + v19 + 24);
    *(_OWORD *)((char *)a1 + v19 + 24) = v20;
    (**(void (***)(void))(v20 - 8))();
    v21 = a3[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    *((_BYTE *)a1 + v21) = *((_BYTE *)a2 + v21);
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  }
  return a1;
}

uint64_t sub_10006043C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = type metadata accessor for WorldClockEntry(0);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v5 + 20)));
  v6 = (_QWORD *)(a1 + *(int *)(a2 + 20));
  v7 = sub_1000041D8(&qword_100085E48);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  return sub_10001E0B0((_QWORD *)(a1 + *(int *)(a2 + 24)));
}

uint64_t sub_1000604F0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = type metadata accessor for WorldClockEntry(0);
  v8 = *(int *)(v7 + 20);
  v9 = *(_QWORD *)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v9;
  *(_BYTE *)(a1 + *(int *)(v7 + 24)) = *(_BYTE *)(a2 + *(int *)(v7 + 24));
  v10 = a3[5];
  v11 = (uint64_t *)(a1 + v10);
  v12 = (uint64_t *)(a2 + v10);
  swift_bridgeObjectRetain(v9);
  v13 = sub_1000041D8(&qword_100085E48);
  if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
  {
    v14 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
    v15 = 1;
  }
  else
  {
    v16 = *v12;
    *v11 = *v12;
    swift_retain(v16);
    v15 = 0;
  }
  swift_storeEnumTagMultiPayload(v11, v13, v15);
  v17 = a3[6];
  v18 = *(_OWORD *)(a2 + v17 + 24);
  *(_OWORD *)(a1 + v17 + 24) = v18;
  (**(void (***)(void))(v18 - 8))();
  v19 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v19) = *(_BYTE *)(a2 + v19);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_100060628(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = type metadata accessor for WorldClockEntry(0);
  v8 = *(int *)(v7 + 20);
  v9 = *(_QWORD *)(a2 + v8);
  v10 = *(_QWORD *)(a1 + v8);
  *(_QWORD *)(a1 + v8) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  *(_BYTE *)(a1 + *(int *)(v7 + 24)) = *(_BYTE *)(a2 + *(int *)(v7 + 24));
  if (a1 != a2)
  {
    v11 = a3[5];
    v12 = (uint64_t *)(a1 + v11);
    v13 = (uint64_t *)(a2 + v11);
    sub_1000106A4(a1 + v11, &qword_100085E48);
    v14 = sub_1000041D8(&qword_100085E48);
    if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
    {
      v15 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v12, v13, v15);
      v16 = 1;
    }
    else
    {
      v17 = *v13;
      *v12 = *v13;
      swift_retain(v17);
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(v12, v14, v16);
  }
  sub_100057180((_QWORD *)(a1 + a3[6]), (_QWORD *)(a2 + a3[6]));
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_100060774(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = type metadata accessor for WorldClockEntry(0);
  *(_QWORD *)(a1 + *(int *)(v7 + 20)) = *(_QWORD *)(a2 + *(int *)(v7 + 20));
  *(_BYTE *)(a1 + *(int *)(v7 + 24)) = *(_BYTE *)(a2 + *(int *)(v7 + 24));
  v8 = a3[5];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = sub_1000041D8(&qword_100085E48);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  v13 = a3[6];
  v14 = a3[7];
  v15 = a1 + v13;
  v16 = (__int128 *)(a2 + v13);
  v17 = *v16;
  v18 = v16[1];
  *(_QWORD *)(v15 + 32) = *((_QWORD *)v16 + 4);
  *(_OWORD *)v15 = v17;
  *(_OWORD *)(v15 + 16) = v18;
  *(_BYTE *)(a1 + v14) = *(_BYTE *)(a2 + v14);
  v19 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v19) = *(_BYTE *)(a2 + v19);
  return a1;
}

uint64_t sub_10006089C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = type metadata accessor for WorldClockEntry(0);
  v8 = *(int *)(v7 + 20);
  v9 = *(_QWORD *)(a1 + v8);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + *(int *)(v7 + 24)) = *(_BYTE *)(a2 + *(int *)(v7 + 24));
  if (a1 != a2)
  {
    v10 = a3[5];
    v11 = (void *)(a1 + v10);
    v12 = (const void *)(a2 + v10);
    sub_1000106A4(a1 + v10, &qword_100085E48);
    v13 = sub_1000041D8(&qword_100085E48);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v11, v12, v14);
      swift_storeEnumTagMultiPayload(v11, v13, 1);
    }
    else
    {
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
  }
  v15 = a3[6];
  v16 = a1 + v15;
  v17 = a2 + v15;
  sub_10001E0B0((_QWORD *)(a1 + v15));
  v18 = *(_OWORD *)(v17 + 16);
  *(_OWORD *)v16 = *(_OWORD *)v17;
  *(_OWORD *)(v16 + 16) = v18;
  *(_QWORD *)(v16 + 32) = *(_QWORD *)(v17 + 32);
  v19 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v19) = *(_BYTE *)(a2 + v19);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_1000609F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100060A00);
}

uint64_t sub_100060A00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = type metadata accessor for WorldClockEntry(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_1000041D8(&qword_100085AD0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 24);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_100060AB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100060ABC);
}

uint64_t sub_100060ABC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for WorldClockEntry(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = sub_1000041D8(&qword_100085AD0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 24) = (a2 - 1);
  return result;
}

void sub_100060B68(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[6];

  v2 = type metadata accessor for WorldClockEntry(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10005A51C(319, (unint64_t *)&unk_100086818, (uint64_t (*)(uint64_t))&type metadata accessor for ContentSizeCategory, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = "(";
      v6[3] = &unk_10006DA48;
      v6[4] = &unk_10006DA48;
      v6[5] = &unk_10006DA48;
      swift_initStructMetadata(a1, 256, 6, v6, a1 + 16);
    }
  }
}

_QWORD *sub_100060C1C(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  uint64_t v18;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v18);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = type metadata accessor for WorldClockEntry(0);
    v9 = *(int *)(v8 + 20);
    v10 = *(_QWORD *)((char *)a2 + v9);
    *(_QWORD *)((char *)a1 + v9) = v10;
    *((_BYTE *)a1 + *(int *)(v8 + 24)) = *((_BYTE *)a2 + *(int *)(v8 + 24));
    v11 = a3[5];
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = *(_OWORD *)((char *)a2 + v11 + 24);
    *(_OWORD *)((char *)a1 + v11 + 24) = v14;
    v15 = v14;
    v16 = **(void (***)(char *, char *, uint64_t))(v14 - 8);
    swift_bridgeObjectRetain(v10);
    v16(v12, v13, v15);
    v17 = a3[7];
    *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
    *((_BYTE *)a1 + v17) = *((_BYTE *)a2 + v17);
    *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  }
  return a1;
}

uint64_t sub_100060D20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = type metadata accessor for WorldClockEntry(0);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v5 + 20)));
  return sub_10001E0B0((_QWORD *)(a1 + *(int *)(a2 + 20)));
}

uint64_t sub_100060D7C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = type metadata accessor for WorldClockEntry(0);
  v8 = *(int *)(v7 + 20);
  v9 = *(_QWORD *)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v9;
  *(_BYTE *)(a1 + *(int *)(v7 + 24)) = *(_BYTE *)(a2 + *(int *)(v7 + 24));
  v10 = a3[5];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = *(_OWORD *)(a2 + v10 + 24);
  *(_OWORD *)(a1 + v10 + 24) = v13;
  v14 = v13;
  v15 = **(void (***)(uint64_t, uint64_t, uint64_t))(v13 - 8);
  swift_bridgeObjectRetain(v9);
  v15(v11, v12, v14);
  v16 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + v16) = *(_BYTE *)(a2 + v16);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_100060E54(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = type metadata accessor for WorldClockEntry(0);
  v8 = *(int *)(v7 + 20);
  v9 = *(_QWORD *)(a2 + v8);
  v10 = *(_QWORD *)(a1 + v8);
  *(_QWORD *)(a1 + v8) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  *(_BYTE *)(a1 + *(int *)(v7 + 24)) = *(_BYTE *)(a2 + *(int *)(v7 + 24));
  sub_100057180((_QWORD *)(a1 + a3[5]), (_QWORD *)(a2 + a3[5]));
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_100060F14(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = type metadata accessor for WorldClockEntry(0);
  *(_QWORD *)(a1 + *(int *)(v7 + 20)) = *(_QWORD *)(a2 + *(int *)(v7 + 20));
  *(_BYTE *)(a1 + *(int *)(v7 + 24)) = *(_BYTE *)(a2 + *(int *)(v7 + 24));
  v8 = a3[5];
  v9 = a3[6];
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_QWORD *)(v10 + 32) = *(_QWORD *)(v11 + 32);
  v12 = *(_OWORD *)(v11 + 16);
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *(_OWORD *)(v10 + 16) = v12;
  *(_BYTE *)(a1 + v9) = *(_BYTE *)(a2 + v9);
  v13 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  return a1;
}

uint64_t sub_100060FBC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = type metadata accessor for WorldClockEntry(0);
  v8 = *(int *)(v7 + 20);
  v9 = *(_QWORD *)(a1 + v8);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + *(int *)(v7 + 24)) = *(_BYTE *)(a2 + *(int *)(v7 + 24));
  v10 = a3[5];
  v11 = a1 + v10;
  v12 = a2 + v10;
  sub_10001E0B0((_QWORD *)(a1 + v10));
  v13 = *(_OWORD *)(v12 + 16);
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *(_OWORD *)(v11 + 16) = v13;
  *(_QWORD *)(v11 + 32) = *(_QWORD *)(v12 + 32);
  v14 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + v14) = *(_BYTE *)(a2 + v14);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_100061084(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100061090);
}

uint64_t sub_100061090(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for WorldClockEntry(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 24);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100061110(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006111C);
}

uint64_t sub_10006111C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for WorldClockEntry(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 24) = (a2 - 1);
  return result;
}

uint64_t sub_100061198(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  result = type metadata accessor for WorldClockEntry(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "(";
    v4[2] = &unk_10006DA48;
    v4[3] = &unk_10006DA48;
    v4[4] = &unk_10006DA48;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
    return 0;
  }
  return result;
}

_QWORD *sub_100061218(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  int *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int (*v56)(char *, uint64_t, uint64_t);
  void (*v57)(char *, char *, uint64_t);
  int *v58;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_1000041D8(&qword_100085E48);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v58 = a3;
    v14 = a3[5];
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = type metadata accessor for Date(0);
    v18 = *(_QWORD *)(v17 - 8);
    v19 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
    v19(v15, v16, v17);
    v20 = (int *)type metadata accessor for AlarmEntry(0);
    v21 = v20[5];
    v22 = &v15[v21];
    v23 = &v16[v21];
    v56 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
    if (v56(&v16[v21], 1, v17))
    {
      v24 = sub_1000041D8(&qword_100084810);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      v19(v22, v23, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v22, 0, 1, v17);
    }
    v25 = v20[6];
    v26 = &v15[v25];
    v27 = &v16[v25];
    if (v56(&v16[v25], 1, v17))
    {
      v28 = sub_1000041D8(&qword_100084810);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      v19(v26, v27, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v26, 0, 1, v17);
    }
    v15[v20[7]] = v16[v20[7]];
    v15[v20[8]] = v16[v20[8]];
    v29 = v20[9];
    v30 = &v15[v29];
    v31 = &v16[v29];
    v32 = *((_QWORD *)v31 + 1);
    *(_QWORD *)v30 = *(_QWORD *)v31;
    *((_QWORD *)v30 + 1) = v32;
    v33 = v20[10];
    v34 = &v15[v33];
    v35 = &v16[v33];
    v36 = *((_QWORD *)v35 + 1);
    *(_QWORD *)v34 = *(_QWORD *)v35;
    *((_QWORD *)v34 + 1) = v36;
    v37 = v20[11];
    v38 = &v15[v37];
    v39 = &v16[v37];
    v40 = *((_QWORD *)v39 + 1);
    *(_QWORD *)v38 = *(_QWORD *)v39;
    *((_QWORD *)v38 + 1) = v40;
    v41 = v20[12];
    v42 = &v15[v41];
    v43 = &v16[v41];
    v44 = *((_QWORD *)v43 + 1);
    *(_QWORD *)v42 = *(_QWORD *)v43;
    *((_QWORD *)v42 + 1) = v44;
    v15[v20[13]] = v16[v20[13]];
    v15[v20[14]] = v16[v20[14]];
    v45 = v20[15];
    v46 = &v15[v45];
    v47 = &v16[v45];
    v48 = *((_QWORD *)v47 + 1);
    *(_QWORD *)v46 = *(_QWORD *)v47;
    *((_QWORD *)v46 + 1) = v48;
    v15[v20[16]] = v16[v20[16]];
    v15[v20[17]] = v16[v20[17]];
    v49 = v58[6];
    v50 = (char *)a1 + v49;
    v51 = (char *)a2 + v49;
    v52 = *(_OWORD *)((char *)a2 + v49 + 24);
    *(_OWORD *)((char *)a1 + v49 + 24) = v52;
    v53 = v52;
    v57 = **(void (***)(char *, char *, uint64_t))(v52 - 8);
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v36);
    swift_bridgeObjectRetain(v40);
    swift_bridgeObjectRetain(v44);
    swift_bridgeObjectRetain(v48);
    v57(v50, v51, v53);
    v54 = v58[8];
    *((_BYTE *)a1 + v58[7]) = *((_BYTE *)a2 + v58[7]);
    *((_BYTE *)a1 + v54) = *((_BYTE *)a2 + v54);
    *((_BYTE *)a1 + v58[9]) = *((_BYTE *)a2 + v58[9]);
  }
  return a1;
}

uint64_t sub_100061564(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t);
  int *v10;
  char *v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  char *v13;

  v4 = sub_1000041D8(&qword_100085E48);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (char *)a1 + *(int *)(a2 + 20);
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(char *, uint64_t))(v8 + 8);
  v9(v6, v7);
  v10 = (int *)type metadata accessor for AlarmEntry(0);
  v11 = &v6[v10[5]];
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  if (!v12(v11, 1, v7))
    v9(v11, v7);
  v13 = &v6[v10[6]];
  if (!v12(v13, 1, v7))
    v9(v13, v7);
  swift_bridgeObjectRelease(*(_QWORD *)&v6[v10[9] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v6[v10[10] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v6[v10[11] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v6[v10[12] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v6[v10[15] + 8]);
  return sub_10001E0B0((_QWORD *)((char *)a1 + *(int *)(a2 + 24)));
}

_QWORD *sub_1000616C8(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  unsigned int (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  void (*v54)(char *, char *, uint64_t);
  int *v55;

  v5 = sub_1000041D8(&qword_100085E48);
  if (swift_getEnumCaseMultiPayload(a2, v5) == 1)
  {
    v6 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    v7 = a1;
    v8 = v5;
    v9 = 1;
  }
  else
  {
    v10 = *a2;
    *a1 = *a2;
    swift_retain(v10);
    v7 = a1;
    v8 = v5;
    v9 = 0;
  }
  swift_storeEnumTagMultiPayload(v7, v8, v9);
  v55 = a3;
  v11 = a3[5];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
  v16(v12, v13, v14);
  v17 = (int *)type metadata accessor for AlarmEntry(0);
  v18 = v17[5];
  v19 = &v12[v18];
  v20 = &v13[v18];
  v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  if (v21(&v13[v18], 1, v14))
  {
    v22 = sub_1000041D8(&qword_100084810);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    v16(v19, v20, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v19, 0, 1, v14);
  }
  v23 = v17[6];
  v24 = &v12[v23];
  v25 = &v13[v23];
  if (v21(&v13[v23], 1, v14))
  {
    v26 = sub_1000041D8(&qword_100084810);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    v16(v24, v25, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v24, 0, 1, v14);
  }
  v12[v17[7]] = v13[v17[7]];
  v12[v17[8]] = v13[v17[8]];
  v27 = v17[9];
  v28 = &v12[v27];
  v29 = &v13[v27];
  v30 = *((_QWORD *)v29 + 1);
  *(_QWORD *)v28 = *(_QWORD *)v29;
  *((_QWORD *)v28 + 1) = v30;
  v31 = v17[10];
  v32 = &v12[v31];
  v33 = &v13[v31];
  v34 = *((_QWORD *)v33 + 1);
  *(_QWORD *)v32 = *(_QWORD *)v33;
  *((_QWORD *)v32 + 1) = v34;
  v35 = v17[11];
  v36 = &v12[v35];
  v37 = &v13[v35];
  v38 = *((_QWORD *)v37 + 1);
  *(_QWORD *)v36 = *(_QWORD *)v37;
  *((_QWORD *)v36 + 1) = v38;
  v39 = v17[12];
  v40 = &v12[v39];
  v41 = &v13[v39];
  v42 = *((_QWORD *)v41 + 1);
  *(_QWORD *)v40 = *(_QWORD *)v41;
  *((_QWORD *)v40 + 1) = v42;
  v12[v17[13]] = v13[v17[13]];
  v12[v17[14]] = v13[v17[14]];
  v43 = v17[15];
  v44 = &v12[v43];
  v45 = &v13[v43];
  v46 = *((_QWORD *)v45 + 1);
  *(_QWORD *)v44 = *(_QWORD *)v45;
  *((_QWORD *)v44 + 1) = v46;
  v12[v17[16]] = v13[v17[16]];
  v12[v17[17]] = v13[v17[17]];
  v47 = v55[6];
  v48 = (char *)a1 + v47;
  v49 = (char *)a2 + v47;
  v50 = *(_OWORD *)((char *)a2 + v47 + 24);
  *(_OWORD *)((char *)a1 + v47 + 24) = v50;
  v51 = v50;
  v54 = **(void (***)(char *, char *, uint64_t))(v50 - 8);
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRetain(v46);
  v54(v48, v49, v51);
  v52 = v55[8];
  *((_BYTE *)a1 + v55[7]) = *((_BYTE *)a2 + v55[7]);
  *((_BYTE *)a1 + v52) = *((_BYTE *)a2 + v52);
  *((_BYTE *)a1 + v55[9]) = *((_BYTE *)a2 + v55[9]);
  return a1;
}

_QWORD *sub_1000619E8(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t);
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  int v28;
  int v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  void (*v58)(char *, char *, uint64_t);
  int *v59;
  _QWORD *v60;

  if (a1 != a2)
  {
    sub_1000106A4((uint64_t)a1, &qword_100085E48);
    v6 = sub_1000041D8(&qword_100085E48);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v59 = a3;
  v60 = a2;
  v12 = a3[5];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  v58 = *(void (**)(char *, char *, uint64_t))(v16 + 24);
  v58(v13, v14, v15);
  v17 = (int *)type metadata accessor for AlarmEntry(0);
  v18 = v17[5];
  v19 = &v13[v18];
  v20 = &v14[v18];
  v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v22 = v21(&v13[v18], 1, v15);
  v23 = v21(v20, 1, v15);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v19, v20, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v19, 0, 1, v15);
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
LABEL_11:
    v24 = sub_1000041D8(&qword_100084810);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_12;
  }
  v58(v19, v20, v15);
LABEL_12:
  v25 = v17[6];
  v26 = &v13[v25];
  v27 = &v14[v25];
  v28 = v21(&v13[v25], 1, v15);
  v29 = v21(v27, 1, v15);
  if (!v28)
  {
    v30 = v60;
    if (!v29)
    {
      v58(v26, v27, v15);
      goto LABEL_18;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v26, v15);
    goto LABEL_17;
  }
  v30 = v60;
  if (v29)
  {
LABEL_17:
    v31 = sub_1000041D8(&qword_100084810);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    goto LABEL_18;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v26, v27, v15);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v26, 0, 1, v15);
LABEL_18:
  v13[v17[7]] = v14[v17[7]];
  v13[v17[8]] = v14[v17[8]];
  v32 = v17[9];
  v33 = &v13[v32];
  v34 = &v14[v32];
  *(_QWORD *)v33 = *(_QWORD *)v34;
  v35 = *((_QWORD *)v34 + 1);
  v36 = *((_QWORD *)v33 + 1);
  *((_QWORD *)v33 + 1) = v35;
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRelease(v36);
  v37 = v17[10];
  v38 = &v13[v37];
  v39 = &v14[v37];
  *(_QWORD *)v38 = *(_QWORD *)v39;
  v40 = *((_QWORD *)v39 + 1);
  v41 = *((_QWORD *)v38 + 1);
  *((_QWORD *)v38 + 1) = v40;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRelease(v41);
  v42 = v17[11];
  v43 = &v13[v42];
  v44 = &v14[v42];
  *(_QWORD *)v43 = *(_QWORD *)v44;
  v45 = *((_QWORD *)v44 + 1);
  v46 = *((_QWORD *)v43 + 1);
  *((_QWORD *)v43 + 1) = v45;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRelease(v46);
  v47 = v17[12];
  v48 = &v13[v47];
  v49 = &v14[v47];
  *(_QWORD *)v48 = *(_QWORD *)v49;
  v50 = *((_QWORD *)v49 + 1);
  v51 = *((_QWORD *)v48 + 1);
  *((_QWORD *)v48 + 1) = v50;
  swift_bridgeObjectRetain(v50);
  swift_bridgeObjectRelease(v51);
  v13[v17[13]] = v14[v17[13]];
  v13[v17[14]] = v14[v17[14]];
  v52 = v17[15];
  v53 = &v13[v52];
  v54 = &v14[v52];
  *(_QWORD *)v53 = *(_QWORD *)v54;
  v55 = *((_QWORD *)v54 + 1);
  v56 = *((_QWORD *)v53 + 1);
  *((_QWORD *)v53 + 1) = v55;
  swift_bridgeObjectRetain(v55);
  swift_bridgeObjectRelease(v56);
  v13[v17[16]] = v14[v17[16]];
  v13[v17[17]] = v14[v17[17]];
  sub_100057180((_QWORD *)((char *)a1 + v59[6]), (_QWORD *)((char *)v30 + v59[6]));
  *((_BYTE *)a1 + v59[7]) = *((_BYTE *)v30 + v59[7]);
  *((_BYTE *)a1 + v59[8]) = *((_BYTE *)v30 + v59[8]);
  *((_BYTE *)a1 + v59[9]) = *((_BYTE *)v30 + v59[9]);
  return a1;
}

char *sub_100061DD4(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  uint64_t v29;
  char *v31;
  int *v32;

  v6 = sub_1000041D8(&qword_100085E48);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v31 = a2;
  v32 = a3;
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v13(v9, v10, v11);
  v14 = (int *)type metadata accessor for AlarmEntry(0);
  v15 = v14[5];
  v16 = &v9[v15];
  v17 = &v10[v15];
  v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v18(&v10[v15], 1, v11))
  {
    v19 = sub_1000041D8(&qword_100084810);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    v13(v16, v17, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v16, 0, 1, v11);
  }
  v20 = v14[6];
  v21 = &v9[v20];
  v22 = &v10[v20];
  if (v18(&v10[v20], 1, v11))
  {
    v23 = sub_1000041D8(&qword_100084810);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    v13(v21, v22, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v21, 0, 1, v11);
  }
  v9[v14[7]] = v10[v14[7]];
  v9[v14[8]] = v10[v14[8]];
  *(_OWORD *)&v9[v14[9]] = *(_OWORD *)&v10[v14[9]];
  *(_OWORD *)&v9[v14[10]] = *(_OWORD *)&v10[v14[10]];
  *(_OWORD *)&v9[v14[11]] = *(_OWORD *)&v10[v14[11]];
  *(_OWORD *)&v9[v14[12]] = *(_OWORD *)&v10[v14[12]];
  v9[v14[13]] = v10[v14[13]];
  v9[v14[14]] = v10[v14[14]];
  *(_OWORD *)&v9[v14[15]] = *(_OWORD *)&v10[v14[15]];
  v9[v14[16]] = v10[v14[16]];
  v9[v14[17]] = v10[v14[17]];
  v24 = v32[6];
  v25 = v32[7];
  v26 = &a1[v24];
  v27 = &v31[v24];
  v28 = *((_OWORD *)v27 + 1);
  *(_OWORD *)v26 = *(_OWORD *)v27;
  *((_OWORD *)v26 + 1) = v28;
  *((_QWORD *)v26 + 4) = *((_QWORD *)v27 + 4);
  a1[v25] = v31[v25];
  v29 = v32[9];
  a1[v32[8]] = v31[v32[8]];
  a1[v29] = v31[v29];
  return a1;
}

char *sub_100062078(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  __int128 v60;
  uint64_t v61;
  void (*v63)(char *, char *, uint64_t);
  int *v64;
  char *v65;

  if (a1 != a2)
  {
    sub_1000106A4((uint64_t)a1, &qword_100085E48);
    v6 = sub_1000041D8(&qword_100085E48);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v64 = a3;
  v65 = a2;
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v63 = *(void (**)(char *, char *, uint64_t))(v12 + 40);
  v63(v9, v10, v11);
  v13 = (int *)type metadata accessor for AlarmEntry(0);
  v14 = v13[5];
  v15 = &v9[v14];
  v16 = &v10[v14];
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v18 = v17(&v9[v14], 1, v11);
  v19 = v17(v16, 1, v11);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v15, v16, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v15, 0, 1, v11);
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
LABEL_10:
    v20 = sub_1000041D8(&qword_100084810);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_11;
  }
  v63(v15, v16, v11);
LABEL_11:
  v21 = v13[6];
  v22 = &v9[v21];
  v23 = &v10[v21];
  v24 = v17(&v9[v21], 1, v11);
  v25 = v17(v23, 1, v11);
  if (!v24)
  {
    if (!v25)
    {
      v63(v22, v23, v11);
      goto LABEL_17;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v22, v11);
    goto LABEL_16;
  }
  if (v25)
  {
LABEL_16:
    v26 = sub_1000041D8(&qword_100084810);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_17;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v22, v23, v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v22, 0, 1, v11);
LABEL_17:
  v9[v13[7]] = v10[v13[7]];
  v9[v13[8]] = v10[v13[8]];
  v27 = v13[9];
  v28 = &v9[v27];
  v29 = &v10[v27];
  v31 = *(_QWORD *)v29;
  v30 = *((_QWORD *)v29 + 1);
  v32 = *((_QWORD *)v28 + 1);
  *(_QWORD *)v28 = v31;
  *((_QWORD *)v28 + 1) = v30;
  swift_bridgeObjectRelease(v32);
  v33 = v13[10];
  v34 = &v9[v33];
  v35 = &v10[v33];
  v37 = *(_QWORD *)v35;
  v36 = *((_QWORD *)v35 + 1);
  v38 = *((_QWORD *)v34 + 1);
  *(_QWORD *)v34 = v37;
  *((_QWORD *)v34 + 1) = v36;
  swift_bridgeObjectRelease(v38);
  v39 = v13[11];
  v40 = &v9[v39];
  v41 = &v10[v39];
  v43 = *(_QWORD *)v41;
  v42 = *((_QWORD *)v41 + 1);
  v44 = *((_QWORD *)v40 + 1);
  *(_QWORD *)v40 = v43;
  *((_QWORD *)v40 + 1) = v42;
  swift_bridgeObjectRelease(v44);
  v45 = v13[12];
  v46 = &v9[v45];
  v47 = &v10[v45];
  v49 = *(_QWORD *)v47;
  v48 = *((_QWORD *)v47 + 1);
  v50 = *((_QWORD *)v46 + 1);
  *(_QWORD *)v46 = v49;
  *((_QWORD *)v46 + 1) = v48;
  swift_bridgeObjectRelease(v50);
  v9[v13[13]] = v10[v13[13]];
  v9[v13[14]] = v10[v13[14]];
  v51 = v13[15];
  v52 = &v9[v51];
  v53 = &v10[v51];
  v55 = *(_QWORD *)v53;
  v54 = *((_QWORD *)v53 + 1);
  v56 = *((_QWORD *)v52 + 1);
  *(_QWORD *)v52 = v55;
  *((_QWORD *)v52 + 1) = v54;
  swift_bridgeObjectRelease(v56);
  v9[v13[16]] = v10[v13[16]];
  v9[v13[17]] = v10[v13[17]];
  v57 = v64[6];
  v58 = &a1[v57];
  v59 = &v65[v57];
  sub_10001E0B0(&a1[v57]);
  v60 = *((_OWORD *)v59 + 1);
  *(_OWORD *)v58 = *(_OWORD *)v59;
  *((_OWORD *)v58 + 1) = v60;
  *((_QWORD *)v58 + 4) = *((_QWORD *)v59 + 4);
  v61 = v64[8];
  a1[v64[7]] = v65[v64[7]];
  a1[v61] = v65[v61];
  a1[v64[9]] = v65[v64[9]];
  return a1;
}

uint64_t sub_100062418(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100062424);
}

uint64_t sub_100062424(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = sub_1000041D8(&qword_100085AD0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for AlarmEntry(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 24);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_1000624D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000624E0);
}

uint64_t sub_1000624E0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = sub_1000041D8(&qword_100085AD0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for AlarmEntry(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 24) = (a2 - 1);
  return result;
}

void sub_10006258C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[6];

  sub_10005A51C(319, (unint64_t *)&unk_100086818, (uint64_t (*)(uint64_t))&type metadata accessor for ContentSizeCategory, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for AlarmEntry(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = "(";
      v6[3] = &unk_10006DA48;
      v6[4] = &unk_10006DA48;
      v6[5] = &unk_10006DA48;
      swift_initStructMetadata(a1, 256, 6, v6, a1 + 16);
    }
  }
}

_QWORD *sub_100062640(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = type metadata accessor for WorldClockEntry(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v10);
  }
  else
  {
    v6 = v4;
    v7 = type metadata accessor for Date(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(v6 + 20);
    v9 = *(_QWORD *)((char *)a2 + v8);
    *(_QWORD *)((char *)a1 + v8) = v9;
    *((_BYTE *)a1 + *(int *)(v6 + 24)) = *((_BYTE *)a2 + *(int *)(v6 + 24));
    swift_bridgeObjectRetain(v9);
  }
  return a1;
}

uint64_t sub_1000626E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  v3 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for WorldClockEntry(0) + 20));
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_100062728(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  v5 = type metadata accessor for WorldClockEntry(0);
  v6 = *(int *)(v5 + 20);
  v7 = *(_QWORD *)(a2 + v6);
  *(_QWORD *)(a1 + v6) = v7;
  *(_BYTE *)(a1 + *(int *)(v5 + 24)) = *(_BYTE *)(a2 + *(int *)(v5 + 24));
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t sub_100062794(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  v5 = type metadata accessor for WorldClockEntry(0);
  v6 = *(int *)(v5 + 20);
  v7 = *(_QWORD *)(a2 + v6);
  v8 = *(_QWORD *)(a1 + v6);
  *(_QWORD *)(a1 + v6) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  *(_BYTE *)(a1 + *(int *)(v5 + 24)) = *(_BYTE *)(a2 + *(int *)(v5 + 24));
  return a1;
}

uint64_t sub_100062814(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  v5 = type metadata accessor for WorldClockEntry(0);
  *(_QWORD *)(a1 + *(int *)(v5 + 20)) = *(_QWORD *)(a2 + *(int *)(v5 + 20));
  *(_BYTE *)(a1 + *(int *)(v5 + 24)) = *(_BYTE *)(a2 + *(int *)(v5 + 24));
  return a1;
}

uint64_t sub_100062878(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  v5 = type metadata accessor for WorldClockEntry(0);
  v6 = *(int *)(v5 + 20);
  v7 = *(_QWORD *)(a1 + v6);
  *(_QWORD *)(a1 + v6) = *(_QWORD *)(a2 + v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + *(int *)(v5 + 24)) = *(_BYTE *)(a2 + *(int *)(v5 + 24));
  return a1;
}

uint64_t sub_1000628F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000628FC);
}

uint64_t sub_1000628FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100062908(a1, a2, a3, type metadata accessor for WorldClockEntry);
}

uint64_t sub_100062908(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v6;

  v6 = a4(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(a1, a2, v6);
}

uint64_t sub_100062944(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100062950);
}

uint64_t sub_100062950(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10006295C(a1, a2, a3, a4, type metadata accessor for WorldClockEntry);
}

uint64_t sub_10006295C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v7;

  v7 = a5(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a1, a2, a2, v7);
}

uint64_t type metadata accessor for CityInlineComplication(uint64_t a1)
{
  return sub_10000DEFC(a1, qword_10008BC80, (uint64_t)&nominal type descriptor for CityInlineComplication);
}

uint64_t sub_1000629B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000629BC(a1, a2, a3, type metadata accessor for WorldClockEntry);
}

uint64_t sub_1000629BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result;
  unint64_t v6;
  uint64_t v7;

  result = a4(319);
  if (v6 <= 0x3F)
  {
    v7 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v7, a1 + 16);
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for AlarmPlaceholder()
{
  return &type metadata for AlarmPlaceholder;
}

unint64_t sub_100062A38()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100087460;
  if (!qword_100087460)
  {
    v1 = sub_100010DE0(&qword_100085E38);
    sub_100067500(&qword_100087468, &qword_100085E30, (void (*)(void))sub_100062ADC, (uint64_t)&protocol conformance descriptor for <A> Group<A>);
    sub_10000D36C(&qword_100087498, type metadata accessor for AccentedWidgetBackground, (uint64_t)&unk_10006D100);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100087460);
  }
  return result;
}

unint64_t sub_100062ADC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100087470;
  if (!qword_100087470)
  {
    v1 = sub_100010DE0(&qword_100087478);
    sub_10000D36C(&qword_100087480, type metadata accessor for PlaceholderViewSingle, (uint64_t)&unk_10006CE80);
    sub_10001DDB4(&qword_100087488, &qword_100087490, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100087470);
  }
  return result;
}

uint64_t sub_100062B78(uint64_t a1)
{
  return sub_100064908(a1, &qword_100085E50, &qword_100085E60, (uint64_t)&protocol conformance descriptor for VStack<A>);
}

unint64_t sub_100062B98()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000874A0;
  if (!qword_1000874A0)
  {
    v1 = sub_100010DE0(&qword_100085E90);
    sub_100062C1C();
    sub_10001DDB4(&qword_100086108, &qword_100086110, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000874A0);
  }
  return result;
}

unint64_t sub_100062C1C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000874A8;
  if (!qword_1000874A8)
  {
    v1 = sub_100010DE0(&qword_100085E88);
    sub_100062CA0();
    sub_10001DDB4(&qword_1000874C8, &qword_1000874D0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000874A8);
  }
  return result;
}

unint64_t sub_100062CA0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000874B0;
  if (!qword_1000874B0)
  {
    v1 = sub_100010DE0(&qword_100085E80);
    sub_100062D24();
    sub_10001DDB4(&qword_100086320, &qword_100086328, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000874B0);
  }
  return result;
}

unint64_t sub_100062D24()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000874B8;
  if (!qword_1000874B8)
  {
    v1 = sub_100010DE0(&qword_100085E78);
    sub_10001DDB4(&qword_1000874C0, &qword_100085E70, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000874B8);
  }
  return result;
}

unint64_t sub_100062DAC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000874D8;
  if (!qword_1000874D8)
  {
    v1 = sub_100010DE0(&qword_1000874E0);
    sub_10000D36C(&qword_100085ED0, type metadata accessor for PlaceholderViewMulti, (uint64_t)&unk_10006CED0);
    sub_100067500(&qword_100085ED8, &qword_100085EB8, (void (*)(void))sub_10004F68C, (uint64_t)&protocol conformance descriptor for <A> A?);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000874D8);
  }
  return result;
}

unint64_t sub_100062E54()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000874E8;
  if (!qword_1000874E8)
  {
    v1 = sub_100010DE0(&qword_1000874F0);
    sub_10000D36C(&qword_100085F00, type metadata accessor for SmallWorldClockView, (uint64_t)&unk_10006CF20);
    sub_10000D36C(&qword_100085DB8, type metadata accessor for CapMaxContentSizeCategory, (uint64_t)&unk_10006D4B0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000874E8);
  }
  return result;
}

uint64_t sub_100062EF0()
{
  return sub_100067500(&qword_1000874F8, &qword_100085F10, (void (*)(void))sub_100062F24, (uint64_t)&protocol conformance descriptor for <A> A?);
}

unint64_t sub_100062F24()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100087500;
  if (!qword_100087500)
  {
    v1 = sub_100010DE0(&qword_100085F20);
    sub_10001DDB4(&qword_100085F28, &qword_100085F18, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    sub_10000D36C(&qword_100085EF0, type metadata accessor for MediumWorldClockView, (uint64_t)&unk_10006CFC0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100087500);
  }
  return result;
}

unint64_t sub_100062FC4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100087508;
  if (!qword_100087508)
  {
    v1 = sub_100010DE0(&qword_100085F70);
    sub_100063030();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100087508);
  }
  return result;
}

unint64_t sub_100063030()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100087510;
  if (!qword_100087510)
  {
    v1 = sub_100010DE0(&qword_100085F68);
    sub_10006309C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100087510);
  }
  return result;
}

unint64_t sub_10006309C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100087518;
  if (!qword_100087518)
  {
    v1 = sub_100010DE0(&qword_100085F60);
    sub_100063120();
    sub_10001DDB4(&qword_100085FD8, &qword_100085F90, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100087518);
  }
  return result;
}

unint64_t sub_100063120()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100087520;
  if (!qword_100087520)
  {
    v1 = sub_100010DE0(&qword_100085F58);
    v2[0] = sub_100010DE0(&qword_100085F48);
    v2[1] = sub_10004FBC8();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_10000D36C(&qword_100087528, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100087520);
  }
  return result;
}

uint64_t sub_1000631CC()
{
  return sub_10001DDB4(&qword_100087530, &qword_100087538, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
}

uint64_t sub_1000631F8()
{
  return sub_10001DDB4(&qword_100087540, &qword_100087548, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
}

unint64_t sub_100063228()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100087550;
  if (!qword_100087550)
  {
    v1 = sub_100010DE0(&qword_100085FB8);
    v2[0] = sub_100010DE0(&qword_100085FA8);
    v2[1] = sub_10004FCE0();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_10000D36C(&qword_100087528, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100087550);
  }
  return result;
}

unint64_t sub_1000632D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100087558;
  if (!qword_100087558)
  {
    v1 = sub_100010DE0(&qword_100087560);
    sub_10001DDB4(&qword_100085FF0, &qword_100085FE0, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    sub_10000D36C(&qword_100087528, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100087558);
  }
  return result;
}

uint64_t sub_100063374()
{
  return sub_10001DDB4(&qword_100087568, &qword_100087570, (uint64_t)&protocol conformance descriptor for ZStack<A>);
}

uint64_t sub_1000633A0()
{
  return sub_10001DDB4(&qword_100087578, &qword_100087580, (uint64_t)&protocol conformance descriptor for ZStack<A>);
}

unint64_t sub_1000633D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100087588;
  if (!qword_100087588)
  {
    v1 = sub_100010DE0(&qword_100086018);
    sub_10006343C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100087588);
  }
  return result;
}

unint64_t sub_10006343C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100087590;
  if (!qword_100087590)
  {
    v1 = sub_100010DE0(&qword_100086010);
    sub_10000D36C(&qword_100087598, type metadata accessor for ClockWidgetAccentableForegroundColor, (uint64_t)&unk_10006D150);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100087590);
  }
  return result;
}

uint64_t sub_1000634C0()
{
  return sub_10001DDB4(&qword_1000875A0, &qword_1000875A8, (uint64_t)&protocol conformance descriptor for ZStack<A>);
}

uint64_t sub_1000634EC()
{
  return sub_10001DDB4(&qword_1000875B0, &qword_1000875B8, (uint64_t)&protocol conformance descriptor for ZStack<A>);
}

unint64_t sub_10006351C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000875C0;
  if (!qword_1000875C0)
  {
    v1 = sub_100010DE0(&qword_1000875C8);
    sub_10001D898(&qword_1000875D0, &qword_1000875D8, (void (*)(void))sub_1000635A0, (void (*)(void))sub_1000638EC);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000875C0);
  }
  return result;
}

unint64_t sub_1000635A0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1000875E0;
  if (!qword_1000875E0)
  {
    v1 = sub_100010DE0(&qword_1000875E8);
    v2[0] = sub_100010DE0(&qword_1000875F0);
    v2[1] = sub_10006364C();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View._clockHandRotationEffect(_:in:anchor:)>>, 1);
    sub_10001DDB4(&qword_100087660, &qword_100087668, (uint64_t)&protocol conformance descriptor for _MaskAlignmentEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000875E0);
  }
  return result;
}

unint64_t sub_10006364C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000875F8;
  if (!qword_1000875F8)
  {
    v1 = sub_100010DE0(&qword_1000875F0);
    sub_1000636B8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000875F8);
  }
  return result;
}

unint64_t sub_1000636B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100087600;
  if (!qword_100087600)
  {
    v1 = sub_100010DE0(&qword_100087608);
    sub_100063724();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100087600);
  }
  return result;
}

unint64_t sub_100063724()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100087610;
  if (!qword_100087610)
  {
    v1 = sub_100010DE0(&qword_100087618);
    sub_100063790();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100087610);
  }
  return result;
}

unint64_t sub_100063790()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100087620;
  if (!qword_100087620)
  {
    v1 = sub_100010DE0(&qword_100087628);
    sub_1000637FC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100087620);
  }
  return result;
}

unint64_t sub_1000637FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100087630;
  if (!qword_100087630)
  {
    v1 = sub_100010DE0(&qword_100087638);
    sub_100063868();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100087630);
  }
  return result;
}

unint64_t sub_100063868()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100087640;
  if (!qword_100087640)
  {
    v1 = sub_100010DE0(&qword_100087648);
    sub_10001DDB4(&qword_100087650, &qword_100087658, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100087640);
  }
  return result;
}

unint64_t sub_1000638EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100087670;
  if (!qword_100087670)
  {
    v1 = sub_100010DE0(&qword_100087678);
    sub_100063970();
    sub_10001DDB4(&qword_100087660, &qword_100087668, (uint64_t)&protocol conformance descriptor for _MaskAlignmentEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100087670);
  }
  return result;
}

unint64_t sub_100063970()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100087680;
  if (!qword_100087680)
  {
    v1 = sub_100010DE0(&qword_100087688);
    sub_1000639DC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100087680);
  }
  return result;
}

unint64_t sub_1000639DC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100087690;
  if (!qword_100087690)
  {
    v1 = sub_100010DE0(&qword_100087698);
    sub_100063790();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100087690);
  }
  return result;
}

unint64_t sub_100063A4C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1000876A0;
  if (!qword_1000876A0)
  {
    v1 = sub_100010DE0(&qword_100086038);
    v2[0] = sub_100010DE0(&qword_100086040);
    v2[1] = sub_10001DDB4(&qword_100086048, &qword_100086040, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000876A0);
  }
  return result;
}

uint64_t sub_100063B00()
{
  _QWORD v1[4];

  v1[0] = sub_100010DE0(&qword_100086050);
  v1[1] = sub_100010DE0(&qword_100086058);
  v1[2] = sub_10001DDB4(&qword_100086060, &qword_100086050, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
  v1[3] = sub_100050B5C(&qword_100086068, &qword_100086058);
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(for:alignment:content:)>>, 1);
}

unint64_t sub_100063BAC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000876A8;
  if (!qword_1000876A8)
  {
    v1 = sub_100010DE0(&qword_100086078);
    sub_100063C18();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000876A8);
  }
  return result;
}

unint64_t sub_100063C18()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000876B0;
  if (!qword_1000876B0)
  {
    v1 = sub_100010DE0(&qword_100086070);
    sub_10001DDB4(&qword_1000876B8, &qword_100086080, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_10001DDB4(&qword_1000874C8, &qword_1000874D0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000876B0);
  }
  return result;
}

uint64_t sub_100063CB4(uint64_t *a1)
{
  return sub_100063D08(a1, type metadata accessor for ClockWidgetAccentableOpacity, &qword_1000876C0, (uint64_t)&unk_10006D0B0);
}

uint64_t sub_100063CD0(uint64_t *a1)
{
  return sub_100063D08(a1, type metadata accessor for ClockWidgetAccentableForegroundColor, &qword_100087598, (uint64_t)&unk_10006D150);
}

uint64_t sub_100063CEC(uint64_t *a1)
{
  return sub_100063D08(a1, type metadata accessor for AccentedWidgetBackground, &qword_100087498, (uint64_t)&unk_10006D100);
}

uint64_t sub_100063D08(uint64_t *a1, uint64_t (*a2)(uint64_t), unint64_t *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *a1;
  v8 = a2(255);
  v9 = type metadata accessor for ModifiedContent(255, v7, v8);
  sub_10000D36C(a3, a2, a4);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v9);
}

unint64_t sub_100063D90()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000876C8;
  if (!qword_1000876C8)
  {
    v1 = sub_100010DE0(&qword_1000860A0);
    sub_100063DFC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000876C8);
  }
  return result;
}

unint64_t sub_100063DFC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000876D0;
  if (!qword_1000876D0)
  {
    v1 = sub_100010DE0(&qword_100086098);
    sub_100063E68();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000876D0);
  }
  return result;
}

unint64_t sub_100063E68()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000876D8;
  if (!qword_1000876D8)
  {
    v1 = sub_100010DE0(&qword_100086090);
    sub_100067500(&qword_1000876E0, &qword_100086088, (void (*)(void))sub_100063F0C, (uint64_t)&protocol conformance descriptor for <A> Group<A>);
    sub_10001DDB4(&qword_100087728, &qword_1000860A8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000876D8);
  }
  return result;
}

unint64_t sub_100063F0C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000876E8;
  if (!qword_1000876E8)
  {
    v1 = sub_100010DE0(&qword_1000876F0);
    sub_10001DDB4(&qword_1000876F8, &qword_100087700, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    sub_100063F90();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000876E8);
  }
  return result;
}

unint64_t sub_100063F90()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100087708;
  if (!qword_100087708)
  {
    v1 = sub_100010DE0(&qword_100087710);
    sub_10001DDB4(&qword_100087718, &qword_100087720, (uint64_t)&protocol conformance descriptor for VStack<A>);
    sub_10000D36C(&qword_1000876C0, type metadata accessor for ClockWidgetAccentableOpacity, (uint64_t)&unk_10006D0B0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100087708);
  }
  return result;
}

unint64_t sub_100064030()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100087730;
  if (!qword_100087730)
  {
    v1 = sub_100010DE0(&qword_100086128);
    sub_100050C18();
    sub_10000D36C(&qword_100087528, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100087730);
  }
  return result;
}

unint64_t sub_1000640B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100087738;
  if (!qword_100087738)
  {
    v1 = sub_100010DE0(&qword_100086170);
    sub_100050B5C(&qword_1000860F8, &qword_100086100);
    sub_10000D36C(&qword_100087528, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100087738);
  }
  return result;
}

unint64_t sub_100064160()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100087740;
  if (!qword_100087740)
  {
    v1 = sub_100010DE0(&qword_1000860B0);
    sub_10005095C();
    sub_10000D36C(&qword_100087528, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100087740);
  }
  return result;
}

unint64_t sub_1000641E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100087748;
  if (!qword_100087748)
  {
    v1 = sub_100010DE0(&qword_1000861C8);
    sub_10006426C();
    sub_10001DDB4(&qword_100087758, &qword_100087760, (uint64_t)&protocol conformance descriptor for _AnimationModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100087748);
  }
  return result;
}

unint64_t sub_10006426C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100087750;
  if (!qword_100087750)
  {
    v1 = sub_100010DE0(&qword_1000861A0);
    v2[0] = sub_100010DE0(&qword_100086190);
    v2[1] = sub_100050E78();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_10000D36C(&qword_100087528, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100087750);
  }
  return result;
}

unint64_t sub_10006431C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100087768;
  if (!qword_100087768)
  {
    v1 = sub_100010DE0(&qword_1000861E0);
    sub_100064388();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100087768);
  }
  return result;
}

unint64_t sub_100064388()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100087770;
  if (!qword_100087770)
  {
    v1 = sub_100010DE0(&qword_1000861D8);
    sub_10006440C();
    sub_10001DDB4(&qword_100087780, &qword_1000861D0, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100087770);
  }
  return result;
}

unint64_t sub_10006440C()
{
  unint64_t result;

  result = qword_100087778;
  if (!qword_100087778)
  {
    result = swift_getWitnessTable(&unk_10006D410, &type metadata for Clock.ClockHand);
    atomic_store(result, (unint64_t *)&qword_100087778);
  }
  return result;
}

unint64_t sub_100064454()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100087788;
  if (!qword_100087788)
  {
    v1 = sub_100010DE0(&qword_100087790);
    sub_10006440C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100087788);
  }
  return result;
}

uint64_t sub_1000644C8()
{
  return sub_10001DDB4(&qword_100087798, &qword_1000877A0, (uint64_t)&protocol conformance descriptor for ZStack<A>);
}

unint64_t sub_1000644F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000877A8;
  if (!qword_1000877A8)
  {
    v1 = sub_100010DE0(&qword_1000861E8);
    sub_10001DDB4(&qword_1000877B0, &qword_1000861F0, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_10001DDB4(&qword_100087728, &qword_1000860A8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000877A8);
  }
  return result;
}

unint64_t sub_100064598()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000877B8;
  if (!qword_1000877B8)
  {
    v1 = sub_100010DE0(&qword_100086200);
    sub_100067500(&qword_1000877C0, &qword_1000861F8, (void (*)(void))sub_10006463C, (uint64_t)&protocol conformance descriptor for <A> Group<A>);
    sub_10000D36C(&qword_100087498, type metadata accessor for AccentedWidgetBackground, (uint64_t)&unk_10006D100);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000877B8);
  }
  return result;
}

unint64_t sub_10006463C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000877C8;
  if (!qword_1000877C8)
  {
    v1 = sub_100010DE0(&qword_1000877D0);
    sub_10000D36C(&qword_100087480, type metadata accessor for PlaceholderViewSingle, (uint64_t)&unk_10006CE80);
    sub_10001DDB4(&qword_1000877D8, &qword_1000877E0, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000877C8);
  }
  return result;
}

unint64_t sub_1000646DC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000877E8;
  if (!qword_1000877E8)
  {
    v1 = sub_100010DE0(&qword_100086210);
    sub_100067500(&qword_1000877F0, &qword_100086208, (void (*)(void))sub_100064780, (uint64_t)&protocol conformance descriptor for <A> Group<A>);
    sub_10000D36C(&qword_100087498, type metadata accessor for AccentedWidgetBackground, (uint64_t)&unk_10006D100);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000877E8);
  }
  return result;
}

unint64_t sub_100064780()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000877F8;
  if (!qword_1000877F8)
  {
    v1 = sub_100010DE0(&qword_100087800);
    sub_10000D36C(&qword_100087480, type metadata accessor for PlaceholderViewSingle, (uint64_t)&unk_10006CE80);
    sub_10001DDB4(&qword_100087808, &qword_100087810, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000877F8);
  }
  return result;
}

uint64_t sub_10006481C()
{
  uint64_t v0;
  uint64_t OpaqueTypeConformance2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v0 = sub_100010DE0(&qword_100086228);
  v3 = sub_100010DE0(&qword_100086220);
  v4 = sub_100010DE0(&qword_100086258);
  v5 = sub_10001DDB4(&qword_100086260, &qword_100086220, (uint64_t)&protocol conformance descriptor for LazyVGrid<A>);
  v6 = sub_10001DDB4(&qword_100086268, &qword_100086258, (uint64_t)&protocol conformance descriptor for Grid<A>);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of View.accessibilityRepresentation<A>(representation:)>>, 1);
  v3 = v0;
  v4 = OpaqueTypeConformance2;
  return swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
}

uint64_t sub_1000648EC(uint64_t a1)
{
  return sub_100064908(a1, &qword_100086270, &qword_100086278, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
}

uint64_t sub_100064908(uint64_t a1, uint64_t *a2, unint64_t *a3, uint64_t a4)
{
  _QWORD v8[2];

  v8[0] = sub_100010DE0(a2);
  v8[1] = sub_10001DDB4(a3, a2, a4);
  return swift_getOpaqueTypeConformance2(v8, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
}

uint64_t sub_100064970(uint64_t a1)
{
  return sub_100064908(a1, &qword_100086280, &qword_100086290, (uint64_t)&protocol conformance descriptor for VStack<A>);
}

unint64_t sub_100064990()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100087818;
  if (!qword_100087818)
  {
    v1 = sub_100010DE0(&qword_100087820);
    sub_10001DDB4(&qword_1000862A8, &qword_100086298, (uint64_t)&protocol conformance descriptor for HStack<A>);
    sub_10000D36C(&qword_100087528, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100087818);
  }
  return result;
}

unint64_t sub_100064A30()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100087828;
  if (!qword_100087828)
  {
    v1 = sub_100010DE0(&qword_1000862E0);
    v2[0] = sub_100010DE0(&qword_1000862D0);
    v2[1] = sub_100051038();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_10000D36C(&qword_100087528, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100087828);
  }
  return result;
}

unint64_t sub_100064AE0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100087830;
  if (!qword_100087830)
  {
    v1 = sub_100010DE0(&qword_100087838);
    sub_1000510D0();
    sub_10000D36C(&qword_100087528, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100087830);
  }
  return result;
}

uint64_t sub_100064B64()
{
  return sub_100064B98(&qword_100087840, &qword_100087848);
}

uint64_t sub_100064B98(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100010DE0(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v4);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100064BFC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100087850;
  if (!qword_100087850)
  {
    v1 = sub_100010DE0(&qword_100087858);
    v2[0] = sub_100010DE0(&qword_100086350);
    v2[1] = sub_10005126C();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_10000D36C(&qword_100087528, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100087850);
  }
  return result;
}

uint64_t sub_100064CA8()
{
  _QWORD v1[2];

  v1[0] = sub_100010DE0(&qword_100086390);
  v1[1] = sub_100051388();
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
}

unint64_t sub_100064CF8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100087860;
  if (!qword_100087860)
  {
    v1 = sub_100010DE0(&qword_100087868);
    sub_10001DDB4(&qword_1000863D8, &qword_1000863C8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    sub_10001DDB4(&qword_1000863E0, &qword_1000863B8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100087860);
  }
  return result;
}

uint64_t sub_100064D9C()
{
  return sub_10001DDB4(&qword_1000863E0, &qword_1000863B8, (uint64_t)&protocol conformance descriptor for VStack<A>);
}

uint64_t sub_100064DC8()
{
  return sub_10001DDB4(&qword_1000863D8, &qword_1000863C8, (uint64_t)&protocol conformance descriptor for VStack<A>);
}

uint64_t sub_100064DF4()
{
  return sub_10001DDB4(&qword_100087870, &qword_100087878, (uint64_t)&protocol conformance descriptor for VStack<A>);
}

unint64_t sub_100064E24()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100087880;
  if (!qword_100087880)
  {
    v1 = sub_100010DE0(&qword_1000863F0);
    sub_100051490();
    sub_10000D36C(&qword_100087528, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100087880);
  }
  return result;
}

unint64_t sub_100064EAC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100087888;
  if (!qword_100087888)
  {
    v1 = sub_100010DE0(&qword_100087890);
    v2[0] = sub_100010DE0(&qword_100086410);
    v2[1] = sub_100051514();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_10000D36C(&qword_100087528, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100087888);
  }
  return result;
}

uint64_t sub_100064F58()
{
  return sub_10001DDB4(&qword_100087898, &qword_1000878A0, (uint64_t)&protocol conformance descriptor for ZStack<A>);
}

uint64_t sub_100064F88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  int *v9;
  uint64_t v10;
  unsigned int (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v1 = *(_QWORD *)(type metadata accessor for AlarmSmallWidgetView(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v5 = v0 + v3;
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v0 + v3, v6);
  v9 = (int *)type metadata accessor for AlarmEntry(0);
  v10 = v0 + v3 + v9[5];
  v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v11(v10, 1, v6))
    v8(v10, v6);
  v12 = v5 + v9[6];
  if (!v11(v12, 1, v6))
    v8(v12, v6);
  swift_bridgeObjectRelease(*(_QWORD *)(v5 + v9[9] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v5 + v9[10] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v5 + v9[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v5 + v9[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v5 + v9[15] + 8));
  return swift_deallocObject(v0, v3 + v4, v2 | 7);
}

void *sub_1000650C4@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AlarmSmallWidgetView(0) - 8) + 80);
  return sub_100046D40(v1 + ((v3 + 16) & ~v3), a1);
}

unint64_t sub_100065100()
{
  unint64_t result;

  result = qword_1000878A8;
  if (!qword_1000878A8)
  {
    result = swift_getWitnessTable(&unk_10006D320, &type metadata for Clock.ClockHand.ClockHandShape);
    atomic_store(result, (unint64_t *)&qword_1000878A8);
  }
  return result;
}

void sub_100065144(uint64_t a1)
{
  uint64_t v1;

  sub_100040CC8(*(CGFloat *)(v1 + 16), *(CGFloat *)(v1 + 24), *(CGFloat *)(v1 + 32), *(CGFloat *)(v1 + 40), *(double *)(v1 + 48), *(double *)(v1 + 64), *(double *)(v1 + 72), a1, *(_BYTE *)(v1 + 56));
}

unint64_t sub_10006515C()
{
  unint64_t result;

  result = qword_1000878B0;
  if (!qword_1000878B0)
  {
    result = swift_getWitnessTable(&unk_10006D230, &type metadata for Clock.ClockHand.ClockHandConnector);
    atomic_store(result, (unint64_t *)&qword_1000878B0);
  }
  return result;
}

void sub_1000651A0()
{
  CGFloat *v0;

  sub_100040A08(v0[2], v0[3], v0[4], v0[5], v0[6], v0[7]);
}

uint64_t sub_1000651B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for MediumWorldClockView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  v8 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = type metadata accessor for WorldClockEntry(0);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + *(int *)(v9 + 20)));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + *(int *)(v1 + 24)));
  v10 = v7 + *(int *)(v1 + 32);
  v11 = type metadata accessor for WidgetRenderingMode(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100065278()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for SmallMultiWorldClockView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4));
  v8 = v7 + *(int *)(v1 + 28);
  v9 = type metadata accessor for WidgetRenderingMode(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100065304(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = *(_QWORD *)(a1 + 72);
  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(_QWORD *)(a1 + 88);
  v5 = *(_BYTE *)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 104);
  v7 = *(_QWORD *)(a1 + 160);
  v8 = *(_QWORD *)(a1 + 168);
  v9 = *(_BYTE *)(a1 + 176);
  v10 = *(_QWORD *)(a1 + 184);
  v13 = *(_QWORD *)(a1 + 248);
  v14 = *(_QWORD *)(a1 + 240);
  v12 = *(_BYTE *)(a1 + 256);
  v15 = *(_QWORD *)(a1 + 264);
  v16 = *(_QWORD *)(a1 + 272);
  v17 = *(_QWORD *)(a1 + 288);
  v19 = *(_QWORD *)(a1 + 312);
  v20 = *(_QWORD *)(a1 + 304);
  v18 = *(_BYTE *)(a1 + 320);
  v21 = *(_QWORD *)(a1 + 328);
  v22 = *(_QWORD *)(a1 + 336);
  v23 = *(_QWORD *)(a1 + 352);
  sub_1000511D8(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
  swift_bridgeObjectRetain(v2);
  sub_1000511D8(v3, v4, v5);
  swift_bridgeObjectRetain(v6);
  sub_1000511D8(v7, v8, v9);
  swift_bridgeObjectRetain(v10);
  sub_1000511D8(v14, v13, v12);
  swift_bridgeObjectRetain(v15);
  swift_retain(v16);
  swift_retain(v17);
  sub_1000511D8(v20, v19, v18);
  swift_bridgeObjectRetain(v21);
  swift_retain(v22);
  swift_retain(v23);
  return a1;
}

uint64_t sub_10006544C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = *(_QWORD *)(a1 + 72);
  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(_QWORD *)(a1 + 88);
  v5 = *(_BYTE *)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 104);
  v7 = *(_QWORD *)(a1 + 160);
  v8 = *(_QWORD *)(a1 + 168);
  v9 = *(_BYTE *)(a1 + 176);
  v10 = *(_QWORD *)(a1 + 184);
  v13 = *(_QWORD *)(a1 + 248);
  v14 = *(_QWORD *)(a1 + 240);
  v12 = *(_BYTE *)(a1 + 256);
  v16 = *(_QWORD *)(a1 + 272);
  v17 = *(_QWORD *)(a1 + 264);
  v15 = *(_QWORD *)(a1 + 288);
  v19 = *(_QWORD *)(a1 + 312);
  v20 = *(_QWORD *)(a1 + 304);
  v18 = *(_BYTE *)(a1 + 320);
  v22 = *(_QWORD *)(a1 + 336);
  v23 = *(_QWORD *)(a1 + 328);
  v21 = *(_QWORD *)(a1 + 352);
  sub_100010E24(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
  swift_bridgeObjectRelease(v2);
  sub_100010E24(v3, v4, v5);
  swift_bridgeObjectRelease(v6);
  sub_100010E24(v7, v8, v9);
  swift_bridgeObjectRelease(v10);
  sub_100010E24(v14, v13, v12);
  swift_release(v15);
  swift_release(v16);
  swift_bridgeObjectRelease(v17);
  sub_100010E24(v20, v19, v18);
  swift_release(v21);
  swift_release(v22);
  swift_bridgeObjectRelease(v23);
  return a1;
}

uint64_t sub_100065594(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 64);
  v5 = *(_BYTE *)(a1 + 72);
  v6 = *(_QWORD *)(a1 + 80);
  sub_1000511D8(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRetain(v2);
  sub_1000511D8(v3, v4, v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t sub_100065604(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 64);
  v5 = *(_BYTE *)(a1 + 72);
  v6 = *(_QWORD *)(a1 + 80);
  sub_100010E24(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRelease(v2);
  sub_100010E24(v3, v4, v5);
  swift_bridgeObjectRelease(v6);
  return a1;
}

unint64_t sub_100065674()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000878C8;
  if (!qword_1000878C8)
  {
    v1 = sub_100010DE0(&qword_1000878C0);
    sub_10001DDB4(&qword_1000878D0, &qword_1000878B8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000878C8);
  }
  return result;
}

uint64_t sub_1000656F8(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  sub_1000511D8(a1, a2, a3 & 1);
  return swift_bridgeObjectRetain(a4);
}

uint64_t sub_100065720(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  sub_100010E24(a1, a2, a3 & 1);
  return swift_bridgeObjectRelease(a4);
}

unint64_t sub_100065748()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100087910;
  if (!qword_100087910)
  {
    v1 = sub_100010DE0(&qword_100087908);
    sub_1000657CC();
    sub_10001DDB4(&qword_100086320, &qword_100086328, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100087910);
  }
  return result;
}

unint64_t sub_1000657CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100087918;
  if (!qword_100087918)
  {
    v1 = sub_100010DE0(&qword_100087920);
    sub_10001DDB4(&qword_100086108, &qword_100086110, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100087918);
  }
  return result;
}

unint64_t sub_100065850()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100087970;
  if (!qword_100087970)
  {
    v1 = sub_100010DE0(&qword_100087960);
    sub_100064CF8();
    sub_10001DDB4(&qword_100087870, &qword_100087878, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100087970);
  }
  return result;
}

unint64_t sub_1000658D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000879C0;
  if (!qword_1000879C0)
  {
    v1 = sub_100010DE0(&qword_1000879A8);
    sub_1000511E8();
    sub_10001DDB4(&qword_1000878D0, &qword_1000878B8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000879C0);
  }
  return result;
}

unint64_t sub_100065958()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100087A00;
  if (!qword_100087A00)
  {
    v1 = sub_100010DE0(&qword_1000879F8);
    sub_1000659DC();
    sub_10001DDB4(&qword_100086320, &qword_100086328, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100087A00);
  }
  return result;
}

unint64_t sub_1000659DC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100087A08;
  if (!qword_100087A08)
  {
    v1 = sub_100010DE0(&qword_100087A10);
    sub_100065A60();
    sub_10001DDB4(&qword_1000874C8, &qword_1000874D0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100087A08);
  }
  return result;
}

unint64_t sub_100065A60()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100087A18;
  if (!qword_100087A18)
  {
    v1 = sub_100010DE0(&qword_100087A20);
    sub_100051154();
    sub_10001DDB4(&qword_100086108, &qword_100086110, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100087A18);
  }
  return result;
}

uint64_t sub_100065AE4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 64);
  v3 = *(_QWORD *)(a1 + 96);
  v4 = *(_QWORD *)(a1 + 104);
  v5 = *(_BYTE *)(a1 + 112);
  v6 = *(_QWORD *)(a1 + 120);
  v7 = *(_QWORD *)(a1 + 160);
  v8 = *(_QWORD *)(a1 + 168);
  v9 = *(_QWORD *)(a1 + 184);
  v12 = *(_QWORD *)(a1 + 176);
  v10 = *(_QWORD *)(a1 + 192);
  swift_retain(*(_QWORD *)(a1 + 24));
  swift_retain(v2);
  sub_1000511D8(v3, v4, v5);
  swift_retain(v9);
  swift_retain(v10);
  swift_bridgeObjectRetain(v6);
  swift_retain(v7);
  swift_retain(v8);
  swift_retain(v12);
  return a1;
}

uint64_t sub_100065B9C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 96);
  v4 = *(_QWORD *)(a1 + 104);
  v5 = *(_BYTE *)(a1 + 112);
  v6 = *(_QWORD *)(a1 + 120);
  v7 = *(_QWORD *)(a1 + 160);
  v8 = *(_QWORD *)(a1 + 168);
  v9 = *(_QWORD *)(a1 + 176);
  v12 = *(_QWORD *)(a1 + 184);
  v10 = *(_QWORD *)(a1 + 192);
  swift_release(*(_QWORD *)(a1 + 64));
  swift_release(v2);
  sub_100010E24(v3, v4, v5);
  swift_release(v10);
  swift_release(v9);
  swift_release(v7);
  swift_bridgeObjectRelease(v6);
  swift_release(v8);
  swift_release(v12);
  return a1;
}

uint64_t sub_100065C54(uint64_t result)
{
  *(_BYTE *)(result + 441) = 1;
  return result;
}

unint64_t sub_100065C60()
{
  unint64_t result;

  result = qword_100087A70;
  if (!qword_100087A70)
  {
    result = swift_getWitnessTable(&unk_10006D928, &type metadata for AlarmPlaceholder);
    atomic_store(result, (unint64_t *)&qword_100087A70);
  }
  return result;
}

uint64_t sub_100065CA4(uint64_t result)
{
  *(_BYTE *)(result + 441) = 0;
  return result;
}

uint64_t sub_100065CAC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *(_QWORD *)(a1 + 72);
  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(_QWORD *)(a1 + 88);
  v5 = *(_BYTE *)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 104);
  v14 = *(_QWORD *)(a1 + 120);
  v15 = *(_QWORD *)(a1 + 112);
  v7 = *(_BYTE *)(a1 + 128);
  v17 = *(_QWORD *)(a1 + 136);
  v26 = *(_QWORD *)(a1 + 200);
  v27 = *(_QWORD *)(a1 + 192);
  v24 = *(_QWORD *)(a1 + 216);
  v25 = *(_QWORD *)(a1 + 208);
  v22 = *(_QWORD *)(a1 + 232);
  v23 = *(_QWORD *)(a1 + 224);
  v20 = *(_QWORD *)(a1 + 248);
  v21 = *(_QWORD *)(a1 + 240);
  v19 = *(_OWORD *)(a1 + 256);
  v18 = *(_OWORD *)(a1 + 272);
  v16 = *(_OWORD *)(a1 + 288);
  v12 = *(_OWORD *)(a1 + 320);
  v13 = *(_OWORD *)(a1 + 304);
  v9 = *(_QWORD *)(a1 + 336);
  v8 = *(_QWORD *)(a1 + 344);
  v10 = *(_BYTE *)(a1 + 352);
  sub_1000511D8(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
  swift_bridgeObjectRetain(v2);
  sub_1000511D8(v3, v4, v5);
  swift_bridgeObjectRetain(v6);
  sub_1000511D8(v15, v14, v7);
  swift_bridgeObjectRetain(v17);
  sub_100065DF4(v27, v26, v25, v24, v23, v22, v21, v20, v19, *((uint64_t *)&v19 + 1), v18, *((uint64_t *)&v18 + 1), v16, *((uint64_t *)&v16 + 1), v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v9,
    v8,
    v10);
  return a1;
}

uint64_t sub_100065DF4(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unsigned __int8 a21)
{
  if (a21 != 255)
    return sub_100065E58(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21 & 1);
  return result;
}

uint64_t sub_100065E58(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v22;
  uint64_t v23;

  v22 = a15;
  v23 = a13;
  if ((a21 & 1) != 0)
  {
    sub_1000511D8(a1, a2, a3 & 1);
    swift_bridgeObjectRetain(a4);
    swift_retain(a5);
    swift_retain(a7);
    sub_1000511D8(a9, a10, a11 & 1);
  }
  else
  {
    a12 = a16;
    sub_1000511D8(a1, a2, a3 & 1);
    swift_bridgeObjectRetain(a4);
    swift_retain(a11);
    sub_1000511D8(a13, a14, a15 & 1);
    v23 = a17;
    v22 = a19;
  }
  swift_bridgeObjectRetain(a12);
  swift_retain(v23);
  return swift_retain(v22);
}

uint64_t sub_100065F44(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *(_QWORD *)(a1 + 72);
  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(_QWORD *)(a1 + 88);
  v5 = *(_BYTE *)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 104);
  v14 = *(_QWORD *)(a1 + 120);
  v15 = *(_QWORD *)(a1 + 112);
  v7 = *(_BYTE *)(a1 + 128);
  v17 = *(_QWORD *)(a1 + 136);
  v26 = *(_QWORD *)(a1 + 200);
  v27 = *(_QWORD *)(a1 + 192);
  v24 = *(_QWORD *)(a1 + 216);
  v25 = *(_QWORD *)(a1 + 208);
  v22 = *(_QWORD *)(a1 + 232);
  v23 = *(_QWORD *)(a1 + 224);
  v20 = *(_QWORD *)(a1 + 248);
  v21 = *(_QWORD *)(a1 + 240);
  v19 = *(_OWORD *)(a1 + 256);
  v18 = *(_OWORD *)(a1 + 272);
  v16 = *(_OWORD *)(a1 + 288);
  v12 = *(_OWORD *)(a1 + 320);
  v13 = *(_OWORD *)(a1 + 304);
  v9 = *(_QWORD *)(a1 + 336);
  v8 = *(_QWORD *)(a1 + 344);
  v10 = *(_BYTE *)(a1 + 352);
  sub_100010E24(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
  swift_bridgeObjectRelease(v2);
  sub_100010E24(v3, v4, v5);
  swift_bridgeObjectRelease(v6);
  sub_100010E24(v15, v14, v7);
  swift_bridgeObjectRelease(v17);
  sub_10006608C(v27, v26, v25, v24, v23, v22, v21, v20, v19, *((uint64_t *)&v19 + 1), v18, *((uint64_t *)&v18 + 1), v16, *((uint64_t *)&v16 + 1), v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v9,
    v8,
    v10);
  return a1;
}

uint64_t sub_10006608C(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unsigned __int8 a21)
{
  if (a21 != 255)
    return sub_1000660F0(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21 & 1);
  return result;
}

uint64_t sub_1000660F0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v22;
  uint64_t v23;

  v22 = a15;
  v23 = a13;
  if ((a21 & 1) != 0)
  {
    sub_100010E24(a1, a2, a3 & 1);
    swift_release(a7);
    swift_release(a5);
    swift_bridgeObjectRelease(a4);
    sub_100010E24(a9, a10, a11 & 1);
  }
  else
  {
    a12 = a16;
    sub_100010E24(a1, a2, a3 & 1);
    swift_release(a11);
    swift_bridgeObjectRelease(a4);
    sub_100010E24(a13, a14, a15 & 1);
    v22 = a19;
    v23 = a17;
  }
  swift_release(v22);
  swift_release(v23);
  return swift_bridgeObjectRelease(a12);
}

double sub_1000661DC(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 160) = -1;
  return result;
}

uint64_t sub_100066200(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 160);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    v4);
  return a1;
}

uint64_t sub_10006626C(uint64_t result)
{
  *(_BYTE *)(result + 160) = 1;
  return result;
}

uint64_t sub_100066278(uint64_t result)
{
  *(_BYTE *)(result + 160) = 0;
  return result;
}

uint64_t sub_100066284(uint64_t a1)
{
  return sub_100066470(a1, (uint64_t (*)(uint64_t, uint64_t))sub_100045E50);
}

unint64_t sub_100066290()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100087AC8;
  if (!qword_100087AC8)
  {
    v1 = sub_100010DE0(&qword_100087AB8);
    sub_1000662FC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ClosedRange<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100087AC8);
  }
  return result;
}

unint64_t sub_1000662FC()
{
  unint64_t result;

  result = qword_100087AD0;
  if (!qword_100087AD0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_100087AD0);
  }
  return result;
}

unint64_t sub_100066340()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100087B10;
  if (!qword_100087B10)
  {
    v1 = sub_100010DE0(&qword_100087B08);
    sub_10001DDB4(&qword_100086108, &qword_100086110, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100087B10);
  }
  return result;
}

uint64_t sub_1000663C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for WorldClockRectangularSummary(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  v8 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = type metadata accessor for WorldClockEntry(0);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + *(int *)(v9 + 20)));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + *(int *)(v1 + 20)));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100066464(uint64_t a1)
{
  return sub_100066470(a1, (uint64_t (*)(uint64_t, uint64_t))sub_100045064);
}

uint64_t sub_100066470(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for WorldClockRectangularSummary(0) - 8) + 80);
  return a2(a1, v2 + ((v4 + 16) & ~v4));
}

unint64_t sub_1000664CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100087B58;
  if (!qword_100087B58)
  {
    v1 = sub_100010DE0(&qword_100087B50);
    sub_100066340();
    sub_10001DDB4(&qword_100086160, &qword_100086168, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100087B58);
  }
  return result;
}

uint64_t sub_100066550()
{
  return sub_100066610(type metadata accessor for SquareWidgetView);
}

uint64_t sub_10006655C@<X0>(uint64_t a1@<X8>)
{
  return sub_10006675C((void (*)(_QWORD))type metadata accessor for SquareWidgetView, a1);
}

unint64_t sub_100066568()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100087B90;
  if (!qword_100087B90)
  {
    v1 = sub_100010DE0(&qword_100087B78);
    sub_100067350(&qword_100087B88, &qword_100087B70);
    sub_10000D36C(&qword_100085DB8, type metadata accessor for CapMaxContentSizeCategory, (uint64_t)&unk_10006D4B0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100087B90);
  }
  return result;
}

uint64_t sub_100066604()
{
  return sub_100066610(type metadata accessor for NonNumericWidgetView);
}

uint64_t sub_100066610(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 16) & ~v4;
  v6 = *(_QWORD *)(v3 + 64);
  sub_100025728(*(_QWORD *)(v1 + v5 + 8), *(_BYTE *)(v1 + v5 + 16));
  v7 = (_QWORD *)(v1 + v5 + *(int *)(v2 + 24));
  v8 = sub_1000041D8(&qword_100085E28);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  return swift_deallocObject(v1, v5 + v6, v4 | 7);
}

uint64_t sub_1000666C8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000666D4((void (*)(_QWORD))type metadata accessor for NonNumericWidgetView, a1);
}

uint64_t sub_1000666D4@<X0>(void (*a1)(_QWORD)@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(((uint64_t (*)(_QWORD))a1)(0) - 8) + 80);
  return sub_100043564(v2 + ((v5 + 16) & ~v5), a1, a2);
}

uint64_t sub_10006672C()
{
  return sub_100066610(type metadata accessor for DateTimeWidgetView);
}

uint64_t sub_100066738@<X0>(uint64_t a1@<X8>)
{
  return sub_1000666D4((void (*)(_QWORD))type metadata accessor for DateTimeWidgetView, a1);
}

uint64_t sub_100066744()
{
  return sub_100066610(type metadata accessor for DigitalClockWidgetView);
}

uint64_t sub_100066750@<X0>(uint64_t a1@<X8>)
{
  return sub_10006675C((void (*)(_QWORD))type metadata accessor for DigitalClockWidgetView, a1);
}

uint64_t sub_10006675C@<X0>(void (*a1)(_QWORD)@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(((uint64_t (*)(_QWORD))a1)(0) - 8) + 80);
  return sub_100044138(v2 + ((v5 + 16) & ~v5), a1, a2);
}

uint64_t sub_1000667B4(uint64_t a1)
{
  swift_retain(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_1000667DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  if (a6)
  {
    swift_bridgeObjectRetain(a6);
    return swift_retain(a8);
  }
  return result;
}

_QWORD *sub_10006680C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[9];
  v3 = a1[13];
  swift_bridgeObjectRetain(a1[7]);
  swift_retain(v2);
  swift_retain(v3);
  return a1;
}

_QWORD *sub_100066854(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[7];
  v3 = a1[9];
  swift_release(a1[13]);
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_10006689C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  if (a6)
  {
    swift_bridgeObjectRelease(a6);
    return swift_release(a8);
  }
  return result;
}

unint64_t sub_1000668CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100087C10;
  if (!qword_100087C10)
  {
    v1 = sub_100010DE0(&qword_100087BF8);
    sub_10001DDB4(&qword_100087C18, &qword_100087BF0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100087C10);
  }
  return result;
}

unint64_t sub_100066948()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100087DC0;
  if (!qword_100087DC0)
  {
    v1 = sub_100010DE0(&qword_100087D88);
    sub_1000669CC();
    sub_10000D36C(&qword_1000876C0, type metadata accessor for ClockWidgetAccentableOpacity, (uint64_t)&unk_10006D0B0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100087DC0);
  }
  return result;
}

unint64_t sub_1000669CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100087DC8;
  if (!qword_100087DC8)
  {
    v1 = sub_100010DE0(&qword_100087DD0);
    sub_10001DDB4(&qword_100087DD8, &qword_100087DE0, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100087DC8);
  }
  return result;
}

unint64_t sub_100066A50()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100087E00;
  if (!qword_100087E00)
  {
    v1 = sub_100010DE0(&qword_100087D68);
    sub_10001DDB4(&qword_100087568, &qword_100087570, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    v2[0] = sub_100010DE0(&qword_100087580);
    v2[1] = sub_10001DDB4(&qword_100087578, &qword_100087580, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100087E00);
  }
  return result;
}

unint64_t sub_100066B24()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  result = qword_100087E08;
  if (!qword_100087E08)
  {
    v1 = sub_100010DE0(&qword_100087D38);
    v4 = sub_100010DE0(&qword_100086018);
    v5 = sub_1000633D0();
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
    v2 = sub_100010DE0(&qword_1000875A8);
    v3 = sub_10001DDB4(&qword_1000875A0, &qword_1000875A8, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    v4 = v2;
    v5 = v3;
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100087E08);
  }
  return result;
}

uint64_t sub_100066C08(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 144);
  v4 = *(_QWORD *)(a1 + 152);
  sub_1000511D8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_retain(v4);
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  return a1;
}

uint64_t sub_100066C60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 144);
  v4 = *(_QWORD *)(a1 + 152);
  sub_100010E24(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  swift_release(v4);
  return a1;
}

unint64_t sub_100066CB8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100087E70;
  if (!qword_100087E70)
  {
    v1 = sub_100010DE0(&qword_100087E50);
    sub_100066D3C();
    sub_10001DDB4(&qword_100086160, &qword_100086168, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100087E70);
  }
  return result;
}

unint64_t sub_100066D3C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100087E78;
  if (!qword_100087E78)
  {
    v1 = sub_100010DE0(&qword_100087E48);
    sub_100066DC0();
    sub_10001DDB4(&qword_1000874C8, &qword_1000874D0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100087E78);
  }
  return result;
}

unint64_t sub_100066DC0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100087E80;
  if (!qword_100087E80)
  {
    v1 = sub_100010DE0(&qword_100087E40);
    sub_100050D28(&qword_100087E88, &qword_100087E90, &qword_100086320, &qword_100086328);
    sub_10001DDB4(&qword_100087728, &qword_1000860A8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100087E80);
  }
  return result;
}

uint64_t sub_100066E64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for MediumWorldClockView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v0 + v4;
  v8 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = type metadata accessor for WorldClockEntry(0);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + *(int *)(v9 + 20)));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + *(int *)(v1 + 24)));
  v10 = v7 + *(int *)(v1 + 32);
  v11 = type metadata accessor for WidgetRenderingMode(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, ((((v6 + 79) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

uint64_t sub_100066F4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = *(_QWORD *)(type metadata accessor for MediumWorldClockView(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10002F378(a1, v2 + v6, v2 + v7, a2, *(double *)(v2 + ((v7 + 79) & 0xFFFFFFFFFFFFFFF8)), *(double *)(v2 + ((((v7 + 79) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)));
}

unint64_t sub_100066FC4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100087F08;
  if (!qword_100087F08)
  {
    v1 = sub_100010DE0(&qword_100087EF8);
    sub_100067028();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100087F08);
  }
  return result;
}

unint64_t sub_100067028()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100087F10;
  if (!qword_100087F10)
  {
    v1 = sub_100010DE0(&qword_100087F18);
    sub_10000D36C(&qword_100087F20, type metadata accessor for MediumClockFaceView, (uint64_t)&unk_10006D010);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100087F10);
  }
  return result;
}

uint64_t sub_1000670AC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 88, 7);
}

uint64_t sub_1000670D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;

  v1 = type metadata accessor for SmallMultiWorldClockView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 80) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  v7 = (_QWORD *)(v0 + v4);
  swift_bridgeObjectRelease(*v7);
  v8 = (char *)v7 + *(int *)(v1 + 28);
  v9 = type metadata accessor for WidgetRenderingMode(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10006716C@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SmallMultiWorldClockView(0) - 8) + 80);
  return sub_10002DB3C(a1, *(_QWORD *)(v2 + 16), v2 + 24, v2 + ((v5 + 80) & ~v5), a2);
}

unint64_t sub_1000671C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100087F90;
  if (!qword_100087F90)
  {
    v1 = sub_100010DE0(&qword_100087F88);
    sub_10001DDB4(&qword_100087F98, &qword_100087FA0, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100087F90);
  }
  return result;
}

uint64_t sub_100067244()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;

  v1 = type metadata accessor for SmallMultiWorldClockView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 72) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 24));
  v7 = (_QWORD *)(v0 + v4);
  swift_bridgeObjectRelease(*v7);
  v8 = (char *)v7 + *(int *)(v1 + 28);
  v9 = type metadata accessor for WidgetRenderingMode(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_1000672EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;

  v5 = *(_QWORD *)(type metadata accessor for SmallMultiWorldClockView(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  return sub_10002DEAC(a1, v2 + 16, v2 + v6, *(_QWORD *)(v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFF8)), a2);
}

uint64_t sub_100067350(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100010DE0(a2);
    sub_10000D36C(&qword_100085F00, type metadata accessor for SmallWorldClockView, (uint64_t)&unk_10006CF20);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000673CC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 72, 7);
}

unint64_t sub_1000673F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100088028;
  if (!qword_100088028)
  {
    v1 = sub_100010DE0(&qword_100088018);
    sub_10006745C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100088028);
  }
  return result;
}

unint64_t sub_10006745C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100088030;
  if (!qword_100088030)
  {
    v1 = sub_100010DE0(&qword_100088020);
    sub_100067500(&qword_100088038, &qword_100088040, (void (*)(void))sub_100067564, (uint64_t)&protocol conformance descriptor for <A> Group<A>);
    sub_10001DDB4(&qword_1000878D0, &qword_1000878B8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100088030);
  }
  return result;
}

uint64_t sub_100067500(unint64_t *a1, uint64_t *a2, void (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_100010DE0(a2);
    a3();
    result = swift_getWitnessTable(a4, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100067564()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100088048;
  if (!qword_100088048)
  {
    v1 = sub_100010DE0(&qword_100088050);
    sub_100064B98(&qword_100088058, &qword_100088060);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100088048);
  }
  return result;
}

uint64_t sub_1000675E8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if ((a6 & 1) == 0)
    return sub_1000656F8(a1, a2, a3, a4);
  sub_1000511D8(a1, a2, a3 & 1);
  return swift_bridgeObjectRetain(a4);
}

uint64_t sub_100067628(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if ((a6 & 1) == 0)
    return sub_100065720(a1, a2, a3, a4);
  sub_100010E24(a1, a2, a3 & 1);
  return swift_bridgeObjectRelease(a4);
}

uint64_t sub_100067668()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v1 = (int *)type metadata accessor for WorldClockWidgetViewSingle(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  v7 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v0 + v4, v7);
  v8 = type metadata accessor for WorldClockEntry(0);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + *(int *)(v8 + 20)));
  v9 = (_QWORD *)(v0 + v4 + v1[5]);
  v10 = sub_1000041D8(&qword_1000850C0);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v9, v11);
  }
  else
  {
    swift_release(*v9);
  }
  sub_100025728(*(_QWORD *)(v6 + v1[6]), *(_BYTE *)(v6 + v1[6] + 8));
  v12 = (_QWORD *)(v6 + v1[7]);
  v13 = sub_1000041D8(&qword_100085E28);
  if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
  {
    v14 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v12, v14);
  }
  else
  {
    swift_release(*v12);
  }
  swift_release(*(_QWORD *)(v6 + v1[8]));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1000677C0(uint64_t a1)
{
  return sub_1000677D4(a1, type metadata accessor for WorldClockWidgetViewSingle, (uint64_t (*)(uint64_t, uint64_t))sub_100025D44);
}

uint64_t sub_1000677D4(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(a2(0) - 8) + 80);
  return a3(a1, v3 + ((v5 + 16) & ~v5));
}

uint64_t sub_100067830()
{
  __int128 v1;
  uint64_t v2;

  if (!qword_10008BCA0)
  {
    v1 = off_1000832D0;
    v2 = 0;
    qword_10008BCA0 = _sl_dlopen(&v1, 0);
  }
  return qword_10008BCA0;
}

uint64_t sub_100067914()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  _QWORD v4[3];

  KeyPath = swift_getKeyPath(&unk_10006DF40);
  v4[0] = v0;
  v2 = sub_100067AAC();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4, KeyPath, v2);
  swift_release(KeyPath);
  swift_beginAccess(v0 + 16, v4, 0, 0);
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t sub_100067994@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  uint64_t result;
  _QWORD v7[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_10006DF40);
  v7[0] = v3;
  v5 = sub_100067AAC();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v7, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_beginAccess(v3 + 16, v7, 0, 0);
  *a2 = *(_BYTE *)(v3 + 16);
  return result;
}

uint64_t sub_100067A1C(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_10006DF40);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_100067AAC();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_100067C14, v7, (char *)&type metadata for () + 8, v5);
  return swift_release(KeyPath);
}

unint64_t sub_100067AAC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100085240;
  if (!qword_100085240)
  {
    v1 = type metadata accessor for ClockWidgetEnvironmentObject(255);
    result = swift_getWitnessTable(&unk_10006DF68, v1);
    atomic_store(result, (unint64_t *)&qword_100085240);
  }
  return result;
}

uint64_t type metadata accessor for ClockWidgetEnvironmentObject(uint64_t a1)
{
  uint64_t result;

  result = qword_10008BD40;
  if (!qword_10008BD40)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ClockWidgetEnvironmentObject);
  return result;
}

uint64_t sub_100067B30(char a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  KeyPath = swift_getKeyPath(&unk_10006DF40);
  v7 = v1;
  v8 = a1;
  v9 = v1;
  v4 = sub_100067AAC();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_100067C14, &v6, (char *)&type metadata for () + 8, v4);
  return swift_release(KeyPath);
}

uint64_t sub_100067BC0(uint64_t a1)
{
  unint64_t v2;
  uint64_t v4;

  v2 = sub_100067AAC();
  return ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, a1, v2);
}

uint64_t sub_100067C14()
{
  return sub_1000680A8();
}

uint64_t sub_100067C28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v10;

  v8 = sub_100067AAC();
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v10, a1, a2, a3, a4, v8);
}

void (*sub_100067CB4(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t KeyPath;
  unint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = malloc(0x30uLL);
  *a1 = v4;
  v4[3] = v2;
  KeyPath = swift_getKeyPath(&unk_10006DF40);
  v4[4] = OBJC_IVAR____TtC16WorldClockWidget28ClockWidgetEnvironmentObject___observationRegistrar;
  *v4 = v2;
  v6 = sub_100067AAC();
  v4[5] = v6;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4, KeyPath, v6);
  swift_release(KeyPath);
  *v4 = v2;
  v7 = swift_getKeyPath(&unk_10006DF40);
  ObservationRegistrar.willSet<A, B>(_:keyPath:)(v4, v7, v6);
  swift_release(v7);
  swift_beginAccess(v2 + 16, v4, 33, 0);
  return sub_100067D90;
}

void sub_100067D90(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t KeyPath;

  v1 = (_QWORD *)*a1;
  swift_endAccess(*a1);
  v2 = v1[5];
  *v1 = v1[3];
  KeyPath = swift_getKeyPath(&unk_10006DF40);
  ObservationRegistrar.didSet<A, B>(_:keyPath:)(v1, KeyPath, v2);
  swift_release(KeyPath);
  free(v1);
}

uint64_t sub_100067DF8()
{
  return 2;
}

uint64_t sub_100067E00(char a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  ObservationRegistrar.init()();
  *(_BYTE *)(v3 + 16) = a1;
  return v3;
}

uint64_t sub_100067E48(char a1)
{
  uint64_t v1;

  ObservationRegistrar.init()();
  *(_BYTE *)(v1 + 16) = a1;
  return v1;
}

BOOL sub_100067E80()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  _QWORD v4[3];

  KeyPath = swift_getKeyPath(&unk_10006DF40);
  v4[0] = v0;
  v2 = sub_100067AAC();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4, KeyPath, v2);
  swift_release(KeyPath);
  swift_beginAccess(v0 + 16, v4, 0, 0);
  return (*(_BYTE *)(v0 + 16) & 0xFB) == 0;
}

BOOL sub_100067F0C()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  _QWORD v4[3];

  KeyPath = swift_getKeyPath(&unk_10006DF40);
  v4[0] = v0;
  v2 = sub_100067AAC();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4, KeyPath, v2);
  swift_release(KeyPath);
  swift_beginAccess(v0 + 16, v4, 0, 0);
  return *(_BYTE *)(v0 + 16) == 0;
}

uint64_t sub_100067F94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC16WorldClockWidget28ClockWidgetEnvironmentObject___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_100067FD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC16WorldClockWidget28ClockWidgetEnvironmentObject___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100068028()
{
  return type metadata accessor for ClockWidgetEnvironmentObject(0);
}

uint64_t sub_100068030(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_10006DFD0;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1000680A8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t result;
  _BYTE v4[24];

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_BYTE *)(v0 + 24);
  result = swift_beginAccess(v1 + 16, v4, 1, 0);
  *(_BYTE *)(v1 + 16) = v2;
  return result;
}

id sub_1000680F8()
{
  uint64_t v0;
  uint64_t ObjCClassFromMetadata;
  id result;

  v0 = type metadata accessor for ResourceBundleClass();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v0);
  result = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  qword_10008BD58 = (uint64_t)result;
  return result;
}

uint64_t sub_100068148()
{
  uint64_t v0;

  v0 = type metadata accessor for ColorResource(0);
  sub_100021788(v0, qword_10008BF88);
  sub_10001EB00(v0, (uint64_t)qword_10008BF88);
  if (qword_10008BD50 != -1)
    swift_once(&qword_10008BD50, sub_1000680F8);
  return ColorResource.init(name:bundle:)(0xD000000000000011, 0x800000010006F620, (id)qword_10008BD58);
}

uint64_t sub_1000681E4()
{
  return sub_10001FD50(&qword_10008BD60, (uint64_t (*)(_QWORD))&type metadata accessor for ColorResource, (uint64_t)qword_10008BF88);
}

uint64_t sub_100068208@<X0>(uint64_t a1@<X8>)
{
  return sub_100069950(&qword_10008BD60, (uint64_t (*)(_QWORD))&type metadata accessor for ColorResource, (uint64_t)qword_10008BF88, (uint64_t)sub_100068148, a1);
}

uint64_t sub_10006822C()
{
  uint64_t v0;

  v0 = type metadata accessor for ColorResource(0);
  sub_100021788(v0, qword_10008BFA0);
  sub_10001EB00(v0, (uint64_t)qword_10008BFA0);
  if (qword_10008BD50 != -1)
    swift_once(&qword_10008BD50, sub_1000680F8);
  return ColorResource.init(name:bundle:)(0xD000000000000015, 0x800000010006F600, (id)qword_10008BD58);
}

uint64_t sub_1000682C8()
{
  return sub_10001FD50(&qword_10008BD68, (uint64_t (*)(_QWORD))&type metadata accessor for ColorResource, (uint64_t)qword_10008BFA0);
}

uint64_t sub_1000682EC@<X0>(uint64_t a1@<X8>)
{
  return sub_100069950(&qword_10008BD68, (uint64_t (*)(_QWORD))&type metadata accessor for ColorResource, (uint64_t)qword_10008BFA0, (uint64_t)sub_10006822C, a1);
}

uint64_t sub_100068310()
{
  uint64_t v0;

  v0 = type metadata accessor for ImageResource(0);
  sub_100021788(v0, qword_10008BFB8);
  sub_10001EB00(v0, (uint64_t)qword_10008BFB8);
  if (qword_10008BD50 != -1)
    swift_once(&qword_10008BD50, sub_1000680F8);
  return ImageResource.init(name:bundle:)(0xD000000000000020, 0x800000010006F5D0, (id)qword_10008BD58);
}

uint64_t sub_1000683AC()
{
  return sub_10001FD50(&qword_10008BD70, (uint64_t (*)(_QWORD))&type metadata accessor for ImageResource, (uint64_t)qword_10008BFB8);
}

uint64_t sub_1000683D0@<X0>(uint64_t a1@<X8>)
{
  return sub_100069950(&qword_10008BD70, (uint64_t (*)(_QWORD))&type metadata accessor for ImageResource, (uint64_t)qword_10008BFB8, (uint64_t)sub_100068310, a1);
}

uint64_t sub_1000683F4()
{
  uint64_t v0;

  v0 = type metadata accessor for ImageResource(0);
  sub_100021788(v0, qword_10008BFD0);
  sub_10001EB00(v0, (uint64_t)qword_10008BFD0);
  if (qword_10008BD50 != -1)
    swift_once(&qword_10008BD50, sub_1000680F8);
  return ImageResource.init(name:bundle:)(0xD000000000000026, 0x800000010006F5A0, (id)qword_10008BD58);
}

uint64_t sub_100068490()
{
  return sub_10001FD50(&qword_10008BD78, (uint64_t (*)(_QWORD))&type metadata accessor for ImageResource, (uint64_t)qword_10008BFD0);
}

uint64_t sub_1000684B4@<X0>(uint64_t a1@<X8>)
{
  return sub_100069950(&qword_10008BD78, (uint64_t (*)(_QWORD))&type metadata accessor for ImageResource, (uint64_t)qword_10008BFD0, (uint64_t)sub_1000683F4, a1);
}

uint64_t sub_1000684D8()
{
  uint64_t v0;

  v0 = type metadata accessor for ImageResource(0);
  sub_100021788(v0, qword_10008BFE8);
  sub_10001EB00(v0, (uint64_t)qword_10008BFE8);
  if (qword_10008BD50 != -1)
    swift_once(&qword_10008BD50, sub_1000680F8);
  return ImageResource.init(name:bundle:)(0xD000000000000020, 0x800000010006F570, (id)qword_10008BD58);
}

uint64_t sub_100068574()
{
  return sub_10001FD50(&qword_10008BD80, (uint64_t (*)(_QWORD))&type metadata accessor for ImageResource, (uint64_t)qword_10008BFE8);
}

uint64_t sub_100068598@<X0>(uint64_t a1@<X8>)
{
  return sub_100069950(&qword_10008BD80, (uint64_t (*)(_QWORD))&type metadata accessor for ImageResource, (uint64_t)qword_10008BFE8, (uint64_t)sub_1000684D8, a1);
}

uint64_t sub_1000685BC()
{
  uint64_t v0;

  v0 = type metadata accessor for ImageResource(0);
  sub_100021788(v0, qword_10008C000);
  sub_10001EB00(v0, (uint64_t)qword_10008C000);
  if (qword_10008BD50 != -1)
    swift_once(&qword_10008BD50, sub_1000680F8);
  return ImageResource.init(name:bundle:)(0xD000000000000026, 0x800000010006F540, (id)qword_10008BD58);
}

uint64_t sub_100068658()
{
  return sub_10001FD50(&qword_10008BD88, (uint64_t (*)(_QWORD))&type metadata accessor for ImageResource, (uint64_t)qword_10008C000);
}

uint64_t sub_10006867C@<X0>(uint64_t a1@<X8>)
{
  return sub_100069950(&qword_10008BD88, (uint64_t (*)(_QWORD))&type metadata accessor for ImageResource, (uint64_t)qword_10008C000, (uint64_t)sub_1000685BC, a1);
}

uint64_t sub_1000686A0()
{
  uint64_t v0;

  v0 = type metadata accessor for ImageResource(0);
  sub_100021788(v0, qword_10008C018);
  sub_10001EB00(v0, (uint64_t)qword_10008C018);
  if (qword_10008BD50 != -1)
    swift_once(&qword_10008BD50, sub_1000680F8);
  return ImageResource.init(name:bundle:)(0x756F72676B636162, 0xEA0000000000646ELL, (id)qword_10008BD58);
}

uint64_t sub_10006873C()
{
  return sub_10001FD50(&qword_10008BD90, (uint64_t (*)(_QWORD))&type metadata accessor for ImageResource, (uint64_t)qword_10008C018);
}

uint64_t sub_100068760@<X0>(uint64_t a1@<X8>)
{
  return sub_100069950(&qword_10008BD90, (uint64_t (*)(_QWORD))&type metadata accessor for ImageResource, (uint64_t)qword_10008C018, (uint64_t)sub_1000686A0, a1);
}

uint64_t sub_100068784()
{
  uint64_t v0;

  v0 = type metadata accessor for ImageResource(0);
  sub_100021788(v0, qword_10008C030);
  sub_10001EB00(v0, (uint64_t)qword_10008C030);
  if (qword_10008BD50 != -1)
    swift_once(&qword_10008BD50, sub_1000680F8);
  return ImageResource.init(name:bundle:)(0x616D736B636F6C63, 0xEA00000000006C6CLL, (id)qword_10008BD58);
}

uint64_t sub_100068820()
{
  return sub_10001FD50(&qword_10008BD98, (uint64_t (*)(_QWORD))&type metadata accessor for ImageResource, (uint64_t)qword_10008C030);
}

uint64_t sub_100068844@<X0>(uint64_t a1@<X8>)
{
  return sub_100069950(&qword_10008BD98, (uint64_t (*)(_QWORD))&type metadata accessor for ImageResource, (uint64_t)qword_10008C030, (uint64_t)sub_100068784, a1);
}

uint64_t sub_100068868()
{
  uint64_t v0;

  v0 = type metadata accessor for ImageResource(0);
  sub_100021788(v0, qword_10008C048);
  sub_10001EB00(v0, (uint64_t)qword_10008C048);
  if (qword_10008BD50 != -1)
    swift_once(&qword_10008BD50, sub_1000680F8);
  return ImageResource.init(name:bundle:)(0x616C622D65636166, 0xEA00000000006B63, (id)qword_10008BD58);
}

uint64_t sub_100068904()
{
  return sub_10001FD50(&qword_10008BDA0, (uint64_t (*)(_QWORD))&type metadata accessor for ImageResource, (uint64_t)qword_10008C048);
}

uint64_t sub_100068928@<X0>(uint64_t a1@<X8>)
{
  return sub_100069950(&qword_10008BDA0, (uint64_t (*)(_QWORD))&type metadata accessor for ImageResource, (uint64_t)qword_10008C048, (uint64_t)sub_100068868, a1);
}

uint64_t sub_10006894C()
{
  uint64_t v0;

  v0 = type metadata accessor for ImageResource(0);
  sub_100021788(v0, qword_10008C060);
  sub_10001EB00(v0, (uint64_t)qword_10008C060);
  if (qword_10008BD50 != -1)
    swift_once(&qword_10008BD50, sub_1000680F8);
  return ImageResource.init(name:bundle:)(0xD000000000000011, 0x800000010006F520, (id)qword_10008BD58);
}

uint64_t sub_1000689E8()
{
  return sub_10001FD50(&qword_10008BDA8, (uint64_t (*)(_QWORD))&type metadata accessor for ImageResource, (uint64_t)qword_10008C060);
}

uint64_t sub_100068A0C@<X0>(uint64_t a1@<X8>)
{
  return sub_100069950(&qword_10008BDA8, (uint64_t (*)(_QWORD))&type metadata accessor for ImageResource, (uint64_t)qword_10008C060, (uint64_t)sub_10006894C, a1);
}

uint64_t sub_100068A30()
{
  uint64_t v0;

  v0 = type metadata accessor for ImageResource(0);
  sub_100021788(v0, qword_10008C078);
  sub_10001EB00(v0, (uint64_t)qword_10008C078);
  if (qword_10008BD50 != -1)
    swift_once(&qword_10008BD50, sub_1000680F8);
  return ImageResource.init(name:bundle:)(0xD000000000000015, 0x800000010006F500, (id)qword_10008BD58);
}

uint64_t sub_100068ACC()
{
  return sub_10001FD50(&qword_10008BDB0, (uint64_t (*)(_QWORD))&type metadata accessor for ImageResource, (uint64_t)qword_10008C078);
}

uint64_t sub_100068AF0@<X0>(uint64_t a1@<X8>)
{
  return sub_100069950(&qword_10008BDB0, (uint64_t (*)(_QWORD))&type metadata accessor for ImageResource, (uint64_t)qword_10008C078, (uint64_t)sub_100068A30, a1);
}

uint64_t sub_100068B14()
{
  uint64_t v0;

  v0 = type metadata accessor for ImageResource(0);
  sub_100021788(v0, qword_10008C090);
  sub_10001EB00(v0, (uint64_t)qword_10008C090);
  if (qword_10008BD50 != -1)
    swift_once(&qword_10008BD50, sub_1000680F8);
  return ImageResource.init(name:bundle:)(0xD000000000000013, 0x800000010006F2A0, (id)qword_10008BD58);
}

uint64_t sub_100068BB0()
{
  return sub_10001FD50(&qword_10008BDB8, (uint64_t (*)(_QWORD))&type metadata accessor for ImageResource, (uint64_t)qword_10008C090);
}

uint64_t sub_100068BD4@<X0>(uint64_t a1@<X8>)
{
  return sub_100069950(&qword_10008BDB8, (uint64_t (*)(_QWORD))&type metadata accessor for ImageResource, (uint64_t)qword_10008C090, (uint64_t)sub_100068B14, a1);
}

uint64_t sub_100068BF8()
{
  uint64_t v0;

  v0 = type metadata accessor for ImageResource(0);
  sub_100021788(v0, qword_10008C0A8);
  sub_10001EB00(v0, (uint64_t)qword_10008C0A8);
  if (qword_10008BD50 != -1)
    swift_once(&qword_10008BD50, sub_1000680F8);
  return ImageResource.init(name:bundle:)(0xD00000000000001ALL, 0x800000010006F280, (id)qword_10008BD58);
}

uint64_t sub_100068C94()
{
  return sub_10001FD50(&qword_10008BDC0, (uint64_t (*)(_QWORD))&type metadata accessor for ImageResource, (uint64_t)qword_10008C0A8);
}

uint64_t sub_100068CB8@<X0>(uint64_t a1@<X8>)
{
  return sub_100069950(&qword_10008BDC0, (uint64_t (*)(_QWORD))&type metadata accessor for ImageResource, (uint64_t)qword_10008C0A8, (uint64_t)sub_100068BF8, a1);
}

uint64_t sub_100068CDC()
{
  uint64_t v0;

  v0 = type metadata accessor for ImageResource(0);
  sub_100021788(v0, qword_10008C0C0);
  sub_10001EB00(v0, (uint64_t)qword_10008C0C0);
  if (qword_10008BD50 != -1)
    swift_once(&qword_10008BD50, sub_1000680F8);
  return ImageResource.init(name:bundle:)(0xD00000000000001ELL, 0x800000010006F260, (id)qword_10008BD58);
}

uint64_t sub_100068D78()
{
  return sub_10001FD50(&qword_10008BDC8, (uint64_t (*)(_QWORD))&type metadata accessor for ImageResource, (uint64_t)qword_10008C0C0);
}

uint64_t sub_100068D9C@<X0>(uint64_t a1@<X8>)
{
  return sub_100069950(&qword_10008BDC8, (uint64_t (*)(_QWORD))&type metadata accessor for ImageResource, (uint64_t)qword_10008C0C0, (uint64_t)sub_100068CDC, a1);
}

uint64_t sub_100068DC0()
{
  uint64_t v0;

  v0 = type metadata accessor for ImageResource(0);
  sub_100021788(v0, qword_10008C0D8);
  sub_10001EB00(v0, (uint64_t)qword_10008C0D8);
  if (qword_10008BD50 != -1)
    swift_once(&qword_10008BD50, sub_1000680F8);
  return ImageResource.init(name:bundle:)(0xD000000000000012, 0x800000010006F390, (id)qword_10008BD58);
}

uint64_t sub_100068E5C()
{
  return sub_10001FD50(&qword_10008BDD0, (uint64_t (*)(_QWORD))&type metadata accessor for ImageResource, (uint64_t)qword_10008C0D8);
}

uint64_t sub_100068E80@<X0>(uint64_t a1@<X8>)
{
  return sub_100069950(&qword_10008BDD0, (uint64_t (*)(_QWORD))&type metadata accessor for ImageResource, (uint64_t)qword_10008C0D8, (uint64_t)sub_100068DC0, a1);
}

uint64_t sub_100068EA4()
{
  uint64_t v0;

  v0 = type metadata accessor for ImageResource(0);
  sub_100021788(v0, qword_10008C0F0);
  sub_10001EB00(v0, (uint64_t)qword_10008C0F0);
  if (qword_10008BD50 != -1)
    swift_once(&qword_10008BD50, sub_1000680F8);
  return ImageResource.init(name:bundle:)(0x6572672D65636166, 0xE900000000000079, (id)qword_10008BD58);
}

uint64_t sub_100068F40()
{
  return sub_10001FD50(&qword_10008BDD8, (uint64_t (*)(_QWORD))&type metadata accessor for ImageResource, (uint64_t)qword_10008C0F0);
}

uint64_t sub_100068F64@<X0>(uint64_t a1@<X8>)
{
  return sub_100069950(&qword_10008BDD8, (uint64_t (*)(_QWORD))&type metadata accessor for ImageResource, (uint64_t)qword_10008C0F0, (uint64_t)sub_100068EA4, a1);
}

uint64_t sub_100068F88()
{
  uint64_t v0;

  v0 = type metadata accessor for ImageResource(0);
  sub_100021788(v0, qword_10008C108);
  sub_10001EB00(v0, (uint64_t)qword_10008C108);
  if (qword_10008BD50 != -1)
    swift_once(&qword_10008BD50, sub_1000680F8);
  return ImageResource.init(name:bundle:)(0xD000000000000015, 0x800000010006F220, (id)qword_10008BD58);
}

uint64_t sub_100069024()
{
  return sub_10001FD50(&qword_10008BDE0, (uint64_t (*)(_QWORD))&type metadata accessor for ImageResource, (uint64_t)qword_10008C108);
}

uint64_t sub_100069048@<X0>(uint64_t a1@<X8>)
{
  return sub_100069950(&qword_10008BDE0, (uint64_t (*)(_QWORD))&type metadata accessor for ImageResource, (uint64_t)qword_10008C108, (uint64_t)sub_100068F88, a1);
}

uint64_t sub_10006906C()
{
  uint64_t v0;

  v0 = type metadata accessor for ImageResource(0);
  sub_100021788(v0, qword_10008C120);
  sub_10001EB00(v0, (uint64_t)qword_10008C120);
  if (qword_10008BD50 != -1)
    swift_once(&qword_10008BD50, sub_1000680F8);
  return ImageResource.init(name:bundle:)(0xD000000000000014, 0x800000010006F240, (id)qword_10008BD58);
}

uint64_t sub_100069108()
{
  return sub_10001FD50(&qword_10008BDE8, (uint64_t (*)(_QWORD))&type metadata accessor for ImageResource, (uint64_t)qword_10008C120);
}

uint64_t sub_10006912C@<X0>(uint64_t a1@<X8>)
{
  return sub_100069950(&qword_10008BDE8, (uint64_t (*)(_QWORD))&type metadata accessor for ImageResource, (uint64_t)qword_10008C120, (uint64_t)sub_10006906C, a1);
}

uint64_t sub_100069150()
{
  uint64_t v0;

  v0 = type metadata accessor for ImageResource(0);
  sub_100021788(v0, qword_10008C138);
  sub_10001EB00(v0, (uint64_t)qword_10008C138);
  if (qword_10008BD50 != -1)
    swift_once(&qword_10008BD50, sub_1000680F8);
  return ImageResource.init(name:bundle:)(0xD000000000000011, 0x800000010006F320, (id)qword_10008BD58);
}

uint64_t sub_1000691EC()
{
  return sub_10001FD50(&qword_10008BDF0, (uint64_t (*)(_QWORD))&type metadata accessor for ImageResource, (uint64_t)qword_10008C138);
}

uint64_t sub_100069210@<X0>(uint64_t a1@<X8>)
{
  return sub_100069950(&qword_10008BDF0, (uint64_t (*)(_QWORD))&type metadata accessor for ImageResource, (uint64_t)qword_10008C138, (uint64_t)sub_100069150, a1);
}

uint64_t sub_100069234()
{
  uint64_t v0;

  v0 = type metadata accessor for ImageResource(0);
  sub_100021788(v0, qword_10008C150);
  sub_10001EB00(v0, (uint64_t)qword_10008C150);
  if (qword_10008BD50 != -1)
    swift_once(&qword_10008BD50, sub_1000680F8);
  return ImageResource.init(name:bundle:)(0xD000000000000018, 0x800000010006F300, (id)qword_10008BD58);
}

uint64_t sub_1000692D0()
{
  return sub_10001FD50(&qword_10008BDF8, (uint64_t (*)(_QWORD))&type metadata accessor for ImageResource, (uint64_t)qword_10008C150);
}

uint64_t sub_1000692F4@<X0>(uint64_t a1@<X8>)
{
  return sub_100069950(&qword_10008BDF8, (uint64_t (*)(_QWORD))&type metadata accessor for ImageResource, (uint64_t)qword_10008C150, (uint64_t)sub_100069234, a1);
}

uint64_t sub_100069318()
{
  uint64_t v0;

  v0 = type metadata accessor for ImageResource(0);
  sub_100021788(v0, qword_10008C168);
  sub_10001EB00(v0, (uint64_t)qword_10008C168);
  if (qword_10008BD50 != -1)
    swift_once(&qword_10008BD50, sub_1000680F8);
  return ImageResource.init(name:bundle:)(0xD00000000000001CLL, 0x800000010006F2E0, (id)qword_10008BD58);
}

uint64_t sub_1000693B4()
{
  return sub_10001FD50(&qword_10008BE00, (uint64_t (*)(_QWORD))&type metadata accessor for ImageResource, (uint64_t)qword_10008C168);
}

uint64_t sub_1000693D8@<X0>(uint64_t a1@<X8>)
{
  return sub_100069950(&qword_10008BE00, (uint64_t (*)(_QWORD))&type metadata accessor for ImageResource, (uint64_t)qword_10008C168, (uint64_t)sub_100069318, a1);
}

uint64_t sub_1000693FC()
{
  uint64_t v0;

  v0 = type metadata accessor for ImageResource(0);
  sub_100021788(v0, qword_10008C180);
  sub_10001EB00(v0, (uint64_t)qword_10008C180);
  if (qword_10008BD50 != -1)
    swift_once(&qword_10008BD50, sub_1000680F8);
  return ImageResource.init(name:bundle:)(0xD000000000000010, 0x800000010006F3B0, (id)qword_10008BD58);
}

uint64_t sub_100069498()
{
  return sub_10001FD50(&qword_10008BE08, (uint64_t (*)(_QWORD))&type metadata accessor for ImageResource, (uint64_t)qword_10008C180);
}

uint64_t sub_1000694BC@<X0>(uint64_t a1@<X8>)
{
  return sub_100069950(&qword_10008BE08, (uint64_t (*)(_QWORD))&type metadata accessor for ImageResource, (uint64_t)qword_10008C180, (uint64_t)sub_1000693FC, a1);
}

uint64_t sub_1000694E0()
{
  uint64_t v0;

  v0 = type metadata accessor for ImageResource(0);
  sub_100021788(v0, qword_10008C198);
  sub_10001EB00(v0, (uint64_t)qword_10008C198);
  if (qword_10008BD50 != -1)
    swift_once(&qword_10008BD50, sub_1000680F8);
  return ImageResource.init(name:bundle:)(0x6369742D72756F68, 0xEA0000000000736BLL, (id)qword_10008BD58);
}

uint64_t sub_10006957C()
{
  return sub_10001FD50(&qword_10008BE10, (uint64_t (*)(_QWORD))&type metadata accessor for ImageResource, (uint64_t)qword_10008C198);
}

uint64_t sub_1000695A0@<X0>(uint64_t a1@<X8>)
{
  return sub_100069950(&qword_10008BE10, (uint64_t (*)(_QWORD))&type metadata accessor for ImageResource, (uint64_t)qword_10008C198, (uint64_t)sub_1000694E0, a1);
}

uint64_t sub_1000695C4()
{
  uint64_t v0;

  v0 = type metadata accessor for ImageResource(0);
  sub_100021788(v0, qword_10008C1B0);
  sub_10001EB00(v0, (uint64_t)qword_10008C1B0);
  if (qword_10008BD50 != -1)
    swift_once(&qword_10008BD50, sub_1000680F8);
  return ImageResource.init(name:bundle:)(0x737265626D756ELL, 0xE700000000000000, (id)qword_10008BD58);
}

uint64_t sub_10006965C()
{
  return sub_10001FD50(&qword_10008BE18, (uint64_t (*)(_QWORD))&type metadata accessor for ImageResource, (uint64_t)qword_10008C1B0);
}

uint64_t sub_100069680@<X0>(uint64_t a1@<X8>)
{
  return sub_100069950(&qword_10008BE18, (uint64_t (*)(_QWORD))&type metadata accessor for ImageResource, (uint64_t)qword_10008C1B0, (uint64_t)sub_1000695C4, a1);
}

uint64_t sub_1000696A4()
{
  uint64_t v0;

  v0 = type metadata accessor for ImageResource(0);
  sub_100021788(v0, qword_10008C1C8);
  sub_10001EB00(v0, (uint64_t)qword_10008C1C8);
  if (qword_10008BD50 != -1)
    swift_once(&qword_10008BD50, sub_1000680F8);
  return ImageResource.init(name:bundle:)(0x2D737265626D756ELL, 0xEE00636962617261, (id)qword_10008BD58);
}

uint64_t sub_100069748()
{
  return sub_10001FD50(&qword_10008BE20, (uint64_t (*)(_QWORD))&type metadata accessor for ImageResource, (uint64_t)qword_10008C1C8);
}

uint64_t sub_10006976C@<X0>(uint64_t a1@<X8>)
{
  return sub_100069950(&qword_10008BE20, (uint64_t (*)(_QWORD))&type metadata accessor for ImageResource, (uint64_t)qword_10008C1C8, (uint64_t)sub_1000696A4, a1);
}

uint64_t sub_100069790()
{
  uint64_t v0;

  v0 = type metadata accessor for ImageResource(0);
  sub_100021788(v0, qword_10008C1E0);
  sub_10001EB00(v0, (uint64_t)qword_10008C1E0);
  if (qword_10008BD50 != -1)
    swift_once(&qword_10008BD50, sub_1000680F8);
  return ImageResource.init(name:bundle:)(0xD000000000000012, 0x800000010006F2C0, (id)qword_10008BD58);
}

uint64_t sub_10006982C()
{
  return sub_10001FD50(&qword_10008BE28, (uint64_t (*)(_QWORD))&type metadata accessor for ImageResource, (uint64_t)qword_10008C1E0);
}

uint64_t sub_100069850@<X0>(uint64_t a1@<X8>)
{
  return sub_100069950(&qword_10008BE28, (uint64_t (*)(_QWORD))&type metadata accessor for ImageResource, (uint64_t)qword_10008C1E0, (uint64_t)sub_100069790, a1);
}

uint64_t sub_100069874()
{
  uint64_t v0;

  v0 = type metadata accessor for ImageResource(0);
  sub_100021788(v0, qword_10008C1F8);
  sub_10001EB00(v0, (uint64_t)qword_10008C1F8);
  if (qword_10008BD50 != -1)
    swift_once(&qword_10008BD50, sub_1000680F8);
  return ImageResource.init(name:bundle:)(0x736B636974, 0xE500000000000000, (id)qword_10008BD58);
}

uint64_t sub_100069908()
{
  return sub_10001FD50(&qword_10008BE30, (uint64_t (*)(_QWORD))&type metadata accessor for ImageResource, (uint64_t)qword_10008C1F8);
}

uint64_t sub_10006992C@<X0>(uint64_t a1@<X8>)
{
  return sub_100069950(&qword_10008BE30, (uint64_t (*)(_QWORD))&type metadata accessor for ImageResource, (uint64_t)qword_10008C1F8, (uint64_t)sub_100069874, a1);
}

uint64_t sub_100069950@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;

  if (*a1 != -1)
    swift_once(a1, a4);
  v8 = a2(0);
  v9 = sub_10001EB00(v8, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a5, v9, v8);
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return objc_opt_self(_TtC16WorldClockWidgetP33_6BD128605FA25076657160D10F86B9FE19ResourceBundleClass);
}
