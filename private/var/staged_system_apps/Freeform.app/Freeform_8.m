uint64_t sub_1007B105C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

_QWORD *sub_1007B106C(_QWORD *a1)
{
  destroy for AnyCRLCommandChangeContext(a1);
  return a1;
}

void sub_1007B10A0()
{
  sub_1007AC828();
}

uint64_t sub_1007B10C0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1007B10D0()
{
  sub_10079DB50();
  sub_1007AC930();
  sub_10079D83C();
}

uint64_t sub_1007B10F8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

double sub_1007B1108(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  id v20;
  void *v21;
  unint64_t v22;
  void *v23;
  id v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t inited;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  double result;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  id v46;
  _BYTE v47[72];
  _BYTE v48[24];

  v3 = sub_1004B804C(&qword_1013F20B0);
  __chkstk_darwin(v3);
  v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1004B804C(&qword_1013F20C0);
  __chkstk_darwin(v6);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v41 - v10;
  v12 = sub_1004B804C(&qword_1013E04F0);
  __chkstk_darwin(v12);
  v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for CRLZoneSyncResultScenarios(0);
  __chkstk_darwin(v15);
  v18 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8Freeform17CRLSyncController_saveTask);
  if (v19)
  {
    v42 = v16;
    v43 = v8;
    v44 = v5;
    v45 = v1;
    *(_BYTE *)(v19 + 56) = 1;
    swift_beginAccess(v19 + 48, v48, 33, 0);
    v20 = a1;
    swift_retain(v19);
    sub_100ADA730((Swift::Int *)&v46, v20);
    swift_endAccess(v48);

    swift_beginAccess(v19 + 40, v48, 33, 0);
    v21 = (void *)sub_100B27DC8(v20);
    swift_endAccess(v48);

    v22 = *(_QWORD *)(v19 + 64);
    if (v22)
    {
      sub_1004B8930(0, (unint64_t *)&qword_1013E0490, NSObject_ptr);
      v23 = *(void **)(*(_QWORD *)(v22 + 16) + 16);
      swift_retain(v22);
      v24 = v23;
      v25 = static NSObject.== infix(_:_:)(v24, v20);

      if ((v25 & 1) != 0)
      {
        v26 = type metadata accessor for Date(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v14, 1, 1, v26);
        v27 = (uint64_t)&v11[*(int *)(v6 + 48)];
        sub_1004C4938((uint64_t)v14, v27, &qword_1013E04F0);
        *(_DWORD *)v18 = 0x10000;
        v18[4] = 0;
        v28 = (uint64_t)&v43[*(int *)(v6 + 48)];
        sub_1004C4938(v27, v28, &qword_1013E04F0);
        v29 = &v18[*(int *)(v15 + 36)];
        *v29 = 0;
        sub_1004C4938(v28, (uint64_t)&v29[*(int *)(v6 + 48)], &qword_1013E04F0);
        *(_QWORD *)&v18[*(int *)(v15 + 40)] = _swiftEmptyArrayStorage;
        v30 = (uint64_t)v44;
        sub_1004B8460((uint64_t)v18, (uint64_t)v44, type metadata accessor for CRLZoneSyncResultScenarios);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v42 + 56))(v30, 0, 1, v15);
        sub_1007A9CA8(v22, 0, v30);
        swift_release(v22);
        sub_1004CB800(v30, &qword_1013F20B0);
        sub_1004B84A4((uint64_t)v18, type metadata accessor for CRLZoneSyncResultScenarios);
      }
      else
      {
        swift_release(v22);
      }
    }
    sub_1007A1E00();
    *(_QWORD *)&result = swift_release(v19).n128_u64[0];
  }
  else
  {
    if (qword_1013DD870 != -1)
      swift_once(&qword_1013DD870, sub_100A059E0);
    swift_beginAccess(&static OS_os_log.dataSync, v48, 0, 0);
    v31 = (void *)static OS_os_log.dataSync;
    v32 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    inited = swift_initStackObject(v32, v47);
    v34 = inited;
    *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
    if (*(_BYTE *)(v1 + OBJC_IVAR____TtC8Freeform17CRLSyncController_syncScope))
      v35 = 0x5320646572616853;
    else
      v35 = 0x2065746176697250;
    if (*(_BYTE *)(v1 + OBJC_IVAR____TtC8Freeform17CRLSyncController_syncScope))
      v36 = 0xEC00000065706F63;
    else
      v36 = 0xED000065706F6353;
    *(_QWORD *)(inited + 56) = &type metadata for String;
    *(_QWORD *)(inited + 64) = sub_1004CFC2C();
    *(_QWORD *)(v34 + 32) = v35;
    *(_QWORD *)(v34 + 40) = v36;
    v37 = v31;
    v38 = static os_log_type_t.error.getter(v37);
    sub_100A06EBC((uint64_t)v37, &_mh_execute_header, v38, "<%{public}@> Could not find active save task for handling zone save failure", 75, 2, v34);
    swift_setDeallocating(v34);
    v39 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(v34 + 32, 1, v39);

  }
  return result;
}

double sub_1007B159C(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  id v20;
  void *v21;
  unint64_t v22;
  void *v23;
  id v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t inited;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  double result;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  id v46;
  _BYTE v47[72];
  _BYTE v48[24];

  v3 = sub_1004B804C(&qword_1013F20B0);
  __chkstk_darwin(v3);
  v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1004B804C(&qword_1013F20C0);
  __chkstk_darwin(v6);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v41 - v10;
  v12 = sub_1004B804C(&qword_1013E04F0);
  __chkstk_darwin(v12);
  v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for CRLZoneSyncResultScenarios(0);
  __chkstk_darwin(v15);
  v18 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8Freeform17CRLSyncController_saveTask);
  if (v19)
  {
    v42 = v16;
    v43 = v8;
    v44 = v5;
    v45 = v1;
    *(_BYTE *)(v19 + 56) = 1;
    swift_beginAccess(v19 + 48, v48, 33, 0);
    v20 = a1;
    swift_retain(v19);
    sub_100ADA730((Swift::Int *)&v46, v20);
    swift_endAccess(v48);

    swift_beginAccess(v19 + 40, v48, 33, 0);
    v21 = (void *)sub_100B27DC8(v20);
    swift_endAccess(v48);

    v22 = *(_QWORD *)(v19 + 64);
    if (v22)
    {
      sub_1004B8930(0, (unint64_t *)&qword_1013E0490, NSObject_ptr);
      v23 = *(void **)(*(_QWORD *)(v22 + 16) + 16);
      swift_retain(v22);
      v24 = v23;
      v25 = static NSObject.== infix(_:_:)(v24, v20);

      if ((v25 & 1) != 0)
      {
        v26 = type metadata accessor for Date(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v14, 1, 1, v26);
        v27 = (uint64_t)&v11[*(int *)(v6 + 48)];
        sub_1004C4938((uint64_t)v14, v27, &qword_1013E04F0);
        *(_DWORD *)v18 = 0;
        v18[4] = 0;
        v28 = (uint64_t)&v43[*(int *)(v6 + 48)];
        sub_1004C4938(v27, v28, &qword_1013E04F0);
        v29 = &v18[*(int *)(v15 + 36)];
        *v29 = 0;
        sub_1004C4938(v28, (uint64_t)&v29[*(int *)(v6 + 48)], &qword_1013E04F0);
        *(_QWORD *)&v18[*(int *)(v15 + 40)] = _swiftEmptyArrayStorage;
        v30 = (uint64_t)v44;
        sub_1004B8460((uint64_t)v18, (uint64_t)v44, type metadata accessor for CRLZoneSyncResultScenarios);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v42 + 56))(v30, 0, 1, v15);
        sub_1007A9CA8(v22, 0, v30);
        swift_release(v22);
        sub_1004CB800(v30, &qword_1013F20B0);
        sub_1004B84A4((uint64_t)v18, type metadata accessor for CRLZoneSyncResultScenarios);
      }
      else
      {
        swift_release(v22);
      }
    }
    sub_1007A1E00();
    *(_QWORD *)&result = swift_release(v19).n128_u64[0];
  }
  else
  {
    if (qword_1013DD870 != -1)
      swift_once(&qword_1013DD870, sub_100A059E0);
    swift_beginAccess(&static OS_os_log.dataSync, v48, 0, 0);
    v31 = (void *)static OS_os_log.dataSync;
    v32 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    inited = swift_initStackObject(v32, v47);
    v34 = inited;
    *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
    if (*(_BYTE *)(v1 + OBJC_IVAR____TtC8Freeform17CRLSyncController_syncScope))
      v35 = 0x5320646572616853;
    else
      v35 = 0x2065746176697250;
    if (*(_BYTE *)(v1 + OBJC_IVAR____TtC8Freeform17CRLSyncController_syncScope))
      v36 = 0xEC00000065706F63;
    else
      v36 = 0xED000065706F6353;
    *(_QWORD *)(inited + 56) = &type metadata for String;
    *(_QWORD *)(inited + 64) = sub_1004CFC2C();
    *(_QWORD *)(v34 + 32) = v35;
    *(_QWORD *)(v34 + 40) = v36;
    v37 = v31;
    v38 = static os_log_type_t.error.getter(v37);
    sub_100A06EBC((uint64_t)v37, &_mh_execute_header, v38, "<%{public}@> Could not find active save task for handling zone save failure", 75, 2, v34);
    swift_setDeallocating(v34);
    v39 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(v34 + 32, 1, v39);

  }
  return result;
}

uint64_t sub_1007B1A2C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1007B1A58(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1013F211C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1004CFD00;
  return sub_1007A1FD0(a1, v4, v5, v6);
}

uint64_t sub_1007B1AC4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1007B1AE8(_QWORD *a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t v3;
  uint64_t v4;

  sub_100B4C648(a2);
  *a1 = v3;
  a1[1] = v4;
}

uint64_t sub_1007B1B10@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_10079F248(a1, *(void **)(v2 + 16), a2);
}

double sub_1007B1B18()
{
  uint64_t v0;

  return sub_100ACA6A0(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(unsigned __int8 *)(v0 + 32));
}

void sub_1007B1B34()
{
  uint64_t v0;

  sub_100ACC7B8(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_1007B1B4C()
{
  uint64_t v0;

  sub_100ACCDE0(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1007B1B64()
{
  return sub_1007B1FA0((void (*)(_QWORD))&_swift_unknownObjectRelease, 40);
}

void sub_1007B1B74()
{
  uint64_t v0;

  sub_10079DFBC(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1007B1B80()
{
  uint64_t v0;
  uint64_t ChangesOptions;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  ChangesOptions = type metadata accessor for CKSyncEngine.FetchChangesOptions(0);
  v2 = *(_QWORD *)(ChangesOptions - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, ChangesOptions);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1007B1BFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CKSyncEngine.FetchChangesOptions(0) - 8) + 80);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = v0 + ((v2 + 40) & ~v2);
  v5 = (_QWORD *)swift_task_alloc(dword_1013F214C);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1004CFD00;
  v5[43] = v3;
  v5[44] = v4;
  return swift_task_switch(sub_1007A24BC, 0, 0);
}

uint64_t sub_1007B1C78()
{
  return sub_1007B1FA0((void (*)(_QWORD))&_swift_bridgeObjectRelease, 32);
}

void sub_1007B1C88()
{
  uint64_t v0;

  sub_10079C6F0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

double sub_1007B1C90(void *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10079BEE8(a1, a2, *(_QWORD **)(v2 + 16));
}

uint64_t sub_1007B1C98()
{
  uint64_t v0;

  return swift_deallocObject(v0, 25, 7);
}

void sub_1007B1CBC()
{
  uint64_t v0;

  sub_10079AE7C(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

void sub_1007B1CC8()
{
  uint64_t v0;

  sub_10079A9D4(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_1007B1CD4()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1007B1CF8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  _s8Freeform26AnyCRLCommandChangeContextVwxx_0((_QWORD *)(v0 + 32));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 96));
  return swift_deallocObject(v0, 112, 7);
}

uint64_t sub_1007B1D34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = v1 + 32;
  v7 = *(_BYTE *)(v1 + 72);
  v8 = *(_QWORD *)(v1 + 80);
  v9 = *(_QWORD *)(v1 + 96);
  v10 = *(_BYTE *)(v1 + 88);
  v11 = (_QWORD *)swift_task_alloc(dword_1013F215C);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_1004CF80C;
  return sub_100798FBC(a1, v4, v5, v6, v7, v8, v10, v9);
}

uint64_t sub_1007B1DDC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1007B1E10()
{
  uint64_t v0;

  return sub_10079A90C(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1007B1E1C()
{
  return sub_1007B1E5C((void (*)(_QWORD))&_swift_errorRelease, (void (*)(_QWORD))&_swift_unknownObjectRelease, 57);
}

void sub_1007B1E34()
{
  uint64_t v0;

  sub_10079A0E8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(unsigned __int8 *)(v0 + 56));
}

uint64_t sub_1007B1E48()
{
  return sub_1007B1E5C((void (*)(_QWORD))&_swift_bridgeObjectRelease, (void (*)(_QWORD))&_swift_bridgeObjectRelease, 49);
}

uint64_t sub_1007B1E5C(void (*a1)(_QWORD), void (*a2)(_QWORD), uint64_t a3)
{
  uint64_t v3;

  a1(*(_QWORD *)(v3 + 32));
  a2(*(_QWORD *)(v3 + 40));
  return swift_deallocObject(v3, a3, 7);
}

double sub_1007B1EB4()
{
  uint64_t v0;

  return sub_100799FA0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(unsigned __int8 *)(v0 + 48));
}

uint64_t sub_1007B1EC4()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  _s8Freeform26AnyCRLCommandChangeContextVwxx_0((_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease();

  return swift_deallocObject(v0, 89, 7);
}

uint64_t sub_1007B1F00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = v1 + 32;
  v7 = *(_QWORD *)(v1 + 72);
  v8 = *(_QWORD *)(v1 + 80);
  v9 = *(_BYTE *)(v1 + 88);
  v10 = (_QWORD *)swift_task_alloc(dword_1013F217C);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_1004CFD00;
  return sub_1007979D4(a1, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_1007B1F90()
{
  return sub_1007B1FA0((void (*)(_QWORD))&_swift_bridgeObjectRelease, 33);
}

uint64_t sub_1007B1FA0(void (*a1)(_QWORD), uint64_t a2)
{
  uint64_t v2;

  a1(*(_QWORD *)(v2 + 24));
  return swift_deallocObject(v2, a2, 7);
}

double sub_1007B1FE4()
{
  uint64_t v0;

  return sub_100798558(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(unsigned __int8 *)(v0 + 32));
}

uint64_t sub_1007B1FF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc(dword_1013F218C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1004CFD00;
  return sub_1007971C0(v2);
}

uint64_t sub_1007B203C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc(dword_1013F219C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1004CFD00;
  return sub_100797408(v2);
}

void sub_1007B2088()
{
  sub_10079B10C();
}

void sub_1007B20A8()
{
  sub_10079CD1C();
}

uint64_t sub_1007B20C8(uint64_t a1)
{
  swift_retain(*(_QWORD *)(a1 + 16));
  return a1;
}

double sub_1007B20F0()
{
  return sub_100C94BB8();
}

uint64_t sub_1007B2110()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 41, 7);
}

double sub_1007B213C()
{
  uint64_t v0;

  return sub_100C954CC(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
}

uint64_t sub_1007B2168(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B804C(&qword_1013E04F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t *sub_1007B21B0(uint64_t *a1)
{
  sub_1007B21E0(*a1, a1[1], a1[2]);
  return a1;
}

uint64_t sub_1007B21E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a2)
    return swift_retain(a3);
  return result;
}

void sub_1007B22B8()
{
  sub_1007B1B34();
}

id sub_1007B22D8(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  id v9;

  v9 = objc_allocWithZone((Class)type metadata accessor for CRLPreinsertionAssetWrapper(0));
  sub_1004BE310(a1, a2);
  swift_bridgeObjectRetain(a4);
  swift_unknownObjectRetain(v4);
  return sub_1009BAF98(a1, a2, a3, a4, v4);
}

id sub_1007B2368(uint64_t a1)
{
  void *v1;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  _DWORD *v15;
  uint64_t v16;
  id v17;
  void *v18;
  os_unfair_lock_s *v19;
  id v20;
  id v21;
  objc_class *v23;
  uint64_t v24;
  objc_super v25;

  v3 = (char *)objc_msgSend(v1, "store");
  v4 = *(_QWORD *)&v3[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetManagerLock];
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v4 + 16));
  v5 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetManager;
  v6 = *(void **)&v3[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetManager];
  if (v6)
  {
    v7 = *(id *)&v3[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetManager];
  }
  else
  {
    v23 = (objc_class *)type metadata accessor for CRLAssetManager();
    v8 = (char *)objc_allocWithZone(v23);
    v9 = &v8[OBJC_IVAR____TtC8Freeform15CRLAssetManager_store];
    swift_unknownObjectWeakInit(&v8[OBJC_IVAR____TtC8Freeform15CRLAssetManager_store]);
    v10 = OBJC_IVAR____TtC8Freeform15CRLAssetManager_lock;
    v11 = type metadata accessor for CRLUnfairLock();
    v12 = swift_allocObject(v11, 24, 7);
    v13 = v3;
    v24 = a1;
    v14 = v8;
    v15 = (_DWORD *)swift_slowAlloc(4, -1);
    *v15 = 0;
    *(_QWORD *)(v12 + 16) = v15;
    atomic_thread_fence(memory_order_acq_rel);
    *(_QWORD *)&v8[v10] = v12;
    *(_QWORD *)&v14[OBJC_IVAR____TtC8Freeform15CRLAssetManager_assets] = _swiftEmptyDictionarySingleton;
    v16 = OBJC_IVAR____TtC8Freeform15CRLAssetManager_owners;
    *(_QWORD *)&v14[v16] = objc_msgSend((id)objc_opt_self(NSMapTable), "mapTableWithKeyOptions:valueOptions:", 517, 0);
    *(_QWORD *)&v14[OBJC_IVAR____TtC8Freeform15CRLAssetManager_garbageCollectionWorkItem] = 0;
    swift_unknownObjectWeakAssign(v9, v13);

    v25.receiver = v14;
    a1 = v24;
    v25.super_class = v23;
    v17 = objc_msgSendSuper2(&v25, "init");

    v18 = *(void **)&v3[v5];
    *(_QWORD *)&v3[v5] = v17;
    v7 = v17;

    v6 = 0;
  }
  v19 = *(os_unfair_lock_s **)(v4 + 16);
  v20 = v6;
  os_unfair_lock_unlock(v19);

  v21 = sub_100963F98(a1, (char *)v1, (uint64_t)v7);
  return v21;
}

id sub_1007B2554(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  id v13;
  uint64_t v15;

  v7 = type metadata accessor for URL(0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v11 + 16))(v10, a1, v8);
  v12 = (char *)objc_allocWithZone((Class)type metadata accessor for CRLPreinsertionAssetWrapper(0));
  swift_bridgeObjectRetain(a3);
  swift_unknownObjectRetain(v3);
  v13 = sub_1009BDB18((uint64_t)v10, a2, a3, v3, v12);
  swift_unknownObjectRelease(v3);
  return v13;
}

uint64_t sub_1007B2624()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;

  v0 = sub_1004B804C((uint64_t *)&unk_1013E16F0);
  __chkstk_darwin(v0);
  v44 = (uint64_t)&v39 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v41 = (char *)&v39 - v3;
  v4 = type metadata accessor for CRLProto_Data(0);
  v42 = *(_QWORD *)(v4 - 8);
  v5 = v42;
  __chkstk_darwin(v4);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v39 - v9;
  __chkstk_darwin(v11);
  v13 = (__int128 *)((char *)&v39 - v12);
  v14 = type metadata accessor for CRLProto_ChunkedRealTimeMessage(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[8] = 0;
  *(_QWORD *)v16 = 0;
  UnknownStorage.init()(v17);
  v18 = (uint64_t)&v16[*(int *)(v14 + 32)];
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v19(v18, 1, 1, v4);
  v45 = v14;
  v20 = (uint64_t)&v16[*(int *)(v14 + 36)];
  v21 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v19)(v20, 1, 1, v4);
  v46 = xmmword_100EF78C0;
  *v13 = xmmword_100EF78C0;
  UnknownStorage.init()(v21);
  sub_10078F968(v18);
  sub_100552FCC((uint64_t)v13, v18);
  v43 = v19;
  v19(v18, 0, 1, v4);
  v22 = (uint64_t)v41;
  v23 = UUID.crl_data()();
  v40 = v24;
  sub_100552F84(v18, v22);
  v42 = *(_QWORD *)(v42 + 48);
  v25 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v42)(v22, 1, v4);
  if ((_DWORD)v25 == 1)
  {
    *(_OWORD *)v10 = v46;
    UnknownStorage.init()(v25);
    sub_10078F968(v22);
  }
  else
  {
    sub_100552FCC(v22, (uint64_t)v10);
  }
  sub_1004BBBC8(*(_QWORD *)v10, *((_QWORD *)v10 + 1));
  v26 = v40;
  *(_QWORD *)v10 = v23;
  *((_QWORD *)v10 + 1) = v26;
  sub_10078F968(v18);
  sub_100552FCC((uint64_t)v10, v18);
  v27 = v18;
  v28 = v43;
  v29 = ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v43)(v27, 0, 1, v4);
  v30 = v47;
  v31 = *(unsigned __int16 *)(v47 + OBJC_IVAR____TtC8Freeform25CRLChunkedRealTimeMessage_lastIndex);
  *(_DWORD *)v16 = *(unsigned __int16 *)(v47 + OBJC_IVAR____TtC8Freeform25CRLChunkedRealTimeMessage_index);
  *((_DWORD *)v16 + 1) = v31;
  v16[8] = *(_BYTE *)(v30 + OBJC_IVAR____TtC8Freeform25CRLChunkedRealTimeMessage_encrypted);
  *v13 = v46;
  UnknownStorage.init()(v29);
  sub_10078F968(v20);
  sub_100552FCC((uint64_t)v13, v20);
  v28(v20, 0, 1, v4);
  v32 = *(_QWORD *)(v30 + OBJC_IVAR____TtC8Freeform25CRLChunkedRealTimeMessage_data);
  v33 = *(_QWORD *)(v30 + OBJC_IVAR____TtC8Freeform25CRLChunkedRealTimeMessage_data + 8);
  v34 = v44;
  sub_100552F84(v20, v44);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v42)(v34, 1, v4) == 1)
  {
    *(_OWORD *)v7 = v46;
    v35 = sub_1004BE310(v32, v33);
    UnknownStorage.init()(v35);
    sub_10078F968(v34);
  }
  else
  {
    sub_100552FCC(v34, (uint64_t)v7);
    sub_1004BE310(v32, v33);
  }
  sub_1004BBBC8(*(_QWORD *)v7, *((_QWORD *)v7 + 1));
  *(_QWORD *)v7 = v32;
  *((_QWORD *)v7 + 1) = v33;
  sub_10078F968(v20);
  sub_100552FCC((uint64_t)v7, v20);
  v28(v20, 0, 1, v4);
  v36 = sub_1004B7878(&qword_1013F22D8, type metadata accessor for CRLProto_ChunkedRealTimeMessage, (uint64_t)&unk_100F23C40);
  v37 = Message.serializedData(partial:)(0, v45, v36);
  sub_1004B84A4((uint64_t)v16, type metadata accessor for CRLProto_ChunkedRealTimeMessage);
  return v37;
}

uint64_t sub_1007B2A48()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1007B2A78 + 4 * byte_100F0AF80[*v0]))(0x44496E69616863, 0xE700000000000000);
}

uint64_t sub_1007B2A78()
{
  return 0x7865646E69;
}

uint64_t sub_1007B2A8C()
{
  return 0x65646E497473616CLL;
}

uint64_t sub_1007B2AAC()
{
  return 0x6574707972636E65;
}

uint64_t sub_1007B2AC8()
{
  return 1635017060;
}

uint64_t sub_1007B2AD8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1007B4518(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1007B2AFC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1007B31F0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1007B2B24(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1007B31F0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1007B2B4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC8Freeform25CRLChunkedRealTimeMessage_chainID;
  v2 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1004BBBC8(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Freeform25CRLChunkedRealTimeMessage_data), *(_QWORD *)(v0 + OBJC_IVAR____TtC8Freeform25CRLChunkedRealTimeMessage_data + 8));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1007B2BB0()
{
  return type metadata accessor for CRLChunkedRealTimeMessage(0);
}

uint64_t type metadata accessor for CRLChunkedRealTimeMessage(uint64_t a1)
{
  uint64_t result;

  result = qword_1013F2208;
  if (!qword_1013F2208)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CRLChunkedRealTimeMessage);
  return result;
}

uint64_t sub_1007B2BF4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.Int16 + 64;
    v4[2] = (char *)&value witness table for Builtin.Int16 + 64;
    v4[3] = &unk_100F0AFB0;
    v4[4] = &unk_100F0AFC8;
    result = swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1007B2C84(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  char v21;
  __int128 v22;

  v3 = v1;
  v5 = sub_1004B804C(&qword_1013F22C8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_1004BB5A4(a1, v9);
  v11 = sub_1007B31F0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CRLChunkedRealTimeMessage.CodingKeys, &type metadata for CRLChunkedRealTimeMessage.CodingKeys, v11, v9, v10);
  v12 = v3 + OBJC_IVAR____TtC8Freeform25CRLChunkedRealTimeMessage_chainID;
  LOBYTE(v22) = 0;
  v13 = type metadata accessor for UUID(0);
  v14 = sub_1004B7878(&qword_1013E4860, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v12, &v22, v5, v13, v14);
  if (!v2)
  {
    v15 = *(unsigned __int16 *)(v3 + OBJC_IVAR____TtC8Freeform25CRLChunkedRealTimeMessage_index);
    LOBYTE(v22) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v15, &v22, v5);
    v16 = *(unsigned __int16 *)(v3 + OBJC_IVAR____TtC8Freeform25CRLChunkedRealTimeMessage_lastIndex);
    LOBYTE(v22) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, &v22, v5);
    v17 = *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC8Freeform25CRLChunkedRealTimeMessage_encrypted);
    LOBYTE(v22) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v17, &v22, v5);
    v22 = *(_OWORD *)(v3 + OBJC_IVAR____TtC8Freeform25CRLChunkedRealTimeMessage_data);
    v21 = 4;
    v18 = sub_100587C2C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v21, v5, &type metadata for Data, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t *sub_1007B2E84(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(void);
  unint64_t v16;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  _QWORD *v23;
  uint64_t v24;
  __int128 v25;
  char v26;

  v24 = *v1;
  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v21 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_1004B804C(&qword_1013F22B8);
  v6 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_1004BB5A4(a1, v9);
  v11 = sub_1007B31F0();
  v22 = v8;
  v12 = v23;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CRLChunkedRealTimeMessage.CodingKeys, &type metadata for CRLChunkedRealTimeMessage.CodingKeys, v11, v9, v10);
  if (v12)
  {
    swift_deallocPartialClassInstance(v1, v24, *(unsigned int *)(*v1 + 48), *(unsigned __int16 *)(*v1 + 52));
    v18 = a1;
  }
  else
  {
    v23 = a1;
    LOBYTE(v25) = 0;
    v13 = sub_1004B7878(&qword_1013E4810, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v14 = v20;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v3, &v25, v20, v3, v13);
    v15 = *(void (**)(void))(v4 + 32);
    v19 = (uint64_t)v1 + OBJC_IVAR____TtC8Freeform25CRLChunkedRealTimeMessage_chainID;
    v15();
    LOBYTE(v25) = 1;
    *(_WORD *)((char *)v1 + OBJC_IVAR____TtC8Freeform25CRLChunkedRealTimeMessage_index) = KeyedDecodingContainer.decode(_:forKey:)(&v25, v14);
    LOBYTE(v25) = 2;
    *(_WORD *)((char *)v1 + OBJC_IVAR____TtC8Freeform25CRLChunkedRealTimeMessage_lastIndex) = KeyedDecodingContainer.decode(_:forKey:)(&v25, v14);
    LOBYTE(v25) = 3;
    *((_BYTE *)v1 + OBJC_IVAR____TtC8Freeform25CRLChunkedRealTimeMessage_encrypted) = KeyedDecodingContainer.decode(_:forKey:)(&v25, v14) & 1;
    v26 = 4;
    v16 = sub_100587AC0();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for Data, &v26, v14, &type metadata for Data, v16);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v22, v14);
    *(_OWORD *)((char *)v1 + OBJC_IVAR____TtC8Freeform25CRLChunkedRealTimeMessage_data) = v25;
    v18 = v23;
  }
  _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v18);
  return v1;
}

uint64_t *sub_1007B3170@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t *result;

  v6 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  result = sub_1007B2E84(a1);
  if (!v3)
    *a2 = v6;
  return result;
}

uint64_t sub_1007B31C4(_QWORD *a1)
{
  return sub_1007B2C84(a1);
}

void sub_1007B31E4(uint64_t *a1, uint64_t *a2)
{
  sub_1007B3B44(*a1, *a2);
}

unint64_t sub_1007B31F0()
{
  unint64_t result;

  result = qword_1013F22C0;
  if (!qword_1013F22C0)
  {
    result = swift_getWitnessTable(&unk_100F0B12C, &type metadata for CRLChunkedRealTimeMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1013F22C0);
  }
  return result;
}

uint64_t sub_1007B3234(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  if (a1 >= 1)
    __asm { BR              X11 }
  v4 = sub_1004B804C(&qword_1013F22D0);
  v5 = swift_allocObject(v4, 48, 7);
  *(_OWORD *)(v5 + 16) = xmmword_100EF5E40;
  *(_QWORD *)(v5 + 32) = a2;
  *(_QWORD *)(v5 + 40) = a3;
  sub_1004BE310(a2, a3);
  return v5;
}

void sub_1007B3484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_1007B34E4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  BOOL *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v42 = v39;
  v43 = v40;
  v44 = BYTE2(v40);
  v45 = BYTE3(v40);
  v46 = BYTE4(v40);
  v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x1007B36C8);
  }
  result = memcmp(v38, &v42, BYTE6(v40));
  *v37 = (_DWORD)result == 0;
  return result;
}

uint64_t sub_1007B36EC@<X0>(uint64_t __s2@<X0>, void *__s1@<X2>, uint64_t a3@<X1>, BOOL *a4@<X8>)
{
  if (__s1)
  {
    if (__s2)
    {
      __s2 = memcmp(__s1, (const void *)__s2, a3 - __s2);
      *a4 = (_DWORD)__s2 == 0;
      return __s2;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return __s2;
}

uint64_t sub_1007B3744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;

  v8 = a1;
  v9 = a2;
  v10 = BYTE2(a2);
  v11 = BYTE3(a2);
  v12 = BYTE4(a2);
  v13 = BYTE5(a2);
  sub_1007B3484((uint64_t)&v8, (uint64_t)&v8 + BYTE6(a2), a3, a4);
  if (!v4)
    v5 = v7;
  return v5 & 1;
}

uint64_t sub_1007B3818(uint64_t a1, uint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  result = __DataStorage._bytes.getter(a3);
  v12 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v12 += a1 - result;
  }
  v13 = __OFSUB__(a2, a1);
  v14 = a2 - a1;
  if (v13)
  {
    __break(1u);
    goto LABEL_15;
  }
  v15 = __DataStorage._length.getter();
  if (v15 >= v14)
    v16 = v14;
  else
    v16 = v15;
  v17 = v12 + v16;
  if (v12)
    v18 = v17;
  else
    v18 = 0;
  sub_1007B3484(v12, v18, a5, a6);
  if (!v6)
    v19 = v20;
  return v19 & 1;
}

void sub_1007B38CC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_1007B3918()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_1007B394C + dword_1007B3B24[v0 >> 62]))();
}

uint64_t sub_1007B395C@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (v1 == BYTE6(v2))
  {
    if (v1 >= 1)
      __asm { BR              X10 }
    v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  return v3 & 1;
}

void sub_1007B3B44(uint64_t a1, uint64_t a2)
{
  if ((static UUID.== infix(_:_:)(a1 + OBJC_IVAR____TtC8Freeform25CRLChunkedRealTimeMessage_chainID) & 1) != 0
    && *(unsigned __int16 *)(a1 + OBJC_IVAR____TtC8Freeform25CRLChunkedRealTimeMessage_index) == *(unsigned __int16 *)(a2 + OBJC_IVAR____TtC8Freeform25CRLChunkedRealTimeMessage_index)
    && *(unsigned __int16 *)(a1 + OBJC_IVAR____TtC8Freeform25CRLChunkedRealTimeMessage_lastIndex) == *(unsigned __int16 *)(a2 + OBJC_IVAR____TtC8Freeform25CRLChunkedRealTimeMessage_lastIndex)
    && *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC8Freeform25CRLChunkedRealTimeMessage_encrypted) == *(unsigned __int8 *)(a2 + OBJC_IVAR____TtC8Freeform25CRLChunkedRealTimeMessage_encrypted))
  {
    sub_1007B38CC(*(_QWORD *)(a1 + OBJC_IVAR____TtC8Freeform25CRLChunkedRealTimeMessage_data), *(_QWORD *)(a1 + OBJC_IVAR____TtC8Freeform25CRLChunkedRealTimeMessage_data + 8));
  }
}

uint64_t sub_1007B3BEC(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  unsigned int v38;
  uint64_t *v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  void (*v47)(char *, char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t result;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  _OWORD v64[2];
  uint64_t v65;
  char *v66;

  v4 = sub_1004B804C((uint64_t *)&unk_1013E16F0);
  __chkstk_darwin(v4);
  v58 = (uint64_t)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v63 = (uint64_t)&v52 - v7;
  v8 = type metadata accessor for CRLProto_Data(0);
  v60 = *(_QWORD *)(v8 - 8);
  v61 = v8;
  __chkstk_darwin(v8);
  v59 = (uint64_t *)((char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  v62 = (uint64_t *)((char *)&v52 - v11);
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v52 - v18;
  v20 = type metadata accessor for BinaryDecodingOptions(0, v17);
  __chkstk_darwin(v20);
  v22 = (char *)&v52 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for CRLProto_ChunkedRealTimeMessage(0);
  __chkstk_darwin(v23);
  v25 = (char *)&v52 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = 0;
  memset(v64, 0, sizeof(v64));
  v26 = sub_1004BE310(a1, a2);
  BinaryDecodingOptions.init()(v26);
  v27 = sub_1004B7878(&qword_1013F22D8, type metadata accessor for CRLProto_ChunkedRealTimeMessage, (uint64_t)&unk_100F23C40);
  v28 = v66;
  Message.init(serializedData:extensions:partial:options:)(a1, a2, v64, 0, v22, v23, v27);
  if (v28)
  {
    sub_1004BBBC8(a1, a2);
    return (uint64_t)v25;
  }
  v66 = v19;
  v54 = v13;
  v55 = v15;
  v56 = a1;
  v57 = v25;
  v53 = v12;
  v29 = (uint64_t)&v25[*(int *)(v23 + 32)];
  v30 = v63;
  sub_100552F84(v29, v63);
  v31 = v61;
  v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v60 + 48);
  v33 = v32(v30, 1, v61);
  v34 = v62;
  if ((_DWORD)v33 == 1)
  {
    *(_OWORD *)v62 = xmmword_100EF78C0;
    UnknownStorage.init()(v33);
    sub_10078F968(v30);
  }
  else
  {
    sub_100552FCC(v30, (uint64_t)v62);
  }
  v35 = *v34;
  v36 = v34[1];
  sub_1004BE310(*v34, v36);
  sub_1004B84A4((uint64_t)v34, type metadata accessor for CRLProto_Data);
  UUID.init(crl_data:)(v35, v36);
  v63 = 0;
  v37 = *(_DWORD *)v57;
  if (*(_DWORD *)v57 < 0x10000u)
  {
    v38 = *((_DWORD *)v57 + 1);
    v39 = v59;
    if (v38 < 0x10000)
    {
      v40 = v57[8];
      v41 = (uint64_t)&v57[*(int *)(v23 + 36)];
      v42 = v58;
      sub_100552F84(v41, v58);
      v43 = v32(v42, 1, v31);
      if ((_DWORD)v43 == 1)
      {
        *(_OWORD *)v39 = xmmword_100EF78C0;
        UnknownStorage.init()(v43);
        sub_10078F968(v42);
      }
      else
      {
        sub_100552FCC(v42, (uint64_t)v39);
      }
      sub_1004BBBC8(v56, a2);
      sub_1004B84A4((uint64_t)v57, type metadata accessor for CRLProto_ChunkedRealTimeMessage);
      v44 = *v39;
      v45 = v39[1];
      sub_1004BE310(*v39, v45);
      sub_1004B84A4((uint64_t)v39, type metadata accessor for CRLProto_Data);
      v46 = v55;
      v47 = *(void (**)(char *, char *, uint64_t))(v54 + 32);
      v48 = v53;
      v47(v55, v66, v53);
      v49 = type metadata accessor for CRLChunkedRealTimeMessage(0);
      v25 = (char *)swift_allocObject(v49, *(unsigned int *)(v49 + 48), *(unsigned __int16 *)(v49 + 52));
      v47(&v25[OBJC_IVAR____TtC8Freeform25CRLChunkedRealTimeMessage_chainID], v46, v48);
      *(_WORD *)&v25[OBJC_IVAR____TtC8Freeform25CRLChunkedRealTimeMessage_index] = v37;
      *(_WORD *)&v25[OBJC_IVAR____TtC8Freeform25CRLChunkedRealTimeMessage_lastIndex] = v38;
      v25[OBJC_IVAR____TtC8Freeform25CRLChunkedRealTimeMessage_encrypted] = v40;
      v50 = &v25[OBJC_IVAR____TtC8Freeform25CRLChunkedRealTimeMessage_data];
      *(_QWORD *)v50 = v44;
      *((_QWORD *)v50 + 1) = v45;
      return (uint64_t)v25;
    }
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
  __break(1u);
  return result;
}

uint64_t sub_1007B40A4(uint64_t a1, unint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  __n128 v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  __n128 v35;
  _QWORD v36[2];
  void (*v37)(char *, char *, uint64_t);
  int v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;

  v9 = type metadata accessor for UUID(0);
  v40 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v39 = (char *)v36 - v13;
  v14 = sub_1007B3234(a4, a1, a2);
  v15 = v14;
  v16 = *(_QWORD *)(v14 + 16);
  if (v16 >> 16)
  {
    swift_bridgeObjectRelease(v14);
    v17 = sub_1006E6E94();
    swift_allocError(&type metadata for CRLRealTimeSyncError, v17, 0, 0);
    *v18 = 2;
    return swift_willThrow(v19);
  }
  else
  {
    v36[1] = v4;
    v41 = (unint64_t)_swiftEmptyArrayStorage;
    v21 = sub_100DCD070(v16, 0);
    v22 = specialized Array._endMutation()(v21);
    if (v16)
    {
      v38 = v16 - 1;
      UUID.init()(v22);
      v23 = 0;
      v37 = *(void (**)(char *, char *, uint64_t))(v40 + 16);
      v24 = a3 & 1;
      v36[0] = v15;
      v25 = (unint64_t *)(v15 + 40);
      do
      {
        v37(v11, v39, v9);
        v26 = *(v25 - 1);
        v27 = *v25;
        v28 = type metadata accessor for CRLChunkedRealTimeMessage(0);
        v29 = swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
        (*(void (**)(uint64_t, char *, uint64_t))(v40 + 32))(v29 + OBJC_IVAR____TtC8Freeform25CRLChunkedRealTimeMessage_chainID, v11, v9);
        *(_WORD *)(v29 + OBJC_IVAR____TtC8Freeform25CRLChunkedRealTimeMessage_index) = v23;
        *(_WORD *)(v29 + OBJC_IVAR____TtC8Freeform25CRLChunkedRealTimeMessage_lastIndex) = v38;
        *(_BYTE *)(v29 + OBJC_IVAR____TtC8Freeform25CRLChunkedRealTimeMessage_encrypted) = v24;
        v30 = (uint64_t *)(v29 + OBJC_IVAR____TtC8Freeform25CRLChunkedRealTimeMessage_data);
        *v30 = v26;
        v30[1] = v27;
        sub_1004BE310(v26, v27);
        swift_retain(v29);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v31);
        v33 = *(_QWORD *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v32 = *(_QWORD *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v33 >= v32 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1);
        ++v23;
        v25 += 2;
        v34 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v33, v29);
        specialized Array._endMutation()(v34);
        v35 = swift_release(v29);
      }
      while (v16 != v23);
      (*(void (**)(char *, uint64_t, __n128))(v40 + 8))(v39, v9, v35);
      swift_bridgeObjectRelease(v36[0]);
      return v41;
    }
    else
    {
      result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
      __break(1u);
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CRLChunkedRealTimeMessage.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1007B43C0 + 4 * byte_100F0AF8A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1007B43F4 + 4 * byte_100F0AF85[v4]))();
}

uint64_t sub_1007B43F4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1007B43FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1007B4404);
  return result;
}

uint64_t sub_1007B4410(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1007B4418);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1007B441C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1007B4424(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CRLChunkedRealTimeMessage.CodingKeys()
{
  return &type metadata for CRLChunkedRealTimeMessage.CodingKeys;
}

unint64_t sub_1007B4444()
{
  unint64_t result;

  result = qword_1013F22E0;
  if (!qword_1013F22E0)
  {
    result = swift_getWitnessTable(&unk_100F0B104, &type metadata for CRLChunkedRealTimeMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1013F22E0);
  }
  return result;
}

unint64_t sub_1007B448C()
{
  unint64_t result;

  result = qword_1013F22E8;
  if (!qword_1013F22E8)
  {
    result = swift_getWitnessTable(&unk_100F0B074, &type metadata for CRLChunkedRealTimeMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1013F22E8);
  }
  return result;
}

unint64_t sub_1007B44D4()
{
  unint64_t result;

  result = qword_1013F22F0;
  if (!qword_1013F22F0)
  {
    result = swift_getWitnessTable(&unk_100F0B09C, &type metadata for CRLChunkedRealTimeMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1013F22F0);
  }
  return result;
}

uint64_t sub_1007B4518(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x44496E69616863 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44496E69616863, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7865646E69 && a2 == 0xE500000000000000)
  {
    v7 = 0xE500000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7865646E69, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x65646E497473616CLL && a2 == 0xE900000000000078)
  {
    v8 = 0xE900000000000078;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65646E497473616CLL, 0xE900000000000078, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x6574707972636E65 && a2 == 0xE900000000000064)
  {
    v9 = 0xE900000000000064;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6574707972636E65, 0xE900000000000064, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 1635017060 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(1635017060, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

double sub_1007B472C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t inited;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  double result;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD v44[3];
  uint64_t v45;
  uint64_t v46;
  _BYTE v47[24];
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  _BYTE v51[72];

  v2 = v1;
  v4 = sub_1004B804C(&qword_1013E01F0);
  *(_QWORD *)&v5 = __chkstk_darwin(v4).n128_u64[0];
  v7 = (char *)v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (char *)objc_msgSend(*(id *)(v1 + 16), "objectForKey:", a1, v5);
  if (v8)
  {
    v9 = v8;
    v10 = (uint64_t)(v8 + 64);
    swift_beginAccess(v8 + 64, v47, 0, 0);
    sub_1004CB7BC(v10, (uint64_t)&v48, &qword_1013EE2F8);
    if (*((_QWORD *)&v49 + 1))
    {
      sub_1004E90B0((uint64_t)&v48, (uint64_t)v44);
      sub_1004CB800((uint64_t)&v48, &qword_1013EE2F8);
      v11 = v45;
      v12 = v46;
      sub_1004BB5A4(v44, v45);
      dispatch thunk of Cancellable.cancel()(v11, v12);
      _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v44);
    }
    else
    {
      sub_1004CB800((uint64_t)&v48, &qword_1013EE2F8);
    }
    v50 = 0;
    v48 = 0u;
    v49 = 0u;
    swift_beginAccess(v10, v44, 33, 0);
    sub_100582338((uint64_t)&v48, v10, &qword_1013EE2F8);
    swift_endAccess(v44);
    dispatch thunk of __ServiceLocator.sceneService.getter(&v48, objc_msgSend(*(id *)(v1 + 16), "removeObjectForKey:", a1));
    v36 = *((_QWORD *)&v49 + 1);
    v37 = v50;
    sub_1004BB5A4(&v48, *((uint64_t *)&v49 + 1));
    dispatch thunk of __SceneService.remove(scene:)(*(_QWORD *)(a1 + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreRE11ClientScene_scene), v36, v37);
    _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v48);
    if (objc_msgSend(*(id *)(v1 + 16), "count"))
    {
      v38 = (uint64_t)v9;
    }
    else
    {
      sub_1007B5D08();
      v39 = type metadata accessor for TaskPriority(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v7, 1, 1, v39);
      type metadata accessor for MainActor(0);
      swift_retain(v1);
      v41 = static MainActor.shared.getter(v40);
      v42 = (_QWORD *)swift_allocObject(&unk_10127E4F0, 40, 7);
      v42[2] = v41;
      v42[3] = &protocol witness table for MainActor;
      v42[4] = v2;
      v43 = sub_100618920((uint64_t)v7, (uint64_t)&unk_1013F2738, (uint64_t)v42);
      swift_release(v9);
      v38 = v43;
    }
    *(_QWORD *)&result = swift_release(v38).n128_u64[0];
  }
  else
  {
    if (qword_1013DD7E8 != -1)
      swift_once(&qword_1013DD7E8, sub_100A04074);
    swift_beginAccess(&static OS_os_log.crlThreeDimensionalObjects, &v48, 0, 0);
    v13 = (void *)static OS_os_log.crlThreeDimensionalObjects;
    v14 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    inited = swift_initStackObject(v14, v51);
    *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
    v16 = v13;
    v17 = UUID.uuidString.getter(v16);
    v19 = v18;
    v20 = String.index(_:offsetBy:)(15, 8, v17, v18);
    v21 = String.subscript.getter(15, v20, v17, v19);
    v23 = v22;
    v25 = v24;
    v27 = v26;
    v28 = swift_bridgeObjectRelease(v19);
    v29 = static String._fromSubstring(_:)(v21, v23, v25, v27, v28);
    v31 = v30;
    swift_bridgeObjectRelease(v27);
    *(_QWORD *)(inited + 56) = &type metadata for String;
    *(_QWORD *)(inited + 64) = sub_1004CFC2C();
    *(_QWORD *)(inited + 32) = v29;
    *(_QWORD *)(inited + 40) = v31;
    v33 = static os_log_type_t.debug.getter(v32);
    sub_100A06EBC((uint64_t)v16, &_mh_execute_header, v33, "(CoreRE) [%{public}@] Cannot remove unknown client.", 51, 2, inited);
    swift_setDeallocating(inited);
    v34 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(inited + 32, 1, v34);

  }
  return result;
}

uint64_t sub_1007B4B0C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v6;
  uint64_t inited;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  Swift::String v34;
  void *object;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __n128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __n128 v77;
  uint64_t v78;
  uint64_t v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v85;
  unint64_t v87;
  char v88[72];
  _BYTE v89[24];
  _OWORD v90[2];
  uint64_t v91;
  uint64_t v92[3];
  uint64_t v93;
  uint64_t v94;
  char v95[72];
  char v96[32];
  uint64_t v97;

  v4 = v3;
  if (qword_1013DD7E8 != -1)
    swift_once(&qword_1013DD7E8, sub_100A04074);
  swift_beginAccess(&static OS_os_log.crlThreeDimensionalObjects, v96, 0, 0);
  v6 = (void *)static OS_os_log.crlThreeDimensionalObjects;
  v80 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v80, v95);
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  v8 = a1 + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreRE10RepBackend_uuid;
  v9 = v6;
  v82 = a1;
  v10 = UUID.uuidString.getter(v9);
  v12 = v11;
  v13 = String.index(_:offsetBy:)(15, 8, v10, v11);
  v14 = String.subscript.getter(15, v13, v10, v12);
  v16 = v15;
  v18 = v17;
  v20 = v19;
  v21 = swift_bridgeObjectRelease(v12);
  v22 = v18;
  v23 = v8;
  v24 = static String._fromSubstring(_:)(v14, v16, v22, v20, v21);
  v26 = v25;
  swift_bridgeObjectRelease(v20);
  *(_QWORD *)(inited + 56) = &type metadata for String;
  v27 = sub_1004CFC2C();
  *(_QWORD *)(inited + 64) = v27;
  *(_QWORD *)(inited + 32) = v24;
  v28 = inited + 32;
  *(_QWORD *)(inited + 40) = v26;
  v30 = static os_log_type_t.debug.getter(v29);
  sub_100A06EBC((uint64_t)v9, &_mh_execute_header, v30, "(CoreRE) [%{public}@] Adding new client.", 40, 2, inited);
  swift_setDeallocating(inited);
  v31 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(v28, 1, v31);

  strcpy((char *)v92, "ClientScene-");
  BYTE5(v92[1]) = 0;
  HIWORD(v92[1]) = -5120;
  v32 = type metadata accessor for UUID(0);
  v33 = sub_1004B7878(&qword_1013E49E0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v32, v33);
  object = v34._object;
  String.append(_:)(v34);
  swift_bridgeObjectRelease(object);
  v36 = sub_1007B5934(v92[0], v92[1]);
  v38 = v37;
  v39 = swift_bridgeObjectRelease(v92[1]);
  v40 = String.utf8CString.getter(v36, v38, v39);
  v41 = swift_bridgeObjectRelease(v38);
  v42 = RESceneCreate(v40 + 32, v41);
  v43 = swift_release(v40);
  RESceneSetRequiresAnchoring(v42, 0, v43);
  type metadata accessor for Scene(0);
  v44 = static Scene.fromCore(_:)(v42);
  v45 = RERelease(v42);
  dispatch thunk of __ServiceLocator.sceneService.getter(v92, v45);
  v46 = v93;
  v47 = v94;
  sub_1004BB5A4(v92, v93);
  dispatch thunk of __SceneService.append(scene:)(v44, v46, v47);
  _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v92);
  v48 = _s11ClientSceneCMa(0);
  swift_allocObject(v48, *(unsigned int *)(v48 + 48), *(unsigned __int16 *)(v48 + 52));
  swift_retain(v82);
  swift_retain(v44);
  swift_retain(a2);
  v49 = sub_1009BA4A4(v82, v44, a2, a3);
  v50 = *(void **)(v4 + 24);
  v51 = _s6CoreREO19SceneRenderingStateCMa(0);
  swift_allocObject(v51, *(unsigned int *)(v51 + 48), *(unsigned __int16 *)(v51 + 52));
  swift_unknownObjectRetain(v50);
  swift_retain(v49);
  v52 = v97;
  v53 = sub_1007B6438(v50, v49);
  if (v52)
  {
    swift_release(v44);
    swift_release(v49);
  }
  else
  {
    v54 = v53;
    v85 = v31;
    v87 = v27;
    if (!*(_QWORD *)(v4 + 96))
      sub_1007B5A28();
    v97 = v23;
    if ((dispatch thunk of __Engine.isRunning.getter() & 1) == 0)
      dispatch thunk of __Engine.__start()();
    objc_msgSend(*(id *)(v4 + 16), "setObject:forKey:", v54, v49);
    v55 = type metadata accessor for SceneEvents.Update(0);
    v91 = 0;
    memset(v90, 0, sizeof(v90));
    v56 = swift_allocObject(&unk_10127E518, 24, 7);
    swift_weakInit(v56 + 16, v4);
    v57 = swift_allocObject(&unk_10127E540, 24, 7);
    swift_weakInit(v57 + 16, v49);
    v58 = v54;
    v83 = v54;
    v59 = swift_allocObject(&unk_10127E568, 32, 7);
    *(_QWORD *)(v59 + 16) = v56;
    *(_QWORD *)(v59 + 24) = v57;
    Scene.subscribe<A>(to:on:_:)(v92, v55, v90, sub_1007B9210, v59, v55, &protocol witness table for SceneEvents.Update);
    swift_release(v59);
    sub_1004CB800((uint64_t)v90, &qword_1013F2758);
    sub_1004C4938((uint64_t)v92, (uint64_t)v90, &qword_1013EE2F8);
    swift_beginAccess(v58 + 64, v89, 33, 0);
    sub_100582338((uint64_t)v90, v58 + 64, &qword_1013EE2F8);
    swift_endAccess(v89);
    v60 = (void *)static OS_os_log.crlThreeDimensionalObjects;
    v61 = swift_initStackObject(v80, v88);
    *(_OWORD *)(v61 + 16) = xmmword_100EF5E40;
    v81 = v60;
    v62 = UUID.uuidString.getter(v81);
    v64 = v63;
    v65 = String.index(_:offsetBy:)(15, 8, v62, v63);
    v66 = String.subscript.getter(15, v65, v62, v64);
    v68 = v67;
    v70 = v69;
    v72 = v71;
    v73 = swift_bridgeObjectRelease(v64);
    v74 = static String._fromSubstring(_:)(v66, v68, v70, v72, v73);
    v76 = v75;
    v77 = swift_bridgeObjectRelease(v72);
    *(_QWORD *)(v61 + 56) = &type metadata for String;
    *(_QWORD *)(v61 + 64) = v87;
    *(_QWORD *)(v61 + 32) = v74;
    *(_QWORD *)(v61 + 40) = v76;
    v78 = static os_log_type_t.debug.getter(v77);
    sub_100A06EBC((uint64_t)v81, &_mh_execute_header, v78, "(CoreRE) [%{public}@] Added new client.", 39, 2, v61);
    swift_setDeallocating(v61);
    swift_arrayDestroy(v61 + 32, 1, v85);
    swift_release(v44);
    swift_release(v83);

  }
  return v49;
}

uint64_t sub_1007B5120()
{
  uint64_t v0;
  uint64_t result;

  v0 = _s6CoreREO6EngineCMa();
  swift_allocObject(v0, 104, 7);
  result = sub_1007B5158();
  qword_10147F5F0 = result;
  return result;
}

uint64_t sub_1007B5158()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  uint64_t v11;
  id v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  _OWORD v34[2];
  uint64_t v35;
  _QWORD v36[3];
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[4];

  v1 = (_QWORD *)v0;
  v2 = type metadata accessor for __EngineServiceMaskRef(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for __Engine.Configuration(0, v4);
  v32 = *(_QWORD *)(v7 - 8);
  v33 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = objc_msgSend((id)objc_opt_self(NSMapTable), "mapTableWithKeyOptions:valueOptions:", 517, 0);
  *(_OWORD *)(v0 + 48) = 0u;
  v11 = v0 + 48;
  *(_QWORD *)(v0 + 16) = v10;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_QWORD *)(v0 + 96) = 0;
  if (qword_1013DD7E8 != -1)
    swift_once(&qword_1013DD7E8, sub_100A04074);
  swift_beginAccess(&static OS_os_log.crlThreeDimensionalObjects, (char *)v42 + 4, 0, 0);
  v12 = (id)static OS_os_log.crlThreeDimensionalObjects;
  v14 = static os_log_type_t.debug.getter(v13);
  sub_100A06EBC((uint64_t)v12, &_mh_execute_header, v14, "(CoreRE) Loading CoreRE.Engine.", 31, 2, (uint64_t)_swiftEmptyArrayStorage);

  v15 = __Engine.Configuration.init()();
  __Engine.Configuration.__createServices.getter(v15);
  type metadata accessor for REEngineServiceMask(0);
  v17 = v16;
  __EngineServiceMaskRef.__as<A>(_:)(v42, v16, v16);
  v18 = *(void (**)(char *, uint64_t))(v3 + 8);
  v18(v6, v2);
  v19 = v42[0] & 0xFFFFDE3F;
  if ((v42[0] & 0x21C0) != 0)
    LODWORD(v42[0]) &= 0xFFFFDE3F;
  v40 = v17;
  LODWORD(v39[0]) = v19;
  static __EngineServiceMaskRef.__fromCore(_:)(v39);
  _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v39);
  v20 = __Engine.Configuration.__createServices.setter(v6);
  __Engine.Configuration.__updateServices.getter(v20);
  __EngineServiceMaskRef.__as<A>(_:)(v39, v17, v17);
  v18(v6, v2);
  LODWORD(v42[0]) = v39[0];
  if ((v39[0] & 0x21C0) != 0)
    LODWORD(v42[0]) = v39[0] & 0xFFFFDE3F;
  v40 = v17;
  LODWORD(v39[0]) &= 0xFFFFDE3F;
  static __EngineServiceMaskRef.__fromCore(_:)(v39);
  _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v39);
  __Engine.Configuration.__updateServices.setter(v6);
  type metadata accessor for __ServiceLocator(0);
  v21 = static __ServiceLocator.__createSharedIfNeeded(with:)(v9);
  v1[5] = static __ServiceLocator.shared.getter(v21);
  v1[4] = dispatch thunk of __ServiceLocator.engine.getter();
  dispatch thunk of __ServiceLocator.renderService.getter(v39);
  v22 = v40;
  v23 = v41;
  sub_1004BB5A4(v39, v40);
  v1[3] = dispatch thunk of __RenderService.device.getter(v22, v23);
  v24 = _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v39);
  dispatch thunk of __ServiceLocator.eventService.getter(v36, v24);
  v25 = v37;
  v26 = v38;
  sub_1004BB5A4(v36, v37);
  v27 = type metadata accessor for EngineRenderEvent(0);
  v35 = 0;
  memset(v34, 0, sizeof(v34));
  v28 = swift_allocObject(&unk_10127E518, 24, 7);
  swift_weakInit(v28 + 16, v1);
  EventService.subscribe<A>(to:on:componentType:_:)(v39, v27, v34, 0, 0, sub_1007B9128, v28, v25, v27, v26);
  swift_release(v28);
  sub_1004CB800((uint64_t)v34, &qword_1013F2758);
  swift_beginAccess(v11, v34, 33, 0);
  sub_100582338((uint64_t)v39, v11, &qword_1013EE2F8);
  swift_endAccess(v34);
  _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v36);
  v30 = dispatch thunk of __ServiceLocator.coreServiceLocator.getter(v29);
  result = REServiceLocatorGetECSService(v30);
  if (result)
  {
    REECSManagerAddDefaultSystems();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v9, v33);
    return (uint64_t)v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

double sub_1007B5528(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  double result;
  uint64_t v5;
  _BYTE v6[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0, 0);
  Strong = swift_weakLoadStrong(v2);
  if (Strong)
  {
    v5 = Strong;
    sub_1007B557C();
    *(_QWORD *)&result = swift_release(v5).n128_u64[0];
  }
  return result;
}

uint64_t sub_1007B557C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  double CurrentTime;
  uint64_t RenderFrameSettings;
  float v16;
  id v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Swift::String v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t RenderFrameWorkload;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  _QWORD v51[2];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  _OWORD v62[9];
  __int128 v63;
  uint64_t v64;

  v1 = v0;
  v2 = type metadata accessor for NSFastEnumerationIterator(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = dispatch thunk of __ServiceLocator.coreServiceLocator.getter(v4);
  result = REServiceLocatorGetEngine();
  if (!result)
    return result;
  v9 = result;
  result = REServiceLocatorGetRenderManager(v7);
  if (!result || !*(_QWORD *)(v1 + 96))
    return result;
  v10 = *(_QWORD *)(v1 + 88);
  v11 = __CFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    goto LABEL_20;
  v13 = result;
  v41 = *(_QWORD *)(v1 + 96);
  v43 = v3;
  v44 = v2;
  *(_QWORD *)(v1 + 88) = v12;
  CurrentTime = REEngineGetCurrentTime(v9);
  v42 = v13;
  RenderFrameSettings = RERenderManagerCreateRenderFrameSettings(v13);
  v16 = CurrentTime;
  RERenderFrameSettingsSetTotalTime(v16);
  v17 = objc_msgSend(*(id *)(v1 + 16), "objectEnumerator");
  if (!v17)
    v17 = objc_msgSend(objc_allocWithZone((Class)NSEnumerator), "init");
  NSEnumerator.makeIterator()();

  NSFastEnumerationIterator.next()(&v63, v18);
  if (!v64)
  {
LABEL_15:
    (*(void (**)(char *, uint64_t))(v43 + 8))(v6, v44);
    v39 = v42;
    RenderFrameWorkload = RERenderManagerCreateRenderFrameWorkload(v42);
    RERenderFrameWorkloadConfigure(RenderFrameWorkload, RenderFrameSettings);
    RERenderGraphEmitterAssetExecute(v41, v39);
    RERenderFrameWorkloadCommit(RenderFrameWorkload);
    RERelease(RenderFrameWorkload);
    return RERelease(RenderFrameSettings);
  }
  v19 = (char *)&type metadata for Any + 8;
  while (1)
  {
    sub_10050CB14(&v63, v62);
    v21 = _s6CoreREO19SceneRenderingStateCMa(0);
    if (!swift_dynamicCast(v51, v62, v19, v21, 6))
    {
      (*(void (**)(char *, uint64_t))(v43 + 8))(v6, v44);
      return RERelease(RenderFrameSettings);
    }
    v22 = v51[0];
    if (*(_BYTE *)(v51[0] + 256) == 1)
      break;
    swift_release(v51[0]);
LABEL_10:
    NSFastEnumerationIterator.next()(&v63, v20);
    if (!v64)
      goto LABEL_15;
  }
  v23 = v6;
  v24 = v19;
  v25 = v1;
  v50 = *(_QWORD *)(v1 + 88);
  v26 = *(_QWORD *)(v51[0] + 16);
  v27 = *(_DWORD *)(v26 + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreRE11ClientScene_configuration);
  v28 = *(_OWORD *)(v26 + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreRE11ClientScene_configuration + 16);
  v48 = *(_OWORD *)(v26 + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreRE11ClientScene_configuration + 32);
  v49 = v28;
  v47 = *(_OWORD *)(v26 + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreRE11ClientScene_configuration + 48);
  v29 = *(_QWORD *)(v26 + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreRE11ClientScene_configuration + 64);
  v30 = *(_OWORD *)(v26 + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreRE11ClientScene_sceneDescription);
  v45 = *(_OWORD *)(v26 + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreRE11ClientScene_sceneDescription + 16);
  v46 = v30;
  v31 = *(_QWORD *)(v26 + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreRE11ClientScene_sceneDescription + 32);
  v32 = *(_BYTE *)(v26 + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreRE11ClientScene_sceneDescription + 40);
  v33 = RenderFrameSettings;
  v34 = *(_QWORD *)(v26 + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreRE11ClientScene_sceneDescription + 48);
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRetain(v34);
  sub_1009B8CE8();
  LODWORD(v51[0]) = v27;
  v52 = v49;
  v53 = v48;
  v54 = v47;
  v55 = v29;
  v56 = v46;
  v57 = v45;
  v58 = v31;
  v59 = v32;
  v60 = v34;
  v61 = v35;
  RenderFrameSettings = v33;
  SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)((CKRecordID)v51, v36);
  sub_1004C4938(v22 + 112, (uint64_t)v62, &qword_1013F2760);
  sub_1004C4938((uint64_t)v51, v22 + 112, &qword_1013F2760);
  sub_1007B9130((uint64_t *)v62);
  result = RERenderFrameSettingsAddGpuSignalEvent(v33, *(_QWORD *)(v22 + 40), v50);
  v37 = *(_QWORD *)(v22 + 264);
  v11 = __CFADD__(v37, 1);
  v38 = v37 + 1;
  if (!v11)
  {
    *(_QWORD *)(v22 + 264) = v38;
    swift_release(v22);
    v1 = v25;
    v19 = v24;
    v6 = v23;
    goto LABEL_10;
  }
  __break(1u);
LABEL_20:
  __break(1u);
  return result;
}

void sub_1007B58D0()
{
  id v0;
  void *v1;
  unsigned __int8 v2;

  v0 = objc_msgSend((id)objc_opt_self(CRLCapabilities), "currentCapabilities");
  if (v0)
  {
    v1 = v0;
    v2 = objc_msgSend(v0, "isMetalCapable");

    byte_10147F5F8 = v2 ^ 1;
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1007B5934(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;
  void *object;

  if ((sub_1007B5FF8(a1, a2, v2) & 1) != 0)
  {
    v5 = 1;
    while (1)
    {
      swift_bridgeObjectRetain(a2);
      v6._countAndFlagsBits = 45;
      v6._object = (void *)0xE100000000000000;
      String.append(_:)(v6);
      v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      object = v7._object;
      String.append(_:)(v7);
      swift_bridgeObjectRelease(object);
      if ((sub_1007B5FF8(a1, a2, v2) & 1) == 0)
        break;
      swift_bridgeObjectRelease(a2);
      if (__OFADD__(v5++, 1))
      {
        __break(1u);
        goto LABEL_7;
      }
    }
  }
  else
  {
LABEL_7:
    swift_bridgeObjectRetain(a2);
  }
  return a1;
}

void sub_1007B5A28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssetHandle;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  if (*(_QWORD *)(v0 + 96))
  {
    sub_100757E04(&_mh_execute_header, (uint64_t)"loadRenderGraphEmitter()", 24, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CrossPlatformUI/USD Rendering/CoreRE/CRLUSDRendering+CoreRE_Engine.swift", 126, 2, 259, "expected nil value, but non-nil found", 37, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"loadRenderGraphEmitter()", 24, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CrossPlatformUI/USD Rendering/CoreRE/CRLUSDRendering+CoreRE_Engine.swift", 126, 2u, 259, (uint64_t)"expected nil value, but non-nil found", 37, 2u);
  }
  else
  {
    v1 = v0;
    dispatch thunk of __ServiceLocator.assetService.getter(v10);
    v2 = v11;
    v3 = v12;
    sub_1004BB5A4(v10, v11);
    v4 = dispatch thunk of __REAssetService.__handle.getter(v2, v3);
    _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v10);
    AssetHandle = REAssetManagerCreateAssetHandle(v4, "engine:BuiltinRenderGraphResources/SimpleForward/simpleForwardCombinedPost.rerendergraphemitter");
    if (AssetHandle)
    {
      v6 = AssetHandle;
      REAssetHandleLoadNow();
      dispatch thunk of __ServiceLocator.renderService.getter(v10);
      v7 = v11;
      v8 = v12;
      sub_1004BB5A4(v10, v11);
      v9 = dispatch thunk of __RenderService.__coreRenderManager.getter(v7, v8);
      _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v10);
      RERenderGraphEmitterAssetRegisterProviders(v6, v9);
      *(_QWORD *)(v1 + 96) = v6;
    }
    else
    {
      __break(1u);
    }
  }
}

double sub_1007B5B94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t Strong;
  double result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  __n128 v12;
  uint64_t v13;
  char v14[24];
  char v15[24];

  v4 = a2 + 16;
  swift_beginAccess(a2 + 16, v15, 0, 0);
  Strong = swift_weakLoadStrong(v4);
  if (Strong)
  {
    v7 = Strong;
    v8 = a3 + 16;
    swift_beginAccess(v8, v14, 0, 0);
    v9 = swift_weakLoadStrong(v8);
    if (v9)
    {
      v10 = v9;
      v11 = objc_msgSend(*(id *)(v7 + 16), "objectForKey:", v9);
      if (v11)
      {
        v13 = (uint64_t)v11;
        sub_1007B6A98(v12);
        swift_release(v7);
        v7 = v10;
        v10 = v13;
      }
      else
      {
        sub_100757E04(&_mh_execute_header, (uint64_t)"doUpdateCallback(client:update:)", 32, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CrossPlatformUI/USD Rendering/CoreRE/CRLUSDRendering+CoreRE_Engine.swift", 126, 2, 307, "invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
        sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"doUpdateCallback(client:update:)", 32, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CrossPlatformUI/USD Rendering/CoreRE/CRLUSDRendering+CoreRE_Engine.swift", 126, 2u, 307, (uint64_t)"invalid nil found when unwrapping value", 39, 2u);
      }
      swift_release(v7);
      v7 = v10;
    }
    *(_QWORD *)&result = swift_release(v7).n128_u64[0];
  }
  return result;
}

void sub_1007B5D08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 96);
  if (v1)
  {
    v2 = v0;
    dispatch thunk of __ServiceLocator.renderService.getter(v6);
    v3 = v7;
    v4 = v8;
    sub_1004BB5A4(v6, v7);
    v5 = dispatch thunk of __RenderService.__coreRenderManager.getter(v3, v4);
    _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v6);
    RERenderGraphEmitterAssetUnregisterProviders(v1, v5);
    RERelease(v1);
    *(_QWORD *)(v2 + 96) = 0;
  }
  else
  {
    sub_100757E04(&_mh_execute_header, (uint64_t)"unloadRenderGraphEmitter()", 26, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CrossPlatformUI/USD Rendering/CoreRE/CRLUSDRendering+CoreRE_Engine.swift", 126, 2, 277, "invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"unloadRenderGraphEmitter()", 26, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CrossPlatformUI/USD Rendering/CoreRE/CRLUSDRendering+CoreRE_Engine.swift", 126, 2u, 277, (uint64_t)"invalid nil found when unwrapping value", 39, 2u);
  }
}

BOOL sub_1007B5E20(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  _BYTE *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  _BYTE v27[24];

  v9 = sub_1004B804C(&qword_1013F2768);
  __chkstk_darwin(v9);
  v11 = (double *)&v27[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = &v27[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  *(_QWORD *)&v17 = __chkstk_darwin(v16).n128_u64[0];
  v19 = &v27[-v18 - 8];
  v20 = (char *)objc_msgSend(*(id *)(v4 + 16), "objectForKey:", a1, v17);
  v21 = v20;
  if (v20)
  {
    UUID.init()(v20);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v13 + 16))(v15, v19, v12);
    v22 = _s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa(0);
    v23 = (char *)v11 + *(int *)(v22 + 20);
    v24 = sub_1004B804C(&qword_1013FF9E0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v23, a2, v24);
    *v11 = a3;
    v11[1] = a4;
    *((_BYTE *)v11 + *(int *)(v22 + 24)) = 0;
    (*(void (**)(double *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v11, 0, 1, v22);
    swift_beginAccess(&v21[OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreREP33_23F24EF2C3AE8F7E8DC9481174D548F219SceneRenderingState_snapshotRequests], v27, 33, 0);
    sub_10083E88C((uint64_t)v11, (uint64_t)v15);
    swift_endAccess(v27);
    (*(void (**)(_BYTE *, uint64_t))(v13 + 8))(v19, v12);
    swift_release(v21);
  }
  return v21 != 0;
}

uint64_t sub_1007B5FF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  id v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  _OWORD v26[2];
  __int128 v27;
  uint64_t v28;

  v6 = type metadata accessor for NSFastEnumerationIterator(0);
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)&v8 = __chkstk_darwin(v6).n128_u64[0];
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = objc_msgSend(*(id *)(a3 + 16), "keyEnumerator", v8);
  NSEnumerator.makeIterator()();

  NSFastEnumerationIterator.next()(&v27, v12);
  while (v28)
  {
    sub_10050CB14(&v27, v26);
    v14 = _s11ClientSceneCMa(0);
    v15 = swift_dynamicCast(&v25, v26, (char *)&type metadata for Any + 8, v14, 6);
    if ((_DWORD)v15)
    {
      v16 = v25;
      v17 = dispatch thunk of Scene.name.getter();
      if (v17 == a1 && v18 == a2)
      {
        swift_bridgeObjectRelease(a2);
        v13 = swift_release(v16);
        v22 = 1;
        goto LABEL_12;
      }
      v20 = v18;
      v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, a1, a2, 0);
      swift_bridgeObjectRelease(v20);
      v13 = swift_release(v16);
      if ((v21 & 1) != 0)
      {
        v22 = 1;
        goto LABEL_12;
      }
    }
    NSFastEnumerationIterator.next()(&v27, v15);
  }
  v22 = 0;
LABEL_12:
  (*(void (**)(char *, uint64_t, __n128))(v7 + 8))(v10, v6, v13);
  return v22;
}

uint64_t sub_1007B6194(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4[2] = a4;
  v5 = type metadata accessor for ContinuousClock(0);
  v4[3] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[4] = v6;
  v4[5] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MainActor(0);
  v4[6] = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  v4[7] = v8;
  v4[8] = v9;
  return swift_task_switch(sub_1007B6228, v8, v9);
}

uint64_t sub_1007B6228()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t, uint64_t, char);

  ContinuousClock.init()();
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1013F2740 + dword_1013F2740);
  v1 = (_QWORD *)swift_task_alloc(unk_1013F2744);
  *(_QWORD *)(v0 + 72) = v1;
  *v1 = v0;
  v1[1] = sub_1007B62A8;
  return v3(0xA055690D9DB80000, 1, 0, 0, 1);
}

uint64_t sub_1007B62A8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 72);
  v5 = *(_QWORD *)(*v1 + 32);
  v4 = *(_QWORD *)(*v1 + 40);
  v6 = *(_QWORD *)(*v1 + 24);
  *(_QWORD *)(*v1 + 80) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0)
    v7 = sub_1007B6390;
  else
    v7 = sub_1007B6330;
  return swift_task_switch(v7, *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64));
}

uint64_t sub_1007B6330()
{
  uint64_t v0;

  if (!objc_msgSend(*(id *)(*(_QWORD *)(v0 + 16) + 16), "count", swift_release(*(_QWORD *)(v0 + 48)).n128_f64[0]))
    dispatch thunk of __Engine.__stop()();
  swift_task_dealloc(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1007B6390()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 48));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1007B63CC()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  sub_1004CB800(v0 + 48, &qword_1013EE2F8);
  return swift_deallocClassInstance(v0, 104, 7);
}

uint64_t _s6CoreREO6EngineCMa()
{
  return objc_opt_self(_TtCOO8Freeform15CRLUSDRendering6CoreRE6Engine);
}

uint64_t sub_1007B6438(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t Strong;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v36[18];
  _OWORD v37[4];
  uint64_t v38;
  _OWORD v39[10];

  v4 = v2;
  *(_OWORD *)(v2 + 64) = 0u;
  v7 = v2 + 64;
  v8 = v2 + 112;
  *(_QWORD *)(v4 + 96) = 0;
  *(_OWORD *)(v4 + 80) = 0u;
  sub_1007B9218(v39);
  sub_1004C4938((uint64_t)v39, v8, &qword_1013F2760);
  *(_BYTE *)(v4 + 256) = 1;
  *(_QWORD *)(v4 + 264) = 0;
  v9 = v4
     + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreREP33_23F24EF2C3AE8F7E8DC9481174D548F219SceneRenderingState_lastTextureResizeTimestamp;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  *(_BYTE *)(v4
           + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreREP33_23F24EF2C3AE8F7E8DC9481174D548F219SceneRenderingState_textureSizeIsStale) = 1;
  v11 = v4
      + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreREP33_23F24EF2C3AE8F7E8DC9481174D548F219SceneRenderingState_awakeState;
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  *(_BYTE *)(v4
           + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreREP33_23F24EF2C3AE8F7E8DC9481174D548F219SceneRenderingState_viewDescriptorsValid) = 0;
  v12 = OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreREP33_23F24EF2C3AE8F7E8DC9481174D548F219SceneRenderingState_snapshotRequests;
  *(_QWORD *)(v4 + v12) = sub_1008D6F20((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)(v4 + 16) = a2;
  *(_QWORD *)(v4 + 24) = a1;
  v13 = *(_OWORD *)(a2 + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreRE11ClientScene_configuration + 48);
  v37[2] = *(_OWORD *)(a2 + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreRE11ClientScene_configuration + 32);
  v37[3] = v13;
  v38 = *(_QWORD *)(a2 + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreRE11ClientScene_configuration + 64);
  v14 = *(_OWORD *)(a2 + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreRE11ClientScene_configuration + 16);
  v37[0] = *(_OWORD *)(a2 + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreRE11ClientScene_configuration);
  v37[1] = v14;
  swift_unknownObjectRetain_n(a1, 2);
  swift_retain(a2);
  v15 = sub_10073F3A4((double *)v37);
  v17 = objc_msgSend((id)objc_opt_self(MTLTextureDescriptor), "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", 81, v15, v16, 0);
  objc_msgSend(v17, "setStorageMode:", 2);
  objc_msgSend(v17, "setUsage:", 23);
  v18 = sub_10073F644(a1, v17, 0, 0);
  if (v3)
  {
    swift_unknownObjectRelease(a1);
    swift_release(a2);
    swift_release(*(_QWORD *)(v4 + 16));
    swift_unknownObjectRelease(*(_QWORD *)(v4 + 24));
    sub_1004CB800(v7, &qword_1013EE2F8);
    sub_1004C4938(v8, (uint64_t)v36, &qword_1013F2760);
    sub_1007B9130(v36);
    sub_1004CB800(v4+ OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreREP33_23F24EF2C3AE8F7E8DC9481174D548F219SceneRenderingState_lastTextureResizeTimestamp, &qword_1013E04F0);
    swift_bridgeObjectRelease(*(_QWORD *)(v4
                                        + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreREP33_23F24EF2C3AE8F7E8DC9481174D548F219SceneRenderingState_snapshotRequests));
    v22 = _s6CoreREO19SceneRenderingStateCMa(0);
    swift_deallocPartialClassInstance(v4, v22, *(unsigned int *)(*(_QWORD *)v4 + 48), *(unsigned __int16 *)(*(_QWORD *)v4 + 52));
  }
  else
  {
    *(_QWORD *)(v4 + 32) = v18;
    *(_QWORD *)(v4 + 40) = v19;
    *(_QWORD *)(v4 + 48) = v20;
    *(_QWORD *)(v4 + 56) = v21;
    *(_BYTE *)(v4
             + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreREP33_23F24EF2C3AE8F7E8DC9481174D548F219SceneRenderingState_textureSizeIsStale) = 0;
    Strong = swift_weakLoadStrong(a2 + 16);
    if (Strong)
    {
      v24 = Strong;
      v25 = *(void **)(v4 + 32);
      v26 = *(_QWORD *)(v4 + 40);
      v28 = *(_QWORD *)(v4 + 48);
      v27 = *(void **)(v4 + 56);
      swift_unknownObjectRetain(v25);
      swift_unknownObjectRetain(v26);
      swift_unknownObjectRetain(v28);
      v29 = v27;
      sub_100693B30(v25, v26, v28, v29);
      swift_release(v24);

      swift_unknownObjectRelease(v28);
      swift_unknownObjectRelease(v26);
      swift_unknownObjectRelease(v25);
    }
    if (*(_BYTE *)(v4
                  + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreREP33_23F24EF2C3AE8F7E8DC9481174D548F219SceneRenderingState_awakeState
                  + 8) == 1)
    {
      if (*(_QWORD *)(v4
                     + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreREP33_23F24EF2C3AE8F7E8DC9481174D548F219SceneRenderingState_awakeState))
        v30 = 0x7065656C7361;
      else
        v30 = 0x656B617761;
      if (*(_QWORD *)(v4
                     + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreREP33_23F24EF2C3AE8F7E8DC9481174D548F219SceneRenderingState_awakeState))
        v31 = 0xE600000000000000;
      else
        v31 = 0xE500000000000000;
    }
    else
    {
      v31 = 0x8000000100FD3430;
      v30 = 0xD000000000000011;
    }
    v32 = *(_QWORD *)(a2 + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreRE11ClientScene_metadata);
    swift_bridgeObjectRetain(v32);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v33);
    v36[0] = v32;
    sub_100828060(v30, v31, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease(0x8000000000000000);
    sub_1009B9100(v32);
    swift_release(a2);
    swift_unknownObjectRelease(a1);
  }
  return v4;
}

BOOL sub_1007B67E4(uint64_t a1)
{
  float *v1;
  float *v2;
  uint64_t v3;
  uint64_t v5;
  __int128 v6;
  double v7;
  __int128 v8;
  double v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  BOOL v13;
  float64x2_t v14;
  float v15;
  float v16;
  _BOOL8 result;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  char v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;

  v2 = v1;
  v3 = a1 + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreRE11ClientScene_configuration;
  if (*(float *)(a1 + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreRE11ClientScene_configuration) != *v1)
    return 1;
  v5 = 0;
  v6 = *(_OWORD *)(v3 + 16);
  v7 = *(double *)(v3 + 32);
  v8 = *((_OWORD *)v2 + 1);
  v9 = *((double *)v2 + 4);
  v10 = *(float64x2_t *)(v3 + 56);
  v11 = *(float64x2_t *)(v3 + 40);
  v12 = *(float64x2_t *)(v2 + 14);
  v13 = 1;
  v14 = *(float64x2_t *)(v2 + 10);
  while (1)
  {
    while (!v13)
    {
      if (v5 == 3)
        return 1;
      v13 = 0;
      ++v5;
    }
    v27 = v6;
    v15 = *(float *)((unint64_t)&v27 & 0xFFFFFFFFFFFFFFF3 | (4 * (v5 & 3)));
    v28 = v8;
    v16 = *(float *)((unint64_t)&v28 & 0xFFFFFFFFFFFFFFF3 | (4 * (v5 & 3)));
    v13 = v15 == v16;
    if (v5 == 3)
      break;
    ++v5;
  }
  result = 1;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(v11, v14), (int32x4_t)vceqq_f64(v10, v12))), 0xFuLL))) & 1) != 0&& v15 == v16&& v7 == v9)
  {
    v19 = *(_QWORD *)(a1 + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreRE11ClientScene_sceneDescription + 32);
    v20 = *(unsigned __int8 *)(a1
                             + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreRE11ClientScene_sceneDescription
                             + 40);
    v21 = *(_QWORD *)(a1 + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreRE11ClientScene_sceneDescription + 48);
    v22 = *((_QWORD *)v2 + 14);
    v23 = *((unsigned __int8 *)v2 + 120);
    if (sub_10095899C(*(__n128 *)(a1 + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreRE11ClientScene_sceneDescription), *(__n128 *)(a1 + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreRE11ClientScene_sceneDescription + 16), *(__n128 *)(v2 + 20), *(__n128 *)(v2 + 24)))
    {
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v21);
      sub_100C9E440(v19, v22);
      v25 = v24;
      swift_bridgeObjectRelease(v21);
      swift_bridgeObjectRelease(v19);
      if ((v25 & 1) != 0 && ((v20 ^ v23) & 1) == 0)
      {
        sub_1009B8CE8();
        return v26 != *((_QWORD *)v2 + 17);
      }
    }
    return 1;
  }
  return result;
}

void sub_1007B697C(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;

  v3 = v2
     + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreREP33_23F24EF2C3AE8F7E8DC9481174D548F219SceneRenderingState_awakeState;
  v4 = *(_QWORD *)(v2
                 + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreREP33_23F24EF2C3AE8F7E8DC9481174D548F219SceneRenderingState_awakeState);
  v5 = *(unsigned __int8 *)(v2
                          + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreREP33_23F24EF2C3AE8F7E8DC9481174D548F219SceneRenderingState_awakeState
                          + 8);
  *(_QWORD *)v3 = a1;
  *(_BYTE *)(v3 + 8) = a2 & 1;
  if ((a2 & 1) != 0)
  {
    if (a1)
    {
      if (!v4)
        v5 = 0;
      if (v5 == 1)
        return;
LABEL_10:
      v6 = 0x7065656C7361;
      if (!a1)
        v6 = 0x656B617761;
      v7 = 0xE600000000000000;
      if (!a1)
        v7 = 0xE500000000000000;
      if ((a2 & 1) != 0)
        v8 = v6;
      else
        v8 = 0xD000000000000011;
      if ((a2 & 1) != 0)
        v9 = v7;
      else
        v9 = 0x8000000100FD3430;
      v10 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreRE11ClientScene_metadata);
      swift_bridgeObjectRetain(v10);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v11);
      sub_100828060(v8, v9, isUniquelyReferenced_nonNull_native);
      swift_bridgeObjectRelease(0x8000000000000000);
      sub_1009B9100(v10);
      return;
    }
    if (v4)
      LOBYTE(v5) = 0;
    if ((v5 & 1) == 0)
      goto LABEL_10;
  }
  else
  {
    if (v4 != a1)
      LOBYTE(v5) = 1;
    if ((v5 & 1) != 0)
      goto LABEL_10;
  }
}

void sub_1007B6A98(__n128 a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  __int128 *v29;
  __int128 v30;
  __int128 v31;
  id v32;
  id v33;
  void *v34;
  id v35;
  id v36;
  uint64_t v37;
  __n128 v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  double v53;
  void (*v54)(char *, uint64_t);
  char v55;
  void *v56;
  void *v57;
  void *v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  id v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  __n128 v72;
  char *v73;
  __n128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t ComponentType;
  uint64_t v78;
  __n128 v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  id v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char v100[24];
  _QWORD v101[3];
  _OWORD v102[4];
  uint64_t v103;
  _OWORD v104[4];
  uint64_t v105;

  v3 = v2;
  v4 = v1;
  v5 = type metadata accessor for __EntityRef(0, a1);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v88 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1004B804C(&qword_1013E04F0);
  __chkstk_darwin(v9);
  v11 = (char *)&v88 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v88 - v13;
  __chkstk_darwin(v15);
  v17 = (char *)&v88 - v16;
  v99 = type metadata accessor for Date(0);
  v98 = *(_QWORD *)(v99 - 8);
  __chkstk_darwin(v99);
  v97 = (char *)&v88 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v96 = (char *)&v88 - v20;
  if ((sub_1007B7238() & 1) != 0)
  {
    v90 = v11;
    v92 = v6;
    v93 = v5;
    if (*(_BYTE *)(v1
                  + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreREP33_23F24EF2C3AE8F7E8DC9481174D548F219SceneRenderingState_awakeState
                  + 8) == 1
      && *(_QWORD *)(v1
                   + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreREP33_23F24EF2C3AE8F7E8DC9481174D548F219SceneRenderingState_awakeState))
    {
      v21 = *(void **)(v1 + 32);
      v22 = *(_QWORD *)(v4 + 40);
      v24 = *(_QWORD *)(v4 + 48);
      v23 = *(void **)(v4 + 56);
      swift_unknownObjectRetain(v24);
      v95 = v23;
      swift_unknownObjectRetain(v21);
      swift_unknownObjectRetain(v22);
      if ((char *)objc_msgSend(v21, "setPurgeableState:", 1) - 3 < (char *)2)
        objc_msgSend(v21, "setPurgeableState:", 2);

      swift_unknownObjectRelease(v24);
      swift_unknownObjectRelease(v22);
      swift_unknownObjectRelease(v21);
    }
    v89 = v14;
    v91 = v8;
    v95 = v3;
    sub_1007B697C(0, 1);
    *(_BYTE *)(v4 + 256) = 1;
    v25 = *(void **)(v4 + 32);
    v26 = *(_QWORD *)(v4 + 40);
    v28 = *(_QWORD *)(v4 + 48);
    v27 = *(void **)(v4 + 56);
    v94 = *(_QWORD *)(v4 + 16);
    v29 = (__int128 *)(v94 + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreRE11ClientScene_configuration);
    v30 = *(_OWORD *)(v94 + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreRE11ClientScene_configuration + 48);
    v104[2] = *(_OWORD *)(v94 + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreRE11ClientScene_configuration + 32);
    v104[3] = v30;
    v105 = *(_QWORD *)(v94 + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreRE11ClientScene_configuration + 64);
    v31 = *(_OWORD *)(v94 + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreRE11ClientScene_configuration + 16);
    v104[0] = *(_OWORD *)(v94 + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreRE11ClientScene_configuration);
    v104[1] = v31;
    swift_unknownObjectRetain(v25);
    swift_unknownObjectRetain(v26);
    swift_unknownObjectRetain(v28);
    v32 = v27;
    v33 = (id)sub_10073F3A4((double *)v104);
    v35 = v34;
    if (objc_msgSend(v25, "width") == v33)
    {
      v36 = objc_msgSend(v25, "height");

      swift_unknownObjectRelease(v28);
      swift_unknownObjectRelease(v26);
      swift_unknownObjectRelease(v25);
      if (v36 == v35)
        goto LABEL_27;
    }
    else
    {

      swift_unknownObjectRelease(v28);
      swift_unknownObjectRelease(v26);
      swift_unknownObjectRelease(v25);
    }
    if (*(_QWORD *)(v4 + 264) >= 0x79uLL)
    {
      v47 = v4
          + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreREP33_23F24EF2C3AE8F7E8DC9481174D548F219SceneRenderingState_lastTextureResizeTimestamp;
      swift_beginAccess(v4+ OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreREP33_23F24EF2C3AE8F7E8DC9481174D548F219SceneRenderingState_lastTextureResizeTimestamp, v100, 0, 0);
      sub_1004CB7BC(v47, (uint64_t)v17, &qword_1013E04F0);
      v48 = v98;
      v49 = v99;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v98 + 48))(v17, 1, v99) == 1)
      {
        sub_1004CB800((uint64_t)v17, &qword_1013E04F0);
      }
      else
      {
        v50 = v96;
        v51 = (*(uint64_t (**)(char *, char *, uint64_t))(v48 + 32))(v96, v17, v49);
        v52 = v97;
        Date.init()(v51);
        v53 = Date.timeIntervalSince(_:)(v50);
        v54 = *(void (**)(char *, uint64_t))(v48 + 8);
        v54(v52, v49);
        v54(v50, v49);
        if (v53 < 1.0)
        {
          v55 = 1;
LABEL_26:
          *(_BYTE *)(v4
                   + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreREP33_23F24EF2C3AE8F7E8DC9481174D548F219SceneRenderingState_textureSizeIsStale) = v55;
LABEL_27:
          sub_1009B881C();
          sub_1007B73C4();
          return;
        }
      }
    }
    v56 = *(void **)(v4 + 40);
    v57 = *(void **)(v4 + 48);
    v58 = *(void **)(v4 + 24);
    v59 = v29[3];
    v102[2] = v29[2];
    v102[3] = v59;
    v103 = *((_QWORD *)v29 + 8);
    v61 = *v29;
    v60 = v29[1];
    v62 = v56;
    v102[0] = v61;
    v102[1] = v60;
    swift_unknownObjectRetain_n(v56, 2);
    swift_unknownObjectRetain_n(v57, 2);
    swift_unknownObjectRetain(v58);
    v63 = sub_10073F3A4((double *)v102);
    v65 = objc_msgSend((id)objc_opt_self(MTLTextureDescriptor), "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", 81, v63, v64, 0);
    objc_msgSend(v65, "setStorageMode:", 2);
    objc_msgSend(v65, "setUsage:", 23);
    v66 = v95;
    v67 = sub_10073F644(v58, v65, v62, v57);
    if (v66)
    {
      swift_unknownObjectRelease(v62);
      swift_unknownObjectRelease(v57);
      *(_BYTE *)(v4 + 256) = 0;
      v71 = *(_QWORD *)(v94 + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreRE11ClientScene_cameraEntity);
      v72 = swift_retain(v71);
      v73 = v91;
      dispatch thunk of Entity.__coreEntity.getter(v72);
      v74 = swift_release(v71);
      __EntityRef.__as<A>(_:)(v101, &type metadata for OpaquePointer, &type metadata for OpaquePointer, v74);
      v75 = (*(uint64_t (**)(char *, uint64_t))(v92 + 8))(v73, v93);
      v76 = v101[0];
      ComponentType = RECameraViewDescriptorsComponentGetComponentType(v75);
      v78 = REEntityGetOrAddComponentByClass(v76, ComponentType);
      RECameraViewDescriptorsComponentClearCameraViewDescriptors(v78);
      *(_BYTE *)(v4
               + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreREP33_23F24EF2C3AE8F7E8DC9481174D548F219SceneRenderingState_viewDescriptorsValid) = 0;
      swift_willThrow(v79);
      return;
    }
    v80 = v67;
    v81 = v68;
    v82 = v69;
    v83 = v70;
    sub_1007B93FC((uint64_t)v67, v68, v69, v70);

    swift_unknownObjectRelease(v82);
    swift_unknownObjectRelease(v81);
    v84 = swift_unknownObjectRelease(v80);
    v85 = (uint64_t)v89;
    Date.init()(v84);
    swift_unknownObjectRelease(v57);
    swift_unknownObjectRelease(v62);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v98 + 56))(v85, 0, 1, v99);
    v86 = (uint64_t)v90;
    sub_1004C4938(v85, (uint64_t)v90, &qword_1013E04F0);
    v87 = v4
        + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreREP33_23F24EF2C3AE8F7E8DC9481174D548F219SceneRenderingState_lastTextureResizeTimestamp;
    swift_beginAccess(v4+ OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreREP33_23F24EF2C3AE8F7E8DC9481174D548F219SceneRenderingState_lastTextureResizeTimestamp, v101, 33, 0);
    sub_100582338(v86, v87, &qword_1013E04F0);
    swift_endAccess(v101);
    v55 = 0;
    goto LABEL_26;
  }
  v37 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreRE11ClientScene_cameraEntity);
  v38 = swift_retain(v37);
  dispatch thunk of Entity.__coreEntity.getter(v38);
  v39 = swift_release(v37);
  __EntityRef.__as<A>(_:)(v101, &type metadata for OpaquePointer, &type metadata for OpaquePointer, v39);
  v40 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v41 = v101[0];
  v42 = RECameraViewDescriptorsComponentGetComponentType(v40);
  v43 = REEntityGetOrAddComponentByClass(v41, v42);
  RECameraViewDescriptorsComponentClearCameraViewDescriptors(v43);
  *(_BYTE *)(v4
           + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreREP33_23F24EF2C3AE8F7E8DC9481174D548F219SceneRenderingState_viewDescriptorsValid) = 0;
  *(_BYTE *)(v4 + 256) = 0;
  v44 = *(_QWORD *)(v4
                  + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreREP33_23F24EF2C3AE8F7E8DC9481174D548F219SceneRenderingState_awakeState);
  if (*(_BYTE *)(v4
                + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreREP33_23F24EF2C3AE8F7E8DC9481174D548F219SceneRenderingState_awakeState
                + 8) == 1)
  {
    v45 = v44 != 0;
    v46 = 1;
LABEL_20:
    sub_1007B697C(v46, v45);
    return;
  }
  v46 = v44 + 1;
  if (!__OFADD__(v44, 1))
  {
    if (v46 > 59)
    {
      objc_msgSend(*(id *)(v4 + 32), "setPurgeableState:", 3);
      v46 = 1;
      v45 = 1;
    }
    else
    {
      v45 = 0;
    }
    goto LABEL_20;
  }
  __break(1u);
}

uint64_t sub_1007B7238()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  BOOL v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  _QWORD v10[18];
  uint64_t v11[18];
  _DWORD v12[4];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;

  v1 = v0;
  v2 = objc_msgSend(*(id *)(v0 + 48), "signaledValue");
  if (v2 != objc_msgSend(*(id *)(v1 + 40), "signaledValue"))
    return 0;
  sub_1004C4938(v1 + 112, (uint64_t)v11, &qword_1013F2760);
  sub_1004C4938((uint64_t)v11, (uint64_t)v12, &qword_1013F2760);
  if (sub_1007B93E4((uint64_t)v12) == 1)
  {
    v3 = 1;
  }
  else
  {
    v23 = v12[0];
    v24 = v13;
    v25 = v14;
    v26 = v15;
    v27 = v16;
    v28 = v17;
    v29 = v18;
    v30 = v19;
    v31 = v20;
    v32 = v21;
    v33 = v22;
    v5 = *(_QWORD *)(v1 + 16);
    sub_1004C4938((uint64_t)v11, (uint64_t)v10, &qword_1013F2760);
    v6 = v10[16];
    swift_bridgeObjectRetain(v10[14]);
    swift_bridgeObjectRetain(v6);
    v3 = sub_1007B67E4(v5);
    sub_1007B9130(v11);
  }
  sub_1009B8B44();
  v8 = v7;
  v9 = v1
     + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreREP33_23F24EF2C3AE8F7E8DC9481174D548F219SceneRenderingState_snapshotRequests;
  swift_beginAccess(v1+ OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreREP33_23F24EF2C3AE8F7E8DC9481174D548F219SceneRenderingState_snapshotRequests, v10, 0, 0);
  if (v3 || (v8 & 1) != 0 || *(uint64_t *)(*(_QWORD *)v9 + 16) > 0 || *(_QWORD *)(v1 + 264) <= 0x77uLL)
    return 1;
  else
    return *(unsigned __int8 *)(v1
                              + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreREP33_23F24EF2C3AE8F7E8DC9481174D548F219SceneRenderingState_textureSizeIsStale);
}

void sub_1007B73C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  __n128 v17;
  uint64_t (*v18)(char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t ComponentType;
  uint64_t v22;
  __n128 v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  __n128 v38;
  int64_t v39;
  unint64_t v40;
  unint64_t i;
  int64_t v42;
  unint64_t v43;
  int64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  _QWORD v51[3];

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1004B804C((uint64_t *)&unk_1013E1A50);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for __EntityRef(0, v7);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreRE11ClientScene_cameraEntity;
  v48 = *(_QWORD *)(v0 + 16);
  v15 = *(_QWORD *)(v48 + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreRE11ClientScene_cameraEntity);
  v16 = swift_retain(v15);
  dispatch thunk of Entity.__coreEntity.getter(v16);
  v17 = swift_release(v15);
  __EntityRef.__as<A>(_:)(v51, &type metadata for OpaquePointer, &type metadata for OpaquePointer, v17);
  v18 = *(uint64_t (**)(char *, uint64_t))(v11 + 8);
  v49 = v10;
  v19 = v18(v13, v10);
  v20 = v51[0];
  ComponentType = RECameraViewDescriptorsComponentGetComponentType(v19);
  v50 = REEntityGetOrAddComponentByClass(v20, ComponentType);
  v47 = OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreREP33_23F24EF2C3AE8F7E8DC9481174D548F219SceneRenderingState_viewDescriptorsValid;
  if ((*(_BYTE *)(v1
                 + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreREP33_23F24EF2C3AE8F7E8DC9481174D548F219SceneRenderingState_viewDescriptorsValid) & 1) == 0)
  {
    v22 = *(_QWORD *)(v48 + v14);
    v23 = swift_retain(v22);
    dispatch thunk of Entity.__coreEntity.getter(v23);
    v24 = swift_release(v22);
    __EntityRef.__as<A>(_:)(v51, &type metadata for OpaquePointer, &type metadata for OpaquePointer, v24);
    v25 = v18(v13, v49);
    v26 = v51[0];
    v27 = RECameraViewDescriptorsComponentGetComponentType(v25);
    v28 = REEntityGetOrAddComponentByClass(v26, v27);
    RECameraViewDescriptorsComponentClearCameraViewDescriptors(v28);
    *(_BYTE *)(v1 + v47) = 0;
    v29 = v50;
    v30 = RECameraViewDescriptorsComponentAddViewDescriptor(v50);
    RECameraViewDescriptorsComponentAddSpecifyCommandFromTexture(v29, v30, "Color", *(_QWORD *)(v1 + 32), 0);
    RECameraViewDescriptorsComponentCameraViewDescriptorSetViewport(v29, v30, 0, 0.0, 0.0, 1.0, 1.0);
    v31 = RECameraViewDescriptorsComponentCameraViewDescriptorCopySettingStruct(v29, v30);
    RERenderGraphDataStructAddFloat4(v31, "clearColor", (__n128)0);
    RECameraViewDescriptorsComponentCameraViewDescriptorSetSettingStruct(v29, v30, v31);
    RERelease(v31);
  }
  v32 = (uint64_t *)(v1
                  + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreREP33_23F24EF2C3AE8F7E8DC9481174D548F219SceneRenderingState_snapshotRequests);
  swift_beginAccess(v1+ OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreREP33_23F24EF2C3AE8F7E8DC9481174D548F219SceneRenderingState_snapshotRequests, v51, 0, 0);
  v33 = *v32;
  v34 = *(_QWORD *)(*v32 + 64);
  v48 = *v32 + 64;
  v35 = 1 << *(_BYTE *)(v33 + 32);
  v36 = -1;
  if (v35 < 64)
    v36 = ~(-1 << v35);
  v37 = v36 & v34;
  v49 = (unint64_t)(v35 + 63) >> 6;
  v38 = swift_bridgeObjectRetain(v33);
  v39 = 0;
  if (!v37)
    goto LABEL_7;
LABEL_6:
  v40 = __clz(__rbit64(v37));
  v37 &= v37 - 1;
  for (i = v40 | (v39 << 6); ; i = __clz(__rbit64(v43)) + (v39 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v3 + 16))(v9, *(_QWORD *)(v33 + 48) + *(_QWORD *)(v3 + 72) * i, v2, v38);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v9, 0, 1, v2);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v9, 1, v2) == 1)
      goto LABEL_29;
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v9, v2);
    v45 = objc_msgSend(*(id *)(v1 + 32), "device");
    sub_1007B7BF0((uint64_t)v5, v50, v45);
    swift_unknownObjectRelease(v45);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    if (v37)
      goto LABEL_6;
LABEL_7:
    v42 = v39 + 1;
    if (__OFADD__(v39, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v42 >= v49)
      goto LABEL_28;
    v43 = *(_QWORD *)(v48 + 8 * v42);
    ++v39;
    if (!v43)
    {
      v39 = v42 + 1;
      if (v42 + 1 >= v49)
        goto LABEL_28;
      v43 = *(_QWORD *)(v48 + 8 * v39);
      if (!v43)
      {
        v39 = v42 + 2;
        if (v42 + 2 >= v49)
          goto LABEL_28;
        v43 = *(_QWORD *)(v48 + 8 * v39);
        if (!v43)
        {
          v39 = v42 + 3;
          if (v42 + 3 >= v49)
            goto LABEL_28;
          v43 = *(_QWORD *)(v48 + 8 * v39);
          if (!v43)
          {
            v39 = v42 + 4;
            if (v42 + 4 >= v49)
              goto LABEL_28;
            v43 = *(_QWORD *)(v48 + 8 * v39);
            if (!v43)
              break;
          }
        }
      }
    }
LABEL_24:
    v37 = (v43 - 1) & v43;
  }
  v44 = v42 + 5;
  if (v44 >= v49)
  {
LABEL_28:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v3 + 56))(v9, 1, 1, v2, v38);
LABEL_29:
    swift_release(v33);
    *(_BYTE *)(v1 + v47) = 1;
    return;
  }
  v43 = *(_QWORD *)(v48 + 8 * v44);
  if (v43)
  {
    v39 = v44;
    goto LABEL_24;
  }
  while (1)
  {
    v39 = v44 + 1;
    if (__OFADD__(v44, 1))
      break;
    if (v39 >= v49)
      goto LABEL_28;
    v43 = *(_QWORD *)(v48 + 8 * v39);
    ++v44;
    if (v43)
      goto LABEL_24;
  }
LABEL_31:
  __break(1u);
}

uint64_t (*sub_1007B787C(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1+ OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreREP33_23F24EF2C3AE8F7E8DC9481174D548F219SceneRenderingState_snapshotRequests, a1, 33, 0);
  return j__swift_endAccess_0;
}

uint64_t sub_1007B78C0(uint64_t a1, void *a2, unint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t, __n128);
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  id v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[3];
  char v49[24];

  v43 = a4;
  v40 = a3;
  v44 = a2;
  v6 = type metadata accessor for UUID(0);
  v45 = *(_QWORD *)(v6 - 8);
  v46 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1004B804C(&qword_1013FF9E0);
  v41 = *(_QWORD *)(v9 - 8);
  v42 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1004B804C(&qword_1013F2768);
  __chkstk_darwin(v12);
  v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v40 - v16;
  v18 = _s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = (uint64_t *)(v4
                  + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreREP33_23F24EF2C3AE8F7E8DC9481174D548F219SceneRenderingState_snapshotRequests);
  v23 = swift_beginAccess(v4+ OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreREP33_23F24EF2C3AE8F7E8DC9481174D548F219SceneRenderingState_snapshotRequests, v49, 0, 0);
  v24 = *v22;
  v25 = *(_QWORD *)(*v22 + 16);
  v47 = a1;
  if (!v25)
  {
    v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v19 + 56);
    v28(v17, 1, 1, v18, v23);
LABEL_7:
    sub_1004CB800((uint64_t)v17, &qword_1013F2768);
    goto LABEL_12;
  }
  swift_bridgeObjectRetain(v24);
  v26 = sub_100842EFC(a1);
  if ((v27 & 1) != 0)
  {
    sub_1007B93A0(*(_QWORD *)(v24 + 56) + *(_QWORD *)(v19 + 72) * v26, (uint64_t)v17);
    v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v19 + 56);
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v28)(v17, 0, 1, v18);
  }
  else
  {
    v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v19 + 56);
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v28)(v17, 1, 1, v18);
  }
  v29 = swift_bridgeObjectRelease(v24);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v19 + 48))(v17, 1, v18, v29) == 1)
    goto LABEL_7;
  sub_1007B9234((uint64_t)v17, (uint64_t)v21);
  v31 = v41;
  v30 = v42;
  (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v11, &v21[*(int *)(v18 + 20)], v42);
  v32 = v43;
  if ((v43 & 0x100) != 0)
  {
    v34 = sub_100694FA8();
    v35 = swift_allocError(&type metadata for CRLUSDRendering.RendererError, v34, 0, 0);
    v36 = (uint64_t)v44;
    v37 = v40;
    *(_QWORD *)v38 = v44;
    *(_QWORD *)(v38 + 8) = v37;
    *(_BYTE *)(v38 + 16) = v32;
    v48[0] = v35;
    sub_100689D34(v36, v37, v32);
    CheckedContinuation.resume(throwing:)(v48, v30);
  }
  else
  {
    v48[0] = v44;
    v33 = v44;
    CheckedContinuation.resume(returning:)(v48, v30);
  }
  (*(void (**)(char *, uint64_t))(v31 + 8))(v11, v30);
  sub_1007B9278((uint64_t)v21);
LABEL_12:
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v8, v47, v46);
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v28)(v14, 1, 1, v18);
  swift_beginAccess(v22, v48, 33, 0);
  sub_10083E88C((uint64_t)v14, (uint64_t)v8);
  return swift_endAccess(v48);
}

uint64_t sub_1007B7BF0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double *v17;
  uint64_t *v18;
  __n128 v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  __n128 v24;
  uint64_t result;
  double v26;
  double v27;
  uint64_t v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  __n128 v43;
  id v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t (*v48)(_QWORD);
  void (*v49)(_QWORD *);
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t, uint64_t);
  uint64_t RenderGraphDataStruct;
  uint64_t v54;
  unsigned int (*v55)(char *, uint64_t, uint64_t, __n128);
  uint64_t v56;
  uint64_t v57;
  char *v58;
  id v59;
  uint64_t v60;
  _QWORD v61[4];
  _QWORD aBlock[5];
  uint64_t v63;
  char v64[32];

  v59 = a3;
  v57 = a2;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5);
  v58 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v52 - v9;
  v11 = sub_1004B804C(&qword_1013F2768);
  __chkstk_darwin(v11);
  v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = _s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (double *)((char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v60 = v3;
  v18 = (uint64_t *)(v3
                  + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreREP33_23F24EF2C3AE8F7E8DC9481174D548F219SceneRenderingState_snapshotRequests);
  v19 = swift_beginAccess(v18, v64, 0, 0);
  v20 = *v18;
  if (!*(_QWORD *)(v20 + 16))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v15 + 56))(v13, 1, 1, v14, v19);
    return sub_1004CB800((uint64_t)v13, &qword_1013F2768);
  }
  v56 = v6;
  swift_bridgeObjectRetain(v20);
  v21 = sub_100842EFC(a1);
  if ((v22 & 1) != 0)
  {
    sub_1007B93A0(*(_QWORD *)(v20 + 56) + *(_QWORD *)(v15 + 72) * v21, (uint64_t)v13);
    v23 = 0;
  }
  else
  {
    v23 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v13, v23, 1, v14);
  v24 = swift_bridgeObjectRelease(v20);
  v55 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v15 + 48);
  if (v55(v13, 1, v14, v24) == 1)
    return sub_1004CB800((uint64_t)v13, &qword_1013F2768);
  result = sub_1007B9234((uint64_t)v13, (uint64_t)v17);
  if ((*((_BYTE *)v17 + *(int *)(v14 + 24)) & 1) != 0)
    return sub_1007B9278((uint64_t)v17);
  v26 = *v17;
  if ((~*(_QWORD *)v17 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  if (v26 <= -9.22337204e18)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v54 = v5;
  if (v26 >= 9.22337204e18)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v27 = v17[1];
  v28 = v56;
  if ((~*(_QWORD *)&v27 & 0x7FF0000000000000) == 0)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v27 <= -9.22337204e18)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v27 < 9.22337204e18)
  {
    v29 = objc_msgSend((id)objc_opt_self(MTLTextureDescriptor), "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", 81, (uint64_t)v26, (uint64_t)v27, 0);
    objc_msgSend(v29, "setUsage:", 23);
    objc_msgSend(v29, "setStorageMode:", 0);
    v30 = objc_msgSend(v59, "newTextureWithDescriptor:", v29);

    if (v30)
    {
      RenderGraphDataStruct = RERenderGraphCreateRenderGraphDataStruct("SnapshotViewDescriptorSettings");
      RERenderGraphDataStructAddFloat4(RenderGraphDataStruct, "clearColor", (__n128)0);
      v31 = swift_allocObject(&unk_10127E590, 24, 7);
      swift_weakInit(v31 + 16, v60);
      v52 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 16);
      v32 = v28;
      v33 = v54;
      v52(v10, a1, v54);
      v34 = *(unsigned __int8 *)(v32 + 80);
      v35 = (v34 + 24) & ~v34;
      v36 = (v7 + v35 + 7) & 0xFFFFFFFFFFFFFFF8;
      v37 = swift_allocObject(&unk_10127E5B8, v36 + 8, v34 | 7);
      *(_QWORD *)(v37 + 16) = v31;
      v38 = v37 + v35;
      v39 = v56;
      (*(void (**)(uint64_t, char *, uint64_t))(v56 + 32))(v38, v10, v33);
      *(_QWORD *)(v37 + v36) = v30;
      aBlock[4] = sub_1007B9344;
      v63 = v37;
      v40 = v33;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = *(_QWORD *)"";
      aBlock[2] = sub_1005D2FC0;
      aBlock[3] = &unk_10127E5D0;
      v41 = _Block_copy(aBlock);
      v42 = v63;
      swift_unknownObjectRetain(v30);
      v43 = swift_release(v42);
      v59 = v30;
      v44 = v30;
      v45 = RenderGraphDataStruct;
      RECameraViewDescriptorsComponentSnapshotNextFrameWithSettings(v57, v44, RenderGraphDataStruct, v41, v43);
      _Block_release(v41);
      v46 = v58;
      v52(v58, a1, v33);
      v47 = v39;
      v48 = sub_1007B787C((uint64_t)aBlock);
      v49 = sub_100CF9DCC(v61);
      v51 = v50;
      if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t))v55)(v50, 1, v14))
        *(_BYTE *)(v51 + *(int *)(v14 + 24)) = 1;
      ((void (*)(_QWORD *, _QWORD))v49)(v61, 0);
      (*(void (**)(char *, uint64_t))(v47 + 8))(v46, v40);
      ((void (*)(_QWORD *, _QWORD))v48)(aBlock, 0);
      RERelease(v45);
      swift_unknownObjectRelease(v59);
    }
    else
    {
      sub_1007B78C0(a1, (void *)0xD000000000000022, 0x8000000100FD3480, 261);
    }
    return sub_1007B9278((uint64_t)v17);
  }
LABEL_26:
  __break(1u);
  return result;
}

double sub_1007B8120(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t Strong;
  double result;
  uint64_t v8;
  _BYTE v9[24];

  v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v9, 0, 0);
  Strong = swift_weakLoadStrong(v5);
  if (Strong)
  {
    v8 = Strong;
    sub_1007B8190(a2, a3);
    *(_QWORD *)&result = swift_release(v8).n128_u64[0];
  }
  return result;
}

void sub_1007B8190(uint64_t a1, uint64_t a2)
{
  CGColorSpaceRef v4;
  CGColorSpaceRef v5;
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  CGColorSpace *v9;
  NSString *v10;
  NSString *v11;
  unint64_t v12;
  id v13;
  Class isa;
  id v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  char v22[112];

  v4 = CGColorSpaceCreateWithName(kCGColorSpaceLinearSRGB);
  if (v4)
  {
    v5 = v4;
    v6 = sub_1004B804C(&qword_1013F2770);
    inited = swift_initStackObject(v6, v22);
    *(_OWORD *)(inited + 16) = xmmword_100EF5A10;
    *(_QWORD *)(inited + 32) = kCIContextWorkingColorSpace;
    type metadata accessor for CGColorSpace(0);
    *(_QWORD *)(inited + 40) = v5;
    *(_QWORD *)(inited + 64) = v8;
    *(_QWORD *)(inited + 72) = kCIContextOutputColorSpace;
    *(_QWORD *)(inited + 104) = v8;
    *(_QWORD *)(inited + 80) = v5;
    v9 = v5;
    v10 = kCIContextWorkingColorSpace;
    v11 = kCIContextOutputColorSpace;
    v12 = sub_1008D76F0(inited);
    v13 = objc_allocWithZone((Class)CIContext);
    type metadata accessor for CIContextOption(0);
    sub_1004B7878(&qword_1013DEE10, (uint64_t (*)(uint64_t))type metadata accessor for CIContextOption, (uint64_t)&unk_100EF45AC);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    v15 = objc_msgSend(v13, "initWithOptions:", isa, swift_bridgeObjectRelease(v12).n128_f64[0]);

    v16 = objc_msgSend(objc_allocWithZone((Class)CIImage), "initWithMTLTexture:options:", a2, 0);
    if (v16)
    {
      v17 = v16;
      v18 = objc_msgSend(v16, "imageByApplyingCGOrientation:", 4);

      if (v18)
      {
        objc_msgSend(v18, "extent");
        v19 = objc_msgSend(v15, "createCGImage:fromRect:format:colorSpace:", v18, kCIFormatBGRA8, v9);
        if (v19)
        {
          v20 = v19;
          v21 = v19;
          sub_1007B78C0(a1, v20, 0, 0);

LABEL_8:
          return;
        }

      }
    }
    sub_1007B78C0(a1, (void *)0xD000000000000024, 0x8000000100FD3450, 261);
    goto LABEL_8;
  }
  __break(1u);
}

uint64_t sub_1007B83C4()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 8) != 1)
    return 0xD000000000000011;
  if (*(_QWORD *)v0)
    return 0x7065656C7361;
  return 0x656B617761;
}

uint64_t sub_1007B8420(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *(unsigned __int8 *)(a2 + 8);
  v3 = (*(_QWORD *)a1 == *(_QWORD *)a2) & ~v2;
  if (*(_QWORD *)a2)
    v4 = *(unsigned __int8 *)(a2 + 8);
  else
    v4 = 0;
  if (*(_QWORD *)a2)
    v2 = 0;
  if (*(_QWORD *)a1)
    v5 = v4;
  else
    v5 = v2;
  if (*(_BYTE *)(a1 + 8) == 1)
    return v5;
  else
    return v3;
}

uint64_t sub_1007B845C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5[18];

  swift_release(*(_QWORD *)(v0 + 16));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 48);

  swift_unknownObjectRelease(v3);
  swift_unknownObjectRelease(v2);
  swift_unknownObjectRelease(v1);
  sub_1004CB800(v0 + 64, &qword_1013EE2F8);
  sub_1004C4938(v0 + 112, (uint64_t)v5, &qword_1013F2760);
  sub_1007B9130(v5);
  sub_1004CB800(v0+ OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreREP33_23F24EF2C3AE8F7E8DC9481174D548F219SceneRenderingState_lastTextureResizeTimestamp, &qword_1013E04F0);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1007B8510()
{
  uint64_t v0;

  v0 = sub_1007B845C();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1007B8530()
{
  return _s6CoreREO19SceneRenderingStateCMa(0);
}

uint64_t _s6CoreREO19SceneRenderingStateCMa(uint64_t a1)
{
  return sub_1004BD408(a1, (uint64_t *)&unk_1013F2420, (uint64_t)&_s6CoreREO19SceneRenderingStateCMn);
}

void sub_1007B854C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[12];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = "\b";
  v4[2] = &unk_100F0B240;
  v4[3] = &unk_100F0B258;
  v4[4] = &unk_100F0B270;
  v4[5] = &unk_100F0B288;
  v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
  sub_10056ACC0(319);
  if (v3 <= 0x3F)
  {
    v4[7] = *(_QWORD *)(v2 - 8) + 64;
    v4[8] = &unk_100F0B288;
    v4[9] = &unk_100F0B2A0;
    v4[10] = &unk_100F0B288;
    v4[11] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_updateClassMetadata2(a1, 256, 12, v4, a1 + 80);
  }
}

_QWORD *sub_1007B8620(_OWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v11);
  }
  else
  {
    *a1 = *(_OWORD *)a2;
    v7 = *(int *)(a3 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = sub_1004B804C(&qword_1013FF9E0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    *((_BYTE *)v4 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  }
  return v4;
}

uint64_t sub_1007B86C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = sub_1004B804C(&qword_1013FF9E0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

_OWORD *sub_1007B8704(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1004B804C(&qword_1013FF9E0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

_QWORD *sub_1007B8780(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1004B804C(&qword_1013FF9E0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

_OWORD *sub_1007B8804(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1004B804C(&qword_1013FF9E0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

_OWORD *sub_1007B8880(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1004B804C(&qword_1013FF9E0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_1007B88FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1007B8908);
}

uint64_t sub_1007B8908(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = sub_1004B804C(&qword_1013FF9E0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 2)
    return ((v9 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t sub_1007B899C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1007B89A8);
}

uint64_t sub_1007B89A8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_1004B804C(&qword_1013FF9E0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 24)) = a2 + 1;
  return result;
}

uint64_t _s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa(uint64_t a1)
{
  return sub_1004BD408(a1, (uint64_t *)&unk_1013F26D8, (uint64_t)&_s6CoreREO19SceneRenderingStateC15SnapshotRequestVMn);
}

void sub_1007B8A3C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_100F0B2C8;
  sub_1007B8AB8(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = &unk_100F0B288;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

void sub_1007B8AB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_1013F26E8)
  {
    type metadata accessor for CGImage(255);
    v3 = v2;
    v4 = sub_1004CB6A4(&qword_1013E0210);
    v5 = type metadata accessor for CheckedContinuation(a1, v3, v4, &protocol self-conformance witness table for Error);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1013F26E8);
  }
}

ValueMetadata *_s6CoreREO19SceneRenderingStateC10AwakeStateOMa()
{
  return &_s6CoreREO19SceneRenderingStateC10AwakeStateON;
}

uint64_t _s6CoreREO19SceneRenderingStateC12FrameReceiptVwxx(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 112));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 128));
}

uint64_t _s6CoreREO19SceneRenderingStateC12FrameReceiptVwcp(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v3;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  v6 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 112) = v6;
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  v8 = *(_QWORD *)(a2 + 128);
  v7 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = v8;
  *(_QWORD *)(a1 + 136) = v7;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t _s6CoreREO19SceneRenderingStateC12FrameReceiptVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  v4 = *(_QWORD *)(a2 + 112);
  v5 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  v6 = *(_QWORD *)(a2 + 128);
  v7 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  return a1;
}

__n128 _s6CoreREO19SceneRenderingStateC12FrameReceiptVwtk(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(__n128 *)(a1 + 80) = result;
  *(_OWORD *)(a1 + 96) = v6;
  return result;
}

uint64_t _s6CoreREO19SceneRenderingStateC12FrameReceiptVwta(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  v6 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRelease(v6);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  v7 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  return a1;
}

uint64_t _s6CoreREO19SceneRenderingStateC12FrameReceiptVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 144))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 112);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s6CoreREO19SceneRenderingStateC12FrameReceiptVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 144) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 112) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 144) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s6CoreREO19SceneRenderingStateC12FrameReceiptVMa()
{
  return &_s6CoreREO19SceneRenderingStateC12FrameReceiptVN;
}

ValueMetadata *_s6CoreREOMa()
{
  return &_s6CoreREON;
}

uint64_t sub_1007B8DEC()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1007B8E18(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1013F2734);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1004CF80C;
  return sub_1007B6194(a1, v4, v5, v6);
}

uint64_t sub_1007B8E84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  *(_QWORD *)(v6 + 56) = v5;
  v12 = type metadata accessor for ContinuousClock.Instant(0);
  *(_QWORD *)(v6 + 64) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v6 + 72) = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 80) = swift_task_alloc(v14);
  *(_QWORD *)(v6 + 88) = swift_task_alloc(v14);
  *(_QWORD *)(v6 + 40) = a1;
  *(_QWORD *)(v6 + 48) = a2;
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  *(_BYTE *)(v6 + 32) = a5 & 1;
  return swift_task_switch(sub_1007B8F28, 0, 0);
}

uint64_t sub_1007B8F28()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  _QWORD *v8;

  v1 = v0[10];
  v2 = v0[8];
  v3 = v0[9];
  v4 = type metadata accessor for ContinuousClock(0);
  v5 = sub_1004B7878(&qword_1013F2748, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock, (uint64_t)&protocol conformance descriptor for ContinuousClock);
  dispatch thunk of Clock.now.getter(v4, v5);
  v6 = sub_1004B7878(&qword_1013F2750, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant, (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)(v0 + 5, v2, v6);
  v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v7;
  v7(v1, v2);
  v8 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of Clock.sleep(until:tolerance:)[1]);
  v0[13] = v8;
  *v8 = v0;
  v8[1] = sub_1007B9040;
  return dispatch thunk of Clock.sleep(until:tolerance:)(v0[11], v0 + 2, v4, v5);
}

uint64_t sub_1007B9040()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  v2 = *(_QWORD *)(*v1 + 104);
  v4 = *(_QWORD *)(*v1 + 88);
  v5 = *(_QWORD *)(*v1 + 64);
  v6 = *v1;
  *(_QWORD *)(v6 + 112) = v0;
  swift_task_dealloc(v2);
  v3(v4, v5);
  if (v0)
    return swift_task_switch(sub_1007B90EC, 0, 0);
  v8 = *(_QWORD *)(v6 + 80);
  swift_task_dealloc(*(_QWORD *)(v6 + 88));
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_1007B90EC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double sub_1007B9128(uint64_t a1)
{
  uint64_t v1;

  return sub_1007B5528(a1, v1);
}

uint64_t *sub_1007B9130(uint64_t *a1)
{
  sub_1007B9188(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16]);
  return a1;
}

uint64_t sub_1007B9188(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t result;

  result = a15;
  if (a15)
  {
    swift_bridgeObjectRelease(a15);
    return swift_bridgeObjectRelease(a17);
  }
  return result;
}

uint64_t sub_1007B91C0()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1007B91E4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

double sub_1007B9210(uint64_t a1)
{
  uint64_t v1;

  return sub_1007B5B94(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

double sub_1007B9218(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t sub_1007B9234(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = _s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1007B9278(uint64_t a1)
{
  uint64_t v2;

  v2 = _s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1007B92B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 v7;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t, __n128))(v2 + 8))(v0 + v4, v1, v7);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

double sub_1007B9344()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_1007B8120(*(_QWORD *)(v0 + 16), v0 + v2, *(_QWORD *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1007B9388(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_1007B9398(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

uint64_t sub_1007B93A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = _s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1007B93E4(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 112);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t sub_1007B93FC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t result;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;

  v5 = v4;
  v9 = v5[4];
  v10 = v5[5];
  v11 = v5[6];
  v12 = (void *)v5[7];
  v5[4] = a1;
  v5[5] = a2;
  v5[6] = a3;
  v5[7] = a4;
  swift_unknownObjectRetain(a1);
  swift_unknownObjectRetain(a2);
  swift_unknownObjectRetain(a3);
  v13 = a4;

  swift_unknownObjectRelease(v11);
  swift_unknownObjectRelease(v10);
  swift_unknownObjectRelease(v9);
  result = swift_weakLoadStrong(v5[2] + 16);
  if (result)
  {
    v15 = result;
    v16 = (void *)v5[4];
    v17 = v5[5];
    v18 = v5[6];
    v19 = (void *)v5[7];
    swift_unknownObjectRetain(v16);
    swift_unknownObjectRetain(v17);
    swift_unknownObjectRetain(v18);
    v20 = v19;
    sub_100693B30(v16, v17, v18, v20);
    swift_release(v15);

    swift_unknownObjectRelease(v18);
    swift_unknownObjectRelease(v17);
    result = swift_unknownObjectRelease(v16);
  }
  *((_BYTE *)v5
  + OBJC_IVAR____TtCOO8Freeform15CRLUSDRendering6CoreREP33_23F24EF2C3AE8F7E8DC9481174D548F219SceneRenderingState_viewDescriptorsValid) = 0;
  return result;
}

void sub_1007B95F0()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  objc_class *v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  void *v30;
  id v31;
  id v32;
  void *v33;
  id v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  void *v39;
  id v40;
  id v41;
  id v42;
  void *v43;
  id v44;
  id v45;
  void *v46;
  id v47;
  id v48;
  id v49;
  id v50;
  void *v51;
  id v52;
  id v53;
  void *v54;
  id v55;
  id v56;
  id v57;
  id v58;
  void *v59;
  id v60;
  id v61;
  void *v62;
  id v63;
  id v64;
  id v65;
  id v66;
  void *v67;
  id v68;
  id v69;
  void *v70;
  void *v71;
  id v72;
  id v73;
  id v74;
  uint64_t v75;
  Class isa;
  id v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  _QWORD v84[2];
  objc_super v85;

  v1 = v0;
  v2 = type metadata accessor for UIHostingControllerSizingOptions(0);
  __chkstk_darwin(v2);
  v4 = (char *)v84 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (objc_class *)type metadata accessor for CRLiOSCompactScenesNavigatorViewController();
  v85.receiver = v1;
  v85.super_class = v5;
  objc_msgSendSuper2(&v85, "viewDidLoad");
  v6 = OBJC_IVAR____TtC8Freeform42CRLiOSCompactScenesNavigatorViewController_hostingController;
  v7 = objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC8Freeform42CRLiOSCompactScenesNavigatorViewController_hostingController], "view");
  if (!v7)
  {
    __break(1u);
    goto LABEL_22;
  }
  v8 = v7;
  objc_msgSend(v7, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  v9 = *(id *)&v1[v6];
  static UIHostingControllerSizingOptions.intrinsicContentSize.getter();
  dispatch thunk of UIHostingController.sizingOptions.setter(v4);

  v10 = objc_msgSend(v1, "view");
  if (!v10)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v11 = v10;
  v12 = (void *)objc_opt_self(UIColor);
  v13 = objc_msgSend(v12, "systemBackgroundColor");
  objc_msgSend(v11, "setBackgroundColor:", v13);

  v14 = objc_msgSend(v1, "view");
  if (!v14)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v15 = v14;
  v16 = objc_msgSend(v14, "layer");

  objc_msgSend(v16, "setCornerRadius:", 22.0);
  v17 = objc_msgSend(v1, "view");
  if (!v17)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v18 = v17;
  v19 = objc_msgSend(v17, "layer");

  objc_msgSend(v19, "setCornerCurve:", kCACornerCurveContinuous);
  v20 = objc_msgSend(v1, "view");
  if (!v20)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v21 = v20;
  v22 = objc_msgSend(v20, "layer");

  objc_msgSend(v22, "setBorderWidth:", 0.5);
  v23 = objc_msgSend(v1, "view");
  if (!v23)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v24 = v23;
  v25 = objc_msgSend(v23, "layer");

  v26 = objc_msgSend(v12, "blackColor");
  v27 = objc_msgSend(v26, "colorWithAlphaComponent:", 0.08);

  v28 = objc_msgSend(v27, "CGColor");
  objc_msgSend(v25, "setBorderColor:", v28);

  v29 = objc_msgSend(v1, "view");
  if (!v29)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v30 = v29;
  v31 = objc_msgSend(v29, "layer");

  objc_msgSend(v31, "crl_applyDefaultCanvasOverlayUIShadowSettings");
  objc_msgSend(v1, "addChildViewController:", *(_QWORD *)&v1[v6]);
  objc_msgSend(*(id *)&v1[v6], "didMoveToParentViewController:", v1);
  v32 = objc_msgSend(v1, "view");
  if (!v32)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v33 = v32;
  v34 = objc_msgSend(*(id *)&v1[v6], "view");
  if (!v34)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v35 = v34;
  objc_msgSend(v33, "addSubview:", v34);

  v36 = sub_1004B804C((uint64_t *)&unk_1013E4180);
  v37 = swift_allocObject(v36, 72, 7);
  *(_OWORD *)(v37 + 16) = xmmword_100EF7D00;
  v38 = objc_msgSend(*(id *)&v1[v6], "view");
  if (!v38)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v39 = v38;
  v40 = objc_msgSend(v38, "widthAnchor");

  v41 = objc_msgSend(v40, "constraintEqualToConstant:", 156.0);
  *(_QWORD *)(v37 + 32) = v41;
  v42 = objc_msgSend(v1, "view");
  if (!v42)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v43 = v42;
  v44 = objc_msgSend(v42, "leadingAnchor");

  v45 = objc_msgSend(*(id *)&v1[v6], "view");
  if (!v45)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v46 = v45;
  v47 = objc_msgSend(v45, "safeAreaLayoutGuide");

  v48 = objc_msgSend(v47, "leadingAnchor");
  v49 = objc_msgSend(v44, "constraintEqualToAnchor:constant:", v48, -6.0);

  *(_QWORD *)(v37 + 40) = v49;
  v50 = objc_msgSend(v1, "view");
  if (!v50)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v51 = v50;
  v52 = objc_msgSend(v50, "trailingAnchor");

  v53 = objc_msgSend(*(id *)&v1[v6], "view");
  if (!v53)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v54 = v53;
  v55 = objc_msgSend(v53, "safeAreaLayoutGuide");

  v56 = objc_msgSend(v55, "trailingAnchor");
  v57 = objc_msgSend(v52, "constraintEqualToAnchor:constant:", v56, 6.0);

  *(_QWORD *)(v37 + 48) = v57;
  v58 = objc_msgSend(v1, "view");
  if (!v58)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v59 = v58;
  v60 = objc_msgSend(v58, "topAnchor");

  v61 = objc_msgSend(*(id *)&v1[v6], "view");
  if (!v61)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v62 = v61;
  v63 = objc_msgSend(v61, "safeAreaLayoutGuide");

  v64 = objc_msgSend(v63, "topAnchor");
  v65 = objc_msgSend(v60, "constraintEqualToAnchor:constant:", v64, -8.0);

  *(_QWORD *)(v37 + 56) = v65;
  v66 = objc_msgSend(v1, "view");
  if (!v66)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v67 = v66;
  v68 = objc_msgSend(v66, "bottomAnchor");

  v69 = objc_msgSend(*(id *)&v1[v6], "view");
  if (!v69)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  v70 = v69;
  v71 = (void *)objc_opt_self(NSLayoutConstraint);
  v72 = objc_msgSend(v70, "safeAreaLayoutGuide");

  v73 = objc_msgSend(v72, "bottomAnchor");
  v74 = objc_msgSend(v68, "constraintEqualToAnchor:constant:", v73, 8.0);

  *(_QWORD *)(v37 + 64) = v74;
  v84[1] = v37;
  specialized Array._endMutation()(v75);
  sub_1004B8930(0, (unint64_t *)&qword_1013E1760, NSLayoutConstraint_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v71, "activateConstraints:", isa, swift_bridgeObjectRelease().n128_f64[0]);

  v77 = objc_msgSend(v1, "view");
  if (v77)
  {
    v78 = v77;
    objc_msgSend(v77, "systemLayoutSizeFittingSize:", UILayoutFittingCompressedSize.width, UILayoutFittingCompressedSize.height);
    v80 = v79;
    v82 = v81;

    v83 = &v1[OBJC_IVAR____TtC8Freeform42CRLiOSCompactScenesNavigatorViewController_contentViewSize];
    *(_QWORD *)v83 = v80;
    *((_QWORD *)v83 + 1) = v82;
    return;
  }
LABEL_39:
  __break(1u);
}

void sub_1007B9F10()
{
  char *v0;
  id v1;
  void *v2;
  double v3;
  CGFloat v4;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  double Height;
  double *v12;
  double v13;
  double Width;
  double v15;
  double v16;
  id v17;
  void *v18;
  double v19;
  double *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  id v25;
  void *v26;
  id v27;
  double v28;
  double v29;
  id v30;
  void *v31;
  double v32;
  double v33;
  id v34;
  CGRect v35;
  CGRect v36;
  CGRect v37;
  CGRect v38;

  v1 = objc_msgSend(v0, "parentViewController");
  if (v1)
  {
    v2 = v1;
    v34 = objc_msgSend(v1, "view");

    if (v34)
    {
      objc_msgSend(v34, "frame");
      v4 = v3;
      v6 = v5;
      v8 = v7;
      v10 = v9;
      if (objc_msgSend((id)objc_opt_self(UIDevice), "crl_phoneUI")
        && objc_msgSend((id)objc_opt_self(UIScreen), "crl_deviceIsLandscape"))
      {
        v35.origin.x = v4;
        v35.origin.y = v6;
        v35.size.width = v8;
        v35.size.height = v10;
        Height = CGRectGetHeight(v35);
        v12 = (double *)&v0[OBJC_IVAR____TtC8Freeform42CRLiOSCompactScenesNavigatorViewController_contentViewSize];
        v13 = *(double *)&v0[OBJC_IVAR____TtC8Freeform42CRLiOSCompactScenesNavigatorViewController_contentViewSize + 8];
        v36.origin.x = v4;
        v36.origin.y = v6;
        v36.size.width = v8;
        v36.size.height = v10;
        Width = CGRectGetWidth(v36);
        v15 = *v12;
        v16 = v12[1];
        v17 = objc_msgSend(v0, "view");
        if (v17)
        {
          v18 = v17;
          objc_msgSend(v17, "setFrame:", Width - v15 + -30.0, Height - v13 + -30.0, v15, v16);
LABEL_12:

          return;
        }
        goto LABEL_16;
      }
      v37.origin.x = v4;
      v37.origin.y = v6;
      v37.size.width = v8;
      v37.size.height = v10;
      v19 = CGRectGetHeight(v37);
      v20 = (double *)&v0[OBJC_IVAR____TtC8Freeform42CRLiOSCompactScenesNavigatorViewController_contentViewSize];
      v21 = *(double *)&v0[OBJC_IVAR____TtC8Freeform42CRLiOSCompactScenesNavigatorViewController_contentViewSize + 8];
      v38.origin.x = v4;
      v38.origin.y = v6;
      v38.size.width = v8;
      v38.size.height = v10;
      v22 = CGRectGetWidth(v38);
      v23 = *v20;
      v24 = v20[1];
      v25 = objc_msgSend(v0, "view");
      if (v25)
      {
        v26 = v25;
        objc_msgSend(v25, "setFrame:", (v22 - v23) * 0.5, v19 - v21 + -30.0, v23, v24);

        v27 = objc_msgSend(v0, "view");
        if (v27)
        {
          v18 = v27;
          objc_msgSend(v34, "center");
          v29 = v28;
          v30 = objc_msgSend(v0, "view");
          if (v30)
          {
            v31 = v30;
            objc_msgSend(v30, "center");
            v33 = v32;

            objc_msgSend(v18, "setCenter:", v29, v33);
            goto LABEL_12;
          }
          goto LABEL_15;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      __break(1u);
    }
  }
}

id sub_1007BA24C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CRLiOSCompactScenesNavigatorViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CRLiOSCompactScenesNavigatorViewController()
{
  return objc_opt_self(_TtC8Freeform42CRLiOSCompactScenesNavigatorViewController);
}

void sub_1007BA2D4(void *a1)
{
  char *v1;
  char *v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  char v14;
  id v15;
  void *v16;
  _QWORD v17[2];
  _BYTE v18[40];
  __int128 v19;
  __int128 v20;

  v2 = v1;
  v3 = objc_msgSend(a1, "userInfo");
  if (v3)
  {
    v4 = v3;
    v5 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v3, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

    v17[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("CRLEditorControllerOldSelectionPathKey"));
    v17[1] = v6;
    AnyHashable.init<A>(_:)(v17, &type metadata for String, &protocol witness table for String);
    if (*(_QWORD *)(v5 + 16) && (v7 = sub_1008432BC((uint64_t)v18), (v8 & 1) != 0))
    {
      sub_1004CB6E8(*(_QWORD *)(v5 + 56) + 32 * v7, (uint64_t)&v19);
    }
    else
    {
      v19 = 0u;
      v20 = 0u;
    }
    swift_bridgeObjectRelease();
    sub_1004B89A4((uint64_t)v18);
    if (*((_QWORD *)&v20 + 1))
    {
      v9 = sub_1004B8930(0, (unint64_t *)&qword_1013E6268, off_1012299A0);
      if ((swift_dynamicCast(v17, &v19, (char *)&type metadata for Any + 8, v9, 6) & 1) != 0)
      {
        v10 = (void *)v17[0];
        v11 = OBJC_IVAR____TtC8Freeform42CRLiOSCompactScenesNavigatorViewController_editorController;
        v12 = objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC8Freeform42CRLiOSCompactScenesNavigatorViewController_editorController], "selectionPath");
        sub_1004B8930(0, (unint64_t *)&qword_1013E0490, NSObject_ptr);
        v13 = objc_msgSend(*(id *)&v2[v11], "selectionPath");
        v14 = static NSObject.== infix(_:_:)(v12, v13);

        if ((v14 & 1) == 0)
        {
LABEL_11:

          return;
        }
        v15 = objc_msgSend(v2, "view");
        if (v15)
        {
          v16 = v15;
          objc_msgSend(v15, "removeFromSuperview");

          objc_msgSend(v2, "removeFromParentViewController");
          goto LABEL_11;
        }
        __break(1u);
      }
    }
    else
    {
      sub_1004D28EC((uint64_t)&v19);
    }
  }
}

uint64_t sub_1007BA518()
{
  uint64_t result;

  qword_10147F600 = 97;
  *(_QWORD *)algn_10147F608 = 0xE100000000000000;
  qword_10147F610 = swift_getKeyPath(&unk_100F0B668);
  unk_10147F618 = 98;
  qword_10147F620 = 0xE100000000000000;
  qword_10147F628 = swift_getKeyPath(&unk_100F0B688);
  qword_10147F630 = 99;
  qword_10147F638 = 0xE100000000000000;
  result = swift_getKeyPath(&unk_100F0B6A8);
  qword_10147F640 = result;
  return result;
}

uint64_t sub_1007BA584@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(uint64_t, char *, uint64_t);
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v31 = a3;
  v27 = a1;
  v28 = a2;
  v5 = sub_1004B804C(&qword_1013EC6D0);
  v29 = *(_QWORD *)(v5 - 8);
  v30 = v5;
  __chkstk_darwin(v5);
  v26 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1004B804C((uint64_t *)&unk_1013E1A50);
  __chkstk_darwin(v7);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v24 - v11;
  v13 = (int *)type metadata accessor for CRLConnectionLineCRDTData(0);
  v24 = a4 + v13[5];
  v14 = type metadata accessor for UUID(0);
  v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56);
  v15(v12, 1, 1, v14);
  sub_1004CB7BC((uint64_t)v12, (uint64_t)v9, (uint64_t *)&unk_1013E1A50);
  v16 = sub_1007BC648();
  CRRegister.init(wrappedValue:)(v9, v7, v16);
  sub_1004CB800((uint64_t)v12, (uint64_t *)&unk_1013E1A50);
  v25 = a4 + v13[6];
  v15(v12, 1, 1, v14);
  sub_1004CB7BC((uint64_t)v12, (uint64_t)v9, (uint64_t *)&unk_1013E1A50);
  CRRegister.init(wrappedValue:)(v9, v7, v16);
  sub_1004CB800((uint64_t)v12, (uint64_t *)&unk_1013E1A50);
  *(_QWORD *)(a4 + v13[7]) = _swiftEmptyDictionarySingleton;
  v17 = v27;
  sub_1004B8460(v27, a4, type metadata accessor for CRLShapeItemCRDTData);
  v18 = v28;
  sub_1004CB7BC(v28, (uint64_t)v12, (uint64_t *)&unk_1013E1A50);
  v19 = v26;
  CRRegister.init(_:)(v12, v7, v16);
  v20 = v30;
  v21 = *(void (**)(uint64_t, char *, uint64_t))(v29 + 40);
  v21(v24, v19, v30);
  v22 = v31;
  sub_1004CB7BC(v31, (uint64_t)v12, (uint64_t *)&unk_1013E1A50);
  CRRegister.init(_:)(v12, v7, v16);
  sub_1004CB800(v22, (uint64_t *)&unk_1013E1A50);
  sub_1004CB800(v18, (uint64_t *)&unk_1013E1A50);
  sub_1004B84A4(v17, type metadata accessor for CRLShapeItemCRDTData);
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v21)(v25, v19, v20);
}

uint64_t sub_1007BA804(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1004B7878((unint64_t *)&unk_1013F62B0, type metadata accessor for CRLConnectionLineCRDTData, (uint64_t)&unk_100F0B4BC);
  return CRType.context.getter(a1, v2);
}

uint64_t sub_1007BA844(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878(&qword_1013F2C40, type metadata accessor for CRLConnectionLineCRDTData, (uint64_t)&unk_100F0B624);
  return CRStruct_3.actionUndoingDifference(from:)(a1, a2, v4);
}

uint64_t sub_1007BA89C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878(&qword_1013F2C40, type metadata accessor for CRLConnectionLineCRDTData, (uint64_t)&unk_100F0B624);
  return CRStruct_3.apply(_:)(a1, a2, v4);
}

uint64_t sub_1007BA8EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878(&qword_1013F2C40, type metadata accessor for CRLConnectionLineCRDTData, (uint64_t)&unk_100F0B624);
  return CRStruct_3.hasDelta(from:)(a1, a2, v4);
}

uint64_t sub_1007BA93C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1004B7878(&qword_1013F2C40, type metadata accessor for CRLConnectionLineCRDTData, (uint64_t)&unk_100F0B624);
  return CRStruct_3.delta(_:from:)(a1, a2, a3, v6);
}

uint64_t sub_1007BA9A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878(&qword_1013F2C40, type metadata accessor for CRLConnectionLineCRDTData, (uint64_t)&unk_100F0B624);
  return CRStruct_3.canMerge(delta:)(a1, a2, v4);
}

uint64_t sub_1007BA9F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878(&qword_1013F2C40, type metadata accessor for CRLConnectionLineCRDTData, (uint64_t)&unk_100F0B624);
  return CRStruct_3.merge(delta:)(a1, a2, v4);
}

double sub_1007BAA48@<D0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;

  if (qword_1013DD128 != -1)
    swift_once(&qword_1013DD128, sub_1007BA518);
  v2 = *(_QWORD *)algn_10147F608;
  v4 = qword_10147F610;
  v3 = unk_10147F618;
  v5 = qword_10147F620;
  v6 = qword_10147F628;
  v7 = qword_10147F630;
  v8 = qword_10147F638;
  v9 = qword_10147F640;
  *a1 = qword_10147F600;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  a1[4] = v5;
  a1[5] = v6;
  a1[6] = v7;
  a1[7] = v8;
  a1[8] = v9;
  swift_bridgeObjectRetain(v2);
  swift_retain(v4);
  swift_bridgeObjectRetain(v5);
  swift_retain(v6);
  swift_bridgeObjectRetain(v8);
  *(_QWORD *)&result = swift_retain(v9).n128_u64[0];
  return result;
}

uint64_t sub_1007BAAF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878(&qword_1013F2C40, type metadata accessor for CRLConnectionLineCRDTData, (uint64_t)&unk_100F0B624);
  return CRStruct_3.copy(renamingReferences:)(a1, a2, v4);
}

uint64_t sub_1007BAB4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1004B7878(&qword_1013F2C40, type metadata accessor for CRLConnectionLineCRDTData, (uint64_t)&unk_100F0B624);
  return CRStruct_3.observableDifference(from:with:)(a1, a2, a3, v6);
}

uint64_t sub_1007BABB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878(&qword_1013F2C40, type metadata accessor for CRLConnectionLineCRDTData, (uint64_t)&unk_100F0B624);
  return CRStruct_3.visitReferences(_:)(a1, a2, v4);
}

BOOL sub_1007BAC04()
{
  sub_1004B7878(&qword_1013F2C40, type metadata accessor for CRLConnectionLineCRDTData, (uint64_t)&unk_100F0B624);
  return CRStruct_3.needToFinalizeTimestamps()();
}

uint64_t sub_1007BAC44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878(&qword_1013F2C40, type metadata accessor for CRLConnectionLineCRDTData, (uint64_t)&unk_100F0B624);
  return CRStruct_3.finalizeTimestamps(_:)(a1, a2, v4);
}

uint64_t sub_1007BAC94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878(&qword_1013F2C40, type metadata accessor for CRLConnectionLineCRDTData, (uint64_t)&unk_100F0B624);
  return CRStruct_3.merge(_:)(a1, a2, v4);
}

uint64_t sub_1007BACE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1004B7878(&qword_1013F2BF8, type metadata accessor for CRLConnectionLineCRDTData, (uint64_t)&unk_100F0B5A4);
  return CRDT.serializedData(_:version:)(a1, a2, a3, v6);
}

uint64_t sub_1007BAD48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1004B7878(&qword_1013F2BF8, type metadata accessor for CRLConnectionLineCRDTData, (uint64_t)&unk_100F0B5A4);
  return CRDT.init(serializedData:)(a1, a2, a3, v6);
}

uint64_t sub_1007BADBC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1004B7878(&qword_1013F2C40, type metadata accessor for CRLConnectionLineCRDTData, (uint64_t)&unk_100F0B624);
  return static CRStruct_3.fieldKeys.getter(a1, v2);
}

uint64_t sub_1007BADFC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  void (*v12)(_BYTE *, uint64_t, uint64_t, uint64_t);
  _BYTE v14[120];
  _BYTE v15[232];
  _BYTE v16[48];
  uint64_t v17;
  _BYTE v18[232];

  v2 = sub_1004B804C((uint64_t *)&unk_1013E1A50);
  __chkstk_darwin(v2);
  v4 = &v14[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  v7 = &v14[-v6];
  v8 = type metadata accessor for CRLShapeItemCRDTData(0);
  __chkstk_darwin(v8);
  v10 = &v14[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  memset(v14, 0, 112);
  sub_1004C39E8((uint64_t)v18);
  sub_1004C4938((uint64_t)v18, (uint64_t)v15, (uint64_t *)&unk_1013F1530);
  memset(v16, 0, sizeof(v16));
  v17 = 0;
  sub_100C085D8((uint64_t)v14, (uint64_t)v15, (uint64_t)v16, (uint64_t)v16, (uint64_t)v10, 0.0);
  *(_QWORD *)&v10[*(int *)(v8 + 20)] = _swiftEmptyDictionarySingleton;
  v11 = type metadata accessor for UUID(0);
  v12 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56);
  v12(v7, 1, 1, v11);
  v12(v4, 1, 1, v11);
  return sub_1007BA584((uint64_t)v10, (uint64_t)v7, (uint64_t)v4, a1);
}

uint64_t sub_1007BAF84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878(&qword_1013F2C40, type metadata accessor for CRLConnectionLineCRDTData, (uint64_t)&unk_100F0B624);
  return CRStruct_3.init(from:)(a1, a2, v4);
}

uint64_t sub_1007BAFE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B7878(&qword_1013F2C40, type metadata accessor for CRLConnectionLineCRDTData, (uint64_t)&unk_100F0B624);
  return CRStruct_3.encode(to:)(a1, a2, v4);
}

uint64_t sub_1007BB044(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1004B7878(&qword_1013F2C40, type metadata accessor for CRLConnectionLineCRDTData, (uint64_t)&unk_100F0B624);
  return CRStruct_3.minEncodingVersion.getter(a1, v2);
}

uint64_t sub_1007BB094()
{
  return 2;
}

uint64_t sub_1007BB0A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[24];
  _BYTE v16[128];
  _QWORD v17[17];

  v1 = type metadata accessor for CRLShapeItemParentAffinity(0);
  __chkstk_darwin(v1);
  v3 = &v15[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for CRLPathSourceData(0);
  __chkstk_darwin(v4);
  v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_1004B804C(&qword_1013F5530);
  __chkstk_darwin(v7);
  v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = sub_1005DA690();
  v11 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 632);
  swift_beginAccess(v11, v15, 0, 0);
  sub_1004CB7BC(v11, (uint64_t)v9, &qword_1013F5530);
  v12 = sub_1004B804C((uint64_t *)&unk_101406B00);
  CRRegister.wrappedValue.getter(v12);
  sub_1004B8460((uint64_t)&v3[*(int *)(v1 + 20)], (uint64_t)v6, type metadata accessor for CRLPathSourceData);
  sub_1004B84A4((uint64_t)v3, type metadata accessor for CRLShapeItemParentAffinity);
  sub_1004CB800((uint64_t)v9, &qword_1013F5530);
  sub_1004C4938((uint64_t)(v6 + 184), (uint64_t)v16, &qword_1013F6270);
  sub_1004C4938((uint64_t)v16, (uint64_t)v17, &qword_1013F6270);
  if (sub_1007BD0A0((uint64_t)v17) != 1)
  {
    if (v17[9])
    {
      sub_1004B84A4((uint64_t)v6, type metadata accessor for CRLPathSourceData);
    }
    else
    {
      v13 = v17[13];
      sub_1004B84A4((uint64_t)v6, type metadata accessor for CRLPathSourceData);
      if (!v13)
        return v10;
    }
    return 0x3000000000000;
  }
  sub_1004B84A4((uint64_t)v6, type metadata accessor for CRLPathSourceData);
  return v10;
}

_QWORD *sub_1007BB2AC(char a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _BYTE v30[24];
  _BYTE v31[24];

  v2 = v1;
  v4 = *v1;
  v5 = type metadata accessor for CRLConnectionLineCRDTData(0);
  __chkstk_darwin(v5);
  v7 = &v30[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  v10 = &v30[-v9];
  v11 = sub_1004B804C(&qword_1013F5530);
  __chkstk_darwin(v11);
  v13 = &v30[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v14);
  v16 = &v30[-v15];
  v17 = *(_QWORD *)(v4 + 632);
  v18 = (uint64_t)v2 + v17;
  if ((a1 & 1) != 0)
  {
    swift_beginAccess((char *)v2 + v17, v30, 0, 0);
    sub_1004CB7BC(v18, (uint64_t)v13, &qword_1013F5530);
    v19 = sub_1004CBA30(&qword_1013E2A20, &qword_1013F5530, (uint64_t)&unk_100EFD5F4);
    CRStruct_6.copy(renamingReferences:)(0, v11, v19);
    sub_1004CB800((uint64_t)v13, &qword_1013F5530);
    v20 = (uint64_t)v2 + *(_QWORD *)(*v2 + 752);
    swift_beginAccess(v20, v31, 0, 0);
    sub_1004B8460(v20, (uint64_t)v7, type metadata accessor for CRLConnectionLineCRDTData);
    v21 = sub_1004B7878(&qword_1013F2C40, type metadata accessor for CRLConnectionLineCRDTData, (uint64_t)&unk_100F0B624);
    CRStruct_3.copy(renamingReferences:)(0, v5, v21);
    sub_1004B84A4((uint64_t)v7, type metadata accessor for CRLConnectionLineCRDTData);
  }
  else
  {
    swift_beginAccess((char *)v2 + v17, v31, 0, 0);
    sub_1004CB7BC(v18, (uint64_t)v16, &qword_1013F5530);
    v22 = (uint64_t)v2 + *(_QWORD *)(*v2 + 752);
    swift_beginAccess(v22, v30, 0, 0);
    sub_1004B8460(v22, (uint64_t)v10, type metadata accessor for CRLConnectionLineCRDTData);
  }
  v23 = v2[4];
  v24 = v2[5];
  v27 = v2 + 2;
  v25 = v2[2];
  v26 = v27[1];
  v28 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  sub_1007BD05C((uint64_t)v10, v28 + *(_QWORD *)(*(_QWORD *)v28 + 752));
  *(_QWORD *)(v28 + qword_10140A310) = 0;
  sub_1004C4938((uint64_t)v16, v28 + *(_QWORD *)(*(_QWORD *)v28 + 632), &qword_1013F5530);
  return sub_1005E1000(v26, v23, v24, v25);
}

uint64_t sub_1007BB55C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v41;
  uint64_t v42;
  unsigned int (*v43)(char *, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51[24];
  _BYTE v52[24];
  uint64_t v53;

  v4 = sub_1004B804C((uint64_t *)&unk_1013E1A50);
  __chkstk_darwin(v4);
  v47 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v49 = (uint64_t)&v41 - v7;
  __chkstk_darwin(v8);
  v48 = (uint64_t)&v41 - v9;
  __chkstk_darwin(v10);
  v12 = (char *)&v41 - v11;
  v50 = type metadata accessor for CRLConnectionLineCRDTData(0);
  __chkstk_darwin(v50);
  v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v41 - v16;
  v18 = type metadata accessor for UUID(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  __chkstk_darwin(v20);
  v24 = (char *)&v41 - v23;
  v53 = a1;
  if (*(_BYTE *)(a1 + 16) == 1)
  {
    v42 = v22;
    v44 = v1;
    v45 = v2;
    v25 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 752);
    v26 = v21;
    swift_beginAccess(v25, v51, 0, 0);
    sub_1004B8460(v25, (uint64_t)v17, type metadata accessor for CRLConnectionLineCRDTData);
    v46 = sub_1004B804C(&qword_1013EC6D0);
    CRRegister.wrappedValue.getter(v46);
    sub_1004B84A4((uint64_t)v17, type metadata accessor for CRLConnectionLineCRDTData);
    v43 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
    v27 = v19;
    if (v43(v12, 1, v26) == 1)
    {
      sub_1004CB800((uint64_t)v12, (uint64_t *)&unk_1013E1A50);
      v28 = v26;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v24, v12, v26);
      v28 = v26;
      v29 = v27;
      v30 = v48;
      sub_1008FD76C((uint64_t)v24, v48);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v29 + 56))(v30, 0, 1, v26);
      swift_beginAccess(v25, v52, 33, 0);
      v31 = v49;
      sub_1004CB7BC(v30, v49, (uint64_t *)&unk_1013E1A50);
      CRRegister.wrappedValue.setter(v31, v46, v32);
      v33 = v30;
      v27 = v29;
      sub_1004CB800(v33, (uint64_t *)&unk_1013E1A50);
      swift_endAccess(v52);
      (*(void (**)(char *, uint64_t))(v29 + 8))(v24, v26);
    }
    sub_1004B8460(v25, (uint64_t)v14, type metadata accessor for CRLConnectionLineCRDTData);
    v34 = (uint64_t)v47;
    CRRegister.wrappedValue.getter(v46);
    sub_1004B84A4((uint64_t)v14, type metadata accessor for CRLConnectionLineCRDTData);
    if (v43((char *)v34, 1, v28) == 1)
    {
      sub_1004CB800(v34, (uint64_t *)&unk_1013E1A50);
    }
    else
    {
      v35 = v28;
      v36 = v42;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 32))(v42, v34, v35);
      v37 = v48;
      sub_1008FD76C(v36, v48);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v27 + 56))(v37, 0, 1, v35);
      swift_beginAccess(v25, v52, 33, 0);
      v38 = v49;
      sub_1004CB7BC(v37, v49, (uint64_t *)&unk_1013E1A50);
      CRRegister.wrappedValue.setter(v38, v46, v39);
      sub_1004CB800(v37, (uint64_t *)&unk_1013E1A50);
      swift_endAccess(v52);
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v36, v35);
    }
    v1 = v44;
  }
  swift_beginAccess(v1 + *(_QWORD *)(*(_QWORD *)v1 + 632), v52, 33, 0);
  sub_100D3D738(v53);
  return swift_endAccess(v52);
}

uint64_t sub_1007BB9B8()
{
  uint64_t v0;

  sub_1004CB800(v0 + *(_QWORD *)(*(_QWORD *)v0 + 632), &qword_1013F5530);

  sub_1004B84A4(v0 + *(_QWORD *)(*(_QWORD *)v0 + 752), type metadata accessor for CRLConnectionLineCRDTData);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for CRLConnectionLineItemData(uint64_t a1)
{
  return sub_1004BD408(a1, qword_1013F27E0, (uint64_t)&nominal type descriptor for CRLConnectionLineItemData);
}

char *sub_1007BBA2C(char *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v33 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = (char *)(v33 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v33);
  }
  else
  {
    v7 = sub_1004B804C((uint64_t *)&unk_1014148A0);
    (*(void (**)(char *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = (int *)type metadata accessor for CRLShapeItemCRDTData.ShapeStyleData(0);
    v9 = v8[5];
    v10 = &a1[v9];
    v11 = (char *)a2 + v9;
    v12 = sub_1004B804C(&qword_1013E0A88);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    v13 = v8[6];
    v14 = &a1[v13];
    v15 = (char *)a2 + v13;
    v16 = sub_1004B804C((uint64_t *)&unk_1013F62E0);
    v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
    v17(v14, v15, v16);
    v17(&a1[v8[7]], (char *)a2 + v8[7], v16);
    v18 = v8[8];
    v19 = &a1[v18];
    v20 = (char *)a2 + v18;
    v21 = sub_1004B804C(&qword_1013F55A0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
    v22 = v8[9];
    v23 = *(uint64_t *)((char *)a2 + v22);
    *(_QWORD *)&a1[v22] = v23;
    v24 = *(int *)(type metadata accessor for CRLShapeItemCRDTData(0) + 20);
    v25 = *(uint64_t *)((char *)a2 + v24);
    *(_QWORD *)&a1[v24] = v25;
    v26 = a3[5];
    v27 = &a1[v26];
    v28 = (char *)a2 + v26;
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v25);
    v29 = sub_1004B804C(&qword_1013EC6D0);
    v30 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16);
    v30(v27, v28, v29);
    v30(&a1[a3[6]], (char *)a2 + a3[6], v29);
    v31 = a3[7];
    v32 = *(uint64_t *)((char *)a2 + v31);
    *(_QWORD *)&a1[v31] = v32;
    swift_bridgeObjectRetain(v32);
  }
  return a1;
}

double sub_1007BBBF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  double result;

  v4 = sub_1004B804C((uint64_t *)&unk_1014148A0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = (int *)type metadata accessor for CRLShapeItemCRDTData.ShapeStyleData(0);
  v6 = a1 + v5[5];
  v7 = sub_1004B804C(&qword_1013E0A88);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = a1 + v5[6];
  v9 = sub_1004B804C((uint64_t *)&unk_1013F62E0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(a1 + v5[7], v9);
  v11 = a1 + v5[8];
  v12 = sub_1004B804C(&qword_1013F55A0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  swift_bridgeObjectRelease();
  type metadata accessor for CRLShapeItemCRDTData(0);
  swift_bridgeObjectRelease();
  v13 = a1 + *(int *)(a2 + 20);
  v14 = sub_1004B804C(&qword_1013EC6D0);
  v15 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8);
  v15(v13, v14);
  v15(a1 + *(int *)(a2 + 24), v14);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t sub_1007BBD44(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;

  v6 = sub_1004B804C((uint64_t *)&unk_1014148A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = (int *)type metadata accessor for CRLShapeItemCRDTData.ShapeStyleData(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_1004B804C(&qword_1013E0A88);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  v12 = v7[6];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_1004B804C((uint64_t *)&unk_1013F62E0);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
  v16(v13, v14, v15);
  v16(a1 + v7[7], a2 + v7[7], v15);
  v17 = v7[8];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = sub_1004B804C(&qword_1013F55A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
  v21 = v7[9];
  v22 = *(_QWORD *)(a2 + v21);
  *(_QWORD *)(a1 + v21) = v22;
  v23 = *(int *)(type metadata accessor for CRLShapeItemCRDTData(0) + 20);
  v24 = *(_QWORD *)(a2 + v23);
  *(_QWORD *)(a1 + v23) = v24;
  v25 = a3[5];
  v26 = a1 + v25;
  v27 = a2 + v25;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v24);
  v28 = sub_1004B804C(&qword_1013EC6D0);
  v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 16);
  v29(v26, v27, v28);
  v29(a1 + a3[6], a2 + a3[6], v28);
  v30 = a3[7];
  v31 = *(_QWORD *)(a2 + v30);
  *(_QWORD *)(a1 + v30) = v31;
  swift_bridgeObjectRetain(v31);
  return a1;
}

uint64_t sub_1007BBEE4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;

  v6 = sub_1004B804C((uint64_t *)&unk_1014148A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = (int *)type metadata accessor for CRLShapeItemCRDTData.ShapeStyleData(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_1004B804C(&qword_1013E0A88);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v12 = v7[6];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_1004B804C((uint64_t *)&unk_1013F62E0);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 24);
  v16(v13, v14, v15);
  v16(a1 + v7[7], a2 + v7[7], v15);
  v17 = v7[8];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = sub_1004B804C(&qword_1013F55A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 24))(v18, v19, v20);
  v21 = v7[9];
  v22 = *(_QWORD *)(a2 + v21);
  *(_QWORD *)(a1 + v21) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease();
  v23 = *(int *)(type metadata accessor for CRLShapeItemCRDTData(0) + 20);
  v24 = *(_QWORD *)(a2 + v23);
  *(_QWORD *)(a1 + v23) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease();
  v25 = a3[5];
  v26 = a1 + v25;
  v27 = a2 + v25;
  v28 = sub_1004B804C(&qword_1013EC6D0);
  v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 24);
  v29(v26, v27, v28);
  v29(a1 + a3[6], a2 + a3[6], v28);
  v30 = a3[7];
  v31 = *(_QWORD *)(a2 + v30);
  *(_QWORD *)(a1 + v30) = v31;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1007BC0A0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);

  v6 = sub_1004B804C((uint64_t *)&unk_1014148A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = (int *)type metadata accessor for CRLShapeItemCRDTData.ShapeStyleData(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_1004B804C(&qword_1013E0A88);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = v7[6];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_1004B804C((uint64_t *)&unk_1013F62E0);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32);
  v16(v13, v14, v15);
  v16(a1 + v7[7], a2 + v7[7], v15);
  v17 = v7[8];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = sub_1004B804C(&qword_1013F55A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
  *(_QWORD *)(a1 + v7[9]) = *(_QWORD *)(a2 + v7[9]);
  v21 = type metadata accessor for CRLShapeItemCRDTData(0);
  *(_QWORD *)(a1 + *(int *)(v21 + 20)) = *(_QWORD *)(a2 + *(int *)(v21 + 20));
  v22 = a3[5];
  v23 = a1 + v22;
  v24 = a2 + v22;
  v25 = sub_1004B804C(&qword_1013EC6D0);
  v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 32);
  v26(v23, v24, v25);
  v26(a1 + a3[6], a2 + a3[6], v25);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1007BC22C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);

  v6 = sub_1004B804C((uint64_t *)&unk_1014148A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = (int *)type metadata accessor for CRLShapeItemCRDTData.ShapeStyleData(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_1004B804C(&qword_1013E0A88);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = v7[6];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_1004B804C((uint64_t *)&unk_1013F62E0);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 40);
  v16(v13, v14, v15);
  v16(a1 + v7[7], a2 + v7[7], v15);
  v17 = v7[8];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = sub_1004B804C(&qword_1013F55A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 40))(v18, v19, v20);
  *(_QWORD *)(a1 + v7[9]) = *(_QWORD *)(a2 + v7[9]);
  swift_bridgeObjectRelease();
  v21 = type metadata accessor for CRLShapeItemCRDTData(0);
  *(_QWORD *)(a1 + *(int *)(v21 + 20)) = *(_QWORD *)(a2 + *(int *)(v21 + 20));
  swift_bridgeObjectRelease();
  v22 = a3[5];
  v23 = a1 + v22;
  v24 = a2 + v22;
  v25 = sub_1004B804C(&qword_1013EC6D0);
  v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 40);
  v26(v23, v24, v25);
  v26(a1 + a3[6], a2 + a3[6], v25);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1007BC3D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1007BC3DC);
}

uint64_t sub_1007BC3DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = type metadata accessor for CRLShapeItemCRDTData(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_1004B804C(&qword_1013EC6D0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 28));
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_1007BC488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1007BC494);
}

uint64_t sub_1007BC494(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for CRLShapeItemCRDTData(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = sub_1004B804C(&qword_1013EC6D0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for CRLConnectionLineCRDTData(uint64_t a1)
{
  return sub_1004BD408(a1, (uint64_t *)&unk_1013F2BA8, (uint64_t)&nominal type descriptor for CRLConnectionLineCRDTData);
}

void sub_1007BC550(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;

  v2 = type metadata accessor for CRLShapeItemCRDTData(319);
  if (v3 <= 0x3F)
  {
    v6 = *(_QWORD *)(v2 - 8) + 64;
    sub_1007BC5E4(319);
    if (v5 <= 0x3F)
    {
      v7 = *(_QWORD *)(v4 - 8) + 64;
      v8 = v7;
      v9 = (char *)&value witness table for Builtin.BridgeObject + 64;
      swift_initStructMetadata(a1, 256, 4, &v6, a1 + 16);
    }
  }
}

void sub_1007BC5E4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_1013F2BB8)
  {
    v2 = sub_1004CB6A4((uint64_t *)&unk_1013E1A50);
    v3 = sub_1007BC648();
    v4 = type metadata accessor for CRRegister(a1, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_1013F2BB8);
  }
}

unint64_t sub_1007BC648()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1013F2BC0;
  if (!qword_1013F2BC0)
  {
    v1 = sub_1004CB6A4((uint64_t *)&unk_1013E1A50);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1013F2BC0);
  }
  return result;
}

uint64_t sub_1007BC6A4()
{
  return sub_1004B7878(&qword_1013F2BF8, type metadata accessor for CRLConnectionLineCRDTData, (uint64_t)&unk_100F0B5A4);
}

uint64_t sub_1007BC6D0()
{
  return sub_1004B7878(&qword_1013F2C00, type metadata accessor for CRLConnectionLineCRDTData, (uint64_t)&unk_100F0B3DC);
}

uint64_t sub_1007BC6FC()
{
  return sub_1004B7878(&qword_1013F2C08, type metadata accessor for CRLConnectionLineCRDTData, (uint64_t)&unk_100F0B424);
}

uint64_t sub_1007BC728()
{
  return sub_1004CBA30(&qword_1013F2C10, &qword_1013EC6D0, (uint64_t)&protocol conformance descriptor for CRRegister<A>);
}

uint64_t sub_1007BC754()
{
  return sub_1004B7878(&qword_1013F2C18, type metadata accessor for CRLConnectionLineCRDTData, (uint64_t)&unk_100F0B484);
}

uint64_t sub_1007BC780()
{
  return sub_1004B7878((unint64_t *)&unk_1013F62B0, type metadata accessor for CRLConnectionLineCRDTData, (uint64_t)&unk_100F0B4BC);
}

uint64_t sub_1007BC7AC()
{
  return sub_1004CBA30(&qword_1013F2C20, &qword_1013F2C28, (uint64_t)&protocol conformance descriptor for CRStructMergeableDelta_3<A>);
}

uint64_t sub_1007BC7D8()
{
  return sub_1004B7878(&qword_1013F2C30, type metadata accessor for CRLConnectionLineCRDTData, (uint64_t)&unk_100F0B51C);
}

uint64_t sub_1007BC804(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1004B7878(&qword_1013F2BF8, type metadata accessor for CRLConnectionLineCRDTData, (uint64_t)&unk_100F0B5A4);
  result = sub_1004B7878(&qword_1013F2C38, type metadata accessor for CRLConnectionLineCRDTData, (uint64_t)&unk_100F0B57C);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1007BC860(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int (*v37)(_QWORD, _QWORD, _QWORD);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  _BYTE *v42;
  uint64_t v43;
  _BYTE *v44;
  char v45;
  _BYTE *v47;
  uint64_t v48;
  void (*v49)(_BYTE *, uint64_t, uint64_t);
  unsigned int (*v50)(_QWORD, _QWORD, _QWORD);
  _BYTE *v51;
  void (*v52)(_BYTE *, uint64_t);
  _BYTE *v53;
  _BYTE *v54;
  uint64_t v55;
  _BYTE *v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t v59;
  _BYTE *v60;
  uint64_t v61;
  _BYTE *v62;
  void (*v63)(_BYTE *, uint64_t);
  _BYTE v64[4];
  int v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  _BYTE *v69;
  _BYTE *v70;
  _BYTE *v71;
  _BYTE *v72;
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _BYTE *v79;
  _BYTE *v80;

  v74 = type metadata accessor for UUID(0);
  v76 = *(_QWORD *)(v74 - 8);
  __chkstk_darwin(v74);
  v69 = &v64[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v75 = sub_1004B804C((uint64_t *)&unk_1013F62D0);
  __chkstk_darwin(v75);
  v71 = &v64[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  v8 = &v64[-v7];
  v9 = sub_1004B804C((uint64_t *)&unk_1013E1A50);
  __chkstk_darwin(v9);
  v68 = &v64[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v11);
  v70 = &v64[-v12];
  __chkstk_darwin(v13);
  v72 = &v64[-v14];
  __chkstk_darwin(v15);
  v73 = &v64[-v16];
  __chkstk_darwin(v17);
  v19 = &v64[-v18];
  __chkstk_darwin(v20);
  v22 = &v64[-v21];
  v23 = type metadata accessor for CRLConnectionLineCRDTData(0);
  __chkstk_darwin(v23);
  v79 = &v64[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v25);
  v80 = &v64[-v26];
  __chkstk_darwin(v27);
  v29 = &v64[-v28];
  __chkstk_darwin(v30);
  v32 = &v64[-v31];
  v33 = sub_100C09DB8(a1, a2);
  v77 = a1;
  sub_1004B8460(a1, (uint64_t)v32, type metadata accessor for CRLConnectionLineCRDTData);
  v78 = a2;
  sub_1004B8460(a2, (uint64_t)v29, type metadata accessor for CRLConnectionLineCRDTData);
  if (!v33)
  {
    sub_1004B84A4((uint64_t)v29, type metadata accessor for CRLConnectionLineCRDTData);
    sub_1004B84A4((uint64_t)v32, type metadata accessor for CRLConnectionLineCRDTData);
LABEL_9:
    v42 = v79;
    v41 = v80;
    sub_1004B8460(v77, (uint64_t)v80, type metadata accessor for CRLConnectionLineCRDTData);
    sub_1004B8460(v78, (uint64_t)v42, type metadata accessor for CRLConnectionLineCRDTData);
    goto LABEL_10;
  }
  v34 = sub_1004B804C(&qword_1013EC6D0);
  CRRegister.wrappedValue.getter(v34);
  v67 = v23;
  CRRegister.wrappedValue.getter(v34);
  v35 = v75;
  v36 = (uint64_t)&v8[*(int *)(v75 + 48)];
  sub_1004CB7BC((uint64_t)v22, (uint64_t)v8, (uint64_t *)&unk_1013E1A50);
  sub_1004CB7BC((uint64_t)v19, v36, (uint64_t *)&unk_1013E1A50);
  v37 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v76 + 48);
  v38 = v74;
  v39 = v35;
  v40 = (uint64_t)v8;
  if (v37(v8, 1, v74) != 1)
  {
    v43 = (uint64_t)v8;
    v44 = v73;
    sub_1004CB7BC(v43, (uint64_t)v73, (uint64_t *)&unk_1013E1A50);
    if (v37(v36, 1, v38) != 1)
    {
      v47 = v44;
      v48 = v76;
      v49 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v76 + 32);
      v66 = v40;
      v50 = v37;
      v51 = v69;
      v49(v69, v36, v38);
      sub_1004B7878((unint64_t *)&qword_1013E4880, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v65 = dispatch thunk of static Equatable.== infix(_:_:)(v47, v51);
      v52 = *(void (**)(_BYTE *, uint64_t))(v48 + 8);
      v53 = v51;
      v37 = v50;
      v52(v53, v38);
      sub_1004CB800((uint64_t)v19, (uint64_t *)&unk_1013E1A50);
      sub_1004CB800((uint64_t)v22, (uint64_t *)&unk_1013E1A50);
      sub_1004B84A4((uint64_t)v29, type metadata accessor for CRLConnectionLineCRDTData);
      sub_1004B84A4((uint64_t)v32, type metadata accessor for CRLConnectionLineCRDTData);
      v54 = v47;
      v39 = v75;
      v52(v54, v38);
      sub_1004CB800(v66, (uint64_t *)&unk_1013E1A50);
      v41 = v80;
      sub_1004B8460(v77, (uint64_t)v80, type metadata accessor for CRLConnectionLineCRDTData);
      v42 = v79;
      sub_1004B8460(v78, (uint64_t)v79, type metadata accessor for CRLConnectionLineCRDTData);
      if ((v65 & 1) != 0)
        goto LABEL_14;
LABEL_10:
      sub_1004B84A4((uint64_t)v42, type metadata accessor for CRLConnectionLineCRDTData);
      sub_1004B84A4((uint64_t)v41, type metadata accessor for CRLConnectionLineCRDTData);
      goto LABEL_11;
    }
    sub_1004CB800((uint64_t)v19, (uint64_t *)&unk_1013E1A50);
    sub_1004CB800((uint64_t)v22, (uint64_t *)&unk_1013E1A50);
    sub_1004B84A4((uint64_t)v29, type metadata accessor for CRLConnectionLineCRDTData);
    sub_1004B84A4((uint64_t)v32, type metadata accessor for CRLConnectionLineCRDTData);
    (*(void (**)(_BYTE *, uint64_t))(v76 + 8))(v44, v38);
    goto LABEL_8;
  }
  sub_1004CB800((uint64_t)v19, (uint64_t *)&unk_1013E1A50);
  sub_1004CB800((uint64_t)v22, (uint64_t *)&unk_1013E1A50);
  sub_1004B84A4((uint64_t)v29, type metadata accessor for CRLConnectionLineCRDTData);
  sub_1004B84A4((uint64_t)v32, type metadata accessor for CRLConnectionLineCRDTData);
  if (v37(v36, 1, v38) != 1)
  {
LABEL_8:
    sub_1004CB800(v40, (uint64_t *)&unk_1013F62D0);
    goto LABEL_9;
  }
  sub_1004CB800((uint64_t)v8, (uint64_t *)&unk_1013E1A50);
  v41 = v80;
  sub_1004B8460(v77, (uint64_t)v80, type metadata accessor for CRLConnectionLineCRDTData);
  v42 = v79;
  sub_1004B8460(v78, (uint64_t)v79, type metadata accessor for CRLConnectionLineCRDTData);
LABEL_14:
  v55 = sub_1004B804C(&qword_1013EC6D0);
  v56 = v72;
  CRRegister.wrappedValue.getter(v55);
  v57 = (uint64_t)v70;
  CRRegister.wrappedValue.getter(v55);
  v58 = v71;
  v59 = (uint64_t)&v71[*(int *)(v39 + 48)];
  sub_1004CB7BC((uint64_t)v56, (uint64_t)v71, (uint64_t *)&unk_1013E1A50);
  sub_1004CB7BC(v57, v59, (uint64_t *)&unk_1013E1A50);
  if (v37(v58, 1, v38) == 1)
  {
    sub_1004CB800(v57, (uint64_t *)&unk_1013E1A50);
    sub_1004CB800((uint64_t)v56, (uint64_t *)&unk_1013E1A50);
    sub_1004B84A4((uint64_t)v42, type metadata accessor for CRLConnectionLineCRDTData);
    sub_1004B84A4((uint64_t)v41, type metadata accessor for CRLConnectionLineCRDTData);
    if (v37(v59, 1, v38) == 1)
    {
      sub_1004CB800((uint64_t)v58, (uint64_t *)&unk_1013E1A50);
      v45 = 1;
      return v45 & 1;
    }
  }
  else
  {
    v60 = v68;
    sub_1004CB7BC((uint64_t)v58, (uint64_t)v68, (uint64_t *)&unk_1013E1A50);
    if (v37(v59, 1, v38) != 1)
    {
      v61 = v76;
      v62 = v69;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v76 + 32))(v69, v59, v38);
      sub_1004B7878((unint64_t *)&qword_1013E4880, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v45 = dispatch thunk of static Equatable.== infix(_:_:)(v60, v62);
      v63 = *(void (**)(_BYTE *, uint64_t))(v61 + 8);
      v63(v62, v38);
      sub_1004CB800(v57, (uint64_t *)&unk_1013E1A50);
      sub_1004CB800((uint64_t)v72, (uint64_t *)&unk_1013E1A50);
      sub_1004B84A4((uint64_t)v42, type metadata accessor for CRLConnectionLineCRDTData);
      sub_1004B84A4((uint64_t)v41, type metadata accessor for CRLConnectionLineCRDTData);
      v63(v60, v38);
      sub_1004CB800((uint64_t)v58, (uint64_t *)&unk_1013E1A50);
      return v45 & 1;
    }
    sub_1004CB800(v57, (uint64_t *)&unk_1013E1A50);
    sub_1004CB800((uint64_t)v56, (uint64_t *)&unk_1013E1A50);
    sub_1004B84A4((uint64_t)v42, type metadata accessor for CRLConnectionLineCRDTData);
    sub_1004B84A4((uint64_t)v41, type metadata accessor for CRLConnectionLineCRDTData);
    (*(void (**)(_BYTE *, uint64_t))(v76 + 8))(v60, v38);
  }
  sub_1004CB800((uint64_t)v58, (uint64_t *)&unk_1013F62D0);
LABEL_11:
  v45 = 0;
  return v45 & 1;
}

uint64_t sub_1007BD05C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CRLConnectionLineCRDTData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1007BD0A0(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t sub_1007BD0B8(_QWORD *a1, uint64_t a2, unsigned __int16 a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  unint64_t v26;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  char v40;
  char v41;

  v36 = a2;
  v35 = a3;
  v5 = sub_1004B804C(&qword_1013F2C90);
  v31 = *(_QWORD *)(v5 - 8);
  v32 = v5;
  __chkstk_darwin(v5);
  v30 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1004B804C(&qword_1013F2C98);
  v33 = *(_QWORD *)(v7 - 8);
  v34 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1004B804C(&qword_1013F2CA0);
  v28 = *(_QWORD *)(v10 - 8);
  v29 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1004B804C(&qword_1013F2CA8);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = a1[3];
  v17 = a1[4];
  sub_1004BB5A4(a1, v18);
  v19 = sub_1007BDFE4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CRLSerializableObjectType.CodingKeys, &type metadata for CRLSerializableObjectType.CodingKeys, v19, v18, v17);
  if ((a3 & 0x100) != 0)
  {
    if (v36 | v35)
    {
      v41 = 2;
      v24 = sub_1007BE028();
      v25 = v30;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for CRLSerializableObjectType.PasteboardObjectCodingKeys, &v41, v13, &type metadata for CRLSerializableObjectType.PasteboardObjectCodingKeys, v24);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v25, v32);
    }
    else
    {
      v39 = 0;
      v26 = sub_1007BE0F4();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for CRLSerializableObjectType.BoardCodingKeys, &v39, v13, &type metadata for CRLSerializableObjectType.BoardCodingKeys, v26);
      (*(void (**)(char *, uint64_t))(v28 + 8))(v12, v29);
    }
  }
  else
  {
    v40 = 1;
    v20 = sub_1007BE06C();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for CRLSerializableObjectType.BoardItemCodingKeys, &v40, v13, &type metadata for CRLSerializableObjectType.BoardItemCodingKeys, v20);
    v37 = v36;
    v38 = v35 & 1;
    v21 = sub_1007BE138();
    v22 = v34;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v37, v23, v34, &type metadata for CRLBoardItemType, v21);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v9, v22);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

uint64_t sub_1007BD368(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1007BE0F4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1007BD390(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1007BE0F4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1007BD3B8()
{
  return 0x657079546D657469;
}

uint64_t sub_1007BD3D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x657079546D657469 && a2 == 0xE800000000000000)
  {
    result = swift_bridgeObjectRelease(0xE800000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x657079546D657469, 0xE800000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_1007BD464(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1007BE06C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1007BD48C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1007BE06C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1007BD4B4()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x6574496472616F62;
  if (*v0 != 1)
    v1 = 0xD000000000000010;
  if (*v0)
    return v1;
  else
    return 0x6472616F62;
}

uint64_t sub_1007BD514@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1007BDA30(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1007BD538(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1007BDFE4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1007BD560(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1007BDFE4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1007BD588(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1007BE028();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1007BD5B0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1007BE028();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1007BD5D8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  __int16 v5;

  result = sub_1007BDB84(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_BYTE *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 9) = HIBYTE(v5) & 1;
  }
  return result;
}

uint64_t sub_1007BD60C(_QWORD *a1)
{
  uint64_t v1;

  return sub_1007BD0B8(a1, *(_QWORD *)v1, *(unsigned __int8 *)(v1 + 8) | (unsigned __int16)(*(unsigned __int8 *)(v1 + 9) << 8));
}

uint64_t sub_1007BD638(uint64_t a1, uint64_t a2)
{
  return sub_1007BD668(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8) | (unsigned __int16)(*(unsigned __int8 *)(a1 + 9) << 8), *(_QWORD *)a2, *(unsigned __int8 *)(a2 + 8) | (unsigned __int16)(*(unsigned __int8 *)(a2 + 9) << 8));
}

uint64_t sub_1007BD668(uint64_t a1, __int16 a2, uint64_t a3, __int16 a4)
{
  _BOOL4 v5;
  _BOOL4 v6;

  if ((a2 & 0x100) != 0)
  {
    v5 = (a3 | a4) == 0;
    if ((a4 & 0x100) != 0)
    {
      v6 = (a3 | a4) != 0;
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
    if (a1 | a2)
      return v6;
    else
      return v5;
  }
  else
  {
    if ((a4 & 0x100) == 0)
    {
      if ((a2 & 1) != 0)
        return ((uint64_t (*)(void))((char *)&loc_1007BD6EC + 4 * byte_100F0B6D0[a1]))();
      if ((a4 & 1) == 0 && a1 == a3)
        return 1;
    }
    return 0;
  }
}

uint64_t sub_1007BD7CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 - 1;
  result = 1;
  switch(v1)
  {
    case 0:
      result = 0;
      break;
    case 1:
      return result;
    case 2:
      result = 2;
      break;
    case 3:
      result = 3;
      break;
    case 4:
      result = 4;
      break;
    case 5:
      result = 5;
      break;
    case 6:
      result = 6;
      break;
    case 7:
      result = 7;
      break;
    case 8:
      result = 8;
      break;
    case 9:
      result = 9;
      break;
    case 10:
      result = 10;
      break;
    case 11:
      result = 11;
      break;
    case 98:
      result = 12;
      break;
    default:
      result = 13;
      break;
  }
  return result;
}

void sub_1007BD85C(uint64_t a1)
{
  char *v1;

  v1 = (char *)sub_1007BD898 + 4 * byte_100F0B73E[sub_1007BD7CC(a1)];
  __asm { BR              X11 }
}

uint64_t sub_1007BD898()
{
  return 0;
}

uint64_t initializeBufferWithCopyOfBuffer for CRLSerializableObjectType(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for CRLSerializableObjectType(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 10))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CRLSerializableObjectType(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_WORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 10) = v3;
  return result;
}

uint64_t sub_1007BD9E0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1007BD9FC(uint64_t result, int a2)
{
  if (a2)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    *(_BYTE *)(result + 9) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for CRLSerializableObjectType()
{
  return &type metadata for CRLSerializableObjectType;
}

uint64_t sub_1007BDA30(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x6472616F62 && a2 == 0xE500000000000000)
  {
    v5 = 0xE500000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6472616F62, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6574496472616F62 && a2 == 0xE90000000000006DLL)
  {
    v7 = 0xE90000000000006DLL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6574496472616F62, 0xE90000000000006DLL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x8000000100FC6830)
  {
    swift_bridgeObjectRelease(0x8000000100FC6830);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100FC6830, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1007BDB84(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  __n128 v27;
  __n128 v28;
  unint64_t v29;
  __n128 v30;
  unint64_t v31;
  char *v32;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45[2];
  char v46;

  v35 = sub_1004B804C(&qword_1013F2C48);
  v37 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v39 = (char *)&v35 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_1004B804C(&qword_1013F2C50);
  v38 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v40 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1004B804C(&qword_1013F2C58);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1004B804C(&qword_1013F2C60);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  v41 = a1;
  sub_1004BB5A4(a1, v12);
  v14 = sub_1007BDFE4();
  v15 = v42;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CRLSerializableObjectType.CodingKeys, &type metadata for CRLSerializableObjectType.CodingKeys, v14, v12, v13);
  if (!v15)
  {
    v42 = v4;
    v16 = v40;
    v17 = v9;
    v18 = KeyedDecodingContainer.allKeys.getter(v8);
    if (*(_QWORD *)(v18 + 16) == 1)
    {
      if (*(_BYTE *)(v18 + 32))
      {
        if (*(_BYTE *)(v18 + 32) == 1)
        {
          v45[0] = 1;
          v19 = sub_1007BE06C();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for CRLSerializableObjectType.BoardItemCodingKeys, v45, v8, &type metadata for CRLSerializableObjectType.BoardItemCodingKeys, v19);
          v20 = sub_1007BE0B0();
          v21 = v36;
          KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for CRLBoardItemType, v22, v36, &type metadata for CRLBoardItemType, v20);
          (*(void (**)(char *, uint64_t))(v38 + 8))(v16, v21);
          v23 = swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t, __n128))(v9 + 8))(v11, v8, v23);
          v7 = v43;
        }
        else
        {
          v46 = 2;
          v31 = sub_1007BE028();
          v32 = v39;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for CRLSerializableObjectType.PasteboardObjectCodingKeys, &v46, v8, &type metadata for CRLSerializableObjectType.PasteboardObjectCodingKeys, v31);
          (*(void (**)(char *, uint64_t))(v37 + 8))(v32, v35);
          v34 = swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t, __n128))(v9 + 8))(v11, v8, v34);
          v7 = 1;
        }
      }
      else
      {
        v44 = 0;
        v29 = sub_1007BE0F4();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for CRLSerializableObjectType.BoardCodingKeys, &v44, v8, &type metadata for CRLSerializableObjectType.BoardCodingKeys, v29);
        (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v7, v42);
        v30 = swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t, __n128))(v9 + 8))(v11, v8, v30);
        v7 = 0;
      }
    }
    else
    {
      v7 = type metadata accessor for DecodingError(0);
      swift_allocError(v7, &protocol witness table for DecodingError, 0, 0);
      v25 = v24;
      sub_1004B804C(&qword_1013DF800);
      *v25 = &type metadata for CRLSerializableObjectType;
      v26 = KeyedDecodingContainer.codingPath.getter(v8);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v26, 0xD00000000000002BLL, 0x8000000100FACD50, 0);
      v27.n128_f64[0] = (*(double (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v25, enum case for DecodingError.typeMismatch(_:), v7);
      swift_willThrow(v27);
      v28 = swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t, __n128))(v17 + 8))(v11, v8, v28);
    }
  }
  _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v41);
  return v7;
}

unint64_t sub_1007BDFE4()
{
  unint64_t result;

  result = qword_1013F2C68;
  if (!qword_1013F2C68)
  {
    result = swift_getWitnessTable(&unk_100F0BB4C, &type metadata for CRLSerializableObjectType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1013F2C68);
  }
  return result;
}

unint64_t sub_1007BE028()
{
  unint64_t result;

  result = qword_1013F2C70;
  if (!qword_1013F2C70)
  {
    result = swift_getWitnessTable(&unk_100F0BAFC, &type metadata for CRLSerializableObjectType.PasteboardObjectCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1013F2C70);
  }
  return result;
}

unint64_t sub_1007BE06C()
{
  unint64_t result;

  result = qword_1013F2C78;
  if (!qword_1013F2C78)
  {
    result = swift_getWitnessTable(&unk_100F0BAAC, &type metadata for CRLSerializableObjectType.BoardItemCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1013F2C78);
  }
  return result;
}

unint64_t sub_1007BE0B0()
{
  unint64_t result;

  result = qword_1013F2C80;
  if (!qword_1013F2C80)
  {
    result = swift_getWitnessTable(&unk_100F091EC, &type metadata for CRLBoardItemType);
    atomic_store(result, (unint64_t *)&qword_1013F2C80);
  }
  return result;
}

unint64_t sub_1007BE0F4()
{
  unint64_t result;

  result = qword_1013F2C88;
  if (!qword_1013F2C88)
  {
    result = swift_getWitnessTable(&unk_100F0BA5C, &type metadata for CRLSerializableObjectType.BoardCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1013F2C88);
  }
  return result;
}

unint64_t sub_1007BE138()
{
  unint64_t result;

  result = qword_1013F2CB0;
  if (!qword_1013F2CB0)
  {
    result = swift_getWitnessTable(&unk_100F091C4, &type metadata for CRLBoardItemType);
    atomic_store(result, (unint64_t *)&qword_1013F2CB0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CRLSerializableObjectType.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1007BE1C8 + 4 * byte_100F0B751[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1007BE1FC + 4 * byte_100F0B74C[v4]))();
}

uint64_t sub_1007BE1FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1007BE204(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1007BE20CLL);
  return result;
}

uint64_t sub_1007BE218(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1007BE220);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1007BE224(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1007BE22C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CRLSerializableObjectType.CodingKeys()
{
  return &type metadata for CRLSerializableObjectType.CodingKeys;
}

ValueMetadata *type metadata accessor for CRLSerializableObjectType.BoardCodingKeys()
{
  return &type metadata for CRLSerializableObjectType.BoardCodingKeys;
}

uint64_t storeEnumTagSinglePayload for CRLSerializableObjectType.BoardItemCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1007BE298 + 4 * byte_100F0B756[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1007BE2B8 + 4 * byte_100F0B75B[v4]))();
}

_BYTE *sub_1007BE298(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1007BE2B8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1007BE2C0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1007BE2C8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1007BE2D0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1007BE2D8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CRLSerializableObjectType.BoardItemCodingKeys()
{
  return &type metadata for CRLSerializableObjectType.BoardItemCodingKeys;
}

ValueMetadata *type metadata accessor for CRLSerializableObjectType.PasteboardObjectCodingKeys()
{
  return &type metadata for CRLSerializableObjectType.PasteboardObjectCodingKeys;
}

unint64_t sub_1007BE308()
{
  unint64_t result;

  result = qword_1013F2CB8;
  if (!qword_1013F2CB8)
  {
    result = swift_getWitnessTable(&unk_100F0B92C, &type metadata for CRLSerializableObjectType.BoardItemCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1013F2CB8);
  }
  return result;
}

unint64_t sub_1007BE350()
{
  unint64_t result;

  result = qword_1013F2CC0;
  if (!qword_1013F2CC0)
  {
    result = swift_getWitnessTable(&unk_100F0BA34, &type metadata for CRLSerializableObjectType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1013F2CC0);
  }
  return result;
}

unint64_t sub_1007BE398()
{
  unint64_t result;

  result = qword_1013F2CC8;
  if (!qword_1013F2CC8)
  {
    result = swift_getWitnessTable(&unk_100F0B954, &type metadata for CRLSerializableObjectType.BoardCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1013F2CC8);
  }
  return result;
}

unint64_t sub_1007BE3E0()
{
  unint64_t result;

  result = qword_1013F2CD0;
  if (!qword_1013F2CD0)
  {
    result = swift_getWitnessTable(&unk_100F0B97C, &type metadata for CRLSerializableObjectType.BoardCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1013F2CD0);
  }
  return result;
}

unint64_t sub_1007BE428()
{
  unint64_t result;

  result = qword_1013F2CD8;
  if (!qword_1013F2CD8)
  {
    result = swift_getWitnessTable(&unk_100F0B89C, &type metadata for CRLSerializableObjectType.BoardItemCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1013F2CD8);
  }
  return result;
}

unint64_t sub_1007BE470()
{
  unint64_t result;

  result = qword_1013F2CE0;
  if (!qword_1013F2CE0)
  {
    result = swift_getWitnessTable(&unk_100F0B8C4, &type metadata for CRLSerializableObjectType.BoardItemCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1013F2CE0);
  }
  return result;
}

unint64_t sub_1007BE4B8()
{
  unint64_t result;

  result = qword_1013F2CE8;
  if (!qword_1013F2CE8)
  {
    result = swift_getWitnessTable("U27", &type metadata for CRLSerializableObjectType.PasteboardObjectCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1013F2CE8);
  }
  return result;
}

unint64_t sub_1007BE500()
{
  unint64_t result;

  result = qword_1013F2CF0;
  if (!qword_1013F2CF0)
  {
    result = swift_getWitnessTable(&unk_100F0B874, &type metadata for CRLSerializableObjectType.PasteboardObjectCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1013F2CF0);
  }
  return result;
}

unint64_t sub_1007BE548()
{
  unint64_t result;

  result = qword_1013F2CF8;
  if (!qword_1013F2CF8)
  {
    result = swift_getWitnessTable(&unk_100F0B9A4, &type metadata for CRLSerializableObjectType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1013F2CF8);
  }
  return result;
}

unint64_t sub_1007BE590()
{
  unint64_t result;

  result = qword_1013F2D00;
  if (!qword_1013F2D00)
  {
    result = swift_getWitnessTable(&unk_100F0B9CC, &type metadata for CRLSerializableObjectType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1013F2D00);
  }
  return result;
}

uint64_t sub_1007BE5D4()
{
  uint64_t MetatypeMetadata;
  uint64_t v2;

  MetatypeMetadata = swift_getMetatypeMetadata();
  return String.init<A>(describing:)(&v2, MetatypeMetadata);
}

uint64_t type metadata accessor for CRLUnfairLock()
{
  return objc_opt_self(_TtC8Freeform13CRLUnfairLock);
}

uint64_t sub_1007BE628()
{
  uint64_t v0;

  swift_slowDealloc(*(_QWORD *)(v0 + 16), -1, -1);
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for CRLUnfairRecursiveLock()
{
  return objc_opt_self(_TtC8Freeform22CRLUnfairRecursiveLock);
}

uint64_t sub_1007BE674()
{
  uint64_t inited;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CKRecordID v11;
  Swift::String v12;
  _BYTE v13[72];

  if (objc_msgSend(v1, "aa_isAccountClass:", AAAccountClassPrimary))
  {
    v2 = objc_msgSend(v1, "aa_altDSID");
    if (v2)
    {
      v3 = v2;
      v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

      return v4;
    }
    goto LABEL_6;
  }
  v6 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v6, v13);
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  v2 = objc_msgSend(v1, "accountDescription");
  if (!v2)
  {
    __break(1u);
LABEL_6:
    __break(1u);
  }
  v7 = v2;
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v10 = v9;

  *(_QWORD *)(inited + 56) = &type metadata for String;
  *(_QWORD *)(inited + 64) = sub_1004CFC2C();
  *(_QWORD *)(inited + 32) = v8;
  *(_QWORD *)(inited + 40) = v10;
  sub_100757E04(&_mh_execute_header, (uint64_t)"crl_identifier", 14, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Sync/ACAccount_CRLAdditions.swift", 87, 2, 17, "No stable account identifier found for %{public}@", 49, 2u, inited);
  sub_100518FC0(inited, (uint64_t)"No stable account identifier found for %{public}@");
  sub_100519194(inited, (uint64_t)"crl_identifier", 14, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Sync/ACAccount_CRLAdditions.swift", 87, 2u, 17, (uint64_t)"No stable account identifier found for %{public}@", 49, 2u);
  SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v11, v12);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Freeform/CRLAssert.swift", 24, 2, 348, 0);
  __break(1u);
  return result;
}

void sub_1007BE83C(double a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  double v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  __objc2_prot *v12;
  __objc2_prot *v13;
  __objc2_prot *v14;

  v2 = a1;
  v3 = v1 + OBJC_IVAR____TtC8Freeform34CRLMiniFormatterStrokeDataProvider_strokeChangingState;
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC8Freeform34CRLMiniFormatterStrokeDataProvider_strokeChangingState + 8) != 1)
  {
LABEL_7:
    v8 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC8Freeform28CRLMiniFormatterDataProvider_editorController), "mostSpecificEditorConformingToProtocol:", &OBJC_PROTOCOL___CRLStrokeEditor, a1);
    if (v8)
    {
      v9 = v8;
      v14 = &OBJC_PROTOCOL___CRLStrokeEditor;
      v10 = (void *)swift_dynamicCastObjCProtocolConditional(v8, 1, &v14);
      if (v10)
        objc_msgSend(v10, "didChangeStrokeWidth:", v2);
      swift_unknownObjectRelease(v9);
    }
    *(double *)v3 = v2;
    *(_BYTE *)(v3 + 8) = 0;
    goto LABEL_12;
  }
  v4 = *(double *)v3;
  v5 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC8Freeform28CRLMiniFormatterDataProvider_editorController), "mostSpecificEditorConformingToProtocol:", &OBJC_PROTOCOL___CRLStrokeEditor);
  v6 = v5;
  if (v4 != 0.0)
  {
    if (v5)
    {
      v13 = &OBJC_PROTOCOL___CRLStrokeEditor;
      v7 = (void *)swift_dynamicCastObjCProtocolConditional(v5, 1, &v13);
      if (v7)
        objc_msgSend(v7, "beginChangingStrokeWidth:", v2);
      *(_QWORD *)&a1 = swift_unknownObjectRelease(v6).n128_u64[0];
    }
    goto LABEL_7;
  }
  if (v5)
  {
    v12 = &OBJC_PROTOCOL___CRLStrokeEditor;
    v11 = (void *)swift_dynamicCastObjCProtocolConditional(v5, 1, &v12);
    if (v11)
      objc_msgSend(v11, "applyStrokeWidth:", v2);
    swift_unknownObjectRelease(v6);
  }
LABEL_12:
  sub_1007BEDBC();
}

void sub_1007BE9A4(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  uint64_t v4;
  uint64_t v9;
  void *v10;
  double v11;
  __int16 v12;
  double v13;
  char v14;
  void *v15;
  id v16;
  double v17;
  double v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  void *v25;
  id v26;
  __objc2_prot *v27;

  v9 = sub_1007BF0F4();
  if (v9 != 1)
  {
    v10 = (void *)v9;
    v11 = COERCE_DOUBLE(sub_1007BF100());
    if ((v12 & 0xFF00) == 0x200)
    {
      sub_1004CB49C(v10);
    }
    else
    {
      v13 = v11;
      v14 = v12;
      if (v10)
      {
        v15 = v10;
      }
      else
      {
        if (a4)
          v16 = a4;
        else
          v16 = objc_msgSend((id)objc_opt_self(CRLColor), "blackColor");
        v15 = v16;
      }
      v17 = *(double *)&a2;
      if ((a3 & 1) != 0)
        v17 = 1.0;
      if ((v14 & 1) != 0)
        v18 = v17;
      else
        v18 = v13;
      v19 = (void *)objc_opt_self(CRLStroke);
      v20 = v10;
      v21 = objc_msgSend(v19, "strokeWithColor:width:pattern:", v15, a1, v18);
      v22 = objc_msgSend(*(id *)(v4 + OBJC_IVAR____TtC8Freeform28CRLMiniFormatterDataProvider_editorController), "mostSpecificEditorConformingToProtocol:", &OBJC_PROTOCOL___CRLStrokeEditor);
      if (v22)
      {
        v23 = v22;
        v27 = &OBJC_PROTOCOL___CRLStrokeEditor;
        v24 = swift_dynamicCastObjCProtocolConditional(v22, 1, &v27);
        if (v24)
        {
          v25 = (void *)v24;
          v26 = v21;
          objc_msgSend(v25, "applyStroke:", v26);

        }
        swift_unknownObjectRelease(v23);
      }
      sub_1007BEDBC();

      sub_1004CB49C(v10);
    }
  }
}

void sub_1007BEB78(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  uint64_t v5;
  uint64_t v9;
  void *v10;
  double v11;
  __int16 v12;
  double v13;
  char v14;
  void *v15;
  id v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  void *ObjCClassFromMetadata;
  id v22;
  NSString v23;
  id v24;
  uint64_t v25;
  void *v26;
  id v27;
  id v28;
  void *v29;
  __objc2_prot *v30;
  void *v31;
  _QWORD v32[4];

  v9 = sub_1007BF0F4();
  if (v9 != 1)
  {
    v10 = (void *)v9;
    v11 = COERCE_DOUBLE(sub_1007BF100());
    if ((v12 & 0xFF00) == 0x200)
    {
      sub_1004CB49C(v10);
    }
    else
    {
      v13 = v11;
      v14 = v12;
      if (v10)
      {
        v15 = v10;
      }
      else
      {
        if (a5)
          v16 = a5;
        else
          v16 = objc_msgSend((id)objc_opt_self(CRLColor), "blackColor");
        v15 = v16;
      }
      v17 = *(double *)&a3;
      if ((a4 & 1) != 0)
        v17 = 1.0;
      if ((v14 & 1) != 0)
        v18 = v17;
      else
        v18 = v13;
      v19 = sub_1004B8930(0, &qword_1013F2E98, off_1012297E8);
      ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v19, v20);
      v22 = v10;
      v23 = String._bridgeToObjectiveC()();
      v24 = objc_msgSend(ObjCClassFromMetadata, "strokeWithName:color:width:", v23, v15, v18);

      _bridgeAnyObjectToAny(_:)(v32, v24);
      swift_unknownObjectRelease(v24);
      v25 = sub_1004B8930(0, (unint64_t *)&qword_1013F2E90, off_1012299E0);
      if ((swift_dynamicCast(&v31, v32, (char *)&type metadata for Any + 8, v25, 6) & 1) != 0)
      {
        v26 = v31;
        v27 = objc_msgSend(*(id *)(v5 + OBJC_IVAR____TtC8Freeform28CRLMiniFormatterDataProvider_editorController), "mostSpecificEditorConformingToProtocol:", &OBJC_PROTOCOL___CRLStrokeEditor);
        if (v27)
        {
          v28 = v27;
          v30 = &OBJC_PROTOCOL___CRLStrokeEditor;
          v29 = (void *)swift_dynamicCastObjCProtocolConditional(v27, 1, &v30);
          if (v29)
            objc_msgSend(v29, "applyStroke:", v26);

          swift_unknownObjectRelease(v28);
        }
        else
        {

        }
      }
      sub_1007BEDBC();

      sub_1004CB49C(v10);
    }
  }
}

void sub_1007BEDBC()
{
  uint64_t v0;
  void *v1;
  char v2;
  void *v3;
  void *v4;
  NSString v5;
  id v6;

  v1 = (void *)sub_1007BEFB8();
  if (v1 != (void *)1)
  {
    v3 = v1;
    if ((v2 & 1) != 0)
    {
      sub_1004CB49C(v1);
    }
    else if (v1)
    {
      v4 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform28CRLMiniFormatterDataProvider_editorController);
      sub_1004CB968(v1);
      v6 = v3;
      v5 = String._bridgeToObjectiveC()();
      objc_msgSend(v4, "setObject:forInspectorPropertyKey:", v6, v5);

      sub_1004CB49C(v3);
      sub_1004CB49C(v3);

    }
  }
}

uint64_t sub_1007BEEAC()
{
  uint64_t v0;
  void *v1;
  NSString v2;
  id v3;
  uint64_t v4;
  uint64_t v6;
  _OWORD v7[2];
  _BYTE v8[24];
  uint64_t v9;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform28CRLMiniFormatterDataProvider_editorController);
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v1, "objectForInspectorPropertyKey:", v2);

  if (v3)
  {
    _bridgeAnyObjectToAny(_:)(v7, v3);
    swift_unknownObjectRelease(v3);
  }
  else
  {
    memset(v7, 0, sizeof(v7));
  }
  sub_1004D28A4((uint64_t)v7, (uint64_t)v8);
  if (v9)
  {
    v4 = sub_1004B8930(0, (unint64_t *)&qword_1013F2E90, off_1012299E0);
    if (swift_dynamicCast(&v6, v8, (char *)&type metadata for Any + 8, v4, 6))
      return v6;
    else
      return 0;
  }
  else
  {
    sub_1004D28EC((uint64_t)v8);
    return 0;
  }
}

uint64_t sub_1007BEFAC()
{
  return sub_1007BEFC4((void (*)(uint64_t *, _QWORD *, uint64_t, __n128))sub_100949650);
}

uint64_t sub_1007BEFB8()
{
  return sub_1007BEFC4((void (*)(uint64_t *, _QWORD *, uint64_t, __n128))sub_10094932C);
}

uint64_t sub_1007BEFC4(void (*a1)(uint64_t *, _QWORD *, uint64_t, __n128))
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  __n128 v15;
  uint64_t v17;

  v3 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform28CRLMiniFormatterDataProvider_editorController);
  v4 = sub_1004B8930(0, &qword_1013F2E88, off_1012299F0);
  v6 = objc_msgSend(v3, "mostSpecificCurrentEditorOfClass:", swift_getObjCClassFromMetadata(v4, v5));
  if (v6)
  {
    v7 = v6;
    v8 = objc_opt_self(CRLStyledEditor);
    v9 = (void *)swift_dynamicCastObjCClass(v7, v8);
    if (v9)
    {
      v10 = objc_msgSend(v9, "styledItems");
      swift_unknownObjectRelease(v7);
      if (v10)
      {
        v11 = type metadata accessor for CRLStyledItem(0);
        v12 = sub_100784888();
        v13 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v10, v11, v12);

        v14 = sub_1005FEE54(v13);
        v15 = swift_bridgeObjectRelease(v13);
        a1(&v17, v14, v1, v15);
        swift_release(v14);
        return v17;
      }
    }
    else
    {
      swift_unknownObjectRelease(v7);
    }
  }
  return 1;
}

uint64_t sub_1007BF0F4()
{
  return sub_1007BEFC4((void (*)(uint64_t *, _QWORD *, uint64_t, __n128))sub_100949310);
}

id sub_1007BF100()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id result;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC8Freeform34CRLMiniFormatterStrokeDataProvider_strokeChangingState + 8) & 1) == 0)
    return *(id *)(v0 + OBJC_IVAR____TtC8Freeform34CRLMiniFormatterStrokeDataProvider_strokeChangingState);
  v1 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform28CRLMiniFormatterDataProvider_editorController);
  v2 = sub_1004B8930(0, &qword_1013F2E88, off_1012299F0);
  result = objc_msgSend(v1, "mostSpecificCurrentEditorOfClass:", swift_getObjCClassFromMetadata(v2, v3));
  if (!result)
    return result;
  v5 = result;
  v6 = objc_opt_self(CRLStyledEditor);
  v7 = (void *)swift_dynamicCastObjCClass(v5, v6);
  if (v7)
  {
    v8 = objc_msgSend(v7, "styledItems");
    swift_unknownObjectRelease(v5);
    if (v8)
    {
      v9 = type metadata accessor for CRLStyledItem(0);
      v10 = sub_100784888();
      v11 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v8, v9, v10);

      v12 = sub_1005FEE54(v11);
      swift_bridgeObjectRelease();
      sub_1009499F0((uint64_t)&v13, (unint64_t)v12);
      swift_release(v12);
      return (id)v13;
    }
  }
  else
  {
    swift_unknownObjectRelease(v5);
  }
  return 0;
}

uint64_t sub_1007BF25C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjCClassFromMetadata;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform28CRLMiniFormatterDataProvider_editorController);
  v2 = sub_1004B8930(0, (unint64_t *)&qword_1013F2E80, off_1012299C0);
  if (v2)
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v2, v3);
  else
    ObjCClassFromMetadata = 0;
  v5 = objc_msgSend(v1, "mostSpecificCurrentEditorOfClass:", ObjCClassFromMetadata);
  v6 = objc_opt_self(CRLShapeEditor);
  v7 = (void *)swift_dynamicCastObjCClass(v5, v6);
  v8 = (uint64_t)v7;
  if (v7)
  {
    if ((objc_msgSend(v7, "infosAreLines") & 1) != 0)
      v8 = 1;
    else
      v8 = (uint64_t)objc_msgSend((id)v8, "infosAreConnectionLines");
  }
  swift_unknownObjectRelease(v5);
  return v8;
}

id sub_1007BF328()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CRLMiniFormatterStrokeDataProvider();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CRLMiniFormatterStrokeDataProvider()
{
  return objc_opt_self(_TtC8Freeform34CRLMiniFormatterStrokeDataProvider);
}

ValueMetadata *type metadata accessor for CRLMiniFormatterStrokeDataProvider.StrokeChangingState()
{
  return &type metadata for CRLMiniFormatterStrokeDataProvider.StrokeChangingState;
}

uint64_t sub_1007BF388()
{
  uint64_t v0;

  sub_1007BF910();
  v0 = swift_allocObject(&unk_10127EBD0, 24, 7);
  swift_unknownObjectWeakInit(v0 + 16);
  return UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(0, 0xE000000000000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_1007BF978, v0);
}

double sub_1007BF41C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  double result;
  void *v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjCClassFromMetadata;
  id v12;
  void *v13;
  char v14[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v14, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v5 = (void *)Strong;
    v6 = (char *)*(id *)(Strong + OBJC_IVAR____TtC8Freeform30CRLiOSMiniFormatterUSDZBuilder_usdzDataProvider);

    v7 = *(void **)&v6[OBJC_IVAR____TtC8Freeform28CRLMiniFormatterDataProvider_editorController];
    v8 = type metadata accessor for CRLUSDZEditor();
    v10 = v8;
    if (v8)
      ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v8, v9);
    else
      ObjCClassFromMetadata = 0;
    v12 = objc_msgSend(v7, "mostSpecificCurrentEditorOfClass:", ObjCClassFromMetadata);
    v13 = (void *)swift_dynamicCastClass(v12, v10);
    if (v13)
      objc_msgSend(v13, "showMediaReplaceUI:", v6);

    *(_QWORD *)&result = swift_unknownObjectRelease(v12).n128_u64[0];
  }
  return result;
}

uint64_t sub_1007BF4FC()
{
  id v0;
  NSString v1;
  NSString v2;
  id v3;
  uint64_t v4;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v1 = String._bridgeToObjectiveC()();
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v0, "localizedStringForKey:value:table:", v1, v2, 0);

  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  return v4;
}

uint64_t sub_1007BF5C0()
{
  uint64_t v0;

  sub_1007BF910();
  v0 = swift_allocObject(&unk_10127EBD0, 24, 7);
  swift_unknownObjectWeakInit(v0 + 16);
  return UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(0, 0xE000000000000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_1007BF970, v0);
}

double sub_1007BF654(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  double result;
  void *v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjCClassFromMetadata;
  id v12;
  _BYTE v13[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v13, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v5 = (void *)Strong;
    v6 = (char *)*(id *)(Strong + OBJC_IVAR____TtC8Freeform30CRLiOSMiniFormatterUSDZBuilder_usdzDataProvider);

    v7 = *(void **)&v6[OBJC_IVAR____TtC8Freeform28CRLMiniFormatterDataProvider_editorController];
    v8 = type metadata accessor for CRLUSDZEditor();
    v10 = v8;
    if (v8)
      ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v8, v9);
    else
      ObjCClassFromMetadata = 0;
    v12 = objc_msgSend(v7, "mostSpecificCurrentEditorOfClass:", ObjCClassFromMetadata);
    if (swift_dynamicCastClass(v12, v10))
      sub_1006EBEC8();

    *(_QWORD *)&result = swift_unknownObjectRelease(v12).n128_u64[0];
  }
  return result;
}

uint64_t sub_1007BF72C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjCClassFromMetadata;
  id v6;
  char v7;

  v1 = *(void **)(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Freeform30CRLiOSMiniFormatterUSDZBuilder_usdzDataProvider)
                + OBJC_IVAR____TtC8Freeform28CRLMiniFormatterDataProvider_editorController);
  v2 = type metadata accessor for CRLUSDZEditor();
  v4 = v2;
  if (v2)
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v2, v3);
  else
    ObjCClassFromMetadata = 0;
  v6 = objc_msgSend(v1, "mostSpecificCurrentEditorOfClass:", ObjCClassFromMetadata);
  if (swift_dynamicCastClass(v6, v4))
    v7 = sub_1006EBBB0();
  else
    v7 = 0;
  swift_unknownObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_1007BF7D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  char v7;
  void *v9;
  _BYTE v10[32];

  sub_1004CB6E8(a2, (uint64_t)v10);
  v4 = type metadata accessor for CRLUSDZItem(0);
  if ((swift_dynamicCast(&v9, v10, (char *)&type metadata for Any + 8, v4, 6) & 1) == 0)
    goto LABEL_5;
  v5 = v9;
  v6 = sub_100704150();
  if (!v6)
  {

LABEL_5:
    v7 = sub_100781048(a1, a2);
    return v7 & 1;
  }
  v7 = sub_100622190(v5, v6);

  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_1007BF8A0()
{
  uint64_t v0;

}

id sub_1007BF8B0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CRLiOSMiniFormatterUSDZBuilder();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CRLiOSMiniFormatterUSDZBuilder()
{
  return objc_opt_self(_TtC8Freeform30CRLiOSMiniFormatterUSDZBuilder);
}

unint64_t sub_1007BF910()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1013DFC20;
  if (!qword_1013DFC20)
  {
    v1 = objc_opt_self(UIAction);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1013DFC20);
  }
  return result;
}

uint64_t sub_1007BF94C()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

double sub_1007BF970(uint64_t a1)
{
  uint64_t v1;

  return sub_1007BF654(a1, v1);
}

double sub_1007BF978(uint64_t a1)
{
  uint64_t v1;

  return sub_1007BF41C(a1, v1);
}

id sub_1007BF980(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *a6)
{
  void *v6;
  char *v12;
  objc_class *v13;
  char *v14;
  id v15;
  char *v16;
  char *v17;
  id v18;
  objc_super v21;
  objc_super v22;

  v12 = (char *)objc_allocWithZone((Class)type metadata accessor for CRLMiniFormatterUSDZDataProvider());
  *(_QWORD *)&v12[OBJC_IVAR____TtC8Freeform28CRLMiniFormatterDataProvider_editorController] = a5;
  v13 = (objc_class *)type metadata accessor for CRLMiniFormatterDataProvider();
  v22.receiver = v12;
  v22.super_class = v13;
  v14 = v6;
  v15 = a5;
  *(_QWORD *)&v14[OBJC_IVAR____TtC8Freeform30CRLiOSMiniFormatterUSDZBuilder_usdzDataProvider] = objc_msgSendSuper2(&v22, "init");

  v16 = (char *)objc_allocWithZone((Class)type metadata accessor for CRLMiniFormatterMediaDataProvider());
  *(_QWORD *)&v16[OBJC_IVAR____TtC8Freeform28CRLMiniFormatterDataProvider_editorController] = v15;
  v21.receiver = v16;
  v21.super_class = v13;
  v17 = v14;
  v18 = v15;
  *(_QWORD *)&v17[OBJC_IVAR____TtC8Freeform31CRLiOSMiniFormatterMediaBuilder_mediaDataProvider] = objc_msgSendSuper2(&v21, "init");

  return sub_1004CA6E8(a1, a2, a3, a4, v18, a6);
}

uint64_t sub_1007BFAA4(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 120) = a1;
  return swift_task_switch(sub_1007BFABC, 0, 0);
}

uint64_t sub_1007BFABC()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0 + 2;
  v2 = (void *)v0[15];
  v0[2] = v0;
  v0[3] = sub_1007BFB48;
  v3 = swift_continuation_init(v0 + 2, 0);
  v0[10] = _NSConcreteStackBlock;
  v4 = v0 + 10;
  v4[1] = 0x40000000;
  v4[2] = sub_1005495C4;
  v4[3] = &unk_10127EC28;
  v4[4] = v3;
  objc_msgSend(v2, "importBoardItemsWithCompletionHandler:", v4);
  return swift_continuation_await(v1);
}

uint64_t sub_1007BFB48()
{
  return swift_task_switch(sub_1007BFB94, 0, 0);
}

uint64_t sub_1007BFB94()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  id v16;
  unint64_t v17;
  uint64_t *v18;
  __n128 v19;
  uint64_t v20;

  v1 = objc_msgSend(*(id *)(v0 + 120), "boardItems");
  v2 = type metadata accessor for CRLBoardItem(0);
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, v2);

  if ((unint64_t)v3 >> 62)
  {
    if (v3 < 0)
      v20 = v3;
    else
      v20 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    v4 = _CocoaArrayWrapper.endIndex.getter(v20);
    swift_bridgeObjectRelease(v3);
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  *(_QWORD *)&v5 = swift_bridgeObjectRelease(v3).n128_u64[0];
  v6 = *(void **)(v0 + 120);
  if (v4)
  {
    v7 = objc_msgSend(v6, "boardItems", v5);
    v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v2);

    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v8);
  }
  else
  {
    v10 = objc_msgSend(v6, "errors", v5);
    v11 = sub_1004B804C(&qword_1013E0210);
    v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v10, v11);

    v13 = *(_QWORD *)(v12 + 16);
    *(_QWORD *)&v14 = swift_bridgeObjectRelease(v12).n128_u64[0];
    if (v13)
    {
      v15 = 0;
    }
    else
    {
      v16 = objc_msgSend(*(id *)(v0 + 120), "errors", v14);
      v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v16, v11);

    }
    v17 = sub_1005CB368();
    swift_allocError(&type metadata for CRLAppIntentsBoardItemsImporterError, v17, 0, 0);
    *v18 = v15;
    swift_willThrow(v19);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1007BFD48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch(sub_1007BFD60, 0, 0);
}

uint64_t sub_1007BFD60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  Class isa;
  id v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  __n128 v14;

  v1 = *(_QWORD *)(v0 + 16);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0)
      v10 = *(_QWORD *)(v0 + 16);
    else
      v10 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 16));
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(v1);
    if (v11)
      goto LABEL_3;
  }
  else if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_3:
    v2 = *(_QWORD *)(v0 + 16);
    v3 = *(void **)(*(_QWORD *)(*sub_1004BB5A4(*(_QWORD **)(v0 + 24), *(_QWORD *)(*(_QWORD *)(v0 + 24) + 24))
                              + OBJC_IVAR____TtC8Freeform33CRLBoardLibraryHeadlessController_editingCoordinator)
                  + OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_boardItemFactory);
    v4 = objc_allocWithZone((Class)CRLMultipleItemImporter);
    type metadata accessor for CRLPreinsertionAssetWrapper(0);
    swift_bridgeObjectRetain(v2);
    v5 = v3;
    isa = Array._bridgeToObjectiveC()().super.isa;
    v7 = objc_msgSend(v4, "initWithDataWrappers:boardItemFactory:importAnimatedGIFsAsImages:", isa, v5, 0, swift_bridgeObjectRelease(v2).n128_f64[0]);
    *(_QWORD *)(v0 + 32) = v7;

    v8 = (_QWORD *)swift_task_alloc(dword_1013F2F3C);
    *(_QWORD *)(v0 + 40) = v8;
    *v8 = v0;
    v8[1] = sub_1007BFEF8;
    v8[15] = v7;
    return swift_task_switch(sub_1007BFABC, 0, 0);
  }
  v12 = sub_1005CB368();
  swift_allocError(&type metadata for CRLAppIntentsBoardItemsImporterError, v12, 0, 0);
  *v13 = 0;
  swift_willThrow(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1007BFEF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 40);
  *(_QWORD *)(*v2 + 48) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_1007BFFA4;
  }
  else
  {
    *(_QWORD *)(v4 + 56) = a1;
    v6 = sub_1007BFF6C;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1007BFF6C()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 56));
}

uint64_t sub_1007BFFA4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1007BFFD8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2[2] = a1;
  v2[3] = a2;
  v3 = sub_1004B804C(&qword_1013E04D0);
  v2[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for URL(0);
  v2[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[6] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[7] = swift_task_alloc(v6);
  v2[8] = swift_task_alloc(v6);
  return swift_task_switch(sub_1007C006C, 0, 0);
}

uint64_t sub_1007C006C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  id v25;
  Class isa;
  id v27;
  _QWORD *v28;
  unint64_t v30;
  _QWORD *v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, uint64_t, __n128);
  double *v38;

  v1 = *(_QWORD *)(v0 + 16);
  v38 = _swiftEmptyArrayStorage;
  v2 = *(_QWORD *)(v1 + 16);
  v4 = swift_bridgeObjectRetain(v1);
  v5 = *(_QWORD *)(v0 + 48);
  if (v2)
  {
    v35 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    v36 = *(_QWORD *)(v0 + 48);
    v6 = v3 + v35;
    v7 = *(_QWORD *)(v5 + 72);
    v37 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v5 + 16);
    v8 = _swiftEmptyArrayStorage;
    while (1)
    {
      v9 = v7;
      v11 = *(_QWORD *)(v0 + 32);
      v10 = *(_QWORD *)(v0 + 40);
      v37(v11, v6, v10, v4);
      v12 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56);
      v12(v11, 0, 1, v10);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v11, 1, v10) == 1)
        break;
      v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 32);
      v14 = v13(*(char **)(v0 + 64), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
      v15 = URL.isFileURL.getter(v14);
      if ((v15 & 1) != 0)
      {
        sub_100757E04(&_mh_execute_header, (uint64_t)"importItems(from:controller:)", 29, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/AppIntents/Performers/Intents/CRLAppIntentsBoardItemsImporter.swift", 121, 2, 17, "File url backed assets must be imported using a CRLPreinsertionAssetWrapper", 75, 2u, (uint64_t)_swiftEmptyArrayStorage);
        sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"importItems(from:controller:)", 29, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/AppIntents/Performers/Intents/CRLAppIntentsBoardItemsImporter.swift", 121, 2u, 17, (uint64_t)"File url backed assets must be imported using a CRLPreinsertionAssetWrapper", 75, 2u);
      }
      if ((URL.isFileURL.getter(v15) & 1) != 0)
      {
        v5 = v36;
        (*(void (**)(_QWORD, _QWORD))(v36 + 8))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 40));
        v7 = v9;
      }
      else
      {
        v13(*(char **)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 40));
        if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
        {
          sub_1006009A8(0, *((_QWORD *)v8 + 2) + 1, 1);
          v8 = v38;
        }
        v7 = v9;
        v17 = *((_QWORD *)v8 + 2);
        v16 = *((_QWORD *)v8 + 3);
        if (v17 >= v16 >> 1)
        {
          sub_1006009A8(v16 > 1, v17 + 1, 1);
          v7 = v9;
          v8 = v38;
        }
        v18 = *(_QWORD *)(v0 + 56);
        v19 = *(_QWORD *)(v0 + 40);
        *((_QWORD *)v8 + 2) = v17 + 1;
        v13((char *)v8 + v35 + v17 * v7, v18, v19);
        v38 = v8;
        v5 = v36;
      }
      v6 += v7;
      if (!--v2)
        goto LABEL_15;
    }
  }
  else
  {
    v12 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56);
    v8 = _swiftEmptyArrayStorage;
LABEL_15:
    ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD, __n128))v12)(*(_QWORD *)(v0 + 32), 1, 1, *(_QWORD *)(v0 + 40), v4);
  }
  v20 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRelease();
  sub_1005534BC(v20);
  v21 = *((_QWORD *)v8 + 2);
  swift_release(v8);
  if (v21)
  {
    v22 = *(_QWORD *)(v0 + 16);
    v23 = *(void **)(*(_QWORD *)(*sub_1004BB5A4(*(_QWORD **)(v0 + 24), *(_QWORD *)(*(_QWORD *)(v0 + 24) + 24))
                               + OBJC_IVAR____TtC8Freeform33CRLBoardLibraryHeadlessController_editingCoordinator)
                   + OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_boardItemFactory);
    v24 = objc_allocWithZone((Class)CRLMultipleItemImporter);
    swift_bridgeObjectRetain(v22);
    v25 = v23;
    isa = Array._bridgeToObjectiveC()().super.isa;
    v27 = objc_msgSend(v24, "initWithURLs:boardItemFactory:", isa, v25, swift_bridgeObjectRelease().n128_f64[0]);
    *(_QWORD *)(v0 + 72) = v27;

    v28 = (_QWORD *)swift_task_alloc(dword_1013F2F3C);
    *(_QWORD *)(v0 + 80) = v28;
    *v28 = v0;
    v28[1] = sub_1007C0458;
    v28[15] = v27;
    return swift_task_switch(sub_1007BFABC, 0, 0);
  }
  else
  {
    v30 = sub_1005CB368();
    swift_allocError(&type metadata for CRLAppIntentsBoardItemsImporterError, v30, 0, 0);
    *v31 = 0;
    swift_willThrow(v32);
    v33 = *(_QWORD *)(v0 + 56);
    v34 = *(_QWORD *)(v0 + 32);
    swift_task_dealloc(*(_QWORD *)(v0 + 64));
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1007C0458(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 80);
  *(_QWORD *)(*v2 + 88) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_1007C052C;
  }
  else
  {
    *(_QWORD *)(v4 + 96) = a1;
    v6 = sub_1007C04CC;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1007C04CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 32);

  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 96));
}

uint64_t sub_1007C052C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 32);
  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

ValueMetadata *type metadata accessor for CRLAppIntentsBoardItemsImporter()
{
  return &type metadata for CRLAppIntentsBoardItemsImporter;
}

id sub_1007C05DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  objc_class *v3;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  objc_super v13;

  v7 = (char *)objc_allocWithZone(v3);
  v8 = &v7[OBJC_IVAR____TtC8Freeform23CRLCommandSetImageMedia_id];
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v8, a1, v9);
  *(_QWORD *)&v7[OBJC_IVAR____TtC8Freeform23CRLCommandSetImageMedia_imageData] = a2;
  *(_QWORD *)&v7[OBJC_IVAR____TtC8Freeform23CRLCommandSetImageMedia_thumbnailData] = a3;
  v13.receiver = v7;
  v13.super_class = v3;
  v11 = objc_msgSendSuper2(&v13, "init");
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, v9);
  return v11;
}

void sub_1007C08C0(void *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Class isa;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  CKRecordID v15;
  Swift::String v16;

  v5 = v3;
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v9 = objc_msgSend(a1, "getBoardItemForUUID:", isa);

  if (!v9)
    goto LABEL_7;
  v10 = type metadata accessor for CRLImageItem(0);
  v11 = swift_dynamicCastClass(v9, v10);
  if (!v11)
  {

LABEL_7:
    sub_100757E04(&_mh_execute_header, (uint64_t)"commit(with:transaction:undoable:)", 34, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLCommandSetImageMedia.swift", 94, 2, 29, "Unable to retrieve image item", 29, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_100518FC0((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"Unable to retrieve image item");
    sub_100519194((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"commit(with:transaction:undoable:)", 34, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLCommandSetImageMedia.swift", 94, 2u, 29, (uint64_t)"Unable to retrieve image item", 29, 2u);
    SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v15, v16);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Freeform/CRLAssert.swift", 24, 2, 348, 0);
    __break(1u);
    return;
  }
  v12 = v11;
  v13 = v9;
  sub_100DBEE64(v12, (uint64_t)&off_10127C5E0);

  if (v4)
  {

  }
  else
  {
    sub_1008CBD68(*(_QWORD *)(v5 + OBJC_IVAR____TtC8Freeform23CRLCommandSetImageMedia_imageData), *(_QWORD *)(v5 + OBJC_IVAR____TtC8Freeform23CRLCommandSetImageMedia_thumbnailData));
    v14 = v13;
    sub_100DB0D78(v12, (uint64_t)&off_10127C5E0, a3);

  }
}

void sub_1007C0AF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC8Freeform23CRLCommandSetImageMedia_id;
  v2 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

}

id sub_1007C0B4C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CRLCommandSetImageMedia(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1007C0BE0()
{
  return type metadata accessor for CRLCommandSetImageMedia(0);
}

uint64_t type metadata accessor for CRLCommandSetImageMedia(uint64_t a1)
{
  uint64_t result;

  result = qword_1013F2F70;
  if (!qword_1013F2F70)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CRLCommandSetImageMedia);
  return result;
}

uint64_t sub_1007C0C24(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[2] = "\b";
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 200);
    if (!result)
      return 0;
  }
  return result;
}

id sub_1007C0DA8(uint64_t a1, char a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  return sub_1007C0DE8(a1, a2);
}

id sub_1007C0DE8(uint64_t a1, char a2)
{
  char *v2;
  uint64_t *v5;
  void *v6;
  char *v7;
  id v8;
  NSString v9;
  NSString v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  objc_super v16;

  v5 = (uint64_t *)&v2[OBJC_IVAR____TtC8Freeform26CRLCommandDeleteBoardItems_actionString];
  v6 = (void *)objc_opt_self(NSBundle);
  v7 = v2;
  v8 = objc_msgSend(v6, "mainBundle");
  v9 = String._bridgeToObjectiveC()();
  v10 = String._bridgeToObjectiveC()();
  v11 = objc_msgSend(v8, "localizedStringForKey:value:table:", v9, v10, 0);

  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v14 = v13;

  *v5 = v12;
  v5[1] = v14;
  *(_QWORD *)&v7[OBJC_IVAR____TtC8Freeform26CRLCommandDeleteBoardItems_boardItems] = a1;
  v7[OBJC_IVAR____TtC8Freeform26CRLCommandDeleteBoardItems_canDeleteNewlyCreatedItems] = a2;

  v16.receiver = v7;
  v16.super_class = (Class)type metadata accessor for CRLCommandDeleteBoardItems();
  return objc_msgSendSuper2(&v16, "init");
}

void sub_1007C1094(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void (*v50)(__n128);
  __n128 v51;
  char v52;
  __n128 v53;
  char *v54;
  unint64_t v55;
  double *v56;
  char v57;
  id v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  unint64_t v63;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  int64_t v69;
  uint64_t v70;
  unint64_t v71;
  BOOL v72;
  int64_t v73;
  unint64_t v74;
  int64_t v75;
  uint64_t v76;
  id v77;
  unint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t *v83;
  _QWORD *v84;
  char *v85;
  char *v86;
  unint64_t v87;
  uint64_t v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t (*v97)(void);
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  _QWORD *v105;
  id v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void (*v112)(__n128);
  char *v113;
  __n128 v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  char *v121;
  id v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t (*v126)(void);
  uint64_t v127;
  __n128 v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  void *v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  __n128 v153;
  char *v154;
  __n128 v155;
  __n128 v156;
  void (*v157)(char *, uint64_t, uint64_t, uint64_t, __n128);
  void (*v158)(char *, char *, uint64_t);
  uint64_t v159;
  unint64_t v160;
  char v161;
  id v162;
  __n128 v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  id v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  void *v171;
  uint64_t v172;
  id v173;
  void *Strong;
  uint64_t v175;
  uint64_t inited;
  id v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  id v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  CKRecordID v186;
  uint64_t v187;
  uint64_t v189;
  id v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  int64_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  int64_t v200;
  unint64_t v201;
  uint64_t v202;
  unint64_t v203;
  char *v204;
  char *v205;
  uint64_t v206;
  char *v207;
  __int128 v208;
  char *v209;
  char *v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  int64_t v215;
  id v216;
  uint64_t v217;
  id v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  _QWORD *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  _QWORD v227[3];
  uint64_t v228;
  char v229[24];
  _QWORD v230[6];
  uint64_t v231;

  v214 = a2;
  v3 = sub_1004B804C((uint64_t *)&unk_1013E1A50);
  __chkstk_darwin(v3);
  v205 = (char *)&v194 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CRLBoardCRDTData(0);
  __chkstk_darwin(v5);
  v206 = (uint64_t)&v194 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v224 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v224 - 8);
  __chkstk_darwin(v224);
  i = (uint64_t)&v194 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v204 = (char *)&v194 - v11;
  __chkstk_darwin(v12);
  v210 = (char *)&v194 - v13;
  __chkstk_darwin(v14);
  v209 = (char *)&v194 - v15;
  __chkstk_darwin(v16);
  v207 = (char *)&v194 - v17;
  if (qword_1013DD8B8 == -1)
    goto LABEL_2;
  while (1)
  {
    swift_once(&qword_1013DD8B8, sub_100A06704);
LABEL_2:
    swift_beginAccess(&static OS_os_log.boardItemLifecycle, v229, 0, 0);
    v18 = (id)static OS_os_log.boardItemLifecycle;
    v20 = static os_log_type_t.default.getter(v19);
    sub_100A06EBC((uint64_t)v18, &_mh_execute_header, v20, "⭕ CRLCommandDeleteBoardItems commit() begin", 45, 0, (uint64_t)_swiftEmptyArrayStorage);

    v203 = sub_1008D6F3C((uint64_t)_swiftEmptyArrayStorage);
    v21 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform26CRLCommandDeleteBoardItems_boardItems);
    v221 = v7;
    if ((v21 & 0xC000000000000001) != 0)
    {
      v22 = v21 < 0 ? v21 : v21 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v21);
      v23 = __CocoaSet.makeIterator()(v22);
      v24 = type metadata accessor for CRLBoardItem(0);
      v25 = sub_10058528C();
      v26 = Set.Iterator.init(_cocoa:)(v230, v23, v24, v25);
      v21 = v230[0];
      v223 = (_QWORD *)v230[1];
      v27 = (id)v230[2];
      v28 = v230[3];
      v29 = v230[4];
    }
    else
    {
      v30 = -1 << *(_BYTE *)(v21 + 32);
      v31 = *(_QWORD *)(v21 + 56);
      v223 = (_QWORD *)(v21 + 56);
      v32 = ~v30;
      v33 = -v30;
      v34 = v33 < 64 ? ~(-1 << v33) : -1;
      v29 = v34 & v31;
      swift_bridgeObjectRetain(v21);
      v27 = (id)v32;
      v28 = 0;
    }
    v220 = v21 & 0x7FFFFFFFFFFFFFFFLL;
    v218 = v27;
    v222 = (char *)(((unint64_t)v27 + 64) >> 6);
    v219 = (char *)&type metadata for Swift.AnyObject + 8;
    v197 = v2;
    v198 = i;
    v35 = (uint64_t)v207;
    if (v21 < 0)
      break;
    while (v29)
    {
      v40 = (v29 - 1) & v29;
      v41 = __clz(__rbit64(v29)) | (v28 << 6);
      v7 = v28;
LABEL_31:
      i = (uint64_t)*(id *)(*(_QWORD *)(v21 + 48) + 8 * v41);
      if (!i)
        goto LABEL_48;
LABEL_32:
      v45 = (char *)objc_msgSend((id)i, "parentContainerItem", v39, v194);
      if (!v45)
        goto LABEL_152;
      v46 = v45;
      v47 = OBJC_IVAR____TtC8Freeform16CRLContainerItem__cachedUnorderedItemUUIDs;
      v48 = *(void **)&v45[OBJC_IVAR____TtC8Freeform16CRLContainerItem__cachedUnorderedItemUUIDs];
      if (!v48)
      {
        sub_100740DA4();
        v48 = *(void **)&v46[v47];
      }
      if (v48)
        v49 = v48;
      else
        v49 = &_swiftEmptySetSingleton;
      v50 = *(void (**)(__n128))((swift_isaMask & *(_QWORD *)i) + 0x88);
      v51 = swift_bridgeObjectRetain(v48);
      v50(v51);
      v52 = sub_10062158C(v35, (uint64_t)v49);
      v53 = swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t, __n128))(v221 + 8))(v35, v224, v53);
      if ((v52 & 1) == 0)
      {
        sub_100757E04(&_mh_execute_header, (uint64_t)"commit(with:transaction:undoable:)", 34, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCommands/CRLCommandDeleteBoardItems.swift", 98, 2, 36, "Board item being deleted should be a child of its parent container.", 67, 2u, (uint64_t)_swiftEmptyArrayStorage);
        sub_100518FC0((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"Board item being deleted should be a child of its parent container.");
        sub_100519194((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"commit(with:transaction:undoable:)", 34, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCommands/CRLCommandDeleteBoardItems.swift", 98, 2u, 36, (uint64_t)"Board item being deleted should be a child of its parent container.", 67, 2u);
        goto LABEL_156;
      }
      if (*(_QWORD *)(v203 + 16))
      {
        v54 = v46;
        v55 = sub_10084393C((uint64_t)v54);
        v56 = _swiftEmptyArrayStorage;
        if ((v57 & 1) != 0)
        {
          v56 = *(double **)(*(_QWORD *)(v203 + 56) + 8 * v55);
          swift_bridgeObjectRetain(v56);
        }

      }
      else
      {
        v56 = _swiftEmptyArrayStorage;
      }
      v227[0] = v56;
      v58 = (id)i;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v58);
      v60 = *(_QWORD *)((v227[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
      v59 = *(_QWORD *)((v227[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v60 >= v59 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v59 > 1, v60 + 1, 1);
      v61 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v60, v58);
      specialized Array._endMutation()(v61);
      i = v227[0];
      v62 = v46;
      v63 = v203;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v203);
      v231 = v63;
      v2 = (unint64_t)&v231;
      sub_100828188(i, v62, isUniquelyReferenced_nonNull_native);
      v203 = v231;

      swift_bridgeObjectRelease();
      v28 = v7;
      v29 = v40;
      if (v21 < 0)
        goto LABEL_12;
    }
    v42 = v28 + 1;
    if (!__OFADD__(v28, 1))
    {
      if (v42 >= (uint64_t)v222)
        goto LABEL_48;
      v43 = v223[v42];
      v7 = v28 + 1;
      if (!v43)
      {
        v7 = v28 + 2;
        if (v28 + 2 >= (uint64_t)v222)
          goto LABEL_48;
        v43 = v223[v7];
        if (!v43)
        {
          v7 = v28 + 3;
          if (v28 + 3 >= (uint64_t)v222)
            goto LABEL_48;
          v43 = v223[v7];
          if (!v43)
          {
            v7 = v28 + 4;
            if (v28 + 4 >= (uint64_t)v222)
              goto LABEL_48;
            v43 = v223[v7];
            if (!v43)
            {
              v44 = (char *)(v28 + 5);
              do
              {
                if (v222 == v44)
                  goto LABEL_48;
                v43 = v223[(_QWORD)v44++];
              }
              while (!v43);
              v7 = (uint64_t)(v44 - 1);
            }
          }
        }
      }
      v40 = (v43 - 1) & v43;
      v41 = __clz(__rbit64(v43)) + (v7 << 6);
      goto LABEL_31;
    }
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
  }
LABEL_12:
  v36 = __CocoaSet.Iterator.next()(v26);
  if (v36)
  {
    v37 = v36;
    v231 = v36;
    v38 = type metadata accessor for CRLBoardItem(0);
    swift_unknownObjectRetain(v37);
    swift_dynamicCast(v227, &v231, v219, v38, 7);
    i = v227[0];
    *(_QWORD *)&v39 = swift_unknownObjectRelease(v37).n128_u64[0];
    v7 = v28;
    v40 = v29;
    if (i)
      goto LABEL_32;
  }
LABEL_48:
  sub_1004D284C(v21);
  v2 = v203;
  v65 = *(_QWORD *)(v203 + 64);
  v194 = v203 + 64;
  v66 = 1 << *(_BYTE *)(v203 + 32);
  v67 = -1;
  if (v66 < 64)
    v67 = ~(-1 << v66);
  v68 = v67 & v65;
  v195 = (unint64_t)(v66 + 63) >> 6;
  v196 = OBJC_IVAR____TtC8Freeform26CRLCommandDeleteBoardItems_canDeleteNewlyCreatedItems;
  swift_bridgeObjectRetain_n(v203, 2);
  v69 = 0;
  v208 = xmmword_100F05060;
  v7 = (uint64_t)&type metadata for String;
  v70 = v221;
  if (v68)
  {
LABEL_51:
    v199 = (v68 - 1) & v68;
    v200 = v69;
    v71 = __clz(__rbit64(v68)) | (v69 << 6);
    goto LABEL_67;
  }
  while (1)
  {
    v72 = __OFADD__(v69, 1);
    v73 = v69 + 1;
    if (v72)
      goto LABEL_147;
    if (v73 >= v195)
      goto LABEL_142;
    v74 = *(_QWORD *)(v194 + 8 * v73);
    if (!v74)
    {
      v75 = v73 + 1;
      if (v73 + 1 >= v195)
        goto LABEL_142;
      v74 = *(_QWORD *)(v194 + 8 * v75);
      if (!v74)
      {
        v75 = v73 + 2;
        if (v73 + 2 >= v195)
          goto LABEL_142;
        v74 = *(_QWORD *)(v194 + 8 * v75);
        if (!v74)
        {
          v75 = v73 + 3;
          if (v73 + 3 >= v195)
            goto LABEL_142;
          v74 = *(_QWORD *)(v194 + 8 * v75);
          if (!v74)
          {
            v75 = v73 + 4;
            if (v73 + 4 >= v195)
              goto LABEL_142;
            v74 = *(_QWORD *)(v194 + 8 * v75);
            if (!v74)
            {
              v75 = v73 + 5;
              if (v73 + 5 >= v195)
              {
LABEL_142:
                swift_release(v2);
                swift_bridgeObjectRelease();
                goto LABEL_141;
              }
              v74 = *(_QWORD *)(v194 + 8 * v75);
              if (!v74)
              {
                while (1)
                {
                  v73 = v75 + 1;
                  if (__OFADD__(v75, 1))
                    break;
                  if (v73 >= v195)
                    goto LABEL_142;
                  v74 = *(_QWORD *)(v194 + 8 * v73);
                  ++v75;
                  if (v74)
                    goto LABEL_66;
                }
                __break(1u);
LABEL_150:

LABEL_151:
                __break(1u);
LABEL_152:
                Strong = (void *)swift_unknownObjectWeakLoadStrong(i + OBJC_IVAR____TtC8Freeform12CRLBoardItem__parentItem);
                v175 = sub_1004B804C((uint64_t *)&unk_1013E0180);
                if (Strong)
                {
                  inited = swift_initStackObject(v175, &v225);
                  *(_OWORD *)(inited + 16) = xmmword_100EF5A10;
                  v177 = objc_msgSend((id)i, "description");

                  v178 = static String._unconditionallyBridgeFromObjectiveC(_:)(v177);
                  v180 = v179;

                  *(_QWORD *)(inited + 56) = &type metadata for String;
                  v181 = sub_1004CFC2C();
                  *(_QWORD *)(inited + 64) = v181;
                  *(_QWORD *)(inited + 32) = v178;
                  *(_QWORD *)(inited + 40) = v180;
                  v182 = objc_msgSend(Strong, "description");

                  v183 = static String._unconditionallyBridgeFromObjectiveC(_:)(v182);
                  v185 = v184;

                  *(_QWORD *)(inited + 96) = &type metadata for String;
                  *(_QWORD *)(inited + 104) = v181;
                  *(_QWORD *)(inited + 72) = v183;
                  *(_QWORD *)(inited + 80) = v185;
                  sub_100757E04(&_mh_execute_header, (uint64_t)"commit(with:transaction:undoable:)", 34, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCommands/CRLCommandDeleteBoardItems.swift", 98, 2, 43, "Trying to delete a board item (%{public}@) which is not in a container (%{public}@).", 84, 2u, inited);
                  sub_100518FC0(inited, (uint64_t)"Trying to delete a board item (%{public}@) which is not in a container (%{public}@).");
                  sub_100519194(inited, (uint64_t)"commit(with:transaction:undoable:)", 34, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCommands/CRLCommandDeleteBoardItems.swift", 98, 2u, 43, (uint64_t)"Trying to delete a board item (%{public}@) which is not in a container (%{public}@).", 84, 2u);
                }
                else
                {
                  v189 = swift_initStackObject(v175, &v226);
                  *(_OWORD *)(v189 + 16) = xmmword_100EF5E40;
                  v190 = objc_msgSend((id)i, "description");

                  v191 = static String._unconditionallyBridgeFromObjectiveC(_:)(v190);
                  v193 = v192;

                  *(_QWORD *)(v189 + 56) = &type metadata for String;
                  *(_QWORD *)(v189 + 64) = sub_1004CFC2C();
                  *(_QWORD *)(v189 + 32) = v191;
                  *(_QWORD *)(v189 + 40) = v193;
                  sub_100757E04(&_mh_execute_header, (uint64_t)"commit(with:transaction:undoable:)", 34, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCommands/CRLCommandDeleteBoardItems.swift", 98, 2, 45, "Trying to delete a board item (%{public}@) which has no parent.", 63, 2u, v189);
                  sub_100518FC0(v189, (uint64_t)"Trying to delete a board item (%{public}@) which has no parent.");
                  sub_100519194(v189, (uint64_t)"commit(with:transaction:undoable:)", 34, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCommands/CRLCommandDeleteBoardItems.swift", 98, 2u, 45, (uint64_t)"Trying to delete a board item (%{public}@) which has no parent.", 63, 2u);
                }
LABEL_156:
                SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v186, *(Swift::String *)&v187);
                _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Freeform/CRLAssert.swift", 24, 2, 348, 0);
                __break(1u);
                return;
              }
            }
          }
        }
      }
      v73 = v75;
    }
LABEL_66:
    v199 = (v74 - 1) & v74;
    v200 = v73;
    v71 = __clz(__rbit64(v74)) + (v73 << 6);
LABEL_67:
    v76 = *(_QWORD *)(v2 + 16);
    v77 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * v71);
    if (!v76)
      goto LABEL_151;
    v68 = (unint64_t)v77;
    v78 = sub_10084393C(v68);
    if ((v79 & 1) == 0)
      goto LABEL_150;
    v80 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v78);
    swift_bridgeObjectRetain(v80);
    v215 = v68;

    v201 = (unint64_t)v80 >> 62;
    if ((unint64_t)v80 >> 62)
    {
      if (v80 < 0)
        v140 = v80;
      else
        v140 = v80 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v80);
      v81 = _CocoaArrayWrapper.endIndex.getter(v140);
      v220 = v80;
      if (!v81)
        goto LABEL_91;
LABEL_71:
      if (v81 >= 1)
      {
        v82 = 0;
        v211 = v80 & 0xC000000000000001;
        v212 = OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData;
        v213 = v81;
        while (1)
        {
          v219 = v82;
          if (v211)
            v92 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v82, v80);
          else
            v92 = *(id *)(v80 + 8 * (_QWORD)v82 + 32);
          v93 = v92;
          v94 = (void *)static OS_os_log.boardItemLifecycle;
          v95 = sub_1004B804C((uint64_t *)&unk_1013E0180);
          v96 = swift_initStackObject(v95, &v228);
          *(_OWORD *)(v96 + 16) = v208;
          v97 = *(uint64_t (**)(void))((swift_isaMask & *v93) + 0x88);
          v218 = v94;
          v98 = v209;
          v99 = v97();
          v100 = UUID.uuidString.getter(v99);
          v102 = v101;
          v222 = *(char **)(v70 + 8);
          ((void (*)(char *, uint64_t))v222)(v98, v224);
          *(_QWORD *)(v96 + 56) = v7;
          v103 = sub_1004CFC2C();
          *(_QWORD *)(v96 + 32) = v100;
          v217 = v96 + 32;
          *(_QWORD *)(v96 + 64) = v103;
          v104 = v103;
          v223 = (_QWORD *)v103;
          *(_QWORD *)(v96 + 40) = v102;
          v105 = v93;
          v106 = objc_msgSend(v105, "description");
          v107 = static String._unconditionallyBridgeFromObjectiveC(_:)(v106);
          v109 = v108;

          *(_QWORD *)(v96 + 96) = v7;
          *(_QWORD *)(v96 + 104) = v104;
          *(_QWORD *)(v96 + 72) = v107;
          *(_QWORD *)(v96 + 80) = v109;
          v110 = *(_QWORD *)(v215 + v212);
          v111 = v7;
          v112 = *(void (**)(__n128))(*(_QWORD *)v110 + 256);
          v113 = (char *)(id)v215;
          v114 = swift_retain(v110);
          v115 = v210;
          v112(v114);

          swift_release(v110);
          v117 = UUID.uuidString.getter(v116);
          v119 = v118;
          ((void (*)(char *, uint64_t))v222)(v115, v224);
          v120 = v223;
          *(_QWORD *)(v96 + 136) = v111;
          *(_QWORD *)(v96 + 144) = v120;
          *(_QWORD *)(v96 + 112) = v117;
          *(_QWORD *)(v96 + 120) = v119;
          v121 = v113;
          v122 = objc_msgSend(v121, "description");
          v123 = static String._unconditionallyBridgeFromObjectiveC(_:)(v122);
          v125 = v124;

          *(_QWORD *)(v96 + 176) = v111;
          *(_QWORD *)(v96 + 184) = v120;
          *(_QWORD *)(v96 + 152) = v123;
          *(_QWORD *)(v96 + 160) = v125;
          v126 = *(uint64_t (**)(void))((swift_isaMask & *v105) + 0x2E8);
          v216 = v105;
          v127 = v126();
          if (v127)
          {
            v129 = (void *)v127;
            v130 = *(_QWORD *)(v127 + OBJC_IVAR____TtC8Freeform8CRLBoard_data);
            v131 = v130 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
            swift_beginAccess(v130 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v227, 0, 0);
            v132 = v131;
            v133 = v206;
            sub_1004D48C8(v132, v206);
            swift_retain(v130);
            v134 = sub_1004B804C(&qword_1013E1A80);
            v135 = v207;
            CRRegister.wrappedValue.getter(v134);
            sub_1004D490C(v133);

            swift_release(v130);
            v137 = UUID.uuidString.getter(v136);
            v87 = v138;
            ((void (*)(char *, uint64_t))v222)(v135, v224);
            v83 = (uint64_t *)(v96 + 192);
            v139 = v223;
            *(_QWORD *)(v96 + 216) = v111;
            *(_QWORD *)(v96 + 224) = v139;
            v7 = v111;
            if (v87)
            {
              *v83 = v137;
              v80 = v220;
              v70 = v221;
              v86 = (char *)v213;
              v85 = v219;
              goto LABEL_75;
            }
            v70 = v221;
          }
          else
          {
            v83 = (uint64_t *)(v96 + 192);
            v84 = v223;
            *(_QWORD *)(v96 + 216) = v111;
            *(_QWORD *)(v96 + 224) = v84;
            v70 = v221;
            v7 = v111;
          }
          v85 = v219;
          v80 = v220;
          v86 = (char *)v213;
          *v83 = 7104878;
          v87 = 0xE300000000000000;
LABEL_75:
          v82 = v85 + 1;
          *(_QWORD *)(v96 + 200) = v87;
          v88 = static os_log_type_t.default.getter(v128);
          v89 = v218;
          sub_100A06EBC((uint64_t)v218, &_mh_execute_header, v88, "⭕ CRLCommandDeleteBoardItems commit() remove %{public}@%{public}@ from parent %{public}@%{public}@. Board: %{public}@", 119, 0, v96);
          swift_setDeallocating(v96);
          v90 = *(_QWORD *)(v96 + 16);
          v91 = sub_1004B804C(&qword_1013E0190);
          swift_arrayDestroy(v217, v90, v91);

          if (v86 == v82)
            goto LABEL_91;
        }
      }
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
      goto LABEL_146;
    }
    v81 = *(_QWORD *)((v80 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v80);
    v220 = v80;
    if (v81)
      goto LABEL_71;
LABEL_91:
    swift_bridgeObjectRelease();
    if (v201)
    {
      if (v80 < 0)
        v142 = v80;
      else
        v142 = v80 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v80);
      v141 = _CocoaArrayWrapper.endIndex.getter(v142);
      swift_bridgeObjectRelease();
    }
    else
    {
      v141 = *(_QWORD *)((v80 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    i = v198;
    v143 = v224;
    if (v141)
    {
      v231 = (uint64_t)_swiftEmptyArrayStorage;
      v2 = (unint64_t)&v231;
      sub_100600724(0, v141 & ~(v141 >> 63), 0);
      if (v141 < 0)
        goto LABEL_144;
      v144 = 0;
      v7 = v231;
      v223 = (_QWORD *)(v80 & 0xC000000000000001);
      do
      {
        if (v223)
          v145 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v144, v80);
        else
          v145 = *(id *)(v80 + 8 * v144 + 32);
        v146 = v145;
        (*(void (**)(void))((swift_isaMask & *v145) + 0x88))();

        v231 = v7;
        v148 = *(_QWORD *)(v7 + 16);
        v147 = *(_QWORD *)(v7 + 24);
        if (v148 >= v147 >> 1)
        {
          sub_100600724(v147 > 1, v148 + 1, 1);
          v7 = v231;
        }
        ++v144;
        *(_QWORD *)(v7 + 16) = v148 + 1;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v70 + 32))(v7+ ((*(unsigned __int8 *)(v70 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80))+ *(_QWORD *)(v70 + 72) * v148, i, v224);
        v80 = v220;
      }
      while (v141 != v144);
      swift_bridgeObjectRelease();
      v143 = v224;
    }
    else
    {
      swift_bridgeObjectRelease();
      v7 = (uint64_t)_swiftEmptyArrayStorage;
    }
    v149 = *(unsigned __int8 *)(v197 + v196);
    v150 = v202;
    sub_100DBEE64(v215, (uint64_t)&off_10127C5E0);
    v202 = v150;
    if (v150)
    {
      swift_bridgeObjectRelease();

      swift_release(v203);
      goto LABEL_140;
    }
    v231 = (uint64_t)_swiftEmptyArrayStorage;
    v151 = *(_QWORD *)(v7 + 16);
    if (v151)
    {
      v222 = (char *)OBJC_IVAR____TtC8Freeform16CRLContainerItem_items;
      v152 = v7 + ((*(unsigned __int8 *)(v70 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80));
      v153 = swift_bridgeObjectRetain(v7);
      v220 = *(_QWORD *)(v70 + 72);
      v223 = *(_QWORD **)(v70 + 16);
      v154 = v205;
      LODWORD(v219) = v149;
      ((void (*)(char *, unint64_t, uint64_t, __n128))v223)(v205, v152, v143, v153);
      while (1)
      {
        i = v221;
        v157 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v221 + 56);
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))v157)(v154, 0, 1, v143);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(i + 48))(v154, 1, v143) == 1)
          goto LABEL_123;
        v158 = *(void (**)(char *, char *, uint64_t))(i + 32);
        i = (uint64_t)v204;
        v158(v204, v154, v143);
        v159 = *(_QWORD *)&v222[v215];
        if (!*(_QWORD *)(v159 + 16))
          goto LABEL_112;
        swift_bridgeObjectRetain(*(_QWORD *)&v222[v215]);
        v160 = sub_100842EFC(i);
        if ((v161 & 1) == 0)
          break;
        v162 = *(id *)(*(_QWORD *)(v159 + 56) + 8 * v160);
        v163 = swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t, __n128))(v221 + 8))(i, v143, v163);
        i = (uint64_t)v162;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(i);
        v165 = *(_QWORD *)((v231 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v164 = *(_QWORD *)((v231 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v165 >= v164 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v164 > 1, v165 + 1, 1);
        v166 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v165, i);
        specialized Array._endMutation()(v166);

        v143 = v224;
        v149 = v219;
LABEL_113:
        v152 += v220;
        --v151;
        v154 = v205;
        if (!v151)
          goto LABEL_122;
        ((void (*)(char *, unint64_t, uint64_t, __n128))v223)(v205, v152, v143, v156);
      }
      v155 = swift_bridgeObjectRelease();
LABEL_112:
      (*(void (**)(uint64_t, uint64_t, __n128))(v221 + 8))(i, v143, v155);
      goto LABEL_113;
    }
    v156 = swift_bridgeObjectRetain(v7);
    v157 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v70 + 56);
    v154 = v205;
LABEL_122:
    v157(v154, 1, 1, v143, v156);
LABEL_123:
    swift_bridgeObjectRelease();
    v167 = (id)v215;
    v168 = v202;
    sub_100745B54(v7);
    if (v168)
      break;
    v2 = v231;
    if ((unint64_t)v231 >> 62)
    {
      if (v231 < 0)
        v172 = v231;
      else
        v172 = v231 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v231);
      v169 = _CocoaArrayWrapper.endIndex.getter(v172);
      swift_bridgeObjectRelease();
      if (v169)
      {
LABEL_126:
        if (v169 < 1)
          goto LABEL_145;
        for (i = 0; i != v169; ++i)
        {
          if ((v2 & 0xC000000000000001) != 0)
            v170 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v2);
          else
            v170 = *(id *)(v2 + 8 * i + 32);
          v171 = v170;
          sub_100DBC500(v170, v149, 0, v214);

        }
      }
    }
    else
    {
      v169 = *(_QWORD *)((v231 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v169)
        goto LABEL_126;
    }
    swift_bridgeObjectRelease();
    v173 = (id)v215;
    sub_100DB0D78(v215, (uint64_t)&off_10127C5E0, 2u);
    v202 = 0;

    swift_bridgeObjectRelease();
    v2 = v203;
    v7 = (uint64_t)&type metadata for String;
    v68 = v199;
    v69 = v200;
    v70 = v221;
    if (v199)
      goto LABEL_51;
  }
  v202 = v168;
  swift_bridgeObjectRelease();

  swift_release(v203);
  swift_bridgeObjectRelease();
LABEL_140:
  swift_bridgeObjectRelease();
LABEL_141:
  swift_bridgeObjectRelease();
}

uint64_t sub_1007C24BC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Freeform26CRLCommandDeleteBoardItems_boardItems));
  return swift_bridgeObjectRelease(*(_QWORD *)(v0
                                             + OBJC_IVAR____TtC8Freeform26CRLCommandDeleteBoardItems_actionString
                                             + 8));
}

id sub_1007C24EC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CRLCommandDeleteBoardItems();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CRLCommandDeleteBoardItems()
{
  return objc_opt_self(_TtC8Freeform26CRLCommandDeleteBoardItems);
}

uint64_t sub_1007C2578()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(*v0 + OBJC_IVAR____TtC8Freeform26CRLCommandDeleteBoardItems_actionString);
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t sub_1007C267C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (*v7)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v1 = type metadata accessor for CRLBoardLibraryViewModel.Folder(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CRLBoardLibraryViewModel.Item(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1004B8460(v0 + OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_item, (uint64_t)v6, v7);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v6, v4);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1)
    {
      sub_1004B804C((uint64_t *)&unk_1013EA630);
      swift_bridgeObjectRelease();
      v10 = type metadata accessor for CRLBoardIdentifier;
      v11 = (uint64_t)v6;
      goto LABEL_7;
    }
    sub_1004B84E0((uint64_t)v6, (uint64_t)v3, type metadata accessor for CRLBoardLibraryViewModel.Folder);
    v9 = sub_1004B804C(&qword_1013E1790);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v3, 5, v9))
    {
      v10 = type metadata accessor for CRLBoardLibraryViewModel.Folder;
      v11 = (uint64_t)v3;
LABEL_7:
      sub_1004B84A4(v11, v10);
      return 1;
    }
    swift_bridgeObjectRelease();
    v13 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v3, v13);
  }
  else
  {
    sub_1004B84A4((uint64_t)v6, type metadata accessor for CRLBoardLibraryViewModel.Item);
  }
  return 0;
}

void sub_1007C2808(char a1, uint64_t (*a2)(id), uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v4 = a4;
  v6 = (unint64_t)a4 >> 62;
  if ((a1 & 1) != 0)
  {
    if (!v6)
    {
      v20 = *(_QWORD *)((a4 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(a4);
      if (v20)
        goto LABEL_33;
      goto LABEL_78;
    }
    if (a4 < 0)
      v35 = a4;
    else
      v35 = a4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a4);
    if (!_CocoaArrayWrapper.endIndex.getter(v35))
      goto LABEL_78;
    while (1)
    {
LABEL_33:
      v21 = (unint64_t)v4 >> 62;
      if ((unint64_t)v4 >> 62)
      {
        if (v4 < 0)
          v24 = v4;
        else
          v24 = v4 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v4);
        v25 = _CocoaArrayWrapper.endIndex.getter(v24);
        swift_bridgeObjectRelease(v4);
        if (!v25)
        {
LABEL_81:
          __break(1u);
          return;
        }
        swift_bridgeObjectRetain(v4);
        v26 = _CocoaArrayWrapper.endIndex.getter(v24);
        swift_bridgeObjectRelease(v4);
        if (!v26)
          goto LABEL_64;
      }
      else if (!*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_63;
      }
      if ((v4 & 0xC000000000000001) != 0)
      {
        v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v4);
        if (!v21)
          goto LABEL_38;
      }
      else
      {
        if (!*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_66;
        v22 = *(id *)(v4 + 32);
        if (!v21)
        {
LABEL_38:
          v23 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
          goto LABEL_50;
        }
      }
      if (v4 < 0)
        v27 = v4;
      else
        v27 = v4 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v4);
      v23 = _CocoaArrayWrapper.endIndex.getter(v27);
      swift_bridgeObjectRelease(v4);
LABEL_50:
      if (!v23)
        goto LABEL_68;
      sub_100CFE428(0, 1);
      if ((a2(v22) & 1) != 0)
      {
LABEL_60:
        v33 = a4;
        goto LABEL_79;
      }
      v28 = objc_msgSend(v22, "children");
      v29 = type metadata accessor for CRLBoardLibraryViewModelItemNode(0);
      v30 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v28, v29);

      sub_10061EABC(v30);
      v4 = a4;
      if ((unint64_t)a4 >> 62)
      {
        if (a4 < 0)
          v31 = a4;
        else
          v31 = a4 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(a4);
        v32 = _CocoaArrayWrapper.endIndex.getter(v31);
        swift_bridgeObjectRelease(a4);
        if (!v32)
          goto LABEL_78;
      }
      else if (!*(_QWORD *)((a4 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_78;
      }
    }
  }
  if (v6)
    goto LABEL_69;
  v7 = *(_QWORD *)((a4 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a4);
  if (v7)
  {
    while (1)
    {
      v8 = (unint64_t)v4 >> 62;
      if ((unint64_t)v4 >> 62)
      {
        if (v4 < 0)
          v11 = v4;
        else
          v11 = v4 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v4);
        v12 = _CocoaArrayWrapper.endIndex.getter(v11);
        swift_bridgeObjectRelease(v4);
        if (!v12)
        {
          __break(1u);
          goto LABEL_81;
        }
        swift_bridgeObjectRetain(v4);
        v13 = _CocoaArrayWrapper.endIndex.getter(v11);
        swift_bridgeObjectRelease(v4);
        if (!v13)
          goto LABEL_62;
      }
      else if (!*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
        goto LABEL_67;
      }
      if ((v4 & 0xC000000000000001) != 0)
      {
        v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v4);
        if (v8)
          goto LABEL_17;
      }
      else
      {
        if (!*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_65;
        v9 = *(id *)(v4 + 32);
        if (v8)
        {
LABEL_17:
          if (v4 < 0)
            v14 = v4;
          else
            v14 = v4 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v4);
          v10 = _CocoaArrayWrapper.endIndex.getter(v14);
          swift_bridgeObjectRelease(v4);
          goto LABEL_21;
        }
      }
      v10 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_21:
      if (v10)
      {
        sub_100CFE428(0, 1);
        if ((a2(v9) & 1) != 0)
          goto LABEL_60;
        v15 = objc_msgSend(v9, "children");
        v16 = type metadata accessor for CRLBoardLibraryViewModelItemNode(0);
        v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v15, v16);

        sub_100CFB824(0, 0, v17);
        v4 = a4;
        if ((unint64_t)a4 >> 62)
        {
          if (a4 < 0)
            v18 = a4;
          else
            v18 = a4 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(a4);
          v19 = _CocoaArrayWrapper.endIndex.getter(v18);
          swift_bridgeObjectRelease(a4);
          if (!v19)
            break;
        }
        else if (!*(_QWORD *)((a4 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          break;
        }
      }
      else
      {
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
LABEL_69:
        if (v4 < 0)
          v34 = v4;
        else
          v34 = v4 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v4);
        if (!_CocoaArrayWrapper.endIndex.getter(v34))
          break;
      }
    }
  }
LABEL_78:
  v33 = v4;
LABEL_79:
  swift_bridgeObjectRelease(v33);
}

uint64_t sub_1007C2C28(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;

  v3 = v1;
  v5 = sub_1004B804C(&qword_1013F3020);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_1004BB5A4(a1, v9);
  v11 = sub_1007C488C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CRLBoardLibraryViewModelItemNode.CodingKeys, &type metadata for CRLBoardLibraryViewModelItemNode.CodingKeys, v11, v9, v10);
  v12 = &v3[OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_item];
  v25 = 0;
  v13 = type metadata accessor for CRLBoardLibraryViewModel.Item(0);
  v14 = sub_1004B7878(&qword_1013F3028, type metadata accessor for CRLBoardLibraryViewModel.Item, (uint64_t)&unk_100F2A588);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v12, &v25, v5, v13, v14);
  if (!v2)
  {
    v16 = objc_msgSend(v3, "children");
    v17 = type metadata accessor for CRLBoardLibraryViewModelItemNode(0);
    v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v16, v17);

    v24 = v18;
    v23 = 1;
    v19 = sub_1004B804C(&qword_1013E7768);
    v20 = sub_1007C48D0(&qword_1013F3030, &qword_1013F3038, (uint64_t)&unk_100F0BD64, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v24, &v23, v5, v19, v20);
    v15 = swift_bridgeObjectRelease();
  }
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v6 + 8))(v8, v5, v15);
}

char *sub_1007C2DF8(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  objc_class *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  char v28;
  objc_super v29;
  uint64_t v30;

  v4 = type metadata accessor for CRLBoardLibraryViewModel.Item(0);
  __chkstk_darwin(v4);
  v24 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_1004B804C(&qword_1013F2FF8);
  v6 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_children] = _swiftEmptyArrayStorage;
  v10 = a1[3];
  v9 = a1[4];
  v27 = a1;
  sub_1004BB5A4(a1, v10);
  v11 = sub_1007C488C();
  v12 = v1;
  v25 = v8;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CRLBoardLibraryViewModelItemNode.CodingKeys, &type metadata for CRLBoardLibraryViewModelItemNode.CodingKeys, v11, v10, v9);
  if (v2)
  {

    _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v27);
    swift_bridgeObjectRelease();
    v17 = type metadata accessor for CRLBoardLibraryViewModelItemNode(0);
    swift_deallocPartialClassInstance(v12, v17, *(unsigned int *)((swift_isaMask & *(_QWORD *)v12) + 0x30), *(unsigned __int16 *)((swift_isaMask & *(_QWORD *)v12) + 0x34));
  }
  else
  {
    v23 = v6;
    LOBYTE(v30) = 0;
    v13 = sub_1004B7878(&qword_1013F3008, type metadata accessor for CRLBoardLibraryViewModel.Item, (uint64_t)&unk_100F2A5B0);
    v14 = (uint64_t)v24;
    v15 = v25;
    v16 = v26;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v4, &v30, v26, v4, v13);
    sub_1004B84E0(v14, (uint64_t)&v12[OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_item], type metadata accessor for CRLBoardLibraryViewModel.Item);

    v19 = (objc_class *)type metadata accessor for CRLBoardLibraryViewModelItemNode(0);
    v29.receiver = v12;
    v29.super_class = v19;
    v20 = objc_msgSendSuper2(&v29, "init");
    v21 = sub_1004B804C(&qword_1013E7768);
    v28 = 1;
    v22 = sub_1007C48D0(&qword_1013F3010, &qword_1013F3018, (uint64_t)&unk_100F0BD8C, (uint64_t)&protocol conformance descriptor for <A> [A]);
    v12 = (char *)v20;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v21, &v28, v16, v21, v22);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v15, v16);
    *(_QWORD *)&v12[OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_children] = v30;
    swift_bridgeObjectRelease();
    _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v27);

  }
  return v12;
}

uint64_t sub_1007C30FC(char *a1, char *a2)
{
  return sub_10083BE58(*a1, *a2);
}

Swift::Int sub_1007C3108()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x6E6572646C696863;
  else
    v2 = 1835365481;
  if (v1)
    v3 = 0xE800000000000000;
  else
    v3 = 0xE400000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1007C3180(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x6E6572646C696863;
  else
    v2 = 1835365481;
  if (*v1)
    v3 = 0xE800000000000000;
  else
    v3 = 0xE400000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_1007C31D4(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x6E6572646C696863;
  else
    v3 = 1835365481;
  if (v2)
    v4 = 0xE800000000000000;
  else
    v4 = 0xE400000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_1007C3248@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_101264EB0, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_1007C32A4(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 1835365481;
  if (*v1)
    v2 = 0x6E6572646C696863;
  v3 = 0xE400000000000000;
  if (*v1)
    v3 = 0xE800000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1007C32DC@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;
  char v7;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_101264EB0, v3);
  result = swift_bridgeObjectRelease(object);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

uint64_t sub_1007C333C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1007C488C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1007C3364(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1007C488C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1007C338C(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  id v6;
  unint64_t v7;
  unsigned __int8 v8;
  void *v10;
  _BYTE v11[24];
  uint64_t v12;

  sub_1004F370C(a1, (uint64_t)v11);
  if (!v12)
  {
    sub_1004D28EC((uint64_t)v11);
    goto LABEL_7;
  }
  v2 = type metadata accessor for CRLBoardLibraryViewModelItemNode(0);
  if ((swift_dynamicCast(&v10, v11, (char *)&type metadata for Any + 8, v2, 6) & 1) == 0)
  {
LABEL_7:
    v8 = 0;
    return v8 & 1;
  }
  v3 = v10;
  if ((sub_100BD121C((uint64_t)v1 + OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_item, (uint64_t)v10 + OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_item) & 1) == 0)
  {

    goto LABEL_7;
  }
  v4 = objc_msgSend(v1, "children");
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v2);

  v6 = objc_msgSend(v3, "children");
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v2);

  v8 = sub_100548BEC(v5, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

id sub_1007C354C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CRLBoardLibraryViewModelItemNode(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1007C35C0()
{
  return type metadata accessor for CRLBoardLibraryViewModelItemNode(0);
}

uint64_t type metadata accessor for CRLBoardLibraryViewModelItemNode(uint64_t a1)
{
  uint64_t result;

  result = qword_1013F2FE8;
  if (!qword_1013F2FE8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CRLBoardLibraryViewModelItemNode);
  return result;
}

uint64_t sub_1007C3604(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for CRLBoardLibraryViewModel.Item(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

char *sub_1007C367C@<X0>(_QWORD *a1@<X0>, char **a2@<X8>)
{
  uint64_t v2;
  id v5;
  char *result;

  v5 = objc_allocWithZone((Class)type metadata accessor for CRLBoardLibraryViewModelItemNode(0));
  result = sub_1007C2DF8(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1007C36D0(_QWORD *a1)
{
  return sub_1007C2C28(a1);
}

BOOL sub_1007C36F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  char *v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v9;

  v2 = type metadata accessor for CRLBoardLibraryViewModel.Item(0);
  v3 = type metadata accessor for CRLBoardLibraryViewModel.Item;
  __chkstk_darwin(v2);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1004B8460(a1 + OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_item, (uint64_t)v5, type metadata accessor for CRLBoardLibraryViewModel.Item);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v5, v2);
  if (EnumCaseMultiPayload == 2)
  {
    v7 = sub_1004B804C((uint64_t *)&unk_1013EA630);
    swift_bridgeObjectRelease(*(_QWORD *)&v5[*(int *)(v7 + 48) + 8]);
    v3 = type metadata accessor for CRLBoardIdentifier;
  }
  sub_1004B84A4((uint64_t)v5, v3);
  return EnumCaseMultiPayload != 2;
}

void sub_1007C37C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  void *v33;

  v2 = type metadata accessor for CRLBoardLibraryViewModel.Item(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CRLBoardIdentifier(0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v30 - v10;
  __chkstk_darwin(v9);
  v13 = (char *)&v30 - v12;
  v32 = a1;
  v33 = &_swiftEmptySetSingleton;
  if ((unint64_t)a1 >> 62)
    goto LABEL_37;
  v14 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  if (v14)
  {
    do
    {
      v31 = v4 + 8;
      while (1)
      {
        v15 = (unint64_t)a1 >> 62;
        if (!((unint64_t)a1 >> 62))
          break;
        if (a1 < 0)
          v18 = a1;
        else
          v18 = a1 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(a1);
        v30 = _CocoaArrayWrapper.endIndex.getter(v18);
        swift_bridgeObjectRelease(a1);
        if (!v30)
        {
          __break(1u);
          return;
        }
        swift_bridgeObjectRetain(a1);
        v19 = _CocoaArrayWrapper.endIndex.getter(v18);
        swift_bridgeObjectRelease(a1);
        if (!v19)
          goto LABEL_34;
LABEL_6:
        if ((a1 & 0xC000000000000001) != 0)
        {
          v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
          if (v15)
            goto LABEL_17;
        }
        else
        {
          if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_35;
          v16 = *(id *)(a1 + 32);
          if (v15)
          {
LABEL_17:
            if (a1 < 0)
              v20 = a1;
            else
              v20 = a1 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(a1);
            v17 = _CocoaArrayWrapper.endIndex.getter(v20);
            swift_bridgeObjectRelease(a1);
            goto LABEL_21;
          }
        }
        v17 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_21:
        if (!v17)
          goto LABEL_36;
        sub_100CFE428(0, 1);
        v21 = objc_msgSend(v16, "children");
        v22 = type metadata accessor for CRLBoardLibraryViewModelItemNode(0);
        v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v21, v22);

        sub_10061EABC(v23);
        sub_1004B8460((uint64_t)v16 + OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_item, (uint64_t)v4, type metadata accessor for CRLBoardLibraryViewModel.Item);
        if (swift_getEnumCaseMultiPayload(v4, v2) == 2)
        {
          v24 = sub_1004B804C((uint64_t *)&unk_1013EA630);
          swift_bridgeObjectRelease(*(_QWORD *)&v31[*(int *)(v24 + 48)]);
          sub_1004B84E0((uint64_t)v4, (uint64_t)v13, type metadata accessor for CRLBoardIdentifier);
          sub_1004B8460((uint64_t)v13, (uint64_t)v8, type metadata accessor for CRLBoardIdentifier);
          sub_100AD7844((uint64_t)v11, (uint64_t)v8);
          sub_1004B84A4((uint64_t)v11, type metadata accessor for CRLBoardIdentifier);
          v25 = (uint64_t)v13;
          v26 = type metadata accessor for CRLBoardIdentifier;
        }
        else
        {
          v25 = (uint64_t)v4;
          v26 = type metadata accessor for CRLBoardLibraryViewModel.Item;
        }
        sub_1004B84A4(v25, v26);

        a1 = v32;
        if ((unint64_t)v32 >> 62)
        {
          if (v32 < 0)
            v27 = v32;
          else
            v27 = v32 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v32);
          v28 = _CocoaArrayWrapper.endIndex.getter(v27);
          swift_bridgeObjectRelease(a1);
          if (!v28)
          {
LABEL_32:
            swift_bridgeObjectRelease(a1);
            return;
          }
        }
        else if (!*(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_32;
        }
      }
      if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_6;
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      if (a1 < 0)
        v29 = a1;
      else
        v29 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
    }
    while (_CocoaArrayWrapper.endIndex.getter(v29));
  }
  swift_bridgeObjectRelease(a1);
}

void sub_1007C3B58(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  uint64_t (*v29)(uint64_t);
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;

  v2 = type metadata accessor for CRLBoardLibraryViewModel.Item(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CRLBoardIdentifier(0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v34 - v9;
  v11 = sub_1008D62C4((uint64_t)_swiftEmptyArrayStorage);
  v12 = v11;
  v37 = a1;
  if ((unint64_t)a1 >> 62)
    goto LABEL_37;
  v13 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(a1);
  if (v13)
  {
    do
    {
      v35 = v12;
      while (1)
      {
        v14 = (unint64_t)a1 >> 62;
        if (!((unint64_t)a1 >> 62))
          break;
        if (a1 < 0)
          v17 = a1;
        else
          v17 = a1 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(a1);
        v18 = _CocoaArrayWrapper.endIndex.getter(v17);
        swift_bridgeObjectRelease(a1);
        if (!v18)
        {
          __break(1u);
          return;
        }
        swift_bridgeObjectRetain(a1);
        v19 = _CocoaArrayWrapper.endIndex.getter(v17);
        swift_bridgeObjectRelease(a1);
        if (!v19)
          goto LABEL_34;
LABEL_6:
        if ((a1 & 0xC000000000000001) != 0)
        {
          v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
          if (v14)
            goto LABEL_17;
        }
        else
        {
          if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_35;
          v15 = *(id *)(a1 + 32);
          if (v14)
          {
LABEL_17:
            if (a1 < 0)
              v20 = a1;
            else
              v20 = a1 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(a1);
            v16 = _CocoaArrayWrapper.endIndex.getter(v20);
            swift_bridgeObjectRelease(a1);
            goto LABEL_21;
          }
        }
        v16 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_21:
        if (!v16)
          goto LABEL_36;
        sub_100CFE428(0, 1);
        v21 = objc_msgSend(v15, "children");
        v22 = type metadata accessor for CRLBoardLibraryViewModelItemNode(0);
        v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v21, v22);

        sub_10061EABC(v23);
        sub_1004B8460((uint64_t)v15 + OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_item, (uint64_t)v4, type metadata accessor for CRLBoardLibraryViewModel.Item);
        if (swift_getEnumCaseMultiPayload(v4, v2) == 2)
        {
          v24 = (uint64_t *)&v4[*(int *)(sub_1004B804C((uint64_t *)&unk_1013EA630) + 48)];
          v26 = *v24;
          v25 = v24[1];
          sub_1004B84E0((uint64_t)v4, (uint64_t)v10, type metadata accessor for CRLBoardIdentifier);
          sub_1004B8460((uint64_t)v10, (uint64_t)v8, type metadata accessor for CRLBoardIdentifier);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v12);
          v36 = v12;
          sub_1008275A0(v26, v25, (uint64_t)v8, isUniquelyReferenced_nonNull_native);
          v12 = v36;
          swift_bridgeObjectRelease(0x8000000000000000);
          sub_1004B84A4((uint64_t)v8, type metadata accessor for CRLBoardIdentifier);
          v28 = (uint64_t)v10;
          v29 = type metadata accessor for CRLBoardIdentifier;
        }
        else
        {
          v28 = (uint64_t)v4;
          v29 = type metadata accessor for CRLBoardLibraryViewModel.Item;
        }
        sub_1004B84A4(v28, v29);

        a1 = v37;
        if ((unint64_t)v37 >> 62)
        {
          if (v37 < 0)
            v30 = v37;
          else
            v30 = v37 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v37);
          v31 = _CocoaArrayWrapper.endIndex.getter(v30);
          swift_bridgeObjectRelease(a1);
          if (!v31)
          {
LABEL_32:
            swift_bridgeObjectRelease(a1);
            v32 = v35;
            goto LABEL_42;
          }
        }
        else if (!*(_QWORD *)((v37 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_32;
        }
      }
      if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_6;
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      if (a1 < 0)
        v33 = a1;
      else
        v33 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRetain(a1);
    }
    while (_CocoaArrayWrapper.endIndex.getter(v33));
  }
  swift_bridgeObjectRelease(a1);
  v32 = v12;
LABEL_42:
  swift_bridgeObjectRelease(v32);
}

void sub_1007C3F00(char a1, unsigned __int8 a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v5 = a2;
  v6 = type metadata accessor for CRLBoardLibraryViewModel.Item(0);
  v7 = __chkstk_darwin(v6);
  v9 = (unsigned __int8 *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (unsigned __int8 *)&v39 - v10;
  v40 = a3;
  v12 = (unint64_t)a3 >> 62;
  if ((a1 & 1) == 0)
  {
    if (v12)
      goto LABEL_74;
    v13 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a3);
    if (v13)
    {
      while (1)
      {
        v14 = (unint64_t)a3 >> 62;
        if ((unint64_t)a3 >> 62)
        {
          if (a3 < 0)
            v17 = a3;
          else
            v17 = a3 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(a3);
          v18 = _CocoaArrayWrapper.endIndex.getter(v17);
          swift_bridgeObjectRelease(a3);
          if (!v18)
          {
            __break(1u);
            goto LABEL_85;
          }
          swift_bridgeObjectRetain(a3);
          v19 = _CocoaArrayWrapper.endIndex.getter(v17);
          swift_bridgeObjectRelease(a3);
          if (!v19)
            goto LABEL_67;
        }
        else if (!*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
LABEL_67:
          __break(1u);
LABEL_68:
          __break(1u);
LABEL_69:
          __break(1u);
LABEL_70:
          __break(1u);
LABEL_71:
          __break(1u);
          goto LABEL_72;
        }
        if ((a3 & 0xC000000000000001) != 0)
        {
          v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a3);
          if (v14)
            goto LABEL_17;
        }
        else
        {
          if (!*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_70;
          v15 = *(id *)(a3 + 32);
          if (v14)
          {
LABEL_17:
            if (a3 < 0)
              v20 = a3;
            else
              v20 = a3 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(a3);
            v16 = _CocoaArrayWrapper.endIndex.getter(v20);
            swift_bridgeObjectRelease(a3);
            goto LABEL_21;
          }
        }
        v16 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_21:
        if (v16)
        {
          sub_100CFE428(0, 1);
          sub_1004B8460((uint64_t)v15 + OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_item, (uint64_t)v11, type metadata accessor for CRLBoardLibraryViewModel.Item);
          if (swift_getEnumCaseMultiPayload(v11, v6))
          {
            sub_1004B84A4((uint64_t)v11, type metadata accessor for CRLBoardLibraryViewModel.Item);
          }
          else if (*v11 == v5)
          {
            goto LABEL_64;
          }
          v21 = objc_msgSend(v15, "children");
          v22 = type metadata accessor for CRLBoardLibraryViewModelItemNode(0);
          v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v21, v22);

          sub_100CFB824(0, 0, v23);
          a3 = v40;
          if ((unint64_t)v40 >> 62)
          {
            if (v40 < 0)
              v24 = v40;
            else
              v24 = v40 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(v40);
            v25 = _CocoaArrayWrapper.endIndex.getter(v24);
            swift_bridgeObjectRelease(a3);
            if (!v25)
              goto LABEL_83;
          }
          else if (!*(_QWORD *)((v40 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            goto LABEL_83;
          }
        }
        else
        {
LABEL_72:
          __break(1u);
LABEL_73:
          __break(1u);
LABEL_74:
          if (a3 < 0)
            v37 = a3;
          else
            v37 = a3 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(a3);
          if (!_CocoaArrayWrapper.endIndex.getter(v37))
            goto LABEL_83;
        }
      }
    }
    goto LABEL_83;
  }
  if (!v12)
  {
    v26 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a3);
    if (v26)
      goto LABEL_35;
    goto LABEL_83;
  }
  if (a3 < 0)
    v38 = a3;
  else
    v38 = a3 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a3);
  if (!_CocoaArrayWrapper.endIndex.getter(v38))
  {
LABEL_83:
    swift_bridgeObjectRelease(a3);
    return;
  }
LABEL_35:
  while (1)
  {
    v27 = (unint64_t)a3 >> 62;
    if ((unint64_t)a3 >> 62)
      break;
    if (!*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_68;
LABEL_37:
    if ((a3 & 0xC000000000000001) != 0)
    {
      v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a3);
      if (!v27)
        goto LABEL_40;
    }
    else
    {
      if (!*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_71;
      v28 = *(id *)(a3 + 32);
      if (!v27)
      {
LABEL_40:
        v11 = *(unsigned __int8 **)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_52;
      }
    }
    if (a3 < 0)
      v31 = a3;
    else
      v31 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = (unsigned __int8 *)_CocoaArrayWrapper.endIndex.getter(v31);
    swift_bridgeObjectRelease(a3);
LABEL_52:
    if (!v11)
      goto LABEL_73;
    sub_100CFE428(0, 1);
    sub_1004B8460((uint64_t)v28 + OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_item, (uint64_t)v9, type metadata accessor for CRLBoardLibraryViewModel.Item);
    if (swift_getEnumCaseMultiPayload(v9, v6))
    {
      sub_1004B84A4((uint64_t)v9, type metadata accessor for CRLBoardLibraryViewModel.Item);
    }
    else if (*v9 == v5)
    {
LABEL_64:
      v36 = v40;
      goto LABEL_65;
    }
    v32 = objc_msgSend(v28, "children");
    v33 = type metadata accessor for CRLBoardLibraryViewModelItemNode(0);
    v11 = (unsigned __int8 *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v32, v33);

    sub_10061EABC((uint64_t)v11);
    a3 = v40;
    if ((unint64_t)v40 >> 62)
    {
      if (v40 < 0)
        v34 = v40;
      else
        v34 = v40 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v40);
      v35 = _CocoaArrayWrapper.endIndex.getter(v34);
      swift_bridgeObjectRelease(a3);
      if (!v35)
      {
LABEL_63:
        v36 = a3;
LABEL_65:
        swift_bridgeObjectRelease(v36);
        return;
      }
    }
    else if (!*(_QWORD *)((v40 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_63;
    }
  }
  if (a3 < 0)
    v29 = a3;
  else
    v29 = a3 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a3);
  v11 = (unsigned __int8 *)_CocoaArrayWrapper.endIndex.getter(v29);
  swift_bridgeObjectRelease(a3);
  if (v11)
  {
    swift_bridgeObjectRetain(a3);
    v30 = _CocoaArrayWrapper.endIndex.getter(v29);
    swift_bridgeObjectRelease(a3);
    if (!v30)
      goto LABEL_69;
    goto LABEL_37;
  }
LABEL_85:
  __break(1u);
}

uint64_t sub_1007C43F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t (*v12)(_QWORD);
  char v13;
  uint64_t v15;

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CRLBoardLibraryViewModel.Folder(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CRLBoardLibraryViewModel.Item(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1004B8460(a1 + OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_item, (uint64_t)v11, v12);
  if (swift_getEnumCaseMultiPayload(v11, v9) == 1)
  {
    sub_1004B84E0((uint64_t)v11, (uint64_t)v8, type metadata accessor for CRLBoardLibraryViewModel.Folder);
    sub_100BCB904();
    v13 = static UUID.== infix(_:_:)(v5);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    sub_1004B84A4((uint64_t)v8, type metadata accessor for CRLBoardLibraryViewModel.Folder);
  }
  else
  {
    sub_1004B84A4((uint64_t)v11, type metadata accessor for CRLBoardLibraryViewModel.Item);
    v13 = 0;
  }
  return v13 & 1;
}

uint64_t sub_1007C4568(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t (*v10)(_QWORD);
  char v11;
  char v12;
  uint64_t v14;

  v4 = type metadata accessor for CRLBoardLibraryViewModel.Folder(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CRLBoardLibraryViewModel.Item(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1004B8460(a1 + OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_item, (uint64_t)v9, v10);
  if (swift_getEnumCaseMultiPayload(v9, v7) == 1)
  {
    sub_1004B84E0((uint64_t)v9, (uint64_t)v6, type metadata accessor for CRLBoardLibraryViewModel.Folder);
    sub_100BD0ED4((uint64_t)v6, a2);
    v12 = v11;
    sub_1004B84A4((uint64_t)v6, type metadata accessor for CRLBoardLibraryViewModel.Folder);
  }
  else
  {
    sub_1004B84A4((uint64_t)v9, type metadata accessor for CRLBoardLibraryViewModel.Item);
    v12 = 0;
  }
  return v12 & 1;
}

uint64_t sub_1007C4688(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t (*v16)(_QWORD);
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char v25;
  uint64_t v27;

  v4 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v27 - v8;
  __chkstk_darwin(v10);
  v12 = (char *)&v27 - v11;
  v13 = type metadata accessor for CRLBoardLibraryViewModel.Item(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1004B8460(a1 + OBJC_IVAR____TtC8Freeform32CRLBoardLibraryViewModelItemNode_item, (uint64_t)v15, v16);
  if (swift_getEnumCaseMultiPayload(v15, v13) == 2)
  {
    v17 = sub_1004B804C((uint64_t *)&unk_1013EA630);
    swift_bridgeObjectRelease(*(_QWORD *)&v15[*(int *)(v17 + 48) + 8]);
    sub_1004B84E0((uint64_t)v15, (uint64_t)v12, type metadata accessor for CRLBoardIdentifier);
    v18 = static UUID.== infix(_:_:)(v12);
    sub_1004B8460((uint64_t)v12, (uint64_t)v9, type metadata accessor for CRLBoardIdentifier);
    sub_1004B8460(a2, (uint64_t)v6, type metadata accessor for CRLBoardIdentifier);
    if ((v18 & 1) != 0)
    {
      v19 = *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20);
      v20 = *(_QWORD *)&v9[v19];
      v21 = *(_QWORD *)&v9[v19 + 8];
      v22 = &v6[v19];
      v23 = *((_QWORD *)v22 + 1);
      if (v20 == *(_QWORD *)v22 && v21 == v23)
        v25 = 1;
      else
        v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v21, *(_QWORD *)v22, v23, 0);
    }
    else
    {
      v25 = 0;
    }
    sub_1004B84A4((uint64_t)v6, type metadata accessor for CRLBoardIdentifier);
    sub_1004B84A4((uint64_t)v9, type metadata accessor for CRLBoardIdentifier);
    sub_1004B84A4((uint64_t)v12, type metadata accessor for CRLBoardIdentifier);
  }
  else
  {
    sub_1004B84A4((uint64_t)v15, type metadata accessor for CRLBoardLibraryViewModel.Item);
    v25 = 0;
  }
  return v25 & 1;
}

unint64_t sub_1007C488C()
{
  unint64_t result;

  result = qword_1013F3000;
  if (!qword_1013F3000)
  {
    result = swift_getWitnessTable(&unk_100F0BEB0, &type metadata for CRLBoardLibraryViewModelItemNode.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1013F3000);
  }
  return result;
}

uint64_t sub_1007C48D0(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v9 = sub_1004CB6A4(&qword_1013E7768);
    sub_1004B7878(a2, type metadata accessor for CRLBoardLibraryViewModelItemNode, a3);
    result = swift_getWitnessTable(a4, v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CRLBoardLibraryViewModelItemNode.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1007C49A0 + 4 * byte_100F0BD35[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1007C49D4 + 4 * byte_100F0BD30[v4]))();
}

uint64_t sub_1007C49D4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1007C49DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1007C49E4);
  return result;
}

uint64_t sub_1007C49F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1007C49F8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1007C49FC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1007C4A04(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CRLBoardLibraryViewModelItemNode.CodingKeys()
{
  return &type metadata for CRLBoardLibraryViewModelItemNode.CodingKeys;
}

unint64_t sub_1007C4A24()
{
  unint64_t result;

  result = qword_1013F3040;
  if (!qword_1013F3040)
  {
    result = swift_getWitnessTable(&unk_100F0BE88, &type metadata for CRLBoardLibraryViewModelItemNode.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1013F3040);
  }
  return result;
}

unint64_t sub_1007C4A6C()
{
  unint64_t result;

  result = qword_1013F3048;
  if (!qword_1013F3048)
  {
    result = swift_getWitnessTable(&unk_100F0BDC0, &type metadata for CRLBoardLibraryViewModelItemNode.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1013F3048);
  }
  return result;
}

unint64_t sub_1007C4AB4()
{
  unint64_t result;

  result = qword_1013F3050;
  if (!qword_1013F3050)
  {
    result = swift_getWitnessTable(&unk_100F0BDE8, &type metadata for CRLBoardLibraryViewModelItemNode.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1013F3050);
  }
  return result;
}

double destroy for CRLWPTextPresetData(uint64_t a1)
{
  int v2;
  double result;

  v2 = *(unsigned __int8 *)(a1 + 16);
  if (v2 != 255)
    sub_1004C4230(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), v2 & 1);
  if (*(_QWORD *)(a1 + 160))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t initializeWithCopy for CRLWPTextPresetData(uint64_t a1, uint64_t *a2)
{
  int v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v4 = *((unsigned __int8 *)a2 + 16);
  if (v4 == 255)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  }
  else
  {
    v5 = v4 & 1;
    v6 = *a2;
    v7 = a2[1];
    sub_1004C4914(*a2, v7, v4 & 1);
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = v5;
  }
  *(_DWORD *)(a1 + 20) = *((_DWORD *)a2 + 5);
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  *(_WORD *)(a1 + 25) = *(_WORD *)((char *)a2 + 25);
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  *(_QWORD *)(a1 + 48) = a2[6];
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  v8 = (_QWORD *)(a1 + 64);
  v9 = a2 + 8;
  v10 = a2[20];
  if (v10)
  {
    *v8 = *v9;
    *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
    *(_DWORD *)(a1 + 80) = *((_DWORD *)a2 + 20);
    *(_BYTE *)(a1 + 84) = *((_BYTE *)a2 + 84);
    *(_QWORD *)(a1 + 88) = a2[11];
    *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
    *(_QWORD *)(a1 + 100) = *(uint64_t *)((char *)a2 + 100);
    *(_DWORD *)(a1 + 108) = *((_DWORD *)a2 + 27);
    v11 = a2[14];
    *(_QWORD *)(a1 + 112) = v11;
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 15);
    v12 = a2[17];
    *(_QWORD *)(a1 + 136) = v12;
    *(_DWORD *)(a1 + 144) = *((_DWORD *)a2 + 36);
    v13 = a2[19];
    *(_QWORD *)(a1 + 152) = v13;
    *(_QWORD *)(a1 + 160) = v10;
    v14 = a2[21];
    *(_QWORD *)(a1 + 168) = v14;
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v14);
  }
  else
  {
    v15 = *((_OWORD *)a2 + 9);
    *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
    *(_OWORD *)(a1 + 144) = v15;
    *(_OWORD *)(a1 + 160) = *((_OWORD *)a2 + 10);
    v16 = *((_OWORD *)a2 + 5);
    *(_OWORD *)v8 = *(_OWORD *)v9;
    *(_OWORD *)(a1 + 80) = v16;
    v17 = *((_OWORD *)a2 + 7);
    *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
    *(_OWORD *)(a1 + 112) = v17;
  }
  *(_QWORD *)(a1 + 176) = a2[22];
  *(_BYTE *)(a1 + 184) = *((_BYTE *)a2 + 184);
  *(_QWORD *)(a1 + 192) = a2[24];
  *(_BYTE *)(a1 + 200) = *((_BYTE *)a2 + 200);
  *(_QWORD *)(a1 + 208) = a2[26];
  *(_BYTE *)(a1 + 216) = *((_BYTE *)a2 + 216);
  *(_BYTE *)(a1 + 232) = *((_BYTE *)a2 + 232);
  *(_QWORD *)(a1 + 224) = a2[28];
  v18 = a2[30];
  *(_QWORD *)(a1 + 240) = v18;
  swift_bridgeObjectRetain(v18);
  return a1;
}

uint64_t assignWithCopy for CRLWPTextPresetData(uint64_t a1, __int128 *a2)
{
  int v4;
  char v5;
  __int128 v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v4 = *((unsigned __int8 *)a2 + 16);
  if (*(unsigned __int8 *)(a1 + 16) == 255)
  {
    if (v4 == 255)
    {
      v6 = *a2;
      *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
      *(_OWORD *)a1 = v6;
    }
    else
    {
      v13 = v4 & 1;
      v14 = *(_QWORD *)a2;
      v15 = *((_QWORD *)a2 + 1);
      sub_1004C4914(*(_QWORD *)a2, v15, v4 & 1);
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v15;
      *(_BYTE *)(a1 + 16) = v13;
    }
  }
  else if (v4 == 255)
  {
    sub_1007C50AC(a1);
    v5 = *((_BYTE *)a2 + 16);
    *(_OWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 16) = v5;
  }
  else
  {
    v7 = v4 & 1;
    v8 = *(_QWORD *)a2;
    v9 = *((_QWORD *)a2 + 1);
    sub_1004C4914(*(_QWORD *)a2, v9, v4 & 1);
    v10 = *(_QWORD *)a1;
    v11 = *(_QWORD *)(a1 + 8);
    v12 = *(_BYTE *)(a1 + 16);
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v9;
    *(_BYTE *)(a1 + 16) = v7;
    sub_1004C4230(v10, v11, v12);
  }
  v16 = *((_DWORD *)a2 + 5);
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  *(_DWORD *)(a1 + 20) = v16;
  *(_BYTE *)(a1 + 25) = *((_BYTE *)a2 + 25);
  *(_BYTE *)(a1 + 26) = *((_BYTE *)a2 + 26);
  v17 = *((_QWORD *)a2 + 4);
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  *(_QWORD *)(a1 + 32) = v17;
  v18 = *((_QWORD *)a2 + 6);
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  *(_QWORD *)(a1 + 48) = v18;
  v19 = (_QWORD *)(a1 + 64);
  v20 = (uint64_t *)(a2 + 4);
  v21 = *((_QWORD *)a2 + 20);
  if (*(_QWORD *)(a1 + 160))
  {
    if (v21)
    {
      v22 = *v20;
      *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
      *v19 = v22;
      LODWORD(v22) = *((_DWORD *)a2 + 20);
      *(_BYTE *)(a1 + 84) = *((_BYTE *)a2 + 84);
      *(_DWORD *)(a1 + 80) = v22;
      v23 = *((_QWORD *)a2 + 11);
      *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
      *(_QWORD *)(a1 + 88) = v23;
      *(_DWORD *)(a1 + 100) = *((_DWORD *)a2 + 25);
      *(_DWORD *)(a1 + 104) = *((_DWORD *)a2 + 26);
      *(_DWORD *)(a1 + 108) = *((_DWORD *)a2 + 27);
      v24 = *((_QWORD *)a2 + 14);
      *(_QWORD *)(a1 + 112) = v24;
      swift_bridgeObjectRetain(v24);
      swift_bridgeObjectRelease();
      *(_DWORD *)(a1 + 120) = *((_DWORD *)a2 + 30);
      *(_DWORD *)(a1 + 124) = *((_DWORD *)a2 + 31);
      *(_DWORD *)(a1 + 128) = *((_DWORD *)a2 + 32);
      *(_DWORD *)(a1 + 132) = *((_DWORD *)a2 + 33);
      v25 = *((_QWORD *)a2 + 17);
      *(_QWORD *)(a1 + 136) = v25;
      swift_bridgeObjectRetain(v25);
      swift_bridgeObjectRelease();
      *(_DWORD *)(a1 + 144) = *((_DWORD *)a2 + 36);
      v26 = *((_QWORD *)a2 + 19);
      *(_QWORD *)(a1 + 152) = v26;
      swift_bridgeObjectRetain(v26);
      swift_bridgeObjectRelease();
      v27 = *((_QWORD *)a2 + 20);
      *(_QWORD *)(a1 + 160) = v27;
      swift_bridgeObjectRetain(v27);
      swift_bridgeObjectRelease();
      v28 = *((_QWORD *)a2 + 21);
      *(_QWORD *)(a1 + 168) = v28;
      swift_bridgeObjectRetain(v28);
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1007C50EC((_QWORD *)(a1 + 64));
      v37 = a2[5];
      v36 = a2[6];
      *(_OWORD *)v19 = *(_OWORD *)v20;
      *(_OWORD *)(a1 + 80) = v37;
      *(_OWORD *)(a1 + 96) = v36;
      v38 = a2[10];
      v40 = a2[7];
      v39 = a2[8];
      *(_OWORD *)(a1 + 144) = a2[9];
      *(_OWORD *)(a1 + 160) = v38;
      *(_OWORD *)(a1 + 112) = v40;
      *(_OWORD *)(a1 + 128) = v39;
    }
  }
  else if (v21)
  {
    v29 = *v20;
    *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
    *v19 = v29;
    LODWORD(v29) = *((_DWORD *)a2 + 20);
    *(_BYTE *)(a1 + 84) = *((_BYTE *)a2 + 84);
    *(_DWORD *)(a1 + 80) = v29;
    v30 = *((_QWORD *)a2 + 11);
    *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
    *(_QWORD *)(a1 + 88) = v30;
    *(_DWORD *)(a1 + 100) = *((_DWORD *)a2 + 25);
    *(_DWORD *)(a1 + 104) = *((_DWORD *)a2 + 26);
    *(_DWORD *)(a1 + 108) = *((_DWORD *)a2 + 27);
    v31 = *((_QWORD *)a2 + 14);
    *(_QWORD *)(a1 + 112) = v31;
    *(_DWORD *)(a1 + 120) = *((_DWORD *)a2 + 30);
    *(_DWORD *)(a1 + 124) = *((_DWORD *)a2 + 31);
    *(_DWORD *)(a1 + 128) = *((_DWORD *)a2 + 32);
    *(_DWORD *)(a1 + 132) = *((_DWORD *)a2 + 33);
    v32 = *((_QWORD *)a2 + 17);
    *(_QWORD *)(a1 + 136) = v32;
    *(_DWORD *)(a1 + 144) = *((_DWORD *)a2 + 36);
    v33 = *((_QWORD *)a2 + 19);
    *(_QWORD *)(a1 + 152) = v33;
    v34 = *((_QWORD *)a2 + 20);
    *(_QWORD *)(a1 + 160) = v34;
    v35 = *((_QWORD *)a2 + 21);
    *(_QWORD *)(a1 + 168) = v35;
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v34);
    swift_bridgeObjectRetain(v35);
  }
  else
  {
    v41 = *(_OWORD *)v20;
    v42 = a2[6];
    *(_OWORD *)(a1 + 80) = a2[5];
    *(_OWORD *)(a1 + 96) = v42;
    *(_OWORD *)v19 = v41;
    v43 = a2[7];
    v44 = a2[8];
    v45 = a2[10];
    *(_OWORD *)(a1 + 144) = a2[9];
    *(_OWORD *)(a1 + 160) = v45;
    *(_OWORD *)(a1 + 112) = v43;
    *(_OWORD *)(a1 + 128) = v44;
  }
  v46 = *((_QWORD *)a2 + 22);
  *(_BYTE *)(a1 + 184) = *((_BYTE *)a2 + 184);
  *(_QWORD *)(a1 + 176) = v46;
  v47 = *((_QWORD *)a2 + 24);
  *(_BYTE *)(a1 + 200) = *((_BYTE *)a2 + 200);
  *(_QWORD *)(a1 + 192) = v47;
  v48 = *((_QWORD *)a2 + 26);
  *(_BYTE *)(a1 + 216) = *((_BYTE *)a2 + 216);
  *(_QWORD *)(a1 + 208) = v48;
  v49 = *((_QWORD *)a2 + 28);
  *(_BYTE *)(a1 + 232) = *((_BYTE *)a2 + 232);
  *(_QWORD *)(a1 + 224) = v49;
  v50 = *((_QWORD *)a2 + 30);
  *(_QWORD *)(a1 + 240) = v50;
  swift_bridgeObjectRetain(v50);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1007C50AC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1004B804C(&qword_1013F3890);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *sub_1007C50EC(_QWORD *a1)
{
  destroy for CRLFillData(a1);
  return a1;
}

__n128 initializeWithTake for CRLWPTextPresetData(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __n128 result;
  __int128 v12;
  __int128 v13;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  v8 = a2[8];
  v9 = a2[9];
  v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  result = (__n128)a2[12];
  v12 = a2[13];
  v13 = a2[14];
  *(_QWORD *)(a1 + 240) = *((_QWORD *)a2 + 30);
  *(_OWORD *)(a1 + 208) = v12;
  *(_OWORD *)(a1 + 224) = v13;
  *(__n128 *)(a1 + 192) = result;
  return result;
}

uint64_t assignWithTake for CRLWPTextPresetData(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v4 = *(unsigned __int8 *)(a1 + 16);
  if (v4 == 255)
    goto LABEL_4;
  v5 = *(unsigned __int8 *)(a2 + 16);
  if (v5 == 255)
  {
    sub_1007C50AC(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    goto LABEL_6;
  }
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v5 & 1;
  sub_1004C4230(v6, v7, v4 & 1);
LABEL_6:
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v8 = (_OWORD *)(a1 + 64);
  v9 = (_OWORD *)(a2 + 64);
  if (!*(_QWORD *)(a1 + 160))
  {
LABEL_10:
    v11 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v11;
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    v12 = *(_OWORD *)(a2 + 80);
    *v8 = *v9;
    *(_OWORD *)(a1 + 80) = v12;
    v13 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v13;
    goto LABEL_11;
  }
  v10 = *(_QWORD *)(a2 + 160);
  if (!v10)
  {
    sub_1007C50EC((_QWORD *)(a1 + 64));
    goto LABEL_10;
  }
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 100) = *(_QWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 160) = v10;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_bridgeObjectRelease();
LABEL_11:
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CRLWPTextPresetData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 248))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 240);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CRLWPTextPresetData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 248) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 240) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 248) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CRLWPTextPresetData()
{
  return &type metadata for CRLWPTextPresetData;
}

uint64_t sub_1007C542C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1007C5464 + 4 * byte_100F0BF00[a1]))(0x6D614E746E6F665FLL, 0xE900000000000065);
}

uint64_t sub_1007C5464()
{
  return 0x7A6953746E6F665FLL;
}

uint64_t sub_1007C5478()
{
  return 0x646C6F625FLL;
}

uint64_t sub_1007C548C()
{
  return 0x63696C6174695FLL;
}

uint64_t sub_1007C54A4()
{
  return 0x696C7265646E755FLL;
}

uint64_t sub_1007C54C0()
{
  return 0x74656B697274735FLL;
}

uint64_t sub_1007C54E4()
{
  return 0x746361726168635FLL;
}

unint64_t sub_1007C5508()
{
  return 0xD000000000000013;
}

uint64_t sub_1007C5544()
{
  return 0x7974537473696C5FLL;
}

uint64_t sub_1007C5568()
{
  return 0x6174537473696C5FLL;
}

unint64_t sub_1007C5588()
{
  return 0xD000000000000010;
}

BOOL sub_1007C55A4(char *a1, char *a2)
{
  return qword_100F0C498[*a1] == qword_100F0C498[*a2];
}

Swift::Int sub_1007C55C8()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(qword_100F0C498[v1]);
  return Hasher._finalize()();
}

void sub_1007C5614()
{
  char *v0;

  Hasher._combine(_:)(qword_100F0C498[*v0]);
}

Swift::Int sub_1007C5648(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(qword_100F0C498[v2]);
  return Hasher._finalize()();
}

uint64_t sub_1007C5690@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1007C8D20(*a1);
  *a2 = result;
  return result;
}

void sub_1007C56B8(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_100F0C498[*v1];
}

uint64_t sub_1007C56D0()
{
  unsigned __int8 *v0;

  return sub_1007C542C(*v0);
}

uint64_t sub_1007C56D8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1007C8D44(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1007C56FC()
{
  char *v0;

  return qword_100F0C498[*v0];
}

uint64_t sub_1007C5714@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1007C8D20(a1);
  *a2 = result;
  return result;
}

void sub_1007C5738(_QWORD *a1@<X8>)
{
  *a1 = &off_101263F18;
}

uint64_t sub_1007C5748(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = sub_1007C7684();
  v5 = sub_1007C76CC();
  return static CodingKey<>.intCases.getter(a1, a2, v4, v5);
}

uint64_t sub_1007C578C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1007C76CC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1007C57B4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1007C76CC();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1007C57DC(uint64_t a1, id a2)
{
  uint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t KeyPath;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23[7];

  v3 = (uint64_t)objc_msgSend(a2, "characterCount");
  if (v3 < 0)
  {
    __break(1u);
LABEL_30:
    __break(1u);
    return;
  }
  sub_1007D7CB8(0, v3, v23);
  v4 = (char *)v23[4];
  v5 = (char *)v23[5];
  v6 = (char *)v23[3];

  __chkstk_darwin(v7);
  sub_100739574();
  KeyPath = swift_getKeyPath(&unk_100F0C3B0);
  swift_retain(a1);
  v9 = (_QWORD *)sub_100DC8E48(KeyPath, v6, v4, v5);
  v11 = v10;
  LOBYTE(v5) = v12;
  swift_release(KeyPath);

  if ((v5 & 1) == 0)
  {
    sub_10098B7E4((uint64_t)v9, v11);
    return;
  }
  sub_1004B804C(&qword_1013F30E0);
  v22 = a1;
  v13 = swift_getKeyPath(&unk_100F0C390);
  v21 = v13;
  v14 = dispatch thunk of static Equatable.== infix(_:_:)(&v22, &v21);
  swift_release(v13);
  if ((v14 & 1) == 0)
  {
    sub_1007395B8((uint64_t)v9, v11, 1);
    return;
  }
  v15 = v9[2];
  if (!v15)
    goto LABEL_30;
  v16 = v9 + 5;
  v20 = v9[5];
  v19 = v9[4];
  do
  {
    v17 = *(v16 - 1);
    v18 = *v16;
    if ((v17 != 0xD000000000000029 || v18 != 0x8000000100FAA6F0)
      && (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000029, 0x8000000100FAA6F0, *(v16 - 1), *v16, 0) & 1) == 0
      && (v17 != 0xD000000000000023 || v18 != 0x8000000100FAA720)
      && (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000023, 0x8000000100FAA720, v17, v18, 0) & 1) == 0
      && (v17 != 0xD000000000000024 || v18 != 0x8000000100FAA750)
      && (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000024, 0x8000000100FAA750, v17, v18, 0) & 1) == 0
      && (v17 != 0xD000000000000026 || v18 != 0x8000000100FAA780)
      && (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000026, 0x8000000100FAA780, v17, v18, 0) & 1) == 0
      && (v17 != 0xD000000000000025 || v18 != 0x8000000100FAA7B0)
      && (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000025, 0x8000000100FAA7B0, v17, v18, 0) & 1) == 0
      && (v17 != 0xD000000000000027 || v18 != 0x8000000100FAA7E0))
    {
      _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000027, 0x8000000100FAA7E0, v17, v18, 0);
    }
    v16 += 2;
    --v15;
  }
  while (v15);
  swift_bridgeObjectRetain(v20);
  sub_10098B7E4(v19, v20);
  sub_1007395B8((uint64_t)v9, v11, 1);
}

void sub_1007C5B88(uint64_t a1, id a2)
{
  uint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *KeyPath;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  id v16[6];

  v3 = (uint64_t)objc_msgSend(a2, "characterCount");
  if (v3 < 0)
  {
    __break(1u);
  }
  else
  {
    sub_1007D7CB8(0, v3, v16);
    v4 = (char *)v16[4];
    v5 = (char *)v16[5];
    v6 = (char *)v16[3];

    __chkstk_darwin(v7);
    sub_100739530();
    KeyPath = (char *)swift_getKeyPath(&unk_100F0C3B0);
    swift_retain(a1);
    v9 = sub_100DC8518(KeyPath, v6, v4, v5);
    LOBYTE(v4) = v10;
    swift_release(KeyPath);

    if ((v4 & 1) == 0)
    {
      v11 = 0;
LABEL_8:
      LOBYTE(v16[0]) = v11;
      return;
    }
    sub_1004B804C(&qword_1013F30E0);
    v15 = a1;
    v12 = swift_getKeyPath(&unk_100F0C390);
    v14 = v12;
    v13 = dispatch thunk of static Equatable.== infix(_:_:)(&v15, &v14);
    swift_release(v12);
    if ((v13 & 1) == 0)
    {
      v11 = 1;
      sub_10062E238(v9, 1);
      goto LABEL_8;
    }
    if (*(_QWORD *)(v9 + 16))
    {
      sub_10062E238(v9, 1);
      v11 = 0;
      goto LABEL_8;
    }
  }
  __break(1u);
}

void sub_1007C5D24(uint64_t a1, id a2, uint64_t a3, void (*a4)(uint64_t), uint64_t (*a5)(uint64_t, id, id, id, __n128))
{
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t KeyPath;
  __n128 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  id v22[6];

  v8 = (uint64_t)objc_msgSend(a2, "characterCount");
  if (v8 < 0)
  {
    __break(1u);
  }
  else
  {
    sub_1007D7CB8(0, v8, v22);
    v9 = v22[4];
    v10 = v22[5];
    v11 = v22[3];

    v13 = __chkstk_darwin(v12);
    a4(v13);
    KeyPath = swift_getKeyPath(&unk_100F0C3B0);
    v15 = swift_retain(a1);
    v16 = a5(KeyPath, v11, v9, v10, v15);
    LOBYTE(v9) = v17;
    swift_release(KeyPath);

    if ((v9 & 1) == 0)
      return;
    sub_1004B804C(&qword_1013F30E0);
    v21 = a1;
    v18 = swift_getKeyPath(&unk_100F0C390);
    v20 = v18;
    v19 = dispatch thunk of static Equatable.== infix(_:_:)(&v21, &v20);
    swift_release(v18);
    if ((v19 & 1) == 0 || *(_QWORD *)(v16 + 16))
    {
      sub_10062E238(v16, 1);
      return;
    }
  }
  __break(1u);
}

void sub_1007C5EB4(id a1@<X1>, uint64_t a2@<X0>, char *a3@<X8>)
{
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t KeyPath;
  id *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  const mach_header_64 *v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  id v20;
  unint64_t v21;
  id v22;
  void *v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  id v28;
  CGColor *v29;
  CGColorSpace *v30;
  CGColorSpaceModel Model;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t inited;
  int8x16_t v36;
  uint64_t *v37;
  char **v38;
  uint64_t *v39;
  uint64_t *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  id v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  const mach_header_64 *v55;
  char *v56;
  void *v57;
  char *v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  unint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  id v68[6];
  uint64_t v69;
  unsigned __int8 v70;
  unsigned int v71;
  unsigned __int8 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD v89[12];

  v5 = (uint64_t)objc_msgSend(a1, "characterCount");
  if (v5 < 0)
    goto LABEL_42;
  v58 = a3;
  sub_1007D7CB8(0, v5, v68);
  v6 = (char *)v68[4];
  v7 = (char *)v68[5];
  v8 = (char *)v68[3];

  __chkstk_darwin(v9);
  sub_1007393D0();
  KeyPath = swift_getKeyPath(&unk_100F0C3B0);
  swift_retain(a2);
  sub_100DC53E4(KeyPath, v8, v6, v7);
  v66 = (uint64_t)v11;
  LOBYTE(v6) = v12;
  swift_release(KeyPath);

  if ((v6 & 1) != 0)
  {
    sub_1004B804C(&qword_1013F30E0);
    v69 = a2;
    v17 = swift_getKeyPath(&unk_100F0C390);
    v89[0] = v17;
    v18 = dispatch thunk of static Equatable.== infix(_:_:)(&v69, v89);
    swift_release(v17);
    if ((v18 & 1) == 0)
    {
      sub_100739414((void *)v66, 1);
      *((_OWORD *)a3 + 5) = 0u;
      *((_OWORD *)a3 + 6) = 0u;
      *((_OWORD *)a3 + 3) = 0u;
      *((_OWORD *)a3 + 4) = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      *((_OWORD *)a3 + 2) = 0u;
      *(_OWORD *)a3 = 0u;
      return;
    }
    a3 = (char *)(v66 & 0xFFFFFFFFFFFFFF8);
    if ((unint64_t)v66 >> 62)
      goto LABEL_46;
    v19 = *(_QWORD *)((v66 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v66);
    if (!v19)
      goto LABEL_50;
LABEL_9:
    v64 = v66 & 0xC000000000000001;
    v59 = a3;
    if ((v66 & 0xC000000000000001) != 0)
    {
LABEL_51:
      v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v66);
    }
    else
    {
      if (!*((_QWORD *)a3 + 2))
      {
        __break(1u);
        return;
      }
      v20 = *(id *)(v66 + 32);
    }
    v57 = v20;
    sub_100739414((void *)v66, 1);
    swift_bridgeObjectRetain(v66);
    v21 = 0;
    v62 = v19;
    if (v64)
    {
LABEL_13:
      v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v21, v66);
      goto LABEL_16;
    }
    while (1)
    {
      if (v21 >= *((_QWORD *)v59 + 2))
      {
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        if (v66 >= 0)
          v56 = a3;
        else
          v56 = (char *)v66;
        swift_bridgeObjectRetain(v66);
        v19 = _CocoaArrayWrapper.endIndex.getter(v56);
        if (!v19)
        {
LABEL_50:
          sub_100739414((void *)v66, 1);
          __break(1u);
          goto LABEL_51;
        }
        goto LABEL_9;
      }
      v22 = *(id *)(v66 + 8 * v21 + 32);
LABEL_16:
      v23 = v22;
      v24 = v21 + 1;
      if (__OFADD__(v21, 1))
      {
        __break(1u);
        goto LABEL_41;
      }
      v25 = objc_opt_self(CRLColorFill);
      v26 = (void *)swift_dynamicCastObjCClass(v23, v25);
      v27 = v23;
      if (!v26)
        break;
      v28 = objc_msgSend(v26, "color");
      v29 = (CGColor *)objc_msgSend(v28, "CGColor");
      v30 = CGColorGetColorSpace(v29);

      if (!v30
        || (Model = CGColorSpaceGetModel(v30), v30, Model != kCGColorSpaceModelRGB)
        || (a3 = (char *)objc_msgSend(v28, "CGColor"),
            v32 = CGColorRef.components.getter(),
            a3,
            !v32))
      {
        sub_100757E04(&_mh_execute_header, (uint64_t)"init(archiving:)", 16, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLColorData.swift", 83, 2, 134, "Asked to archive a CGColor that we can't handle. Falling back to archiving black.", 81, 2u, (uint64_t)_swiftEmptyArrayStorage);
        v24 = v21 + 1;
        sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"init(archiving:)", 16, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLColorData.swift", 83, 2u, 134, (uint64_t)"Asked to archive a CGColor that we can't handle. Falling back to archiving black.", 81, 2u);
        v34 = sub_1004B804C(&qword_1013EC948);
        inited = swift_initStackObject(v34, &v67);
        *(_OWORD *)(inited + 16) = xmmword_100EF5E30;
        *(_QWORD *)(inited + 32) = 0;
        *(_QWORD *)(inited + 40) = 0;
        *(_QWORD *)(inited + 48) = 0;
        *(_QWORD *)(inited + 56) = 0x3FF0000000000000;
        sub_1006C5C58(inited, 0, (uint64_t)&v79, v36);
        swift_setDeallocating(inited);

        v37 = &v83;
        v39 = &v81;
        v38 = (char **)&v82;
        v40 = &v80;
        goto LABEL_31;
      }
      if ((unint64_t)objc_msgSend(v28, "colorRGBSpace") > 1)
      {
        a3 = "init(archiving:colorRGBSpace:)";
        sub_100757E04(&_mh_execute_header, (uint64_t)"init(archiving:colorRGBSpace:)", 30, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLColorData.swift", 83, 2, 152, "Color should be converted to RGB by the time it is archived. Falling back to archiving sRGB.", 92, 2u, (uint64_t)_swiftEmptyArrayStorage);
        sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"init(archiving:colorRGBSpace:)", 30, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLUtility/CRLColorData.swift", 83, 2u, 152, (uint64_t)"Color should be converted to RGB by the time it is archived. Falling back to archiving sRGB.", 92, 2u);
      }
      v33 = *(_QWORD *)(v32 + 16);
      if (!v33)
        goto LABEL_43;
      if (v33 == 1)
        goto LABEL_44;
      if (v33 < 3)
        goto LABEL_45;
      swift_bridgeObjectRelease_n(0, 2);
      swift_bridgeObjectRelease_n(&_swiftEmptyDictionarySingleton, 3);

      swift_bridgeObjectRelease(v32);
      if (v24 == v19)
        goto LABEL_37;
LABEL_33:
      ++v21;
      if (v64)
        goto LABEL_13;
    }
    sub_100757E04(&_mh_execute_header, (uint64_t)"init(archiving:)", 16, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLFillData.swift", 81, 2, 47, "Unsupported fill type for archiving. Falling back to archiving color fill.", 74, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"init(archiving:)", 16, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLFillData.swift", 81, 2u, 47, (uint64_t)"Unsupported fill type for archiving. Falling back to archiving color fill.", 74, 2u);
    v41 = objc_msgSend(v27, "referenceColor");
    if (v41)
    {
      sub_1006C5DE8(v41, (uint64_t)&v84);
      v28 = v27;
      v38 = (char **)&v87;
      v37 = &v88;
      v40 = &v85;
      v39 = &v86;
LABEL_31:

      v42 = *v37;
      a3 = *v38;
      v43 = *v39;
      v44 = *v40;

      swift_bridgeObjectRelease(&_swiftEmptyDictionarySingleton);
      swift_bridgeObjectRelease(v42);
      swift_bridgeObjectRelease(v44);
      swift_bridgeObjectRelease(v43);
      v45 = a3;
    }
    else
    {
      sub_100757E04(&_mh_execute_header, (uint64_t)"init(archiving:)", 16, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLFillData.swift", 81, 2, 52, "Missing fill reference color. Falling back to black color.", 58, 2u, (uint64_t)_swiftEmptyArrayStorage);
      sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"init(archiving:)", 16, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLFillData.swift", 81, 2u, 52, (uint64_t)"Missing fill reference color. Falling back to black color.", 58, 2u);
      v46 = objc_msgSend((id)objc_opt_self(CRLColor), "blackColor");
      sub_1006C5DE8(v46, (uint64_t)v89);
      v47 = v89[4];
      a3 = (char *)v89[7];
      v48 = (char *)v89[9];
      v49 = v89[10];
      swift_bridgeObjectRelease(&_swiftEmptyDictionarySingleton);
      swift_bridgeObjectRelease(v49);

      swift_bridgeObjectRelease(v47);
      swift_bridgeObjectRelease(a3);
      v45 = v48;
    }
    swift_bridgeObjectRelease(v45);
    v19 = v62;
    if (v24 == v62)
    {
LABEL_37:
      sub_100739414((void *)v66, 1);
      sub_100D3743C(v57, (uint64_t)&v69);
      v50 = v69;
      v51 = v70;
      v52 = v71;
      v53 = v72;
      v63 = v74;
      v65 = v73;
      v60 = v76;
      v61 = v75;
      v54 = v77;
      sub_100739414((void *)v66, 1);
      v55 = &_mh_execute_header;
      if (!v53)
        v55 = 0;
      *(_QWORD *)v58 = v50;
      *((_QWORD *)v58 + 1) = v51;
      *((_QWORD *)v58 + 2) = (unint64_t)v55 | v52;
      *(_OWORD *)(v58 + 24) = v65;
      *(_OWORD *)(v58 + 40) = v63;
      *(_OWORD *)(v58 + 56) = v61;
      *(_OWORD *)(v58 + 72) = v60;
      *((_QWORD *)v58 + 11) = v54;
      *((_OWORD *)v58 + 6) = v78;
      return;
    }
    goto LABEL_33;
  }
  sub_100D3743C((void *)v66, (uint64_t)&v69);
  v13 = v70;
  v14 = v77;
  v15 = &_mh_execute_header;
  if (!v72)
    v15 = 0;
  v16 = (unint64_t)v15 | v71;
  *(_QWORD *)a3 = v69;
  *((_QWORD *)a3 + 1) = v13;
  *((_QWORD *)a3 + 2) = v16;
  *(_OWORD *)(a3 + 24) = v73;
  *(_OWORD *)(a3 + 40) = v74;
  *(_OWORD *)(a3 + 56) = v75;
  *(_OWORD *)(a3 + 72) = v76;
  *((_QWORD *)a3 + 11) = v14;
  *((_OWORD *)a3 + 6) = v78;
}

void sub_1007C6788(uint64_t a1, id a2, uint64_t a3, void (*a4)(uint64_t), uint64_t (*a5)(uint64_t, id, id, id, __n128), void (*a6)(uint64_t, uint64_t, __n128))
{
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t KeyPath;
  __n128 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  __n128 v22;
  void (*v23)(uint64_t, uint64_t, __n128);
  uint64_t v24;
  uint64_t v25;
  id v26[6];

  v10 = (uint64_t)objc_msgSend(a2, "characterCount");
  if (v10 < 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  sub_1007D7CB8(0, v10, v26);
  v11 = v26[4];
  v12 = v26[5];
  v13 = v26[3];

  v15 = __chkstk_darwin(v14);
  a4(v15);
  KeyPath = swift_getKeyPath(&unk_100F0C3B0);
  v17 = swift_retain(a1);
  v18 = a5(KeyPath, v13, v11, v12, v17);
  LOBYTE(v11) = v19;
  swift_release(KeyPath);

  if ((v11 & 1) == 0)
    return;
  sub_1004B804C(&qword_1013F30E0);
  v25 = a1;
  v20 = swift_getKeyPath(&unk_100F0C390);
  v24 = v20;
  v21 = dispatch thunk of static Equatable.== infix(_:_:)(&v25, &v24);
  v22 = swift_release(v20);
  if ((v21 & 1) != 0)
  {
    v23 = a6;
    if (*(_QWORD *)(v18 + 16))
      goto LABEL_7;
LABEL_10:
    __break(1u);
    return;
  }
  v23 = a6;
LABEL_7:
  v23(v18, 1, v22);
}

void sub_1007C692C(uint64_t a1, id a2)
{
  uint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *KeyPath;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  id v15[6];

  v3 = (uint64_t)objc_msgSend(a2, "characterCount");
  if (v3 < 0)
  {
    __break(1u);
  }
  else
  {
    sub_1007D7CB8(0, v3, v15);
    v4 = (char *)v15[4];
    v5 = (char *)v15[5];
    v6 = (char *)v15[3];

    __chkstk_darwin(v7);
    sub_100739274();
    KeyPath = (char *)swift_getKeyPath(&unk_100F0C3B0);
    swift_retain(a1);
    v9 = sub_100DC3A48(KeyPath, v6, v4, v5);
    LOBYTE(v4) = v10;
    swift_release(KeyPath);

    if ((v4 & 1) == 0)
      return;
    sub_1004B804C(&qword_1013F30E0);
    v14 = a1;
    v11 = swift_getKeyPath(&unk_100F0C390);
    v13 = v11;
    v12 = dispatch thunk of static Equatable.== infix(_:_:)(&v14, &v13);
    swift_release(v11);
    if ((v12 & 1) == 0 || *(_QWORD *)(v9 + 16))
    {
      sub_10062E238(v9, 1);
      return;
    }
  }
  __break(1u);
}

void sub_1007C6ABC(uint64_t a1, id a2)
{
  uint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *KeyPath;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19[6];

  v3 = (uint64_t)objc_msgSend(a2, "characterCount");
  if (v3 < 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  sub_1007D7CB8(0, v3, v19);
  v4 = (char *)v19[4];
  v5 = (char *)v19[5];
  v6 = (char *)v19[3];

  __chkstk_darwin(v7);
  sub_1007370EC();
  KeyPath = (char *)swift_getKeyPath(&unk_100F0C3B0);
  swift_retain(a1);
  v9 = sub_100DC31DC(KeyPath, v6, v4, v5);
  LOBYTE(v5) = v10;
  swift_release(KeyPath);

  if ((v5 & 1) == 0)
    return;
  sub_1004B804C(&qword_1013F30E0);
  v18 = a1;
  v11 = swift_getKeyPath(&unk_100F0C390);
  v17 = v11;
  v12 = dispatch thunk of static Equatable.== infix(_:_:)(&v18, &v17);
  swift_release(v11);
  if ((v12 & 1) != 0)
  {
    v13 = *(_QWORD *)(v9 + 16);
    if (v13)
    {
      if (*(uint64_t *)(v9 + 32) <= 1)
      {
        v14 = v13 - 1;
        if (v14)
        {
          v15 = (uint64_t *)(v9 + 40);
          do
          {
            v16 = *v15++;
            if (v16 > 1)
              break;
            --v14;
          }
          while (v14);
        }
      }
      goto LABEL_10;
    }
LABEL_13:
    __break(1u);
    return;
  }
LABEL_10:
  sub_10062E238(v9, 1);
}

uint64_t sub_1007C6C74(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD v34[14];
  _BYTE v35[16];
  _BYTE v36[16];
  _BYTE v37[16];
  _BYTE v38[112];
  _BYTE v39[16];
  _BYTE v40[16];
  _BYTE v41[32];
  _BYTE v42[4];

  v3 = v1;
  v5 = sub_1004B804C(&qword_1013F3128);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_1004BB5A4(a1, v9);
  v11 = sub_1007C76CC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CRLWPTextPresetData.CodingKeys, &type metadata for CRLWPTextPresetData.CodingKeys, v11, v9, v10);
  sub_1004C4938(v3, (uint64_t)v41, (uint64_t *)&unk_1013F3E80);
  sub_1004C4938((uint64_t)v41, (uint64_t)v34, (uint64_t *)&unk_1013F3E80);
  v42[0] = 0;
  v12 = sub_1004B804C(&qword_1013F3890);
  v13 = sub_1007C9F9C();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v34, v42, v5, v12, v13);
  if (!v2)
  {
    v14 = *(unsigned int *)(v3 + 20);
    v15 = *(_BYTE *)(v3 + 24);
    LOBYTE(v34[0]) = 1;
    v42[0] = v15;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14 | ((unint64_t)v15 << 32), v34, v5);
    v16 = *(unsigned __int8 *)(v3 + 25);
    LOBYTE(v34[0]) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v34, v5);
    v17 = *(unsigned __int8 *)(v3 + 26);
    LOBYTE(v34[0]) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v34, v5);
    sub_1004C4938(v3 + 32, (uint64_t)v40, &qword_1013F30C0);
    sub_1004C4938((uint64_t)v40, (uint64_t)v34, &qword_1013F30C0);
    v42[0] = 4;
    v18 = sub_1004B804C(&qword_1013E8738);
    v19 = sub_1007CA000();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v34, v42, v5, v18, v19);
    sub_1004C4938(v3 + 48, (uint64_t)v39, (uint64_t *)&unk_1013F3E90);
    sub_1004C4938((uint64_t)v39, (uint64_t)v34, (uint64_t *)&unk_1013F3E90);
    v42[0] = 5;
    v20 = sub_1004B804C(&qword_1013F3800);
    v21 = sub_1007CA064();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v34, v42, v5, v20, v21);
    sub_1004C4938(v3 + 64, (uint64_t)v38, &qword_1013F3148);
    sub_1004C4938((uint64_t)v38, (uint64_t)v34, &qword_1013F3148);
    v42[0] = 6;
    v22 = sub_1007CA0C8();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v34, v42, v5, &type metadata for CRLFillData, v22);
    sub_1004C4938(v3 + 176, (uint64_t)v37, &qword_1013F30C8);
    sub_1004C4938((uint64_t)v37, (uint64_t)v34, &qword_1013F30C8);
    v42[0] = 7;
    v23 = sub_1004B804C(&qword_1013F3B10);
    v24 = sub_1007CA10C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v34, v42, v5, v23, v24);
    sub_1004C4938(v3 + 192, (uint64_t)v36, &qword_1013F30D0);
    sub_1004C4938((uint64_t)v36, (uint64_t)v34, &qword_1013F30D0);
    v42[0] = 8;
    v25 = sub_1004B804C(&qword_1013E8758);
    v26 = sub_1007CA170();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v34, v42, v5, v25, v26);
    sub_1004C4938(v3 + 208, (uint64_t)v35, &qword_1013F3EB0);
    sub_1004C4938((uint64_t)v35, (uint64_t)v34, &qword_1013F3EB0);
    v42[0] = 9;
    v27 = sub_1004B804C(&qword_1013E8708);
    v28 = sub_1007CA1D4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v34, v42, v5, v27, v28);
    v29 = *(_QWORD *)(v3 + 224);
    v30 = *(unsigned __int8 *)(v3 + 232);
    LOBYTE(v34[0]) = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v29, v30, v34, v5);
    v34[0] = *(_QWORD *)(v3 + 240);
    v42[0] = 11;
    v31 = sub_1004B804C((uint64_t *)&unk_1013F3CF0);
    v32 = sub_1004F31B4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v34, v42, v5, v31, v32);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1007C712C()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 240));
}

uint64_t sub_1007C7134(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 240));
  *(_QWORD *)(v1 + 240) = a1;
  return result;
}

Freeform::SyncEvent::FetchedRecordZoneChanges::Deletion (__swiftcall *sub_1007C715C())(CKRecordID recordID, Swift::String recordType)
{
  return SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:);
}

uint64_t sub_1007C716C(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD v17[15];
  uint64_t v18;
  _OWORD v19[15];
  uint64_t v20;

  v2 = *(_OWORD *)(a1 + 208);
  v17[12] = *(_OWORD *)(a1 + 192);
  v17[13] = v2;
  v17[14] = *(_OWORD *)(a1 + 224);
  v18 = *(_QWORD *)(a1 + 240);
  v3 = *(_OWORD *)(a1 + 144);
  v17[8] = *(_OWORD *)(a1 + 128);
  v17[9] = v3;
  v4 = *(_OWORD *)(a1 + 176);
  v17[10] = *(_OWORD *)(a1 + 160);
  v17[11] = v4;
  v5 = *(_OWORD *)(a1 + 80);
  v17[4] = *(_OWORD *)(a1 + 64);
  v17[5] = v5;
  v6 = *(_OWORD *)(a1 + 112);
  v17[6] = *(_OWORD *)(a1 + 96);
  v17[7] = v6;
  v7 = *(_OWORD *)(a1 + 16);
  v17[0] = *(_OWORD *)a1;
  v17[1] = v7;
  v8 = *(_OWORD *)(a1 + 48);
  v17[2] = *(_OWORD *)(a1 + 32);
  v17[3] = v8;
  v9 = *(_OWORD *)(a2 + 208);
  v19[12] = *(_OWORD *)(a2 + 192);
  v19[13] = v9;
  v19[14] = *(_OWORD *)(a2 + 224);
  v20 = *(_QWORD *)(a2 + 240);
  v10 = *(_OWORD *)(a2 + 144);
  v19[8] = *(_OWORD *)(a2 + 128);
  v19[9] = v10;
  v11 = *(_OWORD *)(a2 + 176);
  v19[10] = *(_OWORD *)(a2 + 160);
  v19[11] = v11;
  v12 = *(_OWORD *)(a2 + 80);
  v19[4] = *(_OWORD *)(a2 + 64);
  v19[5] = v12;
  v13 = *(_OWORD *)(a2 + 112);
  v19[6] = *(_OWORD *)(a2 + 96);
  v19[7] = v13;
  v14 = *(_OWORD *)(a2 + 16);
  v19[0] = *(_OWORD *)a2;
  v19[1] = v14;
  v15 = *(_OWORD *)(a2 + 48);
  v19[2] = *(_OWORD *)(a2 + 32);
  v19[3] = v15;
  return sub_1007C6C70(v17, v19) & 1;
}

double sub_1007C722C@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v12[2];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  sub_1007C9280(a1, (uint64_t)v12);
  if (!v2)
  {
    v5 = v24;
    *(_OWORD *)(a2 + 192) = v23;
    *(_OWORD *)(a2 + 208) = v5;
    *(_OWORD *)(a2 + 224) = v25;
    *(_QWORD *)(a2 + 240) = v26;
    v6 = v20;
    *(_OWORD *)(a2 + 128) = v19;
    *(_OWORD *)(a2 + 144) = v6;
    v7 = v22;
    *(_OWORD *)(a2 + 160) = v21;
    *(_OWORD *)(a2 + 176) = v7;
    v8 = v16;
    *(_OWORD *)(a2 + 64) = v15;
    *(_OWORD *)(a2 + 80) = v8;
    v9 = v18;
    *(_OWORD *)(a2 + 96) = v17;
    *(_OWORD *)(a2 + 112) = v9;
    v10 = v12[1];
    *(_OWORD *)a2 = v12[0];
    *(_OWORD *)(a2 + 16) = v10;
    result = *(double *)&v13;
    v11 = v14;
    *(_OWORD *)(a2 + 32) = v13;
    *(_OWORD *)(a2 + 48) = v11;
  }
  return result;
}

uint64_t sub_1007C72C0(_QWORD *a1)
{
  return sub_1007C6C74(a1);
}

uint64_t sub_1007C7330(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10073D86C();
  return CRExtendableValueStruct.copy(renamingReferences:)(a1, a2, v4);
}

uint64_t sub_1007C7370(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;

  v6 = sub_100562068();
  v7 = sub_1007CA238();
  return CRValue<>.observableDifference(from:with:)(a1, a2, a3, v6, v7);
}

uint64_t sub_1007C73CC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10073D86C();
  return CRExtendableValueStruct.visitReferences(_:)(a1, a2, v4);
}

uint64_t sub_1007C7404(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_1007C77F4();
  return CRValueStruct.init(from:)(a1, a2, v4);
}

uint64_t sub_1007C7450(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_1007C77F4();
  return CRValueStruct.encode(to:)(a1, a2, v4);
}

uint64_t sub_1007C7494(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1007C77F4();
  return CRValueStruct.minEncodingVersion.getter(a1, v2);
}

unint64_t sub_1007C74D0()
{
  unint64_t result;

  result = qword_1013F3058;
  if (!qword_1013F3058)
  {
    result = swift_getWitnessTable("E07", &type metadata for CRLWPTextPresetData);
    atomic_store(result, (unint64_t *)&qword_1013F3058);
  }
  return result;
}

unint64_t sub_1007C7518()
{
  unint64_t result;

  result = qword_1013F3060;
  if (!qword_1013F3060)
  {
    result = swift_getWitnessTable(&unk_100F0BF7C, &type metadata for CRLWPTextPresetData);
    atomic_store(result, (unint64_t *)&qword_1013F3060);
  }
  return result;
}

unint64_t sub_1007C7564()
{
  unint64_t result;

  result = qword_1013F3068;
  if (!qword_1013F3068)
  {
    result = swift_getWitnessTable(&unk_100F0C004, &type metadata for CRLWPTextPresetData);
    atomic_store(result, (unint64_t *)&qword_1013F3068);
  }
  return result;
}

unint64_t sub_1007C75AC()
{
  unint64_t result;

  result = qword_1013F3070;
  if (!qword_1013F3070)
  {
    result = swift_getWitnessTable(&unk_100F0BFDC, &type metadata for CRLWPTextPresetData);
    atomic_store(result, (unint64_t *)&qword_1013F3070);
  }
  return result;
}

unint64_t sub_1007C75F4()
{
  unint64_t result;

  result = qword_1013F3078;
  if (!qword_1013F3078)
  {
    result = swift_getWitnessTable(&unk_100F0C0AC, &type metadata for CRLWPTextPresetData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1013F3078);
  }
  return result;
}

unint64_t sub_1007C763C()
{
  unint64_t result;

  result = qword_1013F3080;
  if (!qword_1013F3080)
  {
    result = swift_getWitnessTable(&unk_100F0C1BC, &type metadata for CRLWPTextPresetData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1013F3080);
  }
  return result;
}

unint64_t sub_1007C7684()
{
  unint64_t result;

  result = qword_1013F3088;
  if (!qword_1013F3088)
  {
    result = swift_getWitnessTable(&unk_100F0C184, &type metadata for CRLWPTextPresetData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1013F3088);
  }
  return result;
}

unint64_t sub_1007C76CC()
{
  unint64_t result;

  result = qword_1013F3090;
  if (!qword_1013F3090)
  {
    result = swift_getWitnessTable(&unk_100F0C0E4, &type metadata for CRLWPTextPresetData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1013F3090);
  }
  return result;
}

unint64_t sub_1007C7714()
{
  unint64_t result;

  result = qword_1013F3098;
  if (!qword_1013F3098)
  {
    result = swift_getWitnessTable(&unk_100F0C15C, &type metadata for CRLWPTextPresetData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1013F3098);
  }
  return result;
}

unint64_t sub_1007C775C()
{
  unint64_t result;

  result = qword_1013F30A0;
  if (!qword_1013F30A0)
  {
    result = swift_getWitnessTable(&unk_100F0C134, &type metadata for CRLWPTextPresetData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1013F30A0);
  }
  return result;
}

unint64_t sub_1007C77A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1013F30A8;
  if (!qword_1013F30A8)
  {
    v1 = sub_1004CB6A4(&qword_1013F30B0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1013F30A8);
  }
  return result;
}

unint64_t sub_1007C77F4()
{
  unint64_t result;

  result = qword_1013F30B8;
  if (!qword_1013F30B8)
  {
    result = swift_getWitnessTable(&unk_100F0C064, &type metadata for CRLWPTextPresetData);
    atomic_store(result, (unint64_t *)&qword_1013F30B8);
  }
  return result;
}

uint64_t sub_1007C7838(uint64_t a1, __int128 *a2)
{
  int v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  unint64_t v9;
  char v10;
  char v11;
  int v12;
  int v13;
  char v14;
  _BOOL4 v15;
  int v16;
  int v17;
  _BOOL4 v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  unint64_t v74;
  char v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  _BYTE v101[16];
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _BYTE v130[16];
  _BYTE v131[16];
  _BYTE v132[16];
  _BYTE v133[16];
  _BYTE v134[16];
  __int128 v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _BYTE v145[16];
  char v146[16];
  _BYTE v147[16];
  char v148[16];
  _BYTE v149[16];
  char v150[16];
  _BYTE v151[16];
  char v152[16];
  uint64_t v153;
  unsigned __int8 v154;
  _BYTE v155[24];

  v4 = *(unsigned __int8 *)(a1 + 16);
  v5 = *((unsigned __int8 *)a2 + 16);
  if (v4 == 255)
  {
    if (v5 != 255)
      goto LABEL_47;
  }
  else
  {
    v7 = *(_QWORD *)a1;
    v6 = *(_QWORD *)(a1 + 8);
    v8 = *a2;
    v102 = *(_QWORD *)a1;
    v103 = v6;
    LOBYTE(v104) = v4;
    if (v5 == 255)
    {
      sub_1004C4914(v7, v6, v4 & 1);
      sub_1004C4230(v7, v6, v4 & 1);
      goto LABEL_47;
    }
    v135 = v8;
    LOBYTE(v136) = v5 & 1;
    sub_1004C4914(v7, v6, v4 & 1);
    sub_1004C4914(v7, v6, v4 & 1);
    v9 = sub_10062E1F4();
    v10 = static CRExtensible.== infix(_:_:)(&v102, &v135, &type metadata for CRLWPFontName, v9, &protocol witness table for String, &protocol witness table for String);
    sub_1004C4230(v102, v103, v104);
    sub_1004C4218(v7, v6, v4);
    if ((v10 & 1) == 0)
      goto LABEL_47;
  }
  v11 = *((_BYTE *)a2 + 24);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    if (!*((_BYTE *)a2 + 24))
      goto LABEL_47;
  }
  else
  {
    if (*(float *)(a1 + 20) != *((float *)a2 + 5))
      v11 = 1;
    if ((v11 & 1) != 0)
      goto LABEL_47;
  }
  v12 = *(unsigned __int8 *)(a1 + 25);
  v13 = *((unsigned __int8 *)a2 + 25);
  if (v12 == 2)
  {
    if (v13 != 2)
      goto LABEL_47;
  }
  else
  {
    v14 = 0;
    v15 = (v12 & 1) == 0;
    if (v13 == 2 || ((v15 ^ v13) & 1) == 0)
      return v14 & 1;
  }
  v16 = *(unsigned __int8 *)(a1 + 26);
  v17 = *((unsigned __int8 *)a2 + 26);
  if (v16 == 2)
  {
    if (v17 != 2)
      goto LABEL_47;
LABEL_23:
    sub_1004C4938(a1 + 32, (uint64_t)v134, &qword_1013F30C0);
    v19 = *((_QWORD *)a2 + 4);
    v20 = *((unsigned __int8 *)a2 + 40);
    sub_1004C4938((uint64_t)v134, (uint64_t)v145, &qword_1013F30C0);
    if (v145[8] == 255)
    {
      if (v20 != 255)
        goto LABEL_47;
    }
    else
    {
      sub_1004C4938((uint64_t)v145, (uint64_t)v146, &qword_1013E8738);
      sub_1004C4938((uint64_t)v134, (uint64_t)&v102, &qword_1013F30C0);
      if (v20 == 255)
        goto LABEL_47;
      *(_QWORD *)&v135 = v19;
      BYTE8(v135) = v20 & 1;
      type metadata accessor for CRLWPUnderline(0);
      v22 = v21;
      v23 = sub_1004B7878((unint64_t *)&unk_1013E8740, (uint64_t (*)(uint64_t))type metadata accessor for CRLWPUnderline, (uint64_t)&unk_100EF2074);
      if ((static CRExtensible.== infix(_:_:)(&v102, &v135, v22, v23, &protocol witness table for Int, &protocol witness table for Int) & 1) == 0)goto LABEL_47;
    }
    sub_1004C4938(a1 + 48, (uint64_t)v133, (uint64_t *)&unk_1013F3E90);
    v24 = *((_QWORD *)a2 + 6);
    v25 = *((unsigned __int8 *)a2 + 56);
    sub_1004C4938((uint64_t)v133, (uint64_t)v147, (uint64_t *)&unk_1013F3E90);
    if (v147[8] == 255)
    {
      if (v25 != 255)
        goto LABEL_47;
    }
    else
    {
      sub_1004C4938((uint64_t)v147, (uint64_t)v148, &qword_1013F3800);
      sub_1004C4938((uint64_t)v133, (uint64_t)&v102, (uint64_t *)&unk_1013F3E90);
      if (v25 == 255)
        goto LABEL_47;
      *(_QWORD *)&v135 = v24;
      BYTE8(v135) = v25 & 1;
      type metadata accessor for CRLWPStrikethru(0);
      v27 = v26;
      v28 = sub_1004B7878(&qword_1013E8730, (uint64_t (*)(uint64_t))type metadata accessor for CRLWPStrikethru, (uint64_t)&unk_100EF1FB4);
      if ((static CRExtensible.== infix(_:_:)(&v102, &v135, v27, v28, &protocol witness table for Int, &protocol witness table for Int) & 1) == 0)goto LABEL_47;
    }
    v29 = *(_QWORD *)(a1 + 64);
    v30 = *(_QWORD *)(a1 + 72);
    v31 = *(_QWORD *)(a1 + 80);
    v32 = *(_QWORD *)(a1 + 88);
    v33 = *(_QWORD *)(a1 + 96);
    v34 = *(_QWORD *)(a1 + 104);
    v35 = *(_QWORD *)(a1 + 112);
    v36 = *(_QWORD *)(a1 + 120);
    v37 = *(_QWORD *)(a1 + 128);
    v38 = *(_QWORD *)(a1 + 136);
    v39 = *(_QWORD *)(a1 + 144);
    v40 = *(_QWORD *)(a1 + 152);
    v42 = *(_QWORD *)(a1 + 160);
    v41 = *(_QWORD *)(a1 + 168);
    v43 = *((_QWORD *)a2 + 8);
    v44 = *((_QWORD *)a2 + 9);
    v45 = *((_QWORD *)a2 + 10);
    v97 = *((_QWORD *)a2 + 11);
    v47 = *((_QWORD *)a2 + 12);
    v46 = *((_QWORD *)a2 + 13);
    v49 = *((_QWORD *)a2 + 14);
    v48 = *((_QWORD *)a2 + 15);
    v91 = *((_QWORD *)a2 + 16);
    v50 = *((_QWORD *)a2 + 17);
    v98 = *((_QWORD *)a2 + 18);
    v51 = *((_QWORD *)a2 + 19);
    v52 = *((_QWORD *)a2 + 20);
    v94 = *((_QWORD *)a2 + 21);
    if (v42)
    {
      if (v52)
      {
        v102 = *(_QWORD *)(a1 + 64);
        v95 = v48;
        LOBYTE(v103) = v30 & 1;
        *(_QWORD *)&v135 = v43;
        BYTE8(v135) = v44 & 1;
        v80 = v29;
        v81 = v30;
        v77 = v31;
        v78 = v32;
        v87 = v44;
        v88 = v33;
        v79 = v34;
        v89 = v35;
        v90 = v36;
        v85 = v38;
        v86 = v37;
        v83 = v40;
        v84 = v39;
        v53 = v49;
        v82 = v41;
        v54 = v43;
        v55 = v50;
        v56 = v51;
        sub_1004C485C(v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v42, v41);
        sub_1004C485C(v54, v87, v45, v97, v47, v46, v53, v95, v91, v55, v98, v56, v52, v94);
        v57 = sub_1007C8324();
        if ((static CRExtensible.== infix(_:_:)(&v102, &v135, &type metadata for CRLFillData.FillType, v57, &protocol witness table for Int, &protocol witness table for Int) & 1) == 0)goto LABEL_46;
        LODWORD(v135) = v77;
        BYTE4(v135) = BYTE4(v77) & 1;
        *((_QWORD *)&v135 + 1) = v78;
        v136 = v88;
        v137 = v79;
        v138 = v89;
        v139 = v90;
        v140 = v86;
        v141 = v85;
        v142 = v84;
        v143 = v83;
        v144 = v42;
        LODWORD(v102) = v45;
        BYTE4(v102) = BYTE4(v45) & 1;
        v103 = v97;
        v104 = v47;
        v105 = v46;
        v106 = v53;
        v107 = v95;
        v108 = v91;
        v109 = v55;
        v110 = v98;
        v111 = v56;
        v112 = v52;
        if ((sub_1006C4CF8(&v135, &v102) & 1) == 0)
        {
LABEL_46:
          sub_1004C4174(v54, v87, v45, v97, v47, v46, v53, v95, v91, v55, v98, v56, v52, v94);
          sub_1004C4174(v80, v81, v77, v78, v88, v79, v89, v90, v86, v85, v84, v83, v42, v82);
          goto LABEL_47;
        }
        v76 = sub_100C9E04C(v82, v94);
        sub_1004C4174(v54, v87, v45, v97, v47, v46, v53, v95, v91, v55, v98, v56, v52, v94);
        sub_1004C4174(v80, v81, v77, v78, v88, v79, v89, v90, v86, v85, v84, v83, v42, v82);
        if ((v76 & 1) == 0)
        {
LABEL_47:
          v14 = 0;
          return v14 & 1;
        }
LABEL_42:
        sub_1004C4938(a1 + 176, (uint64_t)v132, &qword_1013F30C8);
        v61 = *((_QWORD *)a2 + 22);
        v62 = *((unsigned __int8 *)a2 + 184);
        sub_1004C4938((uint64_t)v132, (uint64_t)v149, &qword_1013F30C8);
        if (v149[8] == 255)
        {
          if (v62 != 255)
            goto LABEL_47;
        }
        else
        {
          sub_1004C4938((uint64_t)v149, (uint64_t)v150, &qword_1013F3B10);
          sub_1004C4938((uint64_t)v132, (uint64_t)v155, &qword_1013F30C8);
          if (v62 == 255)
            goto LABEL_47;
          v153 = v61;
          v154 = v62 & 1;
          type metadata accessor for CRLWPParagraphAlignment(0);
          v64 = v63;
          v65 = sub_1004B7878((unint64_t *)&unk_1013E8720, (uint64_t (*)(uint64_t))type metadata accessor for CRLWPParagraphAlignment, (uint64_t)&unk_100EF20D4);
          if ((static CRExtensible.== infix(_:_:)(v155, &v153, v64, v65, &protocol witness table for Int, &protocol witness table for Int) & 1) == 0)goto LABEL_47;
        }
        sub_1004C4938(a1 + 192, (uint64_t)v131, &qword_1013F30D0);
        v67 = *((_QWORD *)a2 + 24);
        v68 = *((unsigned __int8 *)a2 + 200);
        sub_1004C4938((uint64_t)v131, (uint64_t)v151, &qword_1013F30D0);
        if (v151[8] == 255)
        {
          if (v68 != 255)
            goto LABEL_47;
        }
        else
        {
          sub_1004C4938((uint64_t)v151, (uint64_t)v152, &qword_1013E8758);
          sub_1004C4938((uint64_t)v131, (uint64_t)v155, &qword_1013F30D0);
          if (v68 == 255)
            goto LABEL_47;
          v153 = v67;
          v154 = v68 & 1;
          type metadata accessor for CRLWPWritingDirection(0);
          v70 = v69;
          v71 = sub_1004B7878((unint64_t *)&unk_1013E8760, (uint64_t (*)(uint64_t))type metadata accessor for CRLWPWritingDirection, (uint64_t)&unk_100EF1304);
          if ((static CRExtensible.== infix(_:_:)(v155, &v153, v70, v71, &protocol witness table for Int, &protocol witness table for Int) & 1) == 0)goto LABEL_47;
        }
        sub_1004C4938(a1 + 208, (uint64_t)v130, &qword_1013F3EB0);
        v72 = *((_QWORD *)a2 + 26);
        v73 = *((unsigned __int8 *)a2 + 216);
        sub_1004C4938((uint64_t)v130, (uint64_t)&v153, &qword_1013F3EB0);
        if (v154 == 255)
        {
          if (v73 != 255)
            goto LABEL_47;
        }
        else
        {
          sub_1004C4938((uint64_t)&v153, (uint64_t)v155, &qword_1013E8708);
          sub_1004C4938((uint64_t)v130, (uint64_t)v101, &qword_1013F3EB0);
          if (v73 == 255)
            goto LABEL_47;
          v99 = v72;
          v100 = v73 & 1;
          v74 = sub_10062E1B0();
          if ((static CRExtensible.== infix(_:_:)(v101, &v99, &type metadata for CRLWPListStyleType, v74, &protocol witness table for Int, &protocol witness table for Int) & 1) == 0)goto LABEL_47;
        }
        v75 = *((_BYTE *)a2 + 232);
        if ((*(_BYTE *)(a1 + 232) & 1) != 0)
        {
          if (!*((_BYTE *)a2 + 232))
            goto LABEL_47;
        }
        else
        {
          if (*(_QWORD *)(a1 + 224) != *((_QWORD *)a2 + 28))
            v75 = 1;
          if ((v75 & 1) != 0)
            goto LABEL_47;
        }
        v14 = sub_100C9E04C(*(_QWORD *)(a1 + 240), *((_QWORD *)a2 + 30));
        return v14 & 1;
      }
    }
    else if (!v52)
    {
      goto LABEL_42;
    }
    v102 = *(_QWORD *)(a1 + 64);
    v103 = v30;
    v104 = v31;
    v105 = v32;
    v106 = v33;
    v107 = v34;
    v108 = v35;
    v109 = v36;
    v110 = v37;
    v111 = v38;
    v112 = v39;
    v113 = v40;
    v114 = v42;
    v115 = v41;
    v116 = v43;
    v117 = v44;
    v118 = v45;
    v119 = v97;
    v120 = v47;
    v121 = v46;
    v122 = v49;
    v123 = v48;
    v124 = v91;
    v125 = v50;
    v126 = v98;
    v127 = v51;
    v128 = v52;
    v129 = v94;
    v96 = v48;
    v92 = v46;
    v93 = v49;
    v58 = v43;
    v59 = v50;
    v60 = v51;
    sub_1004C485C(v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v42, v41);
    sub_1004C485C(v58, v44, v45, v97, v47, v92, v93, v96, v91, v59, v98, v60, v52, v94);
    sub_1007C825C((uint64_t)&v102);
    goto LABEL_47;
  }
  v14 = 0;
  v18 = (v16 & 1) == 0;
  if (v17 != 2 && ((v18 ^ v17) & 1) != 0)
    goto LABEL_23;
  return v14 & 1;
}

uint64_t sub_1007C825C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 120);
  v14 = *(_QWORD *)(a1 + 112);
  v3 = *(_QWORD *)(a1 + 128);
  v4 = *(_QWORD *)(a1 + 136);
  v5 = *(_QWORD *)(a1 + 144);
  v6 = *(_QWORD *)(a1 + 152);
  v7 = *(_QWORD *)(a1 + 160);
  v8 = *(_QWORD *)(a1 + 168);
  v12 = *(_OWORD *)(a1 + 192);
  v13 = *(_OWORD *)(a1 + 176);
  v10 = *(_QWORD *)(a1 + 208);
  v9 = *(_QWORD *)(a1 + 216);
  sub_1004C4174(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104));
  sub_1004C4174(v14, v2, v3, v4, v5, v6, v7, v8, v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v10, v9);
  return a1;
}

unint64_t sub_1007C8324()
{
  unint64_t result;

  result = qword_1013F30D8;
  if (!qword_1013F30D8)
  {
    result = swift_getWitnessTable(&unk_100F34158, &type metadata for CRLFillData.FillType);
    atomic_store(result, (unint64_t *)&qword_1013F30D8);
  }
  return result;
}

uint64_t sub_1007C8368@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  char v63;
  char v64;
  int v65;
  int v66;
  char v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  int v104;
  int v105;
  unint64_t v106;
  int v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  _QWORD v115[12];
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unsigned __int8 v120;
  unsigned int v121;
  unsigned __int8 v122;
  unsigned __int8 v123;
  unsigned __int8 v124;
  uint64_t v125;
  unsigned __int8 v126;
  uint64_t v127;
  unsigned __int8 v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unsigned __int8 v144;
  uint64_t v145;
  char v146;
  uint64_t v147;
  char v148;
  uint64_t v149;
  char v150;
  _QWORD v151[31];
  _QWORD v152[31];
  _BYTE v153[256];

  v4 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v87 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1004C4938((uint64_t)&a1[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemTextPresetOverride], (uint64_t)v152, &qword_1013E1B50);
  sub_1004C4938((uint64_t)v152, (uint64_t)v153, &qword_1013E1B50);
  result = sub_100562DF8((uint64_t)v153);
  if ((_DWORD)result == 1)
  {
    v8 = *(_QWORD *)&a1[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData];
    if (!v8)
    {
      __break(1u);
      return result;
    }
    (*(void (**)(void))(*(_QWORD *)v8 + 760))();
    swift_retain(v8);
    v9 = sub_1004B804C(&qword_1013F3C70);
    CRRegister.wrappedValue.getter(v9);
    sub_1004C4938((uint64_t)v151, (uint64_t)&v118, &qword_1013E1B50);
    sub_10075ADB4((uint64_t)v6);
    swift_release(v8);
    v10 = &v118;
  }
  else
  {
    v10 = v152;
  }
  sub_1004C4938((uint64_t)v10, (uint64_t)v151, &qword_1013E1B50);
  KeyPath = swift_getKeyPath(&unk_100F0C250);
  sub_1006A1C78(v152, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1006A1CF4);
  sub_1007C57DC(KeyPath, a1);
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v18 = ~(_BYTE)v16;
  swift_release(KeyPath);
  if (!v18)
  {
    sub_1004C4938((uint64_t)v151, (uint64_t)&v118, &qword_1013E1B50);
    if (sub_100562DF8((uint64_t)&v118) == 1)
    {
      v13 = 0;
      v15 = 0;
      v17 = 255;
    }
    else
    {
      v13 = v118;
      v15 = v119;
      v17 = v120;
      sub_1004C48FC(v118, v119, v120);
    }
  }
  v19 = swift_getKeyPath(&unk_100F0C270);
  sub_1007C5B88(v19, a1);
  v21 = v20;
  swift_release(v19);
  if ((v21 & 0x100000000) != 0)
  {
    sub_1004C4938((uint64_t)v151, (uint64_t)&v118, &qword_1013E1B50);
    if (sub_100562DF8((uint64_t)&v118) == 1)
    {
      v103 = 0;
      v22 = 1;
    }
    else
    {
      v103 = v121;
      v22 = v122;
    }
    v102 = v22;
  }
  else
  {
    v103 = v21;
    v102 = 0;
  }
  v23 = swift_getKeyPath(&unk_100F0C290);
  sub_1007C5D24(v23, a1, (uint64_t)&type metadata for CRLWPFontBoldAttribute, (void (*)(uint64_t))sub_1007394EC, (uint64_t (*)(uint64_t, id, id, id, __n128))sub_100DC7B80);
  v25 = v24;
  v26 = v24;
  swift_release(v23);
  if (v26 == 2)
  {
    sub_1004C4938((uint64_t)v151, (uint64_t)&v118, &qword_1013E1B50);
    if (sub_100562DF8((uint64_t)&v118) == 1)
      v25 = 2;
    else
      v25 = v123;
  }
  v27 = swift_getKeyPath(&unk_100F0C2B0);
  sub_1007C5D24(v27, a1, (uint64_t)&type metadata for CRLWPFontItalicAttribute, (void (*)(uint64_t))sub_1007394A8, (uint64_t (*)(uint64_t, id, id, id, __n128))sub_100DC7B38);
  v29 = v28;
  v30 = v28;
  swift_release(v27);
  if (v30 == 2)
  {
    sub_1004C4938((uint64_t)v151, (uint64_t)&v118, &qword_1013E1B50);
    if (sub_100562DF8((uint64_t)&v118) == 1)
      v29 = 2;
    else
      v29 = v124;
  }
  v31 = swift_getKeyPath(&unk_100F0C2D0);
  sub_1007C6788(v31, a1, (uint64_t)&type metadata for CRLWPUnderlineAttribute, (void (*)(uint64_t))sub_100739464, (uint64_t (*)(uint64_t, id, id, id, __n128))sub_100DC71FC, (void (*)(uint64_t, uint64_t, __n128))sub_10073DD84);
  v112 = v32;
  v111 = v33;
  v34 = ~(_BYTE)v33;
  swift_release(v31);
  if (!v34)
  {
    sub_1004C4938((uint64_t)v151, (uint64_t)&v118, &qword_1013E1B50);
    if (sub_100562DF8((uint64_t)&v118) == 1)
    {
      v112 = 0;
      v35 = 255;
    }
    else
    {
      v112 = v125;
      v35 = v126;
    }
    v111 = v35;
  }
  v36 = swift_getKeyPath(&unk_100F0C2F0);
  sub_1007C6788(v36, a1, (uint64_t)&type metadata for CRLWPStrikethroughAttribute, (void (*)(uint64_t))sub_100739420, (uint64_t (*)(uint64_t, id, id, id, __n128))sub_100DC68C0, (void (*)(uint64_t, uint64_t, __n128))sub_10073DD84);
  v110 = v37;
  v109 = v38;
  v39 = ~(_BYTE)v38;
  swift_release(v36);
  if (!v39)
  {
    sub_1004C4938((uint64_t)v151, (uint64_t)&v118, &qword_1013E1B50);
    if (sub_100562DF8((uint64_t)&v118) == 1)
    {
      v110 = 0;
      v40 = 255;
    }
    else
    {
      v110 = v127;
      v40 = v128;
    }
    v109 = v40;
  }
  v41 = swift_getKeyPath(&unk_100F0C310);
  sub_1007C5EB4(a1, v41, (char *)v115);
  swift_release(v41);
  if (v116)
  {
    v101 = v116;
    v88 = v117;
    v89 = v115[11];
    v90 = v115[10];
    v91 = v115[9];
    v92 = v115[8];
    v93 = v115[7];
    v94 = v115[6];
    v95 = v115[5];
    v96 = v115[4];
    v97 = v115[3];
    v98 = v115[2];
    v99 = v115[1];
    v100 = v115[0];
  }
  else
  {
    sub_1004C4938((uint64_t)v151, (uint64_t)&v118, &qword_1013E1B50);
    if (sub_100562DF8((uint64_t)&v118) == 1)
    {
      v99 = 0;
      v100 = 0;
      v97 = 0;
      v98 = 0;
      v95 = 0;
      v96 = 0;
      v93 = 0;
      v94 = 0;
      v91 = 0;
      v92 = 0;
      v89 = 0;
      v90 = 0;
      v101 = 0;
      v88 = 0;
    }
    else
    {
      v88 = v142;
      v101 = v141;
      v89 = v140;
      v90 = v139;
      v91 = v138;
      v92 = v137;
      v99 = v130;
      v100 = v129;
      v97 = v132;
      v98 = v131;
      v95 = v134;
      v96 = v133;
      v93 = v136;
      v94 = v135;
      sub_1004C485C(v129, v130, v131, v132, v133, v134, v135, v136, v137, v138, v139, v140, v141, v142);
    }
  }
  v42 = swift_getKeyPath(&unk_100F0C330);
  sub_1007C6788(v42, a1, (uint64_t)&type metadata for CRLWPParagraphAlignmentAttribute, (void (*)(uint64_t))sub_100573144, (uint64_t (*)(uint64_t, id, id, id, __n128))sub_100DC4B5C, (void (*)(uint64_t, uint64_t, __n128))sub_10073DD84);
  v108 = v43;
  v114 = v44;
  v45 = ~(_BYTE)v44;
  swift_release(v42);
  v106 = v15;
  if (!v45)
  {
    sub_1004C4938((uint64_t)v151, (uint64_t)&v118, &qword_1013E1B50);
    if (sub_100562DF8((uint64_t)&v118) == 1)
    {
      v108 = 0;
      v46 = 255;
    }
    else
    {
      v108 = v143;
      v46 = v144;
    }
    v114 = v46;
  }
  v47 = swift_getKeyPath(&unk_100F0C350);
  sub_1007C6788(v47, a1, (uint64_t)&type metadata for CRLWPWritingDirectionAttribute, (void (*)(uint64_t))sub_10073D6C0, (uint64_t (*)(uint64_t, id, id, id, __n128))sub_100DC42D4, (void (*)(uint64_t, uint64_t, __n128))sub_10062E238);
  v113 = v48;
  v50 = v49;
  v51 = ~v49;
  swift_release(v47);
  v104 = v29;
  v105 = v25;
  if (!v51)
  {
    sub_1004C4938((uint64_t)v151, (uint64_t)&v118, &qword_1013E1B50);
    if (sub_100562DF8((uint64_t)&v118) == 1)
    {
      v113 = 0;
      v50 = -1;
    }
    else
    {
      v113 = v145;
      v50 = v146;
    }
  }
  v52 = swift_getKeyPath(&unk_100F0C370);
  sub_1007C692C(v52, a1);
  v54 = v53;
  v56 = v55;
  v57 = ~v55;
  swift_release(v52);
  v107 = v17;
  if (v57)
  {
    v58 = v13;
  }
  else
  {
    sub_1004C4938((uint64_t)v151, (uint64_t)&v118, &qword_1013E1B50);
    v58 = v13;
    if (sub_100562DF8((uint64_t)&v118) == 1)
    {
      v54 = 0;
      v56 = -1;
    }
    else
    {
      v54 = v147;
      v56 = v148;
    }
  }
  v59 = swift_getKeyPath(&unk_100F0C390);
  sub_1007C6ABC(v59, a1);
  v61 = v60;
  v63 = v62;

  swift_release(v59);
  if ((v63 & 1) != 0)
  {
    sub_1004C4938((uint64_t)v151, (uint64_t)&v118, &qword_1013E1B50);
    v66 = sub_100562DF8((uint64_t)&v118);
    v65 = v103;
    if (v66 == 1)
    {
      v61 = 0;
      v64 = 1;
    }
    else
    {
      sub_1006A1C78(v151, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100562F88);
      v61 = v149;
      v64 = v150;
    }
  }
  else
  {
    sub_1006A1C78(v151, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100562F88);
    v64 = 0;
    v65 = v103;
  }
  v67 = v102;
  v68 = v112;
  v69 = v111;
  v70 = v110;
  v71 = v109;
  v73 = v100;
  v72 = v101;
  v75 = v98;
  v74 = v99;
  v76 = v96;
  result = v97;
  v78 = v94;
  v77 = v95;
  v80 = v92;
  v79 = v93;
  v82 = v90;
  v81 = v91;
  v84 = v88;
  v83 = v89;
  v85 = v108;
  LOBYTE(v115[0]) = v64;
  v86 = v106;
  *(_QWORD *)a2 = v58;
  *(_QWORD *)(a2 + 8) = v86;
  LOBYTE(v118) = v67;
  *(_BYTE *)(a2 + 16) = v107;
  *(_DWORD *)(a2 + 20) = v65;
  *(_BYTE *)(a2 + 24) = v67;
  *(_BYTE *)(a2 + 25) = v105;
  *(_BYTE *)(a2 + 26) = v104;
  *(_QWORD *)(a2 + 32) = v68;
  *(_BYTE *)(a2 + 40) = v69;
  *(_QWORD *)(a2 + 48) = v70;
  *(_BYTE *)(a2 + 56) = v71;
  *(_QWORD *)(a2 + 64) = v73;
  *(_QWORD *)(a2 + 72) = v74;
  *(_QWORD *)(a2 + 80) = v75;
  *(_QWORD *)(a2 + 88) = result;
  *(_QWORD *)(a2 + 96) = v76;
  *(_QWORD *)(a2 + 104) = v77;
  *(_QWORD *)(a2 + 112) = v78;
  *(_QWORD *)(a2 + 120) = v79;
  *(_QWORD *)(a2 + 128) = v80;
  *(_QWORD *)(a2 + 136) = v81;
  *(_QWORD *)(a2 + 144) = v82;
  *(_QWORD *)(a2 + 152) = v83;
  *(_QWORD *)(a2 + 160) = v72;
  *(_QWORD *)(a2 + 168) = v84;
  *(_QWORD *)(a2 + 176) = v85;
  *(_BYTE *)(a2 + 184) = v114;
  *(_QWORD *)(a2 + 192) = v113;
  *(_BYTE *)(a2 + 200) = v50;
  *(_QWORD *)(a2 + 208) = v54;
  *(_BYTE *)(a2 + 216) = v56;
  *(_QWORD *)(a2 + 224) = v61;
  *(_BYTE *)(a2 + 232) = v115[0];
  *(_QWORD *)(a2 + 240) = &_swiftEmptyDictionarySingleton;
  return result;
}

uint64_t sub_1007C8C34()
{
  return 24;
}

double sub_1007C8C40(_QWORD *a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*a1).n128_u64[0];
  return result;
}

uint64_t sub_1007C8C48(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *a1;
  *(_QWORD *)a2 = *a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 1);
  return swift_retain(v2);
}

__n128 sub_1007C8C68(__n128 *a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = a1[1].n128_u64[0];
  result = *a1;
  *(__n128 *)(a2 + 8) = *a1;
  return result;
}

double sub_1007C8C7C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = 3;
  if (a1)
    v2 = 5;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_BYTE *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 20) = 0;
  *(_BYTE *)(a2 + 24) = 1;
  *(_BYTE *)(a2 + 25) = a1 != 0;
  *(_BYTE *)(a2 + 26) = 2;
  *(_QWORD *)(a2 + 32) = 0;
  *(_BYTE *)(a2 + 40) = -1;
  *(_QWORD *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 56) = -1;
  result = 0.0;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_QWORD *)(a2 + 176) = 2;
  *(_BYTE *)(a2 + 184) = 0;
  *(_QWORD *)(a2 + 192) = -1;
  *(_BYTE *)(a2 + 200) = 0;
  *(_QWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 216) = 0;
  *(_QWORD *)(a2 + 224) = 0;
  *(_BYTE *)(a2 + 232) = 1;
  *(_QWORD *)(a2 + 240) = &_swiftEmptyDictionarySingleton;
  return result;
}

uint64_t sub_1007C8D20(uint64_t a1)
{
  if ((unint64_t)(a1 + 1) > 0xB)
    return 12;
  else
    return byte_100F0C4F8[a1 + 1];
}

uint64_t sub_1007C8D44(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;

  if (a1 == 0x6D614E746E6F665FLL && a2 == 0xE900000000000065)
  {
    v5 = 0xE900000000000065;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D614E746E6F665FLL, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7A6953746E6F665FLL && a2 == 0xE900000000000065)
  {
    v7 = 0xE900000000000065;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7A6953746E6F665FLL, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x646C6F625FLL && a2 == 0xE500000000000000)
  {
    v8 = 0xE500000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x646C6F625FLL, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x63696C6174695FLL && a2 == 0xE700000000000000)
  {
    v9 = 0xE700000000000000;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x63696C6174695FLL, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x696C7265646E755FLL && a2 == 0xEA0000000000656ELL)
  {
    v10 = 0xEA0000000000656ELL;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696C7265646E755FLL, 0xEA0000000000656ELL, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0x74656B697274735FLL && a2 == 0xEE006867756F7268)
  {
    v11 = 0xEE006867756F7268;
LABEL_38:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74656B697274735FLL, 0xEE006867756F7268, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_38;
  }
  if (a1 == 0x746361726168635FLL && a2 == 0xEE006C6C69467265)
  {
    v12 = 0xEE006C6C69467265;
LABEL_44:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746361726168635FLL, 0xEE006C6C69467265, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_44;
  }
  if (a1 == 0xD000000000000013)
  {
    v13 = 0x8000000100FD3E50;
    if (a2 == 0x8000000100FD3E50)
      goto LABEL_49;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000100FD3E50, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
LABEL_49:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x8000000100FD3E70)
  {
    v14 = 0x8000000100FD3E70;
LABEL_55:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100FD3E70, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_55;
  }
  if (a1 == 0x7974537473696C5FLL && a2 == 0xEE0065707954656CLL)
  {
    v15 = 0xEE0065707954656CLL;
LABEL_61:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7974537473696C5FLL, 0xEE0065707954656CLL, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_61;
  }
  if (a1 == 0x6174537473696C5FLL && a2 == 0xEA00000000007472)
  {
    v16 = 0xEA00000000007472;
LABEL_67:
    swift_bridgeObjectRelease(v16);
    return 10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6174537473696C5FLL, 0xEA00000000007472, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
    goto LABEL_67;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x8000000100FAF1E0)
  {
    swift_bridgeObjectRelease(0x8000000100FAF1E0);
    return 11;
  }
  else
  {
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100FAF1E0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v17 & 1) != 0)
      return 11;
    else
      return 12;
  }
}

void sub_1007C9280(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __n128 v20;
  int v21;
  __n128 v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  int v81;
  unint64_t v82;
  unint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  _BYTE v127[7];
  uint64_t v128;
  char v129;
  _BYTE v130[7];
  uint64_t v131;
  char v132;
  _BYTE v133[7];
  uint64_t v134;
  char v135;
  _BYTE v136[7];
  uint64_t v137;
  char v138;
  uint64_t v139;
  _BYTE v140[7];
  char v141;
  _BYTE v142[7];
  _BYTE v143[7];
  _BYTE v144[7];
  _BYTE v145[7];
  _BYTE v146[12];
  char v147;
  __int16 v148;
  char v149;
  uint64_t v150;

  v150 = sub_1004B804C(&qword_1013F30E8);
  v5 = *(_QWORD *)(v150 - 8);
  __chkstk_darwin(v150);
  v7 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_1004BB5A4(a1, v8);
  v10 = sub_1007C76CC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CRLWPTextPresetData.CodingKeys, &type metadata for CRLWPTextPresetData.CodingKeys, v10, v8, v9);
  if (v2)
  {
    _s8Freeform26AnyCRLCommandChangeContextVwxx_0(a1);
    swift_bridgeObjectRelease();
  }
  else
  {
    v86 = v5;
    v11 = sub_1004B804C(&qword_1013F3890);
    LOBYTE(v87) = 0;
    v12 = sub_1007C9D00();
    v13 = v150;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v11, &v87, v150, v11, v12);
    v85 = a2;
    v14 = v103;
    v15 = v104;
    v16 = v105;
    LOBYTE(v103) = 1;
    sub_1004C48FC(v14, v104, v105);
    v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v103, v13);
    v83 = v15;
    v84 = v16;
    v18 = HIDWORD(v17) & 1;
    v147 = BYTE4(v17) & 1;
    LOBYTE(v103) = 2;
    v19 = v17;
    v21 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v103, v13, v20);
    v80 = v18;
    v81 = v21;
    v82 = v19;
    LOBYTE(v103) = 3;
    LODWORD(v18) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v103, v13, v22);
    v23 = sub_1004B804C(&qword_1013E8738);
    LOBYTE(v87) = 4;
    v24 = sub_1007C9D64();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v23, &v87, v13, v23, v24);
    v25 = v103;
    v79 = v104;
    v26 = sub_1004B804C(&qword_1013F3800);
    LOBYTE(v87) = 5;
    v27 = sub_1007C9DC8();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v26, &v87, v13, v26, v27);
    v65 = v103;
    v66 = v25;
    LODWORD(v25) = v104;
    LOBYTE(v87) = 6;
    v28 = sub_1007C9E2C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for CRLFillData, &v87, v13, &type metadata for CRLFillData, v28);
    v61 = v25;
    v64 = v103;
    v77 = v105;
    v78 = v104;
    v75 = v107;
    v76 = v106;
    v69 = v109;
    v70 = v108;
    v68 = v110;
    v73 = v112;
    v74 = v111;
    v71 = v114;
    v72 = v113;
    v29 = v115;
    v30 = v116;
    v62 = sub_1004B804C(&qword_1013F3B10);
    v63 = v30;
    LOBYTE(v87) = 7;
    v67 = v29;
    sub_1004C485C(v64, v78, v77, v76, v75, v70, v69, v68, v74, v73, v72, v71, v29, v30);
    v31 = sub_1007C9E70();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v62, &v87, v13, v62, v31);
    v32 = v103;
    LODWORD(v62) = v104;
    v33 = sub_1004B804C(&qword_1013E8758);
    LOBYTE(v87) = 8;
    v34 = sub_1007C9ED4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v33, &v87, v13, v33, v34);
    v60 = v103;
    v59 = v104;
    v35 = sub_1004B804C(&qword_1013E8708);
    LOBYTE(v87) = 9;
    v36 = sub_1007C9F38();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v35, &v87, v13, v35, v36);
    v58 = v103;
    v57 = v104;
    LOBYTE(v103) = 10;
    v37 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v103, v150);
    v56 = v38 & 1;
    v141 = v38 & 1;
    v39 = sub_1004B804C((uint64_t *)&unk_1013F3CF0);
    v138 = 11;
    v40 = sub_1004F3130();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v39, &v138, v150, v39, v40);
    (*(void (**)(char *, uint64_t))(v86 + 8))(v7, v150);
    v150 = v139;
    swift_bridgeObjectRetain(v139);
    swift_bridgeObjectRelease();
    BYTE8(v88) = v80;
    BYTE8(v101) = v56;
    v41 = v83;
    *(_QWORD *)&v87 = v14;
    *((_QWORD *)&v87 + 1) = v83;
    LOBYTE(v39) = v84;
    LOBYTE(v88) = v84;
    DWORD1(v88) = v82;
    BYTE9(v88) = v81;
    HIDWORD(v53) = v18;
    BYTE10(v88) = v18;
    *(_QWORD *)&v89 = v66;
    BYTE8(v89) = v79;
    *(_QWORD *)&v90 = v65;
    BYTE8(v90) = v61;
    *(_QWORD *)&v91 = v64;
    *((_QWORD *)&v91 + 1) = v78;
    *(_QWORD *)&v92 = v77;
    *((_QWORD *)&v92 + 1) = v76;
    *(_QWORD *)&v93 = v75;
    *((_QWORD *)&v93 + 1) = v70;
    *(_QWORD *)&v94 = v69;
    *((_QWORD *)&v94 + 1) = v68;
    *(_QWORD *)&v95 = v74;
    *((_QWORD *)&v95 + 1) = v73;
    *(_QWORD *)&v96 = v72;
    *((_QWORD *)&v96 + 1) = v71;
    *(_QWORD *)&v97 = v67;
    *((_QWORD *)&v97 + 1) = v63;
    v54 = v32;
    v55 = v37;
    *(_QWORD *)&v98 = v32;
    BYTE8(v98) = v62;
    *(_QWORD *)&v99 = v60;
    BYTE8(v99) = v59;
    *(_QWORD *)&v100 = v58;
    BYTE8(v100) = v57;
    *(_QWORD *)&v101 = v37;
    v102 = v150;
    sub_1005630DC((uint64_t)&v87);
    swift_bridgeObjectRelease();
    v42 = v69;
    v43 = v70;
    v44 = v68;
    sub_1004C4174(v64, v78, v77, v76, v75, v70, v69, v68, v74, v73, v72, v71, v67, v63);
    sub_1004C4218(v14, v41, v39);
    _s8Freeform26AnyCRLCommandChangeContextVwxx_0(a1);
    v103 = v14;
    v104 = v41;
    LOBYTE(v105) = v39;
    *(_WORD *)((char *)&v105 + 1) = v148;
    BYTE3(v105) = v149;
    HIDWORD(v105) = v82;
    LOBYTE(v106) = v147;
    BYTE1(v106) = v81;
    BYTE2(v106) = BYTE4(v53);
    *(_DWORD *)((char *)&v106 + 3) = *(_DWORD *)&v146[7];
    HIBYTE(v106) = v146[11];
    v107 = v66;
    LOBYTE(v108) = v79;
    HIDWORD(v108) = *(_DWORD *)&v146[3];
    *(_DWORD *)((char *)&v108 + 1) = *(_DWORD *)v146;
    v109 = v65;
    LOBYTE(v110) = v61;
    *(_DWORD *)((char *)&v110 + 1) = *(_DWORD *)v145;
    HIDWORD(v110) = *(_DWORD *)&v145[3];
    v111 = v64;
    v112 = v78;
    v113 = v77;
    v114 = v76;
    v115 = v75;
    v116 = v43;
    v117 = v42;
    v118 = v44;
    v119 = v74;
    v120 = v73;
    v121 = v72;
    v122 = v71;
    v123 = v67;
    v124 = v63;
    v125 = v54;
    v126 = v62;
    *(_DWORD *)&v127[3] = *(_DWORD *)&v144[3];
    *(_DWORD *)v127 = *(_DWORD *)v144;
    v128 = v60;
    v129 = v59;
    *(_DWORD *)&v130[3] = *(_DWORD *)&v143[3];
    *(_DWORD *)v130 = *(_DWORD *)v143;
    v131 = v58;
    v132 = v57;
    *(_DWORD *)&v133[3] = *(_DWORD *)&v142[3];
    *(_DWORD *)v133 = *(_DWORD *)v142;
    v134 = v55;
    v135 = v141;
    *(_DWORD *)&v136[3] = *(_DWORD *)&v140[3];
    *(_DWORD *)v136 = *(_DWORD *)v140;
    v137 = v150;
    sub_1007844D4((uint64_t)&v103);
    v45 = v100;
    v46 = v85;
    *(_OWORD *)(v85 + 192) = v99;
    *(_OWORD *)(v46 + 208) = v45;
    *(_OWORD *)(v46 + 224) = v101;
    *(_QWORD *)(v46 + 240) = v102;
    v47 = v96;
    *(_OWORD *)(v46 + 128) = v95;
    *(_OWORD *)(v46 + 144) = v47;
    v48 = v98;
    *(_OWORD *)(v46 + 160) = v97;
    *(_OWORD *)(v46 + 176) = v48;
    v49 = v92;
    *(_OWORD *)(v46 + 64) = v91;
    *(_OWORD *)(v46 + 80) = v49;
    v50 = v94;
    *(_OWORD *)(v46 + 96) = v93;
    *(_OWORD *)(v46 + 112) = v50;
    v51 = v88;
    *(_OWORD *)v46 = v87;
    *(_OWORD *)(v46 + 16) = v51;
    v52 = v90;
    *(_OWORD *)(v46 + 32) = v89;
    *(_OWORD *)(v46 + 48) = v52;
  }
}

unint64_t sub_1007C9D00()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1013F30F0;
  if (!qword_1013F30F0)
  {
    v1 = sub_1004CB6A4(&qword_1013F3890);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> CRExtensible<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1013F30F0);
  }
  return result;
}

unint64_t sub_1007C9D64()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1013F30F8;
  if (!qword_1013F30F8)
  {
    v1 = sub_1004CB6A4(&qword_1013E8738);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> CRExtensible<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1013F30F8);
  }
  return result;
}

unint64_t sub_1007C9DC8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1013F3100;
  if (!qword_1013F3100)
  {
    v1 = sub_1004CB6A4(&qword_1013F3800);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> CRExtensible<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1013F3100);
  }
  return result;
}

unint64_t sub_1007C9E2C()
{
  unint64_t result;

  result = qword_1013F3108;
  if (!qword_1013F3108)
  {
    result = swift_getWitnessTable(&unk_100F33C84, &type metadata for CRLFillData);
    atomic_store(result, (unint64_t *)&qword_1013F3108);
  }
  return result;
}

unint64_t sub_1007C9E70()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1013F3110;
  if (!qword_1013F3110)
  {
    v1 = sub_1004CB6A4(&qword_1013F3B10);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> CRExtensible<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1013F3110);
  }
  return result;
}

unint64_t sub_1007C9ED4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1013F3118;
  if (!qword_1013F3118)
  {
    v1 = sub_1004CB6A4(&qword_1013E8758);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> CRExtensible<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1013F3118);
  }
  return result;
}

unint64_t sub_1007C9F38()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1013F3120;
  if (!qword_1013F3120)
  {
    v1 = sub_1004CB6A4(&qword_1013E8708);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> CRExtensible<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1013F3120);
  }
  return result;
}

unint64_t sub_1007C9F9C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1013F3130;
  if (!qword_1013F3130)
  {
    v1 = sub_1004CB6A4(&qword_1013F3890);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> CRExtensible<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1013F3130);
  }
  return result;
}

unint64_t sub_1007CA000()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1013F3138;
  if (!qword_1013F3138)
  {
    v1 = sub_1004CB6A4(&qword_1013E8738);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> CRExtensible<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1013F3138);
  }
  return result;
}

unint64_t sub_1007CA064()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1013F3140;
  if (!qword_1013F3140)
  {
    v1 = sub_1004CB6A4(&qword_1013F3800);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> CRExtensible<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1013F3140);
  }
  return result;
}

unint64_t sub_1007CA0C8()
{
  unint64_t result;

  result = qword_1013F3150;
  if (!qword_1013F3150)
  {
    result = swift_getWitnessTable(&unk_100F33C5C, &type metadata for CRLFillData);
    atomic_store(result, (unint64_t *)&qword_1013F3150);
  }
  return result;
}

unint64_t sub_1007CA10C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1013F3158;
  if (!qword_1013F3158)
  {
    v1 = sub_1004CB6A4(&qword_1013F3B10);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> CRExtensible<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1013F3158);
  }
  return result;
}

unint64_t sub_1007CA170()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1013F3160;
  if (!qword_1013F3160)
  {
    v1 = sub_1004CB6A4(&qword_1013E8758);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> CRExtensible<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1013F3160);
  }
  return result;
}

unint64_t sub_1007CA1D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1013F3168;
  if (!qword_1013F3168)
  {
    v1 = sub_1004CB6A4(&qword_1013E8708);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> CRExtensible<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1013F3168);
  }
  return result;
}

unint64_t sub_1007CA238()
{
  unint64_t result;

  result = qword_1013F3170;
  if (!qword_1013F3170)
  {
    result = swift_getWitnessTable(&unk_100F0C1E4, &type metadata for CRLWPTextPresetData);
    atomic_store(result, (unint64_t *)&qword_1013F3170);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CRLWPTextPresetData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_1007CA2C8 + 4 * byte_100F0BF11[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_1007CA2FC + 4 * byte_100F0BF0C[v4]))();
}

uint64_t sub_1007CA2FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1007CA304(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1007CA30CLL);
  return result;
}

uint64_t sub_1007CA318(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1007CA320);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_1007CA324(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1007CA32C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CRLWPTextPresetData.CodingKeys()
{
  return &type metadata for CRLWPTextPresetData.CodingKeys;
}

unint64_t sub_1007CA34C()
{
  unint64_t result;

  result = qword_1013F3178;
  if (!qword_1013F3178)
  {
    result = swift_getWitnessTable(&unk_100F0C468, &type metadata for CRLWPTextPresetData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1013F3178);
  }
  return result;
}

double *sub_1007CA390()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t Strong;
  void *v6;
  void *v7;
  Class isa;
  double v9;
  uint64_t v10;
  id v11;
  void *v12;
  Class v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  double *v22;
  unint64_t v23;
  unint64_t v24;
  double *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char isUniquelyReferenced_nonNull_native;
  __n128 v30;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[2];
  double *v35;
  uint64_t v36;

  v1 = type metadata accessor for PKDrawing(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Strong = swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR____TtC8Freeform26CRLPKDrawingIndexableModel_container);
  if (Strong)
  {
    v6 = (void *)Strong;
    v7 = (void *)objc_opt_self(CRLPKDrawingProvider);
    isa = (Class)objc_msgSend(v7, "allDrawingItemsDescendedFromContainer:", v6);
    if (!isa)
    {
      v10 = type metadata accessor for CRLFreehandDrawingItem(0);
      static Array._unconditionallyBridgeFromObjectiveC(_:)(0, v10);
      isa = Array._bridgeToObjectiveC()().super.isa;
      *(_QWORD *)&v9 = swift_bridgeObjectRelease().n128_u64[0];
    }
    v11 = objc_msgSend(v7, "makePKDrawingFromDrawingItems:", isa, v9);

    static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v12 = (void *)objc_opt_self(CRLiOSPKDrawingIndexableContentHelper);
    v13 = PKDrawing._bridgeToObjectiveC()().super.isa;
    v14 = objc_msgSend(v12, "indexableStringFromDrawing:", v13);

    if (v14)
    {
      v32 = v2;
      v33 = v1;
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      v17 = v16;

      v35 = (double *)v15;
      v36 = v17;
      v34[0] = 10;
      v34[1] = 0xE100000000000000;
      v18 = sub_1004D292C();
      v19 = StringProtocol.components<A>(separatedBy:)(v34, &type metadata for String, &type metadata for String, v18, v18);
      swift_bridgeObjectRelease();
      v20 = *(_QWORD *)(v19 + 16);
      if (v20)
      {
        v21 = (_QWORD *)(v19 + 40);
        v22 = _swiftEmptyArrayStorage;
        do
        {
          v26 = *(v21 - 1);
          v27 = *v21;
          v28 = HIBYTE(*v21) & 0xFLL;
          if ((*v21 & 0x2000000000000000) == 0)
            v28 = v26 & 0xFFFFFFFFFFFFLL;
          if (v28)
          {
            swift_bridgeObjectRetain(*v21);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v22);
            v35 = v22;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_1006006EC(0, *((_QWORD *)v22 + 2) + 1, 1);
              v22 = v35;
            }
            v24 = *((_QWORD *)v22 + 2);
            v23 = *((_QWORD *)v22 + 3);
            if (v24 >= v23 >> 1)
            {
              sub_1006006EC(v23 > 1, v24 + 1, 1);
              v22 = v35;
            }
            *((_QWORD *)v22 + 2) = v24 + 1;
            v25 = &v22[2 * v24];
            *((_QWORD *)v25 + 4) = v26;
            *((_QWORD *)v25 + 5) = v27;
          }
          v21 += 2;
          --v20;
        }
        while (v20);
      }
      else
      {
        v22 = _swiftEmptyArrayStorage;
      }

      v30 = swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t, __n128))(v32 + 8))(v4, v33, v30);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    v22 = _swiftEmptyArrayStorage;
    sub_100757E04(&_mh_execute_header, (uint64_t)"stringContentForSearch", 22, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLPKDrawingIndexableModel.swift", 97, 2, 21, "invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"stringContentForSearch", 22, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLPKDrawingIndexableModel.swift", 97, 2u, 21, (uint64_t)"invalid nil found when unwrapping value", 39, 2u);
  }
  return v22;
}

id sub_1007CA70C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CRLPKDrawingIndexableModel();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CRLPKDrawingIndexableModel()
{
  return objc_opt_self(_TtC8Freeform26CRLPKDrawingIndexableModel);
}

void sub_1007CA770(void *a1, uint64_t a2, uint64_t a3, char a4, void *a5, void *a6, void *a7, UIFontWeight a8)
{
  void *v15;
  id v16;
  void *v17;
  id v18;
  double v19;
  id v20;
  double v21;
  UIImageSymbolWeight v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  Class isa;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  id v33;
  Class v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  id v39;
  Class v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  void *v46;
  id v48;

  if (a1)
  {
    v15 = (void *)objc_opt_self(UIFontDescriptor);
    v45 = a1;
    v16 = objc_msgSend(v15, "preferredFontDescriptorWithTextStyle:", a2);
    v17 = (void *)objc_opt_self(UIFont);
    objc_msgSend(v16, "pointSize");
    v18 = objc_msgSend(v17, "systemFontOfSize:weight:");

    v46 = v18;
    if ((a4 & 1) != 0)
    {
      v20 = objc_msgSend(v18, "fontDescriptor");
      objc_msgSend(v20, "pointSize");
      v19 = v21;

    }
    else
    {
      v19 = *(double *)&a3;
    }
    v22 = UIImageSymbolWeightForFontWeight(a8);
    v23 = (void *)objc_opt_self(UIImageSymbolConfiguration);
    v24 = objc_msgSend(v23, "configurationWithPointSize:weight:", v22, v19);
    v25 = sub_1004B804C((uint64_t *)&unk_1013E4180);
    v26 = swift_allocObject(v25, 40, 7);
    *(_OWORD *)(v26 + 16) = xmmword_100EEF400;
    *(_QWORD *)(v26 + 32) = a5;
    specialized Array._endMutation()(v26);
    sub_1007CABF0();
    v27 = a5;
    isa = Array._bridgeToObjectiveC()().super.isa;
    v29 = objc_msgSend(v23, "configurationWithPaletteColors:", isa, swift_bridgeObjectRelease().n128_f64[0]);

    v30 = objc_msgSend(v24, "configurationByApplyingConfiguration:", v29);
    v31 = objc_msgSend(v45, "imageByApplyingSymbolConfiguration:", v30);
    objc_msgSend(v44, "setImage:forState:", v31, 0);

    if (a6)
    {
      v32 = swift_allocObject(v25, 40, 7);
      *(_OWORD *)(v32 + 16) = xmmword_100EEF400;
      *(_QWORD *)(v32 + 32) = a6;
      specialized Array._endMutation()(v32);
      v33 = a6;
      v34 = Array._bridgeToObjectiveC()().super.isa;
      v35 = objc_msgSend(v23, "configurationWithPaletteColors:", v34, swift_bridgeObjectRelease().n128_f64[0]);

      v36 = objc_msgSend(v30, "configurationByApplyingConfiguration:", v35);
      v37 = objc_msgSend(v45, "imageByApplyingSymbolConfiguration:", v36);
      objc_msgSend(v44, "setImage:forState:", v37, 2);

    }
    if (a7)
    {
      v38 = swift_allocObject(v25, 40, 7);
      *(_OWORD *)(v38 + 16) = xmmword_100EEF400;
      *(_QWORD *)(v38 + 32) = a7;
      specialized Array._endMutation()(v38);
      v39 = a7;
      v40 = Array._bridgeToObjectiveC()().super.isa;
      v41 = objc_msgSend(v23, "configurationWithPaletteColors:", v40, swift_bridgeObjectRelease().n128_f64[0]);

      v42 = objc_msgSend(v30, "configurationByApplyingConfiguration:", v41);
      v43 = objc_msgSend(v45, "imageByApplyingSymbolConfiguration:", v42);
      objc_msgSend(v44, "setImage:forState:", v43, 1);

    }
    v48 = String._bridgeToObjectiveC()();
    objc_msgSend(v44, "setAccessibilityLabel:", v48);

  }
}

unint64_t sub_1007CABF0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1013F4260;
  if (!qword_1013F4260)
  {
    v1 = objc_opt_self(UIColor);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1013F4260);
  }
  return result;
}

id sub_1007CAC2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t inited;
  uint64_t ObjectType;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  __n128 v23;
  _BYTE v25[72];
  __int128 v26[2];
  uint64_t v27;
  _QWORD v28[2];
  _QWORD v29[3];
  uint64_t v30;
  uint64_t v31;

  v28[0] = a1;
  v28[1] = a2;
  swift_unknownObjectRetain(a1);
  v6 = sub_1004B804C((uint64_t *)&unk_1013E87C0);
  v7 = sub_1004B804C(&qword_1013F32C0);
  if ((swift_dynamicCast(v26, v28, v6, v7, 6) & 1) != 0)
  {
    sub_1004DB728(v26, (uint64_t)v29);
    v8 = v30;
    v9 = v31;
    sub_1004BB5A4(v29, v30);
    v10 = (id)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v9 + 8))(*(_QWORD *)(v3 + 16), a3, v8, v9);
    _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v29);
  }
  else
  {
    v27 = 0;
    memset(v26, 0, sizeof(v26));
    sub_1007CAE68((uint64_t)v26);
    if (qword_1013DD870 != -1)
      swift_once(&qword_1013DD870, sub_100A059E0);
    swift_beginAccess(&static OS_os_log.dataSync, v29, 0, 0);
    v11 = (void *)static OS_os_log.dataSync;
    v12 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    inited = swift_initStackObject(v12, v25);
    *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
    ObjectType = swift_getObjectType(a1);
    v10 = v11;
    v15 = _typeName(_:qualified:)(ObjectType, 0);
    v17 = v16;
    *(_QWORD *)(inited + 56) = &type metadata for String;
    v18 = sub_1004CFC2C();
    *(_QWORD *)(inited + 64) = v18;
    *(_QWORD *)(inited + 32) = v15;
    *(_QWORD *)(inited + 40) = v17;
    v19 = static os_log_type_t.error.getter(v18);
    sub_100A06EBC((uint64_t)v10, &_mh_execute_header, v19, "CRLBoardLogicProvider cannot create a cloud record from an unknown local record. Local Record: %{public}@", 105, 2, inited);
    swift_setDeallocating(inited);
    v20 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(inited + 32, 1, v20);

    v21 = sub_1007CAEA8();
    swift_allocError(&type metadata for CRLPublicCloudRecordProviderError, v21, 0, 0);
    *v22 = 1;
    swift_willThrow(v23);
  }
  return v10;
}

uint64_t type metadata accessor for CRLPublicCloudRecordProvider()
{
  return objc_opt_self(_TtC8Freeform28CRLPublicCloudRecordProvider);
}

uint64_t sub_1007CAE68(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1004B804C(&qword_1013F32C8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1007CAEA8()
{
  unint64_t result;

  result = qword_1013F32D0;
  if (!qword_1013F32D0)
  {
    result = swift_getWitnessTable(&unk_100F0C61C, &type metadata for CRLPublicCloudRecordProviderError);
    atomic_store(result, (unint64_t *)&qword_1013F32D0);
  }
  return result;
}

void sub_1007CAEEC(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v1 = CKRecord.recordType.getter(a1);
  v3 = v2;
  v4 = sub_100B38FCC(v1, v2);
  swift_bridgeObjectRelease(v3);
  __asm { BR              X10 }
}

uint64_t sub_1007CAF40()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t inited;
  id v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  __n128 v18;
  uint64_t v20;
  uint64_t v21;

  if (qword_1013DD870 != -1)
    swift_once(&qword_1013DD870, sub_100A059E0);
  swift_beginAccess(&static OS_os_log.dataSync, &v21, 0, 0);
  v1 = (void *)static OS_os_log.dataSync;
  v2 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v2, &v20);
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  v4 = v1;
  v6 = CKRecord.recordType.getter(v5);
  v8 = sub_100B38FCC(v6, v7);
  swift_bridgeObjectRelease();
  *(_BYTE *)(v0 - 33) = v8;
  v9 = sub_1004B804C(&qword_1013F32D8);
  v10 = String.init<A>(describing:)(v0 - 33, v9);
  v12 = v11;
  *(_QWORD *)(inited + 56) = &type metadata for String;
  v13 = sub_1004CFC2C();
  *(_QWORD *)(inited + 64) = v13;
  *(_QWORD *)(inited + 32) = v10;
  *(_QWORD *)(inited + 40) = v12;
  v14 = static os_log_type_t.error.getter(v13);
  sub_100A06EBC((uint64_t)v4, &_mh_execute_header, v14, "CRLPublicCloudRecordProvider should not be getting this non-public CloudRecord: recordType %{public}@.", 102, 2, inited);
  swift_setDeallocating(inited);
  v15 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(inited + 32, 1, v15);

  v16 = sub_1007CAEA8();
  swift_allocError(&type metadata for CRLPublicCloudRecordProviderError, v16, 0, 0);
  *v17 = 0;
  return swift_willThrow(v18);
}

uint64_t storeEnumTagSinglePayload for CRLPublicCloudRecordProviderError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1007CB1A0 + 4 * byte_100F0C545[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1007CB1D4 + 4 * byte_100F0C540[v4]))();
}

uint64_t sub_1007CB1D4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1007CB1DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1007CB1E4);
  return result;
}

uint64_t sub_1007CB1F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1007CB1F8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1007CB1FC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1007CB204(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CRLPublicCloudRecordProviderError()
{
  return &type metadata for CRLPublicCloudRecordProviderError;
}

unint64_t sub_1007CB224()
{
  unint64_t result;

  result = qword_1013F32E0;
  if (!qword_1013F32E0)
  {
    result = swift_getWitnessTable(&unk_100F0C5F4, &type metadata for CRLPublicCloudRecordProviderError);
    atomic_store(result, (unint64_t *)&qword_1013F32E0);
  }
  return result;
}

void sub_1007CB268()
{
  sub_1007D7EB0();
}

id sub_1007CB288(uint64_t a1)
{
  id *v1;

  return objc_msgSend(*v1, "characterAtIndex:", a1);
}

void sub_1007CB2AC(uint64_t a1, int64_t a2, uint64_t a3, int64_t a4, int a5)
{
  sub_1007D876C(a1, a2, a3, a4, a5);
}

uint64_t sub_1007CB2CC(uint64_t a1)
{
  return swift_getAtKeyPath(a1, a1);
}

uint64_t sub_1007CB2D4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_1007D2ED4(a1, a2, a3, (uint64_t *)&unk_1013EFD60);
}

uint64_t sub_1007CB2E0()
{
  uint64_t v0;

  v0 = sub_1004B804C((uint64_t *)&unk_1013EFD60);
  return dispatch thunk of Hashable.hashValue.getter(v0, &protocol witness table for AnyKeyPath);
}

uint64_t sub_1007CB324(uint64_t a1, _QWORD *a2)
{
  return swift_getAtKeyPath(a1, *a2);
}

double sub_1007CB32C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  double result;

  v4 = *a3;
  swift_retain(*a3);
  swift_setAtWritableKeyPath(a2, v4);
  *(_QWORD *)&result = swift_release(v4).n128_u64[0];
  return result;
}

uint64_t sub_1007CB364@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t KeyPath;
  uint64_t v17;
  __n128 v18;
  __n128 v19;
  _QWORD v21[6];

  v9 = *a1;
  v10 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16))(v14, v4 + *(int *)(a2 + 36), v10, v12);
  v15 = *(_QWORD *)(a2 + 24);
  v21[0] = *(_QWORD *)(a2 + 16);
  v21[1] = *(_QWORD *)(class metadata base offset for WritableKeyPath + v9 + 8);
  v21[2] = v15;
  v21[3] = a3;
  v21[4] = a1;
  KeyPath = swift_getKeyPath(&unk_100F0DF48);
  v17 = *(_QWORD *)(a3 + 8);
  v18 = swift_retain(a1);
  CRAttributedString.Attributes.subscript.getter(a4, KeyPath, v10, v17, v18);
  v19 = swift_release(KeyPath);
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v11 + 8))(v14, v10, v19);
}

void sub_1007CB480(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  id v17;
  uint64_t v19;
  id v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  char *v29;
  __n128 v30;
  Class isa;
  id v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;

  v2 = v1;
  v4 = type metadata accessor for CharacterSet(0);
  v36 = *(_QWORD *)(v4 - 8);
  v37 = v4;
  __chkstk_darwin(v4);
  v35 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1004B804C(&qword_1013F3D90);
  v38 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CRLWPStorageCRDTData(0);
  *(_QWORD *)&v13 = __chkstk_darwin(v12).n128_u64[0];
  v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = objc_msgSend(v2, "textRangeForParagraphAtCharIndex:", a1, v13);
  if (v17 != (id)0x7FFFFFFFFFFFFFFFLL || v16 != 0)
  {
    v19 = v16;
    v20 = objc_allocWithZone((Class)type metadata accessor for CRLTextRange());
    v34 = sub_10060EDE4((uint64_t)v17, v19);
    v21 = sub_1007D7CB8(*(_QWORD *)(v34 + OBJC_IVAR____TtC8Freeform12CRLTextRange_range), *(_QWORD *)(v34 + OBJC_IVAR____TtC8Freeform12CRLTextRange_range + 8), v39);
    v22 = (void *)v39[0];
    v23 = *(_QWORD *)(v39[0] + OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData);
    if (v23)
    {
      v24 = v39[1];
      v25 = v39[2];
      (*(void (**)(id))(*(_QWORD *)v23 + 760))(v21);
      sub_1004B8460((uint64_t)&v11[*(int *)(v9 + 20)], (uint64_t)v15, type metadata accessor for CRLWPStorageCRDTData);
      sub_1004B84A4((uint64_t)v11, type metadata accessor for CRLWPShapeItemCRDTData);
      v26 = sub_1004B804C((uint64_t *)&unk_1013E8570);
      CRAttributedString.subscript.getter(v24, v25, v26);
      sub_1004B84A4((uint64_t)v15, type metadata accessor for CRLWPStorageCRDTData);
      v27 = (void *)CRAttributedString.Substring.attributedString.getter(v6);
      (*(void (**)(char *, uint64_t))(v38 + 8))(v8, v6);
      v28 = objc_msgSend(v27, "string");

      if (v28)
      {

        v42 = v40;
        v43 = v41;
        sub_1005A73A4((id *)&v42);
        v29 = v35;
        static CharacterSet.newlines.getter(v30);
        isa = CharacterSet._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v36 + 8))(v29, v37);
        v32 = objc_msgSend(v28, "stringByTrimmingCharactersInSet:", isa);

        static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
}

void sub_1007CB78C(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  void *v23;
  id v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);

  v36 = a2;
  v37 = a3;
  v38 = a1;
  v4 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v35 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v35 - v8;
  v10 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CRLWPStorageCRDTData(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v35 - v18;
  v20 = OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData;
  v39 = v3;
  v21 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData);
  if (!v21)
  {
    __break(1u);
    goto LABEL_12;
  }
  (*(void (**)(__n128))(*(_QWORD *)v21 + 760))(v17);
  sub_1004B8460((uint64_t)&v12[*(int *)(v10 + 20)], (uint64_t)v19, type metadata accessor for CRLWPStorageCRDTData);
  sub_1004B84A4((uint64_t)v12, type metadata accessor for CRLWPShapeItemCRDTData);
  v22 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v22(v9, v19, v4);
  sub_1004B84A4((uint64_t)v19, type metadata accessor for CRLWPStorageCRDTData);
  v23 = (void *)CRAttributedString.attributedString.getter(v4);
  v40 = *(void (**)(char *, uint64_t))(v5 + 8);
  v40(v9, v4);
  v24 = objc_msgSend(v23, "length");

  v25 = v38;
  v26 = (uint64_t)v24 < v38;
  v27 = v39;
  if (v26)
  {
    v28 = *(_QWORD *)(v39 + v20);
    if (!v28)
    {
LABEL_13:
      __break(1u);
      return;
    }
    (*(void (**)(void))(*(_QWORD *)v28 + 760))();
    sub_1004B8460((uint64_t)&v12[*(int *)(v10 + 20)], (uint64_t)v19, type metadata accessor for CRLWPStorageCRDTData);
    sub_1004B84A4((uint64_t)v12, type metadata accessor for CRLWPShapeItemCRDTData);
    v22(v9, v19, v4);
    sub_1004B84A4((uint64_t)v19, type metadata accessor for CRLWPStorageCRDTData);
    v29 = (void *)CRAttributedString.attributedString.getter(v4);
    v40(v9, v4);
    v30 = objc_msgSend(v29, "length");

    v25 = (uint64_t)v30;
  }
  v31 = *(_QWORD *)(v27 + v20);
  if (!v31)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v32 = v25;
  (*(void (**)(void))(*(_QWORD *)v31 + 760))();
  sub_1004B8460((uint64_t)&v12[*(int *)(v10 + 20)], (uint64_t)v15, type metadata accessor for CRLWPStorageCRDTData);
  sub_1004B84A4((uint64_t)v12, type metadata accessor for CRLWPShapeItemCRDTData);
  v33 = v35;
  v22(v35, v15, v4);
  sub_1004B84A4((uint64_t)v15, type metadata accessor for CRLWPStorageCRDTData);
  if (v36 >= 3)
    v34 = 2;
  else
    v34 = v36;
  CRAttributedString.cursor(at:affinity:)(v32 & ~(v32 >> 63), v34, v4);
  v40(v33, v4);
}

void sub_1007CBAB8(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t (*v12)(_QWORD, __n128);
  id v13;
  __n128 v14;
  uint64_t v15;
  id v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  void *v20;
  void (*v21)(char *, uint64_t);
  int64_t v22;
  id v23;
  char *v24;
  NSString v25;
  NSString v26;
  id v27;
  uint64_t v28;
  int64_t v29;
  int64_t v30;
  __n128 v31;
  void *v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t KeyPath;
  id v39;
  void *v40;
  void (*v41)(char *, uint64_t);
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  _BYTE v49[248];
  void *v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  _QWORD v55[32];

  v45 = a1;
  v2 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v46);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CRLWPStorageCRDTData(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData);
  if (!v11)
    goto LABEL_11;
  v12 = *(uint64_t (**)(_QWORD, __n128))(*(_QWORD *)v11 + 440);
  v13 = *(id *)(v1 + OBJC_IVAR____TtC8Freeform12CRLWPStorage_store);
  v14 = swift_retain(v11);
  v15 = v12(0, v14);
  swift_release(v11);
  sub_10054F488((uint64_t)v49);
  sub_1004C4938((uint64_t)v49, (uint64_t)v55, &qword_1013E1B50);
  v16 = objc_allocWithZone((Class)type metadata accessor for CRLWPStorage());
  v17 = (char *)sub_1007E7114(v13, v15, v55);

  swift_release(v15);
  sub_1007DCF40();
  v44 = OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData;
  v18 = *(_QWORD *)&v17[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData];
  if (!v18)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 760))();
  sub_1004B8460((uint64_t)&v7[*(int *)(v46 + 20)], (uint64_t)v10, type metadata accessor for CRLWPStorageCRDTData);
  sub_1004B84A4((uint64_t)v7, type metadata accessor for CRLWPShapeItemCRDTData);
  v19 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  v19(v5, v10, v2);
  sub_1004B84A4((uint64_t)v10, type metadata accessor for CRLWPStorageCRDTData);
  v20 = (void *)CRAttributedString.attributedString.getter(v2);
  v21 = *(void (**)(char *, uint64_t))(v3 + 8);
  v21(v5, v2);
  v22 = (int64_t)objc_msgSend(v20, "length");

  if (v22 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v41 = v21;
  v42 = v19;
  v43 = v2;
  v23 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v24 = v17;
  v25 = String._bridgeToObjectiveC()();
  v26 = String._bridgeToObjectiveC()();
  v27 = objc_msgSend(v23, "localizedStringForKey:value:table:", v25, v26, 0);

  v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
  v30 = v29;

  sub_1007D876C(0, v22, v28, v30, 1);
  v31 = swift_bridgeObjectRelease(v30);
  v32 = v45;
  if (!v45)
    return;
  v33 = *(_QWORD *)&v24[v44];
  if (!v33)
  {
LABEL_13:
    __break(1u);
    return;
  }
  (*(void (**)(__n128))(*(_QWORD *)v33 + 760))(v31);
  sub_1004B8460((uint64_t)&v7[*(int *)(v46 + 20)], (uint64_t)v10, type metadata accessor for CRLWPStorageCRDTData);
  v34 = v32;
  sub_1004B84A4((uint64_t)v7, type metadata accessor for CRLWPShapeItemCRDTData);
  v35 = v43;
  v42(v5, v10, v43);
  sub_1004B84A4((uint64_t)v10, type metadata accessor for CRLWPStorageCRDTData);
  v36 = (void *)CRAttributedString.attributedString.getter(v35);
  v41(v5, v35);
  v37 = (uint64_t)objc_msgSend(v36, "length");

  if (v37 < 0)
    goto LABEL_10;
  KeyPath = swift_getKeyPath(&unk_100F0DB40);
  v39 = v34;
  sub_1007D7CB8(0, v37, &v50);
  v40 = v50;
  v53 = v51;
  v54 = v52;
  v47 = v51;
  v48 = v52;
  sub_100C67D2C((uint64_t)v32, 0, KeyPath);

  swift_release(KeyPath);
  sub_1005A73A4((id *)&v53);

}

uint64_t sub_1007CBF18(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

void sub_1007CBF2C(uint64_t a1, char *a2, unsigned int (*a3)(char *, uint64_t, uint64_t), uint64_t a4, _QWORD **a5)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  _QWORD *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  __n128 v55;
  _QWORD *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  NSString v65;
  NSString v66;
  double v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  NSURL *v83;
  void *v84;
  uint64_t v85;
  void *v86;
  __n128 v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t KeyPath;
  unint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  int64_t v106;
  int64_t v107;
  char isUniquelyReferenced_nonNull_native;
  int64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v113;
  BOOL v114;
  uint64_t v115;
  ValueMetadata *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  __int128 v127;
  _QWORD *v128;
  unsigned int (*v129)(char *, uint64_t, uint64_t);
  void *v130;
  _QWORD **v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  id v148;

  v131 = a5;
  v142 = a4;
  v129 = a3;
  v133 = a1;
  v6 = sub_1004B804C(&qword_1013F3C80);
  v135 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v117 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1004B804C(&qword_1013F3C78);
  __chkstk_darwin(v9);
  v11 = (char *)&v117 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = (_QWORD *)sub_1004B804C(&qword_1013F3D90);
  *(_QWORD *)&v127 = *(v128 - 1);
  __chkstk_darwin(v128);
  v121 = (char *)&v117 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = sub_1004B804C(&qword_1013F3C90);
  v123 = *(_QWORD *)(v140 - 8);
  v13 = __chkstk_darwin(v140);
  v120 = (char *)&v117 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v139 = (char *)&v117 - v15;
  v16 = sub_1004B804C(&qword_1013E04D0);
  __chkstk_darwin(v16);
  v141 = (uint64_t)&v117 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for CRLWPHyperlinkSmartFieldData(0);
  v145 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v144 = (uint64_t)&v117 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v146 = sub_1004B804C((uint64_t *)&unk_1013E87B0);
  v136 = *(_QWORD *)(v146 - 8);
  __chkstk_darwin(v146);
  v138 = (uint64_t *)((char *)&v117 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = sub_1004B804C((uint64_t *)&unk_1013E87D0);
  v22 = __chkstk_darwin(v21);
  v137 = (char *)&v117 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v132 = (uint64_t *)((char *)&v117 - v24);
  v118 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
  v119 = *(_QWORD *)(v118 - 8);
  __chkstk_darwin(v118);
  v26 = (char *)&v117 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v143);
  v28 = (char *)&v117 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for CRLWPStorageCRDTData(0);
  __chkstk_darwin(v29);
  v31 = (char *)&v117 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v125 = *(_QWORD *)(v124 - 8);
  v32 = __chkstk_darwin(v124);
  v122 = (char *)&v117 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v35 = (char *)&v117 - v34;
  v147 = (char *)_swiftEmptyArrayStorage;
  v36 = objc_msgSend(a2, "characterCount");
  v130 = a2;
  v37 = *(_QWORD *)&a2[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData];
  v134 = v18;
  if (v36)
  {
    if (v37)
    {
      (*(void (**)(void))(*(_QWORD *)v37 + 760))();
      sub_1004B8460((uint64_t)&v28[*(int *)(v143 + 20)], (uint64_t)v31, type metadata accessor for CRLWPStorageCRDTData);
      sub_1004B84A4((uint64_t)v28, type metadata accessor for CRLWPShapeItemCRDTData);
      v38 = v124;
      (*(void (**)(char *, char *, uint64_t))(v125 + 16))(v122, v31, v124);
      sub_1004B84A4((uint64_t)v31, type metadata accessor for CRLWPStorageCRDTData);
      v39 = v121;
      CRAttributedString.subscript.getter(v129, v142, v38);
      v40 = v120;
      v41 = v128;
      CRAttributedString.Substring.runs.getter(v128);
      (*(void (**)(char *, _QWORD *))(v127 + 8))(v39, v41);
      v42 = v140;
      (*(void (**)(char *, char *, uint64_t))(v123 + 32))(v139, v40, v140);
      CRAttributedString.Runs.next()(v42);
      v129 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v135 + 48);
      if (v129(v11, 1, v6) == 1)
      {
LABEL_4:
        (*(void (**)(char *, uint64_t))(v123 + 8))(v139, v140);
        sub_1007D3AF0();
        (*(void (**)(char *, uint64_t))(v125 + 8))(v122, v124);
        v18 = v134;
LABEL_7:
        v58 = v147;
        v59 = *((_QWORD *)v147 + 2);
        v60 = (uint64_t)v137;
        v61 = (uint64_t)v138;
        if (v59)
        {
          v62 = (uint64_t)&v147[(*(unsigned __int8 *)(v136 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v136 + 80)];
          v63 = *(_QWORD *)(v136 + 72);
          v139 = v147;
          v140 = v63;
          do
          {
            sub_1004CB7BC(v62, v61, (uint64_t *)&unk_1013E87B0);
            sub_1004CB7BC(v61 + *(int *)(v146 + 36), v60, (uint64_t *)&unk_1013E87D0);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v145 + 48))(v60, 1, v18) == 1)
            {
              sub_1004CB800(v60, (uint64_t *)&unk_1013E87D0);
              sub_1004CB800(v61, (uint64_t *)&unk_1013E87B0);
            }
            else
            {
              v69 = v60;
              v70 = v144;
              sub_1007EC108(v69, v144);
              v71 = (uint64_t *)(v70 + *(int *)(v18 + 24));
              v72 = v71[1];
              v73 = v130;
              v74 = sub_1007DC71C(*v71, v72);
              v76 = v75;
              v77 = v141;
              sub_1004CB7BC(v70 + *(int *)(v18 + 20), v141, &qword_1013E04D0);
              v142 = v76;
              v143 = v74;
              v78 = objc_msgSend(v73, "stringEquivalentFromRange:", v74, v76);
              static String._unconditionallyBridgeFromObjectiveC(_:)(v78);
              v80 = v79;

              v81 = type metadata accessor for URL(0);
              v82 = *(_QWORD *)(v81 - 8);
              LODWORD(v77) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v82 + 48))(v77, 1, v81);
              swift_bridgeObjectRetain(v72);
              v84 = 0;
              if ((_DWORD)v77 != 1)
              {
                v85 = v141;
                URL._bridgeToObjectiveC()(v83);
                v84 = v86;
                (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v85, v81);
              }
              v64 = objc_allocWithZone((Class)CRLWPHyperlinkField);
              v65 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease(v80);
              v66 = String._bridgeToObjectiveC()();
              *(_QWORD *)&v67 = swift_bridgeObjectRelease(v72).n128_u64[0];
              v68 = objc_msgSend(v64, "initWithURL:range:displayText:uuidString:", v84, v143, v142, v65, v66, v67);

              v148 = v68;
              v61 = (uint64_t)v138;
              sub_1007E49C4(&v148, *v138, v138[1], v131);

              sub_1004B84A4(v144, type metadata accessor for CRLWPHyperlinkSmartFieldData);
              sub_1004CB800(v61, (uint64_t *)&unk_1013E87B0);
              v18 = v134;
              v60 = (uint64_t)v137;
              v63 = v140;
            }
            v62 += v63;
            --v59;
          }
          while (v59);
          v58 = v139;
        }
        swift_bridgeObjectRelease(v58);
        return;
      }
      v128 = *(_QWORD **)(v135 + 32);
      v127 = xmmword_100EF5E40;
      v126 = v11;
      ((void (*)(char *, char *, uint64_t))v128)(v8, v11, v6);
      while (1)
      {
        v89 = sub_1004B804C(&qword_1013F3D98);
        v90 = *(_QWORD *)(v136 + 72);
        v91 = *(unsigned __int8 *)(v136 + 80);
        v92 = (v91 + 32) & ~v91;
        v93 = swift_allocObject(v89, v92 + v90, v91 | 7);
        *(_OWORD *)(v93 + 16) = v127;
        v94 = (uint64_t *)(v93 + v92);
        v95 = CRAttributedString.Runs.Run.range.getter(v6);
        v142 = v96;
        v143 = v95;
        __chkstk_darwin(v95);
        v116 = &type metadata for CRLWPHyperlinkAttribute;
        sub_1007EC194();
        v97 = v6;
        v98 = v133;
        KeyPath = swift_getKeyPath(&unk_100F0DDA8);
        v100 = sub_1007E6AC0();
        v101 = v98;
        v6 = v97;
        swift_retain(v101);
        v102 = v132;
        CRAttributedString.Runs.Run.subscript.getter(KeyPath, v6, v100);
        swift_release(KeyPath);
        v103 = v142;
        *v94 = v143;
        v94[1] = v103;
        sub_1004C4938((uint64_t)v102, v93 + v92 + *(int *)(v146 + 36), (uint64_t *)&unk_1013E87D0);
        v104 = *(_QWORD *)(v93 + 16);
        v105 = (unint64_t)v147;
        v106 = *((_QWORD *)v147 + 2);
        v107 = v106 + v104;
        if (__OFADD__(v106, v104))
        {
          __break(1u);
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
        }
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v147);
        if ((isUniquelyReferenced_nonNull_native & 1) != 0 && v107 <= *(_QWORD *)(v105 + 24) >> 1)
        {
          if (!v104)
            goto LABEL_18;
        }
        else
        {
          if (v106 <= v107)
            v109 = v106 + v104;
          else
            v109 = v106;
          v105 = sub_100D0FD48(isUniquelyReferenced_nonNull_native, v109, 1, v105);
          v147 = (char *)v105;
          if (!v104)
            goto LABEL_18;
        }
        v110 = *(_QWORD *)(v105 + 16);
        if ((*(_QWORD *)(v105 + 24) >> 1) - v110 < v104)
          goto LABEL_38;
        v111 = v105 + v92 + v110 * v90;
        if ((unint64_t)v94 < v111 + v104 * v90 && v111 < (unint64_t)v94 + v104 * v90)
          goto LABEL_42;
        swift_arrayInitWithCopy(v111);
        v113 = *(_QWORD *)(v105 + 16);
        v114 = __OFADD__(v113, v104);
        v115 = v113 + v104;
        if (v114)
          goto LABEL_39;
        *(_QWORD *)(v105 + 16) = v115;
LABEL_18:
        v87 = swift_bridgeObjectRelease(v93);
        (*(void (**)(char *, uint64_t, __n128))(v135 + 8))(v8, v6, v87);
        v88 = v126;
        CRAttributedString.Runs.next()(v140);
        if (v129(v88, 1, v6) == 1)
          goto LABEL_4;
        ((void (*)(char *, char *, uint64_t))v128)(v8, v88, v6);
      }
    }
    __break(1u);
  }
  else if (v37)
  {
    v43 = v26;
    (*(void (**)(void))(*(_QWORD *)v37 + 760))();
    sub_1004B8460((uint64_t)&v28[*(int *)(v143 + 20)], (uint64_t)v31, type metadata accessor for CRLWPStorageCRDTData);
    sub_1004B84A4((uint64_t)v28, type metadata accessor for CRLWPShapeItemCRDTData);
    v44 = v35;
    v45 = v124;
    (*(void (**)(char *, char *, uint64_t))(v125 + 16))(v35, &v31[*(int *)(v29 + 20)], v124);
    sub_1004B84A4((uint64_t)v31, type metadata accessor for CRLWPStorageCRDTData);
    v46 = v43;
    CRAttributedString.attributes(at:effectiveRange:)(0, 0, v45);
    v47 = sub_1004B804C(&qword_1013F3D98);
    v48 = *(unsigned __int8 *)(v136 + 80);
    v49 = (v48 + 32) & ~v48;
    v50 = swift_allocObject(v47, v49 + *(_QWORD *)(v136 + 72), v48 | 7);
    *(_OWORD *)(v50 + 16) = xmmword_100EF5E40;
    v51 = (_QWORD *)(v50 + v49);
    __chkstk_darwin(v50);
    sub_1007EC194();
    v52 = v133;
    v53 = swift_getKeyPath(&unk_100F0DDA8);
    v54 = sub_1007E6AC0();
    v55 = swift_retain(v52);
    v56 = v132;
    v57 = v118;
    CRAttributedString.Attributes.subscript.getter(v132, v53, v118, v54, v55);
    swift_release(v53);
    *v51 = 0;
    v51[1] = 0;
    sub_1004C4938((uint64_t)v56, (uint64_t)v51 + *(int *)(v146 + 36), (uint64_t *)&unk_1013E87D0);
    sub_10061F9F4(v50);
    (*(void (**)(char *, uint64_t))(v119 + 8))(v46, v57);
    (*(void (**)(char *, uint64_t))(v125 + 8))(v44, v45);
    goto LABEL_7;
  }
  __break(1u);
LABEL_42:
  LOBYTE(v116) = 2;
  _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, (_DWORD)v116, 1092, 0);
  __break(1u);
}

void sub_1007CCB94(uint64_t a1, char *a2, unsigned int (*a3)(_QWORD *, uint64_t, uint64_t), uint64_t a4, Swift::Int *a5)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  char *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  double *v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  __n128 v45;
  _BYTE *v46;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v48;
  unint64_t v49;
  double *v50;
  uint64_t v51;
  uint64_t v52;
  float v53;
  int v54;
  id v55;
  id v56;
  double v57;
  id v58;
  __n128 v59;
  Swift::Int v60;
  unint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  double *v65;
  uint64_t v66;
  _BOOL8 v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  int v71;
  id v72;
  id v73;
  double v74;
  id v75;
  __n128 v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  double *v80;
  uint64_t v81;
  _BOOL8 v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  __n128 v88;
  uint64_t v89;
  Swift::Int v90;
  unint64_t v91;
  double *v92;
  uint64_t v93;
  uint64_t v94;
  __n128 v95;
  uint64_t v96;
  double *v97;
  uint64_t v98;
  uint64_t v99;
  BOOL v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _BYTE *v104;
  Swift::Int v105;
  char v106;
  char v107;
  char v108;
  char v109;
  char v110;
  char v111;
  Swift::Int v112;
  double *v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t KeyPath;
  unint64_t v121;
  uint64_t v122;
  int v123;
  char v124;
  unint64_t v125;
  unint64_t v126;
  double *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  _QWORD *v140;
  unsigned int (*v141)(_QWORD *, uint64_t, uint64_t);
  uint64_t v142;
  char *v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  Swift::Int *v147;
  char *v148;
  uint64_t v149;
  _BYTE v150[248];
  _QWORD v151[2];
  float v152;
  unsigned __int8 v153;
  _QWORD v154[31];
  _QWORD v155[31];
  double *v156;

  v147 = a5;
  v148 = (char *)a4;
  v141 = a3;
  v142 = a1;
  v6 = sub_1004B804C(&qword_1013F3C80);
  v144 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v129 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1004B804C(&qword_1013F3C78);
  __chkstk_darwin(v9);
  v143 = (char *)&v129 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = (_QWORD *)sub_1004B804C(&qword_1013F3D90);
  v133 = *(v140 - 1);
  __chkstk_darwin(v140);
  v132 = (char *)&v129 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v146 = sub_1004B804C(&qword_1013F3C90);
  v135 = *(_QWORD *)(v146 - 8);
  __chkstk_darwin(v146);
  v131 = (char *)&v129 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v145 = (char *)&v129 - v14;
  v130 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
  v15 = *(char **)(v130 - 8);
  __chkstk_darwin(v130);
  v17 = (char *)&v129 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v139);
  v138 = (char *)&v129 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for CRLWPStorageCRDTData(0);
  __chkstk_darwin(v19);
  v21 = (char *)&v129 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v136 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v134 = (char *)&v129 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v25 = __chkstk_darwin(v24).n128_u64[0];
  v27 = (char *)&v129 - v26;
  v156 = _swiftEmptyArrayStorage;
  v28 = objc_msgSend(a2, "characterCount", v25);
  v137 = a2;
  v29 = *(_QWORD *)&a2[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData];
  if (v28)
  {
    if (!v29)
      goto LABEL_101;
    v30 = (uint64_t)v138;
    (*(void (**)(void))(*(_QWORD *)v29 + 760))();
    sub_1004B8460(v30 + *(int *)(v139 + 20), (uint64_t)v21, type metadata accessor for CRLWPStorageCRDTData);
    sub_1004B84A4(v30, type metadata accessor for CRLWPShapeItemCRDTData);
    (*(void (**)(char *, char *, uint64_t))(v136 + 16))(v134, v21, v22);
    sub_1004B84A4((uint64_t)v21, type metadata accessor for CRLWPStorageCRDTData);
    v31 = v132;
    v130 = v22;
    CRAttributedString.subscript.getter(v141, v148, v22);
    v32 = v131;
    v33 = v140;
    CRAttributedString.Substring.runs.getter(v140);
    (*(void (**)(char *, _QWORD *))(v133 + 8))(v31, v33);
    v34 = v146;
    (*(void (**)(char *, char *, uint64_t))(v135 + 32))(v145, v32, v146);
    v35 = v143;
    CRAttributedString.Runs.next()(v34);
    v141 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v144 + 48);
    if (v141(v35, 1, v6) != 1)
    {
      v113 = _swiftEmptyArrayStorage;
      v140 = *(_QWORD **)(v144 + 32);
      do
      {
        ((void (*)(char *, _QWORD *, uint64_t))v140)(v8, v35, v6);
        v148 = (char *)CRAttributedString.Runs.Run.range.getter(v6);
        v115 = v114;
        __chkstk_darwin(v148);
        *(&v129 - 4) = (uint64_t)&type metadata for CRLWPFontSizeAttribute;
        v116 = sub_100739530();
        v117 = v6;
        v118 = v8;
        v119 = v142;
        *(&v129 - 3) = v116;
        *(&v129 - 2) = v119;
        KeyPath = swift_getKeyPath(&unk_100F0DDA8);
        v121 = sub_1007395C4();
        v122 = v119;
        v8 = v118;
        v6 = v117;
        swift_retain(v122);
        CRAttributedString.Runs.Run.subscript.getter(KeyPath, v117, v121);
        swift_release(KeyPath);
        v123 = v155[0];
        v124 = BYTE4(v155[0]);
        if ((swift_isUniquelyReferenced_nonNull_native(v113) & 1) == 0)
          v113 = (double *)sub_100D11344(0, *((_QWORD *)v113 + 2) + 1, 1, v113);
        v126 = *((_QWORD *)v113 + 2);
        v125 = *((_QWORD *)v113 + 3);
        if (v126 >= v125 >> 1)
          v113 = (double *)sub_100D11344((_QWORD *)(v125 > 1), v126 + 1, 1, v113);
        *((_QWORD *)v113 + 2) = v126 + 1;
        v127 = &v113[3 * v126];
        *((_QWORD *)v127 + 4) = v148;
        *((_QWORD *)v127 + 5) = v115;
        *((_DWORD *)v127 + 12) = v123;
        *((_BYTE *)v127 + 52) = v124;
        v156 = v113;
        (*(void (**)(char *, uint64_t))(v144 + 8))(v8, v117);
        v35 = v143;
        CRAttributedString.Runs.next()(v146);
      }
      while (v141(v35, 1, v117) != 1);
    }
    (*(void (**)(char *, uint64_t))(v135 + 8))(v145, v146);
    sub_1007D3FBC();
    (*(void (**)(char *, uint64_t))(v136 + 8))(v134, v130);
    v36 = v156;
    v37 = (unint64_t)v147;
  }
  else
  {
    v146 = (uint64_t)v27;
    v148 = v17;
    v38 = v130;
    if (!v29)
      goto LABEL_102;
    v39 = v15;
    v35 = v138;
    (*(void (**)(void))(*(_QWORD *)v29 + 760))();
    sub_1004B8460((uint64_t)v35 + *(int *)(v139 + 20), (uint64_t)v21, type metadata accessor for CRLWPStorageCRDTData);
    sub_1004B84A4((uint64_t)v35, type metadata accessor for CRLWPShapeItemCRDTData);
    (*(void (**)(uint64_t, char *, uint64_t))(v136 + 16))(v146, &v21[*(int *)(v19 + 20)], v22);
    sub_1004B84A4((uint64_t)v21, type metadata accessor for CRLWPStorageCRDTData);
    v40 = v22;
    v41 = CRAttributedString.attributes(at:effectiveRange:)(0, 0, v22);
    __chkstk_darwin(v41);
    *(&v129 - 4) = (uint64_t)&type metadata for CRLWPFontSizeAttribute;
    v42 = sub_100739530();
    v43 = v142;
    *(&v129 - 3) = v42;
    *(&v129 - 2) = v43;
    v46 = (_BYTE *)swift_getKeyPath(&unk_100F0DDA8);
    v44 = sub_1007395C4();
    v45 = swift_retain(v43);
    CRAttributedString.Attributes.subscript.getter(v155, v46, v38, v44, v45);
    swift_release(v46);
    LODWORD(v35) = v155[0];
    LOBYTE(v46) = BYTE4(v155[0]);
    v36 = _swiftEmptyArrayStorage;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage);
    v37 = (unint64_t)v147;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
LABEL_99:
      v36 = (double *)sub_100D11344(0, *((_QWORD *)v36 + 2) + 1, 1, v36);
    v49 = *((_QWORD *)v36 + 2);
    v48 = *((_QWORD *)v36 + 3);
    if (v49 >= v48 >> 1)
      v36 = (double *)sub_100D11344((_QWORD *)(v48 > 1), v49 + 1, 1, v36);
    *((_QWORD *)v36 + 2) = v49 + 1;
    v50 = &v36[3 * v49];
    v50[4] = 0.0;
    v50[5] = 0.0;
    *((_DWORD *)v50 + 12) = (_DWORD)v35;
    *((_BYTE *)v50 + 52) = (_BYTE)v46;
    v156 = v36;
    (*((void (**)(char *, uint64_t))v39 + 1))(v148, v38);
    (*(void (**)(uint64_t, uint64_t))(v136 + 8))(v146, v40);
  }
  v145 = (char *)v36;
  v40 = *((_QWORD *)v36 + 2);
  if (!v40)
  {
LABEL_81:
    swift_bridgeObjectRelease(v145);
    return;
  }
  v148 = &v137[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemTextPresetOverride];
  v146 = OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData;
  v38 = (uint64_t)&qword_1013E1B50;
  v39 = v145 + 52;
  while (1)
  {
    v46 = *(_BYTE **)(v39 - 20);
    v36 = *(double **)(v39 - 12);
    if ((*v39 & 1) != 0)
      break;
    if (__OFSUB__(v36, v46))
    {
      __break(1u);
LABEL_90:
      __break(1u);
LABEL_91:
      __break(1u);
LABEL_92:
      __break(1u);
LABEL_93:
      __break(1u);
LABEL_94:
      __break(1u);
LABEL_95:
      __break(1u);
LABEL_96:
      __break(1u);
LABEL_97:
      __break(1u);
LABEL_98:
      __break(1u);
      goto LABEL_99;
    }
    v54 = *((_DWORD *)v39 - 1);
    v55 = objc_msgSend((id)objc_opt_self(NSValue), "valueWithRange:", v46, (char *)v36 - v46);
    v56 = objc_allocWithZone((Class)NSNumber);
    v46 = v55;
    LODWORD(v57) = v54;
    v58 = objc_msgSend(v56, "initWithFloat:", v57);
    v60 = *(_QWORD *)v37;
    v61 = *(_QWORD *)v37 & 0xC000000000000001;
    if (v58)
    {
      v62 = v58;
      if (v61)
      {
        if (v60 >= 0)
          v60 &= 0xFFFFFFFFFFFFFF8uLL;
        v63 = __CocoaDictionary.count.getter(v60, v59);
        if (__OFADD__(v63, 1))
          goto LABEL_93;
        v60 = sub_100897A68(v60, v63 + 1);
        *(_QWORD *)v37 = v60;
      }
      v38 = swift_isUniquelyReferenced_nonNull_native(v60);
      v155[0] = *(_QWORD *)v37;
      v64 = v155[0];
      *(_QWORD *)v37 = 0x8000000000000000;
      v37 = sub_100843A6C((uint64_t)v46);
      v66 = *(_QWORD *)(v64 + 16);
      v67 = (v65 & 1) == 0;
      v68 = v66 + v67;
      if (__OFADD__(v66, v67))
        goto LABEL_91;
      v36 = v65;
      if (*(_QWORD *)(v64 + 24) >= v68)
      {
        if ((v38 & 1) == 0)
          sub_100830E90();
      }
      else
      {
        sub_10081DF90(v68, v38);
        v69 = sub_100843A6C((uint64_t)v46);
        if ((v36 & 1) != (v70 & 1))
          goto LABEL_103;
        v37 = v69;
      }
      v38 = (uint64_t)&qword_1013E1B50;
      v35 = (_QWORD *)v155[0];
      v98 = 8 * v37;
      if ((v36 & 1) == 0)
      {
        *(_QWORD *)(v155[0] + 8 * (v37 >> 6) + 64) |= 1 << v37;
        *(_QWORD *)(v35[6] + 8 * v37) = v46;
        *(_QWORD *)(v35[7] + 8 * v37) = v62;
        v99 = v35[2];
        v100 = __OFADD__(v99, 1);
        v101 = v99 + 1;
        if (v100)
          goto LABEL_95;
        goto LABEL_67;
      }
LABEL_65:
      v102 = v35[7];

      *(_QWORD *)(v102 + v98) = v62;
LABEL_68:
      v37 = (unint64_t)v147;
      v60 = *v147;
      *v147 = (Swift::Int)v35;
      goto LABEL_69;
    }
    if (!v61)
    {
      swift_bridgeObjectRetain(*(_QWORD *)v37);
      v91 = sub_100843A6C((uint64_t)v46);
      v107 = v106;
      swift_bridgeObjectRelease(v60);
      if ((v107 & 1) == 0)
        goto LABEL_80;
      v108 = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)v37);
      v90 = *(_QWORD *)v37;
      v155[0] = *(_QWORD *)v37;
      *(_QWORD *)v37 = 0x8000000000000000;
      if ((v108 & 1) == 0)
      {
        sub_100830E90();
        v90 = v155[0];
      }
      goto LABEL_76;
    }
    if (v60 < 0)
      v86 = *(_QWORD *)v37;
    else
      v86 = v60 & 0xFFFFFFFFFFFFFF8;
    v46 = v46;
    swift_bridgeObjectRetain(v60);
    v87 = __CocoaDictionary.lookup(_:)(v46, v86);

    if (v87)
    {
      v88 = swift_unknownObjectRelease(v87);
      v89 = __CocoaDictionary.count.getter(v86, v88);
      v90 = sub_100897A68(v86, v89);
      swift_retain(v90);
      v91 = sub_100843A6C((uint64_t)v46);
      v36 = v92;
      swift_release(v90);
      if ((v36 & 1) == 0)
        goto LABEL_97;
LABEL_76:

      v35 = *(_QWORD **)(*(_QWORD *)(v90 + 56) + 8 * v91);
      sub_10051C40C(v91, v90);
      v112 = *(_QWORD *)v37;
      *(_QWORD *)v37 = v90;

      v105 = v112;
      goto LABEL_77;
    }
LABEL_69:

    v105 = v60;
LABEL_77:
    swift_bridgeObjectRelease(v105);
LABEL_78:
    v39 += 24;
    if (!--v40)
      goto LABEL_81;
  }
  sub_1004C4938((uint64_t)v148, (uint64_t)v154, &qword_1013E1B50);
  sub_1004C4938((uint64_t)v154, (uint64_t)v155, &qword_1013E1B50);
  if (sub_100562DF8((uint64_t)v155) != 1)
  {
    sub_1004C4938((uint64_t)v154, (uint64_t)v151, &qword_1013E1B50);
    goto LABEL_29;
  }
  v51 = *(_QWORD *)&v137[v146];
  if (v51)
  {
    v35 = v138;
    (*(void (**)(void))(*(_QWORD *)v51 + 760))();
    swift_retain(v51);
    v52 = sub_1004B804C(&qword_1013F3C70);
    CRRegister.wrappedValue.getter(v52);
    sub_1004C4938((uint64_t)&v149, (uint64_t)v150, &qword_1013E1B50);
    sub_1004B84A4((uint64_t)v35, type metadata accessor for CRLWPShapeItemCRDTData);
    swift_release(v51);
    sub_1004C4938((uint64_t)v150, (uint64_t)v151, &qword_1013E1B50);
    if (sub_100562DF8((uint64_t)v151) == 1)
    {
      v53 = 18.0;
LABEL_31:
      if (__OFSUB__(v36, v46))
        goto LABEL_90;
      v72 = objc_msgSend((id)objc_opt_self(NSValue), "valueWithRange:", v46, (char *)v36 - v46);
      v73 = objc_allocWithZone((Class)NSNumber);
      v46 = v72;
      *(float *)&v74 = v53;
      v75 = objc_msgSend(v73, "initWithFloat:", v74);
      v60 = *(_QWORD *)v37;
      v77 = *(_QWORD *)v37 & 0xC000000000000001;
      if (v75)
      {
        v62 = v75;
        if (v77)
        {
          if (v60 >= 0)
            v60 &= 0xFFFFFFFFFFFFFF8uLL;
          v78 = __CocoaDictionary.count.getter(v60, v76);
          if (__OFADD__(v78, 1))
            goto LABEL_94;
          v60 = sub_100897A68(v60, v78 + 1);
          *(_QWORD *)v37 = v60;
        }
        v38 = swift_isUniquelyReferenced_nonNull_native(v60);
        v151[0] = *(_QWORD *)v37;
        v79 = v151[0];
        *(_QWORD *)v37 = 0x8000000000000000;
        v37 = sub_100843A6C((uint64_t)v46);
        v81 = *(_QWORD *)(v79 + 16);
        v82 = (v80 & 1) == 0;
        v83 = v81 + v82;
        if (__OFADD__(v81, v82))
          goto LABEL_92;
        v36 = v80;
        if (*(_QWORD *)(v79 + 24) >= v83)
        {
          if ((v38 & 1) == 0)
            sub_100830E90();
        }
        else
        {
          sub_10081DF90(v83, v38);
          v84 = sub_100843A6C((uint64_t)v46);
          if ((v36 & 1) != (v85 & 1))
            goto LABEL_103;
          v37 = v84;
        }
        v38 = (uint64_t)&qword_1013E1B50;
        v35 = (_QWORD *)v151[0];
        v98 = 8 * v37;
        if ((v36 & 1) != 0)
          goto LABEL_65;
        *(_QWORD *)(v151[0] + 8 * (v37 >> 6) + 64) |= 1 << v37;
        *(_QWORD *)(v35[6] + 8 * v37) = v46;
        *(_QWORD *)(v35[7] + 8 * v37) = v62;
        v103 = v35[2];
        v100 = __OFADD__(v103, 1);
        v101 = v103 + 1;
        if (v100)
          goto LABEL_96;
LABEL_67:
        v35[2] = v101;
        v104 = v46;
        goto LABEL_68;
      }
      if (!v77)
      {
        swift_bridgeObjectRetain(*(_QWORD *)v37);
        v91 = sub_100843A6C((uint64_t)v46);
        v110 = v109;
        swift_bridgeObjectRelease(v60);
        if ((v110 & 1) == 0)
        {
LABEL_80:

          goto LABEL_78;
        }
        v111 = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)v37);
        v90 = *(_QWORD *)v37;
        v151[0] = *(_QWORD *)v37;
        *(_QWORD *)v37 = 0x8000000000000000;
        if ((v111 & 1) == 0)
        {
          sub_100830E90();
          v90 = v151[0];
        }
        goto LABEL_76;
      }
      if (v60 < 0)
        v93 = *(_QWORD *)v37;
      else
        v93 = v60 & 0xFFFFFFFFFFFFFF8;
      v46 = v46;
      swift_bridgeObjectRetain(v60);
      v94 = __CocoaDictionary.lookup(_:)(v46, v93);

      if (v94)
      {
        v95 = swift_unknownObjectRelease(v94);
        v96 = __CocoaDictionary.count.getter(v93, v95);
        v90 = sub_100897A68(v93, v96);
        swift_retain(v90);
        v91 = sub_100843A6C((uint64_t)v46);
        v36 = v97;
        swift_release(v90);
        if ((v36 & 1) == 0)
          goto LABEL_98;
        goto LABEL_76;
      }
      goto LABEL_69;
    }
LABEL_29:
    v53 = v152;
    v71 = v153;
    sub_1006A1C78(v154, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1006A1CF4);
    sub_1007844D4((uint64_t)v151);
    if (v71)
      v53 = 18.0;
    goto LABEL_31;
  }
  __break(1u);
LABEL_101:
  __break(1u);
LABEL_102:
  __break(1u);
LABEL_103:
  v128 = sub_1004B8930(0, (unint64_t *)&qword_10140B930, NSValue_ptr);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v128);
  __break(1u);
}

void sub_1007CDA88(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (**v14)(char *, char *, uint64_t);
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t KeyPath;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  CGColorSpace *v69;
  id v70;
  __n128 v71;
  uint64_t v72;
  id v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  const mach_header_64 *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  int v95;
  unsigned __int8 v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  id v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  id v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  uint64_t v138;
  __int128 v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unsigned __int8 v143;
  unsigned int v144;
  char v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  uint64_t v150;
  __int128 v151;
  _BYTE v152[16];
  _BYTE v153[16];
  _BYTE v154[16];
  _QWORD v155[14];
  _BYTE v156[16];
  _BYTE v157[14];
  char v158;
  char v159;
  uint64_t v160;
  _BYTE v161[24];
  _OWORD v162[5];
  uint64_t v163;
  _QWORD v164[2];
  unsigned __int8 v165;
  _BYTE v166[6];
  char v167;
  char v168;
  _BYTE v169[16];
  _BYTE v170[16];
  uint64_t v171;
  char v172;
  _BYTE v173[16];
  _BYTE v174[16];
  uint64_t v175;
  char v176;
  _OWORD v177[6];
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  uint64_t v186;
  unsigned __int8 v187;
  uint64_t v188;
  unsigned __int8 v189;
  uint64_t v190;
  char v191;
  _OWORD v192[5];
  uint64_t v193;
  _BYTE v194[16];
  _BYTE v195[32];

  v125 = a4;
  v130 = a3;
  v128 = a1;
  v123 = sub_1004B804C(&qword_1013F3D40);
  __chkstk_darwin(v123);
  v122 = (uint64_t)&v121 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v126 = (char *)&v121 - v8;
  v9 = sub_1004B804C((uint64_t *)&unk_1013EFC60);
  __chkstk_darwin(v9);
  v124 = (uint64_t)&v121 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v127 = (char *)&v121 - v12;
  v13 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v14 = *(void (***)(char *, char *, uint64_t))(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v121 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v121 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for CRLWPStorageCRDTData(0);
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v121 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = (unint64_t)_swiftEmptyArrayStorage;
  v24 = *(_QWORD *)(v4 + OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData);
  if (!v24)
  {
    __break(1u);
    goto LABEL_52;
  }
  (*(void (**)(__n128))(*(_QWORD *)v24 + 760))(v21);
  sub_1004B8460((uint64_t)&v19[*(int *)(v17 + 20)], (uint64_t)v23, type metadata accessor for CRLWPStorageCRDTData);
  sub_1004B84A4((uint64_t)v19, type metadata accessor for CRLWPShapeItemCRDTData);
  v14[2](v16, v23, v13);
  sub_1004B84A4((uint64_t)v23, type metadata accessor for CRLWPStorageCRDTData);
  v25 = CRAttributedString.count.getter(v13);
  ((void (*)(char *, uint64_t))v14[1])(v16, v13);
  if (v25 >= (a2 & ~(a2 >> 63)))
    v26 = a2 & ~(a2 >> 63);
  else
    v26 = v25;
  v27 = v130 & ~(v130 >> 63);
  if (v25 < v27)
    v27 = v25;
  v129 = v27;
  v130 = v26;
  if (v27 < v26)
  {
    __break(1u);
  }
  else
  {
    v23 = v127;
    *(_QWORD *)v127 = &_swiftEmptySetSingleton;
    v121 = sub_100559A64();
    CRAttributedString.Attributes.init()(&type metadata for CRLTextAttributeScope, v121);
    v9 = v128;
    sub_1004C4938(v128, (uint64_t)v161, (uint64_t *)&unk_1013F3E80);
    sub_1004C4938((uint64_t)v161, (uint64_t)v164, (uint64_t *)&unk_1013F3E80);
    if (v165 != 255)
    {
      v28 = v165 & 1;
      v29 = v164[0];
      v30 = v164[1];
      KeyPath = swift_getKeyPath(&unk_100F0DB98);
      v32 = sub_1007E7398(v29, v30, v28);
      v34 = v33;
      sub_100AD8690((uint64_t *)&v179, 0x656D614E746E6F66, 0xE800000000000000);
      swift_bridgeObjectRelease();
      __chkstk_darwin(v35);
      *(&v121 - 4) = (unint64_t)&type metadata for CRLWPCharacterScope;
      *(&v121 - 3) = (unint64_t)&type metadata for CRLWPFontNameAttribute;
      *(&v121 - 2) = sub_100739574();
      *(&v121 - 1) = KeyPath;
      v36 = swift_getKeyPath(&unk_100F0DAB0);
      swift_retain(KeyPath);
      swift_bridgeObjectRetain(v34);
      *(_QWORD *)&v179 = sub_10098B7E4(v32, v34);
      *((_QWORD *)&v179 + 1) = v37;
      LOBYTE(v180) = 0;
      v38 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
      v39 = sub_1007E6618();
      CRAttributedString.Attributes.subscript.setter(&v179, v36, v38, v39);
      swift_bridgeObjectRelease();
      v40 = KeyPath;
      v9 = v128;
      swift_release(v40);
    }
    sub_1004C4938(v9 + 20, (uint64_t)&v160, &qword_1013E0B30);
    sub_1004C4938((uint64_t)&v160, (uint64_t)v166, &qword_1013E0B30);
    if ((v166[4] & 1) == 0)
    {
      v41 = swift_getKeyPath(&unk_100F0DBF0);
      sub_100AD8690((uint64_t *)&v179, 0x657A6953746E6F66, 0xE800000000000000);
      swift_bridgeObjectRelease();
      __chkstk_darwin(v42);
      *(&v121 - 4) = (unint64_t)&type metadata for CRLWPCharacterScope;
      *(&v121 - 3) = (unint64_t)&type metadata for CRLWPFontSizeAttribute;
      *(&v121 - 2) = sub_100739530();
      *(&v121 - 1) = v41;
      v43 = swift_getKeyPath(&unk_100F0DAB0);
      sub_1004C4938((uint64_t)&v160, (uint64_t)&v179, &qword_1013E0B30);
      v44 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
      v45 = sub_1007395C4();
      CRAttributedString.Attributes.subscript.setter(&v179, v43, v44, v45);
    }
    sub_1004C4938(v9 + 25, (uint64_t)&v159, &qword_1013EFCA0);
    sub_1004C4938((uint64_t)&v159, (uint64_t)&v167, &qword_1013EFCA0);
    if (v167 != 2)
    {
      v46 = swift_getKeyPath(&unk_100F0DCA0);
      sub_100AD8690((uint64_t *)&v179, 1684828002, 0xE400000000000000);
      swift_bridgeObjectRelease();
      __chkstk_darwin(v47);
      *(&v121 - 4) = (unint64_t)&type metadata for CRLWPCharacterScope;
      *(&v121 - 3) = (unint64_t)&type metadata for CRLWPFontBoldAttribute;
      *(&v121 - 2) = sub_1007394EC();
      *(&v121 - 1) = v46;
      v48 = swift_getKeyPath(&unk_100F0DAB0);
      sub_1004C4938((uint64_t)&v159, (uint64_t)&v179, &qword_1013EFCA0);
      v49 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
      v50 = sub_10073DD28();
      CRAttributedString.Attributes.subscript.setter(&v179, v48, v49, v50);
    }
    sub_1004C4938(v9 + 26, (uint64_t)&v158, &qword_1013EFCA0);
    sub_1004C4938((uint64_t)&v158, (uint64_t)&v168, &qword_1013EFCA0);
    if (v168 != 2)
    {
      v51 = swift_getKeyPath(&unk_100F0DC48);
      sub_100AD8690((uint64_t *)&v179, 0x63696C617469, 0xE600000000000000);
      swift_bridgeObjectRelease();
      __chkstk_darwin(v52);
      *(&v121 - 4) = (unint64_t)&type metadata for CRLWPCharacterScope;
      *(&v121 - 3) = (unint64_t)&type metadata for CRLWPFontItalicAttribute;
      *(&v121 - 2) = sub_1007394A8();
      *(&v121 - 1) = v51;
      v53 = swift_getKeyPath(&unk_100F0DAB0);
      sub_1004C4938((uint64_t)&v158, (uint64_t)&v179, &qword_1013EFCA0);
      v54 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
      v55 = sub_10073DCE4();
      CRAttributedString.Attributes.subscript.setter(&v179, v53, v54, v55);
    }
    sub_1004C4938(v9 + 32, (uint64_t)v157, &qword_1013F30C0);
    sub_1004C4938((uint64_t)v157, (uint64_t)v169, &qword_1013F30C0);
    if (v169[8] != 255)
    {
      sub_1004C4938((uint64_t)v169, (uint64_t)v170, &qword_1013E8738);
      v56 = swift_getKeyPath(&unk_100F0DD50);
      sub_1004C4938((uint64_t)v170, (uint64_t)&v171, &qword_1013E8738);
      if (v172)
        v57 = 0;
      else
        v57 = v171;
      sub_100AD8690((uint64_t *)&v179, 0x6E696C7265646E75, 0xE900000000000065);
      swift_bridgeObjectRelease();
      __chkstk_darwin(v58);
      *(&v121 - 4) = (unint64_t)&type metadata for CRLWPCharacterScope;
      *(&v121 - 3) = (unint64_t)&type metadata for CRLWPUnderlineAttribute;
      *(&v121 - 2) = sub_100739464();
      *(&v121 - 1) = v56;
      v59 = swift_getKeyPath(&unk_100F0DAB0);
      *(_QWORD *)&v179 = v57;
      BYTE8(v179) = 0;
      v60 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
      v61 = sub_10073DCA0();
      CRAttributedString.Attributes.subscript.setter(&v179, v59, v60, v61);
    }
    sub_1004C4938(v9 + 48, (uint64_t)v156, (uint64_t *)&unk_1013F3E90);
    sub_1004C4938((uint64_t)v156, (uint64_t)v173, (uint64_t *)&unk_1013F3E90);
    if (v173[8] != 255)
    {
      sub_1004C4938((uint64_t)v173, (uint64_t)v174, &qword_1013F3800);
      v62 = swift_getKeyPath(&unk_100F0DCF8);
      sub_1004C4938((uint64_t)v174, (uint64_t)&v175, &qword_1013F3800);
      if (v176)
        v63 = 0;
      else
        v63 = v175;
      sub_100AD8690((uint64_t *)&v179, 0x6874656B69727473, 0xED00006867756F72);
      swift_bridgeObjectRelease();
      __chkstk_darwin(v64);
      *(&v121 - 4) = (unint64_t)&type metadata for CRLWPCharacterScope;
      *(&v121 - 3) = (unint64_t)&type metadata for CRLWPStrikethroughAttribute;
      *(&v121 - 2) = sub_100739420();
      *(&v121 - 1) = v62;
      v65 = swift_getKeyPath(&unk_100F0DAB0);
      *(_QWORD *)&v179 = v63;
      BYTE8(v179) = 0;
      v66 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
      v67 = sub_10073DC5C();
      CRAttributedString.Attributes.subscript.setter(&v179, v65, v66, v67);
    }
    sub_1004C4938(v9 + 64, (uint64_t)v155, &qword_1013F3148);
    sub_1004C4938((uint64_t)v155, (uint64_t)v177, &qword_1013F3148);
    if ((_QWORD)v178)
    {
      v183 = v177[4];
      v184 = v177[5];
      v185 = v178;
      v179 = v177[0];
      v180 = v177[1];
      v181 = v177[2];
      v182 = v177[3];
      v68 = swift_getKeyPath(&unk_100F0DB40);
      sub_1004B8930(0, (unint64_t *)&qword_1013FBC20, off_101229840);
      v192[2] = v182;
      v192[3] = v183;
      v192[4] = v184;
      v193 = v185;
      v192[0] = v180;
      v192[1] = v181;
      v162[0] = v180;
      v162[1] = v181;
      v162[3] = v183;
      v162[4] = v184;
      v162[2] = v182;
      v163 = v185;
      sub_1007ECB8C(v155, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004C485C);
      sub_1005E4130(v192);
      v69 = sub_1006C52C0((uint64_t)v162);
      sub_1004C4938((uint64_t)&v179, (uint64_t)v194, &qword_1013F3EB8);
      sub_1004C4938((uint64_t)v194, (uint64_t)v195, &qword_1013F3EB8);
      if (v195[8] == 1)
      {
        if (qword_1013DD868 != -1)
          swift_once(&qword_1013DD868, sub_100A05844);
        swift_beginAccess(&static OS_os_log.persistence, &v140, 0, 0);
        v70 = (id)static OS_os_log.persistence;
        v72 = static os_log_type_t.info.getter(v71);
        sub_100A06EBC((uint64_t)v70, &_mh_execute_header, v72, "Tried to decode unknown fill value. Falling back to unarchiving color fill.", 75, 2, (uint64_t)_swiftEmptyArrayStorage);

      }
      v73 = objc_msgSend(objc_allocWithZone((Class)CRLColorFill), "initWithColor:", v69);

      sub_1007ECB8C(v155, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004C4174);
      v74 = v127;
      sub_100AD8690(&v142, 0x6574636172616863, 0xED00006C6C694672);
      swift_bridgeObjectRelease();
      __chkstk_darwin(v75);
      *(&v121 - 4) = (unint64_t)&type metadata for CRLWPCharacterScope;
      *(&v121 - 3) = (unint64_t)&type metadata for CRLWPCharacterFillAttribute;
      *(&v121 - 2) = sub_1007393D0();
      *(&v121 - 1) = v68;
      v76 = swift_getKeyPath(&unk_100F0DAB0);
      swift_retain(v68);
      v77 = v73;
      sub_100D3743C(v77, (uint64_t)&v142);
      v78 = &_mh_execute_header;
      if (!v145)
        v78 = 0;
      v131 = v142;
      v132 = v143;
      v133 = (unint64_t)v78 | v144;
      v134 = v146;
      v135 = v147;
      v136 = v148;
      v23 = v74;
      v137 = v149;
      v138 = v150;
      v139 = v151;
      v79 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
      v80 = sub_1007E678C();
      CRAttributedString.Attributes.subscript.setter(&v131, v76, v79, v80);

      swift_release(v68);
      v9 = v128;
    }
    v81 = v124;
    sub_1004CB7BC((uint64_t)v23, v124, (uint64_t *)&unk_1013EFC60);
    v82 = objc_allocWithZone((Class)sub_1004B804C((uint64_t *)&unk_1013F3EA0));
    v14 = (void (**)(char *, char *, uint64_t))v125;
    v17 = sub_100737BD4((char *)v14, v130, v129, v81);

    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v83);
    v16 = *(char **)((v141 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v27 = *(_QWORD *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if ((unint64_t)v16 < (unint64_t)v27 >> 1)
      goto LABEL_35;
  }
  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((unint64_t)v27 > 1, v16 + 1, 1);
LABEL_35:
  v84 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v17);
  specialized Array._endMutation()(v84);
  sub_1004C4938(v9 + 176, (uint64_t)v154, &qword_1013F30C8);
  sub_1004C4938((uint64_t)v154, (uint64_t)&v186, &qword_1013F30C8);
  v85 = v126;
  if (v187 != 255)
  {
    v86 = v187 & 1;
    v87 = v186;
    v88 = swift_getKeyPath(&unk_100F0DAE8);
    v89 = v14;
    v90 = sub_1007EB7B8(v89, v130, v129, v88, v87, v86);

    swift_release(v88);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v91);
    v93 = *(_QWORD *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v92 = *(_QWORD *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v93 >= v92 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v92 > 1, v93 + 1, 1);
    v94 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v93, v90);
    specialized Array._endMutation()(v94);
  }
  sub_1004C4938(v9 + 208, (uint64_t)v153, &qword_1013F3EB0);
  sub_1004C4938((uint64_t)v153, (uint64_t)&v188, &qword_1013F3EB0);
  if (v189 != 255)
  {
    v95 = v189 & 1;
    v96 = v188;
    v97 = swift_getKeyPath(&unk_100F0DE08);
    v98 = v14;
    v99 = sub_1007EB9E4(v98, v130, v129, v97, v96, v95);

    swift_release(v97);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v100);
    v102 = *(_QWORD *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v101 = *(_QWORD *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v102 >= v101 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v101 > 1, v102 + 1, 1);
    v103 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v102, v99);
    specialized Array._endMutation()(v103);
  }
  sub_1004C4938(v9 + 224, (uint64_t)v152, &qword_1013E6E50);
  sub_1004C4938((uint64_t)v152, (uint64_t)&v190, &qword_1013E6E50);
  if ((v191 & 1) != 0)
    goto LABEL_48;
  v128 = v190;
  v104 = swift_getKeyPath(&unk_100F0DE28);
  *v85 = &_swiftEmptySetSingleton;
  v105 = v14;
  v106 = CRAttributedString.Attributes.init()(&type metadata for CRLTextAttributeScope, v121);
  __chkstk_darwin(v106);
  *(&v121 - 4) = (unint64_t)&type metadata for CRLWPParagraphScope;
  *(&v121 - 3) = (unint64_t)&type metadata for CRLWPListStartAttribute;
  v107 = sub_1007370EC();
  *(&v121 - 2) = v107;
  *(&v121 - 1) = v104;
  v108 = swift_getKeyPath(&unk_100F0DFB8);
  if (*(_QWORD *)&v105[OBJC_IVAR____TtC8Freeform14CRLWPShapeItem_textStorage])
  {
    v109 = v108;
    swift_retain(v104);
    sub_100AD8690(&v131, 0x726174537473696CLL, 0xE900000000000074);
    swift_bridgeObjectRelease();
    __chkstk_darwin(v110);
    *(&v121 - 4) = (unint64_t)&type metadata for CRLWPParagraphScope;
    *(&v121 - 3) = (unint64_t)&type metadata for CRLWPListStartAttribute;
    *(&v121 - 2) = v107;
    *(&v121 - 1) = v109;
    v111 = swift_getKeyPath(&unk_100F0DAB0);
    v131 = v128;
    LOBYTE(v132) = 0;
    v112 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
    v113 = sub_100737130();
    CRAttributedString.Attributes.subscript.setter(&v131, v111, v112, v113);
    v114 = v122;
    sub_1004CB7BC((uint64_t)v85, v122, &qword_1013F3D40);
    v115 = objc_allocWithZone((Class)sub_1004B804C((uint64_t *)&unk_1013EFC00));
    v116 = sub_100738804(v105, v130, v129, v114);
    sub_1004CB800((uint64_t)v85, &qword_1013F3D40);

    swift_release(v104);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v117);
    v119 = *(_QWORD *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v118 = *(_QWORD *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v119 >= v118 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v118 > 1, v119 + 1, 1);
    v120 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v119, v116);
    specialized Array._endMutation()(v120);
    v23 = v127;
LABEL_48:
    sub_1004CB800((uint64_t)v23, (uint64_t *)&unk_1013EFC60);
    return;
  }
LABEL_52:
  __break(1u);
}

char *sub_1007CEB44(char *result, uint64_t a2, id a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char *v7;

  if (__OFSUB__(a2, result))
  {
    __break(1u);
    goto LABEL_6;
  }
  result = (char *)objc_msgSend(a3, "textRangeForParagraphsInCharRange:", result, a2 - (_QWORD)result, v3, v4);
  v6 = __OFADD__(result, v5);
  v7 = &result[v5];
  if (v6)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if ((uint64_t)v7 < (uint64_t)result)
LABEL_7:
    __break(1u);
  return result;
}

unint64_t sub_1007CEB94()
{
  return 0xD000000000000014;
}

uint64_t sub_1007CEBB0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10073D704();
  return static CRAttributeStringKey.loadAttribute(from:)(a1, a2, v4);
}

uint64_t sub_1007CEBFC()
{
  return 0x6E696C7265646E75;
}

uint64_t sub_1007CEC18(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10073DCA0();
  return static CRAttributeStringKey.loadAttribute(from:)(a1, a2, v4);
}

uint64_t sub_1007CEC64()
{
  return 0x6874656B69727473;
}

uint64_t sub_1007CEC88(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10073DC5C();
  return static CRAttributeStringKey.loadAttribute(from:)(a1, a2, v4);
}

uint64_t sub_1007CECD4()
{
  return 0x657A6953746E6F66;
}

uint64_t sub_1007CECEC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_1007395C4();
  return static CRAttributeStringKey.loadAttribute(from:)(a1, a2, v4);
}

uint64_t sub_1007CED38()
{
  return 0x656D614E746E6F66;
}

uint64_t sub_1007CED50(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_1007E6618();
  return static CRAttributeStringKey.loadAttribute(from:)(a1, a2, v4);
}

uint64_t sub_1007CED9C()
{
  return 1684828002;
}

uint64_t sub_1007CEDAC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10073DD28();
  return static CRAttributeStringKey.loadAttribute(from:)(a1, a2, v4);
}

uint64_t sub_1007CEDF8()
{
  return 0x63696C617469;
}

uint64_t sub_1007CEE0C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10073DCE4();
  return static CRAttributeStringKey.loadAttribute(from:)(a1, a2, v4);
}

uint64_t sub_1007CEE58()
{
  return 0x6574636172616863;
}

uint64_t sub_1007CEE7C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_1007E678C();
  return static CRAttributeStringKey.loadAttribute(from:)(a1, a2, v4);
}

unint64_t sub_1007CEEC8()
{
  return 0xD000000000000012;
}

uint64_t sub_1007CEEE4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10073D7B8();
  return static CRAttributeStringKey.loadAttribute(from:)(a1, a2, v4);
}

unint64_t sub_1007CEF30@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = _s8Freeform25CRLiCloudConnectionStatusO8rawValueACSgSi_tcfC_0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1007CEF58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;

  v6 = sub_1007EBC1C();
  v7 = sub_1007E6504();
  return CRValue<>.observableDifference(from:with:)(a1, a2, a3, v6, v7);
}

uint64_t sub_1007CEFB4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = sub_1007EBC1C();
  v5 = sub_10062E1B0();
  return CRValue<>.init(from:)(a1, a2, v4, v5, &protocol witness table for Int);
}

uint64_t sub_1007CF01C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = sub_1007EBC1C();
  v5 = sub_10062E1B0();
  return CRValue<>.encode(to:)(a1, a2, v4, v5, &protocol witness table for Int);
}

uint64_t sub_1007CF074(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;

  v2 = sub_1007EBC1C();
  v3 = sub_10062E1B0();
  return CRValue<>.minEncodingVersion.getter(a1, v2, v3, &protocol witness table for Int);
}

uint64_t sub_1007CF0C0()
{
  return 0x6C7974537473696CLL;
}

uint64_t sub_1007CF0DC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_1007392B8();
  return static CRAttributeStringKey.loadAttribute(from:)(a1, a2, v4);
}

uint64_t sub_1007CF128()
{
  return 0x726174537473696CLL;
}

uint64_t sub_1007CF144(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_100737130();
  return static CRAttributeStringKey.loadAttribute(from:)(a1, a2, v4);
}

uint64_t sub_1007CF190()
{
  return 0x7061726761726170;
}

uint64_t sub_1007CF1B4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_1007370A8();
  return static CRAttributeStringKey.loadAttribute(from:)(a1, a2, v4);
}

uint64_t sub_1007CF200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;

  v6 = sub_1007EDFBC();
  v7 = sub_1007EDF28();
  return CRValue<>.observableDifference(from:with:)(a1, a2, a3, v6, v7);
}

uint64_t sub_1007CF25C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = sub_1007EDFBC();
  v5 = sub_10062E244();
  return CRValue<>.init(from:)(a1, a2, v4, v5, &protocol witness table for Int);
}

uint64_t sub_1007CF2C4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = sub_1007EDFBC();
  v5 = sub_10062E244();
  return CRValue<>.encode(to:)(a1, a2, v4, v5, &protocol witness table for Int);
}

uint64_t sub_1007CF31C(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;

  v2 = sub_1007EDFBC();
  v3 = sub_10062E244();
  return CRValue<>.minEncodingVersion.getter(a1, v2, v3, &protocol witness table for Int);
}

uint64_t sub_1007CF368(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;

  v3 = v1;
  v5 = sub_1004B804C(&qword_1013F3D08);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_1004BB5A4(a1, v9);
  v11 = sub_1007E5FC8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CRLWPHyperlinkSmartFieldData.CodingKeys, &type metadata for CRLWPHyperlinkSmartFieldData.CodingKeys, v11, v9, v10);
  v12 = *((_BYTE *)v3 + 8);
  v27 = *v3;
  v28 = v12;
  v26 = 0;
  v13 = sub_1004B804C(&qword_1013F3CC8);
  v14 = sub_1007EBE08();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v27, &v26, v5, v13, v14);
  if (!v2)
  {
    v15 = (int *)type metadata accessor for CRLWPHyperlinkSmartFieldData(0);
    v16 = (uint64_t)v3 + v15[5];
    LOBYTE(v27) = 1;
    v17 = type metadata accessor for URL(0);
    v18 = sub_1005034A0(&qword_1013F3D18, 255, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v16, &v27, v5, v17, v18);
    v19 = (uint64_t *)((char *)v3 + v15[6]);
    v20 = *v19;
    v21 = v19[1];
    LOBYTE(v27) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v20, v21, &v27, v5);
    v27 = *(uint64_t *)((char *)v3 + v15[7]);
    v26 = 3;
    v22 = sub_1004B804C((uint64_t *)&unk_1013F3CF0);
    v23 = sub_1004F31B4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v27, &v26, v5, v22, v23);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int sub_1007CF570()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  _QWORD v13[2];
  char v14;
  _QWORD v15[9];

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1004B804C(&qword_1013E04D0);
  __chkstk_darwin(v5);
  v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)(v15, 0);
  v8 = *(_BYTE *)(v0 + 8);
  v13[1] = *(_QWORD *)v0;
  v14 = v8;
  v9 = sub_1004B804C(&qword_1013F3CC8);
  CRExtensible.hash(into:)(v15, v9);
  v10 = (int *)type metadata accessor for CRLWPHyperlinkSmartFieldData(0);
  sub_1004CB7BC(v0 + v10[5], (uint64_t)v7, &qword_1013E04D0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v7, v1);
    Hasher._combine(_:)(1u);
    v11 = sub_1005034A0((unint64_t *)&unk_1013F3CD0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    dispatch thunk of Hashable.hash(into:)(v15, v1, v11);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  String.hash(into:)(v15, *(_QWORD *)(v0 + v10[6]), *(_QWORD *)(v0 + v10[6] + 8));
  sub_100957EF8((uint64_t)v15, *(_QWORD *)(v0 + v10[7]));
  return Hasher._finalize()();
}

void sub_1007CF734(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  char v34;

  v27 = a2;
  v4 = sub_1004B804C(&qword_1013E04D0);
  __chkstk_darwin(v4);
  v29 = (uint64_t)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_1004B804C(&qword_1013F3CE0);
  v6 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CRLWPHyperlinkSmartFieldData(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v11 = 0;
  v11[8] = 0;
  v30 = *(int *)(v12 + 28);
  *(_QWORD *)&v11[v30] = _swiftEmptyDictionarySingleton;
  v13 = a1[3];
  v14 = a1[4];
  sub_1004BB5A4(a1, v13);
  v15 = sub_1007E5FC8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CRLWPHyperlinkSmartFieldData.CodingKeys, &type metadata for CRLWPHyperlinkSmartFieldData.CodingKeys, v15, v13, v14);
  if (v2)
  {
    _s8Freeform26AnyCRLCommandChangeContextVwxx_0(a1);
    swift_bridgeObjectRelease();
  }
  else
  {
    v16 = type metadata accessor for URL(0);
    v34 = 1;
    v17 = sub_1005034A0(&qword_1013F3CE8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v18 = v28;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v16, &v34, v28, v16, v17);
    sub_1004C4938(v29, (uint64_t)&v11[*(int *)(v9 + 20)], &qword_1013E04D0);
    v33 = 2;
    v19 = KeyedDecodingContainer.decode(_:forKey:)(&v33, v18);
    v20 = (uint64_t *)&v11[*(int *)(v9 + 24)];
    *v20 = v19;
    v20[1] = v21;
    v22 = sub_1004B804C((uint64_t *)&unk_1013F3CF0);
    v32 = 3;
    v23 = sub_1004F3130();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v22, &v32, v18, v22, v23);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v18);
    v25 = v30;
    v24 = v31;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v11[v25] = v24;
    sub_1004B8460((uint64_t)v11, v27, type metadata accessor for CRLWPHyperlinkSmartFieldData);
    _s8Freeform26AnyCRLCommandChangeContextVwxx_0(a1);
    sub_1004B84A4((uint64_t)v11, type metadata accessor for CRLWPHyperlinkSmartFieldData);
  }
}

BOOL sub_1007CFA5C(char *a1, char *a2)
{
  return qword_100F0E2F8[*a1] == qword_100F0E2F8[*a2];
}

Swift::Int sub_1007CFA80()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(qword_100F0E2F8[v1]);
  return Hasher._finalize()();
}

void sub_1007CFACC()
{
  char *v0;

  Hasher._combine(_:)(qword_100F0E2F8[*v0]);
}

Swift::Int sub_1007CFB00(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(qword_100F0E2F8[v2]);
  return Hasher._finalize()();
}

uint64_t sub_1007CFB48@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1007EBC60(*a1);
  *a2 = result;
  return result;
}

void sub_1007CFB70(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_100F0E2F8[*v1];
}

uint64_t sub_1007CFB88()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1007CFBB0 + 4 * byte_100F0C670[*v0]))(1701869940, 0xE400000000000000);
}

uint64_t sub_1007CFBB0()
{
  return 7107189;
}

uint64_t sub_1007CFBC0()
{
  return 1684632949;
}

unint64_t sub_1007CFBCC()
{
  return 0xD000000000000010;
}

uint64_t sub_1007CFBE8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1007EBC84(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1007CFC0C()
{
  char *v0;

  return qword_100F0E2F8[*v0];
}

uint64_t sub_1007CFC24@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1007EBC60(a1);
  *a2 = result;
  return result;
}

void sub_1007CFC48(_QWORD *a1@<X8>)
{
  *a1 = &off_101264348;
}

uint64_t sub_1007CFC58(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = sub_1007E5F80();
  v5 = sub_1007E5FC8();
  return static CodingKey<>.intCases.getter(a1, a2, v4, v5);
}

uint64_t sub_1007CFC9C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1007E5FC8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1007CFCC4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1007E5FC8();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1007CFCF0(uint64_t a1, int *a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1004B804C(&qword_1013E04D0);
  __chkstk_darwin(v9);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *((_BYTE *)v2 + 8);
  v15 = *v2;
  v16 = v12;
  v13 = sub_1004B804C(&qword_1013F3CC8);
  CRExtensible.hash(into:)(a1, v13);
  sub_1004CB7BC((uint64_t)v2 + a2[5], (uint64_t)v11, &qword_1013E04D0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v5) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
    Hasher._combine(_:)(1u);
    v14 = sub_1005034A0((unint64_t *)&unk_1013F3CD0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    dispatch thunk of Hashable.hash(into:)(a1, v5, v14);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  String.hash(into:)(a1, *(uint64_t *)((char *)v2 + a2[6]), *(uint64_t *)((char *)v2 + a2[6] + 8));
  sub_100957EF8(a1, *(uint64_t *)((char *)v2 + a2[7]));
}

Swift::Int sub_1007CFEA4(uint64_t a1, int *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[2];
  char v18;
  _QWORD v19[9];

  v4 = v2;
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1004B804C(&qword_1013E04D0);
  __chkstk_darwin(v10);
  v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)(v19, a1);
  v13 = *(_BYTE *)(v4 + 8);
  v17[1] = *(_QWORD *)v4;
  v18 = v13;
  v14 = sub_1004B804C(&qword_1013F3CC8);
  CRExtensible.hash(into:)(v19, v14);
  sub_1004CB7BC(v4 + a2[5], (uint64_t)v12, &qword_1013E04D0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v12, v6);
    Hasher._combine(_:)(1u);
    v15 = sub_1005034A0((unint64_t *)&unk_1013F3CD0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    dispatch thunk of Hashable.hash(into:)(v19, v6, v15);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  String.hash(into:)(v19, *(_QWORD *)(v4 + a2[6]), *(_QWORD *)(v4 + a2[6] + 8));
  sub_100957EF8((uint64_t)v19, *(_QWORD *)(v4 + a2[7]));
  return Hasher._finalize()();
}

void sub_1007D0068(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1007CF734(a1, a2);
}

uint64_t sub_1007D007C(_QWORD *a1)
{
  return sub_1007CF368(a1);
}

uint64_t sub_1007D0090(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1005034A0(&qword_1013F36B8, 255, type metadata accessor for CRLWPHyperlinkSmartFieldData, (uint64_t)&unk_100F0D0EC);
  return CRExtendableValueStruct.copy(renamingReferences:)(a1, a2, v4);
}

uint64_t sub_1007D00EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_1005034A0(&qword_1013F3650, 255, type metadata accessor for CRLWPHyperlinkSmartFieldData, (uint64_t)&unk_100F0CECC);
  v7 = sub_1005034A0(&qword_1013F36A8, 255, type metadata accessor for CRLWPHyperlinkSmartFieldData, (uint64_t)&unk_100F0CF04);
  return CRValue<>.observableDifference(from:with:)(a1, a2, a3, v6, v7);
}

uint64_t sub_1007D0188(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1005034A0(&qword_1013F36B8, 255, type metadata accessor for CRLWPHyperlinkSmartFieldData, (uint64_t)&unk_100F0D0EC);
  return CRExtendableValueStruct.visitReferences(_:)(a1, a2, v4);
}

uint64_t sub_1007D01DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1005034A0(&qword_1013F36B0, 255, type metadata accessor for CRLWPHyperlinkSmartFieldData, (uint64_t)&unk_100F0CF2C);
  return CRValueStruct.init(from:)(a1, a2, v4);
}

uint64_t sub_1007D0244(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1005034A0(&qword_1013F36B0, 255, type metadata accessor for CRLWPHyperlinkSmartFieldData, (uint64_t)&unk_100F0CF2C);
  return CRValueStruct.encode(to:)(a1, a2, v4);
}

uint64_t sub_1007D02A4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1005034A0(&qword_1013F36B0, 255, type metadata accessor for CRLWPHyperlinkSmartFieldData, (uint64_t)&unk_100F0CF2C);
  return CRValueStruct.minEncodingVersion.getter(a1, v2);
}

uint64_t sub_1007D02F8()
{
  return 0x6E696C7265707968;
}

uint64_t sub_1007D0314(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_1007E6AC0();
  return static CRAttributeStringKey.loadAttribute(from:)(a1, a2, v4);
}

unint64_t sub_1007D0360()
{
  uint64_t v0;
  uint64_t inited;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t result;
  uint64_t v16;

  v0 = sub_1004B804C(qword_1013F3EC0);
  inited = swift_initStackObject(v0, &v16);
  *(_OWORD *)(inited + 16) = xmmword_100F0C660;
  *(_QWORD *)(inited + 32) = 0x6E696C7265646E75;
  *(_QWORD *)(inited + 40) = 0xE900000000000065;
  v2 = sub_1007E628C();
  *(_QWORD *)(inited + 48) = &type metadata for CRLWPUnderlineAttribute;
  *(_QWORD *)(inited + 56) = v2;
  strcpy((char *)(inited + 64), "strikethrough");
  *(_WORD *)(inited + 78) = -4864;
  v3 = sub_1007E6380();
  *(_QWORD *)(inited + 80) = &type metadata for CRLWPStrikethroughAttribute;
  *(_QWORD *)(inited + 88) = v3;
  *(_QWORD *)(inited + 96) = 0x657A6953746E6F66;
  *(_QWORD *)(inited + 104) = 0xE800000000000000;
  v4 = sub_1007E5D64();
  *(_QWORD *)(inited + 112) = &type metadata for CRLWPFontSizeAttribute;
  *(_QWORD *)(inited + 120) = v4;
  *(_QWORD *)(inited + 128) = 0x656D614E746E6F66;
  *(_QWORD *)(inited + 136) = 0xE800000000000000;
  v5 = sub_1007E654C();
  *(_QWORD *)(inited + 144) = &type metadata for CRLWPFontNameAttribute;
  *(_QWORD *)(inited + 152) = v5;
  strcpy((char *)(inited + 160), "characterFill");
  *(_WORD *)(inited + 174) = -4864;
  v6 = sub_1007E6660();
  *(_QWORD *)(inited + 176) = &type metadata for CRLWPCharacterFillAttribute;
  *(_QWORD *)(inited + 184) = v6;
  *(_QWORD *)(inited + 192) = 1684828002;
  *(_QWORD *)(inited + 200) = 0xE400000000000000;
  v7 = sub_1007E6190();
  *(_QWORD *)(inited + 208) = &type metadata for CRLWPFontBoldAttribute;
  *(_QWORD *)(inited + 216) = v7;
  *(_QWORD *)(inited + 224) = 0x63696C617469;
  *(_QWORD *)(inited + 232) = 0xE600000000000000;
  v8 = sub_1007E6220();
  *(_QWORD *)(inited + 240) = &type metadata for CRLWPFontItalicAttribute;
  *(_QWORD *)(inited + 248) = v8;
  *(_QWORD *)(inited + 256) = 0x6C7974537473696CLL;
  *(_QWORD *)(inited + 264) = 0xE900000000000065;
  v9 = sub_1007E67D4();
  *(_QWORD *)(inited + 272) = &type metadata for CRLWPListStyleTypeAttribute;
  *(_QWORD *)(inited + 280) = v9;
  *(_QWORD *)(inited + 288) = 0x726174537473696CLL;
  *(_QWORD *)(inited + 296) = 0xE900000000000074;
  v10 = sub_1007E68A4();
  *(_QWORD *)(inited + 304) = &type metadata for CRLWPListStartAttribute;
  *(_QWORD *)(inited + 312) = v10;
  strcpy((char *)(inited + 320), "paragraphLevel");
  *(_BYTE *)(inited + 335) = -18;
  v11 = sub_1007E6934();
  *(_QWORD *)(inited + 336) = &type metadata for CRLWPParagraphLevelAttribute;
  *(_QWORD *)(inited + 344) = v11;
  *(_QWORD *)(inited + 352) = 0x6E696C7265707968;
  *(_QWORD *)(inited + 360) = 0xE90000000000006BLL;
  v12 = sub_1007E69A0();
  *(_QWORD *)(inited + 368) = &type metadata for CRLWPHyperlinkAttribute;
  *(_QWORD *)(inited + 376) = v12;
  *(_QWORD *)(inited + 384) = 0xD000000000000012;
  *(_QWORD *)(inited + 392) = 0x8000000100FAA3D0;
  v13 = sub_1007E6B08();
  *(_QWORD *)(inited + 400) = &type metadata for CRLWPParagraphAlignmentAttribute;
  *(_QWORD *)(inited + 408) = v13;
  *(_QWORD *)(inited + 416) = 0xD000000000000014;
  *(_QWORD *)(inited + 424) = 0x8000000100FCC800;
  v14 = sub_1007E6BFC();
  *(_QWORD *)(inited + 432) = &type metadata for CRLWPWritingDirectionAttribute;
  *(_QWORD *)(inited + 440) = v14;
  result = sub_1008D770C(inited);
  static CRLTextAttributeScope.attributeTypes = result;
  return result;
}

uint64_t *CRLTextAttributeScope.attributeTypes.unsafeMutableAddressor()
{
  if (qword_1013DD130 != -1)
    swift_once(&qword_1013DD130, sub_1007D0360);
  return &static CRLTextAttributeScope.attributeTypes;
}

double static CRLTextAttributeScope.attributeTypes.getter()
{
  double result;
  _BYTE v1[24];

  if (qword_1013DD130 != -1)
    swift_once(&qword_1013DD130, sub_1007D0360);
  swift_beginAccess(&static CRLTextAttributeScope.attributeTypes, v1, 0, 0);
  *(_QWORD *)&result = swift_bridgeObjectRetain(static CRLTextAttributeScope.attributeTypes).n128_u64[0];
  return result;
}

double static CRLTextAttributeScope.attributeTypes.setter(uint64_t a1)
{
  double result;
  _BYTE v3[24];

  if (qword_1013DD130 != -1)
    swift_once(&qword_1013DD130, sub_1007D0360);
  swift_beginAccess(&static CRLTextAttributeScope.attributeTypes, v3, 1, 0);
  static CRLTextAttributeScope.attributeTypes = a1;
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t (*static CRLTextAttributeScope.attributeTypes.modify(uint64_t a1))(_QWORD)
{
  if (qword_1013DD130 != -1)
    swift_once(&qword_1013DD130, sub_1007D0360);
  swift_beginAccess(&static CRLTextAttributeScope.attributeTypes, a1, 33, 0);
  return j__swift_endAccess_0;
}

ValueMetadata *type metadata accessor for CRLTextAttributeScope()
{
  return &type metadata for CRLTextAttributeScope;
}

void sub_1007D0778(void *a1)
{
  unint64_t v2;
  uint64_t KeyPath;
  id v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  const mach_header_64 *v19;
  unint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  id v33;
  int v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  id v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  unsigned __int8 v60;
  unsigned int v61;
  char v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;

  v2 = sub_100559A64();
  CRAttributedString.Attributes.init()(&type metadata for CRLTextAttributeScope, v2);
  KeyPath = swift_getKeyPath(&unk_100F0DCA0);
  v4 = a1;
  v5 = sub_1007E7AC8((uint64_t)a1);

  LOBYTE(v59) = v5 & 1;
  v6 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
  v7 = sub_10073DD28();
  CRAttributedString.Attributes.subscript.setter(&v59, KeyPath, v6, v7);
  v8 = swift_getKeyPath(&unk_100F0DD50);
  v9 = v4;
  v10 = sub_1007E7F60((char *)a1);

  v59 = v10;
  v60 = 0;
  v11 = sub_10073DCA0();
  CRAttributedString.Attributes.subscript.setter(&v59, v8, v6, v11);
  v12 = swift_getKeyPath(&unk_100F0DAE8);
  v13 = v9;
  v14 = sub_1007E8C64((char *)a1);

  v59 = v14;
  v60 = 0;
  v15 = sub_10073D7B8();
  CRAttributedString.Attributes.subscript.setter(&v59, v12, v6, v15);
  v16 = swift_getKeyPath(&unk_100F0DB40);
  v17 = v13;
  v18 = sub_1007E85E4((char *)a1);

  sub_100D3743C(v18, (uint64_t)&v59);
  v19 = &_mh_execute_header;
  if (!v62)
    v19 = 0;
  v50 = v59;
  v51 = v60;
  v52 = (unint64_t)v19 | v61;
  v53 = v63;
  v54 = v64;
  v55 = v65;
  v56 = v66;
  v57 = v67;
  v58 = v68;
  v20 = sub_1007E678C();
  CRAttributedString.Attributes.subscript.setter(&v50, v16, v6, v20);
  v21 = swift_getKeyPath(&unk_100F0DA58);
  v22 = v17;
  v23 = sub_1007E8FB0((char *)a1);

  v50 = v23;
  LOBYTE(v51) = 0;
  v24 = sub_10073D704();
  CRAttributedString.Attributes.subscript.setter(&v50, v21, v6, v24);
  v25 = swift_getKeyPath(&unk_100F0DB98);
  v26 = v22;
  v27 = sub_1007E74AC((char *)a1);
  v29 = v28;

  v50 = sub_10098B7E4(v27, v29);
  v51 = v30;
  LOBYTE(v52) = 0;
  v31 = sub_1007E6618();
  CRAttributedString.Attributes.subscript.setter(&v50, v25, v6, v31);
  v32 = swift_getKeyPath(&unk_100F0DBF0);
  v33 = v26;
  sub_1007E7874((uint64_t)a1);
  v35 = v34;

  LODWORD(v50) = v35;
  BYTE4(v50) = 0;
  v36 = sub_1007395C4();
  CRAttributedString.Attributes.subscript.setter(&v50, v32, v6, v36);
  v37 = swift_getKeyPath(&unk_100F0DC48);
  v38 = v33;
  LOBYTE(v27) = sub_1007E7D14((uint64_t)a1);

  LOBYTE(v50) = v27 & 1;
  v39 = sub_10073DCE4();
  CRAttributedString.Attributes.subscript.setter(&v50, v37, v6, v39);
  v40 = swift_getKeyPath(&unk_100F0DE48);
  v50 = 0;
  LOBYTE(v51) = 0;
  v41 = sub_1007370A8();
  CRAttributedString.Attributes.subscript.setter(&v50, v40, v6, v41);
  v42 = swift_getKeyPath(&unk_100F0DCF8);
  v43 = v38;
  v44 = sub_1007E82A0((char *)a1);

  v50 = v44;
  LOBYTE(v51) = 0;
  v45 = sub_10073DC5C();
  CRAttributedString.Attributes.subscript.setter(&v50, v42, v6, v45);
  v46 = swift_getKeyPath(&unk_100F0DE08);
  v50 = 0;
  LOBYTE(v51) = 0;
  v47 = sub_1007392B8();
  CRAttributedString.Attributes.subscript.setter(&v50, v46, v6, v47);
  v48 = swift_getKeyPath(&unk_100F0DE28);
  v50 = 1;
  LOBYTE(v51) = 0;
  v49 = sub_100737130();
  CRAttributedString.Attributes.subscript.setter(&v50, v48, v6, v49);

}

void sub_1007D0B78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CRLWPStorageCRDTData(0);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(a3 + OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData);
  if (!v17)
    goto LABEL_10;
  (*(void (**)(__n128))(*(_QWORD *)v17 + 760))(v14);
  sub_1004B8460((uint64_t)&v12[*(int *)(v10 + 20)], (uint64_t)v16, type metadata accessor for CRLWPStorageCRDTData);
  sub_1004B84A4((uint64_t)v12, type metadata accessor for CRLWPShapeItemCRDTData);
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v9, v16, v6);
  sub_1004B84A4((uint64_t)v16, type metadata accessor for CRLWPStorageCRDTData);
  v18 = CRAttributedString.count.getter(v6);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (v18 >= (a1 & ~(a1 >> 63)))
    v19 = a1 & ~(a1 >> 63);
  else
    v19 = v18;
  if (v18 >= (a2 & ~(a2 >> 63)))
    v20 = a2 & ~(a2 >> 63);
  else
    v20 = v18;
  if (v20 < v19)
  {
    __break(1u);
LABEL_10:
    __break(1u);
  }
}

uint64_t sub_1007D0D20(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v3 = *(uint64_t *)((char *)a1 + a3 - 24);
  v4 = *a2;
  v6 = *a1;
  v7 = v4;
  type metadata accessor for WritableKeyPath(0, &type metadata for CRLTextAttributeScope, v3);
  return dispatch thunk of static Equatable.== infix(_:_:)(&v7, &v6) & 1;
}

uint64_t sub_1007D0D84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for WritableKeyPath(0, &type metadata for CRLTextAttributeScope, *(_QWORD *)(a2 + a1 - 24));
  return dispatch thunk of Hashable.hashValue.getter(v2, &protocol witness table for AnyKeyPath);
}

void sub_1007D0DD4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  NSAttributedStringKey v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  CTFontRef v24;
  uint64_t KeyPath;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  CTFontRef v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  _QWORD *v48;
  const void *v49;
  CFTypeID v50;
  uint64_t v51;
  const __CTFont *v52;
  char SymbolicTraits;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __CFString *v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  float Size;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  CTFontRef v86;
  uint64_t v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  id v92;
  _BYTE *v93;
  void *v94;
  id v95;
  _BYTE *v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  const mach_header_64 *v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  id v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  CTFontRef v111;
  const __CTFont *v112;
  uint64_t v113;
  uint64_t v114;
  int64_t v115;
  int64_t v116;
  _QWORD v117[14];
  CTFontRef v118;
  __int128 v119;
  uint64_t v120;
  void *v121;
  __int128 v122;
  _BYTE v123[88];
  _BYTE v124[88];
  _BYTE v125[96];

  *a2 = &_swiftEmptySetSingleton;
  sub_1004B804C((uint64_t *)&unk_1013EFC60);
  v3 = sub_100559A64();
  CRAttributedString.Attributes.init()(&type metadata for CRLTextAttributeScope, v3);
  v114 = a1 + 64;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v116 = 0;
  v7 = NSUnderlineStyleAttributeName;
  v115 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v9 = v8 | (v116 << 6);
LABEL_6:
      v10 = *(_QWORD *)(a1 + 56);
      v117[0] = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v9);
      v11 = (void *)v117[0];
      sub_1004CB6E8(v10 + 32 * v9, (uint64_t)&v117[1]);
      v12 = v11;
      goto LABEL_25;
    }
    v13 = v116 + 1;
    if (__OFADD__(v116, 1))
    {
      __break(1u);
      goto LABEL_67;
    }
    if (v13 < v115)
    {
      v14 = *(_QWORD *)(v114 + 8 * v13);
      if (v14)
        goto LABEL_10;
      v15 = v116 + 2;
      ++v116;
      if (v13 + 1 < v115)
      {
        v14 = *(_QWORD *)(v114 + 8 * v15);
        if (v14)
          goto LABEL_13;
        v116 = v13 + 1;
        if (v13 + 2 < v115)
        {
          v14 = *(_QWORD *)(v114 + 8 * (v13 + 2));
          if (v14)
          {
            v13 += 2;
            goto LABEL_10;
          }
          v15 = v13 + 3;
          v116 = v13 + 2;
          if (v13 + 3 < v115)
            break;
        }
      }
    }
LABEL_24:
    v6 = 0;
    memset(v117, 0, 40);
LABEL_25:
    sub_1004C4938((uint64_t)v117, (uint64_t)&v121, (uint64_t *)&unk_1013F3D60);
    v16 = v121;
    if (!v121)
    {
      swift_release(a1);
      return;
    }
    sub_10050CB14(&v122, &v119);
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v19 = v18;
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v22 = v20;
    if (v17 == v21 && v19 == v20)
    {
      swift_bridgeObjectRelease_n(v19, 2);
LABEL_30:
      sub_1004CB6E8((uint64_t)&v119, (uint64_t)v117);
      if ((swift_dynamicCast(&v118, v117, (char *)&type metadata for Any + 8, &type metadata for Int, 6) & 1) != 0)
      {
        v24 = v118;
        KeyPath = swift_getKeyPath(&unk_100F0DD50);
        __chkstk_darwin(KeyPath);
        swift_getKeyPath(&unk_100F0DD70);
        sub_100AD8690(v117, 0x6E696C7265646E75, 0xE900000000000065);
        swift_bridgeObjectRelease(v117[1]);
        __chkstk_darwin(v26);
        sub_100739464();
        v7 = NSUnderlineStyleAttributeName;
        v27 = swift_getKeyPath(&unk_100F0DAB0);
        v117[0] = v24;
        LOBYTE(v117[1]) = 0;
        v28 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
        v29 = sub_10073DCA0();
        goto LABEL_38;
      }
      goto LABEL_39;
    }
    v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v19, v21, v20, 0);
    swift_bridgeObjectRelease(v19);
    swift_bridgeObjectRelease(v22);
    if ((v23 & 1) != 0)
      goto LABEL_30;
    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSStrikethroughStyleAttributeName);
    v32 = v31;
    v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v35 = v33;
    if (v30 == v34 && v32 == v33)
    {
      swift_bridgeObjectRelease_n(v32, 2);
LABEL_36:
      sub_1004CB6E8((uint64_t)&v119, (uint64_t)v117);
      if ((swift_dynamicCast(&v118, v117, (char *)&type metadata for Any + 8, &type metadata for Int, 6) & 1) != 0)
      {
        v37 = v118;
        v38 = swift_getKeyPath(&unk_100F0DCF8);
        __chkstk_darwin(v38);
        swift_getKeyPath(&unk_100F0DD18);
        sub_100AD8690(v117, 0x6874656B69727473, 0xED00006867756F72);
        swift_bridgeObjectRelease(v117[1]);
        __chkstk_darwin(v39);
        sub_100739420();
        v27 = swift_getKeyPath(&unk_100F0DAB0);
        v7 = NSUnderlineStyleAttributeName;
        v117[0] = v37;
        LOBYTE(v117[1]) = 0;
        v28 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
        v29 = sub_10073DC5C();
LABEL_38:
        CRAttributedString.Attributes.subscript.setter(v117, v27, v28, v29);
      }
LABEL_39:

      goto LABEL_40;
    }
    v36 = _stringCompareWithSmolCheck(_:_:expecting:)(v30, v32, v34, v33, 0);
    swift_bridgeObjectRelease(v32);
    swift_bridgeObjectRelease(v35);
    if ((v36 & 1) != 0)
      goto LABEL_36;
    v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSFontAttributeName);
    v42 = v41;
    v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v45 = v43;
    if (v40 == v44 && v42 == v43)
    {
      swift_bridgeObjectRelease_n(v42, 2);
      goto LABEL_45;
    }
    v46 = _stringCompareWithSmolCheck(_:_:expecting:)(v40, v42, v44, v43, 0);
    swift_bridgeObjectRelease(v42);
    swift_bridgeObjectRelease(v45);
    if ((v46 & 1) != 0)
    {
LABEL_45:
      v47 = v120;
      v48 = sub_1004BB5A4(&v119, v120);
      v49 = (const void *)_bridgeAnythingToObjectiveC<A>(_:)(v48, v47);
      v50 = CFGetTypeID(v49);
      swift_unknownObjectRelease(v49);
      if (v50 != CTFontGetTypeID())
        goto LABEL_39;
      sub_1004CB6E8((uint64_t)&v119, (uint64_t)v117);
      type metadata accessor for CTFont(0);
      swift_dynamicCast(&v118, v117, (char *)&type metadata for Any + 8, v51, 7);
      v52 = v118;
      SymbolicTraits = CTFontGetSymbolicTraits(v118);
      if ((SymbolicTraits & 2) != 0)
      {
        v54 = swift_getKeyPath(&unk_100F0DCA0);
        __chkstk_darwin(v54);
        swift_getKeyPath(&unk_100F0DCC0);
        sub_100AD8690(v117, 1684828002, 0xE400000000000000);
        swift_bridgeObjectRelease(v117[1]);
        __chkstk_darwin(v55);
        sub_1007394EC();
        v56 = swift_getKeyPath(&unk_100F0DAB0);
        LOBYTE(v117[0]) = 1;
        v57 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
        v58 = sub_10073DD28();
        CRAttributedString.Attributes.subscript.setter(v117, v56, v57, v58);
      }
      if ((SymbolicTraits & 1) != 0)
      {
        v59 = swift_getKeyPath(&unk_100F0DC48);
        __chkstk_darwin(v59);
        swift_getKeyPath(&unk_100F0DC68);
        sub_100AD8690(v117, 0x63696C617469, 0xE600000000000000);
        swift_bridgeObjectRelease(v117[1]);
        __chkstk_darwin(v60);
        sub_1007394A8();
        v61 = swift_getKeyPath(&unk_100F0DAB0);
        LOBYTE(v117[0]) = 1;
        v62 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
        v63 = sub_10073DCE4();
        CRAttributedString.Attributes.subscript.setter(v117, v61, v62, v63);
      }
      v64 = swift_getKeyPath(&unk_100F0DB98);
      __chkstk_darwin(v64);
      v65 = swift_getKeyPath(&unk_100F0DBB8);
      v66 = (__CFString *)CTFontCopyFamilyName(v52);
      v109 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
      v112 = v52;
      v68 = v67;

      sub_100AD8690(v117, 0x656D614E746E6F66, 0xE800000000000000);
      swift_bridgeObjectRelease(v117[1]);
      __chkstk_darwin(v69);
      sub_100739574();
      v70 = swift_getKeyPath(&unk_100F0DAB0);
      swift_retain(v65);
      swift_bridgeObjectRetain(v68);
      v117[0] = sub_10098B7E4(v109, v68);
      v117[1] = v71;
      LOBYTE(v117[2]) = 0;
      v110 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
      v72 = sub_1007E6618();
      CRAttributedString.Attributes.subscript.setter(v117, v70, v110, v72);
      swift_bridgeObjectRelease(v68);
      swift_release(v65);
      v73 = swift_getKeyPath(&unk_100F0DBF0);
      __chkstk_darwin(v73);
      swift_getKeyPath(&unk_100F0DC10);
      Size = CTFontGetSize(v112);
      sub_100AD8690(v117, 0x657A6953746E6F66, 0xE800000000000000);
      swift_bridgeObjectRelease(v117[1]);
      __chkstk_darwin(v75);
      sub_100739530();
      v76 = swift_getKeyPath(&unk_100F0DAB0);
      *(float *)v117 = Size;
      BYTE4(v117[0]) = 0;
      v77 = sub_1007395C4();
      CRAttributedString.Attributes.subscript.setter(v117, v76, v110, v77);

      _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v119);
      v7 = NSUnderlineStyleAttributeName;
    }
    else
    {
      v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSForegroundColorAttributeName);
      v80 = v79;
      v82 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      v83 = v81;
      if (v78 == v82 && v80 == v81)
      {
        swift_bridgeObjectRelease_n(v80, 2);
      }
      else
      {
        v84 = _stringCompareWithSmolCheck(_:_:expecting:)(v78, v80, v82, v81, 0);
        swift_bridgeObjectRelease(v80);
        swift_bridgeObjectRelease(v83);
        if ((v84 & 1) == 0)
          goto LABEL_39;
      }
      sub_1004CB6E8((uint64_t)&v119, (uint64_t)v117);
      v85 = sub_1004B8930(0, (unint64_t *)&qword_1013F4260, UIColor_ptr);
      if ((swift_dynamicCast(&v118, v117, (char *)&type metadata for Any + 8, v85, 6) & 1) == 0)
        goto LABEL_39;
      v86 = v118;
      v87 = swift_getKeyPath(&unk_100F0DB40);
      __chkstk_darwin(v87);
      v111 = v86;
      v113 = swift_getKeyPath(&unk_100F0DB60);
      v88 = -[__CTFont CGColor](v86, "CGColor");
      v107 = objc_msgSend(objc_allocWithZone((Class)CRLColorFill), "initWithCGColor:", v88);

      sub_100AD8690(v117, 0x6574636172616863, 0xED00006C6C694672);
      swift_bridgeObjectRelease(v117[1]);
      __chkstk_darwin(v89);
      sub_1007393D0();
      v108 = swift_getKeyPath(&unk_100F0DAB0);
      v90 = objc_opt_self(CRLColorFill);
      v91 = (void *)swift_dynamicCastObjCClass(v107, v90);
      swift_retain(v113);
      v92 = v107;
      if (v91)
      {
        v93 = v123;
        sub_1006C5DE8(objc_msgSend(v91, "color"), (uint64_t)v123);
        v7 = NSUnderlineStyleAttributeName;
        v94 = v92;
      }
      else
      {
        sub_100757E04(&_mh_execute_header, (uint64_t)"init(archiving:)", 16, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLFillData.swift", 81, 2, 47, "Unsupported fill type for archiving. Falling back to archiving color fill.", 74, 2u, (uint64_t)_swiftEmptyArrayStorage);
        sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"init(archiving:)", 16, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLFillData.swift", 81, 2u, 47, (uint64_t)"Unsupported fill type for archiving. Falling back to archiving color fill.", 74, 2u);
        v95 = objc_msgSend(v92, "referenceColor");
        v94 = v92;
        if (v95)
        {
          v93 = v124;
          v96 = v124;
        }
        else
        {
          sub_100757E04(&_mh_execute_header, (uint64_t)"init(archiving:)", 16, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLFillData.swift", 81, 2, 52, "Missing fill reference color. Falling back to black color.", 58, 2u, (uint64_t)_swiftEmptyArrayStorage);
          v94 = v92;
          sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"init(archiving:)", 16, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLFillData.swift", 81, 2u, 52, (uint64_t)"Missing fill reference color. Falling back to black color.", 58, 2u);
          v95 = objc_msgSend((id)objc_opt_self(CRLColor), "blackColor");
          v93 = v125;
          v96 = v125;
        }
        sub_1006C5DE8(v95, (uint64_t)v96);
        v7 = NSUnderlineStyleAttributeName;
      }

      v98 = *((_QWORD *)v93 + 9);
      v97 = *((_QWORD *)v93 + 10);
      v99 = *(_OWORD *)(v93 + 40);
      v100 = *(_OWORD *)(v93 + 56);
      v101 = *(_OWORD *)(v93 + 8);
      v102 = *(_OWORD *)(v93 + 24);
      v103 = &_mh_execute_header;
      if (!v93[4])
        v103 = 0;
      v104 = (unint64_t)v103 | *(unsigned int *)v93;
      *(_OWORD *)v117 = 0uLL;
      v117[2] = v104;
      *(_OWORD *)&v117[3] = v101;
      *(_OWORD *)&v117[5] = v102;
      *(_OWORD *)&v117[7] = v99;
      *(_OWORD *)&v117[9] = v100;
      v117[11] = v98;
      v117[12] = v97;
      v117[13] = &_swiftEmptyDictionarySingleton;
      v105 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
      v106 = sub_1007E678C();
      CRAttributedString.Attributes.subscript.setter(v117, v108, v105, v106);

      swift_release(v113);
LABEL_40:
      _s8Freeform26AnyCRLCommandChangeContextVwxx_0(&v119);
    }
  }
  v14 = *(_QWORD *)(v114 + 8 * v15);
  if (v14)
  {
LABEL_13:
    v13 = v15;
LABEL_10:
    v6 = (v14 - 1) & v14;
    v9 = __clz(__rbit64(v14)) + (v13 << 6);
    v116 = v13;
    goto LABEL_6;
  }
  while (1)
  {
    v13 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v13 >= v115)
    {
      v116 = v115 - 1;
      goto LABEL_24;
    }
    v14 = *(_QWORD *)(v114 + 8 * v13);
    ++v15;
    if (v14)
      goto LABEL_10;
  }
LABEL_67:
  __break(1u);
}

void sub_1007D1D44(void **a1@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  unint64_t v4;
  char *v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  char v70;
  id v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  id v75;
  const mach_header_64 *v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  void **v80;
  char *v81;
  char *v82;
  uint64_t KeyPath;
  _QWORD v84[3];
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  char v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  __int128 v100;

  *a2 = &_swiftEmptySetSingleton;
  v3 = (char *)a2 + *(int *)(sub_1004B804C((uint64_t *)&unk_1013EFC60) + 36);
  v4 = sub_100559A64();
  CRAttributedString.Attributes.init()(&type metadata for CRLTextAttributeScope, v4);
  KeyPath = swift_getKeyPath(&unk_100F0DD50);
  swift_getKeyPath(&unk_100F0DD70);
  v6 = (unint64_t)a1[4];
  v82 = (char *)a1[3];
  v5 = v82;
  v7 = (char *)a1[5];
  v8 = swift_getKeyPath(&unk_100F0DD50);
  v9 = sub_100DC71FC(v8, v82, (char *)v6, v7);
  v11 = v10;
  swift_release(v8);
  if ((v11 & 1) != 0)
  {
    if (!*(_QWORD *)(v9 + 16))
    {
      __break(1u);
      goto LABEL_31;
    }
    v12 = *(_QWORD *)(v9 + 32);
    sub_10062E238(v9, 1);
    v9 = v12;
  }
  sub_100AD8690(&v91, 0x6E696C7265646E75, 0xE900000000000065);
  swift_bridgeObjectRelease(v92);
  __chkstk_darwin(v13);
  sub_100739464();
  v14 = swift_getKeyPath(&unk_100F0DAB0);
  v91 = v9;
  LOBYTE(v92) = 0;
  v15 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
  v16 = sub_10073DCA0();
  v81 = v3;
  CRAttributedString.Attributes.subscript.setter(&v91, v14, v15, v16);
  v17 = swift_getKeyPath(&unk_100F0DCA0);
  v5 = (char *)&v79;
  __chkstk_darwin(v17);
  swift_getKeyPath(&unk_100F0DCC0);
  v18 = (char *)swift_getKeyPath(&unk_100F0DCA0);
  v19 = sub_100DC7B80(v18, v82, (char *)v6, v7);
  v21 = v20;
  swift_release(v18);
  if ((v21 & 1) == 0)
  {
    v22 = v19 & 1;
    goto LABEL_8;
  }
  if (!*(_QWORD *)(v19 + 16))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v22 = *(_BYTE *)(v19 + 32);
  sub_10062E238(v19, 1);
LABEL_8:
  sub_100AD8690(&v91, 1684828002, 0xE400000000000000);
  swift_bridgeObjectRelease(v92);
  __chkstk_darwin(v23);
  sub_1007394EC();
  v24 = swift_getKeyPath(&unk_100F0DF48);
  LOBYTE(v91) = v22;
  v25 = sub_10073DD28();
  CRAttributedString.Attributes.subscript.setter(&v91, v24, v15, v25);
  v26 = swift_getKeyPath(&unk_100F0DCF8);
  v5 = (char *)&v79;
  __chkstk_darwin(v26);
  swift_getKeyPath(&unk_100F0DD18);
  v27 = swift_getKeyPath(&unk_100F0DCF8);
  v28 = sub_100DC68C0(v27, v82, (char *)v6, v7);
  v30 = v29;
  swift_release(v27);
  if ((v30 & 1) == 0)
    goto LABEL_11;
  if (!*(_QWORD *)(v28 + 16))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v31 = *(_QWORD *)(v28 + 32);
  sub_10062E238(v28, 1);
  v28 = v31;
LABEL_11:
  sub_100AD8690(&v91, 0x6874656B69727473, 0xED00006867756F72);
  swift_bridgeObjectRelease(v92);
  __chkstk_darwin(v32);
  sub_100739420();
  v33 = swift_getKeyPath(&unk_100F0DAB0);
  v91 = v28;
  LOBYTE(v92) = 0;
  v34 = sub_10073DC5C();
  CRAttributedString.Attributes.subscript.setter(&v91, v33, v15, v34);
  v35 = swift_getKeyPath(&unk_100F0DC48);
  v5 = (char *)&v79;
  __chkstk_darwin(v35);
  swift_getKeyPath(&unk_100F0DC68);
  v36 = (char *)swift_getKeyPath(&unk_100F0DC48);
  v37 = sub_100DC7B38(v36, v82, (char *)v6, v7);
  v39 = v38;
  swift_release(v36);
  if ((v39 & 1) == 0)
  {
    v40 = v37 & 1;
    goto LABEL_15;
  }
  if (!*(_QWORD *)(v37 + 16))
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v40 = *(_BYTE *)(v37 + 32);
  sub_10062E238(v37, 1);
LABEL_15:
  sub_100AD8690(&v91, 0x63696C617469, 0xE600000000000000);
  swift_bridgeObjectRelease(v92);
  __chkstk_darwin(v41);
  sub_1007394A8();
  v42 = swift_getKeyPath(&unk_100F0DF48);
  LOBYTE(v91) = v40;
  v43 = sub_10073DCE4();
  CRAttributedString.Attributes.subscript.setter(&v91, v42, v15, v43);
  v44 = swift_getKeyPath(&unk_100F0DB98);
  __chkstk_darwin(v44);
  v45 = swift_getKeyPath(&unk_100F0DBB8);
  v46 = swift_getKeyPath(&unk_100F0DB98);
  v47 = (_QWORD *)sub_100DC8E48(v46, v82, (char *)v6, v7);
  v49 = v48;
  v5 = v50;
  swift_release(v46);
  v80 = a1;
  if ((v5 & 1) == 0)
    goto LABEL_18;
  if (!v47[2])
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v52 = (_QWORD *)v47[4];
  v51 = v47[5];
  swift_bridgeObjectRetain(v51);
  sub_1007395B8((uint64_t)v47, v49, 1);
  v47 = v52;
  v49 = v51;
LABEL_18:
  sub_100AD8690(&v91, 0x656D614E746E6F66, 0xE800000000000000);
  swift_bridgeObjectRelease(v92);
  __chkstk_darwin(v53);
  a1 = (void **)&v79;
  sub_100739574();
  v54 = swift_getKeyPath(&unk_100F0DAB0);
  swift_retain(v45);
  swift_bridgeObjectRetain(v49);
  v91 = sub_10098B7E4((uint64_t)v47, v49);
  v92 = v55;
  LOBYTE(v93) = 0;
  v56 = sub_1007E6618();
  CRAttributedString.Attributes.subscript.setter(&v91, v54, v15, v56);
  swift_bridgeObjectRelease(v49);
  swift_release(v45);
  v57 = swift_getKeyPath(&unk_100F0DBF0);
  __chkstk_darwin(v57);
  swift_getKeyPath(&unk_100F0DC10);
  v58 = (char *)swift_getKeyPath(&unk_100F0DBF0);
  v59 = sub_100DC8518(v58, v82, (char *)v6, v7);
  v5 = v60;
  swift_release(v58);
  if ((v5 & 1) == 0)
  {
    v61 = v15;
    goto LABEL_22;
  }
  if (!*(_QWORD *)(v59 + 16))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v61 = v15;
  v62 = *(_DWORD *)(v59 + 32);
  sub_10062E238(v59, 1);
  LODWORD(v59) = v62;
LABEL_22:
  sub_100AD8690(&v91, 0x657A6953746E6F66, 0xE800000000000000);
  swift_bridgeObjectRelease(v92);
  __chkstk_darwin(v63);
  sub_100739530();
  v64 = swift_getKeyPath(&unk_100F0DF48);
  LODWORD(v91) = v59;
  BYTE4(v91) = 0;
  v65 = sub_1007395C4();
  v79 = v61;
  CRAttributedString.Attributes.subscript.setter(&v91, v64, v61, v65);
  v66 = swift_getKeyPath(&unk_100F0DB40);
  __chkstk_darwin(v66);
  a1 = (void **)swift_getKeyPath(&unk_100F0DB60);
  v67 = swift_getKeyPath(&unk_100F0DB40);
  v5 = v82;
  sub_100DC53E4(v67, v82, (char *)v6, v7);
  v6 = v68;
  v70 = v69;
  swift_release(v67);
  if ((v70 & 1) != 0)
  {
    if ((v6 & 0xC000000000000001) == 0)
    {
      if (!*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        return;
      }
      v71 = *(id *)(v6 + 32);
      goto LABEL_26;
    }
LABEL_36:
    swift_bridgeObjectRetain(v6);
    v71 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v6);
    sub_100739414((void *)v6, 1);
LABEL_26:
    sub_100739414((void *)v6, 1);
    v6 = (unint64_t)v71;
  }
  sub_100AD8690(&v91, 0x6574636172616863, 0xED00006C6C694672);
  swift_bridgeObjectRelease(v92);
  __chkstk_darwin(v72);
  v73 = v5;
  sub_1007393D0();
  v74 = swift_getKeyPath(&unk_100F0DAB0);
  swift_retain(a1);
  v75 = (id)v6;
  sub_100D3743C(v75, (uint64_t)&v91);
  v76 = &_mh_execute_header;
  if (!v94)
    v76 = 0;
  v84[0] = v91;
  v84[1] = v92;
  v84[2] = (unint64_t)v76 | v93;
  v85 = v95;
  v86 = v96;
  v87 = v97;
  v88 = v98;
  v89 = v99;
  v90 = v100;
  v77 = sub_1007E678C();
  CRAttributedString.Attributes.subscript.setter(v84, v74, v79, v77);

  swift_release(a1);
  v78 = *v80;

}

void sub_1007D2800(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  char *KeyPath;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char v28;
  char v29;
  unsigned __int8 v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;

  *a2 = &_swiftEmptySetSingleton;
  sub_1004B804C(&qword_1013F3D40);
  v3 = sub_100559A64();
  CRAttributedString.Attributes.init()(&type metadata for CRLTextAttributeScope, v3);
  swift_getKeyPath(&unk_100F0DA58);
  swift_getKeyPath(&unk_100F0DA78);
  v4 = *(char **)(a1 + 24);
  v5 = *(char **)(a1 + 32);
  v6 = *(char **)(a1 + 40);
  KeyPath = (char *)swift_getKeyPath(&unk_100F0DA58);
  v8 = sub_100DC42D4(KeyPath, v4, v5, v6);
  v10 = v9;
  swift_release(KeyPath);
  if ((v10 & 1) != 0)
  {
    if (!*(_QWORD *)(v8 + 16))
    {
      __break(1u);
      goto LABEL_19;
    }
    v11 = *(_QWORD *)(v8 + 32);
    sub_10062E238(v8, 1);
    v8 = v11;
  }
  sub_100AD8690(&v53, 0xD000000000000014, 0x8000000100FCC800);
  swift_bridgeObjectRelease(v54);
  __chkstk_darwin(v12);
  sub_10073D6C0();
  v13 = swift_getKeyPath(&unk_100F0DAB0);
  v53 = v8;
  LOBYTE(v54) = 0;
  v14 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
  v15 = sub_10073D704();
  CRAttributedString.Attributes.subscript.setter(&v53, v13, v14, v15);
  v16 = swift_getKeyPath(&unk_100F0DAE8);
  __chkstk_darwin(v16);
  swift_getKeyPath(&unk_100F0DB08);
  v17 = (char *)swift_getKeyPath(&unk_100F0DAE8);
  v18 = sub_100DC4B5C(v17, v4, v5, v6);
  v20 = v19;
  swift_release(v17);
  if ((v20 & 1) == 0)
    goto LABEL_7;
  if (!*(_QWORD *)(v18 + 16))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v21 = *(_QWORD *)(v18 + 32);
  sub_10062E238(v18, 1);
  v18 = v21;
LABEL_7:
  sub_100AD8690(&v53, 0xD000000000000012, 0x8000000100FAA3D0);
  swift_bridgeObjectRelease(v54);
  __chkstk_darwin(v22);
  sub_100573144();
  v23 = swift_getKeyPath(&unk_100F0DAB0);
  v53 = v18;
  LOBYTE(v54) = 0;
  v24 = sub_10073D7B8();
  CRAttributedString.Attributes.subscript.setter(&v53, v23, v14, v24);
  v25 = swift_getKeyPath(&unk_100F0DE08);
  __chkstk_darwin(v25);
  swift_getKeyPath(&unk_100F0DEA0);
  v26 = (char *)swift_getKeyPath(&unk_100F0DE08);
  v27 = sub_100DC3A48(v26, v4, v5, v6);
  v29 = v28;
  swift_release(v26);
  if ((v29 & 1) == 0)
  {
    v30 = v27;
    goto LABEL_11;
  }
  if (!*(_QWORD *)(v27 + 16))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v30 = *(_BYTE *)(v27 + 32);
  sub_10062E238(v27, 1);
LABEL_11:
  sub_100AD8690(&v53, 0x6C7974537473696CLL, 0xE900000000000065);
  swift_bridgeObjectRelease(v54);
  __chkstk_darwin(v31);
  sub_100739274();
  v32 = swift_getKeyPath(&unk_100F0DAB0);
  v53 = v30;
  LOBYTE(v54) = 0;
  v33 = sub_1007392B8();
  CRAttributedString.Attributes.subscript.setter(&v53, v32, v14, v33);
  v34 = swift_getKeyPath(&unk_100F0DE28);
  __chkstk_darwin(v34);
  swift_getKeyPath(&unk_100F0DED8);
  v35 = (char *)swift_getKeyPath(&unk_100F0DE28);
  v36 = sub_100DC31DC(v35, v4, v5, v6);
  v38 = v37;
  swift_release(v35);
  if ((v38 & 1) != 0)
  {
    if (*(_QWORD *)(v36 + 16))
    {
      v39 = *(_QWORD *)(v36 + 32);
      sub_10062E238(v36, 1);
      v36 = v39;
      goto LABEL_14;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
LABEL_14:
  sub_100AD8690(&v53, 0x726174537473696CLL, 0xE900000000000074);
  swift_bridgeObjectRelease(v54);
  __chkstk_darwin(v40);
  sub_1007370EC();
  v41 = swift_getKeyPath(&unk_100F0DAB0);
  v53 = v36;
  LOBYTE(v54) = 0;
  v42 = sub_100737130();
  CRAttributedString.Attributes.subscript.setter(&v53, v41, v14, v42);
  v43 = swift_getKeyPath(&unk_100F0DE48);
  __chkstk_darwin(v43);
  swift_getKeyPath(&unk_100F0DF10);
  v44 = (char *)swift_getKeyPath(&unk_100F0DE48);
  v45 = sub_100DC9830(v44, v4, v5, v6);
  v47 = v46;
  swift_release(v44);
  if ((v47 & 1) == 0)
  {
LABEL_17:
    sub_100AD8690(&v53, 0x7061726761726170, 0xEE006C6576654C68);
    swift_bridgeObjectRelease(v54);
    __chkstk_darwin(v49);
    sub_100737064();
    v50 = swift_getKeyPath(&unk_100F0DAB0);
    v53 = v45;
    LOBYTE(v54) = 0;
    v51 = sub_1007370A8();
    CRAttributedString.Attributes.subscript.setter(&v53, v50, v14, v51);
    v52 = *(void **)a1;

    return;
  }
  if (*(_QWORD *)(v45 + 16))
  {
    v48 = *(_QWORD *)(v45 + 32);
    sub_10062E238(v45, 1);
    v45 = v48;
    goto LABEL_17;
  }
LABEL_22:
  __break(1u);
}

uint64_t sub_1007D2ED4(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v6 = *a1;
  v7 = v4;
  sub_1004B804C(a4);
  return dispatch thunk of static Equatable.== infix(_:_:)(&v7, &v6) & 1;
}

void sub_1007D2F28(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v3;
  NSString *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  void *v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  __int128 v21;
  __int128 v22;

  *a2 = &_swiftEmptySetSingleton;
  sub_1004B804C(&qword_1013F3D40);
  v3 = sub_100559A64();
  CRAttributedString.Attributes.init()(&type metadata for CRLTextAttributeScope, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
    v21 = 0u;
    v22 = 0u;
LABEL_10:
    swift_bridgeObjectRelease(a1);
    goto LABEL_11;
  }
  v4 = NSParagraphStyleAttributeName;
  v5 = sub_100842FAC();
  if ((v6 & 1) == 0)
  {
    v21 = 0u;
    v22 = 0u;

    goto LABEL_10;
  }
  sub_1004CB6E8(*(_QWORD *)(a1 + 56) + 32 * v5, (uint64_t)&v21);

  swift_bridgeObjectRelease(a1);
  if (!*((_QWORD *)&v22 + 1))
  {
LABEL_11:
    sub_1004CB800((uint64_t)&v21, &qword_1013E0230);
    return;
  }
  v7 = sub_1004B8930(0, &qword_1013F3D48, NSParagraphStyle_ptr);
  if ((swift_dynamicCast(&v20, &v21, (char *)&type metadata for Any + 8, v7, 6) & 1) != 0)
  {
    v8 = v20;
    KeyPath = swift_getKeyPath(&unk_100F0DA58);
    __chkstk_darwin(KeyPath);
    swift_getKeyPath(&unk_100F0DA78);
    v10 = (uint64_t)objc_msgSend(v8, "baseWritingDirection");
    if ((unint64_t)(v10 + 1) >= 3)
    {
      sub_100757E04(&_mh_execute_header, (uint64_t)"init(_:)", 8, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPWritingDirection.swift", 87, 2, 24, "Unknown direction.", 18, 2u, (uint64_t)_swiftEmptyArrayStorage);
      sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"init(_:)", 8, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPWritingDirection.swift", 87, 2u, 24, (uint64_t)"Unknown direction.", 18, 2u);
      v10 = -1;
    }
    sub_100AD8690((uint64_t *)&v21, 0xD000000000000014, 0x8000000100FCC800);
    swift_bridgeObjectRelease(*((_QWORD *)&v21 + 1));
    __chkstk_darwin(v11);
    sub_10073D6C0();
    v12 = swift_getKeyPath(&unk_100F0DAB0);
    *(_QWORD *)&v21 = v10;
    BYTE8(v21) = 0;
    v13 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
    v14 = sub_10073D704();
    CRAttributedString.Attributes.subscript.setter(&v21, v12, v13, v14);
    v15 = swift_getKeyPath(&unk_100F0DAE8);
    __chkstk_darwin(v15);
    swift_getKeyPath(&unk_100F0DB08);
    v16 = sub_1001B3024((unint64_t)objc_msgSend(v8, "alignment"));
    sub_100AD8690((uint64_t *)&v21, 0xD000000000000012, 0x8000000100FAA3D0);
    swift_bridgeObjectRelease(*((_QWORD *)&v21 + 1));
    __chkstk_darwin(v17);
    sub_100573144();
    v18 = swift_getKeyPath(&unk_100F0DAB0);
    *(_QWORD *)&v21 = v16;
    BYTE8(v21) = 0;
    v19 = sub_10073D7B8();
    CRAttributedString.Attributes.subscript.setter(&v21, v18, v13, v19);

  }
}

uint64_t sub_1007D3318(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = a3;
  v5 = sub_1004B804C(&qword_1013F3D40);
  __chkstk_darwin(v5);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1004B804C((uint64_t *)&unk_1013EFC60);
  result = __chkstk_darwin(v12);
  v15 = (uint64_t *)((char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (*(_QWORD *)(a1 + 16))
  {
    swift_bridgeObjectRetain(a1);
    sub_1007D0DD4(v16, v15);
    v17 = (char *)v15 + *(int *)(v12 + 36);
    v18 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
    v18(v11, v17, v8);
    sub_1004CB800((uint64_t)v15, (uint64_t *)&unk_1013EFC60);
    v19 = sub_1004B804C((uint64_t *)&unk_1013E8570);
    v20 = a2;
    v24 = a2;
    v21 = v25;
    CRAttributedString.addAttributes(_:range:)(v11, v20, v25, v19);
    v22 = *(void (**)(char *, uint64_t))(v9 + 8);
    v22(v11, v8);
    swift_bridgeObjectRetain(a1);
    sub_1007D2F28(v23, v7);
    v18(v11, &v7[*(int *)(v5 + 36)], v8);
    sub_1004CB800((uint64_t)v7, &qword_1013F3D40);
    CRAttributedString.addAttributes(_:range:)(v11, v24, v21, v19);
    return ((uint64_t (*)(char *, uint64_t))v22)(v11, v8);
  }
  return result;
}

uint64_t sub_1007D34EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t TupleTypeMetadata2;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, uint64_t, uint64_t, __n128);
  uint64_t v25;
  char v26;
  __n128 v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  char *v31;
  void (*v32)(char *, uint64_t);
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v37 = a4;
  v38 = a1;
  v39 = a2;
  v36 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(a1);
  v35 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v34 = (char *)&v34 - v7;
  v10 = type metadata accessor for CRLWPAttributeValue(0, v8, v8, v9);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (uint64_t *)((char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v14);
  v16 = (char *)&v34 - v15;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v10, v10, 0, 0);
  v18 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v19 = __chkstk_darwin(TupleTypeMetadata2);
  v21 = (char *)&v34 - v20;
  v23 = (char *)&v34 + *(int *)(v22 + 48) - v20;
  v24 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16);
  v24((char *)&v34 - v20, v38, v10, v19);
  ((void (*)(char *, uint64_t, uint64_t))v24)(v23, v39, v10);
  if (swift_getEnumCaseMultiPayload(v21, v10) != 1)
  {
    ((void (*)(char *, char *, uint64_t))v24)(v16, v21, v10);
    if (swift_getEnumCaseMultiPayload(v23, v10) != 1)
    {
      v28 = v36;
      v29 = *(void (**)(char *, char *, uint64_t))(v36 + 32);
      v30 = v34;
      v29(v34, v16, a3);
      v31 = v35;
      v29(v35, v23, a3);
      v26 = dispatch thunk of static Equatable.== infix(_:_:)(v30, v31);
      v32 = *(void (**)(char *, uint64_t))(v28 + 8);
      v32(v31, a3);
      v32(v30, a3);
      goto LABEL_9;
    }
    (*(void (**)(char *, uint64_t))(v36 + 8))(v16, a3);
    goto LABEL_7;
  }
  ((void (*)(uint64_t *, char *, uint64_t))v24)(v13, v21, v10);
  v25 = *v13;
  if (swift_getEnumCaseMultiPayload(v23, v10) != 1)
  {
    v27 = swift_bridgeObjectRelease();
LABEL_7:
    v26 = 0;
    v11 = v18;
    v10 = TupleTypeMetadata2;
    goto LABEL_9;
  }
  v26 = static Array<A>.== infix(_:_:)(v25, *(_QWORD *)v23, a3, v37);
  swift_bridgeObjectRelease();
  v27 = swift_bridgeObjectRelease();
LABEL_9:
  (*(void (**)(char *, uint64_t, __n128))(v11 + 8))(v21, v10, v27);
  return v26 & 1;
}

uint64_t sub_1007D378C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1007D34EC(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8));
}

void sub_1007D3798()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  id *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int64_t v14;
  void *v15;
  NSUInteger v16;
  id v17;
  id v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  id v22;
  _QWORD *v23;
  int64_t v24;
  int64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  int64_t v32;
  id v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  int64_t v37;
  uint64_t v38;
  _QWORD *v39;
  void *v40;
  unint64_t v41;
  id v42;
  uint64_t v43;
  int64_t v44;
  NSRange v45;
  NSRange v46;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 16);
  if (v2 < 2)
    return;
  v39 = v0;
  swift_bridgeObjectRetain_n(v1, 2);
  v38 = v1;
  v3 = (id *)(v1 + 48);
  v4 = _swiftEmptyArrayStorage;
  while (1)
  {
    v6 = (uint64_t)*(v3 - 1);
    v44 = (int64_t)*(v3 - 2);
    v7 = v4[2];
    v8 = *v3;
    v9 = v8;
    if (!v7)
    {
      v22 = v8;
      if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) == 0)
        v4 = sub_100D0FD34(0, 1, 1, v4);
      v35 = v4[2];
      v34 = v4[3];
      if (v35 >= v34 >> 1)
        v4 = sub_100D0FD34((_QWORD *)(v34 > 1), v35 + 1, 1, v4);
      v4[2] = v35 + 1;
      v36 = &v4[3 * v35];
      v36[4] = v44;
      v36[5] = v6;
      v36[6] = v22;
      goto LABEL_4;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) != 0)
    {
      v10 = v4[2];
      if (!v10)
        goto LABEL_41;
    }
    else
    {
      v4 = sub_100D14F24(v4);
      v10 = v4[2];
      if (!v10)
        goto LABEL_41;
    }
    v11 = v10 - 1;
    v12 = &v4[3 * v11];
    v14 = v12[4];
    v13 = v12[5];
    v15 = (void *)v12[6];
    v4[2] = v11;
    if (__OFSUB__(v13, v14))
      break;
    if (__OFSUB__(v6, v44))
      goto LABEL_40;
    v43 = v6;
    v45.location = v14;
    v46.location = v44;
    v45.length = v13 - v14;
    v46.length = v6 - v44;
    v16 = sub_1001E966C(v45, v46, 1);
    if (v16 == NSNotFound.getter(v16))
      goto LABEL_20;
    type metadata accessor for CRLWPCharacterStyle();
    v41 = v2;
    v17 = v9;
    v18 = v15;
    v19 = static NSObject.== infix(_:_:)(v18, v17);

    v40 = v17;
    v2 = v41;
    if ((v19 & 1) == 0)
    {
LABEL_20:
      v24 = v4[2];
      v25 = v24 + 2;
      if (__OFADD__(v24, 2))
        goto LABEL_42;
      v26 = v4[3];
      v42 = v9;
      if (v25 > (uint64_t)(v26 >> 1))
      {
        if (v24 <= v25)
          v37 = v24 + 2;
        else
          v37 = v24;
        v4 = sub_100D0FD34((_QWORD *)1, v37, 1, v4);
      }
      v28 = v4[2];
      v27 = v4[3];
      v29 = v28 + 1;
      v22 = v15;
      if (v28 >= v27 >> 1)
        v4 = sub_100D0FD34((_QWORD *)(v27 > 1), v28 + 1, 1, v4);
      v4[2] = v29;
      v30 = &v4[3 * v28];
      v30[4] = v14;
      v30[5] = v13;
      v30[6] = v22;
      v31 = v4[3];
      v32 = v28 + 2;
      v33 = v42;
      if (v29 >= v31 >> 1)
        v4 = sub_100D0FD34((_QWORD *)(v31 > 1), v32, 1, v4);
      v4[2] = v32;
      v5 = &v4[3 * v29];
      v5[4] = v44;
      v5[5] = v43;
      v5[6] = v33;

    }
    else
    {
      if (v44 < v14)
        v14 = v44;
      if (v43 > v13)
        v13 = v43;
      if (v13 < v14)
        goto LABEL_43;
      v20 = v4[2];
      v21 = v4[3];
      v22 = v18;
      if (v20 >= v21 >> 1)
        v4 = sub_100D0FD34((_QWORD *)(v21 > 1), v20 + 1, 1, v4);
      v4[2] = v20 + 1;
      v23 = &v4[3 * v20];
      v23[4] = v14;
      v23[5] = v13;
      v23[6] = v22;

    }
LABEL_4:

    v3 += 3;
    if (!--v2)
    {
      swift_bridgeObjectRelease_n(v38, 3);
      *v39 = v4;
      return;
    }
  }
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
}

void sub_1007D3AF0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  int64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  NSUInteger *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int isUniquelyReferenced_nonNull_native;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  int64_t *v51;
  NSUInteger *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;

  v1 = sub_1004B804C(&qword_1013F3DA8);
  __chkstk_darwin(v1);
  v3 = (uint64_t *)((char *)&v45 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v58 = sub_1004B804C((uint64_t *)&unk_1013E87B0);
  v4 = __chkstk_darwin(v58);
  v50 = (uint64_t)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v55 = (uint64_t)&v45 - v7;
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v45 - v9;
  __chkstk_darwin(v8);
  v13 = (NSUInteger *)((char *)&v45 - v12);
  v14 = *v0;
  v15 = *(_QWORD *)(*v0 + 16);
  if (v15 >= 2)
  {
    v46 = v0;
    v16 = *(unsigned __int8 *)(v11 + 80);
    v17 = (v16 + 32) & ~v16;
    v18 = v14 + v17;
    v54 = v11;
    v19 = *(_QWORD *)(v11 + 72);
    v56 = v19 + v17;
    v57 = v16 | 7;
    v59 = v17;
    v60 = _swiftEmptyArrayStorage;
    v49 = v17 + 2 * v19;
    v45 = v14;
    swift_bridgeObjectRetain(v14);
    v48 = xmmword_100EF5A10;
    v47 = xmmword_100EF5E40;
    v52 = v13;
    v53 = v10;
    v51 = v3;
    do
    {
      sub_1004CB7BC(v18, (uint64_t)v13, (uint64_t *)&unk_1013E87B0);
      v23 = (unint64_t)v60;
      if (v60[2])
      {
        if ((swift_isUniquelyReferenced_nonNull_native(v60) & 1) == 0)
          v23 = sub_100D14F58(v23);
        v24 = *(_QWORD *)(v23 + 16);
        if (!v24)
        {
          __break(1u);
LABEL_25:
          __break(1u);
        }
        v25 = v3;
        v26 = v24 - 1;
        v27 = v55;
        sub_1004C4938(v23 + v59 + (v24 - 1) * v19, v55, (uint64_t *)&unk_1013E87B0);
        *(_QWORD *)(v23 + 16) = v26;
        v3 = v25;
        v60 = (_QWORD *)v23;
        v28 = (uint64_t)v53;
        sub_1004C4938(v27, (uint64_t)v53, (uint64_t *)&unk_1013E87B0);
        v13 = v52;
        sub_1007D42BC(v52, v25);
        if ((*(unsigned int (**)(int64_t *, uint64_t, uint64_t))(v54 + 48))(v25, 1, v58) == 1)
        {
          sub_1004CB800((uint64_t)v25, &qword_1013F3DA8);
          v20 = sub_1004B804C(&qword_1013F3D98);
          v21 = swift_allocObject(v20, v49, v57);
          *(_OWORD *)(v21 + 16) = v48;
          v22 = v21 + v59;
          sub_1004CB7BC(v28, v21 + v59, (uint64_t *)&unk_1013E87B0);
          sub_1004CB7BC((uint64_t)v13, v22 + v19, (uint64_t *)&unk_1013E87B0);
          sub_10061F9F4(v21);
        }
        else
        {
          v29 = v50;
          sub_1004C4938((uint64_t)v25, v50, (uint64_t *)&unk_1013E87B0);
          v30 = sub_1004B804C(&qword_1013F3D98);
          v31 = swift_allocObject(v30, v56, v57);
          *(_OWORD *)(v31 + 16) = v47;
          sub_1004CB7BC(v29, v31 + v59, (uint64_t *)&unk_1013E87B0);
          sub_10061F9F4(v31);
          v32 = v29;
          v3 = v25;
          sub_1004CB800(v32, (uint64_t *)&unk_1013E87B0);
        }
        sub_1004CB800(v28, (uint64_t *)&unk_1013E87B0);
      }
      else
      {
        v33 = sub_1004B804C(&qword_1013F3D98);
        v34 = swift_allocObject(v33, v56, v57);
        v35 = v34 + v59;
        sub_1004CB7BC((uint64_t)v13, v34 + v59, (uint64_t *)&unk_1013E87B0);
        v36 = *(_QWORD *)(v23 + 16);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v23);
        if (!isUniquelyReferenced_nonNull_native || (v38 = *(_QWORD *)(v23 + 24) >> 1, v38 <= v36))
        {
          v23 = sub_100D0FD48(isUniquelyReferenced_nonNull_native, v36 + 1, 1, v23);
          v60 = (_QWORD *)v23;
          v38 = *(_QWORD *)(v23 + 24) >> 1;
        }
        v39 = *(_QWORD *)(v23 + 16);
        if (v38 <= v39)
          goto LABEL_25;
        v40 = v23 + v59 + v39 * v19;
        if (v35 < v40 + v19 && v40 < v35 + v19)
        {
          _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
          __break(1u);
          return;
        }
        v42 = v58;
        swift_arrayInitWithCopy(v40);
        ++*(_QWORD *)(v23 + 16);
        swift_setDeallocating(v34);
        swift_arrayDestroy(v35, 1, v42);
        swift_deallocClassInstance(v34, 32, 7);
        v3 = v51;
      }
      sub_1004CB800((uint64_t)v13, (uint64_t *)&unk_1013E87B0);
      v18 += v19;
      --v15;
    }
    while (v15);
    swift_bridgeObjectRelease(v45);
    v43 = v60;
    v44 = v46;
    swift_bridgeObjectRelease(*v46);
    *v44 = v43;
  }
}

uint64_t sub_1007D3FBC()
{
  uint64_t *v0;
  uint64_t result;
  unint64_t v2;
  uint64_t v3;
  float *v4;
  double *v5;
  int64_t v6;
  double *v7;
  double *v8;
  uint64_t v9;
  int64_t v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double *v15;
  int64_t v16;
  uint64_t v17;
  float v18;
  char v19;
  NSUInteger v20;
  unint64_t v21;
  unint64_t v22;
  double *v23;
  unint64_t v24;
  unint64_t v25;
  double *v26;
  char v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  double *v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  double **v37;
  uint64_t v38;
  NSRange v39;
  NSRange v40;

  result = *v0;
  v2 = *(_QWORD *)(*v0 + 16);
  if (v2 < 2)
    return result;
  v37 = (double **)v0;
  swift_bridgeObjectRetain(result);
  v36 = v3;
  v4 = (float *)(v3 + 52);
  v5 = _swiftEmptyArrayStorage;
  while (1)
  {
    v10 = *(_QWORD *)(v4 - 5);
    v9 = *(_QWORD *)(v4 - 3);
    v11 = *(v4 - 1);
    LODWORD(v6) = *(unsigned __int8 *)v4;
    v12 = *((_QWORD *)v5 + 2);
    result = swift_isUniquelyReferenced_nonNull_native(v5);
    if (!v12)
    {
      if ((result & 1) == 0)
        v5 = (double *)sub_100D11344(0, 1, 1, v5);
      v22 = *((_QWORD *)v5 + 2);
      v21 = *((_QWORD *)v5 + 3);
      if (v22 >= v21 >> 1)
        v5 = (double *)sub_100D11344((_QWORD *)(v21 > 1), v22 + 1, 1, v5);
      *((_QWORD *)v5 + 2) = v22 + 1;
      v23 = &v5[3 * v22];
      *((_QWORD *)v23 + 4) = v10;
      v8 = v23 + 4;
      goto LABEL_4;
    }
    if ((result & 1) != 0)
    {
      v13 = *((_QWORD *)v5 + 2);
      if (!v13)
        goto LABEL_46;
    }
    else
    {
      result = (uint64_t)sub_100D150A4(v5);
      v5 = (double *)result;
      v13 = *(_QWORD *)(result + 16);
      if (!v13)
        goto LABEL_46;
    }
    v14 = v13 - 1;
    v15 = &v5[3 * v14];
    v16 = *((_QWORD *)v15 + 4);
    v17 = *((_QWORD *)v15 + 5);
    v18 = *((float *)v15 + 12);
    v19 = *((_BYTE *)v15 + 52);
    *((_QWORD *)v5 + 2) = v14;
    if (__OFSUB__(v17, v16))
      break;
    if (__OFSUB__(v9, v10))
      goto LABEL_45;
    v39.location = v16;
    v40.location = v10;
    v39.length = v17 - v16;
    v40.length = v9 - v10;
    v20 = sub_1001E966C(v39, v40, 1);
    result = NSNotFound.getter(v20);
    if (v20 != result)
    {
      if ((v19 & 1) != 0)
      {
        if ((_DWORD)v6)
          goto LABEL_21;
      }
      else if ((v6 & 1) == 0 && v18 == v11)
      {
LABEL_21:
        if (v10 >= v16)
          v6 = v16;
        else
          v6 = v10;
        if (v9 <= v17)
          v9 = v17;
        if (v9 < v6)
          goto LABEL_48;
        v25 = *((_QWORD *)v5 + 2);
        v24 = *((_QWORD *)v5 + 3);
        if (v25 >= v24 >> 1)
          v5 = (double *)sub_100D11344((_QWORD *)(v24 > 1), v25 + 1, 1, v5);
        *((_QWORD *)v5 + 2) = v25 + 1;
        v26 = &v5[3 * v25];
        *((_QWORD *)v26 + 4) = v6;
        v8 = v26 + 4;
        v11 = v18;
        LOBYTE(v6) = v19;
        goto LABEL_4;
      }
    }
    v38 = v9;
    v27 = v6;
    v28 = *((_QWORD *)v5 + 2);
    v29 = v28 + 2;
    if (__OFADD__(v28, 2))
      goto LABEL_47;
    v30 = *((_QWORD *)v5 + 3);
    v31 = v30 >> 1;
    if ((uint64_t)(v30 >> 1) < v29)
    {
      if ((uint64_t)v28 <= v29)
        v35 = v28 + 2;
      else
        v35 = *((_QWORD *)v5 + 2);
      v5 = (double *)sub_100D11344((_QWORD *)1, v35, 1, v5);
      v28 = *((_QWORD *)v5 + 2);
      v30 = *((_QWORD *)v5 + 3);
      v31 = v30 >> 1;
    }
    v32 = v28 + 1;
    if (v31 <= v28)
    {
      v5 = (double *)sub_100D11344((_QWORD *)(v30 > 1), v28 + 1, 1, v5);
      v30 = *((_QWORD *)v5 + 3);
      v31 = v30 >> 1;
    }
    *((_QWORD *)v5 + 2) = v32;
    v33 = &v5[3 * v28];
    *((_QWORD *)v33 + 4) = v16;
    *((_QWORD *)v33 + 5) = v17;
    *((float *)v33 + 12) = v18;
    *((_BYTE *)v33 + 52) = v19;
    v34 = v28 + 2;
    if (v31 <= v32)
      v5 = (double *)sub_100D11344((_QWORD *)(v30 > 1), v28 + 2, 1, v5);
    LOBYTE(v6) = v27;
    *((_QWORD *)v5 + 2) = v34;
    v7 = &v5[3 * v32];
    *((_QWORD *)v7 + 4) = v10;
    v8 = v7 + 4;
    v9 = v38;
LABEL_4:
    *((_QWORD *)v8 + 1) = v9;
    *((float *)v8 + 4) = v11;
    v4 += 6;
    *((_BYTE *)v8 + 20) = v6;
    if (!--v2)
    {
      result = swift_bridgeObjectRelease_n(v36, 2);
      *v37 = v5;
      return result;
    }
  }
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
  return result;
}

NSUInteger sub_1007D42BC@<X0>(NSUInteger *a1@<X0>, int64_t *a2@<X8>)
{
  NSUInteger *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  NSUInteger v15;
  NSRange v16;
  NSUInteger v17;
  NSUInteger v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t);
  int v24;
  uint64_t *v25;
  char v26;
  int64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int64_t *v34;
  NSRange v35;

  v5 = type metadata accessor for CRLWPHyperlinkSmartFieldData(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (uint64_t *)((char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = sub_1004B804C((uint64_t *)&unk_1013E87D0);
  __chkstk_darwin(v9);
  v11 = (uint64_t *)((char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = sub_1004B804C((uint64_t *)&unk_1013F3DB0);
  __chkstk_darwin(v12);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16.location = *v2;
  v15 = v2[1];
  v16.length = v15 - *v2;
  if (__OFSUB__(v15, *v2))
  {
    __break(1u);
    goto LABEL_22;
  }
  v17 = a1[1];
  if (__OFSUB__(v17, *a1))
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    return v16.location;
  }
  v35.location = *a1;
  v35.length = v17 - *a1;
  v18 = sub_1001E966C(v16, v35, 1);
  if (v18 == NSNotFound.getter(v18))
  {
LABEL_19:
    v29 = sub_1004B804C((uint64_t *)&unk_1013E87B0);
    v16.location = (*(uint64_t (**)(int64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(a2, 1, 1, v29);
    return v16.location;
  }
  v32 = v8;
  v34 = a2;
  v19 = sub_1004B804C((uint64_t *)&unk_1013E87B0);
  v20 = *(int *)(v19 + 36);
  v21 = (uint64_t)a1 + v20;
  v22 = (uint64_t)&v14[*(int *)(v12 + 48)];
  v33 = (uint64_t)v2 + v20;
  sub_1004CB7BC((uint64_t)v2 + v20, (uint64_t)v14, (uint64_t *)&unk_1013E87D0);
  sub_1004CB7BC(v21, v22, (uint64_t *)&unk_1013E87D0);
  v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (v23((uint64_t)v14, 1, v5) == 1)
  {
    v24 = v23(v22, 1, v5);
    a2 = v34;
    if (v24 == 1)
    {
      v16.location = sub_1004CB800((uint64_t)v14, (uint64_t *)&unk_1013E87D0);
      goto LABEL_11;
    }
    goto LABEL_9;
  }
  sub_1004CB7BC((uint64_t)v14, (uint64_t)v11, (uint64_t *)&unk_1013E87D0);
  if (v23(v22, 1, v5) == 1)
  {
    sub_1004B84A4((uint64_t)v11, type metadata accessor for CRLWPHyperlinkSmartFieldData);
    a2 = v34;
LABEL_9:
    sub_1004CB800((uint64_t)v14, (uint64_t *)&unk_1013F3DB0);
    goto LABEL_19;
  }
  v25 = v32;
  sub_1007EC108(v22, (uint64_t)v32);
  v26 = sub_1007E6D50(v11, v25);
  sub_1004B84A4((uint64_t)v25, type metadata accessor for CRLWPHyperlinkSmartFieldData);
  sub_1004B84A4((uint64_t)v11, type metadata accessor for CRLWPHyperlinkSmartFieldData);
  v16.location = sub_1004CB800((uint64_t)v14, (uint64_t *)&unk_1013E87D0);
  a2 = v34;
  if ((v26 & 1) == 0)
    goto LABEL_19;
LABEL_11:
  if ((uint64_t)*a1 >= (uint64_t)*v2)
    v27 = *v2;
  else
    v27 = *a1;
  if ((uint64_t)a1[1] <= (uint64_t)v2[1])
    v28 = v2[1];
  else
    v28 = a1[1];
  if (v28 < v27)
    goto LABEL_23;
  sub_1004CB7BC(v33, (uint64_t)a2 + *(int *)(v19 + 36), (uint64_t *)&unk_1013E87D0);
  *a2 = v27;
  a2[1] = v28;
  v16.location = (*(uint64_t (**)(int64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(a2, 0, 1, v19);
  return v16.location;
}

void sub_1007D484C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  char *v24;
  char *v25;
  id v26;
  unint64_t v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  char *KeyPath;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  objc_class *v68;
  id v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t ObjectType;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  uint64_t v92;
  __n128 v93;
  char *v94;
  id v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t (*v99)(char *, uint64_t, uint64_t);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  void (*v104)(char *, char *, uint64_t);
  char *v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  objc_super v114;
  _QWORD aBlock[5];
  uint64_t v116;
  __C::_NSRange_optional v117;

  v0 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
  v108 = *(_QWORD *)(v0 - 8);
  v109 = v0;
  __chkstk_darwin(v0);
  v107 = (char *)&v95 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_1004B804C(&qword_1013F3C80);
  v110 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v95 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1004B804C(&qword_1013F3C78);
  __chkstk_darwin(v5);
  v7 = (char *)&v95 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = sub_1004B804C(&qword_1013F3C90);
  v101 = *(_QWORD *)(v112 - 8);
  __chkstk_darwin(v112);
  v111 = (char *)&v95 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  __chkstk_darwin(v9);
  v11 = (char *)&v95 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v95 - v13;
  __chkstk_darwin(v15);
  v20 = OBJC_IVAR____TtC8Freeform12CRLWPStorage_markedTextRange;
  v21 = *(void **)&v17[OBJC_IVAR____TtC8Freeform12CRLWPStorage_markedTextRange];
  if (!v21)
    goto LABEL_11;
  v22 = *(void **)&v17[OBJC_IVAR____TtC8Freeform12CRLWPStorage_selectedMarkedTextRange];
  if (!v22)
    goto LABEL_11;
  v23 = *(void **)((char *)OBJC_IVAR____TtC8Freeform12CRLWPStorage_attributedMarkedText + (_QWORD)v17);
  if (!v23)
    goto LABEL_11;
  v96 = OBJC_IVAR____TtC8Freeform12CRLWPStorage_selectedMarkedTextRange;
  v103 = (char *)OBJC_IVAR____TtC8Freeform12CRLWPStorage_attributedMarkedText;
  v99 = (uint64_t (*)(char *, uint64_t, uint64_t))((char *)&v95 - v18);
  v98 = v19;
  v100 = v16;
  v24 = v21;
  v25 = v22;
  v26 = v23;
  if ((uint64_t)objc_msgSend(v26, "length") < 1)
  {

    v17 = (char *)v113;
LABEL_11:
    v54 = v17;
    return;
  }
  v97 = v25;
  v105 = v7;
  v106 = v24;
  v27 = sub_100559A64();
  v28 = v26;
  CRAttributedString.init(_:)(v28, &type metadata for CRLTextAttributeScope, v27);
  v104 = *(void (**)(char *, char *, uint64_t))(v98 + 32);
  v104(v14, v11, v100);
  v29 = objc_msgSend(v28, "length");
  v30 = swift_allocObject(&unk_10127FC48, 24, 7);
  *(_QWORD *)(v30 + 16) = v14;
  v31 = swift_allocObject(&unk_10127FC70, 32, 7);
  *(_QWORD *)(v31 + 16) = sub_100559AB8;
  *(_QWORD *)(v31 + 24) = v30;
  aBlock[4] = sub_100559AD0;
  v116 = v31;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(_QWORD *)"";
  aBlock[2] = sub_100D3DC24;
  aBlock[3] = &unk_10127FC88;
  v32 = _Block_copy(aBlock);
  v33 = v116;
  swift_retain(v31);
  objc_msgSend(v28, "enumerateAttributesInRange:options:usingBlock:", 0, v29, 0, v32, swift_release(v33).n128_f64[0]);
  v95 = v28;

  _Block_release(v32);
  LOBYTE(v32) = swift_isEscapingClosureAtFileLocation(v31, "", 78, 624, 125, 1);
  v34 = swift_release(v31);
  if ((v32 & 1) != 0)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  v35 = v100;
  ((void (*)(uint64_t (*)(char *, uint64_t, uint64_t), char *, uint64_t, __n128))v104)(v99, v14, v100, v34);
  swift_release(v30);
  KeyPath = (char *)swift_getKeyPath(&unk_100F0DD50);
  v37 = CRAttributedString.count.getter(v35);
  sub_100C64D60(KeyPath, 0, v37);
  swift_release(KeyPath);
  v104 = (void (*)(char *, char *, uint64_t))(id)v113;
  v38 = objc_msgSend(v104, "range");
  v40 = v39;
  v41 = objc_allocWithZone((Class)type metadata accessor for CRLWPStorage());
  sub_1007D7624((char *)v104, (uint64_t)v38, v40);
  v43 = v42;
  v44 = (char *)v104;
  if ((*((_BYTE *)v104 + OBJC_IVAR____TtC8Freeform12CRLWPStorage__hasValidPresentationProperties) & 1) == 0)
  {
    sub_1007D5878();
    v44 = (char *)v104;
  }
  v45 = *(_QWORD *)&v44[OBJC_IVAR____TtC8Freeform12CRLWPStorage__paragraphStyleRuns];
  v46 = *(_QWORD *)&v43[OBJC_IVAR____TtC8Freeform12CRLWPStorage__paragraphStyleRuns];
  *(_QWORD *)&v43[OBJC_IVAR____TtC8Freeform12CRLWPStorage__paragraphStyleRuns] = v45;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRelease(v46);
  v47 = v97;
  sub_1007D9B04(*(_QWORD *)&v97[OBJC_IVAR____TtC8Freeform12CRLTextRange_range], *(_QWORD *)&v97[OBJC_IVAR____TtC8Freeform12CRLTextRange_range + 8], v99, 1);
  objc_msgSend(v43, "range");
  v48 = v106;
  v49 = (char *)objc_msgSend(v106, "start");
  v50 = *(_QWORD *)&v49[OBJC_IVAR____TtC8Freeform15CRLTextPosition_location];

  if (v50 == NSNotFound.getter(v51))
  {
    v52 = 0x7FFFFFFFFFFFFFFFLL;
    v53 = 0;
LABEL_13:
    v117 = _NSRange.intersection(_:)(*(__C::_NSRange *)&v52);
    if (v117.is_nil)
    {
      v88 = *(void **)(v113 + v20);
      *(_QWORD *)(v113 + v20) = 0;

      v89 = *(void **)(v113 + v96);
      *(_QWORD *)(v113 + v96) = 0;

      v90 = *(void **)((char *)v104 + OBJC_IVAR____TtC8Freeform12CRLWPStorage_selectedMarkedTextRangeFromOS);
      *(_QWORD *)((char *)v104 + OBJC_IVAR____TtC8Freeform12CRLWPStorage_selectedMarkedTextRangeFromOS) = 0;

      v91 = *(void **)&v103[v113];
      *(_QWORD *)&v103[v113] = 0;

      v92 = *(_QWORD *)((char *)v104 + OBJC_IVAR____TtC8Freeform12CRLWPStorage_markedTextStyle);
      *(_QWORD *)((char *)v104 + OBJC_IVAR____TtC8Freeform12CRLWPStorage_markedTextStyle) = 0;

      v93 = swift_bridgeObjectRelease(v92);
      (*(void (**)(uint64_t (*)(char *, uint64_t, uint64_t), uint64_t, __n128))(v98 + 8))(v99, v100, v93);
      v94 = v104;
      return;
    }
    CRAttributedString.runs.getter(v100);
    v113 = OBJC_IVAR____TtC8Freeform12CRLTextRange_range;
    v56 = v105;
    CRAttributedString.Runs.next()(v112);
    v104 = *(void (**)(char *, char *, uint64_t))(v110 + 48);
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v104)(v56, 1, v2) == 1)
    {
LABEL_37:

      (*(void (**)(char *, uint64_t))(v101 + 8))(v111, v112);
      (*(void (**)(uint64_t (*)(char *, uint64_t, uint64_t), uint64_t))(v98 + 8))(v99, v100);
      return;
    }
    v57 = *(char **)(v110 + 32);
    v102 = v2;
    v103 = v57;
    while (1)
    {
      ((void (*)(char *, char *, uint64_t))v103)(v4, v56, v2);
      v58 = *(_QWORD *)&v48[v113];
      v59 = CRAttributedString.Runs.Run.range.getter(v2);
      v60 = v58 + v59;
      if (__OFADD__(v58, v59))
        break;
      v61 = CRAttributedString.Runs.Run.range.getter(v2);
      v63 = v62 - v61;
      if (__OFSUB__(v62, v61))
        goto LABEL_40;
      v64 = v60 + v63;
      if (__OFADD__(v60, v63))
        goto LABEL_41;
      if (v64 < v60)
        goto LABEL_42;
      v65 = objc_msgSend(v43, "range");
      v67 = v66;
      v68 = (objc_class *)type metadata accessor for CRLTextRange();
      v69 = objc_allocWithZone(v68);
      v70 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CRLTextPosition()), "init:caretAffinity:", v65, 0);
      if (v67 >= NSNotFound.getter(v70))
        v71 = 0;
      else
        v71 = v67;
      v72 = *(_QWORD *)&v70[OBJC_IVAR____TtC8Freeform15CRLTextPosition_location];
      v73 = v72 + v71;
      if (__OFADD__(v72, v71))
        goto LABEL_43;
      if (v73 < v72)
        goto LABEL_44;
      v74 = v4;
      v75 = v43;
      v76 = *(_QWORD *)&v70[OBJC_IVAR____TtC8Freeform15CRLTextPosition_caretAffinity];
      v77 = (char *)objc_allocWithZone(v68);
      v78 = OBJC_IVAR____TtC8Freeform12CRLTextRange_caretAffinity;
      *(_QWORD *)&v77[OBJC_IVAR____TtC8Freeform12CRLTextRange_caretAffinity] = 0;
      *(_QWORD *)&v77[OBJC_IVAR____TtC8Freeform12CRLTextRange_insertionEdge] = 0;
      v79 = &v77[OBJC_IVAR____TtC8Freeform12CRLTextRange_range];
      *(_QWORD *)v79 = v72;
      *((_QWORD *)v79 + 1) = v73;
      *(_QWORD *)&v77[v78] = v76;
      v43 = v75;
      v4 = v74;
      v2 = v102;
      v48 = v106;
      v114.receiver = v77;
      v114.super_class = v68;
      v80 = (char *)objc_msgSendSuper2(&v114, "init");

      ObjectType = swift_getObjectType(v69);
      swift_deallocPartialClassInstance(v69, ObjectType, 40, 7);
      v83 = *(_QWORD *)&v80[OBJC_IVAR____TtC8Freeform12CRLTextRange_range];
      v82 = *(_QWORD *)&v80[OBJC_IVAR____TtC8Freeform12CRLTextRange_range + 8];
      if (v82 >= v60)
        v84 = v60;
      else
        v84 = *(_QWORD *)&v80[OBJC_IVAR____TtC8Freeform12CRLTextRange_range + 8];
      if (v60 >= v83)
        v85 = v84;
      else
        v85 = *(_QWORD *)&v80[OBJC_IVAR____TtC8Freeform12CRLTextRange_range];
      if (v64 > v83)
        v83 = v64;
      if (v82 >= v64)
        v86 = v83;
      else
        v86 = *(_QWORD *)&v80[OBJC_IVAR____TtC8Freeform12CRLTextRange_range + 8];
      v87 = (uint64_t)v107;
      CRAttributedString.Runs.Run.attributes.getter(v2);
      sub_1007DC238(v87, v85, v86);

      (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v87, v109);
      (*(void (**)(char *, uint64_t))(v110 + 8))(v4, v2);
      v56 = v105;
      CRAttributedString.Runs.next()(v112);
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v104)(v56, 1, v2) == 1)
        goto LABEL_37;
    }
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  v52 = *(_QWORD *)&v48[OBJC_IVAR____TtC8Freeform12CRLTextRange_range];
  v55 = *(_QWORD *)&v48[OBJC_IVAR____TtC8Freeform12CRLTextRange_range + 8];
  v53 = v55 - v52;
  if (!__OFSUB__(v55, v52))
    goto LABEL_13;
LABEL_46:
  __break(1u);
}

uint64_t sub_1007D5210(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  uint64_t ObjectType;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v3 = v1 + OBJC_IVAR____TtC8Freeform12CRLWPStorage__parentItem;
  Strong = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC8Freeform12CRLWPStorage__parentItem);
  if (Strong)
  {
    v5 = (void *)Strong;
    ObjectType = swift_getObjectType(Strong);
    v7 = swift_conformsToProtocol2(ObjectType, &protocol descriptor for CRLTransactable);
    if (v7)
      v8 = v7;
    else
      v8 = 0;
    if (v7)
      v9 = v5;
    else
      v9 = 0;
    if (!v9)
    {

      if (a1)
        goto LABEL_11;
      return swift_unknownObjectWeakAssign(v3, 0);
    }
    v10 = swift_getObjectType(v9);
    v11 = sub_100D5E2C8(v10, v8);

    if ((v11 & 1) == 0)
      return swift_unknownObjectRelease(a1);
  }
  if (!a1)
    return swift_unknownObjectWeakAssign(v3, 0);
LABEL_11:
  v12 = type metadata accessor for CRLBoardItem(0);
  v13 = swift_dynamicCastClass(a1, v12);
  if (v13)
  {
    swift_unknownObjectWeakAssign(v3, v13);
    return swift_unknownObjectRelease(a1);
  }
  swift_unknownObjectRetain(a1);
  sub_100757E04(&_mh_execute_header, (uint64_t)"parentInfo", 10, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPStorage.swift", 78, 2, 841, "invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
  sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"parentInfo", 10, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPStorage.swift", 78, 2u, 841, (uint64_t)"invalid nil found when unwrapping value", 39, 2u);
  return swift_unknownObjectRelease_n(a1, 2);
}

uint64_t sub_1007D54D8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + *a3);
  if (result)
    return swift_getObjCClassFromMetadata(result, a2);
  return result;
}

void sub_1007D551C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  void *v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;

  v1 = type metadata accessor for CharacterSet(0);
  v32 = *(_QWORD *)(v1 - 8);
  v33 = v1;
  __chkstk_darwin(v1);
  v35 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CRLWPStorageCRDTData(0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData;
  v34 = v0;
  v15 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData);
  if (!v15)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return;
  }
  (*(void (**)(__n128))(*(_QWORD *)v15 + 760))(v11);
  sub_1004B8460((uint64_t)&v9[*(int *)(v7 + 20)], (uint64_t)v13, type metadata accessor for CRLWPStorageCRDTData);
  sub_1004B84A4((uint64_t)v9, type metadata accessor for CRLWPShapeItemCRDTData);
  v16 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  v16(v6, v13, v3);
  sub_1004B84A4((uint64_t)v13, type metadata accessor for CRLWPStorageCRDTData);
  v17 = (void *)CRAttributedString.attributedString.getter(v3);
  v18 = *(void (**)(char *, uint64_t))(v4 + 8);
  v18(v6, v3);
  v19 = (uint64_t)objc_msgSend(v17, "length");

  if (v19 >= 1)
  {
    v21 = v35;
    v22 = static CharacterSet.whitespacesAndNewlines.getter(v20);
    v23 = *(_QWORD *)(v34 + v14);
    if (v23)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 760))(v22);
      sub_1004B8460((uint64_t)&v9[*(int *)(v7 + 20)], (uint64_t)v13, type metadata accessor for CRLWPStorageCRDTData);
      sub_1004B84A4((uint64_t)v9, type metadata accessor for CRLWPShapeItemCRDTData);
      v16(v6, v13, v3);
      sub_1004B84A4((uint64_t)v13, type metadata accessor for CRLWPStorageCRDTData);
      v24 = (void *)CRAttributedString.attributedString.getter(v3);
      v18(v6, v3);
      v25 = objc_msgSend(v24, "string");

      v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      v28 = v27;

      __chkstk_darwin(v29);
      *(&v31 - 2) = (uint64_t)v21;
      sub_100C1C330((uint64_t (*)(unint64_t *))sub_1007ECB1C, (uint64_t)(&v31 - 4), v26, v28);
      v30 = swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t, __n128))(v32 + 8))(v21, v33, v30);
      return;
    }
    goto LABEL_7;
  }
}

void sub_1007D5878()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  unsigned int (*v28)(char *, uint64_t, uint64_t);
  id v29;
  char *v30;
  uint64_t KeyPath;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  NSString v39;
  id v40;
  id v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  Class isa;
  id v47;
  int v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  Class v56;
  double v57;
  _BYTE *v58;
  int64_t v59;
  void (*v60)(char *, int64_t);
  _BYTE *v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t v66;
  int64_t v67;
  uint64_t *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  id v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  _QWORD *v99;
  char *v100;
  uint64_t v101;
  char *v102;
  unsigned __int8 *v103;
  uint64_t v104;
  int v105;
  unint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t *v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int64_t v115;
  unsigned __int8 *v116;
  id v117;
  unsigned __int8 *v118;
  id v119;
  unint64_t v120;
  unint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  int64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int64_t v133;
  unint64_t v134;
  int64_t v135;
  _QWORD *v136;
  __int128 *v137;
  char v138;
  __int128 v139;
  uint64_t v140;
  _QWORD *v141;
  unint64_t v142;
  _QWORD *v143;
  unsigned __int8 *v144;
  id v145;
  unint64_t v146;
  unint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  int v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v160;
  char v161;
  char v162;
  uint64_t v163;
  int64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  void (*v168)(char *, char *, uint64_t);
  int64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  int64_t v174;
  unint64_t v175;
  int64_t v176;
  _QWORD *v177;
  char v178;
  unint64_t v179;
  char v180;
  __int128 v181;
  uint64_t v182;
  _QWORD *v183;
  unint64_t v184;
  unint64_t v185;
  _QWORD *v186;
  unint64_t v187;
  _BYTE *v188;
  void *v189;
  id v190;
  id v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  uint64_t v196;
  __n128 v197;
  _QWORD *v198;
  _QWORD *v199;
  NSDictionary v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  unint64_t v207;
  unint64_t v208;
  void (*v209)(char *, uint64_t, uint64_t);
  char *v210;
  char *v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  id v215;
  char *v216;
  unsigned __int8 *v217;
  _QWORD *v218;
  void (*v219)(unint64_t, int64_t);
  int64_t v220;
  unint64_t v221;
  char *v222;
  _BYTE *v223;
  void (*v224)(char *, char *, uint64_t);
  uint64_t v225;
  int64_t v226;
  unint64_t v227;
  unint64_t v228;
  __int128 v229;
  __int128 v230;
  unint64_t v231;
  _QWORD *v232;
  _QWORD *v233;
  id v234[6];
  id v235[6];

  v1 = sub_1004B804C(&qword_1013F3C80);
  v228 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v209 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1004B804C(&qword_1013F3C78);
  __chkstk_darwin(v4);
  v6 = (char *)&v209 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v230 = sub_1004B804C(&qword_1013F3C90);
  v218 = *(_QWORD **)(v230 - 8);
  __chkstk_darwin(v230);
  *(_QWORD *)&v229 = (char *)&v209 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v220 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
  v227 = *(_QWORD *)(v220 - 8);
  v8 = __chkstk_darwin(v220);
  v222 = (char *)&v209 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (unint64_t)&v209 - v10;
  v12 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v209 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v217 = (unsigned __int8 *)type metadata accessor for CRLWPStorageCRDTData(0);
  __chkstk_darwin(v217);
  v16 = (char *)&v209 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v214 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v17 = *(_QWORD *)(v214 - 8);
  v18 = __chkstk_darwin(v214);
  v216 = (char *)&v209 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v22 = (unint64_t)&v209 - v21;
  v232 = _swiftEmptyArrayStorage;
  v233 = _swiftEmptyArrayStorage;
  v225 = (uint64_t)v0;
  v224 = (void (*)(char *, char *, uint64_t))OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData;
  v23 = *(_QWORD *)&v0[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData];
  if (!v23)
    goto LABEL_211;
  (*(void (**)(uint64_t))(*(_QWORD *)v23 + 760))(v20);
  v212 = v12;
  v24 = (unint64_t)type metadata accessor for CRLWPStorageCRDTData;
  sub_1004B8460((uint64_t)&v14[*(int *)(v12 + 20)], (uint64_t)v16, type metadata accessor for CRLWPStorageCRDTData);
  sub_1004B84A4((uint64_t)v14, type metadata accessor for CRLWPShapeItemCRDTData);
  v25 = *(_QWORD *)(v17 + 16);
  ((void (*)(unint64_t, char *, uint64_t))v25)(v22, v16, v214);
  sub_1004B84A4((uint64_t)v16, type metadata accessor for CRLWPStorageCRDTData);
  v26 = (uint64_t)objc_msgSend((id)v225, "characterCount");
  if (v26 < 0)
    goto LABEL_206;
  v209 = (void (*)(char *, uint64_t, uint64_t))v25;
  v210 = v16;
  v211 = v14;
  v221 = v17;
  v27 = (id)v225;
  sub_1007D7CB8(0, v26, v234);
  v28 = (unsigned int (*)(char *, uint64_t, uint64_t))v234[4];
  v29 = v234[5];
  v30 = (char *)v234[3];

  KeyPath = swift_getKeyPath(&unk_100F0DDE8);
  v213 = v22;
  v32 = KeyPath;
  sub_1007CBF2C(KeyPath, v30, v28, (uint64_t)v29, &v232);

  v33 = v32;
  v22 = v213;
  swift_release(v33);
  v34 = (void *)CRAttributedString.attributedString.getter(v214);
  v35 = objc_msgSend(v34, "string");

  static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
  v37 = v36;

  v38 = objc_allocWithZone((Class)NSMutableAttributedString);
  v39 = String._bridgeToObjectiveC()();
  v40 = objc_msgSend(v38, "initWithString:", v39, swift_bridgeObjectRelease(v37).n128_f64[0]);

  v41 = v27;
  sub_1007D0778(v41);
  v42 = sub_1007E94CC();
  v219 = *(void (**)(unint64_t, int64_t))(v227 + 8);
  v219(v11, v220);
  type metadata accessor for Key(0);
  v44 = v43;
  v45 = sub_1005034A0((unint64_t *)&qword_1013DE6D0, 255, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_100EF1874);
  v227 = v44;
  v226 = v45;
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v47 = objc_msgSend(v40, "length", swift_bridgeObjectRelease(v42).n128_f64[0]);
  v215 = v40;
  objc_msgSend(v40, "addAttributes:range:", isa, 0, v47);

  v223 = v41;
  if ((uint64_t)objc_msgSend(v41, "characterCount") < 1)
  {
    v50 = *(_QWORD *)((char *)v224 + v225);
    if (!v50)
      goto LABEL_212;
    v51 = (uint64_t)v211;
    (*(void (**)(void))(*(_QWORD *)v50 + 760))();
    v52 = (uint64_t)v210;
    sub_1004B8460(v51 + *(int *)(v212 + 20), (uint64_t)v210, type metadata accessor for CRLWPStorageCRDTData);
    sub_1004B84A4(v51, type metadata accessor for CRLWPShapeItemCRDTData);
    v53 = v216;
    v54 = v214;
    v209(v216, v52 + *((int *)v217 + 5), v214);
    sub_1004B84A4(v52, type metadata accessor for CRLWPStorageCRDTData);
    v55 = v222;
    CRAttributedString.attributes(at:effectiveRange:)(0, 0, v54);
    v22 = v221;
    (*(void (**)(char *, uint64_t))(v221 + 8))(v53, v54);
    v11 = (unint64_t)sub_1007E94CC();
    v56 = Dictionary._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)&v57 = swift_bridgeObjectRelease(v11).n128_u64[0];
    objc_msgSend(v215, "addAttributes:range:", v56, 0, 0, v57);

    v58 = sub_1007EA134();
    v59 = v220;
    v60 = (void (*)(char *, int64_t))v219;
    if (v58)
    {
      v11 = (unint64_t)v233;
      v61 = v58;
      if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
        v11 = (unint64_t)sub_100D0FD34(0, *(_QWORD *)(v11 + 16) + 1, 1, (_QWORD *)v11);
      v63 = *(_QWORD *)(v11 + 16);
      v62 = *(_QWORD *)(v11 + 24);
      if (v63 >= v62 >> 1)
        v11 = (unint64_t)sub_100D0FD34((_QWORD *)(v62 > 1), v63 + 1, 1, (_QWORD *)v11);
      *(_QWORD *)(v11 + 16) = v63 + 1;
      v64 = (_QWORD *)(v11 + 24 * v63);
      v64[4] = 0;
      v64[5] = 0;
      v64[6] = v61;

      v233 = (_QWORD *)v11;
    }
    v60(v55, v59);
  }
  else
  {
    CRAttributedString.runs.getter(v214);
    CRAttributedString.Runs.next()(v230);
    v225 = *(_QWORD *)(v228 + 48);
    v48 = ((uint64_t (*)(char *, uint64_t, uint64_t))v225)(v6, 1, v1);
    v49 = v220;
    v25 = (uint64_t)v219;
    if (v48 != 1)
    {
      v224 = *(void (**)(char *, char *, uint64_t))(v228 + 32);
      v222 = (char *)&type metadata for Any + 8;
      v224(v3, v6, v1);
      while (1)
      {
        CRAttributedString.Runs.Run.attributes.getter(v1);
        v199 = sub_1007E94CC();
        ((void (*)(unint64_t, int64_t))v25)(v11, v49);
        v200.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v199);
        v24 = (unint64_t)v3;
        v201 = CRAttributedString.Runs.Run.range.getter(v1);
        if (__OFSUB__(v202, v201))
          goto LABEL_199;
        objc_msgSend(v215, "addAttributes:range:", v200.super.isa, v201, v202 - v201);

        CRAttributedString.Runs.Run.attributes.getter(v1);
        v22 = (unint64_t)sub_1007EA134();
        ((void (*)(unint64_t, int64_t))v25)(v11, v49);
        if (v22)
        {
          v203 = CRAttributedString.Runs.Run.range.getter(v1);
          v205 = v204;
          v206 = v233;
          v22 = (unint64_t)(id)v22;
          if ((swift_isUniquelyReferenced_nonNull_native(v206) & 1) == 0)
            v206 = sub_100D0FD34(0, v206[2] + 1, 1, v206);
          v208 = v206[2];
          v207 = v206[3];
          if (v208 >= v207 >> 1)
            v206 = sub_100D0FD34((_QWORD *)(v207 > 1), v208 + 1, 1, v206);
          v206[2] = v208 + 1;
          v198 = &v206[3 * v208];
          v198[4] = v203;
          v198[5] = v205;
          v198[6] = v22;

          v233 = v206;
          v49 = v220;
          v25 = (uint64_t)v219;
        }
        (*(void (**)(char *, uint64_t))(v228 + 8))(v3, v1);
        CRAttributedString.Runs.next()(v230);
        if (((unsigned int (*)(char *, uint64_t, uint64_t))v225)(v6, 1, v1) == 1)
          break;
        v224(v3, v6, v1);
      }
    }
    ((void (*)(_QWORD, _QWORD))v218[1])(v229, v230);
    v22 = v221;
  }
  sub_1007D3798();
  v24 = (unint64_t)v223;
  if ((v223[OBJC_IVAR____TtC8Freeform12CRLWPStorage__hasValidRanges] & 1) == 0)
  {
    sub_1007D71A8();
    v24 = (unint64_t)v223;
  }
  v65 = *(_QWORD *)(v24 + OBJC_IVAR____TtC8Freeform12CRLWPStorage__paragraphRanges);
  v66 = *(_QWORD *)(v65 + 16);
  v25 = (uint64_t)_swiftEmptyArrayStorage;
  if (v66)
  {
    swift_bridgeObjectRetain(v65);
    v226 = v67;
    v68 = (uint64_t *)(v67 + 40);
    do
    {
      v69 = *v68;
      *(_QWORD *)&v230 = *(v68 - 1);
      *(_QWORD *)&v229 = v69;
      sub_1007D7CB8(v230, v69, v235);
      v70 = (char *)v235[4];
      v71 = (char *)v235[5];
      v72 = (char *)v235[3];

      v73 = (char *)swift_getKeyPath(&unk_100F0DE08);
      v24 = sub_100DC3A48(v73, v72, v70, v71);
      v22 = v74;
      swift_release(v73);
      v225 = v25;
      if ((v22 & 1) != 0)
      {
        if (!*(_QWORD *)(v24 + 16))
          goto LABEL_200;
        v11 = *(unsigned __int8 *)(v24 + 32);
        sub_10062E238(v24, 1);
        LOBYTE(v24) = v11;
      }
      sub_1007E4A90(v72, v70, (unint64_t)v71, v24);
      v22 = v75;
      v24 = swift_getKeyPath(&unk_100F0DE28);
      v76 = sub_100DC31DC((char *)v24, v72, v70, v71);
      v25 = v77;
      swift_release(v24);
      if ((v25 & 1) != 0)
      {
        if (!*(_QWORD *)(v76 + 16))
          goto LABEL_201;
        v11 = *(_QWORD *)(v76 + 32);
        sub_10062E238(v76, 1);
        v227 = v11;
      }
      else
      {
        v227 = v76;
      }
      v24 = swift_getKeyPath(&unk_100F0DE48);
      v78 = sub_100DC9830((char *)v24, v72, v70, v71);
      v25 = v79;
      swift_release(v24);
      v228 = v22;
      if ((v25 & 1) != 0)
      {
        if (!*(_QWORD *)(v78 + 16))
          goto LABEL_202;
        v22 = v66;
        v80 = *(_QWORD *)(v78 + 32);
        sub_10062E238(v78, 1);
        v78 = v80;
      }
      else
      {
        v22 = v66;
      }
      v24 = (unint64_t)sub_1007E46F0();
      v11 = swift_getKeyPath(&unk_100F0DAE8);
      v25 = sub_100DC4B5C((char *)v11, v72, v70, v71);
      v82 = v81;
      swift_release(v11);
      if ((v82 & 1) != 0)
      {
        if (!*(_QWORD *)(v25 + 16))
          goto LABEL_203;
        v83 = *(_QWORD *)(v25 + 32);
        sub_10062E238(v25, 1);
        v25 = v83;
      }
      *(_QWORD *)(v24 + OBJC_IVAR____TtC8Freeform19CRLWPParagraphStyle_alignment) = v25;
      v11 = swift_getKeyPath(&unk_100F0DA58);
      v24 = (unint64_t)(id)v24;
      v84 = sub_100DC42D4((char *)v11, v72, v70, v71);
      v25 = v85;
      swift_release(v11);
      v86 = v22;
      if ((v25 & 1) != 0)
      {
        v22 = v228;
        if (!*(_QWORD *)(v84 + 16))
          goto LABEL_204;
        v87 = *(_QWORD *)(v84 + 32);
        sub_10062E238(v84, 1);
        v84 = v87;
      }
      else
      {
        v22 = v228;
      }
      v88 = v24 + OBJC_IVAR____TtC8Freeform19CRLWPCharacterStyle_writingDirection;
      *(_QWORD *)v88 = v84;
      *(_BYTE *)(v88 + 8) = 0;
      v89 = (id)v22;
      v25 = v225;
      if ((swift_isUniquelyReferenced_nonNull_native(v225) & 1) == 0)
        v25 = (uint64_t)sub_100D0FD20(0, *(_QWORD *)(v25 + 16) + 1, 1, (_QWORD *)v25);
      v11 = *(_QWORD *)(v25 + 16);
      v90 = *(_QWORD *)(v25 + 24);
      if (v11 >= v90 >> 1)
        v25 = (uint64_t)sub_100D0FD20((_QWORD *)(v90 > 1), v11 + 1, 1, (_QWORD *)v25);
      v68 += 2;
      *(_QWORD *)(v25 + 16) = v11 + 1;
      v91 = v25 + 56 * v11;
      v92 = v229;
      *(_QWORD *)(v91 + 32) = v230;
      *(_QWORD *)(v91 + 40) = v92;
      *(_QWORD *)(v91 + 48) = v24;
      *(_QWORD *)(v91 + 56) = v22;
      v93 = v227;
      *(_QWORD *)(v91 + 64) = v78;
      *(_QWORD *)(v91 + 72) = v93;
      *(_BYTE *)(v91 + 80) = 0;

      v66 = v86 - 1;
    }
    while (v66);
    swift_bridgeObjectRelease(v226);
    v22 = v221;
    v24 = (unint64_t)v223;
  }
  v220 = *(_QWORD *)(v25 + 16);
  if (!v220)
  {
    v94 = (unint64_t)objc_msgSend((id)v24, "characterCount");
    if ((v94 & 0x8000000000000000) == 0)
    {
      v11 = v94;
      v24 = (unint64_t)sub_1007E46F0();
      if ((swift_isUniquelyReferenced_nonNull_native(v25) & 1) != 0)
        goto LABEL_45;
      goto LABEL_208;
    }
    goto LABEL_207;
  }
LABEL_48:
  v219 = (void (*)(unint64_t, int64_t))(v25 + 32);
  swift_bridgeObjectRetain(v25);
  v98 = 0;
  v24 = (unint64_t)_swiftEmptyDictionarySingleton;
  v218 = _swiftEmptyArrayStorage;
  v225 = v25;
  while (1)
  {
    if (v98 >= *(_QWORD *)(v25 + 16))
    {
LABEL_193:
      __break(1u);
LABEL_194:
      __break(1u);
LABEL_195:
      __break(1u);
LABEL_196:
      __break(1u);
      goto LABEL_197;
    }
    v100 = (char *)v219 + 56 * v98;
    *(_QWORD *)&v230 = *(_QWORD *)v100;
    v101 = *((_QWORD *)v100 + 1);
    v11 = *((_QWORD *)v100 + 2);
    v228 = v98;
    *(_QWORD *)&v229 = v101;
    v103 = (unsigned __int8 *)*((_QWORD *)v100 + 3);
    v102 = (char *)*((_QWORD *)v100 + 4);
    v104 = *((_QWORD *)v100 + 5);
    v105 = v100[48];
    v227 = v24;
    if (v103 && !v103[OBJC_IVAR____TtC8Freeform14CRLWPListStyle_listType])
    {
      v124 = (char *)(v24 + 64);
      v125 = 1 << *(_BYTE *)(v24 + 32);
      if (v125 < 64)
        v126 = ~(-1 << v125);
      else
        v126 = -1;
      v127 = v126 & *(_QWORD *)(v24 + 64);
      v226 = (unint64_t)(v125 + 63) >> 6;
      v217 = v103;
      v216 = (char *)(id)v11;
      swift_bridgeObjectRetain(v24);
      v128 = 0;
      v222 = (char *)(v24 + 64);
      while (1)
      {
        if (v127)
        {
          v129 = __clz(__rbit64(v127));
          v127 &= v127 - 1;
          v130 = v129 | (v128 << 6);
        }
        else
        {
          v133 = v128 + 1;
          if (__OFADD__(v128, 1))
          {
            __break(1u);
            goto LABEL_193;
          }
          if (v133 >= v226)
            goto LABEL_108;
          v134 = *(_QWORD *)&v124[8 * v133];
          ++v128;
          if (!v134)
          {
            v128 = v133 + 1;
            if (v133 + 1 >= v226)
              goto LABEL_108;
            v134 = *(_QWORD *)&v124[8 * v128];
            if (!v134)
            {
              v128 = v133 + 2;
              if (v133 + 2 >= v226)
                goto LABEL_108;
              v134 = *(_QWORD *)&v124[8 * v128];
              if (!v134)
              {
                v128 = v133 + 3;
                if (v133 + 3 >= v226)
                  goto LABEL_108;
                v134 = *(_QWORD *)&v124[8 * v128];
                if (!v134)
                {
                  v135 = v133 + 4;
                  if (v135 >= v226)
                  {
LABEL_108:
                    swift_release(v24);

                    swift_bridgeObjectRelease(v24);
                    v24 = (unint64_t)_swiftEmptyDictionarySingleton;
                    goto LABEL_52;
                  }
                  v134 = *(_QWORD *)&v124[8 * v135];
                  if (!v134)
                  {
                    while (1)
                    {
                      v128 = v135 + 1;
                      if (__OFADD__(v135, 1))
                        break;
                      if (v128 >= v226)
                        goto LABEL_108;
                      v134 = *(_QWORD *)&v124[8 * v128];
                      ++v135;
                      if (v134)
                        goto LABEL_99;
                    }
LABEL_197:
                    __break(1u);
LABEL_198:
                    __break(1u);
LABEL_199:
                    __break(1u);
LABEL_200:
                    __break(1u);
LABEL_201:
                    __break(1u);
LABEL_202:
                    __break(1u);
LABEL_203:
                    __break(1u);
LABEL_204:
                    __break(1u);
LABEL_205:
                    __break(1u);
LABEL_206:
                    __break(1u);
LABEL_207:
                    __break(1u);
LABEL_208:
                    v25 = (uint64_t)sub_100D0FD20(0, *(_QWORD *)(v25 + 16) + 1, 1, (_QWORD *)v25);
LABEL_45:
                    v96 = *(_QWORD *)(v25 + 16);
                    v95 = *(_QWORD *)(v25 + 24);
                    v220 = v96 + 1;
                    if (v96 >= v95 >> 1)
                      v25 = (uint64_t)sub_100D0FD20((_QWORD *)(v95 > 1), v220, 1, (_QWORD *)v25);
                    *(_QWORD *)(v25 + 16) = v220;
                    v97 = v25 + 56 * v96;
                    *(_QWORD *)(v97 + 32) = 0;
                    *(_QWORD *)(v97 + 40) = v11;
                    *(_QWORD *)(v97 + 48) = v24;
                    *(_QWORD *)(v97 + 56) = 0;
                    *(_QWORD *)(v97 + 64) = 0;
                    *(_QWORD *)(v97 + 72) = 0;
                    *(_BYTE *)(v97 + 80) = 1;
                    goto LABEL_48;
                  }
                  v128 = v135;
                }
              }
            }
          }
LABEL_99:
          v127 = (v134 - 1) & v134;
          v130 = __clz(__rbit64(v134)) + (v128 << 6);
        }
        v131 = *(_QWORD *)(*(_QWORD *)(v24 + 56) + 8 * v130);
        v132 = *(_QWORD *)(v131 + 16);
        if (v132)
        {
          v224 = (void (*)(char *, char *, uint64_t))v128;
          swift_bridgeObjectRetain(v131);
          v136 = v218;
          if ((swift_isUniquelyReferenced_nonNull_native(v218) & 1) == 0)
            v136 = sub_100D0FBE8(0, v136[2] + 1, 1, v136);
          v137 = (__int128 *)(v131 + 40);
          do
          {
            v138 = *((_BYTE *)v137 - 8);
            v139 = *v137;
            v229 = v137[1];
            v230 = v139;
            v140 = *((_QWORD *)v137 + 4);
            v141 = v136;
            v11 = v136[2];
            v142 = v136[3];
            swift_bridgeObjectRetain(v140);
            if (v11 >= v142 >> 1)
              v136 = sub_100D0FBE8((_QWORD *)(v142 > 1), v11 + 1, 1, v141);
            else
              v136 = v141;
            v136[2] = v11 + 1;
            v143 = &v136[6 * v11];
            *((_BYTE *)v143 + 32) = v138;
            *(_OWORD *)(v143 + 5) = v230;
            *(_OWORD *)(v143 + 7) = v229;
            v143[9] = v140;
            v137 += 3;
            --v132;
          }
          while (v132);
          v218 = v136;
          swift_bridgeObjectRelease(v131);
          v22 = v221;
          v25 = v225;
          v24 = v227;
          v98 = v228;
          v124 = v222;
          v128 = (int64_t)v224;
        }
      }
    }
    if (*(_QWORD *)(v24 + 16) && (v106 = sub_100842E60((uint64_t)v102), (v107 & 1) != 0))
    {
      v99 = *(_QWORD **)(*(_QWORD *)(v24 + 56) + 8 * v106);
      swift_bridgeObjectRetain(v99);
    }
    else
    {
      v99 = _swiftEmptyArrayStorage;
    }
    v108 = v99[2];
    v224 = (void (*)(char *, char *, uint64_t))v11;
    if (!v108)
    {
      if (!v103)
        goto LABEL_210;
      v22 = 0;
      LODWORD(v226) = v103[OBJC_IVAR____TtC8Freeform14CRLWPListStyle_listType];
      goto LABEL_69;
    }
    v109 = &v99[6 * v108];
    v22 = v109[3];
    if (!v103)
      break;
    v110 = v103[OBJC_IVAR____TtC8Freeform14CRLWPListStyle_listType];
    LODWORD(v226) = *((unsigned __int8 *)v109 - 16);
    if ((_DWORD)v226 != v110)
    {
      swift_bridgeObjectRetain(v22);
      LODWORD(v226) = v110;
LABEL_69:
      v118 = v103;
      v119 = (id)v11;
      swift_bridgeObjectRelease(v22);
      if (v105)
        v112 = 1;
      else
        v112 = v104;
      if ((swift_isUniquelyReferenced_nonNull_native(v99) & 1) == 0)
        v99 = sub_100D0FBE8(0, v99[2] + 1, 1, v99);
      v121 = v99[2];
      v120 = v99[3];
      if (v121 >= v120 >> 1)
        v99 = sub_100D0FBE8((_QWORD *)(v120 > 1), v121 + 1, 1, v99);
      v99[2] = v121 + 1;
      v122 = &v99[6 * v121];
      *((_BYTE *)v122 + 32) = v226;
      v123 = v230;
      v122[5] = v102;
      v122[6] = v123;
      v122[7] = v229;
      v122[8] = v112;
      v22 = (unint64_t)_swiftEmptyArrayStorage;
      v122[9] = _swiftEmptyArrayStorage;
      v222 = v102;
      goto LABEL_119;
    }
    v217 = (unsigned __int8 *)v102;
    v111 = *v109;
    v222 = (char *)*(v109 - 1);
    v112 = v109[2];
    v113 = *(_QWORD *)(v22 + 16);
    if (v113)
    {
      LODWORD(v216) = v105;
      v114 = v25;
      v115 = *(_QWORD *)(v22 + 8 * v113 + 24);
      swift_bridgeObjectRetain(v114);
      swift_bridgeObjectRetain(v22);
      v116 = v103;
      v117 = (id)v11;
      LOBYTE(v115) = sub_1007EA638(v115, v228, v114);
      swift_bridgeObjectRelease(v114);
      if ((v115 & 1) != 0)
      {
        *(_QWORD *)&v230 = v111;
        v25 = v225;
        v102 = (char *)v217;
      }
      else
      {
        LODWORD(v226) = v116[OBJC_IVAR____TtC8Freeform14CRLWPListStyle_listType];
        swift_bridgeObjectRelease(v22);
        if ((_DWORD)v216)
          v112 = 1;
        else
          v112 = v104;
        if ((swift_isUniquelyReferenced_nonNull_native(v99) & 1) == 0)
          v99 = sub_100D0FBE8(0, v99[2] + 1, 1, v99);
        v147 = v99[2];
        v146 = v99[3];
        v25 = v225;
        v102 = (char *)v217;
        if (v147 >= v146 >> 1)
          v99 = sub_100D0FBE8((_QWORD *)(v146 > 1), v147 + 1, 1, v99);
        v99[2] = v147 + 1;
        v148 = &v99[6 * v147];
        *((_BYTE *)v148 + 32) = v226;
        v149 = v230;
        v148[5] = v102;
        v148[6] = v149;
        v148[7] = v229;
        v148[8] = v112;
        v22 = (unint64_t)_swiftEmptyArrayStorage;
        v148[9] = _swiftEmptyArrayStorage;
        v222 = v102;
      }
      v105 = (int)v216;
    }
    else
    {
      swift_bridgeObjectRetain(v22);
      v144 = v103;
      v145 = (id)v11;
      *(_QWORD *)&v230 = v111;
      v102 = (char *)v217;
    }
LABEL_119:
    if (v112 == 1)
      v150 = v105;
    else
      v150 = 1;
    if (v104 < 1)
      v150 = 1;
    if (v150)
      v11 = v112;
    else
      v11 = v104;
    if ((swift_isUniquelyReferenced_nonNull_native(v22) & 1) == 0)
      v22 = (unint64_t)sub_100D0FD0C(0, *(_QWORD *)(v22 + 16) + 1, 1, (_QWORD *)v22);
    v98 = v228;
    v24 = *(_QWORD *)(v22 + 16);
    v151 = *(_QWORD *)(v22 + 24);
    if (v24 >= v151 >> 1)
      v22 = (unint64_t)sub_100D0FD0C((_QWORD *)(v151 > 1), v24 + 1, 1, (_QWORD *)v22);
    *(_QWORD *)(v22 + 16) = v24 + 1;
    *(_QWORD *)(v22 + 8 * v24 + 32) = v98;
    if ((uint64_t)v229 < (uint64_t)v230)
      goto LABEL_194;
    if (v99)
    {
      if (!v99[2])
        goto LABEL_195;
      if ((swift_isUniquelyReferenced_nonNull_native(v99) & 1) != 0)
      {
        v152 = v99[2];
        if (!v152)
          goto LABEL_196;
      }
      else
      {
        v99 = sub_100D14F10(v99);
        v152 = v99[2];
        if (!v152)
          goto LABEL_196;
      }
      v153 = v152 - 1;
      v154 = v99[6 * v153 + 9];
      v99[2] = v153;
      swift_bridgeObjectRelease(v154);
      swift_bridgeObjectRetain(v22);
      if ((swift_isUniquelyReferenced_nonNull_native(v99) & 1) == 0)
        v99 = sub_100D0FBE8(0, v99[2] + 1, 1, v99);
      v156 = v99[2];
      v155 = v99[3];
      if (v156 >= v155 >> 1)
        v99 = sub_100D0FBE8((_QWORD *)(v155 > 1), v156 + 1, 1, v99);
      v99[2] = v156 + 1;
      v157 = &v99[6 * v156];
      *((_BYTE *)v157 + 32) = v226;
      v158 = v230;
      v157[5] = v222;
      v157[6] = v158;
      v157[7] = v229;
      v157[8] = v11;
      v157[9] = v22;
      swift_bridgeObjectRetain(v99);
      v11 = v227;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v227);
      v231 = v11;
      sub_100826150((uint64_t)v99, (uint64_t)v102, isUniquelyReferenced_nonNull_native);
      v24 = v231;

      swift_bridgeObjectRelease(0x8000000000000000);
    }
    else
    {
      v24 = v227;
      v160 = sub_100842E60((uint64_t)v102);
      if ((v161 & 1) != 0)
      {
        v11 = v160;
        v162 = swift_isUniquelyReferenced_nonNull_native(v24);
        v231 = v24;
        if ((v162 & 1) == 0)
        {
          sub_10082D0C0();
          v24 = v231;
        }
        v163 = *(_QWORD *)(*(_QWORD *)(v24 + 56) + 8 * v11);
        sub_10051A3F8(v11, v24);

        swift_bridgeObjectRelease(v163);
        swift_bridgeObjectRelease(0x8000000000000000);
      }
      else
      {

      }
      v99 = 0;
    }
    swift_bridgeObjectRelease(v99);
    swift_bridgeObjectRelease(v22);
    v22 = v221;
LABEL_52:
    if (++v98 == v220)
    {
      swift_bridgeObjectRelease(v25);
      if (*(_QWORD *)(v24 + 16))
      {
        v164 = v24 + 64;
        v165 = 1 << *(_BYTE *)(v24 + 32);
        v166 = -1;
        if (v165 < 64)
          v166 = ~(-1 << v165);
        v167 = v166 & *(_QWORD *)(v24 + 64);
        v168 = (void (*)(char *, char *, uint64_t))((unint64_t)(v165 + 63) >> 6);
        swift_bridgeObjectRetain(v24);
        v169 = 0;
        v227 = v24;
        v226 = v24 + 64;
        v224 = v168;
        if (v167)
        {
LABEL_151:
          v170 = __clz(__rbit64(v167));
          v167 &= v167 - 1;
          v171 = v170 | (v169 << 6);
          goto LABEL_152;
        }
        while (1)
        {
          v174 = v169 + 1;
          if (__OFADD__(v169, 1))
            goto LABEL_198;
          if (v174 >= (uint64_t)v168)
            goto LABEL_180;
          v175 = *(_QWORD *)(v164 + 8 * v174);
          ++v169;
          if (!v175)
          {
            v169 = v174 + 1;
            if (v174 + 1 >= (uint64_t)v168)
              goto LABEL_180;
            v175 = *(_QWORD *)(v164 + 8 * v169);
            if (!v175)
            {
              v169 = v174 + 2;
              if (v174 + 2 >= (uint64_t)v168)
                goto LABEL_180;
              v175 = *(_QWORD *)(v164 + 8 * v169);
              if (!v175)
              {
                v169 = v174 + 3;
                if (v174 + 3 >= (uint64_t)v168)
                  goto LABEL_180;
                v175 = *(_QWORD *)(v164 + 8 * v169);
                if (!v175)
                {
                  v176 = v174 + 4;
                  if (v176 >= (uint64_t)v168)
                  {
LABEL_180:
                    swift_release(v24);
                    break;
                  }
                  v175 = *(_QWORD *)(v164 + 8 * v176);
                  if (!v175)
                  {
                    while (1)
                    {
                      v169 = v176 + 1;
                      if (__OFADD__(v176, 1))
                        goto LABEL_205;
                      if (v169 >= (uint64_t)v168)
                        goto LABEL_180;
                      v175 = *(_QWORD *)(v164 + 8 * v169);
                      ++v176;
                      if (v175)
                        goto LABEL_169;
                    }
                  }
                  v169 = v176;
                }
              }
            }
          }
LABEL_169:
          v167 = (v175 - 1) & v175;
          v171 = __clz(__rbit64(v175)) + (v169 << 6);
LABEL_152:
          v172 = *(_QWORD *)(v24 + 56);
          v11 = *(_QWORD *)(v172 + 8 * v171);
          v173 = *(_QWORD *)(v11 + 16);
          if (v173)
          {
            swift_bridgeObjectRetain(*(_QWORD *)(v172 + 8 * v171));
            v177 = v218;
            v178 = swift_isUniquelyReferenced_nonNull_native(v218);
            v228 = v169;
            if ((v178 & 1) == 0)
              v177 = sub_100D0FBE8(0, v177[2] + 1, 1, v177);
            v179 = v11 + 40;
            do
            {
              v180 = *(_BYTE *)(v179 - 8);
              v181 = *(_OWORD *)v179;
              v229 = *(_OWORD *)(v179 + 16);
              v230 = v181;
              v182 = *(_QWORD *)(v179 + 32);
              v183 = v177;
              v184 = v177[2];
              v185 = v177[3];
              swift_bridgeObjectRetain(v182);
              if (v184 >= v185 >> 1)
                v177 = sub_100D0FBE8((_QWORD *)(v185 > 1), v184 + 1, 1, v183);
              else
                v177 = v183;
              v177[2] = v184 + 1;
              v186 = &v177[6 * v184];
              *((_BYTE *)v186 + 32) = v180;
              *(_OWORD *)(v186 + 5) = v230;
              *(_OWORD *)(v186 + 7) = v229;
              v186[9] = v182;
              v179 += 48;
              --v173;
            }
            while (v173);
            v218 = v177;
            swift_bridgeObjectRelease(v11);
            v22 = v221;
            v25 = v225;
            v24 = v227;
            v169 = v228;
            v164 = v226;
            v168 = v224;
            if (v167)
              goto LABEL_151;
          }
          else if (v167)
          {
            goto LABEL_151;
          }
        }
      }
      v187 = v24;
      v188 = v223;
      v189 = *(void **)&v223[OBJC_IVAR____TtC8Freeform12CRLWPStorage__coreTextAttributedString];
      v190 = v215;
      *(_QWORD *)&v223[OBJC_IVAR____TtC8Freeform12CRLWPStorage__coreTextAttributedString] = v215;
      v191 = v190;

      v192 = *(_QWORD *)&v188[OBJC_IVAR____TtC8Freeform12CRLWPStorage__characterStyleRuns];
      *(_QWORD *)&v188[OBJC_IVAR____TtC8Freeform12CRLWPStorage__characterStyleRuns] = v233;
      swift_bridgeObjectRelease(v192);
      v193 = *(_QWORD *)&v188[OBJC_IVAR____TtC8Freeform12CRLWPStorage__paragraphStyleRuns];
      *(_QWORD *)&v188[OBJC_IVAR____TtC8Freeform12CRLWPStorage__paragraphStyleRuns] = v25;
      swift_bridgeObjectRelease(v193);
      v194 = v232;
      v195 = *(_QWORD *)&v188[OBJC_IVAR____TtC8Freeform12CRLWPStorage__hyperlinkRuns];
      *(_QWORD *)&v188[OBJC_IVAR____TtC8Freeform12CRLWPStorage__hyperlinkRuns] = v232;
      swift_bridgeObjectRetain(v194);
      swift_bridgeObjectRelease(v195);
      v196 = *(_QWORD *)&v188[OBJC_IVAR____TtC8Freeform12CRLWPStorage__listRuns];
      *(_QWORD *)&v188[OBJC_IVAR____TtC8Freeform12CRLWPStorage__listRuns] = v218;

      v197 = swift_bridgeObjectRelease(v196);
      (*(void (**)(unint64_t, uint64_t, __n128))(v22 + 8))(v213, v214, v197);
      v188[OBJC_IVAR____TtC8Freeform12CRLWPStorage__hasValidPresentationProperties] = 1;
      swift_bridgeObjectRelease(v187);
      swift_bridgeObjectRelease(v232);
      return;
    }
  }
  swift_bridgeObjectRetain(v109[3]);
LABEL_210:
  __break(1u);
LABEL_211:
  __break(1u);
LABEL_212:
  __break(1u);
}

void sub_1007D71A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  id v16;
  _QWORD *v17;
  void *v18;
  id v19;
  _QWORD *v20;
  char *v21;
  unsigned int v22;
  id v23;
  id v24;
  char v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  __n128 v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD aBlock[5];
  uint64_t v40;
  _BYTE v41[24];

  v1 = v0;
  v2 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CRLWPStorageCRDTData(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = swift_allocObject(&unk_10127FAC0, 24, 7);
  v38 = v12;
  *(_QWORD *)(v12 + 16) = _swiftEmptyArrayStorage;
  v13 = (_QWORD *)(v12 + 16);
  v14 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData);
  if (v14)
  {
    (*(void (**)(void))(*(_QWORD *)v14 + 760))();
    sub_1004B8460((uint64_t)&v4[*(int *)(v2 + 20)], (uint64_t)v7, type metadata accessor for CRLWPStorageCRDTData);
    sub_1004B84A4((uint64_t)v4, type metadata accessor for CRLWPShapeItemCRDTData);
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, v7, v8);
    sub_1004B84A4((uint64_t)v7, type metadata accessor for CRLWPStorageCRDTData);
    v15 = (void *)CRAttributedString.attributedString.getter(v8);
    v16 = objc_msgSend(v15, "string");

    if (v16)
    {
      if ((uint64_t)objc_msgSend(v16, "length") < 1)
        goto LABEL_11;
      v36 = v11;
      v37 = v9;
      v11 = (char *)v8;
      v8 = v1;
      v17 = objc_msgSend(v16, "crl_range");
      v19 = v18;
      v1 = v38;
      aBlock[4] = sub_1007EC294;
      v40 = v38;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = *(_QWORD *)"";
      aBlock[2] = sub_1007E491C;
      aBlock[3] = &unk_10127FAD8;
      v20 = _Block_copy(aBlock);
      v9 = v40;
      swift_retain(v1);
      objc_msgSend(v16, "enumerateSubstringsInRange:options:usingBlock:", v17, v19, 1, v20, swift_release(v9).n128_f64[0]);
      _Block_release(v20);
      v21 = (char *)objc_msgSend(v16, "length");
      if (__OFSUB__(v21, 1))
      {
        __break(1u);
        goto LABEL_18;
      }
      v22 = sub_1001AE2A0((uint64_t)objc_msgSend(v16, "characterAtIndex:", v21 - 1));
      v1 = v8;
      v8 = (uint64_t)v11;
      v11 = v36;
      v9 = v37;
      if (!v22)
      {
LABEL_11:
        swift_beginAccess(v13, aBlock, 0, 0);
        v29 = *v13;
        if (*(_QWORD *)(*v13 + 16))
        {
LABEL_16:
          v34 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8Freeform12CRLWPStorage__paragraphRanges);
          *(_QWORD *)(v1 + OBJC_IVAR____TtC8Freeform12CRLWPStorage__paragraphRanges) = v29;
          swift_bridgeObjectRetain(v29);

          v35 = swift_bridgeObjectRelease(v34);
          (*(void (**)(char *, uint64_t, __n128))(v9 + 8))(v11, v8, v35);
          *(_BYTE *)(v1 + OBJC_IVAR____TtC8Freeform12CRLWPStorage__hasValidRanges) = 1;
          swift_release(v38);
          return;
        }
        swift_beginAccess(v13, v41, 33, 0);
        v17 = (_QWORD *)*v13;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v13);
        *v13 = v17;
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
LABEL_13:
          v32 = v17[2];
          v31 = v17[3];
          if (v32 >= v31 >> 1)
          {
            v17 = sub_100D0FADC((_QWORD *)(v31 > 1), v32 + 1, 1, v17);
            *v13 = v17;
          }
          v17[2] = v32 + 1;
          v33 = &v17[2 * v32];
          v33[4] = 0;
          v33[5] = 0;
          v29 = *v13;
          swift_endAccess(v41);
          goto LABEL_16;
        }
LABEL_18:
        v17 = sub_100D0FADC(0, v17[2] + 1, 1, v17);
        *v13 = v17;
        goto LABEL_13;
      }
      v23 = objc_msgSend(v16, "length");
      v24 = objc_msgSend(v16, "length");
      if ((uint64_t)v24 < (uint64_t)v23)
      {
        __break(1u);
      }
      else
      {
        v19 = v24;
        swift_beginAccess(v13, aBlock, 33, 0);
        v20 = (_QWORD *)*v13;
        v25 = swift_isUniquelyReferenced_nonNull_native(*v13);
        *v13 = v20;
        if ((v25 & 1) != 0)
        {
LABEL_8:
          v27 = v20[2];
          v26 = v20[3];
          if (v27 >= v26 >> 1)
          {
            v20 = sub_100D0FADC((_QWORD *)(v26 > 1), v27 + 1, 1, v20);
            *v13 = v20;
          }
          v20[2] = v27 + 1;
          v28 = &v20[2 * v27];
          v28[4] = v23;
          v28[5] = v19;
          swift_endAccess(aBlock);
          v9 = v37;
          goto LABEL_11;
        }
      }
      v20 = sub_100D0FADC(0, v20[2] + 1, 1, v20);
      *v13 = v20;
      goto LABEL_8;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_1007D7624(char *a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  char *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(_QWORD, __n128);
  __n128 v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t (*v45)(_QWORD);
  unint64_t v46;
  uint64_t v47;
  void (*v48)(_BYTE *, _QWORD);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(_BYTE *, _QWORD);
  uint64_t v60;
  uint64_t v61;
  objc_class *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t (*v70)(_QWORD);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  objc_super v79;
  _BYTE v80[32];
  _BYTE v81[256];

  v75 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v68 = *(_QWORD *)(v75 - 8);
  __chkstk_darwin(v75);
  v67 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v71);
  v9 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = type metadata accessor for CRLWPStorageCRDTData(0);
  __chkstk_darwin(v73);
  v66 = (uint64_t)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v63 - v12;
  v14 = sub_1004B804C(&qword_1013F3D90);
  v76 = *(_QWORD *)(v14 - 8);
  v77 = v14;
  __chkstk_darwin(v14);
  v70 = (uint64_t (*)(_QWORD))((char *)&v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v16);
  v74 = (char *)&v63 - v17;
  v65 = OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData;
  *(_QWORD *)&v3[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData] = 0;
  v18 = (uint64_t)&v3[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemTextPresetOverride];
  sub_10054F488((uint64_t)v81);
  sub_1004C4938((uint64_t)v81, v18, &qword_1013E1B50);
  v19 = OBJC_IVAR____TtC8Freeform12CRLWPStorage_geometry;
  v20 = objc_allocWithZone((Class)CRLCanvasInfoGeometry);
  v21 = v3;
  v22 = objc_msgSend(v20, "initWithSize:", 100.0, 100.0);
  v69 = v3;
  *(_QWORD *)&v3[v19] = v22;
  *(_QWORD *)((char *)OBJC_IVAR____TtC8Freeform12CRLWPStorage_attributedMarkedText + (_QWORD)v21) = 0;
  *(_QWORD *)&v21[OBJC_IVAR____TtC8Freeform12CRLWPStorage_markedTextRange] = 0;
  *(_QWORD *)&v21[OBJC_IVAR____TtC8Freeform12CRLWPStorage_selectedMarkedTextRange] = 0;
  *(_QWORD *)&v21[OBJC_IVAR____TtC8Freeform12CRLWPStorage_selectedMarkedTextRangeFromOS] = 0;
  *(_QWORD *)&v21[OBJC_IVAR____TtC8Freeform12CRLWPStorage_markedTextStyle] = 0;
  swift_unknownObjectWeakInit(&v21[OBJC_IVAR____TtC8Freeform12CRLWPStorage__parentItem]);
  v21[OBJC_IVAR____TtC8Freeform12CRLWPStorage_isSupported] = 1;
  v23 = OBJC_IVAR____TtC8Freeform12CRLWPStorage_layoutClass;
  *(_QWORD *)&v21[v23] = type metadata accessor for CRLWPLayout();
  v24 = OBJC_IVAR____TtC8Freeform12CRLWPStorage_repClass;
  *(_QWORD *)&v21[v24] = sub_1004B8930(0, &qword_1013F0520, off_101229A28);
  v25 = OBJC_IVAR____TtC8Freeform12CRLWPStorage_editorClass;
  *(_QWORD *)&v21[v25] = type metadata accessor for CRLWPEditor(0);
  v21[OBJC_IVAR____TtC8Freeform12CRLWPStorage__hasValidRanges] = 0;
  *(_QWORD *)&v21[OBJC_IVAR____TtC8Freeform12CRLWPStorage__paragraphRanges] = _swiftEmptyArrayStorage;
  v21[OBJC_IVAR____TtC8Freeform12CRLWPStorage__hasValidPresentationProperties] = 0;
  v26 = OBJC_IVAR____TtC8Freeform12CRLWPStorage__coreTextAttributedString;
  *(_QWORD *)&v21[v26] = objc_msgSend(objc_allocWithZone((Class)NSAttributedString), "init");
  *(_QWORD *)&v21[OBJC_IVAR____TtC8Freeform12CRLWPStorage__characterStyleRuns] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v21[OBJC_IVAR____TtC8Freeform12CRLWPStorage__paragraphStyleRuns] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v21[OBJC_IVAR____TtC8Freeform12CRLWPStorage__hyperlinkRuns] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v21[OBJC_IVAR____TtC8Freeform12CRLWPStorage__listRuns] = _swiftEmptyArrayStorage;
  v27 = *(void **)&a1[OBJC_IVAR____TtC8Freeform12CRLWPStorage_store];
  *(_QWORD *)&v21[OBJC_IVAR____TtC8Freeform12CRLWPStorage_store] = v27;
  v28 = v27;
  v29 = a1;
  sub_1007DC570(a2, a3);
  v31 = v30;
  v33 = v32;
  if (v30 == NSNotFound.getter(v30))
  {
    __break(1u);
    goto LABEL_8;
  }
  v34 = (uint64_t)v9;
  v35 = v31 + v33;
  if (__OFADD__(v31, v33))
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v36 = OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData;
  v37 = *(_QWORD *)&v29[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData];
  v78 = v29;
  if (!v37)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v64 = v35;
  v38 = *(uint64_t (**)(_QWORD, __n128))(*(_QWORD *)v37 + 440);
  v39 = swift_retain(v37);
  v72 = v38(0, v39);
  v40 = swift_release(v37);
  v41 = *(_QWORD *)&v78[v36];
  if (!v41)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v42 = v34;
  (*(void (**)(__n128))(*(_QWORD *)v41 + 760))(v40);
  v43 = v71;
  sub_1004B8460(v34 + *(int *)(v71 + 20), (uint64_t)v13, type metadata accessor for CRLWPStorageCRDTData);
  sub_1004B84A4(v34, type metadata accessor for CRLWPShapeItemCRDTData);
  v44 = v74;
  CRAttributedString.subscript.getter(v31, v64, v75);
  sub_1004B84A4((uint64_t)v13, type metadata accessor for CRLWPStorageCRDTData);
  v45 = v70;
  (*(void (**)(uint64_t (*)(_QWORD), char *, uint64_t))(v76 + 16))(v70, v44, v77);
  v46 = sub_100559A64();
  CRAttributedString.init(_:)(v45, &type metadata for CRLTextAttributeScope, v46);
  v47 = v73;
  CRAttributedString.init(_:)(32, 0xE100000000000000, &type metadata for CRLTextAttributeScope, v46);
  *(_QWORD *)&v13[*(int *)(v47 + 24)] = _swiftEmptyDictionarySingleton;
  v70 = *(uint64_t (**)(_QWORD))(*(_QWORD *)v72 + 776);
  v48 = (void (*)(_BYTE *, _QWORD))v70(v80);
  sub_1007EC8EC((uint64_t)v13, v49 + *(int *)(v43 + 20));
  v48(v80, 0);
  v50 = sub_1004B84A4((uint64_t)v13, type metadata accessor for CRLWPStorageCRDTData);
  v51 = *(_QWORD *)&v78[v36];
  if (v51)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 760))(v50);
    sub_1004B8460(v34 + *(int *)(v43 + 20), (uint64_t)v13, type metadata accessor for CRLWPStorageCRDTData);
    sub_1004B84A4(v34, type metadata accessor for CRLWPShapeItemCRDTData);
    v52 = &v13[*(int *)(v47 + 20)];
    v53 = v67;
    v54 = v68;
    v55 = v75;
    (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v67, v52, v75);
    v56 = sub_1004B84A4((uint64_t)v13, type metadata accessor for CRLWPStorageCRDTData);
    v57 = v72;
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 760))(v56);
    v58 = v66;
    sub_1004B8460(v42 + *(int *)(v43 + 20), v66, type metadata accessor for CRLWPStorageCRDTData);
    sub_1004B84A4(v42, type metadata accessor for CRLWPShapeItemCRDTData);
    (*(void (**)(uint64_t, char *, uint64_t))(v54 + 40))(v58 + *(int *)(v73 + 20), v53, v55);
    v59 = (void (*)(_BYTE *, _QWORD))v70(v80);
    sub_1007EC8EC(v58, v60 + *(int *)(v43 + 20));
    v59(v80, 0);
    sub_1004B84A4(v58, type metadata accessor for CRLWPStorageCRDTData);
    v61 = *(_QWORD *)&v69[v65];
    *(_QWORD *)&v69[v65] = v57;
    swift_retain(v57);

    swift_release(v61);
    v62 = (objc_class *)type metadata accessor for CRLWPStorage();
    v79.receiver = v21;
    v79.super_class = v62;
    objc_msgSendSuper2(&v79, "init");
    swift_release(v57);

    (*(void (**)(char *, uint64_t))(v76 + 8))(v74, v77);
    return;
  }
LABEL_11:
  __break(1u);
}

id sub_1007D7CB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  char *v3;
  void *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  id result;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = v3;
  v23 = a2;
  v7 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for CRLWPStorageCRDTData(0);
  result = (id)__chkstk_darwin(v14);
  v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)&v3[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData];
  if (v18)
  {
    (*(void (**)(id))(*(_QWORD *)v18 + 760))(result);
    sub_1004B8460((uint64_t)&v13[*(int *)(v11 + 20)], (uint64_t)v17, type metadata accessor for CRLWPStorageCRDTData);
    v19 = v4;
    sub_1004B84A4((uint64_t)v13, type metadata accessor for CRLWPShapeItemCRDTData);
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v17, v7);
    sub_1004B84A4((uint64_t)v17, type metadata accessor for CRLWPStorageCRDTData);
    v20 = CRAttributedString.count.getter(v7);
    result = (id)(*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    if (v20 >= (a1 & ~(a1 >> 63)))
      v21 = a1 & ~(a1 >> 63);
    else
      v21 = v20;
    if (v20 >= (v23 & ~(v23 >> 63)))
      v20 = v23 & ~(v23 >> 63);
    if (v20 >= v21)
    {
      result = v19;
      *a3 = result;
      a3[1] = v21;
      a3[2] = v20;
      a3[3] = result;
      a3[4] = v21;
      a3[5] = v20;
      return result;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_1007D7EB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;

  v1 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CRLWPStorageCRDTData(0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData);
  if (v12)
  {
    (*(void (**)(__n128))(*(_QWORD *)v12 + 760))(v9);
    sub_1004B8460((uint64_t)&v7[*(int *)(v5 + 20)], (uint64_t)v11, type metadata accessor for CRLWPStorageCRDTData);
    sub_1004B84A4((uint64_t)v7, type metadata accessor for CRLWPShapeItemCRDTData);
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v4, v11, v1);
    sub_1004B84A4((uint64_t)v11, type metadata accessor for CRLWPStorageCRDTData);
    v13 = (void *)CRAttributedString.attributedString.getter(v1);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    objc_msgSend(v13, "length");

  }
  else
  {
    __break(1u);
  }
}

void sub_1007D8044()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;

  v1 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CRLWPStorageCRDTData(0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData);
  if (v12)
  {
    (*(void (**)(__n128))(*(_QWORD *)v12 + 760))(v9);
    sub_1004B8460((uint64_t)&v7[*(int *)(v5 + 20)], (uint64_t)v11, type metadata accessor for CRLWPStorageCRDTData);
    sub_1004B84A4((uint64_t)v7, type metadata accessor for CRLWPShapeItemCRDTData);
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v4, v11, v1);
    sub_1004B84A4((uint64_t)v11, type metadata accessor for CRLWPStorageCRDTData);
    v13 = (void *)CRAttributedString.attributedString.getter(v1);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    v14 = objc_msgSend(v13, "string");

    static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  }
  else
  {
    __break(1u);
  }
}

void sub_1007D81F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(__n128);
  __n128 v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;

  v1 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v36 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v35 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v35);
  v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CRLWPStorageCRDTData(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData;
  v37 = v0;
  v10 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData);
  if (!v10)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    return;
  }
  v11 = *(uint64_t (**)(__n128))(*(_QWORD *)v10 + 408);
  v12 = swift_retain(v10);
  v13 = v11(v12);
  v15 = v14;
  swift_release(v10);
  v16 = sub_1007776BC(v13, v15 & 1);
  v18 = v17;
  v19 = sub_100D0EF94(0, 1, 1, _swiftEmptyArrayStorage);
  v21 = v19[2];
  v20 = v19[3];
  if (v21 >= v20 >> 1)
    v19 = sub_100D0EF94((_QWORD *)(v20 > 1), v21 + 1, 1, v19);
  v19[2] = v21 + 1;
  v22 = &v19[2 * v21];
  v22[4] = v16;
  v22[5] = v18;
  v23 = *(_QWORD *)(v37 + v9);
  if (!v23)
    goto LABEL_12;
  (*(void (**)(void))(*(_QWORD *)v23 + 760))();
  sub_1004B8460((uint64_t)&v5[*(int *)(v35 + 20)], (uint64_t)v8, type metadata accessor for CRLWPStorageCRDTData);
  sub_1004B84A4((uint64_t)v5, type metadata accessor for CRLWPShapeItemCRDTData);
  v24 = v36;
  (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v3, v8, v1);
  sub_1004B84A4((uint64_t)v8, type metadata accessor for CRLWPStorageCRDTData);
  v25 = (void *)CRAttributedString.attributedString.getter(v1);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v3, v1);
  v26 = objc_msgSend(v25, "string");

  v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
  v29 = v28;

  if (String.count.getter(v27, v29) < 1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v31 = v19[2];
    v30 = v19[3];
    if (v31 >= v30 >> 1)
      v19 = sub_100D0EF94((_QWORD *)(v30 > 1), v31 + 1, 1, v19);
    v19[2] = v31 + 1;
    v32 = &v19[2 * v31];
    v32[4] = v27;
    v32[5] = v29;
  }
  v38 = v19;
  v33 = sub_1004B804C((uint64_t *)&unk_1013E4970);
  v34 = sub_1004CBA30((unint64_t *)&qword_1013DFC40, (uint64_t *)&unk_1013E4970, (uint64_t)&protocol conformance descriptor for [A]);
  BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v33, v34);
  swift_bridgeObjectRelease();
}

void sub_1007D8510(uint64_t a1, int64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  void *v17;
  void (*v18)(char *, uint64_t);
  id v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;

  v24 = a1;
  v25 = a2;
  v3 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CRLWPStorageCRDTData(0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData;
  v26 = v2;
  v15 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData);
  if (!v15)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 760))(v11);
  sub_1004B8460((uint64_t)&v9[*(int *)(v7 + 20)], (uint64_t)v13, type metadata accessor for CRLWPStorageCRDTData);
  sub_1004B84A4((uint64_t)v9, type metadata accessor for CRLWPShapeItemCRDTData);
  v16 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  v16(v6, v13, v3);
  sub_1004B84A4((uint64_t)v13, type metadata accessor for CRLWPStorageCRDTData);
  v17 = (void *)CRAttributedString.attributedString.getter(v3);
  v18 = *(void (**)(char *, uint64_t))(v4 + 8);
  v18(v6, v3);
  v19 = objc_msgSend(v17, "length");

  v20 = *(_QWORD *)(v26 + v14);
  if (v20)
  {
    (*(void (**)(void))(*(_QWORD *)v20 + 760))();
    sub_1004B8460((uint64_t)&v9[*(int *)(v7 + 20)], (uint64_t)v13, type metadata accessor for CRLWPStorageCRDTData);
    sub_1004B84A4((uint64_t)v9, type metadata accessor for CRLWPShapeItemCRDTData);
    v16(v6, v13, v3);
    sub_1004B84A4((uint64_t)v13, type metadata accessor for CRLWPStorageCRDTData);
    v21 = (void *)CRAttributedString.attributedString.getter(v3);
    v18(v6, v3);
    v22 = objc_msgSend(v21, "length");

    if ((uint64_t)v22 >= (uint64_t)v19)
    {
      sub_1007D876C((uint64_t)v19, (int64_t)v22, v24, v25, 1);
      return;
    }
    __break(1u);
    goto LABEL_6;
  }
LABEL_7:
  __break(1u);
}

void sub_1007D876C(uint64_t a1, int64_t a2, uint64_t a3, int64_t a4, int a5)
{
  char *v5;
  char *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (**v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t Strong;
  void *v30;
  uint64_t ObjectType;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  char *KeyPath;
  char v50;
  char v51;
  int64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  __n128 v57;
  uint64_t v58;
  int64_t *v59;
  BOOL v61;
  uint64_t v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  id v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(void ***, _QWORD);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __n128 v96;
  int64_t v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  id v101;
  id v102;
  void **v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  void **v108;
  char *v109;
  uint64_t v110;
  void *v111;
  id v112;
  uint64_t v113;
  uint64_t v114;
  NSString v115;
  id v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void (*v121)(void *, uint64_t, uint64_t);
  void *v122;
  uint64_t v123;
  char *v124;
  void **v125;
  uint64_t v126;
  __n128 v127;
  uint64_t v128;
  char *v129;
  char *v130;
  char *v131;
  char *v132;
  void *v133;
  uint64_t v134;
  char *v135;
  char *v136;
  char *v137;
  char *v138;
  void *v139;
  char *v140;
  void (*v141)(char *, char *, __n128);
  uint64_t v142;
  uint64_t v143;
  void (*v144)(char *, uint64_t);
  void (*v145)(char *, uint64_t, uint64_t);
  uint64_t v146;
  char *v147;
  void (**v148)(char *, uint64_t, uint64_t);
  uint64_t v149;
  char *v150;
  char *v151;
  int64_t v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  id v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  char *v164;
  char *v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  id v173[6];
  void **aBlock;
  uint64_t v175;
  void (*v176)(uint64_t, void *, uint64_t, uint64_t);
  void *v177;
  uint64_t (*v178)(uint64_t, uint64_t, uint64_t);
  uint64_t v179;

  v6 = v5;
  v153 = a5;
  v152 = a4;
  v155 = a3;
  v156 = a1;
  v149 = type metadata accessor for CharacterSet(0);
  v148 = *(void (***)(char *, uint64_t, uint64_t))(v149 - 8);
  __chkstk_darwin(v149);
  v147 = (char *)&v142 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1004B804C(&qword_1013EC738);
  __chkstk_darwin(v9);
  v11 = (char *)&v142 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1004B804C((uint64_t *)&unk_1013E87D0);
  __chkstk_darwin(v12);
  v169 = (char *)&v142 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
  v170 = *(_QWORD *)(v14 - 8);
  v171 = (char *)v14;
  v15 = __chkstk_darwin(v14);
  v150 = (char *)&v142 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v154 = (uint64_t)&v142 - v18;
  __chkstk_darwin(v17);
  v20 = (char *)&v142 - v19;
  v172 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v21 = *(_QWORD *)(v172 - 8);
  __chkstk_darwin(v172);
  v151 = (char *)&v142 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v168 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v168);
  v166 = (char *)&v142 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for CRLWPStorageCRDTData(0);
  v25 = __chkstk_darwin(v24);
  v27 = (void (**)(char *, uint64_t, uint64_t))((char *)&v142 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v25);
  v157 = (uint64_t)&v142 - v28;
  Strong = swift_unknownObjectWeakLoadStrong(&v5[OBJC_IVAR____TtC8Freeform12CRLWPStorage__parentItem]);
  v165 = v5;
  if (Strong)
  {
    v30 = (void *)Strong;
    ObjectType = swift_getObjectType(Strong);
    v32 = swift_conformsToProtocol2(ObjectType, &protocol descriptor for CRLTransactable);
    if (v32)
      v33 = v32;
    else
      v33 = 0;
    if (v32)
      v34 = v30;
    else
      v34 = 0;
    if (v34)
    {
      v35 = swift_getObjectType(v34);
      v36 = sub_100D5E2C8(v35, v33);

      v6 = v165;
      if ((v36 & 1) == 0)
        return;
    }
    else
    {

      v6 = v165;
    }
  }
  v143 = v24;
  v161 = OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData;
  v37 = *(_QWORD *)&v6[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData];
  if (!v37)
  {
    __break(1u);
    goto LABEL_118;
  }
  v38 = (uint64_t)v166;
  (*(void (**)(void))(*(_QWORD *)v37 + 760))();
  v39 = v157;
  sub_1004B8460(v38 + *(int *)(v168 + 20), v157, type metadata accessor for CRLWPStorageCRDTData);
  sub_1004B84A4(v38, type metadata accessor for CRLWPShapeItemCRDTData);
  v40 = v151;
  v41 = v172;
  v145 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  v145(v151, v39, v172);
  sub_1004B84A4(v39, type metadata accessor for CRLWPStorageCRDTData);
  v42 = CRAttributedString.count.getter(v41);
  v144 = *(void (**)(char *, uint64_t))(v21 + 8);
  v144(v40, v41);
  if (v42 >= (v156 & ~(v156 >> 63)))
    v43 = v156 & ~(v156 >> 63);
  else
    v43 = v42;
  if (v42 >= (a2 & ~(a2 >> 63)))
    v42 = a2 & ~(a2 >> 63);
  if (v42 < v43)
    goto LABEL_110;
  v21 = v152;
  v44 = swift_bridgeObjectRetain(v152);
  a2 = String.UTF16View.count.getter(v155, v21, v44);
  swift_bridgeObjectRelease(v21);
  v45 = v43 + a2;
  if (__OFADD__(v43, a2))
  {
LABEL_111:
    __break(1u);
    goto LABEL_112;
  }
  if (v45 < v43)
  {
LABEL_112:
    __break(1u);
LABEL_113:
    swift_once(&qword_1013DD138, sub_1007DCC90);
LABEL_88:
    v98 = sub_1004F2A1C(v43, (uint64_t)qword_10147F678);
    v27[2](v11, v98, v43);
    swift_bridgeObjectRetain(a2);
    v99 = sub_100857F34(v42, a2);
    swift_bridgeObjectRelease(a2);
    if ((v99 & 0x100000000) == 0)
    {
      v100 = CharacterSet.contains(_:)(v99);
      ((void (*)(char *, uint64_t))v27[1])(v11, v43);
      v96 = swift_bridgeObjectRelease(a2);
      if ((v100 & 1) != 0)
      {
        v101 = objc_allocWithZone((Class)NSDataDetector);
        aBlock = 0;
        v102 = objc_msgSend(v101, "initWithTypes:error:", 32, &aBlock);
        v103 = aBlock;
        if (v102)
        {
          v104 = *(_QWORD *)&v6[v161];
          if (!v104)
            goto LABEL_122;
          v105 = v102;
          v106 = (uint64_t)v166;
          (*(void (**)(void))(*(_QWORD *)v104 + 760))();
          v107 = v157;
          sub_1004B8460(v106 + *(int *)(v168 + 20), v157, type metadata accessor for CRLWPStorageCRDTData);
          v108 = v103;
          sub_1004B84A4(v106, type metadata accessor for CRLWPShapeItemCRDTData);
          v109 = v151;
          v110 = v172;
          v145(v151, v107, v172);
          sub_1004B84A4(v107, type metadata accessor for CRLWPStorageCRDTData);
          v111 = (void *)CRAttributedString.attributedString.getter(v110);
          v144(v109, v110);
          v112 = objc_msgSend(v111, "string");

          static String._unconditionallyBridgeFromObjectiveC(_:)(v112);
          v114 = v113;

          v115 = String._bridgeToObjectiveC()();
          v116 = objc_msgSend(v6, "range", swift_bridgeObjectRelease(v114).n128_f64[0]);
          v118 = v117;
          v119 = swift_allocObject(&unk_10127FBB0, 24, 7);
          *(_QWORD *)(v119 + 16) = v6;
          v120 = swift_allocObject(&unk_10127FBD8, 32, 7);
          v121 = sub_1007ECAE0;
          *(_QWORD *)(v120 + 16) = sub_1007ECAE0;
          *(_QWORD *)(v120 + 24) = v119;
          v178 = sub_1007ECAF8;
          v179 = v120;
          aBlock = _NSConcreteStackBlock;
          v175 = *(_QWORD *)"";
          v176 = sub_100D2F524;
          v177 = &unk_10127FBF0;
          v122 = _Block_copy(&aBlock);
          v123 = v179;
          v124 = v6;
          swift_retain(v120);
          objc_msgSend(v105, "enumerateMatchesInString:options:range:usingBlock:", v115, 0, v116, v118, v122, swift_release(v123).n128_f64[0]);

          _Block_release(v122);
          LOBYTE(v115) = swift_isEscapingClosureAtFileLocation(v120, "", 78, 1192, 102, 1);
          v96 = swift_release(v120);
          if ((v115 & 1) == 0)
          {
            v6 = v165;
            v21 = v152;
            v39 = v155;
            v20 = v150;
            goto LABEL_96;
          }
          goto LABEL_115;
        }
        v125 = aBlock;
        v126 = _convertNSErrorToError(_:)(v103);

        swift_willThrow(v127);
        swift_errorRelease(v126);
      }
LABEL_95:
      v121 = 0;
      v119 = 0;
LABEL_96:
      v128 = OBJC_IVAR____TtC8Freeform12CRLWPStorage_markedTextRange;
      v129 = *(char **)&v6[OBJC_IVAR____TtC8Freeform12CRLWPStorage_markedTextRange];
      if (v129 && *(_QWORD *)&v129[OBJC_IVAR____TtC8Freeform12CRLTextRange_range] >= v156)
      {
        v130 = v129;
        v131 = (char *)String.count.getter(v39, v21);
        v132 = sub_10060F758(v131);
        v133 = *(void **)&v6[v128];
        *(_QWORD *)&v6[v128] = v132;

      }
      v134 = OBJC_IVAR____TtC8Freeform12CRLWPStorage_selectedMarkedTextRange;
      v135 = *(char **)&v6[OBJC_IVAR____TtC8Freeform12CRLWPStorage_selectedMarkedTextRange];
      if (v135)
      {
        if (*(_QWORD *)&v135[OBJC_IVAR____TtC8Freeform12CRLTextRange_range] >= v156)
        {
          v136 = v135;
          v137 = (char *)String.count.getter(v39, v21);
          v138 = sub_10060F758(v137);
          v139 = *(void **)&v6[v134];
          *(_QWORD *)&v6[v134] = v138;

        }
      }
      v140 = v171;
      v141 = *(void (**)(char *, char *, __n128))(v170 + 8);
      v141(v20, v171, v96);
      ((void (*)(uint64_t, char *))v141)(v154, v140);
      sub_1004C1024((uint64_t)v121, v119);
      return;
    }
LABEL_120:
    __break(1u);
    goto LABEL_121;
  }
  v164 = (char *)v43;
  v163 = (char *)v42;
  sub_1007D7CB8(v43, v42, v173);
  v46 = (char *)v173[4];
  v47 = (char *)v173[5];
  v48 = (char *)v173[3];

  KeyPath = (char *)swift_getKeyPath(&unk_100F0DDE8);
  a2 = sub_100DCA09C(KeyPath, v48, v46, v47);
  v51 = v50;
  swift_release(KeyPath);

  v52 = a2;
  if ((v51 & 1) != 0)
  {
    if (!*(_QWORD *)(a2 + 16))
    {
      __break(1u);
LABEL_115:
      __break(1u);
      goto LABEL_116;
    }
    v52 = *(_QWORD *)(a2 + 32);
  }
  v146 = v45;
  sub_100739414((void *)a2, v51 & 1);
  v6 = v165;
  v53 = v164;
  v54 = v163;
  if (!v52)
    goto LABEL_69;
  if ((v165[OBJC_IVAR____TtC8Freeform12CRLWPStorage__hasValidPresentationProperties] & 1) == 0)
    sub_1007D5878();
  v55 = *(_QWORD *)&v6[OBJC_IVAR____TtC8Freeform12CRLWPStorage__hyperlinkRuns];
  v162 = *(_QWORD *)(v55 + 16);
  if (!v162)
    goto LABEL_69;
  v160 = v55 + 32;
  v142 = v55;
  swift_bridgeObjectRetain(v55);
  v56 = 0;
  while (2)
  {
    v59 = (int64_t *)(v160 + 24 * v56);
    v21 = *v59;
    v42 = v59[1];
    v43 = v59[2];
    if ((uint64_t)v53 < *v59 || (uint64_t)v53 >= v42)
    {
      if (v53 == v54)
        goto LABEL_31;
      v61 = v21 < (uint64_t)v54 && (uint64_t)v53 < v42;
      if (!v61 || v21 == v42)
        goto LABEL_31;
    }
    v167 = v56;
    v6 = *(char **)&v6[v161];
    if (!v6)
LABEL_116:
      __break(1u);
    v63 = swift_getKeyPath(&unk_100F0DDE8);
    v39 = v42 - v21;
    if (__OFSUB__(v42, v21))
    {
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
      goto LABEL_111;
    }
    a2 = v63;
    v64 = (uint64_t)v166;
    (*(void (**)(void))(*(_QWORD *)v6 + 760))();
    sub_1004B8460(v64 + *(int *)(v168 + 20), (uint64_t)v27, type metadata accessor for CRLWPStorageCRDTData);
    v65 = (id)v43;
    swift_retain(v6);
    sub_1004B84A4(v64, type metadata accessor for CRLWPShapeItemCRDTData);
    if (v39 < 1)
    {
      v57 = swift_release(a2);
      goto LABEL_30;
    }
    v158 = v65;
    v159 = v6;
    while (1)
    {
      aBlock = 0;
      v175 = 0;
      v66 = CRAttributedString.attributes(at:effectiveRange:)(v21, &aBlock, v172);
      __chkstk_darwin(v66);
      *(&v142 - 4) = (uint64_t)&type metadata for CRLWPHyperlinkAttribute;
      *(&v142 - 3) = sub_1007EC194();
      *(&v142 - 2) = a2;
      v67 = swift_getKeyPath(&unk_100F0DF80);
      v68 = type metadata accessor for CRLWPHyperlinkSmartFieldData(0);
      v69 = v169;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 56))(v169, 1, 1, v68);
      v43 = sub_1007E6AC0();
      swift_retain(a2);
      v6 = v171;
      CRAttributedString.Attributes.subscript.setter(v69, v67, v171, v43);
      v42 = (uint64_t)aBlock;
      v70 = (char *)aBlock + v175;
      if (__OFADD__(aBlock, v175))
      {
        __break(1u);
LABEL_104:
        __break(1u);
LABEL_105:
        __break(1u);
LABEL_106:
        __break(1u);
LABEL_107:
        __break(1u);
LABEL_108:
        __break(1u);
        goto LABEL_109;
      }
      v71 = v21 + v39;
      if (__OFADD__(v21, v39))
        goto LABEL_104;
      if ((uint64_t)v70 >= v71)
        v72 = (char *)(v21 + v39);
      else
        v72 = (char *)aBlock + v175;
      if ((uint64_t)aBlock >= v21 && (uint64_t)aBlock < v71)
      {
        v43 = v72 - (char *)aBlock;
        if (__OFSUB__(v72, aBlock))
          goto LABEL_107;
        goto LABEL_62;
      }
      if (v21 < (uint64_t)aBlock || v21 >= (uint64_t)v70)
        break;
      v43 = (uint64_t)&v72[-v21];
      if (__OFSUB__(v72, v21))
        goto LABEL_108;
      v42 = v21;
LABEL_62:
      v73 = v170;
      (*(void (**)(char *, char *, char *))(v170 + 16))(v11, v20, v6);
      (*(void (**)(char *, _QWORD, uint64_t, char *))(v73 + 56))(v11, 0, 1, v6);
      v74 = v42;
      v42 = (uint64_t)v27;
      CRAttributedString.setAttributes(_:range:)(v11, v74, v43, v172);
      sub_1004CB800((uint64_t)v11, &qword_1013EC738);
      (*(void (**)(char *, char *))(v73 + 8))(v20, v6);
      v75 = __OFADD__(v21, v43);
      v21 += v43;
      if (v75)
        goto LABEL_105;
      v75 = __OFSUB__(v39, v43);
      v39 -= v43;
      if (v75)
        goto LABEL_106;
      if (v39 <= 0)
        goto LABEL_67;
    }
    (*(void (**)(char *, char *))(v170 + 8))(v20, v6);
LABEL_67:
    v57 = swift_release(a2);
    v6 = v159;
    v65 = v158;
LABEL_30:
    a2 = (*(uint64_t (**)(void ***, __n128))(*(_QWORD *)v6 + 776))(&aBlock, v57);
    sub_1007EC8EC((uint64_t)v27, v58 + *(int *)(v168 + 20));
    ((void (*)(void ***, _QWORD))a2)(&aBlock, 0);
    sub_1004B84A4((uint64_t)v27, type metadata accessor for CRLWPStorageCRDTData);

    swift_release(v6);
    v6 = v165;
    v53 = v164;
    v54 = v163;
    v56 = v167;
LABEL_31:
    if (++v56 != v162)
      continue;
    break;
  }
  swift_bridgeObjectRelease(v142);
  v21 = v152;
LABEL_69:
  if (!v53 && v54 == objc_msgSend(v6, "characterCount") && !v146)
    sub_1007DAF50();
  v76 = sub_1007DAEB0(v53, v54);
  v77 = (uint64_t)v54;
  v39 = v155;
  v78 = (uint64_t)v150;
  if ((v153 & 1) == 0)
  {
    v86 = sub_100559A64();
    CRAttributedString.Attributes.init()(&type metadata for CRLTextAttributeScope, v86);
    v85 = (id)CRAttributedString.Attributes.init()(&type metadata for CRLTextAttributeScope, v86);
    goto LABEL_79;
  }
  v79 = (uint64_t)v76;
  sub_1007DB2EC((uint64_t)v76);
  if ((sub_1007DACE0((uint64_t)v53, v77) & 1) == 0)
  {
    v85 = sub_1007DB8CC(v79, v78);
LABEL_79:
    v87 = *(_QWORD *)&v6[v161];
    if (v87)
    {
      v88 = v78;
      v89 = (uint64_t)v166;
      (*(void (**)(id))(*(_QWORD *)v87 + 760))(v85);
      v90 = v168;
      v91 = v157;
      sub_1004B8460(v89 + *(int *)(v168 + 20), v157, type metadata accessor for CRLWPStorageCRDTData);
      swift_retain(v87);
      sub_1004B84A4(v89, type metadata accessor for CRLWPShapeItemCRDTData);
      CRAttributedString.replaceSubrange(_:with:)(v164, v163, v39, v21, v172);
      v92 = (void (*)(void ***, _QWORD))(*(uint64_t (**)(void ***))(*(_QWORD *)v87 + 776))(&aBlock);
      sub_1007EC8EC(v91, v93 + *(int *)(v90 + 20));
      v92(&aBlock, 0);
      sub_1004B84A4(v91, type metadata accessor for CRLWPStorageCRDTData);
      swift_release(v87);
      v6[OBJC_IVAR____TtC8Freeform12CRLWPStorage__hasValidPresentationProperties] = 0;
      v6[OBJC_IVAR____TtC8Freeform12CRLWPStorage__hasValidRanges] = 0;
      v20 = (char *)v88;
      if ((v153 & 1) != 0)
      {
        v94 = HIBYTE(v21) & 0xF;
        if ((v21 & 0x2000000000000000) == 0)
          v94 = v39 & 0xFFFFFFFFFFFFLL;
        if (v94)
          sub_1007DBCFC(v154, v88, (uint64_t)v164, v146);
      }
      v95 = String.count.getter(v39, v21);
      v43 = v149;
      v11 = v147;
      v27 = v148;
      if (v95 < 1)
        goto LABEL_95;
      swift_bridgeObjectRetain(v21);
      v42 = sub_100858010(v39, v21);
      a2 = v97;
      swift_bridgeObjectRelease(v21);
      if (a2)
      {
        if (qword_1013DD138 == -1)
          goto LABEL_88;
        goto LABEL_113;
      }
LABEL_119:
      __break(1u);
      goto LABEL_120;
    }
LABEL_118:
    __break(1u);
    goto LABEL_119;
  }
  v80 = *(_QWORD *)&v6[v161];
  if (v80)
  {
    v81 = (uint64_t)v166;
    (*(void (**)(void))(*(_QWORD *)v80 + 760))();
    v82 = v157;
    sub_1004B8460(v81 + *(int *)(v168 + 20), v157, type metadata accessor for CRLWPStorageCRDTData);
    sub_1004B84A4(v81, type metadata accessor for CRLWPShapeItemCRDTData);
    v83 = v151;
    v84 = v172;
    v145(v151, v82 + *(int *)(v143 + 20), v172);
    sub_1004B84A4(v82, type metadata accessor for CRLWPStorageCRDTData);
    CRAttributedString.attributes(at:effectiveRange:)(0, 0, v84);
    v85 = (id)((uint64_t (*)(char *, uint64_t))v144)(v83, v84);
    goto LABEL_79;
  }
LABEL_121:
  __break(1u);
LABEL_122:
  __break(1u);
}

void sub_1007D9774(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  id v19;
  id v20;
  void *v21;
  void (*v22)(char *, char *, uint64_t);
  void (*v23)(char *, _QWORD, uint64_t, uint64_t);
  unsigned int (*v24)(char *, uint64_t, uint64_t);
  id v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  NSURL *v34;
  void *v35;
  void *v36;
  id v37;
  NSString v38;
  double v39;
  id v40;
  void *v41;
  uint64_t v42;
  _QWORD v43[2];
  uint64_t v44;
  uint64_t v45;
  uint64_t KeyPath;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  void *v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;

  v6 = sub_1004B804C(&qword_1013E04D0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)v43 - v10;
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)v43 - v17;
  if (!a1)
    return;
  v19 = a1;
  v20 = objc_msgSend(v19, "URL");
  if (!v20)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
    goto LABEL_7;
  }
  v21 = v20;
  v47 = a4;
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v20);

  v22 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v22(v11, v16, v12);
  v23 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56);
  v23(v11, 0, 1, v12);
  v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v24(v11, 1, v12) == 1)
  {
LABEL_7:

    sub_1004CB800((uint64_t)v11, &qword_1013E04D0);
    return;
  }
  v22(v18, v11, v12);
  v25 = objc_msgSend(v19, "range");
  v27 = v26;
  if (v25 == (id)NSNotFound.getter(v25))
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);

    return;
  }
  v28 = __OFADD__(v25, v27);
  v29 = (uint64_t)v25 + v27;
  if (v28)
  {
    __break(1u);
    goto LABEL_16;
  }
  KeyPath = swift_getKeyPath(&unk_100F0DDE8);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v9, v18, v12);
  v23(v9, 0, 1, v12);
  v44 = v29 - (_QWORD)v25;
  v45 = v29;
  if (__OFSUB__(v29, v25))
  {
LABEL_16:
    __break(1u);
    return;
  }
  v30 = objc_msgSend(objc_allocWithZone((Class)NSUUID), "init");
  v31 = objc_msgSend(v30, "UUIDString");

  v43[1] = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
  v33 = v32;

  if (v24(v9, 1, v12) == 1)
  {
    v35 = 0;
  }
  else
  {
    URL._bridgeToObjectiveC()(v34);
    v35 = v36;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v9, v12);
  }
  v37 = objc_allocWithZone((Class)CRLWPHyperlinkField);
  v38 = String._bridgeToObjectiveC()();
  *(_QWORD *)&v39 = swift_bridgeObjectRelease(v33).n128_u64[0];
  v40 = objc_msgSend(v37, "initWithURL:range:displayText:uuidString:", v35, v25, v44, 0, v38, v39);

  sub_1007D7CB8((uint64_t)v25, v45, &v50);
  v41 = v50;
  v53 = v51;
  v54 = v52;
  v48 = v51;
  v49 = v52;
  v42 = KeyPath;
  sub_100C67848((uint64_t)v40, 0, KeyPath);

  swift_release(v42);
  sub_1005A73A4((id *)&v53);

  (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);
}

void sub_1007D9B04(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *, uint64_t, uint64_t), int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t Strong;
  void *v31;
  uint64_t ObjectType;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  void *v45;
  id v46;
  uint64_t v47;
  int64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;
  uint64_t v53;
  char *v54;
  int v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t, uint64_t, uint64_t);
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t KeyPath;
  uint64_t v73;
  unint64_t v74;
  __n128 v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  __n128 v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  void (*v83)(char *, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t (*v106)(char *, uint64_t, uint64_t);
  uint64_t v107;
  int v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  char v114;
  __int128 v115;
  char v116;
  _BYTE v117[248];
  _QWORD v118[31];
  _BYTE v119[256];

  v108 = a4;
  v106 = a3;
  v107 = a2;
  v105 = a1;
  v5 = sub_1004B804C(&qword_1013EC738);
  __chkstk_darwin(v5);
  v100 = (char *)&v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
  v102 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v96 = (char *)&v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v95 = (char *)&v89 - v10;
  __chkstk_darwin(v11);
  v13 = (char *)&v89 - v12;
  __chkstk_darwin(v14);
  v16 = (char *)&v89 - v15;
  v17 = sub_1004B804C(&qword_1013F3C80);
  v109 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v99 = (char *)&v89 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v104 = (char *)&v89 - v20;
  v21 = sub_1004B804C(&qword_1013F3C78);
  __chkstk_darwin(v21);
  v101 = (char *)&v89 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = sub_1004B804C(&qword_1013F3C90);
  v89 = *(_QWORD *)(v111 - 8);
  __chkstk_darwin(v111);
  v110 = (char *)&v89 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v98 = *(_QWORD *)(v112 - 8);
  __chkstk_darwin(v112);
  v25 = (char *)&v89 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v92);
  v91 = (char *)&v89 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for CRLWPStorageCRDTData(0);
  __chkstk_darwin(v27);
  v29 = (char *)&v89 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = v4;
  Strong = swift_unknownObjectWeakLoadStrong(v4 + OBJC_IVAR____TtC8Freeform12CRLWPStorage__parentItem);
  if (Strong)
  {
    v31 = (void *)Strong;
    ObjectType = swift_getObjectType(Strong);
    v33 = swift_conformsToProtocol2(ObjectType, &protocol descriptor for CRLTransactable);
    if (v33)
      v34 = v33;
    else
      v34 = 0;
    if (v33)
      v35 = v31;
    else
      v35 = 0;
    if (v35)
    {
      v36 = swift_getObjectType(v35);
      v37 = sub_100D5E2C8(v36, v34);

      if ((v37 & 1) == 0)
        return;
    }
    else
    {

    }
  }
  v90 = OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData;
  v38 = *(_QWORD *)(v103 + OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData);
  if (!v38)
    goto LABEL_53;
  v39 = (uint64_t)v91;
  (*(void (**)(void))(*(_QWORD *)v38 + 760))();
  sub_1004B8460(v39 + *(int *)(v92 + 20), (uint64_t)v29, type metadata accessor for CRLWPStorageCRDTData);
  sub_1004B84A4(v39, type metadata accessor for CRLWPShapeItemCRDTData);
  v40 = v98;
  v41 = v112;
  (*(void (**)(char *, char *, uint64_t))(v98 + 16))(v25, v29, v112);
  sub_1004B84A4((uint64_t)v29, type metadata accessor for CRLWPStorageCRDTData);
  v42 = CRAttributedString.count.getter(v41);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v25, v41);
  if (v42 >= (v105 & ~(v105 >> 63)))
    v43 = v105 & ~(v105 >> 63);
  else
    v43 = v42;
  if (v42 >= (v107 & ~(v107 >> 63)))
    v44 = v107 & ~(v107 >> 63);
  else
    v44 = v42;
  if (v44 < v43)
    goto LABEL_51;
  v45 = (void *)CRAttributedString.attributedString.getter(v41);
  v46 = objc_msgSend(v45, "string");

  v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
  v49 = v48;

  v107 = v43;
  v50 = v43;
  v51 = v103;
  sub_1007D876C(v50, v44, v47, v49, v108 & 1);
  v52 = v49;
  v53 = v102;
  swift_bridgeObjectRelease(v52);
  CRAttributedString.runs.getter(v112);
  v112 = OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemTextPresetOverride;
  v54 = v101;
  CRAttributedString.Runs.next()(v111);
  v106 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v109 + 48);
  v55 = v106(v54, 1, v17);
  v56 = v104;
  if (v55 == 1)
  {
LABEL_21:
    (*(void (**)(char *, uint64_t))(v89 + 8))(v110, v111);
    return;
  }
  v97 = v16;
  v98 = v51 + v112;
  v105 = *(_QWORD *)(v109 + 32);
  v93 = v13;
  v94 = v7;
  ((void (*)(char *, char *, uint64_t))v105)(v104, v54, v17);
  while (1)
  {
    v57 = CRAttributedString.Runs.Run.range.getter(v17);
    if (__OFADD__(v107, v57))
      break;
    v112 = v107 + v57;
    if ((v108 & 1) != 0)
    {
      CRAttributedString.Runs.Run.attributes.getter(v17);
      v58 = CRAttributedString.Runs.Run.range.getter(v17);
      v60 = v59 - v58;
      if (__OFSUB__(v59, v58))
        goto LABEL_46;
      v61 = v112 + v60;
      if (__OFADD__(v112, v60))
        goto LABEL_48;
      if (v61 < v112)
        goto LABEL_50;
      sub_1007DC238((uint64_t)v16, v112, v61);
      (*(void (**)(char *, uint64_t))(v53 + 8))(v16, v7);
      (*(void (**)(char *, uint64_t))(v109 + 8))(v56, v17);
      goto LABEL_24;
    }
    sub_1004C4938(v98, (uint64_t)v118, &qword_1013E1B50);
    sub_1004C4938((uint64_t)v118, (uint64_t)v119, &qword_1013E1B50);
    if (sub_100562DF8((uint64_t)v119) != 1)
    {
      sub_1004C4938((uint64_t)v118, (uint64_t)v117, &qword_1013E1B50);
LABEL_37:
      sub_1006A1C78(v118, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1006A1CF4);
      v70 = v95;
      CRAttributedString.Runs.Run.attributes.getter(v17);
      v71 = v96;
      v7 = v94;
      (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v96, v70, v94);
      KeyPath = swift_getKeyPath(&unk_100F0DCA0);
      v67 = v17;
      v68 = v53;
      v73 = swift_getKeyPath(&unk_100F0DCA0);
      v74 = sub_10073DD28();
      CRAttributedString.Attributes.subscript.getter(&v115, v73, v7, v74, v75);
      swift_release(v73);
      LOBYTE(v115) = v115 & 1;
      CRAttributedString.Attributes.subscript.setter(&v115, KeyPath, v7, v74);
      v76 = swift_getKeyPath(&unk_100F0DB98);
      v77 = swift_getKeyPath(&unk_100F0DB98);
      v78 = sub_1007E6618();
      CRAttributedString.Attributes.subscript.getter(&v115, v77, v7, v78, v79);
      swift_release(v77);
      v113 = v115;
      v114 = v116;
      v80 = v76;
      v66 = v104;
      CRAttributedString.Attributes.subscript.setter(&v113, v80, v7, v78);
      v69 = (uint64_t)v100;
      (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v100, v71, v7);
      sub_1007844D4((uint64_t)v117);
      (*(void (**)(char *, uint64_t))(v68 + 8))(v70, v7);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v68 + 56))(v69, 0, 1, v7);
      v13 = v93;
      goto LABEL_38;
    }
    v62 = *(_QWORD *)(v51 + v90);
    if (!v62)
      goto LABEL_52;
    v63 = (uint64_t)v91;
    (*(void (**)(void))(*(_QWORD *)v62 + 760))();
    swift_retain(v62);
    v64 = sub_1004B804C(&qword_1013F3C70);
    CRRegister.wrappedValue.getter(v64);
    sub_1004C4938((uint64_t)&v113, (uint64_t)&v115, &qword_1013E1B50);
    sub_1004B84A4(v63, type metadata accessor for CRLWPShapeItemCRDTData);
    swift_release(v62);
    sub_1004C4938((uint64_t)&v115, (uint64_t)v117, &qword_1013E1B50);
    if (sub_100562DF8((uint64_t)v117) != 1)
      goto LABEL_37;
    v65 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v53 + 56);
    v66 = v56;
    v67 = v17;
    v68 = v53;
    v69 = (uint64_t)v100;
    v65(v100, 1, 1, v7);
LABEL_38:
    v81 = v109;
    v82 = v99;
    (*(void (**)(char *, char *, uint64_t))(v109 + 16))(v99, v66, v67);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v68 + 48))(v69, 1, v7) == 1)
    {
      CRAttributedString.Runs.Run.attributes.getter(v67);
      v83 = *(void (**)(char *, uint64_t))(v81 + 8);
      v83(v82, v67);
      sub_1004CB800(v69, &qword_1013EC738);
    }
    else
    {
      v83 = *(void (**)(char *, uint64_t))(v81 + 8);
      v83(v82, v67);
      (*(void (**)(char *, uint64_t, uint64_t))(v68 + 32))(v13, v69, v7);
    }
    v16 = v97;
    v17 = v67;
    v84 = v67;
    v51 = v103;
    v56 = v104;
    v85 = CRAttributedString.Runs.Run.range.getter(v84);
    v87 = v86 - v85;
    if (__OFSUB__(v86, v85))
      goto LABEL_47;
    v88 = v112 + v87;
    if (__OFADD__(v112, v87))
      goto LABEL_49;
    if (v88 < v112)
    {
      __break(1u);
      break;
    }
    sub_1007DC238((uint64_t)v13, v112, v88);
    v53 = v102;
    (*(void (**)(char *, uint64_t))(v102 + 8))(v13, v7);
    v83(v56, v17);
    v54 = v101;
LABEL_24:
    CRAttributedString.Runs.next()(v111);
    if (v106(v54, 1, v17) == 1)
      goto LABEL_21;
    ((void (*)(char *, char *, uint64_t))v105)(v56, v54, v17);
  }
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
}

void sub_1007DA508(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t Strong;
  void *v25;
  uint64_t ObjectType;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  char *v38;
  uint64_t v39;
  void *v40;
  void (*v41)(char *, uint64_t);
  id v42;
  uint64_t v43;
  int64_t v44;
  int64_t v45;
  int64_t v46;
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  unsigned int (*v56)(char *, uint64_t, uint64_t);
  void (*v57)(char *, char *, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(char *, uint64_t, uint64_t);
  char *v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(char *, uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93[6];
  _QWORD v94[7];

  v91 = a3;
  v87 = a1;
  v85 = sub_1004B804C(&qword_1013F3D40);
  __chkstk_darwin(v85);
  v6 = (void (**)(char *, uint64_t, uint64_t))((char *)&v74 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v86 = sub_1004B804C((uint64_t *)&unk_1013EFC60);
  __chkstk_darwin(v86);
  v8 = (void (**)(char *, uint64_t, uint64_t))((char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = sub_1004B804C(&qword_1013F3C80);
  v88 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1004B804C(&qword_1013F3C78);
  __chkstk_darwin(v12);
  v14 = (char *)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = sub_1004B804C(&qword_1013F3C90);
  v15 = *(_QWORD *)(v90 - 8);
  __chkstk_darwin(v90);
  v17 = (char *)&v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v89 = (char *)&v74 - v19;
  v84 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v78 = *(void (**)(char *, uint64_t))(v84 - 8);
  __chkstk_darwin(v84);
  v83 = (char *)&v74 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v81);
  v82 = (char *)&v74 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for CRLWPStorageCRDTData(0);
  __chkstk_darwin(v22);
  v80 = (uint64_t)&v74 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = v3;
  Strong = swift_unknownObjectWeakLoadStrong(v3 + OBJC_IVAR____TtC8Freeform12CRLWPStorage__parentItem);
  if (!Strong)
  {
LABEL_12:
    v75 = v17;
    v79 = v15;
    sub_1007DC570(v87, a2);
    v87 = v32;
    v77 = v33;
    v76 = OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData;
    v34 = *(_QWORD *)(v91 + OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData);
    if (!v34)
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    v35 = (uint64_t)v82;
    (*(void (**)(void))(*(_QWORD *)v34 + 760))();
    v36 = v80;
    sub_1004B8460(v35 + *(int *)(v81 + 20), v80, type metadata accessor for CRLWPStorageCRDTData);
    sub_1004B84A4(v35, type metadata accessor for CRLWPShapeItemCRDTData);
    v37 = v78;
    v38 = v83;
    v39 = v84;
    v74 = (void (*)(char *, uint64_t, uint64_t))*((_QWORD *)v78 + 2);
    v74(v83, v36, v84);
    sub_1004B84A4(v36, type metadata accessor for CRLWPStorageCRDTData);
    v40 = (void *)CRAttributedString.attributedString.getter(v39);
    v41 = (void (*)(char *, uint64_t))*((_QWORD *)v37 + 1);
    v41(v38, v39);
    v42 = objc_msgSend(v40, "string");

    v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
    v45 = v44;

    v46 = v87 + v77;
    if (!__OFADD__(v87, v77))
    {
      if (v46 < v87)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v78 = v41;
      sub_1007D876C(v87, v46, v43, v45, 1);
      v47 = swift_bridgeObjectRelease(v45);
      v48 = *(_QWORD *)(v91 + v76);
      if (!v48)
      {
LABEL_37:
        __break(1u);
        return;
      }
      v49 = (uint64_t)v82;
      (*(void (**)(__n128))(*(_QWORD *)v48 + 760))(v47);
      v50 = v80;
      sub_1004B8460(v49 + *(int *)(v81 + 20), v80, type metadata accessor for CRLWPStorageCRDTData);
      sub_1004B84A4(v49, type metadata accessor for CRLWPShapeItemCRDTData);
      v51 = v83;
      v52 = v84;
      v74(v83, v50, v84);
      sub_1004B84A4(v50, type metadata accessor for CRLWPStorageCRDTData);
      v53 = v75;
      CRAttributedString.runs.getter(v52);
      v78(v51, v52);
      v54 = v53;
      v55 = v90;
      (*(void (**)(char *, char *, uint64_t))(v79 + 32))(v89, v54, v90);
      CRAttributedString.Runs.next()(v55);
      v56 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v88 + 48);
      if (v56(v14, 1, v9) == 1)
      {
LABEL_26:
        (*(void (**)(char *, uint64_t))(v79 + 8))(v89, v90);
        return;
      }
      v57 = *(void (**)(char *, char *, uint64_t))(v88 + 32);
      while (1)
      {
        v57(v11, v14, v9);
        v58 = CRAttributedString.Runs.Run.range.getter(v9);
        sub_1007D7CB8(v58, v59, v93);
        sub_1007D1D44(v93, v8);
        v60 = CRAttributedString.Runs.Run.range.getter(v9);
        sub_1007D7CB8(v60, v61, v94);
        sub_1007D2800((uint64_t)v94, v6);
        v62 = CRAttributedString.Runs.Run.range.getter(v9);
        v63 = v87 + v62;
        if (__OFADD__(v87, v62))
          break;
        v64 = *(int *)(v86 + 36);
        v65 = CRAttributedString.Runs.Run.range.getter(v9);
        v67 = v66 - v65;
        if (__OFSUB__(v66, v65))
          goto LABEL_28;
        v68 = v63 + v67;
        if (__OFADD__(v63, v67))
          goto LABEL_29;
        if (v68 < v63)
          goto LABEL_30;
        sub_1007DC238((uint64_t)v8 + v64, v63, v68);
        v69 = *(int *)(v85 + 36);
        v70 = CRAttributedString.Runs.Run.range.getter(v9);
        v72 = v71 - v70;
        if (__OFSUB__(v71, v70))
          goto LABEL_31;
        v73 = v63 + v72;
        if (__OFADD__(v63, v72))
          goto LABEL_32;
        if (v73 < v63)
          goto LABEL_33;
        sub_1007DC238((uint64_t)v6 + v69, v63, v73);
        sub_1004CB800((uint64_t)v6, &qword_1013F3D40);
        sub_1004CB800((uint64_t)v8, (uint64_t *)&unk_1013EFC60);
        (*(void (**)(char *, uint64_t))(v88 + 8))(v11, v9);
        CRAttributedString.Runs.next()(v90);
        if (v56(v14, 1, v9) == 1)
          goto LABEL_26;
      }
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
    }
    __break(1u);
    goto LABEL_35;
  }
  v25 = (void *)Strong;
  v79 = a2;
  ObjectType = swift_getObjectType(Strong);
  v27 = swift_conformsToProtocol2(ObjectType, &protocol descriptor for CRLTransactable);
  if (v27)
    v28 = v27;
  else
    v28 = 0;
  if (v27)
    v29 = v25;
  else
    v29 = 0;
  if (!v29)
  {

    a2 = v79;
    goto LABEL_12;
  }
  v30 = swift_getObjectType(v29);
  v31 = sub_100D5E2C8(v30, v28);

  a2 = v79;
  if ((v31 & 1) != 0)
    goto LABEL_12;
}

uint64_t sub_1007DACE0(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  uint64_t result;
  char v18;
  uint64_t v19;
  uint64_t v20;

  v3 = v2;
  v6 = type metadata accessor for CharacterSet(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1004B804C((uint64_t *)&unk_1013F3E60);
  __chkstk_darwin(v10);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
LABEL_12:
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v12, 1, 1, v6);
    goto LABEL_13;
  }
  if (a2 != a1)
    return 0;
  if (a2 < 1)
  {
LABEL_8:
    objc_msgSend(v3, "textRangeForParagraphAtCharIndex:", a2);
    return v19 == 0;
  }
  v13 = objc_msgSend(v3, "characterAtIndex:", objc_msgSend(v3, "previousCharacterIndex:", a2));
  if (((unsigned __int16)v13 & 0xF800) == 0xD800)
    return 0;
  v14 = v13;
  v15 = sub_1001AE0B0();
  if (!v15)
    goto LABEL_12;
  v16 = v15;
  static CharacterSet._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v12, v9, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v12, 0, 1, v6);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6);
  if ((_DWORD)result == 1)
  {
LABEL_13:
    __break(1u);
    return result;
  }
  v18 = CharacterSet.contains(_:)(v14);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  if ((v18 & 1) != 0)
    goto LABEL_8;
  return 0;
}

char *sub_1007DAEB0(char *result, char *a2)
{
  void *v2;
  uint64_t v4;
  _BOOL4 v6;

  if (__OFSUB__(a2, result))
  {
    __break(1u);
    goto LABEL_21;
  }
  if (a2 != result)
    return result;
  if ((uint64_t)objc_msgSend(v2, "characterCount") < 1)
    return a2;
  v6 = objc_msgSend(v2, "textRangeForParagraphAtCharIndex:", a2) != a2 || v4 == 0;
  if (!a2 || !v6)
  {
    result = a2;
    goto LABEL_17;
  }
  result = a2 - 1;
  if (__OFSUB__(a2, 1))
  {
    __break(1u);
    return a2;
  }
LABEL_17:
  if (__OFADD__(result, 1))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if ((uint64_t)(result + 1) < (uint64_t)result)
LABEL_22:
    __break(1u);
  return result;
}

void sub_1007DAF50()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t Strong;
  void *v14;
  uint64_t ObjectType;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  void (*v31)(_BYTE *, _QWORD);
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _BYTE v40[32];

  v1 = v0;
  v2 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for CRLWPStorageCRDTData(0);
  __chkstk_darwin(v38);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
  v36 = *(_QWORD *)(v11 - 8);
  v37 = v11;
  __chkstk_darwin(v11);
  v39 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  Strong = swift_unknownObjectWeakLoadStrong(&v0[OBJC_IVAR____TtC8Freeform12CRLWPStorage__parentItem]);
  if (Strong)
  {
    v14 = (void *)Strong;
    ObjectType = swift_getObjectType(Strong);
    v16 = swift_conformsToProtocol2(ObjectType, &protocol descriptor for CRLTransactable);
    if (v16)
      v17 = v16;
    else
      v17 = 0;
    if (v16)
      v18 = v14;
    else
      v18 = 0;
    if (v18)
    {
      v19 = swift_getObjectType(v18);
      v20 = sub_100D5E2C8(v19, v17);

      if ((v20 & 1) == 0)
        return;
    }
    else
    {

    }
  }
  if ((uint64_t)objc_msgSend(v1, "characterCount") >= 1)
  {
    v21 = OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData;
    v22 = *(_QWORD *)&v1[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData];
    if (v22)
    {
      (*(void (**)(void))(*(_QWORD *)v22 + 760))();
      sub_1004B8460((uint64_t)&v8[*(int *)(v6 + 20)], (uint64_t)v10, type metadata accessor for CRLWPStorageCRDTData);
      sub_1004B84A4((uint64_t)v8, type metadata accessor for CRLWPShapeItemCRDTData);
      v23 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
      v23(v5, v10, v2);
      sub_1004B84A4((uint64_t)v10, type metadata accessor for CRLWPStorageCRDTData);
      CRAttributedString.attributes(at:effectiveRange:)(0, 0, v2);
      v24 = *(uint64_t (**)(char *, uint64_t))(v3 + 8);
      v25 = v24(v5, v2);
      v35 = v21;
      v26 = *(_QWORD *)&v1[v21];
      if (v26)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 760))(v25);
        sub_1004B8460((uint64_t)&v8[*(int *)(v6 + 20)], (uint64_t)v10, type metadata accessor for CRLWPStorageCRDTData);
        sub_1004B84A4((uint64_t)v8, type metadata accessor for CRLWPShapeItemCRDTData);
        v23(v5, &v10[*(int *)(v38 + 20)], v2);
        sub_1004B84A4((uint64_t)v10, type metadata accessor for CRLWPStorageCRDTData);
        v27 = CRAttributedString.count.getter(v2);
        v28 = v24(v5, v2);
        v29 = *(_QWORD *)&v1[v35];
        if (v29)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 760))(v28);
          sub_1004B8460((uint64_t)&v8[*(int *)(v6 + 20)], (uint64_t)v10, type metadata accessor for CRLWPStorageCRDTData);
          swift_retain(v29);
          sub_1004B84A4((uint64_t)v8, type metadata accessor for CRLWPShapeItemCRDTData);
          v30 = v39;
          CRAttributedString.addAttributes(_:range:)(v39, 0, v27, v2);
          v31 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v29 + 776))(v40);
          sub_1007EC8EC((uint64_t)v10, v32 + *(int *)(v6 + 20));
          v31(v40, 0);
          sub_1004B84A4((uint64_t)v10, type metadata accessor for CRLWPStorageCRDTData);
          v33 = swift_release(v29);
          (*(void (**)(char *, uint64_t, __n128))(v36 + 8))(v30, v37, v33);
          return;
        }
LABEL_20:
        __break(1u);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_20;
  }
}

id sub_1007DB2EC(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id result;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  unint64_t v20;
  uint64_t KeyPath;
  uint64_t v22;
  unint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;

  v50 = a1;
  v2 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
  v52 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CRLWPStorageCRDTData(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v11 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = objc_msgSend(v1, "characterCount");
  v15 = *(_QWORD *)&v1[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData];
  if (result)
  {
    if (v15)
    {
      (*(void (**)(void))(*(_QWORD *)v15 + 760))();
      sub_1004B8460((uint64_t)&v7[*(int *)(v5 + 20)], (uint64_t)v10, type metadata accessor for CRLWPStorageCRDTData);
      sub_1004B84A4((uint64_t)v7, type metadata accessor for CRLWPShapeItemCRDTData);
      v16 = v10;
LABEL_6:
      v17 = v50;
      v49 = v11;
      v18 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
      v19 = v51;
      v18(v13, v16, v51);
      sub_1004B84A4((uint64_t)v10, type metadata accessor for CRLWPStorageCRDTData);
      CRAttributedString.attributes(at:effectiveRange:)(v17, 0, v19);
      v20 = sub_100559A64();
      CRAttributedString.Attributes.init()(&type metadata for CRLTextAttributeScope, v20);
      KeyPath = swift_getKeyPath(&unk_100F0DD50);
      v22 = swift_getKeyPath(&unk_100F0DD50);
      v23 = sub_10073DCA0();
      CRAttributedString.Attributes.subscript.getter(&v60, v22, v2, v23, v24);
      swift_release(v22);
      *(_QWORD *)&v53 = v60;
      BYTE8(v53) = BYTE8(v60);
      CRAttributedString.Attributes.subscript.setter(&v53, KeyPath, v2, v23);
      v25 = swift_getKeyPath(&unk_100F0DCF8);
      v26 = swift_getKeyPath(&unk_100F0DCF8);
      v27 = sub_10073DC5C();
      CRAttributedString.Attributes.subscript.getter(&v60, v26, v2, v27, v28);
      swift_release(v26);
      *(_QWORD *)&v53 = v60;
      BYTE8(v53) = BYTE8(v60);
      CRAttributedString.Attributes.subscript.setter(&v53, v25, v2, v27);
      v29 = swift_getKeyPath(&unk_100F0DBF0);
      v30 = swift_getKeyPath(&unk_100F0DBF0);
      v31 = sub_1007395C4();
      CRAttributedString.Attributes.subscript.getter(&v60, v30, v2, v31, v32);
      swift_release(v30);
      LODWORD(v53) = v60;
      BYTE4(v53) = BYTE4(v60);
      CRAttributedString.Attributes.subscript.setter(&v53, v29, v2, v31);
      v33 = swift_getKeyPath(&unk_100F0DB98);
      v34 = swift_getKeyPath(&unk_100F0DB98);
      v35 = sub_1007E6618();
      CRAttributedString.Attributes.subscript.getter(&v60, v34, v2, v35, v36);
      swift_release(v34);
      v53 = v60;
      LOBYTE(v54) = v61;
      CRAttributedString.Attributes.subscript.setter(&v53, v33, v2, v35);
      v37 = swift_getKeyPath(&unk_100F0DB40);
      v38 = swift_getKeyPath(&unk_100F0DB40);
      v39 = sub_1007E678C();
      CRAttributedString.Attributes.subscript.getter(&v60, v38, v2, v39, v40);
      swift_release(v38);
      v53 = v60;
      v54 = v61;
      v55 = v62;
      v56 = v63;
      v57 = v64;
      v58 = v65;
      v59 = v66;
      CRAttributedString.Attributes.subscript.setter(&v53, v37, v2, v39);
      v41 = swift_getKeyPath(&unk_100F0DCA0);
      v42 = swift_getKeyPath(&unk_100F0DCA0);
      v43 = sub_10073DD28();
      CRAttributedString.Attributes.subscript.getter(&v60, v42, v2, v43, v44);
      swift_release(v42);
      LOBYTE(v53) = v60;
      CRAttributedString.Attributes.subscript.setter(&v53, v41, v2, v43);
      v45 = swift_getKeyPath(&unk_100F0DC48);
      v46 = swift_getKeyPath(&unk_100F0DC48);
      v47 = sub_10073DCE4();
      CRAttributedString.Attributes.subscript.getter(&v60, v46, v2, v47, v48);
      swift_release(v46);
      LOBYTE(v53) = v60;
      CRAttributedString.Attributes.subscript.setter(&v53, v45, v2, v47);
      (*(void (**)(char *, uint64_t))(v52 + 8))(v4, v2);
      return (id)(*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v13, v19);
    }
    __break(1u);
  }
  else if (v15)
  {
    (*(void (**)(void))(*(_QWORD *)v15 + 760))();
    sub_1004B8460((uint64_t)&v7[*(int *)(v5 + 20)], (uint64_t)v10, type metadata accessor for CRLWPStorageCRDTData);
    sub_1004B84A4((uint64_t)v7, type metadata accessor for CRLWPShapeItemCRDTData);
    v16 = &v10[*(int *)(v8 + 20)];
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

id sub_1007DB8CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id result;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t KeyPath;
  uint64_t v22;
  unint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;

  v38 = a1;
  v39 = a2;
  v3 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
  v40 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CRLWPStorageCRDTData(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = objc_msgSend(v2, "characterCount");
  v17 = *(_QWORD *)&v2[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData];
  if (result)
  {
    if (v17)
    {
      (*(void (**)(void))(*(_QWORD *)v17 + 760))();
      sub_1004B8460((uint64_t)&v8[*(int *)(v6 + 20)], (uint64_t)v11, type metadata accessor for CRLWPStorageCRDTData);
      sub_1004B84A4((uint64_t)v8, type metadata accessor for CRLWPShapeItemCRDTData);
      v18 = v11;
LABEL_6:
      v19 = v38;
      v37 = v13;
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v15, v18, v12);
      sub_1004B84A4((uint64_t)v11, type metadata accessor for CRLWPStorageCRDTData);
      CRAttributedString.attributes(at:effectiveRange:)(v19, 0, v12);
      v20 = sub_100559A64();
      CRAttributedString.Attributes.init()(&type metadata for CRLTextAttributeScope, v20);
      KeyPath = swift_getKeyPath(&unk_100F0DE08);
      v22 = swift_getKeyPath(&unk_100F0DE08);
      v23 = sub_1007392B8();
      CRAttributedString.Attributes.subscript.getter(&v43, v22, v3, v23, v24);
      swift_release(v22);
      v41 = v43;
      v42 = v44;
      CRAttributedString.Attributes.subscript.setter(&v41, KeyPath, v3, v23);
      v25 = swift_getKeyPath(&unk_100F0DE48);
      v26 = swift_getKeyPath(&unk_100F0DE48);
      v27 = sub_1007370A8();
      CRAttributedString.Attributes.subscript.getter(&v43, v26, v3, v27, v28);
      swift_release(v26);
      v41 = v43;
      v42 = v44;
      CRAttributedString.Attributes.subscript.setter(&v41, v25, v3, v27);
      v29 = swift_getKeyPath(&unk_100F0DAE8);
      v30 = swift_getKeyPath(&unk_100F0DAE8);
      v31 = sub_10073D7B8();
      CRAttributedString.Attributes.subscript.getter(&v43, v30, v3, v31, v32);
      swift_release(v30);
      v41 = v43;
      v42 = v44;
      CRAttributedString.Attributes.subscript.setter(&v41, v29, v3, v31);
      v33 = swift_getKeyPath(&unk_100F0DA58);
      v34 = swift_getKeyPath(&unk_100F0DA58);
      v35 = sub_10073D704();
      CRAttributedString.Attributes.subscript.getter(&v43, v34, v3, v35, v36);
      swift_release(v34);
      v41 = v43;
      v42 = v44;
      CRAttributedString.Attributes.subscript.setter(&v41, v33, v3, v35);
      (*(void (**)(char *, uint64_t))(v40 + 8))(v5, v3);
      return (id)(*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v15, v12);
    }
    __break(1u);
  }
  else if (v17)
  {
    (*(void (**)(void))(*(_QWORD *)v17 + 760))();
    sub_1004B8460((uint64_t)&v8[*(int *)(v6 + 20)], (uint64_t)v11, type metadata accessor for CRLWPStorageCRDTData);
    sub_1004B84A4((uint64_t)v8, type metadata accessor for CRLWPShapeItemCRDTData);
    v18 = &v11[*(int *)(v9 + 20)];
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

void sub_1007DBCFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  char *v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t Strong;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t ObjectType;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(_BYTE *, _QWORD);
  uint64_t v39;
  double v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(_BYTE *, _QWORD);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE v55[32];

  v5 = v4;
  v51 = a2;
  v52 = a1;
  v8 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v53 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for CRLWPStorageCRDTData(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  Strong = swift_unknownObjectWeakLoadStrong(&v4[OBJC_IVAR____TtC8Freeform12CRLWPStorage__parentItem]);
  v54 = a4;
  if (!Strong)
  {
LABEL_10:
    if (a3 == a4)
      return;
    goto LABEL_13;
  }
  v18 = (void *)Strong;
  v19 = v11;
  v20 = v8;
  v21 = v4;
  v22 = a3;
  ObjectType = swift_getObjectType(Strong);
  v24 = swift_conformsToProtocol2(ObjectType, &protocol descriptor for CRLTransactable);
  if (v24)
    v25 = v24;
  else
    v25 = 0;
  if (v24)
    v26 = v18;
  else
    v26 = 0;
  if (v26)
  {
    v27 = swift_getObjectType(v26);
    v28 = sub_100D5E2C8(v27, v25);

    a3 = v22;
    v5 = v21;
    v8 = v20;
    v11 = v19;
    a4 = v54;
    if ((v28 & 1) == 0)
      return;
    goto LABEL_10;
  }

  a3 = v22;
  v5 = v21;
  v8 = v20;
  v11 = v19;
  a4 = v54;
  if (a3 == v54)
    return;
LABEL_13:
  v50 = OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData;
  v29 = *(_QWORD *)&v5[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData];
  if (!v29)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  (*(void (**)(void))(*(_QWORD *)v29 + 760))();
  sub_1004B8460((uint64_t)&v13[*(int *)(v11 + 20)], (uint64_t)v16, type metadata accessor for CRLWPStorageCRDTData);
  sub_1004B84A4((uint64_t)v13, type metadata accessor for CRLWPShapeItemCRDTData);
  v30 = v53;
  (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v10, v16, v8);
  sub_1004B84A4((uint64_t)v16, type metadata accessor for CRLWPStorageCRDTData);
  v31 = CRAttributedString.count.getter(v8);
  v32 = (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v10, v8);
  if (v31 >= (a3 & ~(a3 >> 63)))
    v33 = a3 & ~(a3 >> 63);
  else
    v33 = v31;
  v34 = a4 & ~(a4 >> 63);
  if (v34 >= v31)
    v34 = v31;
  if (v34 < v33)
  {
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v35 = *(_QWORD *)&v5[v50];
  if (!v35)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v36 = a3;
  v37 = v34 - v33;
  if (__OFSUB__(v34, v33))
    goto LABEL_30;
  (*(void (**)(uint64_t))(*(_QWORD *)v35 + 760))(v32);
  sub_1004B8460((uint64_t)&v13[*(int *)(v11 + 20)], (uint64_t)v16, type metadata accessor for CRLWPStorageCRDTData);
  swift_retain(v35);
  sub_1004B84A4((uint64_t)v13, type metadata accessor for CRLWPShapeItemCRDTData);
  CRAttributedString.addAttributes(_:range:)(v52, v33, v37, v8);
  v38 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v35 + 776))(v55);
  sub_1007EC8EC((uint64_t)v16, v39 + *(int *)(v11 + 20));
  v38(v55, 0);
  sub_1004B84A4((uint64_t)v16, type metadata accessor for CRLWPStorageCRDTData);
  *(_QWORD *)&v40 = swift_release(v35).n128_u64[0];
  if (__OFSUB__(v54, v36))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v41 = (char *)objc_msgSend(v5, "textRangeForParagraphsInCharRange:", v36, v54 - v36, v40);
  v43 = &v41[v42];
  if (__OFADD__(v41, v42))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v44 = v41;
  if ((uint64_t)v43 < (uint64_t)v41)
  {
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v45 = *(_QWORD *)&v5[v50];
  if (!v45)
  {
LABEL_37:
    __break(1u);
    return;
  }
  v46 = v42;
  if (__OFSUB__(v43, v41))
    goto LABEL_34;
  (*(void (**)(void))(*(_QWORD *)v45 + 760))();
  sub_1004B8460((uint64_t)&v13[*(int *)(v11 + 20)], (uint64_t)v16, type metadata accessor for CRLWPStorageCRDTData);
  swift_retain(v45);
  sub_1004B84A4((uint64_t)v13, type metadata accessor for CRLWPShapeItemCRDTData);
  CRAttributedString.addAttributes(_:range:)(v51, v44, v46, v8);
  v47 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v45 + 776))(v55);
  sub_1007EC8EC((uint64_t)v16, v48 + *(int *)(v11 + 20));
  v47(v55, 0);
  sub_1004B84A4((uint64_t)v16, type metadata accessor for CRLWPStorageCRDTData);
  swift_release(v45);
}

void sub_1007DC12C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t Strong;
  void *v13;
  uint64_t ObjectType;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = v5;
  Strong = swift_unknownObjectWeakLoadStrong(v5 + OBJC_IVAR____TtC8Freeform12CRLWPStorage__parentItem);
  if (!Strong)
    goto LABEL_12;
  v13 = (void *)Strong;
  ObjectType = swift_getObjectType(Strong);
  v15 = swift_conformsToProtocol2(ObjectType, &protocol descriptor for CRLTransactable);
  if (v15)
    v16 = v15;
  else
    v16 = 0;
  if (v15)
    v17 = v13;
  else
    v17 = 0;
  if (!v17)
  {

    goto LABEL_12;
  }
  v18 = swift_getObjectType(v17);
  v19 = sub_100D5E2C8(v18, v16);

  if ((v19 & 1) != 0)
  {
LABEL_12:
    v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 8))(a2, a3, v6, a4, a5);
    v22 = v21;
    v24 = type metadata accessor for CRLWPAttributeDictionary(0, a4, a5, v23);
    sub_1007DC238(a1 + *(int *)(v24 + 36), v20, v22);
    *(_BYTE *)(v6 + OBJC_IVAR____TtC8Freeform12CRLWPStorage__hasValidPresentationProperties) = 0;
  }
}

void sub_1007DC238(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  void (*v20)(_BYTE *, _QWORD);
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(_BYTE *, _QWORD);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE v38[32];

  v37 = a1;
  v6 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CRLWPStorageCRDTData(0);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = v3;
  v17 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData);
  if (!v17)
    goto LABEL_10;
  v32 = a3;
  v18 = __OFSUB__(a3, a2);
  v19 = a3 - a2;
  if (v18)
  {
    __break(1u);
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v34 = v14;
  v35 = OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData;
  v33 = v9;
  (*(void (**)(void))(*(_QWORD *)v17 + 760))();
  sub_1004B8460((uint64_t)&v12[*(int *)(v10 + 20)], (uint64_t)v16, type metadata accessor for CRLWPStorageCRDTData);
  swift_retain(v17);
  sub_1004B84A4((uint64_t)v12, type metadata accessor for CRLWPShapeItemCRDTData);
  CRAttributedString.addAttributes(_:range:)(v37, a2, v19, v6);
  v20 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v17 + 776))(v38);
  sub_1007EC8EC((uint64_t)v16, v21 + *(int *)(v10 + 20));
  v20(v38, 0);
  sub_1004B84A4((uint64_t)v16, type metadata accessor for CRLWPStorageCRDTData);
  v22 = swift_release(v17);
  v23 = v36;
  if (a2 && (sub_1007DACE0(a2, v32) & 1) == 0)
    goto LABEL_8;
  v24 = v35;
  v25 = *(_QWORD *)(v23 + v35);
  if (!v25)
    goto LABEL_11;
  (*(void (**)(__n128))(*(_QWORD *)v25 + 760))(v22);
  sub_1004B8460((uint64_t)&v12[*(int *)(v10 + 20)], (uint64_t)v16, type metadata accessor for CRLWPStorageCRDTData);
  sub_1004B84A4((uint64_t)v12, type metadata accessor for CRLWPShapeItemCRDTData);
  v26 = v33;
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v33, &v16[*(int *)(v34 + 20)], v6);
  sub_1004B84A4((uint64_t)v16, type metadata accessor for CRLWPStorageCRDTData);
  v27 = CRAttributedString.count.getter(v6);
  v28 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v26, v6);
  v29 = *(_QWORD *)(v23 + v24);
  if (v29)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 760))(v28);
    sub_1004B8460((uint64_t)&v12[*(int *)(v10 + 20)], (uint64_t)v16, type metadata accessor for CRLWPStorageCRDTData);
    swift_retain(v29);
    sub_1004B84A4((uint64_t)v12, type metadata accessor for CRLWPShapeItemCRDTData);
    CRAttributedString.addAttributes(_:range:)(v37, 0, v27, v6);
    v30 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v29 + 776))(v38);
    sub_1007EC8EC((uint64_t)v16, v31 + *(int *)(v10 + 20));
    v30(v38, 0);
    sub_1004B84A4((uint64_t)v16, type metadata accessor for CRLWPStorageCRDTData);
    swift_release(v29);
LABEL_8:
    *(_BYTE *)(v23 + OBJC_IVAR____TtC8Freeform12CRLWPStorage__hasValidPresentationProperties) = 0;
    return;
  }
LABEL_12:
  __break(1u);
}

void sub_1007DC570(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CRLWPStorageCRDTData(0);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData);
  if (!v16)
    goto LABEL_11;
  (*(void (**)(__n128))(*(_QWORD *)v16 + 760))(v13);
  sub_1004B8460((uint64_t)&v11[*(int *)(v9 + 20)], (uint64_t)v15, type metadata accessor for CRLWPStorageCRDTData);
  sub_1004B84A4((uint64_t)v11, type metadata accessor for CRLWPShapeItemCRDTData);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v15, v5);
  sub_1004B84A4((uint64_t)v15, type metadata accessor for CRLWPStorageCRDTData);
  v17 = CRAttributedString.count.getter(v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if (v17 >= (a1 & ~(a1 >> 63)))
    v18 = a1 & ~(a1 >> 63);
  else
    v18 = v17;
  if (__OFADD__(a1, a2))
  {
    __break(1u);
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    return;
  }
  if (v17 < a1 + a2 && __OFSUB__(v17, v18))
    goto LABEL_10;
}

uint64_t sub_1007DC71C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t KeyPath;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v52 = a1;
  v53 = a2;
  v3 = sub_1004B804C((uint64_t *)&unk_1013E87D0);
  __chkstk_darwin(v3);
  v5 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for CRLWPHyperlinkSmartFieldData(0);
  v57 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v56 = (uint64_t)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1004B804C(&qword_1013F3C80);
  v60 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1004B804C(&qword_1013F3C78);
  __chkstk_darwin(v10);
  v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v55 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58);
  v54 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for CRLWPStorageCRDTData(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = sub_1004B804C(&qword_1013F3C90);
  v50 = *(_QWORD *)(v61 - 8);
  v20 = __chkstk_darwin(v61);
  v49 = (char *)&v48 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v20);
  v24 = (char *)&v48 - v23;
  v25 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData);
  if (!v25)
    goto LABEL_38;
  v59 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v25 + 760))(result);
  sub_1004B8460((uint64_t)&v16[*(int *)(v14 + 20)], (uint64_t)v19, type metadata accessor for CRLWPStorageCRDTData);
  sub_1004B84A4((uint64_t)v16, type metadata accessor for CRLWPShapeItemCRDTData);
  v26 = v54;
  v27 = v55;
  v28 = v58;
  (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v54, v19, v58);
  sub_1004B84A4((uint64_t)v19, type metadata accessor for CRLWPStorageCRDTData);
  v29 = v49;
  CRAttributedString.runs.getter(v28);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v26, v28);
  v30 = v61;
  (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v24, v29, v61);
  v58 = (uint64_t)v24;
  CRAttributedString.Runs.next()(v30);
  v31 = v60;
  v55 = *(_QWORD *)(v60 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v55)(v12, 1, v7) == 1)
  {
    v32 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_33:
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v58, v61);
    return v32;
  }
  v54 = *(char **)(v31 + 32);
  v33 = v59;
  v32 = 0x7FFFFFFFFFFFFFFFLL;
  v34 = v51;
  ((void (*)(char *, char *, uint64_t))v54)(v9, v12, v7);
  while (1)
  {
    KeyPath = swift_getKeyPath(&unk_100F0DDE8);
    v38 = sub_1007E6AC0();
    CRAttributedString.Runs.Run.subscript.getter(KeyPath, v7, v38);
    v39 = swift_release(KeyPath);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v57 + 48))(v5, 1, v34, v39) == 1)
    {
      sub_1004CB800((uint64_t)v5, (uint64_t *)&unk_1013E87D0);
LABEL_11:
      v36 = v61;
      if (v32 != 0x7FFFFFFFFFFFFFFFLL)
      {
        (*(void (**)(char *, uint64_t))(v60 + 8))(v9, v7);
        goto LABEL_33;
      }
      (*(void (**)(char *, uint64_t))(v60 + 8))(v9, v7);
      v32 = 0x7FFFFFFFFFFFFFFFLL;
      v40 = v59;
      if (v33 != v59)
      {
        v32 = 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_33;
      }
      goto LABEL_7;
    }
    v41 = v56;
    sub_1007EC108((uint64_t)v5, v56);
    v42 = (_QWORD *)(v41 + *(int *)(v34 + 24));
    v43 = v42[1];
    v44 = *v42 == v52 && v43 == v53;
    if (!v44 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v42, v43, v52, v53, 0) & 1) == 0)
    {
      sub_1004B84A4(v56, type metadata accessor for CRLWPHyperlinkSmartFieldData);
      goto LABEL_11;
    }
    v45 = CRAttributedString.Runs.Run.range.getter(v7);
    result = CRAttributedString.Runs.Run.range.getter(v7);
    v40 = v46 - result;
    if (__OFSUB__(v46, result))
      break;
    if (v32 == 0x7FFFFFFFFFFFFFFFLL && v33 == v59)
    {
      v32 = v45;
      v35 = v60;
    }
    else
    {
      v47 = v45 + v40;
      v35 = v60;
      if (__OFADD__(v45, v40))
        goto LABEL_35;
      if (__OFADD__(v32, v33))
        goto LABEL_36;
      if (v47 <= v32 + v33)
        v47 = v32 + v33;
      if (v45 < v32)
        v32 = v45;
      v40 = v47 - v32;
      if (__OFSUB__(v47, v32))
        goto LABEL_37;
    }
    sub_1004B84A4(v56, type metadata accessor for CRLWPHyperlinkSmartFieldData);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v9, v7);
    v34 = v51;
    v36 = v61;
LABEL_7:
    CRAttributedString.Runs.next()(v36);
    v33 = v40;
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v55)(v12, 1, v7) == 1)
      goto LABEL_33;
    ((void (*)(char *, char *, uint64_t))v54)(v9, v12, v7);
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_1007DCC90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t);
  uint64_t v11;

  v0 = type metadata accessor for CharacterSet(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v2);
  v7 = (char *)&v11 - v6;
  sub_100501DE0(v5, qword_10147F678);
  v8 = sub_1004F2A1C(v0, (uint64_t)qword_10147F678);
  static CharacterSet.whitespacesAndNewlines.getter(v8);
  CharacterSet.init(charactersIn:)(0x5C5D5B2928272221, 0xEB000000003E7D7BLL);
  CharacterSet.union(_:)(v4);
  v9 = *(void (**)(char *, uint64_t))(v1 + 8);
  v9(v4, v0);
  return ((uint64_t (*)(char *, uint64_t))v9)(v7, v0);
}

id sub_1007DCDB0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CRLWPStorage();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CRLWPStorage()
{
  return objc_opt_self(_TtC8Freeform12CRLWPStorage);
}

void sub_1007DCF40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(_BYTE *, _QWORD);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[32];

  v1 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CRLWPStorageCRDTData(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v20 - v13;
  v21 = v0;
  v15 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData);
  if (v15)
  {
    (*(void (**)(__n128))(*(_QWORD *)v15 + 760))(v12);
    sub_1004B8460((uint64_t)&v3[*(int *)(v1 + 20)], (uint64_t)v6, type metadata accessor for CRLWPStorageCRDTData);
    swift_retain(v15);
    sub_1004B84A4((uint64_t)v3, type metadata accessor for CRLWPShapeItemCRDTData);
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, &v6[*(int *)(v4 + 20)], v7);
    sub_1004B84A4((uint64_t)v6, type metadata accessor for CRLWPStorageCRDTData);
    CRAttributedString.copy(renamingReferences:)(0, v7);
    v16 = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 760))(v16);
    sub_1004B8460((uint64_t)&v3[*(int *)(v1 + 20)], (uint64_t)v6, type metadata accessor for CRLWPStorageCRDTData);
    sub_1004B84A4((uint64_t)v3, type metadata accessor for CRLWPShapeItemCRDTData);
    (*(void (**)(char *, char *, uint64_t))(v8 + 40))(v6, v14, v7);
    v17 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v15 + 776))(v22);
    sub_1007EC8EC((uint64_t)v6, v18 + *(int *)(v1 + 20));
    v17(v22, 0);
    sub_1004B84A4((uint64_t)v6, type metadata accessor for CRLWPStorageCRDTData);
    swift_release(v15);
    v19 = v21;
    *(_BYTE *)(v21 + OBJC_IVAR____TtC8Freeform12CRLWPStorage__hasValidRanges) = 0;
    *(_BYTE *)(v19 + OBJC_IVAR____TtC8Freeform12CRLWPStorage__hasValidPresentationProperties) = 0;
  }
  else
  {
    __break(1u);
  }
}

void sub_1007DD1D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;

  v1 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CRLWPStorageCRDTData(0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData);
  if (v12)
  {
    (*(void (**)(__n128))(*(_QWORD *)v12 + 760))(v9);
    sub_1004B8460((uint64_t)&v7[*(int *)(v5 + 20)], (uint64_t)v11, type metadata accessor for CRLWPStorageCRDTData);
    sub_1004B84A4((uint64_t)v7, type metadata accessor for CRLWPShapeItemCRDTData);
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v4, v11, v1);
    sub_1004B84A4((uint64_t)v11, type metadata accessor for CRLWPStorageCRDTData);
    v13 = (void *)CRAttributedString.attributedString.getter(v1);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    objc_msgSend(v13, "length");

  }
  else
  {
    __break(1u);
  }
}

char *sub_1007DD3B0(_QWORD *a1, uint64_t a2, char *a3)
{
  void *v3;
  void *v4;
  char *result;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  void **v20;
  char *v21;
  char *v22;
  BOOL v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void *v27;
  id v28;

  v4 = v3;
  result = (char *)objc_msgSend(v4, "characterCount");
  v9 = *(_QWORD *)(a2 + 16);
  if (v9)
  {
    v10 = 0;
    v11 = a2 + 32;
    v12 = *(_QWORD *)(a2 + 16);
    do
    {
      while (1)
      {
        if (__OFSUB__(v12, v10))
        {
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          goto LABEL_46;
        }
        v15 = v10 + (uint64_t)(v12 - v10) / 2;
        if (__OFADD__(v10, (uint64_t)(v12 - v10) / 2))
          goto LABEL_44;
        if (v15 >= v9)
          goto LABEL_45;
        v16 = (uint64_t *)(v11 + 24 * v15);
        v18 = *v16;
        v17 = v16[1];
        if (v18 < (uint64_t)a3 && v17 <= (uint64_t)a3)
          break;
        v12 = v10 + (uint64_t)(v12 - v10) / 2;
        if (v10 == v15)
          goto LABEL_21;
      }
      if (v17 < (uint64_t)a3 || (uint64_t)result > (uint64_t)a3)
        v10 = v15 + 1;
      else
        v12 = v10 + (uint64_t)(v12 - v10) / 2;
    }
    while (v10 != v12);
LABEL_21:
    if (v12 >= v9)
    {
      v21 = *(char **)(v11 + 24 * v9 - 16);
      goto LABEL_35;
    }
    v20 = (void **)(v11 + 24 * v12);
    v21 = (char *)*v20;
    v22 = (char *)v20[1];
    if (*v20 == a3
      || result == a3 && v22 == a3
      || ((uint64_t)v21 <= (uint64_t)a3 ? (v23 = (uint64_t)v22 <= (uint64_t)a3) : (v23 = 1), !v23))
    {
      v27 = *(void **)(v11 + 24 * v12 + 16);
      v28 = v27;
      goto LABEL_39;
    }
    if (v12)
    {
      v24 = v12 - 1;
      if (v24 >= v9)
        goto LABEL_49;
      v25 = *(char **)(v11 + 24 * v24 + 8);
    }
    else
    {
      v25 = 0;
    }
    if ((uint64_t)v21 >= (uint64_t)v25)
    {
      v27 = 0;
      v21 = v25;
      goto LABEL_39;
    }
    goto LABEL_48;
  }
  v21 = 0;
LABEL_35:
  result = (char *)objc_msgSend(v4, "range");
  if (__OFADD__(result, v26))
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  if ((uint64_t)&result[v26] < (uint64_t)v21)
  {
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
    return result;
  }
  v27 = 0;
LABEL_39:
  *a1 = v27;
  return v21;
}

void sub_1007DD5D4(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  char *v3;
  char *v4;
  char *KeyPath;
  uint64_t v6;
  char v7;
  id v8[6];

  v1 = a1 + 1;
  if (__OFADD__(a1, 1))
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v1 < a1)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  sub_1007D7CB8(a1, v1, v8);
  v2 = (char *)v8[4];
  v3 = (char *)v8[5];
  v4 = (char *)v8[3];

  KeyPath = (char *)swift_getKeyPath(&unk_100F0DA58);
  v6 = sub_100DC42D4(KeyPath, v4, v2, v3);
  LOBYTE(v3) = v7;
  swift_release(KeyPath);

  if ((v3 & 1) == 0)
    return;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_9:
    __break(1u);
    return;
  }
  sub_10062E238(v6, 1);
}

void sub_1007DD818(uint64_t a1, int a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(_BYTE *, _BYTE *, uint64_t);
  void *v17;
  void (*v18)(_BYTE *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  char *v34;
  _BYTE v35[12];
  int v36;
  char *v37;
  uint64_t v38;

  v36 = a2;
  v38 = a1;
  v3 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v35[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v7);
  v9 = &v35[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for CRLWPStorageCRDTData(0);
  v11 = __chkstk_darwin(v10);
  v13 = &v35[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData;
  v37 = v2;
  v15 = *(_QWORD *)&v2[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData];
  if (!v15)
    goto LABEL_24;
  (*(void (**)(__n128))(*(_QWORD *)v15 + 760))(v11);
  sub_1004B8460((uint64_t)&v9[*(int *)(v7 + 20)], (uint64_t)v13, type metadata accessor for CRLWPStorageCRDTData);
  sub_1004B84A4((uint64_t)v9, type metadata accessor for CRLWPShapeItemCRDTData);
  v16 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v4 + 16);
  v16(v6, v13, v3);
  sub_1004B84A4((uint64_t)v13, type metadata accessor for CRLWPStorageCRDTData);
  v17 = (void *)CRAttributedString.attributedString.getter(v3);
  v18 = *(void (**)(_BYTE *, uint64_t))(v4 + 8);
  v18(v6, v3);
  v19 = (uint64_t)objc_msgSend(v17, "length");

  if (v19 >= 1 && (v38 & 0x8000000000000000) == 0)
  {
    v20 = *(_QWORD *)&v37[v14];
    if (!v20)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    (*(void (**)(void))(*(_QWORD *)v20 + 760))();
    sub_1004B8460((uint64_t)&v9[*(int *)(v7 + 20)], (uint64_t)v13, type metadata accessor for CRLWPStorageCRDTData);
    sub_1004B84A4((uint64_t)v9, type metadata accessor for CRLWPShapeItemCRDTData);
    v16(v6, v13, v3);
    sub_1004B84A4((uint64_t)v13, type metadata accessor for CRLWPStorageCRDTData);
    v21 = (void *)CRAttributedString.attributedString.getter(v3);
    v18(v6, v3);
    v22 = objc_msgSend(v21, "length");

    if ((uint64_t)v22 < v38)
      return;
    v23 = *(_QWORD *)&v37[v14];
    if (!v23)
    {
LABEL_26:
      __break(1u);
      return;
    }
    v24 = v37;
    (*(void (**)(void))(*(_QWORD *)v23 + 760))();
    sub_1004B8460((uint64_t)&v9[*(int *)(v7 + 20)], (uint64_t)v13, type metadata accessor for CRLWPStorageCRDTData);
    sub_1004B84A4((uint64_t)v9, type metadata accessor for CRLWPShapeItemCRDTData);
    v16(v6, v13, v3);
    sub_1004B84A4((uint64_t)v13, type metadata accessor for CRLWPStorageCRDTData);
    v25 = (void *)CRAttributedString.attributedString.getter(v3);
    v18(v6, v3);
    v26 = objc_msgSend(v25, "length");

    v27 = (char *)v38;
    if (v26 == (id)v38)
      v27 = (char *)objc_msgSend(v24, "previousCharacterIndex:", v38);
    if (sub_1001AE368((uint64_t)objc_msgSend(v24, "characterAtIndex:", v27)))
    {
      v28 = (char *)objc_msgSend(v24, "rangeOfNearestWhitespaceBeforeCharIndex:includingBreaks:", v27, 1);
      if (v28 != (char *)NSNotFound.getter(v28))
        v27 = v28;
    }
    v29 = (char *)objc_msgSend(v24, "wordAtCharIndex:includePreviousWord:", v27, 1);
    v31 = v30;
    v32 = NSNotFound.getter(v29);
    v33 = v29 == (char *)v32;
    if (v29 == (char *)v32)
      v34 = v27;
    else
      v34 = v29;
    if (!v33 && (v36 & 1) != 0)
    {
      v38 = (uint64_t)&v29[v31];
      if (__OFADD__(v29, v31))
      {
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      v34 = v29;
    }
    if (!__OFSUB__(v38, v34))
      return;
    __break(1u);
    goto LABEL_23;
  }
}

void sub_1007DDC38(uint64_t a1, int a2)
{
  char *v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  id v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  uint64_t v25;
  char *v26;
  int v27;
  void (*v28)(char *, uint64_t);
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;

  v3 = v2;
  v27 = a2;
  v5 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CRLWPStorageCRDTData(0);
  *(_QWORD *)&v13 = __chkstk_darwin(v12).n128_u64[0];
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = (char *)objc_msgSend(v2, "range", v13);
  v30 = OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData;
  v16 = *(_QWORD *)&v2[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData];
  if (!v16)
    goto LABEL_23;
  v25 = 0;
  (*(void (**)(void))(*(_QWORD *)v16 + 760))();
  sub_1004B8460((uint64_t)&v11[*(int *)(v9 + 20)], (uint64_t)v15, type metadata accessor for CRLWPStorageCRDTData);
  sub_1004B84A4((uint64_t)v11, type metadata accessor for CRLWPShapeItemCRDTData);
  v29 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v29(v8, v15, v5);
  sub_1004B84A4((uint64_t)v15, type metadata accessor for CRLWPStorageCRDTData);
  v17 = (void *)CRAttributedString.attributedString.getter(v5);
  v28 = *(void (**)(char *, uint64_t))(v6 + 8);
  v28(v8, v5);
  v18 = objc_msgSend(v17, "length");

  if ((uint64_t)v18 > a1 && sub_1001AE368((uint64_t)objc_msgSend(v3, "characterAtIndex:", a1)))
  {
    v19 = (char *)a1;
    if ((uint64_t)v26 < a1)
    {
      v19 = (char *)a1;
      while (1)
      {
        v20 = (uint64_t)(v19 - 1);
        v18 = objc_msgSend(v3, "characterAtIndex:", v19 - 1);
        if ((sub_1001AE368((uint64_t)v18) & 1) == 0 && ((v27 & 1) == 0 || !sub_1007EC8C0((uint64_t)v18)))
          break;
        --v19;
        if ((uint64_t)v26 >= v20)
        {
          v19 = v26;
          break;
        }
      }
    }
    v21 = *(_QWORD *)&v3[v30];
    if (v21)
      goto LABEL_16;
LABEL_14:
    __break(1u);
    do
    {
      ++a1;
      v21 = *(_QWORD *)&v3[v30];
      v9 = (uint64_t)v18;
      if (!v21)
        goto LABEL_14;
LABEL_16:
      (*(void (**)(void))(*(_QWORD *)v21 + 760))();
      v18 = (id)v9;
      sub_1004B8460((uint64_t)&v11[*(int *)(v9 + 20)], (uint64_t)v15, type metadata accessor for CRLWPStorageCRDTData);
      sub_1004B84A4((uint64_t)v11, type metadata accessor for CRLWPShapeItemCRDTData);
      v29(v8, v15, v5);
      sub_1004B84A4((uint64_t)v15, type metadata accessor for CRLWPStorageCRDTData);
      v22 = (void *)CRAttributedString.attributedString.getter(v5);
      v28(v8, v5);
      v23 = objc_msgSend(v22, "length");

      if (a1 >= (uint64_t)v23)
        break;
      v24 = objc_msgSend(v3, "characterAtIndex:", a1);
    }
    while ((sub_1001AE368((uint64_t)v24) & 1) != 0 || (v27 & 1) != 0 && sub_1007EC8C0((uint64_t)v24));
    if (__OFSUB__(a1, v19))
    {
      __break(1u);
LABEL_23:
      __break(1u);
    }
  }
}

void sub_1007DE148(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC8Freeform12CRLWPStorage__hasValidRanges) & 1) == 0)
    sub_1007D71A8();
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8Freeform12CRLWPStorage__paragraphRanges);
  if (*(_QWORD *)(v3 + 16) > a1)
  {
    if (a1 < 0)
    {
      __break(1u);
    }
    else if (__OFSUB__(*(_QWORD *)(v3 + 16 * a1 + 40), *(_QWORD *)(v3 + 16 * a1 + 32)))
    {
      __break(1u);
    }
  }
}

void sub_1007DE200(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = (uint64_t)objc_msgSend(v1, "paragraphIndexAtCharIndex:", a1);
  if ((v1[OBJC_IVAR____TtC8Freeform12CRLWPStorage__hasValidRanges] & 1) == 0)
    sub_1007D71A8();
  v3 = *(_QWORD *)&v1[OBJC_IVAR____TtC8Freeform12CRLWPStorage__paragraphRanges];
  if (v2 < *(_QWORD *)(v3 + 16))
  {
    if (v2 < 0)
    {
      __break(1u);
    }
    else if (__OFSUB__(*(_QWORD *)(v3 + 16 * v2 + 40), *(_QWORD *)(v3 + 16 * v2 + 32)))
    {
      __break(1u);
    }
  }
}

void sub_1007DE2D4(uint64_t a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double *v34;
  uint64_t KeyPath;
  unint64_t v36;
  __n128 v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __C::_NSRange v47;
  uint64_t v48;
  char *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  __C::_NSRange_optional v57;

  v47.length = a3;
  v47.location = a2;
  v4 = sub_1004B804C((uint64_t *)&unk_1013E87D0);
  __chkstk_darwin(v4);
  v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CRLWPHyperlinkSmartFieldData(0);
  v51 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1004B804C(&qword_1013F3C80);
  v52 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1004B804C(&qword_1013F3C78);
  __chkstk_darwin(v13);
  v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = (_QWORD *)sub_1004B804C((uint64_t *)&unk_1013E8570);
  v16 = *(v50 - 1);
  __chkstk_darwin(v50);
  v49 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v46);
  v19 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for CRLWPStorageCRDTData(0);
  __chkstk_darwin(v20);
  v22 = (char *)&v44 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = sub_1004B804C(&qword_1013F3C90);
  __chkstk_darwin(v54);
  v26 = __chkstk_darwin(v23);
  v53 = (char *)&v44 - v27;
  if (a1 == 6)
  {
    v44 = v25;
    v45 = v24;
    v28 = *(_QWORD *)(v48 + OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData);
    if (v28)
    {
      (*(void (**)(__n128))(*(_QWORD *)v28 + 760))(v26);
      sub_1004B8460((uint64_t)&v19[*(int *)(v46 + 20)], (uint64_t)v22, type metadata accessor for CRLWPStorageCRDTData);
      sub_1004B84A4((uint64_t)v19, type metadata accessor for CRLWPShapeItemCRDTData);
      v30 = v49;
      v29 = v50;
      (*(void (**)(char *, char *, _QWORD *))(v16 + 16))(v49, v22, v50);
      sub_1004B84A4((uint64_t)v22, type metadata accessor for CRLWPStorageCRDTData);
      v31 = v44;
      CRAttributedString.runs.getter(v29);
      (*(void (**)(char *, _QWORD *))(v16 + 8))(v30, v29);
      v32 = v54;
      (*(void (**)(char *, uint64_t, uint64_t))(v45 + 32))(v53, v31, v54);
      CRAttributedString.Runs.next()(v32);
      v33 = v52;
      v50 = *(_QWORD **)(v52 + 48);
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v50)(v15, 1, v10) != 1)
      {
        v49 = *(char **)(v33 + 32);
        v34 = _swiftEmptyArrayStorage;
        ((void (*)(char *, char *, uint64_t))v49)(v12, v15, v10);
        while (1)
        {
          KeyPath = swift_getKeyPath(&unk_100F0DDE8);
          v36 = sub_1007E6AC0();
          CRAttributedString.Runs.Run.subscript.getter(KeyPath, v10, v36);
          v37 = swift_release(KeyPath);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v51 + 48))(v6, 1, v7, v37) == 1)
          {
            (*(void (**)(char *, uint64_t))(v52 + 8))(v12, v10);
            sub_1004CB800((uint64_t)v6, (uint64_t *)&unk_1013E87D0);
          }
          else
          {
            sub_1007EC108((uint64_t)v6, (uint64_t)v9);
            v38 = (uint64_t *)&v9[*(int *)(v7 + 24)];
            v39 = *v38;
            v40 = v38[1];
            swift_bridgeObjectRetain(v40);
            sub_1007DC71C(v39, v40);
            swift_bridgeObjectRelease();
            v57 = _NSRange.intersection(_:)(v47);
            if (v57.is_nil)
            {
              sub_1004B84A4((uint64_t)v9, type metadata accessor for CRLWPHyperlinkSmartFieldData);
              (*(void (**)(char *, uint64_t))(v52 + 8))(v12, v10);
            }
            else
            {
              v56 = v7;
              v41 = sub_10050D1B0(&v55);
              sub_1004B8460((uint64_t)v9, (uint64_t)v41, type metadata accessor for CRLWPHyperlinkSmartFieldData);
              if ((swift_isUniquelyReferenced_nonNull_native(v34) & 1) == 0)
                v34 = sub_100D10E70(0, *((_QWORD *)v34 + 2) + 1, 1, v34);
              v43 = *((_QWORD *)v34 + 2);
              v42 = *((_QWORD *)v34 + 3);
              if (v43 >= v42 >> 1)
                v34 = sub_100D10E70((double *)(v42 > 1), v43 + 1, 1, v34);
              *((_QWORD *)v34 + 2) = v43 + 1;
              sub_10050CB14(&v55, &v34[4 * v43 + 4]);
              sub_1004B84A4((uint64_t)v9, type metadata accessor for CRLWPHyperlinkSmartFieldData);
              (*(void (**)(char *, uint64_t))(v52 + 8))(v12, v10);
            }
          }
          CRAttributedString.Runs.next()(v54);
          if (((unsigned int (*)(char *, uint64_t, uint64_t))v50)(v15, 1, v10) == 1)
            break;
          ((void (*)(char *, char *, uint64_t))v49)(v12, v15, v10);
        }
      }
      (*(void (**)(char *, uint64_t))(v45 + 8))(v53, v54);
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_1007DE8AC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  void *v3;
  uint64_t v5;
  char *v7;
  char *v8;
  char *v9;
  char *KeyPath;
  _QWORD *v11;
  char v12;
  void *v13;
  id v14;
  uint64_t v15;
  id v16[6];

  if (a2 == 6)
  {
    v5 = a1 + 1;
    if (__OFADD__(a1, 1))
    {
      __break(1u);
    }
    else if (v5 >= a1)
    {
      sub_1007D7CB8(a1, v5, v16);
      v7 = (char *)v16[4];
      v8 = (char *)v16[5];
      v9 = (char *)v16[3];

      KeyPath = (char *)swift_getKeyPath(&unk_100F0DDE8);
      v11 = (_QWORD *)sub_100DCA09C(KeyPath, v9, v7, v8);
      LOBYTE(v8) = v12;
      swift_release(KeyPath);

      if ((v8 & 1) == 0)
        goto LABEL_7;
      if (v11[2])
      {
        v13 = (void *)v11[4];
        v14 = v13;
        sub_100739414(v11, 1);
        v11 = v13;
LABEL_7:
        if (v11)
        {
          if (a3)
          {
            *a3 = objc_msgSend(v11, "range");
            a3[1] = v15;
          }
        }
        else
        {
          objc_msgSend(v3, "hyperlinkFieldAtCharIndex:effectiveRange:", a1, a3);
        }
        return;
      }
LABEL_15:
      __break(1u);
      return;
    }
    __break(1u);
    goto LABEL_15;
  }
}

void sub_1007DEB7C(unint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  id v12;

  if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC8Freeform12CRLWPStorage__hasValidPresentationProperties) & 1) == 0)
    sub_1007D5878();
  v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform12CRLWPStorage__paragraphStyleRuns);
  v6 = *(_QWORD *)(v5 + 16);
  if ((uint64_t)v6 > (uint64_t)a1)
  {
    if (a2)
    {
      if ((a1 & 0x8000000000000000) != 0)
      {
LABEL_14:
        __break(1u);
        goto LABEL_15;
      }
      v7 = v5 + 56 * a1;
      v8 = *(_QWORD *)(v7 + 32);
      v9 = *(_QWORD *)(v7 + 40);
      v10 = __OFSUB__(v9, v8);
      v11 = v9 - v8;
      if (v10)
      {
LABEL_15:
        __break(1u);
        return;
      }
      *a2 = v8;
      a2[1] = v11;
      v6 = *(_QWORD *)(v5 + 16);
    }
    else if ((a1 & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_13:
      __break(1u);
      goto LABEL_14;
    }
    if (v6 > a1)
    {
      v12 = *(id *)(v5 + 56 * a1 + 48);
      return;
    }
    goto LABEL_13;
  }
}

void sub_1007DED20(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;

  NSNotFound.getter(a1);
  if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC8Freeform12CRLWPStorage__hasValidRanges) & 1) == 0)
    sub_1007D71A8();
  v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform12CRLWPStorage__paragraphRanges);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    goto LABEL_16;
  v7 = 0;
  v8 = v5 + 32;
  v9 = v6;
  do
  {
    if (__OFSUB__(v9, v7))
    {
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
      return;
    }
    v10 = v7 + (uint64_t)(v9 - v7) / 2;
    if (__OFADD__(v7, (uint64_t)(v9 - v7) / 2))
      goto LABEL_22;
    if (v10 >= v6)
      goto LABEL_23;
    if (*(_QWORD *)(v8 + 16 * v10 + 8) <= a1)
      v7 = v10 + 1;
    else
      v9 = v7 + (uint64_t)(v9 - v7) / 2;
  }
  while (v7 != v9);
  if (v9 >= (uint64_t)v6)
  {
    v16 = (uint64_t *)(v8 + 16 * (v6 - 1));
    v12 = *v16;
    v17 = v16[1];
    v14 = __OFSUB__(v17, v12);
    v15 = v17 - v12;
    if (!v14)
      goto LABEL_18;
    goto LABEL_24;
  }
  v11 = (uint64_t *)(v8 + 16 * v9);
  v12 = *v11;
  v13 = v11[1];
  v14 = __OFSUB__(v13, v12);
  v15 = v13 - v12;
  if (!v14)
    goto LABEL_18;
  __break(1u);
LABEL_16:
  v12 = 0x7FFFFFFFFFFFFFFFLL;
  v15 = 0;
LABEL_18:
  if (a2)
  {
    *a2 = v12;
    a2[1] = v15;
  }
}

void sub_1007DEE90(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;

  if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC8Freeform12CRLWPStorage__hasValidPresentationProperties) & 1) == 0)
    sub_1007D5878();
  v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform12CRLWPStorage__paragraphStyleRuns);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
  {
LABEL_16:
    v15 = 0x7FFFFFFFFFFFFFFFLL;
    v16 = 0;
    if (a2)
      goto LABEL_20;
    return;
  }
  v7 = 0;
  v8 = v5 + 32;
  v9 = v5 + 40;
  v10 = *(_QWORD *)(v5 + 16);
  do
  {
    if (__OFSUB__(v10, v7))
    {
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v11 = v7 + (uint64_t)(v10 - v7) / 2;
    if (__OFADD__(v7, (uint64_t)(v10 - v7) / 2))
      goto LABEL_23;
    if (v11 >= v6)
      goto LABEL_24;
    if (*(_QWORD *)(v9 + 56 * v11) <= a1)
      v7 = v11 + 1;
    else
      v10 = v7 + (uint64_t)(v10 - v7) / 2;
  }
  while (v7 != v10);
  if (v10 < (uint64_t)v6)
  {
    v12 = 56 * v10;
    v13 = (uint64_t *)(v8 + 56 * v10);
    v15 = *v13;
    v14 = v13[1];
    v16 = v14 - v15;
    if (__OFSUB__(v14, v15))
    {
      __break(1u);
      goto LABEL_16;
    }
    goto LABEL_19;
  }
  v12 = 56 * v6 - 56;
  v15 = *(_QWORD *)(v8 + v12);
  v17 = *(_QWORD *)(v8 + v12 + 8);
  v16 = v17 - v15;
  if (__OFSUB__(v17, v15))
  {
LABEL_25:
    __break(1u);
    return;
  }
LABEL_19:
  v18 = *(id *)(v8 + v12 + 16);
  if (!a2)
    return;
LABEL_20:
  *a2 = v15;
  a2[1] = v16;
}

uint64_t sub_1007DF130(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  unint64_t v7;
  id v8;
  id v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t result;

  if ((v1[OBJC_IVAR____TtC8Freeform12CRLWPStorage__hasValidPresentationProperties] & 1) == 0)
    sub_1007D5878();
  v3 = *(_QWORD *)&v1[OBJC_IVAR____TtC8Freeform12CRLWPStorage__paragraphStyleRuns];
  if (*(_QWORD *)(v3 + 16) <= a1)
    return 0;
  if (a1 < 0)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v4 = (_QWORD *)(v3 + 56 * a1);
  v5 = (void *)v4[7];
  if (!v5)
    return 0;
  v6 = (void *)v4[6];
  v7 = v4[8];
  v8 = v5;
  v9 = v6;
  v10 = (unint64_t)objc_msgSend(v1, "listNumberAtParIndex:", a1);
  v11 = v8;
  v12 = sub_100679EDC();

  if ((v7 & 0x8000000000000000) != 0)
    goto LABEL_16;
  if (v7 >= *(_QWORD *)(v12 + 16))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v13 = *(_QWORD *)(v12 + 8 * v7 + 32);
  swift_bridgeObjectRelease();
  if ((v10 & 0x8000000000000000) != 0)
  {
LABEL_18:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
    goto LABEL_20;
  }
  if (!HIDWORD(v10))
  {
    v14 = objc_msgSend((id)objc_opt_self(NSString), "crlwp_stringForValue:withListNumberFormat:includeFormatting:", v10, v13, 1);
    if (v14)
    {
      v15 = v14;
      v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);

      return v16;
    }

    return 0;
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
LABEL_20:
  __break(1u);
  return result;
}

uint64_t sub_1007DF374(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;

  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC8Freeform12CRLWPStorage__hasValidPresentationProperties) & 1) == 0)
    sub_1007D5878();
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8Freeform12CRLWPStorage__listRuns);
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
    return 1;
  v5 = 0;
  v6 = v3 + 32;
  result = 1;
  while (1)
  {
    v8 = *(_QWORD **)(v6 + 48 * v5 + 40);
    v9 = v8[2];
    if (!v9)
      goto LABEL_5;
    v10 = v8[4];
    if (v10 == a1)
      break;
    if (v9 != 1)
    {
      if (v8[5] == a1)
        goto LABEL_18;
      if (v9 != 2)
      {
        v11 = 6;
        while (1)
        {
          v12 = v11 - 3;
          if (__OFADD__(v11 - 4, 1))
            break;
          if (v8[v11] == a1)
            goto LABEL_18;
          ++v11;
          if (v12 == v9)
            goto LABEL_5;
        }
        __break(1u);
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }
    }
LABEL_5:
    if (++v5 == v4)
      return result;
  }
  v10 = a1;
LABEL_18:
  v13 = *(_QWORD *)(v6 + 48 * v5 + 32);
  if (__OFSUB__(v13, 1))
  {
LABEL_29:
    __break(1u);
    return result;
  }
  result = v13;
  if (v10 < a1)
  {
    v14 = v9 - 1;
    v15 = v9 - 1 + v13;
    v16 = v8 + 5;
    while (v14)
    {
      if (result == 0x7FFFFFFFFFFFFFFFLL)
        goto LABEL_28;
      v17 = *v16++;
      ++result;
      --v14;
      if (v17 >= a1)
        return result;
    }
    return v15;
  }
  return result;
}

void sub_1007DF50C(unint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  id v12;

  if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC8Freeform12CRLWPStorage__hasValidPresentationProperties) & 1) == 0)
    sub_1007D5878();
  v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform12CRLWPStorage__paragraphStyleRuns);
  v6 = *(_QWORD *)(v5 + 16);
  if ((uint64_t)v6 > (uint64_t)a1)
  {
    if (a2)
    {
      if ((a1 & 0x8000000000000000) != 0)
      {
LABEL_14:
        __break(1u);
        goto LABEL_15;
      }
      v7 = v5 + 56 * a1;
      v8 = *(_QWORD *)(v7 + 32);
      v9 = *(_QWORD *)(v7 + 40);
      v10 = __OFSUB__(v9, v8);
      v11 = v9 - v8;
      if (v10)
      {
LABEL_15:
        __break(1u);
        return;
      }
      *a2 = v8;
      a2[1] = v11;
      v6 = *(_QWORD *)(v5 + 16);
    }
    else if ((a1 & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_13:
      __break(1u);
      goto LABEL_14;
    }
    if (v6 > a1)
    {
      v12 = *(id *)(v5 + 56 * a1 + 56);
      return;
    }
    goto LABEL_13;
  }
}

void sub_1007DF6B0(unint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC8Freeform12CRLWPStorage__hasValidPresentationProperties) & 1) == 0)
    sub_1007D5878();
  v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform12CRLWPStorage__paragraphStyleRuns);
  v6 = *(_QWORD *)(v5 + 16);
  if ((uint64_t)v6 > (uint64_t)a1)
  {
    if (a2)
    {
      if ((a1 & 0x8000000000000000) != 0)
      {
LABEL_14:
        __break(1u);
        goto LABEL_15;
      }
      v7 = v5 + 56 * a1;
      v8 = *(_QWORD *)(v7 + 32);
      v9 = *(_QWORD *)(v7 + 40);
      v10 = __OFSUB__(v9, v8);
      v11 = v9 - v8;
      if (v10)
      {
LABEL_15:
        __break(1u);
        return;
      }
      *a2 = v8;
      a2[1] = v11;
      v6 = *(_QWORD *)(v5 + 16);
    }
    else if ((a1 & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_13:
      __break(1u);
      goto LABEL_14;
    }
    if (v6 > a1)
      return;
    goto LABEL_13;
  }
}

uint64_t sub_1007DF7B8(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC8Freeform12CRLWPStorage__hasValidPresentationProperties) & 1) == 0)
    sub_1007D5878();
  v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform12CRLWPStorage__listRuns);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return 1;
  v7 = 0;
  v8 = v5 + 32;
  result = 1;
  while (1)
  {
    v10 = *(_QWORD **)(v8 + 48 * v7 + 40);
    v11 = v10[2];
    if (v11)
    {
      if (v10[4] == a1)
        goto LABEL_16;
      if (v11 != 1)
        break;
    }
LABEL_5:
    if (++v7 == v6)
      return result;
  }
  if (v10[5] != a1)
  {
    if (v11 != 2)
    {
      v12 = 6;
      while (1)
      {
        v13 = v12 - 3;
        if (__OFADD__(v12 - 4, 1))
          break;
        if (v10[v12] == a1)
          goto LABEL_16;
        ++v12;
        if (v13 == v11)
          goto LABEL_5;
      }
      __break(1u);
      goto LABEL_22;
    }
    goto LABEL_5;
  }
LABEL_16:
  v14 = v8 + 48 * v7;
  result = *(_QWORD *)(v14 + 32);
  if (!a2)
    return result;
  v15 = *(_QWORD *)(v14 + 16);
  v16 = *(_QWORD *)(v8 + 48 * v7 + 24);
  v17 = __OFSUB__(v16, v15);
  v18 = v16 - v15;
  if (!v17)
  {
    *a2 = v15;
    a2[1] = v18;
    return result;
  }
LABEL_22:
  __break(1u);
  return result;
}

void sub_1007DF950(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  id v16;
  NSString v17;
  uint64_t v18;

  v3 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CRLWPStorageCRDTData(0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData);
  if (v14)
  {
    (*(void (**)(__n128))(*(_QWORD *)v14 + 760))(v11);
    sub_1004B8460((uint64_t)&v9[*(int *)(v7 + 20)], (uint64_t)v13, type metadata accessor for CRLWPStorageCRDTData);
    sub_1004B84A4((uint64_t)v9, type metadata accessor for CRLWPShapeItemCRDTData);
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v13, v3);
    sub_1004B84A4((uint64_t)v13, type metadata accessor for CRLWPStorageCRDTData);
    v15 = (void *)CRAttributedString.attributedString.getter(v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v16 = objc_msgSend(v15, "string");

    static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v17 = String._bridgeToObjectiveC()();
    objc_msgSend(v17, "characterAtIndex:", a1, swift_bridgeObjectRelease().n128_f64[0]);

  }
  else
  {
    __break(1u);
  }
}

void sub_1007DFB78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  _QWORD v26[3];
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;

  v4 = sub_1004B804C(&qword_1013F3D90);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v8);
  v10 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CRLWPStorageCRDTData(0);
  __chkstk_darwin(v11);
  v13 = (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1007DC570(a1, a2);
  v16 = __OFADD__(v14, v15);
  v17 = v14 + v15;
  if (v16)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v17 < v14)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v18 = sub_1007D7CB8(v14, v17, v26);
  v19 = (void *)v26[0];
  v20 = *(_QWORD *)(v26[0] + OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData);
  if (!v20)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v21 = v26[1];
  v22 = v26[2];
  (*(void (**)(id))(*(_QWORD *)v20 + 760))(v18);
  sub_1004B8460((uint64_t)&v10[*(int *)(v8 + 20)], (uint64_t)v13, type metadata accessor for CRLWPStorageCRDTData);
  sub_1004B84A4((uint64_t)v10, type metadata accessor for CRLWPShapeItemCRDTData);
  v23 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  CRAttributedString.subscript.getter(v21, v22, v23);
  sub_1004B84A4((uint64_t)v13, type metadata accessor for CRLWPStorageCRDTData);
  v24 = (void *)CRAttributedString.Substring.attributedString.getter(v4);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v25 = objc_msgSend(v24, "string");

  if (v25)
  {

    v29 = v27;
    v30 = v28;
    sub_1005A73A4((id *)&v29);
    String.init(_:)(v25);
    return;
  }
LABEL_9:
  __break(1u);
}

uint64_t sub_1007DFDF8(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD v10[5];
  uint64_t v11;

  if (*(_QWORD *)(*(_QWORD *)&v2[OBJC_IVAR____TtC8Freeform12CRLWPStorage__hyperlinkRuns] + 16))
    return 1;
  v6 = swift_allocObject(&unk_10127FA70, 17, 7);
  *(_BYTE *)(v6 + 16) = 0;
  v10[4] = sub_1007EC224;
  v11 = v6;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = *(_QWORD *)"";
  v10[2] = sub_1007DFF18;
  v10[3] = &unk_10127FA88;
  v7 = _Block_copy(v10);
  v8 = v11;
  swift_retain(v6);
  objc_msgSend(v2, "enumerateSmartFieldsWithAttributeKind:inRange:usingBlock:", 6, a1, a2, v7, swift_release(v8).n128_f64[0]);
  _Block_release(v7);
  swift_beginAccess(v6 + 16, v10, 0, 0);
  v3 = *(unsigned __int8 *)(v6 + 16);
  swift_release(v6);
  return v3;
}

uint64_t sub_1007DFF18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  void (*v10)(_QWORD *, uint64_t, uint64_t, uint64_t, __n128);
  __n128 v11;
  _QWORD v13[4];

  v10 = *(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, __n128))(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v13[3] = swift_getObjectType(a2);
  v13[0] = a2;
  swift_retain(v9);
  v11 = swift_unknownObjectRetain(a2);
  v10(v13, a3, a4, a5, v11);
  swift_release(v9);
  return _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v13);
}

void sub_1007E002C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void *v19;
  id v20;
  NSString v21;
  uint64_t v22;

  v7 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for CRLWPStorageCRDTData(0);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData);
  if (v18)
  {
    (*(void (**)(__n128))(*(_QWORD *)v18 + 760))(v15);
    sub_1004B8460((uint64_t)&v13[*(int *)(v11 + 20)], (uint64_t)v17, type metadata accessor for CRLWPStorageCRDTData);
    sub_1004B84A4((uint64_t)v13, type metadata accessor for CRLWPShapeItemCRDTData);
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v17, v7);
    sub_1004B84A4((uint64_t)v17, type metadata accessor for CRLWPStorageCRDTData);
    v19 = (void *)CRAttributedString.attributedString.getter(v7);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    v20 = objc_msgSend(v19, "string");

    static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v21 = String._bridgeToObjectiveC()();
    objc_msgSend(v21, "getCharacters:range:", a1, a2, a3, swift_bridgeObjectRelease().n128_f64[0]);

  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1007E02F0(uint64_t a1, char *a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char v15;
  char *v16;
  uint64_t v17;
  void (**v18)(_QWORD, _QWORD, _QWORD);
  void *v19;
  id v20;
  NSString v21;
  char *v22;
  uint64_t v23;
  char *v24;
  void (**v25)(_QWORD, _QWORD, _QWORD);
  void *v26;
  uint64_t v27;
  uint64_t inited;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t result;
  CKRecordID v43;
  Swift::String v44;
  void (*v45)(char *, uint64_t);
  void (*v46)(char *, char *, uint64_t);
  char *v47;
  uint64_t v48;
  uint64_t v49;
  void (**v50)(_QWORD, _QWORD, _QWORD);
  uint64_t v51;
  char v52[120];

  v47 = a2;
  v5 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v50 = *(void (***)(_QWORD, _QWORD, _QWORD))(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v51);
  v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CRLWPStorageCRDTData(0);
  *(_QWORD *)&v11 = __chkstk_darwin(v10).n128_u64[0];
  v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1;
  v49 = a1;
  if (a1 >= 1)
  {
    v15 = sub_1001AE368((uint64_t)objc_msgSend(v2, "characterAtIndex:", a1 - 1, v11));
    v14 = v49;
    if ((v15 & 1) == 0)
    {
      v48 = OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData;
      v14 = v49;
      while (1)
      {
        v3 = (uint64_t)objc_msgSend(v2, "wordAtCharIndex:includePreviousWord:", v14 - 1, 0);
        if (v3 == NSNotFound.getter(v3))
          break;
        if (v3 < 1)
        {
          v14 = v3;
          break;
        }
        v16 = v2;
        v17 = *(_QWORD *)&v2[v48];
        if (!v17)
          goto LABEL_19;
        (*(void (**)(void))(*(_QWORD *)v17 + 760))();
        sub_1004B8460((uint64_t)&v9[*(int *)(v51 + 20)], (uint64_t)v13, type metadata accessor for CRLWPStorageCRDTData);
        sub_1004B84A4((uint64_t)v9, type metadata accessor for CRLWPShapeItemCRDTData);
        v18 = v50;
        ((void (**)(char *, char *, uint64_t))v50)[2](v7, v13, v5);
        sub_1004B84A4((uint64_t)v13, type metadata accessor for CRLWPStorageCRDTData);
        v19 = (void *)CRAttributedString.attributedString.getter(v5);
        ((void (*)(char *, uint64_t))v18[1])(v7, v5);
        v20 = objc_msgSend(v19, "string");

        static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
        v21 = String._bridgeToObjectiveC()();
        LODWORD(v20) = objc_msgSend(v21, "crlwp_isHyphenationAtCharacterIndex:", v3 - 1, swift_bridgeObjectRelease().n128_f64[0]);

        v14 = v3;
        v2 = v16;
        if ((_DWORD)v20)
        {
          v14 = v3 - 1;
          if (v3 != 1)
            continue;
        }
        break;
      }
    }
  }
  v22 = v2;
  v48 = OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData;
  v23 = *(_QWORD *)&v2[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData];
  if (!v23)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v24 = &v47[v49];
  (*(void (**)(void))(*(_QWORD *)v23 + 760))();
  sub_1004B8460((uint64_t)&v9[*(int *)(v51 + 20)], (uint64_t)v13, type metadata accessor for CRLWPStorageCRDTData);
  sub_1004B84A4((uint64_t)v9, type metadata accessor for CRLWPShapeItemCRDTData);
  v25 = v50;
  v46 = (void (*)(char *, char *, uint64_t))v50[2];
  v46(v7, v13, v5);
  sub_1004B84A4((uint64_t)v13, type metadata accessor for CRLWPStorageCRDTData);
  v26 = (void *)CRAttributedString.attributedString.getter(v5);
  v45 = (void (*)(char *, uint64_t))v25[1];
  v45(v7, v5);
  v47 = (char *)objc_msgSend(v26, "length");

  v27 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v27, v52);
  *(_OWORD *)(inited + 16) = xmmword_100EF5A10;
  v49 = (uint64_t)v24;
  *(_QWORD *)(inited + 32) = v24;
  v29 = inited + 32;
  *(_QWORD *)(inited + 56) = &type metadata for Int;
  *(_QWORD *)(inited + 64) = &protocol witness table for Int;
  v50 = (void (**)(_QWORD, _QWORD, _QWORD))v22;
  v30 = *(_QWORD *)&v22[v48];
  if (!v30)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v3 = inited;
  (*(void (**)(void))(*(_QWORD *)v30 + 760))();
  sub_1004B8460((uint64_t)&v9[*(int *)(v51 + 20)], (uint64_t)v13, type metadata accessor for CRLWPStorageCRDTData);
  sub_1004B84A4((uint64_t)v9, type metadata accessor for CRLWPShapeItemCRDTData);
  v46(v7, v13, v5);
  sub_1004B84A4((uint64_t)v13, type metadata accessor for CRLWPStorageCRDTData);
  v31 = (void *)CRAttributedString.attributedString.getter(v5);
  v45(v7, v5);
  v32 = objc_msgSend(v31, "length");

  *(_QWORD *)(v3 + 96) = &type metadata for Int;
  *(_QWORD *)(v3 + 104) = &protocol witness table for Int;
  *(_QWORD *)(v3 + 72) = v32;
  v33 = (char *)v49;
  if ((uint64_t)v47 >= v49)
  {
    swift_setDeallocating(v3);
    v34 = *(_QWORD *)(v3 + 16);
    v35 = sub_1004B804C(&qword_1013E0190);
    *(_QWORD *)&v36 = swift_arrayDestroy(v29, v34, v35).n128_u64[0];
    v37 = (char *)objc_msgSend(v50, "wordAtCharIndex:includePreviousWord:", v33, 0, v36);
    v39 = v38;
    v40 = NSNotFound.getter(v37);
    v41 = &v37[v39];
    if (v37 == (char *)v40)
      v41 = v33;
    if (!__OFSUB__(v41, v14))
      return v14;
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
LABEL_22:
  sub_100757E04(&_mh_execute_header, (uint64_t)"rangeByExpanding(toIncludePartialWords:)", 40, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPStorage.swift", 78, 2, 2007, "Illegal range past end of storage: %lu vs %lu", 45, 2u, v3);
  sub_100518FC0(v3, (uint64_t)"Illegal range past end of storage: %lu vs %lu");
  sub_100519194(v3, (uint64_t)"rangeByExpanding(toIncludePartialWords:)", 40, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPStorage.swift", 78, 2u, 2007, (uint64_t)"Illegal range past end of storage: %lu vs %lu", 45, 2u);
  SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v43, v44);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Freeform/CRLAssert.swift", 24, 2, 348, 0);
  __break(1u);
  return result;
}

void sub_1007E0910(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  id v18;
  NSString v19;
  uint64_t v20;

  v5 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CRLWPStorageCRDTData(0);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData);
  if (v16)
  {
    (*(void (**)(__n128))(*(_QWORD *)v16 + 760))(v13);
    sub_1004B8460((uint64_t)&v11[*(int *)(v9 + 20)], (uint64_t)v15, type metadata accessor for CRLWPStorageCRDTData);
    sub_1004B84A4((uint64_t)v11, type metadata accessor for CRLWPShapeItemCRDTData);
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v15, v5);
    sub_1004B84A4((uint64_t)v15, type metadata accessor for CRLWPStorageCRDTData);
    v17 = (void *)CRAttributedString.attributedString.getter(v5);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v18 = objc_msgSend(v17, "string");

    static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v19 = String._bridgeToObjectiveC()();
    objc_msgSend(v19, "crlwp_isAllWhitespaceInRange:", a1, a2, swift_bridgeObjectRelease().n128_f64[0]);

  }
  else
  {
    __break(1u);
  }
}

double sub_1007E0B50@<D0>(uint64_t *a1@<X8>)
{
  id *v1;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  double result;
  __int128 v11;
  _OWORD v12[2];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  sub_1007C8368((char *)*v1, (uint64_t)v12);
  a1[3] = (uint64_t)&type metadata for CRLWPTextPresetData;
  a1[4] = sub_10073D86C();
  v3 = swift_allocObject(&unk_10127F898, 264, 7);
  *a1 = v3;
  v4 = v24;
  *(_OWORD *)(v3 + 208) = v23;
  *(_OWORD *)(v3 + 224) = v4;
  *(_OWORD *)(v3 + 240) = v25;
  *(_QWORD *)(v3 + 256) = v26;
  v5 = v20;
  *(_OWORD *)(v3 + 144) = v19;
  *(_OWORD *)(v3 + 160) = v5;
  v6 = v22;
  *(_OWORD *)(v3 + 176) = v21;
  *(_OWORD *)(v3 + 192) = v6;
  v7 = v16;
  *(_OWORD *)(v3 + 80) = v15;
  *(_OWORD *)(v3 + 96) = v7;
  v8 = v18;
  *(_OWORD *)(v3 + 112) = v17;
  *(_OWORD *)(v3 + 128) = v8;
  v9 = v12[1];
  *(_OWORD *)(v3 + 16) = v12[0];
  *(_OWORD *)(v3 + 32) = v9;
  result = *(double *)&v13;
  v11 = v14;
  *(_OWORD *)(v3 + 48) = v13;
  *(_OWORD *)(v3 + 64) = v11;
  return result;
}

BOOL sub_1007E0BF8(char a1)
{
  return (a1 & 0xFB) == 0;
}

id sub_1007E0C08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  void *v7;
  id result;
  uint64_t v14;
  id v15;
  uint64_t v16;
  id v17;
  id v18;
  NSString v19;
  void *v20;
  id v21;
  _QWORD aBlock[5];
  uint64_t v23;

  v7 = v6;
  result = objc_msgSend(v7, "range");
  if (!a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (!a5)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  v15 = result;
  v16 = v14;
  v17 = objc_allocWithZone((Class)CRLWPSearch);
  swift_bridgeObjectRetain(a2);
  sub_1004C0F54(a5, a6);
  swift_unknownObjectRetain(a4);
  v18 = v7;
  v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  aBlock[4] = a5;
  v23 = a6;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(_QWORD *)"";
  aBlock[2] = sub_100628D1C;
  aBlock[3] = &unk_10127FA38;
  v20 = _Block_copy(aBlock);
  v21 = objc_msgSend(v17, "initWithString:options:hitBlock:storage:range:searchCanvasDelegate:", v19, a3, v20, v18, v15, v16, a4);

  swift_unknownObjectRelease(a4);
  _Block_release(v20);
  swift_release(v23);
  sub_1007E0E80(v21);
  if (objc_msgSend(v21, "isComplete"))
  {

    return 0;
  }
  return v21;
}

id sub_1007E0E80(void *a1)
{
  void *v1;
  id v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  id v10;
  NSUInteger v11;
  NSUInteger v12;
  NSUInteger v13;
  id result;
  NSRange v15;
  NSString v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSRange v25;
  NSRange v26;
  NSRange v27;

  v3 = objc_msgSend(a1, "storageChangeCount");
  if (v3 != objc_msgSend(v1, "changeCount"))
    return objc_msgSend(a1, "setRange:", 0x7FFFFFFFFFFFFFFFLL, 0);
  v4 = (char *)objc_msgSend(v1, "range");
  v6 = v5;
  v7 = (char *)objc_msgSend(a1, "range");
  if (v4 > v7 || &v4[v6] < &v7[v8])
  {
    sub_100757E04(&_mh_execute_header, (uint64_t)"continueWP(_:)", 14, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPStorage.swift", 78, 2, 2168, "Expected search range to be within storage range.", 49, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"continueWP(_:)", 14, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPStorage.swift", 78, 2u, 2168, (uint64_t)"Expected search range to be within storage range.", 49, 2u);
  }
  v10 = objc_msgSend(v1, "range");
  v12 = v11;
  v27.location = (NSUInteger)objc_msgSend(a1, "range");
  v27.length = v13;
  v26.location = (NSUInteger)v10;
  v26.length = v12;
  v15 = NSIntersectionRange(v26, v27);
  result = (id)v15.location;
  v25 = v15;
  if ((uint64_t)v15.length >= 1)
  {
    result = objc_msgSend(v1, "wpKind");
    if ((_DWORD)result != 7)
    {
      v16 = objc_msgSend(a1, "searchedString");
      if (!v16)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(0);
        v19 = v18;
        v16 = String._bridgeToObjectiveC()();
        *(_QWORD *)&v17 = swift_bridgeObjectRelease(v19).n128_u64[0];
      }
      v20 = objc_msgSend(a1, "string", v17);
      v21 = objc_msgSend(v16, "crl_rangeOfString:searchOptions:updatingSearchRange:", v20, objc_msgSend(a1, "options"), &v25);
      v23 = v22;

      if (v21 != (id)NSNotFound.getter(v24))
        objc_msgSend(a1, "foundHitWithRange:", v21, v23);
      return objc_msgSend(a1, "setRange:", v25.location, v25.length);
    }
  }
  return result;
}

double sub_1007E1148(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  double result;
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  _BYTE v13[112];

  v2 = objc_opt_self(CRLWPSearch);
  v3 = swift_dynamicCastObjCClass(a1, v2);
  if (v3)
  {
    v4 = (void *)v3;
    v11 = a1;
    sub_1007E0E80(v4);

  }
  else
  {
    v6 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    inited = swift_initStackObject(v6, v13);
    *(_OWORD *)(inited + 16) = xmmword_100EF5A10;
    v12 = sub_1004B8930(0, &qword_1013F3DE0, off_101229A30);
    v8 = sub_1004B804C(&qword_1013F3DE8);
    v9 = sub_1004B804C(&qword_1013E0190);
    swift_dynamicCast(inited + 32, &v12, v8, v9, 7);
    *(_QWORD *)(inited + 96) = sub_1004B8930(0, &qword_1013F3DF0, off_101229998);
    *(_QWORD *)(inited + 104) = sub_1005A15B8(&qword_1013F3DF8, &qword_1013F3DF0, off_101229998, (uint64_t)&protocol conformance descriptor for NSObject);
    *(_QWORD *)(inited + 72) = a1;
    v10 = a1;
    sub_100757E04(&_mh_execute_header, (uint64_t)"continue(_:)", 12, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPStorage.swift", 78, 2, 2156, "Expected search class of type %@, instead recieved %@.", 54, 2u, inited);
    sub_1004F5394(inited, (uint64_t)"continue(_:)", 12, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPStorage.swift", 78, 2u, 2156, (uint64_t)"Expected search class of type %@, instead recieved %@.", 54, 2u);
    swift_setDeallocating(inited);
    *(_QWORD *)&result = swift_arrayDestroy(inited + 32, *(_QWORD *)(inited + 16), v9).n128_u64[0];
  }
  return result;
}

void sub_1007E1388(void *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t Strong;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t inited;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  char *v42;
  void *v43;
  void (*v44)(char *, uint64_t);
  id v45;
  BOOL v46;
  char *v47;
  id v48;
  void *v49;
  void *v50;
  id v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  void *v58;
  id v59;
  NSString v60;
  NSString v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  id v68;
  id v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  void *v76;
  id v77;
  NSString v78;
  id v79;
  void *v80;
  id v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  BOOL v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  id v95;
  id v96;
  id v97;
  id v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  double v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  char *v115;
  char *v116;
  char *v117;
  id v118;
  void *v119;
  void *v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  id v129;
  uint64_t v130;
  uint64_t v131;
  _BYTE v132[24];
  char v133[64];

  v2 = v1;
  v4 = sub_1004B804C((uint64_t *)&unk_1013F3DC0);
  __chkstk_darwin(v4);
  v6 = (char *)&v110 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v110 - v8;
  v10 = sub_1004B804C((uint64_t *)&unk_1013EFCF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v110 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v110 - v14;
  v128 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v121 = *(_QWORD *)(v128 - 8);
  __chkstk_darwin(v128);
  v127 = (char *)&v110 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v126);
  v125 = (char *)&v110 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for CRLWPStorageCRDTData(0);
  __chkstk_darwin(v18);
  v124 = (uint64_t)&v110 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CRLCommandGroup()), "init");
  Strong = swift_unknownObjectWeakLoadStrong(&v2[OBJC_IVAR____TtC8Freeform12CRLWPStorage__parentItem]);
  if (!Strong)
    goto LABEL_7;
  v22 = (id)Strong;
  v23 = type metadata accessor for CRLWPShapeItem(0);
  v24 = swift_dynamicCastClass(v22, v23);
  if (!v24)
  {

LABEL_7:
    v28 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    inited = swift_initStackObject(v28, v133);
    *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
    *(_QWORD *)(inited + 56) = type metadata accessor for CRLWPStorage();
    *(_QWORD *)(inited + 64) = sub_1005034A0((unint64_t *)&unk_1013F3DD0, v30, (uint64_t (*)(uint64_t))type metadata accessor for CRLWPStorage, (uint64_t)&protocol conformance descriptor for NSObject);
    *(_QWORD *)(inited + 32) = v2;
    v31 = v2;
    sub_100757E04(&_mh_execute_header, (uint64_t)"commandForReplaceAll(with:)", 27, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPStorage.swift", 78, 2, 2189, "Text storage has no parent info: %@", 35, 2u, inited);
    sub_1004F5394(inited, (uint64_t)"commandForReplaceAll(with:)", 27, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPStorage.swift", 78, 2u, 2189, (uint64_t)"Text storage has no parent info: %@", 35, 2u);
    swift_setDeallocating(inited);
    v32 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(inited + 32, 1, v32);
    return;
  }
  v25 = v24;
  if (!objc_msgSend(v2, "canUserReplaceText"))
  {
LABEL_38:

    return;
  }
  v26 = (uint64_t)_swiftEmptyArrayStorage;
  v131 = (uint64_t)_swiftEmptyArrayStorage;
  v129 = objc_msgSend(v2, "range");
  v130 = v27;
  if (v27 < 1)
  {
LABEL_32:
    if ((unint64_t)v26 >> 62)
    {
      if (v26 < 0)
        v107 = v26;
      else
        v107 = v26 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v26);
      v108 = _CocoaArrayWrapper.endIndex.getter(v107);
      swift_bridgeObjectRelease();
      if (v108 >= 1)
        goto LABEL_34;
    }
    else if (*(uint64_t *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10) >= 1)
    {
LABEL_34:
      swift_bridgeObjectRetain(v26);
      v103 = sub_100C0041C(v102);
      swift_beginAccess(&v20[OBJC_IVAR____TtC8Freeform15CRLCommandGroup_commands], v132, 33, 0);
      swift_bridgeObjectRetain(v103);
      sub_10061FCEC(v104);
      swift_endAccess(v132);
      swift_bridgeObjectRelease();
      if (!a1)
        goto LABEL_57;
      if ((unint64_t)v26 >> 62)
      {
        if (v26 < 0)
          v109 = v26;
        else
          v109 = v26 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v26);
        v105 = _CocoaArrayWrapper.endIndex.getter(v109);
        swift_bridgeObjectRelease_n(v26, 2);
        if (v105 < 0)
        {
          _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
          __break(1u);
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
        }
      }
      else
      {
        v105 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10);
        *(_QWORD *)&v106 = swift_bridgeObjectRelease().n128_u64[0];
      }
      objc_msgSend(a1, "appendReplacementCount:", v105, v106);
      goto LABEL_38;
    }

    swift_bridgeObjectRelease();
    return;
  }
  v112 = v25;
  v116 = v15;
  v113 = v12;
  v114 = v9;
  v115 = v6;
  v118 = v22;
  v117 = v20;
  v123 = OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData;
  v122 = v2;
  while (1)
  {
    v35 = *(_QWORD *)&v2[v123];
    if (!v35)
      goto LABEL_51;
    v36 = v129;
    v37 = (uint64_t)v125;
    (*(void (**)(void))(*(_QWORD *)v35 + 760))();
    v38 = v124;
    sub_1004B8460(v37 + *(int *)(v126 + 20), v124, type metadata accessor for CRLWPStorageCRDTData);
    sub_1004B84A4(v37, type metadata accessor for CRLWPShapeItemCRDTData);
    v39 = v121;
    v40 = *(void (**)(char *, uint64_t, uint64_t))(v121 + 16);
    v42 = v127;
    v41 = v128;
    v40(v127, v38, v128);
    sub_1004B84A4(v38, type metadata accessor for CRLWPStorageCRDTData);
    v43 = (void *)CRAttributedString.attributedString.getter(v41);
    v44 = *(void (**)(char *, uint64_t))(v39 + 8);
    v44(v42, v41);
    v45 = objc_msgSend(v43, "length");

    v46 = (uint64_t)v36 < (uint64_t)v45;
    v47 = v122;
    if (!v46)
    {
LABEL_31:
      v26 = v131;
      v20 = v117;
      v22 = v118;
      goto LABEL_32;
    }
    if (!a1)
      goto LABEL_52;
    v48 = objc_msgSend(a1, "findString");
    if (!v48)
      goto LABEL_53;
    v49 = v48;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v48);

    v50 = a1;
    v51 = objc_msgSend(a1, "options");
    v52 = *(_QWORD *)&v47[v123];
    if (!v52)
      goto LABEL_54;
    v53 = v51;
    v54 = (uint64_t)v125;
    (*(void (**)(void))(*(_QWORD *)v52 + 760))();
    v55 = v124;
    sub_1004B8460(v54 + *(int *)(v126 + 20), v124, type metadata accessor for CRLWPStorageCRDTData);
    sub_1004B84A4(v54, type metadata accessor for CRLWPShapeItemCRDTData);
    v57 = v127;
    v56 = v128;
    v40(v127, v55, v128);
    sub_1004B84A4(v55, type metadata accessor for CRLWPStorageCRDTData);
    v58 = (void *)CRAttributedString.attributedString.getter(v56);
    v44(v57, v56);
    v59 = objc_msgSend(v58, "string");

    static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
    v60 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v61 = String._bridgeToObjectiveC()();
    v62 = objc_msgSend(v60, "crl_rangeOfString:searchOptions:updatingSearchRange:", v61, v53, &v129);
    v64 = v63;
    swift_bridgeObjectRelease();

    v66 = NSNotFound.getter(v65);
    a1 = v50;
    v2 = v122;
    if (v62 != (id)v66)
    {
      v67 = objc_msgSend(objc_allocWithZone((Class)CRLWPSelection), "initWithRange:", v62, v64);
      if (v67)
        break;
    }
LABEL_11:
    if (v130 <= 0)
      goto LABEL_31;
  }
  v34 = v67;
  v68 = objc_msgSend(objc_allocWithZone((Class)CRLWPSearchReference), "initWithStorage:selection:selectionPath:", v2, v67, 0);
  if (!v68)
  {
LABEL_10:

    goto LABEL_11;
  }
  v69 = v68;
  if ((objc_msgSend(v68, "isReplaceable") & 1) == 0)
  {
    v33 = v34;
    v34 = v69;
LABEL_9:

    goto LABEL_10;
  }
  v70 = objc_msgSend(v50, "replaceString");
  if (!v70)
    goto LABEL_56;
  v120 = v70;
  v119 = v69;
  v71 = *(_QWORD *)&v2[v123];
  if (v71)
  {
    v72 = (uint64_t)v125;
    (*(void (**)(void))(*(_QWORD *)v71 + 760))();
    v73 = v124;
    sub_1004B8460(v72 + *(int *)(v126 + 20), v124, type metadata accessor for CRLWPStorageCRDTData);
    sub_1004B84A4(v72, type metadata accessor for CRLWPShapeItemCRDTData);
    v75 = v127;
    v74 = v128;
    v40(v127, v73, v128);
    sub_1004B84A4(v73, type metadata accessor for CRLWPStorageCRDTData);
    v76 = (void *)CRAttributedString.attributedString.getter(v74);
    v44(v75, v74);
    v77 = objc_msgSend(v76, "string");

    static String._unconditionallyBridgeFromObjectiveC(_:)(v77);
    v78 = String._bridgeToObjectiveC()();
    a1 = v50;
    v79 = objc_msgSend(v50, "options", swift_bridgeObjectRelease().n128_f64[0]);
    v80 = v120;
    v81 = objc_msgSend(v120, "crl_stringByCapitalizingToMatchString:range:searchOptions:", v78, v62, v64, v79);

    if (v81)
    {
      v82 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v81);
      v84 = v83;

      v86 = NSNotFound.getter(v85);
      v87 = (uint64_t)v116;
      if (v62 == (id)v86)
        goto LABEL_49;
      v111 = v84;
      v120 = v82;
      v88 = __OFADD__(v62, v64);
      v89 = (uint64_t)v62 + v64;
      v2 = v122;
      if (v88)
        goto LABEL_50;
      v90 = sub_1004B804C((uint64_t *)&unk_1013EFC60);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v90 - 8) + 56))(v87, 1, 1, v90);
      v91 = sub_1004B804C(&qword_1013F3D40);
      v92 = (uint64_t)v114;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v91 - 8) + 56))(v114, 1, 1, v91);
      v93 = (uint64_t)v113;
      sub_1004CB7BC(v87, (uint64_t)v113, (uint64_t *)&unk_1013EFCF0);
      v94 = (uint64_t)v115;
      sub_1004CB7BC(v92, (uint64_t)v115, (uint64_t *)&unk_1013F3DC0);
      v95 = objc_allocWithZone((Class)type metadata accessor for CRLWPReplaceTextCommand(0));
      v96 = v118;
      v97 = sub_1006BEFE0(v112, (uint64_t)v62, v89, v120, v111, 0, v93, v94);
      sub_1004CB800(v92, (uint64_t *)&unk_1013F3DC0);
      sub_1004CB800(v87, (uint64_t *)&unk_1013EFCF0);
      v98 = v97;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v98);
      v100 = *(_QWORD *)((v131 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v99 = *(_QWORD *)((v131 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v100 >= v99 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v99 > 1, v100 + 1, 1);
      v101 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v100, v98);
      specialized Array._endMutation()(v101);

      v33 = v119;
    }
    else
    {
      v33 = v34;
      v34 = v119;
      v2 = v122;
    }
    goto LABEL_9;
  }
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
}

uint64_t sub_1007E1F58()
{
  uint64_t v0;
  uint64_t Strong;
  void *v2;
  uint64_t v3;
  id v4;
  _QWORD *v5;
  uint64_t (*v6)(__n128);
  __n128 v7;
  char v8;

  Strong = swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR____TtC8Freeform12CRLWPStorage__parentItem);
  if (!Strong)
    return 1;
  v2 = (void *)Strong;
  v3 = type metadata accessor for CRLBoardItem(0);
  while (1)
  {
    v5 = (_QWORD *)swift_dynamicCastClass(v2, v3);
    if (v5)
    {
      v6 = *(uint64_t (**)(__n128))((swift_isaMask & *v5) + 0xF8);
      v7 = swift_unknownObjectRetain(v2);
      v8 = v6(v7);
      swift_unknownObjectRelease(v2);
      if ((v8 & 1) != 0)
        break;
    }
    v4 = objc_msgSend(v2, "parentInfo");
    swift_unknownObjectRelease(v2);
    v2 = v4;
    if (!v4)
      return 1;
  }
  swift_unknownObjectRelease(v2);
  return 0;
}

void sub_1007E2030(CFIndex a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void (*v22)(char *, uint64_t);
  id v23;
  uint64_t v24;
  char *v25;
  void *v26;
  __CFString *v27;
  CFRange RangeOfComposedCharactersAtIndex;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  uint64_t v32;

  v3 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v31 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v29 - v7;
  v9 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CRLWPStorageCRDTData(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v29 - v17;
  v19 = OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData;
  v32 = v1;
  v20 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData);
  if (!v20)
    goto LABEL_13;
  (*(void (**)(__n128))(*(_QWORD *)v20 + 760))(v16);
  sub_1004B8460((uint64_t)&v11[*(int *)(v9 + 20)], (uint64_t)v18, type metadata accessor for CRLWPStorageCRDTData);
  sub_1004B84A4((uint64_t)v11, type metadata accessor for CRLWPShapeItemCRDTData);
  v30 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  v30(v8, v18, v3);
  sub_1004B84A4((uint64_t)v18, type metadata accessor for CRLWPStorageCRDTData);
  v21 = (void *)CRAttributedString.attributedString.getter(v3);
  v22 = *(void (**)(char *, uint64_t))(v4 + 8);
  v22(v8, v3);
  v23 = objc_msgSend(v21, "length");

  if (a1 < 0 || (uint64_t)v23 < a1)
  {
    sub_100757E04(&_mh_execute_header, (uint64_t)"nextCharacterIndex(_:)", 22, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPStorage.swift", 78, 2, 2255, "Character index is outside storage bounds", 41, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"nextCharacterIndex(_:)", 22, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPStorage.swift", 78, 2u, 2255, (uint64_t)"Character index is outside storage bounds", 41, 2u);
    if ((uint64_t)v23 <= a1)
      return;
  }
  else if ((uint64_t)v23 <= a1)
  {
    return;
  }
  v24 = *(_QWORD *)(v32 + v19);
  if (!v24)
  {
LABEL_14:
    __break(1u);
    return;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 760))();
  sub_1004B8460((uint64_t)&v11[*(int *)(v9 + 20)], (uint64_t)v14, type metadata accessor for CRLWPStorageCRDTData);
  sub_1004B84A4((uint64_t)v11, type metadata accessor for CRLWPShapeItemCRDTData);
  v25 = v31;
  v30(v31, v14, v3);
  sub_1004B84A4((uint64_t)v14, type metadata accessor for CRLWPStorageCRDTData);
  v26 = (void *)CRAttributedString.attributedString.getter(v3);
  v22(v25, v3);
  v27 = (__CFString *)objc_msgSend(v26, "string");

  if (!v27)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v27 = (__CFString *)String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  RangeOfComposedCharactersAtIndex = CFStringGetRangeOfComposedCharactersAtIndex(v27, a1);

  if (__OFADD__(RangeOfComposedCharactersAtIndex.location, RangeOfComposedCharactersAtIndex.length))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
}

void sub_1007E23F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  void *v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t inited;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  id v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  __n128 v30;
  CFIndex v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  void *v35;
  __CFString *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  char v44[120];

  v43 = a1;
  v2 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v40 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v37 - v6;
  v8 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CRLWPStorageCRDTData(0);
  __chkstk_darwin(v11);
  v39 = (uint64_t)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v37 - v15;
  v17 = OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData;
  v42 = v1;
  v18 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData);
  if (!v18)
  {
    __break(1u);
    goto LABEL_14;
  }
  (*(void (**)(__n128))(*(_QWORD *)v18 + 760))(v14);
  sub_1004B8460((uint64_t)&v10[*(int *)(v8 + 20)], (uint64_t)v16, type metadata accessor for CRLWPStorageCRDTData);
  sub_1004B84A4((uint64_t)v10, type metadata accessor for CRLWPShapeItemCRDTData);
  v19 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  v19(v7, v16, v2);
  sub_1004B84A4((uint64_t)v16, type metadata accessor for CRLWPStorageCRDTData);
  v20 = (void *)CRAttributedString.attributedString.getter(v2);
  v21 = *(void (**)(char *, uint64_t))(v3 + 8);
  v21(v7, v2);
  v41 = objc_msgSend(v20, "length");

  v22 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v22, v44);
  *(_OWORD *)(inited + 16) = xmmword_100EF5A10;
  *(_QWORD *)(inited + 56) = &type metadata for Int;
  *(_QWORD *)(inited + 64) = &protocol witness table for Int;
  *(_QWORD *)(inited + 32) = v43;
  v38 = v17;
  v24 = *(_QWORD *)(v42 + v17);
  if (!v24)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v25 = (_QWORD *)inited;
  (*(void (**)(void))(*(_QWORD *)v24 + 760))();
  v37 = v8;
  sub_1004B8460((uint64_t)&v10[*(int *)(v8 + 20)], (uint64_t)v16, type metadata accessor for CRLWPStorageCRDTData);
  sub_1004B84A4((uint64_t)v10, type metadata accessor for CRLWPShapeItemCRDTData);
  v19(v7, v16, v2);
  sub_1004B84A4((uint64_t)v16, type metadata accessor for CRLWPStorageCRDTData);
  v26 = (void *)CRAttributedString.attributedString.getter(v2);
  v21(v7, v2);
  v27 = objc_msgSend(v26, "length");

  v25[12] = &type metadata for Int;
  v25[13] = &protocol witness table for Int;
  v25[9] = v27;
  v28 = (void (*)(char *, uint64_t, uint64_t))v19;
  v29 = v43;
  if (v43 < 0 || (uint64_t)v41 < v43)
  {
    sub_100757E04(&_mh_execute_header, (uint64_t)"previousCharacterIndex(_:)", 26, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPStorage.swift", 78, 2, 2271, "Character index is outside storage bounds %lu / %lu", 51, 2u, (uint64_t)v25);
    v28 = (void (*)(char *, uint64_t, uint64_t))v19;
    sub_1004F5394((uint64_t)v25, (uint64_t)"previousCharacterIndex(_:)", 26, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPStorage.swift", 78, 2u, 2271, (uint64_t)"Character index is outside storage bounds %lu / %lu", 51, 2u);
  }
  v30 = swift_bridgeObjectRelease();
  v31 = v29 - 1;
  if (v29 >= 1 && (uint64_t)v41 >= v29)
  {
    v32 = *(_QWORD *)(v42 + v38);
    if (v32)
    {
      (*(void (**)(__n128))(*(_QWORD *)v32 + 760))(v30);
      v33 = v39;
      sub_1004B8460((uint64_t)&v10[*(int *)(v37 + 20)], v39, type metadata accessor for CRLWPStorageCRDTData);
      sub_1004B84A4((uint64_t)v10, type metadata accessor for CRLWPShapeItemCRDTData);
      v34 = v40;
      v28(v40, v33, v2);
      sub_1004B84A4(v33, type metadata accessor for CRLWPStorageCRDTData);
      v35 = (void *)CRAttributedString.attributedString.getter(v2);
      v21(v34, v2);
      v36 = (__CFString *)objc_msgSend(v35, "string");

      if (!v36)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(0);
        v36 = (__CFString *)String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      CFStringGetRangeOfComposedCharactersAtIndex(v36, v31);

      return;
    }
LABEL_15:
    __break(1u);
  }
}

uint64_t sub_1007E28D0(uint64_t a1, char a2, char a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void *v19;
  id v20;
  NSString v21;
  NSString v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t result;
  uint64_t v29;

  v7 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for CRLWPStorageCRDTData(0);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData);
  if (v18)
  {
    (*(void (**)(__n128))(*(_QWORD *)v18 + 760))(v15);
    sub_1004B8460((uint64_t)&v13[*(int *)(v11 + 20)], (uint64_t)v17, type metadata accessor for CRLWPStorageCRDTData);
    sub_1004B84A4((uint64_t)v13, type metadata accessor for CRLWPShapeItemCRDTData);
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v17, v7);
    sub_1004B84A4((uint64_t)v17, type metadata accessor for CRLWPStorageCRDTData);
    v19 = (void *)CRAttributedString.attributedString.getter(v7);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    v20 = objc_msgSend(v19, "string");

    v21 = v20;
    v22 = v20;
    if (!v20)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      v22 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      v21 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    if ((a1 & 0x8000000000000000) == 0)
    {
      v23 = v20;
      v24 = objc_msgSend(v21, "crl_range");
      v26 = v25;

      v27 = objc_msgSend(v22, "crlwp_rangeOfWordAtCharacterIndex:range:includePreviousWord:includeHyphenation:", a1, v24, v26, a2 & 1, a3 & 1);
      return (uint64_t)v27;
    }
  }
  else
  {
    __break(1u);
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
  __break(1u);
  return result;
}

void sub_1007E2BBC()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t KeyPath;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t Strong;
  void *v29;
  uint64_t ObjectType;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  ValueMetadata *v43;
  ValueMetadata *v44;
  unint64_t v45;
  uint64_t v46;
  ValueMetadata *v47;
  ValueMetadata *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51[2];
  char v52;

  v0 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v41 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v2 = (char *)&v39 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v40);
  v4 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CRLWPStorageCRDTData(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1004B804C((uint64_t *)&unk_1013EFC60);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v10 = &_swiftEmptySetSingleton;
  v12 = (uint64_t)v10 + *(int *)(v11 + 36);
  v13 = sub_100559A64();
  CRAttributedString.Attributes.init()(&type metadata for CRLTextAttributeScope, v13);
  KeyPath = swift_getKeyPath(&unk_100F0DB98);
  sub_100AD8690(v51, 0x656D614E746E6F66, 0xE800000000000000);
  swift_bridgeObjectRelease();
  v47 = &type metadata for CRLWPCharacterScope;
  v48 = &type metadata for CRLWPFontNameAttribute;
  v49 = sub_100739574();
  v50 = KeyPath;
  v15 = swift_getKeyPath(&unk_100F0DAB0);
  swift_retain(KeyPath);
  v51[0] = sub_10098B7E4(0x63697465766C6548, 0xE900000000000061);
  v51[1] = v16;
  v52 = 0;
  v17 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
  v18 = sub_1007E6618();
  CRAttributedString.Attributes.subscript.setter(v51, v15, v17, v18);
  swift_release(KeyPath);
  v19 = swift_getKeyPath(&unk_100F0DBF0);
  sub_100AD8690(v51, 0x657A6953746E6F66, 0xE800000000000000);
  swift_bridgeObjectRelease();
  v43 = &type metadata for CRLWPCharacterScope;
  v44 = &type metadata for CRLWPFontSizeAttribute;
  v20 = v42;
  v45 = sub_100739530();
  v46 = v19;
  v21 = swift_getKeyPath(&unk_100F0DAB0);
  LODWORD(v51[0]) = 1096810496;
  BYTE4(v51[0]) = 0;
  v22 = sub_1007395C4();
  v23 = CRAttributedString.Attributes.subscript.setter(v51, v21, v17, v22);
  v24 = *(_QWORD *)(v20 + OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData);
  if (v24)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 760))(v23);
    sub_1004B8460((uint64_t)&v4[*(int *)(v40 + 20)], (uint64_t)v7, type metadata accessor for CRLWPStorageCRDTData);
    sub_1004B84A4((uint64_t)v4, type metadata accessor for CRLWPShapeItemCRDTData);
    v25 = v41;
    (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v2, v7, v0);
    sub_1004B84A4((uint64_t)v7, type metadata accessor for CRLWPStorageCRDTData);
    v26 = (void *)CRAttributedString.attributedString.getter(v0);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v2, v0);
    v27 = (uint64_t)objc_msgSend(v26, "length");

    if ((v27 & 0x8000000000000000) == 0)
    {
      Strong = swift_unknownObjectWeakLoadStrong(v20 + OBJC_IVAR____TtC8Freeform12CRLWPStorage__parentItem);
      if (Strong)
      {
        v29 = (void *)Strong;
        ObjectType = swift_getObjectType(Strong);
        v31 = swift_conformsToProtocol2(ObjectType, &protocol descriptor for CRLTransactable);
        if (v31)
          v32 = v31;
        else
          v32 = 0;
        if (v31)
          v33 = v29;
        else
          v33 = 0;
        if (v33)
        {
          v34 = swift_getObjectType(v33);
          v35 = sub_100D5E2C8(v34, v32);

          if ((v35 & 1) == 0)
          {
LABEL_16:
            sub_1004CB800((uint64_t)v10, (uint64_t *)&unk_1013EFC60);
            return;
          }
        }
        else
        {

        }
      }
      sub_1007D0B78(0, v27, v20);
      if ((v38 & 1) == 0)
      {
        sub_1007DC238(v12, v36, v37);
        *(_BYTE *)(v20 + OBJC_IVAR____TtC8Freeform12CRLWPStorage__hasValidPresentationProperties) = 0;
      }
      goto LABEL_16;
    }
    __break(1u);
  }
  __break(1u);
}

uint64_t destroy for CRLEditableBezierPathSourceData.Node(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
}

uint64_t initializeWithCopy for CRLWPStorage.ListRun(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for CRLWPStorage.ListRun(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v3 = *(_QWORD *)(a2 + 40);
  v4 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for CRLWPStorage.ListRun(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for CRLEditableBezierPathSourceData.Node(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CRLEditableBezierPathSourceData.Node(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CRLWPStorage.ListRun()
{
  return &type metadata for CRLWPStorage.ListRun;
}

uint64_t initializeBufferWithCopyOfBuffer for CRLWPStorage.HyperlinkRun(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = v3;
  return a1;
}

void destroy for CRLWPStorage.HyperlinkRun(uint64_t a1)
{

}

_QWORD *assignWithCopy for CRLWPStorage.HyperlinkRun(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  void *v4;
  id v5;

  *a1 = *a2;
  a1[1] = a2[1];
  v3 = (void *)a2[2];
  v4 = (void *)a1[2];
  a1[2] = v3;
  v5 = v3;

  return a1;
}

uint64_t assignWithTake for CRLWPStorage.HyperlinkRun(uint64_t a1, uint64_t a2)
{
  void *v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);

  return a1;
}

ValueMetadata *type metadata accessor for CRLWPStorage.HyperlinkRun()
{
  return &type metadata for CRLWPStorage.HyperlinkRun;
}

void destroy for CRLWPStorage.ParagraphStyleRun(uint64_t a1)
{

}

uint64_t initializeWithCopy for CRLWPStorage.ParagraphStyleRun(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;
  id v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(void **)(a2 + 16);
  v4 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v6 = v3;
  v7 = v4;
  return a1;
}

uint64_t assignWithCopy for CRLWPStorage.ParagraphStyleRun(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(void **)(a2 + 16);
  v5 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  v6 = v4;

  v7 = *(void **)(a1 + 24);
  v8 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  v9 = v8;

  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v10;
  return a1;
}

__n128 initializeWithCopy for CRLBezierPathPointData(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for CRLWPStorage.ParagraphStyleRun(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;

  v4 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for CRLWPStorage.ParagraphStyleRun(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 49))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CRLWPStorage.ParagraphStyleRun(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 49) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CRLWPStorage.ParagraphStyleRun()
{
  return &type metadata for CRLWPStorage.ParagraphStyleRun;
}

ValueMetadata *type metadata accessor for CRLWPStorage.CharacterStyleRun()
{
  return &type metadata for CRLWPStorage.CharacterStyleRun;
}

ValueMetadata *type metadata accessor for CRLWPWritingDirectionAttribute()
{
  return &type metadata for CRLWPWritingDirectionAttribute;
}

ValueMetadata *type metadata accessor for CRLWPParagraphAlignmentAttribute()
{
  return &type metadata for CRLWPParagraphAlignmentAttribute;
}

ValueMetadata *type metadata accessor for CRLWPHyperlinkAttribute()
{
  return &type metadata for CRLWPHyperlinkAttribute;
}

ValueMetadata *type metadata accessor for CRLWPParagraphLevelAttribute()
{
  return &type metadata for CRLWPParagraphLevelAttribute;
}

ValueMetadata *type metadata accessor for CRLWPListStartAttribute()
{
  return &type metadata for CRLWPListStartAttribute;
}

ValueMetadata *type metadata accessor for CRLWPListStyleTypeAttribute()
{
  return &type metadata for CRLWPListStyleTypeAttribute;
}

ValueMetadata *type metadata accessor for CRLWPCharacterFillAttribute()
{
  return &type metadata for CRLWPCharacterFillAttribute;
}

ValueMetadata *type metadata accessor for CRLWPFontNameAttribute()
{
  return &type metadata for CRLWPFontNameAttribute;
}

ValueMetadata *type metadata accessor for CRLWPParagraphScope()
{
  return &type metadata for CRLWPParagraphScope;
}

ValueMetadata *type metadata accessor for CRLWPCharacterScope()
{
  return &type metadata for CRLWPCharacterScope;
}

ValueMetadata *type metadata accessor for CRLWPListStyleType()
{
  return &type metadata for CRLWPListStyleType;
}

void sub_1007E3530(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  sub_1007E4694(319, &qword_1013F3450, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))&type metadata accessor for CRAttributedString.Attributes);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 0, 2, v4, a1 + 32);
  }
}

uint64_t *sub_1007E35B8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v5);
  }
  else
  {
    v6 = *(int *)(a3 + 36);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    swift_bridgeObjectRetain(v5);
    v9 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  }
  return a1;
}

uint64_t sub_1007E3640(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 36);
  v5 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t *sub_1007E368C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = *a2;
  *a1 = *a2;
  v5 = *(int *)(a3 + 36);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  swift_bridgeObjectRetain(v4);
  v8 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  return a1;
}

uint64_t *sub_1007E36F0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v6 = *a2;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 36);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

_QWORD *sub_1007E3768(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 36);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *sub_1007E37C8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 36);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t sub_1007E3838(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1007E3844);
}

uint64_t sub_1007E3844(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 36)], a2, v8);
  }
}

uint64_t sub_1007E38C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1007E38D0);
}

char *sub_1007E38D0(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 36)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for CRLWPAttributeDictionary(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100502040(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRLWPAttributeDictionary);
}

ValueMetadata *type metadata accessor for CRLWPStrikethroughAttribute()
{
  return &type metadata for CRLWPStrikethroughAttribute;
}

ValueMetadata *type metadata accessor for CRLWPUnderlineAttribute()
{
  return &type metadata for CRLWPUnderlineAttribute;
}

ValueMetadata *type metadata accessor for CRLWPFontItalicAttribute()
{
  return &type metadata for CRLWPFontItalicAttribute;
}

ValueMetadata *type metadata accessor for CRLWPFontBoldAttribute()
{
  return &type metadata for CRLWPFontBoldAttribute;
}

_QWORD *sub_1007E3994(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  void *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v13);
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v7 = a3[5];
    v8 = (void *)(a1 + v7);
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for URL(0);
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      v12 = sub_1004B804C(&qword_1013E04D0);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    v14 = a3[6];
    v15 = a3[7];
    v16 = (_QWORD *)((char *)v4 + v14);
    v17 = (uint64_t *)((char *)a2 + v14);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    v19 = *(uint64_t *)((char *)a2 + v15);
    *(_QWORD *)((char *)v4 + v15) = v19;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v19);
  }
  return v4;
}

uint64_t sub_1007E3ABC(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a1 + a2[5];
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7]));
}

uint64_t sub_1007E3B44(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = a3[5];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_1004B804C(&qword_1013E04D0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[6];
  v13 = a3[7];
  v14 = (_QWORD *)(a1 + v12);
  v15 = (_QWORD *)(a2 + v12);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = *(_QWORD *)(a2 + v13);
  *(_QWORD *)(a1 + v13) = v17;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  return a1;
}

uint64_t sub_1007E3C40(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  v7 = a3[5];
  v8 = (void *)(a1 + v7);
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, char *, uint64_t))(v11 + 24))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    v15 = sub_1004B804C(&qword_1013E04D0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  v16 = a3[6];
  v17 = (_QWORD *)(a1 + v16);
  v18 = (uint64_t *)((char *)a2 + v16);
  *v17 = *v18;
  v19 = v18[1];
  v17[1] = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease();
  v20 = a3[7];
  v21 = *(uint64_t *)((char *)a2 + v20);
  *(_QWORD *)(a1 + v20) = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1007E3DA8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = a3[5];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_1004B804C(&qword_1013E04D0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[7];
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);
  return a1;
}

uint64_t sub_1007E3E90(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = a3[5];
  v7 = (void *)(a1 + v6);
  v8 = (void *)(a2 + v6);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v14 = sub_1004B804C(&qword_1013E04D0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v7, v8, v9);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  v15 = a3[6];
  v16 = (_QWORD *)(a1 + v15);
  v17 = (uint64_t *)(a2 + v15);
  v19 = *v17;
  v18 = v17[1];
  *v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1007E3FE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1007E3FEC);
}

uint64_t sub_1007E3FEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_1004B804C(&qword_1013E04D0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1007E4074(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1007E4080);
}

uint64_t sub_1007E4080(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_1004B804C(&qword_1013E04D0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for CRLWPHyperlinkSmartFieldData(uint64_t a1)
{
  return sub_1004BD408(a1, qword_1013F34B0, (uint64_t)&nominal type descriptor for CRLWPHyperlinkSmartFieldData);
}

void sub_1007E4118(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = "\t";
  sub_10067E7A0(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = &unk_100F0CA98;
    v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
  }
}

ValueMetadata *type metadata accessor for CRLWPFontSizeAttribute()
{
  return &type metadata for CRLWPFontSizeAttribute;
}

uint64_t *sub_1007E41B4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v11);
  }
  else
  {
    v7 = sub_1004B804C((uint64_t *)&unk_1013E8570);
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + *(int *)(a3 + 20)), (uint64_t *)((char *)a2 + *(int *)(a3 + 20)), v7);
    v9 = *(int *)(a3 + 24);
    v10 = *(uint64_t *)((char *)a2 + v9);
    *(uint64_t *)((char *)a1 + v9) = v10;
    swift_bridgeObjectRetain(v10);
  }
  return a1;
}

double sub_1007E4264(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  double result;

  v4 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + *(int *)(a2 + 20), v4);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t sub_1007E42C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;

  v6 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  v8 = *(int *)(a3 + 24);
  v9 = *(_QWORD *)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v9;
  swift_bridgeObjectRetain(v9);
  return a1;
}

uint64_t sub_1007E434C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;

  v6 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  v8 = *(int *)(a3 + 24);
  v9 = *(_QWORD *)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1007E43DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_1007E445C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1007E44E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1007E44F0);
}

uint64_t sub_1007E44F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1007E4570(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1007E457C);
}

uint64_t sub_1007E457C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for CRLWPStorageCRDTData(uint64_t a1)
{
  return sub_1004BD408(a1, (uint64_t *)&unk_1013F3558, (uint64_t)&nominal type descriptor for CRLWPStorageCRDTData);
}

void sub_1007E460C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  sub_1007E4694(319, (unint64_t *)&unk_1013F3568, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))&type metadata accessor for CRAttributedString);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = v4[0];
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

void sub_1007E4694(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_100559A64();
    v7 = a3(a1, &type metadata for CRLTextAttributeScope, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

_BYTE *sub_1007E46F0()
{
  char *v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  id v12;
  void *v13;

  v1 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CRLWPParagraphStyle()), "init");
  v2 = sub_1007E74AC(v0);
  v3 = (uint64_t *)&v1[OBJC_IVAR____TtC8Freeform19CRLWPCharacterStyle_fontName];
  v4 = *(_QWORD *)&v1[OBJC_IVAR____TtC8Freeform19CRLWPCharacterStyle_fontName + 8];
  *v3 = v2;
  v3[1] = v5;
  swift_bridgeObjectRelease(v4);
  sub_1007E7874((uint64_t)v0);
  v6 = &v1[OBJC_IVAR____TtC8Freeform19CRLWPCharacterStyle_fontSize];
  *(_DWORD *)v6 = v7;
  v6[4] = 0;
  v1[OBJC_IVAR____TtC8Freeform19CRLWPCharacterStyle_bold] = sub_1007E7AC8((uint64_t)v0) & 1;
  v1[OBJC_IVAR____TtC8Freeform19CRLWPCharacterStyle_italic] = sub_1007E7D14((uint64_t)v0) & 1;
  v8 = sub_1007E7F60(v0);
  v9 = &v1[OBJC_IVAR____TtC8Freeform19CRLWPCharacterStyle_underline];
  *(_QWORD *)v9 = v8;
  v9[8] = 0;
  v10 = sub_1007E82A0(v0);
  v11 = &v1[OBJC_IVAR____TtC8Freeform19CRLWPCharacterStyle_strikethrough];
  *(_QWORD *)v11 = v10;
  v11[8] = 0;
  v12 = sub_1007E85E4(v0);
  v13 = *(void **)&v1[OBJC_IVAR____TtC8Freeform19CRLWPCharacterStyle_characterFill];
  *(_QWORD *)&v1[OBJC_IVAR____TtC8Freeform19CRLWPCharacterStyle_characterFill] = v12;

  *(_QWORD *)&v1[OBJC_IVAR____TtC8Freeform19CRLWPParagraphStyle_alignment] = sub_1007E8C64(v0);
  return v1;
}

uint64_t sub_1007E4830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7, _QWORD *a8)
{
  uint64_t result;
  char *v12;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _BYTE v17[24];

  result = NSNotFound.getter(a1);
  if (result == a5)
    return result;
  v12 = (char *)a6 + a5;
  if (__OFADD__(a5, a6))
  {
    __break(1u);
    goto LABEL_9;
  }
  a8 += 2;
  swift_beginAccess(a8, v17, 33, 0);
  a6 = (_QWORD *)*a8;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a8);
  *a8 = a6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_9:
    a6 = sub_100D0FADC(0, a6[2] + 1, 1, a6);
    *a8 = a6;
  }
  v15 = a6[2];
  v14 = a6[3];
  if (v15 >= v14 >> 1)
  {
    a6 = sub_100D0FADC((_QWORD *)(v14 > 1), v15 + 1, 1, a6);
    *a8 = a6;
  }
  a6[2] = v15 + 1;
  v16 = &a6[2 * v15];
  v16[4] = a5;
  v16[5] = v12;
  return swift_endAccess(v17);
}

uint64_t sub_1007E491C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  v12 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
    v16 = v15;
  }
  else
  {
    v14 = 0;
    v16 = 0;
  }
  swift_retain(v12);
  v13(v14, v16, a3, a4, a5, a6, a7);
  swift_release(v12);
  return swift_bridgeObjectRelease(v16);
}

id *sub_1007E49C4(id *result, uint64_t a2, uint64_t a3, _QWORD **a4)
{
  _QWORD *v7;
  id v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;

  if (*result)
  {
    v7 = *a4;
    v8 = *result;
    result = (id *)swift_isUniquelyReferenced_nonNull_native(v7);
    *a4 = v7;
    if ((result & 1) == 0)
    {
      result = (id *)sub_100D114BC(0, v7[2] + 1, 1, v7);
      v7 = result;
      *a4 = result;
    }
    v10 = v7[2];
    v9 = v7[3];
    if (v10 >= v9 >> 1)
    {
      result = (id *)sub_100D114BC((_QWORD *)(v9 > 1), v10 + 1, 1, v7);
      v7 = result;
    }
    v7[2] = v10 + 1;
    v11 = &v7[3 * v10];
    v11[4] = a2;
    v11[5] = a3;
    v11[6] = v8;
    *a4 = v7;
  }
  return result;
}

void sub_1007E4A90(char *a1, char *a2, unint64_t a3, char a4)
{
  char *KeyPath;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  char v15;
  double v16;
  id v17;
  id v18;

  KeyPath = (char *)swift_getKeyPath(&unk_100F0DBF0);
  v9 = sub_100DC8518(KeyPath, a1, a2, (char *)a3);
  v11 = v10;
  swift_release(KeyPath);
  if ((v11 & 1) != 0)
  {
    if (!*(_QWORD *)(v9 + 16))
    {
      __break(1u);
      goto LABEL_11;
    }
    sub_10062E238(v9, 1);
  }
  v12 = swift_getKeyPath(&unk_100F0DB40);
  sub_100DC53E4(v12, a1, a2, (char *)a3);
  a3 = v13;
  v15 = v14;
  *(_QWORD *)&v16 = swift_release(v12).n128_u64[0];
  if ((v15 & 1) == 0)
    goto LABEL_9;
  if ((a3 & 0xC000000000000001) == 0)
  {
    if (!*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      JUMPOUT(0x1007E4C44);
    }
    v17 = *(id *)(a3 + 32);
    goto LABEL_8;
  }
LABEL_11:
  swift_bridgeObjectRetain(a3);
  v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a3);
  sub_100739414((void *)a3, 1);
LABEL_8:
  sub_100739414((void *)a3, 1);
  a3 = (unint64_t)v17;
LABEL_9:
  v18 = objc_msgSend((id)a3, "referenceColor", v16);

  __asm { BR              X10 }
}

uint64_t sub_1007E4C54(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  char *v39;
  char *v40;
  void (*v41)(char *, char *, uint64_t);
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int (*v50)(char *, uint64_t, uint64_t);
  void (*v51)(char *, char *, uint64_t);
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  unint64_t v65;
  void (*v66)(char *, uint64_t);
  char *v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t);
  char *v70;
  void (*v71)(char *, uint64_t);
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;

  v83 = a2;
  v3 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
  v81 = *(_QWORD *)(v3 - 8);
  v82 = v3;
  __chkstk_darwin(v3);
  v80 = (char *)&v73 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v79 = (char *)&v73 - v6;
  v7 = sub_1004B804C(&qword_1013F3C78);
  __chkstk_darwin(v7);
  v9 = (char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v73 - v11;
  v13 = sub_1004B804C(&qword_1013F3C80);
  v88 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v90 = (char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v73 - v16;
  __chkstk_darwin(v18);
  v86 = (char *)&v73 - v19;
  __chkstk_darwin(v20);
  v91 = (char *)&v73 - v21;
  v85 = sub_1004B804C(&qword_1013F3C88);
  __chkstk_darwin(v85);
  v84 = (char *)&v73 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = sub_1004B804C(&qword_1013F3C90);
  v75 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89);
  v77 = (char *)&v73 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = sub_1004B804C(&qword_1013F3C98);
  __chkstk_darwin(v73);
  v74 = (char *)&v73 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = sub_1004B804C(&qword_1013F3CA0);
  __chkstk_darwin(v76);
  v87 = (char *)&v73 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v78 = a1;
  v27 = (void *)CRAttributedString.attributedString.getter(v26);
  v28 = objc_msgSend(v27, "string");

  v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
  v31 = v30;

  v32 = (void *)CRAttributedString.attributedString.getter(v26);
  v33 = objc_msgSend(v32, "string");

  v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
  v36 = v35;

  if (v29 == v34 && v31 == v36)
  {
    swift_bridgeObjectRelease_n(v31, 2);
  }
  else
  {
    v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v29, v31, v34, v36, 0);
    swift_bridgeObjectRelease(v31);
    swift_bridgeObjectRelease(v36);
    v38 = 0;
    if ((v37 & 1) == 0)
      return v38 & 1;
  }
  v39 = v74;
  CRAttributedString.runs.getter(v26);
  v40 = &v39[*(int *)(v73 + 52)];
  CRAttributedString.runs.getter(v26);
  v41 = *(void (**)(char *, char *, uint64_t))(v75 + 32);
  v42 = v77;
  v41(v77, v39, v89);
  v43 = sub_1004CBA30(&qword_1013F3CA8, &qword_1013F3C90, (uint64_t)&protocol conformance descriptor for CRAttributedString<A>.Runs);
  v44 = v87;
  dispatch thunk of Sequence.makeIterator()(v89, v43);
  v41(v42, v40, v89);
  v45 = (uint64_t)v44;
  v46 = v89;
  v47 = v76;
  v83 = v45 + *(int *)(v76 + 52);
  dispatch thunk of Sequence.makeIterator()(v89, v43);
  v78 = *(int *)(v47 + 56);
  *(_BYTE *)(v45 + v78) = 0;
  v48 = sub_1004CBA30(&qword_1013F3CB0, &qword_1013F3C90, (uint64_t)&protocol conformance descriptor for CRAttributedString<A>.Runs);
  v49 = v88;
  v77 = (char *)v48;
  while (1)
  {
    dispatch thunk of IteratorProtocol.next()(v46, v48);
    v50 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48);
    if (v50(v12, 1, v13) == 1)
    {
      v9 = v12;
LABEL_15:
      sub_1004CB800((uint64_t)v9, &qword_1013F3C78);
      v38 = 1;
      *(_BYTE *)(v45 + v78) = 1;
      goto LABEL_18;
    }
    v51 = *(void (**)(char *, char *, uint64_t))(v49 + 32);
    v51(v91, v12, v13);
    dispatch thunk of IteratorProtocol.next()(v46, v48);
    if (v50(v9, 1, v13) == 1)
    {
      (*(void (**)(char *, uint64_t))(v88 + 8))(v91, v13);
      goto LABEL_15;
    }
    v52 = v86;
    v51(v86, v9, v13);
    v53 = v84;
    v54 = &v84[*(int *)(v85 + 48)];
    v51(v84, v91, v13);
    v51(v54, v52, v13);
    v51(v17, v53, v13);
    v51(v90, v54, v13);
    v55 = CRAttributedString.Runs.Run.range.getter(v13);
    v57 = v56;
    if (v55 != CRAttributedString.Runs.Run.range.getter(v13) || v57 != v58)
      break;
    v59 = v12;
    v60 = v9;
    v61 = v79;
    CRAttributedString.Runs.Run.attributes.getter(v13);
    v62 = v80;
    v63 = v17;
    v64 = v90;
    CRAttributedString.Runs.Run.attributes.getter(v13);
    v65 = sub_100559A64();
    v38 = static CRAttributedString.Attributes.== infix(_:_:)(v61, v62, &type metadata for CRLTextAttributeScope, v65);
    v66 = *(void (**)(char *, uint64_t))(v81 + 8);
    v67 = v62;
    v68 = v82;
    v66(v67, v82);
    v66(v61, v68);
    v49 = v88;
    v69 = *(void (**)(char *, uint64_t))(v88 + 8);
    v70 = v64;
    v17 = v63;
    v69(v70, v13);
    v69(v63, v13);
    if ((v38 & 1) == 0)
      goto LABEL_17;
    v45 = (uint64_t)v87;
    v9 = v60;
    v12 = v59;
    v46 = v89;
    v48 = (uint64_t)v77;
    if ((v87[v78] & 1) != 0)
      goto LABEL_18;
  }
  v71 = *(void (**)(char *, uint64_t))(v88 + 8);
  v71(v90, v13);
  v71(v17, v13);
  v38 = 0;
LABEL_17:
  v45 = (uint64_t)v87;
LABEL_18:
  sub_1004CB800(v45, &qword_1013F3CA0);
  return v38 & 1;
}

uint64_t sub_1007E52FC()
{
  uint64_t result;

  qword_10147F690 = 97;
  *(_QWORD *)algn_10147F698 = 0xE100000000000000;
  qword_10147F6A0 = swift_getKeyPath(&unk_100F0DA18);
  unk_10147F6A8 = 98;
  qword_10147F6B0 = 0xE100000000000000;
  result = swift_getKeyPath(&unk_100F0DA38);
  qword_10147F6B8 = result;
  return result;
}

uint64_t sub_1007E5350(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v16;

  __chkstk_darwin(a1);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v16 - v9;
  v13 = sub_1007E4C54(v11, v12);
  sub_1004B8460(a1, (uint64_t)v10, type metadata accessor for CRLWPStorageCRDTData);
  sub_1004B8460(a2, (uint64_t)v7, type metadata accessor for CRLWPStorageCRDTData);
  if ((v13 & 1) != 0)
    v14 = sub_1007E4C54((uint64_t)&v10[*(int *)(a3 + 20)], (uint64_t)&v7[*(int *)(a3 + 20)]);
  else
    v14 = 0;
  sub_1004B84A4((uint64_t)v7, type metadata accessor for CRLWPStorageCRDTData);
  sub_1004B84A4((uint64_t)v10, type metadata accessor for CRLWPStorageCRDTData);
  return v14 & 1;
}

double sub_1007E544C@<D0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  if (qword_1013DD140 != -1)
    swift_once(&qword_1013DD140, sub_1007E52FC);
  v2 = *(_QWORD *)algn_10147F698;
  v4 = qword_10147F6A0;
  v3 = unk_10147F6A8;
  v5 = qword_10147F6B0;
  v6 = qword_10147F6B8;
  *a1 = qword_10147F690;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  a1[4] = v5;
  a1[5] = v6;
  swift_bridgeObjectRetain(v2);
  swift_retain(v4);
  swift_bridgeObjectRetain(v5);
  *(_QWORD *)&result = swift_retain(v6).n128_u64[0];
  return result;
}

uint64_t sub_1007E54D0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1005034A0((unint64_t *)&unk_1013F3D30, 255, type metadata accessor for CRLWPStorageCRDTData, (uint64_t)&unk_100F0CD20);
  return static CRStruct_2.fieldKeys.getter(a1, v2);
}

uint64_t sub_1007E5514@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t result;

  v4 = sub_100559A64();
  CRAttributedString.init()(&type metadata for CRLTextAttributeScope, v4);
  result = CRAttributedString.init(_:)(32, 0xE100000000000000, &type metadata for CRLTextAttributeScope, v4);
  *(_QWORD *)(a2 + *(int *)(a1 + 24)) = _swiftEmptyDictionarySingleton;
  return result;
}

uint64_t sub_1007E5588(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1005034A0(&qword_1013F35B0, 255, type metadata accessor for CRLWPStorageCRDTData, (uint64_t)&unk_100F0CB68);
  return CRType.context.getter(a1, v2);
}

uint64_t sub_1007E55CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1005034A0((unint64_t *)&unk_1013F3D30, 255, type metadata accessor for CRLWPStorageCRDTData, (uint64_t)&unk_100F0CD20);
  return CRStruct_2.actionUndoingDifference(from:)(a1, a2, v4);
}

uint64_t sub_1007E5628(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1005034A0((unint64_t *)&unk_1013F3D30, 255, type metadata accessor for CRLWPStorageCRDTData, (uint64_t)&unk_100F0CD20);
  return CRStruct_2.apply(_:)(a1, a2, v4);
}

uint64_t sub_1007E567C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1005034A0((unint64_t *)&unk_1013F3D30, 255, type metadata accessor for CRLWPStorageCRDTData, (uint64_t)&unk_100F0CD20);
  return CRStruct_2.hasDelta(from:)(a1, a2, v4);
}

uint64_t sub_1007E56D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1005034A0((unint64_t *)&unk_1013F3D30, 255, type metadata accessor for CRLWPStorageCRDTData, (uint64_t)&unk_100F0CD20);
  return CRStruct_2.delta(_:from:)(a1, a2, a3, v6);
}

uint64_t sub_1007E573C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1005034A0((unint64_t *)&unk_1013F3D30, 255, type metadata accessor for CRLWPStorageCRDTData, (uint64_t)&unk_100F0CD20);
  return CRStruct_2.canMerge(delta:)(a1, a2, v4);
}

uint64_t sub_1007E5790(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1005034A0((unint64_t *)&unk_1013F3D30, 255, type metadata accessor for CRLWPStorageCRDTData, (uint64_t)&unk_100F0CD20);
  return CRStruct_2.merge(delta:)(a1, a2, v4);
}

uint64_t sub_1007E57E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1005034A0((unint64_t *)&unk_1013F3D30, 255, type metadata accessor for CRLWPStorageCRDTData, (uint64_t)&unk_100F0CD20);
  return CRStruct_2.copy(renamingReferences:)(a1, a2, v4);
}

uint64_t sub_1007E5840(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1005034A0((unint64_t *)&unk_1013F3D30, 255, type metadata accessor for CRLWPStorageCRDTData, (uint64_t)&unk_100F0CD20);
  return CRStruct_2.observableDifference(from:with:)(a1, a2, a3, v6);
}

uint64_t sub_1007E58AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1005034A0((unint64_t *)&unk_1013F3D30, 255, type metadata accessor for CRLWPStorageCRDTData, (uint64_t)&unk_100F0CD20);
  return CRStruct_2.visitReferences(_:)(a1, a2, v4);
}

BOOL sub_1007E5900()
{
  sub_1005034A0((unint64_t *)&unk_1013F3D30, 255, type metadata accessor for CRLWPStorageCRDTData, (uint64_t)&unk_100F0CD20);
  return CRStruct_2.needToFinalizeTimestamps()();
}

uint64_t sub_1007E5944(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1005034A0((unint64_t *)&unk_1013F3D30, 255, type metadata accessor for CRLWPStorageCRDTData, (uint64_t)&unk_100F0CD20);
  return CRStruct_2.finalizeTimestamps(_:)(a1, a2, v4);
}

uint64_t sub_1007E5998(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1005034A0((unint64_t *)&unk_1013F3D30, 255, type metadata accessor for CRLWPStorageCRDTData, (uint64_t)&unk_100F0CD20);
  return CRStruct_2.merge(_:)(a1, a2, v4);
}

uint64_t sub_1007E59EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1005034A0(&qword_1013E2980, 255, type metadata accessor for CRLWPStorageCRDTData, (uint64_t)&unk_100F0CBC8);
  return CRDT.serializedData(_:version:)(a1, a2, a3, v6);
}

uint64_t sub_1007E5A54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1005034A0(&qword_1013E2980, 255, type metadata accessor for CRLWPStorageCRDTData, (uint64_t)&unk_100F0CBC8);
  return CRDT.init(serializedData:)(a1, a2, a3, v6);
}

uint64_t sub_1007E5ACC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1005034A0((unint64_t *)&unk_1013F3D30, 255, type metadata accessor for CRLWPStorageCRDTData, (uint64_t)&unk_100F0CD20);
  return CRStruct_2.init(from:)(a1, a2, v4);
}

uint64_t sub_1007E5B34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1005034A0((unint64_t *)&unk_1013F3D30, 255, type metadata accessor for CRLWPStorageCRDTData, (uint64_t)&unk_100F0CD20);
  return CRStruct_2.encode(to:)(a1, a2, v4);
}

uint64_t sub_1007E5B94(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1005034A0((unint64_t *)&unk_1013F3D30, 255, type metadata accessor for CRLWPStorageCRDTData, (uint64_t)&unk_100F0CD20);
  return CRStruct_2.minEncodingVersion.getter(a1, v2);
}

uint64_t sub_1007E5BE8()
{
  return sub_1005034A0(&qword_1013F35A0, 255, type metadata accessor for CRLWPStorageCRDTData, (uint64_t)&unk_100F0CAE8);
}

uint64_t sub_1007E5C18()
{
  return sub_1005034A0(&qword_1013F35A8, 255, type metadata accessor for CRLWPStorageCRDTData, (uint64_t)&unk_100F0CB30);
}

uint64_t sub_1007E5C48()
{
  return sub_1005034A0(&qword_1013F35B0, 255, type metadata accessor for CRLWPStorageCRDTData, (uint64_t)&unk_100F0CB68);
}

uint64_t sub_1007E5C78()
{
  return sub_1004CBA30(&qword_1013F35B8, (uint64_t *)&unk_1013F35C0, (uint64_t)&protocol conformance descriptor for CRStructMergeableDelta_2<A>);
}

uint64_t sub_1007E5CA4()
{
  return sub_1005034A0(&qword_1013E2980, 255, type metadata accessor for CRLWPStorageCRDTData, (uint64_t)&unk_100F0CBC8);
}

uint64_t sub_1007E5CD4()
{
  return sub_1005034A0(&qword_1013F35D0, 255, type metadata accessor for CRLWPStorageCRDTData, (uint64_t)&unk_100F0CC48);
}

uint64_t sub_1007E5D04()
{
  return sub_1004CBA30(&qword_1013F35D8, (uint64_t *)&unk_1013E8570, (uint64_t)&protocol conformance descriptor for CRAttributedString<A>);
}

uint64_t sub_1007E5D30()
{
  return sub_1005034A0(&qword_1013F35E0, 255, type metadata accessor for CRLWPStorageCRDTData, (uint64_t)&unk_100F0CCA8);
}

unint64_t sub_1007E5D64()
{
  unint64_t result;

  result = qword_1013F35E8;
  if (!qword_1013F35E8)
  {
    result = swift_getWitnessTable(&unk_100F0CD48, &type metadata for CRLWPFontSizeAttribute);
    atomic_store(result, (unint64_t *)&qword_1013F35E8);
  }
  return result;
}

void *sub_1007E5DA8()
{
  return &protocol witness table for Float;
}

void *sub_1007E5DB4()
{
  return &protocol witness table for Float;
}

void *sub_1007E5DC0()
{
  return &protocol witness table for Float;
}

_UNKNOWN **sub_1007E5DCC()
{
  return &off_10127F820;
}

unint64_t sub_1007E5DD8(uint64_t a1)
{
  unint64_t result;

  result = sub_1007395C4();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1007E5DFC()
{
  return sub_1005034A0(&qword_1013F3640, 255, type metadata accessor for CRLWPHyperlinkSmartFieldData, (uint64_t)&unk_100F0CDD4);
}

uint64_t sub_1007E5E2C()
{
  return sub_1005034A0(&qword_1013F3648, 255, type metadata accessor for CRLWPHyperlinkSmartFieldData, (uint64_t)&unk_100F0CE1C);
}

uint64_t sub_1007E5E5C()
{
  return sub_1005034A0(&qword_1013F3650, 255, type metadata accessor for CRLWPHyperlinkSmartFieldData, (uint64_t)&unk_100F0CECC);
}

uint64_t sub_1007E5E8C()
{
  return sub_1005034A0(&qword_1013F3658, 255, type metadata accessor for CRLWPHyperlinkSmartFieldData, (uint64_t)&unk_100F0CEA4);
}

uint64_t sub_1007E5EBC()
{
  return sub_1005034A0(&qword_1013F3660, 255, type metadata accessor for CRLWPHyperlinkSmartFieldData, (uint64_t)&unk_100F0CE7C);
}

unint64_t sub_1007E5EF0()
{
  unint64_t result;

  result = qword_1013F3668;
  if (!qword_1013F3668)
  {
    result = swift_getWitnessTable(&unk_100F0CF74, &type metadata for CRLWPHyperlinkSmartFieldData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1013F3668);
  }
  return result;
}

unint64_t sub_1007E5F38()
{
  unint64_t result;

  result = qword_1013F3670;
  if (!qword_1013F3670)
  {
    result = swift_getWitnessTable(&unk_100F0D084, &type metadata for CRLWPHyperlinkSmartFieldData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1013F3670);
  }
  return result;
}

unint64_t sub_1007E5F80()
{
  unint64_t result;

  result = qword_1013F3678;
  if (!qword_1013F3678)
  {
    result = swift_getWitnessTable(&unk_100F0D04C, &type metadata for CRLWPHyperlinkSmartFieldData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1013F3678);
  }
  return result;
}

unint64_t sub_1007E5FC8()
{
  unint64_t result;

  result = qword_1013F3680;
  if (!qword_1013F3680)
  {
    result = swift_getWitnessTable(&unk_100F0CFAC, &type metadata for CRLWPHyperlinkSmartFieldData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1013F3680);
  }
  return result;
}

unint64_t sub_1007E6010()
{
  unint64_t result;

  result = qword_1013F3688;
  if (!qword_1013F3688)
  {
    result = swift_getWitnessTable(&unk_100F0D024, &type metadata for CRLWPHyperlinkSmartFieldData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1013F3688);
  }
  return result;
}

unint64_t sub_1007E6058()
{
  unint64_t result;

  result = qword_1013F3690;
  if (!qword_1013F3690)
  {
    result = swift_getWitnessTable(&unk_100F0CFFC, &type metadata for CRLWPHyperlinkSmartFieldData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1013F3690);
  }
  return result;
}

uint64_t sub_1007E609C()
{
  return sub_1004CBA30(&qword_1013F3698, &qword_1013F36A0, (uint64_t)&protocol conformance descriptor for [A]);
}

uint64_t sub_1007E60C8()
{
  return sub_1005034A0(&qword_1013F36A8, 255, type metadata accessor for CRLWPHyperlinkSmartFieldData, (uint64_t)&unk_100F0CF04);
}

uint64_t sub_1007E60F8()
{
  return sub_1005034A0(&qword_1013F36B0, 255, type metadata accessor for CRLWPHyperlinkSmartFieldData, (uint64_t)&unk_100F0CF2C);
}

uint64_t sub_1007E6128(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1005034A0(&qword_1013F36B8, 255, type metadata accessor for CRLWPHyperlinkSmartFieldData, (uint64_t)&unk_100F0D0EC);
  result = sub_1005034A0(&qword_1013F36C0, 255, type metadata accessor for CRLWPHyperlinkSmartFieldData, (uint64_t)&unk_100F0D0AC);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1007E6190()
{
  unint64_t result;

  result = qword_1013F36C8;
  if (!qword_1013F36C8)
  {
    result = swift_getWitnessTable(&unk_100F0D148, &type metadata for CRLWPFontBoldAttribute);
    atomic_store(result, (unint64_t *)&qword_1013F36C8);
  }
  return result;
}

void *sub_1007E61D4()
{
  return &protocol witness table for Bool;
}

void *sub_1007E61E0()
{
  return &protocol witness table for Bool;
}

void *sub_1007E61EC()
{
  return &protocol witness table for Bool;
}

unint64_t sub_1007E61F8(uint64_t a1)
{
  unint64_t result;

  result = sub_10073DD28();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1007E6220()
{
  unint64_t result;

  result = qword_1013F3720;
  if (!qword_1013F3720)
  {
    result = swift_getWitnessTable(&unk_100F0D1D4, &type metadata for CRLWPFontItalicAttribute);
    atomic_store(result, (unint64_t *)&qword_1013F3720);
  }
  return result;
}

unint64_t sub_1007E6264(uint64_t a1)
{
  unint64_t result;

  result = sub_10073DCE4();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1007E628C()
{
  unint64_t result;

  result = qword_1013F3778;
  if (!qword_1013F3778)
  {
    result = swift_getWitnessTable(&unk_100F0D260, &type metadata for CRLWPUnderlineAttribute);
    atomic_store(result, (unint64_t *)&qword_1013F3778);
  }
  return result;
}

uint64_t sub_1007E62D0()
{
  return sub_1004CBA30((unint64_t *)&unk_1013F3780, &qword_1013E8738, (uint64_t)&protocol conformance descriptor for CRExtensible<A>);
}

uint64_t sub_1007E62FC()
{
  return sub_1004CBA30(&qword_1013F3790, &qword_1013E8738, (uint64_t)&protocol conformance descriptor for CRExtensible<A>);
}

uint64_t sub_1007E6328()
{
  return sub_1005034A0(&qword_1013F3798, 255, (uint64_t (*)(uint64_t))type metadata accessor for CRLWPUnderline, (uint64_t)&unk_100EF204C);
}

unint64_t sub_1007E6358(uint64_t a1)
{
  unint64_t result;

  result = sub_10073DCA0();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1007E6380()
{
  unint64_t result;

  result = qword_1013F37F0;
  if (!qword_1013F37F0)
  {
    result = swift_getWitnessTable(&unk_100F0D2EC, &type metadata for CRLWPStrikethroughAttribute);
    atomic_store(result, (unint64_t *)&qword_1013F37F0);
  }
  return result;
}

uint64_t sub_1007E63C4()
{
  return sub_1004CBA30(&qword_1013F37F8, &qword_1013F3800, (uint64_t)&protocol conformance descriptor for CRExtensible<A>);
}

uint64_t sub_1007E63F0()
{
  return sub_1004CBA30(&qword_1013F3808, &qword_1013F3800, (uint64_t)&protocol conformance descriptor for CRExtensible<A>);
}

uint64_t sub_1007E641C()
{
  return sub_1005034A0(&qword_1013F3810, 255, (uint64_t (*)(uint64_t))type metadata accessor for CRLWPStrikethru, (uint64_t)&unk_100EF1F8C);
}

unint64_t sub_1007E644C(uint64_t a1)
{
  unint64_t result;

  result = sub_10073DC5C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1007E6474()
{
  unint64_t result;

  result = qword_1013F3868;
  if (!qword_1013F3868)
  {
    result = swift_getWitnessTable(&unk_100F0D378, &type metadata for CRLWPListStyleType);
    atomic_store(result, (unint64_t *)&qword_1013F3868);
  }
  return result;
}

unint64_t sub_1007E64BC()
{
  unint64_t result;

  result = qword_1013F3870;
  if (!qword_1013F3870)
  {
    result = swift_getWitnessTable(&unk_100F0D3C0, &type metadata for CRLWPListStyleType);
    atomic_store(result, (unint64_t *)&qword_1013F3870);
  }
  return result;
}

unint64_t sub_1007E6504()
{
  unint64_t result;

  result = qword_1013F3878;
  if (!qword_1013F3878)
  {
    result = swift_getWitnessTable(&unk_100F0D4D0, &type metadata for CRLWPListStyleType);
    atomic_store(result, (unint64_t *)&qword_1013F3878);
  }
  return result;
}

unint64_t sub_1007E654C()
{
  unint64_t result;

  result = qword_1013F3880;
  if (!qword_1013F3880)
  {
    result = swift_getWitnessTable(&unk_100F0D518, &type metadata for CRLWPFontNameAttribute);
    atomic_store(result, (unint64_t *)&qword_1013F3880);
  }
  return result;
}

uint64_t sub_1007E6590()
{
  return sub_1004CBA30(&qword_1013F3888, &qword_1013F3890, (uint64_t)&protocol conformance descriptor for CRExtensible<A>);
}

uint64_t sub_1007E65BC()
{
  return sub_1004CBA30(&qword_1013F3898, &qword_1013F3890, (uint64_t)&protocol conformance descriptor for CRExtensible<A>);
}

void *sub_1007E65E8()
{
  return &protocol witness table for String;
}

unint64_t sub_1007E65F4(uint64_t a1)
{
  unint64_t result;

  result = sub_1007E6618();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1007E6618()
{
  unint64_t result;

  result = qword_1013F38E8;
  if (!qword_1013F38E8)
  {
    result = swift_getWitnessTable(&unk_100F0D540, &type metadata for CRLWPFontNameAttribute);
    atomic_store(result, (unint64_t *)&qword_1013F38E8);
  }
  return result;
}

unint64_t sub_1007E6660()
{
  unint64_t result;

  result = qword_1013F38F0;
  if (!qword_1013F38F0)
  {
    result = swift_getWitnessTable(&unk_100F0D5A4, &type metadata for CRLWPCharacterFillAttribute);
    atomic_store(result, (unint64_t *)&qword_1013F38F0);
  }
  return result;
}

unint64_t sub_1007E66A8()
{
  unint64_t result;

  result = qword_1013F38F8;
  if (!qword_1013F38F8)
  {
    result = swift_getWitnessTable(&unk_100F33ED4, &type metadata for CRLFillData);
    atomic_store(result, (unint64_t *)&qword_1013F38F8);
  }
  return result;
}

unint64_t sub_1007E66F0()
{
  unint64_t result;

  result = qword_1013F3900;
  if (!qword_1013F3900)
  {
    result = swift_getWitnessTable(&unk_100F33E2C, &type metadata for CRLFillData);
    atomic_store(result, (unint64_t *)&qword_1013F3900);
  }
  return result;
}

uint64_t sub_1007E6734()
{
  return sub_1005A15B8(&qword_1013F3908, (unint64_t *)&qword_1013F3910, off_101229898, (uint64_t)&protocol conformance descriptor for NSObject);
}

unint64_t sub_1007E6768(uint64_t a1)
{
  unint64_t result;

  result = sub_1007E678C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1007E678C()
{
  unint64_t result;

  result = qword_1013F3960;
  if (!qword_1013F3960)
  {
    result = swift_getWitnessTable(&unk_100F0D5CC, &type metadata for CRLWPCharacterFillAttribute);
    atomic_store(result, (unint64_t *)&qword_1013F3960);
  }
  return result;
}

unint64_t sub_1007E67D4()
{
  unint64_t result;

  result = qword_1013F3968;
  if (!qword_1013F3968)
  {
    result = swift_getWitnessTable(&unk_100F0D630, &type metadata for CRLWPListStyleTypeAttribute);
    atomic_store(result, (unint64_t *)&qword_1013F3968);
  }
  return result;
}

uint64_t sub_1007E6818()
{
  return sub_1004CBA30((unint64_t *)&unk_1013F3970, &qword_1013E8708, (uint64_t)&protocol conformance descriptor for CRExtensible<A>);
}

uint64_t sub_1007E6844()
{
  return sub_1004CBA30(&qword_1013F3980, &qword_1013E8708, (uint64_t)&protocol conformance descriptor for CRExtensible<A>);
}

_UNKNOWN **sub_1007E6870()
{
  return &off_10127F830;
}

unint64_t sub_1007E687C(uint64_t a1)
{
  unint64_t result;

  result = sub_1007392B8();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1007E68A4()
{
  unint64_t result;

  result = qword_1013F39D8;
  if (!qword_1013F39D8)
  {
    result = swift_getWitnessTable(&unk_100F0D6BC, &type metadata for CRLWPListStartAttribute);
    atomic_store(result, (unint64_t *)&qword_1013F39D8);
  }
  return result;
}

void *sub_1007E68E8()
{
  return &protocol witness table for Int;
}

void *sub_1007E68F4()
{
  return &protocol witness table for Int;
}

void *sub_1007E6900()
{
  return &protocol witness table for Int;
}

unint64_t sub_1007E690C(uint64_t a1)
{
  unint64_t result;

  result = sub_100737130();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1007E6934()
{
  unint64_t result;

  result = qword_1013F3A30;
  if (!qword_1013F3A30)
  {
    result = swift_getWitnessTable(&unk_100F0D748, &type metadata for CRLWPParagraphLevelAttribute);
    atomic_store(result, (unint64_t *)&qword_1013F3A30);
  }
  return result;
}

unint64_t sub_1007E6978(uint64_t a1)
{
  unint64_t result;

  result = sub_1007370A8();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1007E69A0()
{
  unint64_t result;

  result = qword_1013F3A88;
  if (!qword_1013F3A88)
  {
    result = swift_getWitnessTable(&unk_100F0D7D4, &type metadata for CRLWPHyperlinkAttribute);
    atomic_store(result, (unint64_t *)&qword_1013F3A88);
  }
  return result;
}

uint64_t sub_1007E69E4()
{
  return sub_1005034A0(&qword_1013F36C0, 255, type metadata accessor for CRLWPHyperlinkSmartFieldData, (uint64_t)&unk_100F0D0AC);
}

unint64_t sub_1007E6A18()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1013F3A90;
  if (!qword_1013F3A90)
  {
    v1 = sub_1004CB6A4(&qword_1013F3A98);
    sub_1005A15B8(&qword_1013F3AA0, &qword_1013F3AA8, off_101229A18, (uint64_t)&protocol conformance descriptor for NSObject);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1013F3A90);
  }
  return result;
}

unint64_t sub_1007E6A9C(uint64_t a1)
{
  unint64_t result;

  result = sub_1007E6AC0();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1007E6AC0()
{
  unint64_t result;

  result = qword_1013F3AF8;
  if (!qword_1013F3AF8)
  {
    result = swift_getWitnessTable(&unk_100F0D7FC, &type metadata for CRLWPHyperlinkAttribute);
    atomic_store(result, (unint64_t *)&qword_1013F3AF8);
  }
  return result;
}

unint64_t sub_1007E6B08()
{
  unint64_t result;

  result = qword_1013F3B00;
  if (!qword_1013F3B00)
  {
    result = swift_getWitnessTable(&unk_100F0D860, &type metadata for CRLWPParagraphAlignmentAttribute);
    atomic_store(result, (unint64_t *)&qword_1013F3B00);
  }
  return result;
}

uint64_t sub_1007E6B4C()
{
  return sub_1004CBA30(&qword_1013F3B08, &qword_1013F3B10, (uint64_t)&protocol conformance descriptor for CRExtensible<A>);
}

uint64_t sub_1007E6B78()
{
  return sub_1004CBA30(&qword_1013F3B18, &qword_1013F3B10, (uint64_t)&protocol conformance descriptor for CRExtensible<A>);
}

uint64_t sub_1007E6BA4()
{
  return sub_1005034A0(&qword_1013F3B20, 255, (uint64_t (*)(uint64_t))type metadata accessor for CRLWPParagraphAlignment, (uint64_t)&unk_100EF20AC);
}

unint64_t sub_1007E6BD4(uint64_t a1)
{
  unint64_t result;

  result = sub_10073D7B8();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1007E6BFC()
{
  unint64_t result;

  result = qword_1013F3B78;
  if (!qword_1013F3B78)
  {
    result = swift_getWitnessTable(&unk_100F0D8EC, &type metadata for CRLWPWritingDirectionAttribute);
    atomic_store(result, (unint64_t *)&qword_1013F3B78);
  }
  return result;
}

uint64_t sub_1007E6C40()
{
  return sub_1004CBA30((unint64_t *)&unk_1013F3B80, &qword_1013E8758, (uint64_t)&protocol conformance descriptor for CRExtensible<A>);
}

uint64_t sub_1007E6C6C()
{
  return sub_1004CBA30(&qword_1013F3B90, &qword_1013E8758, (uint64_t)&protocol conformance descriptor for CRExtensible<A>);
}

uint64_t sub_1007E6C98()
{
  return sub_1005034A0(&qword_1013F3B98, 255, (uint64_t (*)(uint64_t))type metadata accessor for CRLWPWritingDirection, (uint64_t)&unk_100EF12DC);
}

unint64_t sub_1007E6CC8(uint64_t a1)
{
  unint64_t result;

  result = sub_10073D704();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1007E6CEC()
{
  return sub_1005034A0(&qword_1013F3BF0, 255, (uint64_t (*)(uint64_t))type metadata accessor for CRLWPCharacterStyle, (uint64_t)&protocol conformance descriptor for NSObject);
}

uint64_t sub_1007E6D1C()
{
  return sub_1005A15B8(&qword_1013F3AA0, &qword_1013F3AA8, off_101229A18, (uint64_t)&protocol conformance descriptor for NSObject);
}

uint64_t sub_1007E6D50(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  char v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unsigned int (*v28)(uint64_t, uint64_t, uint64_t);
  char v29;
  _BYTE *v31;
  void (*v32)(_BYTE *, uint64_t);
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  char v40;
  _BYTE v41[4];
  int v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v41[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = sub_1004B804C((uint64_t *)&unk_1013E87E0);
  __chkstk_darwin(v8);
  v10 = &v41[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = sub_1004B804C(&qword_1013E04D0);
  v12 = __chkstk_darwin(v11);
  v14 = &v41[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = __chkstk_darwin(v12);
  v17 = &v41[-v16];
  __chkstk_darwin(v15);
  v19 = &v41[-v18];
  v20 = *((_BYTE *)a1 + 8);
  v48 = *a1;
  v49 = v20;
  v21 = *((_BYTE *)a2 + 8);
  v46 = *a2;
  v47 = v21;
  v22 = sub_10062E244();
  if ((static CRExtensible.== infix(_:_:)(&v48, &v46, &type metadata for CRLWPSmartFieldDataType, v22, &protocol witness table for Int, &protocol witness table for Int) & 1) == 0)goto LABEL_8;
  v43 = v7;
  v23 = type metadata accessor for CRLWPHyperlinkSmartFieldData(0);
  v45 = a2;
  v24 = v23;
  sub_1004CB7BC((uint64_t)a1 + *(int *)(v23 + 20), (uint64_t)v19, &qword_1013E04D0);
  v44 = v24;
  v25 = *(int *)(v24 + 20);
  v26 = v45;
  sub_1004CB7BC((uint64_t)v45 + v25, (uint64_t)v17, &qword_1013E04D0);
  v27 = (uint64_t)&v10[*(int *)(v8 + 48)];
  sub_1004CB7BC((uint64_t)v19, (uint64_t)v10, &qword_1013E04D0);
  sub_1004CB7BC((uint64_t)v17, v27, &qword_1013E04D0);
  v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v28((uint64_t)v10, 1, v4) == 1)
  {
    sub_1004CB800((uint64_t)v17, &qword_1013E04D0);
    sub_1004CB800((uint64_t)v19, &qword_1013E04D0);
    if (v28(v27, 1, v4) == 1)
    {
      sub_1004CB800((uint64_t)v10, &qword_1013E04D0);
      goto LABEL_11;
    }
    goto LABEL_7;
  }
  sub_1004CB7BC((uint64_t)v10, (uint64_t)v14, &qword_1013E04D0);
  if (v28(v27, 1, v4) == 1)
  {
    sub_1004CB800((uint64_t)v17, &qword_1013E04D0);
    sub_1004CB800((uint64_t)v19, &qword_1013E04D0);
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v14, v4);
LABEL_7:
    sub_1004CB800((uint64_t)v10, (uint64_t *)&unk_1013E87E0);
LABEL_8:
    v29 = 0;
    return v29 & 1;
  }
  v31 = v43;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 32))(v43, v27, v4);
  sub_1005034A0((unint64_t *)&qword_1013E87F8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v42 = dispatch thunk of static Equatable.== infix(_:_:)(v14, v31);
  v32 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
  v32(v31, v4);
  sub_1004CB800((uint64_t)v17, &qword_1013E04D0);
  sub_1004CB800((uint64_t)v19, &qword_1013E04D0);
  v32(v14, v4);
  sub_1004CB800((uint64_t)v10, &qword_1013E04D0);
  if ((v42 & 1) == 0)
    goto LABEL_8;
LABEL_11:
  v33 = v26;
  v34 = v44;
  v35 = *(int *)(v44 + 24);
  v36 = *(uint64_t *)((char *)a1 + v35);
  v37 = *(uint64_t *)((char *)a1 + v35 + 8);
  v38 = (uint64_t *)((char *)v33 + v35);
  v39 = v38[1];
  if (v36 == *v38 && v37 == v39
    || (v40 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v37, *v38, v39, 0), v29 = 0, (v40 & 1) != 0))
  {
    v29 = sub_100C9E04C(*(uint64_t *)((char *)a1 + *(int *)(v34 + 28)), *(uint64_t *)((char *)v45 + *(int *)(v34 + 28)));
  }
  return v29 & 1;
}

id sub_1007E7114(void *a1, uint64_t a2, _QWORD *a3)
{
  char *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  objc_super v19;
  _BYTE v20[248];
  _QWORD v21[32];

  v7 = OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData;
  *(_QWORD *)&v3[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData] = 0;
  v8 = (uint64_t)&v3[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemTextPresetOverride];
  sub_10054F488((uint64_t)v20);
  sub_1004C4938((uint64_t)v20, v8, &qword_1013E1B50);
  v9 = OBJC_IVAR____TtC8Freeform12CRLWPStorage_geometry;
  v10 = objc_allocWithZone((Class)CRLCanvasInfoGeometry);
  v11 = v3;
  *(_QWORD *)&v3[v9] = objc_msgSend(v10, "initWithSize:", 100.0, 100.0);
  *(_QWORD *)((char *)OBJC_IVAR____TtC8Freeform12CRLWPStorage_attributedMarkedText + (_QWORD)v11) = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC8Freeform12CRLWPStorage_markedTextRange] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC8Freeform12CRLWPStorage_selectedMarkedTextRange] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC8Freeform12CRLWPStorage_selectedMarkedTextRangeFromOS] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC8Freeform12CRLWPStorage_markedTextStyle] = 0;
  swift_unknownObjectWeakInit(&v11[OBJC_IVAR____TtC8Freeform12CRLWPStorage__parentItem], 0);
  v11[OBJC_IVAR____TtC8Freeform12CRLWPStorage_isSupported] = 1;
  v12 = OBJC_IVAR____TtC8Freeform12CRLWPStorage_layoutClass;
  *(_QWORD *)&v11[v12] = type metadata accessor for CRLWPLayout();
  v13 = OBJC_IVAR____TtC8Freeform12CRLWPStorage_repClass;
  *(_QWORD *)&v11[v13] = sub_1004B8930(0, &qword_1013F0520, off_101229A28);
  v14 = OBJC_IVAR____TtC8Freeform12CRLWPStorage_editorClass;
  *(_QWORD *)&v11[v14] = type metadata accessor for CRLWPEditor(0);
  v11[OBJC_IVAR____TtC8Freeform12CRLWPStorage__hasValidRanges] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC8Freeform12CRLWPStorage__paragraphRanges] = _swiftEmptyArrayStorage;
  v11[OBJC_IVAR____TtC8Freeform12CRLWPStorage__hasValidPresentationProperties] = 0;
  v15 = OBJC_IVAR____TtC8Freeform12CRLWPStorage__coreTextAttributedString;
  *(_QWORD *)&v11[v15] = objc_msgSend(objc_allocWithZone((Class)NSAttributedString), "init");
  *(_QWORD *)&v11[OBJC_IVAR____TtC8Freeform12CRLWPStorage__characterStyleRuns] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v11[OBJC_IVAR____TtC8Freeform12CRLWPStorage__paragraphStyleRuns] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v11[OBJC_IVAR____TtC8Freeform12CRLWPStorage__hyperlinkRuns] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v11[OBJC_IVAR____TtC8Freeform12CRLWPStorage__listRuns] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v11[OBJC_IVAR____TtC8Freeform12CRLWPStorage_store] = a1;
  v16 = *(_QWORD *)&v3[v7];
  *(_QWORD *)&v3[v7] = a2;
  v17 = a1;
  swift_retain(a2);
  swift_release(v16);
  sub_1004C4938(v8, (uint64_t)v21, &qword_1013E1B50);
  sub_1004C4938((uint64_t)a3, v8, &qword_1013E1B50);
  sub_1006A1C78(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1006A1CF4);
  sub_1006A1C78(v21, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100562F88);

  sub_1006A1C78(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100562F88);
  v19.receiver = v11;
  v19.super_class = (Class)type metadata accessor for CRLWPStorage();
  return objc_msgSendSuper2(&v19, "init");
}

uint64_t sub_1007E7398(uint64_t a1, unint64_t a2, char a3)
{
  unint64_t v3;

  if ((a3 & 1) != 0)
    return 0x63697465766C6548;
  v3 = 0xD000000000000029;
  switch(a2)
  {
    case 0uLL:
      break;
    case 1uLL:
      v3 = 0xD000000000000023;
      break;
    case 2uLL:
    case 7uLL:
    case 8uLL:
      v3 = 0xD000000000000024;
      break;
    case 3uLL:
      v3 = 0xD000000000000026;
      break;
    case 4uLL:
      v3 = 0xD000000000000025;
      break;
    case 5uLL:
      v3 = 0xD000000000000027;
      break;
    case 6uLL:
      v3 = 0xD000000000000023;
      break;
    default:
      v3 = a1;
      break;
  }
  sub_1004C4924(a1, a2);
  return v3;
}

uint64_t sub_1007E74AC(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t result;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  char v12;
  char v13;
  char v14;
  int v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  id v20;
  unsigned __int8 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  unsigned __int8 v30;
  uint64_t v31;
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  _BYTE v60[248];
  uint64_t v61;
  unint64_t v62;
  unsigned __int8 v63;
  int v64;
  char v65;
  char v66;
  char v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  unsigned __int8 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  unsigned __int8 v80;
  uint64_t v81;
  unsigned __int8 v82;
  uint64_t v83;
  unsigned __int8 v84;
  uint64_t v85;
  unsigned __int8 v86;
  uint64_t v87;
  _QWORD v88[31];
  _BYTE v89[256];

  v2 = 0x63697465766C6548;
  v3 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
    return v2;
  sub_1004C4938((uint64_t)&a1[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemTextPresetOverride], (uint64_t)v88, &qword_1013E1B50);
  sub_1004C4938((uint64_t)v88, (uint64_t)v89, &qword_1013E1B50);
  result = sub_100562DF8((uint64_t)v89);
  if ((_DWORD)result != 1)
  {
    sub_1004C4938((uint64_t)v88, (uint64_t)&v61, &qword_1013E1B50);
    v56 = v85;
    v57 = v87;
    v54 = v84;
    v55 = v86;
    v52 = v81;
    v53 = v83;
    v51 = v82;
    v50 = v79;
    v49 = v80;
    v47 = v73;
    v48 = v72;
    v45 = v75;
    v46 = v74;
    v42 = v77;
    v43 = v76;
    v41 = v78;
    v44 = v70;
    v40 = v71;
    v10 = a1;
    v11 = v68;
    v12 = v69;
    v13 = v67;
    v14 = v66;
    v15 = v64;
    v16 = v65;
    v17 = v61;
    v18 = v62;
    v19 = v63;
    v58 = v10;
    v20 = v10;
    v21 = v40;
    v22 = v44;
    v24 = v41;
    v23 = v42;
    v25 = v43;
    v27 = v45;
    v26 = v46;
    v29 = v47;
    v28 = v48;
    v30 = v49;
    v31 = v50;
    v32 = v51;
    v34 = v52;
    v33 = v53;
    v36 = v54;
    v35 = v55;
    v38 = v56;
    v37 = v57;
    goto LABEL_8;
  }
  v7 = *(_QWORD *)&a1[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData];
  if (v7)
  {
    (*(void (**)(void))(*(_QWORD *)v7 + 760))();
    v8 = a1;
    swift_retain(v7);
    v9 = sub_1004B804C(&qword_1013F3C70);
    CRRegister.wrappedValue.getter(v9);
    sub_1004C4938((uint64_t)&v59, (uint64_t)v60, &qword_1013E1B50);
    sub_1004B84A4((uint64_t)v5, type metadata accessor for CRLWPShapeItemCRDTData);
    swift_release(v7);
    sub_1004C4938((uint64_t)v60, (uint64_t)&v61, &qword_1013E1B50);
    if (sub_100562DF8((uint64_t)&v61) == 1)
    {

      return v2;
    }
    v58 = a1;
    v37 = v87;
    v38 = v85;
    v35 = v86;
    v33 = v83;
    v36 = v84;
    v34 = v81;
    v32 = v82;
    v31 = v79;
    v30 = v80;
    v28 = v72;
    v29 = v73;
    v26 = v74;
    v27 = v75;
    v25 = v76;
    v23 = v77;
    v24 = v78;
    v22 = v70;
    v21 = v71;
    v11 = v68;
    v12 = v69;
    v13 = v67;
    v14 = v66;
    v15 = v64;
    v16 = v65;
    v17 = v61;
    v18 = v62;
    v19 = v63;
LABEL_8:
    v61 = v17;
    v62 = v18;
    v63 = v19;
    v64 = v15;
    v65 = v16;
    v66 = v14;
    v67 = v13;
    v68 = v11;
    v69 = v12;
    v70 = v22;
    v71 = v21;
    v72 = v28;
    v73 = v29;
    v74 = v26;
    v75 = v27;
    v76 = v25;
    v77 = v23;
    v78 = v24;
    v79 = v31;
    v80 = v30;
    v81 = v34;
    v82 = v32;
    v83 = v33;
    v84 = v36;
    v85 = v38;
    v86 = v35;
    v87 = v37;
    sub_1004C48FC(v17, v18, v19);
    sub_1006A1C78(v88, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1006A1CF4);
    sub_1007844D4((uint64_t)&v61);
    if (v19 == 255)
    {

      return 0x63697465766C6548;
    }
    else
    {
      v2 = sub_1007E7398(v17, v18, v19 & 1);
      sub_1004C4218(v17, v18, v19);

    }
    return v2;
  }
  __break(1u);
  return result;
}

uint64_t sub_1007E7874(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[248];
  _BYTE v9[248];
  _BYTE v10[256];
  _QWORD v11[31];
  _BYTE v12[248];

  v2 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  result = __chkstk_darwin(v2);
  v5 = &v8[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (!a1)
    return result;
  sub_1004C4938(a1 + OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemTextPresetOverride, (uint64_t)v11, &qword_1013E1B50);
  sub_1004C4938((uint64_t)v11, (uint64_t)v12, &qword_1013E1B50);
  result = sub_100562DF8((uint64_t)v12);
  if ((_DWORD)result != 1)
  {
    sub_1004C4938((uint64_t)v11, (uint64_t)v10, &qword_1013E1B50);
LABEL_7:
    sub_1006A1C78(v11, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1006A1CF4);
    return sub_1007844D4((uint64_t)v10);
  }
  v6 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData);
  if (!v6)
  {
    __break(1u);
    return result;
  }
  (*(void (**)(void))(*(_QWORD *)v6 + 760))();
  swift_retain(v6);
  v7 = sub_1004B804C(&qword_1013F3C70);
  CRRegister.wrappedValue.getter(v7);
  sub_1004C4938((uint64_t)v8, (uint64_t)v9, &qword_1013E1B50);
  sub_1004B84A4((uint64_t)v5, type metadata accessor for CRLWPShapeItemCRDTData);
  swift_release(v6);
  sub_1004C4938((uint64_t)v9, (uint64_t)v10, &qword_1013E1B50);
  result = sub_100562DF8((uint64_t)v10);
  if ((_DWORD)result != 1)
    goto LABEL_7;
  return result;
}

uint64_t sub_1007E7AC8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _BYTE v9[248];
  _BYTE v10[248];
  _BYTE v11[256];
  _QWORD v12[31];
  _BYTE v13[248];

  v2 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v2);
  v4 = &v9[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (!a1)
    return 0;
  sub_1004C4938(a1 + OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemTextPresetOverride, (uint64_t)v12, &qword_1013E1B50);
  sub_1004C4938((uint64_t)v12, (uint64_t)v13, &qword_1013E1B50);
  result = sub_100562DF8((uint64_t)v13);
  if ((_DWORD)result == 1)
  {
    v6 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData);
    if (!v6)
    {
      __break(1u);
      return result;
    }
    (*(void (**)(void))(*(_QWORD *)v6 + 760))();
    swift_retain(v6);
    v7 = sub_1004B804C(&qword_1013F3C70);
    CRRegister.wrappedValue.getter(v7);
    sub_1004C4938((uint64_t)v9, (uint64_t)v10, &qword_1013E1B50);
    sub_1004B84A4((uint64_t)v4, type metadata accessor for CRLWPShapeItemCRDTData);
    swift_release(v6);
    sub_1004C4938((uint64_t)v10, (uint64_t)v11, &qword_1013E1B50);
    if (sub_100562DF8((uint64_t)v11) == 1)
      return 0;
  }
  else
  {
    sub_1004C4938((uint64_t)v12, (uint64_t)v11, &qword_1013E1B50);
  }
  v8 = v11[25];
  sub_1006A1C78(v12, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1006A1CF4);
  sub_1007844D4((uint64_t)v11);
  if (v8 == 2)
    return 0;
  return v8 & 1;
}

uint64_t sub_1007E7D14(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _BYTE v9[248];
  _BYTE v10[248];
  _BYTE v11[256];
  _QWORD v12[31];
  _BYTE v13[248];

  v2 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v2);
  v4 = &v9[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (!a1)
    return 0;
  sub_1004C4938(a1 + OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemTextPresetOverride, (uint64_t)v12, &qword_1013E1B50);
  sub_1004C4938((uint64_t)v12, (uint64_t)v13, &qword_1013E1B50);
  result = sub_100562DF8((uint64_t)v13);
  if ((_DWORD)result == 1)
  {
    v6 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData);
    if (!v6)
    {
      __break(1u);
      return result;
    }
    (*(void (**)(void))(*(_QWORD *)v6 + 760))();
    swift_retain(v6);
    v7 = sub_1004B804C(&qword_1013F3C70);
    CRRegister.wrappedValue.getter(v7);
    sub_1004C4938((uint64_t)v9, (uint64_t)v10, &qword_1013E1B50);
    sub_1004B84A4((uint64_t)v4, type metadata accessor for CRLWPShapeItemCRDTData);
    swift_release(v6);
    sub_1004C4938((uint64_t)v10, (uint64_t)v11, &qword_1013E1B50);
    if (sub_100562DF8((uint64_t)v11) == 1)
      return 0;
  }
  else
  {
    sub_1004C4938((uint64_t)v12, (uint64_t)v11, &qword_1013E1B50);
  }
  v8 = v11[26];
  sub_1006A1C78(v12, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1006A1CF4);
  sub_1007844D4((uint64_t)v11);
  if (v8 == 2)
    return 0;
  return v8 & 1;
}

uint64_t sub_1007E7F60(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  int v11;
  char v12;
  char v13;
  int v14;
  char v15;
  char v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  unsigned __int8 v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE v55[248];
  __int128 v56;
  char v57;
  int v58;
  char v59;
  char v60;
  char v61;
  uint64_t v62;
  unsigned __int8 v63;
  uint64_t v64;
  char v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  unsigned __int8 v74;
  uint64_t v75;
  unsigned __int8 v76;
  uint64_t v77;
  unsigned __int8 v78;
  uint64_t v79;
  unsigned __int8 v80;
  uint64_t v81;
  _QWORD v82[31];
  _BYTE v83[256];

  v2 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
    return 0;
  sub_1004C4938((uint64_t)&a1[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemTextPresetOverride], (uint64_t)v82, &qword_1013E1B50);
  sub_1004C4938((uint64_t)v82, (uint64_t)v83, &qword_1013E1B50);
  result = sub_100562DF8((uint64_t)v83);
  if ((_DWORD)result == 1)
  {
    v6 = *(_QWORD *)&a1[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData];
    if (!v6)
    {
      __break(1u);
      return result;
    }
    (*(void (**)(void))(*(_QWORD *)v6 + 760))();
    v7 = a1;
    swift_retain(v6);
    v8 = sub_1004B804C(&qword_1013F3C70);
    CRRegister.wrappedValue.getter(v8);
    sub_1004C4938((uint64_t)&v54, (uint64_t)v55, &qword_1013E1B50);
    sub_1004B84A4((uint64_t)v4, type metadata accessor for CRLWPShapeItemCRDTData);
    swift_release(v6);
    sub_1004C4938((uint64_t)v55, (uint64_t)&v56, &qword_1013E1B50);
    if (sub_100562DF8((uint64_t)&v56) == 1)
    {

      return 0;
    }
    v35 = v81;
    v33 = v79;
    v31 = v80;
    v34 = v77;
    v32 = v78;
    v30 = v75;
    v29 = v76;
    v28 = v73;
    v27 = v74;
    v25 = v66;
    v26 = v67;
    v23 = v68;
    v24 = v69;
    v21 = v70;
    v22 = v71;
    v18 = v72;
    v20 = v64;
    v9 = v65;
    v10 = v62;
    v11 = v63;
    v12 = v61;
    v13 = v60;
    v14 = v58;
    v15 = v59;
    v19 = v56;
    v16 = v57;
  }
  else
  {
    sub_1004C4938((uint64_t)v82, (uint64_t)&v56, &qword_1013E1B50);
    v52 = v79;
    v53 = v81;
    v51 = v77;
    v49 = v78;
    v50 = v80;
    v48 = v75;
    v47 = v76;
    v46 = v73;
    v45 = v74;
    v43 = v67;
    v44 = v66;
    v41 = v69;
    v42 = v68;
    v38 = v71;
    v39 = v70;
    v40 = v64;
    v9 = v65;
    v10 = v62;
    v11 = v63;
    v12 = v61;
    v13 = v60;
    v14 = v58;
    v15 = v59;
    v36 = v56;
    v37 = v72;
    v16 = v57;
    v17 = a1;
    v19 = v36;
    v18 = v37;
    v20 = v40;
    v22 = v38;
    v21 = v39;
    v24 = v41;
    v23 = v42;
    v26 = v43;
    v25 = v44;
    v27 = v45;
    v28 = v46;
    v29 = v47;
    v30 = v48;
    v32 = v49;
    v31 = v50;
    v34 = v51;
    v33 = v52;
    v35 = v53;
  }
  v56 = v19;
  v57 = v16;
  v58 = v14;
  v59 = v15;
  v60 = v13;
  v61 = v12;
  v62 = v10;
  v63 = v11;
  v64 = v20;
  v65 = v9;
  v66 = v25;
  v67 = v26;
  v68 = v23;
  v69 = v24;
  v70 = v21;
  v71 = v22;
  v72 = v18;
  v73 = v28;
  v74 = v27;
  v75 = v30;
  v76 = v29;
  v77 = v34;
  v78 = v32;
  v79 = v33;
  v80 = v31;
  v81 = v35;
  sub_1006A1C78(v82, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1006A1CF4);
  sub_1007844D4((uint64_t)&v56);

  if (v11 == 255)
    return 0;
  if ((v11 & 1) != 0)
    return 0;
  else
    return v10;
}

uint64_t sub_1007E82A0(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  int v14;
  char v15;
  char v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  unsigned __int8 v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE v56[248];
  __int128 v57;
  char v58;
  int v59;
  char v60;
  char v61;
  char v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  unsigned __int8 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  unsigned __int8 v75;
  uint64_t v76;
  unsigned __int8 v77;
  uint64_t v78;
  unsigned __int8 v79;
  uint64_t v80;
  unsigned __int8 v81;
  uint64_t v82;
  _QWORD v83[31];
  _BYTE v84[256];

  v2 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
    return 0;
  sub_1004C4938((uint64_t)&a1[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemTextPresetOverride], (uint64_t)v83, &qword_1013E1B50);
  sub_1004C4938((uint64_t)v83, (uint64_t)v84, &qword_1013E1B50);
  result = sub_100562DF8((uint64_t)v84);
  if ((_DWORD)result == 1)
  {
    v6 = *(_QWORD *)&a1[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData];
    if (!v6)
    {
      __break(1u);
      return result;
    }
    (*(void (**)(void))(*(_QWORD *)v6 + 760))();
    v7 = a1;
    swift_retain(v6);
    v8 = sub_1004B804C(&qword_1013F3C70);
    CRRegister.wrappedValue.getter(v8);
    sub_1004C4938((uint64_t)&v55, (uint64_t)v56, &qword_1013E1B50);
    sub_1004B84A4((uint64_t)v4, type metadata accessor for CRLWPShapeItemCRDTData);
    swift_release(v6);
    sub_1004C4938((uint64_t)v56, (uint64_t)&v57, &qword_1013E1B50);
    if (sub_100562DF8((uint64_t)&v57) == 1)
    {

      return 0;
    }
    v36 = v82;
    v34 = v80;
    v31 = v81;
    v35 = v78;
    v32 = v79;
    v30 = v76;
    v29 = v77;
    v28 = v74;
    v27 = v75;
    v25 = v67;
    v26 = v68;
    v23 = v69;
    v24 = v70;
    v21 = v71;
    v22 = v72;
    v18 = v73;
    v33 = v65;
    v9 = v66;
    v20 = v63;
    v11 = v64;
    v12 = v62;
    v13 = v61;
    v14 = v59;
    v15 = v60;
    v19 = v57;
    v16 = v58;
  }
  else
  {
    sub_1004C4938((uint64_t)v83, (uint64_t)&v57, &qword_1013E1B50);
    v52 = v80;
    v53 = v78;
    v54 = v82;
    v50 = v79;
    v51 = v81;
    v49 = v76;
    v48 = v77;
    v47 = v74;
    v46 = v75;
    v43 = v68;
    v44 = v67;
    v41 = v70;
    v42 = v69;
    v39 = v72;
    v40 = v71;
    v45 = v65;
    v9 = v66;
    v10 = v63;
    v11 = v64;
    v12 = v62;
    v13 = v61;
    v14 = v59;
    v15 = v60;
    v37 = v57;
    v38 = v73;
    v16 = v58;
    v17 = a1;
    v19 = v37;
    v18 = v38;
    v20 = v10;
    v22 = v39;
    v21 = v40;
    v24 = v41;
    v23 = v42;
    v26 = v43;
    v25 = v44;
    v27 = v46;
    v28 = v47;
    v29 = v48;
    v30 = v49;
    v32 = v50;
    v31 = v51;
    v33 = v45;
    v34 = v52;
    v35 = v53;
    v36 = v54;
  }
  v57 = v19;
  v58 = v16;
  v59 = v14;
  v60 = v15;
  v61 = v13;
  v62 = v12;
  v63 = v20;
  v64 = v11;
  v65 = v33;
  v66 = v9;
  v67 = v25;
  v68 = v26;
  v69 = v23;
  v70 = v24;
  v71 = v21;
  v72 = v22;
  v73 = v18;
  v74 = v28;
  v75 = v27;
  v76 = v30;
  v77 = v29;
  v78 = v35;
  v79 = v32;
  v80 = v34;
  v81 = v31;
  v82 = v36;
  sub_1006A1C78(v83, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1006A1CF4);
  sub_1007844D4((uint64_t)&v57);

  if (v9 == 255)
    return 0;
  if ((v9 & 1) != 0)
    return 0;
  else
    return v33;
}

id sub_1007E85E4(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  int v16;
  char v17;
  char v18;
  id v19;
  __int128 v20;
  __int128 v21;
  char v22;
  uint64_t v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  CGColorSpace *v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _BYTE v87[248];
  int v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  char v101;
  int v102;
  char v103;
  char v104;
  char v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  __int128 v123;
  unsigned __int8 v124;
  uint64_t v125;
  unsigned __int8 v126;
  uint64_t v127;
  unsigned __int8 v128;
  uint64_t v129;
  unsigned __int8 v130;
  uint64_t v131;
  _QWORD v132[31];
  _BYTE v133[264];

  v2 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v63 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
    return objc_msgSend((id)objc_opt_self(CRLColorFill), "blackColor");
  sub_1004C4938((uint64_t)&a1[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemTextPresetOverride], (uint64_t)v132, &qword_1013E1B50);
  sub_1004C4938((uint64_t)v132, (uint64_t)v133, &qword_1013E1B50);
  result = (id)sub_100562DF8((uint64_t)v133);
  if ((_DWORD)result == 1)
  {
    v6 = *(_QWORD *)&a1[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData];
    if (!v6)
    {
      __break(1u);
      return result;
    }
    (*(void (**)(void))(*(_QWORD *)v6 + 760))();
    v7 = a1;
    swift_retain(v6);
    v8 = sub_1004B804C(&qword_1013F3C70);
    CRRegister.wrappedValue.getter(v8);
    sub_1004C4938((uint64_t)v87, (uint64_t)&v88, &qword_1013E1B50);
    sub_1004B84A4((uint64_t)v4, type metadata accessor for CRLWPShapeItemCRDTData);
    swift_release(v6);
    sub_1004C4938((uint64_t)&v88, (uint64_t)&v100, &qword_1013E1B50);
    if (sub_100562DF8((uint64_t)&v100) == 1)
    {

      return objc_msgSend((id)objc_opt_self(CRLColorFill), "blackColor");
    }
    v30 = v131;
    v31 = v129;
    v29 = v130;
    v28 = v127;
    v27 = v128;
    v26 = v125;
    v24 = v126;
    v25 = v124;
    v34 = v110;
    v75 = v111;
    v76 = a1;
    v79 = v113;
    v80 = v112;
    v78 = v114;
    v81 = v115;
    v37 = v116;
    v38 = v117;
    v35 = v118;
    v32 = v119;
    v36 = v120;
    v33 = v121;
    v82 = v122;
    v20 = v123;
    v10 = v108;
    v11 = v109;
    v23 = v106;
    v22 = v107;
    v14 = v105;
    v15 = v104;
    v16 = v102;
    v17 = v103;
    v21 = v100;
    v18 = v101;
  }
  else
  {
    sub_1004C4938((uint64_t)v132, (uint64_t)&v100, &qword_1013E1B50);
    v73 = v129;
    v74 = v131;
    v72 = v130;
    v71 = v127;
    v70 = v128;
    v69 = v125;
    v67 = v124;
    v68 = v126;
    v75 = v111;
    v80 = v112;
    v9 = a1;
    v79 = v113;
    v77 = v110;
    v78 = v114;
    v66 = v116;
    v65 = v117;
    v84 = v118;
    v86 = v119;
    v83 = v120;
    v85 = v121;
    v81 = v115;
    v82 = v122;
    v10 = v108;
    v11 = v109;
    v12 = v106;
    v13 = v107;
    v14 = v105;
    v15 = v104;
    v16 = v102;
    v17 = v103;
    v63 = v100;
    v64 = v123;
    v18 = v101;
    v76 = v9;
    v19 = v9;
    v21 = v63;
    v20 = v64;
    v22 = v13;
    v23 = v12;
    v25 = v67;
    v24 = v68;
    v26 = v69;
    v27 = v70;
    v28 = v71;
    v29 = v72;
    v31 = v73;
    v30 = v74;
    v33 = v85;
    v32 = v86;
    v34 = v77;
    v36 = v83;
    v35 = v84;
    v38 = v65;
    v37 = v66;
  }
  v83 = v36;
  v84 = v35;
  v85 = v33;
  v86 = v32;
  v100 = v21;
  v101 = v18;
  v102 = v16;
  v103 = v17;
  v104 = v15;
  v105 = v14;
  v106 = v23;
  v107 = v22;
  v108 = v10;
  v109 = v11;
  v39 = v34;
  v110 = v34;
  v40 = v75;
  v111 = v75;
  v42 = v79;
  v41 = v80;
  v112 = v80;
  v113 = v79;
  v43 = v78;
  v114 = v78;
  v45 = v81;
  v44 = v82;
  v115 = v81;
  v116 = v37;
  v117 = v38;
  v118 = v35;
  v119 = v32;
  v120 = v36;
  v121 = v33;
  v122 = v82;
  v123 = v20;
  v124 = v25;
  v125 = v26;
  v126 = v24;
  v127 = v28;
  v128 = v27;
  v129 = v31;
  v130 = v29;
  v74 = v20;
  v131 = v30;
  v46 = v34;
  v47 = v37;
  v48 = v38;
  sub_1004C485C(v46, v75, v80, v79, v78, v81, v37, v38, v35, v32, v36, v33, v82, v20);
  sub_1006A1C78(v132, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1006A1CF4);
  sub_1007844D4((uint64_t)&v100);
  if (!v44)
  {

    return objc_msgSend((id)objc_opt_self(CRLColorFill), "blackColor");
  }
  v49 = v39;
  v50 = v41;
  v77 = v49;
  sub_1004B8930(0, (unint64_t *)&qword_1013FBC20, off_101229840);
  v88 = v41;
  v89 = BYTE4(v41) & 1;
  v90 = v42;
  v91 = v43;
  v81 = v45;
  v92 = v45;
  v93 = v47;
  v94 = v48;
  v95 = v84;
  v51 = v86;
  v96 = v86;
  v52 = v82;
  v97 = v83;
  v98 = v85;
  v99 = v82;
  swift_bridgeObjectRetain(v85);
  swift_bridgeObjectRetain(v52);
  swift_bridgeObjectRetain(v47);
  swift_bridgeObjectRetain(v51);
  v53 = sub_1006C52C0((uint64_t)&v88);
  if ((v40 & 1) != 0)
  {
    v56 = v40;
    v79 = v42;
    v80 = v50;
    v78 = v43;
    v57 = v85;
    v58 = v86;
    v60 = v83;
    v59 = v84;
    if (qword_1013DD868 != -1)
      swift_once(&qword_1013DD868, sub_100A05844);
    swift_beginAccess(&static OS_os_log.persistence, v87, 0, 0);
    v61 = (id)static OS_os_log.persistence;
    v62 = static os_log_type_t.info.getter();
    sub_100A06EBC((uint64_t)v61, &_mh_execute_header, v62, "Tried to decode unknown fill value. Falling back to unarchiving color fill.", 75, 2, (uint64_t)_swiftEmptyArrayStorage);

    v55 = objc_msgSend(objc_allocWithZone((Class)CRLColorFill), "initWithColor:", v53);
    sub_1004C4174(v77, v56, v80, v79, v78, v81, v47, v48, v59, v58, v60, v57, v82, v74);
  }
  else
  {
    v54 = v40;
    v55 = objc_msgSend(objc_allocWithZone((Class)CRLColorFill), "initWithColor:", v53);

    sub_1004C4174(v77, v54, v50, v42, v43, v81, v47, v48, v84, v86, v83, v85, v82, v74);
  }

  return v55;
}

uint64_t sub_1007E8C64(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  int v14;
  char v15;
  char v16;
  char *v17;
  char v18;
  __int128 v19;
  __int128 v20;
  int v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  unsigned __int8 v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  unsigned __int8 v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE v57[248];
  __int128 v58;
  char v59;
  int v60;
  char v61;
  char v62;
  char v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  char v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  unsigned __int8 v76;
  uint64_t v77;
  unsigned __int8 v78;
  uint64_t v79;
  unsigned __int8 v80;
  uint64_t v81;
  unsigned __int8 v82;
  uint64_t v83;
  _QWORD v84[31];
  _BYTE v85[256];

  v2 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
    return 4;
  sub_1004C4938((uint64_t)&a1[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemTextPresetOverride], (uint64_t)v84, &qword_1013E1B50);
  sub_1004C4938((uint64_t)v84, (uint64_t)v85, &qword_1013E1B50);
  result = sub_100562DF8((uint64_t)v85);
  if ((_DWORD)result == 1)
  {
    v6 = *(_QWORD *)&a1[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData];
    if (!v6)
    {
      __break(1u);
      return result;
    }
    (*(void (**)(void))(*(_QWORD *)v6 + 760))();
    v7 = a1;
    swift_retain(v6);
    v8 = sub_1004B804C(&qword_1013F3C70);
    CRRegister.wrappedValue.getter(v8);
    sub_1004C4938((uint64_t)&v56, (uint64_t)v57, &qword_1013E1B50);
    sub_1004B84A4((uint64_t)v4, type metadata accessor for CRLWPShapeItemCRDTData);
    swift_release(v6);
    sub_1004C4938((uint64_t)v57, (uint64_t)&v58, &qword_1013E1B50);
    if (sub_100562DF8((uint64_t)&v58) == 1)
    {

      return 4;
    }
    v36 = v83;
    v37 = v81;
    v35 = v82;
    v34 = v79;
    v33 = v80;
    v31 = v77;
    v29 = v78;
    v32 = v75;
    v30 = v76;
    v28 = v68;
    v26 = v69;
    v27 = v70;
    v25 = v71;
    v23 = v72;
    v24 = v73;
    v19 = v74;
    v22 = v66;
    v9 = v67;
    v10 = v64;
    v11 = v65;
    v12 = v63;
    v13 = v62;
    v21 = v60;
    v15 = v61;
    v20 = v58;
    v18 = v59;
  }
  else
  {
    sub_1004C4938((uint64_t)v84, (uint64_t)&v58, &qword_1013E1B50);
    v54 = v83;
    v55 = v81;
    v53 = v82;
    v52 = v79;
    v51 = v80;
    v49 = v77;
    v50 = v75;
    v47 = v76;
    v48 = v78;
    v45 = v69;
    v46 = v68;
    v44 = v70;
    v41 = v72;
    v42 = v71;
    v39 = v74;
    v40 = v73;
    v43 = v66;
    v9 = v67;
    v10 = v64;
    v11 = v65;
    v12 = v63;
    v13 = v62;
    v14 = v60;
    v15 = v61;
    v38 = v58;
    v16 = v59;
    v17 = a1;
    v18 = v16;
    v20 = v38;
    v19 = v39;
    v21 = v14;
    v22 = v43;
    v24 = v40;
    v23 = v41;
    v25 = v42;
    v27 = v44;
    v26 = v45;
    v28 = v46;
    v30 = v47;
    v29 = v48;
    v31 = v49;
    v32 = v50;
    v33 = v51;
    v34 = v52;
    v35 = v53;
    v36 = v54;
    v37 = v55;
  }
  v58 = v20;
  v59 = v18;
  v60 = v21;
  v61 = v15;
  v62 = v13;
  v63 = v12;
  v64 = v10;
  v65 = v11;
  v66 = v22;
  v67 = v9;
  v68 = v28;
  v69 = v26;
  v70 = v27;
  v71 = v25;
  v72 = v23;
  v73 = v24;
  v74 = v19;
  v75 = v32;
  v76 = v30;
  v77 = v31;
  v78 = v29;
  v79 = v34;
  v80 = v33;
  v81 = v37;
  v82 = v35;
  v83 = v36;
  sub_1006A1C78(v84, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1006A1CF4);
  sub_1007844D4((uint64_t)&v58);

  if (v30 == 255)
    return 4;
  if ((v30 & 1) != 0)
    return 4;
  else
    return v32;
}

uint64_t sub_1007E8FB0(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  int v14;
  char v15;
  char v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  unsigned __int8 v28;
  uint64_t v29;
  unsigned __int8 v30;
  int v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  int v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE v56[248];
  __int128 v57;
  char v58;
  int v59;
  char v60;
  char v61;
  char v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  char v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  unsigned __int8 v75;
  uint64_t v76;
  unsigned __int8 v77;
  uint64_t v78;
  unsigned __int8 v79;
  uint64_t v80;
  unsigned __int8 v81;
  uint64_t v82;
  _QWORD v83[31];
  _BYTE v84[256];

  v2 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
    return -1;
  sub_1004C4938((uint64_t)&a1[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemTextPresetOverride], (uint64_t)v83, &qword_1013E1B50);
  sub_1004C4938((uint64_t)v83, (uint64_t)v84, &qword_1013E1B50);
  result = sub_100562DF8((uint64_t)v84);
  if ((_DWORD)result == 1)
  {
    v6 = *(_QWORD *)&a1[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData];
    if (!v6)
    {
      __break(1u);
      return result;
    }
    (*(void (**)(void))(*(_QWORD *)v6 + 760))();
    v7 = a1;
    swift_retain(v6);
    v8 = sub_1004B804C(&qword_1013F3C70);
    CRRegister.wrappedValue.getter(v8);
    sub_1004C4938((uint64_t)&v55, (uint64_t)v56, &qword_1013E1B50);
    sub_1004B84A4((uint64_t)v4, type metadata accessor for CRLWPShapeItemCRDTData);
    swift_release(v6);
    sub_1004C4938((uint64_t)v56, (uint64_t)&v57, &qword_1013E1B50);
    if (sub_100562DF8((uint64_t)&v57) == 1)
    {

      return -1;
    }
    v34 = v82;
    v35 = v80;
    v33 = v81;
    v32 = v78;
    v30 = v79;
    v54 = v76;
    v31 = v77;
    v29 = v74;
    v28 = v75;
    v27 = v67;
    v25 = v68;
    v26 = v69;
    v24 = v70;
    v22 = v71;
    v23 = v72;
    v18 = v73;
    v21 = v65;
    v9 = v66;
    v10 = v63;
    v11 = v64;
    v12 = v62;
    v13 = v61;
    v20 = v59;
    v15 = v60;
    v19 = v57;
    v16 = v58;
  }
  else
  {
    sub_1004C4938((uint64_t)v83, (uint64_t)&v57, &qword_1013E1B50);
    v52 = v80;
    v53 = v82;
    v51 = v81;
    v50 = v78;
    v54 = v76;
    v48 = v77;
    v49 = v79;
    v47 = v74;
    v46 = v75;
    v44 = v68;
    v45 = v67;
    v43 = v69;
    v40 = v71;
    v41 = v70;
    v38 = v73;
    v39 = v72;
    v42 = v65;
    v9 = v66;
    v10 = v63;
    v11 = v64;
    v12 = v62;
    v13 = v61;
    v14 = v59;
    v15 = v60;
    v37 = v57;
    v16 = v58;
    v17 = a1;
    v19 = v37;
    v18 = v38;
    v20 = v14;
    v21 = v42;
    v23 = v39;
    v22 = v40;
    v24 = v41;
    v26 = v43;
    v25 = v44;
    v27 = v45;
    v28 = v46;
    v29 = v47;
    v31 = v48;
    v30 = v49;
    v32 = v50;
    v33 = v51;
    v35 = v52;
    v34 = v53;
  }
  v57 = v19;
  v58 = v16;
  v59 = v20;
  v60 = v15;
  v61 = v13;
  v62 = v12;
  v63 = v10;
  v64 = v11;
  v65 = v21;
  v66 = v9;
  v67 = v27;
  v68 = v25;
  v69 = v26;
  v70 = v24;
  v71 = v22;
  v72 = v23;
  v73 = v18;
  v74 = v29;
  v75 = v28;
  v36 = v54;
  v76 = v54;
  v77 = v31;
  v78 = v32;
  v79 = v30;
  v80 = v35;
  v81 = v33;
  v82 = v34;
  sub_1006A1C78(v83, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1006A1CF4);
  sub_1007844D4((uint64_t)&v57);

  if (v31 == 255)
    return -1;
  if ((v31 & 1) != 0)
    return -1;
  else
    return v36;
}

id sub_1007E9300(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  NSURL *v17;
  void *v18;
  void *v19;
  id v20;
  NSString v21;
  NSString v22;
  id v23;
  uint64_t v25;
  uint64_t v26;

  v4 = sub_1004B804C(&qword_1013E04D0);
  __chkstk_darwin(v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CRLWPHyperlinkSmartFieldData(0);
  v8 = (uint64_t *)(a1 + *(int *)(v7 + 24));
  v9 = v8[1];
  v10 = sub_1007DC71C(*v8, v9);
  v12 = v11;
  sub_1004CB7BC(a1 + *(int *)(v7 + 20), (uint64_t)v6, &qword_1013E04D0);
  v26 = v10;
  v13 = objc_msgSend(a2, "stringEquivalentFromRange:", v10, v12);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v13);

  v14 = type metadata accessor for URL(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v6, 1, v14);
  swift_bridgeObjectRetain(v9);
  v18 = 0;
  if (v16 != 1)
  {
    URL._bridgeToObjectiveC()(v17);
    v18 = v19;
    (*(void (**)(char *, uint64_t))(v15 + 8))(v6, v14);
  }
  v20 = objc_allocWithZone((Class)CRLWPHyperlinkField);
  v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v22 = String._bridgeToObjectiveC()();
  v23 = objc_msgSend(v20, "initWithURL:range:displayText:uuidString:", v18, v26, v12, v21, v22, swift_bridgeObjectRelease().n128_f64[0]);

  return v23;
}

_QWORD *sub_1007E94CC()
{
  uint64_t KeyPath;
  uint64_t v1;
  unint64_t v2;
  __n128 v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSString *v10;
  uint64_t v11;
  id v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  unint64_t v15;
  __n128 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSString *v22;
  uint64_t v23;
  id v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  CGColorSpace *v43;
  CGColorSpace *v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  id v50;
  NSString *v51;
  id v52;
  char v53;
  id v54;
  void *v55;
  NSString *v56;
  id v57;
  char v58;
  uint64_t v59;
  unint64_t v60;
  __n128 v61;
  unint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  __n128 v67;
  float v68;
  int v69;
  uint64_t v70;
  unint64_t v71;
  __n128 v72;
  int v73;
  uint64_t v74;
  unint64_t v75;
  __n128 v76;
  char v77;
  int v78;
  int v79;
  double v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  NSString v84;
  id v85;
  const __CTFont *v86;
  CTFontSymbolicTraits v87;
  CTFontRef CopyWithSymbolicTraits;
  CTFontRef v89;
  uint64_t v90;
  NSString *v91;
  const __CTFont *v92;
  char v93;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103[24];
  _QWORD *v104;
  _OWORD v105[2];
  __int128 v106;
  unsigned __int8 v107;
  uint64_t v108;
  char v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;

  KeyPath = swift_getKeyPath(&unk_100F0DD50);
  v1 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
  v2 = sub_10073DCA0();
  CRAttributedString.Attributes.subscript.getter(&v110, KeyPath, v1, v2, v3);
  swift_release(KeyPath);
  if (BYTE8(v110) == 255)
  {
    v4 = _swiftEmptyDictionarySingleton;
  }
  else
  {
    v5 = v110;
    v6 = BYTE8(v110) & 1;
    BYTE8(v110) &= 1u;
    *(_QWORD *)&v106 = 0;
    BYTE8(v106) = 0;
    type metadata accessor for CRLWPUnderline(0);
    v8 = v7;
    v9 = sub_1005034A0((unint64_t *)&unk_1013E8740, 255, (uint64_t (*)(uint64_t))type metadata accessor for CRLWPUnderline, (uint64_t)&unk_100EF2074);
    v4 = _swiftEmptyDictionarySingleton;
    if ((static CRExtensible.== infix(_:_:)(&v110, &v106, v8, v9, &protocol witness table for Int, &protocol witness table for Int) & 1) == 0)
    {
      *(_QWORD *)&v110 = v5;
      BYTE8(v110) = v6;
      v10 = NSUnderlineStyleAttributeName;
      v11 = sub_1004B804C(&qword_1013E8738);
      CRExtensible.rawValue.getter(&v106, v11);
      v12 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", (_QWORD)v106);
      v112 = sub_1004B8930(0, (unint64_t *)&qword_1013F07F0, NSNumber_ptr);
      *(_QWORD *)&v110 = v12;
      sub_10050CB14(&v110, &v106);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
      *(_QWORD *)&v105[0] = _swiftEmptyDictionarySingleton;
      sub_100826134(&v106, v10, isUniquelyReferenced_nonNull_native);
      v4 = _swiftEmptyDictionarySingleton;

      swift_bridgeObjectRelease(0x8000000000000000);
    }
  }
  v14 = swift_getKeyPath(&unk_100F0DCF8);
  v15 = sub_10073DC5C();
  CRAttributedString.Attributes.subscript.getter(&v110, v14, v1, v15, v16);
  swift_release(v14);
  if (BYTE8(v110) != 255)
  {
    v17 = v110;
    v18 = BYTE8(v110) & 1;
    BYTE8(v110) &= 1u;
    *(_QWORD *)&v106 = 0;
    BYTE8(v106) = 0;
    type metadata accessor for CRLWPStrikethru(0);
    v20 = v19;
    v21 = sub_1005034A0(&qword_1013E8730, 255, (uint64_t (*)(uint64_t))type metadata accessor for CRLWPStrikethru, (uint64_t)&unk_100EF1FB4);
    if ((static CRExtensible.== infix(_:_:)(&v110, &v106, v20, v21, &protocol witness table for Int, &protocol witness table for Int) & 1) == 0)
    {
      *(_QWORD *)&v110 = v17;
      BYTE8(v110) = v18;
      v22 = NSStrikethroughStyleAttributeName;
      v23 = sub_1004B804C(&qword_1013F3800);
      CRExtensible.rawValue.getter(&v106, v23);
      v24 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", (_QWORD)v106);
      v112 = sub_1004B8930(0, (unint64_t *)&qword_1013F07F0, NSNumber_ptr);
      *(_QWORD *)&v110 = v24;
      sub_10050CB14(&v110, &v106);
      v25 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
      *(_QWORD *)&v105[0] = _swiftEmptyDictionarySingleton;
      sub_100826134(&v106, v22, v25);

      swift_bridgeObjectRelease(0x8000000000000000);
    }
  }
  v26 = swift_getKeyPath(&unk_100F0DB40);
  v27 = sub_1007E678C();
  CRAttributedString.Attributes.subscript.getter(&v110, v26, v1, v27, v28);
  swift_release(v26);
  if (v121)
  {
    v100 = v1;
    v101 = v121;
    v98 = v110;
    v29 = v111;
    v102 = *((_QWORD *)&v110 + 1);
    v31 = v112;
    v30 = v113;
    v32 = v114;
    v33 = v115;
    v34 = v116;
    v35 = v117;
    v37 = v118;
    v36 = v119;
    v38 = v120;
    v96 = v122;
    sub_1004B8930(0, (unint64_t *)&qword_1013FBC20, off_101229840);
    v95 = v29;
    LODWORD(v110) = v29;
    BYTE4(v110) = BYTE4(v29) & 1;
    v97 = v31;
    *((_QWORD *)&v110 + 1) = v31;
    v111 = v30;
    v39 = v35;
    v40 = v30;
    v99 = v32;
    v112 = v32;
    v113 = v33;
    v41 = v34;
    v114 = v34;
    v115 = v39;
    v42 = v33;
    v116 = v37;
    v117 = v36;
    v118 = v38;
    v119 = v101;
    swift_bridgeObjectRetain(v38);
    swift_bridgeObjectRetain(v101);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v37);
    v43 = sub_1006C52C0((uint64_t)&v110);
    v44 = v43;
    if ((v102 & 1) != 0)
    {
      if (qword_1013DD868 != -1)
        swift_once(&qword_1013DD868, sub_100A05844);
      swift_beginAccess(&static OS_os_log.persistence, v103, 0, 0);
      v46 = (id)static OS_os_log.persistence;
      v47 = static os_log_type_t.info.getter();
      sub_100A06EBC((uint64_t)v46, &_mh_execute_header, v47, "Tried to decode unknown fill value. Falling back to unarchiving color fill.", 75, 2, (uint64_t)_swiftEmptyArrayStorage);

      v45 = objc_msgSend(objc_allocWithZone((Class)CRLColorFill), "initWithColor:", v44);
      sub_1004C4174(v98, v102, v95, v97, v40, v99, v42, v41, v39, v37, v36, v38, v101, v96);
    }
    else
    {
      v45 = objc_msgSend(objc_allocWithZone((Class)CRLColorFill), "initWithColor:", v43);

      sub_1004C4174(v98, v102, v95, v97, v40, v99, v33, v41, v39, v37, v36, v38, v101, v96);
    }
    v48 = objc_opt_self(CRLColorFill);
    v49 = (void *)swift_dynamicCastObjCClass(v45, v48);
    v1 = v100;
    if (v49)
    {
      v50 = v45;
      v51 = NSForegroundColorAttributeName;
      v52 = objc_msgSend(v49, "UIColor");
      v108 = sub_1004B8930(0, (unint64_t *)&qword_1013F4260, UIColor_ptr);
      *(_QWORD *)&v106 = v52;
      sub_10050CB14(&v106, v105);
      v53 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
      v104 = _swiftEmptyDictionarySingleton;
      sub_100826134(v105, v51, v53);
      v4 = v104;

      swift_bridgeObjectRelease(0x8000000000000000);
    }
    else
    {
      v54 = objc_msgSend(v45, "referenceColor");
      v4 = _swiftEmptyDictionarySingleton;
      if (v54)
      {
        v55 = v54;
        v56 = NSForegroundColorAttributeName;
        v57 = objc_msgSend(v55, "UIColor");
        v108 = sub_1004B8930(0, (unint64_t *)&qword_1013F4260, UIColor_ptr);
        *(_QWORD *)&v106 = v57;
        sub_10050CB14(&v106, v105);
        v58 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
        v104 = _swiftEmptyDictionarySingleton;
        sub_100826134(v105, v56, v58);
        v4 = v104;

        swift_bridgeObjectRelease(0x8000000000000000);
      }
      else
      {

      }
    }
  }
  v59 = swift_getKeyPath(&unk_100F0DB98);
  v60 = sub_1007E6618();
  CRAttributedString.Attributes.subscript.getter(&v106, v59, v1, v60, v61);
  swift_release(v59);
  v62 = *((_QWORD *)&v106 + 1);
  v63 = v106;
  v64 = v107;
  v65 = swift_getKeyPath(&unk_100F0DBF0);
  v66 = sub_1007395C4();
  CRAttributedString.Attributes.subscript.getter(v105, v65, v1, v66, v67);
  swift_release(v65);
  v68 = *(float *)v105;
  v69 = BYTE4(v105[0]);
  v70 = swift_getKeyPath(&unk_100F0DCA0);
  v71 = sub_10073DD28();
  CRAttributedString.Attributes.subscript.getter(&v104, v70, v1, v71, v72);
  swift_release(v70);
  v73 = v104;
  v74 = swift_getKeyPath(&unk_100F0DC48);
  v75 = sub_10073DCE4();
  CRAttributedString.Attributes.subscript.getter(&v109, v74, v1, v75, v76);
  swift_release(v74);
  v77 = v109;
  if (v64 != 255)
  {
    v78 = v64 & 1;
LABEL_27:
    if (v69)
      v80 = 18.0;
    else
      v80 = v68;
    v81 = objc_msgSend((id)objc_opt_self(CRLWPFontList), "sharedInstance");
    *(_QWORD *)&v106 = v63;
    *((_QWORD *)&v106 + 1) = v62;
    v107 = v78;
    v82 = sub_1004B804C(&qword_1013F3890);
    CRExtensible.rawValue.getter(v105, v82);
    v83 = *((_QWORD *)&v105[0] + 1);
    v84 = String._bridgeToObjectiveC()();
    v85 = objc_msgSend(v81, "fontForPostscriptName:", v84, swift_bridgeObjectRelease(v83).n128_f64[0]);

    v86 = (const __CTFont *)objc_msgSend(v85, "platformFont");
    if (v78)
    {
      sub_1004C4230(v63, v62, 1);
      v87 = 0;
    }
    else
    {
      sub_1004C4230(v63, v62, 0);
      v87 = 0;
      if (v62 >= 9)
        v87 = v77 & 1 | (2 * (v73 & 1));
    }
    CopyWithSymbolicTraits = CTFontCreateCopyWithSymbolicTraits(v86, v80, 0, v87, v87);
    if (CopyWithSymbolicTraits)
    {
      v89 = CopyWithSymbolicTraits;
      type metadata accessor for CTFont(0);
      v108 = v90;
      *(_QWORD *)&v106 = v89;
      sub_10050CB14(&v106, v105);
      v91 = NSFontAttributeName;
      v92 = v89;
      v93 = swift_isUniquelyReferenced_nonNull_native(v4);
      v104 = v4;
      sub_100826134(v105, v91, v93);
      v4 = v104;

      swift_bridgeObjectRelease(0x8000000000000000);
    }
    else
    {

    }
    return v4;
  }
  v78 = 0;
  if (v73 == 2)
    v79 = v69;
  else
    v79 = 0;
  v62 = 0xE900000000000061;
  v63 = 0x63697465766C6548;
  if (v79 != 1 || v109 != 2)
    goto LABEL_27;
  return v4;
}

id sub_1007E9E68(uint64_t a1)
{
  uint64_t KeyPath;
  uint64_t v3;
  unint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  CGColorSpace *v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34[24];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  sub_1007393D0();
  KeyPath = swift_getKeyPath(&unk_100F0DE68);
  swift_retain(a1);
  v3 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
  v4 = sub_1007E678C();
  CRAttributedString.Attributes.subscript.getter(&v35, KeyPath, v3, v4, v5);
  swift_release(KeyPath);
  v6 = v47;
  if (!v47)
    return 0;
  v32 = v35;
  v7 = v37;
  v9 = v38;
  v8 = v39;
  v10 = v40;
  v33 = v41;
  v11 = v42;
  v12 = v43;
  v13 = v44;
  v14 = v45;
  v15 = v46;
  v28 = v36;
  v29 = v48;
  sub_1004B8930(0, (unint64_t *)&qword_1013FBC20, off_101229840);
  LODWORD(v35) = v7;
  v30 = v7;
  v31 = v9;
  v16 = v14;
  v17 = v6;
  BYTE4(v35) = BYTE4(v7) & 1;
  v36 = v9;
  v37 = v8;
  v18 = v8;
  v19 = v10;
  v38 = v10;
  v20 = v13;
  v39 = v33;
  v40 = v11;
  v21 = v11;
  v41 = v12;
  v42 = v13;
  v22 = v16;
  v43 = v16;
  v44 = v15;
  v45 = v6;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain(v13);
  v23 = sub_1006C52C0((uint64_t)&v35);
  if ((v28 & 1) != 0)
  {
    if (qword_1013DD868 != -1)
      swift_once(&qword_1013DD868, sub_100A05844);
    swift_beginAccess(&static OS_os_log.persistence, v34, 0, 0);
    v25 = (id)static OS_os_log.persistence;
    v26 = static os_log_type_t.info.getter();
    sub_100A06EBC((uint64_t)v25, &_mh_execute_header, v26, "Tried to decode unknown fill value. Falling back to unarchiving color fill.", 75, 2, (uint64_t)_swiftEmptyArrayStorage);

    v24 = objc_msgSend(objc_allocWithZone((Class)CRLColorFill), "initWithColor:", v23);
    sub_1004C4174(v32, v28, v30, v31, v18, v19, v33, v21, v12, v20, v22, v15, v17, v29);
  }
  else
  {
    v24 = objc_msgSend(objc_allocWithZone((Class)CRLColorFill), "initWithColor:", v23);

    sub_1004C4174(v32, v28, v30, v31, v18, v19, v33, v21, v12, v20, v22, v15, v17, v29);
  }
  return v24;
}

_BYTE *sub_1007EA134()
{
  objc_class *v0;
  char **v1;
  _BYTE *v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __n128 v15;
  int v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __n128 v22;
  int v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  __n128 v29;
  unsigned __int8 v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  __n128 v42;
  char v43;
  char *v44;
  uint64_t v45;
  id v46;
  void *v47;
  id v48;
  char v49;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unsigned __int8 v55;

  v0 = (objc_class *)type metadata accessor for CRLWPCharacterStyle();
  v1 = &selRef_imageWithSystemImageNamed_pointSize_;
  v2 = objc_msgSend(objc_allocWithZone(v0), "init");
  KeyPath = swift_getKeyPath(&unk_100F0DCA0);
  sub_1007394EC();
  v4 = swift_getKeyPath(&unk_100F0DE68);
  swift_retain(KeyPath);
  v5 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
  v6 = sub_10073DD28();
  CRAttributedString.Attributes.subscript.getter(&v53, v4, v5, v6, v7);
  swift_release(KeyPath);
  swift_release(v4);
  v2[OBJC_IVAR____TtC8Freeform19CRLWPCharacterStyle_bold] = v53;
  v8 = swift_getKeyPath(&unk_100F0DC48);
  sub_1007394A8();
  v9 = swift_getKeyPath(&unk_100F0DE68);
  v10 = sub_10073DCE4();
  v11 = swift_retain(v8);
  CRAttributedString.Attributes.subscript.getter(&v53, v9, v5, v10, v11);
  swift_release(v8);
  swift_release(v9);
  v2[OBJC_IVAR____TtC8Freeform19CRLWPCharacterStyle_italic] = v53;
  v12 = swift_getKeyPath(&unk_100F0DD50);
  v51 = sub_100739464();
  v52 = v12;
  v13 = swift_getKeyPath(&unk_100F0DE68);
  v14 = sub_10073DCA0();
  v15 = swift_retain(v12);
  CRAttributedString.Attributes.subscript.getter(&v53, v13, v5, v14, v15);
  swift_release(v12);
  swift_release(v13);
  v16 = v54;
  if (v54 == 255)
  {
    v17 = 0;
  }
  else
  {
    v17 = v53;
    if ((v54 & 1) != 0)
      v17 = 0;
  }
  v18 = &v2[OBJC_IVAR____TtC8Freeform19CRLWPCharacterStyle_underline];
  *(_QWORD *)v18 = v17;
  v18[8] = v16 == 255;
  v19 = swift_getKeyPath(&unk_100F0DCF8);
  __chkstk_darwin(v19);
  sub_100739420();
  v20 = swift_getKeyPath(&unk_100F0DE68);
  v21 = sub_10073DC5C();
  v22 = swift_retain(v19);
  CRAttributedString.Attributes.subscript.getter(&v53, v20, v5, v21, v22);
  swift_release(v19);
  swift_release(v20);
  v23 = v54;
  if (v54 == 255)
  {
    v24 = 0;
  }
  else
  {
    v24 = v53;
    if ((v54 & 1) != 0)
      v24 = 0;
  }
  v25 = &v2[OBJC_IVAR____TtC8Freeform19CRLWPCharacterStyle_strikethrough];
  *(_QWORD *)v25 = v24;
  v25[8] = v23 == 255;
  v26 = swift_getKeyPath(&unk_100F0DB98);
  __chkstk_darwin(v26);
  sub_100739574();
  v27 = swift_getKeyPath(&unk_100F0DE68);
  v28 = sub_1007E6618();
  v29 = swift_retain(v26);
  CRAttributedString.Attributes.subscript.getter(&v53, v27, v5, v28, v29);
  swift_release(v27);
  v30 = v55;
  if (v55 == 255)
  {
    swift_release(v26);
    v33 = 0;
    v35 = 0;
  }
  else
  {
    v32 = v53;
    v31 = v54;
    v33 = sub_1007E7398(v53, v54, v55 & 1);
    v35 = v34;
    v36 = v31;
    v1 = &selRef_imageWithSystemImageNamed_pointSize_;
    sub_1004C4218(v32, v36, v30);
    swift_release(v26);
  }
  v37 = (uint64_t *)&v2[OBJC_IVAR____TtC8Freeform19CRLWPCharacterStyle_fontName];
  v38 = *(_QWORD *)&v2[OBJC_IVAR____TtC8Freeform19CRLWPCharacterStyle_fontName + 8];
  *v37 = v33;
  v37[1] = v35;
  swift_bridgeObjectRelease(v38);
  v39 = swift_getKeyPath(&unk_100F0DBF0);
  __chkstk_darwin(v39);
  sub_100739530();
  v40 = swift_getKeyPath(&unk_100F0DE68);
  v41 = sub_1007395C4();
  v42 = swift_retain(v39);
  CRAttributedString.Attributes.subscript.getter(&v53, v40, v5, v41, v42);
  swift_release(v39);
  swift_release(v40);
  v43 = BYTE4(v53);
  v44 = &v2[OBJC_IVAR____TtC8Freeform19CRLWPCharacterStyle_fontSize];
  *(_DWORD *)v44 = v53;
  v44[4] = v43;
  v45 = swift_getKeyPath(&unk_100F0DB40);
  v46 = sub_1007E9E68(v45);
  swift_release(v45);
  v47 = *(void **)&v2[OBJC_IVAR____TtC8Freeform19CRLWPCharacterStyle_characterFill];
  *(_QWORD *)&v2[OBJC_IVAR____TtC8Freeform19CRLWPCharacterStyle_characterFill] = v46;

  v48 = objc_msgSend(objc_allocWithZone(v0), v1[96], &type metadata for CRLWPUnderlineAttribute, v51, v52);
  v49 = sub_100A1586C((uint64_t)v2, (uint64_t)v48);

  if ((v49 & 1) != 0)
  {

    return 0;
  }
  return v2;
}

int64_t sub_1007EA638(int64_t result, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  void *v16;
  char v17;
  id v18;
  id v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;

  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  v4 = *(_QWORD *)(a3 + 16);
  if (v4 <= a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v5 = result;
  if ((uint64_t)a2 < result)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if ((uint64_t)v4 < result)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (result < 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v6 = a2 - result;
  if (a2 == result)
  {
LABEL_21:
    v20 = _swiftEmptyArrayStorage[2];
    swift_release(_swiftEmptyArrayStorage);
    return v20 == 0;
  }
  if (a2 > result)
  {
    v7 = *(_QWORD *)(a3 + 56 * a2 + 64);
    swift_bridgeObjectRetain(a3);
    v8 = 56 * v5;
    do
    {
      v13 = a3 + v8;
      v14 = *(void **)(a3 + v8 + 56);
      if (*(_QWORD *)(a3 + v8 + 64) < v7 || v14 == 0)
      {
        v22 = *(_OWORD *)(a3 + v8 + 64);
        v21 = *(_OWORD *)(v13 + 32);
        v16 = *(void **)(v13 + 48);
        v17 = *(_BYTE *)(v13 + 80);
        v18 = v14;
        v19 = v16;
        if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
          sub_1006008C8(0, _swiftEmptyArrayStorage[2] + 1, 1);
        v10 = _swiftEmptyArrayStorage[2];
        v9 = _swiftEmptyArrayStorage[3];
        v11 = v22;
        if (v10 >= v9 >> 1)
        {
          sub_1006008C8(v9 > 1, v10 + 1, 1);
          v11 = v22;
        }
        _swiftEmptyArrayStorage[2] = v10 + 1;
        v12 = &_swiftEmptyArrayStorage[7 * v10];
        *((_OWORD *)v12 + 2) = v21;
        v12[6] = v19;
        v12[7] = v14;
        *((_OWORD *)v12 + 4) = v11;
        *((_BYTE *)v12 + 80) = v17;
      }
      v8 += 56;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease(a3);
    goto LABEL_21;
  }
LABEL_27:
  __break(1u);
  return result;
}

void sub_1007EA7E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CRLWPStorageCRDTData(0);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(a3 + OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData);
  if (!v17)
    goto LABEL_10;
  (*(void (**)(__n128))(*(_QWORD *)v17 + 760))(v14);
  sub_1004B8460((uint64_t)&v12[*(int *)(v10 + 20)], (uint64_t)v16, type metadata accessor for CRLWPStorageCRDTData);
  sub_1004B84A4((uint64_t)v12, type metadata accessor for CRLWPShapeItemCRDTData);
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v9, v16, v6);
  sub_1004B84A4((uint64_t)v16, type metadata accessor for CRLWPStorageCRDTData);
  v18 = CRAttributedString.count.getter(v6);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (v18 >= (a1 & ~(a1 >> 63)))
    v19 = a1 & ~(a1 >> 63);
  else
    v19 = v18;
  if (v18 >= (a2 & ~(a2 >> 63)))
    v20 = a2 & ~(a2 >> 63);
  else
    v20 = v18;
  if (v20 < v19)
  {
    __break(1u);
LABEL_10:
    __break(1u);
  }
}

void sub_1007EA98C(uint64_t a1, char *a2, unsigned int (*a3)(char *, uint64_t, uint64_t), uint64_t a4, void *a5, _QWORD *a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  char *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  _QWORD *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  void (*v47)(char *, char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  __n128 v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  NSURL *v82;
  void *v83;
  uint64_t v84;
  void *v85;
  id v86;
  NSString v87;
  NSString v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __n128 v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t KeyPath;
  char *v107;
  unint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  unint64_t v112;
  int64_t v113;
  int64_t v114;
  char isUniquelyReferenced_nonNull_native;
  int64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v120;
  BOOL v121;
  uint64_t v122;
  ValueMetadata *v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  __int128 v136;
  _QWORD *v137;
  unsigned int (*v138)(char *, uint64_t, uint64_t);
  void *v139;
  _QWORD *v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  _QWORD *v145;
  double *v146;
  uint64_t v147;
  char *v148;
  uint64_t *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  id v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  double *v160;

  v156 = a5;
  v153 = a4;
  v138 = a3;
  v141 = a1;
  v8 = sub_1004B804C(&qword_1013F3C80);
  v146 = *(double **)(v8 - 8);
  __chkstk_darwin(v8);
  v143 = (char *)&v126 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1004B804C(&qword_1013F3C78);
  __chkstk_darwin(v10);
  v142 = (char *)&v126 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = (_QWORD *)sub_1004B804C(&qword_1013F3D90);
  v130 = *(v137 - 1);
  __chkstk_darwin(v137);
  *(_QWORD *)&v136 = (char *)&v126 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v152 = sub_1004B804C(&qword_1013F3C90);
  v133 = *(_QWORD *)(v152 - 8);
  __chkstk_darwin(v152);
  v131 = (char *)&v126 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v150 = (char *)&v126 - v15;
  v16 = sub_1004B804C(&qword_1013E04D0);
  __chkstk_darwin(v16);
  v151 = (uint64_t)&v126 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for CRLWPHyperlinkSmartFieldData(0);
  v155 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v154 = (uint64_t)&v126 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v157 = sub_1004B804C((uint64_t *)&unk_1013E87B0);
  v147 = *(_QWORD *)(v157 - 8);
  __chkstk_darwin(v157);
  v149 = (uint64_t *)((char *)&v126 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = sub_1004B804C((uint64_t *)&unk_1013E87D0);
  __chkstk_darwin(v21);
  v148 = (char *)&v126 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v140 = (uint64_t *)((char *)&v126 - v24);
  v129 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
  v128 = *(_QWORD *)(v129 - 8);
  __chkstk_darwin(v129);
  v26 = (char *)&v126 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v27);
  v29 = (char *)&v126 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for CRLWPStorageCRDTData(0);
  __chkstk_darwin(v30);
  v32 = (char *)&v126 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = sub_1004B804C((uint64_t *)&unk_1013E8570);
  v135 = *(_QWORD *)(v134 - 8);
  __chkstk_darwin(v134);
  v132 = (char *)&v126 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v35 = __chkstk_darwin(v34).n128_u64[0];
  v37 = (char *)&v126 - v36;
  v160 = _swiftEmptyArrayStorage;
  v38 = objc_msgSend(a2, "characterCount", v35);
  v139 = a2;
  v39 = *(_QWORD *)&a2[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData];
  v144 = v18;
  v145 = a6;
  if (v38)
  {
    if (v39)
    {
      (*(void (**)(void))(*(_QWORD *)v39 + 760))();
      sub_1004B8460((uint64_t)&v29[*(int *)(v27 + 20)], (uint64_t)v32, type metadata accessor for CRLWPStorageCRDTData);
      sub_1004B84A4((uint64_t)v29, type metadata accessor for CRLWPShapeItemCRDTData);
      v40 = v134;
      (*(void (**)(char *, char *, uint64_t))(v135 + 16))(v132, v32, v134);
      sub_1004B84A4((uint64_t)v32, type metadata accessor for CRLWPStorageCRDTData);
      v41 = v136;
      CRAttributedString.subscript.getter(v138, v153, v40);
      v42 = v131;
      v43 = v137;
      CRAttributedString.Substring.runs.getter(v137);
      (*(void (**)(uint64_t, _QWORD *))(v130 + 8))(v41, v43);
      v44 = v152;
      (*(void (**)(char *, char *, uint64_t))(v133 + 32))(v150, v42, v152);
      v45 = v142;
      CRAttributedString.Runs.next()(v44);
      v138 = (unsigned int (*)(char *, uint64_t, uint64_t))*((_QWORD *)v146 + 6);
      if (v138(v45, 1, v8) == 1)
      {
LABEL_4:
        (*(void (**)(char *, uint64_t))(v133 + 8))(v150, v152);
        sub_1007D3AF0();
        (*(void (**)(char *, uint64_t))(v135 + 8))(v132, v134);
        v18 = v144;
        a6 = v145;
LABEL_7:
        v61 = *((_QWORD *)v160 + 2);
        v62 = (uint64_t)v148;
        v63 = v149;
        if (v61)
        {
          v64 = *(unsigned __int8 *)(v147 + 80);
          v146 = v160;
          v65 = (uint64_t)v160 + ((v64 + 32) & ~v64);
          v66 = *(char **)(v147 + 72);
          v150 = v66;
          do
          {
            sub_1004CB7BC(v65, (uint64_t)v63, (uint64_t *)&unk_1013E87B0);
            sub_1004CB7BC((uint64_t)v63 + *(int *)(v157 + 36), v62, (uint64_t *)&unk_1013E87D0);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v155 + 48))(v62, 1, v18) == 1)
            {
              sub_1004CB800(v62, (uint64_t *)&unk_1013E87D0);
              v67 = *v63;
              v158 = 0;
              v159 = 0;

              v68 = *a6;
              v69 = a6[1];
              if (v158 < *a6)
                v68 = v158;
              if (v159 + v158 > v69)
                v69 = v159 + v158;
              if (v69 < v68)
              {
                __break(1u);
LABEL_47:
                __break(1u);
LABEL_48:
                __break(1u);
LABEL_49:
                __break(1u);
LABEL_50:
                __break(1u);
              }
              *a6 = v68;
              a6[1] = v69;
            }
            else
            {
              v70 = v62;
              v71 = v154;
              sub_1007EC108(v70, v154);
              v72 = (uint64_t *)(v71 + *(int *)(v18 + 24));
              v73 = v72[1];
              v74 = v139;
              v75 = sub_1007DC71C(*v72, v73);
              v77 = v76;
              v78 = v151;
              sub_1004CB7BC(v71 + *(int *)(v18 + 20), v151, &qword_1013E04D0);
              v152 = v77;
              v153 = v75;
              v79 = objc_msgSend(v74, "stringEquivalentFromRange:", v75, v77);
              static String._unconditionallyBridgeFromObjectiveC(_:)(v79);

              v80 = type metadata accessor for URL(0);
              v81 = *(_QWORD *)(v80 - 8);
              LODWORD(v78) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v81 + 48))(v78, 1, v80);
              swift_bridgeObjectRetain(v73);
              v83 = 0;
              if ((_DWORD)v78 != 1)
              {
                v84 = v151;
                URL._bridgeToObjectiveC()(v82);
                v83 = v85;
                (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v84, v80);
              }
              v86 = objc_allocWithZone((Class)CRLWPHyperlinkField);
              v87 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease();
              v88 = String._bridgeToObjectiveC()();
              v89 = objc_msgSend(v86, "initWithURL:range:displayText:uuidString:", v83, v153, v152, v87, v88, swift_bridgeObjectRelease().n128_f64[0]);

              v63 = v149;
              v90 = *v149;
              v158 = 0;
              v159 = 0;

              a6 = v145;
              v91 = *v145;
              v92 = v145[1];
              if (v158 < *v145)
                v91 = v158;
              if (v159 + v158 > v92)
                v92 = v159 + v158;
              if (v92 < v91)
                goto LABEL_47;
              *v145 = v91;
              a6[1] = v92;

              sub_1004B84A4(v154, type metadata accessor for CRLWPHyperlinkSmartFieldData);
              v18 = v144;
              v62 = (uint64_t)v148;
              v66 = v150;
            }
            sub_1004CB800((uint64_t)v63, (uint64_t *)&unk_1013E87B0);
            v65 += (uint64_t)v66;
            --v61;
          }
          while (v61);
        }
        swift_bridgeObjectRelease();
        return;
      }
      v137 = (_QWORD *)*((_QWORD *)v146 + 4);
      v136 = xmmword_100EF5E40;
      ((void (*)(char *, char *, uint64_t))v137)(v143, v45, v8);
      while (1)
      {
        v95 = sub_1004B804C(&qword_1013F3D98);
        v96 = *(_QWORD *)(v147 + 72);
        v97 = *(unsigned __int8 *)(v147 + 80);
        v98 = (v97 + 32) & ~v97;
        v99 = swift_allocObject(v95, v98 + v96, v97 | 7);
        *(_OWORD *)(v99 + 16) = v136;
        v100 = (uint64_t *)(v99 + v98);
        v153 = CRAttributedString.Runs.Run.range.getter(v8);
        v102 = v101;
        __chkstk_darwin(v153);
        v123 = &type metadata for CRLWPHyperlinkAttribute;
        v103 = sub_1007EC194();
        v104 = v8;
        v105 = v141;
        v124 = v103;
        v125 = v141;
        KeyPath = swift_getKeyPath(byte_100F0DDA8, &v123);
        v107 = v143;
        v108 = sub_1007E6AC0();
        v109 = v105;
        v8 = v104;
        swift_retain(v109);
        v110 = v140;
        CRAttributedString.Runs.Run.subscript.getter(KeyPath, v8, v108);
        swift_release(KeyPath);
        *v100 = v153;
        v100[1] = v102;
        sub_1004C4938((uint64_t)v110, v99 + v98 + *(int *)(v157 + 36), (uint64_t *)&unk_1013E87D0);
        v111 = *(_QWORD *)(v99 + 16);
        v112 = (unint64_t)v160;
        v113 = *((_QWORD *)v160 + 2);
        v114 = v113 + v111;
        if (__OFADD__(v113, v111))
          goto LABEL_48;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v160);
        if ((isUniquelyReferenced_nonNull_native & 1) != 0 && v114 <= *(_QWORD *)(v112 + 24) >> 1)
        {
          if (!v111)
            goto LABEL_27;
        }
        else
        {
          if (v113 <= v114)
            v116 = v113 + v111;
          else
            v116 = v113;
          v112 = sub_100D0FD48(isUniquelyReferenced_nonNull_native, v116, 1, v112);
          v160 = (double *)v112;
          if (!v111)
            goto LABEL_27;
        }
        v117 = *(_QWORD *)(v112 + 16);
        if ((*(_QWORD *)(v112 + 24) >> 1) - v117 < v111)
          goto LABEL_49;
        v118 = v112 + v98 + v117 * v96;
        if ((unint64_t)v100 < v118 + v111 * v96 && v118 < (unint64_t)v100 + v111 * v96)
          goto LABEL_53;
        swift_arrayInitWithCopy(v118);
        v120 = *(_QWORD *)(v112 + 16);
        v121 = __OFADD__(v120, v111);
        v122 = v120 + v111;
        if (v121)
          goto LABEL_50;
        *(_QWORD *)(v112 + 16) = v122;
LABEL_27:
        v93 = swift_bridgeObjectRelease();
        (*((void (**)(char *, uint64_t, __n128))v146 + 1))(v107, v8, v93);
        v94 = v142;
        CRAttributedString.Runs.next()(v152);
        if (v138(v94, 1, v8) == 1)
          goto LABEL_4;
        ((void (*)(char *, char *, uint64_t))v137)(v107, v94, v8);
      }
    }
    __break(1u);
  }
  else if (v39)
  {
    (*(void (**)(void))(*(_QWORD *)v39 + 760))();
    sub_1004B8460((uint64_t)&v29[*(int *)(v27 + 20)], (uint64_t)v32, type metadata accessor for CRLWPStorageCRDTData);
    sub_1004B84A4((uint64_t)v29, type metadata accessor for CRLWPShapeItemCRDTData);
    v46 = &v32[*(int *)(v30 + 20)];
    v47 = *(void (**)(char *, char *, uint64_t))(v135 + 16);
    v127 = v37;
    v48 = v134;
    v47(v37, v46, v134);
    sub_1004B84A4((uint64_t)v32, type metadata accessor for CRLWPStorageCRDTData);
    CRAttributedString.attributes(at:effectiveRange:)(0, 0, v48);
    v49 = sub_1004B804C(&qword_1013F3D98);
    v50 = *(unsigned __int8 *)(v147 + 80);
    v51 = (v50 + 32) & ~v50;
    v52 = swift_allocObject(v49, v51 + *(_QWORD *)(v147 + 72), v50 | 7);
    *(_OWORD *)(v52 + 16) = xmmword_100EF5E40;
    v53 = (_QWORD *)(v52 + v51);
    __chkstk_darwin(v52);
    v123 = &type metadata for CRLWPHyperlinkAttribute;
    v54 = sub_1007EC194();
    v55 = v141;
    v124 = v54;
    v125 = v141;
    v56 = swift_getKeyPath(byte_100F0DDA8, &v123);
    v57 = sub_1007E6AC0();
    v58 = swift_retain(v55);
    v59 = v140;
    v60 = v129;
    CRAttributedString.Attributes.subscript.getter(v140, v56, v129, v57, v58);
    swift_release(v56);
    *v53 = 0;
    v53[1] = 0;
    sub_1004C4938((uint64_t)v59, (uint64_t)v53 + *(int *)(v157 + 36), (uint64_t *)&unk_1013E87D0);
    sub_10061F9F4(v52);
    (*(void (**)(char *, uint64_t))(v128 + 8))(v26, v60);
    (*(void (**)(char *, uint64_t))(v135 + 8))(v127, v48);
    goto LABEL_7;
  }
  __break(1u);
LABEL_53:

  LOBYTE(v123) = 2;
  _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, (_DWORD)v123, 1092, 0);
  __break(1u);
}

uint64_t sub_1007EB6B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  __chkstk_darwin(a1);
  (*(void (**)(char *))(v4 + 16))((char *)&v7 - v5);
  return swift_setAtWritableKeyPath(v2, a2);
}

uint64_t type metadata accessor for CRLWPAttributeValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100502040(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRLWPAttributeValue);
}

uint64_t sub_1007EB74C()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 32);
  if (v1 != 255)
    sub_1004C4230(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), v1 & 1);
  if (*(_QWORD *)(v0 + 176))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, 264, 7);
}

uint64_t sub_1007EB7B8(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t KeyPath;
  uint64_t v22;
  unint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  ValueMetadata *v30;
  ValueMetadata *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v28 = a2;
  v29 = a3;
  v10 = sub_1004B804C(&qword_1013F3D40);
  __chkstk_darwin(v10);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v26 - v14;
  *(uint64_t *)((char *)&v26 - v14) = (uint64_t)&_swiftEmptySetSingleton;
  v16 = sub_100559A64();
  CRAttributedString.Attributes.init()(&type metadata for CRLTextAttributeScope, v16);
  v30 = &type metadata for CRLWPParagraphScope;
  v31 = &type metadata for CRLWPParagraphAlignmentAttribute;
  v17 = sub_100573144();
  v32 = v17;
  v33 = a4;
  result = swift_getKeyPath(&unk_100F0DFB8);
  v27 = a1;
  if (*(_QWORD *)&a1[OBJC_IVAR____TtC8Freeform14CRLWPShapeItem_textStorage])
  {
    v19 = result;
    if ((a6 & 1) != 0)
      a5 = 4;
    swift_retain(a4);
    sub_100AD8690(&v34, 0xD000000000000012, 0x8000000100FAA3D0);
    swift_bridgeObjectRelease();
    __chkstk_darwin(v20);
    *(&v26 - 4) = (uint64_t)&type metadata for CRLWPParagraphScope;
    *(&v26 - 3) = (uint64_t)&type metadata for CRLWPParagraphAlignmentAttribute;
    *(&v26 - 2) = v17;
    *(&v26 - 1) = v19;
    KeyPath = swift_getKeyPath(&unk_100F0DAB0);
    v34 = a5;
    LOBYTE(v35) = 0;
    v22 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
    v23 = sub_10073D7B8();
    CRAttributedString.Attributes.subscript.setter(&v34, KeyPath, v22, v23);
    sub_1004CB7BC((uint64_t)v15, (uint64_t)v12, &qword_1013F3D40);
    v24 = objc_allocWithZone((Class)sub_1004B804C((uint64_t *)&unk_1013EFC00));
    v25 = sub_100738804(v27, v28, v29, (uint64_t)v12);
    sub_1004CB800((uint64_t)v15, &qword_1013F3D40);
    return v25;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1007EB9E4(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, int a6)
{
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t KeyPath;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  id v24;
  uint64_t v25;
  _BYTE v26[12];
  int v27;
  uint64_t v28;
  uint64_t v29;
  ValueMetadata *v30;
  ValueMetadata *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v27 = a6;
  v28 = a2;
  v29 = a3;
  v9 = sub_1004B804C(&qword_1013F3D40);
  __chkstk_darwin(v9);
  v11 = &v26[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12);
  v14 = &v26[-v13];
  *(_QWORD *)&v26[-v13] = &_swiftEmptySetSingleton;
  v15 = sub_100559A64();
  CRAttributedString.Attributes.init()(&type metadata for CRLTextAttributeScope, v15);
  v30 = &type metadata for CRLWPParagraphScope;
  v31 = &type metadata for CRLWPListStyleTypeAttribute;
  v16 = sub_100739274();
  v32 = v16;
  v33 = a4;
  result = swift_getKeyPath(&unk_100F0DFB8);
  if (*(_QWORD *)&a1[OBJC_IVAR____TtC8Freeform14CRLWPShapeItem_textStorage])
  {
    v18 = result;
    swift_retain(a4);
    sub_100AD8690(&v34, 0x6C7974537473696CLL, 0xE900000000000065);
    swift_bridgeObjectRelease();
    __chkstk_darwin(v19);
    *(_QWORD *)&v26[-32] = &type metadata for CRLWPParagraphScope;
    *(_QWORD *)&v26[-24] = &type metadata for CRLWPListStyleTypeAttribute;
    *(_QWORD *)&v26[-16] = v16;
    *(_QWORD *)&v26[-8] = v18;
    KeyPath = swift_getKeyPath(&unk_100F0DAB0);
    v21 = 3;
    if ((v27 & 1) == 0)
      v21 = a5;
    v34 = v21;
    LOBYTE(v35) = 0;
    v22 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
    v23 = sub_1007392B8();
    CRAttributedString.Attributes.subscript.setter(&v34, KeyPath, v22, v23);
    sub_1004CB7BC((uint64_t)v14, (uint64_t)v11, &qword_1013F3D40);
    v24 = objc_allocWithZone((Class)sub_1004B804C((uint64_t *)&unk_1013EFC00));
    v25 = sub_100738804(a1, v28, v29, (uint64_t)v11);
    sub_1004CB800((uint64_t)v14, &qword_1013F3D40);
    return v25;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t _s8Freeform25CRLiCloudConnectionStatusO8rawValueACSgSi_tcfC_0(unint64_t result)
{
  if (result >= 4)
    return 4;
  return result;
}

unint64_t sub_1007EBC1C()
{
  unint64_t result;

  result = qword_1013F3CB8;
  if (!qword_1013F3CB8)
  {
    result = swift_getWitnessTable(&unk_100F0D420, &type metadata for CRLWPListStyleType);
    atomic_store(result, (unint64_t *)&qword_1013F3CB8);
  }
  return result;
}

uint64_t sub_1007EBC60(uint64_t a1)
{
  if ((unint64_t)(a1 + 1) >= 4)
    return 4;
  else
    return 0x2010003u >> (8 * (a1 + 1));
}

uint64_t sub_1007EBC84(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701869940, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 7107189 && a2 == 0xE300000000000000)
  {
    v7 = 0xE300000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(7107189, 0xE300000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 1684632949 && a2 == 0xE400000000000000)
  {
    v8 = 0xE400000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1684632949, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x8000000100FAF1E0)
  {
    swift_bridgeObjectRelease(0x8000000100FAF1E0);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100FAF1E0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

unint64_t sub_1007EBE08()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1013F3D10;
  if (!qword_1013F3D10)
  {
    v1 = sub_1004CB6A4(&qword_1013F3CC8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> CRExtensible<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1013F3D10);
  }
  return result;
}

uint64_t sub_1007EBE6C(uint64_t a1, _QWORD *a2)
{
  return swift_getAtKeyPath(a1, *a2);
}

uint64_t sub_1007EBE78()
{
  return 8;
}

double sub_1007EBE84(_QWORD *a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*a1).n128_u64[0];
  return result;
}

uint64_t sub_1007EBE8C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *a1;
  *a2 = v2;
  return swift_retain(v2);
}

uint64_t sub_1007EBE98(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_1007D2ED4(a1, a2, a3, (uint64_t *)&unk_1013EFD18) & 1;
}

uint64_t sub_1007EBEB8(uint64_t a1, uint64_t a2)
{
  return sub_1007EC9E4(a1, a2, (uint64_t *)&unk_1013EFD18);
}

_QWORD *sub_1007EBEC4(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1007EBED8()
{
  return 32;
}

uint64_t sub_1007EBEE4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;

  v2 = *a1;
  *(_QWORD *)a2 = *a1;
  v3 = *(_OWORD *)(a1 + 1);
  *(_QWORD *)(a2 + 24) = a1[3];
  *(_OWORD *)(a2 + 8) = v3;
  return swift_retain(v2);
}

__n128 sub_1007EBF0C(__n128 *a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = a1[1].n128_u64[1];
  result = *a1;
  *(_QWORD *)(a2 + 24) = a1[1].n128_u64[0];
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1007EBF2C()
{
  return 8;
}

uint64_t sub_1007EBF38(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_1007D2ED4(a1, a2, a3, (uint64_t *)&unk_1013EFD60) & 1;
}

uint64_t sub_1007EBF58(uint64_t a1, uint64_t a2)
{
  return sub_1007EC9E4(a1, a2, (uint64_t *)&unk_1013EFD60);
}

uint64_t sub_1007EBF68()
{
  return 8;
}

uint64_t sub_1007EBF74(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_1007D2ED4(a1, a2, a3, &qword_1013EFC50) & 1;
}

uint64_t sub_1007EBF94(uint64_t a1, uint64_t a2)
{
  return sub_1007EC9E4(a1, a2, &qword_1013EFC50);
}

uint64_t sub_1007EBFA4()
{
  return 8;
}

uint64_t sub_1007EBFB0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_1007D2ED4(a1, a2, a3, (uint64_t *)&unk_1013F3D80) & 1;
}

uint64_t sub_1007EBFD0(uint64_t a1, uint64_t a2)
{
  return sub_1007EC9E4(a1, a2, (uint64_t *)&unk_1013F3D80);
}

uint64_t sub_1007EBFE0()
{
  return 8;
}

uint64_t sub_1007EBFEC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_1007D2ED4(a1, a2, a3, &qword_1013EFDF8) & 1;
}

uint64_t sub_1007EC00C(uint64_t a1, uint64_t a2)
{
  return sub_1007EC9E4(a1, a2, &qword_1013EFDF8);
}

uint64_t sub_1007EC01C()
{
  return 8;
}

uint64_t sub_1007EC028(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_1007D2ED4(a1, a2, a3, (uint64_t *)&unk_1013EFE20) & 1;
}

uint64_t sub_1007EC048(uint64_t a1, uint64_t a2)
{
  return sub_1007EC9E4(a1, a2, (uint64_t *)&unk_1013EFE20);
}

uint64_t sub_1007EC058()
{
  return 8;
}

uint64_t sub_1007EC064(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_1007D2ED4(a1, a2, a3, &qword_1013EFE30) & 1;
}

uint64_t sub_1007EC084(uint64_t a1, uint64_t a2)
{
  return sub_1007EC9E4(a1, a2, &qword_1013EFE30);
}

uint64_t sub_1007EC094()
{
  return 8;
}

uint64_t sub_1007EC0A0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_1007D2ED4(a1, a2, a3, (uint64_t *)&unk_1013EFE00) & 1;
}

uint64_t sub_1007EC0C0(uint64_t a1, uint64_t a2)
{
  return sub_1007EC9E4(a1, a2, (uint64_t *)&unk_1013EFE00);
}

uint64_t sub_1007EC0D0()
{
  return 8;
}

uint64_t sub_1007EC0DC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_1007D2ED4(a1, a2, a3, &qword_1013EFE10) & 1;
}

uint64_t sub_1007EC0FC(uint64_t a1, uint64_t a2)
{
  return sub_1007EC9E4(a1, a2, &qword_1013EFE10);
}

uint64_t sub_1007EC108(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CRLWPHyperlinkSmartFieldData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1007EC154()
{
  return 24;
}

uint64_t sub_1007EC160(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *a1;
  *(_QWORD *)a2 = *a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 1);
  return swift_retain(v2);
}

__n128 sub_1007EC180(__n128 *a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = a1[1].n128_u64[0];
  result = *a1;
  *(__n128 *)(a2 + 8) = *a1;
  return result;
}

unint64_t sub_1007EC194()
{
  unint64_t result;

  result = qword_1013F3DA0;
  if (!qword_1013F3DA0)
  {
    result = swift_getWitnessTable(&unk_100F0D844, &type metadata for CRLWPHyperlinkAttribute);
    atomic_store(result, (unint64_t *)&qword_1013F3DA0);
  }
  return result;
}

uint64_t sub_1007EC1D8()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1007EC1FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_1007EC20C(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

uint64_t sub_1007EC214()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1007EC224(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v4;
  uint64_t result;
  _BYTE v7[24];

  result = swift_beginAccess(v4 + 16, v7, 1, 0);
  *(_BYTE *)(v4 + 16) = 1;
  *a4 = 1;
  return result;
}

uint64_t sub_1007EC270()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1007EC294(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7)
{
  _QWORD *v7;

  return sub_1007E4830(a1, a2, a3, a4, a5, a6, a7, v7);
}

uint64_t sub_1007EC2A4()
{
  return 24;
}

void sub_1007EC2B8(uint64_t a1, unint64_t a2, uint64_t a3, char *a4, void (**a5)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(char *, uint64_t, uint64_t);
  int v37;
  void *v38;
  uint64_t v39;
  uint64_t KeyPath;
  unint64_t v41;
  __n128 v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (**v58)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  char *v59;
  char *v60;
  char *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char v69;
  id v70;

  v58 = a5;
  v60 = a4;
  v56 = a3;
  v62 = a2;
  v6 = sub_1004B804C((uint64_t *)&unk_1013E87D0);
  __chkstk_darwin(v6);
  v8 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = type metadata accessor for CRLWPHyperlinkSmartFieldData(0);
  v66 = *(_QWORD *)(v63 - 8);
  __chkstk_darwin(v63);
  v10 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1004B804C(&qword_1013F3C80);
  v64 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1004B804C(&qword_1013F3C78);
  __chkstk_darwin(v14);
  v16 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = (_QWORD *)sub_1004B804C((uint64_t *)&unk_1013E8570);
  v17 = *(v65 - 1);
  __chkstk_darwin(v65);
  v59 = (char *)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for CRLWPShapeItemCRDTData(0);
  __chkstk_darwin(v19);
  v21 = (char *)&v54 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for CRLWPStorageCRDTData(0);
  __chkstk_darwin(v22);
  v24 = (char *)&v54 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = sub_1004B804C(&qword_1013F3C90);
  __chkstk_darwin(v68);
  v28 = __chkstk_darwin(v25);
  v67 = (char *)&v54 - v29;
  if (a1 == 6)
  {
    v55 = v27;
    v57 = v26;
    v61 = v10;
    v30 = *(_QWORD *)&v60[OBJC_IVAR____TtC8Freeform12CRLWPStorage_shapeItemData];
    if (v30)
    {
      (*(void (**)(__n128))(*(_QWORD *)v30 + 760))(v28);
      sub_1004B8460((uint64_t)&v21[*(int *)(v19 + 20)], (uint64_t)v24, type metadata accessor for CRLWPStorageCRDTData);
      sub_1004B84A4((uint64_t)v21, type metadata accessor for CRLWPShapeItemCRDTData);
      v31 = v59;
      v32 = v65;
      (*(void (**)(char *, char *, _QWORD *))(v17 + 16))(v59, v24, v65);
      sub_1004B84A4((uint64_t)v24, type metadata accessor for CRLWPStorageCRDTData);
      v33 = v55;
      CRAttributedString.runs.getter(v32);
      (*(void (**)(char *, _QWORD *))(v17 + 8))(v31, v32);
      v34 = v68;
      (*(void (**)(char *, uint64_t, uint64_t))(v57 + 32))(v67, v33, v68);
      CRAttributedString.Runs.next()(v34);
      v35 = v64;
      v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v64 + 48);
      v37 = v36(v16, 1, v11);
      v38 = v60;
      v39 = v63;
      if (v37 != 1)
      {
        v59 = (char *)(v56 + v62);
        v65 = *(_QWORD **)(v35 + 32);
        ((void (*)(char *, char *, uint64_t))v65)(v13, v16, v11);
        while (1)
        {
          KeyPath = swift_getKeyPath(&unk_100F0DDE8);
          v41 = sub_1007E6AC0();
          CRAttributedString.Runs.Run.subscript.getter(KeyPath, v11, v41);
          v42 = swift_release(KeyPath);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v66 + 48))(v8, 1, v39, v42) == 1)
          {
            (*(void (**)(char *, uint64_t))(v35 + 8))(v13, v11);
            sub_1004CB800((uint64_t)v8, (uint64_t *)&unk_1013E87D0);
          }
          else
          {
            v43 = (uint64_t)v61;
            sub_1007EC108((uint64_t)v8, (uint64_t)v61);
            v44 = (uint64_t *)(v43 + *(int *)(v39 + 24));
            v45 = *v44;
            v46 = v44[1];
            swift_bridgeObjectRetain(v46);
            v47 = sub_1007DC71C(v45, v46);
            v49 = v48;
            swift_bridgeObjectRelease();
            if (v47 >= v62 && (unint64_t)v59 >= v47 + v49)
            {
              v69 = 0;
              v70 = sub_1007E9300(v43, v38);
              v51 = v70;
              v52 = sub_1004B804C(&qword_1013F3A98);
              v53 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v70, v52);
              ((void (**)(_QWORD, uint64_t, unint64_t, uint64_t, char *))v58)[2](v58, v53, v47, v49, &v69);
              swift_unknownObjectRelease(v53);
              sub_1004B84A4(v43, type metadata accessor for CRLWPHyperlinkSmartFieldData);
              v35 = v64;
              (*(void (**)(char *, uint64_t))(v64 + 8))(v13, v11);

              if ((v69 & 1) != 0)
                break;
              v38 = v60;
              v39 = v63;
            }
            else
            {
              sub_1004B84A4(v43, type metadata accessor for CRLWPHyperlinkSmartFieldData);
              v35 = v64;
              (*(void (**)(char *, uint64_t))(v64 + 8))(v13, v11);
              v39 = v63;
            }
          }
          CRAttributedString.Runs.next()(v68);
          if (v36(v16, 1, v11) == 1)
            break;
          ((void (*)(char *, char *, uint64_t))v65)(v13, v16, v11);
        }
      }
      (*(void (**)(char *, uint64_t))(v57 + 8))(v67, v68);
    }
    else
    {
      _Block_release(v58);
      __break(1u);
    }
  }
}

uint64_t sub_1007EC830(char *a1, char **a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  if ((*(_BYTE *)(v3 + OBJC_IVAR____TtC8Freeform12CRLWPStorage__hasValidPresentationProperties) & 1) == 0)
    sub_1007D5878();
  v7 = *(_QWORD *)(v3 + *a3);
  swift_bridgeObjectRetain(v7);
  v8 = sub_1007DD3B0(&v12, v7, a1);
  v10 = v9;
  swift_bridgeObjectRelease();
  result = v12;
  if (a2)
  {
    if (__OFSUB__(v10, v8))
    {
      __break(1u);
    }
    else
    {
      *a2 = v8;
      a2[1] = (char *)(v10 - (_QWORD)v8);
    }
  }
  return result;
}

uint64_t sub_1007EC8C0(uint64_t a1)
{
  int v1;
  uint64_t result;

  v1 = a1;
  LODWORD(result) = sub_1001AE2A0(a1);
  if (v1 == 8232)
    return 1;
  else
    return result;
}

uint64_t sub_1007EC8EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CRLWPStorageCRDTData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1007EC934()
{
  return 8;
}

uint64_t sub_1007EC940(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_1007D2ED4(a1, a2, a3, &qword_1013EFC20) & 1;
}

uint64_t sub_1007EC960(uint64_t a1, uint64_t a2)
{
  return sub_1007EC9E4(a1, a2, &qword_1013EFC20);
}

uint64_t sub_1007EC970()
{
  return 8;
}

uint64_t sub_1007EC97C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_1007D2ED4(a1, a2, a3, &qword_1013F3E78) & 1;
}

uint64_t sub_1007EC99C(uint64_t a1, uint64_t a2)
{
  return sub_1007EC9E4(a1, a2, &qword_1013F3E78);
}

uint64_t sub_1007EC9AC()
{
  return 8;
}

uint64_t sub_1007EC9B8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_1007D2ED4(a1, a2, a3, &qword_1013F3E70) & 1;
}

uint64_t sub_1007EC9D8(uint64_t a1, uint64_t a2)
{
  return sub_1007EC9E4(a1, a2, &qword_1013F3E70);
}

uint64_t sub_1007EC9E4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_1004B804C(a3);
  return dispatch thunk of Hashable.hashValue.getter(v3, &protocol witness table for AnyKeyPath);
}

uint64_t sub_1007ECA24(uint64_t a1, uint64_t *a2)
{
  return sub_1007CB2CC(*a2);
}

double sub_1007ECA2C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  double result;

  v4 = *a3;
  swift_retain(*a3);
  sub_1007EB6B8(a1, v4);
  *(_QWORD *)&result = swift_release(v4).n128_u64[0];
  return result;
}

uint64_t sub_1007ECA70()
{
  return 40;
}

uint64_t sub_1007ECA7C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;

  v2 = *a1;
  *(_QWORD *)a2 = *a1;
  v3 = *(_OWORD *)(a1 + 1);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 3);
  *(_OWORD *)(a2 + 8) = v3;
  return swift_retain(v2);
}

__n128 sub_1007ECAA4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = *(_QWORD *)(a1 + 32);
  result = *(__n128 *)a1;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 16);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1007ECABC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1007ECAE0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_1007D9774(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

uint64_t sub_1007ECAE8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1007ECAF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_100D2F504(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_1007ECB08()
{
  return 24;
}

BOOL sub_1007ECB1C(unsigned int *a1)
{
  return (CharacterSet.contains(_:)(*a1) & 1) == 0;
}

uint64_t sub_1007ECB50()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1007ECB60()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1007ECB78()
{
  return 32;
}

_QWORD *sub_1007ECB8C(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13]);
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for CRLWPStorage.SubstorageAttributes(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = v3;
  return a1;
}

uint64_t assignWithCopy for CRLWPStorage.SubstorageAttributes(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for CRLWPStorage.SubstorageAttributes(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

ValueMetadata *type metadata accessor for CRLWPStorage.SubstorageAttributes()
{
  return &type metadata for CRLWPStorage.SubstorageAttributes;
}

uint64_t sub_1007ECCB0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_100F0E028;
  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 0, 2, v4, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t *sub_1007ECD28(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 16) & (unint64_t)~v5) + *(_QWORD *)(v4 + 64) > 0x18)
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain(v8);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + v5 + 16) & ~v5, ((unint64_t)a2 + v5 + 16) & ~v5);
  }
  return v3;
}

uint64_t sub_1007ECDC8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_OWORD *sub_1007ECDE8(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_QWORD *sub_1007ECE38(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_OWORD *sub_1007ECE90(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_OWORD *sub_1007ECEE0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t sub_1007ECF30(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v8 = ((v6 + 16) & ~v6) + *(_QWORD *)(v4 + 64);
  v9 = 8 * v8;
  if (v8 <= 3)
  {
    v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v6 + 16) & ~v6);
      return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_18;
LABEL_11:
  v12 = (v10 - 1) << v9;
  if (v8 > 3)
    v12 = 0;
  if (!(_DWORD)v8)
    return v5 + v12 + 1;
  if (v8 > 3)
    LODWORD(v8) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1007ECFF0 + 4 * byte_100F0C67D[(v8 - 1)]))();
}

void sub_1007ED050(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = ((v8 + 16) & ~v8) + *(_QWORD *)(v6 + 64);
  v10 = a3 >= v7;
  v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      v14 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v14))
      {
        v12 = &dword_100000004;
      }
      else if (v14 >= 0x100)
      {
        v12 = 2;
      }
      else
      {
        v12 = v14 > 1;
      }
    }
    else
    {
      v12 = &_mh_execute_header.magic + 1;
    }
  }
  else
  {
    v12 = 0;
  }
  if (v7 < a2)
  {
    v13 = ~v7 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v15 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v15;
          *((_BYTE *)a1 + 2) = BYTE2(v15);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v15;
        }
        else
        {
          *(_BYTE *)a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, ((v8 + 16) & ~v8) + *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t type metadata accessor for CRLWPStorage.SubstorageAttributes.SingleAttributeRun(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100502040(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRLWPStorage.SubstorageAttributes.SingleAttributeRun);
}

uint64_t sub_1007ED228(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initEnumMetadataMultiPayload(a1, 0, 2, v4);
    return 0;
  }
  return result;
}

uint64_t *sub_1007ED29C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8));
    swift_retain(v8);
  }
  else
  {
    v9 = *((unsigned __int8 *)a2 + v5);
    if (v9 >= 2)
    {
      if (v5 <= 3)
        v10 = v5;
      else
        v10 = 4;
      __asm { BR              X13 }
    }
    if (v9 == 1)
    {
      v11 = *a2;
      *v3 = *a2;
      *((_BYTE *)v3 + v5) = 1;
      swift_bridgeObjectRetain(v11);
    }
    else
    {
      (*(void (**)(uint64_t *))(v4 + 16))(a1);
      *((_BYTE *)v3 + v5) = 0;
    }
  }
  return v3;
}

uint64_t sub_1007ED3B4(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_QWORD *)(v2 + 64);
  if (v3 <= 8)
    v3 = 8;
  v4 = *((unsigned __int8 *)a1 + v3);
  if (v4 < 2)
  {
    if (v4 == 1)
      return swift_bridgeObjectRelease(*a1);
    else
      return (*(uint64_t (**)(void))(v2 + 8))();
  }
  else
  {
    if (v3 <= 3)
      v5 = v3;
    else
      v5 = 4;
    return ((uint64_t (*)(void))((char *)&loc_1007ED3FC + 4 * byte_100F0C690[v5]))();
  }
}

uint64_t *sub_1007ED454(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 1)
  {
    v8 = *a2;
    *a1 = *a2;
    swift_bridgeObjectRetain(v8);
    v9 = 1;
  }
  else
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
    v9 = 0;
  }
  *((_BYTE *)a1 + v5) = v9;
  return a1;
}

uint64_t *sub_1007ED52C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 8uLL)
      v7 = 8;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)
      swift_bridgeObjectRelease(*a1);
    else
      (*(void (**)(uint64_t *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      v12 = *a2;
      *a1 = *a2;
      *((_BYTE *)a1 + v7) = 1;
      swift_bridgeObjectRetain(v12);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
      *((_BYTE *)a1 + v7) = 0;
    }
  }
  return a1;
}

_QWORD *sub_1007ED6BC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 1)
  {
    *a1 = *a2;
    v8 = 1;
  }
  else
  {
    (*(void (**)(_QWORD *))(v4 + 32))(a1);
    v8 = 0;
  }
  *((_BYTE *)a1 + v5) = v8;
  return a1;
}

_QWORD *sub_1007ED790(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 8uLL)
      v7 = 8;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)
      swift_bridgeObjectRelease(*a1);
    else
      (*(void (**)(_QWORD *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      *a1 = *a2;
      v12 = 1;
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 32))(a1, a2, v5);
      v12 = 0;
    }
    *((_BYTE *)a1 + v7) = v12;
  }
  return a1;
}

uint64_t sub_1007ED91C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v3 = 8;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) > 8uLL)
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_21;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_21:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 2)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 255);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1007ED9E0 + 4 * byte_100F0C6B3[(v4 - 1)]))();
}

void sub_1007EDA2C(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (v5 <= 8)
    v5 = 8;
  v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    v7 = 0;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = &dword_100000004;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = &_mh_execute_header.magic + 1;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v8 = a2 - 255;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t sub_1007EDBD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 8;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64) > 8uLL)
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (*(unsigned __int8 *)(a1 + v2) < 2u)
    return *(unsigned __int8 *)(a1 + v2);
  if (v2 <= 3)
    v3 = v2;
  else
    v3 = 4;
  return ((uint64_t (*)(void))((char *)&loc_1007EDC1C + 4 * byte_100F0C6C1[v3]))();
}

void sub_1007EDC64(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  size_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) <= 8uLL)
    v4 = 8;
  else
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (a2 > 1)
  {
    v5 = a2 - 2;
    if (v4 < 4)
    {
      v6 = v5 >> (8 * v4);
      v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 2;
      bzero(a1, v4);
      if ((_DWORD)v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if ((_DWORD)v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 2;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

uint64_t _s8Freeform18CRLWPListStyleTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1007EDD78 + 4 * byte_100F0C6CB[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1007EDDAC + 4 * byte_100F0C6C6[v4]))();
}

uint64_t sub_1007EDDAC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1007EDDB4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1007EDDBCLL);
  return result;
}

uint64_t sub_1007EDDC8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1007EDDD0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1007EDDD4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1007EDDDC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CRLWPHyperlinkSmartFieldData.CodingKeys()
{
  return &type metadata for CRLWPHyperlinkSmartFieldData.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for CRLWPSmartFieldDataType(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1007EDE38 + 4 * byte_100F0C6D0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1007EDE58 + 4 * byte_100F0C6D5[v4]))();
}

_BYTE *sub_1007EDE38(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1007EDE58(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1007EDE60(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1007EDE68(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1007EDE70(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1007EDE78(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CRLWPSmartFieldDataType()
{
  return &type metadata for CRLWPSmartFieldDataType;
}

unint64_t sub_1007EDE98()
{
  unint64_t result;

  result = qword_1013F3FD0;
  if (!qword_1013F3FD0)
  {
    result = swift_getWitnessTable(&unk_100F0E0A8, &type metadata for CRLWPSmartFieldDataType);
    atomic_store(result, (unint64_t *)&qword_1013F3FD0);
  }
  return result;
}

unint64_t sub_1007EDEE0()
{
  unint64_t result;

  result = qword_1013F3FD8;
  if (!qword_1013F3FD8)
  {
    result = swift_getWitnessTable(&unk_100F0E0F0, &type metadata for CRLWPSmartFieldDataType);
    atomic_store(result, (unint64_t *)&qword_1013F3FD8);
  }
  return result;
}

unint64_t sub_1007EDF28()
{
  unint64_t result;

  result = qword_1013F3FE0;
  if (!qword_1013F3FE0)
  {
    result = swift_getWitnessTable(&unk_100F0E1C8, &type metadata for CRLWPSmartFieldDataType);
    atomic_store(result, (unint64_t *)&qword_1013F3FE0);
  }
  return result;
}

unint64_t sub_1007EDF70()
{
  unint64_t result;

  result = qword_1013F3FE8;
  if (!qword_1013F3FE8)
  {
    result = swift_getWitnessTable(&unk_100F0E268, &type metadata for CRLWPHyperlinkSmartFieldData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1013F3FE8);
  }
  return result;
}

uint64_t sub_1007EDFB4(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24);
}

unint64_t sub_1007EDFBC()
{
  unint64_t result;

  result = qword_1013F4028;
  if (!qword_1013F4028)
  {
    result = swift_getWitnessTable(&unk_100F0E150, &type metadata for CRLWPSmartFieldDataType);
    atomic_store(result, (unint64_t *)&qword_1013F4028);
  }
  return result;
}

uint64_t sub_1007EE118@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  char *v12;
  id v13;
  void *v14;
  os_unfair_lock_s *v15;
  id v16;
  uint64_t v18;

  v3 = type metadata accessor for CRLAssetData(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10069BF0C(v1 + OBJC_IVAR____TtC8Freeform26CRLAssetBackedAssetStorage_assetData, (uint64_t)v5);
  v6 = *(char **)(v1 + OBJC_IVAR____TtC8Freeform26CRLAssetBackedAssetStorage_store);
  v7 = *(_QWORD *)&v6[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManagerLock];
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v7 + 16));
  v8 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManager;
  v9 = *(void **)&v6[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManager];
  if (v9)
  {
    v10 = *(id *)&v6[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManager];
  }
  else
  {
    v11 = objc_allocWithZone((Class)type metadata accessor for CRLAssetFileManager(0));
    v12 = v6;
    v13 = sub_100C7EE84((uint64_t)v12);

    v14 = *(void **)&v6[v8];
    *(_QWORD *)&v6[v8] = v13;
    v10 = v13;

    v9 = 0;
  }
  v15 = *(os_unfair_lock_s **)(v7 + 16);
  v16 = v9;
  os_unfair_lock_unlock(v15);
  sub_100C7857C((uint64_t)v5, 0, 3, 0, a1);

  return sub_1005CC194((uint64_t)v5);
}

uint64_t sub_1007EE248()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = v0 + OBJC_IVAR____TtC8Freeform26CRLAssetBackedAssetStorage_assetData;
  v2 = (uint64_t *)(v1 + *(int *)(type metadata accessor for CRLAssetData(0) + 20));
  v3 = *v2;
  swift_bridgeObjectRetain(v2[1]);
  return v3;
}

uint64_t sub_1007EE290@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC8Freeform26CRLAssetBackedAssetStorage_assetData;
  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

BOOL sub_1007EE2D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  char *v13;
  id v14;
  void *v15;
  os_unfair_lock_s *v16;
  id v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v21;

  v1 = type metadata accessor for CRLAssetData(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1004B804C(&qword_1013E04D0);
  __chkstk_darwin(v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10069BF0C(v0 + OBJC_IVAR____TtC8Freeform26CRLAssetBackedAssetStorage_assetData, (uint64_t)v3);
  v7 = *(char **)(v0 + OBJC_IVAR____TtC8Freeform26CRLAssetBackedAssetStorage_store);
  v8 = *(_QWORD *)&v7[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManagerLock];
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v8 + 16));
  v9 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManager;
  v10 = *(void **)&v7[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManager];
  if (v10)
  {
    v11 = *(id *)&v7[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManager];
  }
  else
  {
    v12 = objc_allocWithZone((Class)type metadata accessor for CRLAssetFileManager(0));
    v13 = v7;
    v14 = sub_100C7EE84((uint64_t)v13);

    v15 = *(void **)&v7[v9];
    *(_QWORD *)&v7[v9] = v14;
    v11 = v14;

    v10 = 0;
  }
  v16 = *(os_unfair_lock_s **)(v8 + 16);
  v17 = v10;
  os_unfair_lock_unlock(v16);
  sub_100C7857C((uint64_t)v3, 0, 3, 0, v6);

  sub_1005CC194((uint64_t)v3);
  v18 = type metadata accessor for URL(0);
  v19 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48))(v6, 1, v18) == 1;
  sub_1005534BC((uint64_t)v6);
  return v19;
}

void sub_1007EE46C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  char *v22;
  id v23;
  void *v24;
  os_unfair_lock_s *v25;
  id v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  void (**v45)(_QWORD);
  id v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD aBlock[5];
  uint64_t v57;

  v5 = v4;
  v53 = a3;
  v54 = a4;
  v55 = a2;
  v49 = a1;
  v52 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v52 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v52);
  v50 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1004B804C(&qword_1013E01F0);
  __chkstk_darwin(v8);
  v51 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CRLAssetData(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1004B804C(&qword_1013E04D0);
  __chkstk_darwin(v13);
  v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10069BF0C(v4 + OBJC_IVAR____TtC8Freeform26CRLAssetBackedAssetStorage_assetData, (uint64_t)v12);
  v16 = *(char **)(v4 + OBJC_IVAR____TtC8Freeform26CRLAssetBackedAssetStorage_store);
  v17 = *(_QWORD *)&v16[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManagerLock];
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v17 + 16));
  v18 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManager;
  v19 = *(void **)&v16[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManager];
  if (v19)
  {
    v20 = *(id *)&v16[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManager];
  }
  else
  {
    v21 = objc_allocWithZone((Class)type metadata accessor for CRLAssetFileManager(0));
    v22 = v16;
    v23 = sub_100C7EE84((uint64_t)v22);

    v24 = *(void **)&v16[v18];
    *(_QWORD *)&v16[v18] = v23;
    v20 = v23;

    v19 = 0;
  }
  v25 = *(os_unfair_lock_s **)(v17 + 16);
  v26 = v19;
  os_unfair_lock_unlock(v25);
  sub_100C7857C((uint64_t)v12, 0, 3, 0, v15);

  sub_1005CC194((uint64_t)v12);
  v27 = type metadata accessor for URL(0);
  v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 48))(v15, 1, v27);
  sub_1005534BC((uint64_t)v15);
  if (v28 == 1)
  {
    v29 = type metadata accessor for TaskPriority(0);
    v30 = (uint64_t)v51;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v51, 1, 1, v29);
    v31 = v50;
    v32 = v52;
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v50, v49, v52);
    v33 = *(unsigned __int8 *)(v6 + 80);
    v34 = (v33 + 40) & ~v33;
    v35 = (v7 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
    v36 = (v35 + 15) & 0xFFFFFFFFFFFFFFF8;
    v37 = (char *)swift_allocObject(&unk_101280350, v36 + 16, v33 | 7);
    *((_QWORD *)v37 + 2) = 0;
    *((_QWORD *)v37 + 3) = 0;
    *((_QWORD *)v37 + 4) = v5;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v37[v34], v31, v32);
    v38 = v54;
    *(_QWORD *)&v37[v35] = v55;
    v39 = &v37[v36];
    *(_QWORD *)v39 = v53;
    *((_QWORD *)v39 + 1) = v38;
    swift_retain(v5);
    swift_retain(v38);
    v40 = sub_100521B98(v30, (uint64_t)&unk_1013F4188, (uint64_t)v37);
    swift_release(v40);
  }
  else if ((v55 & 2) != 0)
  {
    v41 = swift_allocObject(&unk_101280378, 32, 7);
    v42 = v54;
    *(_QWORD *)(v41 + 16) = v53;
    *(_QWORD *)(v41 + 24) = v42;
    aBlock[4] = sub_10070FDDC;
    v57 = v41;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = *(_QWORD *)"";
    aBlock[2] = sub_1005D2FC0;
    aBlock[3] = &unk_101280390;
    v43 = _Block_copy(aBlock);
    v44 = v57;
    swift_retain(v42);
    swift_release(v44);
    v45 = v43;
    if (+[NSThread isMainThread](NSThread, "isMainThread"))
    {
      v45[2](v45);
    }
    else
    {
      v46 = &_dispatch_main_q;
      v47 = &_dispatch_main_q;
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, v45);

    }
    _Block_release(v45);
  }
}

uint64_t sub_1007EE844(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8[11] = a7;
  v8[12] = a8;
  v8[9] = a5;
  v8[10] = a6;
  v8[8] = a4;
  v9 = sub_1004B804C(&qword_1013E04D0);
  v8[13] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v8[14] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v8[15] = v11;
  v8[16] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1007EE8D0, 0, 0);
}

uint64_t sub_1007EE8D0()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  os_unfair_lock_s *v12;

  v1 = *(char **)(v0[8] + OBJC_IVAR____TtC8Freeform26CRLAssetBackedAssetStorage_store);
  v2 = *(_QWORD *)&v1[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetDownloadManagerLock];
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v2 + 16));
  v3 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetDownloadManager;
  v4 = *(_QWORD *)&v1[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetDownloadManager];
  if (v4)
  {
    v5 = *(_QWORD *)&v1[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetDownloadManager];
  }
  else
  {
    v6 = v1;
    v4 = sub_1005D2858(v6);

    v7 = *(_QWORD *)&v1[v3];
    *(_QWORD *)&v1[v3] = v4;
    swift_retain(v4);
    swift_release(v7);
    v5 = 0;
  }
  v0[17] = v4;
  v0[18] = v4;
  v9 = v0[15];
  v8 = v0[16];
  v10 = v0[14];
  v11 = v0[8];
  v12 = *(os_unfair_lock_s **)(v2 + 16);
  swift_retain(v5);
  os_unfair_lock_unlock(v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v8, v11 + OBJC_IVAR____TtC8Freeform26CRLAssetBackedAssetStorage_assetData, v10);
  return swift_task_switch(sub_1007EE9BC, v4, 0);
}

uint64_t sub_1007EE9BC()
{
  uint64_t *v0;
  uint64_t **v1;

  v1 = (uint64_t **)swift_task_alloc(dword_10140C61C);
  v0[19] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_1007EEA20;
  return sub_100C78DC8(v0[13], v0[16], 0, 0, 3);
}

uint64_t sub_1007EEA20()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 152));
  return swift_task_switch(sub_1007EEA70, *(_QWORD *)(v1 + 136), 0);
}

uint64_t sub_1007EEA70()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void (**v15)(_QWORD);
  id v16;
  id v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;

  v1 = v0[13];
  v2 = type metadata accessor for URL(0);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2);
  sub_1005534BC(v1);
  if (v3 == 1)
  {
    v4 = v0[18];
    v6 = v0[11];
    v5 = v0[12];
    v8 = v0[9];
    v7 = v0[10];
    v9 = sub_1005CFF38(v0[16]);
    sub_1005D010C(v8, v7, v6, v5);
    swift_release(v9);
  }
  else if ((v0[10] & 2) != 0)
  {
    v11 = v0[11];
    v10 = v0[12];
    v12 = swift_allocObject(&unk_1012803C8, 32, 7);
    *(_QWORD *)(v12 + 16) = v11;
    *(_QWORD *)(v12 + 24) = v10;
    v0[6] = sub_1004CF658;
    v0[7] = v12;
    v0[2] = _NSConcreteStackBlock;
    v0[3] = *(_QWORD *)"";
    v0[4] = sub_1005D2FC0;
    v0[5] = &unk_1012803E0;
    v13 = _Block_copy(v0 + 2);
    v14 = v0[7];
    swift_retain(v10);
    swift_release(v14);
    v15 = v13;
    if (+[NSThread isMainThread](NSThread, "isMainThread"))
    {
      v15[2](v15);
    }
    else
    {
      v16 = &_dispatch_main_q;
      v17 = &_dispatch_main_q;
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, v15);

    }
    v4 = v0[18];

    _Block_release(v15);
  }
  else
  {
    v4 = v0[18];
  }
  v18 = swift_release(v4);
  v19 = v0[16];
  v20 = v0[13];
  (*(void (**)(uint64_t, _QWORD, __n128))(v0[15] + 8))(v19, v0[14], v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return ((uint64_t (*)(void))v0[1])();
}

double sub_1007EEC30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  double result;
  uint64_t v15;

  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v6 = sub_1004B804C(&qword_1013E01F0);
  __chkstk_darwin(v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  v10 = *(unsigned __int8 *)(v4 + 80);
  v11 = (v10 + 40) & ~v10;
  v12 = (char *)swift_allocObject(&unk_101280328, v11 + v5, v10 | 7);
  *((_QWORD *)v12 + 2) = 0;
  *((_QWORD *)v12 + 3) = 0;
  *((_QWORD *)v12 + 4) = v1;
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(&v12[v11], (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  swift_retain(v1);
  v13 = sub_100521B98((uint64_t)v8, (uint64_t)&unk_1013F4178, (uint64_t)v12);
  *(_QWORD *)&result = swift_release(v13).n128_u64[0];
  return result;
}

uint64_t sub_1007EED70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[2] = a4;
  v5[3] = a5;
  v6 = type metadata accessor for UUID(0);
  v5[4] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[5] = v7;
  v5[6] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1007EEDD0, 0, 0);
}

uint64_t sub_1007EEDD0()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  os_unfair_lock_s *v12;

  v1 = *(char **)(v0[2] + OBJC_IVAR____TtC8Freeform26CRLAssetBackedAssetStorage_store);
  v2 = *(_QWORD *)&v1[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetDownloadManagerLock];
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v2 + 16));
  v3 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetDownloadManager;
  v4 = *(_QWORD *)&v1[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetDownloadManager];
  if (v4)
  {
    v5 = *(_QWORD *)&v1[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetDownloadManager];
  }
  else
  {
    v6 = v1;
    v4 = sub_1005D2858(v6);

    v7 = *(_QWORD *)&v1[v3];
    *(_QWORD *)&v1[v3] = v4;
    swift_retain(v4);
    swift_release(v7);
    v5 = 0;
  }
  v0[7] = v4;
  v9 = v0[5];
  v8 = v0[6];
  v10 = v0[4];
  v11 = v0[2];
  v12 = *(os_unfair_lock_s **)(v2 + 16);
  swift_retain(v5);
  os_unfair_lock_unlock(v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v8, v11 + OBJC_IVAR____TtC8Freeform26CRLAssetBackedAssetStorage_assetData, v10);
  return swift_task_switch(sub_1007EEEBC, v4, 0);
}

uint64_t sub_1007EEEBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 40);
  sub_1005CCA7C(v1, *(_QWORD *)(v0 + 24));
  v5 = swift_release(v2);
  (*(void (**)(uint64_t, uint64_t, __n128))(v4 + 8))(v1, v3, v5);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1007EEF20()
{
  return sub_1007EEF48((uint64_t)&unk_101280300, (uint64_t)&unk_1013DFE70);
}

uint64_t sub_1007EEF34()
{
  return sub_1007EEF48((uint64_t)&unk_1012802D8, (uint64_t)&unk_1013DFE88);
}

uint64_t sub_1007EEF48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  void (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  __n128 v27;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  v32 = a2;
  v30 = a1;
  v3 = sub_1004B804C(&qword_1013E01F0);
  __chkstk_darwin(v3);
  v31 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5);
  v29 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v29 - v9;
  v11 = *(char **)(v2 + OBJC_IVAR____TtC8Freeform26CRLAssetBackedAssetStorage_store);
  v12 = *(_QWORD *)&v11[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetDownloadManagerLock];
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v12 + 16));
  v13 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetDownloadManager;
  v14 = *(_QWORD *)&v11[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetDownloadManager];
  if (v14)
  {
    v15 = *(_QWORD *)&v11[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetDownloadManager];
  }
  else
  {
    v16 = v11;
    v15 = sub_1005D2858(v16);

    v17 = *(_QWORD *)&v11[v13];
    *(_QWORD *)&v11[v13] = v15;
    swift_retain(v15);
    swift_release(v17);
    v14 = 0;
  }
  v18 = *(os_unfair_lock_s **)(v12 + 16);
  swift_retain(v14);
  os_unfair_lock_unlock(v18);
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v19(v10, v2 + OBJC_IVAR____TtC8Freeform26CRLAssetBackedAssetStorage_assetData, v5);
  v20 = type metadata accessor for TaskPriority(0);
  v21 = (uint64_t)v31;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v31, 1, 1, v20);
  v22 = v29;
  v19(v29, (uint64_t)v10, v5);
  v23 = *(unsigned __int8 *)(v6 + 80);
  v24 = (v23 + 40) & ~v23;
  v25 = (char *)swift_allocObject(v30, v24 + v7, v23 | 7);
  *((_QWORD *)v25 + 2) = 0;
  *((_QWORD *)v25 + 3) = 0;
  *((_QWORD *)v25 + 4) = v15;
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v25[v24], v22, v5);
  swift_retain(v15);
  v26 = sub_100521B98(v21, v32, (uint64_t)v25);
  swift_release(v15);
  v27 = swift_release(v26);
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v6 + 8))(v10, v5, v27);
}

void sub_1007EF16C()
{
  uint64_t v0;

  sub_1005CC194(v0 + OBJC_IVAR____TtC8Freeform26CRLAssetBackedAssetStorage_assetData);

}

uint64_t sub_1007EF198()
{
  uint64_t v0;

  sub_1005CC194(v0 + OBJC_IVAR____TtC8Freeform26CRLAssetBackedAssetStorage_assetData);

  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1007EF1D8()
{
  return type metadata accessor for CRLAssetBackedAssetStorage(0);
}

uint64_t type metadata accessor for CRLAssetBackedAssetStorage(uint64_t a1)
{
  uint64_t result;

  result = qword_1013F4058;
  if (!qword_1013F4058)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CRLAssetBackedAssetStorage);
  return result;
}

uint64_t sub_1007EF21C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for CRLAssetData(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 192);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1007EF2A0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc(dword_1013F4174);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_1004CFD00;
  return sub_1007EED70(a1, v5, v6, v7, v8);
}

uint64_t sub_1007EF334()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 v7;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v3 | 7;
  v6 = (((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  v7 = swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t, __n128))(v2 + 8))(v0 + v4, v1, v7);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_1007EF3D8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v1[2];
  v8 = v1[3];
  v9 = v1[4];
  v10 = *(_QWORD *)((char *)v1 + v6);
  v11 = (uint64_t)v1 + v5;
  v12 = (_QWORD *)((char *)v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));
  v13 = *v12;
  v14 = v12[1];
  v15 = (_QWORD *)swift_task_alloc(dword_1013F4184);
  *(_QWORD *)(v2 + 16) = v15;
  *v15 = v2;
  v15[1] = sub_1004CFD00;
  return sub_1007EE844(a1, v7, v8, v9, v11, v10, v13, v14);
}

uint64_t sub_1007EF4A4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1007EF4C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_1007EF4D8(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

uint64_t sub_1007EFA6C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  Class isa;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  NSString v16;
  NSString v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;

  v0 = sub_1004B804C(&qword_1013F4270);
  __chkstk_darwin(v0);
  v2 = (char *)&v26 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for PersonNameComponents(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10063ABC4((uint64_t)v2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_1004CB800((uint64_t)v2, &qword_1013F4270);
LABEL_8:
    v10 = sub_10063B4E0();
    v12 = v14;
    goto LABEL_9;
  }
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v2, v3);
  v7 = (void *)objc_opt_self(NSPersonNameComponentsFormatter);
  isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
  v9 = objc_msgSend(v7, "localizedStringFromPersonNameComponents:style:options:", isa, 1, 0);

  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v12 = v11;

  if ((v12 & 0x2000000000000000) != 0)
    v13 = HIBYTE(v12) & 0xF;
  else
    v13 = v10 & 0xFFFFFFFFFFFFLL;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  if (!v13)
  {
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
LABEL_9:
  v15 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v16 = String._bridgeToObjectiveC()();
  v17 = String._bridgeToObjectiveC()();
  v18 = objc_msgSend(v15, "localizedStringForKey:value:table:", v16, v17, 0);

  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v21 = v20;

  v22 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  v23 = swift_allocObject(v22, 72, 7);
  *(_OWORD *)(v23 + 16) = xmmword_100EF5E40;
  *(_QWORD *)(v23 + 56) = &type metadata for String;
  *(_QWORD *)(v23 + 64) = sub_1004CFC2C();
  *(_QWORD *)(v23 + 32) = v10;
  *(_QWORD *)(v23 + 40) = v12;
  v24 = String.init(format:_:)(v19, v21, v23);
  swift_bridgeObjectRelease();
  return v24;
}

id sub_1007EFD20()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController____lazy_storage___participantColor;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController____lazy_storage___participantColor);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController____lazy_storage___participantColor);
  }
  else
  {
    v4 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController_followingParticipant), "collaboratorColorForType:", 2);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

id sub_1007EFD9C()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  double v7;
  double v8;
  id v9;
  uint64_t v10;
  uint64_t inited;
  uint64_t v12;
  NSString *v13;
  id v14;
  NSString *v15;
  id v16;
  id v17;
  NSString v18;
  Class isa;
  id v20;
  uint64_t v22;

  v0 = (void *)objc_opt_self(UIColor);
  v1 = objc_msgSend(v0, "whiteColor");
  v2 = objc_msgSend((id)objc_opt_self(UIFont), "systemFontOfSize:weight:", 13.0, UIFontWeightMedium);
  if (objc_msgSend((id)objc_opt_self(CRLAccessibility), "isIncreaseContrastEnabled"))
  {
    v3 = sub_1007EFD20();
    v4 = objc_msgSend(v3, "UIColor");

    v5 = objc_msgSend(v4, "CGColor");
    v6 = objc_msgSend(objc_allocWithZone((Class)CRLColor), "initWithCGColor:", v5);

    objc_msgSend(v6, "brightnessComponent");
    v8 = v7;

    if (v8 > 0.5)
    {
      v9 = objc_msgSend(v0, "blackColor");

      v1 = v9;
    }
  }
  v10 = sub_1004B804C((uint64_t *)&unk_1013F4250);
  inited = swift_initStackObject(v10, &v22);
  *(_OWORD *)(inited + 16) = xmmword_100EF5A10;
  *(_QWORD *)(inited + 32) = NSFontAttributeName;
  v12 = sub_1004B8930(0, (unint64_t *)&qword_101401710, UIFont_ptr);
  *(_QWORD *)(inited + 40) = v2;
  *(_QWORD *)(inited + 64) = v12;
  *(_QWORD *)(inited + 72) = NSForegroundColorAttributeName;
  *(_QWORD *)(inited + 104) = sub_1004B8930(0, (unint64_t *)&qword_1013F4260, UIColor_ptr);
  *(_QWORD *)(inited + 80) = v1;
  v13 = NSFontAttributeName;
  v14 = v2;
  v15 = NSForegroundColorAttributeName;
  v16 = v1;
  sub_1008D4FE0(inited);
  sub_1007EFA6C();
  v17 = objc_allocWithZone((Class)NSAttributedString);
  v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  type metadata accessor for Key(0);
  sub_1004BFA1C();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v20 = objc_msgSend(v17, "initWithString:attributes:", v18, isa, swift_bridgeObjectRelease().n128_f64[0]);

  return v20;
}

void *sub_1007F003C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  void (*v24)(_BYTE *, _QWORD);
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  void *v30;
  id v31;
  id v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(_BYTE *, _QWORD);
  uint64_t v40;
  char *v41;
  _BYTE v42[32];

  v1 = sub_1004B804C((uint64_t *)&unk_1013F4240);
  __chkstk_darwin(v1);
  v3 = (char *)&v40 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1004B804C(&qword_1013F6AE0);
  __chkstk_darwin(v4);
  v41 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v40 - v7;
  v9 = sub_1004B804C((uint64_t *)&unk_1013DFBD0);
  __chkstk_darwin(v9);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UIButton.Configuration(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v40 - v18;
  static UIButton.Configuration.tinted()(v17);
  v20 = v0 + OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController_stopFollowingString;
  v21 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController_stopFollowingString);
  v22 = *(_QWORD *)(v20 + 8);
  v23 = swift_bridgeObjectRetain(v22);
  UIButton.Configuration.title.setter(v21, v22, v23);
  v24 = (void (*)(_BYTE *, _QWORD))UIButton.Configuration.background.modify(v42);
  UIBackgroundConfiguration.cornerRadius.setter(12.0);
  v24(v42, 0);
  v25 = (void *)objc_opt_self(UIColor);
  UIButton.Configuration.baseForegroundColor.setter(objc_msgSend(v25, "whiteColor"));
  UIConfigurationTextAttributesTransformer.init(_:)(sub_1007F04C4, 0);
  v26 = type metadata accessor for UIConfigurationTextAttributesTransformer(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v11, 0, 1, v26);
  UIButton.Configuration.titleTextAttributesTransformer.setter(v11);
  sub_1004B8930(0, (unint64_t *)&qword_1013DFC20, UIAction_ptr);
  v27 = swift_allocObject(&unk_101280468, 24, 7);
  swift_unknownObjectWeakInit(v27 + 16);
  v28 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(0, 0xE000000000000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_1007F1C5C, v27);
  sub_1004B8930(0, (unint64_t *)&unk_1013DFBC0, UIButton_ptr);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v15, v19, v12);
  v29 = v28;
  v30 = (void *)UIButton.init(configuration:primaryAction:)(v15, v28);
  objc_msgSend(v30, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v31 = objc_msgSend(v25, "blackColor");
  v32 = objc_msgSend(v31, "colorWithAlphaComponent:", 0.3);

  UIButton.configuration.getter(v33);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v8, 1, v12))
  {
    v34 = v41;
    sub_1004CB7BC((uint64_t)v8, (uint64_t)v41, &qword_1013F6AE0);
    UIButton.configuration.setter(v34);

    (*(void (**)(char *, uint64_t))(v13 + 8))(v19, v12);
    sub_1004CB800((uint64_t)v8, &qword_1013F6AE0);
  }
  else
  {
    v35 = swift_allocObject(&unk_101280490, 24, 7);
    swift_unknownObjectWeakInit(v35 + 16);
    v36 = swift_allocObject(&unk_1012804B8, 32, 7);
    *(_QWORD *)(v36 + 16) = v35;
    *(_QWORD *)(v36 + 24) = v32;
    v41 = (char *)v32;
    UIConfigurationColorTransformer.init(_:)(sub_1007F1C90, v36);
    v37 = type metadata accessor for UIConfigurationColorTransformer(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v3, 0, 1, v37);
    v38 = (void (*)(_BYTE *, _QWORD))UIButton.Configuration.background.modify(v42);
    UIBackgroundConfiguration.backgroundColorTransformer.setter(v3);
    v38(v42, 0);
    UIButton.configuration.setter(v8);

    (*(void (**)(char *, uint64_t))(v13 + 8))(v19, v12);
  }
  return v30;
}

uint64_t sub_1007F04C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t KeyPath;
  id v9;

  v4 = type metadata accessor for AttributeContainer(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  KeyPath = swift_getKeyPath(&unk_100F0E408);
  v5 = swift_getKeyPath(&unk_100F0E438);
  v9 = objc_msgSend((id)objc_opt_self(UIFont), "systemFontOfSize:weight:", 11.0, UIFontWeightBold, KeyPath);
  v6 = sub_1004CB548();
  return AttributeContainer.subscript.setter(&v9, v5, v6);
}

void sub_1007F0578(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  void *v4;
  void (*v5)(void);
  uint64_t v6;
  _BYTE v7[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v7, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v4 = (void *)Strong;
    v5 = *(void (**)(void))(Strong + OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController_stopButtonClickedHandler);
    v6 = *(_QWORD *)(Strong + OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController_stopButtonClickedHandler + 8);
    sub_1004C0F54((uint64_t)v5, v6);

    if (v5)
    {
      v5();
      sub_1004C1024((uint64_t)v5, v6);
    }
  }
}

id sub_1007F05FC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  void *Strong;
  void *v5;
  id v6;
  id v7;
  id v9;
  _BYTE v11[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v11, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v3);
  if (!Strong)
    return a3;
  v5 = Strong;
  if (objc_msgSend(Strong, "state") == (id)1)
  {
    v6 = objc_msgSend((id)objc_opt_self(UIColor), "blackColor", a3);
    v7 = objc_msgSend(v6, "colorWithAlphaComponent:", 0.5);

    return v7;
  }
  else
  {
    v9 = a3;

    return v9;
  }
}

void sub_1007F06E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  Class isa;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  id v30;
  id v31;
  id v32;
  id v33;
  NSString v34;
  uint64_t Strong;
  void *v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  NSString v46;
  double v47;
  id v48;
  void *v49;
  id v50;
  NSString v51;
  UIAccessibilityTraits v52;
  id v53;
  unint64_t v54;
  UIAccessibilityTraits v55;
  NSString v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  uint64_t v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  uint64_t v81;
  id v82;
  id v83;
  void *v84;
  double v85;
  id v86;
  id v87;
  void *v88;
  id v89;
  id v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  id v95;
  id v96;
  _OWORD v97[2];
  _QWORD v98[5];

  v1 = v0;
  v2 = OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController_hudView;
  v3 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                             + OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController_hudView), "subviews"));
  v4 = sub_1004B8930(0, (unint64_t *)&qword_1013DFC10, UIView_ptr);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0)
      v10 = v5;
    else
      v10 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v6 = _CocoaArrayWrapper.endIndex.getter(v10);
    if (!v6)
      goto LABEL_13;
  }
  else
  {
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v5);
    if (!v6)
      goto LABEL_13;
  }
  if (v6 < 1)
  {
    __break(1u);
    return;
  }
  for (i = 0; i != v6; ++i)
  {
    if ((v5 & 0xC000000000000001) != 0)
      v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v5);
    else
      v8 = *(id *)(v5 + 8 * i + 32);
    v9 = v8;
    objc_msgSend(v8, "removeFromSuperview");

  }
LABEL_13:
  v95 = (id)v4;
  swift_bridgeObjectRelease_n(v5, 2);
  v11 = objc_msgSend(objc_allocWithZone((Class)CNAvatarViewController), "init");
  v12 = *(void **)(*(_QWORD *)(v1 + OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController_followingParticipant)
                 + OBJC_IVAR____TtC8Freeform27CRLCollaborationParticipant_cnContact);
  if (v12)
  {
    v13 = sub_1004B804C((uint64_t *)&unk_1013E4180);
    v14 = swift_allocObject(v13, 40, 7);
    *(_OWORD *)(v14 + 16) = xmmword_100EEF400;
    *(_QWORD *)(v14 + 32) = v12;
    v98[0] = v14;
    specialized Array._endMutation()(v14);
    sub_1004B8930(0, (unint64_t *)&qword_1013E8EB0, CNContact_ptr);
    v15 = v12;
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v11, "setContacts:", isa, swift_bridgeObjectRelease().n128_f64[0]);

  }
  v94 = v11;
  v17 = objc_msgSend(v11, "view");
  objc_msgSend(v17, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(*(id *)(v1 + v2), "addSubview:", v17);
  v18 = objc_msgSend(v17, "leadingAnchor");
  v19 = objc_msgSend(*(id *)(v1 + v2), "leadingAnchor");
  v20 = objc_msgSend(v18, "constraintEqualToAnchor:constant:", v19, 8.0);

  objc_msgSend(v20, "setActive:", 1);
  v21 = objc_msgSend(v17, "widthAnchor");
  v22 = objc_msgSend(v21, "constraintEqualToConstant:", 26.0);

  objc_msgSend(v22, "setActive:", 1);
  v23 = objc_msgSend(v17, "heightAnchor");
  v24 = objc_msgSend(v23, "constraintEqualToConstant:", 26.0);

  objc_msgSend(v24, "setActive:", 1);
  v25 = objc_msgSend(v17, "centerYAnchor");
  v26 = objc_msgSend(*(id *)(v1 + v2), "centerYAnchor");
  v27 = objc_msgSend(v25, "constraintEqualToAnchor:", v26);

  objc_msgSend(v27, "setActive:", 1);
  v28 = objc_msgSend(objc_allocWithZone((Class)UIStackView), "init");
  objc_msgSend(v28, "setAlignment:", 3);
  objc_msgSend(v28, "setAxis:", 1);
  objc_msgSend(v28, "setDistribution:", 1);
  objc_msgSend(v28, "setSpacing:", 3.0);
  objc_msgSend(v28, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v29 = v2;
  objc_msgSend(*(id *)(v1 + v2), "addSubview:", v28);
  v30 = sub_1007F152C();
  objc_msgSend(v30, "setNumberOfLines:", 2);
  v31 = sub_1007EFD9C();
  if (v31)
  {
    v32 = v31;
  }
  else
  {
    sub_100757E04(&_mh_execute_header, (uint64_t)"setupAndLayoutAdaptableView()", 29, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLApplication/CRLPersistentFollowHUDController.swift", 107, 2, 245, "invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"setupAndLayoutAdaptableView()", 29, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLApplication/CRLPersistentFollowHUDController.swift", 107, 2u, 245, (uint64_t)"invalid nil found when unwrapping value", 39, 2u);
    v33 = objc_allocWithZone((Class)NSAttributedString);
    v34 = String._bridgeToObjectiveC()();
    v32 = objc_msgSend(v33, "initWithString:", v34);

  }
  Strong = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController_accessibilityExperienceCoordinator);
  if (Strong)
  {
    v36 = (void *)Strong;
    sub_100998B20(v30, 1);

  }
  objc_msgSend(v30, "setAttributedText:", v32);
  v37 = objc_msgSend(v28, "leadingAnchor");
  v38 = objc_msgSend(v17, "trailingAnchor");
  v39 = objc_msgSend(v37, "constraintEqualToAnchor:constant:", v38, 8.0);

  objc_msgSend(v39, "setActive:", 1);
  v40 = objc_msgSend(v28, "heightAnchor");
  v41 = objc_msgSend(v40, "constraintEqualToConstant:", 24.0);

  objc_msgSend(v41, "setActive:", 1);
  v42 = objc_msgSend(v28, "centerYAnchor");
  v43 = objc_msgSend(*(id *)(v1 + v29), "centerYAnchor");
  v44 = objc_msgSend(v42, "constraintEqualToAnchor:", v43);

  objc_msgSend(v44, "setActive:", 1);
  objc_msgSend(v28, "addArrangedSubview:", v30);
  objc_msgSend(v28, "setShowsLargeContentViewer:", 1);
  v45 = v28;
  v93 = v32;
  v46 = objc_msgSend(v32, "string");
  v92 = v17;
  if (!v46)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v46 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v47 = swift_bridgeObjectRelease().n128_u64[0];
  }
  objc_msgSend(v45, "setLargeContentTitle:", v46, v47);

  v48 = objc_msgSend(objc_allocWithZone((Class)UILargeContentViewerInteraction), "initWithDelegate:", v1);
  objc_msgSend(v45, "addInteraction:", v48);

  objc_msgSend(v30, "setTextAlignment:", 0);
  v49 = sub_1007F003C();
  objc_msgSend(v49, "setIsAccessibilityElement:", 1);
  v50 = v49;
  v91 = v30;
  v51 = String._bridgeToObjectiveC()();
  objc_msgSend(v50, "setAccessibilityLabel:", v51);

  v52 = UIAccessibilityTraitButton;
  v53 = v50;
  v54 = (unint64_t)objc_msgSend(v53, "accessibilityTraits");
  if ((v52 & ~v54) != 0)
    v55 = v52;
  else
    v55 = 0;
  objc_msgSend(v53, "setAccessibilityTraits:", v55 | v54);

  objc_msgSend(v53, "setShowsLargeContentViewer:", 1);
  v56 = String._bridgeToObjectiveC()();
  objc_msgSend(v53, "setLargeContentTitle:", v56);

  v57 = objc_msgSend(objc_allocWithZone((Class)UILargeContentViewerInteraction), "initWithDelegate:", v1);
  objc_msgSend(v53, "addInteraction:", v57);

  objc_msgSend(*(id *)(v1 + v29), "addSubview:", v53);
  v58 = objc_msgSend(v53, "leadingAnchor");
  v59 = objc_msgSend(v45, "trailingAnchor");
  v60 = objc_msgSend(v58, "constraintEqualToAnchor:constant:", v59, 8.0);

  objc_msgSend(v60, "setActive:", 1);
  v61 = objc_msgSend(v53, "trailingAnchor");
  v62 = objc_msgSend(*(id *)(v1 + v29), "trailingAnchor");
  v63 = objc_msgSend(v61, "constraintEqualToAnchor:constant:", v62, -8.0);

  objc_msgSend(v63, "setActive:", 1);
  v64 = objc_msgSend(v53, "heightAnchor");
  v65 = objc_msgSend(v64, "constraintEqualToConstant:", 24.0);

  objc_msgSend(v65, "setActive:", 1);
  v66 = objc_msgSend(v53, "centerYAnchor");
  v67 = objc_msgSend(*(id *)(v1 + v29), "centerYAnchor");
  v68 = objc_msgSend(v66, "constraintEqualToAnchor:", v67);

  objc_msgSend(v68, "setActive:", 1);
  v69 = objc_msgSend(*(id *)(v1 + v29), "leadingAnchor");
  v70 = OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController_containerView;
  v71 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController_containerView), "leadingAnchor");
  v72 = objc_msgSend(v69, "constraintEqualToAnchor:", v71);

  objc_msgSend(v72, "setActive:", 1);
  v73 = objc_msgSend(*(id *)(v1 + v29), "heightAnchor");
  v74 = objc_msgSend(v73, "constraintEqualToConstant:", 40.0);

  objc_msgSend(v74, "setActive:", 1);
  v75 = objc_msgSend(*(id *)(v1 + v29), "topAnchor");
  v76 = objc_msgSend(*(id *)(v1 + v70), "topAnchor");
  v77 = objc_msgSend(v75, "constraintEqualToAnchor:", v76);

  objc_msgSend(v77, "setActive:", 1);
  v78 = objc_msgSend(*(id *)(v1 + v29), "trailingAnchor");
  v79 = objc_msgSend(*(id *)(v1 + v70), "trailingAnchor");
  v80 = objc_msgSend(v78, "constraintEqualToAnchor:", v79);

  objc_msgSend(v80, "setActive:", 1);
  v81 = OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController_height;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController_height) = 0x404C000000000000;
  v82 = objc_msgSend(*(id *)(v1 + v70), "heightAnchor");
  v83 = objc_msgSend(v82, "constraintEqualToConstant:", *(double *)(v1 + v81));

  objc_msgSend(v83, "setActive:", 1);
  sub_1004B8930(0, (unint64_t *)&qword_1013E1760, NSLayoutConstraint_ptr);
  v84 = *(void **)(v1 + v70);
  v98[3] = v95;
  v98[0] = v84;
  memset(v97, 0, sizeof(v97));
  v85 = *(double *)(v1 + v81);
  v86 = v84;
  v87 = sub_100881454(v98, 8, 0, v97, 8, 1.0, v85);
  v88 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController_heightConstraint);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController_heightConstraint) = v87;

  v89 = objc_msgSend(*(id *)(v1 + v29), "layer");
  objc_msgSend(v89, "setMasksToBounds:", 0);

  v90 = objc_msgSend(*(id *)(v1 + v29), "layer");
  objc_msgSend(v90, "setCornerCurve:", kCACornerCurveContinuous);

  v96 = objc_msgSend(*(id *)(v1 + v29), "layer");
  objc_msgSend(v96, "setCornerRadius:", 20.0);

}

id sub_1007F152C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v1 = OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController____lazy_storage____label;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController____lazy_storage____label);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController____lazy_storage____label);
  }
  else
  {
    sub_1007EFA6C();
    sub_100C89724();
    v5 = v4;
    objc_msgSend(v4, "setTranslatesAutoresizingMaskIntoConstraints:", 0, swift_bridgeObjectRelease().n128_f64[0]);
    v6 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v5;
    v3 = v5;

    v2 = 0;
  }
  v7 = v2;
  return v3;
}

id sub_1007F16BC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CRLPersistentFollowHUDController(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1007F182C()
{
  return type metadata accessor for CRLPersistentFollowHUDController(0);
}

uint64_t type metadata accessor for CRLPersistentFollowHUDController(uint64_t a1)
{
  uint64_t result;

  result = qword_1013F4228;
  if (!qword_1013F4228)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CRLPersistentFollowHUDController);
  return result;
}

void sub_1007F1870(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[29];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[3] = "\b";
  v4[4] = "\b";
  v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[6] = "\b";
  v4[7] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[8] = (char *)&value witness table for Builtin.Int64 + 64;
  sub_10056ACC0(319);
  if (v3 <= 0x3F)
  {
    v4[9] = *(_QWORD *)(v2 - 8) + 64;
    v4[10] = &unk_100F0E390;
    v4[11] = &unk_100F0E3A8;
    v4[12] = &unk_100F0E3A8;
    v4[13] = &unk_100F0E3A8;
    v4[14] = &unk_100F0E3C0;
    v4[15] = &unk_100F0E3A8;
    v4[16] = &unk_100F0E390;
    v4[17] = &unk_100F0E3A8;
    v4[18] = &unk_100F0E3A8;
    v4[19] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[20] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[21] = &unk_100F0E390;
    v4[22] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[23] = "\b";
    v4[24] = &unk_100F0E3C0;
    v4[25] = &unk_100F0E3D8;
    v4[26] = &unk_100F0E390;
    v4[27] = &unk_100F0E3F0;
    v4[28] = &unk_100F0E390;
    swift_updateClassMetadata2(a1, 256, 29, v4, a1 + 80);
  }
}

char *sub_1007F1A6C(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, _QWORD *a7, double a8)
{
  _BYTE *v16;
  char *v17;
  uint64_t ObjectType;
  double *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;

  v16 = objc_allocWithZone((Class)type metadata accessor for CRLPersistentFollowHUDController(0));
  v17 = (char *)sub_1007F1CFC(a1, a2, a3, (uint64_t)a4, v16);
  ObjectType = swift_getObjectType(a7);
  swift_deallocPartialClassInstance(a7, ObjectType, *(unsigned int *)((swift_isaMask & *a7) + 0x30), *(unsigned __int16 *)((swift_isaMask & *a7) + 0x34));
  v19 = (double *)&v17[OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController_canvasWidth];
  *v19 = a8;
  *((_BYTE *)v19 + 8) = 0;
  v20 = (uint64_t *)&v17[OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController_stopButtonClickedHandler];
  v21 = *(_QWORD *)&v17[OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController_stopButtonClickedHandler];
  v22 = *(_QWORD *)&v17[OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController_stopButtonClickedHandler + 8];
  *v20 = a5;
  v20[1] = a6;
  v23 = v17;
  sub_1004C0F54(a5, a6);
  v24 = sub_1004C1024(v21, v22);
  if ((v23[OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController_setupDone] & 1) == 0)
  {
    v23[OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController_setupDone] = 1;
    sub_100C1960C(v24);
    v25 = OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController_hudView;
    v26 = *(id *)&v23[OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController_hudView];
    v27 = sub_1007F152C();
    objc_msgSend(v26, "addSubview:", v27);

    objc_msgSend(*(id *)&v23[OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController_containerView], "addSubview:", *(_QWORD *)&v23[v25]);
    sub_1007F06E0();
  }
  v28 = sub_1007EFA6C();
  v30 = v29;
  sub_1004C1024(a5, a6);

  swift_unknownObjectRelease(a1);
  swift_unknownObjectRelease(a3);
  v31 = (uint64_t *)&v23[OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController_accessibilityAnnouncement];
  *v31 = v28;
  v31[1] = v30;
  swift_bridgeObjectRelease();
  return v23;
}

uint64_t sub_1007F1C38()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1007F1C5C(uint64_t a1)
{
  uint64_t v1;

  sub_1007F0578(a1, v1);
}

uint64_t sub_1007F1C64()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

id sub_1007F1C90(uint64_t a1)
{
  uint64_t v1;

  return sub_1007F05FC(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_1007F1CA4()
{
  return 8;
}

double sub_1007F1CB0(_QWORD *a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*a1).n128_u64[0];
  return result;
}

uint64_t sub_1007F1CB8(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *a1;
  *a2 = v2;
  return swift_retain(v2);
}

_QWORD *sub_1007F1CCC(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1007F1CD8()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

id sub_1007F1CFC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  uint64_t *v15;
  void *v16;
  char *v17;
  id v18;
  NSString v19;
  NSString v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  id v28;
  objc_super v33;

  v7 = &a5[OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController_manager];
  swift_unknownObjectWeakInit(&a5[OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController_manager]);
  v8 = &a5[OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController_delegate];
  swift_unknownObjectWeakInit(&a5[OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController_delegate]);
  *(_QWORD *)&a5[OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController_type] = 0;
  swift_unknownObjectWeakInit(&a5[OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController_crlaxViewControllerForLCVInteractions]);
  *(_QWORD *)&a5[OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController_minimumShowDuration] = 0;
  *(_QWORD *)&a5[OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController_maximumShowDuration] = 0;
  v9 = &a5[OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController_timeStartedShowing];
  v10 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  *(_QWORD *)&a5[OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController_hideTimer] = 0;
  a5[OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController_showing] = 0;
  a5[OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController_animating] = 0;
  a5[OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController_hiding] = 0;
  v11 = &a5[OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController_accessibilityAnnouncement];
  *v11 = 0;
  v11[1] = 0;
  a5[OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController_swipable] = 0;
  *(_QWORD *)&a5[OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController_swipeGestureRecognizer] = 0;
  a5[OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController_hideOnTouch] = 0;
  a5[OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController_setupDone] = 0;
  *(_QWORD *)&a5[OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController_height] = 0x4045000000000000;
  *(_QWORD *)&a5[OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController_width] = 0;
  *(_QWORD *)&a5[OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController_heightConstraint] = 0;
  *(_QWORD *)&a5[OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController_constraints] = _swiftEmptyArrayStorage;
  v12 = &a5[OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController_accessibilityExperienceCoordinator];
  swift_unknownObjectWeakInit(&a5[OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController_accessibilityExperienceCoordinator]);
  v13 = &a5[OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController_stopButtonClickedHandler];
  *v13 = 0;
  v13[1] = 0;
  v14 = &a5[OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController_canvasWidth];
  *(_QWORD *)v14 = 0;
  v14[8] = 1;
  *(_QWORD *)&a5[OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController____lazy_storage___participantColor] = 0;
  v15 = (uint64_t *)&a5[OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController_stopFollowingString];
  v16 = (void *)objc_opt_self(NSBundle);
  v17 = a5;
  v18 = objc_msgSend(v16, "mainBundle");
  v19 = String._bridgeToObjectiveC()();
  v20 = String._bridgeToObjectiveC()();
  v21 = objc_msgSend(v18, "localizedStringForKey:value:table:", v19, v20, 0);

  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
  v24 = v23;

  *v15 = v22;
  v15[1] = v24;
  *(_QWORD *)&v17[OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController____lazy_storage____label] = 0;
  swift_unknownObjectWeakAssign(v7, a1);
  *(_QWORD *)&v17[OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController_followingParticipant] = a2;
  swift_unknownObjectWeakAssign(v8, a3);
  v25 = objc_allocWithZone((Class)UIView);
  v26 = a2;
  v27 = objc_msgSend(v25, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  *(_QWORD *)&v17[OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController_hudView] = v27;
  v28 = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  *(_QWORD *)&v17[OBJC_IVAR____TtC8Freeform32CRLPersistentFollowHUDController_containerView] = v28;
  swift_unknownObjectWeakAssign(v12, a4);

  v33.receiver = v17;
  v33.super_class = (Class)type metadata accessor for CRLPersistentFollowHUDController(0);
  return objc_msgSendSuper2(&v33, "init");
}

void sub_1007F205C(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  double v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[5];
  void *v31;

  v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v4 = a1;
    else
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v5 = __CocoaSet.makeIterator()(v4);
    v6 = sub_1004B8930(0, (unint64_t *)&qword_1013E1760, NSLayoutConstraint_ptr);
    v7 = sub_1007F87C0();
    v8 = Set.Iterator.init(_cocoa:)(v30, v5, v6, v7);
    v3 = v30[0];
    v28 = v30[1];
    v9 = v30[2];
    v10 = v30[3];
    v11 = v30[4];
  }
  else
  {
    v12 = -1 << *(_BYTE *)(a1 + 32);
    v28 = a1 + 56;
    v9 = ~v12;
    v13 = -v12;
    if (v13 < 64)
      v14 = ~(-1 << v13);
    else
      v14 = -1;
    v11 = v14 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v10 = 0;
  }
  v27 = (unint64_t)(v9 + 64) >> 6;
  v15 = a2 & 1;
  if (v3 < 0)
    goto LABEL_13;
  while (1)
  {
    if (v11)
    {
      v16 = (v11 - 1) & v11;
      v17 = __clz(__rbit64(v11)) | (v10 << 6);
      v18 = v10;
      goto LABEL_32;
    }
    v24 = v10 + 1;
    if (__OFADD__(v10, 1))
      break;
    if (v24 >= v27)
      goto LABEL_35;
    v25 = *(_QWORD *)(v28 + 8 * v24);
    v18 = v10 + 1;
    if (!v25)
    {
      v18 = v10 + 2;
      if (v10 + 2 >= v27)
        goto LABEL_35;
      v25 = *(_QWORD *)(v28 + 8 * v18);
      if (!v25)
      {
        v18 = v10 + 3;
        if (v10 + 3 >= v27)
          goto LABEL_35;
        v25 = *(_QWORD *)(v28 + 8 * v18);
        if (!v25)
        {
          v18 = v10 + 4;
          if (v10 + 4 >= v27)
            goto LABEL_35;
          v25 = *(_QWORD *)(v28 + 8 * v18);
          if (!v25)
          {
            v18 = v10 + 5;
            if (v10 + 5 >= v27)
              goto LABEL_35;
            v25 = *(_QWORD *)(v28 + 8 * v18);
            if (!v25)
            {
              v26 = v10 + 6;
              while (v27 != v26)
              {
                v25 = *(_QWORD *)(v28 + 8 * v26++);
                if (v25)
                {
                  v18 = v26 - 1;
                  goto LABEL_31;
                }
              }
LABEL_35:
              sub_1004D284C(v3);
              return;
            }
          }
        }
      }
    }
LABEL_31:
    v16 = (v25 - 1) & v25;
    v17 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_32:
    v22 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v17);
    if (!v22)
      goto LABEL_35;
    while (1)
    {
      objc_msgSend(v22, "setActive:", v15, v23);

      v10 = v18;
      v11 = v16;
      if ((v3 & 0x8000000000000000) == 0)
        break;
LABEL_13:
      v19 = __CocoaSet.Iterator.next()(v8);
      if (v19)
      {
        v20 = v19;
        v29 = v19;
        v21 = sub_1004B8930(0, (unint64_t *)&qword_1013E1760, NSLayoutConstraint_ptr);
        swift_unknownObjectRetain(v20);
        swift_dynamicCast(&v31, &v29, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
        v22 = v31;
        *(_QWORD *)&v23 = swift_unknownObjectRelease(v20).n128_u64[0];
        v18 = v10;
        v16 = v11;
        if (v22)
          continue;
      }
      goto LABEL_35;
    }
  }
  __break(1u);
}

id sub_1007F2334()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtCC8Freeform30CRLiOSFolderGridViewController8ListItem____lazy_storage___listViewController;
  v2 = *(void **)(v0
                + OBJC_IVAR____TtCC8Freeform30CRLiOSFolderGridViewController8ListItem____lazy_storage___listViewController);
  if (v2)
  {
    v3 = *(id *)(v0
               + OBJC_IVAR____TtCC8Freeform30CRLiOSFolderGridViewController8ListItem____lazy_storage___listViewController);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)_s8ListItemC18ListViewControllerCMa()), "init");
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

void sub_1007F23A0()
{
  qword_10147F750 = 0x407C200000000000;
}

void sub_1007F23B4()
{
  qword_10147F758 = 0x404E000000000000;
}

void sub_1007F23C4()
{
  qword_10147F760 = 0;
}

void sub_1007F23D0()
{
  qword_10147F768 = 0;
}

void sub_1007F23DC()
{
  qword_10147F770 = 0x4024000000000000;
}

void sub_1007F23EC()
{
  qword_10147F778 = 0x4010000000000000;
}

void sub_1007F23FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  qword_10147F780 = sub_100063854(4.0);
  qword_10147F788 = v0;
  qword_10147F790 = v1;
  qword_10147F798 = v2;
}

id sub_1007F2430(uint64_t a1)
{
  return sub_1004BEA38(a1, (SEL *)&selRef_whiteColor, &qword_10147F7A0);
}

void sub_1007F2444()
{
  qword_10147F7A8 = 0x4048000000000000;
}

id sub_1007F2454()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithWhite:alpha:", 0.0, 0.15);
  qword_10147F7B0 = (uint64_t)result;
  return result;
}

void sub_1007F2494()
{
  qword_10147F7B8 = 0x4014000000000000;
}

CALayerCornerCurve sub_1007F24A4()
{
  qword_10147F7C0 = (uint64_t)kCACornerCurveContinuous;
  return kCACornerCurveContinuous;
}

id sub_1007F24BC()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithWhite:alpha:", 0.0, 0.08);
  qword_10147F7C8 = (uint64_t)result;
  return result;
}

double sub_1007F24F8()
{
  double result;

  result = 0.0;
  xmmword_10147F7D0 = xmmword_100EED720;
  return result;
}

void sub_1007F250C()
{
  qword_10147F7E0 = 0x3FF0000000000000;
}

void sub_1007F251C()
{
  qword_10147F7E8 = 0x3FF0000000000000;
}

void sub_1007F252C()
{
  qword_10147F7F0 = 0x4022000000000000;
}

void sub_1007F253C()
{
  qword_10147F7F8 = 0x4024000000000000;
}

void sub_1007F254C()
{
  qword_10147F800 = 0x4000000000000000;
}

UIFontTextStyle sub_1007F255C()
{
  qword_10147F808 = (uint64_t)UIFontTextStyleBody;
  return UIFontTextStyleBody;
}

UIFontWeight sub_1007F2574()
{
  UIFontWeight result;

  result = UIFontWeightRegular;
  qword_10147F810 = *(_QWORD *)&UIFontWeightRegular;
  return result;
}

id sub_1007F258C(uint64_t a1)
{
  return sub_1004BEA38(a1, (SEL *)&selRef_labelColor, &qword_10147F818);
}

UIFontTextStyle sub_1007F25A0()
{
  qword_10147F820 = (uint64_t)UIFontTextStyleFootnote;
  return UIFontTextStyleFootnote;
}

UIFontWeight sub_1007F25B8()
{
  UIFontWeight result;

  result = UIFontWeightRegular;
  qword_10147F828 = *(_QWORD *)&UIFontWeightRegular;
  return result;
}

id sub_1007F25D0(uint64_t a1)
{
  return sub_1004BEA38(a1, (SEL *)&selRef_secondaryLabelColor, &qword_10147F830);
}

UIFontTextStyle sub_1007F25E4()
{
  qword_10147F838 = (uint64_t)UIFontTextStyleBody;
  return UIFontTextStyleBody;
}

UIFontWeight sub_1007F25FC()
{
  UIFontWeight result;

  result = UIFontWeightRegular;
  qword_10147F840 = *(_QWORD *)&UIFontWeightRegular;
  return result;
}

id sub_1007F2614(uint64_t a1)
{
  return sub_1004BEA38(a1, (SEL *)&selRef_secondaryLabelColor, &qword_10147F848);
}

void sub_1007F2628()
{
  qword_10147F850 = 0x4059000000000000;
}

void sub_1007F2638()
{
  qword_10147F858 = 0x4032000000000000;
}

void sub_1007F2648()
{
  qword_10147F860 = 0x4014000000000000;
}

uint64_t sub_1007F2658()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  v1 = OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController____lazy_storage___textLayoutBuilder;
  v2 = *(_QWORD *)&v0[OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController____lazy_storage___textLayoutBuilder];
  v3 = v2;
  if (v2 == 1)
  {
    v4 = _s8ListItemC17TextLayoutBuilderCMa();
    v3 = swift_allocObject(v4, 248, 7);
    *(_OWORD *)(v3 + 24) = 0u;
    *(_OWORD *)(v3 + 40) = 0u;
    *(_OWORD *)(v3 + 56) = 0u;
    *(_OWORD *)(v3 + 72) = 0u;
    *(_OWORD *)(v3 + 88) = 0u;
    *(_OWORD *)(v3 + 104) = 0u;
    *(_OWORD *)(v3 + 120) = 0u;
    *(_OWORD *)(v3 + 136) = 0u;
    *(_OWORD *)(v3 + 152) = 0u;
    *(_OWORD *)(v3 + 168) = 0u;
    *(_OWORD *)(v3 + 184) = 0u;
    *(_OWORD *)(v3 + 200) = 0u;
    *(_OWORD *)(v3 + 216) = 0u;
    *(_OWORD *)(v3 + 232) = 0u;
    *(_QWORD *)(v3 + 16) = v0;
    *(_QWORD *)&v0[v1] = v3;
    v5 = v0;
    swift_retain(v3);
    sub_1007F8AB4(1);
  }
  sub_1007F8AC4(v2);
  return v3;
}

id sub_1007F270C()
{
  uint64_t v0;
  void *v1;

  sub_100B2F808();
  v1 = *(void **)(v0
                + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_roundedCornersContainerView);
  objc_msgSend(v1, "addLayoutGuide:", *(_QWORD *)(v0+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_textLayoutGuide));
  objc_msgSend(v1, "addLayoutGuide:", *(_QWORD *)(v0+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_primaryRowLayoutGuide));
  objc_msgSend(v1, "addLayoutGuide:", *(_QWORD *)(v0+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_secondaryRowLayoutGuide));
  return objc_msgSend(v1, "addLayoutGuide:", *(_QWORD *)(v0+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_tertiaryRowLayoutGuide));
}

void sub_1007F27A0()
{
  uint64_t v0;

  sub_1007F27A8(v0);
}

void sub_1007F27A8(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  int v6;
  double v7;
  id v8;
  id v9;
  id v10;
  id v11;
  double v12;
  void *v13;
  uint64_t v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  id v21;
  id v22;
  double v23;
  void *v24;
  uint64_t v25;
  id v26;
  id v27;
  double v28;
  double v29;
  void *v30;
  id v31;
  id v32;

  v31 = objc_msgSend(*(id *)(a1+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_roundedCornersContainerView), "layer");
  v2 = *(void **)(a1
                + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_thumbnailImageView);
  v3 = objc_msgSend(v2, "layer");
  v4 = objc_msgSend(*(id *)(a1+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_thumbnailBackdropView), "layer");
  v32 = objc_msgSend(*(id *)(a1+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_thumbnailContainerView), "layer");
  v5 = *(_QWORD *)(a1 + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_favoriteButton);
  v6 = *(unsigned __int8 *)(v5
                          + OBJC_IVAR____TtCCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController14FavoriteButton_size);
  *(_BYTE *)(v5 + OBJC_IVAR____TtCCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController14FavoriteButton_size) = 0;
  if (v6 == 1)
    sub_100B32AB8();
  objc_msgSend(v2, "setContentMode:", 1);
  LODWORD(v7) = 1148846080;
  objc_msgSend(v2, "setContentCompressionResistancePriority:forAxis:", 0, v7);
  if (qword_1013DCAD0 != -1)
    swift_once(&qword_1013DCAD0, sub_10058E1DC);
  v8 = objc_msgSend((id)qword_10147EA40, "CGColor");
  objc_msgSend(v3, "setBackgroundColor:", v8);

  if (qword_1013DD180 != -1)
    swift_once(&qword_1013DD180, sub_1007F2430);
  v30 = v3;
  v9 = objc_msgSend((id)qword_10147F7A0, "CGColor");
  objc_msgSend(v4, "setBackgroundColor:", v9);

  objc_msgSend(v4, "setMasksToBounds:", 1);
  if (qword_1013DD198 != -1)
    swift_once(&qword_1013DD198, sub_1007F2494);
  objc_msgSend(v4, "setCornerRadius:", *(double *)&qword_10147F7B8);
  if (qword_1013DD1A0 != -1)
    swift_once(&qword_1013DD1A0, sub_1007F24A4);
  objc_msgSend(v4, "setCornerCurve:", qword_10147F7C0);
  if (qword_1013DD190 != -1)
    swift_once(&qword_1013DD190, sub_1007F2454);
  v10 = objc_msgSend((id)qword_10147F7B0, "CGColor");
  objc_msgSend(v4, "setBorderColor:", v10);

  objc_msgSend(v4, "setBorderWidth:", 0.5);
  objc_msgSend(v32, "setMasksToBounds:", 0);
  objc_msgSend(v32, "setCornerRadius:", *(double *)&qword_10147F7B8);
  if (qword_1013DD1C0 != -1)
    swift_once(&qword_1013DD1C0, sub_1007F251C);
  objc_msgSend(v32, "setShadowRadius:", *(double *)&qword_10147F7E8);
  if (qword_1013DD1A8 != -1)
    swift_once(&qword_1013DD1A8, sub_1007F24BC);
  v11 = objc_msgSend((id)qword_10147F7C8, "CGColor");
  objc_msgSend(v32, "setShadowColor:", v11);

  if (qword_1013DD1B0 != -1)
    swift_once(&qword_1013DD1B0, sub_1007F24F8);
  objc_msgSend(v32, "setShadowOffset:", xmmword_10147F7D0);
  if (qword_1013DD1B8 != -1)
    swift_once(&qword_1013DD1B8, sub_1007F250C);
  HIDWORD(v12) = HIDWORD(qword_10147F7E0);
  *(float *)&v12 = *(double *)&qword_10147F7E0;
  objc_msgSend(v32, "setShadowOpacity:", v12);
  v13 = *(void **)(a1 + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_boardTitleLabel);
  if (qword_1013DD1E0 != -1)
    swift_once(&qword_1013DD1E0, sub_1007F255C);
  v14 = qword_10147F808;
  if (qword_1013DD1E8 != -1)
    swift_once(&qword_1013DD1E8, sub_1007F2574);
  v15 = (void *)objc_opt_self(UIFontDescriptor);
  v16 = objc_msgSend(v15, "preferredFontDescriptorWithTextStyle:", v14);
  v17 = (void *)objc_opt_self(UIFont);
  objc_msgSend(v16, "pointSize");
  v18 = objc_msgSend(v17, "systemFontOfSize:weight:");

  objc_msgSend(v13, "setFont:", v18);
  if (qword_1013DD1F0 != -1)
    swift_once(&qword_1013DD1F0, sub_1007F258C);
  objc_msgSend(v13, "setTextColor:", qword_10147F818);
  v19 = *(void **)(a1
                 + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_collaboratorNameLabel);
  if (qword_1013DD1F8 != -1)
    swift_once(&qword_1013DD1F8, sub_1007F25A0);
  v20 = qword_10147F820;
  if (qword_1013DD200 != -1)
    swift_once(&qword_1013DD200, sub_1007F25B8);
  v21 = objc_msgSend(v15, "preferredFontDescriptorWithTextStyle:", v20);
  objc_msgSend(v21, "pointSize");
  v22 = objc_msgSend(v17, "systemFontOfSize:weight:");

  objc_msgSend(v19, "setFont:", v22);
  if (qword_1013DD208 != -1)
    swift_once(&qword_1013DD208, sub_1007F25D0);
  objc_msgSend(v19, "setTextColor:", qword_10147F830);
  LODWORD(v23) = 1132068864;
  objc_msgSend(v19, "setContentCompressionResistancePriority:forAxis:", 0, v23);
  v24 = *(void **)(a1
                 + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_lastEditedTimestampLabel);
  if (qword_1013DD210 != -1)
    swift_once(&qword_1013DD210, sub_1007F25E4);
  v25 = qword_10147F838;
  if (qword_1013DD218 != -1)
    swift_once(&qword_1013DD218, sub_1007F25FC);
  v26 = objc_msgSend(v15, "preferredFontDescriptorWithTextStyle:", v25);
  objc_msgSend(v26, "pointSize");
  v27 = objc_msgSend(v17, "systemFontOfSize:weight:");

  objc_msgSend(v24, "setFont:", v27);
  if (qword_1013DD220 != -1)
    swift_once(&qword_1013DD220, sub_1007F2614);
  objc_msgSend(v24, "setTextColor:", qword_10147F848);
  LODWORD(v28) = 1148846080;
  objc_msgSend(v24, "setContentHuggingPriority:forAxis:", 0, v28);
  LODWORD(v29) = 1148846080;
  objc_msgSend(v24, "setContentCompressionResistancePriority:forAxis:", 0, v29);

}

void sub_1007F2FA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  void *v30;
  id v31;
  id v32;
  id v33;
  void *v34;
  id v35;
  double v36;
  void *v37;
  id v38;
  id v39;
  id v40;
  uint64_t v41;
  unint64_t v42;
  id v43;
  id v44;
  id v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  id v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  double v58;
  double v59;
  uint64_t v60;
  uint64_t inited;
  uint64_t v62;
  void *v63;
  id v64;
  id v65;
  id v66;
  id v67;
  void *v68;
  id v69;
  id v70;
  id v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  id v76;
  id v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  double v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  id v93;
  id v94;
  id v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  id v102;
  id v103;
  id v104;
  id v105;
  id v106;
  id v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  id v113;
  double v114;
  void *v115;
  void *v116;
  id v117;
  id v118;
  id v119;
  id v120;
  id v121;
  id v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  id v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  void *v131;
  Class isa;
  uint64_t v133;
  uint64_t v134;
  id v135;
  id v136;
  id v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  void *v141;
  id v142;
  id v143;
  uint64_t v144;
  _BYTE v145[136];
  int v146;
  int v147;
  uint64_t v148;

  v1 = v0;
  v148 = (uint64_t)_swiftEmptyArrayStorage;
  type metadata accessor for UILayoutPriority(0);
  v3 = v2;
  v146 = 1065353216;
  v147 = 1148846080;
  v4 = sub_1004DDC04();
  static _UIKitNumericRawRepresentable.- infix(_:_:)(&v144, &v147, &v146, v3, v4);
  v5 = v144;
  v6 = *(void **)(v1
                + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_selectionStateBadge);
  v7 = objc_msgSend(v6, "leadingAnchor");
  v8 = *(void **)(v1
                + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_roundedCornersContainerView);
  v9 = objc_msgSend(v8, "leadingAnchor");
  if (qword_1013DD158 != -1)
    swift_once(&qword_1013DD158, sub_1007F23C4);
  v10 = objc_msgSend(v7, "constraintEqualToAnchor:constant:", v9, *(double *)&qword_10147F760);

  v11 = objc_msgSend(v6, "centerYAnchor");
  v12 = objc_msgSend(v8, "centerYAnchor");
  v13 = objc_msgSend(v11, "constraintEqualToAnchor:", v12);

  if ((unint64_t)v148 >> 62)
  {
    if (v148 < 0)
      v133 = v148;
    else
      v133 = v148 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v148);
    v15 = _CocoaArrayWrapper.endIndex.getter(v133);
    swift_bridgeObjectRelease();
    v16 = v15 + 2;
    if (!__OFADD__(v15, 2))
    {
LABEL_5:
      v17 = sub_100DCD070(v16, 1);
      specialized Array._endMutation()(v17);
      v10 = v10;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v10);
      v15 = *(_QWORD *)((v148 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v14 = *(_QWORD *)((v148 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v15 < v14 >> 1)
        goto LABEL_6;
      goto LABEL_58;
    }
  }
  else
  {
    v14 = v148 & 0xFFFFFFFFFFFFF8;
    v15 = *(_QWORD *)((v148 & 0xFFFFFFFFFFFFF8) + 0x10);
    v16 = v15 + 2;
    if (!__OFADD__(v15, 2))
      goto LABEL_5;
  }
  __break(1u);
LABEL_58:
  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
LABEL_6:
  v18 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, v10);
  specialized Array._endMutation()(v18);
  v19 = v13;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v19);
  v21 = *(_QWORD *)((v148 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v20 = *(_QWORD *)((v148 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v21 >= v20 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
  v22 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v19);
  specialized Array._endMutation()(v22);

  v23 = *(void **)(v1 + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_favoriteButton);
  v24 = objc_msgSend(v23, "centerYAnchor");
  v25 = objc_msgSend(v8, "centerYAnchor");
  v26 = objc_msgSend(v24, "constraintEqualToAnchor:", v25);

  v27 = objc_msgSend(v23, "leadingAnchor");
  v28 = objc_msgSend(v6, "trailingAnchor");
  if (qword_1013DD168 != -1)
    swift_once(&qword_1013DD168, sub_1007F23DC);
  v29 = objc_msgSend(v27, "constraintEqualToAnchor:constant:", v28, *(double *)&qword_10147F770);

  v30 = *(void **)(v1
                 + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_isInMultipleSelectionModeConstraint);
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_isInMultipleSelectionModeConstraint) = v29;

  v31 = objc_msgSend(v23, "leadingAnchor");
  v32 = objc_msgSend(v8, "leadingAnchor");
  if (qword_1013DD160 != -1)
    swift_once(&qword_1013DD160, sub_1007F23D0);
  v33 = objc_msgSend(v31, "constraintEqualToAnchor:constant:", v32, *(double *)&qword_10147F768);

  v34 = *(void **)(v1
                 + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_isNotInMultipleSelectionModeConstraint);
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_isNotInMultipleSelectionModeConstraint) = v33;
  v35 = v33;

  LODWORD(v36) = v5;
  objc_msgSend(v35, "setPriority:", v36);
  v37 = *(void **)(v1
                 + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_thumbnailContainerView);
  v38 = objc_msgSend(v37, "leadingAnchor");
  v39 = objc_msgSend(v23, "trailingAnchor");
  if (qword_1013DD170 != -1)
    swift_once(&qword_1013DD170, sub_1007F23EC);
  v40 = objc_msgSend(v38, "constraintEqualToAnchor:constant:", v39, *(double *)&qword_10147F778);

  v41 = v148;
  if ((unint64_t)v148 >> 62)
  {
    if (v148 < 0)
      v134 = v148;
    else
      v134 = v148 & 0xFFFFFFFFFFFFFF8;
    v135 = v35;
    v136 = v26;
    v137 = v40;
    swift_bridgeObjectRetain(v41);
    v42 = _CocoaArrayWrapper.endIndex.getter(v134);
    swift_bridgeObjectRelease();
    v47 = v42 + 3;
    if (!__OFADD__(v42, 3))
    {
LABEL_16:
      v48 = sub_100DCD070(v47, 1);
      specialized Array._endMutation()(v48);
      v26 = v26;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v26);
      v42 = *(_QWORD *)((v148 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v46 = *(_QWORD *)((v148 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v42 < v46 >> 1)
        goto LABEL_17;
      goto LABEL_65;
    }
  }
  else
  {
    v42 = *(_QWORD *)((v148 & 0xFFFFFFFFFFFFF8) + 0x10);
    v43 = v35;
    v44 = v26;
    v45 = v40;
    v47 = v42 + 3;
    if (!__OFADD__(v42, 3))
      goto LABEL_16;
  }
  __break(1u);
LABEL_65:
  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v46 > 1, v42 + 1, 1);
LABEL_17:
  v142 = v37;
  v49 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v42, v26);
  specialized Array._endMutation()(v49);
  v50 = v35;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v50);
  v52 = *(_QWORD *)((v148 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v51 = *(_QWORD *)((v148 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v52 >= v51 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v51 > 1, v52 + 1, 1);
  v53 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v52, v50);
  specialized Array._endMutation()(v53);
  v54 = v40;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v54);
  v56 = *(_QWORD *)((v148 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v55 = *(_QWORD *)((v148 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v56 >= v55 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v55 > 1, v56 + 1, 1);
  v57 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v56, v54);
  specialized Array._endMutation()(v57);

  if (qword_1013DD150 != -1)
    swift_once(&qword_1013DD150, sub_1007F23B4);
  v143 = v8;
  v58 = *(double *)&qword_10147F758;
  if (qword_1013DD188 != -1)
    swift_once(&qword_1013DD188, sub_1007F2444);
  v140 = v54;
  v141 = v26;
  v59 = (v58 - *(double *)&qword_10147F7A8) * 0.5;
  v60 = sub_1004B804C((uint64_t *)&unk_1013E4180);
  inited = swift_initStackObject(v60, v145);
  *(_OWORD *)(inited + 16) = xmmword_100F0E480;
  v62 = v1;
  v63 = *(void **)(v1
                 + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_thumbnailImageView);
  v64 = objc_msgSend(v63, "widthAnchor");
  v65 = objc_msgSend(v63, "heightAnchor");
  v66 = objc_msgSend(v64, "constraintEqualToAnchor:multiplier:", v65, 1.77777778);

  *(_QWORD *)(inited + 32) = v66;
  v67 = objc_msgSend(v63, "topAnchor");
  v68 = *(void **)(v62
                 + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_thumbnailBackdropView);
  v69 = objc_msgSend(v68, "topAnchor");
  if (qword_1013DD178 != -1)
    swift_once(&qword_1013DD178, sub_1007F23FC);
  v70 = objc_msgSend(v67, "constraintEqualToAnchor:constant:", v69, *(double *)&qword_10147F780);

  *(_QWORD *)(inited + 40) = v70;
  v71 = objc_msgSend(v63, "leadingAnchor");
  v72 = objc_msgSend(v68, "leadingAnchor");
  v73 = qword_10147F788;
  v74 = qword_10147F798;
  if (sub_1003A9250())
    v75 = *(double *)&v73;
  else
    v75 = *(double *)&v74;
  v76 = objc_msgSend(v71, "constraintEqualToAnchor:constant:", v72, v75);

  *(_QWORD *)(inited + 48) = v76;
  v77 = objc_msgSend(v68, "trailingAnchor");
  v78 = objc_msgSend(v63, "trailingAnchor");
  v79 = qword_10147F788;
  v80 = qword_10147F798;
  if (sub_1003A9250())
    v81 = *(double *)&v80;
  else
    v81 = *(double *)&v79;
  v82 = objc_msgSend(v77, "constraintEqualToAnchor:constant:", v78, v81);

  *(_QWORD *)(inited + 56) = v82;
  v83 = objc_msgSend(v68, "bottomAnchor");
  v84 = objc_msgSend(v63, "bottomAnchor");
  v85 = objc_msgSend(v83, "constraintEqualToAnchor:constant:", v84, *(double *)&qword_10147F790);

  *(_QWORD *)(inited + 64) = v85;
  v86 = objc_msgSend(v68, "heightAnchor");
  v87 = objc_msgSend(v86, "constraintEqualToConstant:", *(double *)&qword_10147F7A8);

  *(_QWORD *)(inited + 72) = v87;
  v88 = objc_msgSend(v142, "topAnchor");
  v89 = objc_msgSend(v68, "topAnchor");
  v90 = objc_msgSend(v88, "constraintEqualToAnchor:", v89);

  *(_QWORD *)(inited + 80) = v90;
  v91 = objc_msgSend(v142, "leadingAnchor");
  v92 = objc_msgSend(v68, "leadingAnchor");
  v93 = objc_msgSend(v91, "constraintEqualToAnchor:", v92);

  *(_QWORD *)(inited + 88) = v93;
  v94 = objc_msgSend(v142, "trailingAnchor");
  v95 = objc_msgSend(v68, "trailingAnchor");
  v96 = objc_msgSend(v94, "constraintEqualToAnchor:", v95);

  *(_QWORD *)(inited + 96) = v96;
  v97 = objc_msgSend(v142, "bottomAnchor");
  v98 = objc_msgSend(v68, "bottomAnchor");
  v99 = objc_msgSend(v97, "constraintEqualToAnchor:", v98);

  *(_QWORD *)(inited + 104) = v99;
  v100 = objc_msgSend(v142, "centerYAnchor");
  v101 = objc_msgSend(v143, "centerYAnchor");
  v102 = objc_msgSend(v100, "constraintEqualToAnchor:", v101);

  *(_QWORD *)(inited + 112) = v102;
  v103 = objc_msgSend(v142, "topAnchor");
  v104 = objc_msgSend(v143, "topAnchor");
  v105 = objc_msgSend(v103, "constraintGreaterThanOrEqualToAnchor:constant:", v104, v59);

  *(_QWORD *)(inited + 120) = v105;
  v106 = objc_msgSend(v143, "bottomAnchor");
  v107 = objc_msgSend(v142, "bottomAnchor");
  v108 = objc_msgSend(v106, "constraintGreaterThanOrEqualToAnchor:constant:", v107, v59);

  *(_QWORD *)(inited + 128) = v108;
  v144 = inited;
  specialized Array._endMutation()(v109);
  v110 = v144;
  if ((unint64_t)v144 >> 62)
  {
    if (v144 < 0)
      v138 = v144;
    else
      v138 = v144 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v144);
    v111 = _CocoaArrayWrapper.endIndex.getter(v138);
    swift_bridgeObjectRelease();
  }
  else
  {
    v111 = *(_QWORD *)((v144 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v111)
  {
    if (v111 < 1)
    {
      __break(1u);
      return;
    }
    swift_bridgeObjectRetain(v110);
    v112 = 0;
    do
    {
      if ((v110 & 0xC000000000000001) != 0)
        v113 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v112, v110);
      else
        v113 = *(id *)(v110 + 8 * v112 + 32);
      v115 = v113;
      ++v112;
      LODWORD(v114) = v5;
      objc_msgSend(v113, "setPriority:", v114);

    }
    while (v111 != v112);
    swift_bridgeObjectRelease();
  }
  sub_10061EAE0(v110);
  v116 = *(void **)(v62
                  + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_lastEditedTimestampLabel);
  v117 = objc_msgSend(v116, "centerYAnchor");
  v118 = objc_msgSend(v143, "centerYAnchor");
  v119 = objc_msgSend(v117, "constraintEqualToAnchor:", v118);

  v120 = objc_msgSend(v143, "trailingAnchor");
  v121 = objc_msgSend(v116, "trailingAnchor");
  if (qword_1013DD230 != -1)
    swift_once(&qword_1013DD230, sub_1007F2638);
  v122 = objc_msgSend(v120, "constraintEqualToAnchor:constant:", v121, *(double *)&qword_10147F858);

  if ((unint64_t)v148 >> 62)
  {
    if (v148 < 0)
      v139 = v148;
    else
      v139 = v148 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v148);
    v124 = _CocoaArrayWrapper.endIndex.getter(v139);
    swift_bridgeObjectRelease();
  }
  else
  {
    v123 = v148 & 0xFFFFFFFFFFFFF8;
    v124 = *(_QWORD *)((v148 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (__OFADD__(v124, 2))
  {
    __break(1u);
    goto LABEL_75;
  }
  v125 = sub_100DCD070(v124 + 2, 1);
  specialized Array._endMutation()(v125);
  v119 = v119;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v119);
  v124 = *(_QWORD *)((v148 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v123 = *(_QWORD *)((v148 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v124 >= v123 >> 1)
LABEL_75:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v123 > 1, v124 + 1, 1);
  v126 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v124, v119);
  specialized Array._endMutation()(v126);
  v127 = v122;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v127);
  v129 = *(_QWORD *)((v148 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v128 = *(_QWORD *)((v148 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v129 >= v128 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v128 > 1, v129 + 1, 1);
  v130 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v129, v127);
  specialized Array._endMutation()(v130);

  v131 = (void *)objc_opt_self(NSLayoutConstraint);
  sub_1004B8930(0, (unint64_t *)&qword_1013E1760, NSLayoutConstraint_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v131, "activateConstraints:", isa, swift_bridgeObjectRelease().n128_f64[0]);

}

void sub_1007F3F04()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  v1 = v0;
  sub_1007F27A8(v0);
  sub_100B33C80();
  sub_100B32AB8();
  sub_100B3057C();
  v2 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v3 = objc_msgSend(v2, "preferredContentSizeCategory");

  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(UIContentSizeCategoryAccessibilityExtraLarge);
  v6 = v5;
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  if (v4 == v7 && v6 == v8)
    goto LABEL_8;
  v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, v7, v8, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v10 & 1) != 0)
  {
LABEL_9:

    v15 = 2;
    goto LABEL_10;
  }
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(UIContentSizeCategoryAccessibilityExtraExtraLarge);
  v6 = v12;
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  if (v11 == v14 && v6 == v13)
  {
LABEL_8:
    swift_bridgeObjectRelease_n(v6, 2);
    goto LABEL_9;
  }
  v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v6, v14, v13, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v21 & 1) != 0)
    goto LABEL_9;
  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(UIContentSizeCategoryAccessibilityExtraExtraExtraLarge);
  v24 = v23;
  v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  if (v22 == v26 && v24 == v25)
  {

    v15 = 2;
    swift_bridgeObjectRelease_n(v24, 2);
  }
  else
  {
    v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v24, v26, v25, 0);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v27 & 1) != 0)
      v15 = 2;
    else
      v15 = 1;
  }
LABEL_10:
  v16 = *(void **)(v1
                 + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_collaboratorNameLabel);
  v17 = *(void **)(v1
                 + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_lastEditedTimestampLabel);
  v18 = objc_retain(*(id *)(v1
                          + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_boardTitleLabel));
  v19 = v16;
  v20 = v17;
  objc_msgSend(v18, "setNumberOfLines:", v15);
  objc_msgSend(v19, "setNumberOfLines:", v15);
  objc_msgSend(v20, "setNumberOfLines:", v15);

  sub_1007F45D8(0);
}

uint64_t sub_1007F4198()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t Strong;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v1 = v0;
  result = sub_1007F2658();
  if (!result)
  {
    __break(1u);
    goto LABEL_26;
  }
  v3 = result;
  v4 = sub_1007F6388();
  swift_release(v3);
  if ((v4 & 1) != 0)
  {
    result = sub_1007F2658();
    if (!result)
    {
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v5 = result;
    v6 = sub_1007F606C();
    swift_release(v5);
    if ((v6 & 1) != 0)
    {
      v7 = v1 + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_owningItem;
      Strong = swift_unknownObjectWeakLoadStrong(v7);
      if (!Strong
        || (v9 = Strong,
            v10 = *(_QWORD *)(v7 + 8),
            ObjectType = swift_getObjectType(Strong),
            v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 168))(ObjectType, v10),
            v14 = v13,
            swift_unknownObjectRelease(v9),
            !v14))
      {
        swift_bridgeObjectRelease(0);
        v12 = 0;
        v14 = 0xE000000000000000;
      }
      swift_bridgeObjectRetain(v14);
      v15._countAndFlagsBits = 2108704;
      v15._object = (void *)0xE300000000000000;
      String.append(_:)(v15);
      swift_bridgeObjectRelease(v14);
      v16 = v12;
      v17 = swift_unknownObjectWeakLoadStrong(v7);
      if (!v17
        || (v18 = v17,
            v19 = *(_QWORD *)(v7 + 8),
            v20 = swift_getObjectType(v17),
            v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 216))(v20, v19),
            v23 = v22,
            swift_unknownObjectRelease(v18),
            !v23))
      {
        swift_bridgeObjectRelease(0);
        v21 = 0;
        v23 = (void *)0xE000000000000000;
      }
      swift_bridgeObjectRetain(v14);
      v24._countAndFlagsBits = v21;
      v24._object = v23;
      String.append(_:)(v24);
      swift_bridgeObjectRelease(v23);
      swift_bridgeObjectRelease(v14);
      return v16;
    }
  }
  result = sub_1007F2658();
  if (!result)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v26 = result;
  v27 = sub_1007F6388();
  swift_release(v26);
  if ((v27 & 1) != 0)
  {
    v28 = v1 + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_owningItem;
    v29 = swift_unknownObjectWeakLoadStrong(v28);
    if (!v29)
      goto LABEL_23;
    v30 = v29;
    goto LABEL_21;
  }
  result = sub_1007F2658();
  if (result)
  {
    v31 = result;
    v32 = sub_1007F606C();
    swift_release(v31);
    v28 = v1 + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_owningItem;
    v33 = swift_unknownObjectWeakLoadStrong(v28);
    v30 = v33;
    if ((v32 & 1) != 0)
    {
      if (!v33)
        goto LABEL_23;
      v34 = *(_QWORD *)(v28 + 8);
      v35 = swift_getObjectType(v33);
      v36 = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 168))(v35, v34);
      goto LABEL_22;
    }
    if (!v33)
      goto LABEL_23;
LABEL_21:
    v38 = *(_QWORD *)(v28 + 8);
    v39 = swift_getObjectType(v30);
    v36 = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 216))(v39, v38);
LABEL_22:
    v25 = v36;
    v40 = v37;
    swift_unknownObjectRelease(v30);
    if (v40)
      return v25;
LABEL_23:
    swift_bridgeObjectRelease(0);
    return 0;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_1007F4410()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t Strong;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  unint64_t v8;
  unint64_t v9;
  NSString v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;

  v1 = v0;
  v2 = *(void **)(v0
                + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_lastEditedTimestampLabel);
  v3 = v0 + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_owningItem;
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (!Strong
    || (v5 = Strong,
        v6 = *(_QWORD *)(v3 + 8),
        ObjectType = swift_getObjectType(Strong),
        (*(void (**)(uint64_t, uint64_t))(v6 + 168))(ObjectType, v6),
        v9 = v8,
        swift_unknownObjectRelease(v5),
        !v9))
  {
    swift_bridgeObjectRelease(0);
    v9 = 0xE000000000000000;
  }
  v10 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setText:", v10, swift_bridgeObjectRelease(v9).n128_f64[0]);

  v11 = sub_1007F2658();
  if (v11)
  {
    v12 = v11;
    v13 = sub_1007F606C();
    swift_release(v12);
    if ((v13 & 1) != 0)
    {
      v14 = *(void **)(v1
                     + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_collaboratorNameLabel);
      sub_1007F4198();
      v16 = v15;
      v17 = String._bridgeToObjectiveC()();
      objc_msgSend(v14, "setText:", v17, swift_bridgeObjectRelease(v16).n128_f64[0]);

    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1007F45D8(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  NSString v15;

  v2 = v1;
  v4 = sub_1007F2658();
  if (v4)
  {
    v5 = v4;
    v6 = sub_1007F606C();
    swift_release(v5);
    v7 = OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_didUseCompactLayout;
    v8 = *(unsigned __int8 *)(v2
                            + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_didUseCompactLayout);
    v11 = v8 == 2;
    v9 = v8 & 1;
    v10 = v6 & 1;
    v11 = !v11 && v10 == v9;
    if (v11)
      goto LABEL_8;
    v12 = sub_1007F2658();
    if (v12)
    {
      v13 = v12;
      sub_1007F4B2C();
      sub_1007F4D48();
      sub_1007F5880();
      sub_1007F5AC0(a1 & 1);
      sub_1007F5E58();
      swift_release(v13);
      v14 = *(void **)(v2
                     + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_collaboratorNameLabel);
      sub_1007F4198();
      v15 = String._bridgeToObjectiveC()();
      objc_msgSend(v14, "setText:", v15, swift_bridgeObjectRelease().n128_f64[0]);

LABEL_8:
      *(_BYTE *)(v2 + v7) = v10;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_1007F471C()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0
                            + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_isInMultipleSelectionMode);
}

id sub_1007F4730(char a1)
{
  uint64_t v1;
  uint64_t v2;
  id result;

  v2 = OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_isInMultipleSelectionMode;
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_isInMultipleSelectionMode) = a1;
  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_selectionStateBadge), "setHidden:", (a1 & 1) == 0);
  result = *(id *)(v1
                 + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_isInMultipleSelectionModeConstraint);
  if (result)
    return objc_msgSend(result, "setActive:", *(unsigned __int8 *)(v1 + v2));
  return result;
}

id sub_1007F47A8()
{
  char *v0;
  uint64_t v1;
  id v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  objc_super v8;

  *(_QWORD *)&v0[OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController____lazy_storage___textLayoutBuilder] = 1;
  v1 = OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_textLayoutGuide;
  v2 = objc_allocWithZone((Class)UILayoutGuide);
  v3 = v0;
  *(_QWORD *)&v0[v1] = objc_msgSend(v2, "init");
  v4 = OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_primaryRowLayoutGuide;
  *(_QWORD *)&v3[v4] = objc_msgSend(objc_allocWithZone((Class)UILayoutGuide), "init");
  v5 = OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_secondaryRowLayoutGuide;
  *(_QWORD *)&v3[v5] = objc_msgSend(objc_allocWithZone((Class)UILayoutGuide), "init");
  v6 = OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_tertiaryRowLayoutGuide;
  *(_QWORD *)&v3[v6] = objc_msgSend(objc_allocWithZone((Class)UILayoutGuide), "init");
  *(_QWORD *)&v3[OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_isInMultipleSelectionModeConstraint] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_isNotInMultipleSelectionModeConstraint] = 0;
  v3[OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_didUseCompactLayout] = 2;

  v8.receiver = v3;
  v8.super_class = (Class)_s8ListItemC18ListViewControllerCMa();
  return objc_msgSendSuper2(&v8, "init");
}

id sub_1007F48D0(void *a1)
{
  char *v1;
  uint64_t v3;
  id v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  objc_super v11;

  *(_QWORD *)&v1[OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController____lazy_storage___textLayoutBuilder] = 1;
  v3 = OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_textLayoutGuide;
  v4 = objc_allocWithZone((Class)UILayoutGuide);
  v5 = v1;
  *(_QWORD *)&v1[v3] = objc_msgSend(v4, "init");
  v6 = OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_primaryRowLayoutGuide;
  *(_QWORD *)&v5[v6] = objc_msgSend(objc_allocWithZone((Class)UILayoutGuide), "init");
  v7 = OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_secondaryRowLayoutGuide;
  *(_QWORD *)&v5[v7] = objc_msgSend(objc_allocWithZone((Class)UILayoutGuide), "init");
  v8 = OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_tertiaryRowLayoutGuide;
  *(_QWORD *)&v5[v8] = objc_msgSend(objc_allocWithZone((Class)UILayoutGuide), "init");
  *(_QWORD *)&v5[OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_isInMultipleSelectionModeConstraint] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_isNotInMultipleSelectionModeConstraint] = 0;
  v5[OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_didUseCompactLayout] = 2;

  v11.receiver = v5;
  v11.super_class = (Class)_s8ListItemC18ListViewControllerCMa();
  v9 = objc_msgSendSuper2(&v11, "initWithCoder:", a1);

  return v9;
}

void sub_1007F4A1C()
{
  uint64_t v0;

  sub_1007F8AB4(*(_QWORD *)(v0
                          + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController____lazy_storage___textLayoutBuilder));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_textLayoutGuide));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_primaryRowLayoutGuide));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_secondaryRowLayoutGuide));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_tertiaryRowLayoutGuide));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_isInMultipleSelectionModeConstraint));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_isNotInMultipleSelectionModeConstraint));
}

id sub_1007F4A98(uint64_t a1)
{
  return sub_1004DFAE4(a1, _s8ListItemC18ListViewControllerCMa);
}

double sub_1007F4B2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t inited;
  id v4;
  uint64_t v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  double result;
  id v11;
  _BYTE v12[128];
  void *v13;

  v1 = v0;
  v13 = &_swiftEmptySetSingleton;
  v2 = sub_1004B804C((uint64_t *)&unk_1013E8830);
  inited = swift_initStackObject(v2, v12);
  *(_OWORD *)(inited + 16) = xmmword_100EF5550;
  v4 = sub_1007F6458();
  v5 = sub_1004B8930(0, (unint64_t *)&qword_1013E1760, NSLayoutConstraint_ptr);
  *(_QWORD *)(inited + 56) = v5;
  *(_QWORD *)(inited + 32) = v4;
  v6 = sub_1007F6550();
  *(_QWORD *)(inited + 88) = v5;
  *(_QWORD *)(inited + 64) = v6;
  v7 = sub_1007F6614();
  *(_QWORD *)(inited + 120) = v5;
  *(_QWORD *)(inited + 96) = v7;
  v8 = sub_1007F8300(inited);
  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, *(_QWORD *)(inited + 16), (char *)&type metadata for Any + 8);
  sub_100512E74((uint64_t)v8);
  if ((sub_1007F606C() & 1) != 0)
    v9 = sub_1007F6804();
  else
    v9 = sub_1007F670C();
  sub_100ADAA30((Swift::Int *)&v11, v9);

  sub_1007F4C58(v1, (uint64_t *)&v13);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

double sub_1007F4C58(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t inited;
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  double result;
  _BYTE v10[72];

  v2 = *a2;
  v3 = sub_1004B804C((uint64_t *)&unk_1013E4180);
  inited = swift_initStackObject(v3, v10);
  *(_OWORD *)(inited + 16) = xmmword_100EF7D00;
  swift_bridgeObjectRetain(v2);
  *(_QWORD *)(inited + 32) = sub_1007F6458();
  *(_QWORD *)(inited + 40) = sub_1007F6550();
  *(_QWORD *)(inited + 48) = sub_1007F6614();
  *(_QWORD *)(inited + 56) = sub_1007F670C();
  v5 = sub_1007F6804();
  *(_QWORD *)(inited + 64) = v5;
  specialized Array._endMutation()(v5);
  sub_100AF8818(inited);
  v7 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain(v7);
  v8 = sub_100DAFF48(v2, v7);
  sub_1007F205C((uint64_t)v8, 0);
  swift_bridgeObjectRelease();
  sub_1007F205C(v2, 1);
  swift_bridgeObjectRelease();
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

double sub_1007F4D48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t inited;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  char v25;
  void *v26;
  id v27;
  id v28;
  char v29;
  id v30;
  void *v31;
  id v32;
  id v33;
  uint64_t v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  void *v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  void *v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  char v56;
  id v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  id v63;
  void *v64;
  uint64_t v65;
  void *v66;
  void *v67;
  double result;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  void *v79;
  char v80[96];
  id v81;
  char v82[96];
  char v83[104];
  void *v84;

  v1 = v0;
  v84 = &_swiftEmptySetSingleton;
  v2 = (uint64_t)sub_1007F56E4();
  if ((unint64_t)v2 >> 62)
    goto LABEL_47;
  v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  v70 = v0;
  if (v3)
  {
    while (1)
    {
      v78 = v3 - 1;
      sub_1004B8930(0, &qword_1013F4880, UILayoutGuide_ptr);
      v4 = 0;
      v5 = *(_QWORD *)(v1 + 16);
      v74 = OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_primaryRowLayoutGuide;
      v72 = OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_secondaryRowLayoutGuide;
      v71 = OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_tertiaryRowLayoutGuide;
      v77 = v2 & 0xC000000000000001;
      v69 = v2 & 0xFFFFFFFFFFFFFF8;
      v6 = (id *)(v2 + 40);
      v75 = v3;
      v76 = v2;
      v73 = v5;
      while (1)
      {
        v9 = v4 + 1;
        if (!v77)
          break;
        v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v2);
        if (v4 < v78)
        {
          v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4 + 1, v2);
          if (v4 <= 0)
            goto LABEL_13;
LABEL_15:
          v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 1, v2);
LABEL_19:
          v79 = v13;
          goto LABEL_21;
        }
        v11 = 0;
        if (v4 > 0)
          goto LABEL_15;
LABEL_20:
        v79 = 0;
LABEL_21:
        v14 = *(void **)(v5 + v74);
        v15 = v10;
        v16 = v14;
        LOBYTE(v14) = static NSObject.== infix(_:_:)(v16, v15);

        if ((v14 & 1) != 0)
        {
          v17 = sub_1004B804C((uint64_t *)&unk_1013E8830);
          inited = swift_initStackObject(v17, v80);
          *(_OWORD *)(inited + 16) = xmmword_100EF5A10;
          v19 = sub_1007F6A64();
          *(_QWORD *)(inited + 56) = sub_1004B804C(&qword_1013F4878);
          v20 = v1;
          *(_QWORD *)(inited + 32) = v19;
          v21 = sub_1007F6ADC();
          *(_QWORD *)(inited + 88) = sub_1004B8930(0, (unint64_t *)&qword_1013E1760, NSLayoutConstraint_ptr);
          *(_QWORD *)(inited + 64) = v21;
          v22 = sub_1007F8300(inited);
          swift_setDeallocating(inited);
          swift_arrayDestroy(inited + 32, *(_QWORD *)(inited + 16), (char *)&type metadata for Any + 8);
          sub_100512E74((uint64_t)v22);
          if (v11)
          {
            v5 = v73;
            v23 = *(id *)(v73 + v72);
            v24 = v11;
            v25 = static NSObject.== infix(_:_:)(v24, v23);

            if ((v25 & 1) != 0)
            {
              v1 = v70;
              v7 = sub_1007F6B9C();
              sub_100ADAA30((Swift::Int *)&v81, v7);

              v2 = v76;
            }
            else
            {
              v26 = *(void **)(v73 + v71);
              v27 = v24;
              v28 = v26;
              v29 = static NSObject.== infix(_:_:)(v27, v28);

              v1 = v70;
              v2 = v76;
              if ((v29 & 1) != 0)
              {
                v30 = sub_1007F6C94();
                sub_100ADAA30((Swift::Int *)&v81, v30);

              }
              else
              {
                sub_100757E04(&_mh_execute_header, (uint64_t)"updateRowLayoutGuides()", 23, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CrossPlatformUI/CRLFolderViewController-ListItem.swift", 108, 2, 945, "Unknown layout guide", 20, 2u, (uint64_t)_swiftEmptyArrayStorage);
                v1 = v70;
                sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"updateRowLayoutGuides()", 23, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CrossPlatformUI/CRLFolderViewController-ListItem.swift", 108, 2u, 945, (uint64_t)"Unknown layout guide", 20, 2u);

              }
            }
            v8 = v75;
            goto LABEL_6;
          }
          v47 = sub_1007F6D8C();
          sub_100ADAA30((Swift::Int *)&v81, v47);

          goto LABEL_35;
        }
        v31 = *(void **)(v5 + v72);
        v32 = v15;
        v33 = v31;
        LOBYTE(v31) = static NSObject.== infix(_:_:)(v33, v32);

        if ((v31 & 1) != 0)
        {
          v34 = sub_1007F6E4C();
          sub_100512E74(v34);
          if (v79)
          {
            v5 = v73;
            if (v11)
              goto LABEL_29;
LABEL_39:
            v49 = sub_1007F707C();
            sub_100ADAA30((Swift::Int *)&v81, v49);

LABEL_40:
            v50 = v81;
          }
          else
          {
            v48 = sub_1007F6EC4();
            sub_100ADAA30((Swift::Int *)&v81, v48);

            v5 = v73;
            if (!v11)
              goto LABEL_39;
LABEL_29:
            v35 = *(void **)(v5 + v71);
            v36 = v11;
            v37 = v35;
            LOBYTE(v35) = static NSObject.== infix(_:_:)(v36, v37);

            if ((v35 & 1) != 0)
            {
              v38 = sub_1007F6F84();
              sub_100ADAA30((Swift::Int *)&v81, v38);

              goto LABEL_40;
            }
            sub_100757E04(&_mh_execute_header, (uint64_t)"updateRowLayoutGuides()", 23, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CrossPlatformUI/CRLFolderViewController-ListItem.swift", 108, 2, 962, "Unknown layout guide", 20, 2u, (uint64_t)_swiftEmptyArrayStorage);
            sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"updateRowLayoutGuides()", 23, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CrossPlatformUI/CRLFolderViewController-ListItem.swift", 108, 2u, 962, (uint64_t)"Unknown layout guide", 20, 2u);

            v50 = v79;
          }

          goto LABEL_44;
        }
        v39 = *(void **)(v5 + v71);
        v40 = v32;
        v41 = v39;
        LOBYTE(v39) = static NSObject.== infix(_:_:)(v41, v40);

        if ((v39 & 1) == 0)
        {
          sub_100757E04(&_mh_execute_header, (uint64_t)"updateRowLayoutGuides()", 23, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CrossPlatformUI/CRLFolderViewController-ListItem.swift", 108, 2, 976, "Unknown layout guide", 20, 2u, (uint64_t)_swiftEmptyArrayStorage);
          sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"updateRowLayoutGuides()", 23, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CrossPlatformUI/CRLFolderViewController-ListItem.swift", 108, 2u, 976, (uint64_t)"Unknown layout guide", 20, 2u);

LABEL_44:
          v8 = v75;
          v2 = v76;
          goto LABEL_6;
        }
        v42 = sub_1004B804C((uint64_t *)&unk_1013E8830);
        v43 = swift_initStackObject(v42, v82);
        *(_OWORD *)(v43 + 16) = xmmword_100EF5A10;
        v44 = sub_1007F72C0();
        *(_QWORD *)(v43 + 56) = sub_1004B804C(&qword_1013F4878);
        v20 = v1;
        *(_QWORD *)(v43 + 32) = v44;
        v45 = sub_1007F73F8();
        *(_QWORD *)(v43 + 88) = sub_1004B8930(0, (unint64_t *)&qword_1013E1760, NSLayoutConstraint_ptr);
        *(_QWORD *)(v43 + 64) = v45;
        v46 = sub_1007F8300(v43);
        swift_setDeallocating(v43);
        swift_arrayDestroy(v43 + 32, *(_QWORD *)(v43 + 16), (char *)&type metadata for Any + 8);
        sub_100512E74((uint64_t)v46);
        if (!v79)
        {
          v51 = sub_1007F7338();
          sub_100ADAA30((Swift::Int *)&v81, v51);

LABEL_35:
          goto LABEL_36;
        }

LABEL_36:
        v1 = v20;
        v8 = v75;
        v2 = v76;
        v5 = v73;
LABEL_6:
        ++v6;
        v4 = v9;
        if (v8 == v9)
          goto LABEL_53;
      }
      v10 = *(v6 - 1);
      if (v4 >= v78)
        break;
      v11 = *v6;
      v12 = *v6;
      if (v4 <= 0)
      {
LABEL_13:
        v79 = 0;
        goto LABEL_21;
      }
LABEL_17:
      if ((unint64_t)(v4 - 1) < *(_QWORD *)(v69 + 16))
      {
        v13 = *(v6 - 2);
        goto LABEL_19;
      }
      __break(1u);
LABEL_47:
      if (v2 < 0)
        v52 = v2;
      else
        v52 = v2 & 0xFFFFFFFFFFFFFF8;
      v53 = _CocoaArrayWrapper.endIndex.getter(v52);
      if (v53 < 0)
        __break(1u);
      v3 = v53;
      v70 = v1;
      if (!v53)
        goto LABEL_53;
    }
    v11 = 0;
    if (v4 > 0)
      goto LABEL_17;
    goto LABEL_20;
  }
LABEL_53:
  v54 = *(_QWORD *)(v1 + 16);
  v55 = objc_retain(*(id *)(v54
                          + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_primaryRowLayoutGuide));
  v56 = sub_100C9DD00((uint64_t)v55, v2);

  if ((v56 & 1) != 0)
  {
    v57 = objc_retain(*(id *)(v54
                            + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_secondaryRowLayoutGuide));
    v58 = sub_100C9DD00((uint64_t)v57, v2);
    swift_bridgeObjectRelease();

    if ((v58 & 1) == 0)
    {
      v59 = sub_1004B804C((uint64_t *)&unk_1013E8830);
      v60 = swift_initStackObject(v59, v83);
      *(_OWORD *)(v60 + 16) = xmmword_100EF5A10;
      v61 = sub_1007F713C();
      v62 = sub_1004B8930(0, (unint64_t *)&qword_1013E1760, NSLayoutConstraint_ptr);
      *(_QWORD *)(v60 + 56) = v62;
      *(_QWORD *)(v60 + 32) = v61;
      v63 = sub_1007F7200();
      *(_QWORD *)(v60 + 88) = v62;
      *(_QWORD *)(v60 + 64) = v63;
      v64 = sub_1007F8300(v60);
      swift_setDeallocating(v60);
      swift_arrayDestroy(v60 + 32, *(_QWORD *)(v60 + 16), (char *)&type metadata for Any + 8);
      sub_100512E74((uint64_t)v64);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v65 = (uint64_t)v84;
  swift_bridgeObjectRetain(v84);
  v66 = sub_1007F68F8();
  swift_bridgeObjectRetain(v66);
  v67 = sub_100DAFF48(v65, (uint64_t)v66);
  sub_1007F205C((uint64_t)v67, 0);
  swift_bridgeObjectRelease();
  sub_1007F205C(v65, 1);
  swift_bridgeObjectRelease_n(v65, 2);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

double *sub_1007F56E4()
{
  uint64_t v0;
  id v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  id v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;

  if ((sub_1007F61EC() & 1) != 0)
  {
    v1 = objc_retain(*(id *)(*(_QWORD *)(v0 + 16)
                           + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_primaryRowLayoutGuide));
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v1);
    v3 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
    v2 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v3 >= v2 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v2 > 1, v3 + 1, 1);
    v4 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v3, v1);
    specialized Array._endMutation()(v4);
  }
  if ((sub_1007F62AC() & 1) != 0)
  {
    v5 = objc_retain(*(id *)(*(_QWORD *)(v0 + 16)
                           + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_secondaryRowLayoutGuide));
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v5);
    v7 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
    v6 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v7 >= v6 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
    v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, v5);
    specialized Array._endMutation()(v8);
  }
  v9 = *(_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v9 + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_attributionView))
  {
    v10 = objc_retain(*(id *)(v9
                            + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_tertiaryRowLayoutGuide));
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v10);
    v12 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
    v11 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v12 >= v11 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
    v13 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v10);
    specialized Array._endMutation()(v13);
  }
  return _swiftEmptyArrayStorage;
}

double sub_1007F5880()
{
  uint64_t v0;
  void *v1;
  char v2;
  void *v3;
  char v4;
  uint64_t v5;
  uint64_t inited;
  uint64_t v7;
  id v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  id v17;
  void *v18;
  void *v19;
  double result;
  uint64_t v21;
  _BYTE v22[128];
  void *v23;

  v1 = &_swiftEmptySetSingleton;
  v23 = &_swiftEmptySetSingleton;
  v2 = sub_1007F61EC();
  v3 = *(void **)(*(_QWORD *)(v0 + 16)
                + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_boardTitleLabel);
  v4 = ~v2;
  objc_msgSend(v3, "setHidden:", (v2 & 1) == 0);
  if ((v4 & 1) == 0)
  {
    v5 = sub_1004B804C((uint64_t *)&unk_1013E8830);
    inited = swift_initStackObject(v5, &v21);
    *(_OWORD *)(inited + 16) = xmmword_100EF5550;
    v7 = sub_1007F74B8();
    *(_QWORD *)(inited + 56) = sub_1004B804C(&qword_1013F4878);
    *(_QWORD *)(inited + 32) = v7;
    v8 = sub_1007F7554();
    v9 = sub_1004B8930(0, (unint64_t *)&qword_1013E1760, NSLayoutConstraint_ptr);
    *(_QWORD *)(inited + 88) = v9;
    *(_QWORD *)(inited + 64) = v8;
    v10 = sub_1007F7618();
    *(_QWORD *)(inited + 120) = v9;
    *(_QWORD *)(inited + 96) = v10;
    v11 = sub_1007F8300(inited);
    swift_setDeallocating(inited);
    swift_arrayDestroy(inited + 32, *(_QWORD *)(inited + 16), (char *)&type metadata for Any + 8);
    sub_100512E74((uint64_t)v11);
    v1 = v23;
  }
  v12 = sub_1004B804C((uint64_t *)&unk_1013E8830);
  v13 = swift_initStackObject(v12, v22);
  *(_OWORD *)(v13 + 16) = xmmword_100EF5550;
  swift_bridgeObjectRetain(v1);
  v14 = sub_1007F74B8();
  *(_QWORD *)(v13 + 56) = sub_1004B804C(&qword_1013F4878);
  *(_QWORD *)(v13 + 32) = v14;
  v15 = sub_1007F7554();
  v16 = sub_1004B8930(0, (unint64_t *)&qword_1013E1760, NSLayoutConstraint_ptr);
  *(_QWORD *)(v13 + 88) = v16;
  *(_QWORD *)(v13 + 64) = v15;
  v17 = sub_1007F7618();
  *(_QWORD *)(v13 + 120) = v16;
  *(_QWORD *)(v13 + 96) = v17;
  v18 = sub_1007F8300(v13);
  swift_setDeallocating(v13);
  swift_arrayDestroy(v13 + 32, *(_QWORD *)(v13 + 16), (char *)&type metadata for Any + 8);
  swift_bridgeObjectRetain(v18);
  v19 = sub_100DAFF48((uint64_t)v1, (uint64_t)v18);
  sub_1007F205C((uint64_t)v19, 0);
  swift_bridgeObjectRelease();
  sub_1007F205C((uint64_t)v1, 1);
  swift_bridgeObjectRelease_n(v1, 2);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

double sub_1007F5AC0(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t inited;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  id v13;
  id v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  id v20;
  id v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  id v30;
  void *v31;
  void *v32;
  double result;
  _BYTE v34[128];
  uint64_t v35;
  uint64_t v36;
  _BYTE v37[128];
  void *v38;

  v2 = v1;
  v38 = &_swiftEmptySetSingleton;
  v4 = sub_1004B804C((uint64_t *)&unk_1013E8830);
  inited = swift_initStackObject(v4, v37);
  *(_OWORD *)(inited + 16) = xmmword_100EF5550;
  v6 = sub_1007F76DC();
  v7 = sub_1004B804C(&qword_1013F4878);
  *(_QWORD *)(inited + 56) = v7;
  *(_QWORD *)(inited + 32) = v6;
  v8 = sub_1007F7778();
  v9 = sub_1004B8930(0, (unint64_t *)&qword_1013E1760, NSLayoutConstraint_ptr);
  *(_QWORD *)(inited + 88) = v9;
  *(_QWORD *)(inited + 64) = v8;
  v10 = sub_1007F783C();
  *(_QWORD *)(inited + 120) = v9;
  *(_QWORD *)(inited + 96) = v10;
  v11 = sub_1007F8300(inited);
  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, *(_QWORD *)(inited + 16), (char *)&type metadata for Any + 8);
  sub_100512E74((uint64_t)v11);
  v35 = (uint64_t)_swiftEmptyArrayStorage;
  v36 = (uint64_t)_swiftEmptyArrayStorage;
  LOBYTE(v8) = sub_1007F62AC();
  v12 = *(_QWORD *)(v2 + 16);
  v13 = objc_retain(*(id *)(v12
                          + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_collaboratorNameLabel));
  v14 = v13;
  if ((v8 & 1) != 0)
  {
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v13);
    v16 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v15 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v16 >= v15 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
  }
  else
  {
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v13);
    v16 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v17 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v16 >= v17 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v16 + 1, 1);
  }
  v18 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v14);
  specialized Array._endMutation()(v18);
  v19 = sub_1007F606C();
  v20 = objc_retain(*(id *)(v12
                          + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_lastEditedTimestampLabel));
  v21 = v20;
  if ((v19 & 1) != 0)
  {
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v20);
    v23 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v22 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v23 >= v22 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
  }
  else
  {
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v20);
    v23 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v24 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v23 >= v24 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v23 + 1, 1);
  }
  v25 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v23, v21);
  specialized Array._endMutation()(v25);
  sub_1007F8818(v36, v35, a1 & 1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v26 = (uint64_t)v38;
  v27 = swift_initStackObject(v4, v34);
  *(_OWORD *)(v27 + 16) = xmmword_100EF5550;
  swift_bridgeObjectRetain(v26);
  v28 = sub_1007F76DC();
  *(_QWORD *)(v27 + 56) = v7;
  *(_QWORD *)(v27 + 32) = v28;
  v29 = sub_1007F7778();
  *(_QWORD *)(v27 + 88) = v9;
  *(_QWORD *)(v27 + 64) = v29;
  v30 = sub_1007F783C();
  *(_QWORD *)(v27 + 120) = v9;
  *(_QWORD *)(v27 + 96) = v30;
  v31 = sub_1007F8300(v27);
  swift_setDeallocating(v27);
  swift_arrayDestroy(v27 + 32, *(_QWORD *)(v27 + 16), (char *)&type metadata for Any + 8);
  swift_bridgeObjectRetain(v31);
  v32 = sub_100DAFF48(v26, (uint64_t)v31);
  sub_1007F205C((uint64_t)v32, 0);
  swift_bridgeObjectRelease();
  sub_1007F205C(v26, 1);
  swift_bridgeObjectRelease_n(v26, 2);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

double sub_1007F5E58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  double result;
  _BYTE v17[128];
  _BYTE v18[128];
  void *v19;

  v19 = &_swiftEmptySetSingleton;
  objc_msgSend(*(id *)(*(_QWORD *)(v0 + 16)+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_attributionHostingView), "setHidden:", *(_QWORD *)(*(_QWORD *)(v0 + 16)+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_attributionView) == 0);
  v1 = sub_1004B804C((uint64_t *)&unk_1013E8830);
  inited = swift_initStackObject(v1, v18);
  *(_OWORD *)(inited + 16) = xmmword_100EF5550;
  v3 = sub_1007F7900();
  v4 = sub_1004B804C(&qword_1013F4878);
  *(_QWORD *)(inited + 56) = v4;
  *(_QWORD *)(inited + 32) = v3;
  v5 = sub_1007F799C();
  v6 = sub_1004B8930(0, (unint64_t *)&qword_1013E1760, NSLayoutConstraint_ptr);
  *(_QWORD *)(inited + 88) = v6;
  *(_QWORD *)(inited + 64) = v5;
  v7 = sub_1007F7A60();
  *(_QWORD *)(inited + 120) = v6;
  *(_QWORD *)(inited + 96) = v7;
  v8 = sub_1007F8300(inited);
  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, *(_QWORD *)(inited + 16), (char *)&type metadata for Any + 8);
  sub_100512E74((uint64_t)v8);
  v9 = (uint64_t)v19;
  v10 = swift_initStackObject(v1, v17);
  *(_OWORD *)(v10 + 16) = xmmword_100EF5550;
  swift_bridgeObjectRetain(v9);
  v11 = sub_1007F7900();
  *(_QWORD *)(v10 + 56) = v4;
  *(_QWORD *)(v10 + 32) = v11;
  v12 = sub_1007F799C();
  *(_QWORD *)(v10 + 88) = v6;
  *(_QWORD *)(v10 + 64) = v12;
  v13 = sub_1007F7A60();
  *(_QWORD *)(v10 + 120) = v6;
  *(_QWORD *)(v10 + 96) = v13;
  v14 = sub_1007F8300(v10);
  swift_setDeallocating(v10);
  swift_arrayDestroy(v10 + 32, *(_QWORD *)(v10 + 16), (char *)&type metadata for Any + 8);
  swift_bridgeObjectRetain(v14);
  v15 = sub_100DAFF48(v9, (uint64_t)v14);
  sub_1007F205C((uint64_t)v15, 0);
  swift_bridgeObjectRelease();
  sub_1007F205C(v9, 1);
  swift_bridgeObjectRelease_n(v9, 2);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t sub_1007F606C()
{
  uint64_t v0;
  void *v1;
  uint64_t result;
  void *v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  double Width;
  double v17;
  CGRect v18;

  v1 = *(void **)(v0 + 16);
  result = (uint64_t)objc_msgSend(v1, "view");
  if (!result)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  v3 = (void *)result;
  v4 = objc_msgSend((id)result, "traitCollection");

  LOBYTE(v3) = objc_msgSend(v4, "crl_isCompactWidth");
  if ((v3 & 1) != 0)
    return 1;
  v5 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v6 = objc_msgSend(v5, "preferredContentSizeCategory");

  LOBYTE(v5) = UIContentSizeCategory.isAccessibilityCategory.getter(v6);
  if ((v5 & 1) != 0)
    return 1;
  result = (uint64_t)objc_msgSend(v1, "view");
  if (!result)
    goto LABEL_10;
  v7 = (void *)result;
  objc_msgSend((id)result, "frame");
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v15 = v14;

  v18.origin.x = v9;
  v18.origin.y = v11;
  v18.size.width = v13;
  v18.size.height = v15;
  Width = CGRectGetWidth(v18);
  if (qword_1013DD148 != -1)
  {
    v17 = Width;
    swift_once(&qword_1013DD148, sub_1007F23A0);
    Width = v17;
  }
  return Width < *(double *)&qword_10147F750;
}

uint64_t sub_1007F61EC()
{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  char v8;
  char v9;

  v1 = objc_msgSend(*(id *)(*(_QWORD *)(v0 + 16)+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_boardTitleLabel), "text");
  if (!v1)
    goto LABEL_11;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v5 = v4;

  v6 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0)
    v6 = v3 & 0xFFFFFFFFFFFFLL;
  if (!v6 || (v3 == qword_1014060E8 ? (v7 = v5 == unk_1014060F0) : (v7 = 0), v7))
  {
    swift_bridgeObjectRelease(v5);
LABEL_11:
    v9 = 0;
    return v9 & 1;
  }
  v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, qword_1014060E8, unk_1014060F0, 0);
  swift_bridgeObjectRelease(v5);
  v9 = v8 ^ 1;
  return v9 & 1;
}

uint64_t sub_1007F62AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  char v11;

  v1 = *(_QWORD *)(v0 + 16)
     + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_owningItem;
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    v4 = *(_QWORD *)(v1 + 8);
    ObjectType = swift_getObjectType(Strong);
    v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 216))(ObjectType, v4);
    v8 = v7;
    swift_unknownObjectRelease(v3);
    if (v8)
    {
      v9 = HIBYTE(v8) & 0xF;
      if ((v8 & 0x2000000000000000) == 0)
        v9 = v6 & 0xFFFFFFFFFFFFLL;
      if (!v9 || (v6 == qword_1014060E8 ? (v10 = v8 == unk_1014060F0) : (v10 = 0), v10))
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v8, qword_1014060E8, unk_1014060F0, 0);
        swift_bridgeObjectRelease();
        if ((v11 & 1) == 0)
          return 1;
      }
    }
  }
  return sub_1007F606C();
}

uint64_t sub_1007F6388()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  char v11;
  char v12;

  v1 = *(_QWORD *)(v0 + 16)
     + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_owningItem;
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (!Strong)
    goto LABEL_12;
  v3 = Strong;
  v4 = *(_QWORD *)(v1 + 8);
  ObjectType = swift_getObjectType(Strong);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 216))(ObjectType, v4);
  v8 = v7;
  swift_unknownObjectRelease(v3);
  if (!v8)
    goto LABEL_12;
  v9 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000) == 0)
    v9 = v6 & 0xFFFFFFFFFFFFLL;
  if (!v9 || (v6 == qword_1014060E8 ? (v10 = v8 == unk_1014060F0) : (v10 = 0), v10))
  {
    swift_bridgeObjectRelease(v8);
LABEL_12:
    v12 = 0;
    return v12 & 1;
  }
  v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v8, qword_1014060E8, unk_1014060F0, 0);
  swift_bridgeObjectRelease(v8);
  v12 = v11 ^ 1;
  return v12 & 1;
}

id sub_1007F6458()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;

  v1 = *(void **)(v0 + 24);
  if (v1)
  {
    v2 = *(id *)(v0 + 24);
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 16);
    v4 = objc_msgSend(*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_textLayoutGuide), "leadingAnchor");
    v5 = objc_msgSend(*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_thumbnailContainerView), "trailingAnchor");
    if (qword_1013DD1D0 != -1)
      swift_once(&qword_1013DD1D0, sub_1007F253C);
    v6 = objc_msgSend(v4, "constraintEqualToAnchor:constant:", v5, *(double *)&qword_10147F7F8);

    v7 = *(void **)(v0 + 24);
    *(_QWORD *)(v0 + 24) = v6;
    v2 = v6;

    v1 = 0;
  }
  v8 = v1;
  return v2;
}

id sub_1007F6550()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;

  v1 = *(void **)(v0 + 32);
  if (v1)
  {
    v2 = *(id *)(v0 + 32);
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 16);
    v4 = objc_msgSend(*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_textLayoutGuide), "centerYAnchor");
    v5 = objc_msgSend(*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_roundedCornersContainerView), "centerYAnchor");
    v6 = objc_msgSend(v4, "constraintLessThanOrEqualToAnchor:", v5);

    v7 = *(void **)(v0 + 32);
    *(_QWORD *)(v0 + 32) = v6;
    v2 = v6;

    v1 = 0;
  }
  v8 = v1;
  return v2;
}

id sub_1007F6614()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;

  v1 = *(void **)(v0 + 40);
  if (v1)
  {
    v2 = *(id *)(v0 + 40);
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 16);
    v4 = objc_msgSend(*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_roundedCornersContainerView), "heightAnchor");
    v5 = objc_msgSend(*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_textLayoutGuide), "heightAnchor");
    if (qword_1013DD1C8 != -1)
      swift_once(&qword_1013DD1C8, sub_1007F252C);
    v6 = objc_msgSend(v4, "constraintGreaterThanOrEqualToAnchor:constant:", v5, *(double *)&qword_10147F7F0 + *(double *)&qword_10147F7F0);

    v7 = *(void **)(v0 + 40);
    *(_QWORD *)(v0 + 40) = v6;
    v2 = v6;

    v1 = 0;
  }
  v8 = v1;
  return v2;
}

id sub_1007F670C()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;

  v1 = *(void **)(v0 + 48);
  if (v1)
  {
    v2 = *(id *)(v0 + 48);
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 16);
    v4 = objc_msgSend(*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_lastEditedTimestampLabel), "leadingAnchor");
    v5 = objc_msgSend(*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_textLayoutGuide), "trailingAnchor");
    if (qword_1013DD228 != -1)
      swift_once(&qword_1013DD228, sub_1007F2628);
    v6 = objc_msgSend(v4, "constraintEqualToAnchor:constant:", v5, *(double *)&qword_10147F850);

    v7 = *(void **)(v0 + 48);
    *(_QWORD *)(v0 + 48) = v6;
    v2 = v6;

    v1 = 0;
  }
  v8 = v1;
  return v2;
}

id sub_1007F6804()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;

  v1 = *(void **)(v0 + 56);
  if (v1)
  {
    v2 = *(id *)(v0 + 56);
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 16);
    v4 = objc_msgSend(*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_roundedCornersContainerView), "trailingAnchor");
    v5 = objc_msgSend(*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_textLayoutGuide), "trailingAnchor");
    if (qword_1013DD230 != -1)
      swift_once(&qword_1013DD230, sub_1007F2638);
    v6 = objc_msgSend(v4, "constraintEqualToAnchor:constant:", v5, *(double *)&qword_10147F858);

    v7 = *(void **)(v0 + 56);
    *(_QWORD *)(v0 + 56) = v6;
    v2 = v6;

    v1 = 0;
  }
  v8 = v1;
  return v2;
}

void *sub_1007F68F8()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  void *v18;
  uint64_t v20;

  v0 = sub_1004B804C((uint64_t *)&unk_1013E8830);
  inited = swift_initStackObject(v0, &v20);
  *(_OWORD *)(inited + 16) = xmmword_100F0E490;
  v2 = sub_1007F6A64();
  v3 = sub_1004B804C(&qword_1013F4878);
  *(_QWORD *)(inited + 56) = v3;
  *(_QWORD *)(inited + 32) = v2;
  v4 = sub_1007F6ADC();
  v5 = sub_1004B8930(0, (unint64_t *)&qword_1013E1760, NSLayoutConstraint_ptr);
  *(_QWORD *)(inited + 88) = v5;
  *(_QWORD *)(inited + 64) = v4;
  v6 = sub_1007F6B9C();
  *(_QWORD *)(inited + 120) = v5;
  *(_QWORD *)(inited + 96) = v6;
  v7 = sub_1007F6C94();
  *(_QWORD *)(inited + 152) = v5;
  *(_QWORD *)(inited + 128) = v7;
  v8 = sub_1007F6D8C();
  *(_QWORD *)(inited + 184) = v5;
  *(_QWORD *)(inited + 160) = v8;
  v9 = sub_1007F6E4C();
  *(_QWORD *)(inited + 216) = v3;
  *(_QWORD *)(inited + 192) = v9;
  v10 = sub_1007F6EC4();
  *(_QWORD *)(inited + 248) = v5;
  *(_QWORD *)(inited + 224) = v10;
  v11 = sub_1007F6F84();
  *(_QWORD *)(inited + 280) = v5;
  *(_QWORD *)(inited + 256) = v11;
  v12 = sub_1007F707C();
  *(_QWORD *)(inited + 312) = v5;
  *(_QWORD *)(inited + 288) = v12;
  v13 = sub_1007F713C();
  *(_QWORD *)(inited + 344) = v5;
  *(_QWORD *)(inited + 320) = v13;
  v14 = sub_1007F7200();
  *(_QWORD *)(inited + 376) = v5;
  *(_QWORD *)(inited + 352) = v14;
  v15 = sub_1007F72C0();
  *(_QWORD *)(inited + 408) = v3;
  *(_QWORD *)(inited + 384) = v15;
  v16 = sub_1007F7338();
  *(_QWORD *)(inited + 440) = v5;
  *(_QWORD *)(inited + 416) = v16;
  v17 = sub_1007F73F8();
  *(_QWORD *)(inited + 472) = v5;
  *(_QWORD *)(inited + 448) = v17;
  v18 = sub_1007F8300(inited);
  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, *(_QWORD *)(inited + 16), (char *)&type metadata for Any + 8);
  return v18;
}

uint64_t sub_1007F6A64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 64);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 64);
  }
  else
  {
    v3 = objc_retain(*(id *)(*(_QWORD *)(v0 + 16)
                           + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_primaryRowLayoutGuide));
    sub_1007F7B24(v3);
    v2 = v4;

    *(_QWORD *)(v0 + 64) = v2;
    swift_bridgeObjectRetain(v2);
    swift_bridgeObjectRelease();
    v1 = 0;
  }
  swift_bridgeObjectRetain(v1);
  return v2;
}

id sub_1007F6ADC()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;

  v1 = *(void **)(v0 + 72);
  if (v1)
  {
    v2 = *(id *)(v0 + 72);
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 16);
    v4 = objc_msgSend(*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_primaryRowLayoutGuide), "topAnchor");
    v5 = objc_msgSend(*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_textLayoutGuide), "topAnchor");
    v6 = objc_msgSend(v4, "constraintEqualToAnchor:", v5);

    v7 = *(void **)(v0 + 72);
    *(_QWORD *)(v0 + 72) = v6;
    v2 = v6;

    v1 = 0;
  }
  v8 = v1;
  return v2;
}

id sub_1007F6B9C()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;

  v1 = *(void **)(v0 + 80);
  if (v1)
  {
    v2 = *(id *)(v0 + 80);
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 16);
    v4 = objc_msgSend(*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_primaryRowLayoutGuide), "bottomAnchor");
    v5 = objc_msgSend(*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_secondaryRowLayoutGuide), "topAnchor");
    if (qword_1013DD1D8 != -1)
      swift_once(&qword_1013DD1D8, sub_1007F254C);
    v6 = objc_msgSend(v4, "constraintEqualToAnchor:constant:", v5, -*(double *)&qword_10147F800);

    v7 = *(void **)(v0 + 80);
    *(_QWORD *)(v0 + 80) = v6;
    v2 = v6;

    v1 = 0;
  }
  v8 = v1;
  return v2;
}

id sub_1007F6C94()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;

  v1 = *(void **)(v0 + 88);
  if (v1)
  {
    v2 = *(id *)(v0 + 88);
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 16);
    v4 = objc_msgSend(*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_primaryRowLayoutGuide), "bottomAnchor");
    v5 = objc_msgSend(*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_tertiaryRowLayoutGuide), "topAnchor");
    if (qword_1013DD238 != -1)
      swift_once(&qword_1013DD238, sub_1007F2648);
    v6 = objc_msgSend(v4, "constraintEqualToAnchor:constant:", v5, -*(double *)&qword_10147F860);

    v7 = *(void **)(v0 + 88);
    *(_QWORD *)(v0 + 88) = v6;
    v2 = v6;

    v1 = 0;
  }
  v8 = v1;
  return v2;
}

id sub_1007F6D8C()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;

  v1 = *(void **)(v0 + 96);
  if (v1)
  {
    v2 = *(id *)(v0 + 96);
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 16);
    v4 = objc_msgSend(*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_primaryRowLayoutGuide), "bottomAnchor");
    v5 = objc_msgSend(*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_textLayoutGuide), "bottomAnchor");
    v6 = objc_msgSend(v4, "constraintEqualToAnchor:", v5);

    v7 = *(void **)(v0 + 96);
    *(_QWORD *)(v0 + 96) = v6;
    v2 = v6;

    v1 = 0;
  }
  v8 = v1;
  return v2;
}

uint64_t sub_1007F6E4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 104);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 104);
  }
  else
  {
    v3 = objc_retain(*(id *)(*(_QWORD *)(v0 + 16)
                           + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_secondaryRowLayoutGuide));
    sub_1007F7B24(v3);
    v2 = v4;

    *(_QWORD *)(v0 + 104) = v2;
    swift_bridgeObjectRetain(v2);
    swift_bridgeObjectRelease();
    v1 = 0;
  }
  swift_bridgeObjectRetain(v1);
  return v2;
}

id sub_1007F6EC4()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;

  v1 = *(void **)(v0 + 112);
  if (v1)
  {
    v2 = *(id *)(v0 + 112);
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 16);
    v4 = objc_msgSend(*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_secondaryRowLayoutGuide), "topAnchor");
    v5 = objc_msgSend(*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_textLayoutGuide), "topAnchor");
    v6 = objc_msgSend(v4, "constraintEqualToAnchor:", v5);

    v7 = *(void **)(v0 + 112);
    *(_QWORD *)(v0 + 112) = v6;
    v2 = v6;

    v1 = 0;
  }
  v8 = v1;
  return v2;
}

id sub_1007F6F84()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;

  v1 = *(void **)(v0 + 120);
  if (v1)
  {
    v2 = *(id *)(v0 + 120);
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 16);
    v4 = objc_msgSend(*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_secondaryRowLayoutGuide), "bottomAnchor");
    v5 = objc_msgSend(*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_tertiaryRowLayoutGuide), "topAnchor");
    if (qword_1013DD238 != -1)
      swift_once(&qword_1013DD238, sub_1007F2648);
    v6 = objc_msgSend(v4, "constraintEqualToAnchor:constant:", v5, -*(double *)&qword_10147F860);

    v7 = *(void **)(v0 + 120);
    *(_QWORD *)(v0 + 120) = v6;
    v2 = v6;

    v1 = 0;
  }
  v8 = v1;
  return v2;
}

id sub_1007F707C()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;

  v1 = *(void **)(v0 + 128);
  if (v1)
  {
    v2 = *(id *)(v0 + 128);
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 16);
    v4 = objc_msgSend(*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_secondaryRowLayoutGuide), "bottomAnchor");
    v5 = objc_msgSend(*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_textLayoutGuide), "bottomAnchor");
    v6 = objc_msgSend(v4, "constraintEqualToAnchor:", v5);

    v7 = *(void **)(v0 + 128);
    *(_QWORD *)(v0 + 128) = v6;
    v2 = v6;

    v1 = 0;
  }
  v8 = v1;
  return v2;
}

id sub_1007F713C()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;

  v1 = *(void **)(v0 + 136);
  if (v1)
  {
    v2 = *(id *)(v0 + 136);
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 16);
    v4 = objc_msgSend(*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_textLayoutGuide), "bottomAnchor");
    v5 = objc_msgSend(*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_secondaryRowLayoutGuide), "topAnchor");
    v6 = objc_msgSend(v4, "constraintEqualToAnchor:", v5);

    v7 = *(void **)(v0 + 136);
    *(_QWORD *)(v0 + 136) = v6;
    v2 = v6;

    v1 = 0;
  }
  v8 = v1;
  return v2;
}

id sub_1007F7200()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;

  v1 = *(void **)(v0 + 144);
  if (v1)
  {
    v2 = *(id *)(v0 + 144);
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 16);
    v4 = objc_msgSend(*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_textLayoutGuide), "leadingAnchor");
    v5 = objc_msgSend(*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_secondaryRowLayoutGuide), "leadingAnchor");
    v6 = objc_msgSend(v4, "constraintEqualToAnchor:", v5);

    v7 = *(void **)(v0 + 144);
    *(_QWORD *)(v0 + 144) = v6;
    v2 = v6;

    v1 = 0;
  }
  v8 = v1;
  return v2;
}

uint64_t sub_1007F72C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 152);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 152);
  }
  else
  {
    v3 = objc_retain(*(id *)(*(_QWORD *)(v0 + 16)
                           + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_tertiaryRowLayoutGuide));
    sub_1007F7B24(v3);
    v2 = v4;

    *(_QWORD *)(v0 + 152) = v2;
    swift_bridgeObjectRetain(v2);
    swift_bridgeObjectRelease();
    v1 = 0;
  }
  swift_bridgeObjectRetain(v1);
  return v2;
}

id sub_1007F7338()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;

  v1 = *(void **)(v0 + 160);
  if (v1)
  {
    v2 = *(id *)(v0 + 160);
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 16);
    v4 = objc_msgSend(*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_tertiaryRowLayoutGuide), "topAnchor");
    v5 = objc_msgSend(*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_textLayoutGuide), "topAnchor");
    v6 = objc_msgSend(v4, "constraintEqualToAnchor:", v5);

    v7 = *(void **)(v0 + 160);
    *(_QWORD *)(v0 + 160) = v6;
    v2 = v6;

    v1 = 0;
  }
  v8 = v1;
  return v2;
}

id sub_1007F73F8()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;

  v1 = *(void **)(v0 + 168);
  if (v1)
  {
    v2 = *(id *)(v0 + 168);
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 16);
    v4 = objc_msgSend(*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_tertiaryRowLayoutGuide), "bottomAnchor");
    v5 = objc_msgSend(*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_textLayoutGuide), "bottomAnchor");
    v6 = objc_msgSend(v4, "constraintEqualToAnchor:", v5);

    v7 = *(void **)(v0 + 168);
    *(_QWORD *)(v0 + 168) = v6;
    v2 = v6;

    v1 = 0;
  }
  v8 = v1;
  return v2;
}

uint64_t sub_1007F74B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 176);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 176);
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 16);
    v4 = *(void **)(v3
                  + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_primaryRowLayoutGuide);
    v5 = objc_retain(*(id *)(v3
                           + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_boardTitleLabel));
    v6 = v4;
    sub_1007F8448(v5, v6);
    v2 = v7;

    *(_QWORD *)(v0 + 176) = v2;
    swift_bridgeObjectRetain(v2);
    swift_bridgeObjectRelease();
    v1 = 0;
  }
  swift_bridgeObjectRetain(v1);
  return v2;
}

id sub_1007F7554()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;

  v1 = *(void **)(v0 + 184);
  if (v1)
  {
    v2 = *(id *)(v0 + 184);
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 16);
    v4 = objc_msgSend(*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_boardTitleLabel), "leadingAnchor");
    v5 = objc_msgSend(*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_primaryRowLayoutGuide), "leadingAnchor");
    v6 = objc_msgSend(v4, "constraintEqualToAnchor:", v5);

    v7 = *(void **)(v0 + 184);
    *(_QWORD *)(v0 + 184) = v6;
    v2 = v6;

    v1 = 0;
  }
  v8 = v1;
  return v2;
}

id sub_1007F7618()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;

  v1 = *(void **)(v0 + 192);
  if (v1)
  {
    v2 = *(id *)(v0 + 192);
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 16);
    v4 = objc_msgSend(*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_boardTitleLabel), "trailingAnchor");
    v5 = objc_msgSend(*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_primaryRowLayoutGuide), "trailingAnchor");
    v6 = objc_msgSend(v4, "constraintLessThanOrEqualToAnchor:", v5);

    v7 = *(void **)(v0 + 192);
    *(_QWORD *)(v0 + 192) = v6;
    v2 = v6;

    v1 = 0;
  }
  v8 = v1;
  return v2;
}

uint64_t sub_1007F76DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 200);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 200);
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 16);
    v4 = *(void **)(v3
                  + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_secondaryRowLayoutGuide);
    v5 = objc_retain(*(id *)(v3
                           + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_collaboratorNameLabel));
    v6 = v4;
    sub_1007F8448(v5, v6);
    v2 = v7;

    *(_QWORD *)(v0 + 200) = v2;
    swift_bridgeObjectRetain(v2);
    swift_bridgeObjectRelease();
    v1 = 0;
  }
  swift_bridgeObjectRetain(v1);
  return v2;
}

id sub_1007F7778()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;

  v1 = *(void **)(v0 + 208);
  if (v1)
  {
    v2 = *(id *)(v0 + 208);
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 16);
    v4 = objc_msgSend(*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_collaboratorNameLabel), "leadingAnchor");
    v5 = objc_msgSend(*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_secondaryRowLayoutGuide), "leadingAnchor");
    v6 = objc_msgSend(v4, "constraintEqualToAnchor:", v5);

    v7 = *(void **)(v0 + 208);
    *(_QWORD *)(v0 + 208) = v6;
    v2 = v6;

    v1 = 0;
  }
  v8 = v1;
  return v2;
}

id sub_1007F783C()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;

  v1 = *(void **)(v0 + 216);
  if (v1)
  {
    v2 = *(id *)(v0 + 216);
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 16);
    v4 = objc_msgSend(*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_collaboratorNameLabel), "trailingAnchor");
    v5 = objc_msgSend(*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_secondaryRowLayoutGuide), "trailingAnchor");
    v6 = objc_msgSend(v4, "constraintEqualToAnchor:", v5);

    v7 = *(void **)(v0 + 216);
    *(_QWORD *)(v0 + 216) = v6;
    v2 = v6;

    v1 = 0;
  }
  v8 = v1;
  return v2;
}

uint64_t sub_1007F7900()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 224);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 224);
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 16);
    v4 = *(void **)(v3
                  + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_tertiaryRowLayoutGuide);
    v5 = objc_retain(*(id *)(v3
                           + OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_attributionHostingView));
    v6 = v4;
    sub_1007F8448(v5, v6);
    v2 = v7;

    *(_QWORD *)(v0 + 224) = v2;
    swift_bridgeObjectRetain(v2);
    swift_bridgeObjectRelease();
    v1 = 0;
  }
  swift_bridgeObjectRetain(v1);
  return v2;
}

id sub_1007F799C()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;

  v1 = *(void **)(v0 + 232);
  if (v1)
  {
    v2 = *(id *)(v0 + 232);
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 16);
    v4 = objc_msgSend(*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_attributionHostingView), "leadingAnchor");
    v5 = objc_msgSend(*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_tertiaryRowLayoutGuide), "leadingAnchor");
    v6 = objc_msgSend(v4, "constraintEqualToAnchor:", v5);

    v7 = *(void **)(v0 + 232);
    *(_QWORD *)(v0 + 232) = v6;
    v2 = v6;

    v1 = 0;
  }
  v8 = v1;
  return v2;
}

id sub_1007F7A60()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;

  v1 = *(void **)(v0 + 240);
  if (v1)
  {
    v2 = *(id *)(v0 + 240);
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 16);
    v4 = objc_msgSend(*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController4Item14ViewController_attributionHostingView), "trailingAnchor");
    v5 = objc_msgSend(*(id *)(v3+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_tertiaryRowLayoutGuide), "trailingAnchor");
    v6 = objc_msgSend(v4, "constraintEqualToAnchor:", v5);

    v7 = *(void **)(v0 + 240);
    *(_QWORD *)(v0 + 240) = v6;
    v2 = v6;

    v1 = 0;
  }
  v8 = v1;
  return v2;
}

void sub_1007F7B24(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  double v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;

  v3 = sub_1004B804C((uint64_t *)&unk_1013E4180);
  v4 = swift_allocObject(v3, 40, 7);
  *(_OWORD *)(v4 + 16) = xmmword_100EEF400;
  v5 = objc_msgSend(a1, "trailingAnchor");
  v6 = *(_QWORD *)(v1 + 16);
  v7 = OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_textLayoutGuide;
  v8 = objc_msgSend(*(id *)(v6+ OBJC_IVAR____TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController_textLayoutGuide), "trailingAnchor");
  v9 = objc_msgSend(v5, "constraintEqualToAnchor:", v8);

  *(_QWORD *)(v4 + 32) = v9;
  v34 = v4;
  specialized Array._endMutation()(v10);
  v11 = v4;
  v33 = (unint64_t)v4 >> 62;
  if ((unint64_t)v4 >> 62)
  {
    if (v4 >= 0)
      v4 &= 0xFFFFFFFFFFFFFF8uLL;
    swift_bridgeObjectRetain(v34);
    v12 = _CocoaArrayWrapper.endIndex.getter(v4);
    if (!v12)
      goto LABEL_12;
  }
  else
  {
    v12 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v34);
    if (!v12)
      goto LABEL_12;
  }
  if (v12 < 1)
  {
    __break(1u);
    return;
  }
  v13 = 0;
  do
  {
    if ((v11 & 0xC000000000000001) != 0)
      v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13, v11);
    else
      v14 = *(id *)(v11 + 8 * v13 + 32);
    v16 = v14;
    ++v13;
    LODWORD(v15) = 1144750080;
    objc_msgSend(v14, "setPriority:", v15, v33);

  }
  while (v12 != v13);
LABEL_12:
  v17 = objc_msgSend(a1, "leadingAnchor", swift_bridgeObjectRelease().n128_f64[0]);
  v18 = objc_msgSend(*(id *)(v6 + v7), "leadingAnchor");
  v19 = objc_msgSend(v17, "constraintEqualToAnchor:", v18);

  v20 = objc_msgSend(a1, "trailingAnchor");
  v21 = objc_msgSend(*(id *)(v6 + v7), "trailingAnchor");
  v22 = objc_msgSend(v20, "constraintLessThanOrEqualToAnchor:", v21);

  if (!v33)
  {
    v23 = v11 & 0xFFFFFFFFFFFFF8;
    v24 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    v25 = v24 + 2;
    if (!__OFADD__(v24, 2))
      goto LABEL_14;
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v11 < 0)
    v32 = v11;
  else
    v32 = v11 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v11);
  v24 = _CocoaArrayWrapper.endIndex.getter(v32);
  swift_bridgeObjectRelease();
  v25 = v24 + 2;
  if (__OFADD__(v24, 2))
    goto LABEL_23;
LABEL_14:
  v26 = sub_100DCD070(v25, 1);
  specialized Array._endMutation()(v26);
  v19 = v19;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v19);
  v24 = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v23 = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v24 >= v23 >> 1)
LABEL_24:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
  v27 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v24, v19);
  specialized Array._endMutation()(v27);
  v28 = v22;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v28);
  v30 = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v29 = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v30 >= v29 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
  v31 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v30, v28);
  specialized Array._endMutation()(v31);

  sub_100AF8818(v34);
  swift_bridgeObjectRelease();
}

uint64_t sub_1007F7EA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t i;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t j;
  id v12;
  void *v13;
  uint64_t v14;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v9 = a1;
    else
      v9 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    result = _CocoaArrayWrapper.endIndex.getter(v9);
    v4 = result;
    if (!result)
      goto LABEL_13;
  }
  else
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain(a1);
    if (!v4)
      goto LABEL_13;
  }
  if (v4 < 1)
  {
    __break(1u);
    goto LABEL_27;
  }
  for (i = 0; i != v4; ++i)
  {
    if ((a1 & 0xC000000000000001) != 0)
      v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
    else
      v7 = *(id *)(a1 + 8 * i + 32);
    v8 = v7;
    objc_msgSend(v7, "setAlpha:", 1.0);

  }
LABEL_13:
  swift_bridgeObjectRelease(a1);
  if (!((unint64_t)a2 >> 62))
  {
    v10 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain(a2);
    if (v10)
      goto LABEL_15;
    return swift_bridgeObjectRelease(a2);
  }
  if (a2 < 0)
    v14 = a2;
  else
    v14 = a2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a2);
  result = _CocoaArrayWrapper.endIndex.getter(v14);
  v10 = result;
  if (!result)
    return swift_bridgeObjectRelease(a2);
LABEL_15:
  if (v10 >= 1)
  {
    for (j = 0; j != v10; ++j)
    {
      if ((a2 & 0xC000000000000001) != 0)
        v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(j, a2);
      else
        v12 = *(id *)(a2 + 8 * j + 32);
      v13 = v12;
      objc_msgSend(v12, "setAlpha:", 0.0);

    }
    return swift_bridgeObjectRelease(a2);
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1007F8024()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 104));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 152));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 176));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 200));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 224));

  return v0;
}

uint64_t sub_1007F8120()
{
  uint64_t v0;

  v0 = sub_1007F8024();
  return swift_deallocClassInstance(v0, 248, 7);
}

void sub_1007F820C()
{
  uint64_t v0;

  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtCC8Freeform30CRLiOSFolderGridViewController8ListItem____lazy_storage___listViewController));
}

id sub_1007F821C()
{
  return sub_1004DFAE4(0, (uint64_t (*)(void))_s8ListItemCMa);
}

uint64_t sub_1007F823C()
{
  return _s8ListItemCMa(0);
}

uint64_t _s8ListItemCMa(uint64_t a1)
{
  uint64_t result;

  result = qword_1013F42A8;
  if (!qword_1013F42A8)
    return swift_getSingletonMetadata(a1, &_s8ListItemCMn);
  return result;
}

uint64_t sub_1007F8280(uint64_t a1)
{
  const char *v2;

  v2 = "\b";
  return swift_updateClassMetadata2(a1, 256, 1, &v2, a1 + 600);
}

uint64_t _s8ListItemC18ListViewControllerCMa()
{
  return objc_opt_self(_TtCCC8Freeform30CRLiOSFolderGridViewController8ListItem18ListViewController);
}

uint64_t _s8ListItemC17TextLayoutBuilderCMa()
{
  return objc_opt_self(_TtCCC8Freeform30CRLiOSFolderGridViewController8ListItemP33_F703E61BBAC72B93B2B741F8E4976B0417TextLayoutBuilder);
}

void *sub_1007F8300(uint64_t a1)
{
  void *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8[4];
  _QWORD v9[4];
  void *v10;

  result = &_swiftEmptySetSingleton;
  v10 = &_swiftEmptySetSingleton;
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = a1 + 32;
    swift_bridgeObjectRetain(a1);
    do
    {
      sub_1004CB6E8(v4, (uint64_t)v9);
      sub_1004CB6E8((uint64_t)v9, (uint64_t)v8);
      v5 = sub_1004B8930(0, (unint64_t *)&qword_1013E1760, NSLayoutConstraint_ptr);
      if (swift_dynamicCast(&v7, v8, (char *)&type metadata for Any + 8, v5, 6))
      {
        sub_100ADAA30((Swift::Int *)v8, v7);

      }
      else
      {
        sub_1004CB6E8((uint64_t)v9, (uint64_t)v8);
        v6 = sub_1004B804C(&qword_1013F4878);
        if ((swift_dynamicCast(&v7, v8, (char *)&type metadata for Any + 8, v6, 6) & 1) != 0)
          sub_100512E74((uint64_t)v7);
      }
      _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v9);
      v4 += 32;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return v10;
  }
  return result;
}

void sub_1007F8448(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  double v13;
  void *v14;
  uint64_t v15;
  id v16;
  id v17;
  char *v18;
  id v19;
  id v20;
  id v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = sub_1004B804C((uint64_t *)&unk_1013E4180);
  v5 = swift_allocObject(v4, 40, 7);
  *(_OWORD *)(v5 + 16) = xmmword_100EEF400;
  v6 = objc_msgSend(a2, "topAnchor");
  v7 = objc_msgSend(a1, "topAnchor");
  v8 = objc_msgSend(v6, "constraintEqualToAnchor:", v7);

  *(_QWORD *)(v5 + 32) = v8;
  specialized Array._endMutation()(v9);
  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0)
      v15 = v5;
    else
      v15 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v10 = _CocoaArrayWrapper.endIndex.getter(v15);
    if (!v10)
      goto LABEL_13;
  }
  else
  {
    v10 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v5);
    if (!v10)
      goto LABEL_13;
  }
  if (v10 < 1)
  {
    __break(1u);
    return;
  }
  v11 = 0;
  do
  {
    if ((v5 & 0xC000000000000001) != 0)
      v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v11, v5);
    else
      v12 = *(id *)(v5 + 8 * v11 + 32);
    v14 = v12;
    ++v11;
    LODWORD(v13) = 1144750080;
    objc_msgSend(v12, "setPriority:", v13);

  }
  while (v10 != v11);
LABEL_13:
  v16 = objc_msgSend(a2, "bottomAnchor", swift_bridgeObjectRelease().n128_f64[0]);
  v17 = objc_msgSend(a1, "bottomAnchor");
  v18 = (char *)objc_msgSend(v16, "constraintEqualToAnchor:", v17);

  v19 = objc_msgSend(a2, "topAnchor");
  v20 = objc_msgSend(a1, "topAnchor");
  v21 = objc_msgSend(v19, "constraintLessThanOrEqualToAnchor:", v20);

  if (!((unint64_t)v5 >> 62))
  {
    v22 = v5 & 0xFFFFFFFFFFFFF8;
    v23 = *(char **)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    v24 = v23 + 2;
    if (!__OFADD__(v23, 2))
      goto LABEL_15;
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v5 < 0)
    v31 = v5;
  else
    v31 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v23 = (char *)_CocoaArrayWrapper.endIndex.getter(v31);
  swift_bridgeObjectRelease();
  v24 = v23 + 2;
  if (__OFADD__(v23, 2))
    goto LABEL_24;
LABEL_15:
  v25 = sub_100DCD070(v24, 1);
  specialized Array._endMutation()(v25);
  v23 = v18;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v23);
  v18 = *(char **)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v22 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if ((unint64_t)v18 >= v22 >> 1)
LABEL_25:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v18 + 1, 1);
  v26 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v23);
  specialized Array._endMutation()(v26);
  v27 = v21;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v27);
  v29 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v28 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v29 >= v28 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
  v30 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v29, v27);
  specialized Array._endMutation()(v30);

  sub_100AF8818(v5);
  swift_bridgeObjectRelease();
}

unint64_t sub_1007F87C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1013E1768;
  if (!qword_1013E1768)
  {
    v1 = sub_1004B8930(255, (unint64_t *)&qword_1013E1760, NSLayoutConstraint_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1013E1768);
  }
  return result;
}

void sub_1007F8818(uint64_t a1, uint64_t a2, char a3)
{
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t j;
  id v16;
  void *v17;
  uint64_t v18;
  _QWORD v19[5];
  uint64_t v20;

  if ((a3 & 1) != 0)
  {
    v5 = (void *)objc_opt_self(UIView);
    v6 = swift_allocObject(&unk_101280538, 32, 7);
    *(_QWORD *)(v6 + 16) = a2;
    *(_QWORD *)(v6 + 24) = a1;
    v19[4] = sub_1007F8A94;
    v20 = v6;
    v19[0] = _NSConcreteStackBlock;
    v19[1] = *(_QWORD *)"";
    v19[2] = sub_1005D2FC0;
    v19[3] = &unk_101280550;
    v7 = _Block_copy(v19);
    v8 = v20;
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a1);
    swift_release(v8);
    objc_msgSend(v5, "animateWithDuration:animations:", v7, 0.2);
    _Block_release(v7);
    return;
  }
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v13 = a1;
    else
      v13 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v9 = _CocoaArrayWrapper.endIndex.getter(v13);
    if (!v9)
      goto LABEL_15;
  }
  else
  {
    v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (!v9)
      goto LABEL_15;
  }
  if (v9 < 1)
  {
    __break(1u);
    goto LABEL_29;
  }
  for (i = 0; i != v9; ++i)
  {
    if ((a1 & 0xC000000000000001) != 0)
      v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
    else
      v11 = *(id *)(a1 + 8 * i + 32);
    v12 = v11;
    objc_msgSend(v11, "setAlpha:", 0.0);

  }
LABEL_15:
  swift_bridgeObjectRelease();
  if (!((unint64_t)a2 >> 62))
  {
    v14 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a2);
    if (v14)
      goto LABEL_17;
LABEL_27:
    swift_bridgeObjectRelease();
    return;
  }
  if (a2 < 0)
    v18 = a2;
  else
    v18 = a2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a2);
  v14 = _CocoaArrayWrapper.endIndex.getter(v18);
  if (!v14)
    goto LABEL_27;
LABEL_17:
  if (v14 >= 1)
  {
    for (j = 0; j != v14; ++j)
    {
      if ((a2 & 0xC000000000000001) != 0)
        v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(j, a2);
      else
        v16 = *(id *)(a2 + 8 * j + 32);
      v17 = v16;
      objc_msgSend(v16, "setAlpha:", 1.0);

    }
    goto LABEL_27;
  }
LABEL_29:
  __break(1u);
}

uint64_t sub_1007F8A68()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1007F8A94()
{
  uint64_t v0;

  return sub_1007F7EA8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1007F8A9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_1007F8AAC(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

double sub_1007F8AB4(uint64_t a1)
{
  double result;

  if (a1 != 1)
    *(_QWORD *)&result = swift_release(a1).n128_u64[0];
  return result;
}

uint64_t sub_1007F8AC4(uint64_t result)
{
  if (result != 1)
    return swift_retain(result);
  return result;
}

void sub_1007F8AD4(void (*a1)(void))
{
  void *v1;
  void *v2;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  id v10;
  void *v11;
  uint64_t v12;
  id v13;

  v2 = v1;
  v4 = objc_msgSend(v1, "interactiveCanvasController");
  v13 = objc_msgSend(v4, "commandController");

  if (!v13)
  {
    sub_100757E04(&_mh_execute_header, (uint64_t)"groupWPEditorActions(do:)", 25, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPShapeEditor+CRLWPTextInspecting.swift", 102, 2, 260, "invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"groupWPEditorActions(do:)", 25, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPShapeEditor+CRLWPTextInspecting.swift", 102, 2u, 260, (uint64_t)"invalid nil found when unwrapping value", 39, 2u);
    return;
  }
  v5 = objc_msgSend(v2, "wpEditors", sub_1006A9664(0));
  v6 = type metadata accessor for CRLWPEditor(0);
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);

  if (!((unint64_t)v7 >> 62))
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v7);
    if (v8)
      goto LABEL_4;
LABEL_15:
    swift_bridgeObjectRelease_n(v7, 2);
    sub_1006A984C(0);

    return;
  }
  if (v7 < 0)
    v12 = v7;
  else
    v12 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  v8 = _CocoaArrayWrapper.endIndex.getter(v12);
  if (!v8)
    goto LABEL_15;
LABEL_4:
  if (v8 >= 1)
  {
    for (i = 0; i != v8; ++i)
    {
      if ((v7 & 0xC000000000000001) != 0)
        v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v7);
      else
        v10 = *(id *)(v7 + 8 * i + 32);
      v11 = v10;
      a1();

    }
    goto LABEL_15;
  }
  __break(1u);
}

double sub_1007F8CFC(void *a1, uint64_t a2, SEL *a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  double result;
  _QWORD v13[3];
  uint64_t v14;

  sub_1004CB7BC(a2, (uint64_t)v13, &qword_1013E0230);
  v5 = v14;
  if (v14)
  {
    v6 = sub_1004BB5A4(v13, v14);
    v7 = *(_QWORD *)(v5 - 8);
    v8 = __chkstk_darwin(v6);
    v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, __n128))(v7 + 16))(v10, v8);
    v11 = _bridgeAnythingToObjectiveC<A>(_:)(v10, v5);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v5);
    _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v13);
  }
  else
  {
    v11 = 0;
  }
  objc_msgSend(a1, *a3, v11);
  *(_QWORD *)&result = swift_unknownObjectRelease(v11).n128_u64[0];
  return result;
}

uint64_t sub_1007F8E04(void *a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  id v7;
  uint64_t v8;
  id v9;
  _OWORD v11[2];

  if (a3)
  {
    v7 = a1;
    swift_unknownObjectRetain(a3);
    _bridgeAnyObjectToAny(_:)(v11, v8);
    swift_unknownObjectRelease(a3);
  }
  else
  {
    memset(v11, 0, sizeof(v11));
    v9 = a1;
  }
  __chkstk_darwin(v9);
  sub_1007F8AD4(a4);

  return sub_1004CB800((uint64_t)v11, &qword_1013E0230);
}

void sub_1007F8EB0(uint64_t a1@<X8>)
{
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100F0E618);
  sub_100731820(KeyPath);
  v4 = v3;
  swift_release(KeyPath);
  *(_BYTE *)(a1 + 4) = BYTE4(v4);
  *(_DWORD *)a1 = v4;
}

void sub_1007F8F04(float a1)
{
  void *v1;
  void *v2;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  id v10;
  void *v11;
  uint64_t KeyPath;
  char *v13;
  char *v14;
  uint64_t v15;
  id v16;

  v2 = v1;
  v4 = objc_msgSend(v1, "interactiveCanvasController");
  v16 = objc_msgSend(v4, "commandController");

  if (!v16)
  {
    sub_100757E04(&_mh_execute_header, (uint64_t)"groupWPEditorActions(do:)", 25, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPShapeEditor+CRLWPTextInspecting.swift", 102, 2, 260, "invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"groupWPEditorActions(do:)", 25, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPShapeEditor+CRLWPTextInspecting.swift", 102, 2u, 260, (uint64_t)"invalid nil found when unwrapping value", 39, 2u);
    return;
  }
  v5 = objc_msgSend(v2, "wpEditors", sub_1006A9664(0));
  v6 = type metadata accessor for CRLWPEditor(0);
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);

  if (!((unint64_t)v7 >> 62))
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v7);
    if (v8)
      goto LABEL_4;
LABEL_18:
    swift_bridgeObjectRelease_n(v7, 2);
    sub_1006A984C(0);

    return;
  }
  if (v7 < 0)
    v15 = v7;
  else
    v15 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  v8 = _CocoaArrayWrapper.endIndex.getter(v15);
  if (!v8)
    goto LABEL_18;
LABEL_4:
  if (v8 >= 1)
  {
    for (i = 0; i != v8; ++i)
    {
      if ((v7 & 0xC000000000000001) != 0)
        v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v7);
      else
        v10 = *(id *)(v7 + 8 * i + 32);
      v11 = v10;
      KeyPath = swift_getKeyPath(&unk_100F0E618);
      v13 = sub_10073138C();
      if (v13)
      {
        v14 = v13;
        sub_100DC17A4(KeyPath, *(_QWORD *)&v13[OBJC_IVAR____TtC8Freeform12CRLTextRange_range], *(_QWORD *)&v13[OBJC_IVAR____TtC8Freeform12CRLTextRange_range + 8], a1);

        swift_release(KeyPath);
      }
      else
      {
        sub_100757E04(&_mh_execute_header, (uint64_t)"setAttributeValue(_:value:)", 27, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Editor/CRLWPEditor.swift", 84, 2, 2930, "invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
        sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"setAttributeValue(_:value:)", 27, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Editor/CRLWPEditor.swift", 84, 2u, 2930, (uint64_t)"invalid nil found when unwrapping value", 39, 2u);

        swift_release(KeyPath);
      }
    }
    goto LABEL_18;
  }
  __break(1u);
}

void sub_1007F9218(char a1, uint64_t a2, void (*a3)(uint64_t, _QWORD, _QWORD, _QWORD))
{
  void *v3;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  id v12;
  void *v13;
  uint64_t KeyPath;
  char *v15;
  char *v16;
  uint64_t v17;
  id v18;

  v6 = objc_msgSend(v3, "interactiveCanvasController");
  v18 = objc_msgSend(v6, "commandController");

  if (!v18)
  {
    sub_100757E04(&_mh_execute_header, (uint64_t)"groupWPEditorActions(do:)", 25, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPShapeEditor+CRLWPTextInspecting.swift", 102, 2, 260, "invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"groupWPEditorActions(do:)", 25, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPShapeEditor+CRLWPTextInspecting.swift", 102, 2u, 260, (uint64_t)"invalid nil found when unwrapping value", 39, 2u);
    return;
  }
  v7 = objc_msgSend(v3, "wpEditors", sub_1006A9664(0));
  v8 = type metadata accessor for CRLWPEditor(0);
  v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v8);

  if (!((unint64_t)v9 >> 62))
  {
    v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v9);
    if (v10)
      goto LABEL_4;
LABEL_18:
    swift_bridgeObjectRelease_n(v9, 2);
    sub_1006A984C(0);

    return;
  }
  if (v9 < 0)
    v17 = v9;
  else
    v17 = v9 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v9);
  v10 = _CocoaArrayWrapper.endIndex.getter(v17);
  if (!v10)
    goto LABEL_18;
LABEL_4:
  if (v10 >= 1)
  {
    for (i = 0; i != v10; ++i)
    {
      if ((v9 & 0xC000000000000001) != 0)
        v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v9);
      else
        v12 = *(id *)(v9 + 8 * i + 32);
      v13 = v12;
      KeyPath = swift_getKeyPath(a2);
      v15 = sub_10073138C();
      if (v15)
      {
        v16 = v15;
        a3(KeyPath, a1 & 1, *(_QWORD *)&v15[OBJC_IVAR____TtC8Freeform12CRLTextRange_range], *(_QWORD *)&v15[OBJC_IVAR____TtC8Freeform12CRLTextRange_range + 8]);

        swift_release(KeyPath);
      }
      else
      {
        sub_100757E04(&_mh_execute_header, (uint64_t)"setAttributeValue(_:value:)", 27, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Editor/CRLWPEditor.swift", 84, 2, 2930, "invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
        sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"setAttributeValue(_:value:)", 27, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Editor/CRLWPEditor.swift", 84, 2u, 2930, (uint64_t)"invalid nil found when unwrapping value", 39, 2u);

        swift_release(KeyPath);
      }
    }
    goto LABEL_18;
  }
  __break(1u);
}

void sub_1007F9538(char a1, uint64_t a2, void (*a3)(uint64_t, _QWORD, _QWORD, _QWORD))
{
  void *v3;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  id v12;
  void *v13;
  uint64_t KeyPath;
  char *v15;
  char *v16;
  uint64_t v17;
  id v18;

  v6 = objc_msgSend(v3, "interactiveCanvasController");
  v18 = objc_msgSend(v6, "commandController");

  if (!v18)
  {
    sub_100757E04(&_mh_execute_header, (uint64_t)"groupWPEditorActions(do:)", 25, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPShapeEditor+CRLWPTextInspecting.swift", 102, 2, 260, "invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"groupWPEditorActions(do:)", 25, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPShapeEditor+CRLWPTextInspecting.swift", 102, 2u, 260, (uint64_t)"invalid nil found when unwrapping value", 39, 2u);
    return;
  }
  v7 = objc_msgSend(v3, "wpEditors", sub_1006A9664(0));
  v8 = type metadata accessor for CRLWPEditor(0);
  v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v8);

  if (!((unint64_t)v9 >> 62))
  {
    v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v9);
    if (v10)
      goto LABEL_4;
LABEL_18:
    swift_bridgeObjectRelease_n(v9, 2);
    sub_1006A984C(0);

    return;
  }
  if (v9 < 0)
    v17 = v9;
  else
    v17 = v9 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v9);
  v10 = _CocoaArrayWrapper.endIndex.getter(v17);
  if (!v10)
    goto LABEL_18;
LABEL_4:
  if (v10 >= 1)
  {
    for (i = 0; i != v10; ++i)
    {
      if ((v9 & 0xC000000000000001) != 0)
        v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v9);
      else
        v12 = *(id *)(v9 + 8 * i + 32);
      v13 = v12;
      KeyPath = swift_getKeyPath(a2);
      v15 = sub_10073138C();
      if (v15)
      {
        v16 = v15;
        a3(KeyPath, a1 & 1, *(_QWORD *)&v15[OBJC_IVAR____TtC8Freeform12CRLTextRange_range], *(_QWORD *)&v15[OBJC_IVAR____TtC8Freeform12CRLTextRange_range + 8]);

        swift_release(KeyPath);
      }
      else
      {
        sub_100757E04(&_mh_execute_header, (uint64_t)"setAttributeValue(_:value:)", 27, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Editor/CRLWPEditor.swift", 84, 2, 2930, "invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
        sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"setAttributeValue(_:value:)", 27, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Editor/CRLWPEditor.swift", 84, 2u, 2930, (uint64_t)"invalid nil found when unwrapping value", 39, 2u);

        swift_release(KeyPath);
      }
    }
    goto LABEL_18;
  }
  __break(1u);
}

void sub_1007F984C(_WORD *a1@<X8>)
{
  uint64_t KeyPath;
  __int16 v3;
  __int16 v4;

  KeyPath = swift_getKeyPath(&unk_100F0E658);
  sub_10072E744(KeyPath);
  v4 = v3;
  swift_release(KeyPath);
  *a1 = v4;
}

void sub_1007F9898(unsigned __int8 a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t KeyPath;
  char *v18;
  uint64_t v19;
  id v20;
  id v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  id v31;
  char *v32;
  _BYTE *v33;
  uint64_t v34;
  void *v35;
  void *Strong;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t inited;
  Class isa;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  id v47;
  char *v48;
  unint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  char *v63;
  uint64_t v64;
  char v65[104];
  uint64_t v66;
  unint64_t v67;

  v2 = v1;
  v55 = sub_1004B804C(&qword_1013F3D40);
  __chkstk_darwin(v55);
  v54 = (uint64_t)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v6 = __chkstk_darwin(v5).n128_u64[0];
  v53 = (uint64_t *)((char *)&v46 - v7);
  v8 = objc_msgSend(v1, "interactiveCanvasController", v6);
  v9 = objc_msgSend(v8, "commandController");

  if (!v9)
  {
    sub_100757E04(&_mh_execute_header, (uint64_t)"groupWPEditorActions(do:)", 25, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPShapeEditor+CRLWPTextInspecting.swift", 102, 2, 260, "invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"groupWPEditorActions(do:)", 25, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPShapeEditor+CRLWPTextInspecting.swift", 102, 2u, 260, (uint64_t)"invalid nil found when unwrapping value", 39, 2u);
    return;
  }
  v47 = v9;
  v10 = objc_msgSend(v2, "wpEditors", sub_1006A9664(0));
  v11 = type metadata accessor for CRLWPEditor(0);
  v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v10, v11);

  if ((unint64_t)v12 >> 62)
  {
    if (v12 < 0)
      v44 = v12;
    else
      v44 = v12 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v12);
    v13 = _CocoaArrayWrapper.endIndex.getter(v44);
    if (v13)
      goto LABEL_4;
LABEL_23:
    swift_bridgeObjectRelease_n(v12, 2);
    v45 = v47;
    sub_1006A984C(0);

    return;
  }
  v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v12);
  if (!v13)
    goto LABEL_23;
LABEL_4:
  v57 = v13 - 1;
  if (v13 >= 1)
  {
    v14 = 0;
    v56 = v12 & 0xC000000000000001;
    v51 = a1;
    v50 = xmmword_100EF5E40;
    v49 = 0x8000000100FB8210;
    v48 = (char *)&type metadata for Any + 8;
    v52 = v12;
    while (1)
    {
      if (v56)
        v15 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v14, v12);
      else
        v15 = (char *)*(id *)(v12 + 8 * v14 + 32);
      v16 = v15;
      KeyPath = swift_getKeyPath(&unk_100F0E658);
      v18 = sub_10073138C();
      if (v18)
      {
        v64 = v14;
        v63 = v18;
        v19 = *(_QWORD *)&v18[OBJC_IVAR____TtC8Freeform12CRLTextRange_range];
        v60 = *(_QWORD *)&v18[OBJC_IVAR____TtC8Freeform12CRLTextRange_range + 8];
        v61 = v19;
        v20 = objc_msgSend(*(id *)&v16[OBJC_IVAR____TtC8Freeform11CRLWPEditor_editorController], "selectionPath");
        v21 = objc_allocWithZone((Class)CRLCommandSelectionBehavior);
        v62 = v20;
        v59 = objc_msgSend(v21, "initWithCommitSelectionPath:forwardSelectionPath:reverseSelectionPath:", v20, v20, v20);
        v22 = *(void **)&v16[OBJC_IVAR____TtC8Freeform11CRLWPEditor_enclosingShape];
        v23 = (uint64_t)v53;
        *v53 = &_swiftEmptySetSingleton;
        v24 = sub_100559A64();
        v58 = v22;
        swift_retain(KeyPath);
        v25 = CRAttributedString.Attributes.init()(&type metadata for CRLTextAttributeScope, v24);
        __chkstk_darwin(v25);
        sub_100739274();
        swift_getKeyPath(&unk_100F0E678);
        swift_retain(KeyPath);
        sub_100AD8690(&v66, 0x6C7974537473696CLL, 0xE900000000000065);
        swift_bridgeObjectRelease();
        __chkstk_darwin(v26);
        v27 = swift_getKeyPath(&unk_100F0E6B0);
        v66 = v51;
        LOBYTE(v67) = 0;
        v28 = sub_1004B804C((uint64_t *)&unk_1013EFBE0);
        v29 = sub_1007392B8();
        CRAttributedString.Attributes.subscript.setter(&v66, v27, v28, v29);
        v30 = v54;
        sub_1004CB7BC(v23, v54, &qword_1013F3D40);
        v31 = objc_allocWithZone((Class)sub_1004B804C((uint64_t *)&unk_1013EFC00));
        v32 = v58;
        v33 = (_BYTE *)sub_100738804(v58, v61, v60, v30);
        swift_release(KeyPath);

        v34 = v23;
        v35 = v59;
        sub_1004CB800(v34, &qword_1013F3D40);
        Strong = (void *)swift_unknownObjectWeakLoadStrong(&v16[OBJC_IVAR____TtC8Freeform11CRLWPEditor_icc]);
        v37 = objc_msgSend(Strong, "commandController");

        if (v37)
        {
          v38 = v35;
          sub_1006A5F54(v33, 0, v35, 4, 0);

        }
        v39 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
        if (qword_1013DD908 != -1)
          swift_once(&qword_1013DD908, sub_100A16088);
        v40 = qword_101480600;
        v41 = sub_1004B804C(&qword_1013E49B0);
        inited = swift_initStackObject(v41, v65);
        *(_OWORD *)(inited + 16) = v50;
        v66 = 0xD000000000000021;
        v67 = v49;
        AnyHashable.init<A>(_:)(&v66, &type metadata for String, &protocol witness table for String);
        *(_QWORD *)(inited + 96) = sub_1004B804C(&qword_1013EFC20);
        *(_QWORD *)(inited + 72) = KeyPath;
        swift_retain(KeyPath);
        sub_1008D5828(inited);
        isa = Dictionary._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v39, "postNotificationName:object:userInfo:", v40, v16, isa, swift_bridgeObjectRelease().n128_f64[0]);

        swift_release(KeyPath);
        v14 = v64;
        v12 = v52;
        if (v57 == v64)
          goto LABEL_23;
      }
      else
      {
        sub_100757E04(&_mh_execute_header, (uint64_t)"setAttributeValue(_:value:)", 27, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Editor/CRLWPEditor.swift", 84, 2, 2939, "invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
        sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"setAttributeValue(_:value:)", 27, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Editor/CRLWPEditor.swift", 84, 2u, 2939, (uint64_t)"invalid nil found when unwrapping value", 39, 2u);

        swift_release(KeyPath);
        if (v57 == v14)
          goto LABEL_23;
      }
      ++v14;
    }
  }
  __break(1u);
}

void sub_1007FA058(uint64_t a1@<X3>, uint64_t (*a2)(void)@<X4>, uint64_t a3@<X8>)
{
  uint64_t KeyPath;
  uint64_t v6;
  char v7;
  char v8;

  KeyPath = swift_getKeyPath(a1);
  v6 = a2();
  v8 = v7;
  swift_release(KeyPath);
  *(_QWORD *)a3 = v6;
  *(_BYTE *)(a3 + 8) = v8;
}

void sub_1007FA0AC(uint64_t a1, void (*a2)(uint64_t))
{
  void *v2;
  void *v4;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  id v12;
  void *v13;
  uint64_t v14;
  id v15;

  v4 = v2;
  v6 = objc_msgSend(v2, "interactiveCanvasController");
  v15 = objc_msgSend(v6, "commandController");

  if (!v15)
  {
    sub_100757E04(&_mh_execute_header, (uint64_t)"groupWPEditorActions(do:)", 25, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPShapeEditor+CRLWPTextInspecting.swift", 102, 2, 260, "invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"groupWPEditorActions(do:)", 25, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPShapeEditor+CRLWPTextInspecting.swift", 102, 2u, 260, (uint64_t)"invalid nil found when unwrapping value", 39, 2u);
    return;
  }
  v7 = objc_msgSend(v4, "wpEditors", sub_1006A9664(0));
  v8 = type metadata accessor for CRLWPEditor(0);
  v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v8);

  if (!((unint64_t)v9 >> 62))
  {
    v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v9);
    if (v10)
      goto LABEL_4;
LABEL_15:
    swift_bridgeObjectRelease_n(v9, 2);
    sub_1006A984C(0);

    return;
  }
  if (v9 < 0)
    v14 = v9;
  else
    v14 = v9 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v9);
  v10 = _CocoaArrayWrapper.endIndex.getter(v14);
  if (!v10)
    goto LABEL_15;
LABEL_4:
  if (v10 >= 1)
  {
    for (i = 0; i != v10; ++i)
    {
      if ((v9 & 0xC000000000000001) != 0)
        v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v9);
      else
        v12 = *(id *)(v9 + 8 * i + 32);
      v13 = v12;
      a2(a1);

    }
    goto LABEL_15;
  }
  __break(1u);
}

void sub_1007FA2C8(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  uint64_t v6;
  double v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  int64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  objc_class *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  char *v46;
  uint64_t v47;
  void (*v48)(__n128);
  _QWORD *v49;
  char *v50;
  __n128 v51;
  char *v52;
  __n128 v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD v56[2];
  id v57;
  id v58;
  id v59;
  id v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  int64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  objc_super v77;
  _QWORD v78[6];

  v71 = a3;
  v72 = a4;
  v67 = a2;
  v6 = type metadata accessor for UUID(0);
  v69 = *(_QWORD *)(v6 - 8);
  v70 = v6;
  *(_QWORD *)&v7 = __chkstk_darwin(v6).n128_u64[0];
  v68 = (char *)v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = objc_msgSend(v4, "interactiveCanvasController", v7);
  if (v9)
  {
    v60 = v9;
    v73 = objc_msgSend(v9, "commandController");
    if (!v73)
    {

      return;
    }
    v10 = objc_msgSend(v60, "editorController");
    if (!v10)
    {

      return;
    }
    v59 = v10;
    v11 = objc_msgSend(v10, "selectionPath");
    v12 = objc_allocWithZone((Class)CRLCommandSelectionBehavior);
    v58 = v11;
    v57 = objc_msgSend(v12, "initWithForwardSelectionPath:reverseSelectionPath:", v11, v11);
    v13 = objc_msgSend(v4, "boardItems", sub_1006A9664(v57));
    v14 = type metadata accessor for CRLBoardItem(0);
    v15 = sub_10058528C();
    v16 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v13, v14, v15);

    v62 = v14;
    if ((v16 & 0xC000000000000001) != 0)
    {
      if (v16 < 0)
        v18 = v16;
      else
        v18 = v16 & 0xFFFFFFFFFFFFFF8;
      v19 = __CocoaSet.makeIterator()(v18);
      v17 = Set.Iterator.init(_cocoa:)(v78, v19, v14, v15);
      v16 = v78[0];
      v65 = v78[1];
      v20 = v78[2];
      v21 = v78[3];
      v22 = v78[4];
    }
    else
    {
      v21 = 0;
      v23 = -1 << *(_BYTE *)(v16 + 32);
      v24 = *(_QWORD *)(v16 + 56);
      v65 = v16 + 56;
      v25 = ~v23;
      v26 = -v23;
      if (v26 < 64)
        v27 = ~(-1 << v26);
      else
        v27 = -1;
      v22 = v27 & v24;
      v20 = v25;
    }
    v63 = v16 & 0x7FFFFFFFFFFFFFFFLL;
    v56[1] = v20;
    v64 = (unint64_t)(v20 + 64) >> 6;
    v66 = a1 & 1;
    v61 = (char *)&type metadata for Swift.AnyObject + 8;
    v28 = v67;
    while (1)
    {
      if (v16 < 0)
      {
        v32 = __CocoaSet.Iterator.next()(v17);
        if (!v32)
          goto LABEL_42;
        v33 = v32;
        v75 = v32;
        swift_unknownObjectRetain(v32);
        swift_dynamicCast(&v76, &v75, v61, v62, 7);
        v34 = v76;
        swift_unknownObjectRelease(v33);
        v31 = v21;
        v29 = v22;
        if (!v34)
          goto LABEL_42;
      }
      else
      {
        if (v22)
        {
          v29 = (v22 - 1) & v22;
          v30 = __clz(__rbit64(v22)) | (v21 << 6);
          v31 = v21;
        }
        else
        {
          v35 = v21 + 1;
          if (__OFADD__(v21, 1))
          {
            __break(1u);
            return;
          }
          if (v35 >= v64)
            goto LABEL_42;
          v36 = *(_QWORD *)(v65 + 8 * v35);
          v31 = v21 + 1;
          if (!v36)
          {
            v31 = v21 + 2;
            if (v21 + 2 >= v64)
              goto LABEL_42;
            v36 = *(_QWORD *)(v65 + 8 * v31);
            if (!v36)
            {
              v31 = v21 + 3;
              if (v21 + 3 >= v64)
                goto LABEL_42;
              v36 = *(_QWORD *)(v65 + 8 * v31);
              if (!v36)
              {
                v31 = v21 + 4;
                if (v21 + 4 >= v64)
                  goto LABEL_42;
                v36 = *(_QWORD *)(v65 + 8 * v31);
                if (!v36)
                {
                  v31 = v21 + 5;
                  if (v21 + 5 >= v64)
                    goto LABEL_42;
                  v36 = *(_QWORD *)(v65 + 8 * v31);
                  if (!v36)
                  {
                    v37 = v21 + 6;
                    while (v64 != v37)
                    {
                      v36 = *(_QWORD *)(v65 + 8 * v37++);
                      if (v36)
                      {
                        v31 = v37 - 1;
                        goto LABEL_38;
                      }
                    }
LABEL_42:
                    sub_1004D284C(v16);
                    sub_1006A984C(0);

                    return;
                  }
                }
              }
            }
          }
LABEL_38:
          v29 = (v36 - 1) & v36;
          v30 = __clz(__rbit64(v36)) + (v31 << 6);
        }
        v34 = *(id *)(*(_QWORD *)(v16 + 48) + 8 * v30);
        if (!v34)
          goto LABEL_42;
      }
      v38 = type metadata accessor for CRLWPShapeItem(0);
      v39 = swift_dynamicCastClass(v34, v38);
      if (v39)
      {
        v40 = v39;
        v41 = (objc_class *)sub_1004B804C(&qword_1013F4888);
        v42 = (char *)objc_allocWithZone(v41);
        v74 = v31;
        v43 = v29;
        v44 = v16;
        v45 = v42;
        v46 = &v42[*(_QWORD *)((swift_isaMask & *(_QWORD *)v42) + 0xF0)];
        *(_QWORD *)v46 = 0;
        *((_QWORD *)v46 + 1) = 0xE000000000000000;
        v47 = *(_QWORD *)(v40 + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData);
        v48 = *(void (**)(__n128))(*(_QWORD *)v47 + 256);
        v49 = v34;
        swift_retain(v28);
        v50 = (char *)v45;
        v51 = swift_retain(v47);
        v52 = v68;
        v48(v51);
        v53 = swift_release(v47);
        (*(void (**)(char *, char *, uint64_t, __n128))(v69 + 32))(&v50[*(_QWORD *)((swift_isaMask & *(_QWORD *)v50) + 0xD8)], v52, v70, v53);
        v50[*(_QWORD *)((swift_isaMask & *(_QWORD *)v50) + 0xE0)] = v66;
        *(_QWORD *)&v50[*(_QWORD *)((swift_isaMask & *(_QWORD *)v50) + 0xE8)] = v28;
        swift_retain(v28);

        v77.receiver = v50;
        v77.super_class = v41;
        v16 = v44;
        v29 = v43;
        v31 = v74;
        v34 = objc_msgSendSuper2(&v77, "init");

        swift_release(v28);
        v54 = (_QWORD *)((char *)v34 + *(_QWORD *)((swift_isaMask & *v34) + 0xF0));
        v55 = v72;
        *v54 = v71;
        v54[1] = v55;
        swift_bridgeObjectRetain(v55);
        swift_bridgeObjectRelease();
        sub_1006A5F54(v34, 0, 0, 4, 0);

      }
      v21 = v31;
      v22 = v29;
    }
  }
}

double sub_1007FA8AC(char a1)
{
  uint64_t KeyPath;
  id v3;
  NSString v4;
  NSString v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;

  KeyPath = swift_getKeyPath(" \rS");
  v3 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v4 = String._bridgeToObjectiveC()();
  v5 = String._bridgeToObjectiveC()();
  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend(v3, "localizedStringForKey:value:table:", v4, v5, v6);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v9 = v8;
  v11 = v10;

  sub_1007FA2C8(a1, KeyPath, v9, v11);
  swift_release(KeyPath);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t sub_1007FA9F4()
{
  uint64_t KeyPath;
  uint64_t v1;
  uint64_t v2;

  KeyPath = swift_getKeyPath(&unk_100F0E908);
  sub_100DCACC4(KeyPath);
  v2 = v1;
  swift_release(KeyPath);
  return v2 & 0xFFFFFFFFFFLL;
}

uint64_t sub_1007FAA34(uint64_t a1, uint64_t a2)
{
  return sub_1007335A0(a1, a2, (uint64_t)&unk_100F0E8E0, (uint64_t (*)(void))sub_100DCAB10);
}

void sub_1007FAA48(void *a1)
{
  void *v1;
  id v2;

  v2 = a1;
  sub_1007FACB4(v1, v2);

}

uint64_t sub_1007FAA78(uint64_t a1, uint64_t a2)
{
  return sub_1007FAC10(a1, a2, (uint64_t)&unk_100F0E8B8, (uint64_t (*)(void))sub_100DCAB24);
}

void sub_1007FAA8C(char a1)
{
  sub_1007F9218(a1, (uint64_t)&unk_100F0E898, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD))sub_100DC0D24);
}

uint64_t sub_1007FAAB0(uint64_t a1, uint64_t a2)
{
  return sub_1007FAC10(a1, a2, (uint64_t)&unk_100F0E870, (uint64_t (*)(void))sub_100DCAB24);
}

void sub_1007FAAC4(char a1)
{
  sub_1007F9218(a1, (uint64_t)&unk_100F0E850, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD))sub_100DC0D40);
}

uint64_t sub_1007FAAE8(uint64_t a1, uint64_t a2)
{
  return sub_1007FAC10(a1, a2, (uint64_t)&unk_100F0E828, (uint64_t (*)(void))sub_100DCAB24);
}

void sub_1007FAAFC(char a1)
{
  sub_1007F9538(a1, (uint64_t)&unk_100F0E808, sub_100DC10E0);
}

uint64_t sub_1007FAB20(uint64_t a1, uint64_t a2)
{
  return sub_1007FAC10(a1, a2, (uint64_t)&unk_100F0E7E0, (uint64_t (*)(void))sub_100DCAB24);
}

void sub_1007FAB34(char a1)
{
  sub_1007F9538(a1, (uint64_t)&unk_100F0E7C0, sub_100DC1440);
}

uint64_t sub_1007FAB58(uint64_t a1, uint64_t a2)
{
  return sub_1007335A0(a1, a2, (uint64_t)&unk_100F0E798, (uint64_t (*)(void))sub_100DCAE48);
}

void sub_1007FAB6C(void *a1)
{
  void *v1;
  id v2;

  v2 = a1;
  sub_1007FAEBC(v1, v2);

}

uint64_t sub_1007FAB9C(uint64_t a1, uint64_t a2)
{
  return sub_1007335A0(a1, a2, (uint64_t)&unk_100F0E750, (uint64_t (*)(void))sub_100DCB058);
}

void sub_1007FABB0(uint64_t a1)
{
  sub_1007FA0AC(a1, sub_10072AF30);
}

uint64_t sub_1007FABCC(uint64_t a1, uint64_t a2)
{
  return sub_1007335A0(a1, a2, (uint64_t)&unk_100F0E728, (uint64_t (*)(void))sub_100DCB458);
}

void sub_1007FABE0(uint64_t a1)
{
  sub_1007FA0AC(a1, sub_10072B798);
}

uint64_t sub_1007FABFC(uint64_t a1, uint64_t a2)
{
  return sub_1007FAC10(a1, a2, (uint64_t)&unk_100F0E6E8, (uint64_t (*)(void))sub_100DCB1C8);
}

uint64_t sub_1007FAC10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t KeyPath;
  uint64_t v6;

  KeyPath = swift_getKeyPath(a3);
  v6 = a4();
  swift_release(KeyPath);
  return v6;
}

void sub_1007FAC58(uint64_t a1)
{
  sub_1007FA0AC(a1, sub_100721234);
}

double sub_1007FAC74(void *a1)
{
  uint64_t v1;

  return sub_1007F8CFC(a1, *(_QWORD *)(v1 + 16), (SEL *)&selRef_decreaseSize_);
}

double sub_1007FAC94(void *a1)
{
  uint64_t v1;

  return sub_1007F8CFC(a1, *(_QWORD *)(v1 + 16), (SEL *)&selRef_increaseSize_);
}

void sub_1007FACB4(void *a1, void *a2)
{
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  id v10;
  void *v11;
  uint64_t v12;
  id v13;

  v4 = objc_msgSend(a1, "interactiveCanvasController");
  v13 = objc_msgSend(v4, "commandController");

  if (!v13)
  {
    sub_100757E04(&_mh_execute_header, (uint64_t)"groupWPEditorActions(do:)", 25, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPShapeEditor+CRLWPTextInspecting.swift", 102, 2, 260, "invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"groupWPEditorActions(do:)", 25, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPShapeEditor+CRLWPTextInspecting.swift", 102, 2u, 260, (uint64_t)"invalid nil found when unwrapping value", 39, 2u);
    return;
  }
  v5 = objc_msgSend(a1, "wpEditors", sub_1006A9664(0));
  v6 = type metadata accessor for CRLWPEditor(0);
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);

  if (!((unint64_t)v7 >> 62))
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v7);
    if (v8)
      goto LABEL_4;
LABEL_15:
    swift_bridgeObjectRelease_n(v7, 2);
    sub_1006A984C(0);

    return;
  }
  if (v7 < 0)
    v12 = v7;
  else
    v12 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  v8 = _CocoaArrayWrapper.endIndex.getter(v12);
  if (!v8)
    goto LABEL_15;
LABEL_4:
  if (v8 >= 1)
  {
    for (i = 0; i != v8; ++i)
    {
      if ((v7 & 0xC000000000000001) != 0)
        v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v7);
      else
        v10 = *(id *)(v7 + 8 * i + 32);
      v11 = v10;
      sub_100732980(a2);

    }
    goto LABEL_15;
  }
  __break(1u);
}

void sub_1007FAEBC(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  id v9;
  void *v10;
  uint64_t KeyPath;
  char *v12;
  char *v13;
  uint64_t v14;
  id v15;

  v3 = objc_msgSend(a1, "interactiveCanvasController");
  v15 = objc_msgSend(v3, "commandController");

  if (!v15)
  {
    sub_100757E04(&_mh_execute_header, (uint64_t)"groupWPEditorActions(do:)", 25, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPShapeEditor+CRLWPTextInspecting.swift", 102, 2, 260, "invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"groupWPEditorActions(do:)", 25, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/CRLWPShapeEditor+CRLWPTextInspecting.swift", 102, 2u, 260, (uint64_t)"invalid nil found when unwrapping value", 39, 2u);
    return;
  }
  v4 = objc_msgSend(a1, "wpEditors", sub_1006A9664(0));
  v5 = type metadata accessor for CRLWPEditor(0);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v5);

  if (!((unint64_t)v6 >> 62))
  {
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v6);
    if (v7)
      goto LABEL_4;
LABEL_18:
    swift_bridgeObjectRelease_n(v6, 2);
    sub_1006A984C(0);

    return;
  }
  if (v6 < 0)
    v14 = v6;
  else
    v14 = v6 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v6);
  v7 = _CocoaArrayWrapper.endIndex.getter(v14);
  if (!v7)
    goto LABEL_18;
LABEL_4:
  if (v7 >= 1)
  {
    for (i = 0; i != v7; ++i)
    {
      if ((v6 & 0xC000000000000001) != 0)
        v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v6);
      else
        v9 = *(id *)(v6 + 8 * i + 32);
      v10 = v9;
      KeyPath = swift_getKeyPath(&unk_100F0E638);
      v12 = sub_10073138C();
      if (v12)
      {
        v13 = v12;
        sub_100DC1D9C(KeyPath, a2, *(_QWORD *)&v12[OBJC_IVAR____TtC8Freeform12CRLTextRange_range], *(_QWORD *)&v12[OBJC_IVAR____TtC8Freeform12CRLTextRange_range + 8]);

        swift_release(KeyPath);
      }
      else
      {
        sub_100757E04(&_mh_execute_header, (uint64_t)"setAttributeValue(_:value:)", 27, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Editor/CRLWPEditor.swift", 84, 2, 2930, "invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
        sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"setAttributeValue(_:value:)", 27, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLWP/Editor/CRLWPEditor.swift", 84, 2u, 2930, (uint64_t)"invalid nil found when unwrapping value", 39, 2u);

        swift_release(KeyPath);
      }
    }
    goto LABEL_18;
  }
  __break(1u);
}

uint64_t sub_1007FB1C8()
{
  return 32;
}

double sub_1007FB1D4(_QWORD *a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*a1).n128_u64[0];
  return result;
}

uint64_t sub_1007FB1DC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;

  v2 = *a1;
  *(_QWORD *)a2 = *a1;
  v3 = *(_OWORD *)(a1 + 1);
  *(_QWORD *)(a2 + 24) = a1[3];
  *(_OWORD *)(a2 + 8) = v3;
  return swift_retain(v2);
}

__n128 sub_1007FB204(__n128 *a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = a1[1].n128_u64[1];
  result = *a1;
  *(_QWORD *)(a2 + 24) = a1[1].n128_u64[0];
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1007FB228()
{
  return 32;
}

void sub_1007FB248(uint64_t a1@<X8>)
{
  sub_1007FA058((uint64_t)&unk_100F0E778, (uint64_t (*)(void))sub_10072E544, a1);
}

void sub_1007FB26C(uint64_t a1@<X8>)
{
  sub_1007FA058((uint64_t)&unk_100F0E638, (uint64_t (*)(void))sub_100731D30, a1);
}

id sub_1007FB2A0@<X0>(uint64_t a1@<X8>)
{
  id result;
  char v3;

  result = sub_10073286C();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3;
  return result;
}

id sub_1007FB480(uint64_t a1)
{
  unsigned __int8 *v1;
  objc_class *v3;
  id v4;
  id v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  objc_super v15;
  unsigned __int8 *v16;
  _QWORD v17[3];
  uint64_t v18;

  sub_1004F370C(a1, (uint64_t)v17);
  if (!v18)
  {
    sub_1004D28EC((uint64_t)v17);
    return 0;
  }
  v3 = (objc_class *)type metadata accessor for CRLGroupSelection();
  if ((swift_dynamicCast(&v16, v17, (char *)&type metadata for Any + 8, v3, 6) & 1) == 0)
    return 0;
  v4 = v16;
  if (v16[OBJC_IVAR____TtC8Freeform17CRLGroupSelection_hasSelectedItemsInNonGroupContainer] != v1[OBJC_IVAR____TtC8Freeform17CRLGroupSelection_hasSelectedItemsInNonGroupContainer])
  {

    return 0;
  }
  sub_1004F370C(a1, (uint64_t)v17);
  v7 = v18;
  if (v18)
  {
    v8 = sub_1004BB5A4(v17, v18);
    v9 = *(_QWORD *)(v7 - 8);
    v10 = __chkstk_darwin(v8);
    v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, __n128))(v9 + 16))(v12, v10);
    v13 = _bridgeAnythingToObjectiveC<A>(_:)(v12, v7);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v7);
    _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v17);
  }
  else
  {
    v13 = 0;
  }
  v15.receiver = v1;
  v15.super_class = v3;
  v5 = objc_msgSendSuper2(&v15, "isEqual:", v13);
  swift_unknownObjectRelease(v13);

  return v5;
}

double *sub_1007FB6B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double *result;
  uint64_t v24;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  void (*v27)(_BYTE *, _QWORD);
  uint64_t v28;
  double *v29;
  _BYTE v30[32];
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  double *v34;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8Freeform21CRLBoardItemSelection_boardItems);
  if ((v1 & 0xC000000000000001) == 0)
  {
LABEL_8:
    v4 = *(_QWORD *)(v1 + 16);
    swift_bridgeObjectRetain(v1);
    if (v4)
    {
      v34 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v4);
      v31 = sub_1005C461C(v1);
      v32 = v6;
      v33 = v7 & 1;
      goto LABEL_10;
    }
LABEL_21:
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  if (v1 < 0)
    v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8Freeform21CRLBoardItemSelection_boardItems);
  else
    v2 = v1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Freeform21CRLBoardItemSelection_boardItems));
  v3 = __CocoaSet.count.getter(v2);
  if (!v3)
    goto LABEL_21;
  v4 = v3;
  v34 = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(v3);
  v31 = __CocoaSet.startIndex.getter(v2);
  v32 = v5;
  v33 = 1;
  if (v4 < 0)
  {
    __break(1u);
    goto LABEL_8;
  }
LABEL_10:
  if (v1 < 0)
    v8 = v1;
  else
    v8 = v1 & 0xFFFFFFFFFFFFFF8;
  while (1)
  {
    while (1)
    {
      v14 = v31;
      v15 = v32;
      v16 = v33;
      sub_1005C3C98(v31, v32, v33, v1);
      v18 = v17;
      v19 = type metadata accessor for CRLGroupItem(0);
      v20 = swift_dynamicCastClassUnconditional(v18, v19, 0, 0, 0);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v20);
      v21 = *((_QWORD *)v34 + 2);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v21);
      v22 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v20);
      result = (double *)specialized ContiguousArray._endMutation()(v22);
      if ((v1 & 0xC000000000000001) != 0)
        break;
      v9 = sub_1005C3B08(v14, v15, v16, v1);
      v11 = v10;
      v13 = v12;
      sub_100503494(v14, v15, v16);
      v31 = v9;
      v32 = v11;
      v33 = v13 & 1;
      if (!--v4)
        goto LABEL_20;
    }
    if ((v16 & 1) == 0)
      break;
    v24 = __CocoaSet.Index.handleBitPattern.getter(v14, v15);
    if (v24)
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v24);
    else
      isUniquelyReferenced_nonNull_native = 1;
    v26 = sub_1004B804C(&qword_1013E56C0);
    v27 = (void (*)(_BYTE *, _QWORD))Set.Index._asCocoa.modify(v30, v26);
    __CocoaSet.formIndex(after:isUnique:)(v28, isUniquelyReferenced_nonNull_native, v8);
    v27(v30, 0);
    if (!--v4)
    {
LABEL_20:
      sub_100503494(v31, v32, v33);
      v29 = v34;
      swift_bridgeObjectRelease();
      return v29;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1007FB9E8()
{
  char *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;

  sub_10050312C();
  v1 = (void *)NSString.init(stringLiteral:)("<CRLGroupSelection: %p %tu %@>", 30, 2);
  v2 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  v3 = swift_allocObject(v2, 152, 7);
  *(_OWORD *)(v3 + 16) = xmmword_100EF5550;
  *(_QWORD *)(v3 + 56) = type metadata accessor for CRLGroupSelection();
  *(_QWORD *)(v3 + 64) = sub_1005034A0(&qword_1013F48C0, v4, (uint64_t (*)(uint64_t))type metadata accessor for CRLGroupSelection, (uint64_t)&protocol conformance descriptor for NSObject);
  *(_QWORD *)(v3 + 32) = v0;
  v5 = OBJC_IVAR____TtC8Freeform21CRLBoardItemSelection_boardItems;
  v6 = *(_QWORD *)&v0[OBJC_IVAR____TtC8Freeform21CRLBoardItemSelection_boardItems];
  if ((v6 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *(_QWORD *)&v0[OBJC_IVAR____TtC8Freeform21CRLBoardItemSelection_boardItems];
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    v8 = v0;
    swift_bridgeObjectRetain(v6);
    v9 = __CocoaSet.count.getter(v7);
    swift_bridgeObjectRelease();
    v6 = *(_QWORD *)&v0[v5];
  }
  else
  {
    v9 = *(_QWORD *)(v6 + 16);
    v10 = v0;
  }
  *(_QWORD *)(v3 + 96) = &type metadata for Int;
  *(_QWORD *)(v3 + 104) = &protocol witness table for Int;
  *(_QWORD *)(v3 + 72) = v9;
  type metadata accessor for CRLBoardItem(0);
  sub_1005034A0((unint64_t *)&qword_1013E4190, 255, type metadata accessor for CRLBoardItem, (uint64_t)&protocol conformance descriptor for NSObject);
  v11 = swift_bridgeObjectRetain(v6);
  v12 = Set.description.getter(v11);
  v14 = v13;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v3 + 136) = &type metadata for String;
  *(_QWORD *)(v3 + 144) = sub_1004CFC2C();
  *(_QWORD *)(v3 + 112) = v12;
  *(_QWORD *)(v3 + 120) = v14;
  v15 = (void *)NSString.init(format:_:)(v1, v3);

  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  return v16;
}

id sub_1007FBBC8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CRLGroupSelection();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CRLGroupSelection()
{
  return objc_opt_self(_TtC8Freeform17CRLGroupSelection);
}

void sub_1007FBC18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  double v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  _QWORD v35[5];
  unint64_t v36;

  v1 = a1;
  v36 = (unint64_t)_swiftEmptyArrayStorage;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = sub_1004B8930(0, (unint64_t *)&qword_1013E56B0, off_101229828);
    v5 = sub_10051FD9C((unint64_t *)&qword_1013E8770, (unint64_t *)&qword_1013E56B0, off_101229828);
    v6 = Set.Iterator.init(_cocoa:)(v35, v3, v4, v5);
    v1 = v35[0];
    v32 = v35[1];
    v8 = v35[2];
    v7 = v35[3];
    v9 = v35[4];
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v32 = a1 + 56;
    v8 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v9 = v12 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v7 = 0;
  }
  v13 = (unint64_t)(v8 + 64) >> 6;
  while (v1 < 0)
  {
    v17 = __CocoaSet.Iterator.next()(v6);
    if (!v17)
      goto LABEL_40;
    v18 = v17;
    v33 = v17;
    v19 = sub_1004B8930(0, (unint64_t *)&qword_1013E56B0, off_101229828);
    swift_unknownObjectRetain(v18);
    swift_dynamicCast(&v34, &v33, (char *)&type metadata for Swift.AnyObject + 8, v19, 7);
    v20 = v34;
    *(_QWORD *)&v21 = swift_unknownObjectRelease(v18).n128_u64[0];
    v16 = v7;
    v14 = v9;
    if (!v20)
      goto LABEL_40;
LABEL_36:
    v25 = objc_msgSend(v20, "info", v21);
    v26 = type metadata accessor for CRLBoardItem(0);
    v27 = swift_dynamicCastClass(v25, v26);

    if (v27)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v28);
      v30 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v29 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v30 >= v29 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
      v31 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v30, v27);
      v6 = (_QWORD *)specialized Array._endMutation()(v31);
    }
    else
    {
      swift_unknownObjectRelease(v25);
    }
    v7 = v16;
    v9 = v14;
  }
  if (v9)
  {
    v14 = (v9 - 1) & v9;
    v15 = __clz(__rbit64(v9)) | (v7 << 6);
    v16 = v7;
LABEL_35:
    v20 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v15);
    if (!v20)
      goto LABEL_40;
    goto LABEL_36;
  }
  v22 = v7 + 1;
  if (!__OFADD__(v7, 1))
  {
    if (v22 >= v13)
      goto LABEL_40;
    v23 = *(_QWORD *)(v32 + 8 * v22);
    v16 = v7 + 1;
    if (!v23)
    {
      v16 = v7 + 2;
      if (v7 + 2 >= v13)
        goto LABEL_40;
      v23 = *(_QWORD *)(v32 + 8 * v16);
      if (!v23)
      {
        v16 = v7 + 3;
        if (v7 + 3 >= v13)
          goto LABEL_40;
        v23 = *(_QWORD *)(v32 + 8 * v16);
        if (!v23)
        {
          v16 = v7 + 4;
          if (v7 + 4 >= v13)
            goto LABEL_40;
          v23 = *(_QWORD *)(v32 + 8 * v16);
          if (!v23)
          {
            v16 = v7 + 5;
            if (v7 + 5 >= v13)
              goto LABEL_40;
            v23 = *(_QWORD *)(v32 + 8 * v16);
            if (!v23)
            {
              v24 = v7 + 6;
              while (v13 != v24)
              {
                v23 = *(_QWORD *)(v32 + 8 * v24++);
                if (v23)
                {
                  v16 = v24 - 1;
                  goto LABEL_34;
                }
              }
LABEL_40:
              sub_1004D284C(v1);
              return;
            }
          }
        }
      }
    }
LABEL_34:
    v14 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v16 << 6);
    goto LABEL_35;
  }
  __break(1u);
}

int64x2_t sub_1007FBF68()
{
  int64x2_t result;

  result = vdupq_n_s64(0x4069000000000000uLL);
  xmmword_10147F870 = (__int128)result;
  return result;
}

id sub_1007FC008()
{
  char *v0;
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  id v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;

  objc_msgSend(v0, "currentPosition");
  v2 = v1;
  v4 = v3;
  sub_1007FC16C();
  v7 = sub_10006108C(v2, v4, v5, v6);
  v8 = objc_msgSend(objc_allocWithZone((Class)CRLBezierPath), "init");
  objc_msgSend(v0, "currentPosition");
  objc_msgSend(v8, "moveToPoint:");
  sub_1007FC16C();
  v10 = v9;
  v12 = v11;
  objc_msgSend(v0, "currentPosition");
  v13 = *(double *)&v0[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_increasedStepWhenInsertConnectionLine];
  v16 = sub_1000603B8(v14, v15, v10);
  v18 = sub_100060398(v16, v17);
  v20 = sub_1000603DC(v18, v19, v7 + v13);
  objc_msgSend(v8, "lineToPoint:", sub_1000603D0(v10, v12, v20));
  sub_1007FC16C();
  v22 = v21;
  v24 = v23;
  objc_msgSend(v0, "currentPosition");
  v27 = sub_1000603B8(v25, v26, v22);
  v29 = sub_100060398(v27, v28);
  v31 = sub_1000603DC(v29, v30, v7 + v13 + v13);
  objc_msgSend(v8, "lineToPoint:", sub_1000603D0(v22, v24, v31));
  return v8;
}

void sub_1007FC16C()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;

  v1 = objc_msgSend(v0, "rep");
  v2 = objc_msgSend(v1, "layout");

  v3 = objc_msgSend(v2, "pureGeometryInRoot");
  if (v3)
  {
    objc_msgSend(v3, "center");

    v4 = objc_msgSend(v0, "rep");
    v5 = objc_msgSend(v4, "layout");

    v6 = objc_opt_self(CRLImageLayout);
    v7 = (void *)swift_dynamicCastObjCClass(v5, v6);
    if (v7)
    {
      v8 = v7;
      if (objc_msgSend(v7, "maskEditMode") == (id)3)
      {
        v9 = objc_msgSend(v8, "imageGeometryInRoot");
        objc_msgSend(v9, "center");

      }
    }

  }
  else
  {
    __break(1u);
  }
}

double sub_1007FC2B8()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  objc_class *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  __n128 v19;
  void *v20;
  __n128 v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  void *v24;
  char *v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  double result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double *v34;
  _QWORD aBlock[5];
  uint64_t v36;
  objc_super v37;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v33 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v31 = *(_QWORD *)(v4 - 8);
  v32 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchTime(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v31 - v12;
  v14 = (objc_class *)type metadata accessor for CRLShapeConnectionLineKnobTracker();
  v37.receiver = v0;
  v37.super_class = v14;
  objc_msgSendSuper2(&v37, "beginMovingKnob");
  v15 = objc_msgSend(v0, "knob");
  v16 = type metadata accessor for CRLConnectionLineKnob();
  v17 = swift_dynamicCastClass(v15, v16);
  if (v17 && *(_BYTE *)(v17 + OBJC_IVAR____TtC8Freeform21CRLConnectionLineKnob_knobState) == 2)
    sub_100A17E34(3);

  v0[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_didAddLine] = 0;
  v18 = *(void **)&v0[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_connectionLineKnobTracker];
  *(_QWORD *)&v0[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_connectionLineKnobTracker] = 0;

  v0[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_shouldShowDuplicateItemPreview] = objc_msgSend((id)objc_opt_self(CRLAccessibility), "isVoiceOverOrSwitchControlEnabled") ^ 1;
  sub_1004B8930(0, (unint64_t *)&qword_1013DE090, OS_dispatch_queue_ptr);
  v20 = (void *)static OS_dispatch_queue.main.getter(v19);
  static DispatchTime.now()(v21);
  + infix(_:_:)(v10, 1.0);
  v22 = *(void (**)(char *, uint64_t))(v8 + 8);
  v22(v10, v7);
  v23 = swift_allocObject(&unk_101280858, 24, 7);
  *(_QWORD *)(v23 + 16) = v0;
  aBlock[4] = sub_100804010;
  v36 = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(_QWORD *)"";
  aBlock[2] = sub_1005D2FC0;
  aBlock[3] = &unk_101280870;
  v24 = _Block_copy(aBlock);
  v25 = v0;
  static DispatchQoS.unspecified.getter(v26);
  v34 = _swiftEmptyArrayStorage;
  v27 = sub_1004B7878((unint64_t *)&qword_1013E1D20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v28 = sub_1004B804C((uint64_t *)&unk_1013DFBF0);
  v29 = sub_100503E88();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v34, v28, v29, v1, v27);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v13, v6, v3, v24);
  _Block_release(v24);

  (*(void (**)(char *, uint64_t))(v33 + 8))(v3, v1);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v6, v32);
  v22(v13, v7);
  *(_QWORD *)&result = swift_release(v36).n128_u64[0];
  return result;
}

double sub_1007FC5F4(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  double result;
  uint64_t v11;

  v2 = sub_1004B804C(&qword_1013E01F0);
  __chkstk_darwin(v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  type metadata accessor for MainActor(0);
  v6 = a1;
  v7 = static MainActor.shared.getter(v6);
  v8 = (_QWORD *)swift_allocObject(&unk_1012808A8, 40, 7);
  v8[2] = v7;
  v8[3] = &protocol witness table for MainActor;
  v8[4] = v6;
  v9 = sub_100521B98((uint64_t)v4, (uint64_t)&unk_1013F4948, (uint64_t)v8);
  *(_QWORD *)&result = swift_release(v9).n128_u64[0];
  return result;
}

uint64_t sub_1007FC6D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[10] = a4;
  v5 = type metadata accessor for MainActor(0);
  v4[11] = v5;
  v4[12] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v4[13] = v6;
  v4[14] = v7;
  return swift_task_switch(sub_1007FC740, v6, v7);
}

uint64_t sub_1007FC740()
{
  uint64_t v0;
  __n128 v2;

  if (*(_BYTE *)(*(_QWORD *)(v0 + 80)
                + OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_shouldShowDuplicateItemPreview) == 1)
  {
    swift_unknownObjectWeakInit(v0 + 72);
    return swift_task_switch(sub_1007FC7B0, 0, 0);
  }
  else
  {
    v2 = swift_release(*(_QWORD *)(v0 + 96));
    return (*(uint64_t (**)(__n128))(v0 + 8))(v2);
  }
}

uint64_t sub_1007FC7B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v1 + 88);
  *(_QWORD *)(v1 + 120) = static MainActor.shared.getter(a1);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  return swift_task_switch(sub_1007FC810, v3, v4);
}

uint64_t sub_1007FC810()
{
  uint64_t v0;
  uint64_t Strong;
  void *v2;

  swift_release(*(_QWORD *)(v0 + 120));
  swift_beginAccess(v0 + 72, v0 + 48, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v0 + 72);
  if (Strong)
  {
    v2 = (void *)Strong;
    *(_OWORD *)(v0 + 16) = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
    sub_1007FDEAC();

    sub_1004CB800(v0 + 16, &qword_1013E0230);
  }
  swift_unknownObjectWeakDestroy(v0 + 72);
  return swift_task_switch(sub_1007FC8A8, *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112));
}

uint64_t sub_1007FC8A8()
{
  uint64_t v0;
  __n128 v1;

  v1 = swift_release(*(_QWORD *)(v0 + 96));
  return (*(uint64_t (**)(__n128))(v0 + 8))(v1);
}

void *sub_1007FC90C()
{
  char *v0;
  char *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  id v6;
  char *v7;
  id v8;
  void *v9;
  id v10;
  char *v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  id v40;
  void *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  id v45;
  uint64_t v46;
  _QWORD *v47;
  id v48;
  char *v49;
  id v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  id v54;
  uint64_t v55;
  void *v57;
  id v58;
  char v59[24];

  v1 = v0;
  v2 = sub_10080230C();
  if (!v2)
    return 0;
  v3 = (_QWORD *)v2;
  v4 = sub_10080230C();
  if (!v4)
  {

    return 0;
  }
  v5 = (_QWORD *)v4;
  v6 = objc_msgSend(v0, "icc");
  v7 = (char *)objc_msgSend(v6, "editingCoordinator");

  if (!v7)
  {

LABEL_17:
    return 0;
  }
  v8 = *(id *)&v7[OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_boardItemFactory];

  v9 = (void *)sub_100CF1B2C(v5);
  if (!v9)
  {

    return v9;
  }
  v10 = objc_msgSend(v1, "rep");
  v5 = objc_msgSend(v10, "getConnectionLineLayoutToCopyStyleForNewConnectionLine");

  sub_1007FED44(v5);
  v11 = &v1[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_referenceDistanceBetweenSourceAndDuplicatedItemCenters];
  *(_QWORD *)v11 = v12;
  v11[8] = 0;
  v13 = sub_100802444();
  v15 = v14;
  sub_1007FC16C();
  v18 = sub_10006108C(v13, v15, v16, v17);
  v19 = v18 + v18 + 150.0;
  if (!v11[8])
    v19 = *(double *)v11;
  v20 = v19 - v18;
  sub_1007FC16C();
  v22 = v21;
  v24 = v23;
  v25 = sub_100802444();
  v27 = sub_1000603B8(v25, v26, v22);
  v29 = sub_100060398(v27, v28);
  v31 = sub_1000603DC(v29, v30, v20);
  v32 = sub_1000603D0(v22, v24, v31);
  v34 = v33;
  v35 = sub_100802444();
  v37 = sub_100060A38(v35, v36, v32);
  v39 = v38;
  v40 = objc_msgSend(objc_allocWithZone((Class)CRLBezierPath), "init");
  objc_msgSend(v40, "moveToPoint:", sub_100802444());
  objc_msgSend(v40, "lineToPoint:", v37, v39);
  objc_msgSend(v40, "lineToPoint:", v32, v34);
  v41 = (void *)sub_1007FCE04((uint64_t)v40, v5);

  if (!v41)
  {

    goto LABEL_17;
  }
  v42 = OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_duplicatedConnectionLine;
  v43 = *(void **)&v1[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_duplicatedConnectionLine];
  *(_QWORD *)&v1[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_duplicatedConnectionLine] = v41;
  v58 = v41;

  v44 = *(void **)&v1[v42];
  if (!v44)
  {
    sub_100757E04(&_mh_execute_header, (uint64_t)"newDuplicateItemsAndConnectionLine()", 36, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLShapeConnectionLineKnobTracker.swift", 103, 2, 165, "invalid nil found when unwrapping value", 39, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"newDuplicateItemsAndConnectionLine()", 36, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLShapeConnectionLineKnobTracker.swift", 103, 2u, 165, (uint64_t)"invalid nil found when unwrapping value", 39, 2u);
LABEL_23:
    if (qword_1013DD6C8 != -1)
      swift_once(&qword_1013DD6C8, sub_100A00D28);
    swift_beginAccess(&static OS_os_log.crlError, v59, 0, 0);
    v54 = (id)static OS_os_log.crlError;
    v55 = static os_log_type_t.error.getter(v54);
    sub_100A06EBC((uint64_t)v54, &_mh_execute_header, v55, "Fail to create duplicated board items when long pressing the connector knob", 75, 2, (uint64_t)_swiftEmptyArrayStorage);

    return 0;
  }
  v45 = v44;
  v46 = sub_10080230C();
  if (!v46)
  {

    goto LABEL_23;
  }
  v47 = (_QWORD *)v46;
  v57 = v45;
  v48 = objc_msgSend(v1, "icc");
  v49 = (char *)objc_msgSend(v48, "editingCoordinator");

  if (!v49)
  {

LABEL_22:
    goto LABEL_23;
  }
  v50 = *(id *)&v49[OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_boardItemFactory];

  v51 = (_QWORD *)sub_100CF1B2C(v47);
  if (!v51)
  {

    goto LABEL_22;
  }
  (*(void (**)(void))((swift_isaMask & *v51) + 0x178))();
  sub_1007FD8FC(v51);

  v52 = v3;
  sub_100870894(v3);

  v53 = v51;
  sub_100870D00(v51);

  return v9;
}

uint64_t sub_1007FCE04(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  char *v15;
  id v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v5 = sub_1004B804C(&qword_1013E5380);
  *(_QWORD *)&v6 = __chkstk_darwin(v5).n128_u64[0];
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v9 = objc_msgSend(a2, "connectionType", v6);
    v10 = 18;
    if (v9 != (id)2)
      v10 = 19;
    if (v9 == (id)1)
      v11 = 2;
    else
      v11 = v10;
  }
  else
  {
    v11 = 19;
  }
  v12 = objc_msgSend(objc_allocWithZone((Class)CRLConnectionLinePathSource), "initWithBezierPath:", a1);
  if (!v12)
    return 0;
  v13 = v12;
  v14 = objc_msgSend(v2, "icc");
  v15 = (char *)objc_msgSend(v14, "editingCoordinator");

  if (!v15)
  {

    return 0;
  }
  v16 = *(id *)&v15[OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_boardItemFactory];

  v17 = type metadata accessor for AttributedString(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v8, 1, 1, v17);
  v18 = v13;
  v19 = sub_100CF16DC(v11, 0, v13, 1, 0, 0, 1, 0, 1u, (_QWORD *)1, (void *)1, (void *)1, (void *)1, (uint64_t)v8);

  sub_1004CB800((uint64_t)v8, &qword_1013E5380);
  v20 = type metadata accessor for CRLConnectionLineItem(0);
  v21 = swift_dynamicCastClass(v19, v20);
  if (v21)
    sub_10087167C(a2);
  else

  return v21;
}

id sub_1007FCFF8()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  char *v6;
  id v7;
  id v8;
  id v9;
  char *v10;
  char *v11;
  void *v12;
  void *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void (*v20)(__n128);
  char *v21;
  __n128 v22;
  id v23;
  id v24;
  Class isa;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t inited;
  uint64_t v30;
  _QWORD *v31;
  id v32;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  id v37;
  id v38;
  uint64_t v39;
  void *v40;
  id v41;
  id v42;
  id v43;
  Class v44;
  id v45;
  id v46;
  uint64_t v47;
  char v48[64];

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  *(_QWORD *)&v4 = __chkstk_darwin(v2).n128_u64[0];
  v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(v0, "icc", v4);
  v8 = objc_msgSend(v7, "board");

  if (!v8)
    return 0;
  v9 = objc_msgSend(v1, "icc");
  v10 = (char *)objc_msgSend(v9, "editingCoordinator");

  if (!v10)
  {

    return 0;
  }
  v46 = (id)v2;
  v11 = (char *)*(id *)&v10[OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_boardItemFactory];

  v14 = sub_1007FC90C();
  if (v14)
  {
    v15 = v12;
    v16 = v13;
    v40 = v1;
    v42 = v8;
    v45 = objc_msgSend(objc_allocWithZone((Class)CRLCanvasInfoGeometry), "initWithSize:", 1.0, 1.0);
    v44 = (Class)type metadata accessor for CRLGroupItem(0);
    v41 = v11;
    v17 = *(_QWORD *)&v11[OBJC_IVAR____TtC8Freeform19CRLBoardItemFactory_board];
    v18 = *(char **)(v17 + OBJC_IVAR____TtC8Freeform8CRLBoard_rootContainer);
    v19 = *(_QWORD *)&v18[OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData];
    v20 = *(void (**)(__n128))(*(_QWORD *)v19 + 256);
    v43 = *(id *)(v17 + OBJC_IVAR____TtC8Freeform8CRLBoard_store);
    v21 = v18;
    v22 = swift_retain(v19);
    v20(v22);
    swift_release(v19);

    v23 = objc_allocWithZone(v44);
    v24 = v45;
    isa = UUID._bridgeToObjectiveC()().super.isa;
    v26 = v43;
    v27 = objc_msgSend(v23, "initWithStore:parentContainerUUID:geometry:", v43, isa, v24);

    (*(void (**)(char *, id))(v3 + 8))(v6, v46);
    v28 = sub_1004B804C((uint64_t *)&unk_1013E4180);
    inited = swift_initStackObject(v28, v48);
    *(_OWORD *)(inited + 16) = xmmword_100EF7300;
    *(_QWORD *)(inited + 32) = v14;
    *(_QWORD *)(inited + 40) = v15;
    *(_QWORD *)(inited + 48) = v16;
    v47 = inited;
    specialized Array._endMutation()(inited);
    v30 = v47;
    v31 = v14;
    v46 = v15;
    v32 = v16;
    sub_10074B364(v30);
    swift_bridgeObjectRelease();
    v34 = v31;
    sub_100870894(v14);

    v35 = swift_allocObject(&unk_1012807E0, 32, 7);
    v36 = v40;
    *(_QWORD *)(v35 + 16) = v32;
    *(_QWORD *)(v35 + 24) = v36;
    v37 = v32;
    v38 = v36;
    sub_10077454C((uint64_t)sub_100803EE0, v35);

    swift_release(v35);
  }
  else
  {

    return 0;
  }
  return v27;
}

void sub_1007FD560(uint64_t a1, uint64_t a2, void *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t (*v6)(__n128);
  __n128 v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  CGFloat a;
  id v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  char *v19;
  uint64_t v20;
  id v21;
  char v22;
  double v23;
  CGFloat v24;
  double v25;
  CGFloat v26;
  CGPoint v27;
  id v28;
  void *v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  id v35;
  CGAffineTransform v36;
  CGAffineTransform v37;
  CGPoint v38;

  if (a1)
  {
    v4 = *(_QWORD **)(a2 + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData);
    v5 = (_QWORD *)*v4;
    if (swift_conformsToProtocol2(*v4, &protocol descriptor for CRLAbstractShapeItemDataProtocol))
    {
      v6 = (uint64_t (*)(__n128))v5[88];
      v7 = swift_retain(v4);
      v5 = (_QWORD *)v6(v7);
      swift_release(v4);
      v8 = objc_opt_self(CRLConnectionLinePathSource);
      v9 = (void *)swift_dynamicCastObjCClass(v5, v8);
      if (v9)
      {
        v10 = objc_msgSend(v9, "copy");

        _bridgeAnyObjectToAny(_:)(&v37, v10);
        swift_unknownObjectRelease(v10);
        v11 = sub_1004B8930(0, (unint64_t *)&unk_1013F62F0, off_101229878);
        swift_dynamicCast(&v36, &v37, (char *)&type metadata for Any + 8, v11, 7);
        a = v36.a;
        v13 = objc_msgSend(objc_allocWithZone((Class)CRLConnectionLineMagnet), "initWithType:normalizedPosition:", 1, 0.5, 0.5);
        objc_msgSend(*(id *)&a, "setHeadMagnet:", v13);

        v14 = sub_10080230C();
        if (v14)
        {
          v15 = (void *)v14;
          v16 = objc_msgSend(a3, "icc");
          v17 = objc_msgSend(v16, "layoutForInfo:", v15);

          if (v17)
          {
            v18 = objc_msgSend(a3, "knob");
            v19 = (char *)objc_msgSend(v18, "tag");

            if ((unint64_t)(v19 - 2) >= 7)
              v20 = 1;
            else
              v20 = qword_100F0E9A8[(_QWORD)(v19 - 2)];
            sub_100803A58((id)v20, v17);
            if ((v22 & 1) == 0)
              v20 = 1;
            objc_msgSend(v17, "getCardinalPositionFromType:", v20);
            v24 = v23;
            v26 = v25;
            objc_msgSend(v17, "pureTransformInRoot");
            CGAffineTransformInvert(&v36, &v37);
            v37 = v36;
            v38.x = v24;
            v38.y = v26;
            v27 = CGPointApplyAffineTransform(v38, &v37);
            v28 = objc_msgSend(v17, "pureGeometry");
            if (v28)
            {
              v29 = v28;
              objc_msgSend(v28, "size");

              v30 = sub_10005FDDC();
              v33 = sub_1000626B8(v27.x, v27.y, v30, v31, v32);
              v21 = objc_msgSend(objc_allocWithZone((Class)CRLConnectionLineMagnet), "initWithType:normalizedPosition:", v20, v33, v34);
              objc_msgSend(*(id *)&a, "setTailMagnet:", v21);

              goto LABEL_15;
            }
LABEL_19:
            __break(1u);
            return;
          }

        }
        v21 = objc_msgSend(objc_allocWithZone((Class)CRLConnectionLineMagnet), "initWithType:normalizedPosition:", 1, 0.5, 0.5);
        objc_msgSend(*(id *)&a, "setTailMagnet:", v21);
LABEL_15:

        v35 = *(id *)&a;
        sub_10092345C((uint64_t)v35);

        return;
      }
    }
    else
    {
      __break(1u);
    }

    __break(1u);
    goto LABEL_19;
  }
}

void sub_1007FD8FC(_QWORD *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  char **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(__n128);
  _QWORD *v14;
  __n128 v15;
  void *v16;
  uint64_t v17;
  uint64_t (*v18)(__n128);
  __n128 v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  id v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  id v31;
  double v32;
  double v33;
  double v34;
  double v35;
  void *v36;
  double v37;
  double v38;
  double v39;
  double v40;
  id v41;
  id v42;
  uint64_t v43;
  void *v44;
  void *v45;
  id v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  id v67;
  uint64_t v68;
  _QWORD *v69;
  id v70;
  _QWORD v71[4];

  v2 = v1;
  v4 = sub_10080230C();
  if (!v4)
    return;
  v69 = (_QWORD *)v4;
  v5 = objc_msgSend(v1, "icc");
  v6 = objc_msgSend(v5, "layoutForInfo:", v69);

  if (!v6)
  {

    return;
  }
  v7 = type metadata accessor for CRLWPShapeItem(0);
  v8 = swift_dynamicCastClass(v69, v7);
  v9 = &selRef_setAnchorPointForTexture_;
  if (!v8)
    goto LABEL_7;
  v10 = v8;
  v11 = OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData;
  v12 = *(_QWORD *)(v8 + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData);
  v13 = *(uint64_t (**)(__n128))(*(_QWORD *)v12 + 288);
  v14 = v69;
  v15 = swift_retain(v12);
  v16 = (void *)v13(v15);
  LODWORD(v12) = objc_msgSend(v16, "widthValid", swift_release(v12).n128_f64[0]);

  if ((_DWORD)v12)
  {
    v17 = *(_QWORD *)(v10 + v11);
    v18 = *(uint64_t (**)(__n128))(*(_QWORD *)v17 + 288);
    v19 = swift_retain(v17);
    v20 = (void *)v18(v19);
    LOBYTE(v17) = objc_msgSend(v20, "heightValid", swift_release(v17).n128_f64[0]);

    if ((v17 & 1) != 0)
    {

      v9 = &selRef_setAnchorPointForTexture_;
LABEL_7:
      v21 = objc_msgSend(v6, "pureGeometryInRoot");
      if (v21)
      {
        v22 = v21;
        v23 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v69) + 0xE0))();
        v24 = objc_msgSend(v23, "mutableCopy");

        _bridgeAnyObjectToAny(_:)(v71, v24);
        swift_unknownObjectRelease(v24);
        v25 = sub_1004B8930(0, (unint64_t *)&qword_1013E4C50, off_101229818);
        swift_dynamicCast(&v70, v71, (char *)&type metadata for Any + 8, v25, 7);
        v26 = v70;
        goto LABEL_12;
      }
      __break(1u);
LABEL_21:
      __break(1u);
      return;
    }
  }
  v27 = objc_msgSend(v6, "pureGeometryInRoot");
  if (!v27)
    goto LABEL_21;
  v22 = v27;
  v28 = objc_msgSend(objc_allocWithZone((Class)CRLCanvasInfoGeometry), "initWithLayoutGeometry:", v27);
  v29 = objc_msgSend(v28, "mutableCopy");

  _bridgeAnyObjectToAny(_:)(v71, v29);
  swift_unknownObjectRelease(v29);
  v30 = sub_1004B8930(0, (unint64_t *)&qword_1013E4C50, off_101229818);
  swift_dynamicCast(&v70, v71, (char *)&type metadata for Any + 8, v30, 7);
  v26 = v70;
  v31 = objc_msgSend(v26, "center");
  v33 = v32;
  v35 = v34;
  v36 = (void *)(*(uint64_t (**)(id))((swift_isaMask & *v14) + 0xE0))(v31);
  objc_msgSend(v26, "setWidthValid:", objc_msgSend(v36, "widthValid"));
  objc_msgSend(v26, "setHeightValid:", objc_msgSend(v36, "heightValid"));
  objc_msgSend(v36, "size");
  objc_msgSend(v26, "setSize:");
  v9 = &selRef_setAnchorPointForTexture_;
  objc_msgSend(v26, "setCenter:", v33, v35);

LABEL_12:
  objc_msgSend(v22, "center");
  v38 = v37;
  v40 = v39;
  v41 = objc_msgSend(v2, "rep");
  v42 = objc_msgSend(v41, "layout");

  v43 = objc_opt_self(CRLImageLayout);
  v44 = (void *)swift_dynamicCastObjCClass(v42, v43);
  if (v44)
  {
    v45 = v44;
    if (objc_msgSend(v44, "maskEditMode") == (id)3)
    {
      v46 = objc_msgSend(v45, "imageGeometryInRoot");
      objc_msgSend(v46, "center");
      v38 = v47;
      v40 = v48;

    }
  }

  v49 = sub_100802444();
  v51 = sub_10006108C(v49, v50, v38, v40);
  v52 = v51 + v51 + 150.0;
  if (v2[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_referenceDistanceBetweenSourceAndDuplicatedItemCenters
        + 8])
    v53 = v52;
  else
    v53 = *(double *)&v2[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_referenceDistanceBetweenSourceAndDuplicatedItemCenters];
  v54 = sub_100802444();
  v56 = sub_1000603B8(v54, v55, v38);
  v58 = sub_100060398(v56, v57);
  v60 = sub_1000603DC(v58, v59, v53);
  v61 = sub_1000603D0(v38, v40, v60);
  v63 = sub_1000603B8(v61, v62, v38);
  v65 = v64;
  objc_msgSend(v26, "center");
  objc_msgSend(v26, v9[90], sub_1000603D0(v63, v65, v66));
  v67 = objc_msgSend(v26, "copy");
  _bridgeAnyObjectToAny(_:)(v71, v67);
  swift_unknownObjectRelease(v67);
  v68 = sub_1004B8930(0, (unint64_t *)&qword_1013F1360, off_101229800);
  swift_dynamicCast(&v70, v71, (char *)&type metadata for Any + 8, v68, 7);
  (*(void (**)(id))((swift_isaMask & *a1) + 0xE8))(v70);

}

void sub_1007FDEAC()
{
  void *v0;
  void *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  id v6;
  void *v7;
  void *v8;
  char *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  CGFloat v15;
  Class isa;
  id v17;
  id v18;
  uint64_t v19;
  void *v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t (*v24)(__n128);
  __n128 v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t v29;
  CGFloat a;
  id v31;
  uint64_t v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  char *v37;
  uint64_t v38;
  char *v39;
  id v40;
  char v41;
  uint64_t v42;
  double v43;
  CGFloat v44;
  double v45;
  CGFloat v46;
  CGPoint v47;
  id v48;
  void *v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  char *v55;
  id v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(__n128);
  char *v63;
  __n128 v64;
  void *v65;
  uint64_t v66;
  uint64_t (*v67)(__n128);
  __n128 v68;
  void *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t (*v74)(__n128);
  __n128 v75;
  void *v76;
  id v77;
  uint64_t v78;
  uint64_t (*v79)(__n128);
  __n128 v80;
  void *v81;
  id v82;
  id v83;
  id v84;
  char *v85;
  uint64_t v86;
  double v87;
  char v88;
  double v89;
  double v90;
  char *v91;
  char *v92;
  id v93;
  char *v94;
  objc_class *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  void (*v99)(__n128);
  id v100;
  char *v101;
  __n128 v102;
  id v103;
  id v104;
  Class v105;
  id v106;
  uint64_t v107;
  CGFloat v108;
  void *v109;
  char *v110;
  uint64_t v111;
  id v112;
  id v113;
  id v114;
  void *v115;
  char *v116;
  void *v117;
  id v118;
  id v119;
  CGFloat v120;
  Class v121;
  id v122;
  id v123;
  uint64_t v124;
  char *v125;
  id v126;
  id v127;
  char *v128;
  id v129;
  void *v130;
  id v131;
  char *v132;
  id v133;
  id v134;
  void *v135;
  id v136;
  uint64_t v137;
  __int128 v138;
  uint64_t v139;
  char *v140;
  id v141;
  char *v142;
  char *v143;
  CGAffineTransform v144;
  CGAffineTransform v145[5];
  char v146[64];
  CGPoint v147;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(char **)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v124 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1007FCFF8();
  if (!v6)
    return;
  v10 = v8;
  v140 = v3;
  v141 = v7;
  v143 = v9;
  v11 = v6;
  v12 = objc_msgSend(v0, "icc");
  v13 = objc_msgSend(v12, "freehandDrawingToolkit");

  objc_msgSend(v13, "endDrawingModeIfNeeded");
  v14 = objc_msgSend(v1, "icc");
  v139 = sub_1004B804C((uint64_t *)&unk_1013E4180);
  v15 = COERCE_DOUBLE(swift_allocObject(v139, 40, 7));
  v138 = xmmword_100EEF400;
  *(_OWORD *)(*(_QWORD *)&v15 + 16) = xmmword_100EEF400;
  *(_QWORD *)(*(_QWORD *)&v15 + 32) = v11;
  v145[0].a = v15;
  specialized Array._endMutation()(*(_QWORD *)&v15);
  v137 = type metadata accessor for CRLBoardItem(0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v14, "setTemporaryAdditionalBoardItemsToDisplay:", isa, swift_bridgeObjectRelease().n128_f64[0]);

  v17 = objc_msgSend(v1, "icc");
  objc_msgSend(v17, "layoutIfNeededIncludingLayerTreeIfYouKnowWhatYouAreDoing");

  v18 = objc_msgSend(v1, "icc");
  v142 = (char *)objc_msgSend(v18, "layoutForInfo:", v143);

  if (!v142)
  {

    v39 = v143;
LABEL_12:

    return;
  }
  v19 = objc_opt_self(CRLConnectionLineAbstractLayout);
  v20 = (void *)swift_dynamicCastObjCClass(v142, v19);
  if (!v20)
  {

    v39 = v142;
    goto LABEL_12;
  }
  v21 = v20;
  objc_msgSend(v20, "setTemporaryConnectedFromInfo:", v141);
  objc_msgSend(v21, "setTemporaryConnectedToInfo:", v10);
  v135 = v21;
  objc_msgSend(v21, "setClipHead:", 1);
  v22 = *(_QWORD **)&v143[OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData];
  v23 = (_QWORD *)*v22;
  if (!swift_conformsToProtocol2(*v22, &protocol descriptor for CRLAbstractShapeItemDataProtocol))
  {
    __break(1u);
    goto LABEL_42;
  }
  v136 = v11;
  v24 = (uint64_t (*)(__n128))v23[88];
  v25 = swift_retain(v22);
  v23 = (_QWORD *)v24(v25);
  swift_release(v22);
  v26 = objc_opt_self(CRLConnectionLinePathSource);
  v27 = (void *)swift_dynamicCastObjCClass(v23, v26);
  if (!v27)
  {
LABEL_42:

    __break(1u);
    goto LABEL_43;
  }
  v28 = objc_msgSend(v27, "copy");

  _bridgeAnyObjectToAny(_:)(v145, v28);
  swift_unknownObjectRelease(v28);
  v29 = sub_1004B8930(0, (unint64_t *)&unk_1013F62F0, off_101229878);
  swift_dynamicCast(&v144, v145, (char *)&type metadata for Any + 8, v29, 7);
  a = v144.a;
  v31 = objc_msgSend(objc_allocWithZone((Class)CRLConnectionLineMagnet), "initWithType:normalizedPosition:", 1, 0.5, 0.5);
  objc_msgSend(*(id *)&a, "setHeadMagnet:", v31);

  v32 = sub_10080230C();
  if (v32)
  {
    v33 = (void *)v32;
    v34 = objc_msgSend(v1, "icc");
    v35 = objc_msgSend(v34, "layoutForInfo:", v33);

    if (v35)
    {
      v36 = objc_msgSend(v1, "knob");
      v37 = (char *)objc_msgSend(v36, "tag");

      if ((unint64_t)(v37 - 2) >= 7)
        v38 = 1;
      else
        v38 = qword_100F0E9A8[(_QWORD)(v37 - 2)];
      sub_100803A58((id)v38, v35);
      if ((v41 & 1) != 0)
        v42 = v38;
      else
        v42 = 1;
      objc_msgSend(v35, "getCardinalPositionFromType:", v42);
      v44 = v43;
      v46 = v45;
      objc_msgSend(v35, "pureTransformInRoot");
      CGAffineTransformInvert(&v144, v145);
      v145[0] = v144;
      v147.x = v44;
      v147.y = v46;
      v47 = CGPointApplyAffineTransform(v147, v145);
      v48 = objc_msgSend(v35, "pureGeometry");
      if (v48)
      {
        v49 = v48;
        objc_msgSend(v48, "size");

        v50 = sub_10005FDDC();
        v53 = sub_1000626B8(v47.x, v47.y, v50, v51, v52);
        v40 = objc_msgSend(objc_allocWithZone((Class)CRLConnectionLineMagnet), "initWithType:normalizedPosition:", v42, v53, v54);
        objc_msgSend(*(id *)&a, "setTailMagnet:", v40);

        goto LABEL_21;
      }
LABEL_43:
      __break(1u);
      return;
    }

  }
  v40 = objc_msgSend(objc_allocWithZone((Class)CRLConnectionLineMagnet), "initWithType:normalizedPosition:", 1, 0.5, 0.5);
  objc_msgSend(*(id *)&a, "setTailMagnet:", v40);
LABEL_21:

  v55 = v143;
  v56 = *(id *)&a;
  sub_10092345C((uint64_t)v56);
  v143 = v55;

  v57 = type metadata accessor for CRLWPShapeItem(0);
  v58 = v141;
  v59 = swift_dynamicCastClass(v141, v57);
  if (v59)
  {
    v132 = (char *)v2;
    v134 = v56;
    v60 = OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData;
    v61 = *(_QWORD *)(v59 + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData);
    v62 = *(uint64_t (**)(__n128))(*(_QWORD *)v61 + 288);
    v63 = (char *)v59;
    v133 = v58;
    v64 = swift_retain(v61);
    v65 = (void *)v62(v64);
    LODWORD(v61) = objc_msgSend(v65, "widthValid", swift_release(v61).n128_f64[0]);

    if ((_DWORD)v61)
    {
      v66 = *(_QWORD *)&v63[v60];
      v67 = *(uint64_t (**)(__n128))(*(_QWORD *)v66 + 288);
      v68 = swift_retain(v66);
      v69 = (void *)v67(v68);
      LOBYTE(v66) = objc_msgSend(v69, "heightValid", swift_release(v66).n128_f64[0]);

      if ((v66 & 1) != 0)
        goto LABEL_33;
    }
    v130 = v63;
    v70 = swift_dynamicCastClass(v10, v57);
    if (!v70)
    {
LABEL_33:
      v115 = v135;
      v77 = v136;
      v58 = v141;
      v117 = v133;
      v56 = v134;
      v116 = v143;
    }
    else
    {
      v71 = (char *)v70;
      v72 = OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData;
      v73 = *(_QWORD *)(v70 + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData);
      v74 = *(uint64_t (**)(__n128))(*(_QWORD *)v73 + 288);
      v131 = v10;
      v75 = swift_retain(v73);
      v76 = (void *)v74(v75);
      LODWORD(v73) = objc_msgSend(v76, "widthValid", swift_release(v73).n128_f64[0]);

      v77 = v136;
      if ((_DWORD)v73)
      {
        v78 = *(_QWORD *)&v71[v72];
        v79 = *(uint64_t (**)(__n128))(*(_QWORD *)v78 + 288);
        v80 = swift_retain(v78);
        v81 = (void *)v79(v80);
        LOBYTE(v78) = objc_msgSend(v81, "heightValid", swift_release(v78).n128_f64[0]);

        if ((v78 & 1) != 0)
          goto LABEL_34;
      }
      v82 = objc_msgSend(v1, "icc");
      v83 = objc_msgSend(v82, "board");

      if (!v83)
      {
LABEL_34:
        v58 = v141;
        v56 = v134;
        v115 = v135;
        v116 = v143;
        v117 = v133;
        v118 = v131;
      }
      else
      {
        v129 = v83;
        v84 = objc_msgSend(v1, "icc");
        v85 = (char *)objc_msgSend(v84, "editingCoordinator");

        v56 = v134;
        if (v85)
        {
          v128 = (char *)*(id *)&v85[OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_boardItemFactory];

          *(double *)&v86 = COERCE_DOUBLE(sub_1007FF2C0(v130, v71));
          if ((v88 & 1) == 0)
          {
            v89 = *(double *)&v86;
            v90 = v87;
            v91 = sub_1007FFB28(v71);
            if (v91)
            {
              v92 = v91;
              objc_msgSend(v91, "setCenter:", v89, v90);
              v93 = v131;
              v127 = v93;
              v94 = v92;
              sub_100776700(v94);
              v125 = v94;

              v126 = objc_msgSend(objc_allocWithZone((Class)CRLCanvasInfoGeometry), "initWithSize:", 1.0, 1.0);
              v95 = (objc_class *)type metadata accessor for CRLGroupItem(0);
              v96 = *(_QWORD *)&v128[OBJC_IVAR____TtC8Freeform19CRLBoardItemFactory_board];
              v97 = *(char **)(v96 + OBJC_IVAR____TtC8Freeform8CRLBoard_rootContainer);
              v98 = *(_QWORD *)&v97[OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData];
              v99 = *(void (**)(__n128))(*(_QWORD *)v98 + 256);
              v100 = *(id *)(v96 + OBJC_IVAR____TtC8Freeform8CRLBoard_store);
              v101 = v97;
              v102 = swift_retain(v98);
              v99(v102);
              swift_release(v98);

              v103 = objc_allocWithZone(v95);
              v104 = v126;
              v105 = UUID._bridgeToObjectiveC()().super.isa;
              v106 = objc_msgSend(v103, "initWithStore:parentContainerUUID:geometry:", v100, v105, v104);

              (*((void (**)(char *, char *))v140 + 1))(v5, v132);
              v107 = v139;
              v108 = COERCE_DOUBLE(swift_initStackObject(v139, v146));
              *(_OWORD *)(*(_QWORD *)&v108 + 16) = xmmword_100EF7300;
              v109 = v133;
              *(_QWORD *)(*(_QWORD *)&v108 + 32) = v133;
              *(_QWORD *)(*(_QWORD *)&v108 + 40) = v71;
              v132 = v71;
              v110 = v143;
              *(_QWORD *)(*(_QWORD *)&v108 + 48) = v143;
              v145[0].a = v108;
              specialized Array._endMutation()(*(_QWORD *)&v108);
              v111 = *(_QWORD *)&v145[0].a;
              v112 = v106;
              v140 = v110;
              v113 = v109;
              v114 = v127;
              v77 = v112;
              sub_10074B364(v111);
              swift_bridgeObjectRelease();

              v119 = objc_msgSend(v1, "icc");
              v120 = COERCE_DOUBLE(swift_allocObject(v107, 40, 7));
              *(_OWORD *)(*(_QWORD *)&v120 + 16) = v138;
              *(_QWORD *)(*(_QWORD *)&v120 + 32) = v77;
              v145[0].a = v120;
              specialized Array._endMutation()(*(_QWORD *)&v120);
              v121 = Array._bridgeToObjectiveC()().super.isa;
              objc_msgSend(v119, "setTemporaryAdditionalBoardItemsToDisplay:", v121, swift_bridgeObjectRelease().n128_f64[0]);

              v122 = objc_msgSend(v1, "icc");
              objc_msgSend(v122, "layoutIfNeededIncludingLayerTreeIfYouKnowWhatYouAreDoing");

              v56 = v134;
            }
          }

        }
        v58 = v141;
        v115 = v135;
        v116 = v143;
        v117 = v133;
        v118 = v131;

      }
    }

  }
  else
  {
    v115 = v135;
    v77 = v136;
    v116 = v143;
  }
  sub_100800EB0(v10, 0);
  type metadata accessor for CRLInsertionAnimationHelper();
  v123 = objc_msgSend(v1, "icc");
  sub_100753DB0(v77, v58, v10, v115, v123);

  *((_BYTE *)v1 + OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_isShowingDuplicateItemPreview) = 1;
}

void sub_1007FED44(void *a1)
{
  void *v1;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  id v9;
  id v10;
  id v11;
  double v12;
  double v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  double v25;
  double v26;
  uint64_t v27;
  void *v28;
  void *v29;
  id v30;
  void *v31;
  uint64_t v32;
  void *v33;
  id v34;
  void *v35;
  id v36;
  double v37;
  CGFloat v38;
  double v39;
  CGFloat v40;
  double v41;
  CGFloat v42;
  double v43;
  CGFloat v44;
  id v45;
  double v46;
  CGFloat v47;
  double v48;
  CGFloat v49;
  double v50;
  CGFloat v51;
  double v52;
  CGFloat v53;
  id v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  id v62;
  id v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  id v68;
  unsigned __int8 v69;
  id v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  CGRect v77;
  CGRect v78;

  v3 = sub_100802444();
  v5 = v4;
  sub_1007FC16C();
  v8 = sub_10006108C(v3, v5, v6, v7);
  v9 = objc_msgSend(v1, "rep");
  v10 = objc_msgSend(v9, "layout");

  v11 = objc_msgSend(v10, "stroke");
  if (!v11)
  {
    v13 = 0.0;
    v14 = sub_10080230C();
    if (v14)
      goto LABEL_3;
LABEL_8:
    if (!a1)
      return;
LABEL_9:
    v18 = a1;
    v19 = objc_msgSend(v1, "icc");
    v20 = objc_msgSend(v19, "repForLayout:", v18);

    if (v20)
    {
      v21 = objc_msgSend(v18, "connectedFrom");
      if (v21)
      {
        v22 = v21;
        v23 = objc_msgSend(v18, "connectedTo");
        if (v23)
        {
          v24 = v23;
          objc_msgSend(v18, "distanceBetweenConnectionPoints");
          v26 = v25;
          v27 = objc_opt_self(CRLShapeLayout);
          v28 = (void *)swift_dynamicCastObjCClass(v22, v27);
          if (!v28)
            goto LABEL_43;
          v29 = v28;
          v30 = objc_msgSend(v28, "path");
          if (v30)
          {
            v31 = v30;
            v32 = objc_opt_self(CRLShapeLayout);
            v33 = (void *)swift_dynamicCastObjCClass(v24, v32);
            if (v33 && (v34 = objc_msgSend(v33, "path")) != 0)
            {
              v35 = v34;
              if ((objc_msgSend(v31, "isRectangular") & 1) != 0
                || objc_msgSend(v31, "isCircular"))
              {
                if (objc_msgSend(v35, "isRectangular"))
                {

LABEL_42:
                  objc_msgSend(v18, "headPoint");
                  objc_msgSend(v20, "convertNaturalPointToUnscaledCanvas:");
                  v72 = v71;
                  v74 = v73;
                  objc_msgSend(v18, "tailPoint");
                  objc_msgSend(v20, "convertNaturalPointToUnscaledCanvas:");
                  v26 = v13 + v8 + v8 + sub_10006108C(v72, v74, v75, v76);
                  goto LABEL_43;
                }
                v69 = objc_msgSend(v35, "isCircular");

                if ((v69 & 1) != 0)
                  goto LABEL_42;
                goto LABEL_28;
              }

            }
            else
            {
              v35 = v31;
            }

          }
LABEL_28:
          v54 = objc_msgSend(v29, "pathSource");
          if (v54)
          {
            v55 = v54;
            v56 = objc_opt_self(CRLScalarPathSource);
            v57 = swift_dynamicCastObjCClass(v55, v56);
            if (v57
              && (v58 = (void *)v57,
                  v59 = objc_opt_self(CRLShapeLayout),
                  (v60 = swift_dynamicCastObjCClass(v24, v59)) != 0))
            {
              v61 = (void *)v60;
              v62 = v55;
              v63 = objc_msgSend(v61, "pathSource");
              if (v63)
              {
                v64 = v63;
                v65 = objc_opt_self(CRLScalarPathSource);
                v66 = swift_dynamicCastObjCClass(v64, v65);
                if (v66)
                {
                  v67 = (void *)v66;
                  v68 = v64;
                  if (objc_msgSend(v58, "type"))
                  {

                  }
                  else
                  {
                    v70 = objc_msgSend(v67, "type");

                    if (!v70)
                      goto LABEL_42;
                  }
                }
                else
                {

                }
              }
              else
              {

              }
            }
            else
            {

            }
          }
LABEL_43:

          sub_100803E94(v26, v8 + v8 + v13);
          return;
        }

        v18 = v20;
      }
      else
      {
        v22 = v20;
      }

      v18 = v22;
    }

    return;
  }
  objc_msgSend(v11, "width");
  v13 = v12;

  v14 = sub_10080230C();
  if (!v14)
    goto LABEL_8;
LABEL_3:
  v15 = (void *)v14;
  v16 = type metadata accessor for CRLGroupItem(0);
  if (swift_dynamicCastClass(v15, v16))
  {
    v17 = type metadata accessor for CRLFreehandDrawingItem(0);
    if (!swift_dynamicCastClass(v15, v17))
    {
      v36 = objc_msgSend(v1, "rep");
      objc_msgSend(v36, "boundsForStandardKnobs");
      v38 = v37;
      v40 = v39;
      v42 = v41;
      v44 = v43;

      v77.origin.x = v38;
      v77.origin.y = v40;
      v77.size.width = v42;
      v77.size.height = v44;
      CGRectGetWidth(v77);
      v45 = objc_msgSend(v1, "rep");
      objc_msgSend(v45, "boundsForStandardKnobs");
      v47 = v46;
      v49 = v48;
      v51 = v50;
      v53 = v52;

      v78.origin.x = v47;
      v78.origin.y = v49;
      v78.size.width = v51;
      v78.size.height = v53;
      CGRectGetHeight(v78);

      return;
    }
  }

  if (a1)
    goto LABEL_9;
}

uint64_t sub_1007FF2C0(void *a1, void *a2)
{
  char *v2;
  char *v3;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(__n128);
  __n128 v12;
  void *v13;
  uint64_t v14;
  uint64_t (*v15)(__n128);
  __n128 v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(__n128);
  __n128 v22;
  void *v23;
  uint64_t v24;
  uint64_t (*v25)(__n128);
  __n128 v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  void *v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  id v41;
  id v42;
  double v43;
  double Height;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  CGRect v56;
  CGRect v57;

  v3 = v2;
  v6 = type metadata accessor for CRLWPShapeItem(0);
  result = swift_dynamicCastClass(a1, v6);
  if (result)
  {
    v8 = result;
    v9 = OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData;
    v10 = *(_QWORD *)(result + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData);
    v11 = *(uint64_t (**)(__n128))(*(_QWORD *)v10 + 288);
    v12 = swift_retain(v10);
    v13 = (void *)v11(v12);
    LODWORD(v10) = objc_msgSend(v13, "widthValid", swift_release(v10).n128_f64[0]);

    if (!(_DWORD)v10
      || (v14 = *(_QWORD *)(v8 + v9),
          v15 = *(uint64_t (**)(__n128))(*(_QWORD *)v14 + 288),
          v16 = swift_retain(v14),
          v17 = (void *)v15(v16),
          LOBYTE(v14) = objc_msgSend(v17, "heightValid", swift_release(v14).n128_f64[0]),
          v17,
          (v14 & 1) == 0))
    {
      result = swift_dynamicCastClass(a2, v6);
      if (!result)
        return result;
      v18 = result;
      v19 = OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData;
      v20 = *(_QWORD *)(result + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData);
      v21 = *(uint64_t (**)(__n128))(*(_QWORD *)v20 + 288);
      v22 = swift_retain(v20);
      v23 = (void *)v21(v22);
      LODWORD(v20) = objc_msgSend(v23, "widthValid", swift_release(v20).n128_f64[0]);

      if (!(_DWORD)v20
        || (v24 = *(_QWORD *)(v18 + v19),
            v25 = *(uint64_t (**)(__n128))(*(_QWORD *)v24 + 288),
            v26 = swift_retain(v24),
            v27 = (void *)v25(v26),
            LOBYTE(v24) = objc_msgSend(v27, "heightValid", swift_release(v24).n128_f64[0]),
            v27,
            (v24 & 1) == 0))
      {
        v28 = objc_msgSend(v3, "icc");
        v29 = objc_msgSend(v28, "layoutForInfo:", a1);

        if (v29)
        {
          v30 = objc_msgSend(v3, "icc");
          v31 = objc_msgSend(v30, "layoutForInfo:", a2);

          if (v31)
          {
            v32 = objc_msgSend(v29, "pureGeometryInRoot");
            if (v32)
            {
              v33 = v32;
              objc_msgSend(v32, "center");
              v35 = v34;
              v37 = v36;

              v38 = sub_100802444();
              v40 = sub_10006108C(v35, v37, v38, v39);
              v41 = objc_msgSend(v3, "knob");
              v42 = objc_msgSend(v41, "tag");

              v43 = 0.0;
              switch((unint64_t)v42)
              {
                case 2uLL:
                case 8uLL:
                  objc_msgSend(v31, "boundsForStandardKnobs", 0.0);
                  Height = CGRectGetHeight(v56);
                  goto LABEL_16;
                case 4uLL:
                case 6uLL:
                  objc_msgSend(v31, "boundsForStandardKnobs", 0.0);
                  Height = CGRectGetWidth(v57);
LABEL_16:
                  v43 = Height * 0.5;
                  break;
                default:
                  break;
              }
              if ((v3[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_referenceDistanceBetweenSourceAndDuplicatedItemCenters
                     + 8] & 1) == 0)
              {
                v45 = v43
                    + *(double *)&v3[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_referenceDistanceBetweenSourceAndDuplicatedItemCenters]
                    - v40;
                v46 = sub_100802444();
                v48 = sub_1000603B8(v46, v47, v35);
                v50 = sub_100060398(v48, v49);
                v52 = sub_1000603DC(v50, v51, v45);
                v53 = sub_1000603D0(v35, v37, v52);
                v55 = sub_1007FF664(a1, a2, v53, v54);

                return *(_QWORD *)&v55;
              }
            }
            else
            {
              __break(1u);
            }
            __break(1u);
            JUMPOUT(0x1007FF648);
          }

        }
      }
    }
    return 0;
  }
  return result;
}

double sub_1007FF664(void *a1, void *a2, double a3, double a4)
{
  void *v4;
  void *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  char *v23;
  uint64_t v24;
  id v25;
  void *v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  uint64_t v36;
  uint64_t (*v37)(__n128);
  id v38;
  __n128 v39;
  void *v40;
  double Width;
  id v42;
  id v43;
  double v44;
  double v45;
  int v46;
  id v47;
  id v48;
  double v49;
  double v50;
  int v51;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  CGRect v62;

  v5 = v4;
  v10 = type metadata accessor for CRLWPShapeItem(0);
  v11 = swift_dynamicCastClass(a1, v10);
  if (v11)
  {
    v12 = v11;
    v13 = a1;
    v14 = objc_msgSend(v5, "icc");
    v15 = objc_msgSend(v14, "layoutForInfo:", v12);

    if (!v15)
    {
LABEL_21:

      return a3;
    }
    v16 = swift_dynamicCastClass(a2, v10);
    if (v16)
    {
      v17 = v16;
      v18 = a2;
      v19 = objc_msgSend(v5, "icc");
      v20 = objc_msgSend(v19, "layoutForInfo:", v18);

      if (v20)
      {
        v21 = *(void **)(v17 + OBJC_IVAR____TtC8Freeform14CRLWPShapeItem_textStorage);
        if (v21)
        {
          v22 = v21;
          v23 = (char *)objc_msgSend(v22, "paragraphStyleAtCharIndex:effectiveRange:", 0, 0);
          if (v23)
          {
            v24 = *(_QWORD *)&v23[OBJC_IVAR____TtC8Freeform19CRLWPParagraphStyle_alignment];

            v25 = objc_msgSend(v15, "pureGeometryInRoot");
            if (!v25)
            {
              __break(1u);
              JUMPOUT(0x1007FFAF0);
            }
            v26 = v25;
            objc_msgSend(v25, "center");
            v28 = v27;

            v29 = sub_100802444();
            v31 = sub_1000603B8(v29, v30, v28);
            v33 = sub_100060398(v31, v32);
            v35 = v34;
            v36 = *(_QWORD *)(v17 + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData);
            v37 = *(uint64_t (**)(__n128))(*(_QWORD *)v36 + 288);
            v38 = v18;
            v39 = swift_retain(v36);
            v40 = (void *)v37(v39);

            LOBYTE(v36) = objc_msgSend(v40, "widthValid", swift_release(v36).n128_f64[0]);
            if ((v36 & 1) == 0)
            {
              objc_msgSend(v20, "boundsForStandardKnobs");
              Width = CGRectGetWidth(v62);
              switch(v24)
              {
                case 3:
                  goto LABEL_36;
                case 1:
                  v47 = objc_msgSend(v5, "knob");
                  v48 = objc_msgSend(v47, "tag");

                  switch((unint64_t)v48)
                  {
                    case 2uLL:

                      v49 = v33;
                      v50 = v35;
                      v51 = 1;
                      goto LABEL_29;
                    case 4uLL:
LABEL_23:

                      v53 = Width * 0.5;
                      v54 = v33;
                      v55 = v35;
                      goto LABEL_27;
                    case 6uLL:
LABEL_24:

                      v56 = Width * 0.5;
                      v57 = v33;
                      v58 = v35;
                      goto LABEL_30;
                    case 8uLL:

                      v49 = v33;
                      v50 = v35;
                      v51 = 0;
LABEL_29:
                      v57 = sub_10006200C(v51, v49, v50);
                      v56 = Width * 0.5;
LABEL_30:
                      v61 = sub_1000603DC(v57, v58, v56);
                      v60 = sub_1000603D0(a3, a4, v61);
                      break;
                    default:
                      goto LABEL_20;
                  }
                  return v60;
                case 0:
LABEL_36:
                  v42 = objc_msgSend(v5, "knob");
                  v43 = objc_msgSend(v42, "tag");

                  switch((unint64_t)v43)
                  {
                    case 2uLL:

                      v44 = v33;
                      v45 = v35;
                      v46 = 1;
                      break;
                    case 4uLL:
                      goto LABEL_24;
                    case 6uLL:
                      goto LABEL_23;
                    case 8uLL:

                      v44 = v33;
                      v45 = v35;
                      v46 = 0;
                      break;
                    default:
                      goto LABEL_20;
                  }
                  v54 = sub_10006200C(v46, v44, v45);
                  v53 = Width * 0.5;
LABEL_27:
                  v59 = sub_1000603DC(v54, v55, v53);
                  return sub_1000603B8(a3, a4, v59);
              }
            }
LABEL_20:

            goto LABEL_21;
          }

        }
        else
        {

        }
      }
      else
      {

      }
    }
    else
    {

    }
  }
  return a3;
}

char *sub_1007FFB28(_QWORD *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(__n128);
  __n128 v10;
  void *v11;
  uint64_t v12;
  uint64_t (*v13)(__n128);
  __n128 v14;
  void *v15;
  id v16;
  id v17;
  char *result;
  char *v19;
  id v20;
  id v21;
  uint64_t v22;
  void *v23;
  char *v24;
  _QWORD v25[4];

  v2 = v1;
  v4 = type metadata accessor for CRLWPShapeItem(0);
  v5 = swift_dynamicCastClass(a1, v4);
  v6 = (char *)v5;
  if (!v5)
    return v6;
  v7 = OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData;
  v8 = *(_QWORD *)(v5 + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData);
  v9 = *(uint64_t (**)(__n128))(*(_QWORD *)v8 + 288);
  v10 = swift_retain(v8);
  v11 = (void *)v9(v10);
  LODWORD(v8) = objc_msgSend(v11, "widthValid", swift_release(v8).n128_f64[0]);

  if ((_DWORD)v8)
  {
    v12 = *(_QWORD *)&v6[v7];
    v13 = *(uint64_t (**)(__n128))(*(_QWORD *)v12 + 288);
    v14 = swift_retain(v12);
    v15 = (void *)v13(v14);
    LOBYTE(v12) = objc_msgSend(v15, "heightValid", swift_release(v12).n128_f64[0]);

    if ((v12 & 1) != 0)
      return 0;
  }
  v16 = objc_msgSend(v2, "icc");
  v17 = objc_msgSend(v16, "layoutForInfo:", a1);

  if (!v17)
    return 0;
  result = (char *)objc_msgSend(v17, "pureGeometryInRoot");
  if (result)
  {
    v19 = result;
    v20 = objc_msgSend(objc_allocWithZone((Class)CRLCanvasInfoGeometry), "initWithLayoutGeometry:", result);

    v21 = objc_msgSend(v20, "mutableCopy");
    _bridgeAnyObjectToAny(_:)(v25, v21);
    swift_unknownObjectRelease(v21);
    v22 = sub_1004B8930(0, (unint64_t *)&qword_1013E4C50, off_101229818);
    if ((swift_dynamicCast(&v24, v25, (char *)&type metadata for Any + 8, v22, 6) & 1) != 0)
    {
      v6 = v24;
      v23 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *a1) + 0xE0))();
      objc_msgSend(v6, "setWidthValid:", objc_msgSend(v23, "widthValid"));
      objc_msgSend(v6, "setHeightValid:", objc_msgSend(v23, "heightValid"));
      objc_msgSend(v23, "size");
      objc_msgSend(v6, "setSize:");

      return v6;
    }

    return 0;
  }
  __break(1u);
  return result;
}

void sub_1007FFDA0()
{
  double *v0;
  double *v1;
  id v2;
  id v3;
  id v4;
  id v5;
  char *v6;
  id v7;
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  CGFloat v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void *v26;
  uint64_t v27;
  CGFloat a;
  char *v29;
  uint64_t v30;
  Class isa;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  NSString v40;
  NSString v41;
  NSString v42;
  id v43;
  uint64_t v44;
  double *v45;
  double *v46;
  id v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  CKRecordID v59;
  Swift::String v60;
  uint64_t v61;
  id v62;
  id v63;
  uint64_t v64;
  CGFloat v65;
  char *v66;
  Class v67;
  char **v68;
  uint64_t (*v69)(__n128);
  __n128 v70;
  uint64_t v71;
  void *v72;
  id v73;
  uint64_t v74;
  CGFloat v75;
  id v76;
  id v77;
  id v78;
  char *v79;
  uint64_t v80;
  id v81;
  char v82;
  double v83;
  CGFloat v84;
  double v85;
  CGFloat v86;
  CGPoint v87;
  id v88;
  void *v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  id v95;
  char *v96;
  _BYTE *v97;
  id v98;
  id v99;
  id v100;
  id v101;
  id v102;
  id v103;
  uint64_t v104;
  void *v105;
  _BYTE *v106;
  _BYTE *v107;
  id v108;
  id v109;
  id v110;
  id v111;
  id v112;
  id v113;
  id v114;
  id v115;
  id v116;
  id v117;
  double v118;
  id v119;
  id v120;
  id v121;
  void *v122;
  id v123;
  uint64_t v124;
  void *v125;
  id v126;
  void *v127;
  id v128;
  id v129;
  void *v130;
  id v131;
  int v132;
  _QWORD *v133;
  id v134;
  _QWORD *v135;
  void *v136;
  id v137;
  id v138;
  char v139[40];
  char v140[24];
  CGAffineTransform v141;
  CGAffineTransform v142;
  CGPoint v143;

  v1 = v0;
  v2 = objc_msgSend(v0, "icc");
  v3 = objc_msgSend(v2, "freehandDrawingToolkit");

  objc_msgSend(v3, "endDrawingModeIfNeeded");
  v4 = objc_msgSend(v1, "rep");
  v138 = objc_msgSend(v4, "getConnectionLineLayoutToCopyStyleForNewConnectionLine");

  v5 = sub_1007FC008();
  v6 = (char *)sub_1007FCE04((uint64_t)v5, v138);

  if (!v6)
  {
    v26 = v138;
    goto LABEL_11;
  }
  v7 = objc_msgSend(v1, "currentPosition");
  v9 = v8;
  v11 = v10;
  v12 = NSNotFound.getter(v7);
  if ((v12 & 0x8000000000000000) == 0)
  {
    v137 = objc_msgSend((id)objc_opt_self(CRLInsertionContext), "dragInsertionContextWithPreferredCenter:required:fromDragToInsertController:insertFloating:targetZOrder:", 1, 0, 0, v12, v9, v11);
    v13 = sub_10080230C();
    if (v13)
    {
      v14 = (_QWORD *)v13;
      v15 = objc_msgSend(v1, "icc");
      v16 = objc_msgSend(v15, "canvasEditor");

      v135 = v14;
      if (!v16)
      {
        v27 = 0;
        goto LABEL_19;
      }
      v17 = objc_msgSend(v1, "icc");
      v18 = objc_msgSend(v17, "editorController");

      if (!v18)
      {
        swift_unknownObjectRelease(v16);
        v27 = 0;
        goto LABEL_19;
      }
      v19 = objc_msgSend(v18, "selectionPath");
      v20 = objc_msgSend(v16, "canvasEditorHelper");
      v21 = sub_1004B804C((uint64_t *)&unk_1013E4180);
      v22 = COERCE_DOUBLE(swift_initStackObject(v21, v139));
      *(_OWORD *)(*(_QWORD *)&v22 + 16) = xmmword_100EEF400;
      *(_QWORD *)(*(_QWORD *)&v22 + 32) = v6;
      v142.a = v22;
      specialized Array._endMutation()(*(_QWORD *)&v22);
      v23 = *(_QWORD *)&v142.a;
      if (*(_QWORD *)&v142.a >> 62)
      {
        if (v142.a < 0.0)
          a = v142.a;
        else
          *(_QWORD *)&a = *(_QWORD *)&v142.a & 0xFFFFFFFFFFFFFF8;
        v29 = v6;
        swift_bridgeObjectRetain(v23);
        v30 = _CocoaArrayWrapper.endIndex.getter(*(_QWORD *)&a);
        swift_bridgeObjectRelease();
        if (!v30)
          goto LABEL_18;
      }
      else
      {
        v24 = *(_QWORD *)((*(_QWORD *)&v142.a & 0xFFFFFFFFFFFFF8) + 0x10);
        v25 = v6;
        if (!v24)
        {
LABEL_18:
          swift_bridgeObjectRelease();
          type metadata accessor for CRLBoardItem(0);
          sub_1004B7878((unint64_t *)&qword_1013E4190, type metadata accessor for CRLBoardItem, (uint64_t)&protocol conformance descriptor for NSObject);
          isa = Set._bridgeToObjectiveC()().super.isa;
          v32 = objc_msgSend(v20, "selectionPathForInsertingBoardItems:byReplacingInfosInSelectionPath:preservingMultipleContainers:", isa, v19, 0, swift_bridgeObjectRelease().n128_f64[0]);

          v33 = objc_msgSend(v16, "selectionPathWithInfo:", 0);
          v27 = (uint64_t)objc_msgSend(objc_allocWithZone((Class)CRLCanvasCommandSelectionBehavior), "initWithForwardSelectionPath:reverseSelectionPath:selectionFlags:commitSelectionFlags:forwardSelectionFlags:reverseSelectionFlags:", v32, v33, 0, 0, 70, 0);
          swift_unknownObjectRelease(v16);

LABEL_19:
          v34 = objc_msgSend(v1, "icc");
          v35 = objc_msgSend(v34, "commandController");

          if (v35)
          {
            v36 = (id)v27;
            sub_1006A9664((void *)v27);

          }
          v37 = objc_msgSend(v1, "icc");
          v38 = objc_msgSend(v37, "commandController");

          if (v38)
          {
            v39 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
            v40 = String._bridgeToObjectiveC()();
            v41 = String._bridgeToObjectiveC()();
            v42 = String._bridgeToObjectiveC()();
            v43 = objc_msgSend(v39, "localizedStringForKey:value:table:", v40, v41, v42);

            v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
            v46 = v45;

            sub_1006A92B4(v44, v46);
          }
          v47 = objc_msgSend(v1, "icc");
          v48 = (char *)objc_msgSend(v47, "commandController");

          v136 = (void *)v27;
          if (!v48)
          {
LABEL_57:
            v62 = objc_msgSend(v1, "icc");
            v63 = objc_msgSend(v62, "canvasEditor");

            if (v63)
            {
              v64 = sub_1004B804C((uint64_t *)&unk_1013E4180);
              v65 = COERCE_DOUBLE(swift_allocObject(v64, 40, 7));
              *(_OWORD *)(*(_QWORD *)&v65 + 16) = xmmword_100EEF400;
              *(_QWORD *)(*(_QWORD *)&v65 + 32) = v6;
              v142.a = v65;
              specialized Array._endMutation()(*(_QWORD *)&v65);
              type metadata accessor for CRLBoardItem(0);
              v66 = v6;
              v67 = Array._bridgeToObjectiveC()().super.isa;
              objc_msgSend(v63, "insertBoardItems:withInsertionContext:postProcessBlock:", v67, v137, 0, swift_bridgeObjectRelease().n128_f64[0]);

              swift_unknownObjectRelease(v63);
            }
            v68 = *(char ***)&v6[OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData];
            v48 = *v68;
            if (swift_conformsToProtocol2(*v68, &protocol descriptor for CRLAbstractShapeItemDataProtocol))
            {
              v69 = (uint64_t (*)(__n128))*((_QWORD *)v48 + 88);
              v70 = swift_retain(v68);
              v48 = (char *)v69(v70);
              swift_release(v68);
              v71 = objc_opt_self(CRLConnectionLinePathSource);
              v72 = (void *)swift_dynamicCastObjCClass(v48, v71);
              if (v72)
              {
                v73 = objc_msgSend(v72, "copy");

                _bridgeAnyObjectToAny(_:)(&v142, v73);
                swift_unknownObjectRelease(v73);
                v74 = sub_1004B8930(0, (unint64_t *)&unk_1013F62F0, off_101229878);
                swift_dynamicCast(&v141, &v142, (char *)&type metadata for Any + 8, v74, 7);
                v75 = v141.a;
                v76 = objc_msgSend(v1, "icc");
                v77 = objc_msgSend(v76, "layoutForInfo:", v135);

                if (!v77)
                {
                  v81 = objc_msgSend(objc_allocWithZone((Class)CRLConnectionLineMagnet), "initWithType:normalizedPosition:", 1, 0.5, 0.5);
                  objc_msgSend(*(id *)&v75, "setTailMagnet:", v81);
                  goto LABEL_70;
                }
                v78 = objc_msgSend(v1, "knob");
                v79 = (char *)objc_msgSend(v78, "tag");

                if ((unint64_t)(v79 - 2) > 6)
                  v80 = 1;
                else
                  v80 = qword_100F0E9A8[(_QWORD)(v79 - 2)];
                sub_100803A58((id)v80, v77);
                if ((v82 & 1) == 0)
                  v80 = 1;
                objc_msgSend(v77, "getCardinalPositionFromType:", v80);
                v84 = v83;
                v86 = v85;
                objc_msgSend(v77, "pureTransformInRoot");
                CGAffineTransformInvert(&v141, &v142);
                v142 = v141;
                v143.x = v84;
                v143.y = v86;
                v87 = CGPointApplyAffineTransform(v143, &v142);
                v88 = objc_msgSend(v77, "pureGeometry");
                if (v88)
                {
                  v89 = v88;
                  objc_msgSend(v88, "size");

                  v90 = sub_10005FDDC();
                  v93 = sub_1000626B8(v87.x, v87.y, v90, v91, v92);
                  v81 = objc_msgSend(objc_allocWithZone((Class)CRLConnectionLineMagnet), "initWithType:normalizedPosition:", v80, v93, v94);
                  objc_msgSend(*(id *)&v75, "setTailMagnet:", v81);

LABEL_70:
                  v95 = objc_allocWithZone((Class)type metadata accessor for CRLCommandSetConnectionLineConnection(0));
                  v96 = v6;
                  v134 = *(id *)&v75;
                  v133 = v135;
                  v97 = sub_100A26410(v96, v135, 0, *(void **)&v75);
                  v98 = objc_msgSend(v1, "icc");
                  v99 = objc_msgSend(v98, "commandController");

                  if (v99)
                  {
                    sub_1006A5F54(v97, 0, 0, 4, 0);

                  }
                  v100 = objc_msgSend(v1, "icc");
                  objc_msgSend(v100, "layoutIfNeeded");

                  if (v138)
                  {
                    v101 = objc_msgSend(v1, "icc");
                    v102 = objc_msgSend(v101, "repForInfo:", v96);

                    if (v102)
                    {
                      v103 = objc_msgSend(v102, "layout");

                      if (v103)
                      {
                        v104 = objc_opt_self(CRLConnectionLineAbstractLayout);
                        v105 = (void *)swift_dynamicCastObjCClass(v103, v104);
                        if (v105)
                        {
                          v106 = objc_msgSend(v105, "commandForSettingConnectionType:", objc_msgSend(v138, "connectionType"));
                          if (v106)
                          {
                            v107 = v106;
                            v108 = objc_msgSend(v1, "icc");
                            v109 = objc_msgSend(v108, "commandController");

                            if (v109)
                            {
                              sub_1006A5F54(v107, 0, 0, 4, 0);

                            }
                            v110 = objc_msgSend(v1, "icc");
                            objc_msgSend(v110, "layoutIfNeeded");

                            v103 = v110;
                          }
                        }

                      }
                    }
                  }
                  v111 = objc_msgSend(v1, "icc");
                  v112 = objc_msgSend(v111, "repForInfo:", v96);

                  if (v112)
                  {
                    v113 = objc_msgSend(v1, "icc");
                    v114 = objc_msgSend(v113, "canvasEditor");

                    if (!v114
                      || (v115 = objc_msgSend(v114, "canvasEditorHelper"),
                          v116 = objc_msgSend(v112, "info", swift_unknownObjectRelease(v114).n128_f64[0]),
                          v117 = objc_msgSend(v115, "selectionPathWithInfo:", v116),
                          v115,
                          *(_QWORD *)&v118 = swift_unknownObjectRelease(v116).n128_u64[0],
                          !v117))
                    {

LABEL_95:
                      return;
                    }
                    v119 = objc_msgSend(v1, "icc", v118);
                    v120 = objc_msgSend(v119, "editorController");

                    objc_msgSend(v120, "setSelectionPath:", v117);
                    v121 = objc_msgSend(v112, "knobForTag:", 11);
                    if (v121)
                    {
                      v122 = v121;
                      v123 = objc_msgSend(objc_allocWithZone((Class)CRLConnectionLineKnobTracker), "initWithRep:knob:", v112, v121);
                      v124 = OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_connectionLineKnobTracker;
                      v125 = *(void **)((char *)v1
                                      + OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_connectionLineKnobTracker);
                      *(_QWORD *)((char *)v1
                                + OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_connectionLineKnobTracker) = v123;

                      v126 = *(id *)((char *)v1 + v124);
                      objc_msgSend(v126, "setSnapEnabled:", objc_msgSend(v126, "snapEnabled"));

                      v127 = *(void **)((char *)v1 + v124);
                      if (v127)
                      {
                        v128 = v127;
                        objc_msgSend(v128, "setDidDrag:", 1);

                      }
                    }
                    v129 = objc_msgSend(v112, "layout");
                    objc_msgSend(v129, "beginDynamicOperationWithRealTimeCommands:", 0);

                    v130 = *(void **)((char *)v1
                                    + OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_connectionLineKnobTracker);
                    if (v130)
                    {
                      v131 = v130;
                      objc_msgSend(v131, "beginMovingKnob");

                    }
                    else
                    {

                    }
                  }
                  else
                  {

                  }
                  goto LABEL_95;
                }
                goto LABEL_99;
              }
LABEL_98:

              __break(1u);
LABEL_99:
              __break(1u);
              goto LABEL_100;
            }
LABEL_97:
            __break(1u);
            goto LABEL_98;
          }
          v49 = (uint64_t)&v48[OBJC_IVAR____TtC8Freeform20CRLCommandController_openGroupDatas];
          swift_beginAccess(&v48[OBJC_IVAR____TtC8Freeform20CRLCommandController_openGroupDatas], v140, 0, 0);
          v50 = *(_QWORD *)v49;
          if (*(_QWORD *)v49 >> 62)
          {
            if (v50 < 0)
              v58 = *(_QWORD *)v49;
            else
              v58 = v50 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(*(_QWORD *)v49);
            v51 = _CocoaArrayWrapper.endIndex.getter(v58);
            if (v51)
            {
LABEL_26:
              v52 = v51 - 1;
              if (!__OFSUB__(v51, 1))
              {
                if ((v50 & 0xC000000000000001) == 0)
                {
                  if ((v52 & 0x8000000000000000) != 0)
                  {
                    __break(1u);
                  }
                  else if (v52 < *(_QWORD *)((v50 & 0xFFFFFFFFFFFFF8) + 0x10))
                  {
                    v51 = *(_QWORD *)(v50 + 8 * v52 + 32);
                    swift_retain(v51);
LABEL_31:
                    swift_bridgeObjectRelease();
                    v53 = *(unsigned __int8 *)(v51 + 16);
                    if (v53 == 3 || v53 == 2 || v53 == 1)
                    {

                      swift_release(v51);
                      goto LABEL_57;
                    }
                    v49 = *(_QWORD *)v49;
                    if (!((unint64_t)v49 >> 62))
                    {
                      v54 = *(_QWORD *)((v49 & 0xFFFFFFFFFFFFF8) + 0x10);
                      swift_bridgeObjectRetain_n(v49, 2);
                      if (v54)
                      {
LABEL_37:
                        if (v54 < 1)
                        {
                          __break(1u);
                          goto LABEL_97;
                        }
                        v55 = 0;
                        do
                        {
                          if ((v49 & 0xC000000000000001) != 0)
                          {
                            v56 = specialized _ArrayBuffer._getElementSlowPath(_:)(v55, v49);
                          }
                          else
                          {
                            v56 = *(_QWORD *)(v49 + 8 * v55 + 32);
                            swift_retain(v56);
                          }
                          ++v55;
                          v57 = *(id *)(v56 + 24);
                          sub_1006A72F4(v57, 0);
                          swift_release(v56);

                        }
                        while (v54 != v55);
                      }
LABEL_56:
                      swift_bridgeObjectRelease_n(v49, 2);
                      *(_BYTE *)(v51 + 16) = 1;

                      swift_release(v51);
                      v27 = (uint64_t)v136;
                      goto LABEL_57;
                    }
LABEL_52:
                    if (v49 < 0)
                      v61 = v49;
                    else
                      v61 = v49 & 0xFFFFFFFFFFFFFF8;
                    swift_bridgeObjectRetain_n(v49, 2);
                    v54 = _CocoaArrayWrapper.endIndex.getter(v61);
                    if (v54)
                      goto LABEL_37;
                    goto LABEL_56;
                  }
                  __break(1u);
                  goto LABEL_52;
                }
LABEL_49:
                v51 = specialized _ArrayBuffer._getElementSlowPath(_:)(v52, v50);
                goto LABEL_31;
              }
LABEL_48:
              __break(1u);
              goto LABEL_49;
            }
          }
          else
          {
            v51 = *(_QWORD *)((v50 & 0xFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain(*(_QWORD *)v49);
            if (v51)
              goto LABEL_26;
          }
          swift_bridgeObjectRelease();
          v1 = _swiftEmptyArrayStorage;
          v27 = 2;
          v48 = "enableProgressiveEnqueuingInCurrentGroup() called without a group being open.";
          v6 = "/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCommands/CRLCommandController.swift";
          sub_100757E04(&_mh_execute_header, (uint64_t)"enableProgressiveEnqueuingInCurrentGroup()", 42, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCommands/CRLCommandController.swift", 92, 2, 680, "enableProgressiveEnqueuingInCurrentGroup() called without a group being open.", 77, 2u, (uint64_t)_swiftEmptyArrayStorage);
          sub_100518FC0((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"enableProgressiveEnqueuingInCurrentGroup() called without a group being open.");
          sub_100519194((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"enableProgressiveEnqueuingInCurrentGroup()", 42, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCommands/CRLCommandController.swift", 92, 2u, 680, (uint64_t)"enableProgressiveEnqueuingInCurrentGroup() called without a group being open.", 77, 2u);
          SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v59, v60);
          v52 = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Freeform/CRLAssert.swift", 24, 2, 348, 0);
          __break(1u);
          goto LABEL_48;
        }
      }
      sub_1004B5FB0(v23);
      goto LABEL_18;
    }

    v26 = v137;
LABEL_11:

    return;
  }
LABEL_100:
  LOBYTE(v132) = 2;
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, v132, 3451, 0);
  __break(1u);
}

double sub_100800EB0(void *a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  id v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  double *v21;
  id v22;
  void *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double result;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  id v48;
  _BYTE v49[24];
  _BYTE v50[24];

  v3 = v2;
  v6 = type metadata accessor for CRLConnectionLineCRDTData(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1004B804C((uint64_t *)&unk_1013E1A50);
  __chkstk_darwin(v9);
  v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v46 - v13;
  v15 = type metadata accessor for CRLGroupItem(0);
  if (!swift_dynamicCastClass(a1, v15))
  {
    v27 = type metadata accessor for CRLConnectionLineItem(0);
    v28 = swift_dynamicCastClass(a1, v27);
    if (!v28)
      return result;
    v30 = v28;
    v47 = a1;
    v31 = objc_msgSend(v3, "icc");
    v48 = objc_msgSend(v31, "layoutForInfo:", v30);

    if (v48)
    {
      v32 = objc_opt_self(CRLConnectionLineAbstractLayout);
      v33 = swift_dynamicCastObjCClass(v48, v32);
      if (v33)
      {
        if (a2)
        {
          v34 = (void *)v33;
          v35 = OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData;
          v36 = *(_QWORD *)(v30 + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData);
          if (*(_UNKNOWN ****)v36 != &off_1013F2808)
            v36 = 0;
          v37 = v36 + *(_QWORD *)(*(_QWORD *)v36 + 752);
          swift_beginAccess(v37, v50, 0, 0);
          sub_1006BDEC8(v37, (uint64_t)v8);
          v38 = sub_1004B804C(&qword_1013EC6D0);
          CRRegister.wrappedValue.getter(v38);
          sub_1006BDF0C((uint64_t)v8);
          v39 = *(_QWORD *)(v30 + v35);
          if (*(_UNKNOWN ****)v39 != &off_1013F2808)
            v39 = 0;
          v40 = v39 + *(_QWORD *)(*(_QWORD *)v39 + 752);
          swift_beginAccess(v40, v49, 0, 0);
          sub_1006BDEC8(v40, (uint64_t)v8);
          CRRegister.wrappedValue.getter(v38);
          v41 = sub_1006BDF0C((uint64_t)v8);
          __chkstk_darwin(v41);
          *(&v46 - 2) = (uint64_t)v14;
          v42 = sub_100C9D0C0((uint64_t (*)(id *))sub_1008040B0, (uint64_t)(&v46 - 4), a2);
          objc_msgSend(v34, "setTemporaryConnectedFromInfo:", v42);

          __chkstk_darwin(v43);
          *(&v46 - 2) = (uint64_t)v11;
          v44 = sub_100C9D0C0((uint64_t (*)(id *))sub_100803E78, (uint64_t)(&v46 - 4), a2);
          objc_msgSend(v34, "setTemporaryConnectedToInfo:", v44);

          sub_1004CB800((uint64_t)v11, (uint64_t *)&unk_1013E1A50);
          sub_1004CB800((uint64_t)v14, (uint64_t *)&unk_1013E1A50);
        }
        else
        {

        }
        return result;
      }

    }
    return result;
  }
  v16 = a1;
  sub_1004E36C0();
  v18 = v17;
  if (v17 >> 62)
    goto LABEL_32;
  for (i = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10); i; i = _CocoaArrayWrapper.endIndex.getter(v45))
  {
    v48 = v16;
    v20 = 4;
    while (1)
    {
      v22 = (v18 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v20 - 4, v18)
          : *(id *)(v18 + 8 * v20);
      v23 = v22;
      v16 = (id)(v20 - 3);
      if (__OFADD__(v20 - 4, 1))
        break;
      v24 = (char *)objc_msgSend(v22, "containingGroup");
      if (v24)
      {
        v25 = v24;
        v26 = OBJC_IVAR____TtC8Freeform16CRLContainerItem__cachedOrderedItems;
        v21 = *(double **)&v24[OBJC_IVAR____TtC8Freeform16CRLContainerItem__cachedOrderedItems];
        if (!v21)
        {
          sub_100740DA4();
          v21 = *(double **)&v25[v26];
        }
        swift_bridgeObjectRetain(v21);

        if (!v21)
          v21 = _swiftEmptyArrayStorage;
      }
      else
      {
        v21 = 0;
      }
      sub_100800EB0(v23, v21);

      swift_bridgeObjectRelease();
      ++v20;
      if (v16 == (id)i)
      {

        goto LABEL_37;
      }
    }
    __break(1u);
LABEL_32:
    if (v18 < 0)
      v45 = v18;
    else
      v45 = v18 & 0xFFFFFFFFFFFFFF8;
  }

LABEL_37:
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t sub_100801358(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);
  int v19;
  uint64_t *v20;
  char v21;
  char *v22;
  void (*v23)(char *, uint64_t);
  uint64_t v25;
  char *v26;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v26 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1004B804C((uint64_t *)&unk_1013F62D0);
  __chkstk_darwin(v7);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1004B804C((uint64_t *)&unk_1013E1A50);
  __chkstk_darwin(v10);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v25 - v15;
  (*(void (**)(__n128))((swift_isaMask & **a1) + 0x88))(v14);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v16, 0, 1, v4);
  v17 = (uint64_t)&v9[*(int *)(v7 + 48)];
  sub_1006950CC((uint64_t)v16, (uint64_t)v9);
  sub_1006950CC(a2, v17);
  v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v18((uint64_t)v9, 1, v4) == 1)
  {
    sub_1004CB800((uint64_t)v16, (uint64_t *)&unk_1013E1A50);
    v19 = v18(v17, 1, v4);
    if (v19 == 1)
      v20 = (uint64_t *)&unk_1013E1A50;
    else
      v20 = (uint64_t *)&unk_1013F62D0;
    if (v19 == 1)
      v21 = -1;
    else
      v21 = 0;
  }
  else
  {
    sub_1006950CC((uint64_t)v9, (uint64_t)v12);
    if (v18(v17, 1, v4) == 1)
    {
      sub_1004CB800((uint64_t)v16, (uint64_t *)&unk_1013E1A50);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v12, v4);
      v21 = 0;
      v20 = (uint64_t *)&unk_1013F62D0;
    }
    else
    {
      v22 = v26;
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v26, v17, v4);
      sub_1004B7878((unint64_t *)&qword_1013E4880, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v21 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v22);
      v23 = *(void (**)(char *, uint64_t))(v5 + 8);
      v23(v22, v4);
      v20 = (uint64_t *)&unk_1013E1A50;
      sub_1004CB800((uint64_t)v16, (uint64_t *)&unk_1013E1A50);
      v23(v12, v4);
    }
  }
  sub_1004CB800((uint64_t)v9, v20);
  return v21 & 1;
}

void sub_100801620()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  uint64_t v21;
  void *v22;
  id v23;
  void *v24;
  objc_class *v25;
  uint64_t v26;
  void *v27;
  id v28;
  id v29;
  uint64_t v30;
  void *v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t ObjCClassFromMetadata;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  id v44;
  id v45;
  uint64_t v46;
  void *v47;
  void *v48;
  uint64_t v49;
  double v50;
  CGFloat v51;
  double v52;
  CGFloat v53;
  id v54;
  void *v55;
  id v56;
  CGPoint v57;
  id v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  id v65;
  double v66;
  double v67;
  double v68;
  CGFloat v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  id v77;
  __n128 v78;
  char *v79;
  __n128 v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  char *v84;
  CGFloat v85;
  void *v86;
  __n128 v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  uint64_t v93;
  void *v94;
  __n128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  id v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  _QWORD *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  double *v112;
  CGAffineTransform aBlock;
  objc_super v114;
  CGPoint v115;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v96 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v109 = *(_QWORD *)(v6 - 8);
  v110 = v6;
  __chkstk_darwin(v6);
  v108 = (char *)&v96 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = (_QWORD *)type metadata accessor for DispatchTimeInterval(0);
  v105 = *(v106 - 1);
  __chkstk_darwin(v106);
  v104 = (_QWORD *)((char *)&v96 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v111 = type metadata accessor for DispatchTime(0);
  v103 = *(_QWORD *)(v111 - 8);
  __chkstk_darwin(v111);
  v102 = (char *)&v96 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v11 = __chkstk_darwin(v10).n128_u64[0];
  v107 = (char *)&v96 - v12;
  v13 = 0;
  v0[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_shouldShowDuplicateItemPreview] = 0;
  v14 = OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_didAddLine;
  if (v0[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_didAddLine] != 1)
    goto LABEL_12;
  v15 = OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_connectionLineKnobTracker;
  v16 = *(void **)&v0[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_connectionLineKnobTracker];
  if (!v16)
  {
    v13 = 0;
    goto LABEL_12;
  }
  v101 = v5;
  v17 = v3;
  v18 = v2;
  v19 = objc_msgSend(v16, "rep", v11);
  v20 = objc_msgSend(v19, "layout");

  if (!v20)
    goto LABEL_8;
  v21 = objc_opt_self(CRLConnectionLineAbstractLayout);
  v22 = (void *)swift_dynamicCastObjCClass(v20, v21);
  if (!v22)
  {

LABEL_8:
    v13 = 0;
    goto LABEL_9;
  }
  v23 = objc_msgSend(v22, "connectedTo");

  v13 = v23 != 0;
LABEL_9:
  v2 = v18;
  v24 = *(void **)&v1[v15];
  v3 = v17;
  if (v24)
    objc_msgSend(v24, "endMovingKnob");
  v5 = v101;
LABEL_12:
  v25 = (objc_class *)type metadata accessor for CRLShapeConnectionLineKnobTracker();
  v114.receiver = v1;
  v114.super_class = v25;
  objc_msgSendSuper2(&v114, "endMovingKnob");
  if (v1[v14] != 1)
    goto LABEL_39;
  v26 = OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_connectionLineKnobTracker;
  v27 = *(void **)&v1[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_connectionLineKnobTracker];
  if (v27)
  {
    v28 = objc_msgSend(v27, "rep");
    v29 = objc_msgSend(v28, "layout");

    if (v29)
    {
      v30 = objc_opt_self(CRLConnectionLineAbstractLayout);
      v31 = (void *)swift_dynamicCastObjCClass(v29, v30);
      if (!v31)
      {

        return;
      }
      v100 = v2;
      objc_msgSend(v31, "endDynamicOperation");
      v32 = objc_msgSend(v1, "icc");
      v33 = objc_msgSend(v32, "commandController");

      if (v33)
      {
        sub_1006A984C(0);

      }
      if (!v13)
      {
        v34 = objc_msgSend(v1, "icc");
        v35 = objc_msgSend(v34, "editorController");

        if (v35)
        {
          v36 = sub_1004B8930(0, (unint64_t *)&unk_101401450, off_101229858);
          if (v36)
            ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v36, v37);
          else
            ObjCClassFromMetadata = 0;
          v39 = objc_msgSend(v35, "mostSpecificCurrentEditorOfClass:", ObjCClassFromMetadata);
          v40 = objc_opt_self(CRLConnectionLineEditor);
          v41 = swift_dynamicCastObjCClass(v39, v40);
          if (v41)
          {
            v42 = v41;

            v43 = *(void **)&v1[v26];
            if (v43)
            {
              v44 = objc_msgSend(v43, "rep");
              v45 = objc_msgSend(v44, "layout");

              if (v45)
              {
                v46 = objc_opt_self(CRLConnectionLineAbstractLayout);
                v47 = (void *)swift_dynamicCastObjCClass(v45, v46);
                if (v47)
                {
                  v48 = v47;
                  v49 = v42;
                  objc_msgSend(v47, "unclippedHeadPoint");
                  v51 = v50;
                  v53 = v52;
                  v54 = objc_msgSend(v48, "pureGeometryInRoot");
                  if (!v54)
                  {
                    __break(1u);
                    return;
                  }
                  v55 = v54;
                  v56 = v39;
                  v99 = v29;
                  v101 = v5;
                  objc_msgSend(v54, "transform");
                  v98 = *(_OWORD *)&aBlock.a;
                  v97 = *(_OWORD *)&aBlock.c;
                  v96 = *(_OWORD *)&aBlock.tx;

                  *(_OWORD *)&aBlock.a = v98;
                  *(_OWORD *)&aBlock.c = v97;
                  *(_OWORD *)&aBlock.tx = v96;
                  v115.x = v51;
                  v115.y = v53;
                  v57 = CGPointApplyAffineTransform(v115, &aBlock);

                  v58 = objc_msgSend(v1, "icc");
                  objc_msgSend(v58, "visibleBoundsRectUsingSizeOfEnclosingScrollView");
                  v60 = v59;
                  v62 = v61;

                  v63 = v60 * 0.5;
                  if (qword_1013DD240 != -1)
                    swift_once(&qword_1013DD240, sub_1007FBF68);
                  if (*(double *)&xmmword_10147F870 < v63)
                    v63 = *(double *)&xmmword_10147F870;
                  if (*((double *)&xmmword_10147F870 + 1) >= v62 * 0.5)
                    v64 = v62 * 0.5;
                  else
                    v64 = *((double *)&xmmword_10147F870 + 1);
                  v65 = objc_msgSend(v1, "icc");
                  objc_msgSend(v65, "viewScale");
                  v67 = v66;

                  v68 = sub_1000603DC(v63, v64, 1.0 / v67);
                  v70 = sub_1000616BC(0.0, 0.0, v68, v69, v57.x, v57.y, 0.0, 0.0);
                  v72 = v71;
                  v74 = v73;
                  v76 = v75;
                  v77 = objc_msgSend(v1, "icc");
                  objc_msgSend(v77, "scrollRectToVisible:scrollOptions:", 0, v70, v72, v74, v76);

                  sub_1004B8930(0, (unint64_t *)&qword_1013DE090, OS_dispatch_queue_ptr);
                  *(_QWORD *)&v98 = static OS_dispatch_queue.main.getter(v78);
                  v79 = v102;
                  static DispatchTime.now()(v80);
                  v81 = v104;
                  *v104 = 50;
                  v82 = v105;
                  v83 = v106;
                  (*(void (**)(_QWORD *, _QWORD, _QWORD *))(v105 + 104))(v81, enum case for DispatchTimeInterval.milliseconds(_:), v106);
                  v84 = v107;
                  + infix(_:_:)(v79, v81);
                  (*(void (**)(_QWORD *, _QWORD *))(v82 + 8))(v81, v83);
                  v106 = *(_QWORD **)(v103 + 8);
                  ((void (*)(char *, uint64_t))v106)(v79, v111);
                  v85 = COERCE_DOUBLE(swift_allocObject(&unk_101280808, 40, 7));
                  *(CGPoint *)(*(_QWORD *)&v85 + 16) = v57;
                  *(_QWORD *)(*(_QWORD *)&v85 + 32) = v49;
                  *(_QWORD *)&aBlock.tx = sub_100803FE0;
                  aBlock.ty = v85;
                  *(_QWORD *)&aBlock.a = _NSConcreteStackBlock;
                  aBlock.b = *(CGFloat *)"";
                  *(_QWORD *)&aBlock.c = sub_1005D2FC0;
                  *(_QWORD *)&aBlock.d = &unk_101280820;
                  v86 = _Block_copy(&aBlock);
                  v87 = swift_unknownObjectRetain(v56);
                  v88 = v108;
                  static DispatchQoS.unspecified.getter(v87);
                  v112 = _swiftEmptyArrayStorage;
                  v89 = sub_1004B7878((unint64_t *)&qword_1013E1D20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
                  v90 = sub_1004B804C((uint64_t *)&unk_1013DFBF0);
                  v91 = sub_100503E88();
                  v92 = v101;
                  v93 = v100;
                  dispatch thunk of SetAlgebra.init<A>(_:)(&v112, v90, v91, v100, v89);
                  v94 = (void *)v98;
                  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v84, v88, v92, v86);
                  _Block_release(v86);

                  v95 = swift_unknownObjectRelease(v56);
                  (*(void (**)(char *, uint64_t, __n128))(v3 + 8))(v92, v93, v95);
                  (*(void (**)(char *, uint64_t))(v109 + 8))(v88, v110);
                  ((void (*)(char *, uint64_t))v106)(v84, v111);
                  swift_release(*(_QWORD *)&aBlock.ty);
                  goto LABEL_39;
                }

              }
            }

            swift_unknownObjectRelease(v39);
LABEL_39:
            if (v1[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_isShowingDuplicateItemPreview] == 1)
              sub_100802600();
            return;
          }
          swift_unknownObjectRelease(v39);

        }
      }

      goto LABEL_39;
    }
  }
}

double sub_100801ED8(void *a1, double a2, double a3)
{
  id v5;
  double result;
  id v7;
  void *v8;
  id v9;
  void *v10;
  char *v11;
  id v12;
  char *v13;

  v5 = a1;
  v13 = sub_1009F98DC(v5, v5, a2, a3);

  if (!v13)
    return result;
  v7 = objc_msgSend(v5, "interactiveCanvasController");
  if (!v7)
  {
LABEL_8:
    v11 = v13;
    goto LABEL_9;
  }
  v8 = v7;
  v9 = objc_msgSend(v7, "layerHost");
  if (!v9)
  {

    goto LABEL_8;
  }
  v10 = v9;
  if ((objc_msgSend(v9, "respondsToSelector:", "asiOSCVC") & 1) != 0)
  {
    v12 = objc_msgSend(v10, "asiOSCVC");
    objc_msgSend(v12, "presentViewController:animated:completion:", v13, 1, 0, swift_unknownObjectRelease(v10).n128_f64[0]);

    v11 = (char *)v12;
LABEL_9:

    return result;
  }

  *(_QWORD *)&result = swift_unknownObjectRelease(v10).n128_u64[0];
  return result;
}

id sub_100802054(double a1, double a2)
{
  char *v2;
  id v5;
  id v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  id v16;
  Class isa;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  objc_super v30;

  v5 = objc_msgSend(v2, "rep");
  v6 = objc_msgSend(v2, "knob");
  objc_msgSend(v6, "position");
  v8 = v7;
  v10 = v9;

  objc_msgSend(v5, "convertNaturalPointToUnscaledCanvas:", v8, v10);
  v12 = v11;
  v14 = v13;

  if (sub_10006010C(v12, v14, a1, a2) > 100.0)
  {
    v15 = OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_didAddLine;
    if ((v2[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_didAddLine] & 1) == 0)
    {
      v2[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_shouldShowDuplicateItemPreview] = 0;
      v16 = objc_msgSend(v2, "icc");
      type metadata accessor for CRLBoardItem(0);
      isa = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v16, "setTemporaryAdditionalBoardItemsToDisplay:", isa);

      v18 = OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_duplicatedConnectionLine;
      v19 = *(void **)&v2[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_duplicatedConnectionLine];
      if (v19)
      {
        v20 = v19;
        v21 = objc_msgSend(v2, "icc");
        v22 = objc_msgSend(v21, "layoutForInfo:", v20);

        if (v22)
        {
          v23 = objc_opt_self(CRLConnectionLineAbstractLayout);
          v24 = (void *)swift_dynamicCastObjCClass(v22, v23);
          if (v24)
          {
            v25 = v24;
            objc_msgSend(v24, "setTemporaryConnectedToInfo:", 0);
            objc_msgSend(v25, "setTemporaryConnectedFromInfo:", 0);
            v26 = v20;
            v20 = v22;
          }
          else
          {
            v26 = v22;
          }

        }
      }
      v2[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_isShowingDuplicateItemPreview] = 0;
      v27 = *(void **)&v2[v18];
      *(_QWORD *)&v2[v18] = 0;

      sub_1007FFDA0();
      v2[v15] = 1;
    }
    v28 = *(void **)&v2[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_connectionLineKnobTracker];
    if (v28)
      objc_msgSend(v28, "moveKnobToCanvasPosition:", a1, a2);
  }
  v30.receiver = v2;
  v30.super_class = (Class)type metadata accessor for CRLShapeConnectionLineKnobTracker();
  return objc_msgSendSuper2(&v30, "moveKnobToCanvasPosition:", a1, a2);
}

uint64_t sub_10080230C()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t inited;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  _BYTE v15[40];

  v1 = objc_msgSend(v0, "icc");
  v2 = sub_1004B804C((uint64_t *)&unk_1013E4180);
  inited = swift_initStackObject(v2, v15);
  *(_OWORD *)(inited + 16) = xmmword_100EEF400;
  v4 = objc_msgSend(v0, "rep");
  *(_QWORD *)(inited + 32) = v4;
  v14 = inited;
  specialized Array._endMutation()(v4);
  v5 = inited;
  if ((unint64_t)inited >> 62)
  {
    if (inited >= 0)
      inited &= 0xFFFFFFFFFFFFFF8uLL;
    swift_bridgeObjectRetain(v14);
    v8 = _CocoaArrayWrapper.endIndex.getter(inited);
    swift_bridgeObjectRelease();
    if (v8)
      goto LABEL_3;
LABEL_7:
    v7 = &_swiftEmptySetSingleton;
    goto LABEL_8;
  }
  if (!*(_QWORD *)((inited & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_7;
LABEL_3:
  sub_1004B6DB8(v5);
  v7 = v6;
LABEL_8:
  swift_bridgeObjectRelease();
  sub_1007FBC18((uint64_t)v7);
  sub_100AF7B64(v9);
  v11 = v10;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12 = sub_100857E90(v11);
  swift_bridgeObjectRelease();
  return v12;
}

double sub_100802444()
{
  char *v0;
  void *v1;
  double *v2;
  id v3;
  id v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  id v13;
  uint64_t v14;
  double v15;
  id v16;
  id v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;

  v1 = v0;
  v2 = (double *)&v0[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_crlaxCurrentPositionOfKnobInsertingDuplicate];
  if ((v0[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_crlaxCurrentPositionOfKnobInsertingDuplicate
         + 16] & 1) != 0)
  {
    v3 = objc_msgSend(v0, "rep");
    v4 = objc_msgSend(v1, "knob");
    objc_msgSend(v4, "position");
    v6 = v5;
    v8 = v7;

    objc_msgSend(v3, "convertNaturalPointToUnscaledCanvas:", v6, v8);
    v10 = v9;
    v12 = v11;

  }
  else
  {
    v10 = *v2;
    v12 = v2[1];
  }
  v13 = objc_msgSend(v1, "knob");
  v14 = type metadata accessor for CRLConnectionLineKnob();
  if (swift_dynamicCastClass(v13, v14))
  {
    v15 = sub_100A1865C();
    v16 = objc_msgSend(v1, "icc");
    v17 = objc_msgSend(v16, "canvas");

    objc_msgSend(v17, "viewScale");
    v19 = v18;

    v20 = v15 / v19;
    sub_1007FC16C();
    v22 = v21;

    v23 = sub_1000603B8(v10, v12, v22);
    v25 = sub_100060398(v23, v24);
    v27 = sub_1000603DC(v25, v26, v20);
    return sub_1000603B8(v10, v12, v27);
  }
  else
  {

  }
  return v10;
}

void sub_100802600()
{
  double *v0;
  double *v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  char *v6;
  char **v7;
  id v8;
  id v9;
  id v10;
  Class isa;
  id v12;
  id v13;
  void *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  char **v19;
  char *v20;
  uint64_t (*v21)(__n128);
  __n128 v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  CGFloat a;
  id v28;
  uint64_t v29;
  void *v30;
  id v31;
  id v32;
  id v33;
  char *v34;
  id v35;
  uint64_t v36;
  id v37;
  char v38;
  uint64_t v39;
  double v40;
  CGFloat v41;
  double v42;
  CGFloat v43;
  CGPoint v44;
  id v45;
  void *v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  char *v52;
  uint64_t v53;
  CGFloat v54;
  CGFloat v55;
  uint64_t (*v56)(void);
  char *v57;
  _QWORD *v58;
  void *v59;
  double v60;
  double v61;
  double v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  CGFloat v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  id v71;
  Class v72;
  id v73;
  id v74;
  char *v75;
  id v76;
  id v77;
  id v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE *v88;
  CGFloat v89;
  _QWORD *v90;
  uint64_t v91;
  CKRecordID v92;
  Swift::String v93;
  uint64_t v94;
  Class v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t (*v103)(__n128);
  __n128 v104;
  void *v105;
  uint64_t v106;
  uint64_t (*v107)(__n128);
  __n128 v108;
  void *v109;
  char *v110;
  void *v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t (*v116)(__n128);
  __n128 v117;
  void *v118;
  uint64_t v119;
  uint64_t (*v120)(__n128);
  __n128 v121;
  void *v122;
  id v123;
  uint64_t v124;
  double v125;
  char v126;
  double v127;
  double v128;
  char *v129;
  char *v130;
  id v131;
  void (*v132)(void);
  char *v133;
  char *v134;
  Class v135;
  char *v136;
  id v137;
  char *v138;
  id v139;
  id v140;
  char *v141;
  char *v142;
  id v143;
  id v144;
  id v145;
  id v146;
  id v147;
  id v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  id v154;
  id v155;
  _QWORD *v156;
  void *v157;
  CGFloat ty;
  id v159;
  id v160;
  id v161;
  void *v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  id v167;
  CGFloat v168;
  char *v169;
  id v170;
  char *v171;
  id v172;
  id v173;
  CGAffineTransform v174;
  CGAffineTransform aBlock;
  char v176[48];
  CGPoint v177;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  *(_QWORD *)&v4 = __chkstk_darwin(v2).n128_u64[0];
  v6 = (char *)&v164 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = &selRef_getRulerSnapLineOriginAndTangent_andNormal_;
  v8 = objc_msgSend(v0, "icc", v4);
  v9 = objc_msgSend(v8, "temporaryAdditionalBoardItemsToDisplay");

  if (v9)
  {

    v10 = objc_msgSend(v1, "icc");
    type metadata accessor for CRLBoardItem(0);
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v10, "setTemporaryAdditionalBoardItemsToDisplay:", isa);

  }
  v12 = objc_msgSend(v1, "icc");
  v13 = objc_msgSend(v12, "canvasEditor");

  if (!v13)
    goto LABEL_88;
  v14 = sub_1007FC90C();
  if (!v14)
  {
    swift_unknownObjectRelease(v13);
LABEL_88:
    *((_BYTE *)v1 + OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_isShowingDuplicateItemPreview) = 0;
    v162 = *(void **)((char *)v1 + OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_duplicatedConnectionLine);
    *(double *)((char *)v1 + OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_duplicatedConnectionLine) = 0.0;

    return;
  }
  v17 = v15;
  v18 = v16;
  v166 = v6;

  v19 = *(char ***)&v18[OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData];
  v20 = *v19;
  if (!swift_conformsToProtocol2(*v19, &protocol descriptor for CRLAbstractShapeItemDataProtocol))
  {
LABEL_90:
    __break(1u);
    goto LABEL_91;
  }
  v165 = v3;
  v21 = (uint64_t (*)(__n128))*((_QWORD *)v20 + 88);
  v22 = swift_retain(v19);
  v20 = (char *)v21(v22);
  swift_release(v19);
  v23 = objc_opt_self(CRLConnectionLinePathSource);
  v24 = (void *)swift_dynamicCastObjCClass(v20, v23);
  if (!v24)
  {
LABEL_91:

    __break(1u);
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  v25 = objc_msgSend(v24, "copy");

  _bridgeAnyObjectToAny(_:)(&aBlock, v25);
  swift_unknownObjectRelease(v25);
  v26 = sub_1004B8930(0, (unint64_t *)&unk_1013F62F0, off_101229878);
  swift_dynamicCast(&v174, &aBlock, (char *)&type metadata for Any + 8, v26, 7);
  a = v174.a;
  v28 = objc_msgSend(objc_allocWithZone((Class)CRLConnectionLineMagnet), "initWithType:normalizedPosition:", 1, 0.5, 0.5);
  objc_msgSend(*(id *)&a, "setHeadMagnet:", v28);

  v29 = sub_10080230C();
  v164 = v2;
  if (!v29)
    goto LABEL_13;
  v30 = (void *)v29;
  v31 = objc_msgSend(v1, "icc");
  v32 = objc_msgSend(v31, "layoutForInfo:", v30);

  if (!v32)
  {

    v7 = &selRef_getRulerSnapLineOriginAndTangent_andNormal_;
LABEL_13:
    v37 = objc_msgSend(objc_allocWithZone((Class)CRLConnectionLineMagnet), "initWithType:normalizedPosition:", 1, 0.5, 0.5);
    objc_msgSend(*(id *)&a, "setTailMagnet:", v37);
    goto LABEL_20;
  }
  v33 = objc_msgSend(v1, "knob");
  v34 = (char *)objc_msgSend(v33, "tag");

  v35 = v13;
  if ((unint64_t)(v34 - 2) >= 7)
    v36 = 1;
  else
    v36 = qword_100F0E9A8[(_QWORD)(v34 - 2)];
  sub_100803A58((id)v36, v32);
  if ((v38 & 1) != 0)
    v39 = v36;
  else
    v39 = 1;
  objc_msgSend(v32, "getCardinalPositionFromType:", v39, v164);
  v41 = v40;
  v43 = v42;
  objc_msgSend(v32, "pureTransformInRoot");
  CGAffineTransformInvert(&v174, &aBlock);
  aBlock = v174;
  v177.x = v41;
  v177.y = v43;
  v44 = CGPointApplyAffineTransform(v177, &aBlock);
  v45 = objc_msgSend(v32, "pureGeometry");
  if (!v45)
    goto LABEL_92;
  v46 = v45;
  objc_msgSend(v45, "size");

  v47 = sub_10005FDDC();
  v50 = sub_1000626B8(v44.x, v44.y, v47, v48, v49);
  v37 = objc_msgSend(objc_allocWithZone((Class)CRLConnectionLineMagnet), "initWithType:normalizedPosition:", v39, v50, v51);
  objc_msgSend(*(id *)&a, "setTailMagnet:", v37);

  v13 = v35;
  v7 = &selRef_getRulerSnapLineOriginAndTangent_andNormal_;
LABEL_20:

  v52 = v18;
  v170 = *(id *)&a;
  sub_10092345C((uint64_t)v170);

  v53 = sub_1004B804C((uint64_t *)&unk_1013E4180);
  v54 = COERCE_DOUBLE(swift_allocObject(v53, 48, 7));
  *(_OWORD *)(*(_QWORD *)&v54 + 16) = xmmword_100EF5560;
  *(_QWORD *)(*(_QWORD *)&v54 + 32) = v17;
  *(_QWORD *)(*(_QWORD *)&v54 + 40) = v52;
  aBlock.a = v54;
  specialized Array._endMutation()(*(_QWORD *)&v54);
  v55 = aBlock.a;
  v56 = *(uint64_t (**)(void))((swift_isaMask & *v17) + 0xE0);
  v57 = v52;
  v58 = v17;
  v59 = (void *)v56();
  objc_msgSend(v59, "center");
  v61 = v60;
  v63 = v62;

  v65 = NSNotFound.getter(v64);
  if ((v65 & 0x8000000000000000) == 0)
  {
    v66 = (const char *)objc_msgSend((id)objc_opt_self(CRLInsertionContext), "dragInsertionContextWithPreferredCenter:required:fromDragToInsertController:insertFloating:targetZOrder:", 1, 0, 0, v65, v61, v63);
    v67 = COERCE_DOUBLE(swift_initStackObject(v53, v176));
    *(_OWORD *)(*(_QWORD *)&v67 + 16) = xmmword_100EEF400;
    *(_QWORD *)(*(_QWORD *)&v67 + 32) = v58;
    aBlock.a = v67;
    specialized Array._endMutation()(*(_QWORD *)&v67);
    v68 = *(_QWORD *)&aBlock.a;
    if (*(_QWORD *)&aBlock.a >> 62)
    {
      if (aBlock.a < 0.0)
        v89 = aBlock.a;
      else
        *(_QWORD *)&v89 = *(_QWORD *)&aBlock.a & 0xFFFFFFFFFFFFFF8;
      v90 = v58;
      swift_unknownObjectRetain(v13);
      swift_bridgeObjectRetain(v68);
      v69 = _CocoaArrayWrapper.endIndex.getter(*(_QWORD *)&v89);
      swift_bridgeObjectRelease();
    }
    else
    {
      v69 = *(_QWORD *)((*(_QWORD *)&aBlock.a & 0xFFFFFFFFFFFFF8) + 0x10);
      v70 = v58;
      swift_unknownObjectRetain(v13);
    }
    v172 = v58;
    v169 = v57;
    v168 = v55;
    if (v69)
      sub_1004B5FB0(v68);
    swift_bridgeObjectRelease();
    v71 = objc_allocWithZone((Class)CRLCanvasCommandSelectionBehavior);
    type metadata accessor for CRLBoardItem(0);
    sub_1004B7878((unint64_t *)&qword_1013E4190, type metadata accessor for CRLBoardItem, (uint64_t)&protocol conformance descriptor for NSObject);
    v72 = Set._bridgeToObjectiveC()().super.isa;
    v73 = objc_msgSend(v71, "initWithCanvasEditor:type:constructedInfos:", v13, 0, v72, swift_bridgeObjectRelease().n128_f64[0]);

    v74 = objc_msgSend(v1, v7[437], swift_unknownObjectRelease(v13).n128_f64[0]);
    v75 = (char *)objc_msgSend(v74, "editingCoordinator");

    if (v75)
    {
      v76 = *(id *)&v75[OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_commandController];

      v77 = v73;
      sub_1006A9664(v73);

    }
    v173 = v73;
    v78 = objc_msgSend(v1, v7[437], v164);
    v79 = (char *)objc_msgSend(v78, "editingCoordinator");

    v171 = (char *)v66;
    if (!v79)
    {
LABEL_65:
      v95 = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v13, "insertBoardItems:withInsertionContext:postProcessBlock:", v95, v66, 0, swift_bridgeObjectRelease().n128_f64[0]);

      v96 = sub_10080230C();
      if (!v96)
        goto LABEL_81;
      v97 = (char *)v96;
      v167 = v13;
      v98 = type metadata accessor for CRLWPShapeItem(0);
      v99 = swift_dynamicCastClass(v97, v98);
      if (v99)
      {
        v100 = (char *)v99;
        v101 = OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData;
        v102 = *(_QWORD *)(v99 + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData);
        v103 = *(uint64_t (**)(__n128))(*(_QWORD *)v102 + 288);
        v104 = swift_retain(v102);
        v105 = (void *)v103(v104);
        LODWORD(v102) = objc_msgSend(v105, "widthValid", swift_release(v102).n128_f64[0]);

        if ((_DWORD)v102)
        {
          v106 = *(_QWORD *)&v100[v101];
          v107 = *(uint64_t (**)(__n128))(*(_QWORD *)v106 + 288);
          v108 = swift_retain(v106);
          v109 = (void *)v107(v108);
          LOBYTE(v106) = objc_msgSend(v109, "heightValid", swift_release(v106).n128_f64[0]);

          v110 = v97;
          if ((v106 & 1) != 0)
            goto LABEL_80;
        }
        v111 = v172;
        v112 = swift_dynamicCastClass(v172, v98);
        if (v112)
        {
          v113 = (char *)v112;
          v114 = OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData;
          v115 = *(_QWORD *)(v112 + OBJC_IVAR____TtC8Freeform16CRLBoardItemBase_itemData);
          v116 = *(uint64_t (**)(__n128))(*(_QWORD *)v115 + 288);
          v110 = v111;
          v117 = swift_retain(v115);
          v118 = (void *)v116(v117);
          LODWORD(v115) = objc_msgSend(v118, "widthValid", swift_release(v115).n128_f64[0]);

          if ((_DWORD)v115)
          {
            v119 = *(_QWORD *)&v113[v114];
            v120 = *(uint64_t (**)(__n128))(*(_QWORD *)v119 + 288);
            v121 = swift_retain(v119);
            v122 = (void *)v120(v121);
            LOBYTE(v119) = objc_msgSend(v122, "heightValid", swift_release(v119).n128_f64[0]);

            if ((v119 & 1) != 0)
              goto LABEL_78;
          }
          v123 = objc_msgSend(v1, v7[437]);
          objc_msgSend(v123, "layoutIfNeeded");

          *(double *)&v124 = COERCE_DOUBLE(sub_1007FF2C0(v100, v113));
          if ((v126 & 1) != 0 || (v127 = *(double *)&v124, v128 = v125, (v129 = sub_1007FFB28(v110)) == 0))
          {
LABEL_78:
            v136 = v97;
          }
          else
          {
            v130 = v129;
            objc_msgSend(v129, "setCenter:", v127, v128);
            v131 = objc_allocWithZone((Class)type metadata accessor for CRLCommandSetInfoGeometry(0));
            v132 = *(void (**)(void))((swift_isaMask & *(_QWORD *)v110) + 0x88);
            v133 = v110;
            v110 = v130;
            v134 = v166;
            v132();
            v135 = UUID._bridgeToObjectiveC()().super.isa;
            (*(void (**)(char *, uint64_t))(v165 + 8))(v134, v164);
            v136 = (char *)objc_msgSend(v131, "initWithId:geometry:", v135, v110);

            v137 = objc_msgSend(v1, v7[437]);
            v138 = (char *)objc_msgSend(v137, "editingCoordinator");

            if (v138)
            {
              v139 = *(id *)&v138[OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_commandController];

              sub_1006A5F54(v136, 0, 0, 4, 0);
            }

          }
          goto LABEL_80;
        }
      }
      v110 = v97;
LABEL_80:

      v13 = v167;
LABEL_81:
      v140 = objc_msgSend(v1, v7[437]);
      v141 = (char *)objc_msgSend(v140, "editingCoordinator");

      v142 = v169;
      v143 = v173;
      if (v141)
      {
        v144 = *(id *)&v141[OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_commandController];

        v145 = v143;
        sub_1006A984C((char *)v143);

      }
      v146 = objc_msgSend(v1, v7[437]);
      objc_msgSend(v146, "layoutIfNeeded");

      v147 = objc_msgSend(v1, v7[437]);
      v148 = objc_msgSend(v147, "layoutForInfo:", v142);

      v149 = v172;
      if (v148)
      {
        v150 = objc_opt_self(CRLConnectionLineAbstractLayout);
        v151 = swift_dynamicCastObjCClass(v148, v150);
        if (v151)
        {
          v152 = v151;
          v153 = type metadata accessor for CRLInsertionAnimationHelper();
          v154 = objc_msgSend(v1, v7[437]);
          v155 = objc_msgSend(v154, "canvas");
          v156 = (_QWORD *)swift_allocObject(&unk_101280790, 48, 7);
          v156[2] = v152;
          v156[3] = v154;
          v156[4] = v149;
          v156[5] = v153;
          *(_QWORD *)&aBlock.tx = sub_100757D20;
          *(_QWORD *)&aBlock.ty = v156;
          *(_QWORD *)&aBlock.a = _NSConcreteStackBlock;
          aBlock.b = *(CGFloat *)"";
          *(_QWORD *)&aBlock.c = sub_1005D2FC0;
          *(_QWORD *)&aBlock.d = &unk_1012807A8;
          v157 = _Block_copy(&aBlock);
          ty = aBlock.ty;
          v159 = v149;
          v160 = v148;
          v161 = v154;
          objc_msgSend(v155, "afterLayoutIncludingLayers:performBlock:", 1, v157, swift_release(*(_QWORD *)&ty).n128_f64[0]);
          _Block_release(v157);

          swift_unknownObjectRelease(v13);
          goto LABEL_88;
        }

      }
      swift_unknownObjectRelease(v13);

      goto LABEL_88;
    }
    v20 = (char *)*(id *)&v79[OBJC_IVAR____TtC8Freeform21CRLEditingCoordinator_commandController];

    v80 = (uint64_t)&v20[OBJC_IVAR____TtC8Freeform20CRLCommandController_openGroupDatas];
    swift_beginAccess(&v20[OBJC_IVAR____TtC8Freeform20CRLCommandController_openGroupDatas], &v174, 0, 0);
    v81 = *(_QWORD *)v80;
    if (*(_QWORD *)v80 >> 62)
    {
      if (v81 < 0)
        v91 = *(_QWORD *)v80;
      else
        v91 = v81 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*(_QWORD *)v80);
      v82 = _CocoaArrayWrapper.endIndex.getter(v91);
      if (v82)
      {
LABEL_30:
        v83 = v82 - 1;
        if (!__OFSUB__(v82, 1))
        {
          if ((v81 & 0xC000000000000001) == 0)
          {
            if ((v83 & 0x8000000000000000) != 0)
            {
              __break(1u);
            }
            else if (v83 < *(_QWORD *)((v81 & 0xFFFFFFFFFFFFF8) + 0x10))
            {
              v82 = *(_QWORD *)(v81 + 8 * v83 + 32);
              swift_retain(v82);
LABEL_35:
              swift_bridgeObjectRelease();
              v84 = *(unsigned __int8 *)(v82 + 16);
              if (v84 == 3 || v84 == 2 || v84 == 1)
              {

                swift_release(v82);
                goto LABEL_65;
              }
              v80 = *(_QWORD *)v80;
              v167 = v13;
              if (!((unint64_t)v80 >> 62))
              {
                v85 = *(_QWORD *)((v80 & 0xFFFFFFFFFFFFF8) + 0x10);
                swift_bridgeObjectRetain_n(v80, 2);
                if (v85)
                {
LABEL_41:
                  if (v85 >= 1)
                  {
                    v86 = 0;
                    do
                    {
                      if ((v80 & 0xC000000000000001) != 0)
                      {
                        v87 = specialized _ArrayBuffer._getElementSlowPath(_:)(v86, v80);
                      }
                      else
                      {
                        v87 = *(_QWORD *)(v80 + 8 * v86 + 32);
                        swift_retain(v87);
                      }
                      ++v86;
                      v88 = *(id *)(v87 + 24);
                      sub_1006A72F4(v88, 0);
                      swift_release(v87);

                    }
                    while (v85 != v86);
                    goto LABEL_64;
                  }
                  __break(1u);
                  goto LABEL_90;
                }
LABEL_64:
                swift_bridgeObjectRelease_n(v80, 2);
                *(_BYTE *)(v82 + 16) = 1;

                swift_release(v82);
                v13 = v167;
                v7 = &selRef_getRulerSnapLineOriginAndTangent_andNormal_;
                v66 = v171;
                goto LABEL_65;
              }
LABEL_60:
              if (v80 < 0)
                v94 = v80;
              else
                v94 = v80 & 0xFFFFFFFFFFFFFF8;
              swift_bridgeObjectRetain_n(v80, 2);
              v85 = _CocoaArrayWrapper.endIndex.getter(v94);
              if (v85)
                goto LABEL_41;
              goto LABEL_64;
            }
            __break(1u);
            goto LABEL_60;
          }
LABEL_57:
          v82 = specialized _ArrayBuffer._getElementSlowPath(_:)(v83, v81);
          goto LABEL_35;
        }
LABEL_56:
        __break(1u);
        goto LABEL_57;
      }
    }
    else
    {
      v82 = *(_QWORD *)((v81 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(*(_QWORD *)v80);
      if (v82)
        goto LABEL_30;
    }
    swift_bridgeObjectRelease();
    v1 = _swiftEmptyArrayStorage;
    v81 = 2;
    v20 = "enableProgressiveEnqueuingInCurrentGroup() called without a group being open.";
    v66 = "enableProgressiveEnqueuingInCurrentGroup()";
    v80 = (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCommands/CRLCommandController.swift";
    sub_100757E04(&_mh_execute_header, (uint64_t)"enableProgressiveEnqueuingInCurrentGroup()", 42, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCommands/CRLCommandController.swift", 92, 2, 680, "enableProgressiveEnqueuingInCurrentGroup() called without a group being open.", 77, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_100518FC0((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"enableProgressiveEnqueuingInCurrentGroup() called without a group being open.");
    sub_100519194((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"enableProgressiveEnqueuingInCurrentGroup()", 42, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCommands/CRLCommandController.swift", 92, 2u, 680, (uint64_t)"enableProgressiveEnqueuingInCurrentGroup() called without a group being open.", 77, 2u);
    SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v92, v93);
    v83 = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Freeform/CRLAssert.swift", 24, 2, 348, 0);
    __break(1u);
    goto LABEL_56;
  }
LABEL_93:
  LOBYTE(v163) = 2;
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, v163, 3451, 0);
  __break(1u);
}

void sub_1008036D4(double a1, double a2)
{
  char *v2;
  double *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = (double *)&v2[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_crlaxCurrentPositionOfKnobInsertingDuplicate];
  *v3 = a1;
  v3[1] = a2;
  *((_BYTE *)v3 + 16) = 0;
  sub_100802600();
  v4 = sub_10080230C();
  if (v4)
  {
    v5 = (void *)v4;
    v6 = objc_msgSend(v2, "icc");
    v7 = objc_msgSend(v6, "repForInfo:", v5);

    if (v7)
    {
      v8 = type metadata accessor for CRLWPStickyNoteRep();
      v9 = (void *)swift_dynamicCastClass(v7, v8);
      if (v9)
      {
        objc_msgSend(v9, "becameSelected");
        v10 = v5;
      }
      else
      {
        v10 = v7;
        v7 = v5;
      }

    }
    else
    {
      v7 = v5;
    }

  }
  *v3 = 0.0;
  v3[1] = 0.0;
  *((_BYTE *)v3 + 16) = 1;
}

id sub_1008038B0()
{
  _BYTE *v0;
  char *v1;
  char *v2;
  objc_super v4;

  v0[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker__snapEnabled] = 1;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_connectionLineKnobTracker] = 0;
  v0[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_didAddLine] = 0;
  v0[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_isShowingDuplicateItemPreview] = 0;
  v0[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_shouldShowDuplicateItemPreview] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_duplicatedConnectionLine] = 0;
  v1 = &v0[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_referenceDistanceBetweenSourceAndDuplicatedItemCenters];
  *(_QWORD *)v1 = 0;
  v1[8] = 1;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_increasedStepWhenInsertConnectionLine] = 0x403E000000000000;
  v2 = &v0[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_crlaxCurrentPositionOfKnobInsertingDuplicate];
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0;
  v2[16] = 1;
  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for CRLShapeConnectionLineKnobTracker();
  return objc_msgSendSuper2(&v4, "init");
}

id sub_100803984()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CRLShapeConnectionLineKnobTracker();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CRLShapeConnectionLineKnobTracker()
{
  return objc_opt_self(_TtC8Freeform33CRLShapeConnectionLineKnobTracker);
}

uint64_t sub_100803A0C()
{
  id *v0;

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100803A40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_100803A50(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

void sub_100803A58(id a1, id a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  _QWORD v43[5];

  v3 = objc_msgSend(a2, "connectedLayouts");
  if (v3)
  {
    v4 = v3;
    v5 = sub_1004B8930(0, (unint64_t *)&qword_1013EC6C0, off_101229850);
    v6 = sub_10051FD9C(&qword_1013EC6C8, (unint64_t *)&qword_1013EC6C0, off_101229850);
    v7 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v4, v5, v6);

    v38 = v5;
    if ((v7 & 0xC000000000000001) != 0)
    {
      if (v7 < 0)
        v9 = v7;
      else
        v9 = v7 & 0xFFFFFFFFFFFFFF8;
      v10 = __CocoaSet.makeIterator()(v9);
      v8 = Set.Iterator.init(_cocoa:)(v43, v10, v5, v6);
      v7 = v43[0];
      v40 = v43[1];
      v11 = v43[2];
      v12 = v43[3];
      v13 = v43[4];
    }
    else
    {
      v12 = 0;
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v40 = v7 + 56;
      v11 = ~v14;
      v15 = -v14;
      if (v15 < 64)
        v16 = ~(-1 << v15);
      else
        v16 = -1;
      v13 = v16 & *(_QWORD *)(v7 + 56);
    }
    v17 = 0;
    v39 = (unint64_t)(v11 + 64) >> 6;
    if ((v7 & 0x8000000000000000) == 0)
      goto LABEL_18;
LABEL_15:
    v18 = __CocoaSet.Iterator.next()(v8);
    if (v18)
    {
      v19 = v18;
      v41 = v18;
      swift_unknownObjectRetain(v18);
      swift_dynamicCast(&v42, &v41, (char *)&type metadata for Swift.AnyObject + 8, v38, 7);
      v20 = v42;
      *(_QWORD *)&v21 = swift_unknownObjectRelease(v19).n128_u64[0];
      v22 = v12;
      v23 = v13;
      while (v20)
      {
        if (v17)
        {

          v17 = 1;
          v12 = v22;
          v13 = v23;
          if (v7 < 0)
            goto LABEL_15;
        }
        else
        {
          v28 = objc_msgSend(v20, "connectedTo", v21);
          if (!v28)
            goto LABEL_40;
          v29 = v28;
          sub_1004B8930(0, (unint64_t *)&qword_1013FC960, off_101229810);
          v30 = a2;
          v31 = v29;
          LOBYTE(v29) = static NSObject.== infix(_:_:)(v31, v30);

          if ((v29 & 1) == 0)
            goto LABEL_40;
          if (objc_msgSend(v20, "headMagnetType") == a1)
          {

            v17 = 1;
          }
          else
          {
LABEL_40:
            v32 = objc_msgSend(v20, "connectedFrom");
            if (!v32)
              goto LABEL_43;
            v33 = v32;
            sub_1004B8930(0, (unint64_t *)&qword_1013FC960, off_101229810);
            v34 = a2;
            v35 = v33;
            LOBYTE(v33) = static NSObject.== infix(_:_:)(v35, v34);

            if ((v33 & 1) != 0)
            {
              v36 = objc_msgSend(v20, "tailMagnetType");

              v17 = v36 == a1;
            }
            else
            {
LABEL_43:

              v17 = 0;
            }
          }
          v12 = v22;
          v13 = v23;
          if (v7 < 0)
            goto LABEL_15;
        }
LABEL_18:
        if (v13)
        {
          v23 = (v13 - 1) & v13;
          v24 = __clz(__rbit64(v13)) | (v12 << 6);
          v22 = v12;
        }
        else
        {
          v25 = v12 + 1;
          if (__OFADD__(v12, 1))
          {
            __break(1u);
            return;
          }
          if (v25 >= v39)
            break;
          v26 = *(_QWORD *)(v40 + 8 * v25);
          v22 = v12 + 1;
          if (!v26)
          {
            v22 = v12 + 2;
            if (v12 + 2 >= v39)
              break;
            v26 = *(_QWORD *)(v40 + 8 * v22);
            if (!v26)
            {
              v22 = v12 + 3;
              if (v12 + 3 >= v39)
                break;
              v26 = *(_QWORD *)(v40 + 8 * v22);
              if (!v26)
              {
                v22 = v12 + 4;
                if (v12 + 4 >= v39)
                  break;
                v26 = *(_QWORD *)(v40 + 8 * v22);
                if (!v26)
                {
                  v27 = v12 + 5;
                  while (v39 != v27)
                  {
                    v26 = *(_QWORD *)(v40 + 8 * v27++);
                    if (v26)
                    {
                      v22 = v27 - 1;
                      goto LABEL_33;
                    }
                  }
                  break;
                }
              }
            }
          }
LABEL_33:
          v23 = (v26 - 1) & v26;
          v24 = __clz(__rbit64(v26)) + (v22 << 6);
        }
        v20 = *(id *)(*(_QWORD *)(v7 + 48) + 8 * v24);
      }
    }
    sub_1004D284C(v7);
  }
}

uint64_t sub_100803E78(_QWORD **a1)
{
  uint64_t v1;

  return sub_100801358(a1, *(_QWORD *)(v1 + 16)) & 1;
}

BOOL sub_100803E94(double a1, double a2)
{
  return vabdd_f64(a1, a2) < 0.00999999978 || a1 == a2;
}

uint64_t sub_100803EB4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_100803EE0(uint64_t a1)
{
  uint64_t v1;

  sub_1007FD560(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24));
}

id sub_100803EE8(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  char *v5;
  char *v6;
  objc_super v8;

  v2[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker__snapEnabled] = 1;
  *(_QWORD *)&v2[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_connectionLineKnobTracker] = 0;
  v2[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_didAddLine] = 0;
  v2[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_isShowingDuplicateItemPreview] = 0;
  v2[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_shouldShowDuplicateItemPreview] = 0;
  *(_QWORD *)&v2[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_duplicatedConnectionLine] = 0;
  v5 = &v2[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_referenceDistanceBetweenSourceAndDuplicatedItemCenters];
  *(_QWORD *)v5 = 0;
  v5[8] = 1;
  *(_QWORD *)&v2[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_increasedStepWhenInsertConnectionLine] = 0x403E000000000000;
  v6 = &v2[OBJC_IVAR____TtC8Freeform33CRLShapeConnectionLineKnobTracker_crlaxCurrentPositionOfKnobInsertingDuplicate];
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 1;
  v8.receiver = v2;
  v8.super_class = (Class)type metadata accessor for CRLShapeConnectionLineKnobTracker();
  return objc_msgSendSuper2(&v8, "initWithRep:knob:", a1, a2);
}

uint64_t sub_100803FBC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 40, 7);
}

double sub_100803FE0()
{
  uint64_t v0;

  return sub_100801ED8(*(void **)(v0 + 32), *(double *)(v0 + 16), *(double *)(v0 + 24));
}

uint64_t sub_100803FEC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

double sub_100804010()
{
  uint64_t v0;

  return sub_1007FC5F4(*(void **)(v0 + 16));
}

uint64_t sub_100804018()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100804044(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1013F4944);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1004CF80C;
  return sub_1007FC6D0(a1, v4, v5, v6);
}

uint64_t sub_1008040B0(_QWORD **a1)
{
  return sub_100803E78(a1) & 1;
}

Class sub_1008041AC(char *a1, uint64_t a2, _QWORD *a3, void (*a4)(__n128), uint64_t *a5)
{
  uint64_t v7;
  char *v8;
  __n128 v9;
  Class isa;

  v7 = *(_QWORD *)&a1[*a3];
  v8 = a1;
  v9 = swift_bridgeObjectRetain(v7);
  a4(v9);

  swift_bridgeObjectRelease();
  sub_1004B804C(a5);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  return isa;
}

uint64_t sub_100804224(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;
  unint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v40;
  _BYTE v41[24];
  uint64_t v42;

  v2 = v1;
  ObjectType = swift_getObjectType(v1);
  sub_1004F370C(a1, (uint64_t)v41);
  if (!v42)
  {
    sub_1004D28EC((uint64_t)v41);
    goto LABEL_41;
  }
  if ((swift_dynamicCast(&v40, v41, (char *)&type metadata for Any + 8, ObjectType, 6) & 1) == 0)
  {
LABEL_41:
    v29 = 0;
    return v29 & 1;
  }
  v5 = v40;
  v6 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform28CRLCalculateDocumentProvider_declaredVariables);
  v7 = *(_QWORD *)&v40[OBJC_IVAR____TtC8Freeform28CRLCalculateDocumentProvider_declaredVariables];
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  v8 = sub_1008D9630(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v8 & 1) == 0)
    goto LABEL_40;
  v9 = OBJC_IVAR____TtC8Freeform28CRLCalculateDocumentProvider_expressions;
  v10 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform28CRLCalculateDocumentProvider_expressions);
  if (!((unint64_t)v10 >> 62))
  {
    swift_bridgeObjectRetain_n(*(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform28CRLCalculateDocumentProvider_expressions), 2);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v11);
    swift_bridgeObjectRelease();
    v12 = v10;
LABEL_6:
    v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_7;
  }
  if (v10 < 0)
    v30 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform28CRLCalculateDocumentProvider_expressions);
  else
    v30 = v10 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform28CRLCalculateDocumentProvider_expressions));
  v31 = sub_1004B804C((uint64_t *)&unk_1013E1CB0);
  v12 = _bridgeCocoaArray<A>(_:)(v30, v31);
  swift_bridgeObjectRelease();
  v32 = v12;
  if (!((unint64_t)v12 >> 62))
    goto LABEL_6;
  if (v12 >= 0)
    v12 &= 0xFFFFFFFFFFFFFF8uLL;
  swift_bridgeObjectRetain(v32);
  v13 = _CocoaArrayWrapper.endIndex.getter(v12);
  swift_bridgeObjectRelease();
LABEL_7:
  swift_bridgeObjectRelease();
  v14 = OBJC_IVAR____TtC8Freeform28CRLCalculateDocumentProvider_expressions;
  v15 = *(_QWORD *)&v5[OBJC_IVAR____TtC8Freeform28CRLCalculateDocumentProvider_expressions];
  if (!((unint64_t)v15 >> 62))
  {
    swift_bridgeObjectRetain_n(*(_QWORD *)&v5[OBJC_IVAR____TtC8Freeform28CRLCalculateDocumentProvider_expressions], 2);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v16);
    swift_bridgeObjectRelease();
    v17 = v15;
LABEL_9:
    v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_10;
  }
  if (v15 < 0)
    v33 = *(_QWORD *)&v5[OBJC_IVAR____TtC8Freeform28CRLCalculateDocumentProvider_expressions];
  else
    v33 = v15 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*(_QWORD *)&v5[OBJC_IVAR____TtC8Freeform28CRLCalculateDocumentProvider_expressions]);
  v34 = sub_1004B804C((uint64_t *)&unk_1013E1CB0);
  v17 = _bridgeCocoaArray<A>(_:)(v33, v34);
  swift_bridgeObjectRelease();
  v35 = v17;
  if (!((unint64_t)v17 >> 62))
    goto LABEL_9;
  if (v17 >= 0)
    v17 &= 0xFFFFFFFFFFFFFF8uLL;
  swift_bridgeObjectRetain(v35);
  v18 = _CocoaArrayWrapper.endIndex.getter(v17);
  swift_bridgeObjectRelease();
LABEL_10:
  swift_bridgeObjectRelease();
  if (v13 != v18)
    goto LABEL_40;
  v19 = OBJC_IVAR____TtC8Freeform28CRLCalculateDocumentProvider_evaluationResults;
  v20 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform28CRLCalculateDocumentProvider_evaluationResults);
  if ((unint64_t)v20 >> 62)
  {
    if (v20 < 0)
      v36 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform28CRLCalculateDocumentProvider_evaluationResults);
    else
      v36 = v20 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform28CRLCalculateDocumentProvider_evaluationResults));
    v21 = _CocoaArrayWrapper.endIndex.getter(v36);
    swift_bridgeObjectRelease();
    v22 = OBJC_IVAR____TtC8Freeform28CRLCalculateDocumentProvider_evaluationResults;
  }
  else
  {
    v21 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
    v22 = OBJC_IVAR____TtC8Freeform28CRLCalculateDocumentProvider_evaluationResults;
  }
  v23 = *(_QWORD *)&v5[v22];
  if (!((unint64_t)v23 >> 62))
  {
    if (v21 == *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_15;
LABEL_40:

    goto LABEL_41;
  }
  if (v23 < 0)
    v37 = *(_QWORD *)&v5[v22];
  else
    v37 = v23 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*(_QWORD *)&v5[v22]);
  v38 = _CocoaArrayWrapper.endIndex.getter(v37);
  swift_bridgeObjectRelease();
  if (v21 != v38)
    goto LABEL_40;
LABEL_15:
  v24 = *(_QWORD *)(v2 + v9);
  v25 = *(_QWORD *)&v5[v14];
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v25);
  v26 = sub_100548F00(v24, v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v26 & 1) == 0)
    goto LABEL_40;
  v27 = *(_QWORD *)(v2 + v19);
  v28 = *(_QWORD *)&v5[v22];
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v28);
  v29 = sub_100548F0C(v27, v28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v29 & 1;
}

uint64_t type metadata accessor for CRLCalculateDocumentProvider()
{
  return objc_opt_self(_TtC8Freeform28CRLCalculateDocumentProvider);
}

BOOL sub_100804704(uint64_t a1)
{
  uint64_t v1;
  uint64_t ObjectType;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  char *v13;
  _BYTE v14[24];
  uint64_t v15;

  ObjectType = swift_getObjectType(v1);
  sub_1004F370C(a1, (uint64_t)v14);
  if (v15)
  {
    if ((swift_dynamicCast(&v13, v14, (char *)&type metadata for Any + 8, ObjectType, 6) & 1) != 0)
    {
      v4 = v13;
      v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8Freeform14MathExpression_expression);
      v6 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8Freeform14MathExpression_expression + 8);
      v7 = *(_QWORD *)&v13[OBJC_IVAR____TtC8Freeform14MathExpression_expression];
      v8 = *(_QWORD *)&v13[OBJC_IVAR____TtC8Freeform14MathExpression_expression + 8];
      v9 = v5 == v7 && v6 == v8;
      if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v7, v8, 0) & 1) != 0)
      {
        v10 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8Freeform14MathExpression_expressionType);
        v11 = *(_QWORD *)&v4[OBJC_IVAR____TtC8Freeform14MathExpression_expressionType];

        return v10 == v11;
      }

    }
  }
  else
  {
    sub_1004D28EC((uint64_t)v14);
  }
  return 0;
}

uint64_t type metadata accessor for MathExpression()
{
  return objc_opt_self(_TtC8Freeform14MathExpression);
}

uint64_t sub_1008048C8(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v7 = (uint64_t *)(a1 + *a4);
  v8 = v7[1];
  *v7 = v6;
  v7[1] = v9;
  return swift_bridgeObjectRelease(v8);
}

double *sub_100804958()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v5;
  id v6;
  id v7;
  Class isa;
  id v9;
  id v10;
  uint64_t v11;
  double *v12;
  uint64_t v14;

  v1 = type metadata accessor for PKDrawing(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform30MathExpressionEvaluationResult_drawing);
  if (!v5)
    return _swiftEmptyArrayStorage;
  v6 = v5;
  static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v7 = objc_allocWithZone((Class)PKStrokeProvider);
  isa = PKDrawing._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  v9 = objc_msgSend(v7, "initWithDrawing:", isa);

  if (v9)
  {
    v10 = objc_msgSend(v9, "orderedStrokes");
    v11 = sub_1004B804C((uint64_t *)&unk_1013F4A70);
    v12 = (double *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v10, v11);

    v6 = v10;
  }
  else
  {
    v12 = _swiftEmptyArrayStorage;
  }

  return v12;
}

BOOL sub_100804A98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  void *v15;
  id v16;
  id v17;
  char v18;
  void *v19;
  char **v20;
  id v21;
  id v22;
  Class isa;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  id v32;
  Class v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  void *v40;
  double v41;
  double x;
  double v43;
  double y;
  double v45;
  double width;
  double v47;
  double height;
  void *v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  _BYTE v65[24];
  uint64_t v66;

  v2 = v1;
  ObjectType = swift_getObjectType(v1);
  v5 = type metadata accessor for PKDrawing(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1004F370C(a1, (uint64_t)v65);
  if (!v66)
  {
    sub_1004D28EC((uint64_t)v65);
    return 0;
  }
  if ((swift_dynamicCast(&v64, v65, (char *)&type metadata for Any + 8, ObjectType, 6) & 1) == 0)
    return 0;
  v9 = v64;
  v10 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform30MathExpressionEvaluationResult_string);
  v11 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform30MathExpressionEvaluationResult_string + 8);
  v12 = *(_QWORD *)&v64[OBJC_IVAR____TtC8Freeform30MathExpressionEvaluationResult_string];
  v13 = *(_QWORD *)&v64[OBJC_IVAR____TtC8Freeform30MathExpressionEvaluationResult_string + 8];
  v14 = v10 == v12 && v11 == v13;
  if (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, v12, v13, 0) & 1) == 0)
    goto LABEL_30;
  sub_100511A70();
  v15 = *(void **)&v9[OBJC_IVAR____TtC8Freeform30MathExpressionEvaluationResult_strokeGroupIdentifier];
  v16 = *(id *)(v2 + OBJC_IVAR____TtC8Freeform30MathExpressionEvaluationResult_strokeGroupIdentifier);
  v17 = v15;
  v18 = static NSObject.== infix(_:_:)(v16, v17);

  if ((v18 & 1) == 0)
    goto LABEL_30;
  v63 = OBJC_IVAR____TtC8Freeform30MathExpressionEvaluationResult_drawing;
  v19 = *(void **)(v2 + OBJC_IVAR____TtC8Freeform30MathExpressionEvaluationResult_drawing);
  v20 = &selRef_imageByApplyingSymbolConfiguration_;
  if (v19)
  {
    v21 = v19;
    static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v22 = objc_allocWithZone((Class)PKStrokeProvider);
    isa = PKDrawing._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v24 = objc_msgSend(v22, "initWithDrawing:", isa);

    if (v24)
    {
      v25 = objc_msgSend(v24, "orderedStrokes");
      v26 = sub_1004B804C((uint64_t *)&unk_1013F4A70);
      v27 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v25, v26);

      v21 = v25;
      v20 = &selRef_imageByApplyingSymbolConfiguration_;
    }
    else
    {
      v27 = (uint64_t)_swiftEmptyArrayStorage;
    }

  }
  else
  {
    v27 = (uint64_t)_swiftEmptyArrayStorage;
  }
  if ((unint64_t)v27 >> 62)
  {
    v59 = v27 < 0 ? v27 : v27 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v27);
    v28 = _CocoaArrayWrapper.endIndex.getter(v59);
    swift_bridgeObjectRelease();
  }
  else
  {
    v28 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  v29 = OBJC_IVAR____TtC8Freeform30MathExpressionEvaluationResult_drawing;
  v30 = *(void **)&v9[OBJC_IVAR____TtC8Freeform30MathExpressionEvaluationResult_drawing];
  if (v30)
  {
    v62 = v28;
    v31 = v30;
    static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)(v30);
    v32 = objc_allocWithZone((Class)PKStrokeProvider);
    v33 = PKDrawing._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v34 = objc_msgSend(v32, v20[20], v33);

    if (v34)
    {
      v35 = objc_msgSend(v34, "orderedStrokes");
      v36 = sub_1004B804C((uint64_t *)&unk_1013F4A70);
      v37 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v35, v36);

      v31 = v35;
    }
    else
    {
      v37 = (uint64_t)_swiftEmptyArrayStorage;
    }

    v28 = v62;
  }
  else
  {
    v37 = (uint64_t)_swiftEmptyArrayStorage;
  }
  if ((unint64_t)v37 >> 62)
  {
    v60 = v37 < 0 ? v37 : v37 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v37);
    v38 = _CocoaArrayWrapper.endIndex.getter(v60);
    swift_bridgeObjectRelease();
  }
  else
  {
    v38 = *(_QWORD *)((v37 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  *(_QWORD *)&v39 = swift_bridgeObjectRelease().n128_u64[0];
  if (v28 != v38)
  {
LABEL_30:

    return 0;
  }
  v40 = *(void **)(v2 + v63);
  if (!v40)
  {
    x = CGRectNull.origin.x;
    y = CGRectNull.origin.y;
    width = CGRectNull.size.width;
    height = CGRectNull.size.height;
    v49 = *(void **)&v9[v29];
    if (v49)
      goto LABEL_29;
LABEL_33:
    v51 = CGRectNull.origin.x;
    v53 = CGRectNull.origin.y;
    v55 = CGRectNull.size.width;
    v57 = CGRectNull.size.height;
    goto LABEL_34;
  }
  objc_msgSend(v40, "bounds", v39);
  x = v41;
  y = v43;
  width = v45;
  height = v47;
  v49 = *(void **)&v9[v29];
  if (!v49)
    goto LABEL_33;
LABEL_29:
  objc_msgSend(v49, "bounds");
  v51 = v50;
  v53 = v52;
  v55 = v54;
  v57 = v56;
LABEL_34:

  return sub_10005FF70(x, y, width, height, v51, v53, v55, v57);
}

uint64_t type metadata accessor for MathExpressionEvaluationResult()
{
  return objc_opt_self(_TtC8Freeform30MathExpressionEvaluationResult);
}

void sub_100805094(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  char v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD v32[5];

  v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_builders);
  if ((v5 & 0xC000000000000001) != 0)
  {
    if (v5 < 0)
      v6 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_builders);
    else
      v6 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v7 = __CocoaSet.makeIterator()(v6);
    v8 = type metadata accessor for CRLiOSMiniFormatterBuilder();
    v9 = sub_1004B7878(&qword_1013F4B40, (uint64_t (*)(uint64_t))type metadata accessor for CRLiOSMiniFormatterBuilder, (uint64_t)&protocol conformance descriptor for NSObject);
    v10 = Set.Iterator.init(_cocoa:)(v32, v7, v8, v9);
    v5 = v32[0];
    v29 = v32[1];
    v11 = v32[2];
    v12 = v32[3];
    v13 = v32[4];
  }
  else
  {
    v14 = -1 << *(_BYTE *)(v5 + 32);
    v29 = v5 + 56;
    v11 = ~v14;
    v15 = -v14;
    if (v15 < 64)
      v16 = ~(-1 << v15);
    else
      v16 = -1;
    v13 = v16 & *(_QWORD *)(v5 + 56);
    swift_bridgeObjectRetain(v5);
    v12 = 0;
  }
  v28 = (unint64_t)(v11 + 64) >> 6;
  while (1)
  {
    v21 = v12;
    if ((v5 & 0x8000000000000000) == 0)
      break;
    v25 = __CocoaSet.Iterator.next()(v10);
    if (!v25)
      goto LABEL_32;
    v26 = v25;
    v30 = v25;
    v27 = type metadata accessor for CRLiOSMiniFormatterBuilder();
    swift_unknownObjectRetain(v26);
    swift_dynamicCast(&v31, &v30, (char *)&type metadata for Swift.AnyObject + 8, v27, 7);
    v19 = v31;
    swift_unknownObjectRelease(v26);
    if (!v19)
      goto LABEL_32;
LABEL_13:
    v20 = (*(uint64_t (**)(uint64_t, uint64_t))((swift_isaMask & *v19) + 0x198))(a1, a2);

    if ((v20 & 1) != 0)
      goto LABEL_32;
  }
  if (v13)
  {
    v17 = __clz(__rbit64(v13));
    v13 &= v13 - 1;
    v18 = v17 | (v12 << 6);
LABEL_12:
    v19 = *(id *)(*(_QWORD *)(v5 + 48) + 8 * v18);
    if (!v19)
      goto LABEL_32;
    goto LABEL_13;
  }
  v22 = v12 + 1;
  if (!__OFADD__(v12, 1))
  {
    if (v22 >= v28)
      goto LABEL_32;
    v23 = *(_QWORD *)(v29 + 8 * v22);
    ++v12;
    if (!v23)
    {
      v12 = v21 + 2;
      if (v21 + 2 >= v28)
        goto LABEL_32;
      v23 = *(_QWORD *)(v29 + 8 * v12);
      if (!v23)
      {
        v12 = v21 + 3;
        if (v21 + 3 >= v28)
          goto LABEL_32;
        v23 = *(_QWORD *)(v29 + 8 * v12);
        if (!v23)
        {
          v12 = v21 + 4;
          if (v21 + 4 >= v28)
            goto LABEL_32;
          v23 = *(_QWORD *)(v29 + 8 * v12);
          if (!v23)
          {
            v24 = v21 + 5;
            while (v28 != v24)
            {
              v23 = *(_QWORD *)(v29 + 8 * v24++);
              if (v23)
              {
                v12 = v24 - 1;
                goto LABEL_29;
              }
            }
LABEL_32:
            sub_1004D284C(v5);
            return;
          }
        }
      }
    }
LABEL_29:
    v13 = (v23 - 1) & v23;
    v18 = __clz(__rbit64(v23)) + (v12 << 6);
    goto LABEL_12;
  }
  __break(1u);
}

void sub_100805370(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  char v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52[24];
  void *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[6];

  v48 = a1;
  v4 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_builders);
  if ((v4 & 0xC000000000000001) != 0)
  {
    if (v4 < 0)
      v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_builders);
    else
      v5 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v6 = __CocoaSet.makeIterator()(v5);
    v7 = type metadata accessor for CRLiOSMiniFormatterBuilder();
    v8 = sub_1004B7878(&qword_1013F4B40, (uint64_t (*)(uint64_t))type metadata accessor for CRLiOSMiniFormatterBuilder, (uint64_t)&protocol conformance descriptor for NSObject);
    v9 = Set.Iterator.init(_cocoa:)(v58, v6, v7, v8);
    v4 = v58[0];
    v51 = v58[1];
    v10 = v58[2];
    v11 = v58[3];
    v12 = v58[4];
  }
  else
  {
    v13 = -1 << *(_BYTE *)(v4 + 32);
    v51 = v4 + 56;
    v10 = ~v13;
    v14 = -v13;
    if (v14 < 64)
      v15 = ~(-1 << v14);
    else
      v15 = -1;
    v12 = v15 & *(_QWORD *)(v4 + 56);
    swift_bridgeObjectRetain(v4);
    v11 = 0;
  }
  v49 = (unint64_t)(v10 + 64) >> 6;
  v50 = v4;
  if ((v4 & 0x8000000000000000) == 0)
    goto LABEL_13;
LABEL_31:
  v23 = __CocoaSet.Iterator.next()(v9);
  if (!v23)
    goto LABEL_50;
  v24 = v23;
  v53 = (void *)v23;
  v25 = type metadata accessor for CRLiOSMiniFormatterBuilder();
  swift_unknownObjectRetain(v24);
  swift_dynamicCast(&v54, &v53, (char *)&type metadata for Swift.AnyObject + 8, v25, 7);
  v22 = v54;
  swift_unknownObjectRelease(v24);
  v18 = v11;
  v16 = v12;
  if (!v22)
    goto LABEL_50;
  while (1)
  {
    sub_1004CB6E8(a2, (uint64_t)&v54);
    v26 = type metadata accessor for CRLBoardItem(0);
    if (swift_dynamicCast(&v53, &v54, (char *)&type metadata for Any + 8, v26, 6))
    {
      v27 = a2;
      v28 = v53;
      v29 = *(void **)(*(_QWORD *)&v22[OBJC_IVAR____TtC8Freeform26CRLiOSMiniFormatterBuilder_boardItemDataProvider]
                     + OBJC_IVAR____TtC8Freeform28CRLMiniFormatterDataProvider_editorController);
      v30 = sub_1004B8930(0, (unint64_t *)&qword_1013E5AE0, off_1012297D8);
      v32 = v30 ? swift_getObjCClassFromMetadata(v30, v31) : 0;
      v33 = objc_msgSend(v29, "mostSpecificCurrentEditorOfClass:", v32, v48);
      v34 = objc_opt_self(CRLBoardItemEditor);
      v35 = (void *)swift_dynamicCastObjCClass(v33, v34);
      if (v35)
      {
        v36 = objc_msgSend(v35, "boardItems");
        swift_unknownObjectRelease(v33);
        v37 = sub_1004B7878((unint64_t *)&qword_1013E4190, type metadata accessor for CRLBoardItem, (uint64_t)&protocol conformance descriptor for NSObject);
        v38 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v36, v26, v37);

        v39 = sub_100622190(v28, v38);
        swift_bridgeObjectRelease(v38);
        if ((v39 & 1) != 0)
        {
          v40 = *(char **)(v48 + OBJC_IVAR____TtC8Freeform15CRLChangeRecord_details);
          v41 = &v40[OBJC_IVAR____TtC8Freeform14CRLPropertyMap_data];
          v42 = v40;
          swift_beginAccess(v41, v52, 0, 0);
          v43 = *(_QWORD *)v41;
          if (*(_QWORD *)(*(_QWORD *)v41 + 16))
          {
            v44 = sub_100843260(7);
            if ((v45 & 1) != 0)
              goto LABEL_51;
          }
          v54 = 0;
          v55 = 0;
          v56 = 0;
          v57 = 1;
          sub_100607CA8((uint64_t)&v54);
          v43 = *(_QWORD *)v41;
          if (*(_QWORD *)(*(_QWORD *)v41 + 16))
          {
            v44 = sub_100843260(6);
            if ((v46 & 1) != 0)
              goto LABEL_51;
          }
          v54 = 0;
          v55 = 0;
          v56 = 0;
          v57 = 1;
          sub_100607CA8((uint64_t)&v54);
          v43 = *(_QWORD *)v41;
          if (*(_QWORD *)(*(_QWORD *)v41 + 16))
          {
            v44 = sub_100843260(51);
            if ((v47 & 1) != 0)
            {
LABEL_51:
              sub_1004F370C(*(_QWORD *)(v43 + 56) + 32 * v44, (uint64_t)&v54);
              sub_100607CA8((uint64_t)&v54);

              sub_1004D284C(v50);
              return;
            }
          }
          v54 = 0;
          v55 = 0;
          v56 = 0;
          v57 = 1;
          sub_100607CA8((uint64_t)&v54);

        }
        else
        {

        }
      }
      else
      {

        v9 = (_QWORD *)swift_unknownObjectRelease(v33);
      }
      v11 = v18;
      v12 = v16;
      a2 = v27;
      v4 = v50;
      if (v50 < 0)
        goto LABEL_31;
    }
    else
    {

      v11 = v18;
      v12 = v16;
      if (v4 < 0)
        goto LABEL_31;
    }
LABEL_13:
    if (!v12)
      break;
    v16 = (v12 - 1) & v12;
    v17 = __clz(__rbit64(v12)) | (v11 << 6);
    v18 = v11;
LABEL_29:
    v22 = (char *)*(id *)(*(_QWORD *)(v4 + 48) + 8 * v17);
    if (!v22)
      goto LABEL_50;
  }
  v19 = v11 + 1;
  if (__OFADD__(v11, 1))
  {
    __break(1u);
    return;
  }
  if (v19 >= v49)
    goto LABEL_50;
  v20 = *(_QWORD *)(v51 + 8 * v19);
  v18 = v11 + 1;
  if (v20)
    goto LABEL_28;
  v18 = v11 + 2;
  if (v11 + 2 >= v49)
    goto LABEL_50;
  v20 = *(_QWORD *)(v51 + 8 * v18);
  if (v20)
    goto LABEL_28;
  v18 = v11 + 3;
  if (v11 + 3 >= v49)
    goto LABEL_50;
  v20 = *(_QWORD *)(v51 + 8 * v18);
  if (v20)
    goto LABEL_28;
  v18 = v11 + 4;
  if (v11 + 4 >= v49)
    goto LABEL_50;
  v20 = *(_QWORD *)(v51 + 8 * v18);
  if (v20)
  {
LABEL_28:
    v16 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v18 << 6);
    goto LABEL_29;
  }
  v21 = v11 + 5;
  while (v49 != v21)
  {
    v20 = *(_QWORD *)(v51 + 8 * v21++);
    if (v20)
    {
      v18 = v21 - 1;
      goto LABEL_28;
    }
  }
LABEL_50:
  sub_1004D284C(v4);
}

void sub_1008058B4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  void *v17;
  id v18;

  v1 = v0;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_repTrackingViewHelper);
  if (v2)
  {
    v3 = v2;
    sub_10070DE84();

  }
  v4 = sub_1004BB5A4((_QWORD *)(v1 + OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_delegate), *(_QWORD *)(v1 + OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_delegate + 24));
  v5 = *v4;
  v6 = OBJC_IVAR____TtC8Freeform28CRLiOSMiniFormatterPresenter_presentedNavigationController;
  v7 = *(void **)(*v4 + OBJC_IVAR____TtC8Freeform28CRLiOSMiniFormatterPresenter_presentedNavigationController);
  if (v7)
  {
    v8 = objc_msgSend(v7, "topViewController");
    if (v8)
    {
      v18 = v8;
      v9 = type metadata accessor for CRLiOSMiniFormatterPopoverContainerViewController();
      v10 = swift_dynamicCastClass(v18, v9);
      if (!v10)
      {
LABEL_14:

        return;
      }
      v11 = *(void **)(v10 + OBJC_IVAR____TtC8Freeform49CRLiOSMiniFormatterPopoverContainerViewController_builder);
      v12 = v11;

      if (v11)
      {

        v13 = *(void **)(v5 + v6);
        if (v13)
        {
          v18 = v13;
          v14 = objc_msgSend(v18, "visibleViewController");
          if (v14)
          {
            v15 = v14;
            v16 = swift_dynamicCastClass(v14, v9);
            if (v16)
            {
              sub_1005C0654(v16, 0);
              v17 = v18;
              v18 = v15;
            }
            else
            {
              v17 = v15;
            }

          }
          goto LABEL_14;
        }
      }
    }
  }
}

void sub_100805A00()
{
  qword_1013F4A90 = 0x4046000000000000;
}

void sub_100805B9C()
{
  char *v0;
  char *v1;
  uint64_t ObjectType;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  Class isa;
  uint64_t v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  Class v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;

  v1 = v0;
  ObjectType = swift_getObjectType(v0);
  v3 = *(void **)&v0[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_contentView];
  v4 = objc_msgSend(v3, "layer");
  if (qword_1013DD248 != -1)
    swift_once(&qword_1013DD248, sub_100805A00);
  objc_msgSend(v4, "setCornerRadius:", *(double *)&qword_1013F4A90 * 0.5);

  v5 = objc_msgSend(v3, "layer");
  objc_msgSend(v5, "setCornerCurve:", kCACornerCurveContinuous);

  v6 = objc_msgSend((id)objc_opt_self(UIColor), "systemBackgroundColor");
  objc_msgSend(v3, "setBackgroundColor:", v6);

  v7 = objc_msgSend(v3, "layer");
  objc_msgSend(v7, "crl_applyDefaultCanvasOverlayUIShadowSettings");

  objc_msgSend(v3, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v8 = *(void **)&v1[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_stackViewForDisplay];
  objc_msgSend(v8, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v8, "setAccessibilityElementsHidden:", 1);
  v9 = objc_msgSend(v1, "view");
  if (!v9)
  {
    __break(1u);
    goto LABEL_8;
  }
  v10 = v9;
  v47 = ObjectType;
  objc_msgSend(v9, "addSubview:", v3);

  objc_msgSend(v3, "addSubview:", v8);
  v11 = sub_1004B804C((uint64_t *)&unk_1013E4180);
  v12 = swift_allocObject(v11, 56, 7);
  *(_OWORD *)(v12 + 16) = xmmword_100EF7300;
  v13 = objc_msgSend(v1, "view");
  if (!v13)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v14 = v13;
  v46 = v11;
  v15 = objc_msgSend(v13, "topAnchor");

  v16 = objc_msgSend(v3, "topAnchor");
  v17 = objc_msgSend(v15, "constraintEqualToAnchor:", v16);

  *(_QWORD *)(v12 + 32) = v17;
  v18 = objc_msgSend(v8, "heightAnchor");
  v19 = objc_msgSend(v18, "constraintEqualToConstant:", *(double *)&qword_1013F4A90);

  *(_QWORD *)(v12 + 40) = v19;
  v20 = objc_msgSend(v1, "view");
  if (v20)
  {
    v21 = v20;
    v45 = (id)objc_opt_self(NSLayoutConstraint);
    v22 = objc_msgSend(v21, "leftAnchor");

    v23 = objc_msgSend(v3, "leftAnchor");
    v24 = objc_msgSend(v22, "constraintEqualToAnchor:", v23);

    *(_QWORD *)(v12 + 48) = v24;
    specialized Array._endMutation()(v25);
    sub_1004B8930(0, (unint64_t *)&qword_1013E1760, NSLayoutConstraint_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v45, "activateConstraints:", isa, swift_bridgeObjectRelease().n128_f64[0]);

    v27 = swift_allocObject(v46, 64, 7);
    *(_OWORD *)(v27 + 16) = xmmword_100EF7310;
    v28 = objc_msgSend(v3, "topAnchor");
    v29 = objc_msgSend(v8, "topAnchor");
    v30 = objc_msgSend(v28, "constraintEqualToAnchor:", v29);

    *(_QWORD *)(v27 + 32) = v30;
    v31 = objc_msgSend(v3, "bottomAnchor");
    v32 = objc_msgSend(v8, "bottomAnchor");
    v33 = objc_msgSend(v31, "constraintEqualToAnchor:", v32);

    *(_QWORD *)(v27 + 40) = v33;
    v34 = objc_msgSend(v3, "leadingAnchor");
    v35 = objc_msgSend(v8, "leadingAnchor");
    v36 = objc_msgSend(v34, "constraintEqualToAnchor:constant:", v35, -*(double *)&v1[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_leadingMargin]);

    *(_QWORD *)(v27 + 48) = v36;
    v37 = objc_msgSend(v3, "trailingAnchor");
    v38 = objc_msgSend(v8, "trailingAnchor");
    v39 = objc_msgSend(v37, "constraintEqualToAnchor:constant:", v38, *(double *)&v1[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_trailingMargin]);

    *(_QWORD *)(v27 + 56) = v39;
    specialized Array._endMutation()(v40);
    v41 = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v45, "activateConstraints:", v41, swift_bridgeObjectRelease().n128_f64[0]);

    sub_100806364();
    v42 = sub_1004B804C((uint64_t *)&unk_1013F9B80);
    v43 = swift_allocObject(v42, 80, 7);
    *(_OWORD *)(v43 + 16) = xmmword_100EF5550;
    *(_QWORD *)(v43 + 32) = type metadata accessor for UITraitHorizontalSizeClass(0);
    *(_QWORD *)(v43 + 40) = &protocol witness table for UITraitHorizontalSizeClass;
    *(_QWORD *)(v43 + 48) = type metadata accessor for UITraitVerticalSizeClass(0);
    *(_QWORD *)(v43 + 56) = &protocol witness table for UITraitVerticalSizeClass;
    *(_QWORD *)(v43 + 64) = type metadata accessor for UITraitUserInterfaceStyle(0);
    *(_QWORD *)(v43 + 72) = &protocol witness table for UITraitUserInterfaceStyle;
    v44 = UIViewController.registerForTraitChanges<A>(_:handler:)(v43, sub_10080A70C, 0, v47);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease(v44);
    return;
  }
LABEL_9:
  __break(1u);
}

void sub_100806364()
{
  char *v0;
  char *v1;
  id v2;
  unsigned __int8 v3;
  void *v4;
  id v5;
  void *v6;
  objc_class *v7;
  char *v8;
  char *v9;
  char *v10;
  double v11;
  id v12;
  void *v13;
  void *v14;
  char v15;
  id v16;
  void *v17;
  double v18;
  uint64_t v19;
  char *v20;
  id v21;
  uint64_t v22;
  void *v23;
  void *v24;
  id v25;
  objc_super v26;

  v1 = v0;
  v2 = objc_msgSend(v0, "traitCollection");
  if (objc_msgSend((id)objc_opt_self(UIDevice), "crl_phoneUI"))
  {

LABEL_4:
    v4 = *(void **)&v1[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_repTrackingViewHelper];
    *(_QWORD *)&v1[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_repTrackingViewHelper] = 0;

    v5 = objc_msgSend(v1, "view");
    if (v5)
    {
      v6 = v5;
      v7 = (objc_class *)type metadata accessor for CRLMiniFormatterDynamicOperationViewHelper();
      v8 = (char *)objc_allocWithZone(v7);
      v9 = &v8[OBJC_IVAR____TtC8Freeform42CRLMiniFormatterDynamicOperationViewHelper_view];
      swift_unknownObjectWeakInit(&v8[OBJC_IVAR____TtC8Freeform42CRLMiniFormatterDynamicOperationViewHelper_view]);
      v10 = &v8[OBJC_IVAR____TtC8Freeform42CRLMiniFormatterDynamicOperationViewHelper_delegate];
      *((_QWORD *)v10 + 1) = 0;
      swift_unknownObjectWeakInit(v10);
      swift_unknownObjectWeakAssign(v9, v6);
      *((_QWORD *)v10 + 1) = &off_1012808C0;
      *(_QWORD *)&v11 = swift_unknownObjectWeakAssign(v10, v1).n128_u64[0];
      v26.receiver = v8;
      v26.super_class = v7;
      v12 = objc_msgSendSuper2(&v26, "init", v11);

      v13 = *(void **)&v1[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_fixedPositionDynamicOperationViewHelper];
      *(_QWORD *)&v1[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_fixedPositionDynamicOperationViewHelper] = v12;

      return;
    }
    __break(1u);
LABEL_14:
    __break(1u);
    return;
  }
  v3 = objc_msgSend(v2, "crl_isCompactWidth");

  if ((v3 & 1) != 0)
    goto LABEL_4;
  v14 = *(void **)&v1[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_fixedPositionDynamicOperationViewHelper];
  *(_QWORD *)&v1[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_fixedPositionDynamicOperationViewHelper] = 0;

  sub_1004BB5A4(&v1[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_delegate], *(_QWORD *)&v1[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_delegate + 24]);
  v15 = sub_1005C157C();
  v16 = objc_msgSend(v1, "view");
  if (!v16)
    goto LABEL_14;
  v17 = v16;
  if ((v15 & 1) != 0)
    v18 = 49.0;
  else
    v18 = 16.0;
  v19 = *(_QWORD *)&v1[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_reps];
  objc_allocWithZone((Class)type metadata accessor for CRLRepTrackingMiniFormatterViewHelper());
  swift_bridgeObjectRetain(v19);
  v20 = v1;
  v21 = sub_10070EFB0((uint64_t)v17, v19, (uint64_t)v1, (uint64_t)&off_1012808E0, v18);

  v22 = OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_repTrackingViewHelper;
  v23 = *(void **)&v20[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_repTrackingViewHelper];
  *(_QWORD *)&v20[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_repTrackingViewHelper] = v21;

  v24 = *(void **)&v20[v22];
  if (v24)
  {
    v25 = v24;
    sub_10070DE84();

  }
}

void sub_1008065E4()
{
  char *v0;
  id v1;
  void *v2;
  id v3;
  void *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  objc_super v11;

  v11.receiver = v0;
  v11.super_class = (Class)type metadata accessor for CRLiOSMiniFormatterViewController();
  objc_msgSendSuper2(&v11, "viewWillLayoutSubviews");
  if ((v0[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_isAnimatingHide] & 1) == 0
    && (v0[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_isAnimatingDisplay] & 1) == 0)
  {
    v1 = objc_msgSend(v0, "view");
    if (v1)
    {
      v2 = v1;
      v3 = objc_msgSend(v0, "view");
      if (v3)
      {
        v4 = v3;
        objc_msgSend(v3, "frame");
        v6 = v5;
        v8 = v7;

        objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_contentView], "systemLayoutSizeFittingSize:", UILayoutFittingCompressedSize.width, UILayoutFittingCompressedSize.height);
        objc_msgSend(v2, "setFrame:", v6, v8, v9, v10);

        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
}

void sub_100806724(SEL *a1, char **a2, int a3)
{
  char *v3;
  double v4;
  char *v5;
  uint64_t v8;
  char **v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  SEL *v21;
  uint64_t v22;
  char **v23;
  id v24;
  uint64_t v25;
  id v26;
  char v27;
  void *v28;
  id v29;
  id v30;
  void *v31;
  char **v32;
  id v33;
  char **v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  SEL *v40;
  UIAccessibilityNotifications v41;
  unsigned int v42;
  id v43;
  void *v44;
  void *v45;
  char *v46;
  __n128 v47;
  char *v48;
  uint64_t v49;
  void *v50;
  void *v51;
  uint64_t v52;
  char *v53;
  __n128 v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  char **v61;
  id v62;
  void *v63;
  id v64;
  void *v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  NSString v72;
  id v73;
  id v74;
  Class isa;
  Class v76;
  id v77;
  void *v78;
  id v79;
  NSString v80;
  NSString v81;
  id v82;
  id v83;
  double v84;
  double v85;
  double v86;
  double v87;
  id v88;
  Class v89;
  Class v90;
  id v91;
  void *v92;
  id v93;
  NSString v94;
  id v95;
  void *v96;
  id v97;
  double v98;
  id v99;
  uint64_t v100;
  id v101;
  uint64_t v102;
  uint64_t i;
  id v104;
  void *v105;
  unsigned int v106;
  char *v107;
  __n128 v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  char *v112;
  __n128 v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  void *v122;
  uint64_t v123;
  unsigned int v124;
  id v125;
  void *v126;
  id v127;
  void *v128;
  char *v129;
  __n128 v130;
  uint64_t v131;
  id v132;
  void *v133;
  id v134;
  void *v135;
  double v136;
  double v137;
  double v138;
  double v139;
  double v140;
  double v141;
  id v142;
  void *v143;
  id v144;
  void *v145;
  id v146;
  void *v147;
  double v148;
  double v149;
  double v150;
  double v151;
  double v152;
  double v153;
  void *v154;
  NSString v155;
  id v156;
  id v157;
  id v158;
  double v159;
  double v160;
  double v161;
  double v162;
  id v163;
  Class v164;
  Class v165;
  id v166;
  void *v167;
  id v168;
  NSString v169;
  uint64_t v170;
  void *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  void *v176;
  double v177;
  id v178;
  id v179;
  unsigned __int8 v180;
  char *v181;
  uint64_t Strong;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  void *v187;
  id v188;
  char *v189;
  uint64_t v190;
  void *v191;
  uint64_t v192;
  uint64_t v193;
  char **v194;
  char *v195;
  uint64_t v196;
  char *v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  id v203;
  id v204;
  void **aBlock;
  uint64_t v206;
  double (*v207)(uint64_t);
  void *v208;
  void (*v209)();
  uint64_t v210;

  v5 = v3;
  LODWORD(v203) = a3;
  v201 = type metadata accessor for DispatchWorkItemFlags(0);
  v199 = *(_QWORD *)(v201 - 8);
  __chkstk_darwin(v201);
  v197 = (char *)&v192 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (char **)type metadata accessor for DispatchQoS(0);
  v200 = (uint64_t)*(v9 - 1);
  __chkstk_darwin(v9);
  v198 = (char *)&v192 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (_QWORD *)type metadata accessor for DispatchTime(0);
  v196 = *(v11 - 1);
  __chkstk_darwin(v11);
  v195 = (char *)&v192 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v14 = __chkstk_darwin(v13).n128_u64[0];
  v202 = (char *)&v192 - v15;
  v16 = &selRef_transformGuides_forLayout_;
  v17 = (uint64_t)-[SEL view](a1, "view", v14);
  v18 = objc_msgSend(v5, "view");
  if (!v18)
  {
LABEL_94:

    __break(1u);
    goto LABEL_95;
  }
  v19 = v18;
  v20 = objc_msgSend(v18, "superview");

  v21 = (SEL *)&selRef_startAnimation;
  v22 = (uint64_t)RPTTestRunner_ptr;
  v23 = &selRef_computeAlignmentFrameInRoot_;
  v194 = v9;
  v204 = v11;
  if (v20)
  {
    if (v17)
    {
      sub_1004B8930(0, (unint64_t *)&qword_1013DFC10, UIView_ptr);
      v24 = (id)v17;
      v9 = &selRef_computeAlignmentFrameInRoot_;
      v25 = v17;
      v26 = v20;
      v21 = (SEL *)&selRef_startAnimation;
      v16 = &selRef_transformGuides_forLayout_;
      v27 = static NSObject.== infix(_:_:)(v26, v24);

      v17 = v25;
      v23 = &selRef_computeAlignmentFrameInRoot_;

      if ((v27 & 1) != 0)
        goto LABEL_81;
    }
    else
    {

    }
  }
  else if (!v17)
  {
LABEL_81:
    v179 = objc_msgSend(v5, v21[490]);
    if (objc_msgSend((id)objc_opt_self(*(_QWORD *)(v22 + 344)), v23[429]))
    {

    }
    else
    {
      v180 = objc_msgSend(v179, "crl_isCompactWidth");

      if ((v180 & 1) == 0)
      {
        v189 = *(char **)&v5[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_repTrackingViewHelper];
        if (!v189)
          goto LABEL_89;
        v190 = *(_QWORD *)&v189[OBJC_IVAR____TtC8Freeform37CRLRepTrackingMiniFormatterViewHelper_reps];
        swift_bridgeObjectRetain(v190);
        v185 = v189;
        v191 = (void *)sub_100857EA4(v190);
        v188 = objc_msgSend(v191, "interactiveCanvasController", swift_bridgeObjectRelease(v190).n128_f64[0]);

        if (!v188)
        {
LABEL_88:

LABEL_89:
          return;
        }
LABEL_87:
        objc_msgSend(v188, "addDecorator:", v185);

        v185 = (char *)v17;
        v17 = (uint64_t)v188;
        goto LABEL_88;
      }
    }
    v181 = *(char **)&v5[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_fixedPositionDynamicOperationViewHelper];
    if (!v181)
      goto LABEL_89;
    Strong = swift_unknownObjectWeakLoadStrong(&v181[OBJC_IVAR____TtC8Freeform42CRLMiniFormatterDynamicOperationViewHelper_delegate]);
    if (!Strong)
      goto LABEL_89;
    v183 = Strong;
    v184 = *(_QWORD *)(Strong + OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_reps);
    v185 = v181;
    swift_bridgeObjectRetain(v184);
    v187 = (void *)sub_100857EA4(v186);
    v188 = objc_msgSend(v187, "interactiveCanvasController", swift_bridgeObjectRelease(v184).n128_f64[0]);
    swift_unknownObjectRelease(v183);

    if (!v188)
      goto LABEL_88;
    goto LABEL_87;
  }
  v28 = (void *)OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_isAnimatingDisplay;
  v5[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_isAnimatingDisplay] = 1;
  v29 = objc_msgSend(v5, v16[271]);
  objc_msgSend(v29, "removeFromSuperview");

  if (v17)
  {
    v9 = a2;
    a1 = (SEL *)(id)v17;
    v30 = objc_msgSend(v5, v16[271]);
    if (!v30)
    {
LABEL_95:

      __break(1u);
LABEL_96:

      __break(1u);
LABEL_97:

      __break(1u);
      goto LABEL_98;
    }
    v31 = v30;
    -[SEL addSubview:](a1, "addSubview:", v30);

    v21 = (SEL *)&selRef_startAnimation;
  }
  if ((a2 & 1) == 0)
    goto LABEL_23;
  if (!UIAccessibilityIsReduceMotionEnabled())
  {
    v34 = v16;
    v35 = objc_msgSend(v5, "traitCollection");
    if (objc_msgSend((id)objc_opt_self(UIDevice), "crl_phoneUI"))
    {

    }
    else
    {
      v42 = objc_msgSend(v35, "crl_isCompactWidth");

      if (!v42)
      {
        v61 = v34;
        v62 = objc_msgSend(v5, v34[271]);
        if (!v62)
        {
LABEL_98:

          __break(1u);
          goto LABEL_99;
        }
        v63 = v62;
        v64 = objc_msgSend(v5, v34[271]);
        if (!v64)
        {
LABEL_99:

          __break(1u);
          goto LABEL_100;
        }
        v65 = v64;
        v204 = (id)v17;
        objc_msgSend(v64, "frame");
        v67 = v66;
        v69 = v68;

        objc_msgSend(*(id *)&v5[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_contentView], "systemLayoutSizeFittingSize:", UILayoutFittingCompressedSize.width, UILayoutFittingCompressedSize.height);
        objc_msgSend(v63, "setFrame:", v67, v69, v70, v71);

        sub_100809E20();
        v203 = (id)objc_opt_self(CATransaction);
        objc_msgSend(v203, "begin");
        v72 = String._bridgeToObjectiveC()();
        v73 = objc_msgSend((id)objc_opt_self(CASpringAnimation), "animationWithKeyPath:", v72);

        objc_msgSend(v73, "setMass:", 1.0);
        objc_msgSend(v73, "setStiffness:", 500.0);
        objc_msgSend(v73, "setDamping:", 33.0);
        objc_msgSend(v73, "setInitialVelocity:", 0.0);
        v74 = v73;
        objc_msgSend(v74, "settlingDuration");
        objc_msgSend(v74, "setDuration:");

        v9 = (char **)v74;
        isa = Double._bridgeToObjectiveC()().super.super.isa;
        objc_msgSend(v9, "setFromValue:", isa);

        v76 = Double._bridgeToObjectiveC()().super.super.isa;
        objc_msgSend(v9, "setToValue:", v76);

        v77 = objc_msgSend(v5, v61[271]);
        if (!v77)
        {
LABEL_100:

          __break(1u);
          goto LABEL_101;
        }
        v78 = v77;
        v17 = (uint64_t)&selRef_isLineSegment;
        v79 = objc_msgSend(v77, "layer");

        v80 = String._bridgeToObjectiveC()();
        objc_msgSend(v79, "addAnimation:forKey:", v9, v80);

        v81 = String._bridgeToObjectiveC()();
        v82 = objc_msgSend((id)objc_opt_self(CABasicAnimation), "animationWithKeyPath:", v81);

        v83 = objc_allocWithZone((Class)CAMediaTimingFunction);
        v21 = (SEL *)v82;
        LODWORD(v84) = 1045220557;
        LODWORD(v85) = 0;
        LODWORD(v86) = 0.25;
        LODWORD(v87) = 1.0;
        v88 = objc_msgSend(v83, "initWithControlPoints::::", v84, v85, v86, v87);
        -[SEL setTimingFunction:](v21, "setTimingFunction:", v88);

        -[SEL setDuration:](v21, "setDuration:", 0.08);
        v89 = Int._bridgeToObjectiveC()().super.super.isa;
        -[SEL setFromValue:](v21, "setFromValue:", v89);

        v90 = Double._bridgeToObjectiveC()().super.super.isa;
        -[SEL setToValue:](v21, "setToValue:", v90);

        v91 = objc_msgSend(v5, v61[271]);
        if (!v91)
        {
LABEL_101:

          __break(1u);
          goto LABEL_102;
        }
        v92 = v91;
        v93 = objc_msgSend(v91, "layer");

        v94 = String._bridgeToObjectiveC()();
        objc_msgSend(v93, "addAnimation:forKey:", v21, v94);

        v95 = objc_msgSend(v5, v61[271]);
        if (!v95)
        {
LABEL_102:

          __break(1u);
          goto LABEL_103;
        }
        v96 = v95;
        v97 = objc_msgSend(v95, "layer");

        objc_msgSend(v97, "convertTime:fromLayer:", 0, CACurrentMediaTime());
        v4 = v98;

        v28 = *(void **)&v5[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_stackViewForDisplay];
        a1 = (SEL *)&selRef_alignToOrigin;
        v99 = objc_msgSend(v28, "arrangedSubviews");
        v17 = sub_1004B8930(0, (unint64_t *)&qword_1013DFC10, UIView_ptr);
        v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v99, v17);

        if (!((unint64_t)v22 >> 62))
        {
          v100 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
          goto LABEL_42;
        }
LABEL_72:
        if (v22 < 0)
          v173 = v22;
        else
          v173 = v22 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v22);
        v100 = _CocoaArrayWrapper.endIndex.getter(v173);
        swift_bridgeObjectRelease(v22);
LABEL_42:
        v101 = objc_msgSend(v28, a1[194], swift_bridgeObjectRelease(v22).n128_f64[0]);
        v102 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v101, v17);

        if ((unint64_t)v102 >> 62)
        {
          if (v102 < 0)
            v174 = v102;
          else
            v174 = v102 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v102);
          v17 = _CocoaArrayWrapper.endIndex.getter(v174);
          if (v17)
            goto LABEL_44;
        }
        else
        {
          v17 = *(_QWORD *)((v102 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain(v102);
          if (v17)
          {
LABEL_44:
            if (v17 >= 1)
            {
              for (i = 0; i != v17; ++i)
              {
                if ((v102 & 0xC000000000000001) != 0)
                  v104 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v102);
                else
                  v104 = *(id *)(v102 + 8 * i + 32);
                v105 = v104;
                sub_100807FE8(i, v104, (uint64_t)v5, v100, v4);

              }
              goto LABEL_80;
            }
            __break(1u);
            goto LABEL_94;
          }
        }
LABEL_80:
        swift_bridgeObjectRelease_n(v102, 2);
        v175 = swift_allocObject(&unk_1012809E0, 24, 7);
        swift_unknownObjectWeakInit(v175 + 16);
        v209 = sub_10080ABC0;
        v210 = v175;
        aBlock = _NSConcreteStackBlock;
        v206 = *(_QWORD *)"";
        v207 = sub_1005D2FC0;
        v208 = &unk_101280BB0;
        v176 = _Block_copy(&aBlock);
        *(_QWORD *)&v177 = swift_release(v210).n128_u64[0];
        v178 = v203;
        objc_msgSend(v203, "setCompletionBlock:", v176, v177);
        _Block_release(v176);
        objc_msgSend(v178, "commit");

        v17 = (uint64_t)v204;
        v23 = &selRef_computeAlignmentFrameInRoot_;
        v22 = (uint64_t)RPTTestRunner_ptr;
        v21 = (SEL *)&selRef_startAnimation;
        goto LABEL_81;
      }
    }
    v43 = objc_msgSend(v5, v34[271]);
    if (v43)
    {
      v44 = v43;
      objc_msgSend(v43, "setHidden:", 1);

      sub_1004B8930(0, (unint64_t *)&qword_1013DE090, OS_dispatch_queue_ptr);
      v45 = (void *)static OS_dispatch_queue.main.getter();
      v46 = v195;
      static DispatchTime.now()(v47);
      v48 = v202;
      + infix(_:_:)(v46, UINavigationControllerHideShowBarDuration);
      v203 = *(id *)(v196 + 8);
      ((void (*)(char *, id))v203)(v46, v204);
      v49 = swift_allocObject(&unk_101280BE8, 24, 7);
      *(_QWORD *)(v49 + 16) = v5;
      v209 = sub_10080ABC8;
      v210 = v49;
      aBlock = _NSConcreteStackBlock;
      v206 = *(_QWORD *)"";
      v50 = &unk_101280C00;
LABEL_34:
      v207 = sub_1005D2FC0;
      v208 = v50;
      v51 = _Block_copy(&aBlock);
      v52 = v210;
      v53 = v5;
      v54 = swift_release(v52);
      v55 = v198;
      static DispatchQoS.unspecified.getter(v54);
      aBlock = (void **)_swiftEmptyArrayStorage;
      v56 = sub_1004B7878((unint64_t *)&qword_1013E1D20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v57 = sub_1004B804C((uint64_t *)&unk_1013DFBF0);
      v58 = sub_100503E88();
      v59 = v197;
      v60 = v201;
      dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v57, v58, v201, v56);
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v48, v55, v59, v51);
      _Block_release(v51);

      (*(void (**)(char *, uint64_t))(v199 + 8))(v59, v60);
      (*(void (**)(char *, char **))(v200 + 8))(v55, v194);
      ((void (*)(char *, id))v203)(v48, v204);
      v21 = (SEL *)&selRef_startAnimation;
      v23 = &selRef_computeAlignmentFrameInRoot_;
      v22 = 0x10122A000;
      goto LABEL_81;
    }
    goto LABEL_96;
  }
  if (!UIAccessibilityIsReduceMotionEnabled() || !UIAccessibilityPrefersCrossFadeTransitions())
  {
    if (UIAccessibilityIsReduceMotionEnabled())
    {
      v36 = objc_msgSend(v5, "traitCollection");
      if (objc_msgSend((id)objc_opt_self(UIDevice), "crl_phoneUI"))
      {

      }
      else
      {
        v106 = objc_msgSend(v36, "crl_isCompactWidth");

        if (!v106)
        {
          v132 = objc_msgSend(v5, "view");
          if (!v132)
          {
LABEL_105:

            __break(1u);
            goto LABEL_106;
          }
          v133 = v132;
          v134 = objc_msgSend(v5, "view");
          if (!v134)
          {
LABEL_106:

            __break(1u);
            goto LABEL_107;
          }
          v135 = v134;
          objc_msgSend(v134, "frame");
          v137 = v136;
          v139 = v138;

          objc_msgSend(*(id *)&v5[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_contentView], "systemLayoutSizeFittingSize:", UILayoutFittingCompressedSize.width, UILayoutFittingCompressedSize.height);
          objc_msgSend(v133, "setFrame:", v137, v139, v140, v141);

          sub_100809E20();
          goto LABEL_59;
        }
      }
      sub_1004B8930(0, (unint64_t *)&qword_1013DE090, OS_dispatch_queue_ptr);
      v193 = static OS_dispatch_queue.main.getter();
      v107 = v195;
      static DispatchTime.now()(v108);
      + infix(_:_:)(v107, UINavigationControllerHideShowBarDuration);
      v203 = *(id *)(v196 + 8);
      ((void (*)(char *, id))v203)(v107, v204);
      v109 = swift_allocObject(&unk_101280C38, 24, 7);
      *(_QWORD *)(v109 + 16) = v5;
      v209 = sub_10080ABD0;
      v210 = v109;
      aBlock = _NSConcreteStackBlock;
      v206 = *(_QWORD *)"";
      v207 = sub_1005D2FC0;
      v208 = &unk_101280C50;
      v110 = _Block_copy(&aBlock);
      v111 = v210;
      v112 = v5;
      v113 = swift_release(v111);
      v114 = v198;
      static DispatchQoS.unspecified.getter(v113);
      aBlock = (void **)_swiftEmptyArrayStorage;
      v115 = sub_1004B7878((unint64_t *)&qword_1013E1D20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v116 = sub_1004B804C((uint64_t *)&unk_1013DFBF0);
      v117 = sub_100503E88();
      v118 = v197;
      v119 = v201;
      v120 = v115;
      v21 = (SEL *)&selRef_startAnimation;
      dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v116, v117, v201, v120);
      v121 = v202;
      v122 = (void *)v193;
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v202, v114, v118, v110);
      _Block_release(v110);

      v123 = v119;
      v23 = &selRef_computeAlignmentFrameInRoot_;
      (*(void (**)(char *, uint64_t))(v199 + 8))(v118, v123);
      (*(void (**)(char *, char **))(v200 + 8))(v114, v194);
      ((void (*)(char *, id))v203)(v121, v204);
LABEL_59:
      v142 = objc_msgSend(v5, "view");
      if (v142)
      {
        v143 = v142;
        objc_msgSend(v142, "setHidden:", 0);

        goto LABEL_81;
      }
      goto LABEL_97;
    }
LABEL_23:
    *((_BYTE *)v28 + (_QWORD)v5) = 0;
    if ((v203 & 1) == 0)
      goto LABEL_81;
    v37 = objc_msgSend(*(id *)&v5[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_stackViewForDisplay], "arrangedSubviews");
    v38 = sub_1004B8930(0, (unint64_t *)&qword_1013DFC10, UIView_ptr);
    v39 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v37, v38);

    if ((unint64_t)v39 >> 62)
    {
      if (v39 < 0)
        v172 = v39;
      else
        v172 = v39 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v39);
      a1 = (SEL *)_CocoaArrayWrapper.endIndex.getter(v172);
      swift_bridgeObjectRelease(v39);
      if (!a1)
        goto LABEL_30;
    }
    else
    {
      a1 = *(SEL **)((v39 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!a1)
      {
LABEL_30:
        v41 = UIAccessibilityLayoutChangedNotification;
        swift_bridgeObjectRelease(v39);
        UIAccessibilityPostNotification(v41, a1);

        goto LABEL_81;
      }
    }
    if ((v39 & 0xC000000000000001) != 0)
    {
      v40 = (SEL *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v39);
      goto LABEL_29;
    }
    if (*(_QWORD *)((v39 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v40 = (SEL *)*(id *)(v39 + 32);
LABEL_29:
      a1 = v40;
      goto LABEL_30;
    }
    __break(1u);
    goto LABEL_72;
  }
  v32 = v16;
  v33 = objc_msgSend(v5, "traitCollection");
  if (objc_msgSend((id)objc_opt_self(UIDevice), "crl_phoneUI"))
  {

    goto LABEL_53;
  }
  v124 = objc_msgSend(v33, "crl_isCompactWidth");

  if (v124)
  {
LABEL_53:
    v125 = objc_msgSend(v5, v32[271]);
    if (v125)
    {
      v126 = v125;
      objc_msgSend(v125, "setHidden:", 0);

      v127 = objc_msgSend(v5, v32[271]);
      if (v127)
      {
        v128 = v127;
        objc_msgSend(v127, "setAlpha:", 0.0);

        sub_1004B8930(0, (unint64_t *)&qword_1013DE090, OS_dispatch_queue_ptr);
        v45 = (void *)static OS_dispatch_queue.main.getter();
        v129 = v195;
        static DispatchTime.now()(v130);
        v48 = v202;
        + infix(_:_:)(v129, UINavigationControllerHideShowBarDuration);
        v203 = *(id *)(v196 + 8);
        ((void (*)(char *, id))v203)(v129, v204);
        v131 = swift_allocObject(&unk_101280CB0, 24, 7);
        *(_QWORD *)(v131 + 16) = v5;
        v209 = sub_10080ABE0;
        v210 = v131;
        aBlock = _NSConcreteStackBlock;
        v206 = *(_QWORD *)"";
        v50 = &unk_101280CC8;
        goto LABEL_34;
      }
      goto LABEL_104;
    }
LABEL_103:

    __break(1u);
LABEL_104:

    __break(1u);
    goto LABEL_105;
  }
  v144 = objc_msgSend(v5, v32[271]);
  if (!v144)
  {
LABEL_107:

    __break(1u);
    goto LABEL_108;
  }
  v145 = v144;
  v146 = objc_msgSend(v5, v32[271]);
  if (!v146)
  {
LABEL_108:

    __break(1u);
    goto LABEL_109;
  }
  v147 = v146;
  objc_msgSend(v146, "frame");
  v149 = v148;
  v151 = v150;

  objc_msgSend(*(id *)&v5[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_contentView], "systemLayoutSizeFittingSize:", UILayoutFittingCompressedSize.width, UILayoutFittingCompressedSize.height);
  objc_msgSend(v145, "setFrame:", v149, v151, v152, v153);

  sub_100809E20();
  v154 = (void *)objc_opt_self(CATransaction);
  objc_msgSend(v154, "begin");
  v155 = String._bridgeToObjectiveC()();
  v156 = objc_msgSend((id)objc_opt_self(CABasicAnimation), "animationWithKeyPath:", v155);

  v157 = objc_allocWithZone((Class)CAMediaTimingFunction);
  v158 = v156;
  LODWORD(v159) = 1045220557;
  LODWORD(v160) = 0;
  LODWORD(v161) = 0.25;
  LODWORD(v162) = 1.0;
  v163 = objc_msgSend(v157, "initWithControlPoints::::", v159, v160, v161, v162);
  objc_msgSend(v158, "setTimingFunction:", v163);

  objc_msgSend(v158, "setDuration:", 0.8);
  v164 = Int._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v158, "setFromValue:", v164);

  v165 = Double._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v158, "setToValue:", v165);

  v166 = objc_msgSend(v5, v32[271]);
  if (v166)
  {
    v167 = v166;
    v168 = objc_msgSend(v166, "layer");

    v169 = String._bridgeToObjectiveC()();
    objc_msgSend(v168, "addAnimation:forKey:", v158, v169);

    v170 = swift_allocObject(&unk_1012809E0, 24, 7);
    swift_unknownObjectWeakInit(v170 + 16);
    v209 = sub_10080ABD8;
    v210 = v170;
    aBlock = _NSConcreteStackBlock;
    v206 = *(_QWORD *)"";
    v207 = sub_1005D2FC0;
    v208 = &unk_101280C78;
    v171 = _Block_copy(&aBlock);
    objc_msgSend(v154, "setCompletionBlock:", v171, swift_release(v210).n128_f64[0]);
    _Block_release(v171);
    objc_msgSend(v154, "commit");

    v21 = (SEL *)&selRef_startAnimation;
    goto LABEL_81;
  }
LABEL_109:

  __break(1u);
}

void sub_100807C84(char *a1)
{
  id v2;
  void *v3;
  id v4;
  void *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  id v12;
  void *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  id v22;
  void *v23;
  id v24;
  void *v25;
  uint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  char *v30;
  id v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  char *v35;
  void **v36;
  uint64_t v37;
  void *v38;
  void *v39;
  void (*v40)();
  uint64_t v41;

  v2 = objc_msgSend(a1, "view");
  if (!v2)
  {
    __break(1u);
    goto LABEL_8;
  }
  v3 = v2;
  v4 = objc_msgSend(a1, "view");
  if (!v4)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v5 = v4;
  objc_msgSend(v4, "frame");
  v7 = v6;
  v9 = v8;

  objc_msgSend(*(id *)&a1[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_contentView], "systemLayoutSizeFittingSize:", UILayoutFittingCompressedSize.width, UILayoutFittingCompressedSize.height);
  objc_msgSend(v3, "setFrame:", v7, v9, v10, v11);

  sub_100809E20();
  v12 = objc_msgSend(a1, "view");
  if (!v12)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v13 = v12;
  objc_msgSend(v12, "frame");
  v15 = v14;
  v17 = v16;
  v19 = v18;
  v21 = v20;

  v22 = objc_msgSend(a1, "view");
  if (!v22)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v23 = v22;
  objc_msgSend(v22, "setFrame:", v15, v17 + 100.0, v19, v21);

  v24 = objc_msgSend(a1, "view");
  if (v24)
  {
    v25 = v24;
    objc_msgSend(v24, "setHidden:", 0);

    v26 = swift_allocObject(&unk_101280DA0, 56, 7);
    *(_QWORD *)(v26 + 16) = a1;
    *(double *)(v26 + 24) = v15;
    *(double *)(v26 + 32) = v17;
    *(double *)(v26 + 40) = v19;
    *(double *)(v26 + 48) = v21;
    v27 = objc_allocWithZone((Class)UIViewPropertyAnimator);
    v40 = sub_10080AC24;
    v41 = v26;
    v36 = _NSConcreteStackBlock;
    v37 = *(_QWORD *)"";
    v38 = sub_1005D2FC0;
    v39 = &unk_101280DB8;
    v28 = _Block_copy(&v36);
    v29 = v41;
    v30 = a1;
    swift_release(v29);
    v31 = objc_msgSend(v27, "initWithDuration:dampingRatio:animations:", v28, 0.35, 0.6);
    _Block_release(v28);
    v32 = swift_allocObject(&unk_101280DF0, 24, 7);
    *(_QWORD *)(v32 + 16) = v30;
    v40 = (void (*)())sub_10080ADD0;
    v41 = v32;
    v36 = _NSConcreteStackBlock;
    v37 = *(_QWORD *)"";
    v38 = sub_1006084F4;
    v39 = &unk_101280E08;
    v33 = _Block_copy(&v36);
    v34 = v41;
    v35 = v30;
    objc_msgSend(v31, "addCompletion:", v33, swift_release(v34).n128_f64[0]);
    _Block_release(v33);
    objc_msgSend(v31, "startAnimation");

    return;
  }
LABEL_11:
  __break(1u);
}

void sub_100807F70(void *a1, double a2, double a3, double a4, double a5)
{
  id v9;
  id v10;

  v9 = objc_msgSend(a1, "view");
  if (v9)
  {
    v10 = v9;
    objc_msgSend(v9, "setFrame:", a2, a3, a4, a5);

  }
  else
  {
    __break(1u);
  }
}

void sub_100807FE8(uint64_t a1, id a2, uint64_t a3, uint64_t a4, double a5)
{
  NSString v10;
  id v11;
  id v12;
  id v13;
  Class isa;
  Class v15;
  id v16;
  NSString v17;
  CGAffineTransform v18;
  CGAffineTransform v19;

  objc_msgSend(a2, "transform");
  CGAffineTransformScale(&v18, &v19, 0.75, 0.75);
  v19 = v18;
  objc_msgSend(a2, "setTransform:", &v19);
  v10 = String._bridgeToObjectiveC()();
  v11 = objc_msgSend((id)objc_opt_self(CASpringAnimation), "animationWithKeyPath:", v10);

  objc_msgSend(v11, "setMass:", 1.0);
  objc_msgSend(v11, "setStiffness:", 500.0);
  objc_msgSend(v11, "setDamping:", 33.0);
  objc_msgSend(v11, "setInitialVelocity:", 0.0);
  v12 = v11;
  objc_msgSend(v12, "settlingDuration");
  objc_msgSend(v12, "setDuration:");

  v13 = v12;
  isa = Double._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v13, "setFromValue:", isa);

  v15 = Double._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v13, "setToValue:", v15);

  objc_msgSend(v13, "setRemovedOnCompletion:", 0);
  objc_msgSend(v13, "setFillMode:", kCAFillModeForwards);
  if (*(uint64_t *)(a3 + OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_numberOfButtons) < 3)
    goto LABEL_6;
  if (!a1)
    goto LABEL_5;
  if (!__OFSUB__(a4, 1))
  {
    if (a4 - 1 != a1)
    {
LABEL_6:
      v16 = objc_msgSend(a2, "layer");
      v17 = String._bridgeToObjectiveC()();
      objc_msgSend(v16, "addAnimation:forKey:", v13, v17);

      return;
    }
LABEL_5:
    objc_msgSend(v13, "setBeginTime:", a5 + 0.05);
    goto LABEL_6;
  }
  __break(1u);
}

void sub_10080829C(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  char *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  UIAccessibilityNotifications v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD v22[3];
  _BYTE v23[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v23, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (char *)Strong;
    v4 = OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_stackViewForDisplay;
    v5 = objc_msgSend(*(id *)(Strong + OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_stackViewForDisplay), "arrangedSubviews");
    v6 = sub_1004B8930(0, (unint64_t *)&qword_1013DFC10, UIView_ptr);
    v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);

    if ((unint64_t)v7 >> 62)
    {
      if (v7 < 0)
        v17 = v7;
      else
        v17 = v7 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v7);
      v8 = (void *)_CocoaArrayWrapper.endIndex.getter(v17);
      swift_bridgeObjectRelease(v7);
      if (!v8)
        goto LABEL_8;
    }
    else
    {
      v8 = *(void **)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!v8)
        goto LABEL_8;
    }
    if ((v7 & 0xC000000000000001) != 0)
    {
      v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v7);
    }
    else
    {
      if (!*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        goto LABEL_29;
      }
      v9 = *(id *)(v7 + 32);
    }
    v8 = v9;
LABEL_8:
    v10 = UIAccessibilityLayoutChangedNotification;
    swift_bridgeObjectRelease(v7);
    UIAccessibilityPostNotification(v10, v8);

    v11 = objc_msgSend(*(id *)&v3[v4], "arrangedSubviews");
    v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v11, v6);

    if ((unint64_t)v12 >> 62)
    {
      if (v12 < 0)
        v18 = v12;
      else
        v18 = v12 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v12);
      v13 = _CocoaArrayWrapper.endIndex.getter(v18);
      if (v13)
      {
LABEL_10:
        if (v13 >= 1)
        {
          v14 = 0;
          v20 = *(_OWORD *)&CGAffineTransformIdentity.c;
          v21 = *(_OWORD *)&CGAffineTransformIdentity.a;
          v19 = *(_OWORD *)&CGAffineTransformIdentity.tx;
          do
          {
            if ((v12 & 0xC000000000000001) != 0)
              v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v14, v12);
            else
              v15 = *(id *)(v12 + 8 * v14 + 32);
            v16 = v15;
            ++v14;
            v22[0] = v21;
            v22[1] = v20;
            v22[2] = v19;
            objc_msgSend(v15, "setTransform:", v22, v19, v20, v21);

          }
          while (v13 != v14);
          goto LABEL_25;
        }
LABEL_29:
        __break(1u);
        return;
      }
    }
    else
    {
      v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v12);
      if (v13)
        goto LABEL_10;
    }
LABEL_25:

    swift_bridgeObjectRelease_n(v12, 2);
  }
}

void sub_1008084F0(char *a1)
{
  id v2;
  void *v3;
  id v4;
  void *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  char *v16;
  id v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  char *v21;
  void **v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;

  v2 = objc_msgSend(a1, "view");
  if (v2)
  {
    v3 = v2;
    v4 = objc_msgSend(a1, "view");
    if (v4)
    {
      v5 = v4;
      objc_msgSend(v4, "frame");
      v7 = v6;
      v9 = v8;

      objc_msgSend(*(id *)&a1[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_contentView], "systemLayoutSizeFittingSize:", UILayoutFittingCompressedSize.width, UILayoutFittingCompressedSize.height);
      objc_msgSend(v3, "setFrame:", v7, v9, v10, v11);

      sub_100809E20();
      v12 = swift_allocObject(&unk_101280D00, 24, 7);
      *(_QWORD *)(v12 + 16) = a1;
      v13 = objc_allocWithZone((Class)UIViewPropertyAnimator);
      v26 = sub_10080AE6C;
      v27 = v12;
      v22 = _NSConcreteStackBlock;
      v23 = *(_QWORD *)"";
      v24 = sub_1005D2FC0;
      v25 = &unk_101280D18;
      v14 = _Block_copy(&v22);
      v15 = v27;
      v16 = a1;
      swift_release(v15);
      v17 = objc_msgSend(v13, "initWithDuration:dampingRatio:animations:", v14, 0.85, 0.6);
      _Block_release(v14);
      v18 = swift_allocObject(&unk_101280D50, 24, 7);
      *(_QWORD *)(v18 + 16) = v16;
      v26 = sub_10080ABE8;
      v27 = v18;
      v22 = _NSConcreteStackBlock;
      v23 = *(_QWORD *)"";
      v24 = sub_1006084F4;
      v25 = &unk_101280D68;
      v19 = _Block_copy(&v22);
      v20 = v27;
      v21 = v16;
      objc_msgSend(v17, "addCompletion:", v19, swift_release(v20).n128_f64[0]);
      _Block_release(v19);
      objc_msgSend(v17, "startAnimation");

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_100808718(uint64_t a1, uint64_t a2)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  UIAccessibilityNotifications v8;
  id argument;

  *(_BYTE *)(a2 + OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_isAnimatingDisplay) = 0;
  v2 = objc_msgSend(*(id *)(a2 + OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_stackViewForDisplay), "arrangedSubviews");
  v3 = sub_1004B8930(0, (unint64_t *)&qword_1013DFC10, UIView_ptr);
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  if (!((unint64_t)v4 >> 62))
  {
    if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_3;
LABEL_11:
    argument = 0;
    goto LABEL_12;
  }
  if (v4 < 0)
    v6 = v4;
  else
    v6 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v4);
  v7 = _CocoaArrayWrapper.endIndex.getter(v6);
  swift_bridgeObjectRelease(v4);
  if (!v7)
    goto LABEL_11;
LABEL_3:
  if ((v4 & 0xC000000000000001) != 0)
  {
    v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v4);
    goto LABEL_6;
  }
  if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v5 = *(id *)(v4 + 32);
LABEL_6:
    argument = v5;
LABEL_12:
    v8 = UIAccessibilityLayoutChangedNotification;
    swift_bridgeObjectRelease(v4);
    UIAccessibilityPostNotification(v8, argument);

    return;
  }
  __break(1u);
}

void sub_100808834(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  UIAccessibilityNotifications v9;
  uint64_t v10;
  _BYTE v11[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v11, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (void *)Strong;
    v4 = objc_msgSend(*(id *)(Strong + OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_stackViewForDisplay), "arrangedSubviews");
    v5 = sub_1004B8930(0, (unint64_t *)&qword_1013DFC10, UIView_ptr);
    v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v5);

    if ((unint64_t)v6 >> 62)
    {
      if (v6 < 0)
        v10 = v6;
      else
        v10 = v6 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v6);
      v7 = (void *)_CocoaArrayWrapper.endIndex.getter(v10);
      swift_bridgeObjectRelease(v6);
      if (v7)
        goto LABEL_4;
    }
    else
    {
      v7 = *(void **)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v7)
      {
LABEL_4:
        if ((v6 & 0xC000000000000001) != 0)
        {
          v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v6);
        }
        else
        {
          if (!*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            return;
          }
          v8 = *(id *)(v6 + 32);
        }
        v7 = v8;
      }
    }
    v9 = UIAccessibilityLayoutChangedNotification;
    swift_bridgeObjectRelease(v6);
    UIAccessibilityPostNotification(v9, v7);

  }
}

void sub_100808974(char *a1)
{
  id v2;
  void *v3;
  id v4;
  void *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;

  v2 = objc_msgSend(a1, "view");
  if (v2)
  {
    v3 = v2;
    v4 = objc_msgSend(a1, "view");
    if (v4)
    {
      v5 = v4;
      objc_msgSend(v4, "frame");
      v7 = v6;
      v9 = v8;

      objc_msgSend(*(id *)&a1[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_contentView], "systemLayoutSizeFittingSize:", UILayoutFittingCompressedSize.width, UILayoutFittingCompressedSize.height);
      objc_msgSend(v3, "setFrame:", v7, v9, v10, v11);

      sub_100809E20();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_100808A44(char a1, char a2)
{
  char *v2;
  id v5;
  void *v6;
  char v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  char **v12;
  unsigned __int8 v13;
  char *v14;
  uint64_t Strong;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void *v19;
  id v20;
  char *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  char v25;
  char *v26;
  id v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  void *v32;
  id v33;
  id v34;
  unsigned int v35;
  void *v36;
  double v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  void *v46;
  void *v47;
  uint64_t v48;
  NSString v49;
  void *v50;
  id v51;
  id v52;
  id v53;
  double v54;
  double v55;
  double v56;
  double v57;
  id v58;
  Class isa;
  Class v60;
  id v61;
  void *v62;
  id v63;
  NSString v64;
  NSString v65;
  id v66;
  id v67;
  id v68;
  double v69;
  double v70;
  double v71;
  double v72;
  id v73;
  id v74;
  void *v75;
  Class v76;
  Class v77;
  id v78;
  void *v79;
  id v80;
  NSString v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  void *v88;
  unsigned int v89;
  id v90;
  void *v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  id v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  void *v106;
  void *v107;
  uint64_t v108;
  NSString v109;
  id v110;
  id v111;
  id v112;
  double v113;
  double v114;
  double v115;
  double v116;
  id v117;
  id v118;
  void *v119;
  Class v120;
  Class v121;
  id v122;
  void *v123;
  id v124;
  NSString v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  void **aBlock;
  uint64_t v132;
  void *v133;
  void *v134;
  void *v135;
  uint64_t v136;

  v5 = objc_msgSend(v2, "view");
  if (!v5)
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  v6 = v5;
  v7 = objc_msgSend(v5, "isUserInteractionEnabled");

  v8 = objc_msgSend(v2, "view");
  if (!v8)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  v9 = v8;
  objc_msgSend(v8, "setUserInteractionEnabled:", 0);

  v2[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_isAnimatingHide] = 1;
  v10 = objc_msgSend(v2, "traitCollection");
  v11 = (void *)objc_opt_self(UIDevice);
  v12 = &selRef_computeAlignmentFrameInRoot_;
  if (objc_msgSend(v11, "crl_phoneUI"))
  {

  }
  else
  {
    v13 = objc_msgSend(v10, "crl_isCompactWidth");

    if ((v13 & 1) == 0)
    {
      v21 = *(char **)&v2[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_repTrackingViewHelper];
      if (!v21)
        goto LABEL_16;
      v22 = *(_QWORD *)&v21[OBJC_IVAR____TtC8Freeform37CRLRepTrackingMiniFormatterViewHelper_reps];
      swift_bridgeObjectRetain(v22);
      v18 = v21;
      v23 = (void *)sub_100857EA4(v22);
      v20 = objc_msgSend(v23, "interactiveCanvasController", swift_bridgeObjectRelease(v22).n128_f64[0]);

      if (!v20)
        goto LABEL_15;
      objc_msgSend(v20, "removeDecorator:", v18);
      goto LABEL_13;
    }
  }
  v14 = *(char **)&v2[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_fixedPositionDynamicOperationViewHelper];
  if (v14)
  {
    Strong = swift_unknownObjectWeakLoadStrong(&v14[OBJC_IVAR____TtC8Freeform42CRLMiniFormatterDynamicOperationViewHelper_delegate]);
    if (Strong)
    {
      v16 = Strong;
      v17 = *(_QWORD *)(Strong + OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_reps);
      swift_bridgeObjectRetain(v17);
      v18 = v14;
      v19 = (void *)sub_100857EA4(v17);
      v20 = objc_msgSend(v19, "interactiveCanvasController", swift_bridgeObjectRelease(v17).n128_f64[0]);
      swift_unknownObjectRelease(v16);

      if (!v20)
      {
        v12 = &selRef_computeAlignmentFrameInRoot_;
        goto LABEL_15;
      }
      objc_msgSend(v20, "removeDecorator:", v18);
      v12 = &selRef_computeAlignmentFrameInRoot_;
LABEL_13:

      v18 = (char *)v20;
LABEL_15:

    }
  }
LABEL_16:
  v24 = swift_allocObject(&unk_101280990, 26, 7);
  *(_QWORD *)(v24 + 16) = v2;
  v25 = a2 & 1;
  *(_BYTE *)(v24 + 24) = v25;
  *(_BYTE *)(v24 + 25) = v7;
  v26 = v2;
  if ((a1 & 1) == 0)
  {
LABEL_23:
    sub_100809990(v26, v25, v7);
    swift_release(v24);
    return;
  }
  if (!UIAccessibilityIsReduceMotionEnabled())
  {
    v31 = objc_msgSend(v26, "view");
    if (!v31)
    {
LABEL_57:
      __break(1u);
      goto LABEL_58;
    }
    v32 = v31;
    v33 = objc_msgSend(v31, "layer");

    objc_msgSend(v33, "removeAllAnimations");
    v34 = objc_msgSend(v26, "traitCollection");
    if (objc_msgSend(v11, v12[429]))
    {

LABEL_28:
      v36 = (void *)objc_opt_self(UIView);
      v37 = UINavigationControllerHideShowBarDuration;
      v38 = swift_allocObject(&unk_101280A30, 24, 7);
      *(_QWORD *)(v38 + 16) = v26;
      v135 = sub_10080AB58;
      v136 = v38;
      aBlock = _NSConcreteStackBlock;
      v132 = *(_QWORD *)"";
      v133 = sub_1005D2FC0;
      v134 = &unk_101280A48;
      v39 = _Block_copy(&aBlock);
      v40 = v136;
      v41 = v26;
      swift_release(v40);
      v42 = swift_allocObject(&unk_101280A80, 32, 7);
      *(_QWORD *)(v42 + 16) = sub_10080AAF4;
      *(_QWORD *)(v42 + 24) = v24;
      v135 = sub_10054E858;
      v136 = v42;
      aBlock = _NSConcreteStackBlock;
      v132 = *(_QWORD *)"";
      v43 = &unk_101280A98;
LABEL_29:
      v133 = sub_1006084F4;
      v134 = v43;
      v44 = _Block_copy(&aBlock);
      v45 = v136;
      swift_retain(v24);
      swift_release(v45);
      objc_msgSend(v36, "animateWithDuration:animations:completion:", v39, v44, v37);
      swift_release(v24);
      _Block_release(v44);
      _Block_release(v39);
      return;
    }
    v35 = objc_msgSend(v34, "crl_isCompactWidth");

    if (v35)
      goto LABEL_28;
    v46 = (void *)objc_opt_self(CATransaction);
    objc_msgSend(v46, "begin");
    v135 = sub_10080AAF4;
    v136 = v24;
    aBlock = _NSConcreteStackBlock;
    v132 = *(_QWORD *)"";
    v133 = sub_1005D2FC0;
    v134 = &unk_1012809A8;
    v47 = _Block_copy(&aBlock);
    v48 = v136;
    swift_retain(v24);
    objc_msgSend(v46, "setCompletionBlock:", v47, swift_release(v48).n128_f64[0]);
    _Block_release(v47);
    v49 = String._bridgeToObjectiveC()();
    v50 = (void *)objc_opt_self(CABasicAnimation);
    v51 = objc_msgSend(v50, "animationWithKeyPath:", v49);

    v52 = objc_allocWithZone((Class)CAMediaTimingFunction);
    v53 = v51;
    LODWORD(v54) = 1045220557;
    LODWORD(v55) = 0;
    LODWORD(v56) = 0.25;
    LODWORD(v57) = 1.0;
    v58 = objc_msgSend(v52, "initWithControlPoints::::", v54, v55, v56, v57);
    objc_msgSend(v53, "setTimingFunction:", v58);

    objc_msgSend(v53, "setDuration:", 0.15);
    isa = Double._bridgeToObjectiveC()().super.super.isa;
    objc_msgSend(v53, "setFromValue:", isa);

    v60 = Double._bridgeToObjectiveC()().super.super.isa;
    objc_msgSend(v53, "setToValue:", v60);

    v61 = objc_msgSend(v26, "view");
    if (!v61)
    {
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }
    v62 = v61;
    v63 = objc_msgSend(v61, "layer");

    v64 = String._bridgeToObjectiveC()();
    objc_msgSend(v63, "addAnimation:forKey:", v53, v64);

    v65 = String._bridgeToObjectiveC()();
    v66 = objc_msgSend(v50, "animationWithKeyPath:", v65);

    v67 = objc_allocWithZone((Class)CAMediaTimingFunction);
    v68 = v66;
    LODWORD(v69) = 1045220557;
    LODWORD(v70) = 0;
    LODWORD(v71) = 0.25;
    LODWORD(v72) = 1.0;
    v73 = objc_msgSend(v67, "initWithControlPoints::::", v69, v70, v71, v72);
    objc_msgSend(v68, "setTimingFunction:", v73);

    objc_msgSend(v68, "setDuration:", 0.15);
    v74 = objc_msgSend(v26, "view");
    if (!v74)
    {
LABEL_60:
      __break(1u);
      goto LABEL_61;
    }
    v75 = v74;
    objc_msgSend(v74, "alpha");

    v76 = CGFloat._bridgeToObjectiveC()().super.super.isa;
    objc_msgSend(v68, "setFromValue:", v76);

    v77 = Double._bridgeToObjectiveC()().super.super.isa;
    objc_msgSend(v68, "setToValue:", v77);

    objc_msgSend(v68, "setFillMode:", kCAFillModeForwards);
    objc_msgSend(v68, "setRemovedOnCompletion:", 0);
    v78 = objc_msgSend(v26, "view");
    if (!v78)
    {
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }
    v79 = v78;
    v80 = objc_msgSend(v78, "layer");

    v81 = String._bridgeToObjectiveC()();
    objc_msgSend(v80, "addAnimation:forKey:", v68, v81);

    v82 = objc_msgSend(*(id *)&v26[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_stackViewForDisplay], "arrangedSubviews");
    v83 = sub_1004B8930(0, (unint64_t *)&qword_1013DFC10, UIView_ptr);
    v84 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v82, v83);

    if ((unint64_t)v84 >> 62)
    {
      if (v84 < 0)
        v128 = v84;
      else
        v128 = v84 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v84);
      v85 = _CocoaArrayWrapper.endIndex.getter(v128);
      if (v85)
        goto LABEL_35;
    }
    else
    {
      v85 = *(_QWORD *)((v84 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v84);
      if (v85)
      {
LABEL_35:
        if (v85 >= 1)
        {
          v86 = 0;
          do
          {
            if ((v84 & 0xC000000000000001) != 0)
              v87 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v86, v84);
            else
              v87 = *(id *)(v84 + 8 * v86 + 32);
            v88 = v87;
            ++v86;
            aBlock = (void **)v87;
            sub_100809B48((void **)&aBlock);

          }
          while (v85 != v86);
          goto LABEL_52;
        }
        __break(1u);
        goto LABEL_55;
      }
    }
LABEL_52:
    swift_bridgeObjectRelease_n(v84, 2);
    v129 = swift_allocObject(&unk_1012809E0, 24, 7);
    swift_unknownObjectWeakInit(v129 + 16);
    v135 = sub_10080AB40;
    v136 = v129;
    aBlock = _NSConcreteStackBlock;
    v132 = *(_QWORD *)"";
    v133 = sub_1005D2FC0;
    v134 = &unk_1012809F8;
    v130 = _Block_copy(&aBlock);
    objc_msgSend(v46, "setCompletionBlock:", v130, swift_release(v136).n128_f64[0]);
    _Block_release(v130);
    objc_msgSend(v46, "commit");

    goto LABEL_53;
  }
  if (!UIAccessibilityIsReduceMotionEnabled() || !UIAccessibilityPrefersCrossFadeTransitions())
    goto LABEL_23;
  v27 = objc_msgSend(v26, "view");
  if (!v27)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  v28 = v27;
  v29 = objc_msgSend(v27, "layer");

  objc_msgSend(v29, "removeAllAnimations");
  v30 = objc_msgSend(v26, "traitCollection");
  if (objc_msgSend(v11, v12[429]))
  {

    goto LABEL_42;
  }
  v89 = objc_msgSend(v30, "crl_isCompactWidth");

  if (v89)
  {
LABEL_42:
    v90 = objc_msgSend(v26, "view");
    if (v90)
    {
      v91 = v90;
      objc_msgSend(v90, "frame");
      v93 = v92;
      v95 = v94;
      v97 = v96;
      v99 = v98;

      v100 = objc_msgSend(v26, "view");
      if (v100)
      {
        v101 = v100;
        objc_msgSend(v100, "setFrame:", v93, v95 + 100.0, v97, v99);

        v36 = (void *)objc_opt_self(UIView);
        v37 = UINavigationControllerHideShowBarDuration;
        v102 = swift_allocObject(&unk_101280B20, 24, 7);
        *(_QWORD *)(v102 + 16) = v26;
        v135 = sub_10080ABA8;
        v136 = v102;
        aBlock = _NSConcreteStackBlock;
        v132 = *(_QWORD *)"";
        v133 = sub_1005D2FC0;
        v134 = &unk_101280B38;
        v39 = _Block_copy(&aBlock);
        v103 = v136;
        v104 = v26;
        swift_release(v103);
        v105 = swift_allocObject(&unk_101280B70, 32, 7);
        *(_QWORD *)(v105 + 16) = sub_10080AAF4;
        *(_QWORD *)(v105 + 24) = v24;
        v135 = sub_1005A46E8;
        v136 = v105;
        aBlock = _NSConcreteStackBlock;
        v132 = *(_QWORD *)"";
        v43 = &unk_101280B88;
        goto LABEL_29;
      }
      goto LABEL_63;
    }
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  v106 = (void *)objc_opt_self(CATransaction);
  objc_msgSend(v106, "begin");
  v135 = sub_10080AAF4;
  v136 = v24;
  aBlock = _NSConcreteStackBlock;
  v132 = *(_QWORD *)"";
  v133 = sub_1005D2FC0;
  v134 = &unk_101280AC0;
  v107 = _Block_copy(&aBlock);
  v108 = v136;
  swift_retain(v24);
  objc_msgSend(v106, "setCompletionBlock:", v107, swift_release(v108).n128_f64[0]);
  _Block_release(v107);
  v109 = String._bridgeToObjectiveC()();
  v110 = objc_msgSend((id)objc_opt_self(CABasicAnimation), "animationWithKeyPath:", v109);

  v111 = objc_allocWithZone((Class)CAMediaTimingFunction);
  v112 = v110;
  LODWORD(v113) = 1045220557;
  LODWORD(v114) = 0;
  LODWORD(v115) = 0.25;
  LODWORD(v116) = 1.0;
  v117 = objc_msgSend(v111, "initWithControlPoints::::", v113, v114, v115, v116);
  objc_msgSend(v112, "setTimingFunction:", v117);

  objc_msgSend(v112, "setDuration:", 0.8);
  v118 = objc_msgSend(v26, "view");
  if (!v118)
  {
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  v119 = v118;
  objc_msgSend(v118, "alpha");

  v120 = CGFloat._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v112, "setFromValue:", v120);

  v121 = Double._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v112, "setToValue:", v121);

  objc_msgSend(v112, "setFillMode:", kCAFillModeForwards);
  objc_msgSend(v112, "setRemovedOnCompletion:", 0);
  v122 = objc_msgSend(v26, "view");
  if (v122)
  {
    v123 = v122;
    v124 = objc_msgSend(v122, "layer");

    v125 = String._bridgeToObjectiveC()();
    objc_msgSend(v124, "addAnimation:forKey:", v112, v125);

    v126 = swift_allocObject(&unk_1012809E0, 24, 7);
    swift_unknownObjectWeakInit(v126 + 16);
    v135 = sub_10080AB40;
    v136 = v126;
    aBlock = _NSConcreteStackBlock;
    v132 = *(_QWORD *)"";
    v133 = sub_1005D2FC0;
    v134 = &unk_101280AE8;
    v127 = _Block_copy(&aBlock);
    objc_msgSend(v106, "setCompletionBlock:", v127, swift_release(v136).n128_f64[0]);
    _Block_release(v127);
    objc_msgSend(v106, "commit");

LABEL_53:
    swift_release(v24);
    return;
  }
LABEL_65:
  __break(1u);
}

void sub_100809990(char *a1, char a2, char a3)
{
  id v6;
  void *v7;
  id v8;
  id v9;

  objc_msgSend(*(id *)&a1[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_stackViewForDisplay], "removeFromSuperview");
  v6 = objc_msgSend(a1, "view");
  if (v6)
  {
    v7 = v6;
    objc_msgSend(v6, "removeFromSuperview");

    objc_msgSend(a1, "removeFromParentViewController");
    a1[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_isAnimatingHide] = 0;
    if ((a2 & 1) != 0)
      UIAccessibilityPostNotification(UIAccessibilityLayoutChangedNotification, *(id *)&a1[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_crlaxCurrentPresentedRep]);
    v8 = objc_msgSend(a1, "view");
    if (v8)
    {
      v9 = v8;
      objc_msgSend(v8, "setUserInteractionEnabled:", a3 & 1);

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_100809A84(void *a1)
{
  id v2;
  void *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  id v12;
  id v13;

  v2 = objc_msgSend(a1, "view");
  if (v2)
  {
    v3 = v2;
    objc_msgSend(v2, "frame");
    v5 = v4;
    v7 = v6;
    v9 = v8;
    v11 = v10;

    v12 = objc_msgSend(a1, "view");
    if (v12)
    {
      v13 = v12;
      objc_msgSend(v12, "setFrame:", v5, v7 + 100.0, v9, v11);

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_100809B48(void **a1)
{
  void *v1;
  NSString v2;
  id v3;
  id v4;
  id v5;
  double v6;
  double v7;
  double v8;
  double v9;
  id v10;
  Class isa;
  Class v12;
  id v13;
  NSString v14;

  v1 = *a1;
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend((id)objc_opt_self(CABasicAnimation), "animationWithKeyPath:", v2);

  v4 = objc_allocWithZone((Class)CAMediaTimingFunction);
  v5 = v3;
  LODWORD(v6) = 1045220557;
  LODWORD(v7) = 0;
  LODWORD(v8) = 0.25;
  LODWORD(v9) = 1.0;
  v10 = objc_msgSend(v4, "initWithControlPoints::::", v6, v7, v8, v9);
  objc_msgSend(v5, "setTimingFunction:", v10);

  objc_msgSend(v5, "setDuration:", 0.15);
  isa = Double._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v5, "setFromValue:", isa);

  v12 = Double._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v5, "setToValue:", v12);

  v13 = objc_msgSend(v1, "layer");
  v14 = String._bridgeToObjectiveC()();
  objc_msgSend(v13, "addAnimation:forKey:", v5, v14);

}

void sub_100809CF0(void *a1)
{
  id v1;
  id v2;

  v1 = objc_msgSend(a1, "view");
  if (v1)
  {
    v2 = v1;
    objc_msgSend(v1, "setAlpha:", 1.0);

  }
  else
  {
    __break(1u);
  }
}

void sub_100809D3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (void *)Strong;
    UIAccessibilityPostNotification(UIAccessibilityLayoutChangedNotification, *(id *)(Strong + OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_crlaxCurrentPresentedRep));

  }
}

void sub_100809E20()
{
  char *v0;
  id v1;
  id v2;
  void *v3;
  double v4;
  CGFloat v5;
  double v6;
  CGFloat v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  id v12;
  void *v13;
  id v14;
  double v15;
  double v16;
  double v17;
  id v18;
  void *v19;
  id v20;
  double v21;
  double v22;
  double v23;
  id v24;
  void *v25;
  unsigned int v26;
  id v27;
  void *v28;
  double v29;
  double v30;
  double v31;
  double v32;
  CGFloat Height;
  double v34;
  double Width;
  id v36;
  id v37;
  id v38;
  unsigned int v39;
  void *v40;
  CGFloat v41;
  id v42;
  void *v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  id v51;
  void *v52;
  id v53;
  double v54;
  double v55;
  id v56;
  void *v57;
  double v58;
  double v59;
  id v60;
  CGRect v61;
  CGRect v62;
  CGRect v63;

  v1 = objc_msgSend(v0, "parentViewController");
  if (v1)
  {
    v60 = v1;
    v2 = objc_msgSend(v1, "view");
    if (!v2)
    {
LABEL_37:

      return;
    }
    v3 = v2;
    objc_msgSend(v2, "frame");
    v5 = v4;
    v7 = v6;
    v9 = v8;
    v11 = v10;
    v12 = objc_msgSend(v0, "view");
    if (v12)
    {
      v13 = v12;
      v14 = objc_msgSend(v12, "window");

      if (v14)
      {
        objc_msgSend(v14, "safeAreaInsets");
        v16 = v15;

        v17 = 20.0;
        if (v16 > 20.0)
          v17 = v16;
      }
      else
      {
        v17 = 20.0;
      }
      v18 = objc_msgSend(v0, "view");
      if (v18)
      {
        v19 = v18;
        v20 = objc_msgSend(v18, "window");

        if (v20)
        {
          objc_msgSend(v20, "safeAreaInsets");
          v22 = v21;

          if (v22 > 20.0)
            v23 = v22;
          else
            v23 = 20.0;
        }
        else
        {
          v23 = 20.0;
        }
        v24 = objc_msgSend(v0, "traitCollection");
        v25 = (void *)objc_opt_self(UIDevice);
        if (objc_msgSend(v25, "crl_phoneUI"))
        {

        }
        else
        {
          v26 = objc_msgSend(v24, "crl_isCompactWidth");

          if (!v26)
            goto LABEL_23;
        }
        if (objc_msgSend(v25, "crl_phoneUI")
          && objc_msgSend((id)objc_opt_self(UIScreen), "crl_deviceIsLandscape"))
        {
          v27 = objc_msgSend(v0, "view");
          if (v27)
          {
            v28 = v27;
            objc_msgSend(v27, "frame");
            v30 = v29;
            v32 = v31;

            v61.origin.x = v5;
            v61.origin.y = v7;
            v61.size.width = v9;
            v61.size.height = v11;
            Height = CGRectGetHeight(v61);
            v62.size.height = v11;
            v34 = Height;
            v62.origin.x = v5;
            v62.origin.y = v7;
            v62.size.width = v9;
            Width = CGRectGetWidth(v62);
            v36 = objc_msgSend(v0, "view");
            if (v36)
            {
              v37 = v36;
              objc_msgSend(v36, "setFrame:", Width - v30 - v23, v34 - v32 - v17 + -16.0, v30, v32);
              goto LABEL_35;
            }
            goto LABEL_45;
          }
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return;
        }
LABEL_23:
        v38 = objc_msgSend(v0, "traitCollection");
        if (objc_msgSend(v25, "crl_phoneUI"))
        {

        }
        else
        {
          v39 = objc_msgSend(v38, "crl_isCompactWidth");

          if (!v39)
          {
LABEL_28:
            v40 = *(void **)&v0[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_repTrackingViewHelper];
            if (!v40)
            {
LABEL_36:

              goto LABEL_37;
            }
            v37 = v40;
            sub_10070DE84();
LABEL_35:

            goto LABEL_36;
          }
        }
        if (objc_msgSend(v25, "crl_phoneUI")
          && (objc_msgSend((id)objc_opt_self(UIScreen), "crl_deviceIsLandscape") & 1) != 0)
        {
          goto LABEL_28;
        }
        v41 = v11;
        v42 = objc_msgSend(v0, "view");
        if (v42)
        {
          v43 = v42;
          objc_msgSend(v42, "frame");
          v45 = v44;
          v47 = v46;
          v49 = v48;

          v63.origin.x = v5;
          v63.origin.y = v7;
          v63.size.width = v9;
          v63.size.height = v41;
          v50 = CGRectGetHeight(v63);
          v51 = objc_msgSend(v0, "view");
          if (v51)
          {
            v52 = v51;
            objc_msgSend(v51, "setFrame:", v45, v50 - v49 - v17, v47, v49);

            v53 = objc_msgSend(v0, "view");
            if (v53)
            {
              v37 = v53;
              objc_msgSend(v3, "center");
              v55 = v54;
              v56 = objc_msgSend(v0, "view");
              if (v56)
              {
                v57 = v56;
                objc_msgSend(v56, "center");
                v59 = v58;

                objc_msgSend(v37, "setCenter:", v55, v59);
                goto LABEL_35;
              }
              goto LABEL_43;
            }
LABEL_42:
            __break(1u);
LABEL_43:
            __break(1u);
            goto LABEL_44;
          }
LABEL_41:
          __break(1u);
          goto LABEL_42;
        }
LABEL_40:
        __break(1u);
        goto LABEL_41;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_40;
  }
}

uint64_t sub_10080A2D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  char *v12;
  _BYTE v13[40];

  sub_1004E90B0(v0 + OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_delegate, (uint64_t)v13);
  v1 = sub_1004B804C((uint64_t *)&unk_1013E56A0);
  v2 = type metadata accessor for CRLiOSMiniFormatterPresenter();
  result = swift_dynamicCast(&v12, v13, v1, v2, 6);
  if ((_DWORD)result)
  {
    v4 = v12;
    v5 = *(void **)&v12[OBJC_IVAR____TtC8Freeform28CRLiOSMiniFormatterPresenter_presentedNavigationController];
    if (v5 && (v6 = objc_msgSend(v5, "topViewController")) != 0)
    {
      v7 = v6;
      v8 = type metadata accessor for CRLiOSMiniFormatterPopoverContainerViewController();
      v9 = swift_dynamicCastClass(v7, v8);
      if (v9)
      {
        v10 = *(void **)(v9 + OBJC_IVAR____TtC8Freeform49CRLiOSMiniFormatterPopoverContainerViewController_builder);
        v11 = v10;

        if (v10)
        {

          return 1;
        }
      }
      else
      {

      }
    }
    else
    {

    }
    return 0;
  }
  return result;
}

id sub_10080A404()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CRLiOSMiniFormatterViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CRLiOSMiniFormatterViewController()
{
  return objc_opt_self(_TtC8Freeform33CRLiOSMiniFormatterViewController);
}

uint64_t sub_10080A4EC(uint64_t a1, uint64_t a2)
{
  char v2;

  sub_100805094(a1, a2);
  return v2 & 1;
}

uint64_t sub_10080A510()
{
  char v0;

  sub_10080A86C();
  return v0 & 1;
}

void sub_10080A534()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  if (*(_BYTE *)(*v0 + OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_isHidingMiniFormatter) == 1)
  {
    *(_BYTE *)(v1 + OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_needsRefreshWhenAppears) = 1;
  }
  else
  {
    sub_1004BB5A4((_QWORD *)(v1 + OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_delegate), *(_QWORD *)(v1 + OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_delegate + 24));
    sub_1005C0FEC();
  }
}

uint64_t sub_10080A594()
{
  sub_100757E04(&_mh_execute_header, (uint64_t)"wantsToDismissForSelectionPathChange(from:to:)", 46, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/iOS/Formatters/CRLiOSMiniFormatterViewController.swift", 108, 2, 556, "This method should never be called", 34, 2u, (uint64_t)_swiftEmptyArrayStorage);
  sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"wantsToDismissForSelectionPathChange(from:to:)", 46, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/iOS/Formatters/CRLiOSMiniFormatterViewController.swift", 108, 2u, 556, (uint64_t)"This method should never be called", 34, 2u);
  return 0;
}

uint64_t sub_10080A650()
{
  sub_100757E04(&_mh_execute_header, (uint64_t)"wantsToDismiss(for:changeSource:)", 33, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/iOS/Formatters/CRLiOSMiniFormatterViewController.swift", 108, 2, 561, "This method should never be called", 34, 2u, (uint64_t)_swiftEmptyArrayStorage);
  sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"wantsToDismiss(for:changeSource:)", 33, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/iOS/Formatters/CRLiOSMiniFormatterViewController.swift", 108, 2u, 561, (uint64_t)"This method should never be called", 34, 2u);
  return 0;
}

void sub_10080A714()
{
  _BYTE *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  _BYTE *v6;
  char isEscapingClosureAtFileLocation;
  _QWORD v8[5];
  uint64_t v9;

  v0[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_isHidingMiniFormatter] = 0;
  if (v0[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_needsRefreshWhenAppears] == 1)
  {
    v0[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_needsRefreshWhenAppears] = 0;
    v1 = (void *)objc_opt_self(UIView);
    v2 = swift_allocObject(&unk_101280E40, 24, 7);
    *(_QWORD *)(v2 + 16) = v0;
    v3 = swift_allocObject(&unk_101280E68, 32, 7);
    *(_QWORD *)(v3 + 16) = sub_10080AD88;
    *(_QWORD *)(v3 + 24) = v2;
    v8[4] = sub_1005B71BC;
    v9 = v3;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = *(_QWORD *)"";
    v8[2] = sub_100618D24;
    v8[3] = &unk_101280E80;
    v4 = _Block_copy(v8);
    v5 = v9;
    v6 = v0;
    swift_retain(v3);
    objc_msgSend(v1, "performWithoutAnimation:", v4, swift_release(v5).n128_f64[0]);
    _Block_release(v4);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 108, 576, 44, 1);
    swift_release(v2);
    swift_release(v3);
    if ((isEscapingClosureAtFileLocation & 1) != 0)
      __break(1u);
  }
}

void sub_10080A86C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  _QWORD v27[5];

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_builders);
  if ((v1 & 0xC000000000000001) != 0)
  {
    if (v1 < 0)
      v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_builders);
    else
      v2 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = type metadata accessor for CRLiOSMiniFormatterBuilder();
    v5 = sub_1004B7878(&qword_1013F4B40, (uint64_t (*)(uint64_t))type metadata accessor for CRLiOSMiniFormatterBuilder, (uint64_t)&protocol conformance descriptor for NSObject);
    v6 = Set.Iterator.init(_cocoa:)(v27, v3, v4, v5);
    v1 = v27[0];
    v7 = v27[1];
    v9 = v27[2];
    v8 = v27[3];
    v10 = v27[4];
  }
  else
  {
    v11 = -1 << *(_BYTE *)(v1 + 32);
    v7 = v1 + 56;
    v9 = ~v11;
    v12 = -v11;
    if (v12 < 64)
      v13 = ~(-1 << v12);
    else
      v13 = -1;
    v10 = v13 & *(_QWORD *)(v1 + 56);
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_builders));
    v8 = 0;
  }
  v14 = (unint64_t)(v9 + 64) >> 6;
  if (v1 < 0)
    goto LABEL_13;
  while (1)
  {
    if (v10)
    {
      v15 = (v10 - 1) & v10;
      v16 = __clz(__rbit64(v10)) | (v8 << 6);
      v17 = v8;
      goto LABEL_30;
    }
    v22 = v8 + 1;
    if (__OFADD__(v8, 1))
      break;
    if (v22 >= v14)
      goto LABEL_33;
    v23 = *(_QWORD *)(v7 + 8 * v22);
    v17 = v8 + 1;
    if (!v23)
    {
      v17 = v8 + 2;
      if (v8 + 2 >= v14)
        goto LABEL_33;
      v23 = *(_QWORD *)(v7 + 8 * v17);
      if (!v23)
      {
        v17 = v8 + 3;
        if (v8 + 3 >= v14)
          goto LABEL_33;
        v23 = *(_QWORD *)(v7 + 8 * v17);
        if (!v23)
        {
          v17 = v8 + 4;
          if (v8 + 4 >= v14)
            goto LABEL_33;
          v23 = *(_QWORD *)(v7 + 8 * v17);
          if (!v23)
          {
            v24 = v8 + 5;
            while (v14 != v24)
            {
              v23 = *(_QWORD *)(v7 + 8 * v24++);
              if (v23)
              {
                v17 = v24 - 1;
                goto LABEL_29;
              }
            }
LABEL_33:
            sub_1004D284C(v1);
            return;
          }
        }
      }
    }
LABEL_29:
    v15 = (v23 - 1) & v23;
    v16 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_30:
    v21 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v16);
    if (!v21)
      goto LABEL_33;
    while (1)
    {

      v8 = v17;
      v10 = v15;
      if ((v1 & 0x8000000000000000) == 0)
        break;
LABEL_13:
      v18 = __CocoaSet.Iterator.next()(v6);
      if (v18)
      {
        v19 = v18;
        v25 = v18;
        v20 = type metadata accessor for CRLiOSMiniFormatterBuilder();
        swift_unknownObjectRetain(v19);
        swift_dynamicCast(&v26, &v25, (char *)&type metadata for Swift.AnyObject + 8, v20, 7);
        v21 = v26;
        swift_unknownObjectRelease(v19);
        v17 = v8;
        v15 = v10;
        if (v21)
          continue;
      }
      goto LABEL_33;
    }
  }
  __break(1u);
}

uint64_t sub_10080AAD0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 26, 7);
}

void sub_10080AAF4()
{
  uint64_t v0;

  sub_100809990(*(char **)(v0 + 16), *(_BYTE *)(v0 + 24), *(_BYTE *)(v0 + 25));
}

uint64_t sub_10080AB04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_10080AB14(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

uint64_t sub_10080AB1C()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_10080AB40()
{
  uint64_t v0;

  sub_100809D3C(v0);
}

void sub_10080AB58()
{
  uint64_t v0;

  sub_100809A84(*(void **)(v0 + 16));
}

uint64_t sub_10080AB60()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10080AB84()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_10080ABA8()
{
  uint64_t v0;

  sub_100809CF0(*(void **)(v0 + 16));
}

void sub_10080ABC0()
{
  uint64_t v0;

  sub_10080829C(v0);
}

void sub_10080ABC8()
{
  uint64_t v0;

  sub_100807C84(*(char **)(v0 + 16));
}

void sub_10080ABD0()
{
  uint64_t v0;

  sub_100808974(*(char **)(v0 + 16));
}

void sub_10080ABD8()
{
  uint64_t v0;

  sub_100808834(v0);
}

void sub_10080ABE0()
{
  uint64_t v0;

  sub_1008084F0(*(char **)(v0 + 16));
}

void sub_10080ABE8(uint64_t a1)
{
  uint64_t v1;

  sub_100808718(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_10080AC00()
{
  uint64_t v0;

  return swift_deallocObject(v0, 56, 7);
}

void sub_10080AC24()
{
  uint64_t v0;

  sub_100807F70(*(void **)(v0 + 16), *(double *)(v0 + 24), *(double *)(v0 + 32), *(double *)(v0 + 40), *(double *)(v0 + 48));
}

void sub_10080AC34()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_contentView;
  *(_QWORD *)&v0[v1] = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
  *(_QWORD *)&v0[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_repTrackingViewHelper] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_fixedPositionDynamicOperationViewHelper] = 0;
  v0[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_viewDidAppear] = 0;
  v0[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_isAnimatingDisplay] = 0;
  v0[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_isAnimatingHide] = 0;
  v0[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_needsRefreshWhenAppears] = 0;
  v0[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_isHidingMiniFormatter] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_crlaxCurrentPresentedRep] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x8000000100FAD6F0, "Freeform/CRLiOSMiniFormatterViewController.swift", 48, 2, 47, 0);
  __break(1u);
}

void sub_10080AD18(uint64_t a1)
{
  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_viewDidAppear) == 1)
  {
    if (*(_BYTE *)(a1 + OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_isHidingMiniFormatter) == 1)
    {
      *(_BYTE *)(a1 + OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_needsRefreshWhenAppears) = 1;
    }
    else
    {
      sub_1004BB5A4((_QWORD *)(a1 + OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_delegate), *(_QWORD *)(a1 + OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_delegate + 24));
      sub_1005C0FEC();
    }
  }
}

void sub_10080AD88()
{
  uint64_t v0;

  sub_1004BB5A4((_QWORD *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_delegate), *(_QWORD *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC8Freeform33CRLiOSMiniFormatterViewController_delegate + 24));
  sub_1005C0FEC();
}

uint64_t sub_10080ADC0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t destroy for CRLShadowData(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(a1[10]);
  swift_bridgeObjectRelease(a1[14]);
  return swift_bridgeObjectRelease(a1[15]);
}

uint64_t initializeWithCopy for CRLShadowData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 20) = *(_QWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  v3 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  v5 = *(_QWORD *)(a2 + 72);
  v6 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v5;
  *(_QWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  v7 = *(_QWORD *)(a2 + 112);
  v8 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v7;
  *(_QWORD *)(a1 + 120) = v8;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t assignWithCopy for CRLShadowData(uint64_t a1, int *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *a2;
  *(_BYTE *)(a1 + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)a1 = v4;
  v5 = *((_QWORD *)a2 + 1);
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  *(_QWORD *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 20) = a2[5];
  *(_DWORD *)(a1 + 24) = a2[6];
  *(_DWORD *)(a1 + 28) = a2[7];
  v6 = *((_QWORD *)a2 + 4);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_DWORD *)(a1 + 40) = a2[10];
  *(_DWORD *)(a1 + 44) = a2[11];
  *(_DWORD *)(a1 + 48) = a2[12];
  *(_DWORD *)(a1 + 52) = a2[13];
  v8 = *((_QWORD *)a2 + 7);
  v9 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_DWORD *)(a1 + 64) = a2[16];
  v10 = *((_QWORD *)a2 + 9);
  v11 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = *((_QWORD *)a2 + 10);
  v13 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_DWORD *)(a1 + 88) = a2[22];
  *(_DWORD *)(a1 + 92) = a2[23];
  *(_DWORD *)(a1 + 96) = a2[24];
  *(_DWORD *)(a1 + 100) = a2[25];
  *(_DWORD *)(a1 + 104) = a2[26];
  v14 = *((_QWORD *)a2 + 14);
  v15 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v16 = *((_QWORD *)a2 + 15);
  v17 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  return a1;
}

uint64_t assignWithTake for CRLShadowData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 20) = *(_QWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  v4 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v4);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease(v5);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 72));
  v6 = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRelease(v6);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 112));
  v7 = *(_QWORD *)(a1 + 120);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for CRLShadowData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 128))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 80);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CRLShadowData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 128) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 80) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 128) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CRLShadowData()
{
  return &type metadata for CRLShadowData;
}

uint64_t sub_10080B258(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10080B288 + 4 * byte_100F0EAD0[a1]))(0x726F6C6F63, 0xE500000000000000);
}

uint64_t sub_10080B288()
{
  return 0x656C676E61;
}

uint64_t sub_10080B298()
{
  return 0x74657366666FLL;
}

uint64_t sub_10080B2AC()
{
  return 0x737569646172;
}

uint64_t sub_10080B2C0()
{
  return 0x7974696361706FLL;
}

unint64_t sub_10080B2D8()
{
  return 0xD000000000000010;
}

BOOL sub_10080B300(char *a1, char *a2)
{
  return qword_100F0F2A0[*a1] == qword_100F0F2A0[*a2];
}

Swift::Int sub_10080B324()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(qword_100F0F2A0[v1]);
  return Hasher._finalize()();
}

void sub_10080B370()
{
  char *v0;

  Hasher._combine(_:)(qword_100F0F2A0[*v0]);
}

Swift::Int sub_10080B3A4(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(qword_100F0F2A0[v2]);
  return Hasher._finalize()();
}

uint64_t sub_10080B3EC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_10080C520(*a1);
  *a2 = result;
  return result;
}

void sub_10080B414(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_100F0F2A0[*v1];
}

uint64_t sub_10080B42C()
{
  unsigned __int8 *v0;

  return sub_10080B258(*v0);
}

uint64_t sub_10080B434@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10080C54C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10080B458()
{
  char *v0;

  return qword_100F0F2A0[*v0];
}

uint64_t sub_10080B470@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_10080C520(a1);
  *a2 = result;
  return result;
}

void sub_10080B494(_QWORD *a1@<X8>)
{
  *a1 = &off_101263B08;
}

uint64_t sub_10080B4A4(uint64_t a1, uint64_t a2)
{
  return sub_1004ED430(a1, a2, (uint64_t (*)(void))sub_10080BC00, (uint64_t (*)(void))sub_10080BC48);
}

uint64_t sub_10080B4B8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10080BC48();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10080B4E0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10080BC48();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10080B50C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  unint64_t v14;
  float v15;
  float v16;
  float v17;
  float v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  char v24;
  _OWORD v25[5];
  uint64_t v26;
  _BYTE v27[16];

  v3 = v1;
  v5 = sub_1004B804C(&qword_1013F4BC0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_1004BB5A4(a1, v9);
  v11 = sub_10080BC48();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CRLShadowData.CodingKeys, &type metadata for CRLShadowData.CodingKeys, v11, v9, v10);
  v12 = *(_OWORD *)(v3 + 48);
  v25[2] = *(_OWORD *)(v3 + 32);
  v25[3] = v12;
  v25[4] = *(_OWORD *)(v3 + 64);
  v26 = *(_QWORD *)(v3 + 80);
  v13 = *(_OWORD *)(v3 + 16);
  v25[0] = *(_OWORD *)v3;
  v25[1] = v13;
  v24 = 0;
  v14 = sub_1006C6680();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v25, &v24, v5, &type metadata for CRLColorData, v14);
  if (!v2)
  {
    v15 = *(float *)(v3 + 88);
    LOBYTE(v25[0]) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v25, v5, v15);
    v16 = *(float *)(v3 + 92);
    LOBYTE(v25[0]) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v25, v5, v16);
    v17 = *(float *)(v3 + 96);
    LOBYTE(v25[0]) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v25, v5, v17);
    v18 = *(float *)(v3 + 100);
    LOBYTE(v25[0]) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v25, v5, v18);
    sub_10080CDE0(v3 + 104, (uint64_t)v27);
    sub_10080CDE0((uint64_t)v27, (uint64_t)v25);
    v24 = 5;
    v19 = sub_10080CE28();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v25, &v24, v5, &type metadata for CRLCurvedShadowData, v19);
    *(_QWORD *)&v25[0] = *(_QWORD *)(v3 + 120);
    v24 = 6;
    v20 = sub_1004B804C((uint64_t *)&unk_1013F3CF0);
    v21 = sub_1004F31B4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v25, &v24, v5, v20, v21);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10080B764()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 120));
}

uint64_t sub_10080B76C(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 120));
  *(_QWORD *)(v1 + 120) = a1;
  return result;
}

Freeform::SyncEvent::FetchedRecordZoneChanges::Deletion (__swiftcall *sub_10080B794())(CKRecordID recordID, Swift::String recordType)
{
  return SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:);
}

uint64_t sub_10080B7A4(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v13[8];
  _OWORD v14[8];

  v2 = a1[5];
  v13[4] = a1[4];
  v13[5] = v2;
  v3 = a1[7];
  v13[6] = a1[6];
  v13[7] = v3;
  v4 = a1[1];
  v13[0] = *a1;
  v13[1] = v4;
  v5 = a1[3];
  v13[2] = a1[2];
  v13[3] = v5;
  v6 = *a2;
  v7 = a2[1];
  v8 = a2[3];
  v14[2] = a2[2];
  v14[3] = v8;
  v14[0] = v6;
  v14[1] = v7;
  v9 = a2[4];
  v10 = a2[5];
  v11 = a2[7];
  v14[6] = a2[6];
  v14[7] = v11;
  v14[4] = v9;
  v14[5] = v10;
  return sub_10080B508(v13, v14) & 1;
}

double sub_10080B814@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v9[2];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  sub_10080C804(a1, v9);
  if (!v2)
  {
    v5 = v13;
    a2[4] = v12;
    a2[5] = v5;
    v6 = v15;
    a2[6] = v14;
    a2[7] = v6;
    v7 = v9[1];
    *a2 = v9[0];
    a2[1] = v7;
    result = *(double *)&v10;
    v8 = v11;
    a2[2] = v10;
    a2[3] = v8;
  }
  return result;
}

uint64_t sub_10080B864(_QWORD *a1)
{
  return sub_10080B50C(a1);
}

uint64_t sub_10080B8AC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10080CE6C();
  return CRExtendableValueStruct.copy(renamingReferences:)(a1, a2, v4);
}

uint64_t sub_10080B8EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;

  v6 = sub_1005E33F4();
  v7 = sub_10080CEB0();
  return CRValue<>.observableDifference(from:with:)(a1, a2, a3, v6, v7);
}

uint64_t sub_10080B948(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10080CE6C();
  return CRExtendableValueStruct.visitReferences(_:)(a1, a2, v4);
}

uint64_t sub_10080B980(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10080BD44();
  return CRValueStruct.init(from:)(a1, a2, v4);
}

uint64_t sub_10080B9CC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10080BD44();
  return CRValueStruct.encode(to:)(a1, a2, v4);
}

uint64_t sub_10080BA10(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10080BD44();
  return CRValueStruct.minEncodingVersion.getter(a1, v2);
}

unint64_t sub_10080BA4C()
{
  unint64_t result;

  result = qword_1013F4B48;
  if (!qword_1013F4B48)
  {
    result = swift_getWitnessTable(&unk_100F0EB04, &type metadata for CRLShadowData);
    atomic_store(result, (unint64_t *)&qword_1013F4B48);
  }
  return result;
}

unint64_t sub_10080BA94()
{
  unint64_t result;

  result = qword_1013F4B50;
  if (!qword_1013F4B50)
  {
    result = swift_getWitnessTable(&unk_100F0EB4C, &type metadata for CRLShadowData);
    atomic_store(result, (unint64_t *)&qword_1013F4B50);
  }
  return result;
}

unint64_t sub_10080BAE0()
{
  unint64_t result;

  result = qword_1013F4B58;
  if (!qword_1013F4B58)
  {
    result = swift_getWitnessTable(&unk_100F0EBD4, &type metadata for CRLShadowData);
    atomic_store(result, (unint64_t *)&qword_1013F4B58);
  }
  return result;
}

unint64_t sub_10080BB28()
{
  unint64_t result;

  result = qword_1013F4B60;
  if (!qword_1013F4B60)
  {
    result = swift_getWitnessTable(&unk_100F0EBAC, &type metadata for CRLShadowData);
    atomic_store(result, (unint64_t *)&qword_1013F4B60);
  }
  return result;
}

unint64_t sub_10080BB70()
{
  unint64_t result;

  result = qword_1013F4B68;
  if (!qword_1013F4B68)
  {
    result = swift_getWitnessTable(&unk_100F0EC7C, &type metadata for CRLShadowData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1013F4B68);
  }
  return result;
}

unint64_t sub_10080BBB8()
{
  unint64_t result;

  result = qword_1013F4B70;
  if (!qword_1013F4B70)
  {
    result = swift_getWitnessTable(&unk_100F0ED8C, &type metadata for CRLShadowData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1013F4B70);
  }
  return result;
}

unint64_t sub_10080BC00()
{
  unint64_t result;

  result = qword_1013F4B78;
  if (!qword_1013F4B78)
  {
    result = swift_getWitnessTable(&unk_100F0ED54, &type metadata for CRLShadowData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1013F4B78);
  }
  return result;
}

unint64_t sub_10080BC48()
{
  unint64_t result;

  result = qword_1013F4B80;
  if (!qword_1013F4B80)
  {
    result = swift_getWitnessTable(&unk_100F0ECB4, &type metadata for CRLShadowData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1013F4B80);
  }
  return result;
}

unint64_t sub_10080BC90()
{
  unint64_t result;

  result = qword_1013F4B88;
  if (!qword_1013F4B88)
  {
    result = swift_getWitnessTable(&unk_100F0ED2C, &type metadata for CRLShadowData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1013F4B88);
  }
  return result;
}

unint64_t sub_10080BCD8()
{
  unint64_t result;

  result = qword_1013F4B90;
  if (!qword_1013F4B90)
  {
    result = swift_getWitnessTable(&unk_100F0ED04, &type metadata for CRLShadowData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1013F4B90);
  }
  return result;
}

uint64_t sub_10080BD1C()
{
  return sub_1006047EC(&qword_1013F4B98, &qword_1013F4BA0);
}

unint64_t sub_10080BD44()
{
  unint64_t result;

  result = qword_1013F4BA8;
  if (!qword_1013F4BA8)
  {
    result = swift_getWitnessTable(&unk_100F0EC34, &type metadata for CRLShadowData);
    atomic_store(result, (unint64_t *)&qword_1013F4BA8);
  }
  return result;
}

uint64_t sub_10080BD88(_QWORD *a1, uint64_t a2, float a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v7 = sub_1004B804C(&qword_1013F4C50);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_1004BB5A4(a1, v11);
  v13 = sub_10080D18C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CRLCurvedShadowData.CodingKeys, &type metadata for CRLCurvedShadowData.CodingKeys, v13, v11, v12);
  v20 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(&v20, v7, a3);
  if (!v3)
  {
    v18 = a2;
    v19 = 1;
    v14 = sub_1004B804C((uint64_t *)&unk_1013F3CF0);
    v15 = sub_1004F31B4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v18, &v19, v7, v14, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_10080BEC8()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000010;
  else
    return 0x6576727563;
}

uint64_t sub_10080BF04@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10080D314(a1, a2);
  *a3 = result;
  return result;
}

void sub_10080BF28(_QWORD *a1@<X8>)
{
  *a1 = &off_101263EC8;
}

uint64_t sub_10080BF38(uint64_t a1, uint64_t a2)
{
  return sub_1004ED430(a1, a2, (uint64_t (*)(void))sub_10080D144, (uint64_t (*)(void))sub_10080D18C);
}

uint64_t sub_10080BF4C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10080D18C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10080BF74(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10080D18C();
  return CodingKey.debugDescription.getter(a1, v2);
}

_QWORD *sub_10080BF9C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  int v5;

  result = sub_10080D3F8(a1);
  if (!v2)
  {
    *(_DWORD *)a2 = v5;
    *(_QWORD *)(a2 + 8) = result;
  }
  return result;
}

uint64_t sub_10080BFC8(_QWORD *a1)
{
  uint64_t v1;

  return sub_10080BD88(a1, *(_QWORD *)(v1 + 8), *(float *)v1);
}

uint64_t sub_10080BFE4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10080D574();
  return CRExtendableValueStruct.copy(renamingReferences:)(a1, a2, v4);
}

uint64_t sub_10080C024(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;

  v6 = sub_10080D064();
  v7 = sub_10080D5B8();
  return CRValue<>.observableDifference(from:with:)(a1, a2, a3, v6, v7);
}

uint64_t sub_10080C080(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10080D574();
  return CRExtendableValueStruct.visitReferences(_:)(a1, a2, v4);
}

uint64_t sub_10080C0B8(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10080D288();
  return CRValueStruct.init(from:)(a1, a2, v4);
}

uint64_t sub_10080C104(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10080D288();
  return CRValueStruct.encode(to:)(a1, a2, v4);
}

uint64_t sub_10080C148(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10080D288();
  return CRValueStruct.minEncodingVersion.getter(a1, v2);
}

uint64_t sub_10080C180(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _OWORD v13[5];
  uint64_t v14;
  _OWORD v15[5];
  uint64_t v16;

  v4 = *(_OWORD *)(a1 + 48);
  v15[2] = *(_OWORD *)(a1 + 32);
  v15[3] = v4;
  v15[4] = *(_OWORD *)(a1 + 64);
  v16 = *(_QWORD *)(a1 + 80);
  v5 = *(_OWORD *)(a1 + 16);
  v15[0] = *(_OWORD *)a1;
  v15[1] = v5;
  v6 = *(_OWORD *)(a2 + 48);
  v13[2] = *(_OWORD *)(a2 + 32);
  v13[3] = v6;
  v13[4] = *(_OWORD *)(a2 + 64);
  v14 = *(_QWORD *)(a2 + 80);
  v7 = *(_OWORD *)(a2 + 16);
  v13[0] = *(_OWORD *)a2;
  v13[1] = v7;
  if ((sub_1006C4CF8(v15, v13) & 1) != 0
    && *(float *)(a1 + 88) == *(float *)(a2 + 88)
    && *(float *)(a1 + 92) == *(float *)(a2 + 92)
    && *(float *)(a1 + 96) == *(float *)(a2 + 96)
    && *(float *)(a1 + 100) == *(float *)(a2 + 100))
  {
    v8 = *(_QWORD *)(a1 + 112);
    v9 = *(_QWORD *)(a2 + 112);
    if (v8)
    {
      if (v9)
      {
        if (*(float *)(a1 + 104) == COERCE_FLOAT(*(_QWORD *)(a2 + 104)))
        {
          swift_bridgeObjectRetain(*(_QWORD *)(a2 + 112));
          swift_bridgeObjectRetain(v8);
          v11 = sub_100C9E04C(v10, v9);
          swift_bridgeObjectRelease(v8);
          swift_bridgeObjectRelease(v9);
          if ((v11 & 1) != 0)
            return sub_100C9E04C(*(_QWORD *)(a1 + 120), *(_QWORD *)(a2 + 120));
        }
      }
    }
    else if (!v9)
    {
      return sub_100C9E04C(*(_QWORD *)(a1 + 120), *(_QWORD *)(a2 + 120));
    }
  }
  return 0;
}

float sub_10080C2C4@<S0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  double v4;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  void *v21;
  double v22;
  double v23;
  unsigned int v24;
  uint64_t v25;
  void *v26;
  float result;
  float v28;
  float v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  *(_QWORD *)&v4 = sub_1006C5DE8(objc_msgSend(a1, "color"), (uint64_t)&v36).n128_u64[0];
  v5 = v36;
  v6 = v37;
  v7 = v38;
  v8 = v39;
  v9 = v40;
  v10 = v41;
  v11 = v42;
  v34 = v44;
  v35 = v43;
  v32 = v46;
  v33 = v45;
  v31 = v47;
  objc_msgSend(a1, "angle", v4);
  v13 = v12;
  objc_msgSend(a1, "offset");
  v15 = v14;
  objc_msgSend(a1, "radius");
  v17 = v16;
  objc_msgSend(a1, "opacity");
  v19 = v18;
  if ((objc_msgSend(a1, "isEnabled") & 1) == 0)
  {
    sub_100757E04(&_mh_execute_header, (uint64_t)"init(archiving:)", 16, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLShadowData.swift", 83, 2, 48, "If a shadow is not enabled, it should be nil", 44, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"init(archiving:)", 16, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/CRLCanvas/CRLShadowData.swift", 83, 2u, 48, (uint64_t)"If a shadow is not enabled, it should be nil", 44, 2u);
  }
  v20 = objc_opt_self(CRLCurvedShadow);
  v21 = (void *)swift_dynamicCastObjCClass(a1, v20);
  if (v21)
  {
    objc_msgSend(v21, "curve");
    v23 = v22;

    *(float *)&v24 = v23;
    v25 = v24;
    v26 = &_swiftEmptyDictionarySingleton;
  }
  else
  {

    v25 = 0;
    v26 = 0;
  }
  result = v13;
  v28 = v15;
  v29 = v17;
  *(_DWORD *)a2 = v5;
  v30 = v19;
  *(_BYTE *)(a2 + 4) = v6;
  *(_QWORD *)(a2 + 8) = v7;
  *(_QWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 24) = v9;
  *(_QWORD *)(a2 + 32) = v10;
  *(_QWORD *)(a2 + 40) = v11;
  *(_QWORD *)(a2 + 48) = v35;
  *(_QWORD *)(a2 + 56) = v34;
  *(_QWORD *)(a2 + 64) = v33;
  *(_QWORD *)(a2 + 72) = v32;
  *(_QWORD *)(a2 + 80) = v31;
  *(float *)(a2 + 88) = result;
  *(float *)(a2 + 92) = v28;
  *(float *)(a2 + 96) = v29;
  *(float *)(a2 + 100) = v30;
  *(_QWORD *)(a2 + 104) = v25;
  *(_QWORD *)(a2 + 112) = v26;
  *(_QWORD *)(a2 + 120) = &_swiftEmptyDictionarySingleton;
  return result;
}

uint64_t sub_10080C520(uint64_t a1)
{
  if ((unint64_t)(a1 + 1) >= 7)
    return 7;
  else
    return (0x5040302010006uLL >> (8 * (a1 + 1)));
}

uint64_t sub_10080C54C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;

  if (a1 == 0x726F6C6F63 && a2 == 0xE500000000000000)
  {
    v5 = 0xE500000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726F6C6F63, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x656C676E61 && a2 == 0xE500000000000000)
  {
    v7 = 0xE500000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C676E61, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x74657366666FLL && a2 == 0xE600000000000000)
  {
    v8 = 0xE600000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74657366666FLL, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x737569646172 && a2 == 0xE600000000000000)
  {
    v9 = 0xE600000000000000;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x737569646172, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x7974696361706FLL && a2 == 0xE700000000000000)
  {
    v10 = 0xE700000000000000;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7974696361706FLL, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0xD000000000000010)
  {
    v11 = 0x8000000100FD6150;
    if (a2 == 0x8000000100FD6150)
      goto LABEL_37;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100FD6150, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x8000000100FAF1E0)
  {
    swift_bridgeObjectRelease(0x8000000100FAF1E0);
    return 6;
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100FAF1E0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v12 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

void sub_10080C804(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  _OWORD *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _OWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  char v84;
  char v85;

  v5 = sub_1004B804C(&qword_1013F4BB0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  v55 = a1;
  sub_1004BB5A4(a1, v9);
  v11 = sub_10080BC48();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CRLShadowData.CodingKeys, &type metadata for CRLShadowData.CodingKeys, v11, v9, v10);
  if (v2)
  {
    _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v55);
    swift_bridgeObjectRelease();
  }
  else
  {
    v53 = a2;
    v54 = v6;
    LOBYTE(v56) = 0;
    v12 = sub_1006C6638();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for CRLColorData, &v56, v5, &type metadata for CRLColorData, v12);
    v83 = v64;
    v13 = BYTE4(v64);
    v50 = v65;
    v51 = v66;
    v14 = v68;
    v48 = v69;
    v49 = v67;
    v15 = v71;
    v16 = v73;
    v46 = v72;
    v47 = v70;
    v17 = v74;
    v84 = BYTE4(v64);
    LOBYTE(v64) = 1;
    swift_bridgeObjectRetain(v73);
    swift_bridgeObjectRetain(v17);
    v52 = v14;
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v15);
    KeyedDecodingContainer.decode(_:forKey:)(&v64, v5);
    v19 = v18;
    v44 = v13;
    v45 = v15;
    LOBYTE(v64) = 2;
    KeyedDecodingContainer.decode(_:forKey:)(&v64, v5);
    v21 = v20;
    LOBYTE(v64) = 3;
    KeyedDecodingContainer.decode(_:forKey:)(&v64, v5);
    v23 = v22;
    LOBYTE(v64) = 4;
    KeyedDecodingContainer.decode(_:forKey:)(&v64, v5);
    v25 = v24;
    LOBYTE(v56) = 5;
    v26 = sub_10080CD30();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for CRLCurvedShadowData, &v56, v5, &type metadata for CRLCurvedShadowData, v26);
    v28 = v64;
    v27 = v65;
    v29 = sub_1004B804C((uint64_t *)&unk_1013F3CF0);
    v85 = 6;
    v30 = sub_1004F3130();
    swift_bridgeObjectRetain(v27);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v29, &v85, v5, v29, v30);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v8, v5);
    v54 = v82;
    swift_bridgeObjectRetain(v82);
    swift_bridgeObjectRelease();
    v31 = v28;
    v43 = v28;
    LODWORD(v28) = v83;
    LODWORD(v56) = v83;
    BYTE4(v56) = v44;
    v32 = v52;
    *((_QWORD *)&v56 + 1) = v50;
    *(_QWORD *)&v57 = v51;
    *((_QWORD *)&v57 + 1) = v49;
    *(_QWORD *)&v58 = v52;
    *((_QWORD *)&v58 + 1) = v48;
    *(_QWORD *)&v59 = v47;
    v33 = v45;
    *((_QWORD *)&v59 + 1) = v45;
    *(_QWORD *)&v60 = v46;
    v34 = v16;
    *((_QWORD *)&v60 + 1) = v16;
    *(_QWORD *)&v61 = v17;
    v35 = v17;
    *((_QWORD *)&v61 + 1) = __PAIR64__(v21, v19);
    *(_QWORD *)&v62 = __PAIR64__(v25, v23);
    *((_QWORD *)&v62 + 1) = v31;
    *(_QWORD *)&v63 = v27;
    v36 = v54;
    *((_QWORD *)&v63 + 1) = v54;
    sub_1005E4084(&v56);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v55);
    LODWORD(v64) = v28;
    BYTE4(v64) = v84;
    v65 = v50;
    v66 = v51;
    v67 = v49;
    v68 = v32;
    v69 = v48;
    v70 = v47;
    v71 = v33;
    v72 = v46;
    v73 = v34;
    v74 = v35;
    v75 = v19;
    v76 = v21;
    v77 = v23;
    v78 = v25;
    v79 = v43;
    v80 = v27;
    v81 = v36;
    sub_10080CD74(&v64);
    v37 = v61;
    v38 = v53;
    v53[4] = v60;
    v38[5] = v37;
    v39 = v63;
    v38[6] = v62;
    v38[7] = v39;
    v40 = v57;
    *v38 = v56;
    v38[1] = v40;
    v41 = v59;
    v38[2] = v58;
    v38[3] = v41;
  }
}

unint64_t sub_10080CD30()
{
  unint64_t result;

  result = qword_1013F4BB8;
  if (!qword_1013F4BB8)
  {
    result = swift_getWitnessTable(&unk_100F0F1D4, &type metadata for CRLCurvedShadowData);
    atomic_store(result, (unint64_t *)&qword_1013F4BB8);
  }
  return result;
}

_QWORD *sub_10080CD74(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[4];
  v3 = a1[7];
  v4 = a1[9];
  v5 = a1[10];
  v6 = a1[14];
  swift_bridgeObjectRelease(a1[15]);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t sub_10080CDE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1004B804C(&qword_1013E6B28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10080CE28()
{
  unint64_t result;

  result = qword_1013F4BC8;
  if (!qword_1013F4BC8)
  {
    result = swift_getWitnessTable(&unk_100F0F1AC, &type metadata for CRLCurvedShadowData);
    atomic_store(result, (unint64_t *)&qword_1013F4BC8);
  }
  return result;
}

unint64_t sub_10080CE6C()
{
  unint64_t result;

  result = qword_1013F4BD0;
  if (!qword_1013F4BD0)
  {
    result = swift_getWitnessTable(&unk_100F0EDDC, &type metadata for CRLShadowData);
    atomic_store(result, (unint64_t *)&qword_1013F4BD0);
  }
  return result;
}

unint64_t sub_10080CEB0()
{
  unint64_t result;

  result = qword_1013F4BD8;
  if (!qword_1013F4BD8)
  {
    result = swift_getWitnessTable(&unk_100F0EDB4, &type metadata for CRLShadowData);
    atomic_store(result, (unint64_t *)&qword_1013F4BD8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CRLShadowData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_10080CF40 + 4 * byte_100F0EADC[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_10080CF74 + 4 * byte_100F0EAD7[v4]))();
}

uint64_t sub_10080CF74(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10080CF7C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10080CF84);
  return result;
}

uint64_t sub_10080CF90(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10080CF98);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_10080CF9C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10080CFA4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CRLShadowData.CodingKeys()
{
  return &type metadata for CRLShadowData.CodingKeys;
}

ValueMetadata *type metadata accessor for CRLCurvedShadowData()
{
  return &type metadata for CRLCurvedShadowData;
}

unint64_t sub_10080CFD4()
{
  unint64_t result;

  result = qword_1013F4BE0;
  if (!qword_1013F4BE0)
  {
    result = swift_getWitnessTable(&unk_100F0EE44, &type metadata for CRLCurvedShadowData);
    atomic_store(result, (unint64_t *)&qword_1013F4BE0);
  }
  return result;
}

unint64_t sub_10080D01C()
{
  unint64_t result;

  result = qword_1013F4BE8;
  if (!qword_1013F4BE8)
  {
    result = swift_getWitnessTable(&unk_100F0EE8C, &type metadata for CRLCurvedShadowData);
    atomic_store(result, (unint64_t *)&qword_1013F4BE8);
  }
  return result;
}

unint64_t sub_10080D064()
{
  unint64_t result;

  result = qword_1013F4BF0;
  if (!qword_1013F4BF0)
  {
    result = swift_getWitnessTable(&unk_100F0EEEC, &type metadata for CRLCurvedShadowData);
    atomic_store(result, (unint64_t *)&qword_1013F4BF0);
  }
  return result;
}

unint64_t sub_10080D0B4()
{
  unint64_t result;

  result = qword_1013F4BF8;
  if (!qword_1013F4BF8)
  {
    result = swift_getWitnessTable(&unk_100F0EF6C, &type metadata for CRLCurvedShadowData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1013F4BF8);
  }
  return result;
}

unint64_t sub_10080D0FC()
{
  unint64_t result;

  result = qword_1013F4C00;
  if (!qword_1013F4C00)
  {
    result = swift_getWitnessTable(&unk_100F0F07C, &type metadata for CRLCurvedShadowData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1013F4C00);
  }
  return result;
}

unint64_t sub_10080D144()
{
  unint64_t result;

  result = qword_1013F4C08;
  if (!qword_1013F4C08)
  {
    result = swift_getWitnessTable(&unk_100F0F044, &type metadata for CRLCurvedShadowData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1013F4C08);
  }
  return result;
}

unint64_t sub_10080D18C()
{
  unint64_t result;

  result = qword_1013F4C10;
  if (!qword_1013F4C10)
  {
    result = swift_getWitnessTable(&unk_100F0EFA4, &type metadata for CRLCurvedShadowData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1013F4C10);
  }
  return result;
}

unint64_t sub_10080D1D4()
{
  unint64_t result;

  result = qword_1013F4C18;
  if (!qword_1013F4C18)
  {
    result = swift_getWitnessTable(&unk_100F0F01C, &type metadata for CRLCurvedShadowData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1013F4C18);
  }
  return result;
}

unint64_t sub_10080D21C()
{
  unint64_t result;

  result = qword_1013F4C20;
  if (!qword_1013F4C20)
  {
    result = swift_getWitnessTable(&unk_100F0EFF4, &type metadata for CRLCurvedShadowData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1013F4C20);
  }
  return result;
}

uint64_t sub_10080D260()
{
  return sub_1006047EC(&qword_1013F4C28, &qword_1013F4C30);
}

unint64_t sub_10080D288()
{
  unint64_t result;

  result = qword_1013F4C38;
  if (!qword_1013F4C38)
  {
    result = swift_getWitnessTable(&unk_100F0EF24, &type metadata for CRLCurvedShadowData);
    atomic_store(result, (unint64_t *)&qword_1013F4C38);
  }
  return result;
}

unint64_t sub_10080D2D0()
{
  unint64_t result;

  result = qword_1013F4C40;
  if (!qword_1013F4C40)
  {
    result = swift_getWitnessTable(&unk_100F0F184, &type metadata for CRLShadowData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1013F4C40);
  }
  return result;
}

uint64_t sub_10080D314(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x6576727563 && a2 == 0xE500000000000000)
  {
    v5 = 0xE500000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6576727563, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x8000000100FAF1E0)
  {
    swift_bridgeObjectRelease(0x8000000100FAF1E0);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100FAF1E0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

_QWORD *sub_10080D3F8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD v14[2];
  char v15;
  char v16;

  v3 = sub_1004B804C(&qword_1013F4C48);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  v9 = sub_1004BB5A4(a1, v7);
  v10 = sub_10080D18C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CRLCurvedShadowData.CodingKeys, &type metadata for CRLCurvedShadowData.CodingKeys, v10, v7, v8);
  if (v1)
  {
    _s8Freeform26AnyCRLCommandChangeContextVwxx_0(a1);
  }
  else
  {
    v16 = 0;
    KeyedDecodingContainer.decode(_:forKey:)(&v16, v3);
    v11 = sub_1004B804C((uint64_t *)&unk_1013F3CF0);
    v15 = 1;
    v12 = sub_1004F3130();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v11, &v15, v3, v11, v12);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v9 = (_QWORD *)v14[1];
    _s8Freeform26AnyCRLCommandChangeContextVwxx_0(a1);
  }
  return v9;
}

unint64_t sub_10080D574()
{
  unint64_t result;

  result = qword_1013F4C58;
  if (!qword_1013F4C58)
  {
    result = swift_getWitnessTable(&unk_100F0F0CC, &type metadata for CRLCurvedShadowData);
    atomic_store(result, (unint64_t *)&qword_1013F4C58);
  }
  return result;
}

unint64_t sub_10080D5B8()
{
  unint64_t result;

  result = qword_1013F4C60;
  if (!qword_1013F4C60)
  {
    result = swift_getWitnessTable(&unk_100F0F0A4, &type metadata for CRLCurvedShadowData);
    atomic_store(result, (unint64_t *)&qword_1013F4C60);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CRLCurvedShadowData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10080D648 + 4 * byte_100F0EAE6[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10080D67C + 4 * byte_100F0EAE1[v4]))();
}

uint64_t sub_10080D67C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10080D684(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10080D68CLL);
  return result;
}

uint64_t sub_10080D698(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10080D6A0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10080D6A4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10080D6AC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CRLCurvedShadowData.CodingKeys()
{
  return &type metadata for CRLCurvedShadowData.CodingKeys;
}

unint64_t sub_10080D6CC()
{
  unint64_t result;

  result = qword_1013F4C68;
  if (!qword_1013F4C68)
  {
    result = swift_getWitnessTable(&unk_100F0F274, &type metadata for CRLCurvedShadowData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1013F4C68);
  }
  return result;
}

uint64_t sub_10080D710(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  uint8x16_t v7;
  uint8x16_t *v8;
  unint64_t v9;
  uint8x16_t v10;
  uint8x16_t v11;
  uint8x8_t v12;
  uint8x8_t *v13;
  unint64_t v14;
  uint8x8_t v15;
  unint64_t v16;
  unsigned __int8 *v17;
  unsigned int v18;
  unsigned int v19;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 5;
  v2 = *(unsigned __int8 *)(a1 + 32);
  v3 = v1 - 1;
  if (v1 != 1)
  {
    if (v1 < 9)
    {
      v4 = 1;
      goto LABEL_17;
    }
    if (v1 >= 0x21)
    {
      v6 = v3 & 0xFFFFFFFFFFFFFFE0;
      v7 = (uint8x16_t)vdupq_n_s8(v2);
      v8 = (uint8x16_t *)(a1 + 49);
      v9 = v3 & 0xFFFFFFFFFFFFFFE0;
      v10 = v7;
      do
      {
        v7 = vmaxq_u8(v7, v8[-1]);
        v10 = vmaxq_u8(v10, *v8);
        v8 += 2;
        v9 -= 32;
      }
      while (v9);
      v11 = vmaxq_u8(v7, v10);
      v11.i8[0] = vmaxvq_u8(v11);
      v2 = v11.u32[0];
      if (v3 == v6)
        return v2;
      if ((v3 & 0x18) == 0)
      {
        v4 = v6 | 1;
        goto LABEL_17;
      }
    }
    else
    {
      v6 = 0;
    }
    v4 = v3 & 0xFFFFFFFFFFFFFFF8 | 1;
    v12 = (uint8x8_t)vdup_n_s8(v2);
    v13 = (uint8x8_t *)(v6 + a1 + 33);
    v14 = v6 - (v3 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v15 = *v13++;
      v12 = vmax_u8(v12, v15);
      v14 += 8;
    }
    while (v14);
    v12.i8[0] = vmaxv_u8(v12);
    v2 = v12.u32[0];
    if (v3 == (v3 & 0xFFFFFFFFFFFFFFF8))
      return v2;
LABEL_17:
    v16 = v1 - v4;
    v17 = (unsigned __int8 *)(v4 + a1 + 32);
    do
    {
      v19 = *v17++;
      v18 = v19;
      if (v2 <= v19)
        v2 = v18;
      else
        v2 = v2;
      --v16;
    }
    while (v16);
  }
  return v2;
}

uint64_t sub_10080D800()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t inited;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  void *v17;
  id v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  char v25;
  char v26;
  void *v27;
  id v28;
  char v29;
  sqlite3_stmt *v30;
  void *v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  __n128 v41;
  void *v42;
  id v43;
  sqlite3_stmt *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  void (*v49)(_QWORD *, uint64_t, uint64_t, __n128);
  void (*v50)(_QWORD *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  _BYTE v53[24];
  char v54[48];
  char v55[32];

  v2 = v0;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (uint64_t *)((char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = (void *)v0[3];
  *v7 = v8;
  v9 = enum case for DispatchPredicate.onQueue(_:);
  v49 = *(void (**)(_QWORD *, uint64_t, uint64_t, __n128))(v4 + 104);
  v49(v7, enum case for DispatchPredicate.onQueue(_:), v3, v5);
  swift_retain(v2);
  v10 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  v50 = *(void (**)(_QWORD *, uint64_t))(v4 + 8);
  v50(v7, v3);
  swift_release(v2);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v11 = v2[2];
  v12 = type metadata accessor for SQLiteStatement();
  inited = swift_initStackObject(v12, v55);
  swift_retain(v11);
  v15 = sub_1006B77CC(v14, 0xD000000000000013, 0x8000000100FD6AC0);
  v16 = swift_release(v11);
  if (!v1)
  {
    v17 = *(void **)(*(_QWORD *)(v15 + 16) + 32);
    *v7 = v17;
    v49(v7, v9, v3, v16);
    v18 = v17;
    LOBYTE(v17) = _dispatchPreconditionTest(_:)(v7);
    v50(v7, v3);
    if ((v17 & 1) != 0)
    {
      v19 = type metadata accessor for SQLiteRowIterator();
      v20 = (_QWORD *)swift_initStackObject(v19, v54);
      v20[4] = 0;
      v20[5] = 1;
      v20[2] = v15;
      v20[3] = 0;
      sub_1006B6B04();
      v22 = v21;
      swift_setDeallocating(v20);
      sub_1006B7DA4(v20[3], v20[4], v20[5]);
      if (v22)
      {
        v48 = v9;
        v24 = sub_1006B45D4(0, v22);
        v26 = v25;
        v23 = swift_release(v22);
        if ((v26 & 1) != 0 || !v24)
        {
          inited = 0;
        }
        else
        {
          if (v24 != 1)
          {
            v32 = (void *)v2[4];
            v45 = sub_1004B804C((uint64_t *)&unk_1013E0180);
            v33 = swift_initStackObject(v45, &v52);
            *(_OWORD *)(v33 + 16) = xmmword_100EF5E40;
            *(_QWORD *)(v33 + 56) = &type metadata for Int;
            *(_QWORD *)(v33 + 64) = &protocol witness table for Int;
            *(_QWORD *)(v33 + 32) = v24;
            v46 = v24;
            v34 = v32;
            v35 = static os_log_type_t.error.getter(v34);
            sub_100A06EBC((uint64_t)v34, &_mh_execute_header, v35, "Invalid schema version detected: %{public}d", 43, 2, v33);
            swift_setDeallocating(v33);
            v47 = sub_1004B804C(&qword_1013E0190);
            swift_arrayDestroy(v33 + 32, 1, v47);

            v36 = swift_initStackObject(v45, &v51);
            *(_OWORD *)(v36 + 16) = xmmword_100EF5A10;
            *(_QWORD *)(v36 + 32) = v24;
            v45 = v36 + 32;
            *(_QWORD *)(v36 + 56) = &type metadata for Int;
            *(_QWORD *)(v36 + 64) = &protocol witness table for Int;
            v38 = v2[5];
            v37 = v2[6];
            *(_QWORD *)(v36 + 96) = &type metadata for String;
            *(_QWORD *)(v36 + 104) = sub_1004CFC2C();
            *(_QWORD *)(v36 + 72) = v38;
            *(_QWORD *)(v36 + 80) = v37;
            swift_bridgeObjectRetain(v37);
            sub_100757E04(&_mh_execute_header, (uint64_t)"_schemaVersion()", 16, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLStore.swift", 80, 2, 117, "Invalid schema version detected: %{public}d for database %{public}@", 67, 2u, v36);
            sub_1004F5394(v36, (uint64_t)"_schemaVersion()", 16, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLStore.swift", 80, 2u, 117, (uint64_t)"Invalid schema version detected: %{public}d for database %{public}@", 67, 2u);
            swift_setDeallocating(v36);
            swift_arrayDestroy(v45, 2, v47);
            v39 = sub_100836D28();
            swift_allocError(&type metadata for CRLSQLSchemaVersionError, v39, 0, 0);
            *v40 = v46;
            swift_willThrow(v41);
            v42 = *(void **)(*(_QWORD *)(v15 + 16) + 32);
            *v7 = v42;
            ((void (*)(_QWORD *, _QWORD, uint64_t))v49)(v7, v48, v3);
            v43 = v42;
            LOBYTE(v42) = _dispatchPreconditionTest(_:)(v7);
            v50(v7, v3);
            if ((v42 & 1) != 0)
            {
              inited = v15 + 24;
              swift_beginAccess(v15 + 24, v53, 1, 0);
              v44 = *(sqlite3_stmt **)(v15 + 24);
              if (v44)
              {
                sqlite3_finalize(v44);
                *(_QWORD *)inited = 0;
              }
              goto LABEL_15;
            }
LABEL_24:
            __break(1u);
          }
          inited = 1;
        }
        v9 = v48;
      }
      else
      {
        inited = 0;
      }
      v27 = *(void **)(*(_QWORD *)(v15 + 16) + 32);
      *v7 = v27;
      v49(v7, v9, v3, v23);
      v28 = v27;
      v29 = _dispatchPreconditionTest(_:)(v7);
      v50(v7, v3);
      if ((v29 & 1) != 0)
      {
        swift_beginAccess(v15 + 24, v53, 1, 0);
        v30 = *(sqlite3_stmt **)(v15 + 24);
        if (v30)
        {
          sqlite3_finalize(v30);
          *(_QWORD *)(v15 + 24) = 0;
        }
LABEL_15:
        swift_release(v15);
        return inited;
      }
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  return inited;
}

uint64_t sub_10080DD28()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  void (*v8)(_QWORD, __n128);
  char *v9;
  id v10;
  char v11;
  void (*v12)(_QWORD *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  void *v18;
  id v19;
  uint64_t v20;
  _QWORD *inited;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  __n128 v36;
  void *v37;
  id v38;
  sqlite3_stmt *v39;
  void *v41;
  id v42;
  sqlite3_stmt *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void (*v47)(_QWORD *, uint64_t);
  unsigned int v48;
  void (*v49)(_QWORD *, _QWORD, uint64_t, __n128);
  _BYTE v50[24];
  uint64_t v51;
  uint64_t v52;
  char v53[48];
  char v54[32];

  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (uint64_t *)((char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(void **)&v0[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue];
  *v6 = v7;
  v8 = *(void (**)(_QWORD, __n128))(v3 + 104);
  v48 = enum case for DispatchPredicate.onQueue(_:);
  v49 = (void (*)(_QWORD *, _QWORD, uint64_t, __n128))v8;
  v8(v6, v4);
  v9 = v0;
  v10 = v7;
  v11 = _dispatchPreconditionTest(_:)(v6);
  v12 = *(void (**)(_QWORD *, uint64_t))(v3 + 8);
  v12(v6, v2);

  if ((v11 & 1) == 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  v13 = *(_QWORD *)&v9[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database];
  v14 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v14, v54);
  swift_retain(v13);
  v16 = sub_1006B77CC(v15, 0xD000000000000013, 0x8000000100FD6AC0);
  v17 = swift_release(v13);
  if (!v1)
  {
    v18 = *(void **)(*(_QWORD *)(v16 + 16) + 32);
    *v6 = v18;
    v49(v6, v48, v2, v17);
    v19 = v18;
    LOBYTE(v18) = _dispatchPreconditionTest(_:)(v6);
    v12(v6, v2);
    if ((v18 & 1) != 0)
    {
      v47 = v12;
      v20 = type metadata accessor for SQLiteRowIterator();
      inited = (_QWORD *)swift_initStackObject(v20, v53);
      inited[4] = 0;
      inited[5] = 1;
      inited[2] = v16;
      inited[3] = 0;
      sub_1006B6B04();
      v23 = v22;
      swift_setDeallocating(inited);
      sub_1006B7DA4(inited[3], inited[4], inited[5]);
      if (v23)
      {
        v24 = sub_1006B45D4(0, v23);
        v26 = v25;
        swift_release(v23);
        if ((v26 & 1) != 0)
          v23 = 0;
        else
          v23 = v24;
      }
      v27 = sub_1009364F0(v23);
      if (v27 != 5)
      {
        v13 = v27;
        v41 = *(void **)(*(_QWORD *)(v16 + 16) + 32);
        *v6 = v41;
        ((void (*)(_QWORD *, _QWORD, uint64_t))v49)(v6, v48, v2);
        v42 = v41;
        LOBYTE(v41) = _dispatchPreconditionTest(_:)(v6);
        v47(v6, v2);
        if ((v41 & 1) != 0)
        {
          swift_beginAccess(v16 + 24, v50, 1, 0);
          v43 = *(sqlite3_stmt **)(v16 + 24);
          if (v43)
          {
            sqlite3_finalize(v43);
            *(_QWORD *)(v16 + 24) = 0;
          }
          goto LABEL_12;
        }
LABEL_21:
        __break(1u);
      }
      v46 = v23;
      v28 = *(void **)&v9[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_logCategory];
      v44 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      v29 = swift_initStackObject(v44, &v52);
      *(_OWORD *)(v29 + 16) = xmmword_100EF5E40;
      *(_QWORD *)(v29 + 56) = &type metadata for Int;
      *(_QWORD *)(v29 + 64) = &protocol witness table for Int;
      *(_QWORD *)(v29 + 32) = v23;
      v30 = v28;
      v31 = static os_log_type_t.error.getter(v30);
      sub_100A06EBC((uint64_t)v30, &_mh_execute_header, v31, "Invalid schema version detected: %{public}d", 43, 2, v29);
      swift_setDeallocating(v29);
      v45 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(v29 + 32, 1, v45);

      v13 = swift_initStackObject(v44, &v51);
      *(_OWORD *)(v13 + 16) = xmmword_100EF5A10;
      *(_QWORD *)(v13 + 56) = &type metadata for Int;
      *(_QWORD *)(v13 + 64) = &protocol witness table for Int;
      *(_QWORD *)(v13 + 32) = v46;
      v33 = *(_QWORD *)&v9[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_storeName];
      v32 = *(_QWORD *)&v9[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_storeName + 8];
      *(_QWORD *)(v13 + 96) = &type metadata for String;
      *(_QWORD *)(v13 + 104) = sub_1004CFC2C();
      *(_QWORD *)(v13 + 72) = v33;
      *(_QWORD *)(v13 + 80) = v32;
      swift_bridgeObjectRetain(v32);
      sub_100757E04(&_mh_execute_header, (uint64_t)"_schemaVersion()", 16, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLStore.swift", 80, 2, 117, "Invalid schema version detected: %{public}d for database %{public}@", 67, 2u, v13);
      sub_1004F5394(v13, (uint64_t)"_schemaVersion()", 16, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLStore.swift", 80, 2u, 117, (uint64_t)"Invalid schema version detected: %{public}d for database %{public}@", 67, 2u);
      swift_setDeallocating(v13);
      swift_arrayDestroy(v13 + 32, 2, v45);
      v34 = sub_100836D28();
      swift_allocError(&type metadata for CRLSQLSchemaVersionError, v34, 0, 0);
      *v35 = v46;
      swift_willThrow(v36);
      v37 = *(void **)(*(_QWORD *)(v16 + 16) + 32);
      *v6 = v37;
      ((void (*)(_QWORD *, _QWORD, uint64_t))v49)(v6, v48, v2);
      v38 = v37;
      LOBYTE(v37) = _dispatchPreconditionTest(_:)(v6);
      v47(v6, v2);
      if ((v37 & 1) != 0)
      {
        swift_beginAccess(v16 + 24, v50, 1, 0);
        v39 = *(sqlite3_stmt **)(v16 + 24);
        if (v39)
        {
          sqlite3_finalize(v39);
          *(_QWORD *)(v16 + 24) = 0;
        }
LABEL_12:
        swift_release(v16);
        return v13;
      }
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  return v13;
}

void sub_10080E270(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  void (*v11)(_QWORD *, uint64_t, uint64_t, __n128);
  id v12;
  void (*v13)(_QWORD *, uint64_t);
  uint64_t v14;
  Swift::String v15;
  void *object;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  void *v22;
  id v23;
  sqlite3_stmt **v24;
  int v25;
  void *v26;
  id v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  __n128 v31;
  void *v32;
  id v33;
  char v34;
  _QWORD v35[2];
  unint64_t v36;
  unint64_t v37;
  _BYTE v38[32];

  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (_QWORD *)((char *)v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(void **)(v1 + 24);
  *v8 = v9;
  v10 = enum case for DispatchPredicate.onQueue(_:);
  v11 = *(void (**)(_QWORD *, uint64_t, uint64_t, __n128))(v5 + 104);
  v11(v8, enum case for DispatchPredicate.onQueue(_:), v4, v6);
  swift_retain(v1);
  v12 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  v13 = *(void (**)(_QWORD *, uint64_t))(v5 + 8);
  v13(v8, v4);
  swift_release(v1);
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v14 = *(_QWORD *)(v1 + 16);
  v36 = 0;
  v37 = 0xE000000000000000;
  swift_retain(v14);
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease(v37);
  v36 = 0xD000000000000016;
  v37 = 0x8000000100FD6A10;
  v35[1] = a1;
  v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v15._object;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(object);
  v17 = v36;
  v18 = v37;
  v19 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v19, v38);
  v20 = sub_1006B77CC(v14, v17, v18);
  v21 = swift_release(v14);
  if (v2)
    return;
  v22 = *(void **)(*(_QWORD *)(v20 + 16) + 32);
  *v8 = v22;
  v11(v8, v10, v4, v21);
  v23 = v22;
  LOBYTE(v22) = _dispatchPreconditionTest(_:)(v8);
  v13(v8, v4);
  if ((v22 & 1) == 0)
    goto LABEL_13;
  v24 = (sqlite3_stmt **)(v20 + 24);
  swift_beginAccess(v20 + 24, &v36, 1, 0);
  v25 = sqlite3_step(*(sqlite3_stmt **)(v20 + 24));
  if (v25 != 101)
    goto LABEL_7;
  v26 = *(void **)(*(_QWORD *)(v20 + 16) + 32);
  *v8 = v26;
  ((void (*)(_QWORD *, uint64_t, uint64_t))v11)(v8, v10, v4);
  v27 = v26;
  v10 = _dispatchPreconditionTest(_:)(v8);
  v25 = ((uint64_t (*)(_QWORD *, uint64_t))v13)(v8, v4);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_7:
    v28 = v25;
    v29 = sub_1006B79EC();
    swift_allocError(&type metadata for SQLiteError, v29, 0, 0);
    *(_DWORD *)v30 = v28;
    *(_QWORD *)(v30 + 8) = 0;
    *(_QWORD *)(v30 + 16) = 0;
    swift_willThrow(v31);
    v32 = *(void **)(*(_QWORD *)(v20 + 16) + 32);
    *v8 = v32;
    ((void (*)(_QWORD *, uint64_t, uint64_t))v11)(v8, v10, v4);
    v33 = v32;
    v34 = _dispatchPreconditionTest(_:)(v8);
    v13(v8, v4);
    if ((v34 & 1) != 0)
      goto LABEL_8;
LABEL_14:
    __break(1u);
  }
LABEL_8:
  if (*v24)
  {
    sqlite3_finalize(*v24);
    *v24 = 0;
  }
  swift_release(v20);
}

void sub_10080E56C(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  void (*v11)(_QWORD *, uint64_t, uint64_t, __n128);
  char *v12;
  id v13;
  void (*v14)(_QWORD *, uint64_t);
  uint64_t v15;
  Swift::String v16;
  void *object;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  void *v23;
  id v24;
  sqlite3_stmt **v25;
  int v26;
  void *v27;
  id v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  __n128 v32;
  void *v33;
  id v34;
  char v35;
  _QWORD v36[2];
  unint64_t v37;
  unint64_t v38;
  char v39[32];

  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (_QWORD *)((char *)v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(void **)&v1[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue];
  *v8 = v9;
  v10 = enum case for DispatchPredicate.onQueue(_:);
  v11 = *(void (**)(_QWORD *, uint64_t, uint64_t, __n128))(v5 + 104);
  v11(v8, enum case for DispatchPredicate.onQueue(_:), v4, v6);
  v12 = v1;
  v13 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  v14 = *(void (**)(_QWORD *, uint64_t))(v5 + 8);
  v14(v8, v4);

  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v15 = *(_QWORD *)&v12[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database];
  v37 = 0;
  v38 = 0xE000000000000000;
  swift_retain(v15);
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease(v38);
  v37 = 0xD000000000000016;
  v38 = 0x8000000100FD6A10;
  v36[1] = a1;
  v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v16._object;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(object);
  v18 = v37;
  v19 = v38;
  v20 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v20, v39);
  v21 = sub_1006B77CC(v15, v18, v19);
  v22 = swift_release(v15);
  if (v2)
    return;
  v23 = *(void **)(*(_QWORD *)(v21 + 16) + 32);
  *v8 = v23;
  v11(v8, v10, v4, v22);
  v24 = v23;
  LOBYTE(v23) = _dispatchPreconditionTest(_:)(v8);
  v14(v8, v4);
  if ((v23 & 1) == 0)
    goto LABEL_13;
  v25 = (sqlite3_stmt **)(v21 + 24);
  swift_beginAccess(v21 + 24, &v37, 1, 0);
  v26 = sqlite3_step(*(sqlite3_stmt **)(v21 + 24));
  if (v26 != 101)
    goto LABEL_7;
  v27 = *(void **)(*(_QWORD *)(v21 + 16) + 32);
  *v8 = v27;
  ((void (*)(_QWORD *, uint64_t, uint64_t))v11)(v8, v10, v4);
  v28 = v27;
  v10 = _dispatchPreconditionTest(_:)(v8);
  v26 = ((uint64_t (*)(_QWORD *, uint64_t))v14)(v8, v4);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_7:
    v29 = v26;
    v30 = sub_1006B79EC();
    swift_allocError(&type metadata for SQLiteError, v30, 0, 0);
    *(_DWORD *)v31 = v29;
    *(_QWORD *)(v31 + 8) = 0;
    *(_QWORD *)(v31 + 16) = 0;
    swift_willThrow(v32);
    v33 = *(void **)(*(_QWORD *)(v21 + 16) + 32);
    *v8 = v33;
    ((void (*)(_QWORD *, uint64_t, uint64_t))v11)(v8, v10, v4);
    v34 = v33;
    v35 = _dispatchPreconditionTest(_:)(v8);
    v14(v8, v4);
    if ((v35 & 1) != 0)
      goto LABEL_8;
LABEL_14:
    __break(1u);
  }
LABEL_8:
  if (*v25)
  {
    sqlite3_finalize(*v25);
    *v25 = 0;
  }
  swift_release(v21);
}

void sub_10080E87C(uint64_t (*a1)(void))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t inited;
  id v14;
  __n128 v15;
  uint64_t v16;
  _BYTE v18[32];

  v3 = v1;
  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0) + 128;
  v9 = *(void **)(v3 + 24);
  *v8 = v9;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  swift_retain(v3);
  v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v8, v5);
  swift_release(v3);
  if ((v9 & 1) != 0)
  {
    v11 = *(_QWORD *)(v3 + 16);
    v12 = type metadata accessor for SQLTransaction();
    inited = swift_initStackObject(v12, v18);
    *(_QWORD *)(inited + 16) = v11;
    *(_BYTE *)(inited + 24) = 0;
    swift_retain(v11);
    sub_1006B6CB8();
    if (!v2)
    {
      if ((a1() & 1) != 0)
      {
        sub_1006B70D4();
      }
      else
      {
        v14 = *(id *)(v3 + 32);
        v16 = static os_log_type_t.default.getter(v15);
        sub_100A06EBC((uint64_t)v14, &_mh_execute_header, v16, "The block of SQL code returned false. This means we should roll back the transaction", 84, 2, (uint64_t)_swiftEmptyArrayStorage);

        sub_1006B7380();
      }
    }
    swift_release(inited);
  }
  else
  {
    __break(1u);
  }
}

void sub_10080EB50(uint64_t (*a1)(void))
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  char *v9;
  id v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t inited;
  id v15;
  __n128 v16;
  uint64_t v17;
  char v19[40];

  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0) + 120;
  v8 = *(void **)&v1[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue];
  *v7 = v8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  v9 = v1;
  v10 = v8;
  v11 = _dispatchPreconditionTest(_:)(v7);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);

  if ((v11 & 1) != 0)
  {
    v12 = *(_QWORD *)&v9[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database];
    v13 = type metadata accessor for SQLTransaction();
    inited = swift_initStackObject(v13, v19);
    *(_QWORD *)(inited + 16) = v12;
    *(_BYTE *)(inited + 24) = 0;
    swift_retain(v12);
    sub_1006B6CB8();
    if (!v2)
    {
      if ((a1() & 1) != 0)
      {
        sub_1006B70D4();
      }
      else
      {
        v15 = *(id *)&v9[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_logCategory];
        v17 = static os_log_type_t.default.getter(v16);
        sub_100A06EBC((uint64_t)v15, &_mh_execute_header, v17, "The block of SQL code returned false. This means we should roll back the transaction", 84, 2, (uint64_t)_swiftEmptyArrayStorage);

        sub_1006B7380();
      }
    }
    swift_release(inited);
  }
  else
  {
    __break(1u);
  }
}

void sub_10080EE54(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  id v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  uint64_t inited;
  uint64_t v20;
  id v21;
  __n128 v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  id v43;
  __n128 v44;
  uint64_t v45;
  CKRecordID v46;
  uint64_t v47;
  unint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58[72];
  _QWORD *v59;
  unsigned __int8 v60;

  v53 = a3;
  v8 = a1 & 1;
  v9 = type metadata accessor for DispatchPredicate(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (unint64_t *)((char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v60 = v8;
  v59 = v4;
  v14 = (void *)v4[3];
  *v13 = v14;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v10 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v9, v11);
  swift_retain(v4);
  v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)(v13);
  (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v13, v9);
  swift_release(v4);
  if ((v14 & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  v52 = a4;
  v16 = v59;
  v17 = (void *)v59[4];
  v18 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v18, v58);
  v51 = xmmword_100EF5E40;
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  *(_QWORD *)(inited + 56) = &type metadata for Int;
  *(_QWORD *)(inited + 64) = &protocol witness table for Int;
  v20 = v60;
  *(_QWORD *)(inited + 32) = v60;
  v21 = v17;
  v23 = static os_log_type_t.default.getter(v22);
  sub_100A06EBC((uint64_t)v21, &_mh_execute_header, v23, "Migrating database to schema version %{public}d", 47, 2, inited);
  swift_setDeallocating(inited);
  v54 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(inited + 32, 1, v54);

  v24 = sub_10080D800();
  if (v5)
    return;
  v25 = v24;
  v26 = v18;
  v27 = a2 & 1;
  v50 = v26;
  a2 = swift_initStackObject(v26, &v57);
  *(_OWORD *)(a2 + 16) = xmmword_100EF5E30;
  *(_QWORD *)(a2 + 32) = v25 & 1;
  *(_QWORD *)(a2 + 56) = &type metadata for Int;
  *(_QWORD *)(a2 + 64) = &protocol witness table for Int;
  *(_QWORD *)(a2 + 72) = v27;
  *(_QWORD *)(a2 + 96) = &type metadata for Int;
  *(_QWORD *)(a2 + 104) = &protocol witness table for Int;
  *(_QWORD *)(a2 + 136) = &type metadata for Int;
  *(_QWORD *)(a2 + 144) = &protocol witness table for Int;
  *(_QWORD *)(a2 + 112) = v20;
  v28 = v16[5];
  v10 = v16[6];
  *(_QWORD *)(a2 + 176) = &type metadata for String;
  v49 = sub_1004CFC2C();
  *(_QWORD *)(a2 + 184) = v49;
  *(_QWORD *)(a2 + 152) = v28;
  *(_QWORD *)(a2 + 160) = v10;
  if ((v25 & 1) != (_DWORD)v27)
  {
LABEL_8:
    swift_bridgeObjectRetain(v10);
    v34 = 129;
    sub_100757E04(&_mh_execute_header, (uint64_t)"_migrate(toNewSchemaVersion:fromOldSchemaVersion:viaQuery:)", 59, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLStore.swift", 80, 2, 189, "Current schema version %{public}d doesn't match expected version %{public}d before migration to %{public}d in %{public}@ database", 129, 2u, a2);
    sub_100518FC0(a2, (uint64_t)"Current schema version %{public}d doesn't match expected version %{public}d before migration to %{public}d in %{public}@ database");
    sub_100519194(a2, (uint64_t)"_migrate(toNewSchemaVersion:fromOldSchemaVersion:viaQuery:)", 59, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLStore.swift", 80, 2u, 189, (uint64_t)"Current schema version %{public}d doesn't match expected version %{public}d before migration to %{public}d in %{public}@ database", 129, 2u);
    goto LABEL_9;
  }
  swift_setDeallocating(a2);
  swift_bridgeObjectRetain(v10);
  swift_arrayDestroy(a2 + 32, 4, v54);
  __chkstk_darwin(v29);
  sub_10080E87C(sub_100836D6C);
  v30 = v50;
  v31 = v59;
  v32 = sub_10080D800();
  v33 = swift_initStackObject(v30, &v56);
  v34 = v33;
  *(_OWORD *)(v33 + 16) = xmmword_100EF5550;
  v35 = v32 & 1;
  *(_QWORD *)(v33 + 32) = v35;
  v36 = v33 + 32;
  *(_QWORD *)(v33 + 56) = &type metadata for Int;
  *(_QWORD *)(v33 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v33 + 96) = &type metadata for Int;
  *(_QWORD *)(v33 + 104) = &protocol witness table for Int;
  v37 = v60;
  *(_QWORD *)(v33 + 72) = v60;
  v38 = v31[5];
  a2 = v31[6];
  *(_QWORD *)(v33 + 136) = &type metadata for String;
  *(_QWORD *)(v33 + 144) = v49;
  *(_QWORD *)(v33 + 112) = v38;
  *(_QWORD *)(v33 + 120) = a2;
  v53 = v35;
  if (v35 != v37)
  {
    while (1)
    {
      swift_bridgeObjectRetain(a2);
      sub_100757E04(&_mh_execute_header, (uint64_t)"_migrate(toNewSchemaVersion:fromOldSchemaVersion:viaQuery:)", 59, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLStore.swift", 80, 2, 207, "Queried schema version %{public}d does not match expected (%{public}d) after migration transaction in %{public}@ database", 121, 2u, v34);
      sub_100518FC0(v34, (uint64_t)"Queried schema version %{public}d does not match expected (%{public}d) after migration transaction in %{public}@ database");
      sub_100519194(v34, (uint64_t)"_migrate(toNewSchemaVersion:fromOldSchemaVersion:viaQuery:)", 59, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLStore.swift", 80, 2u, 207, (uint64_t)"Queried schema version %{public}d does not match expected (%{public}d) after migration transaction in %{public}@ database", 121, 2u);
LABEL_9:
      SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v46, *(Swift::String *)&v47);
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Freeform/CRLAssert.swift", 24, 2, 348, 0);
      __break(1u);
    }
  }
  swift_setDeallocating(v33);
  swift_bridgeObjectRetain(a2);
  v39 = v36;
  v40 = v54;
  swift_arrayDestroy(v39, 3, v54);
  v41 = (void *)v31[4];
  v42 = swift_initStackObject(v30, &v55);
  *(_OWORD *)(v42 + 16) = v51;
  *(_QWORD *)(v42 + 56) = &type metadata for Int;
  *(_QWORD *)(v42 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v42 + 32) = v53;
  v43 = v41;
  v45 = static os_log_type_t.default.getter(v44);
  sub_100A06EBC((uint64_t)v43, &_mh_execute_header, v45, "Successfully migrated database to schema version %{public}d", 59, 2, v42);
  swift_setDeallocating(v42);
  swift_arrayDestroy(v42 + 32, 1, v40);

}

uint64_t sub_10080F3CC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  void *v17;
  uint64_t v18;
  void (*v19)(_QWORD *, uint64_t, uint64_t);
  id v20;
  sqlite3_stmt **v21;
  int v22;
  void *v23;
  id v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  __n128 v28;
  void *v29;
  id v30;
  void *v31;
  id v32;
  uint64_t v34;
  void (*v35)(_QWORD *, uint64_t);
  _BYTE v36[24];
  _BYTE v37[32];

  v9 = type metadata accessor for DispatchPredicate(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (uint64_t *)((char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = *(_QWORD *)(a1 + 16);
  v14 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v14, v37);
  swift_retain(v13);
  swift_bridgeObjectRetain(a3);
  v15 = sub_1006B77CC(v13, a2, a3);
  v16 = swift_release(v13);
  if (v4)
    return 1;
  HIDWORD(v34) = a4;
  v17 = *(void **)(*(_QWORD *)(v15 + 16) + 32);
  *v12 = v17;
  v18 = enum case for DispatchPredicate.onQueue(_:);
  v19 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v10 + 104);
  ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v19)(v12, enum case for DispatchPredicate.onQueue(_:), v9, v16);
  v20 = v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)(v12);
  v35 = *(void (**)(_QWORD *, uint64_t))(v10 + 8);
  v35(v12, v9);
  if ((v17 & 1) == 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  v21 = (sqlite3_stmt **)(v15 + 24);
  swift_beginAccess(v15 + 24, v36, 1, 0);
  v22 = sqlite3_step(*(sqlite3_stmt **)(v15 + 24));
  if (v22 == 101)
  {
    v23 = *(void **)(a1 + 24);
    *v12 = v23;
    v19(v12, v18, v9);
    swift_retain(a1);
    v24 = v23;
    LOBYTE(v23) = _dispatchPreconditionTest(_:)(v12);
    v35(v12, v9);
    swift_release(a1);
    if ((v23 & 1) != 0)
    {
      sub_10080E270(BYTE4(v34) & 1);
      goto LABEL_8;
    }
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v25 = v22;
  v26 = sub_1006B79EC();
  swift_allocError(&type metadata for SQLiteError, v26, 0, 0);
  *(_DWORD *)v27 = v25;
  *(_QWORD *)(v27 + 8) = 0xD000000000000020;
  *(_QWORD *)(v27 + 16) = 0x8000000100FD69E0;
  swift_willThrow(v28);
  v29 = *(void **)(*(_QWORD *)(v15 + 16) + 32);
  *v12 = v29;
  v19(v12, v18, v9);
  v30 = v29;
  LOBYTE(v29) = _dispatchPreconditionTest(_:)(v12);
  v35(v12, v9);
  if ((v29 & 1) == 0)
  {
    __break(1u);
LABEL_8:
    v31 = *(void **)(*(_QWORD *)(v15 + 16) + 32);
    *v12 = v31;
    v19(v12, v18, v9);
    v32 = v31;
    LOBYTE(v31) = _dispatchPreconditionTest(_:)(v12);
    v35(v12, v9);
    if ((v31 & 1) != 0)
      goto LABEL_9;
LABEL_15:
    __break(1u);
  }
LABEL_9:
  if (*v21)
  {
    sqlite3_finalize(*v21);
    *v21 = 0;
  }
  swift_release(v15);
  return 1;
}

void sub_10080F700()
{
  uint64_t v0;
  const char *v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  void (*v11)(_QWORD *, uint64_t, uint64_t, __n128);
  id v12;
  void (*v13)(_QWORD *, uint64_t);
  uint64_t v14;
  __n128 v15;
  void *v16;
  id v17;
  __n128 v18;
  void *v19;
  id v20;
  __n128 v21;
  void *v22;
  id v23;
  char v24;
  uint64_t v25;
  id v26;
  __n128 v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  char *v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;
  uint64_t v39;
  char *v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  uint64_t v43;
  id v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  unsigned __int8 v54;
  uint64_t v55;
  char *v56;
  unsigned __int8 v57;
  unsigned __int8 v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 v61;
  uint64_t v62;
  char *v63;
  unsigned __int8 v64;
  unsigned __int8 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t inited;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  CKRecordID v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned __int8 v89;
  uint64_t v90;
  char *v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99[3];
  uint64_t v100;
  _QWORD v101[3];
  char v102[8];
  char v103[152];
  uint64_t v104;
  const char *v105;

  v2 = v1;
  v3 = v0;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (uint64_t *)((char *)&v94 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(void **)(v0 + 24);
  *v8 = v9;
  v10 = enum case for DispatchPredicate.onQueue(_:);
  v11 = *(void (**)(_QWORD *, uint64_t, uint64_t, __n128))(v5 + 104);
  v11(v8, enum case for DispatchPredicate.onQueue(_:), v4, v6);
  swift_retain(v3);
  v12 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  v13 = *(void (**)(_QWORD *, uint64_t))(v5 + 8);
  v13(v8, v4);
  swift_release(v3);
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v14 = *(_QWORD *)(v3 + 16);
  swift_retain(v14);
  sub_1006B5520(3178502);
  v15 = swift_release(v14);
  if (v1)
    return;
  v95 = v3;
  v16 = *(void **)(v14 + 32);
  *v8 = v16;
  v11(v8, v10, v4, v15);
  swift_retain(v14);
  v17 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)(v8);
  v13(v8, v4);
  if ((v16 & 1) == 0)
    goto LABEL_28;
  sub_1006B7B68(v14, 0xD00000000000001CLL, 0x8000000100FD6470);
  swift_release(v14);
  swift_retain(v14);
  sub_1006B48D0();
  v18 = swift_release(v14);
  v19 = *(void **)(v14 + 32);
  *v8 = v19;
  v11(v8, v10, v4, v18);
  swift_retain(v14);
  v20 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)(v8);
  v13(v8, v4);
  if ((v19 & 1) == 0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  sub_1006B7B68(v14, 0xD00000000000001ALL, 0x8000000100FD6490);
  v21 = swift_release(v14);
  v22 = *(void **)(v14 + 32);
  *v8 = v22;
  v11(v8, v10, v4, v21);
  swift_retain(v14);
  v23 = v22;
  v24 = _dispatchPreconditionTest(_:)(v8);
  v13(v8, v4);
  if ((v24 & 1) == 0)
  {
LABEL_30:
    __break(1u);
    v105 = v1;
    swift_errorRetain(v1);
    v68 = sub_1004B804C(&qword_1013E0210);
    if ((swift_dynamicCast(&v104, &v105, v68, &type metadata for CRLSQLSchemaVersionError, 0) & 1) == 0)
      goto LABEL_34;
    v69 = v104;
    v70 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    inited = swift_initStackObject(v70, &v98);
    *(_OWORD *)(inited + 16) = xmmword_100EF5550;
    v73 = *(_QWORD *)(v95 + 40);
    v72 = *(_QWORD *)(v95 + 48);
    *(_QWORD *)(inited + 56) = &type metadata for String;
    v74 = sub_1004CFC2C();
    *(_QWORD *)(inited + 32) = v73;
    *(_QWORD *)(inited + 40) = v72;
    *(_QWORD *)(inited + 96) = &type metadata for Int;
    *(_QWORD *)(inited + 104) = &protocol witness table for Int;
    *(_QWORD *)(inited + 64) = v74;
    *(_QWORD *)(inited + 72) = v69;
    v89 = 0;
    v90 = 1;
    v91 = &byte_101263811;
    do
    {
      v93 = *v91++;
      v92 = v93;
      if ((v93 & ~v89 & 1) != 0)
        v89 = v92;
      --v90;
    }
    while (v90);
    *(_QWORD *)(inited + 136) = &type metadata for Int;
    *(_QWORD *)(inited + 144) = &protocol witness table for Int;
    *(_QWORD *)(inited + 112) = v89 & 1;
    swift_bridgeObjectRetain(v72);
    v2 = "Encountered an unknown schema version for the %{public}@ database during possible migration, found value %{publ"
         "ic}d is less than latest known value %{public}d. You are probably trying to open a newer database on an older c"
         "lient, but this is not supported.";
    sub_100757E04(&_mh_execute_header, (uint64_t)"_openDatabase()", 15, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLStore.swift", 80, 2, 233, "Encountered an unknown schema version for the %{public}@ database during possible migration, found value %{public}d is less than latest known value %{public}d. You are probably trying to open a newer database on an older client, but this is not supported.", 255, 2u, inited);
    sub_100518FC0(inited, (uint64_t)"Encountered an unknown schema version for the %{public}@ database during possible migration, found value %{public}d is less than latest known value %{public}d. You are probably trying to open a newer database on an older client, but this is not supported.");
    sub_100519194(inited, (uint64_t)"_openDatabase()", 15, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLStore.swift", 80, 2u, 233, (uint64_t)"Encountered an unknown schema version for the %{public}@ database during possible migration, found value %{public}d is less than latest known value %{public}d. You are probably trying to open a newer database on an older client, but this is not supported.", 255, 2u);
    goto LABEL_33;
  }
  sub_1006B7B68(v14, 0xD000000000000019, 0x8000000100FD64B0);
  swift_release(v14);
  v25 = v95;
  v26 = *(id *)(v95 + 32);
  v28 = static os_log_type_t.info.getter(v27);
  sub_100A06EBC((uint64_t)v26, &_mh_execute_header, v28, "Going to migrate schema version if necessary", 44, 2, (uint64_t)_swiftEmptyArrayStorage);

  v29 = sub_10080D800() & 1;
  v30 = 0;
  v31 = 1;
  v32 = &byte_101263771;
  do
  {
    v34 = *v32++;
    v33 = v34;
    if ((v34 & ~(_BYTE)v30 & 1) != 0)
      v30 = v33;
    --v31;
  }
  while (v31);
  if ((((v29 == 0) ^ v30) & 1) == 0)
  {
    sub_100810014(v29);
    v49 = sub_10080D800();
    v50 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    v51 = swift_initStackObject(v50, &v97);
    *(_OWORD *)(v51 + 16) = xmmword_100EF5550;
    *(_QWORD *)(v51 + 32) = v49 & 1;
    v52 = v51 + 32;
    *(_QWORD *)(v51 + 56) = &type metadata for Int;
    *(_QWORD *)(v51 + 64) = &protocol witness table for Int;
    v53 = (_QWORD *)v51;
    v54 = 0;
    v55 = 1;
    v56 = &byte_1012637C1;
    do
    {
      v58 = *v56++;
      v57 = v58;
      if ((v58 & ~v54 & 1) != 0)
        v54 = v57;
      --v55;
    }
    while (v55);
    *(_QWORD *)(v51 + 96) = &type metadata for Int;
    *(_QWORD *)(v51 + 104) = &protocol witness table for Int;
    *(_QWORD *)(v51 + 72) = v54 & 1;
    v60 = *(_QWORD *)(v25 + 40);
    v59 = *(_QWORD *)(v25 + 48);
    *(_QWORD *)(v51 + 136) = &type metadata for String;
    *(_QWORD *)(v51 + 144) = sub_1004CFC2C();
    v53[14] = v60;
    v53[15] = v59;
    v61 = 0;
    v62 = 1;
    v63 = &byte_1012637E9;
    do
    {
      v65 = *v63++;
      v64 = v65;
      if ((v65 & ~v61 & 1) != 0)
        v61 = v64;
      --v62;
    }
    while (v62);
    if (((v49 & 1) == 0) != (v61 & 1))
    {
      swift_setDeallocating(v53);
      v66 = v53[2];
      swift_bridgeObjectRetain(v59);
      v67 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(v52, v66, v67);
      return;
    }
    swift_bridgeObjectRetain(v59);
    v2 = "Current schema version %{public}d after all migrations is not the same as the defined latest schema version %{p"
         "ublic}d for %{public}@ database";
    sub_100757E04(&_mh_execute_header, (uint64_t)"_openDatabase()", 15, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLStore.swift", 80, 2, 246, "Current schema version %{public}d after all migrations is not the same as the defined latest schema version %{public}d for %{public}@ database", 142, 2u, (uint64_t)v53);
    sub_100518FC0((uint64_t)v53, (uint64_t)"Current schema version %{public}d after all migrations is not the same as the defined latest schema version %{public}d for %{public}@ database");
    sub_100519194((uint64_t)v53, (uint64_t)"_openDatabase()", 15, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLStore.swift", 80, 2u, 246, (uint64_t)"Current schema version %{public}d after all migrations is not the same as the defined latest schema version %{public}d for %{public}@ database", 142, 2u);
    while (1)
    {
LABEL_33:
      SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v75, *(Swift::String *)&v76);
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Freeform/CRLAssert.swift", 24, 2, 348, 0);
      __break(1u);
LABEL_34:
      swift_errorRelease(v105);
      v78 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      v79 = swift_initStackObject(v78, v103);
      *(_OWORD *)(v79 + 16) = xmmword_100EF5550;
      v80 = *(_QWORD *)(v95 + 40);
      v81 = *(_QWORD *)(v95 + 48);
      *(_QWORD *)(v79 + 56) = &type metadata for String;
      v82 = sub_1004CFC2C();
      *(_QWORD *)(v79 + 64) = v82;
      *(_QWORD *)(v79 + 32) = v80;
      *(_QWORD *)(v79 + 40) = v81;
      swift_getErrorValue(v2, v102, v101);
      v83 = v101[1];
      v84 = v101[2];
      swift_bridgeObjectRetain(v81);
      v85 = Error.publicDescription.getter(v83, v84);
      *(_QWORD *)(v79 + 96) = &type metadata for String;
      *(_QWORD *)(v79 + 104) = v82;
      *(_QWORD *)(v79 + 72) = v85;
      *(_QWORD *)(v79 + 80) = v86;
      swift_getErrorValue(v2, &v100, v99);
      v87 = Error.fullDescription.getter(v99[1]);
      *(_QWORD *)(v79 + 136) = &type metadata for String;
      *(_QWORD *)(v79 + 144) = v82;
      *(_QWORD *)(v79 + 112) = v87;
      *(_QWORD *)(v79 + 120) = v88;
      v2 = "_openDatabase()";
      sub_100757E04(&_mh_execute_header, (uint64_t)"_openDatabase()", 15, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLStore.swift", 80, 2, 235, "Encountered an error while attempting to open the %{public}@ database: unable to fetch schema version. Error: %{public}@ %@", 123, 2u, v79);
      sub_100518FC0(v79, (uint64_t)"Encountered an error while attempting to open the %{public}@ database: unable to fetch schema version. Error: %{public}@ %@");
      sub_100519194(v79, (uint64_t)"_openDatabase()", 15, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLStore.swift", 80, 2u, 235, (uint64_t)"Encountered an error while attempting to open the %{public}@ database: unable to fetch schema version. Error: %{public}@ %@", 123, 2u);
    }
  }
  v35 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  v36 = swift_initStackObject(v35, &v96);
  *(_OWORD *)(v36 + 16) = xmmword_100EF5E40;
  v37 = v36;
  v38 = 0;
  v39 = 1;
  v40 = &byte_101263799;
  do
  {
    v42 = *v40++;
    v41 = v42;
    if ((v42 & ~v38 & 1) != 0)
      v38 = v41;
    --v39;
  }
  while (v39);
  *(_QWORD *)(v36 + 56) = &type metadata for Int;
  *(_QWORD *)(v36 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v36 + 32) = v38 & 1;
  v43 = v36 + 32;
  v44 = v26;
  v46 = static os_log_type_t.default.getter(v45);
  sub_100A06EBC((uint64_t)v44, &_mh_execute_header, v46, "No need to migrate database schema, already on latest version %{public}d", 72, 2, v37);
  swift_setDeallocating(v37);
  v47 = *(_QWORD *)(v37 + 16);
  v48 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(v43, v47, v48);

}

void sub_100810014(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t inited;
  id v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  __n128 v29;
  _BYTE v31[72];

  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = &v31[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = *(void **)(v1 + 24);
  *v8 = v9;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4, v6);
  swift_retain(v1);
  v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  swift_release(v1);
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v11 = a1 & 1;
  v12 = sub_100C1A41C(v11, (uint64_t)&off_101263728);
  if ((v13 & 1) != 0)
  {
    v21 = *(void **)(v1 + 32);
    v22 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    inited = swift_initStackObject(v22, v31);
    *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
    *(_QWORD *)(inited + 56) = &type metadata for Int;
    *(_QWORD *)(inited + 64) = &protocol witness table for Int;
    *(_QWORD *)(inited + 32) = v11;
    v24 = v21;
    v25 = static os_log_type_t.error.getter(v24);
    sub_100A06EBC((uint64_t)v24, &_mh_execute_header, v25, "Received invalid currentSchema during _migrateSchema: %{public}d", 64, 2, inited);
    swift_setDeallocating(inited);
    v26 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(inited + 32, 1, v26);

    v27 = sub_100836D28();
    swift_allocError(&type metadata for CRLSQLSchemaVersionError, v27, 0, 0);
    *v28 = v11;
    swift_willThrow(v29);
    return;
  }
  v14 = v12 + 1;
  if (__OFADD__(v12, 1))
    goto LABEL_13;
  if (v14 >= 2)
    return;
  if (v14 < 0)
  {
LABEL_14:
    __break(1u);
    return;
  }
  v15 = *((unsigned __int8 *)&off_101263728 + v14 + 32);
  v16 = sub_100810520(*((_BYTE *)&off_101263728 + v14 + 32));
  v18 = v17;
  sub_10080EE54(v15, v11, v16, v17);
  if (v2)
  {
LABEL_9:
    swift_bridgeObjectRelease(v18);
    return;
  }
  swift_bridgeObjectRelease(v18);
  if (v14 != 1)
  {
    v19 = sub_100810520(1);
    v18 = v20;
    sub_10080EE54(1, v15, v19, v20);
    goto LABEL_9;
  }
}

void sub_100810270()
{
  sub_10080F700();
}

_QWORD *sub_100810290(uint64_t a1, void *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  id v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  _BYTE v25[24];

  v3 = v2;
  v6 = sub_1004B804C(&qword_1013E04D0);
  __chkstk_darwin(v6);
  v8 = &v25[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v25[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v13);
  v15 = &v25[-v14 - 8];
  if (qword_1013DD8D8 != -1)
    swift_once(&qword_1013DD8D8, sub_100A06CAC);
  swift_beginAccess(&static OS_os_log.sideStore, v25, 0, 0);
  v16 = (void *)static OS_os_log.sideStore;
  v3[4] = static OS_os_log.sideStore;
  v3[5] = 1701079411;
  v3[6] = 0xE400000000000000;
  v3[7] = _swiftEmptyDictionarySingleton;
  sub_1004CB7BC(a1, (uint64_t)v8, &qword_1013E04D0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    v17 = v16;
    sub_1004CB800((uint64_t)v8, &qword_1013E04D0);
    if (qword_1013DCE20 != -1)
      swift_once(&qword_1013DCE20, sub_1006B47E8);
    v18 = sub_1004F2A1C(v9, (uint64_t)qword_10147F150);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v15, v18, v9);
    sub_1004CB800(a1, &qword_1013E04D0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
    v19 = v16;
    URL.appendingPathComponent(_:)(0x62642E65646973, 0xE700000000000000);
    sub_1004CB800(a1, &qword_1013E04D0);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  v3[3] = a2;
  v20 = type metadata accessor for SQLiteDatabase(0);
  v21 = swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  *(_QWORD *)(v21 + 16) = 0;
  *(_BYTE *)(v21 + 24) = 0;
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v21 + OBJC_IVAR____TtC8Freeform14SQLiteDatabase_url, v15, v9);
  *(_QWORD *)(v21 + 32) = a2;
  v3[2] = v21;
  v22 = a2;
  return v3;
}

unint64_t sub_100810520(char a1)
{
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;

  if ((a1 & 1) == 0)
    return 0xD000000000000015;
  _StringGuts.grow(_:)(112);
  v2._countAndFlagsBits = 0x5420455441455243;
  v2._object = (void *)0xED000020454C4241;
  String.append(_:)(v2);
  v3._object = (void *)0x8000000100FD6330;
  v3._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v3);
  v4._countAndFlagsBits = 10272;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  v5._object = (void *)0x8000000100FD6350;
  v5._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v5);
  v6._countAndFlagsBits = 0xD00000000000001CLL;
  v6._object = (void *)0x8000000100FD6A30;
  String.append(_:)(v6);
  v7._countAndFlagsBits = 0x6E6F6973726576;
  v7._object = (void *)0xE700000000000000;
  String.append(_:)(v7);
  v8._countAndFlagsBits = 0xD000000000000020;
  v8._object = (void *)0x8000000100FD6A50;
  String.append(_:)(v8);
  v9._countAndFlagsBits = 0x7265746E756F63;
  v9._object = (void *)0xE700000000000000;
  String.append(_:)(v9);
  v10._countAndFlagsBits = 0xD00000000000001DLL;
  v10._object = (void *)0x8000000100FD6A80;
  String.append(_:)(v10);
  return 0;
}

void sub_10081068C(_QWORD *a1@<X8>)
{
  *a1 = &off_101263A08;
}

uint64_t sub_10081069C(_BYTE *a1, _BYTE *a2)
{
  return *a2 & ~*a1 & 1;
}

uint64_t sub_1008106B0(_BYTE *a1, _BYTE *a2)
{
  return *a2 & 1 | ((*a1 & 1) == 0);
}

uint64_t sub_1008106C4(_BYTE *a1, _BYTE *a2)
{
  return *a1 & 1 | ((*a2 & 1) == 0);
}

uint64_t sub_1008106D8(_BYTE *a1, _BYTE *a2)
{
  return *a1 & ~*a2 & 1;
}

void sub_1008106EC(_QWORD *a1@<X8>)
{
  *a1 = &off_101263A58;
}

Swift::Int sub_1008106FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, 0);
  v1 = type metadata accessor for UUID(0);
  v2 = sub_1005034A0((unint64_t *)&qword_1013DE630, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v7, v1, v2);
  v3 = (uint64_t *)(v0 + *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20));
  v4 = *v3;
  v5 = v3[1];
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

double sub_1008107A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  v3 = type metadata accessor for UUID(0);
  v4 = sub_1005034A0((unint64_t *)&qword_1013DE630, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v3, v4);
  v5 = (uint64_t *)(v1 + *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20));
  v6 = *v5;
  v7 = v5[1];
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(a1, v6, v7);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

Swift::Int sub_100810830(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[9];

  Hasher.init(_seed:)(v8, a1);
  v2 = type metadata accessor for UUID(0);
  v3 = sub_1005034A0((unint64_t *)&qword_1013DE630, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v8, v2, v3);
  v4 = (uint64_t *)(v1 + *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20));
  v5 = *v4;
  v6 = v4[1];
  swift_bridgeObjectRetain(v6);
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void sub_1008108D4(_QWORD *a1@<X8>)
{
  *a1 = &off_101263A30;
}

void sub_1008108E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t inited;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v40[72];
  uint64_t v41;
  _BYTE v42[24];

  v5 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v5);
  v7 = &v40[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = (_QWORD *)type metadata accessor for DispatchPredicate(0);
  v9 = *(v8 - 1);
  __chkstk_darwin(v8);
  v11 = &v40[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v12 = *(void **)(v2 + 24);
  *v11 = v12;
  (*(void (**)(_QWORD *, _QWORD, _QWORD *))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)(v11);
  (*(void (**)(_QWORD *, _QWORD *))(v9 + 8))(v11, v8);
  if ((v12 & 1) == 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  v8 = (_QWORD *)(v2 + 56);
  swift_beginAccess(v2 + 56, v42, 32, 0);
  v14 = *(_QWORD *)(v2 + 56);
  if (!*(_QWORD *)(v14 + 16) || (v15 = sub_100843264(a1), (v16 & 1) == 0))
  {
    swift_endAccess(v42);
    sub_1004B8460(a1, (uint64_t)v7, type metadata accessor for CRLBoardIdentifier);
    swift_beginAccess(v8, v42, 33, 0);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v8);
    v41 = *v8;
    *v8 = 0x8000000000000000;
    sub_100828FDC(a2, (uint64_t)v7, isUniquelyReferenced_nonNull_native, type metadata accessor for CRLBoardIdentifier, (uint64_t (*)(uint64_t))sub_100843264, &qword_1013F4DE0, (void (*)(void))sub_100820550);
    v24 = *v8;
    *v8 = v41;
    swift_bridgeObjectRelease(v24);
    v22 = (uint64_t)v7;
LABEL_7:
    sub_1004B84A4(v22, type metadata accessor for CRLBoardIdentifier);
    swift_endAccess(v42);
    if (qword_1013DD8D8 == -1)
    {
LABEL_8:
      swift_beginAccess(&static OS_os_log.sideStore, v42, 0, 0);
      v25 = (void *)static OS_os_log.sideStore;
      v26 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      inited = swift_initStackObject(v26, v40);
      *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
      v28 = *v8;
      v29 = v25;
      swift_bridgeObjectRetain(v28);
      v31 = sub_10083553C(v30);
      swift_bridgeObjectRelease(v28);
      v32 = sub_1005034A0(&qword_1013E9A00, 255, type metadata accessor for CRLBoardIdentifier, (uint64_t)&unk_100F0215C);
      v33 = Dictionary.description.getter(v31, v5, &type metadata for Int, v32);
      v35 = v34;
      swift_release(v31);
      *(_QWORD *)(inited + 56) = &type metadata for String;
      *(_QWORD *)(inited + 64) = sub_1004CFC2C();
      *(_QWORD *)(inited + 32) = v33;
      *(_QWORD *)(inited + 40) = v35;
      v37 = static os_log_type_t.default.getter(v36);
      sub_100A06EBC((uint64_t)v29, &_mh_execute_header, v37, "In-memory boardLoadMarksCache: %{public}@", 41, 2, inited);
      swift_setDeallocating(inited);
      v38 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(inited + 32, 1, v38);

      return;
    }
LABEL_10:
    swift_once(&qword_1013DD8D8, sub_100A06CAC);
    goto LABEL_8;
  }
  v17 = *(_QWORD *)(*(_QWORD *)(v14 + 56) + 8 * v15);
  swift_endAccess(v42);
  sub_1004B8460(a1, (uint64_t)v7, type metadata accessor for CRLBoardIdentifier);
  v18 = __OFADD__(v17, a2);
  v19 = v17 + a2;
  if (!v18)
  {
    swift_beginAccess(v8, v42, 33, 0);
    v20 = swift_isUniquelyReferenced_nonNull_native(*v8);
    v41 = *v8;
    *v8 = 0x8000000000000000;
    sub_100828FDC(v19, (uint64_t)v7, v20, type metadata accessor for CRLBoardIdentifier, (uint64_t (*)(uint64_t))sub_100843264, &qword_1013F4DE0, (void (*)(void))sub_100820550);
    v21 = *v8;
    *v8 = v41;
    swift_bridgeObjectRelease(v21);
    v22 = (uint64_t)v7;
    goto LABEL_7;
  }
  __break(1u);
}

uint64_t sub_100810CB8(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  void (*v12)(_QWORD *);
  id v13;
  void (*v14)(_QWORD *, uint64_t);
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char inited;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void *v40;
  id v41;
  void (*v42)(_QWORD *, uint64_t);
  uint64_t v43;
  sqlite3_stmt **v44;
  int v45;
  void *v46;
  id v47;
  sqlite3_int64 v48;
  uint64_t *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  id v60;
  sqlite3_stmt *v61;
  int v62;
  unint64_t v63;
  uint64_t v64;
  __n128 v65;
  void *v66;
  id v67;
  void *v69;
  id v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  sqlite3_stmt **v84;
  void (*v85)(_QWORD *, uint64_t);
  void (*v86)(_QWORD *, _QWORD, uint64_t, __n128);
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  _BYTE v91[24];
  char v92[24];
  uint64_t v93;
  unint64_t v94;
  char v95[32];

  v4 = v3;
  v5 = v2;
  v87 = a1;
  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (uint64_t *)((char *)&v82 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *(void **)(v2 + 24);
  *v10 = v11;
  v12 = *(void (**)(_QWORD *))(v8 + 104);
  v88 = enum case for DispatchPredicate.onQueue(_:);
  v12(v10);
  v13 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v10);
  v14 = *(void (**)(_QWORD *, uint64_t))(v8 + 8);
  v14(v10, v7);
  if ((v11 & 1) == 0)
  {
    __break(1u);
    goto LABEL_30;
  }
  if (a2)
  {
    v85 = v14;
    v86 = (void (*)(_QWORD *, _QWORD, uint64_t, __n128))v12;
    v93 = 0;
    v94 = 0xE000000000000000;
    _StringGuts.grow(_:)(51);
    v15._countAndFlagsBits = 0x4144505520202020;
    v15._object = (void *)0xEB00000000204554;
    String.append(_:)(v15);
    v16._object = (void *)0x8000000100FD6330;
    v16._countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v16);
    v17._countAndFlagsBits = 0x5445532020202020;
    v17._object = (void *)0xE900000000000020;
    String.append(_:)(v17);
    v18._countAndFlagsBits = 0x7265746E756F63;
    v18._object = (void *)0xE700000000000000;
    String.append(_:)(v18);
    v19._countAndFlagsBits = 2112800;
    v19._object = (void *)0xE300000000000000;
    String.append(_:)(v19);
    v20._countAndFlagsBits = 0x7265746E756F63;
    v20._object = (void *)0xE700000000000000;
    String.append(_:)(v20);
    v21._countAndFlagsBits = 0x202020203F202B20;
    v21._object = (void *)0xEF20455245485720;
    String.append(_:)(v21);
    v22._object = (void *)0x8000000100FD6350;
    v22._countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v22);
    v23._countAndFlagsBits = 0x3F203D3D20;
    v23._object = (void *)0xE500000000000000;
    String.append(_:)(v23);
    v24 = v93;
    v25 = v94;
    v26 = *(_QWORD *)(v5 + 16);
    v27 = type metadata accessor for SQLiteStatement();
    inited = swift_initStackObject(v27, v95);
    swift_retain(v26);
    v29 = v24;
    v30 = inited;
    v32 = sub_1006B77CC(v31, v29, v25);
    v33 = swift_release(v26);
    if (!v4)
    {
      v34 = *(void **)(*(_QWORD *)(v32 + 16) + 32);
      *v10 = v34;
      v86(v10, v88, v7, v33);
      v35 = v34;
      LOBYTE(v34) = _dispatchPreconditionTest(_:)(v10);
      v85(v10, v7);
      if ((v34 & 1) != 0)
      {
        v84 = (sqlite3_stmt **)(v32 + 24);
        swift_beginAccess(v32 + 24, &v93, 1, 0);
        sqlite3_bind_int(*(sqlite3_stmt **)(v32 + 24), 1, a2);
        v36 = sub_10067BA88();
        v38 = v36;
        v39 = v37;
        sub_1006B5E80(v36, v37);
        sub_1004BBBC8(v38, v39);
        v40 = *(void **)(*(_QWORD *)(v32 + 16) + 32);
        *v10 = v40;
        ((void (*)(_QWORD *, _QWORD, uint64_t))v86)(v10, v88, v7);
        v41 = v40;
        LOBYTE(v40) = _dispatchPreconditionTest(_:)(v10);
        v42 = v85;
        v85(v10, v7);
        if ((v40 & 1) != 0)
        {
          v43 = v32;
          v44 = v84;
          v45 = sqlite3_step(*v84);
          if (v45 != 101)
          {
            v62 = v45;
            v63 = sub_1006B79EC();
            swift_allocError(&type metadata for SQLiteError, v63, 0, 0);
            *(_DWORD *)v64 = v62;
            *(_QWORD *)(v64 + 8) = 0;
            *(_QWORD *)(v64 + 16) = 0;
            swift_willThrow(v65);
            v66 = *(void **)(*(_QWORD *)(v43 + 16) + 32);
            *v10 = v66;
            ((void (*)(_QWORD *, _QWORD, uint64_t))v86)(v10, v88, v7);
            v67 = v66;
            v30 = _dispatchPreconditionTest(_:)(v10);
            v42(v10, v7);
            if ((v30 & 1) != 0)
            {
              if (*v44)
              {
                sqlite3_finalize(*v44);
                *v44 = 0;
              }
              goto LABEL_19;
            }
            goto LABEL_33;
          }
          v46 = *(void **)(v26 + 32);
          *v10 = v46;
          ((void (*)(_QWORD *, _QWORD, uint64_t))v86)(v10, v88, v7);
          v47 = v46;
          LOBYTE(v46) = _dispatchPreconditionTest(_:)(v10);
          v42(v10, v7);
          if ((v46 & 1) != 0)
          {
            swift_beginAccess(v26 + 16, v92, 0, 0);
            v48 = sqlite3_changes64(*(sqlite3 **)(v26 + 16));
            if (v48 == 1)
            {
              v69 = *(void **)(*(_QWORD *)(v43 + 16) + 32);
              *v10 = v69;
              ((void (*)(_QWORD *, _QWORD, uint64_t))v86)(v10, v88, v7);
              v70 = v69;
              LOBYTE(v69) = _dispatchPreconditionTest(_:)(v10);
              v42(v10, v7);
              if ((v69 & 1) != 0)
                goto LABEL_26;
              __break(1u);
            }
            else
            {
              v83 = v43;
              v49 = &qword_1013DD000;
              if (!v48)
              {
                if (qword_1013DD8D8 == -1)
                {
LABEL_13:
                  swift_beginAccess(&static OS_os_log.sideStore, v91, 0, 0);
                  v50 = (void *)static OS_os_log.sideStore;
                  v51 = sub_1004B804C((uint64_t *)&unk_1013E0180);
                  v52 = swift_initStackObject(v51, &v89);
                  *(_OWORD *)(v52 + 16) = xmmword_100EF5E40;
                  v53 = v50;
                  v54 = sub_10067AD38();
                  v56 = v55;
                  *(_QWORD *)(v52 + 56) = &type metadata for String;
                  *(_QWORD *)(v52 + 64) = sub_1004CFC2C();
                  *(_QWORD *)(v52 + 32) = v54;
                  *(_QWORD *)(v52 + 40) = v56;
                  v57 = static os_log_type_t.error.getter();
                  sub_100A06EBC((uint64_t)v53, &_mh_execute_header, v57, "Attempted to update board load mark, but row didn't exist for board with id: %{public}@", 87, 2, v52);
                  swift_setDeallocating(v52);
                  v58 = sub_1004B804C(&qword_1013E0190);
                  swift_arrayDestroy(v52 + 32, 1, v58);

                  v43 = v83;
                  v59 = *(void **)(*(_QWORD *)(v83 + 16) + 32);
                  *v10 = v59;
                  ((void (*)(_QWORD *, _QWORD, uint64_t))v86)(v10, v88, v7);
                  v60 = v59;
                  LOBYTE(v59) = _dispatchPreconditionTest(_:)(v10);
                  v85(v10, v7);
                  if ((v59 & 1) != 0)
                  {
                    v30 = 0;
                    v44 = v84;
                    v61 = *v84;
                    if (!*v84)
                    {
LABEL_19:
                      swift_release(v43);
                      return v30 & 1;
                    }
LABEL_27:
                    sqlite3_finalize(v61);
                    *v44 = 0;
                    goto LABEL_19;
                  }
                  __break(1u);
                  goto LABEL_36;
                }
LABEL_34:
                swift_once(&qword_1013DD8D8, sub_100A06CAC);
                goto LABEL_13;
              }
            }
            if (v49[283] == -1)
            {
LABEL_24:
              swift_beginAccess(&static OS_os_log.sideStore, v91, 0, 0);
              v71 = (void *)static OS_os_log.sideStore;
              v72 = sub_1004B804C((uint64_t *)&unk_1013E0180);
              v73 = swift_initStackObject(v72, &v90);
              *(_OWORD *)(v73 + 16) = xmmword_100EF5E40;
              v74 = v71;
              v75 = sub_10067AD38();
              v77 = v76;
              *(_QWORD *)(v73 + 56) = &type metadata for String;
              *(_QWORD *)(v73 + 64) = sub_1004CFC2C();
              *(_QWORD *)(v73 + 32) = v75;
              *(_QWORD *)(v73 + 40) = v77;
              v78 = static os_log_type_t.error.getter();
              sub_100A06EBC((uint64_t)v74, &_mh_execute_header, v78, "Update to board load mark completed, but touched many rows for board id: %{public}@", 83, 2, v73);
              swift_setDeallocating(v73);
              v79 = sub_1004B804C(&qword_1013E0190);
              swift_arrayDestroy(v73 + 32, 1, v79);

              v43 = v83;
              v80 = *(void **)(*(_QWORD *)(v83 + 16) + 32);
              *v10 = v80;
              ((void (*)(_QWORD *, _QWORD, uint64_t))v86)(v10, v88, v7);
              v81 = v80;
              LOBYTE(v80) = _dispatchPreconditionTest(_:)(v10);
              v85(v10, v7);
              if ((v80 & 1) == 0)
                __break(1u);
              v44 = v84;
LABEL_26:
              v61 = *v44;
              v30 = 1;
              if (!*v44)
                goto LABEL_19;
              goto LABEL_27;
            }
LABEL_36:
            swift_once(&qword_1013DD8D8, sub_100A06CAC);
            goto LABEL_24;
          }
LABEL_32:
          __break(1u);
LABEL_33:
          __break(1u);
          goto LABEL_34;
        }
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
LABEL_30:
      __break(1u);
      __break(1u);
      goto LABEL_31;
    }
  }
  else
  {
    v30 = 0;
  }
  return v30 & 1;
}

double *sub_100811474()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t Marks;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  id v22;
  void (*v23)(_QWORD *, uint64_t);
  Swift::String v24;
  void *object;
  Swift::String v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  uint64_t v48;
  __n128 v49;
  void *v50;
  void (*v51)(_QWORD *, uint64_t, uint64_t);
  id v52;
  void (*v53)(_QWORD *, uint64_t);
  uint64_t v54;
  _QWORD *inited;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  id v59;
  void *v60;
  id v61;
  sqlite3_stmt **v62;
  _BYTE *v63;
  _BYTE *v64;
  int v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  void *v69;
  id v70;
  int v71;
  void *v72;
  id v73;
  int v74;
  int v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  double *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  void *v96;
  id v97;
  sqlite3_stmt *v98;
  uint64_t v99;
  uint64_t v100;
  double *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  sqlite3_int64 v111;
  _QWORD *v112;
  void (*v113)(_QWORD *, uint64_t, uint64_t);
  unsigned int v114;
  void (*v115)(_QWORD *, uint64_t);
  _QWORD v116[3];
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122[72];
  uint64_t v123;
  unint64_t v124;
  char v125[32];

  v2 = v0;
  Marks = type metadata accessor for CRLSideStore.BoardLoadMarksColumn.Row(0);
  v104 = *(_QWORD *)(Marks - 8);
  v105 = Marks;
  __chkstk_darwin(Marks);
  v108 = (uint64_t)&v99 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v107 = (uint64_t)&v99 - v6;
  v7 = type metadata accessor for CRLBoardIdentifierStorage(0);
  __chkstk_darwin(v7);
  v109 = (uint64_t)&v99 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v9);
  v103 = (uint64_t)&v99 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v102 = (uint64_t)&v99 - v12;
  __chkstk_darwin(v13);
  v106 = (uint64_t)&v99 - v14;
  v15 = type metadata accessor for DispatchPredicate(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (uint64_t *)((char *)&v99 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = *(void **)(v0 + 24);
  *v19 = v20;
  v21 = enum case for DispatchPredicate.onQueue(_:);
  v113 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v16 + 104);
  ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v113)(v19, enum case for DispatchPredicate.onQueue(_:), v15, v17);
  v22 = v20;
  LOBYTE(v20) = _dispatchPreconditionTest(_:)(v19);
  v23 = *(void (**)(_QWORD *, uint64_t))(v16 + 8);
  v23(v19, v15);
  if ((v20 & 1) == 0)
    goto LABEL_46;
  v115 = v23;
  v123 = 0;
  v124 = 0xE000000000000000;
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease(v124);
  v123 = 0x205443454C4553;
  v124 = 0xE700000000000000;
  v24._countAndFlagsBits = sub_100836778(0, 0xE000000000000000);
  object = v24._object;
  String.append(_:)(v24);
  swift_bridgeObjectRelease(object);
  v26._countAndFlagsBits = 0x204D4F524620;
  v26._object = (void *)0xE600000000000000;
  String.append(_:)(v26);
  v27._object = (void *)0x8000000100FD6330;
  v27._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v27);
  v28 = v123;
  v29 = v124;
  v30 = *(_QWORD *)(v2 + 16);
  v31 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v31, v125);
  swift_retain(v30);
  v33 = sub_1006B77CC(v32, v28, v29);
  v110 = v1;
  if (v1)
  {
    swift_release(v30);
    if (qword_1013DD8D8 != -1)
      goto LABEL_47;
    goto LABEL_4;
  }
  v48 = v33;
  v49 = swift_release(v30);
  v50 = *(void **)(*(_QWORD *)(v48 + 16) + 32);
  *v19 = v50;
  v51 = v113;
  ((void (*)(_QWORD *, uint64_t, uint64_t, __n128))v113)(v19, v21, v15, v49);
  v52 = v50;
  LOBYTE(v50) = _dispatchPreconditionTest(_:)(v19);
  v53 = v115;
  v115(v19, v15);
  if ((v50 & 1) == 0)
  {
    __break(1u);
    goto LABEL_49;
  }
  v54 = type metadata accessor for SQLiteRowIterator();
  inited = (_QWORD *)swift_initStackObject(v54, &v121);
  inited[4] = 0;
  inited[5] = 1;
  inited[2] = v48;
  inited[3] = 0;
  v100 = v48;
  swift_retain(v48);
  v112 = inited;
  sub_1006B6B04();
  if (!v56)
  {
    v101 = _swiftEmptyArrayStorage;
LABEL_38:
    v94 = v112;
    swift_setDeallocating(v112);
    swift_release(v94[2]);
    sub_1006B7DA4(v94[3], v94[4], v94[5]);
    v95 = v100;
    v96 = *(void **)(*(_QWORD *)(v100 + 16) + 32);
    *v19 = v96;
    v51(v19, v21, v15);
    v97 = v96;
    LOBYTE(v96) = _dispatchPreconditionTest(_:)(v19);
    v53(v19, v15);
    if ((v96 & 1) != 0)
    {
      swift_beginAccess(v95 + 24, &v123, 1, 0);
      v98 = *(sqlite3_stmt **)(v95 + 24);
      if (v98)
      {
        sqlite3_finalize(v98);
        *(_QWORD *)(v95 + 24) = 0;
      }
      swift_release(v95);
      return v101;
    }
LABEL_49:
    __break(1u);
  }
  v57 = v56;
  v101 = _swiftEmptyArrayStorage;
  v114 = v21;
  while (1)
  {
    v58 = *(void **)(*(_QWORD *)(v57 + 16) + 32);
    *v19 = v58;
    v51(v19, v21, v15);
    v59 = v58;
    LOBYTE(v58) = _dispatchPreconditionTest(_:)(v19);
    v53(v19, v15);
    if ((v58 & 1) == 0)
      break;
    v60 = *(void **)(*(_QWORD *)(v57 + 16) + 32);
    *v19 = v60;
    v51(v19, v21, v15);
    v61 = v60;
    LOBYTE(v60) = _dispatchPreconditionTest(_:)(v19);
    v53(v19, v15);
    if ((v60 & 1) == 0)
      goto LABEL_43;
    v62 = (sqlite3_stmt **)(v57 + 24);
    swift_beginAccess(v57 + 24, &v120, 0, 0);
    if (sqlite3_column_type(*(sqlite3_stmt **)(v57 + 24), 0) == 5 || (v63 = sqlite3_column_blob(*v62, 0)) == 0)
    {
      v66 = 0;
      v68 = 0xF000000000000000;
    }
    else
    {
      v64 = v63;
      v65 = sqlite3_column_bytes(*v62, 0);
      v66 = sub_1005CB82C(v64, v65);
      v68 = v67;
    }
    v69 = *(void **)(*(_QWORD *)(v57 + 16) + 32);
    *v19 = v69;
    v51(v19, v114, v15);
    v70 = v69;
    LOBYTE(v69) = _dispatchPreconditionTest(_:)(v19);
    v115(v19, v15);
    if ((v69 & 1) == 0)
      goto LABEL_44;
    v71 = sqlite3_column_type(*v62, 1);
    if (v71 == 5)
      v111 = 0;
    else
      v111 = sqlite3_column_int64(*v62, 1);
    v72 = *(void **)(*(_QWORD *)(v57 + 16) + 32);
    *v19 = v72;
    v113(v19, v114, v15);
    v73 = v72;
    LOBYTE(v72) = _dispatchPreconditionTest(_:)(v19);
    v115(v19, v15);
    if ((v72 & 1) == 0)
      goto LABEL_45;
    if (sqlite3_column_type(*v62, 2) == 5 || (v74 = sqlite3_column_int(*v62, 2), v68 >> 60 == 15) || v71 == 5)
    {
      if (qword_1013DD8D8 != -1)
        swift_once(&qword_1013DD8D8, sub_100A06CAC);
      swift_beginAccess(&static OS_os_log.sideStore, &v119, 0, 0);
      v77 = (id)static OS_os_log.sideStore;
      v79 = static os_log_type_t.error.getter(v77);
      sub_100A06EBC((uint64_t)v77, &_mh_execute_header, v79, "Failed to fetch some mark data for a particular row while fetching AllBoardLoadMarks", 84, 2, (uint64_t)_swiftEmptyArrayStorage);
      v51 = v113;
      goto LABEL_29;
    }
    v75 = v74;
    sub_1004BE310(v66, v68);
    sub_1004BE310(v66, v68);
    v76 = v110;
    sub_10067B2E0(v66, v68);
    if (v76)
    {
      swift_errorRelease(v76);
      v51 = v113;
      if (qword_1013DD8D8 != -1)
        swift_once(&qword_1013DD8D8, sub_100A06CAC);
      swift_beginAccess(&static OS_os_log.sideStore, &v118, 0, 0);
      v77 = (id)static OS_os_log.sideStore;
      v78 = static os_log_type_t.error.getter(v77);
      sub_100A06EBC((uint64_t)v77, &_mh_execute_header, v78, "Failed to convert a board identifier data into a board identifier while fetching AllBoardLoadMarks", 98, 2, (uint64_t)_swiftEmptyArrayStorage);
      sub_1004BE2FC(v66, v68);
      v110 = 0;
LABEL_29:
      v53 = v115;
      sub_1004BE2FC(v66, v68);

      swift_release(v57);
      sub_1006B6B04();
      v57 = v80;
      v21 = v114;
      if (!v80)
        goto LABEL_38;
    }
    else
    {
      v110 = 0;
      v81 = v103;
      sub_1004B84E0(v109, v103, type metadata accessor for CRLBoardIdentifierStorage);
      v82 = v81;
      v83 = v102;
      sub_1004B84E0(v82, v102, type metadata accessor for CRLBoardIdentifier);
      v84 = v83;
      v85 = v106;
      sub_1004B84E0(v84, v106, type metadata accessor for CRLBoardIdentifier);
      v86 = v85;
      v87 = v107;
      sub_1004B8460(v86, v107, type metadata accessor for CRLBoardIdentifier);
      v88 = v105;
      *(_QWORD *)(v87 + *(int *)(v105 + 20)) = v111;
      *(_DWORD *)(v87 + *(int *)(v88 + 24)) = v75;
      sub_1004B8460(v87, v108, type metadata accessor for CRLSideStore.BoardLoadMarksColumn.Row);
      if ((swift_isUniquelyReferenced_nonNull_native(v101) & 1) == 0)
        v101 = (double *)sub_100D11600(0, *((_QWORD *)v101 + 2) + 1, 1, (unint64_t)v101);
      v53 = v115;
      v89 = v101;
      v91 = *((_QWORD *)v101 + 2);
      v90 = *((_QWORD *)v101 + 3);
      if (v91 >= v90 >> 1)
        v89 = (double *)sub_100D11600(v90 > 1, v91 + 1, 1, (unint64_t)v101);
      *((_QWORD *)v89 + 2) = v91 + 1;
      v92 = (*(unsigned __int8 *)(v104 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v104 + 80);
      v101 = v89;
      sub_1004B84E0(v108, (uint64_t)v89 + v92 + *(_QWORD *)(v104 + 72) * v91, type metadata accessor for CRLSideStore.BoardLoadMarksColumn.Row);
      swift_release(v57);
      sub_1004BE2FC(v66, v68);
      sub_1004BE2FC(v66, v68);
      sub_1004B84A4(v107, type metadata accessor for CRLSideStore.BoardLoadMarksColumn.Row);
      sub_1004B84A4(v106, type metadata accessor for CRLBoardIdentifier);
      sub_1006B6B04();
      v57 = v93;
      v51 = v113;
      v21 = v114;
      if (!v93)
        goto LABEL_38;
    }
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  swift_once(&qword_1013DD8D8, sub_100A06CAC);
LABEL_4:
  swift_beginAccess(&static OS_os_log.sideStore, &v123, 0, 0);
  v34 = (void *)static OS_os_log.sideStore;
  v35 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  v36 = swift_initStackObject(v35, v122);
  *(_OWORD *)(v36 + 16) = xmmword_100EF5E40;
  swift_getErrorValue(v110, &v117, v116);
  v37 = v116[1];
  v38 = v116[2];
  v39 = v34;
  v40 = Error.localizedDescription.getter(v37, v38);
  v42 = v41;
  *(_QWORD *)(v36 + 56) = &type metadata for String;
  v43 = sub_1004CFC2C();
  *(_QWORD *)(v36 + 64) = v43;
  *(_QWORD *)(v36 + 32) = v40;
  *(_QWORD *)(v36 + 40) = v42;
  v44 = static os_log_type_t.error.getter(v43);
  sub_100A06EBC((uint64_t)v39, &_mh_execute_header, v44, "Failed to fetch _fetchAllBoardLoadMarks with error %@", 53, 2, v36);
  swift_setDeallocating(v36);
  v45 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(v36 + 32, 1, v45);

  return (double *)swift_willThrow(v46);
}

void sub_100811E9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  void *v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  id v17;
  void (*v18)(char *, uint64_t);
  sqlite3_stmt **v19;
  int v20;
  void *v21;
  id v22;
  char v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  __n128 v27;
  void *v28;
  id v29;
  char v30;
  void *v31;
  uint64_t v32;
  uint64_t inited;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  char v45[8];
  uint64_t v46;
  uint64_t v47;
  char v48[8];
  char v49[24];
  char v50[72];
  uint64_t v51;
  unint64_t v52;
  char v53[32];

  v2 = v1;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v45[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v51 = 0;
  v52 = 0xE000000000000000;
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease(v52);
  v7 = *(_QWORD *)(v0 + 16);
  v8 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v8, v53);
  swift_retain(v7);
  v10 = sub_1006B77CC(v9, 0xD000000000000024, 0x8000000100FD6BE0);
  if (v1)
  {
    v11 = v7;
LABEL_13:
    swift_release(v11);
    if (qword_1013DD8D8 != -1)
      swift_once(&qword_1013DD8D8, sub_100A06CAC);
    swift_beginAccess(&static OS_os_log.sideStore, &v51, 0, 0);
    v31 = (void *)static OS_os_log.sideStore;
    v32 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    inited = swift_initStackObject(v32, v50);
    *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
    swift_getErrorValue(v2, v48, v45);
    v34 = v46;
    v35 = v47;
    v36 = v31;
    v37 = Error.localizedDescription.getter(v34, v35);
    v39 = v38;
    *(_QWORD *)(inited + 56) = &type metadata for String;
    v40 = sub_1004CFC2C();
    *(_QWORD *)(inited + 64) = v40;
    *(_QWORD *)(inited + 32) = v37;
    *(_QWORD *)(inited + 40) = v39;
    v41 = static os_log_type_t.error.getter(v40);
    sub_100A06EBC((uint64_t)v36, &_mh_execute_header, v41, "Failed to _clearAllBoardLoadMarks with error %@", 47, 2, inited);
    swift_setDeallocating(inited);
    v42 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(inited + 32, 1, v42);

    swift_willThrow(v43);
    return;
  }
  v12 = v10;
  v13 = swift_release(v7);
  v14 = *(void **)(*(_QWORD *)(v12 + 16) + 32);
  *(_QWORD *)v6 = v14;
  v15 = enum case for DispatchPredicate.onQueue(_:);
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 104);
  ((void (*)(char *, _QWORD, uint64_t, __n128))v16)(v6, enum case for DispatchPredicate.onQueue(_:), v3, v13);
  v17 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)(v6);
  v18 = *(void (**)(char *, uint64_t))(v4 + 8);
  v18(v6, v3);
  if ((v14 & 1) == 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  v19 = (sqlite3_stmt **)(v12 + 24);
  swift_beginAccess(v12 + 24, v49, 1, 0);
  v20 = sqlite3_step(*(sqlite3_stmt **)(v12 + 24));
  if (v20 != 101)
  {
    v24 = v20;
    v25 = sub_1006B79EC();
    v2 = swift_allocError(&type metadata for SQLiteError, v25, 0, 0);
    *(_DWORD *)v26 = v24;
    *(_QWORD *)(v26 + 8) = 0;
    *(_QWORD *)(v26 + 16) = 0;
    swift_willThrow(v27);
    v28 = *(void **)(*(_QWORD *)(v12 + 16) + 32);
    *(_QWORD *)v6 = v28;
    v16(v6, v15, v3);
    v29 = v28;
    v30 = _dispatchPreconditionTest(_:)(v6);
    v18(v6, v3);
    if ((v30 & 1) != 0)
    {
      if (*v19)
      {
        sqlite3_finalize(*v19);
        *(_QWORD *)(v12 + 24) = 0;
      }
      v11 = v12;
      goto LABEL_13;
    }
LABEL_18:
    __break(1u);
  }
  v21 = *(void **)(*(_QWORD *)(v12 + 16) + 32);
  *(_QWORD *)v6 = v21;
  v16(v6, v15, v3);
  v22 = v21;
  v23 = _dispatchPreconditionTest(_:)(v6);
  v18(v6, v3);
  if ((v23 & 1) == 0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (*v19)
  {
    sqlite3_finalize(*v19);
    *v19 = 0;
  }
  swift_release(v12);
}

uint64_t sub_100812254(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t inited;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[112];
  _BYTE v28[32];

  v4 = v2;
  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (uint64_t *)((char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *(void **)(v4 + 24);
  *v10 = v11;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v10);
  (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(v10, v7);
  if ((v11 & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  v3 = a2;
  if (qword_1013DD8D8 != -1)
LABEL_5:
    swift_once(&qword_1013DD8D8, sub_100A06CAC);
  swift_beginAccess(&static OS_os_log.sideStore, v28, 0, 0);
  v13 = (void *)static OS_os_log.sideStore;
  v26 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v26, v27);
  *(_OWORD *)(inited + 16) = xmmword_100EF5A10;
  v15 = v13;
  v16 = UUID.uuidString.getter(v15);
  v18 = v17;
  *(_QWORD *)(inited + 56) = &type metadata for String;
  v19 = sub_1004CFC2C();
  *(_QWORD *)(inited + 32) = v16;
  *(_QWORD *)(inited + 40) = v18;
  *(_QWORD *)(inited + 96) = &type metadata for Int;
  *(_QWORD *)(inited + 104) = &protocol witness table for Int;
  *(_QWORD *)(inited + 64) = v19;
  *(_QWORD *)(inited + 72) = v3;
  v21 = static os_log_type_t.default.getter(v20);
  sub_100A06EBC((uint64_t)v15, &_mh_execute_header, v21, "markBoardLoad for board %{public}@ by amount %{public}d", 55, 2, inited);
  swift_setDeallocating(inited);
  v22 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(inited + 32, 2, v22);

  __chkstk_darwin(v23);
  *(&v25 - 4) = v4;
  *(&v25 - 3) = a1;
  *(&v25 - 2) = v3;
  sub_10080E87C(sub_100813BD8);
  return 0;
}

void sub_10081257C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_1001E9730();
  sub_1008368B0();
  if (!v3)
  {
    if (a3 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else if (a3 <= 0x7FFFFFFF)
    {
      sub_100810CB8(a2, a3);
      sub_1008108E4(a2, a3);
      return;
    }
    __break(1u);
  }
}

uint64_t sub_100812610()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  return swift_deallocClassInstance(v0, 64, 7);
}

uint64_t type metadata accessor for CRLSideStore()
{
  return objc_opt_self(_TtC8Freeform12CRLSideStore);
}

uint64_t sub_100812674(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_1005034A0(&qword_1013F4D30, a2, (uint64_t (*)(uint64_t))type metadata accessor for CRLSideStore, (uint64_t)&unk_100F0F35C);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1008126B4()
{
  unint64_t result;

  result = qword_1013F4D38;
  if (!qword_1013F4D38)
  {
    result = swift_getWitnessTable(&unk_100F0F3DC, &type metadata for CRLSideStore.SchemaVersion);
    atomic_store(result, (unint64_t *)&qword_1013F4D38);
  }
  return result;
}

unint64_t sub_1008126FC()
{
  unint64_t result;

  result = qword_1013F4D40;
  if (!qword_1013F4D40)
  {
    result = swift_getWitnessTable(&unk_100F0F378, &type metadata for CRLSideStore.Table);
    atomic_store(result, (unint64_t *)&qword_1013F4D40);
  }
  return result;
}

unint64_t sub_100812740(uint64_t a1)
{
  unint64_t result;

  result = sub_100812764();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100812764()
{
  unint64_t result;

  result = qword_1013F4D90;
  if (!qword_1013F4D90)
  {
    result = swift_getWitnessTable(&unk_100F0F394, &type metadata for CRLSideStore.Table);
    atomic_store(result, (unint64_t *)&qword_1013F4D90);
  }
  return result;
}

uint64_t sub_1008127A8()
{
  return sub_1004CBA30(&qword_1013F4D98, &qword_1013F4DA0, (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t sub_1008127D4(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_100812808();
  a1[2] = sub_10081284C();
  result = sub_100812890();
  a1[3] = result;
  return result;
}

unint64_t sub_100812808()
{
  unint64_t result;

  result = qword_1013F4DA8;
  if (!qword_1013F4DA8)
  {
    result = swift_getWitnessTable(&unk_100F0F4A0, &type metadata for CRLSideStore.SchemaVersion);
    atomic_store(result, (unint64_t *)&qword_1013F4DA8);
  }
  return result;
}

unint64_t sub_10081284C()
{
  unint64_t result;

  result = qword_1013F4DB0;
  if (!qword_1013F4DB0)
  {
    result = swift_getWitnessTable(&unk_100F0F430, &type metadata for CRLSideStore.SchemaVersion);
    atomic_store(result, (unint64_t *)&qword_1013F4DB0);
  }
  return result;
}

unint64_t sub_100812890()
{
  unint64_t result;

  result = qword_1013F4DB8;
  if (!qword_1013F4DB8)
  {
    result = swift_getWitnessTable(&unk_100F0F3F8, &type metadata for CRLSideStore.SchemaVersion);
    atomic_store(result, (unint64_t *)&qword_1013F4DB8);
  }
  return result;
}

unint64_t sub_1008128D8()
{
  unint64_t result;

  result = qword_1013F4DC0;
  if (!qword_1013F4DC0)
  {
    result = swift_getWitnessTable(&unk_100F0F478, &type metadata for CRLSideStore.SchemaVersion);
    atomic_store(result, (unint64_t *)&qword_1013F4DC0);
  }
  return result;
}

uint64_t sub_10081291C()
{
  return sub_1004CBA30(&qword_1013F4DC8, &qword_1013F4DD0, (uint64_t)&protocol conformance descriptor for [A]);
}

double sub_100812948()
{
  return sub_100812DE8((uint64_t)sub_100836D94, (uint64_t)&unk_1012813E0);
}

uint64_t sub_10081295C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t result;
  _BYTE v11[24];

  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v11[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(void **)(v6 + 32);
  *v5 = v7;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v5);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v7 & 1) != 0)
  {
    swift_beginAccess(v6 + 16, v11, 1, 0);
    result = sqlite3_close_v2(*(sqlite3 **)(v6 + 16));
    *(_QWORD *)(v6 + 16) = 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100812A38@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;

  result = sub_100812254(a1, 1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

double sub_100812A80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD aBlock[5];
  uint64_t v26;

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v23 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CRLBoardIdentifier(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v21 = *(_QWORD *)(v1 + 24);
  sub_1004B8460(a1, (uint64_t)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for CRLBoardIdentifier);
  v12 = *(unsigned __int8 *)(v10 + 80);
  v13 = (v12 + 24) & ~v12;
  v14 = swift_allocObject(&unk_1012813A0, v13 + v11, v12 | 7);
  *(_QWORD *)(v14 + 16) = v1;
  sub_1004B84E0((uint64_t)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v14 + v13, type metadata accessor for CRLBoardIdentifier);
  aBlock[4] = sub_100812D74;
  v26 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(_QWORD *)"";
  aBlock[2] = sub_1005D2FC0;
  aBlock[3] = &unk_1012813B8;
  v15 = _Block_copy(aBlock);
  v16 = swift_retain(v1);
  static DispatchQoS.unspecified.getter(v16);
  v24 = _swiftEmptyArrayStorage;
  v17 = sub_1005034A0((unint64_t *)&qword_1013E1D20, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v18 = sub_1004B804C((uint64_t *)&unk_1013DFBF0);
  v19 = sub_1004CBA30((unint64_t *)&qword_1013E1D30, (uint64_t *)&unk_1013DFBF0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v18, v19, v3, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v5, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v22);
  *(_QWORD *)&result = swift_release(v26).n128_u64[0];
  return result;
}

uint64_t sub_100812CE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(type metadata accessor for CRLBoardIdentifier(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 24) & ~v2;
  v4 = v3 + *(_QWORD *)(v1 + 64);
  v5 = v2 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v0 + v3, v6);
  type metadata accessor for CRLBoardIdentifierStorage(0);
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4, v5);
}

uint64_t sub_100812D74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CRLBoardIdentifier(0) - 8) + 80);
  v2 = sub_100812254(v0 + ((v1 + 24) & ~v1), -1);
  return sub_1004E1DFC(v2, v3 & 1);
}

uint64_t sub_100812DBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

double sub_100812DCC(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

double sub_100812DD4()
{
  return sub_100812DE8((uint64_t)sub_100836D9C, (uint64_t)&unk_101281408);
}

double sub_100812DE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double result;
  uint64_t v19;
  double *v20;
  _QWORD aBlock[5];
  uint64_t v22;

  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_QWORD *)(v2 + 24);
  aBlock[4] = a1;
  v22 = v2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(_QWORD *)"";
  aBlock[2] = sub_1005D2FC0;
  aBlock[3] = a2;
  v13 = _Block_copy(aBlock);
  v14 = swift_retain(v2);
  static DispatchQoS.unspecified.getter(v14);
  v20 = _swiftEmptyArrayStorage;
  v15 = sub_1005034A0((unint64_t *)&qword_1013E1D20, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v16 = sub_1004B804C((uint64_t *)&unk_1013DFBF0);
  v17 = sub_1004CBA30((unint64_t *)&qword_1013E1D30, (uint64_t *)&unk_1013DFBF0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v20, v16, v17, v5, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v8, v13);
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  *(_QWORD *)&result = swift_release(v22).n128_u64[0];
  return result;
}

double sub_100812FB8(uint64_t a1)
{
  id v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;
  double result;
  _BYTE v7[24];
  _BYTE v8[24];

  if (qword_1013DD8D8 != -1)
    swift_once(&qword_1013DD8D8, sub_100A06CAC);
  swift_beginAccess(&static OS_os_log.sideStore, v8, 0, 0);
  v2 = (id)static OS_os_log.sideStore;
  v4 = static os_log_type_t.default.getter(v3);
  sub_100A06EBC((uint64_t)v2, &_mh_execute_header, v4, "clearBoardLoadMarks", 19, 2, (uint64_t)_swiftEmptyArrayStorage);

  sub_100811E9C();
  swift_beginAccess(a1 + 56, v7, 1, 0);
  v5 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = _swiftEmptyDictionarySingleton;
  *(_QWORD *)&result = swift_bridgeObjectRelease(v5).n128_u64[0];
  return result;
}

void sub_1008131B8(unint64_t a1@<X8>)
{
  double *v1;
  double *v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  __n128 v10;
  uint64_t v11;
  double *v12;
  double *v13;
  double *v14;
  double *v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t inited;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double *v33;
  double *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  double *v40;
  unint64_t v41;
  double *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t Marks;
  double *v46;
  char v47[8];
  uint64_t v48;
  char v49[8];
  _QWORD v50[3];
  char v51[112];
  char v52[32];
  char v53[8];

  v2 = v1;
  Marks = type metadata accessor for CRLSideStore.BoardLoadMarksColumn.Row(0);
  v44 = *(_QWORD *)(Marks - 8);
  __chkstk_darwin(Marks);
  v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v40 - v7;
  if (qword_1013DD8D8 != -1)
    goto LABEL_19;
  while (1)
  {
    swift_beginAccess(&static OS_os_log.sideStore, v52, 0, 0);
    v9 = (id)static OS_os_log.sideStore;
    v11 = static os_log_type_t.default.getter(v10);
    v12 = _swiftEmptyArrayStorage;
    sub_100A06EBC((uint64_t)v9, &_mh_execute_header, v11, "fetchBoardLoadMarksThatCrashed", 30, 2, (uint64_t)_swiftEmptyArrayStorage);

    v13 = v2;
    v14 = sub_100811474();
    v15 = v2;
    if (v2)
    {
      v16 = (void *)static OS_os_log.sideStore;
      v17 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      v18 = a1;
      inited = swift_initStackObject(v17, v51);
      *(_OWORD *)(inited + 16) = xmmword_100EF5A10;
      swift_getErrorValue(v13, v53, v50);
      v20 = v50[1];
      v21 = v50[2];
      v22 = v16;
      v23 = Error.publicDescription.getter(v20, v21);
      v25 = v24;
      *(_QWORD *)(inited + 56) = &type metadata for String;
      v26 = sub_1004CFC2C();
      *(_QWORD *)(inited + 64) = v26;
      *(_QWORD *)(inited + 32) = v23;
      v27 = inited + 32;
      *(_QWORD *)(inited + 40) = v25;
      swift_getErrorValue(v13, v49, v47);
      v28 = Error.fullDescription.getter(v48);
      v15 = v13;
      *(_QWORD *)(inited + 96) = &type metadata for String;
      *(_QWORD *)(inited + 104) = v26;
      *(_QWORD *)(inited + 72) = v28;
      *(_QWORD *)(inited + 80) = v29;
      v30 = static os_log_type_t.error.getter(v28);
      sub_100A06EBC((uint64_t)v22, &_mh_execute_header, v30, "fetchBoardLoadMarksThatCrashed failed with error %{public} %@", 61, 2, inited);
      v31 = inited;
      a1 = v18;
      swift_setDeallocating(v31);
      v32 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(v27, 2, v32);

      v12 = v13;
      goto LABEL_17;
    }
    v33 = v14;
    v46 = _swiftEmptyArrayStorage;
    v43 = *((_QWORD *)v14 + 2);
    if (!v43)
      break;
    v40 = 0;
    v41 = a1;
    a1 = 0;
    v34 = _swiftEmptyArrayStorage;
    v42 = v14;
    while (a1 < *((_QWORD *)v33 + 2))
    {
      v35 = (*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80);
      v2 = *(double **)(v44 + 72);
      sub_1004B8460((uint64_t)v33 + v35 + (_QWORD)v2 * a1, (uint64_t)v8, type metadata accessor for CRLSideStore.BoardLoadMarksColumn.Row);
      if (*(int *)&v8[*(int *)(Marks + 24)] < 1)
      {
        sub_1004B84A4((uint64_t)v8, type metadata accessor for CRLSideStore.BoardLoadMarksColumn.Row);
      }
      else
      {
        v36 = (uint64_t)v5;
        sub_1004B84E0((uint64_t)v8, (uint64_t)v5, type metadata accessor for CRLSideStore.BoardLoadMarksColumn.Row);
        if ((swift_isUniquelyReferenced_nonNull_native(v34) & 1) == 0)
          sub_100600BD8(0, *((_QWORD *)v34 + 2) + 1, 1);
        v34 = v46;
        v38 = *((_QWORD *)v46 + 2);
        v37 = *((_QWORD *)v46 + 3);
        if (v38 >= v37 >> 1)
        {
          sub_100600BD8(v37 > 1, v38 + 1, 1);
          v34 = v46;
        }
        *((_QWORD *)v34 + 2) = v38 + 1;
        v39 = (uint64_t)v34 + v35 + v38 * (_QWORD)v2;
        v5 = (char *)v36;
        sub_1004B84E0(v36, v39, type metadata accessor for CRLSideStore.BoardLoadMarksColumn.Row);
        v33 = v42;
      }
      if (v43 == ++a1)
      {
        v12 = v46;
        a1 = v41;
        v15 = v40;
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_19:
    swift_once(&qword_1013DD8D8, sub_100A06CAC);
  }
LABEL_16:
  swift_bridgeObjectRelease(v33);
LABEL_17:
  *(_QWORD *)a1 = v12;
  *(_BYTE *)(a1 + 8) = v15 != 0;
}

void sub_1008135B4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t inited;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  _BYTE v22[8];
  _QWORD v23[3];
  _BYTE v24[112];
  _BYTE v25[32];
  _BYTE v26[8];

  swift_retain(a1);
  sub_1004E6230(v5, v5);
  if (v2)
  {
    swift_release(a1);
    if (qword_1013DD8D8 != -1)
      swift_once(&qword_1013DD8D8, sub_100A06CAC);
    swift_beginAccess(&static OS_os_log.sideStore, v25, 0, 0);
    v6 = (void *)static OS_os_log.sideStore;
    v7 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    inited = swift_initStackObject(v7, v24);
    *(_OWORD *)(inited + 16) = xmmword_100EF5A10;
    swift_getErrorValue(v2, v26, v23);
    v9 = v23[1];
    v10 = v23[2];
    v11 = v6;
    v12 = Error.publicDescription.getter(v9, v10);
    v14 = v13;
    *(_QWORD *)(inited + 56) = &type metadata for String;
    v15 = sub_1004CFC2C();
    *(_QWORD *)(inited + 64) = v15;
    *(_QWORD *)(inited + 32) = v12;
    *(_QWORD *)(inited + 40) = v14;
    swift_getErrorValue(v2, v22, v21);
    v16 = Error.fullDescription.getter(v21[1]);
    *(_QWORD *)(inited + 96) = &type metadata for String;
    *(_QWORD *)(inited + 104) = v15;
    *(_QWORD *)(inited + 72) = v16;
    *(_QWORD *)(inited + 80) = v17;
    v18 = static os_log_type_t.error.getter(v16);
    sub_100A06EBC((uint64_t)v11, &_mh_execute_header, v18, "cleanUpBoardLoadMarksForAppTermination failed with error %{public} %@", 69, 2, inited);
    swift_setDeallocating(inited);
    v19 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(inited + 32, 2, v19);

    v20 = v2;
  }
  else
  {
    swift_release(a1);
    v20 = 0;
  }
  *(_QWORD *)a2 = v20;
  *(_BYTE *)(a2 + 8) = v2 != 0;
}

void sub_10081377C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  int64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t *v37;
  uint64_t v38;
  int64_t v39;
  char *v40;
  uint64_t v41;
  char v42[24];
  char v43[24];
  uint64_t v44;

  v3 = type metadata accessor for CRLBoardIdentifier(0);
  v41 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1004B804C(&qword_1013F5188);
  __chkstk_darwin(v6);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v36 - v10;
  if (qword_1013DD8D8 != -1)
LABEL_41:
    swift_once(&qword_1013DD8D8, sub_100A06CAC);
  swift_beginAccess(&static OS_os_log.sideStore, v43, 0, 0);
  v12 = (id)static OS_os_log.sideStore;
  v14 = static os_log_type_t.default.getter(v13);
  sub_100A06EBC((uint64_t)v12, &_mh_execute_header, v14, "cleanUpBoardLoadMarksForAppTermination", 38, 2, (uint64_t)_swiftEmptyArrayStorage);

  v37 = (uint64_t *)(a1 + 56);
  swift_beginAccess(a1 + 56, v42, 1, 0);
  v15 = *(_QWORD *)(a1 + 56);
  v16 = *(_QWORD *)(v15 + 64);
  v38 = v15 + 64;
  v17 = 1 << *(_BYTE *)(v15 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & v16;
  v39 = (unint64_t)(v17 + 63) >> 6;
  v36 = v39 - 1;
  v44 = v15;
  swift_bridgeObjectRetain(v15);
  v20 = 0;
  v40 = v5;
  while (1)
  {
    if (v19)
    {
      v21 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v22 = v20;
      v23 = v21 | (v20 << 6);
      goto LABEL_7;
    }
    v27 = v20 + 1;
    if (__OFADD__(v20, 1))
      goto LABEL_40;
    if (v27 >= v39)
    {
      v22 = v20;
      goto LABEL_13;
    }
    v28 = *(_QWORD *)(v38 + 8 * v27);
    if (v28)
      goto LABEL_11;
    v22 = v20 + 2;
    if (v20 + 2 >= v39)
    {
      v22 = v20 + 1;
      goto LABEL_13;
    }
    v28 = *(_QWORD *)(v38 + 8 * v22);
    if (v28)
    {
      v27 = v20 + 2;
      goto LABEL_11;
    }
    v33 = v20 + 3;
    if (v20 + 3 < v39)
      break;
LABEL_13:
    v29 = sub_1004B804C(&qword_1013F4DD8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v8, 1, 1, v29);
    v19 = 0;
LABEL_14:
    sub_1004C4938((uint64_t)v8, (uint64_t)v11, &qword_1013F5188);
    v30 = sub_1004B804C(&qword_1013F4DD8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 48))(v11, 1, v30) == 1)
    {
      swift_release(v44);
      v35 = *v37;
      *v37 = (uint64_t)_swiftEmptyDictionarySingleton;
      swift_bridgeObjectRelease(v35);
      return;
    }
    v31 = *(_QWORD *)&v11[*(int *)(v30 + 48)];
    sub_1004B84E0((uint64_t)v11, (uint64_t)v5, type metadata accessor for CRLBoardIdentifier);
    if (v31 == 0x8000000000000000)
    {
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    v32 = -v31;
    if (-v31 < (uint64_t)0xFFFFFFFF80000000)
      goto LABEL_38;
    if (v32 > 0x7FFFFFFF)
      goto LABEL_39;
    sub_100810CB8((uint64_t)v5, v32);
    sub_1004B84A4((uint64_t)v5, type metadata accessor for CRLBoardIdentifier);
    v20 = v22;
    if (v1)
    {
      swift_release(v44);
      return;
    }
  }
  v28 = *(_QWORD *)(v38 + 8 * v33);
  if (v28)
  {
    v27 = v20 + 3;
    goto LABEL_11;
  }
  v34 = v20 + 4;
  if (v34 >= v39)
  {
    v22 = v33;
    goto LABEL_13;
  }
  v28 = *(_QWORD *)(v38 + 8 * v34);
  if (v28)
  {
    v27 = v34;
LABEL_11:
    v19 = (v28 - 1) & v28;
    v23 = __clz(__rbit64(v28)) + (v27 << 6);
    v22 = v27;
LABEL_7:
    v24 = v44;
    sub_1004B8460(*(_QWORD *)(v44 + 48) + *(_QWORD *)(v41 + 72) * v23, (uint64_t)v8, type metadata accessor for CRLBoardIdentifier);
    v25 = *(_QWORD *)(v24 + 56);
    v26 = sub_1004B804C(&qword_1013F4DD8);
    *(_QWORD *)&v8[*(int *)(v26 + 48)] = *(_QWORD *)(v25 + 8 * v23);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v8, 0, 1, v26);
    v5 = v40;
    goto LABEL_14;
  }
  while (1)
  {
    v27 = v34 + 1;
    if (__OFADD__(v34, 1))
      break;
    if (v27 >= v39)
    {
      v22 = v36;
      goto LABEL_13;
    }
    v28 = *(_QWORD *)(v38 + 8 * v27);
    ++v34;
    if (v28)
      goto LABEL_11;
  }
  __break(1u);
}

uint64_t sub_100813BD8()
{
  uint64_t *v0;
  char v1;

  sub_10081257C(v0[2], v0[3], v0[4]);
  return v1 & 1;
}

void sub_100813BF8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __n128 v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  _QWORD *v42;
  int v43;
  __n128 v44;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1013F4EA8);
  v43 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_43;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v42 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v40 = v2;
  v41 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  v18 = swift_retain(v10);
  v19 = 0;
  while (1)
  {
    if (v16)
    {
      v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v22 = v21 | (v19 << 6);
      goto LABEL_24;
    }
    v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v23 >= v41)
      break;
    v24 = v42;
    v25 = v42[v23];
    ++v19;
    if (!v25)
    {
      v19 = v23 + 1;
      if (v23 + 1 >= v41)
        goto LABEL_36;
      v25 = v42[v19];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v41)
        {
LABEL_36:
          swift_release(v10);
          v3 = v40;
          if ((v43 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v42[v26];
        if (!v25)
        {
          while (1)
          {
            v19 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v19 >= v41)
              goto LABEL_36;
            v25 = v42[v19];
            ++v26;
            if (v25)
              goto LABEL_23;
          }
        }
        v19 = v26;
      }
    }
LABEL_23:
    v16 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_24:
    v27 = *(_QWORD *)(v7 + 72);
    v28 = *(_QWORD *)(v10 + 48) + v27 * v22;
    if ((v43 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v7 + 32))(v9, v28, v6, v18);
      v44 = *(__n128 *)(*(_QWORD *)(v10 + 56) + 16 * v22);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v7 + 16))(v9, v28, v6, v18);
      v44 = *(__n128 *)(*(_QWORD *)(v10 + 56) + 16 * v22);
      swift_unknownObjectRetain(v44.n128_u64[0]);
    }
    v29 = *(_QWORD *)(v12 + 40);
    v30 = sub_1005034A0((unint64_t *)&qword_1013DE630, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v31 = dispatch thunk of Hashable._rawHashValue(seed:)(v29, v6, v30);
    v32 = -1 << *(_BYTE *)(v12 + 32);
    v33 = v31 & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v17 + 8 * (v33 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v17 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v17 + 8 * v34);
      }
      while (v38 == -1);
      v20 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(_QWORD *)(v12 + 48) + v27 * v20, v9, v6);
    v18 = v44;
    *(__n128 *)(*(_QWORD *)(v12 + 56) + 16 * v20) = v44;
    ++*(_QWORD *)(v12 + 16);
  }
  swift_release(v10);
  v3 = v40;
  v24 = v42;
  if ((v43 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v39 = 1 << *(_BYTE *)(v10 + 32);
  if (v39 >= 64)
    bzero(v24, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v39;
  *(_QWORD *)(v10 + 16) = 0;
LABEL_43:
  swift_release(v10);
  *v3 = v12;
}

void sub_100813F94(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t ObjectType;
  uint64_t v20;
  Swift::Int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  _QWORD *v29;
  unint64_t v30;
  int64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  _QWORD *v41;
  uint64_t v42;
  int v43;
  __int128 v44;
  _QWORD v45[9];

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v42 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1013F4EA0);
  v43 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_42;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v41 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v39 = v2;
  v40 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  swift_retain(v9);
  v17 = 0;
  while (1)
  {
    if (v15)
    {
      v26 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v27 = v26 | (v17 << 6);
      goto LABEL_33;
    }
    v28 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
      return;
    }
    if (v28 >= v40)
      break;
    v29 = v41;
    v30 = v41[v28];
    ++v17;
    if (!v30)
    {
      v17 = v28 + 1;
      if (v28 + 1 >= v40)
        goto LABEL_35;
      v30 = v41[v17];
      if (!v30)
      {
        v31 = v28 + 2;
        if (v31 >= v40)
        {
LABEL_35:
          swift_release(v9);
          v3 = v39;
          if ((v43 & 1) == 0)
            goto LABEL_42;
          goto LABEL_38;
        }
        v30 = v41[v31];
        if (!v30)
        {
          while (1)
          {
            v17 = v31 + 1;
            if (__OFADD__(v31, 1))
              goto LABEL_44;
            if (v17 >= v40)
              goto LABEL_35;
            v30 = v41[v17];
            ++v31;
            if (v30)
              goto LABEL_32;
          }
        }
        v17 = v31;
      }
    }
LABEL_32:
    v15 = (v30 - 1) & v30;
    v27 = __clz(__rbit64(v30)) + (v17 << 6);
LABEL_33:
    v36 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v27);
    v44 = *(_OWORD *)(*(_QWORD *)(v9 + 56) + 16 * v27);
    if ((v43 & 1) == 0)
    {
      swift_retain(v36);
      swift_unknownObjectRetain(v44);
    }
    Hasher.init(_seed:)(v45, *(_QWORD *)(v11 + 40));
    v18 = *(_QWORD *)(v36 + 24);
    ObjectType = swift_getObjectType(*(_QWORD *)(v36 + 16));
    (*(void (**)(uint64_t, uint64_t))(v18 + 32))(ObjectType, v18);
    v20 = sub_1005034A0((unint64_t *)&qword_1013DE630, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v45, v6, v20);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v8, v6);
    v21 = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v11 + 32);
    v23 = v21 & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v16 + 8 * (v23 >> 6))) != 0)
    {
      v25 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v16 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_43;
        }
        v34 = v24 == v33;
        if (v24 == v33)
          v24 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v16 + 8 * v24);
      }
      while (v35 == -1);
      v25 = __clz(__rbit64(~v35)) + (v24 << 6);
    }
    *(_QWORD *)(v16 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    *(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * v25) = v36;
    *(_OWORD *)(*(_QWORD *)(v11 + 56) + 16 * v25) = v44;
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release(v9);
  v3 = v39;
  v29 = v41;
  if ((v43 & 1) == 0)
    goto LABEL_42;
LABEL_38:
  v37 = 1 << *(_BYTE *)(v9 + 32);
  if (v37 >= 64)
    bzero(v29, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v29 = -1 << v37;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_42:
  swift_release(v9);
  *v3 = v11;
}

void sub_10081433C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21[9];
  _OWORD v22[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1013F4FB8);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_30;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v19 = v3;
  v20 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  swift_retain(v5);
  if (v10)
  {
    v12 = __clz(__rbit64(v10));
    goto LABEL_21;
  }
  if (v11 > 1)
  {
    v13 = *(_QWORD *)(v5 + 72);
    v14 = 1;
    if (v13)
      goto LABEL_20;
    v14 = 2;
    if (v11 > 2)
    {
      v13 = *(_QWORD *)(v5 + 80);
      if (!v13)
      {
        v15 = 3;
        if (v11 > 3)
        {
          v13 = *(_QWORD *)(v5 + 88);
          if (v13)
          {
            v14 = 3;
            goto LABEL_20;
          }
          while (1)
          {
            v14 = v15 + 1;
            if (__OFADD__(v15, 1))
            {
              __break(1u);
              JUMPOUT(0x100814714);
            }
            if (v14 >= v11)
              break;
            v13 = v20[v14];
            ++v15;
            if (v13)
              goto LABEL_20;
          }
        }
        goto LABEL_25;
      }
LABEL_20:
      v12 = __clz(__rbit64(v13)) + (v14 << 6);
LABEL_21:
      v16 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v12);
      v17 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v12);
      if ((a2 & 1) != 0)
        sub_10050CB14(v17, v22);
      else
        sub_1004CB6E8((uint64_t)v17, (uint64_t)v22);
      Hasher.init(_seed:)(v21, *(_QWORD *)(v7 + 40));
      __asm { BR              X8 }
    }
  }
LABEL_25:
  swift_release(v5);
  v3 = v19;
  if ((a2 & 1) != 0)
  {
    v18 = 1 << *(_BYTE *)(v5 + 32);
    if (v18 >= 64)
      bzero(v20, ((unint64_t)(v18 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v20 = -1 << v18;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_30:
  swift_release(v5);
  *v3 = v7;
}

void sub_10081473C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20[9];
  _BYTE v21[32];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1013F4FC8);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_32;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v19 = (unint64_t)(v8 + 63) >> 6;
  swift_retain(v5);
  if (v10)
  {
    v11 = __clz(__rbit64(v10));
    goto LABEL_21;
  }
  if (v19 <= 1)
  {
    swift_release(v5);
    v12 = (_QWORD *)(v5 + 64);
    if ((a2 & 1) == 0)
      goto LABEL_32;
    goto LABEL_28;
  }
  v12 = (_QWORD *)(v5 + 64);
  v13 = *(_QWORD *)(v5 + 72);
  v14 = 1;
  if (v13)
    goto LABEL_20;
  v14 = 2;
  if (v19 <= 2)
    goto LABEL_25;
  v13 = *(_QWORD *)(v5 + 80);
  if (v13)
  {
LABEL_20:
    v11 = __clz(__rbit64(v13)) + (v14 << 6);
LABEL_21:
    v16 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v11);
    v17 = *(_QWORD *)(v5 + 56) + 32 * v11;
    if ((a2 & 1) != 0)
      sub_1004C4938(v17, (uint64_t)v21, &qword_1013E0230);
    else
      sub_1004CB7BC(v17, (uint64_t)v21, &qword_1013E0230);
    Hasher.init(_seed:)(v20, *(_QWORD *)(v7 + 40));
    __asm { BR              X8 }
  }
  v15 = 3;
  if (v19 > 3)
  {
    v13 = *(_QWORD *)(v5 + 88);
    if (v13)
    {
      v14 = 3;
      goto LABEL_20;
    }
    while (1)
    {
      v14 = v15 + 1;
      if (__OFADD__(v15, 1))
      {
        __break(1u);
        JUMPOUT(0x100814B40);
      }
      if (v14 >= v19)
        break;
      v13 = *(_QWORD *)(v5 + 64 + 8 * v14);
      ++v15;
      if (v13)
        goto LABEL_20;
    }
  }
LABEL_25:
  swift_release(v5);
  if ((a2 & 1) == 0)
    goto LABEL_32;
LABEL_28:
  v18 = 1 << *(_BYTE *)(v5 + 32);
  if (v18 >= 64)
    bzero(v12, ((unint64_t)(v18 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v12 = -1 << v18;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_32:
  swift_release(v5);
  *v3 = v7;
}

void sub_100814B68(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD *v33;
  uint64_t v34[9];
  _BYTE v35[32];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1013F4E68);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v31 = v3;
    v9 = 0;
    v33 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v32 = (unint64_t)(v10 + 63) >> 6;
    v13 = v7 + 64;
    while (1)
    {
      if (v12)
      {
        v15 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v16 = v15 | (v9 << 6);
      }
      else
      {
        v17 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
          return;
        }
        if (v17 >= v32)
          goto LABEL_37;
        v18 = v33[v17];
        ++v9;
        if (!v18)
        {
          v9 = v17 + 1;
          if (v17 + 1 >= v32)
            goto LABEL_37;
          v18 = v33[v9];
          if (!v18)
          {
            v19 = v17 + 2;
            if (v19 >= v32)
            {
LABEL_37:
              if ((a2 & 1) == 0)
              {
                swift_release(v5);
                v3 = v31;
                goto LABEL_44;
              }
              v30 = 1 << *(_BYTE *)(v5 + 32);
              if (v30 >= 64)
                bzero(v33, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v33 = -1 << v30;
              v3 = v31;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v18 = v33[v19];
            if (!v18)
            {
              while (1)
              {
                v9 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_46;
                if (v9 >= v32)
                  goto LABEL_37;
                v18 = v33[v9];
                ++v19;
                if (v18)
                  goto LABEL_24;
              }
            }
            v9 = v19;
          }
        }
LABEL_24:
        v12 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v9 << 6);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v16);
      v21 = *(_QWORD *)(v5 + 56) + 32 * v16;
      if ((a2 & 1) != 0)
        sub_1004C4938(v21, (uint64_t)v35, &qword_1013E0230);
      else
        sub_1004CB7BC(v21, (uint64_t)v35, &qword_1013E0230);
      Hasher.init(_seed:)(v34, *(_QWORD *)(v8 + 40));
      Hasher._combine(_:)(v20);
      v22 = Hasher._finalize()();
      v23 = -1 << *(_BYTE *)(v8 + 32);
      v24 = v22 & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_45;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v13 + 8 * v25);
        }
        while (v29 == -1);
        v14 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v14) = v20;
      sub_1004C4938((uint64_t)v35, *(_QWORD *)(v8 + 56) + 32 * v14, &qword_1013E0230);
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release(v5);
LABEL_44:
  *v3 = v8;
}

void sub_100814E54(uint64_t a1, uint64_t a2)
{
  sub_100815CF8(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_1013F5060, (unint64_t *)&qword_1013DE630, (uint64_t)&protocol conformance descriptor for UUID);
}

void sub_100814E78(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1013F4FB0);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_31;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v18 = (unint64_t)(v8 + 63) >> 6;
  swift_retain(v5);
  if (v10)
  {
    v11 = __clz(__rbit64(v10));
    goto LABEL_21;
  }
  if (v18 <= 1)
  {
    swift_release(v5);
    v12 = (_QWORD *)(v5 + 64);
    if ((a2 & 1) == 0)
      goto LABEL_31;
    goto LABEL_27;
  }
  v12 = (_QWORD *)(v5 + 64);
  v13 = *(_QWORD *)(v5 + 72);
  v14 = 1;
  if (v13)
    goto LABEL_20;
  v14 = 2;
  if (v18 <= 2)
    goto LABEL_24;
  v13 = *(_QWORD *)(v5 + 80);
  if (v13)
  {
LABEL_20:
    v11 = __clz(__rbit64(v13)) + (v14 << 6);
LABEL_21:
    v16 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v11);
    if ((a2 & 1) == 0)
      swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11));
    Hasher.init(_seed:)(v19, *(_QWORD *)(v7 + 40));
    __asm { BR              X8 }
  }
  v15 = 3;
  if (v18 > 3)
  {
    v13 = *(_QWORD *)(v5 + 88);
    if (v13)
    {
      v14 = 3;
      goto LABEL_20;
    }
    while (1)
    {
      v14 = v15 + 1;
      if (__OFADD__(v15, 1))
      {
        __break(1u);
        JUMPOUT(0x10081525CLL);
      }
      if (v14 >= v18)
        break;
      v13 = *(_QWORD *)(v5 + 64 + 8 * v14);
      ++v15;
      if (v13)
        goto LABEL_20;
    }
  }
LABEL_24:
  swift_release(v5);
  if ((a2 & 1) == 0)
    goto LABEL_31;
LABEL_27:
  v17 = 1 << *(_BYTE *)(v5 + 32);
  if (v17 >= 64)
    bzero(v12, ((unint64_t)(v17 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v12 = -1 << v17;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_31:
  swift_release(v5);
  *v3 = v7;
}

void sub_100815284(uint64_t a1, uint64_t a2)
{
  sub_100815290(a1, a2, &qword_1013F4ED8);
}

void sub_100815290(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __n128 v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  _QWORD *v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  int64_t v45;
  _QWORD *v46;
  uint64_t i;
  int v48;

  v5 = v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v5;
  if (*(_QWORD *)(*v5 + 24) > a1)
    a1 = *(_QWORD *)(*v5 + 24);
  sub_1004B804C(a3);
  v48 = a2;
  v13 = static _DictionaryStorage.resize(original:capacity:move:)(v12, a1, a2);
  v14 = v13;
  if (!*(_QWORD *)(v12 + 16))
    goto LABEL_43;
  v15 = 1 << *(_BYTE *)(v12 + 32);
  v16 = *(_QWORD *)(v12 + 64);
  v46 = (_QWORD *)(v12 + 64);
  if (v15 < 64)
    v17 = ~(-1 << v15);
  else
    v17 = -1;
  v18 = v17 & v16;
  v44 = v5;
  v45 = (unint64_t)(v15 + 63) >> 6;
  v19 = v13 + 64;
  v20 = swift_retain(v12);
  v21 = 0;
  for (i = v12; ; v12 = i)
  {
    if (v18)
    {
      v23 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v24 = v23 | (v21 << 6);
      goto LABEL_24;
    }
    v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v25 >= v45)
      break;
    v26 = v46;
    v27 = v46[v25];
    ++v21;
    if (!v27)
    {
      v21 = v25 + 1;
      if (v25 + 1 >= v45)
        goto LABEL_36;
      v27 = v46[v21];
      if (!v27)
      {
        v28 = v25 + 2;
        if (v28 >= v45)
        {
LABEL_36:
          swift_release(v12);
          v5 = v44;
          if ((v48 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v27 = v46[v28];
        if (!v27)
        {
          while (1)
          {
            v21 = v28 + 1;
            if (__OFADD__(v28, 1))
              goto LABEL_45;
            if (v21 >= v45)
              goto LABEL_36;
            v27 = v46[v21];
            ++v28;
            if (v27)
              goto LABEL_23;
          }
        }
        v21 = v28;
      }
    }
LABEL_23:
    v18 = (v27 - 1) & v27;
    v24 = __clz(__rbit64(v27)) + (v21 << 6);
LABEL_24:
    v29 = *(_QWORD *)(v9 + 72);
    v30 = *(_QWORD *)(v12 + 48) + v29 * v24;
    if ((v48 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v9 + 32))(v11, v30, v8, v20);
      v31 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v24);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v9 + 16))(v11, v30, v8, v20);
      v31 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v24);
      swift_retain(v31);
    }
    v32 = *(_QWORD *)(v14 + 40);
    v33 = sub_1005034A0((unint64_t *)&qword_1013DE630, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v34 = dispatch thunk of Hashable._rawHashValue(seed:)(v32, v8, v33);
    v35 = -1 << *(_BYTE *)(v14 + 32);
    v36 = v34 & ~v35;
    v37 = v36 >> 6;
    if (((-1 << v36) & ~*(_QWORD *)(v19 + 8 * (v36 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v36) & ~*(_QWORD *)(v19 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v38 = 0;
      v39 = (unint64_t)(63 - v35) >> 6;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v40 = v37 == v39;
        if (v37 == v39)
          v37 = 0;
        v38 |= v40;
        v41 = *(_QWORD *)(v19 + 8 * v37);
      }
      while (v41 == -1);
      v22 = __clz(__rbit64(~v41)) + (v37 << 6);
    }
    *(_QWORD *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(*(_QWORD *)(v14 + 48) + v29 * v22, v11, v8);
    *(_QWORD *)(*(_QWORD *)(v14 + 56) + 8 * v22) = v31;
    ++*(_QWORD *)(v14 + 16);
  }
  swift_release(v12);
  v5 = v44;
  v26 = v46;
  if ((v48 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v42 = 1 << *(_BYTE *)(v12 + 32);
  if (v42 >= 64)
    bzero(v26, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v26 = -1 << v42;
  *(_QWORD *)(v12 + 16) = 0;
LABEL_43:
  swift_release(v12);
  *v5 = v14;
}

void sub_10081562C(uint64_t a1, uint64_t a2)
{
  sub_10081C6D8(a1, a2, (uint64_t *)&unk_101405F30);
}

void sub_100815638(uint64_t a1, uint64_t a2)
{
  sub_100815290(a1, a2, &qword_1013F4F30);
}

void sub_100815644(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __n128 v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;

  v5 = type metadata accessor for UUID(0);
  v46 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = v2;
  v8 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1013F4FD8);
  v9 = static _DictionaryStorage.resize(original:capacity:move:)(v8, a1, a2);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
    swift_release(v8);
    v39 = v42;
LABEL_44:
    *v39 = v10;
    return;
  }
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 64);
  v44 = (_QWORD *)(v8 + 64);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v43 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 64;
  v16 = swift_retain(v8);
  v17 = 0;
  HIDWORD(v41) = a2;
  v18 = 16;
  if ((a2 & 1) != 0)
    v18 = 32;
  v45 = v18;
  while (1)
  {
    if (v14)
    {
      v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v21 = v20 | (v17 << 6);
      goto LABEL_26;
    }
    v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    if (v22 >= v43)
    {
      swift_release(v8);
      v39 = v42;
      v23 = v44;
      if ((v41 & 0x100000000) != 0)
      {
LABEL_39:
        v40 = 1 << *(_BYTE *)(v8 + 32);
        if (v40 >= 64)
          bzero(v23, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
        else
          *v23 = -1 << v40;
        *(_QWORD *)(v8 + 16) = 0;
      }
LABEL_43:
      swift_release(v8);
      goto LABEL_44;
    }
    v23 = v44;
    v24 = v44[v22];
    ++v17;
    if (!v24)
    {
      v17 = v22 + 1;
      if (v22 + 1 >= v43)
        goto LABEL_36;
      v24 = v44[v17];
      if (!v24)
        break;
    }
LABEL_25:
    v14 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_26:
    v26 = *(_QWORD *)(v46 + 72);
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v46 + v45))(v7, *(_QWORD *)(v8 + 48) + v26 * v21, v5, v16);
    v27 = v8;
    v28 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v21);
    v29 = *(_QWORD *)(v10 + 40);
    v30 = sub_1005034A0((unint64_t *)&qword_1013DE630, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v31 = dispatch thunk of Hashable._rawHashValue(seed:)(v29, v5, v30);
    v32 = -1 << *(_BYTE *)(v10 + 32);
    v33 = v31 & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v15 + 8 * (v33 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v15 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v15 + 8 * v34);
      }
      while (v38 == -1);
      v19 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v15 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    (*(void (**)(unint64_t, char *, uint64_t))(v46 + 32))(*(_QWORD *)(v10 + 48) + v26 * v19, v7, v5);
    *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v19) = v28;
    ++*(_QWORD *)(v10 + 16);
    v8 = v27;
  }
  v25 = v22 + 2;
  if (v25 >= v43)
  {
LABEL_36:
    swift_release(v8);
    v39 = v42;
    if ((v41 & 0x100000000) != 0)
      goto LABEL_39;
    goto LABEL_43;
  }
  v24 = v44[v25];
  if (v24)
  {
    v17 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v17 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v17 >= v43)
      goto LABEL_36;
    v24 = v44[v17];
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_46:
  __break(1u);
}

void sub_1008159E4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  Swift::Int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD v38[2];
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1013F4F78);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v19 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v20 = v19 | (v14 << 6);
      goto LABEL_25;
    }
    v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return;
    }
    if (v21 >= v12)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v37 + 8 * v21);
    ++v14;
    if (!v23)
    {
      v14 = v21 + 1;
      if (v21 + 1 >= v12)
        goto LABEL_37;
      v23 = *(_QWORD *)(v37 + 8 * v14);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v12)
        {
LABEL_37:
          swift_release(v5);
          if ((a2 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v23 = *(_QWORD *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v14 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_46;
            if (v14 >= v12)
              goto LABEL_37;
            v23 = *(_QWORD *)(v37 + 8 * v14);
            ++v24;
            if (v23)
              goto LABEL_24;
          }
        }
        v14 = v24;
      }
    }
LABEL_24:
    v11 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_25:
    v25 = *(_QWORD *)(v5 + 48) + 40 * v20;
    if ((a2 & 1) != 0)
    {
      v26 = *(_OWORD *)v25;
      v27 = *(_OWORD *)(v25 + 16);
      v41 = *(_QWORD *)(v25 + 32);
      v39 = v26;
      v40 = v27;
      sub_10050CB14((_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v20), v38);
    }
    else
    {
      sub_1004B8968(v25, (uint64_t)&v39);
      sub_1004CB6E8(*(_QWORD *)(v5 + 56) + 32 * v20, (uint64_t)v38);
    }
    v28 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v29 = -1 << *(_BYTE *)(v8 + 32);
    v30 = v28 & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v13 + 8 * (v30 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v13 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v13 + 8 * v31);
      }
      while (v35 == -1);
      v15 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v13 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = *(_QWORD *)(v8 + 48) + 40 * v15;
    v17 = v39;
    v18 = v40;
    *(_QWORD *)(v16 + 32) = v41;
    *(_OWORD *)v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    sub_10050CB14(v38, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v15));
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v22 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v22, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  swift_release(v5);
  *v3 = v8;
}

void sub_100815CF8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t *a4, unint64_t *a5, uint64_t a6)
{
  uint64_t *v6;
  uint64_t *v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  __n128 v23;
  int64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  _QWORD *v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  unint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  int64_t v47;
  _QWORD *v48;
  uint64_t i;
  uint64_t (*v50)(uint64_t);
  unint64_t *v51;
  uint64_t v52;
  int v53;

  v51 = a5;
  v52 = a6;
  v8 = v6;
  v50 = a3;
  v11 = a3(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v46 - v13;
  v15 = *v8;
  if (*(_QWORD *)(*v8 + 24) > a1)
    a1 = *(_QWORD *)(*v8 + 24);
  sub_1004B804C(a4);
  v53 = a2;
  v16 = static _DictionaryStorage.resize(original:capacity:move:)(v15, a1, a2);
  v17 = v16;
  if (!*(_QWORD *)(v15 + 16))
    goto LABEL_43;
  v18 = 1 << *(_BYTE *)(v15 + 32);
  v19 = *(_QWORD *)(v15 + 64);
  v48 = (_QWORD *)(v15 + 64);
  if (v18 < 64)
    v20 = ~(-1 << v18);
  else
    v20 = -1;
  v21 = v20 & v19;
  v46 = v8;
  v47 = (unint64_t)(v18 + 63) >> 6;
  v22 = v16 + 64;
  v23 = swift_retain(v15);
  v24 = 0;
  for (i = v15; ; v15 = i)
  {
    if (v21)
    {
      v26 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      v27 = v26 | (v24 << 6);
      goto LABEL_24;
    }
    v28 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v28 >= v47)
      break;
    v29 = v48;
    v30 = v48[v28];
    ++v24;
    if (!v30)
    {
      v24 = v28 + 1;
      if (v28 + 1 >= v47)
        goto LABEL_36;
      v30 = v48[v24];
      if (!v30)
      {
        v31 = v28 + 2;
        if (v31 >= v47)
        {
LABEL_36:
          swift_release(v15);
          v8 = v46;
          if ((v53 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v30 = v48[v31];
        if (!v30)
        {
          while (1)
          {
            v24 = v31 + 1;
            if (__OFADD__(v31, 1))
              goto LABEL_45;
            if (v24 >= v47)
              goto LABEL_36;
            v30 = v48[v24];
            ++v31;
            if (v30)
              goto LABEL_23;
          }
        }
        v24 = v31;
      }
    }
LABEL_23:
    v21 = (v30 - 1) & v30;
    v27 = __clz(__rbit64(v30)) + (v24 << 6);
LABEL_24:
    v32 = *(_QWORD *)(v12 + 72);
    v33 = *(_QWORD *)(v15 + 48) + v32 * v27;
    if ((v53 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v12 + 32))(v14, v33, v11, v23);
      v34 = *(id *)(*(_QWORD *)(v15 + 56) + 8 * v27);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v12 + 16))(v14, v33, v11, v23);
      v34 = *(id *)(*(_QWORD *)(v15 + 56) + 8 * v27);
    }
    v35 = *(_QWORD *)(v17 + 40);
    v36 = sub_1005034A0(v51, 255, v50, v52);
    v37 = dispatch thunk of Hashable._rawHashValue(seed:)(v35, v11, v36);
    v38 = -1 << *(_BYTE *)(v17 + 32);
    v39 = v37 & ~v38;
    v40 = v39 >> 6;
    if (((-1 << v39) & ~*(_QWORD *)(v22 + 8 * (v39 >> 6))) != 0)
    {
      v25 = __clz(__rbit64((-1 << v39) & ~*(_QWORD *)(v22 + 8 * (v39 >> 6)))) | v39 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v41 = 0;
      v42 = (unint64_t)(63 - v38) >> 6;
      do
      {
        if (++v40 == v42 && (v41 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v43 = v40 == v42;
        if (v40 == v42)
          v40 = 0;
        v41 |= v43;
        v44 = *(_QWORD *)(v22 + 8 * v40);
      }
      while (v44 == -1);
      v25 = __clz(__rbit64(~v44)) + (v40 << 6);
    }
    *(_QWORD *)(v22 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(*(_QWORD *)(v17 + 48) + v32 * v25, v14, v11);
    *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v25) = v34;
    ++*(_QWORD *)(v17 + 16);
  }
  swift_release(v15);
  v8 = v46;
  v29 = v48;
  if ((v53 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v45 = 1 << *(_BYTE *)(v15 + 32);
  if (v45 >= 64)
    bzero(v29, ((unint64_t)(v45 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v29 = -1 << v45;
  *(_QWORD *)(v15 + 16) = 0;
LABEL_43:
  swift_release(v15);
  *v8 = v17;
}

void sub_100816088(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1013F50C0);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 0;
    v10 = (uint64_t *)(v5 + 64);
    v11 = 1 << *(_BYTE *)(v5 + 32);
    v34 = -1 << v11;
    v35 = v11;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v5 + 64);
    v36 = (unint64_t)(v11 + 63) >> 6;
    v14 = v7 + 64;
    while (1)
    {
      if (v13)
      {
        v21 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v22 = v21 | (v9 << 6);
      }
      else
      {
        v23 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return;
        }
        if (v23 >= v36)
          goto LABEL_36;
        v24 = v10[v23];
        ++v9;
        if (!v24)
        {
          v9 = v23 + 1;
          if (v23 + 1 >= v36)
            goto LABEL_36;
          v24 = v10[v9];
          if (!v24)
          {
            v25 = v23 + 2;
            if (v25 >= v36)
            {
LABEL_36:
              if ((a2 & 1) != 0)
              {
                if (v35 >= 64)
                  bzero((void *)(v5 + 64), 8 * v36);
                else
                  *v10 = v34;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v24 = v10[v25];
            if (!v24)
            {
              while (1)
              {
                v9 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_44;
                if (v9 >= v36)
                  goto LABEL_36;
                v24 = v10[v9];
                ++v25;
                if (v24)
                  goto LABEL_33;
              }
            }
            v9 = v25;
          }
        }
LABEL_33:
        v13 = (v24 - 1) & v24;
        v22 = __clz(__rbit64(v24)) + (v9 << 6);
      }
      v30 = 8 * v22;
      v31 = *(_QWORD *)(v5 + 56);
      v32 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v30);
      v33 = *(_QWORD *)(v31 + v30);
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain(*(_QWORD *)(v31 + v30));
      v15 = static Hasher._hash(seed:_:)(*(_QWORD *)(v8 + 40), v32);
      v16 = -1 << *(_BYTE *)(v8 + 32);
      v17 = v15 & ~v16;
      v18 = v17 >> 6;
      if (((-1 << v17) & ~*(_QWORD *)(v14 + 8 * (v17 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v14 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v28 = v18 == v27;
          if (v18 == v27)
            v18 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v14 + 8 * v18);
        }
        while (v29 == -1);
        v19 = __clz(__rbit64(~v29)) + (v18 << 6);
      }
      *(_QWORD *)(v14 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      v20 = 8 * v19;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + v20) = v32;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + v20) = v33;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release(v5);
  *v3 = v8;
}

void sub_10081633C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::Int v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  _QWORD *v42;
  uint64_t v43;
  int v44;
  _QWORD v45[9];

  v3 = v2;
  v6 = sub_1004B804C((uint64_t *)&unk_1013E1A50);
  v43 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_1004B804C(&qword_1013F4F18);
  v44 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_43;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v42 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v40 = v3;
  v41 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  swift_retain(v9);
  v17 = 0;
  while (1)
  {
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v21 = v20 | (v17 << 6);
      goto LABEL_24;
    }
    v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v22 >= v41)
      break;
    v23 = v42;
    v24 = v42[v22];
    ++v17;
    if (!v24)
    {
      v17 = v22 + 1;
      if (v22 + 1 >= v41)
        goto LABEL_36;
      v24 = v42[v17];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v41)
        {
LABEL_36:
          swift_release(v9);
          v3 = v40;
          if ((v44 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = v42[v25];
        if (!v24)
        {
          while (1)
          {
            v17 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v17 >= v41)
              goto LABEL_36;
            v24 = v42[v17];
            ++v25;
            if (v24)
              goto LABEL_23;
          }
        }
        v17 = v25;
      }
    }
LABEL_23:
    v15 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_24:
    v26 = (uint64_t *)(*(_QWORD *)(v9 + 48) + 16 * v21);
    v28 = *v26;
    v27 = v26[1];
    v29 = *(_QWORD *)(v43 + 72);
    v30 = *(_QWORD *)(v9 + 56) + v29 * v21;
    if ((v44 & 1) != 0)
    {
      sub_1004C4938(v30, (uint64_t)v8, (uint64_t *)&unk_1013E1A50);
    }
    else
    {
      sub_1004CB7BC(v30, (uint64_t)v8, (uint64_t *)&unk_1013E1A50);
      swift_bridgeObjectRetain(v27);
    }
    Hasher.init(_seed:)(v45, *(_QWORD *)(v11 + 40));
    String.hash(into:)(v45, v28, v27);
    v31 = Hasher._finalize()();
    v32 = -1 << *(_BYTE *)(v11 + 32);
    v33 = v31 & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v16 + 8 * (v33 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v16 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v16 + 8 * v34);
      }
      while (v38 == -1);
      v18 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v16 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v11 + 48) + 16 * v18);
    *v19 = v28;
    v19[1] = v27;
    sub_1004C4938((uint64_t)v8, *(_QWORD *)(v11 + 56) + v29 * v18, (uint64_t *)&unk_1013E1A50);
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release(v9);
  v3 = v40;
  v23 = v42;
  if ((v44 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v39 = 1 << *(_BYTE *)(v9 + 32);
  if (v39 >= 64)
    bzero(v23, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v39;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_43:
  swift_release(v9);
  *v3 = v11;
}

void sub_1008166C0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void (*v26)(unint64_t, _BYTE *, uint64_t);
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  _QWORD *v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void (*v36)(_BYTE *, unint64_t, uint64_t, __n128);
  unint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char v45;
  unint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE v52[4];
  int v53;
  uint64_t *v54;
  int64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v60 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = &v52[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  v11 = &v52[-v10];
  v12 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1013F4E90);
  v13 = static _DictionaryStorage.resize(original:capacity:move:)(v12, a1, a2);
  if (!*(_QWORD *)(v12 + 16))
  {
    v49 = v12;
LABEL_44:
    swift_release(v49);
    *v3 = v13;
    return;
  }
  v14 = 1 << *(_BYTE *)(v12 + 32);
  v15 = *(_QWORD *)(v12 + 64);
  v56 = (_QWORD *)(v12 + 64);
  if (v14 < 64)
    v16 = ~(-1 << v14);
  else
    v16 = -1;
  v17 = v16 & v15;
  v54 = v2;
  v55 = (unint64_t)(v14 + 63) >> 6;
  v18 = v12;
  v19 = v13 + 64;
  v59 = v18;
  v20 = swift_retain(v18);
  v21 = 0;
  v53 = a2;
  v22 = 16;
  if ((a2 & 1) != 0)
    v22 = 32;
  v57 = v22;
  v58 = v8;
  while (1)
  {
    if (v17)
    {
      v27 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v28 = v27 | (v21 << 6);
      goto LABEL_26;
    }
    v29 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    if (v29 >= v55)
    {
      v50 = v59;
      swift_release(v59);
      v3 = v54;
      v30 = v56;
      if ((v53 & 1) != 0)
      {
LABEL_39:
        v51 = 1 << *(_BYTE *)(v50 + 32);
        if (v51 >= 64)
          bzero(v30, ((unint64_t)(v51 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
        else
          *v30 = -1 << v51;
        *(_QWORD *)(v50 + 16) = 0;
      }
LABEL_43:
      v49 = v50;
      goto LABEL_44;
    }
    v30 = v56;
    v31 = v56[v29];
    ++v21;
    if (!v31)
    {
      v21 = v29 + 1;
      if (v29 + 1 >= v55)
        goto LABEL_36;
      v31 = v56[v21];
      if (!v31)
        break;
    }
LABEL_25:
    v17 = (v31 - 1) & v31;
    v28 = __clz(__rbit64(v31)) + (v21 << 6);
LABEL_26:
    v33 = v59;
    v34 = *(_QWORD *)(v60 + 72);
    v35 = v34 * v28;
    v36 = *(void (**)(_BYTE *, unint64_t, uint64_t, __n128))(v60 + v57);
    v36(v11, *(_QWORD *)(v59 + 48) + v34 * v28, v6, v20);
    v37 = *(_QWORD *)(v33 + 56) + v35;
    v38 = v58;
    ((void (*)(_BYTE *, unint64_t, uint64_t))v36)(v58, v37, v6);
    v39 = *(_QWORD *)(v13 + 40);
    v40 = sub_1005034A0((unint64_t *)&qword_1013DE630, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v41 = dispatch thunk of Hashable._rawHashValue(seed:)(v39, v6, v40);
    v42 = -1 << *(_BYTE *)(v13 + 32);
    v43 = v41 & ~v42;
    v44 = v43 >> 6;
    if (((-1 << v43) & ~*(_QWORD *)(v19 + 8 * (v43 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v43) & ~*(_QWORD *)(v19 + 8 * (v43 >> 6)))) | v43 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v45 = 0;
      v46 = (unint64_t)(63 - v42) >> 6;
      do
      {
        if (++v44 == v46 && (v45 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v47 = v44 == v46;
        if (v44 == v46)
          v44 = 0;
        v45 |= v47;
        v48 = *(_QWORD *)(v19 + 8 * v44);
      }
      while (v48 == -1);
      v23 = __clz(__rbit64(~v48)) + (v44 << 6);
    }
    *(_QWORD *)(v19 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v24 = v34 * v23;
    v25 = *(_QWORD *)(v13 + 48) + v34 * v23;
    v26 = *(void (**)(unint64_t, _BYTE *, uint64_t))(v60 + 32);
    v26(v25, v11, v6);
    v26(*(_QWORD *)(v13 + 56) + v24, v38, v6);
    ++*(_QWORD *)(v13 + 16);
  }
  v32 = v29 + 2;
  if (v32 >= v55)
  {
LABEL_36:
    v50 = v59;
    swift_release(v59);
    v3 = v54;
    if ((v53 & 1) != 0)
      goto LABEL_39;
    goto LABEL_43;
  }
  v31 = v56[v32];
  if (v31)
  {
    v21 = v32;
    goto LABEL_25;
  }
  while (1)
  {
    v21 = v32 + 1;
    if (__OFADD__(v32, 1))
      break;
    if (v21 >= v55)
      goto LABEL_36;
    v31 = v56[v21];
    ++v32;
    if (v31)
      goto LABEL_25;
  }
LABEL_46:
  __break(1u);
}

void sub_100816A9C(uint64_t a1, uint64_t a2)
{
  sub_10081E960(a1, a2, &qword_1013F4FA0);
}

void sub_100816AA8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  Swift::UInt v25;
  uint64_t v26;
  Swift::Int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int v38;
  int64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43[9];

  v3 = v2;
  v42 = sub_1004B804C(&qword_1013E1798);
  v6 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_1004B804C(&qword_1013F51D0);
  v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  v11 = v10;
  if (*(_QWORD *)(v9 + 16))
  {
    v37 = v3;
    v12 = 0;
    v13 = *(_QWORD *)(v9 + 64);
    v40 = (_QWORD *)(v9 + 64);
    v14 = 1 << *(_BYTE *)(v9 + 32);
    if (v14 < 64)
      v15 = ~(-1 << v14);
    else
      v15 = -1;
    v16 = v15 & v13;
    v39 = (unint64_t)(v14 + 63) >> 6;
    v17 = v10 + 64;
    v38 = a2;
    v18 = 16;
    if ((a2 & 1) != 0)
      v18 = 32;
    v41 = v18;
    while (1)
    {
      if (v16)
      {
        v20 = __clz(__rbit64(v16));
        v16 &= v16 - 1;
        v21 = v20 | (v12 << 6);
      }
      else
      {
        v22 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return;
        }
        if (v22 >= v39)
          goto LABEL_35;
        v23 = v40[v22];
        ++v12;
        if (!v23)
        {
          v12 = v22 + 1;
          if (v22 + 1 >= v39)
            goto LABEL_35;
          v23 = v40[v12];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v39)
            {
LABEL_35:
              if ((v38 & 1) == 0)
              {
                swift_release(v9);
                v3 = v37;
                goto LABEL_42;
              }
              v35 = 1 << *(_BYTE *)(v9 + 32);
              if (v35 >= 64)
                bzero(v40, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v40 = -1 << v35;
              v3 = v37;
              *(_QWORD *)(v9 + 16) = 0;
              break;
            }
            v23 = v40[v24];
            if (!v23)
            {
              while (1)
              {
                v12 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_44;
                if (v12 >= v39)
                  goto LABEL_35;
                v23 = v40[v12];
                ++v24;
                if (v23)
                  goto LABEL_25;
              }
            }
            v12 = v24;
          }
        }
LABEL_25:
        v16 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v12 << 6);
      }
      v25 = *(unsigned __int8 *)(*(_QWORD *)(v9 + 48) + v21);
      v26 = *(_QWORD *)(v6 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + v41))(v8, *(_QWORD *)(v9 + 56) + v26 * v21, v42);
      Hasher.init(_seed:)(v43, *(_QWORD *)(v11 + 40));
      Hasher._combine(_:)(v25);
      v27 = Hasher._finalize()();
      v28 = -1 << *(_BYTE *)(v11 + 32);
      v29 = v27 & ~v28;
      v30 = v29 >> 6;
      if (((-1 << v29) & ~*(_QWORD *)(v17 + 8 * (v29 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v17 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v31 = 0;
        v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v33 = v30 == v32;
          if (v30 == v32)
            v30 = 0;
          v31 |= v33;
          v34 = *(_QWORD *)(v17 + 8 * v30);
        }
        while (v34 == -1);
        v19 = __clz(__rbit64(~v34)) + (v30 << 6);
      }
      *(_QWORD *)(v17 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      *(_BYTE *)(*(_QWORD *)(v11 + 48) + v19) = v25;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 56) + v26 * v19, v8, v42);
      ++*(_QWORD *)(v11 + 16);
    }
  }
  swift_release(v9);
LABEL_42:
  *v3 = v11;
}

void sub_100816DE8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __n128 v18;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  void *v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  int64_t v49;
  _QWORD *v50;
  uint64_t i;
  int v52;
  __n128 v53;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1013F4FE0);
  v52 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_43;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v50 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v48 = v2;
  v49 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  v18 = swift_retain(v10);
  v19 = 0;
  for (i = v10; ; v10 = i)
  {
    if (v16)
    {
      v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v23 = v22 | (v19 << 6);
      goto LABEL_24;
    }
    v24 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v24 >= v49)
      break;
    v25 = v50;
    v26 = v50[v24];
    ++v19;
    if (!v26)
    {
      v19 = v24 + 1;
      if (v24 + 1 >= v49)
        goto LABEL_36;
      v26 = v50[v19];
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v49)
        {
LABEL_36:
          swift_release(v10);
          v3 = v48;
          if ((v52 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = v50[v27];
        if (!v26)
        {
          while (1)
          {
            v19 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v19 >= v49)
              goto LABEL_36;
            v26 = v50[v19];
            ++v27;
            if (v26)
              goto LABEL_23;
          }
        }
        v19 = v27;
      }
    }
LABEL_23:
    v16 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v19 << 6);
LABEL_24:
    v28 = *(_QWORD *)(v7 + 72);
    v29 = *(_QWORD *)(v10 + 48) + v28 * v23;
    if ((v52 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v7 + 32))(v9, v29, v6, v18);
      v30 = *(_QWORD *)(v10 + 56) + 24 * v23;
      v53 = *(__n128 *)v30;
      v31 = *(id *)(v30 + 16);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v7 + 16))(v9, v29, v6, v18);
      v32 = *(_QWORD *)(v10 + 56) + 24 * v23;
      v53 = *(__n128 *)v32;
      v33 = *(void **)(v32 + 16);
      v34 = (id)v53.n128_u64[0];
      v35 = (id)v53.n128_u64[1];
      v31 = v33;
    }
    v36 = *(_QWORD *)(v12 + 40);
    v37 = sub_1005034A0((unint64_t *)&qword_1013DE630, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v38 = dispatch thunk of Hashable._rawHashValue(seed:)(v36, v6, v37);
    v39 = -1 << *(_BYTE *)(v12 + 32);
    v40 = v38 & ~v39;
    v41 = v40 >> 6;
    if (((-1 << v40) & ~*(_QWORD *)(v17 + 8 * (v40 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v40) & ~*(_QWORD *)(v17 + 8 * (v40 >> 6)))) | v40 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v42 = 0;
      v43 = (unint64_t)(63 - v39) >> 6;
      do
      {
        if (++v41 == v43 && (v42 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v44 = v41 == v43;
        if (v41 == v43)
          v41 = 0;
        v42 |= v44;
        v45 = *(_QWORD *)(v17 + 8 * v41);
      }
      while (v45 == -1);
      v20 = __clz(__rbit64(~v45)) + (v41 << 6);
    }
    *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(_QWORD *)(v12 + 48) + v28 * v20, v9, v6);
    v21 = *(_QWORD *)(v12 + 56) + 24 * v20;
    v18 = v53;
    *(__n128 *)v21 = v53;
    *(_QWORD *)(v21 + 16) = v31;
    ++*(_QWORD *)(v12 + 16);
  }
  swift_release(v10);
  v3 = v48;
  v25 = v50;
  if ((v52 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v46 = 1 << *(_BYTE *)(v10 + 32);
  if (v46 >= 64)
    bzero(v25, ((unint64_t)(v46 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v46;
  *(_QWORD *)(v10 + 16) = 0;
LABEL_43:
  swift_release(v10);
  *v3 = v12;
}

void sub_1008171C4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  char v39;
  _QWORD v40[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1013F4E98);
  v39 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v38 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v36 = v3;
  v37 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain(v5);
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_34;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v22 >= v37)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v38 + 8 * v22);
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v37)
        goto LABEL_36;
      v24 = *(_QWORD *)(v38 + 8 * v13);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_36:
          swift_release(v5);
          v3 = v36;
          if ((v39 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v13 >= v37)
              goto LABEL_36;
            v24 = *(_QWORD *)(v38 + 8 * v13);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v13 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      v34 = v33;
    }
    Hasher.init(_seed:)(v40, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v40, v32, v31);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v36;
  v23 = (_QWORD *)(v5 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

void sub_1008174D0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __n128 v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  int v41;
  _OWORD v42[2];

  v3 = v2;
  v6 = type metadata accessor for CodingUserInfoKey(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_1004B804C(&qword_1013F4E88);
  v41 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_43;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v40 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v38 = v3;
  v39 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  v18 = swift_retain(v10);
  v19 = 0;
  while (1)
  {
    if (v16)
    {
      v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v22 = v21 | (v19 << 6);
      goto LABEL_24;
    }
    v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v23 >= v39)
      break;
    v24 = v40;
    v25 = v40[v23];
    ++v19;
    if (!v25)
    {
      v19 = v23 + 1;
      if (v23 + 1 >= v39)
        goto LABEL_36;
      v25 = v40[v19];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v39)
        {
LABEL_36:
          swift_release(v10);
          v3 = v38;
          if ((v41 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v40[v26];
        if (!v25)
        {
          while (1)
          {
            v19 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v19 >= v39)
              goto LABEL_36;
            v25 = v40[v19];
            ++v26;
            if (v25)
              goto LABEL_23;
          }
        }
        v19 = v26;
      }
    }
LABEL_23:
    v16 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_24:
    v27 = *(_QWORD *)(v7 + 72);
    v28 = *(_QWORD *)(v10 + 48) + v27 * v22;
    if ((v41 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v7 + 32))(v9, v28, v6, v18);
      sub_10050CB14((_OWORD *)(*(_QWORD *)(v10 + 56) + 32 * v22), v42);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v7 + 16))(v9, v28, v6, v18);
      sub_1004CB6E8(*(_QWORD *)(v10 + 56) + 32 * v22, (uint64_t)v42);
    }
    v29 = dispatch thunk of Hashable._rawHashValue(seed:)(*(_QWORD *)(v12 + 40), v6, &protocol witness table for CodingUserInfoKey);
    v30 = -1 << *(_BYTE *)(v12 + 32);
    v31 = v29 & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)(v17 + 8 * (v31 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v17 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v35 = v32 == v34;
        if (v32 == v34)
          v32 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v17 + 8 * v32);
      }
      while (v36 == -1);
      v20 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(_QWORD *)(v12 + 48) + v27 * v20, v9, v6);
    sub_10050CB14(v42, (_OWORD *)(*(_QWORD *)(v12 + 56) + 32 * v20));
    ++*(_QWORD *)(v12 + 16);
  }
  swift_release(v10);
  v3 = v38;
  v24 = v40;
  if ((v41 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v37 = 1 << *(_BYTE *)(v10 + 32);
  if (v37 >= 64)
    bzero(v24, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v37;
  *(_QWORD *)(v10 + 16) = 0;
LABEL_43:
  swift_release(v10);
  *v3 = v12;
}

void sub_100817854(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __n128 v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  _QWORD *v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v46[4];
  int v47;
  uint64_t *v48;
  int64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;

  v5 = type metadata accessor for URL(0);
  v55 = *(_QWORD *)(v5 - 8);
  v56 = v5;
  __chkstk_darwin(v5);
  v54 = &v46[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for UUID(0);
  v53 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = &v46[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v48 = v2;
  v10 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1013F4E10);
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
  {
    swift_release(v10);
    v43 = v48;
LABEL_44:
    *v43 = v12;
    return;
  }
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v50 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v49 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  v52 = v10;
  v18 = swift_retain(v10);
  v19 = 0;
  v47 = a2;
  v20 = 16;
  if ((a2 & 1) != 0)
    v20 = 32;
  v51 = v20;
  v21 = v20;
  while (1)
  {
    if (v16)
    {
      v23 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v24 = v23 | (v19 << 6);
      goto LABEL_26;
    }
    v25 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    if (v25 >= v49)
    {
      v44 = v52;
      swift_release(v52);
      v43 = v48;
      v26 = v50;
      if ((v47 & 1) != 0)
      {
LABEL_39:
        v45 = 1 << *(_BYTE *)(v44 + 32);
        if (v45 >= 64)
          bzero(v26, ((unint64_t)(v45 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
        else
          *v26 = -1 << v45;
        *(_QWORD *)(v44 + 16) = 0;
      }
LABEL_43:
      swift_release(v44);
      goto LABEL_44;
    }
    v26 = v50;
    v27 = v50[v25];
    ++v19;
    if (!v27)
    {
      v19 = v25 + 1;
      if (v25 + 1 >= v49)
        goto LABEL_36;
      v27 = v50[v19];
      if (!v27)
        break;
    }
LABEL_25:
    v16 = (v27 - 1) & v27;
    v24 = __clz(__rbit64(v27)) + (v19 << 6);
LABEL_26:
    v29 = v52;
    v30 = *(_QWORD *)(v53 + 72);
    (*(void (**)(_BYTE *, unint64_t, uint64_t, __n128))(v53 + v21))(v9, *(_QWORD *)(v52 + 48) + v30 * v24, v7, v18);
    v31 = *(_QWORD *)(v29 + 56);
    v32 = *(_QWORD *)(v55 + 72);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v55 + v21))(v54, v31 + v32 * v24, v56);
    v33 = *(_QWORD *)(v12 + 40);
    v34 = sub_1005034A0((unint64_t *)&qword_1013DE630, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v35 = dispatch thunk of Hashable._rawHashValue(seed:)(v33, v7, v34);
    v36 = -1 << *(_BYTE *)(v12 + 32);
    v37 = v35 & ~v36;
    v38 = v37 >> 6;
    if (((-1 << v37) & ~*(_QWORD *)(v17 + 8 * (v37 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v37) & ~*(_QWORD *)(v17 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v39 = 0;
      v40 = (unint64_t)(63 - v36) >> 6;
      do
      {
        if (++v38 == v40 && (v39 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v41 = v38 == v40;
        if (v38 == v40)
          v38 = 0;
        v39 |= v41;
        v42 = *(_QWORD *)(v17 + 8 * v38);
      }
      while (v42 == -1);
      v22 = __clz(__rbit64(~v42)) + (v38 << 6);
    }
    *(_QWORD *)(v17 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    (*(void (**)(unint64_t, _BYTE *, uint64_t))(v53 + 32))(*(_QWORD *)(v12 + 48) + v30 * v22, v9, v7);
    (*(void (**)(unint64_t, _BYTE *, uint64_t))(v55 + 32))(*(_QWORD *)(v12 + 56) + v32 * v22, v54, v56);
    ++*(_QWORD *)(v12 + 16);
  }
  v28 = v25 + 2;
  if (v28 >= v49)
  {
LABEL_36:
    v44 = v52;
    swift_release(v52);
    v43 = v48;
    if ((v47 & 1) != 0)
      goto LABEL_39;
    goto LABEL_43;
  }
  v27 = v50[v28];
  if (v27)
  {
    v19 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v19 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v19 >= v49)
      goto LABEL_36;
    v27 = v50[v19];
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_46:
  __break(1u);
}

void sub_100817C58(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  int EnumCaseMultiPayload;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t);
  char *v57;
  uint64_t v58;
  Swift::Int v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char v63;
  unint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  char *v70;
  int64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  int v82;
  int64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD v88[10];

  v3 = v2;
  v6 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v6);
  v78 = (uint64_t)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = type metadata accessor for UUID(0);
  v76 = *(_QWORD *)(v80 - 8);
  __chkstk_darwin(v80);
  v75 = (char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CRLBoardLibraryViewModel.Folder(0);
  __chkstk_darwin(v9);
  v74 = (uint64_t)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v68 - v12;
  v14 = type metadata accessor for CRLBoardPreviewImageCache.Item(0);
  v77 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v81 = (char *)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v87 = (uint64_t)&v68 - v17;
  v18 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1013F4E18);
  v82 = a2;
  v19 = static _DictionaryStorage.resize(original:capacity:move:)(v18, a1, a2);
  v20 = v19;
  if (*(_QWORD *)(v18 + 16))
  {
    v69 = v2;
    v21 = 1 << *(_BYTE *)(v18 + 32);
    v22 = *(_QWORD *)(v18 + 64);
    v72 = (_QWORD *)(v18 + 64);
    if (v21 < 64)
      v23 = ~(-1 << v21);
    else
      v23 = -1;
    v24 = v23 & v22;
    v71 = (unint64_t)(v21 + 63) >> 6;
    v25 = v19 + 64;
    swift_retain(v18);
    v26 = 0;
    v79 = v18;
    v73 = v14;
    v27 = v77;
    v70 = v13;
    while (1)
    {
      if (v24)
      {
        v86 = (v24 - 1) & v24;
        v30 = __clz(__rbit64(v24)) | (v26 << 6);
        v31 = v87;
      }
      else
      {
        v32 = v26 + 1;
        v31 = v87;
        if (__OFADD__(v26, 1))
          goto LABEL_47;
        if (v32 >= v71)
        {
LABEL_41:
          swift_release(v18);
          v3 = v69;
          if ((v82 & 1) != 0)
          {
            v67 = 1 << *(_BYTE *)(v18 + 32);
            if (v67 >= 64)
              bzero(v72, ((unint64_t)(v67 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
            else
              *v72 = -1 << v67;
            *(_QWORD *)(v18 + 16) = 0;
          }
          break;
        }
        v33 = v72[v32];
        ++v26;
        if (!v33)
        {
          v26 = v32 + 1;
          if (v32 + 1 >= v71)
            goto LABEL_41;
          v33 = v72[v26];
          if (!v33)
          {
            v34 = v32 + 2;
            if (v34 >= v71)
              goto LABEL_41;
            v33 = v72[v34];
            if (!v33)
            {
              while (1)
              {
                v26 = v34 + 1;
                if (__OFADD__(v34, 1))
                  goto LABEL_48;
                if (v26 >= v71)
                  goto LABEL_41;
                v33 = v72[v26];
                ++v34;
                if (v33)
                  goto LABEL_23;
              }
            }
            v26 = v34;
          }
        }
LABEL_23:
        v86 = (v33 - 1) & v33;
        v30 = __clz(__rbit64(v33)) + (v26 << 6);
      }
      v35 = *(_QWORD *)(v18 + 48) + *(_QWORD *)(v27 + 72) * v30;
      v85 = *(_QWORD *)(v27 + 72);
      if ((v82 & 1) != 0)
      {
        sub_1004B84E0(v35, v31, type metadata accessor for CRLBoardPreviewImageCache.Item);
        v84 = *(_QWORD *)(*(_QWORD *)(v18 + 56) + 8 * v30);
      }
      else
      {
        sub_1004B8460(v35, v31, type metadata accessor for CRLBoardPreviewImageCache.Item);
        v84 = *(_QWORD *)(*(_QWORD *)(v18 + 56) + 8 * v30);
        swift_bridgeObjectRetain(v84);
      }
      v36 = (uint64_t)v81;
      Hasher.init(_seed:)(v88, *(_QWORD *)(v20 + 40));
      sub_1004B8460(v31, v36, type metadata accessor for CRLBoardPreviewImageCache.Item);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v36, v14);
      if (!EnumCaseMultiPayload)
      {
        sub_1004B84E0(v36, (uint64_t)v13, type metadata accessor for CRLBoardLibraryViewModel.Folder);
        v44 = v74;
        sub_1004B8460((uint64_t)v13, v74, type metadata accessor for CRLBoardLibraryViewModel.Folder);
        v45 = sub_1004B804C(&qword_1013E1790);
        v46 = (char *)&loc_100818100
            + *((int *)qword_100818438
              + (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 48))(v44, 5, v45));
        __asm { BR              X9 }
      }
      v83 = v26;
      if (EnumCaseMultiPayload == 1)
      {
        v38 = v36;
        v39 = v78;
        sub_1004B84E0(v38, v78, type metadata accessor for CRLBoardIdentifier);
        v40 = sub_1005034A0((unint64_t *)&qword_1013DE630, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        dispatch thunk of Hashable.hash(into:)(v88, v80, v40);
        v41 = (uint64_t *)(v39 + *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20));
        v42 = *v41;
        v43 = v41[1];
        swift_bridgeObjectRetain(v43);
        String.hash(into:)(v88, v42, v43);
        swift_bridgeObjectRelease(v43);
      }
      else
      {
        v47 = v36 + *(int *)(sub_1004B804C((uint64_t *)&unk_1013DE640) + 48);
        v48 = v36;
        v39 = v78;
        sub_1004B84E0(v48, v78, type metadata accessor for CRLBoardIdentifier);
        v49 = v76;
        v50 = v75;
        v51 = v80;
        (*(void (**)(char *, uint64_t, uint64_t))(v76 + 32))(v75, v47, v80);
        v52 = sub_1005034A0((unint64_t *)&qword_1013DE630, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        dispatch thunk of Hashable.hash(into:)(v88, v51, v52);
        v53 = (uint64_t *)(v39 + *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20));
        v54 = *v53;
        v55 = v53[1];
        swift_bridgeObjectRetain(v55);
        String.hash(into:)(v88, v54, v55);
        swift_bridgeObjectRelease(v55);
        dispatch thunk of Hashable.hash(into:)(v88, v51, v52);
        v56 = *(void (**)(char *, uint64_t))(v49 + 8);
        v14 = v73;
        v57 = v50;
        v13 = v70;
        v58 = v51;
        v27 = v77;
        v56(v57, v58);
      }
      sub_1004B84A4(v39, type metadata accessor for CRLBoardIdentifier);
      v18 = v79;
      v26 = v83;
      v59 = Hasher._finalize()();
      v60 = -1 << *(_BYTE *)(v20 + 32);
      v61 = v59 & ~v60;
      v62 = v61 >> 6;
      if (((-1 << v61) & ~*(_QWORD *)(v25 + 8 * (v61 >> 6))) != 0)
      {
        v28 = __clz(__rbit64((-1 << v61) & ~*(_QWORD *)(v25 + 8 * (v61 >> 6)))) | v61 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_9;
      }
      v63 = 0;
      v64 = (unint64_t)(63 - v60) >> 6;
      do
      {
        if (++v62 == v64 && (v63 & 1) != 0)
        {
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
          JUMPOUT(0x100818438);
        }
        v65 = v62 == v64;
        if (v62 == v64)
          v62 = 0;
        v63 |= v65;
        v66 = *(_QWORD *)(v25 + 8 * v62);
      }
      while (v66 == -1);
      v28 = __clz(__rbit64(~v66)) + (v62 << 6);
LABEL_9:
      v29 = v85;
      *(_QWORD *)(v25 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
      sub_1004B84E0(v87, *(_QWORD *)(v20 + 48) + v29 * v28, type metadata accessor for CRLBoardPreviewImageCache.Item);
      *(_QWORD *)(*(_QWORD *)(v20 + 56) + 8 * v28) = v84;
      ++*(_QWORD *)(v20 + 16);
      v24 = v86;
    }
  }
  swift_release(v18);
  *v3 = v20;
}

void sub_100818450(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  void *v30;
  char v31;
  id v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1013F4F68);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v34 = v3;
  v35 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v22 >= v12)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v35 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v12)
        goto LABEL_36;
      v24 = *(_QWORD *)(v35 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v12)
        {
LABEL_36:
          swift_release(v5);
          v3 = v34;
          if ((a2 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v35 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v12)
              goto LABEL_36;
            v24 = *(_QWORD *)(v35 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v21);
    v31 = *(_BYTE *)(*(_QWORD *)(v5 + 56) + v21);
    if ((a2 & 1) == 0)
      v32 = v30;
    v15 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = v15 & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v18 == v27;
        if (v18 == v27)
          v18 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v29 == -1);
      v19 = __clz(__rbit64(~v29)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v19) = v30;
    *(_BYTE *)(*(_QWORD *)(v8 + 56) + v19) = v31;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v34;
  v23 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v23, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

void sub_100818714(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1013F4EC8);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 0;
    v10 = (uint64_t *)(v5 + 64);
    v11 = 1 << *(_BYTE *)(v5 + 32);
    v32 = -1 << v11;
    v33 = v11;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v5 + 64);
    v34 = (unint64_t)(v11 + 63) >> 6;
    v14 = v7 + 64;
    while (1)
    {
      if (v13)
      {
        v20 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v21 = v20 | (v9 << 6);
      }
      else
      {
        v22 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return;
        }
        if (v22 >= v34)
          goto LABEL_36;
        v23 = v10[v22];
        ++v9;
        if (!v23)
        {
          v9 = v22 + 1;
          if (v22 + 1 >= v34)
            goto LABEL_36;
          v23 = v10[v9];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v34)
            {
LABEL_36:
              if ((a2 & 1) != 0)
              {
                if (v33 >= 64)
                  bzero((void *)(v5 + 64), 8 * v34);
                else
                  *v10 = v32;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v23 = v10[v24];
            if (!v23)
            {
              while (1)
              {
                v9 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_44;
                if (v9 >= v34)
                  goto LABEL_36;
                v23 = v10[v9];
                ++v24;
                if (v23)
                  goto LABEL_33;
              }
            }
            v9 = v24;
          }
        }
LABEL_33:
        v13 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v9 << 6);
      }
      v29 = *(_QWORD *)(v5 + 56);
      v30 = *(unsigned __int16 *)(*(_QWORD *)(v5 + 48) + 2 * v21);
      v31 = *(_QWORD *)(v29 + 8 * v21);
      if ((a2 & 1) == 0)
        swift_retain(*(_QWORD *)(v29 + 8 * v21));
      v15 = static Hasher._hash(seed:bytes:count:)(*(_QWORD *)(v8 + 40), v30, 2);
      v16 = -1 << *(_BYTE *)(v8 + 32);
      v17 = v15 & ~v16;
      v18 = v17 >> 6;
      if (((-1 << v17) & ~*(_QWORD *)(v14 + 8 * (v17 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v14 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v27 = v18 == v26;
          if (v18 == v26)
            v18 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v14 + 8 * v18);
        }
        while (v28 == -1);
        v19 = __clz(__rbit64(~v28)) + (v18 << 6);
      }
      *(_QWORD *)(v14 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      *(_WORD *)(*(_QWORD *)(v8 + 48) + 2 * v19) = v30;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v19) = v31;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release(v5);
  *v3 = v8;
}

void sub_1008189C4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  id v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  _QWORD *v26;
  unint64_t v27;
  int64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  Swift::UInt v34;
  void *v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v42;
  __int128 v43;
  __int128 v44;
  _QWORD v45[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1013F51C8);
  v42 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v41 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v39 = v3;
  v40 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain(v5);
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v23 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v24 = v23 | (v13 << 6);
      goto LABEL_34;
    }
    v25 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v25 >= v40)
      break;
    v26 = (_QWORD *)(v5 + 64);
    v27 = *(_QWORD *)(v41 + 8 * v25);
    ++v13;
    if (!v27)
    {
      v13 = v25 + 1;
      if (v25 + 1 >= v40)
        goto LABEL_36;
      v27 = *(_QWORD *)(v41 + 8 * v13);
      if (!v27)
      {
        v28 = v25 + 2;
        if (v28 >= v40)
        {
LABEL_36:
          swift_release(v5);
          v3 = v39;
          if ((v42 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v27 = *(_QWORD *)(v41 + 8 * v28);
        if (!v27)
        {
          while (1)
          {
            v13 = v28 + 1;
            if (__OFADD__(v28, 1))
              goto LABEL_45;
            if (v13 >= v40)
              goto LABEL_36;
            v27 = *(_QWORD *)(v41 + 8 * v13);
            ++v28;
            if (v27)
              goto LABEL_33;
          }
        }
        v13 = v28;
      }
    }
LABEL_33:
    v11 = (v27 - 1) & v27;
    v24 = __clz(__rbit64(v27)) + (v13 << 6);
LABEL_34:
    v33 = *(_QWORD *)(v5 + 48) + 40 * v24;
    v34 = *(_QWORD *)(v33 + 16);
    v43 = *(_OWORD *)v33;
    v44 = *(_OWORD *)(v33 + 24);
    v35 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v24);
    if ((v42 & 1) == 0)
    {
      v36 = (id)v44;
      v37 = v35;
    }
    Hasher.init(_seed:)(v45, *(_QWORD *)(v8 + 40));
    Hasher._combine(_:)(v43);
    Hasher._combine(_:)(*((Swift::UInt *)&v43 + 1));
    Hasher._combine(_:)(v34);
    v14 = (id)v44;
    NSObject.hash(into:)(v45);

    Selector.hash(into:)(v45, *((_QWORD *)&v44 + 1));
    v15 = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = v15 & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v12 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v12 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      v21 = v43;
      v20 = v44;
    }
    else
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v16) >> 6;
      v21 = v43;
      v20 = v44;
      do
      {
        if (++v18 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v31 = v18 == v30;
        if (v18 == v30)
          v18 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v12 + 8 * v18);
      }
      while (v32 == -1);
      v19 = __clz(__rbit64(~v32)) + (v18 << 6);
    }
    *(_QWORD *)(v12 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v22 = *(_QWORD *)(v8 + 48) + 40 * v19;
    *(_OWORD *)v22 = v21;
    *(_QWORD *)(v22 + 16) = v34;
    *(_OWORD *)(v22 + 24) = v20;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v19) = v35;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v39;
  v26 = (_QWORD *)(v5 + 64);
  if ((v42 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v38 = 1 << *(_BYTE *)(v5 + 32);
  if (v38 >= 64)
    bzero(v26, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v26 = -1 << v38;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

void sub_100818D3C(uint64_t a1, uint64_t a2)
{
  sub_1008190E0(a1, a2, &qword_1013F51B8);
}

void sub_100818D48(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __n128 v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int64_t v43;
  _QWORD *v44;
  uint64_t i;
  int v46;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1013F51C0);
  v46 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_43;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v44 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v42 = v2;
  v43 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  v18 = swift_retain(v10);
  v19 = 0;
  for (i = v10; ; v10 = i)
  {
    if (v16)
    {
      v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v22 = v21 | (v19 << 6);
      goto LABEL_24;
    }
    v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v23 >= v43)
      break;
    v24 = v44;
    v25 = v44[v23];
    ++v19;
    if (!v25)
    {
      v19 = v23 + 1;
      if (v23 + 1 >= v43)
        goto LABEL_36;
      v25 = v44[v19];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v43)
        {
LABEL_36:
          swift_release(v10);
          v3 = v42;
          if ((v46 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v44[v26];
        if (!v25)
        {
          while (1)
          {
            v19 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v19 >= v43)
              goto LABEL_36;
            v25 = v44[v19];
            ++v26;
            if (v25)
              goto LABEL_23;
          }
        }
        v19 = v26;
      }
    }
LABEL_23:
    v16 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_24:
    v27 = *(_QWORD *)(v7 + 72);
    v28 = *(_QWORD *)(v10 + 48) + v27 * v22;
    if ((v46 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v7 + 32))(v9, v28, v6, v18);
      v29 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v22);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v7 + 16))(v9, v28, v6, v18);
      v29 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v22);
      swift_bridgeObjectRetain(v29);
    }
    v30 = *(_QWORD *)(v12 + 40);
    v31 = sub_1005034A0((unint64_t *)&qword_1013DE630, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v32 = dispatch thunk of Hashable._rawHashValue(seed:)(v30, v6, v31);
    v33 = -1 << *(_BYTE *)(v12 + 32);
    v34 = v32 & ~v33;
    v35 = v34 >> 6;
    if (((-1 << v34) & ~*(_QWORD *)(v17 + 8 * (v34 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v34) & ~*(_QWORD *)(v17 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v36 = 0;
      v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v38 = v35 == v37;
        if (v35 == v37)
          v35 = 0;
        v36 |= v38;
        v39 = *(_QWORD *)(v17 + 8 * v35);
      }
      while (v39 == -1);
      v20 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(_QWORD *)(v12 + 48) + v27 * v20, v9, v6);
    *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v20) = v29;
    ++*(_QWORD *)(v12 + 16);
  }
  swift_release(v10);
  v3 = v42;
  v24 = v44;
  if ((v46 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v40 = 1 << *(_BYTE *)(v10 + 32);
  if (v40 >= 64)
    bzero(v24, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v40;
  *(_QWORD *)(v10 + 16) = 0;
LABEL_43:
  swift_release(v10);
  *v3 = v12;
}

void sub_1008190E0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  Swift::Int v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  int64_t v45;
  _QWORD *v46;
  uint64_t v47;
  int v48;
  _QWORD v49[9];

  v5 = v3;
  v8 = type metadata accessor for CRLBoardIdentifier(0);
  v47 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v5;
  if (*(_QWORD *)(*v5 + 24) > a1)
    a1 = *(_QWORD *)(*v5 + 24);
  sub_1004B804C(a3);
  v48 = a2;
  v12 = static _DictionaryStorage.resize(original:capacity:move:)(v11, a1, a2);
  v13 = v12;
  if (!*(_QWORD *)(v11 + 16))
    goto LABEL_43;
  v14 = 1 << *(_BYTE *)(v11 + 32);
  v15 = *(_QWORD *)(v11 + 64);
  v46 = (_QWORD *)(v11 + 64);
  if (v14 < 64)
    v16 = ~(-1 << v14);
  else
    v16 = -1;
  v17 = v16 & v15;
  v44 = v5;
  v45 = (unint64_t)(v14 + 63) >> 6;
  v18 = v12 + 64;
  swift_retain(v11);
  v19 = 0;
  while (1)
  {
    if (v17)
    {
      v21 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v22 = v21 | (v19 << 6);
      goto LABEL_24;
    }
    v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v23 >= v45)
      break;
    v24 = v46;
    v25 = v46[v23];
    ++v19;
    if (!v25)
    {
      v19 = v23 + 1;
      if (v23 + 1 >= v45)
        goto LABEL_36;
      v25 = v46[v19];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v45)
        {
LABEL_36:
          swift_release(v11);
          v5 = v44;
          if ((v48 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v46[v26];
        if (!v25)
        {
          while (1)
          {
            v19 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v19 >= v45)
              goto LABEL_36;
            v25 = v46[v19];
            ++v26;
            if (v25)
              goto LABEL_23;
          }
        }
        v19 = v26;
      }
    }
LABEL_23:
    v17 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_24:
    v27 = *(_QWORD *)(v47 + 72);
    v28 = *(_QWORD *)(v11 + 48) + v27 * v22;
    if ((v48 & 1) != 0)
    {
      sub_1004B84E0(v28, (uint64_t)v10, type metadata accessor for CRLBoardIdentifier);
      v29 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v22);
    }
    else
    {
      sub_1004B8460(v28, (uint64_t)v10, type metadata accessor for CRLBoardIdentifier);
      v29 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v22);
      swift_bridgeObjectRetain(v29);
    }
    Hasher.init(_seed:)(v49, *(_QWORD *)(v13 + 40));
    v30 = type metadata accessor for UUID(0);
    v31 = sub_1005034A0((unint64_t *)&qword_1013DE630, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v49, v30, v31);
    v32 = &v10[*(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20)];
    v33 = *(_QWORD *)v32;
    v34 = *((_QWORD *)v32 + 1);
    swift_bridgeObjectRetain(v34);
    String.hash(into:)(v49, v33, v34);
    swift_bridgeObjectRelease(v34);
    v35 = Hasher._finalize()();
    v36 = -1 << *(_BYTE *)(v13 + 32);
    v37 = v35 & ~v36;
    v38 = v37 >> 6;
    if (((-1 << v37) & ~*(_QWORD *)(v18 + 8 * (v37 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v37) & ~*(_QWORD *)(v18 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v39 = 0;
      v40 = (unint64_t)(63 - v36) >> 6;
      do
      {
        if (++v38 == v40 && (v39 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v41 = v38 == v40;
        if (v38 == v40)
          v38 = 0;
        v39 |= v41;
        v42 = *(_QWORD *)(v18 + 8 * v38);
      }
      while (v42 == -1);
      v20 = __clz(__rbit64(~v42)) + (v38 << 6);
    }
    *(_QWORD *)(v18 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    sub_1004B84E0((uint64_t)v10, *(_QWORD *)(v13 + 48) + v27 * v20, type metadata accessor for CRLBoardIdentifier);
    *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v20) = v29;
    ++*(_QWORD *)(v13 + 16);
  }
  swift_release(v11);
  v5 = v44;
  v24 = v46;
  if ((v48 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v43 = 1 << *(_BYTE *)(v11 + 32);
  if (v43 >= 64)
    bzero(v24, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v43;
  *(_QWORD *)(v11 + 16) = 0;
LABEL_43:
  swift_release(v11);
  *v5 = v13;
}

void sub_1008194D4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1013F5070);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_31;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  swift_retain(v5);
  if (v10)
  {
    v12 = __clz(__rbit64(v10));
    goto LABEL_21;
  }
  if (v11 <= 1)
  {
    swift_release(v5);
    v13 = (_QWORD *)(v5 + 64);
    if ((a2 & 1) == 0)
      goto LABEL_31;
    goto LABEL_27;
  }
  v13 = (_QWORD *)(v5 + 64);
  v14 = *(_QWORD *)(v5 + 72);
  v15 = 1;
  if (v14)
    goto LABEL_20;
  v15 = 2;
  if (v11 <= 2)
    goto LABEL_24;
  v14 = *(_QWORD *)(v5 + 80);
  if (v14)
  {
LABEL_20:
    v12 = __clz(__rbit64(v14)) + (v15 << 6);
LABEL_21:
    v17 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v12);
    if ((a2 & 1) == 0)
    {
      v19 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v12);
      sub_1004BE310(v19, *((unint64_t *)&v19 + 1));
    }
    Hasher.init(_seed:)(v20, *(_QWORD *)(v7 + 40));
    __asm { BR              X8 }
  }
  v16 = 3;
  if (v11 > 3)
  {
    v14 = *(_QWORD *)(v5 + 88);
    if (v14)
    {
      v15 = 3;
      goto LABEL_20;
    }
    while (1)
    {
      v15 = v16 + 1;
      if (__OFADD__(v16, 1))
      {
        __break(1u);
        JUMPOUT(0x10081988CLL);
      }
      if (v15 >= v11)
        break;
      v14 = *(_QWORD *)(v5 + 64 + 8 * v15);
      ++v16;
      if (v14)
        goto LABEL_20;
    }
  }
LABEL_24:
  swift_release(v5);
  if ((a2 & 1) == 0)
    goto LABEL_31;
LABEL_27:
  v18 = 1 << *(_BYTE *)(v5 + 32);
  if (v18 >= 64)
    bzero(v13, ((unint64_t)(v18 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v13 = -1 << v18;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_31:
  swift_release(v5);
  *v3 = v7;
}

void sub_1008198A0(uint64_t a1, uint64_t a2)
{
  sub_100815290(a1, a2, &qword_1013F5068);
}

void sub_1008198AC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t *a4)
{
  uint64_t *v4;
  uint64_t (*v6)(_QWORD);
  uint64_t *v7;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  _QWORD *v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  Swift::Int v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  int64_t v48;
  _QWORD *v49;
  uint64_t (*v50)(_QWORD);
  uint64_t v51;
  int v52;
  _QWORD v53[9];

  v6 = a3;
  v7 = v4;
  v10 = a3(0);
  v51 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v46 - v11;
  v13 = *v7;
  if (*(_QWORD *)(*v7 + 24) > a1)
    a1 = *(_QWORD *)(*v7 + 24);
  sub_1004B804C(a4);
  v52 = a2;
  v14 = static _DictionaryStorage.resize(original:capacity:move:)(v13, a1, a2);
  v15 = v14;
  if (!*(_QWORD *)(v13 + 16))
    goto LABEL_43;
  v16 = 1 << *(_BYTE *)(v13 + 32);
  v17 = *(_QWORD *)(v13 + 64);
  v49 = (_QWORD *)(v13 + 64);
  if (v16 < 64)
    v18 = ~(-1 << v16);
  else
    v18 = -1;
  v19 = v18 & v17;
  v47 = v7;
  v48 = (unint64_t)(v16 + 63) >> 6;
  v20 = v14 + 64;
  swift_retain(v13);
  v21 = 0;
  v50 = v6;
  while (1)
  {
    if (v19)
    {
      v23 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v24 = v23 | (v21 << 6);
      goto LABEL_24;
    }
    v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v25 >= v48)
      break;
    v26 = v49;
    v27 = v49[v25];
    ++v21;
    if (!v27)
    {
      v21 = v25 + 1;
      if (v25 + 1 >= v48)
        goto LABEL_36;
      v27 = v49[v21];
      if (!v27)
      {
        v28 = v25 + 2;
        if (v28 >= v48)
        {
LABEL_36:
          swift_release(v13);
          v7 = v47;
          if ((v52 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v27 = v49[v28];
        if (!v27)
        {
          while (1)
          {
            v21 = v28 + 1;
            if (__OFADD__(v28, 1))
              goto LABEL_45;
            if (v21 >= v48)
              goto LABEL_36;
            v27 = v49[v21];
            ++v28;
            if (v27)
              goto LABEL_23;
          }
        }
        v21 = v28;
      }
    }
LABEL_23:
    v19 = (v27 - 1) & v27;
    v24 = __clz(__rbit64(v27)) + (v21 << 6);
LABEL_24:
    v29 = *(_QWORD *)(v51 + 72);
    v30 = *(_QWORD *)(v13 + 48) + v29 * v24;
    if ((v52 & 1) != 0)
    {
      sub_1004B84E0(v30, (uint64_t)v12, v6);
      v31 = *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v24);
    }
    else
    {
      sub_1004B8460(v30, (uint64_t)v12, v6);
      v31 = *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v24);
      swift_retain(v31);
    }
    Hasher.init(_seed:)(v53, *(_QWORD *)(v15 + 40));
    v32 = type metadata accessor for UUID(0);
    v33 = sub_1005034A0((unint64_t *)&qword_1013DE630, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v53, v32, v33);
    v34 = &v12[*(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20)];
    v35 = *(_QWORD *)v34;
    v36 = *((_QWORD *)v34 + 1);
    swift_bridgeObjectRetain(v36);
    String.hash(into:)(v53, v35, v36);
    swift_bridgeObjectRelease(v36);
    v37 = Hasher._finalize()();
    v38 = -1 << *(_BYTE *)(v15 + 32);
    v39 = v37 & ~v38;
    v40 = v39 >> 6;
    if (((-1 << v39) & ~*(_QWORD *)(v20 + 8 * (v39 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v39) & ~*(_QWORD *)(v20 + 8 * (v39 >> 6)))) | v39 & 0x7FFFFFFFFFFFFFC0;
      v6 = v50;
    }
    else
    {
      v41 = 0;
      v42 = (unint64_t)(63 - v38) >> 6;
      v6 = v50;
      do
      {
        if (++v40 == v42 && (v41 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v43 = v40 == v42;
        if (v40 == v42)
          v40 = 0;
        v41 |= v43;
        v44 = *(_QWORD *)(v20 + 8 * v40);
      }
      while (v44 == -1);
      v22 = __clz(__rbit64(~v44)) + (v40 << 6);
    }
    *(_QWORD *)(v20 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    sub_1004B84E0((uint64_t)v12, *(_QWORD *)(v15 + 48) + v29 * v22, v6);
    *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v22) = v31;
    ++*(_QWORD *)(v15 + 16);
  }
  swift_release(v13);
  v7 = v47;
  v26 = v49;
  if ((v52 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v45 = 1 << *(_BYTE *)(v13 + 32);
  if (v45 >= 64)
    bzero(v26, ((unint64_t)(v45 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v26 = -1 << v45;
  *(_QWORD *)(v13 + 16) = 0;
LABEL_43:
  swift_release(v13);
  *v7 = v15;
}

void sub_100819C94(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  Swift::Int v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  int64_t v51;
  _QWORD *v52;
  uint64_t i;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[9];

  v3 = v2;
  v6 = type metadata accessor for CRLBoardIdentifier(0);
  v54 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v58 = (uint64_t)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1013F4E00);
  v55 = a2;
  v9 = static _DictionaryStorage.resize(original:capacity:move:)(v8, a1, a2);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_41;
  v50 = v2;
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 64);
  v52 = (_QWORD *)(v8 + 64);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v51 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 64;
  swift_retain(v8);
  v16 = 0;
  for (i = v8; ; v8 = i)
  {
    if (v14)
    {
      v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v20 = v19 | (v16 << 6);
      v21 = v58;
      goto LABEL_24;
    }
    v22 = v16 + 1;
    v21 = v58;
    if (__OFADD__(v16, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return;
    }
    if (v22 >= v51)
      goto LABEL_36;
    v23 = v52[v22];
    ++v16;
    if (!v23)
    {
      v16 = v22 + 1;
      if (v22 + 1 >= v51)
        goto LABEL_36;
      v23 = v52[v16];
      if (!v23)
        break;
    }
LABEL_23:
    v14 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v16 << 6);
LABEL_24:
    v25 = *(_QWORD *)(v54 + 72);
    v26 = *(_QWORD *)(v8 + 48) + v25 * v20;
    v27 = 40 * v20;
    if ((v55 & 1) != 0)
    {
      sub_1004B84E0(v26, v21, type metadata accessor for CRLBoardIdentifier);
      v28 = *(_QWORD *)(v8 + 56) + v27;
      v29 = *(_QWORD *)(v28 + 8);
      v57 = *(_QWORD *)v28;
      v30 = *(_QWORD *)(v28 + 16);
      v31 = *(void **)(v28 + 24);
      v56 = *(unsigned __int8 *)(v28 + 32);
    }
    else
    {
      sub_1004B8460(v26, v21, type metadata accessor for CRLBoardIdentifier);
      v32 = *(_QWORD *)(v8 + 56) + v27;
      v33 = *(_QWORD *)v32;
      v29 = *(_QWORD *)(v32 + 8);
      v30 = *(_QWORD *)(v32 + 16);
      v31 = *(void **)(v32 + 24);
      v56 = *(unsigned __int8 *)(v32 + 32);
      v34 = v31;
      v57 = v33;
      swift_retain(v33);
      swift_retain(v29);
      swift_retain(v30);
    }
    Hasher.init(_seed:)(v59, *(_QWORD *)(v10 + 40));
    v35 = type metadata accessor for UUID(0);
    v36 = sub_1005034A0((unint64_t *)&qword_1013DE630, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v59, v35, v36);
    v37 = (uint64_t *)(v21 + *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20));
    v38 = *v37;
    v39 = v37[1];
    swift_bridgeObjectRetain(v39);
    String.hash(into:)(v59, v38, v39);
    swift_bridgeObjectRelease(v39);
    v40 = Hasher._finalize()();
    v41 = -1 << *(_BYTE *)(v10 + 32);
    v42 = v40 & ~v41;
    v43 = v42 >> 6;
    if (((-1 << v42) & ~*(_QWORD *)(v15 + 8 * (v42 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v42) & ~*(_QWORD *)(v15 + 8 * (v42 >> 6)))) | v42 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v44 = 0;
      v45 = (unint64_t)(63 - v41) >> 6;
      do
      {
        if (++v43 == v45 && (v44 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v46 = v43 == v45;
        if (v43 == v45)
          v43 = 0;
        v44 |= v46;
        v47 = *(_QWORD *)(v15 + 8 * v43);
      }
      while (v47 == -1);
      v17 = __clz(__rbit64(~v47)) + (v43 << 6);
    }
    *(_QWORD *)(v15 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    sub_1004B84E0(v58, *(_QWORD *)(v10 + 48) + v25 * v17, type metadata accessor for CRLBoardIdentifier);
    v18 = *(_QWORD *)(v10 + 56) + 40 * v17;
    *(_QWORD *)v18 = v57;
    *(_QWORD *)(v18 + 8) = v29;
    *(_QWORD *)(v18 + 16) = v30;
    *(_QWORD *)(v18 + 24) = v31;
    *(_BYTE *)(v18 + 32) = v56;
    ++*(_QWORD *)(v10 + 16);
  }
  v24 = v22 + 2;
  if (v24 < v51)
  {
    v23 = v52[v24];
    if (!v23)
    {
      while (1)
      {
        v16 = v24 + 1;
        if (__OFADD__(v24, 1))
          goto LABEL_43;
        if (v16 >= v51)
          goto LABEL_36;
        v23 = v52[v16];
        ++v24;
        if (v23)
          goto LABEL_23;
      }
    }
    v16 = v24;
    goto LABEL_23;
  }
LABEL_36:
  swift_release(v8);
  v3 = v50;
  if ((v55 & 1) != 0)
  {
    v48 = 1 << *(_BYTE *)(v8 + 32);
    if (v48 >= 64)
      bzero(v52, ((unint64_t)(v48 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v52 = -1 << v48;
    *(_QWORD *)(v8 + 16) = 0;
  }
LABEL_41:
  swift_release(v8);
  *v3 = v10;
}

void sub_10081A0D0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  Swift::Int v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  int64_t v48;
  _QWORD *v49;
  uint64_t i;
  uint64_t v51;
  int v52;
  _QWORD v53[9];

  v3 = v2;
  v6 = type metadata accessor for CRLBoardIdentifier(0);
  v51 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1013F4E58);
  v52 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_43;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v49 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v47 = v2;
  v48 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  swift_retain(v9);
  v17 = 0;
  for (i = v9; ; v9 = i)
  {
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v21 = v20 | (v17 << 6);
      goto LABEL_24;
    }
    v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v22 >= v48)
      break;
    v23 = v49;
    v24 = v49[v22];
    ++v17;
    if (!v24)
    {
      v17 = v22 + 1;
      if (v22 + 1 >= v48)
        goto LABEL_36;
      v24 = v49[v17];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v48)
        {
LABEL_36:
          swift_release(v9);
          v3 = v47;
          if ((v52 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = v49[v25];
        if (!v24)
        {
          while (1)
          {
            v17 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v17 >= v48)
              goto LABEL_36;
            v24 = v49[v17];
            ++v25;
            if (v24)
              goto LABEL_23;
          }
        }
        v17 = v25;
      }
    }
LABEL_23:
    v15 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_24:
    v26 = *(_QWORD *)(v51 + 72);
    v27 = *(_QWORD *)(v9 + 48) + v26 * v21;
    if ((v52 & 1) != 0)
    {
      sub_1004B84E0(v27, (uint64_t)v8, type metadata accessor for CRLBoardIdentifier);
      v28 = (uint64_t *)(*(_QWORD *)(v9 + 56) + 16 * v21);
      v29 = *v28;
      v30 = v28[1];
    }
    else
    {
      sub_1004B8460(v27, (uint64_t)v8, type metadata accessor for CRLBoardIdentifier);
      v31 = (uint64_t *)(*(_QWORD *)(v9 + 56) + 16 * v21);
      v29 = *v31;
      v30 = v31[1];
      swift_bridgeObjectRetain(v30);
    }
    Hasher.init(_seed:)(v53, *(_QWORD *)(v11 + 40));
    v32 = type metadata accessor for UUID(0);
    v33 = sub_1005034A0((unint64_t *)&qword_1013DE630, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v53, v32, v33);
    v34 = &v8[*(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20)];
    v35 = *(_QWORD *)v34;
    v36 = *((_QWORD *)v34 + 1);
    swift_bridgeObjectRetain(v36);
    String.hash(into:)(v53, v35, v36);
    swift_bridgeObjectRelease(v36);
    v37 = Hasher._finalize()();
    v38 = -1 << *(_BYTE *)(v11 + 32);
    v39 = v37 & ~v38;
    v40 = v39 >> 6;
    if (((-1 << v39) & ~*(_QWORD *)(v16 + 8 * (v39 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v39) & ~*(_QWORD *)(v16 + 8 * (v39 >> 6)))) | v39 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v41 = 0;
      v42 = (unint64_t)(63 - v38) >> 6;
      do
      {
        if (++v40 == v42 && (v41 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v43 = v40 == v42;
        if (v40 == v42)
          v40 = 0;
        v41 |= v43;
        v44 = *(_QWORD *)(v16 + 8 * v40);
      }
      while (v44 == -1);
      v18 = __clz(__rbit64(~v44)) + (v40 << 6);
    }
    *(_QWORD *)(v16 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    sub_1004B84E0((uint64_t)v8, *(_QWORD *)(v11 + 48) + v26 * v18, type metadata accessor for CRLBoardIdentifier);
    v19 = (_QWORD *)(*(_QWORD *)(v11 + 56) + 16 * v18);
    *v19 = v29;
    v19[1] = v30;
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release(v9);
  v3 = v47;
  v23 = v49;
  if ((v52 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v45 = 1 << *(_BYTE *)(v9 + 32);
  if (v45 >= 64)
    bzero(v23, ((unint64_t)(v45 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v45;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_43:
  swift_release(v9);
  *v3 = v11;
}

void sub_10081A4D4(uint64_t a1, uint64_t a2)
{
  sub_10081B6A0(a1, a2, &qword_1013F4E48);
}

void sub_10081A4E0(uint64_t a1, uint64_t a2)
{
  sub_10081A508(a1, a2, type metadata accessor for CRLBoardViewModelMetadata, &qword_1013F4E30);
}

void sub_10081A4F4(uint64_t a1, uint64_t a2)
{
  sub_10081A508(a1, a2, type metadata accessor for CRLBoardEntity, &qword_1013F4E20);
}

void sub_10081A508(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  _QWORD *v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  Swift::Int v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  int64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t (*v55)(_QWORD);
  _QWORD v56[9];

  v6 = v4;
  v55 = a3;
  v9 = a3(0);
  v51 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v54 = (uint64_t)&v47 - v10;
  v11 = type metadata accessor for CRLBoardIdentifier(0);
  v52 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *v6;
  if (*(_QWORD *)(*v6 + 24) > a1)
    a1 = *(_QWORD *)(*v6 + 24);
  sub_1004B804C(a4);
  v53 = a2;
  v15 = static _DictionaryStorage.resize(original:capacity:move:)(v14, a1, a2);
  v16 = v15;
  if (!*(_QWORD *)(v14 + 16))
    goto LABEL_43;
  v17 = 1 << *(_BYTE *)(v14 + 32);
  v18 = *(_QWORD *)(v14 + 64);
  v50 = (_QWORD *)(v14 + 64);
  if (v17 < 64)
    v19 = ~(-1 << v17);
  else
    v19 = -1;
  v20 = v19 & v18;
  v48 = v6;
  v49 = (unint64_t)(v17 + 63) >> 6;
  v21 = v15 + 64;
  swift_retain(v14);
  v22 = 0;
  while (1)
  {
    if (v20)
    {
      v24 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      v25 = v24 | (v22 << 6);
      goto LABEL_24;
    }
    v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v26 >= v49)
      break;
    v27 = v50;
    v28 = v50[v26];
    ++v22;
    if (!v28)
    {
      v22 = v26 + 1;
      if (v26 + 1 >= v49)
        goto LABEL_36;
      v28 = v50[v22];
      if (!v28)
      {
        v29 = v26 + 2;
        if (v29 >= v49)
        {
LABEL_36:
          swift_release(v14);
          v6 = v48;
          if ((v53 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v28 = v50[v29];
        if (!v28)
        {
          while (1)
          {
            v22 = v29 + 1;
            if (__OFADD__(v29, 1))
              goto LABEL_45;
            if (v22 >= v49)
              goto LABEL_36;
            v28 = v50[v22];
            ++v29;
            if (v28)
              goto LABEL_23;
          }
        }
        v22 = v29;
      }
    }
LABEL_23:
    v20 = (v28 - 1) & v28;
    v25 = __clz(__rbit64(v28)) + (v22 << 6);
LABEL_24:
    v30 = *(_QWORD *)(v52 + 72);
    v31 = *(_QWORD *)(v14 + 48) + v30 * v25;
    if ((v53 & 1) != 0)
    {
      sub_1004B84E0(v31, (uint64_t)v13, type metadata accessor for CRLBoardIdentifier);
      v32 = *(_QWORD *)(v51 + 72);
      sub_1004B84E0(*(_QWORD *)(v14 + 56) + v32 * v25, v54, v55);
    }
    else
    {
      sub_1004B8460(v31, (uint64_t)v13, type metadata accessor for CRLBoardIdentifier);
      v32 = *(_QWORD *)(v51 + 72);
      sub_1004B8460(*(_QWORD *)(v14 + 56) + v32 * v25, v54, v55);
    }
    Hasher.init(_seed:)(v56, *(_QWORD *)(v16 + 40));
    v33 = type metadata accessor for UUID(0);
    v34 = sub_1005034A0((unint64_t *)&qword_1013DE630, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v56, v33, v34);
    v35 = &v13[*(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20)];
    v36 = *(_QWORD *)v35;
    v37 = *((_QWORD *)v35 + 1);
    swift_bridgeObjectRetain(v37);
    String.hash(into:)(v56, v36, v37);
    swift_bridgeObjectRelease(v37);
    v38 = Hasher._finalize()();
    v39 = -1 << *(_BYTE *)(v16 + 32);
    v40 = v38 & ~v39;
    v41 = v40 >> 6;
    if (((-1 << v40) & ~*(_QWORD *)(v21 + 8 * (v40 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v40) & ~*(_QWORD *)(v21 + 8 * (v40 >> 6)))) | v40 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v42 = 0;
      v43 = (unint64_t)(63 - v39) >> 6;
      do
      {
        if (++v41 == v43 && (v42 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v44 = v41 == v43;
        if (v41 == v43)
          v41 = 0;
        v42 |= v44;
        v45 = *(_QWORD *)(v21 + 8 * v41);
      }
      while (v45 == -1);
      v23 = __clz(__rbit64(~v45)) + (v41 << 6);
    }
    *(_QWORD *)(v21 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    sub_1004B84E0((uint64_t)v13, *(_QWORD *)(v16 + 48) + v30 * v23, type metadata accessor for CRLBoardIdentifier);
    sub_1004B84E0(v54, *(_QWORD *)(v16 + 56) + v32 * v23, v55);
    ++*(_QWORD *)(v16 + 16);
  }
  swift_release(v14);
  v6 = v48;
  v27 = v50;
  if ((v53 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v46 = 1 << *(_BYTE *)(v14 + 32);
  if (v46 >= 64)
    bzero(v27, ((unint64_t)(v46 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v27 = -1 << v46;
  *(_QWORD *)(v14 + 16) = 0;
LABEL_43:
  swift_release(v14);
  *v6 = v16;
}

void sub_10081A958(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  int64_t v37;
  _QWORD *v38;
  uint64_t v39;
  int v40;
  char *v41;
  uint64_t v42;
  uint64_t v43[10];

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v34 = *(_QWORD *)(v6 - 8);
  v35 = v6;
  __chkstk_darwin(v6);
  v33 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CRLBoardLibraryViewModel.Folder(0);
  v39 = *(_QWORD *)(v8 - 8);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v31 - v12;
  v14 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1013F4E28);
  v40 = a2;
  v15 = static _DictionaryStorage.resize(original:capacity:move:)(v14, a1, a2);
  v42 = v14;
  if (!*(_QWORD *)(v14 + 16))
    goto LABEL_28;
  v41 = v13;
  v32 = v2;
  v16 = 1 << *(_BYTE *)(v42 + 32);
  v17 = *(_QWORD *)(v42 + 64);
  v38 = (_QWORD *)(v42 + 64);
  if (v16 < 64)
    v18 = ~(-1 << v16);
  else
    v18 = -1;
  v19 = v18 & v17;
  v37 = (unint64_t)(v16 + 63) >> 6;
  swift_retain(v42);
  v36 = v11;
  if (v19)
  {
    v20 = __clz(__rbit64(v19));
    goto LABEL_20;
  }
  if (v37 <= 1)
  {
    swift_release(v42);
    v3 = v32;
    v21 = v38;
    if ((v40 & 1) != 0)
      goto LABEL_25;
LABEL_28:
    v30 = v42;
    goto LABEL_31;
  }
  v21 = v38;
  v22 = v38[1];
  v23 = 1;
  if (v22)
    goto LABEL_19;
  v23 = 2;
  if (v37 <= 2)
    goto LABEL_24;
  v22 = v38[2];
  if (v22)
  {
LABEL_19:
    v20 = __clz(__rbit64(v22)) + (v23 << 6);
LABEL_20:
    v25 = *(_QWORD *)(v42 + 48) + *(_QWORD *)(v39 + 72) * v20;
    v26 = (uint64_t)v41;
    if ((v40 & 1) != 0)
      sub_1004B84E0(v25, (uint64_t)v41, type metadata accessor for CRLBoardLibraryViewModel.Folder);
    else
      sub_1004B8460(v25, (uint64_t)v41, type metadata accessor for CRLBoardLibraryViewModel.Folder);
    Hasher.init(_seed:)(v43, *(_QWORD *)(v15 + 40));
    sub_1004B8460(v26, (uint64_t)v11, type metadata accessor for CRLBoardLibraryViewModel.Folder);
    v27 = sub_1004B804C(&qword_1013E1790);
    v28 = (char *)&loc_10081AD7C
        + *((int *)qword_10081AE90
          + (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 48))(v11, 5, v27));
    __asm { BR              X9 }
  }
  v24 = 3;
  if (v37 > 3)
  {
    v22 = v38[3];
    if (v22)
    {
      v23 = 3;
      goto LABEL_19;
    }
    while (1)
    {
      v23 = v24 + 1;
      if (__OFADD__(v24, 1))
      {
        __break(1u);
        JUMPOUT(0x10081AE90);
      }
      if (v23 >= v37)
        break;
      v22 = v38[v23];
      ++v24;
      if (v22)
        goto LABEL_19;
    }
  }
LABEL_24:
  swift_release(v42);
  v3 = v32;
  if ((v40 & 1) == 0)
    goto LABEL_28;
LABEL_25:
  v29 = 1 << *(_BYTE *)(v42 + 32);
  if (v29 >= 64)
    bzero(v21, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v21 = -1 << v29;
  v30 = v42;
  *(_QWORD *)(v42 + 16) = 0;
LABEL_31:
  swift_release(v30);
  *v3 = v15;
}

void sub_10081AEA8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  int EnumCaseMultiPayload;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t);
  char *v58;
  uint64_t v59;
  Swift::Int v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char v64;
  unint64_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  char *v71;
  uint64_t v72;
  int64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  int v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  int64_t v87;
  uint64_t v88;
  _QWORD v89[10];

  v3 = v2;
  v6 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v6);
  v80 = (uint64_t)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = type metadata accessor for UUID(0);
  v78 = *(_QWORD *)(v81 - 8);
  __chkstk_darwin(v81);
  v77 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CRLBoardLibraryViewModel.Folder(0);
  __chkstk_darwin(v9);
  v76 = (uint64_t)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v69 - v12;
  v14 = type metadata accessor for CRLBoardPreviewImageCache.Item(0);
  v79 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v16 = (char *)&v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v88 = (uint64_t)&v69 - v18;
  v19 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1013F51A8);
  v83 = a2;
  v20 = static _DictionaryStorage.resize(original:capacity:move:)(v19, a1, a2);
  v21 = v20;
  if (*(_QWORD *)(v19 + 16))
  {
    v70 = v2;
    v22 = 1 << *(_BYTE *)(v19 + 32);
    v23 = *(_QWORD *)(v19 + 64);
    v74 = (_QWORD *)(v19 + 64);
    if (v22 < 64)
      v24 = ~(-1 << v22);
    else
      v24 = -1;
    v25 = v24 & v23;
    v73 = (unint64_t)(v22 + 63) >> 6;
    v26 = v20 + 64;
    swift_retain(v19);
    v27 = 0;
    v75 = v14;
    v28 = v79;
    v82 = v16;
    v72 = v19;
    v71 = v13;
    while (1)
    {
      if (v25)
      {
        v86 = (v25 - 1) & v25;
        v31 = __clz(__rbit64(v25)) | (v27 << 6);
        v32 = v88;
      }
      else
      {
        v33 = v27 + 1;
        v32 = v88;
        if (__OFADD__(v27, 1))
          goto LABEL_47;
        if (v33 >= v73)
        {
LABEL_41:
          swift_release(v19);
          v3 = v70;
          if ((v83 & 1) != 0)
          {
            v68 = 1 << *(_BYTE *)(v19 + 32);
            if (v68 >= 64)
              bzero(v74, ((unint64_t)(v68 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
            else
              *v74 = -1 << v68;
            *(_QWORD *)(v19 + 16) = 0;
          }
          break;
        }
        v34 = v74[v33];
        ++v27;
        if (!v34)
        {
          v27 = v33 + 1;
          if (v33 + 1 >= v73)
            goto LABEL_41;
          v34 = v74[v27];
          if (!v34)
          {
            v35 = v33 + 2;
            if (v35 >= v73)
              goto LABEL_41;
            v34 = v74[v35];
            if (!v34)
            {
              while (1)
              {
                v27 = v35 + 1;
                if (__OFADD__(v35, 1))
                  goto LABEL_48;
                if (v27 >= v73)
                  goto LABEL_41;
                v34 = v74[v27];
                ++v35;
                if (v34)
                  goto LABEL_23;
              }
            }
            v27 = v35;
          }
        }
LABEL_23:
        v86 = (v34 - 1) & v34;
        v31 = __clz(__rbit64(v34)) + (v27 << 6);
      }
      v36 = *(_QWORD *)(v28 + 72);
      v37 = *(_QWORD *)(v19 + 48) + v36 * v31;
      v87 = v27;
      v85 = v36;
      if ((v83 & 1) != 0)
      {
        sub_1004B84E0(v37, v32, type metadata accessor for CRLBoardPreviewImageCache.Item);
        v84 = *(id *)(*(_QWORD *)(v19 + 56) + 8 * v31);
      }
      else
      {
        sub_1004B8460(v37, v32, type metadata accessor for CRLBoardPreviewImageCache.Item);
        v84 = *(id *)(*(_QWORD *)(v19 + 56) + 8 * v31);
      }
      Hasher.init(_seed:)(v89, *(_QWORD *)(v21 + 40));
      sub_1004B8460(v32, (uint64_t)v16, type metadata accessor for CRLBoardPreviewImageCache.Item);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v16, v14);
      if (!EnumCaseMultiPayload)
      {
        sub_1004B84E0((uint64_t)v16, (uint64_t)v13, type metadata accessor for CRLBoardLibraryViewModel.Folder);
        v45 = v76;
        sub_1004B8460((uint64_t)v13, v76, type metadata accessor for CRLBoardLibraryViewModel.Folder);
        v46 = sub_1004B804C(&qword_1013E1790);
        v47 = (char *)&loc_10081B350
            + *((int *)qword_10081B688
              + (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 48))(v45, 5, v46));
        __asm { BR              X9 }
      }
      if (EnumCaseMultiPayload == 1)
      {
        v39 = v80;
        sub_1004B84E0((uint64_t)v16, v80, type metadata accessor for CRLBoardIdentifier);
        v40 = sub_1005034A0((unint64_t *)&qword_1013DE630, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        dispatch thunk of Hashable.hash(into:)(v89, v81, v40);
        v41 = (uint64_t *)(v39 + *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20));
        v42 = *v41;
        v43 = v41[1];
        swift_bridgeObjectRetain(v43);
        String.hash(into:)(v89, v42, v43);
        swift_bridgeObjectRelease();
        v44 = v39;
      }
      else
      {
        v48 = &v16[*(int *)(sub_1004B804C((uint64_t *)&unk_1013DE640) + 48)];
        v49 = v80;
        sub_1004B84E0((uint64_t)v16, v80, type metadata accessor for CRLBoardIdentifier);
        v50 = v77;
        v51 = v78;
        v52 = v81;
        (*(void (**)(char *, char *, uint64_t))(v78 + 32))(v77, v48, v81);
        v53 = sub_1005034A0((unint64_t *)&qword_1013DE630, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        dispatch thunk of Hashable.hash(into:)(v89, v52, v53);
        v54 = (uint64_t *)(v49 + *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20));
        v55 = *v54;
        v56 = v54[1];
        swift_bridgeObjectRetain(v56);
        String.hash(into:)(v89, v55, v56);
        swift_bridgeObjectRelease();
        dispatch thunk of Hashable.hash(into:)(v89, v52, v53);
        v57 = *(void (**)(char *, uint64_t))(v51 + 8);
        v14 = v75;
        v58 = v50;
        v13 = v71;
        v59 = v52;
        v28 = v79;
        v57(v58, v59);
        v44 = v49;
        v19 = v72;
      }
      sub_1004B84A4(v44, type metadata accessor for CRLBoardIdentifier);
      v60 = Hasher._finalize()();
      v61 = -1 << *(_BYTE *)(v21 + 32);
      v62 = v60 & ~v61;
      v63 = v62 >> 6;
      v16 = v82;
      if (((-1 << v62) & ~*(_QWORD *)(v26 + 8 * (v62 >> 6))) != 0)
      {
        v29 = __clz(__rbit64((-1 << v62) & ~*(_QWORD *)(v26 + 8 * (v62 >> 6)))) | v62 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_9;
      }
      v64 = 0;
      v65 = (unint64_t)(63 - v61) >> 6;
      do
      {
        if (++v63 == v65 && (v64 & 1) != 0)
        {
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
          JUMPOUT(0x10081B688);
        }
        v66 = v63 == v65;
        if (v63 == v65)
          v63 = 0;
        v64 |= v66;
        v67 = *(_QWORD *)(v26 + 8 * v63);
      }
      while (v67 == -1);
      v29 = __clz(__rbit64(~v67)) + (v63 << 6);
LABEL_9:
      v30 = v85;
      *(_QWORD *)(v26 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
      sub_1004B84E0(v88, *(_QWORD *)(v21 + 48) + v30 * v29, type metadata accessor for CRLBoardPreviewImageCache.Item);
      *(_QWORD *)(*(_QWORD *)(v21 + 56) + 8 * v29) = v84;
      ++*(_QWORD *)(v21 + 16);
      v25 = v86;
      v27 = v87;
    }
  }
  swift_release(v19);
  *v3 = v21;
}

void sub_10081B6A0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  Swift::Int v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  int64_t v45;
  _QWORD *v46;
  uint64_t v47;
  int v48;
  _QWORD v49[9];

  v5 = v3;
  v8 = type metadata accessor for CRLBoardIdentifier(0);
  v47 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v5;
  if (*(_QWORD *)(*v5 + 24) > a1)
    a1 = *(_QWORD *)(*v5 + 24);
  sub_1004B804C(a3);
  v48 = a2;
  v12 = static _DictionaryStorage.resize(original:capacity:move:)(v11, a1, a2);
  v13 = v12;
  if (!*(_QWORD *)(v11 + 16))
    goto LABEL_43;
  v14 = 1 << *(_BYTE *)(v11 + 32);
  v15 = *(_QWORD *)(v11 + 64);
  v46 = (_QWORD *)(v11 + 64);
  if (v14 < 64)
    v16 = ~(-1 << v14);
  else
    v16 = -1;
  v17 = v16 & v15;
  v44 = v5;
  v45 = (unint64_t)(v14 + 63) >> 6;
  v18 = v12 + 64;
  swift_retain(v11);
  v19 = 0;
  while (1)
  {
    if (v17)
    {
      v21 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v22 = v21 | (v19 << 6);
      goto LABEL_24;
    }
    v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v23 >= v45)
      break;
    v24 = v46;
    v25 = v46[v23];
    ++v19;
    if (!v25)
    {
      v19 = v23 + 1;
      if (v23 + 1 >= v45)
        goto LABEL_36;
      v25 = v46[v19];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v45)
        {
LABEL_36:
          swift_release(v11);
          v5 = v44;
          if ((v48 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v46[v26];
        if (!v25)
        {
          while (1)
          {
            v19 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v19 >= v45)
              goto LABEL_36;
            v25 = v46[v19];
            ++v26;
            if (v25)
              goto LABEL_23;
          }
        }
        v19 = v26;
      }
    }
LABEL_23:
    v17 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_24:
    v27 = *(_QWORD *)(v47 + 72);
    v28 = *(_QWORD *)(v11 + 48) + v27 * v22;
    if ((v48 & 1) != 0)
    {
      sub_1004B84E0(v28, (uint64_t)v10, type metadata accessor for CRLBoardIdentifier);
      v29 = *(id *)(*(_QWORD *)(v11 + 56) + 8 * v22);
    }
    else
    {
      sub_1004B8460(v28, (uint64_t)v10, type metadata accessor for CRLBoardIdentifier);
      v29 = *(id *)(*(_QWORD *)(v11 + 56) + 8 * v22);
    }
    Hasher.init(_seed:)(v49, *(_QWORD *)(v13 + 40));
    v30 = type metadata accessor for UUID(0);
    v31 = sub_1005034A0((unint64_t *)&qword_1013DE630, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v49, v30, v31);
    v32 = &v10[*(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20)];
    v33 = *(_QWORD *)v32;
    v34 = *((_QWORD *)v32 + 1);
    swift_bridgeObjectRetain(v34);
    String.hash(into:)(v49, v33, v34);
    swift_bridgeObjectRelease(v34);
    v35 = Hasher._finalize()();
    v36 = -1 << *(_BYTE *)(v13 + 32);
    v37 = v35 & ~v36;
    v38 = v37 >> 6;
    if (((-1 << v37) & ~*(_QWORD *)(v18 + 8 * (v37 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v37) & ~*(_QWORD *)(v18 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v39 = 0;
      v40 = (unint64_t)(63 - v36) >> 6;
      do
      {
        if (++v38 == v40 && (v39 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v41 = v38 == v40;
        if (v38 == v40)
          v38 = 0;
        v39 |= v41;
        v42 = *(_QWORD *)(v18 + 8 * v38);
      }
      while (v42 == -1);
      v20 = __clz(__rbit64(~v42)) + (v38 << 6);
    }
    *(_QWORD *)(v18 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    sub_1004B84E0((uint64_t)v10, *(_QWORD *)(v13 + 48) + v27 * v20, type metadata accessor for CRLBoardIdentifier);
    *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v20) = v29;
    ++*(_QWORD *)(v13 + 16);
  }
  swift_release(v11);
  v5 = v44;
  v24 = v46;
  if ((v48 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v43 = 1 << *(_BYTE *)(v11 + 32);
  if (v43 >= 64)
    bzero(v24, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v43;
  *(_QWORD *)(v11 + 16) = 0;
LABEL_43:
  swift_release(v11);
  *v5 = v13;
}

void sub_10081BA94(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1013F4EF8);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = v3;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain(v5);
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_34;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v22 >= v36)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v37 + 8 * v22);
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v36)
        goto LABEL_36;
      v24 = *(_QWORD *)(v37 + 8 * v13);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v36)
        {
LABEL_36:
          swift_release(v5);
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v13 >= v36)
              goto LABEL_36;
            v24 = *(_QWORD *)(v37 + 8 * v13);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v13 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v38 & 1) == 0)
      swift_bridgeObjectRetain(v30[1]);
    Hasher.init(_seed:)(v39, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v39, v32, v31);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v35;
  v23 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

void sub_10081BD9C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  char v34;
  id v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  char v39;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1013F5138);
  v39 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v3;
  v38 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v14 << 6);
      goto LABEL_34;
    }
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v23 >= v12)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v38 + 8 * v23);
    ++v14;
    if (!v25)
    {
      v14 = v23 + 1;
      if (v23 + 1 >= v12)
        goto LABEL_36;
      v25 = *(_QWORD *)(v38 + 8 * v14);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release(v5);
          v3 = v37;
          if ((v39 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v38 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v14 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v14 >= v12)
              goto LABEL_36;
            v25 = *(_QWORD *)(v38 + 8 * v14);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v14 = v26;
      }
    }
LABEL_33:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_34:
    v31 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v22);
    v32 = *(_QWORD *)(v5 + 56) + 16 * v22;
    v33 = *(void **)v32;
    v34 = *(_BYTE *)(v32 + 8);
    if ((v39 & 1) == 0)
    {
      v35 = v31;
      sub_10059BC74(v33, v34);
    }
    v15 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = v15 & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v19) = v31;
    v20 = *(_QWORD *)(v8 + 56) + 16 * v19;
    *(_QWORD *)v20 = v33;
    *(_BYTE *)(v20 + 8) = v34;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v37;
  v24 = (_QWORD *)(v5 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

void sub_10081C08C(uint64_t a1, uint64_t a2)
{
  sub_100815290(a1, a2, &qword_1013F4F28);
}

void sub_10081C098(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  int64_t v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  Swift::Int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];
  __int128 v40[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1013F5158);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_47;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v36 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain(v5);
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_25;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
      return;
    }
    if (v18 >= v36)
      break;
    v19 = (_QWORD *)(v5 + 64);
    v20 = *(_QWORD *)(v37 + 8 * v18);
    ++v13;
    if (!v20)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v36)
        goto LABEL_40;
      v20 = *(_QWORD *)(v37 + 8 * v13);
      if (!v20)
      {
        v21 = v18 + 2;
        if (v21 >= v36)
        {
LABEL_40:
          swift_release(v5);
          if ((v38 & 1) == 0)
            goto LABEL_47;
          goto LABEL_43;
        }
        v20 = *(_QWORD *)(v37 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            v13 = v21 + 1;
            if (__OFADD__(v21, 1))
              goto LABEL_49;
            if (v13 >= v36)
              goto LABEL_40;
            v20 = *(_QWORD *)(v37 + 8 * v13);
            ++v21;
            if (v20)
              goto LABEL_24;
          }
        }
        v13 = v21;
      }
    }
LABEL_24:
    v11 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_25:
    v22 = (unsigned __int8 *)(*(_QWORD *)(v5 + 48) + 24 * v17);
    v23 = *v22;
    v25 = *((_QWORD *)v22 + 1);
    v24 = *((_QWORD *)v22 + 2);
    v26 = (__int128 *)(*(_QWORD *)(v5 + 56) + 40 * v17);
    if ((v38 & 1) != 0)
    {
      sub_1004DB728(v26, (uint64_t)v40);
    }
    else
    {
      sub_1004E90B0((uint64_t)v26, (uint64_t)v40);
      swift_bridgeObjectRetain(v24);
    }
    Hasher.init(_seed:)(v39, *(_QWORD *)(v8 + 40));
    Hasher._combine(_:)(v23 + 5);
    if (v24)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain(v24);
      String.hash(into:)(v39, v25, v24);
      swift_bridgeObjectRelease(v24);
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    v27 = Hasher._finalize()();
    v28 = -1 << *(_BYTE *)(v8 + 32);
    v29 = v27 & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v12 + 8 * (v29 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_48;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v12 + 8 * v30);
      }
      while (v34 == -1);
      v14 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = *(_QWORD *)(v8 + 48) + 24 * v14;
    *(_BYTE *)v15 = v23;
    *(_QWORD *)(v15 + 8) = v25;
    *(_QWORD *)(v15 + 16) = v24;
    sub_1004DB728(v40, *(_QWORD *)(v8 + 56) + 40 * v14);
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v19 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_47;
LABEL_43:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v19, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v19 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_47:
  swift_release(v5);
  *v3 = v8;
}

void sub_10081C408(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  Swift::UInt v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  _QWORD *v36;
  uint64_t v37[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1013F5180);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 0;
    v36 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v34 = v3;
    v35 = (unint64_t)(v10 + 63) >> 6;
    v13 = v7 + 64;
    while (1)
    {
      if (v12)
      {
        v20 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v21 = v20 | (v9 << 6);
      }
      else
      {
        v22 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return;
        }
        if (v22 >= v35)
          goto LABEL_36;
        v23 = v36[v22];
        ++v9;
        if (!v23)
        {
          v9 = v22 + 1;
          if (v22 + 1 >= v35)
            goto LABEL_36;
          v23 = v36[v9];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v35)
            {
LABEL_36:
              if ((a2 & 1) == 0)
              {
                swift_release(v5);
                v3 = v34;
                goto LABEL_43;
              }
              v33 = 1 << *(_BYTE *)(v5 + 32);
              if (v33 >= 64)
                bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v36 = -1 << v33;
              v3 = v34;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v23 = v36[v24];
            if (!v23)
            {
              while (1)
              {
                v9 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_45;
                if (v9 >= v35)
                  goto LABEL_36;
                v23 = v36[v9];
                ++v24;
                if (v23)
                  goto LABEL_33;
              }
            }
            v9 = v24;
          }
        }
LABEL_33:
        v12 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v9 << 6);
      }
      v29 = 8 * v21;
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v29);
      v31 = *(void **)(*(_QWORD *)(v5 + 56) + v29);
      if ((a2 & 1) == 0)
        v32 = v31;
      Hasher.init(_seed:)(v37, *(_QWORD *)(v8 + 40));
      Hasher._combine(_:)(v30);
      v14 = Hasher._finalize()();
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = v14 & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v13 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v13 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v27 = v17 == v26;
          if (v17 == v26)
            v17 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v13 + 8 * v17);
        }
        while (v28 == -1);
        v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }
      *(_QWORD *)(v13 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = 8 * v18;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + v19) = v30;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + v19) = v31;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release(v5);
LABEL_43:
  *v3 = v8;
}

void sub_10081C6D8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_1004B804C(a3);
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = v8;
  if (*(_QWORD *)(v6 + 16))
  {
    v10 = 0;
    v11 = (uint64_t *)(v6 + 64);
    v12 = 1 << *(_BYTE *)(v6 + 32);
    v35 = -1 << v12;
    v36 = v12;
    if (v12 < 64)
      v13 = ~(-1 << v12);
    else
      v13 = -1;
    v14 = v13 & *(_QWORD *)(v6 + 64);
    v37 = (unint64_t)(v12 + 63) >> 6;
    v15 = v8 + 64;
    while (1)
    {
      if (v14)
      {
        v22 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        v23 = v22 | (v10 << 6);
      }
      else
      {
        v24 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return;
        }
        if (v24 >= v37)
          goto LABEL_36;
        v25 = v11[v24];
        ++v10;
        if (!v25)
        {
          v10 = v24 + 1;
          if (v24 + 1 >= v37)
            goto LABEL_36;
          v25 = v11[v10];
          if (!v25)
          {
            v26 = v24 + 2;
            if (v26 >= v37)
            {
LABEL_36:
              if ((a2 & 1) != 0)
              {
                if (v36 >= 64)
                  bzero((void *)(v6 + 64), 8 * v37);
                else
                  *v11 = v35;
                *(_QWORD *)(v6 + 16) = 0;
              }
              break;
            }
            v25 = v11[v26];
            if (!v25)
            {
              while (1)
              {
                v10 = v26 + 1;
                if (__OFADD__(v26, 1))
                  goto LABEL_44;
                if (v10 >= v37)
                  goto LABEL_36;
                v25 = v11[v10];
                ++v26;
                if (v25)
                  goto LABEL_33;
              }
            }
            v10 = v26;
          }
        }
LABEL_33:
        v14 = (v25 - 1) & v25;
        v23 = __clz(__rbit64(v25)) + (v10 << 6);
      }
      v31 = 8 * v23;
      v32 = *(_QWORD *)(v6 + 56);
      v33 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + v31);
      v34 = *(_QWORD *)(v32 + v31);
      if ((a2 & 1) == 0)
        swift_retain(*(_QWORD *)(v32 + v31));
      v16 = static Hasher._hash(seed:_:)(*(_QWORD *)(v9 + 40), v33);
      v17 = -1 << *(_BYTE *)(v9 + 32);
      v18 = v16 & ~v17;
      v19 = v18 >> 6;
      if (((-1 << v18) & ~*(_QWORD *)(v15 + 8 * (v18 >> 6))) != 0)
      {
        v20 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v15 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v17) >> 6;
        do
        {
          if (++v19 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v29 = v19 == v28;
          if (v19 == v28)
            v19 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v15 + 8 * v19);
        }
        while (v30 == -1);
        v20 = __clz(__rbit64(~v30)) + (v19 << 6);
      }
      *(_QWORD *)(v15 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      v21 = 8 * v20;
      *(_QWORD *)(*(_QWORD *)(v9 + 48) + v21) = v33;
      *(_QWORD *)(*(_QWORD *)(v9 + 56) + v21) = v34;
      ++*(_QWORD *)(v9 + 16);
    }
  }
  swift_release(v6);
  *v4 = v9;
}

void sub_10081C988(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t *v37;
  char v38;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1013F5098);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 0;
    v37 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v34 = -1 << v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v35 = 1 << *(_BYTE *)(v5 + 32);
    v36 = (unint64_t)(v10 + 63) >> 6;
    v13 = v7 + 64;
    while (1)
    {
      if (v12)
      {
        v20 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v21 = v20 | (v9 << 6);
      }
      else
      {
        v22 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return;
        }
        if (v22 >= v36)
          goto LABEL_36;
        v23 = v37[v22];
        ++v9;
        if (!v23)
        {
          v9 = v22 + 1;
          if (v22 + 1 >= v36)
            goto LABEL_36;
          v23 = v37[v9];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v36)
            {
LABEL_36:
              if ((v38 & 1) != 0)
              {
                if (v35 >= 64)
                  bzero(v37, 8 * v36);
                else
                  *v37 = v34;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v23 = v37[v24];
            if (!v23)
            {
              while (1)
              {
                v9 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_44;
                if (v9 >= v36)
                  goto LABEL_36;
                v23 = v37[v9];
                ++v24;
                if (v23)
                  goto LABEL_33;
              }
            }
            v9 = v24;
          }
        }
LABEL_33:
        v12 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v9 << 6);
      }
      v29 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v21);
      v30 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 24 * v21);
      v31 = *v30;
      v32 = v30[1];
      v33 = v30[2];
      if ((v38 & 1) == 0)
      {
        swift_retain(v31);
        swift_retain(v32);
      }
      v14 = static Hasher._hash(seed:_:)(*(_QWORD *)(v8 + 40), v29);
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = v14 & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v13 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v13 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v27 = v17 == v26;
          if (v17 == v26)
            v17 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v13 + 8 * v17);
        }
        while (v28 == -1);
        v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }
      *(_QWORD *)(v13 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v18) = v29;
      v19 = (_QWORD *)(*(_QWORD *)(v8 + 56) + 24 * v18);
      *v19 = v31;
      v19[1] = v32;
      v19[2] = v33;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release(v5);
  *v3 = v8;
}

void sub_10081CC60(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1013F4E70);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 0;
    v10 = (uint64_t *)(v5 + 64);
    v11 = 1 << *(_BYTE *)(v5 + 32);
    v34 = -1 << v11;
    v35 = v11;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v5 + 64);
    v36 = (unint64_t)(v11 + 63) >> 6;
    v14 = v7 + 64;
    while (1)
    {
      if (v13)
      {
        v21 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v22 = v21 | (v9 << 6);
      }
      else
      {
        v23 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return;
        }
        if (v23 >= v36)
          goto LABEL_36;
        v24 = v10[v23];
        ++v9;
        if (!v24)
        {
          v9 = v23 + 1;
          if (v23 + 1 >= v36)
            goto LABEL_36;
          v24 = v10[v9];
          if (!v24)
          {
            v25 = v23 + 2;
            if (v25 >= v36)
            {
LABEL_36:
              if ((a2 & 1) != 0)
              {
                if (v35 >= 64)
                  bzero((void *)(v5 + 64), 8 * v36);
                else
                  *v10 = v34;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v24 = v10[v25];
            if (!v24)
            {
              while (1)
              {
                v9 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_44;
                if (v9 >= v36)
                  goto LABEL_36;
                v24 = v10[v9];
                ++v25;
                if (v24)
                  goto LABEL_33;
              }
            }
            v9 = v25;
          }
        }
LABEL_33:
        v13 = (v24 - 1) & v24;
        v22 = __clz(__rbit64(v24)) + (v9 << 6);
      }
      v30 = 8 * v22;
      v31 = *(_QWORD *)(v5 + 56);
      v32 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v30);
      v33 = *(_QWORD *)(v31 + v30);
      if ((a2 & 1) == 0)
        swift_retain(*(_QWORD *)(v31 + v30));
      v15 = static Hasher._hash(seed:_:)(*(_QWORD *)(v8 + 40), v32);
      v16 = -1 << *(_BYTE *)(v8 + 32);
      v17 = v15 & ~v16;
      v18 = v17 >> 6;
      if (((-1 << v17) & ~*(_QWORD *)(v14 + 8 * (v17 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v14 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v28 = v18 == v27;
          if (v18 == v27)
            v18 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v14 + 8 * v18);
        }
        while (v29 == -1);
        v19 = __clz(__rbit64(~v29)) + (v18 << 6);
      }
      *(_QWORD *)(v14 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      v20 = 8 * v19;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + v20) = v32;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + v20) = v33;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release(v5);
  *v3 = v8;
}

void sub_10081CF14(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  uint64_t v42;
  char v43;
  _QWORD v44[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1013F5010);
  v43 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v42 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v40 = v3;
  v41 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain(v5);
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v23 = v22 | (v13 << 6);
      goto LABEL_34;
    }
    v24 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v24 >= v41)
      break;
    v25 = (_QWORD *)(v5 + 64);
    v26 = *(_QWORD *)(v42 + 8 * v24);
    ++v13;
    if (!v26)
    {
      v13 = v24 + 1;
      if (v24 + 1 >= v41)
        goto LABEL_36;
      v26 = *(_QWORD *)(v42 + 8 * v13);
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_36:
          swift_release(v5);
          v3 = v40;
          if ((v43 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = *(_QWORD *)(v42 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            v13 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v13 >= v41)
              goto LABEL_36;
            v26 = *(_QWORD *)(v42 + 8 * v13);
            ++v27;
            if (v26)
              goto LABEL_33;
          }
        }
        v13 = v27;
      }
    }
LABEL_33:
    v11 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v13 << 6);
LABEL_34:
    v32 = 16 * v23;
    v33 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v32);
    v35 = *v33;
    v34 = v33[1];
    v36 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v32);
    v37 = *v36;
    v38 = v36[1];
    if ((v43 & 1) == 0)
    {
      swift_bridgeObjectRetain(v33[1]);
      swift_bridgeObjectRetain(v38);
    }
    Hasher.init(_seed:)(v44, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v44, v35, v34);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v30 = v17 == v29;
        if (v17 == v29)
          v17 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v31 == -1);
      v18 = __clz(__rbit64(~v31)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = 16 * v18;
    v20 = (_QWORD *)(*(_QWORD *)(v8 + 48) + v19);
    *v20 = v35;
    v20[1] = v34;
    v21 = (_QWORD *)(*(_QWORD *)(v8 + 56) + v19);
    *v21 = v37;
    v21[1] = v38;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v40;
  v25 = (_QWORD *)(v5 + 64);
  if ((v43 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v39 = 1 << *(_BYTE *)(v5 + 32);
  if (v39 >= 64)
    bzero(v25, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v39;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

void sub_10081D238(uint64_t a1, uint64_t a2)
{
  sub_10081D980(a1, a2, &qword_1013F4E80);
}

void sub_10081D244(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;
  _QWORD v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1013F4E78);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v3;
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v14 << 6);
      goto LABEL_34;
    }
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v23 >= v12)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v36 + 8 * v23);
    ++v14;
    if (!v25)
    {
      v14 = v23 + 1;
      if (v23 + 1 >= v12)
        goto LABEL_36;
      v25 = *(_QWORD *)(v36 + 8 * v14);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release(v5);
          v3 = v35;
          if ((v37 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v36 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v14 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v14 >= v12)
              goto LABEL_36;
            v25 = *(_QWORD *)(v36 + 8 * v14);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v14 = v26;
      }
    }
LABEL_33:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_34:
    v31 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v22);
    v32 = *v31;
    v33 = v31[1];
    if ((v37 & 1) == 0)
      swift_bridgeObjectRetain(v33);
    Hasher.init(_seed:)(v38, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v38, 0x617453656B617761, 0xEA00000000006574);
    v15 = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = v15 & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v8 + 56) + 16 * v19);
    *v20 = v32;
    v20[1] = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v35;
  v24 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v24, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

void sub_10081D544(uint64_t a1, uint64_t a2)
{
  sub_10081FB58(a1, a2, &qword_1013F5108);
}

void sub_10081D550(uint64_t a1, uint64_t a2)
{
  sub_100824A50(a1, a2, &qword_1013F5168);
}

void sub_10081D55C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __n128 v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  void (*v30)(char *, unint64_t, uint64_t, __n128);
  uint64_t v31;
  void **v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void (*v38)(char *, unint64_t, uint64_t, __n128);
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char v50;
  unint64_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  int64_t v56;
  _QWORD *v57;
  uint64_t v58;
  int v59;
  _QWORD *v60;
  id v61;
  void *v62;
  void *v63;
  int64_t v64;
  char *v65;
  uint64_t v66;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v60 = *(_QWORD **)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1013F5160);
  v59 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_43;
  v65 = v8;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v57 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v55 = v2;
  v56 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  v17 = swift_retain(v9);
  v18 = 0;
  v58 = v9;
  v66 = v6;
  v19 = v60;
  while (1)
  {
    if (v15)
    {
      v22 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v23 = v22 | (v18 << 6);
      goto LABEL_24;
    }
    v24 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v24 >= v56)
      break;
    v25 = v57;
    v26 = v57[v24];
    ++v18;
    if (!v26)
    {
      v18 = v24 + 1;
      if (v24 + 1 >= v56)
        goto LABEL_36;
      v26 = v57[v18];
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v56)
        {
LABEL_36:
          swift_release(v9);
          v3 = v55;
          if ((v59 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = v57[v27];
        if (!v26)
        {
          while (1)
          {
            v18 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v18 >= v56)
              goto LABEL_36;
            v26 = v57[v18];
            ++v27;
            if (v26)
              goto LABEL_23;
          }
        }
        v18 = v27;
      }
    }
LABEL_23:
    v15 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v18 << 6);
LABEL_24:
    v28 = v19[9];
    v29 = *(_QWORD *)(v9 + 48) + v28 * v23;
    v64 = v18;
    if ((v59 & 1) != 0)
    {
      v30 = (void (*)(char *, unint64_t, uint64_t, __n128))v19[4];
      v31 = v66;
      v30(v65, v29, v66, v17);
      v32 = (void **)(*(_QWORD *)(v9 + 56) + 48 * v23);
      v33 = *v32;
      v34 = v32[1];
      v35 = v32[3];
      v63 = v32[2];
      v36 = v32[4];
      v37 = v32[5];
      v61 = v33;
      v62 = v36;
    }
    else
    {
      v38 = (void (*)(char *, unint64_t, uint64_t, __n128))v19[2];
      v31 = v66;
      v38(v65, v29, v66, v17);
      v39 = *(_QWORD *)(v9 + 56) + 48 * v23;
      v40 = *(void **)v39;
      v41 = *(void **)(v39 + 8);
      v42 = *(void **)(v39 + 16);
      v35 = *(void **)(v39 + 24);
      v37 = *(void **)(v39 + 40);
      v62 = *(void **)(v39 + 32);
      v63 = v42;
      swift_bridgeObjectRetain(v35);
      swift_bridgeObjectRetain(v37);
      v61 = v40;
      v34 = v41;
      v43 = v41;
    }
    v44 = *(_QWORD *)(v11 + 40);
    v45 = sub_1005034A0((unint64_t *)&qword_1013DE630, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v46 = dispatch thunk of Hashable._rawHashValue(seed:)(v44, v31, v45);
    v47 = -1 << *(_BYTE *)(v11 + 32);
    v48 = v46 & ~v47;
    v49 = v48 >> 6;
    if (((-1 << v48) & ~*(_QWORD *)(v16 + 8 * (v48 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v48) & ~*(_QWORD *)(v16 + 8 * (v48 >> 6)))) | v48 & 0x7FFFFFFFFFFFFFC0;
      v19 = v60;
    }
    else
    {
      v50 = 0;
      v51 = (unint64_t)(63 - v47) >> 6;
      v19 = v60;
      do
      {
        if (++v49 == v51 && (v50 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v52 = v49 == v51;
        if (v49 == v51)
          v49 = 0;
        v50 |= v52;
        v53 = *(_QWORD *)(v16 + 8 * v49);
      }
      while (v53 == -1);
      v20 = __clz(__rbit64(~v53)) + (v49 << 6);
    }
    *(_QWORD *)(v16 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    ((void (*)(unint64_t, char *, uint64_t))v19[4])(*(_QWORD *)(v11 + 48) + v28 * v20, v65, v66);
    v21 = (_QWORD *)(*(_QWORD *)(v11 + 56) + 48 * v20);
    *v21 = v61;
    v21[1] = v34;
    v18 = v64;
    v21[2] = v63;
    v21[3] = v35;
    v21[4] = v62;
    v21[5] = v37;
    ++*(_QWORD *)(v11 + 16);
    v9 = v58;
  }
  swift_release(v9);
  v3 = v55;
  v25 = v57;
  if ((v59 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v54 = 1 << *(_BYTE *)(v9 + 32);
  if (v54 >= 64)
    bzero(v25, ((unint64_t)(v54 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v54;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_43:
  swift_release(v9);
  *v3 = v11;
}

void sub_10081D974(uint64_t a1, uint64_t a2)
{
  sub_10081D980(a1, a2, &qword_1013F4EE8);
}

void sub_10081D980(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  _QWORD *v42;
  char v43;
  _QWORD v44[9];

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_1004B804C(a3);
  v43 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = v8;
  if (*(_QWORD *)(v6 + 16))
  {
    v40 = v4;
    v10 = 1 << *(_BYTE *)(v6 + 32);
    v42 = (_QWORD *)(v6 + 64);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v6 + 64);
    v41 = (unint64_t)(v10 + 63) >> 6;
    v13 = v8 + 64;
    swift_retain(v6);
    v14 = 0;
    while (1)
    {
      if (v12)
      {
        v23 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v24 = v23 | (v14 << 6);
      }
      else
      {
        v25 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return;
        }
        if (v25 >= v41)
          goto LABEL_36;
        v26 = v42[v25];
        ++v14;
        if (!v26)
        {
          v14 = v25 + 1;
          if (v25 + 1 >= v41)
            goto LABEL_36;
          v26 = v42[v14];
          if (!v26)
          {
            v27 = v25 + 2;
            if (v27 >= v41)
            {
LABEL_36:
              swift_release(v6);
              v4 = v40;
              if ((v43 & 1) != 0)
              {
                v39 = 1 << *(_BYTE *)(v6 + 32);
                if (v39 >= 64)
                  bzero(v42, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v42 = -1 << v39;
                *(_QWORD *)(v6 + 16) = 0;
              }
              break;
            }
            v26 = v42[v27];
            if (!v26)
            {
              while (1)
              {
                v14 = v27 + 1;
                if (__OFADD__(v27, 1))
                  goto LABEL_43;
                if (v14 >= v41)
                  goto LABEL_36;
                v26 = v42[v14];
                ++v27;
                if (v26)
                  goto LABEL_33;
              }
            }
            v14 = v27;
          }
        }
LABEL_33:
        v12 = (v26 - 1) & v26;
        v24 = __clz(__rbit64(v26)) + (v14 << 6);
      }
      v32 = 16 * v24;
      v33 = (uint64_t *)(*(_QWORD *)(v6 + 48) + v32);
      v35 = *v33;
      v34 = v33[1];
      v36 = (uint64_t *)(*(_QWORD *)(v6 + 56) + v32);
      v38 = *v36;
      v37 = v36[1];
      if ((v43 & 1) == 0)
      {
        swift_retain(v37);
        swift_bridgeObjectRetain(v34);
        swift_retain(v38);
      }
      Hasher.init(_seed:)(v44, *(_QWORD *)(v9 + 40));
      String.hash(into:)(v44, v35, v34);
      v15 = Hasher._finalize()();
      v16 = -1 << *(_BYTE *)(v9 + 32);
      v17 = v15 & ~v16;
      v18 = v17 >> 6;
      if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v30 = v18 == v29;
          if (v18 == v29)
            v18 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v13 + 8 * v18);
        }
        while (v31 == -1);
        v19 = __clz(__rbit64(~v31)) + (v18 << 6);
      }
      *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      v20 = 16 * v19;
      v21 = (_QWORD *)(*(_QWORD *)(v9 + 48) + v20);
      *v21 = v35;
      v21[1] = v34;
      v22 = (_QWORD *)(*(_QWORD *)(v9 + 56) + v20);
      *v22 = v38;
      v22[1] = v37;
      ++*(_QWORD *)(v9 + 16);
    }
  }
  swift_release(v6);
  *v4 = v9;
}

void sub_10081DC94(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  Swift::Int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  _QWORD *v36;
  _QWORD v37[9];
  _OWORD v38[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1013F2128);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v34 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v36 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    swift_retain(v5);
    v13 = 0;
    while (1)
    {
      if (v11)
      {
        v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return;
        }
        if (v18 >= v35)
          goto LABEL_37;
        v19 = v36[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v35)
            goto LABEL_37;
          v19 = v36[v13];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v35)
            {
LABEL_37:
              swift_release(v5);
              v3 = v34;
              if ((a2 & 1) != 0)
              {
                v33 = 1 << *(_BYTE *)(v5 + 32);
                if (v33 >= 64)
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v33;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v19 = v36[v20];
            if (!v19)
            {
              while (1)
              {
                v13 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_44;
                if (v13 >= v35)
                  goto LABEL_37;
                v19 = v36[v13];
                ++v20;
                if (v19)
                  goto LABEL_24;
              }
            }
            v13 = v20;
          }
        }
LABEL_24:
        v11 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
      v23 = *v21;
      v22 = v21[1];
      v24 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v17);
      if ((a2 & 1) != 0)
      {
        sub_10050CB14(v24, v38);
      }
      else
      {
        sub_1004CB6E8((uint64_t)v24, (uint64_t)v38);
        swift_bridgeObjectRetain(v22);
      }
      Hasher.init(_seed:)(v37, *(_QWORD *)(v8 + 40));
      String.hash(into:)(v37, v23, v22);
      v25 = Hasher._finalize()();
      v26 = -1 << *(_BYTE *)(v8 + 32);
      v27 = v25 & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v12 + 8 * v28);
        }
        while (v32 == -1);
        v14 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v14);
      *v15 = v23;
      v15[1] = v22;
      sub_10050CB14(v38, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v14));
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release(v5);
  *v3 = v8;
}

void sub_10081DF90(uint64_t a1, uint64_t a2)
{
  sub_10081E960(a1, a2, &qword_1013F51E0);
}

void sub_10081DF9C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  Swift::UInt *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  Swift::UInt *v22;
  Swift::UInt v23;
  Swift::UInt v24;
  uint64_t v25;
  Swift::Int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  char v36;
  _QWORD *v37;
  uint64_t v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1013F5150);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v36 = a2;
    v35 = v3;
    v9 = 0;
    v37 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = v7 + 64;
    while (1)
    {
      if (v12)
      {
        v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v18 = v17 | (v9 << 6);
      }
      else
      {
        v19 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return;
        }
        if (v19 >= v13)
          goto LABEL_34;
        v20 = v37[v19];
        ++v9;
        if (!v20)
        {
          v9 = v19 + 1;
          if (v19 + 1 >= v13)
            goto LABEL_34;
          v20 = v37[v9];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_34:
              if ((v36 & 1) == 0)
              {
                swift_release(v5);
                v3 = v35;
                goto LABEL_41;
              }
              v34 = 1 << *(_BYTE *)(v5 + 32);
              if (v34 >= 64)
                bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v37 = -1 << v34;
              v3 = v35;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v37[v21];
            if (!v20)
            {
              while (1)
              {
                v9 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_43;
                if (v9 >= v13)
                  goto LABEL_34;
                v20 = v37[v9];
                ++v21;
                if (v20)
                  goto LABEL_24;
              }
            }
            v9 = v21;
          }
        }
LABEL_24:
        v12 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v9 << 6);
      }
      v22 = (Swift::UInt *)(*(_QWORD *)(v5 + 48) + 16 * v18);
      v24 = *v22;
      v23 = v22[1];
      v25 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v18);
      Hasher.init(_seed:)(v38, *(_QWORD *)(v8 + 40));
      Hasher._combine(_:)(v24);
      Hasher._combine(_:)(v23);
      v26 = Hasher._finalize()();
      v27 = -1 << *(_BYTE *)(v8 + 32);
      v28 = v26 & ~v27;
      v29 = v28 >> 6;
      if (((-1 << v28) & ~*(_QWORD *)(v14 + 8 * (v28 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v14 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v30 = 0;
        v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v32 = v29 == v31;
          if (v29 == v31)
            v29 = 0;
          v30 |= v32;
          v33 = *(_QWORD *)(v14 + 8 * v29);
        }
        while (v33 == -1);
        v15 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = (Swift::UInt *)(*(_QWORD *)(v8 + 48) + 16 * v15);
      *v16 = v24;
      v16[1] = v23;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v15) = v25;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release(v5);
LABEL_41:
  *v3 = v8;
}

void sub_10081E27C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __n128 v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  int v44;
  _QWORD v45[7];

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1013F5140);
  v44 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_43;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v43 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v41 = v2;
  v42 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  v18 = swift_retain(v10);
  v19 = 0;
  while (1)
  {
    if (v16)
    {
      v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v22 = v21 | (v19 << 6);
      goto LABEL_24;
    }
    v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v23 >= v42)
      break;
    v24 = v43;
    v25 = v43[v23];
    ++v19;
    if (!v25)
    {
      v19 = v23 + 1;
      if (v23 + 1 >= v42)
        goto LABEL_36;
      v25 = v43[v19];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v42)
        {
LABEL_36:
          swift_release(v10);
          v3 = v41;
          if ((v44 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v43[v26];
        if (!v25)
        {
          while (1)
          {
            v19 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v19 >= v42)
              goto LABEL_36;
            v25 = v43[v19];
            ++v26;
            if (v25)
              goto LABEL_23;
          }
        }
        v19 = v26;
      }
    }
LABEL_23:
    v16 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_24:
    v27 = *(_QWORD *)(v7 + 72);
    v28 = *(_QWORD *)(v10 + 48) + v27 * v22;
    if ((v44 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v7 + 32))(v9, v28, v6, v18);
      sub_10062E5D8(*(_QWORD *)(v10 + 56) + 56 * v22, (uint64_t)v45);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v7 + 16))(v9, v28, v6, v18);
      sub_10062E59C((_QWORD *)(*(_QWORD *)(v10 + 56) + 56 * v22), v45);
    }
    v29 = *(_QWORD *)(v12 + 40);
    v30 = sub_1005034A0((unint64_t *)&qword_1013DE630, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v31 = dispatch thunk of Hashable._rawHashValue(seed:)(v29, v6, v30);
    v32 = -1 << *(_BYTE *)(v12 + 32);
    v33 = v31 & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v17 + 8 * (v33 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v17 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v17 + 8 * v34);
      }
      while (v38 == -1);
      v20 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(_QWORD *)(v12 + 48) + v27 * v20, v9, v6);
    sub_10062E5D8((uint64_t)v45, *(_QWORD *)(v12 + 56) + 56 * v20);
    ++*(_QWORD *)(v12 + 16);
  }
  swift_release(v10);
  v3 = v41;
  v24 = v43;
  if ((v44 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v39 = 1 << *(_BYTE *)(v10 + 32);
  if (v39 >= 64)
    bzero(v24, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v39;
  *(_QWORD *)(v10 + 16) = 0;
LABEL_43:
  swift_release(v10);
  *v3 = v12;
}

void sub_10081E628(uint64_t a1, uint64_t a2)
{
  sub_100815CF8(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_1013F50B8, (unint64_t *)&qword_1013DE630, (uint64_t)&protocol conformance descriptor for UUID);
}

void sub_10081E64C(uint64_t a1, uint64_t a2)
{
  sub_10081F4F0(a1, a2, type metadata accessor for CRLThrottleInfo, &qword_1013F50F0);
}

void sub_10081E660(uint64_t a1, uint64_t a2)
{
  sub_100823B9C(a1, a2, type metadata accessor for CRLSyncActivityThrottlingScheduler.CRLSyncActivityThrottlingState, &qword_1013F50F8);
}

void sub_10081E674(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1013F5120);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v3;
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v14 << 6);
      goto LABEL_34;
    }
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v23 >= v12)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v37 + 8 * v23);
    ++v14;
    if (!v25)
    {
      v14 = v23 + 1;
      if (v23 + 1 >= v12)
        goto LABEL_36;
      v25 = *(_QWORD *)(v37 + 8 * v14);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release(v5);
          v3 = v36;
          if ((a2 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v14 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v14 >= v12)
              goto LABEL_36;
            v25 = *(_QWORD *)(v37 + 8 * v14);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v14 = v26;
      }
    }
LABEL_33:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_34:
    v31 = 8 * v22;
    v32 = *(void **)(*(_QWORD *)(v5 + 48) + v31);
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v31);
    if ((a2 & 1) == 0)
    {
      v34 = v32;
      swift_retain(v33);
    }
    v15 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = v15 & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = 8 * v19;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + v20) = v32;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v20) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v36;
  v24 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

void sub_10081E948(uint64_t a1, uint64_t a2)
{
  sub_100824A50(a1, a2, &qword_1013F5118);
}

void sub_10081E954(uint64_t a1, uint64_t a2)
{
  sub_10081E960(a1, a2, &qword_1013F4F48);
}

void sub_10081E960(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  int64_t v15;
  Swift::Int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_1004B804C(a3);
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = v8;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_43;
  v10 = 1 << *(_BYTE *)(v6 + 32);
  v38 = v4;
  v39 = v6 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v6 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 64;
  swift_retain(v6);
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v22 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v23 = v22 | (v15 << 6);
      goto LABEL_34;
    }
    v24 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v24 >= v13)
      break;
    v25 = (_QWORD *)(v6 + 64);
    v26 = *(_QWORD *)(v39 + 8 * v24);
    ++v15;
    if (!v26)
    {
      v15 = v24 + 1;
      if (v24 + 1 >= v13)
        goto LABEL_36;
      v26 = *(_QWORD *)(v39 + 8 * v15);
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v13)
        {
LABEL_36:
          swift_release(v6);
          v4 = v38;
          if ((a2 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = *(_QWORD *)(v39 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            v15 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v15 >= v13)
              goto LABEL_36;
            v26 = *(_QWORD *)(v39 + 8 * v15);
            ++v27;
            if (v26)
              goto LABEL_33;
          }
        }
        v15 = v27;
      }
    }
LABEL_33:
    v12 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v15 << 6);
LABEL_34:
    v32 = 8 * v23;
    v33 = *(void **)(*(_QWORD *)(v6 + 48) + v32);
    v34 = *(void **)(*(_QWORD *)(v6 + 56) + v32);
    if ((a2 & 1) == 0)
    {
      v35 = v33;
      v36 = v34;
    }
    v16 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v9 + 40));
    v17 = -1 << *(_BYTE *)(v9 + 32);
    v18 = v16 & ~v17;
    v19 = v18 >> 6;
    if (((-1 << v18) & ~*(_QWORD *)(v14 + 8 * (v18 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v14 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v17) >> 6;
      do
      {
        if (++v19 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v30 = v19 == v29;
        if (v19 == v29)
          v19 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v14 + 8 * v19);
      }
      while (v31 == -1);
      v20 = __clz(__rbit64(~v31)) + (v19 << 6);
    }
    *(_QWORD *)(v14 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    v21 = 8 * v20;
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + v21) = v33;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + v21) = v34;
    ++*(_QWORD *)(v9 + 16);
  }
  swift_release(v6);
  v4 = v38;
  v25 = (_QWORD *)(v6 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v37 = 1 << *(_BYTE *)(v6 + 32);
  if (v37 >= 64)
    bzero(v25, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v37;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_43:
  swift_release(v6);
  *v4 = v9;
}

void sub_10081EC2C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1013F5130);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v3;
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v14 << 6);
      goto LABEL_34;
    }
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v23 >= v12)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v37 + 8 * v23);
    ++v14;
    if (!v25)
    {
      v14 = v23 + 1;
      if (v23 + 1 >= v12)
        goto LABEL_36;
      v25 = *(_QWORD *)(v37 + 8 * v14);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release(v5);
          v3 = v36;
          if ((a2 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v14 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v14 >= v12)
              goto LABEL_36;
            v25 = *(_QWORD *)(v37 + 8 * v14);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v14 = v26;
      }
    }
LABEL_33:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_34:
    v31 = 8 * v22;
    v32 = *(void **)(*(_QWORD *)(v5 + 48) + v31);
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v31);
    if ((a2 & 1) == 0)
    {
      v34 = v32;
      swift_retain(v33);
    }
    v15 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = v15 & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = 8 * v19;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + v20) = v32;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v20) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v36;
  v24 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

void sub_10081EF00(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  _QWORD v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1013F5110);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain(v5);
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_34;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_36;
      v24 = *(_QWORD *)(v36 + 8 * v13);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v13 >= v35)
              goto LABEL_36;
            v24 = *(_QWORD *)(v36 + 8 * v13);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v13 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      swift_bridgeObjectRetain(v33);
    }
    Hasher.init(_seed:)(v38, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v38, v32, v31);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

void sub_10081F214(uint64_t a1, uint64_t a2)
{
  sub_10081FB58(a1, a2, &qword_1013F4F50);
}

void sub_10081F220(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  int64_t v15;
  Swift::Int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t *v33;
  __int128 v34;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1013F5128);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v33 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v10 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v11 = ~(-1 << v9);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v9 + 63) >> 6;
    v14 = v7 + 64;
    swift_retain(v5);
    v15 = 0;
    while (1)
    {
      if (v12)
      {
        v21 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v22 = v21 | (v15 << 6);
      }
      else
      {
        v23 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return;
        }
        if (v23 >= v13)
          goto LABEL_36;
        v24 = v10[v23];
        ++v15;
        if (!v24)
        {
          v15 = v23 + 1;
          if (v23 + 1 >= v13)
            goto LABEL_36;
          v24 = v10[v15];
          if (!v24)
          {
            v25 = v23 + 2;
            if (v25 >= v13)
            {
LABEL_36:
              swift_release(v5);
              if ((a2 & 1) == 0)
              {
                swift_release(v5);
                v3 = v33;
                goto LABEL_43;
              }
              v32 = 1 << *(_BYTE *)(v5 + 32);
              if (v32 >= 64)
                bzero((void *)(v5 + 64), ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v10 = -1 << v32;
              v3 = v33;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v24 = v10[v25];
            if (!v24)
            {
              while (1)
              {
                v15 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_45;
                if (v15 >= v13)
                  goto LABEL_36;
                v24 = v10[v15];
                ++v25;
                if (v24)
                  goto LABEL_33;
              }
            }
            v15 = v25;
          }
        }
LABEL_33:
        v12 = (v24 - 1) & v24;
        v22 = __clz(__rbit64(v24)) + (v15 << 6);
      }
      v30 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v22);
      v34 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v22);
      if ((a2 & 1) == 0)
      {
        v31 = v30;
        swift_unknownObjectRetain(v34);
      }
      v16 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
      v17 = -1 << *(_BYTE *)(v8 + 32);
      v18 = v16 & ~v17;
      v19 = v18 >> 6;
      if (((-1 << v18) & ~*(_QWORD *)(v14 + 8 * (v18 >> 6))) != 0)
      {
        v20 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v14 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v17) >> 6;
        do
        {
          if (++v19 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v28 = v19 == v27;
          if (v19 == v27)
            v19 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v14 + 8 * v19);
        }
        while (v29 == -1);
        v20 = __clz(__rbit64(~v29)) + (v19 << 6);
      }
      *(_QWORD *)(v14 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v20) = v30;
      *(_OWORD *)(*(_QWORD *)(v8 + 56) + 16 * v20) = v34;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release(v5);
LABEL_43:
  *v3 = v8;
}

void sub_10081F4F0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v7;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  _QWORD *v26;
  unint64_t v27;
  int64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  Swift::Int v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int64_t v44;
  _QWORD *v45;
  uint64_t v46;
  int v47;

  v7 = v4;
  v10 = a3(0);
  v46 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v42 - v11;
  v13 = *v7;
  if (*(_QWORD *)(*v7 + 24) > a1)
    a1 = *(_QWORD *)(*v7 + 24);
  sub_1004B804C(a4);
  v47 = a2;
  v14 = static _DictionaryStorage.resize(original:capacity:move:)(v13, a1, a2);
  v15 = v14;
  if (!*(_QWORD *)(v13 + 16))
    goto LABEL_43;
  v43 = v7;
  v16 = 1 << *(_BYTE *)(v13 + 32);
  v17 = *(_QWORD *)(v13 + 64);
  v45 = (_QWORD *)(v13 + 64);
  if (v16 < 64)
    v18 = ~(-1 << v16);
  else
    v18 = -1;
  v19 = v18 & v17;
  v44 = (unint64_t)(v16 + 63) >> 6;
  v20 = v14 + 64;
  swift_retain(v13);
  v21 = 0;
  while (1)
  {
    if (v19)
    {
      v23 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v24 = v23 | (v21 << 6);
      goto LABEL_24;
    }
    v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v25 >= v44)
      break;
    v26 = v45;
    v27 = v45[v25];
    ++v21;
    if (!v27)
    {
      v21 = v25 + 1;
      if (v25 + 1 >= v44)
        goto LABEL_36;
      v27 = v45[v21];
      if (!v27)
      {
        v28 = v25 + 2;
        if (v28 >= v44)
        {
LABEL_36:
          swift_release(v13);
          v7 = v43;
          if ((v47 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v27 = v45[v28];
        if (!v27)
        {
          while (1)
          {
            v21 = v28 + 1;
            if (__OFADD__(v28, 1))
              goto LABEL_45;
            if (v21 >= v44)
              goto LABEL_36;
            v27 = v45[v21];
            ++v28;
            if (v27)
              goto LABEL_23;
          }
        }
        v21 = v28;
      }
    }
LABEL_23:
    v19 = (v27 - 1) & v27;
    v24 = __clz(__rbit64(v27)) + (v21 << 6);
LABEL_24:
    v29 = *(void **)(*(_QWORD *)(v13 + 48) + 8 * v24);
    v30 = *(_QWORD *)(v46 + 72);
    v31 = *(_QWORD *)(v13 + 56) + v30 * v24;
    if ((v47 & 1) != 0)
    {
      sub_1004B84E0(v31, (uint64_t)v12, a3);
    }
    else
    {
      sub_1004B8460(v31, (uint64_t)v12, a3);
      v32 = v29;
    }
    v33 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v15 + 40));
    v34 = -1 << *(_BYTE *)(v15 + 32);
    v35 = v33 & ~v34;
    v36 = v35 >> 6;
    if (((-1 << v35) & ~*(_QWORD *)(v20 + 8 * (v35 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v35) & ~*(_QWORD *)(v20 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v37 = 0;
      v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v39 = v36 == v38;
        if (v36 == v38)
          v36 = 0;
        v37 |= v39;
        v40 = *(_QWORD *)(v20 + 8 * v36);
      }
      while (v40 == -1);
      v22 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(_QWORD *)(v20 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(_QWORD *)(*(_QWORD *)(v15 + 48) + 8 * v22) = v29;
    sub_1004B84E0((uint64_t)v12, *(_QWORD *)(v15 + 56) + v30 * v22, a3);
    ++*(_QWORD *)(v15 + 16);
  }
  swift_release(v13);
  v7 = v43;
  v26 = v45;
  if ((v47 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v41 = 1 << *(_BYTE *)(v13 + 32);
  if (v41 >= 64)
    bzero(v26, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v26 = -1 << v41;
  *(_QWORD *)(v13 + 16) = 0;
LABEL_43:
  swift_release(v13);
  *v7 = v15;
}

void sub_10081F83C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  void *v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  unint64_t v34;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  uint64_t i;
  char v42;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1013F50A0);
  v42 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v38 = v2;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v40 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v39 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    swift_retain(v5);
    v13 = 0;
    for (i = v5; ; v5 = i)
    {
      if (v11)
      {
        v20 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v21 = v20 | (v13 << 6);
      }
      else
      {
        v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return;
        }
        if (v22 >= v39)
          goto LABEL_36;
        v23 = v40[v22];
        ++v13;
        if (!v23)
        {
          v13 = v22 + 1;
          if (v22 + 1 >= v39)
            goto LABEL_36;
          v23 = v40[v13];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v39)
            {
LABEL_36:
              swift_release(v5);
              v3 = v38;
              if ((v42 & 1) != 0)
              {
                v37 = 1 << *(_BYTE *)(v5 + 32);
                if (v37 >= 64)
                  bzero(v40, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v40 = -1 << v37;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v23 = v40[v24];
            if (!v23)
            {
              while (1)
              {
                v13 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_43;
                if (v13 >= v39)
                  goto LABEL_36;
                v23 = v40[v13];
                ++v24;
                if (v23)
                  goto LABEL_33;
              }
            }
            v13 = v24;
          }
        }
LABEL_33:
        v11 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      v29 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v21);
      v30 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 40 * v21);
      v31 = *v30;
      v32 = v30[1];
      v33 = (void *)v30[2];
      v34 = v30[3];
      v35 = (void *)v30[4];
      if ((v42 & 1) == 0)
      {
        v36 = v29;
        sub_1007B0D28(v31, v32, v33, v34, v35);
      }
      v14 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = v14 & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v27 = v17 == v26;
          if (v17 == v26)
            v17 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v12 + 8 * v17);
        }
        while (v28 == -1);
        v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }
      *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v18) = v29;
      v19 = (uint64_t *)(*(_QWORD *)(v8 + 56) + 40 * v18);
      *v19 = v31;
      v19[1] = v32;
      v19[2] = (uint64_t)v33;
      v19[3] = v34;
      v19[4] = (uint64_t)v35;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release(v5);
  *v3 = v8;
}

void sub_10081FB4C(uint64_t a1, uint64_t a2)
{
  sub_10081FB58(a1, a2, &qword_1013F50D8);
}

void sub_10081FB58(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_1004B804C(a3);
  v38 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = v8;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_43;
  v10 = 1 << *(_BYTE *)(v6 + 32);
  v37 = v6 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v6 + 64);
  v36 = (unint64_t)(v10 + 63) >> 6;
  v13 = v8 + 64;
  swift_retain(v6);
  v14 = 0;
  while (1)
  {
    if (v12)
    {
      v21 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v22 = v21 | (v14 << 6);
      goto LABEL_34;
    }
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v23 >= v36)
      break;
    v24 = (_QWORD *)(v6 + 64);
    v25 = *(_QWORD *)(v37 + 8 * v23);
    ++v14;
    if (!v25)
    {
      v14 = v23 + 1;
      if (v23 + 1 >= v36)
        goto LABEL_36;
      v25 = *(_QWORD *)(v37 + 8 * v14);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v36)
        {
LABEL_36:
          swift_release(v6);
          if ((v38 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v14 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v14 >= v36)
              goto LABEL_36;
            v25 = *(_QWORD *)(v37 + 8 * v14);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v14 = v26;
      }
    }
LABEL_33:
    v12 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_34:
    v31 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v22);
    v33 = *v31;
    v32 = v31[1];
    v34 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v22);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain(v31[1]);
      swift_retain(v34);
    }
    Hasher.init(_seed:)(v39, *(_QWORD *)(v9 + 40));
    String.hash(into:)(v39, v33, v32);
    v15 = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v9 + 32);
    v17 = v15 & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v19);
    *v20 = v33;
    v20[1] = v32;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v19) = v34;
    ++*(_QWORD *)(v9 + 16);
  }
  swift_release(v6);
  v24 = (_QWORD *)(v6 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v6 + 32);
  if (v35 >= 64)
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v35;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_43:
  swift_release(v6);
  *v4 = v9;
}

void sub_10081FE68(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  Swift::UInt v29;
  uint64_t *v30;
  void *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  _QWORD *v37;
  char v38;
  uint64_t v39[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1013F50E8);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 0;
    v37 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v35 = v3;
    v36 = (unint64_t)(v10 + 63) >> 6;
    v13 = v7 + 64;
    while (1)
    {
      if (v12)
      {
        v20 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v21 = v20 | (v9 << 6);
      }
      else
      {
        v22 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return;
        }
        if (v22 >= v36)
          goto LABEL_36;
        v23 = v37[v22];
        ++v9;
        if (!v23)
        {
          v9 = v22 + 1;
          if (v22 + 1 >= v36)
            goto LABEL_36;
          v23 = v37[v9];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v36)
            {
LABEL_36:
              if ((v38 & 1) == 0)
              {
                swift_release(v5);
                v3 = v35;
                goto LABEL_43;
              }
              v34 = 1 << *(_BYTE *)(v5 + 32);
              if (v34 >= 64)
                bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v37 = -1 << v34;
              v3 = v35;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v23 = v37[v24];
            if (!v23)
            {
              while (1)
              {
                v9 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_45;
                if (v9 >= v36)
                  goto LABEL_36;
                v23 = v37[v9];
                ++v24;
                if (v23)
                  goto LABEL_33;
              }
            }
            v9 = v24;
          }
        }
LABEL_33:
        v12 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v9 << 6);
      }
      v29 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v21);
      v30 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v21);
      v32 = *v30;
      v31 = (void *)v30[1];
      if ((v38 & 1) == 0)
        v33 = v31;
      Hasher.init(_seed:)(v39, *(_QWORD *)(v8 + 40));
      Hasher._combine(_:)(v29);
      v14 = Hasher._finalize()();
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = v14 & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v13 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v13 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v27 = v17 == v26;
          if (v17 == v26)
            v17 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v13 + 8 * v17);
        }
        while (v28 == -1);
        v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }
      *(_QWORD *)(v13 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v18) = v29;
      v19 = (_QWORD *)(*(_QWORD *)(v8 + 56) + 16 * v18);
      *v19 = v32;
      v19[1] = v31;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release(v5);
LABEL_43:
  *v3 = v8;
}

void sub_100820144(uint64_t a1, uint64_t a2)
{
  sub_100820158(a1, a2, _s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa, &qword_1013F5018);
}

void sub_100820158(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  __n128 v23;
  int64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  _QWORD *v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  int64_t v49;
  _QWORD *v50;
  uint64_t i;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t (*v55)(_QWORD);

  v6 = v4;
  v55 = a3;
  v9 = a3(0);
  v52 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v54 = (uint64_t)&v48 - v10;
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *v6;
  if (*(_QWORD *)(*v6 + 24) > a1)
    a1 = *(_QWORD *)(*v6 + 24);
  sub_1004B804C(a4);
  v53 = a2;
  v16 = static _DictionaryStorage.resize(original:capacity:move:)(v15, a1, a2);
  v17 = v16;
  if (!*(_QWORD *)(v15 + 16))
    goto LABEL_43;
  v18 = 1 << *(_BYTE *)(v15 + 32);
  v19 = *(_QWORD *)(v15 + 64);
  v50 = (_QWORD *)(v15 + 64);
  if (v18 < 64)
    v20 = ~(-1 << v18);
  else
    v20 = -1;
  v21 = v20 & v19;
  v48 = v6;
  v49 = (unint64_t)(v18 + 63) >> 6;
  v22 = v16 + 64;
  v23 = swift_retain(v15);
  v24 = 0;
  for (i = v15; ; v15 = i)
  {
    if (v21)
    {
      v26 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      v27 = v26 | (v24 << 6);
      goto LABEL_24;
    }
    v28 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v28 >= v49)
      break;
    v29 = v50;
    v30 = v50[v28];
    ++v24;
    if (!v30)
    {
      v24 = v28 + 1;
      if (v28 + 1 >= v49)
        goto LABEL_36;
      v30 = v50[v24];
      if (!v30)
      {
        v31 = v28 + 2;
        if (v31 >= v49)
        {
LABEL_36:
          swift_release(v15);
          v6 = v48;
          if ((v53 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v30 = v50[v31];
        if (!v30)
        {
          while (1)
          {
            v24 = v31 + 1;
            if (__OFADD__(v31, 1))
              goto LABEL_45;
            if (v24 >= v49)
              goto LABEL_36;
            v30 = v50[v24];
            ++v31;
            if (v30)
              goto LABEL_23;
          }
        }
        v24 = v31;
      }
    }
LABEL_23:
    v21 = (v30 - 1) & v30;
    v27 = __clz(__rbit64(v30)) + (v24 << 6);
LABEL_24:
    v32 = *(_QWORD *)(v12 + 72);
    v33 = *(_QWORD *)(v15 + 48) + v32 * v27;
    if ((v53 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v12 + 32))(v14, v33, v11, v23);
      v34 = *(_QWORD *)(v15 + 56);
      v35 = *(_QWORD *)(v52 + 72);
      sub_1004B84E0(v34 + v35 * v27, v54, v55);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v12 + 16))(v14, v33, v11, v23);
      v36 = *(_QWORD *)(v15 + 56);
      v35 = *(_QWORD *)(v52 + 72);
      sub_1004B8460(v36 + v35 * v27, v54, v55);
    }
    v37 = *(_QWORD *)(v17 + 40);
    v38 = sub_1005034A0((unint64_t *)&qword_1013DE630, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v39 = dispatch thunk of Hashable._rawHashValue(seed:)(v37, v11, v38);
    v40 = -1 << *(_BYTE *)(v17 + 32);
    v41 = v39 & ~v40;
    v42 = v41 >> 6;
    if (((-1 << v41) & ~*(_QWORD *)(v22 + 8 * (v41 >> 6))) != 0)
    {
      v25 = __clz(__rbit64((-1 << v41) & ~*(_QWORD *)(v22 + 8 * (v41 >> 6)))) | v41 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v43 = 0;
      v44 = (unint64_t)(63 - v40) >> 6;
      do
      {
        if (++v42 == v44 && (v43 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v45 = v42 == v44;
        if (v42 == v44)
          v42 = 0;
        v43 |= v45;
        v46 = *(_QWORD *)(v22 + 8 * v42);
      }
      while (v46 == -1);
      v25 = __clz(__rbit64(~v46)) + (v42 << 6);
    }
    *(_QWORD *)(v22 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(*(_QWORD *)(v17 + 48) + v32 * v25, v14, v11);
    sub_1004B84E0(v54, *(_QWORD *)(v17 + 56) + v35 * v25, v55);
    ++*(_QWORD *)(v17 + 16);
  }
  swift_release(v15);
  v6 = v48;
  v29 = v50;
  if ((v53 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v47 = 1 << *(_BYTE *)(v15 + 32);
  if (v47 >= 64)
    bzero(v29, ((unint64_t)(v47 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v29 = -1 << v47;
  *(_QWORD *)(v15 + 16) = 0;
LABEL_43:
  swift_release(v15);
  *v6 = v17;
}

void sub_100820550(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  Swift::Int v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int64_t v43;
  _QWORD *v44;
  uint64_t v45;
  int v46;
  _QWORD v47[9];

  v3 = v2;
  v6 = type metadata accessor for CRLBoardIdentifier(0);
  v45 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1013F4DE0);
  v46 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_43;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v44 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v42 = v2;
  v43 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  swift_retain(v9);
  v17 = 0;
  while (1)
  {
    if (v15)
    {
      v19 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v20 = v19 | (v17 << 6);
      goto LABEL_24;
    }
    v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v21 >= v43)
      break;
    v22 = v44;
    v23 = v44[v21];
    ++v17;
    if (!v23)
    {
      v17 = v21 + 1;
      if (v21 + 1 >= v43)
        goto LABEL_36;
      v23 = v44[v17];
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v43)
        {
LABEL_36:
          swift_release(v9);
          v3 = v42;
          if ((v46 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v23 = v44[v24];
        if (!v23)
        {
          while (1)
          {
            v17 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_45;
            if (v17 >= v43)
              goto LABEL_36;
            v23 = v44[v17];
            ++v24;
            if (v23)
              goto LABEL_23;
          }
        }
        v17 = v24;
      }
    }
LABEL_23:
    v15 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_24:
    v25 = *(_QWORD *)(v45 + 72);
    v26 = *(_QWORD *)(v9 + 48) + v25 * v20;
    if ((v46 & 1) != 0)
      sub_1004B84E0(v26, (uint64_t)v8, type metadata accessor for CRLBoardIdentifier);
    else
      sub_1004B8460(v26, (uint64_t)v8, type metadata accessor for CRLBoardIdentifier);
    v27 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v20);
    Hasher.init(_seed:)(v47, *(_QWORD *)(v11 + 40));
    v28 = type metadata accessor for UUID(0);
    v29 = sub_1005034A0((unint64_t *)&qword_1013DE630, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v47, v28, v29);
    v30 = &v8[*(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20)];
    v31 = *(_QWORD *)v30;
    v32 = *((_QWORD *)v30 + 1);
    swift_bridgeObjectRetain(v32);
    String.hash(into:)(v47, v31, v32);
    swift_bridgeObjectRelease(v32);
    v33 = Hasher._finalize()();
    v34 = -1 << *(_BYTE *)(v11 + 32);
    v35 = v33 & ~v34;
    v36 = v35 >> 6;
    if (((-1 << v35) & ~*(_QWORD *)(v16 + 8 * (v35 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v35) & ~*(_QWORD *)(v16 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v37 = 0;
      v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v39 = v36 == v38;
        if (v36 == v38)
          v36 = 0;
        v37 |= v39;
        v40 = *(_QWORD *)(v16 + 8 * v36);
      }
      while (v40 == -1);
      v18 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(_QWORD *)(v16 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    sub_1004B84E0((uint64_t)v8, *(_QWORD *)(v11 + 48) + v25 * v18, type metadata accessor for CRLBoardIdentifier);
    *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v18) = v27;
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release(v9);
  v3 = v42;
  v22 = v44;
  if ((v46 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v41 = 1 << *(_BYTE *)(v9 + 32);
  if (v41 >= 64)
    bzero(v22, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v41;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_43:
  swift_release(v9);
  *v3 = v11;
}

void sub_100820930(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  __int128 v33;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1013F50A8);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v32 = v3;
    v9 = 0;
    v10 = (_QWORD *)(v5 + 64);
    v11 = 1 << *(_BYTE *)(v5 + 32);
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v5 + 64);
    v14 = (unint64_t)(v11 + 63) >> 6;
    v15 = v7 + 64;
    while (1)
    {
      if (v13)
      {
        v21 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v22 = v21 | (v9 << 6);
      }
      else
      {
        v23 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return;
        }
        if (v23 >= v14)
          goto LABEL_36;
        v24 = v10[v23];
        ++v9;
        if (!v24)
        {
          v9 = v23 + 1;
          if (v23 + 1 >= v14)
            goto LABEL_36;
          v24 = v10[v9];
          if (!v24)
          {
            v25 = v23 + 2;
            if (v25 >= v14)
            {
LABEL_36:
              if ((a2 & 1) == 0)
              {
                swift_release(v5);
                v3 = v32;
                goto LABEL_43;
              }
              v31 = 1 << *(_BYTE *)(v5 + 32);
              if (v31 >= 64)
                bzero((void *)(v5 + 64), ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v10 = -1 << v31;
              v3 = v32;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v24 = v10[v25];
            if (!v24)
            {
              while (1)
              {
                v9 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_45;
                if (v9 >= v14)
                  goto LABEL_36;
                v24 = v10[v9];
                ++v25;
                if (v24)
                  goto LABEL_33;
              }
            }
            v9 = v25;
          }
        }
LABEL_33:
        v13 = (v24 - 1) & v24;
        v22 = __clz(__rbit64(v24)) + (v9 << 6);
      }
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v22);
      v33 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v22);
      if ((a2 & 1) == 0)
        sub_1004BE310(v33, *((unint64_t *)&v33 + 1));
      v16 = static Hasher._hash(seed:_:)(*(_QWORD *)(v8 + 40), v30);
      v17 = -1 << *(_BYTE *)(v8 + 32);
      v18 = v16 & ~v17;
      v19 = v18 >> 6;
      if (((-1 << v18) & ~*(_QWORD *)(v15 + 8 * (v18 >> 6))) != 0)
      {
        v20 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v15 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v17) >> 6;
        do
        {
          if (++v19 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v28 = v19 == v27;
          if (v19 == v27)
            v19 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v15 + 8 * v19);
        }
        while (v29 == -1);
        v20 = __clz(__rbit64(~v29)) + (v19 << 6);
      }
      *(_QWORD *)(v15 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v20) = v30;
      *(_OWORD *)(*(_QWORD *)(v8 + 56) + 16 * v20) = v33;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release(v5);
LABEL_43:
  *v3 = v8;
}

void sub_100820BF4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (**v29)(char *, unint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  Swift::Int v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  int64_t v49;
  _QWORD *v50;
  void (**v51)(char *, unint64_t, uint64_t);
  uint64_t v52;
  int v53;
  char *v54;
  void (**v55)(unint64_t, char *, uint64_t);
  char *v56;
  uint64_t v57;
  _QWORD v58[10];

  v3 = v2;
  v57 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v56 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CRLBoardIdentifier(0);
  v52 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v54 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1013F5058);
  v53 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_43;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v50 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v48 = v2;
  v49 = (unint64_t)(v13 + 63) >> 6;
  v51 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  v55 = (void (**)(unint64_t, char *, uint64_t))(v6 + 32);
  v17 = v11 + 64;
  swift_retain(v10);
  v18 = 0;
  v19 = (uint64_t)v54;
  while (1)
  {
    if (v16)
    {
      v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v22 = v21 | (v18 << 6);
      goto LABEL_24;
    }
    v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v23 >= v49)
      break;
    v24 = v50;
    v25 = v50[v23];
    ++v18;
    if (!v25)
    {
      v18 = v23 + 1;
      if (v23 + 1 >= v49)
        goto LABEL_36;
      v25 = v50[v18];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v49)
        {
LABEL_36:
          swift_release(v10);
          v3 = v48;
          if ((v53 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v50[v26];
        if (!v25)
        {
          while (1)
          {
            v18 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v18 >= v49)
              goto LABEL_36;
            v25 = v50[v18];
            ++v26;
            if (v25)
              goto LABEL_23;
          }
        }
        v18 = v26;
      }
    }
LABEL_23:
    v16 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_24:
    v27 = *(_QWORD *)(v52 + 72);
    v28 = *(_QWORD *)(v10 + 48) + v27 * v22;
    if ((v53 & 1) != 0)
    {
      sub_1004B84E0(v28, v19, type metadata accessor for CRLBoardIdentifier);
      v29 = (void (**)(char *, unint64_t, uint64_t))v55;
    }
    else
    {
      sub_1004B8460(v28, v19, type metadata accessor for CRLBoardIdentifier);
      v29 = v51;
    }
    v30 = v10;
    v31 = *(_QWORD *)(v10 + 56);
    v32 = v6;
    v33 = *(_QWORD *)(v6 + 72);
    (*v29)(v56, v31 + v33 * v22, v57);
    Hasher.init(_seed:)(v58, *(_QWORD *)(v12 + 40));
    v34 = type metadata accessor for UUID(0);
    v35 = sub_1005034A0((unint64_t *)&qword_1013DE630, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v58, v34, v35);
    v36 = (uint64_t *)(v19 + *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20));
    v37 = *v36;
    v38 = v36[1];
    swift_bridgeObjectRetain(v38);
    String.hash(into:)(v58, v37, v38);
    swift_bridgeObjectRelease();
    v39 = Hasher._finalize()();
    v40 = -1 << *(_BYTE *)(v12 + 32);
    v41 = v39 & ~v40;
    v42 = v41 >> 6;
    if (((-1 << v41) & ~*(_QWORD *)(v17 + 8 * (v41 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v41) & ~*(_QWORD *)(v17 + 8 * (v41 >> 6)))) | v41 & 0x7FFFFFFFFFFFFFC0;
      v19 = (uint64_t)v54;
    }
    else
    {
      v43 = 0;
      v44 = (unint64_t)(63 - v40) >> 6;
      v19 = (uint64_t)v54;
      do
      {
        if (++v42 == v44 && (v43 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v45 = v42 == v44;
        if (v42 == v44)
          v42 = 0;
        v43 |= v45;
        v46 = *(_QWORD *)(v17 + 8 * v42);
      }
      while (v46 == -1);
      v20 = __clz(__rbit64(~v46)) + (v42 << 6);
    }
    *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    sub_1004B84E0(v19, *(_QWORD *)(v12 + 48) + v27 * v20, type metadata accessor for CRLBoardIdentifier);
    (*v55)(*(_QWORD *)(v12 + 56) + v33 * v20, v56, v57);
    ++*(_QWORD *)(v12 + 16);
    v6 = v32;
    v10 = v30;
  }
  swift_release(v10);
  v3 = v48;
  v24 = v50;
  if ((v53 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v47 = 1 << *(_BYTE *)(v10 + 32);
  if (v47 >= 64)
    bzero(v24, ((unint64_t)(v47 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v47;
  *(_QWORD *)(v10 + 16) = 0;
LABEL_43:
  swift_release(v10);
  *v3 = v12;
}

void sub_100821058(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1013F5050);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v3;
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v14 << 6);
      goto LABEL_34;
    }
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v23 >= v12)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v37 + 8 * v23);
    ++v14;
    if (!v25)
    {
      v14 = v23 + 1;
      if (v23 + 1 >= v12)
        goto LABEL_36;
      v25 = *(_QWORD *)(v37 + 8 * v14);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release(v5);
          v3 = v36;
          if ((v38 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v14 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v14 >= v12)
              goto LABEL_36;
            v25 = *(_QWORD *)(v37 + 8 * v14);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v14 = v26;
      }
    }
LABEL_33:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_34:
    v31 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v22);
    v33 = *v31;
    v32 = v31[1];
    v34 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v22);
    if ((v38 & 1) == 0)
      swift_bridgeObjectRetain(v31[1]);
    Hasher.init(_seed:)(v39, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v39, v33, v32);
    v15 = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = v15 & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v19);
    *v20 = v33;
    v20[1] = v32;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v19) = v34;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v36;
  v24 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

void sub_10082135C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  Swift::UInt v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t *v32;
  int64_t v33;
  _QWORD *v34;
  uint64_t v35[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1013F5028);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 0;
    v34 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v32 = v3;
    v33 = (unint64_t)(v10 + 63) >> 6;
    v13 = v7 + 64;
    while (1)
    {
      if (v12)
      {
        v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v20 = v19 | (v9 << 6);
      }
      else
      {
        v21 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return;
        }
        if (v21 >= v33)
          goto LABEL_36;
        v22 = v34[v21];
        ++v9;
        if (!v22)
        {
          v9 = v21 + 1;
          if (v21 + 1 >= v33)
            goto LABEL_36;
          v22 = v34[v9];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v33)
            {
LABEL_36:
              if ((a2 & 1) == 0)
              {
                swift_release(v5);
                v3 = v32;
                goto LABEL_43;
              }
              v31 = 1 << *(_BYTE *)(v5 + 32);
              if (v31 >= 64)
                bzero(v34, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v34 = -1 << v31;
              v3 = v32;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v22 = v34[v23];
            if (!v22)
            {
              while (1)
              {
                v9 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_45;
                if (v9 >= v33)
                  goto LABEL_36;
                v22 = v34[v9];
                ++v23;
                if (v22)
                  goto LABEL_33;
              }
            }
            v9 = v23;
          }
        }
LABEL_33:
        v12 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v9 << 6);
      }
      v28 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v20);
      v29 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v20);
      if ((a2 & 1) == 0)
        v30 = v29;
      Hasher.init(_seed:)(v35, *(_QWORD *)(v8 + 40));
      Hasher._combine(_:)(v28);
      v14 = Hasher._finalize()();
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = v14 & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v13 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v13 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v26 = v17 == v25;
          if (v17 == v25)
            v17 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v17);
        }
        while (v27 == -1);
        v18 = __clz(__rbit64(~v27)) + (v17 << 6);
      }
      *(_QWORD *)(v13 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(_BYTE *)(*(_QWORD *)(v8 + 48) + v18) = v28;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v29;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release(v5);
LABEL_43:
  *v3 = v8;
}

void sub_100821624(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  char v39;
  _QWORD v40[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1013F5020);
  v39 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v38 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v36 = v3;
  v37 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain(v5);
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_34;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v22 >= v37)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v38 + 8 * v22);
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v37)
        goto LABEL_36;
      v24 = *(_QWORD *)(v38 + 8 * v13);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_36:
          swift_release(v5);
          v3 = v36;
          if ((v39 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v13 >= v37)
              goto LABEL_36;
            v24 = *(_QWORD *)(v38 + 8 * v13);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v13 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      v34 = v33;
      swift_bridgeObjectRetain(v31);
    }
    Hasher.init(_seed:)(v40, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v40, v32, v31);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v36;
  v23 = (_QWORD *)(v5 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

void sub_100821930(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  _QWORD *v37;
  uint64_t i;
  char v39;
  _QWORD v40[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1013F4F90);
  v39 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v37 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v36 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    swift_retain(v5);
    v13 = 0;
    for (i = v5; ; v5 = i)
    {
      if (v11)
      {
        v20 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v21 = v20 | (v13 << 6);
      }
      else
      {
        v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return;
        }
        if (v22 >= v36)
          goto LABEL_36;
        v23 = v37[v22];
        ++v13;
        if (!v23)
        {
          v13 = v22 + 1;
          if (v22 + 1 >= v36)
            goto LABEL_36;
          v23 = v37[v13];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v36)
            {
LABEL_36:
              swift_release(v5);
              v3 = v2;
              if ((v39 & 1) != 0)
              {
                v35 = 1 << *(_BYTE *)(v5 + 32);
                if (v35 >= 64)
                  bzero(v37, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v37 = -1 << v35;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v23 = v37[v24];
            if (!v23)
            {
              while (1)
              {
                v13 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_43;
                if (v13 >= v36)
                  goto LABEL_36;
                v23 = v37[v13];
                ++v24;
                if (v23)
                  goto LABEL_33;
              }
            }
            v13 = v24;
          }
        }
LABEL_33:
        v11 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      v29 = *(_QWORD *)(v5 + 48) + 32 * v21;
      v30 = *(id *)v29;
      v31 = *(_QWORD *)(v29 + 8);
      v32 = *(_QWORD *)(v29 + 16);
      v33 = *(_BYTE *)(v29 + 24);
      v34 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
      if ((v39 & 1) == 0)
      {
        sub_1004DD884(*(id *)v29, *(id *)(v29 + 8), *(_QWORD *)(v29 + 16), *(_BYTE *)(v29 + 24));
        swift_bridgeObjectRetain(v34);
      }
      Hasher.init(_seed:)(v40, *(_QWORD *)(v8 + 40));
      sub_1009E3D90((uint64_t)v40, (uint64_t)v30, v31, v32, v33);
      v14 = Hasher._finalize()();
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = v14 & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v27 = v17 == v26;
          if (v17 == v26)
            v17 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v12 + 8 * v17);
        }
        while (v28 == -1);
        v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }
      *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = *(_QWORD *)(v8 + 48) + 32 * v18;
      *(_QWORD *)v19 = v30;
      *(_QWORD *)(v19 + 8) = v31;
      *(_QWORD *)(v19 + 16) = v32;
      *(_BYTE *)(v19 + 24) = v33;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v34;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release(v5);
  *v3 = v8;
}

void sub_100821C58(uint64_t a1, uint64_t a2)
{
  sub_10082236C(a1, a2, (uint64_t (*)(_QWORD))&type metadata accessor for URL, &qword_1013F5000);
}

void sub_100821C6C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::Int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1013F4FF8);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v41 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_25;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return;
    }
    if (v22 >= v12)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v41 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v12)
        goto LABEL_37;
      v24 = *(_QWORD *)(v41 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v12)
        {
LABEL_37:
          swift_release(v5);
          if ((a2 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v24 = *(_QWORD *)(v41 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_46;
            if (v14 >= v12)
              goto LABEL_37;
            v24 = *(_QWORD *)(v41 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_24;
          }
        }
        v14 = v25;
      }
    }
LABEL_24:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_25:
    v26 = *(_QWORD *)(v5 + 48) + 40 * v21;
    if ((a2 & 1) != 0)
    {
      v27 = *(_OWORD *)v26;
      v28 = *(_OWORD *)(v26 + 16);
      v45 = *(_QWORD *)(v26 + 32);
      v43 = v27;
      v44 = v28;
    }
    else
    {
      sub_1004B8968(v26, (uint64_t)&v43);
    }
    v29 = *(_QWORD *)(v5 + 56) + 32 * v21;
    v30 = *(_QWORD *)(v29 + 24);
    v42 = *(_OWORD *)(v29 + 8);
    v31 = *(_QWORD *)v29;
    v32 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v33 = -1 << *(_BYTE *)(v8 + 32);
    v34 = v32 & ~v33;
    v35 = v34 >> 6;
    if (((-1 << v34) & ~*(_QWORD *)(v13 + 8 * (v34 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v34) & ~*(_QWORD *)(v13 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v36 = 0;
      v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v38 = v35 == v37;
        if (v35 == v37)
          v35 = 0;
        v36 |= v38;
        v39 = *(_QWORD *)(v13 + 8 * v35);
      }
      while (v39 == -1);
      v15 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(_QWORD *)(v13 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = *(_QWORD *)(v8 + 48) + 40 * v15;
    v17 = v43;
    v18 = v44;
    *(_QWORD *)(v16 + 32) = v45;
    *(_OWORD *)v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    v19 = *(_QWORD *)(v8 + 56) + 32 * v15;
    *(_QWORD *)v19 = v31;
    *(_OWORD *)(v19 + 8) = v42;
    *(_QWORD *)(v19 + 24) = v30;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v23 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v40 = 1 << *(_BYTE *)(v5 + 32);
  if (v40 >= 64)
    bzero(v23, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v40;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  swift_release(v5);
  *v3 = v8;
}

void sub_100821F88(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  Swift::Int v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int64_t v43;
  _QWORD *v44;
  uint64_t v45;
  int v46;
  _QWORD v47[9];

  v3 = v2;
  v6 = type metadata accessor for CRLBoardIdentifier(0);
  v45 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1013F4E38);
  v46 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_43;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v44 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v42 = v2;
  v43 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  swift_retain(v9);
  v17 = 0;
  while (1)
  {
    if (v15)
    {
      v19 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v20 = v19 | (v17 << 6);
      goto LABEL_24;
    }
    v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v21 >= v43)
      break;
    v22 = v44;
    v23 = v44[v21];
    ++v17;
    if (!v23)
    {
      v17 = v21 + 1;
      if (v21 + 1 >= v43)
        goto LABEL_36;
      v23 = v44[v17];
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v43)
        {
LABEL_36:
          swift_release(v9);
          v3 = v42;
          if ((v46 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v23 = v44[v24];
        if (!v23)
        {
          while (1)
          {
            v17 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_45;
            if (v17 >= v43)
              goto LABEL_36;
            v23 = v44[v17];
            ++v24;
            if (v23)
              goto LABEL_23;
          }
        }
        v17 = v24;
      }
    }
LABEL_23:
    v15 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_24:
    v25 = *(_QWORD *)(v45 + 72);
    v26 = *(_QWORD *)(v9 + 48) + v25 * v20;
    if ((v46 & 1) != 0)
      sub_1004B84E0(v26, (uint64_t)v8, type metadata accessor for CRLBoardIdentifier);
    else
      sub_1004B8460(v26, (uint64_t)v8, type metadata accessor for CRLBoardIdentifier);
    v27 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v20);
    Hasher.init(_seed:)(v47, *(_QWORD *)(v11 + 40));
    v28 = type metadata accessor for UUID(0);
    v29 = sub_1005034A0((unint64_t *)&qword_1013DE630, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v47, v28, v29);
    v30 = &v8[*(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20)];
    v31 = *(_QWORD *)v30;
    v32 = *((_QWORD *)v30 + 1);
    swift_bridgeObjectRetain(v32);
    String.hash(into:)(v47, v31, v32);
    swift_bridgeObjectRelease(v32);
    v33 = Hasher._finalize()();
    v34 = -1 << *(_BYTE *)(v11 + 32);
    v35 = v33 & ~v34;
    v36 = v35 >> 6;
    if (((-1 << v35) & ~*(_QWORD *)(v16 + 8 * (v35 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v35) & ~*(_QWORD *)(v16 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v37 = 0;
      v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v39 = v36 == v38;
        if (v36 == v38)
          v36 = 0;
        v37 |= v39;
        v40 = *(_QWORD *)(v16 + 8 * v36);
      }
      while (v40 == -1);
      v18 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(_QWORD *)(v16 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    sub_1004B84E0((uint64_t)v8, *(_QWORD *)(v11 + 48) + v25 * v18, type metadata accessor for CRLBoardIdentifier);
    *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v18) = v27;
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release(v9);
  v3 = v42;
  v22 = v44;
  if ((v46 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v41 = 1 << *(_BYTE *)(v9 + 32);
  if (v41 >= 64)
    bzero(v22, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v41;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_43:
  swift_release(v9);
  *v3 = v11;
}

void sub_100822360(uint64_t a1, uint64_t a2)
{
  sub_100815290(a1, a2, &qword_1013F4DF0);
}

void sub_10082236C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  __n128 v19;
  int64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Swift::Int v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  int64_t v46;
  _QWORD *v47;
  int v48;
  char *v49;
  uint64_t v50;
  _QWORD v51[9];

  v6 = v4;
  v50 = a3(0);
  v9 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v49 = (char *)&v44 - v10;
  v11 = *v6;
  if (*(_QWORD *)(*v6 + 24) > a1)
    a1 = *(_QWORD *)(*v6 + 24);
  sub_1004B804C(a4);
  v48 = a2;
  v12 = static _DictionaryStorage.resize(original:capacity:move:)(v11, a1, a2);
  v13 = v12;
  if (!*(_QWORD *)(v11 + 16))
    goto LABEL_41;
  v45 = v6;
  v14 = 1 << *(_BYTE *)(v11 + 32);
  v15 = *(_QWORD *)(v11 + 64);
  v47 = (_QWORD *)(v11 + 64);
  if (v14 < 64)
    v16 = ~(-1 << v14);
  else
    v16 = -1;
  v17 = v16 & v15;
  v46 = (unint64_t)(v14 + 63) >> 6;
  v18 = v12 + 64;
  v19 = swift_retain(v11);
  v20 = 0;
  while (1)
  {
    if (v17)
    {
      v23 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v24 = v23 | (v20 << 6);
      goto LABEL_24;
    }
    v25 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return;
    }
    if (v25 >= v46)
      goto LABEL_36;
    v26 = v47[v25];
    ++v20;
    if (!v26)
    {
      v20 = v25 + 1;
      if (v25 + 1 >= v46)
        goto LABEL_36;
      v26 = v47[v20];
      if (!v26)
        break;
    }
LABEL_23:
    v17 = (v26 - 1) & v26;
    v24 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_24:
    v28 = *(_QWORD *)(v11 + 56);
    v29 = v11;
    v30 = (uint64_t *)(*(_QWORD *)(v11 + 48) + 16 * v24);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(v9 + 72);
    v34 = v28 + v33 * v24;
    if ((v48 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 32))(v49, v34, v50, v19);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16))(v49, v34, v50, v19);
      swift_bridgeObjectRetain(v31);
    }
    Hasher.init(_seed:)(v51, *(_QWORD *)(v13 + 40));
    String.hash(into:)(v51, v32, v31);
    v35 = Hasher._finalize()();
    v36 = -1 << *(_BYTE *)(v13 + 32);
    v37 = v35 & ~v36;
    v38 = v37 >> 6;
    if (((-1 << v37) & ~*(_QWORD *)(v18 + 8 * (v37 >> 6))) != 0)
    {
      v21 = __clz(__rbit64((-1 << v37) & ~*(_QWORD *)(v18 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v39 = 0;
      v40 = (unint64_t)(63 - v36) >> 6;
      do
      {
        if (++v38 == v40 && (v39 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v41 = v38 == v40;
        if (v38 == v40)
          v38 = 0;
        v39 |= v41;
        v42 = *(_QWORD *)(v18 + 8 * v38);
      }
      while (v42 == -1);
      v21 = __clz(__rbit64(~v42)) + (v38 << 6);
    }
    *(_QWORD *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    v22 = (_QWORD *)(*(_QWORD *)(v13 + 48) + 16 * v21);
    *v22 = v32;
    v22[1] = v31;
    (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(*(_QWORD *)(v13 + 56) + v33 * v21, v49, v50);
    ++*(_QWORD *)(v13 + 16);
    v11 = v29;
  }
  v27 = v25 + 2;
  if (v27 < v46)
  {
    v26 = v47[v27];
    if (!v26)
    {
      while (1)
      {
        v20 = v27 + 1;
        if (__OFADD__(v27, 1))
          goto LABEL_43;
        if (v20 >= v46)
          goto LABEL_36;
        v26 = v47[v20];
        ++v27;
        if (v26)
          goto LABEL_23;
      }
    }
    v20 = v27;
    goto LABEL_23;
  }
LABEL_36:
  swift_release(v11);
  v6 = v45;
  if ((v48 & 1) != 0)
  {
    v43 = 1 << *(_BYTE *)(v11 + 32);
    if (v43 >= 64)
      bzero(v47, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v47 = -1 << v43;
    *(_QWORD *)(v11 + 16) = 0;
  }
LABEL_41:
  swift_release(v11);
  *v6 = v13;
}

void sub_1008226D0(uint64_t a1, uint64_t a2)
{
  sub_1008198AC(a1, a2, type metadata accessor for CRLBoardIdentifier, &qword_1013F4E40);
}

void sub_1008226E4(uint64_t a1, uint64_t a2)
{
  sub_100815290(a1, a2, &qword_1013F4F20);
}

void sub_1008226F0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  Swift::Int v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char v62;
  unint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  int64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int64_t v84;
  _QWORD v85[10];

  v3 = v2;
  v78 = type metadata accessor for UUID(0);
  v73 = *(_QWORD *)(v78 - 8);
  __chkstk_darwin(v78);
  v72 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CRLBoardIdentifier(0);
  v76 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v77 = (uint64_t)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v67 - v10;
  v12 = type metadata accessor for CRLAssetReferrerIdentifier(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v74 = (char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v80 = (char *)&v67 - v16;
  v17 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_1004B804C(&qword_1013F5190);
  v79 = a2;
  v18 = static _DictionaryStorage.resize(original:capacity:move:)(v17, a1, a2);
  v19 = v18;
  if (!*(_QWORD *)(v17 + 16))
    goto LABEL_44;
  v67 = v3;
  v20 = 1 << *(_BYTE *)(v17 + 32);
  v21 = *(_QWORD *)(v17 + 64);
  v69 = (_QWORD *)(v17 + 64);
  if (v20 < 64)
    v22 = ~(-1 << v20);
  else
    v22 = -1;
  v23 = v22 & v21;
  v68 = (unint64_t)(v20 + 63) >> 6;
  v24 = v18 + 64;
  swift_retain(v17);
  v25 = 0;
  v75 = v17;
  v26 = (uint64_t)v74;
  v27 = (uint64_t)v80;
  v71 = v12;
  v70 = v13;
  while (1)
  {
    if (v23)
    {
      v83 = (v23 - 1) & v23;
      v30 = __clz(__rbit64(v23)) | (v25 << 6);
      goto LABEL_24;
    }
    v31 = v25 + 1;
    if (__OFADD__(v25, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return;
    }
    if (v31 >= v68)
      goto LABEL_39;
    v32 = v69[v31];
    ++v25;
    if (!v32)
    {
      v25 = v31 + 1;
      if (v31 + 1 >= v68)
        goto LABEL_39;
      v32 = v69[v25];
      if (!v32)
        break;
    }
LABEL_23:
    v83 = (v32 - 1) & v32;
    v30 = __clz(__rbit64(v32)) + (v25 << 6);
LABEL_24:
    v34 = *(_QWORD *)(v13 + 72);
    v35 = *(_QWORD *)(v17 + 48) + v34 * v30;
    v84 = v25;
    v82 = v34;
    if ((v79 & 1) != 0)
    {
      sub_1004B84E0(v35, v27, type metadata accessor for CRLAssetReferrerIdentifier);
      v36 = *(_QWORD *)(v17 + 56);
      v81 = *(_QWORD *)(v76 + 72);
      sub_1004B84E0(v36 + v81 * v30, (uint64_t)v11, type metadata accessor for CRLBoardIdentifier);
    }
    else
    {
      sub_1004B8460(v35, v27, type metadata accessor for CRLAssetReferrerIdentifier);
      v37 = *(_QWORD *)(v17 + 56);
      v81 = *(_QWORD *)(v76 + 72);
      sub_1004B8460(v37 + v81 * v30, (uint64_t)v11, type metadata accessor for CRLBoardIdentifier);
    }
    Hasher.init(_seed:)(v85, *(_QWORD *)(v19 + 40));
    sub_1004B8460(v27, v26, type metadata accessor for CRLAssetReferrerIdentifier);
    if (swift_getEnumCaseMultiPayload(v26, v12) == 1)
    {
      v38 = v26 + *(int *)(sub_1004B804C((uint64_t *)&unk_1013E1780) + 48);
      v39 = v73;
      v40 = v72;
      v41 = v78;
      (*(void (**)(char *, uint64_t, uint64_t))(v73 + 32))(v72, v26, v78);
      v42 = v77;
      sub_1004B84E0(v38, v77, type metadata accessor for CRLBoardIdentifier);
      Hasher._combine(_:)(1uLL);
      v43 = sub_1005034A0((unint64_t *)&qword_1013DE630, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      dispatch thunk of Hashable.hash(into:)(v85, v41, v43);
      dispatch thunk of Hashable.hash(into:)(v85, v41, v43);
      v44 = (uint64_t *)(v42 + *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20));
      v45 = *v44;
      v46 = v44[1];
      swift_bridgeObjectRetain(v46);
      String.hash(into:)(v85, v45, v46);
      v47 = v46;
      v17 = v75;
      swift_bridgeObjectRelease(v47);
      v48 = v42;
      v26 = (uint64_t)v74;
      sub_1004B84A4(v48, type metadata accessor for CRLBoardIdentifier);
      v49 = *(void (**)(char *, uint64_t))(v39 + 8);
      v13 = v70;
      v50 = v40;
      v27 = (uint64_t)v80;
      v12 = v71;
      v49(v50, v41);
    }
    else
    {
      v51 = v77;
      sub_1004B84E0(v26, v77, type metadata accessor for CRLBoardIdentifier);
      Hasher._combine(_:)(0);
      v52 = sub_1005034A0((unint64_t *)&qword_1013DE630, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      dispatch thunk of Hashable.hash(into:)(v85, v78, v52);
      v53 = (uint64_t *)(v51 + *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20));
      v54 = *v53;
      v55 = v53[1];
      swift_bridgeObjectRetain(v55);
      String.hash(into:)(v85, v54, v55);
      v56 = v55;
      v17 = v75;
      swift_bridgeObjectRelease(v56);
      v57 = v51;
      v27 = (uint64_t)v80;
      sub_1004B84A4(v57, type metadata accessor for CRLBoardIdentifier);
    }
    v58 = Hasher._finalize()();
    v59 = -1 << *(_BYTE *)(v19 + 32);
    v60 = v58 & ~v59;
    v61 = v60 >> 6;
    if (((-1 << v60) & ~*(_QWORD *)(v24 + 8 * (v60 >> 6))) != 0)
    {
      v28 = __clz(__rbit64((-1 << v60) & ~*(_QWORD *)(v24 + 8 * (v60 >> 6)))) | v60 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v62 = 0;
      v63 = (unint64_t)(63 - v59) >> 6;
      do
      {
        if (++v61 == v63 && (v62 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v64 = v61 == v63;
        if (v61 == v63)
          v61 = 0;
        v62 |= v64;
        v65 = *(_QWORD *)(v24 + 8 * v61);
      }
      while (v65 == -1);
      v28 = __clz(__rbit64(~v65)) + (v61 << 6);
    }
    v29 = v82;
    *(_QWORD *)(v24 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
    sub_1004B84E0(v27, *(_QWORD *)(v19 + 48) + v29 * v28, type metadata accessor for CRLAssetReferrerIdentifier);
    sub_1004B84E0((uint64_t)v11, *(_QWORD *)(v19 + 56) + v81 * v28, type metadata accessor for CRLBoardIdentifier);
    ++*(_QWORD *)(v19 + 16);
    v23 = v83;
    v25 = v84;
  }
  v33 = v31 + 2;
  if (v33 < v68)
  {
    v32 = v69[v33];
    if (!v32)
    {
      while (1)
      {
        v25 = v33 + 1;
        if (__OFADD__(v33, 1))
          goto LABEL_46;
        if (v25 >= v68)
          goto LABEL_39;
        v32 = v69[v25];
        ++v33;
        if (v32)
          goto LABEL_23;
      }
    }
    v25 = v33;
    goto LABEL_23;
  }
LABEL_39:
  swift_release(v17);
  v3 = v67;
  if ((v79 & 1) != 0)
  {
    v66 = 1 << *(_BYTE *)(v17 + 32);
    if (v66 >= 64)
      bzero(v69, ((unint64_t)(v66 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v69 = -1 << v66;
    *(_QWORD *)(v17 + 16) = 0;
  }
LABEL_44:
  swift_release(v17);
  *v3 = v19;
}

void sub_100822D88(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t *a4)
{
  uint64_t *v4;
  uint64_t (*v6)(_QWORD);
  uint64_t *v7;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  _QWORD *v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  Swift::Int v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  int64_t v48;
  _QWORD *v49;
  uint64_t (*v50)(_QWORD);
  uint64_t v51;
  int v52;
  _QWORD v53[9];

  v6 = a3;
  v7 = v4;
  v10 = a3(0);
  v51 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v46 - v11;
  v13 = *v7;
  if (*(_QWORD *)(*v7 + 24) > a1)
    a1 = *(_QWORD *)(*v7 + 24);
  sub_1004B804C(a4);
  v52 = a2;
  v14 = static _DictionaryStorage.resize(original:capacity:move:)(v13, a1, a2);
  v15 = v14;
  if (!*(_QWORD *)(v13 + 16))
    goto LABEL_43;
  v16 = 1 << *(_BYTE *)(v13 + 32);
  v17 = *(_QWORD *)(v13 + 64);
  v49 = (_QWORD *)(v13 + 64);
  if (v16 < 64)
    v18 = ~(-1 << v16);
  else
    v18 = -1;
  v19 = v18 & v17;
  v47 = v7;
  v48 = (unint64_t)(v16 + 63) >> 6;
  v20 = v14 + 64;
  swift_retain(v13);
  v21 = 0;
  v50 = v6;
  while (1)
  {
    if (v19)
    {
      v23 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v24 = v23 | (v21 << 6);
      goto LABEL_24;
    }
    v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v25 >= v48)
      break;
    v26 = v49;
    v27 = v49[v25];
    ++v21;
    if (!v27)
    {
      v21 = v25 + 1;
      if (v25 + 1 >= v48)
        goto LABEL_36;
      v27 = v49[v21];
      if (!v27)
      {
        v28 = v25 + 2;
        if (v28 >= v48)
        {
LABEL_36:
          swift_release(v13);
          v7 = v47;
          if ((v52 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v27 = v49[v28];
        if (!v27)
        {
          while (1)
          {
            v21 = v28 + 1;
            if (__OFADD__(v28, 1))
              goto LABEL_45;
            if (v21 >= v48)
              goto LABEL_36;
            v27 = v49[v21];
            ++v28;
            if (v27)
              goto LABEL_23;
          }
        }
        v21 = v28;
      }
    }
LABEL_23:
    v19 = (v27 - 1) & v27;
    v24 = __clz(__rbit64(v27)) + (v21 << 6);
LABEL_24:
    v29 = *(_QWORD *)(v51 + 72);
    v30 = *(_QWORD *)(v13 + 48) + v29 * v24;
    if ((v52 & 1) != 0)
      sub_1004B84E0(v30, (uint64_t)v12, v6);
    else
      sub_1004B8460(v30, (uint64_t)v12, v6);
    v31 = *(_BYTE *)(*(_QWORD *)(v13 + 56) + v24);
    Hasher.init(_seed:)(v53, *(_QWORD *)(v15 + 40));
    v32 = type metadata accessor for UUID(0);
    v33 = sub_1005034A0((unint64_t *)&qword_1013DE630, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v53, v32, v33);
    v34 = &v12[*(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20)];
    v35 = *(_QWORD *)v34;
    v36 = *((_QWORD *)v34 + 1);
    swift_bridgeObjectRetain(v36);
    String.hash(into:)(v53, v35, v36);
    swift_bridgeObjectRelease();
    v37 = Hasher._finalize()();
    v38 = -1 << *(_BYTE *)(v15 + 32);
    v39 = v37 & ~v38;
    v40 = v39 >> 6;
    if (((-1 << v39) & ~*(_QWORD *)(v20 + 8 * (v39 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v39) & ~*(_QWORD *)(v20 + 8 * (v39 >> 6)))) | v39 & 0x7FFFFFFFFFFFFFC0;
      v6 = v50;
    }
    else
    {
      v41 = 0;
      v42 = (unint64_t)(63 - v38) >> 6;
      v6 = v50;
      do
      {
        if (++v40 == v42 && (v41 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v43 = v40 == v42;
        if (v40 == v42)
          v40 = 0;
        v41 |= v43;
        v44 = *(_QWORD *)(v20 + 8 * v40);
      }
      while (v44 == -1);
      v22 = __clz(__rbit64(~v44)) + (v40 << 6);
    }
    *(_QWORD *)(v20 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    sub_1004B84E0((uint64_t)v12, *(_QWORD *)(v15 + 48) + v29 * v22, v6);
    *(_BYTE *)(*(_QWORD *)(v15 + 56) + v22) = v31;
    ++*(_QWORD *)(v15 + 16);
  }
  swift_release(v13);
  v7 = v47;
  v26 = v49;
  if ((v52 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v45 = 1 << *(_BYTE *)(v13 + 32);
  if (v45 >= 64)
    bzero(v26, ((unint64_t)(v45 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v26 = -1 << v45;
  *(_QWORD *)(v13 + 16) = 0;
LABEL_43:
  swift_release(v13);
  *v7 = v15;
}

void sub_100823160(uint64_t a1, uint64_t a2)
{
  sub_100823174(a1, a2, (uint64_t *)&unk_101406470, &qword_1013F4EB8);
}

void sub_100823174(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  __n128 v23;
  int64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  _QWORD *v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  int64_t v49;
  _QWORD *v50;
  uint64_t i;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t *v55;

  v6 = v4;
  v55 = a3;
  v9 = sub_1004B804C(a3);
  v52 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v54 = (uint64_t)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *v6;
  if (*(_QWORD *)(*v6 + 24) > a1)
    a1 = *(_QWORD *)(*v6 + 24);
  sub_1004B804C(a4);
  v53 = a2;
  v16 = static _DictionaryStorage.resize(original:capacity:move:)(v15, a1, a2);
  v17 = v16;
  if (!*(_QWORD *)(v15 + 16))
    goto LABEL_43;
  v18 = 1 << *(_BYTE *)(v15 + 32);
  v19 = *(_QWORD *)(v15 + 64);
  v50 = (_QWORD *)(v15 + 64);
  if (v18 < 64)
    v20 = ~(-1 << v18);
  else
    v20 = -1;
  v21 = v20 & v19;
  v48 = v6;
  v49 = (unint64_t)(v18 + 63) >> 6;
  v22 = v16 + 64;
  v23 = swift_retain(v15);
  v24 = 0;
  for (i = v15; ; v15 = i)
  {
    if (v21)
    {
      v26 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      v27 = v26 | (v24 << 6);
      goto LABEL_24;
    }
    v28 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v28 >= v49)
      break;
    v29 = v50;
    v30 = v50[v28];
    ++v24;
    if (!v30)
    {
      v24 = v28 + 1;
      if (v28 + 1 >= v49)
        goto LABEL_36;
      v30 = v50[v24];
      if (!v30)
      {
        v31 = v28 + 2;
        if (v31 >= v49)
        {
LABEL_36:
          swift_release(v15);
          v6 = v48;
          if ((v53 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v30 = v50[v31];
        if (!v30)
        {
          while (1)
          {
            v24 = v31 + 1;
            if (__OFADD__(v31, 1))
              goto LABEL_45;
            if (v24 >= v49)
              goto LABEL_36;
            v30 = v50[v24];
            ++v31;
            if (v30)
              goto LABEL_23;
          }
        }
        v24 = v31;
      }
    }
LABEL_23:
    v21 = (v30 - 1) & v30;
    v27 = __clz(__rbit64(v30)) + (v24 << 6);
LABEL_24:
    v32 = *(_QWORD *)(v12 + 72);
    v33 = *(_QWORD *)(v15 + 48) + v32 * v27;
    if ((v53 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v12 + 32))(v14, v33, v11, v23);
      v34 = *(_QWORD *)(v15 + 56);
      v35 = *(_QWORD *)(v52 + 72);
      sub_1004C4938(v34 + v35 * v27, v54, v55);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v12 + 16))(v14, v33, v11, v23);
      v36 = *(_QWORD *)(v15 + 56);
      v35 = *(_QWORD *)(v52 + 72);
      sub_1004CB7BC(v36 + v35 * v27, v54, v55);
    }
    v37 = *(_QWORD *)(v17 + 40);
    v38 = sub_1005034A0((unint64_t *)&qword_1013DE630, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v39 = dispatch thunk of Hashable._rawHashValue(seed:)(v37, v11, v38);
    v40 = -1 << *(_BYTE *)(v17 + 32);
    v41 = v39 & ~v40;
    v42 = v41 >> 6;
    if (((-1 << v41) & ~*(_QWORD *)(v22 + 8 * (v41 >> 6))) != 0)
    {
      v25 = __clz(__rbit64((-1 << v41) & ~*(_QWORD *)(v22 + 8 * (v41 >> 6)))) | v41 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v43 = 0;
      v44 = (unint64_t)(63 - v40) >> 6;
      do
      {
        if (++v42 == v44 && (v43 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v45 = v42 == v44;
        if (v42 == v44)
          v42 = 0;
        v43 |= v45;
        v46 = *(_QWORD *)(v22 + 8 * v42);
      }
      while (v46 == -1);
      v25 = __clz(__rbit64(~v46)) + (v42 << 6);
    }
    *(_QWORD *)(v22 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(*(_QWORD *)(v17 + 48) + v32 * v25, v14, v11);
    sub_1004C4938(v54, *(_QWORD *)(v17 + 56) + v35 * v25, v55);
    ++*(_QWORD *)(v17 + 16);
  }
  swift_release(v15);
  v6 = v48;
  v29 = v50;
  if ((v53 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v47 = 1 << *(_BYTE *)(v15 + 32);
  if (v47 >= 64)
    bzero(v29, ((unint64_t)(v47 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v29 = -1 << v47;
  *(_QWORD *)(v15 + 16) = 0;
LABEL_43:
  swift_release(v15);
  *v6 = v17;
}

void sub_100823570(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  Swift::UInt v23;
  uint64_t v24;
  Swift::Int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char v35;
  _QWORD *v36;
  uint64_t v37[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1013F4FC0);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v35 = a2;
    v34 = v3;
    v9 = 0;
    v36 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = v7 + 64;
    while (1)
    {
      if (v12)
      {
        v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v18 = v17 | (v9 << 6);
      }
      else
      {
        v19 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return;
        }
        if (v19 >= v13)
          goto LABEL_34;
        v20 = v36[v19];
        ++v9;
        if (!v20)
        {
          v9 = v19 + 1;
          if (v19 + 1 >= v13)
            goto LABEL_34;
          v20 = v36[v9];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_34:
              if ((v35 & 1) == 0)
              {
                swift_release(v5);
                v3 = v34;
                goto LABEL_41;
              }
              v33 = 1 << *(_BYTE *)(v5 + 32);
              if (v33 >= 64)
                bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v36 = -1 << v33;
              v3 = v34;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v36[v21];
            if (!v20)
            {
              while (1)
              {
                v9 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_43;
                if (v9 >= v13)
                  goto LABEL_34;
                v20 = v36[v9];
                ++v21;
                if (v20)
                  goto LABEL_24;
              }
            }
            v9 = v21;
          }
        }
LABEL_24:
        v12 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v9 << 6);
      }
      v22 = 8 * v18;
      v23 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v22);
      v24 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v22);
      Hasher.init(_seed:)(v37, *(_QWORD *)(v8 + 40));
      Hasher._combine(_:)(v23);
      v25 = Hasher._finalize()();
      v26 = -1 << *(_BYTE *)(v8 + 32);
      v27 = v25 & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v14 + 8 * (v27 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v14 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v14 + 8 * v28);
        }
        while (v32 == -1);
        v15 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = 8 * v15;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + v16) = v23;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + v16) = v24;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release(v5);
LABEL_41:
  *v3 = v8;
}

void sub_10082383C(uint64_t a1, uint64_t a2)
{
  sub_100824A50(a1, a2, &qword_1013F4FA8);
}

void sub_100823848(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  _OWORD *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  char v40;
  _QWORD v41[9];
  _OWORD v42[2];

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_1004B804C(a3);
  v40 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = v8;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_44;
  v10 = 1 << *(_BYTE *)(v6 + 32);
  v39 = v6 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v6 + 64);
  v38 = (unint64_t)(v10 + 63) >> 6;
  v13 = v8 + 64;
  swift_retain(v6);
  v14 = 0;
  while (1)
  {
    if (v12)
    {
      v16 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v17 = v16 | (v14 << 6);
      goto LABEL_25;
    }
    v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return;
    }
    if (v18 >= v38)
      break;
    v19 = (_QWORD *)(v6 + 64);
    v20 = *(_QWORD *)(v39 + 8 * v18);
    ++v14;
    if (!v20)
    {
      v14 = v18 + 1;
      if (v18 + 1 >= v38)
        goto LABEL_37;
      v20 = *(_QWORD *)(v39 + 8 * v14);
      if (!v20)
      {
        v21 = v18 + 2;
        if (v21 >= v38)
        {
LABEL_37:
          swift_release(v6);
          if ((v40 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v20 = *(_QWORD *)(v39 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            v14 = v21 + 1;
            if (__OFADD__(v21, 1))
              goto LABEL_46;
            if (v14 >= v38)
              goto LABEL_37;
            v20 = *(_QWORD *)(v39 + 8 * v14);
            ++v21;
            if (v20)
              goto LABEL_24;
          }
        }
        v14 = v21;
      }
    }
LABEL_24:
    v12 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v14 << 6);
LABEL_25:
    v22 = *(void **)(*(_QWORD *)(v6 + 48) + 8 * v17);
    v23 = (_OWORD *)(*(_QWORD *)(v6 + 56) + 32 * v17);
    if ((v40 & 1) != 0)
    {
      sub_10050CB14(v23, v42);
    }
    else
    {
      sub_1004CB6E8((uint64_t)v23, (uint64_t)v42);
      v24 = v22;
    }
    v25 = *(_QWORD *)(v9 + 40);
    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    v28 = v27;
    Hasher.init(_seed:)(v41, v25);
    String.hash(into:)(v41, v26, v28);
    v29 = Hasher._finalize()();
    swift_bridgeObjectRelease(v28);
    v30 = -1 << *(_BYTE *)(v9 + 32);
    v31 = v29 & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)(v13 + 8 * (v31 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v13 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v35 = v32 == v34;
        if (v32 == v34)
          v32 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v13 + 8 * v32);
      }
      while (v36 == -1);
      v15 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(_QWORD *)(v13 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v15) = v22;
    sub_10050CB14(v42, (_OWORD *)(*(_QWORD *)(v9 + 56) + 32 * v15));
    ++*(_QWORD *)(v9 + 16);
  }
  swift_release(v6);
  v19 = (_QWORD *)(v6 + 64);
  if ((v40 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v37 = 1 << *(_BYTE *)(v6 + 32);
  if (v37 >= 64)
    bzero(v19, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v19 = -1 << v37;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_44:
  swift_release(v6);
  *v4 = v9;
}

void sub_100823B7C(uint64_t a1, uint64_t a2)
{
  sub_100815290(a1, a2, &qword_1013F4F60);
}

void sub_100823B88(uint64_t a1, uint64_t a2)
{
  sub_100820158(a1, a2, type metadata accessor for CRLBoardItemPeerSyncUpdate, &qword_1013F4F58);
}

void sub_100823B9C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v7;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  _QWORD *v26;
  unint64_t v27;
  int64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  Swift::Int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int64_t v44;
  _QWORD *v45;
  uint64_t v46;
  int v47;
  _QWORD v48[9];

  v7 = v4;
  v10 = a3(0);
  v46 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v43 - v11;
  v13 = *v7;
  if (*(_QWORD *)(*v7 + 24) > a1)
    a1 = *(_QWORD *)(*v7 + 24);
  sub_1004B804C(a4);
  v47 = a2;
  v14 = static _DictionaryStorage.resize(original:capacity:move:)(v13, a1, a2);
  v15 = v14;
  if (!*(_QWORD *)(v13 + 16))
    goto LABEL_49;
  v16 = 1 << *(_BYTE *)(v13 + 32);
  v17 = *(_QWORD *)(v13 + 64);
  v45 = (_QWORD *)(v13 + 64);
  if (v16 < 64)
    v18 = ~(-1 << v16);
  else
    v18 = -1;
  v19 = v18 & v17;
  v43 = v7;
  v44 = (unint64_t)(v16 + 63) >> 6;
  v20 = v14 + 64;
  swift_retain(v13);
  v21 = 0;
  while (1)
  {
    if (v19)
    {
      v23 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v24 = v23 | (v21 << 6);
      goto LABEL_24;
    }
    v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
      return;
    }
    if (v25 >= v44)
      break;
    v26 = v45;
    v27 = v45[v25];
    ++v21;
    if (!v27)
    {
      v21 = v25 + 1;
      if (v25 + 1 >= v44)
        goto LABEL_42;
      v27 = v45[v21];
      if (!v27)
      {
        v28 = v25 + 2;
        if (v28 >= v44)
        {
LABEL_42:
          swift_release(v13);
          v7 = v43;
          if ((v47 & 1) == 0)
            goto LABEL_49;
          goto LABEL_45;
        }
        v27 = v45[v28];
        if (!v27)
        {
          while (1)
          {
            v21 = v28 + 1;
            if (__OFADD__(v28, 1))
              goto LABEL_51;
            if (v21 >= v44)
              goto LABEL_42;
            v27 = v45[v21];
            ++v28;
            if (v27)
              goto LABEL_23;
          }
        }
        v21 = v28;
      }
    }
LABEL_23:
    v19 = (v27 - 1) & v27;
    v24 = __clz(__rbit64(v27)) + (v21 << 6);
LABEL_24:
    v29 = *(unsigned __int8 *)(*(_QWORD *)(v13 + 48) + v24);
    v30 = *(_QWORD *)(v46 + 72);
    v31 = *(_QWORD *)(v13 + 56) + v30 * v24;
    if ((v47 & 1) != 0)
      sub_1004B84E0(v31, (uint64_t)v12, a3);
    else
      sub_1004B8460(v31, (uint64_t)v12, a3);
    Hasher.init(_seed:)(v48, *(_QWORD *)(v15 + 40));
    if (v29)
      v32 = 0x6863746566;
    else
      v32 = 1702257011;
    if (v29)
      v33 = 0xE500000000000000;
    else
      v33 = 0xE400000000000000;
    String.hash(into:)(v48, v32, v33);
    swift_bridgeObjectRelease(v33);
    v34 = Hasher._finalize()();
    v35 = -1 << *(_BYTE *)(v15 + 32);
    v36 = v34 & ~v35;
    v37 = v36 >> 6;
    if (((-1 << v36) & ~*(_QWORD *)(v20 + 8 * (v36 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v36) & ~*(_QWORD *)(v20 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v38 = 0;
      v39 = (unint64_t)(63 - v35) >> 6;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_50;
        }
        v40 = v37 == v39;
        if (v37 == v39)
          v37 = 0;
        v38 |= v40;
        v41 = *(_QWORD *)(v20 + 8 * v37);
      }
      while (v41 == -1);
      v22 = __clz(__rbit64(~v41)) + (v37 << 6);
    }
    *(_QWORD *)(v20 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(_BYTE *)(*(_QWORD *)(v15 + 48) + v22) = v29;
    sub_1004B84E0((uint64_t)v12, *(_QWORD *)(v15 + 56) + v30 * v22, a3);
    ++*(_QWORD *)(v15 + 16);
  }
  swift_release(v13);
  v7 = v43;
  v26 = v45;
  if ((v47 & 1) == 0)
    goto LABEL_49;
LABEL_45:
  v42 = 1 << *(_BYTE *)(v13 + 32);
  if (v42 >= 64)
    bzero(v26, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v26 = -1 << v42;
  *(_QWORD *)(v13 + 16) = 0;
LABEL_49:
  swift_release(v13);
  *v7 = v15;
}

void sub_100823F2C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  Swift::Int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  __int128 v36;
  _QWORD v37[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1013F4F40);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_49;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v34 = v3;
  v35 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v23 = v22 | (v14 << 6);
      goto LABEL_40;
    }
    v24 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
      return;
    }
    if (v24 >= v12)
      break;
    v25 = (_QWORD *)(v5 + 64);
    v26 = *(_QWORD *)(v35 + 8 * v24);
    ++v14;
    if (!v26)
    {
      v14 = v24 + 1;
      if (v24 + 1 >= v12)
        goto LABEL_42;
      v26 = *(_QWORD *)(v35 + 8 * v14);
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v12)
        {
LABEL_42:
          swift_release(v5);
          v3 = v34;
          if ((a2 & 1) == 0)
            goto LABEL_49;
          goto LABEL_45;
        }
        v26 = *(_QWORD *)(v35 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            v14 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_51;
            if (v14 >= v12)
              goto LABEL_42;
            v26 = *(_QWORD *)(v35 + 8 * v14);
            ++v27;
            if (v26)
              goto LABEL_39;
          }
        }
        v14 = v27;
      }
    }
LABEL_39:
    v11 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v14 << 6);
LABEL_40:
    v32 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v23);
    v36 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v23);
    if ((a2 & 1) == 0)
      swift_retain(*((_QWORD *)&v36 + 1));
    Hasher.init(_seed:)(v37, *(_QWORD *)(v8 + 40));
    if (v32)
      v15 = 0x6863746566;
    else
      v15 = 1702257011;
    if (v32)
      v16 = 0xE500000000000000;
    else
      v16 = 0xE400000000000000;
    String.hash(into:)(v37, v15, v16);
    swift_bridgeObjectRelease(v16);
    v17 = Hasher._finalize()();
    v18 = -1 << *(_BYTE *)(v8 + 32);
    v19 = v17 & ~v18;
    v20 = v19 >> 6;
    if (((-1 << v19) & ~*(_QWORD *)(v13 + 8 * (v19 >> 6))) != 0)
    {
      v21 = __clz(__rbit64((-1 << v19) & ~*(_QWORD *)(v13 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v18) >> 6;
      do
      {
        if (++v20 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_50;
        }
        v30 = v20 == v29;
        if (v20 == v29)
          v20 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v13 + 8 * v20);
      }
      while (v31 == -1);
      v21 = __clz(__rbit64(~v31)) + (v20 << 6);
    }
    *(_QWORD *)(v13 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    *(_BYTE *)(*(_QWORD *)(v8 + 48) + v21) = v32;
    *(_OWORD *)(*(_QWORD *)(v8 + 56) + 16 * v21) = v36;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v34;
  v25 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_49;
LABEL_45:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v25, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_49:
  swift_release(v5);
  *v3 = v8;
}

void sub_100824248(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  void *v29;
  uint64_t v30;
  uint64_t *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  Swift::Int v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  int64_t v49;
  _QWORD *v50;
  uint64_t i;
  uint64_t v52;
  int v53;
  _QWORD v54[9];

  v3 = v2;
  v6 = type metadata accessor for CRLBoardIdentifier(0);
  v52 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1013F4F88);
  v53 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_43;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v50 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v48 = v2;
  v49 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  swift_retain(v9);
  v17 = 0;
  for (i = v9; ; v9 = i)
  {
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v21 = v20 | (v17 << 6);
      goto LABEL_24;
    }
    v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v22 >= v49)
      break;
    v23 = v50;
    v24 = v50[v22];
    ++v17;
    if (!v24)
    {
      v17 = v22 + 1;
      if (v22 + 1 >= v49)
        goto LABEL_36;
      v24 = v50[v17];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v49)
        {
LABEL_36:
          swift_release(v9);
          v3 = v48;
          if ((v53 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = v50[v25];
        if (!v24)
        {
          while (1)
          {
            v17 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v17 >= v49)
              goto LABEL_36;
            v24 = v50[v17];
            ++v25;
            if (v24)
              goto LABEL_23;
          }
        }
        v17 = v25;
      }
    }
LABEL_23:
    v15 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_24:
    v26 = *(_QWORD *)(v52 + 72);
    v27 = *(_QWORD *)(v9 + 48) + v26 * v21;
    if ((v53 & 1) != 0)
    {
      sub_1004B84E0(v27, (uint64_t)v8, type metadata accessor for CRLBoardIdentifier);
      v28 = (uint64_t *)(*(_QWORD *)(v9 + 56) + 16 * v21);
      v30 = *v28;
      v29 = (void *)v28[1];
    }
    else
    {
      sub_1004B8460(v27, (uint64_t)v8, type metadata accessor for CRLBoardIdentifier);
      v31 = (uint64_t *)(*(_QWORD *)(v9 + 56) + 16 * v21);
      v30 = *v31;
      v29 = (void *)v31[1];
      v32 = v29;
      swift_retain(v30);
    }
    Hasher.init(_seed:)(v54, *(_QWORD *)(v11 + 40));
    v33 = type metadata accessor for UUID(0);
    v34 = sub_1005034A0((unint64_t *)&qword_1013DE630, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v54, v33, v34);
    v35 = &v8[*(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20)];
    v36 = *(_QWORD *)v35;
    v37 = *((_QWORD *)v35 + 1);
    swift_bridgeObjectRetain(v37);
    String.hash(into:)(v54, v36, v37);
    swift_bridgeObjectRelease();
    v38 = Hasher._finalize()();
    v39 = -1 << *(_BYTE *)(v11 + 32);
    v40 = v38 & ~v39;
    v41 = v40 >> 6;
    if (((-1 << v40) & ~*(_QWORD *)(v16 + 8 * (v40 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v40) & ~*(_QWORD *)(v16 + 8 * (v40 >> 6)))) | v40 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v42 = 0;
      v43 = (unint64_t)(63 - v39) >> 6;
      do
      {
        if (++v41 == v43 && (v42 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v44 = v41 == v43;
        if (v41 == v43)
          v41 = 0;
        v42 |= v44;
        v45 = *(_QWORD *)(v16 + 8 * v41);
      }
      while (v45 == -1);
      v18 = __clz(__rbit64(~v45)) + (v41 << 6);
    }
    *(_QWORD *)(v16 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    sub_1004B84E0((uint64_t)v8, *(_QWORD *)(v11 + 48) + v26 * v18, type metadata accessor for CRLBoardIdentifier);
    v19 = (_QWORD *)(*(_QWORD *)(v11 + 56) + 16 * v18);
    *v19 = v30;
    v19[1] = v29;
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release(v9);
  v3 = v48;
  v23 = v50;
  if ((v53 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v46 = 1 << *(_BYTE *)(v9 + 32);
  if (v46 >= 64)
    bzero(v23, ((unint64_t)(v46 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v46;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_43:
  swift_release(v9);
  *v3 = v11;
}

void sub_100824650(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  Swift::Int v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int64_t v43;
  _QWORD *v44;
  uint64_t v45;
  int v46;
  _QWORD v47[9];

  v3 = v2;
  v6 = type metadata accessor for CRLBoardIdentifier(0);
  v45 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1013F4F80);
  v46 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_43;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v44 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v42 = v2;
  v43 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  swift_retain(v9);
  v17 = 0;
  while (1)
  {
    if (v15)
    {
      v19 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v20 = v19 | (v17 << 6);
      goto LABEL_24;
    }
    v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v21 >= v43)
      break;
    v22 = v44;
    v23 = v44[v21];
    ++v17;
    if (!v23)
    {
      v17 = v21 + 1;
      if (v21 + 1 >= v43)
        goto LABEL_36;
      v23 = v44[v17];
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v43)
        {
LABEL_36:
          swift_release(v9);
          v3 = v42;
          if ((v46 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v23 = v44[v24];
        if (!v23)
        {
          while (1)
          {
            v17 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_45;
            if (v17 >= v43)
              goto LABEL_36;
            v23 = v44[v17];
            ++v24;
            if (v23)
              goto LABEL_23;
          }
        }
        v17 = v24;
      }
    }
LABEL_23:
    v15 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_24:
    v25 = *(_QWORD *)(v45 + 72);
    v26 = *(_QWORD *)(v9 + 48) + v25 * v20;
    if ((v46 & 1) != 0)
      sub_1004B84E0(v26, (uint64_t)v8, type metadata accessor for CRLBoardIdentifier);
    else
      sub_1004B8460(v26, (uint64_t)v8, type metadata accessor for CRLBoardIdentifier);
    v27 = *(_BYTE *)(*(_QWORD *)(v9 + 56) + v20);
    Hasher.init(_seed:)(v47, *(_QWORD *)(v11 + 40));
    v28 = type metadata accessor for UUID(0);
    v29 = sub_1005034A0((unint64_t *)&qword_1013DE630, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v47, v28, v29);
    v30 = &v8[*(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20)];
    v31 = *(_QWORD *)v30;
    v32 = *((_QWORD *)v30 + 1);
    swift_bridgeObjectRetain(v32);
    String.hash(into:)(v47, v31, v32);
    swift_bridgeObjectRelease();
    v33 = Hasher._finalize()();
    v34 = -1 << *(_BYTE *)(v11 + 32);
    v35 = v33 & ~v34;
    v36 = v35 >> 6;
    if (((-1 << v35) & ~*(_QWORD *)(v16 + 8 * (v35 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v35) & ~*(_QWORD *)(v16 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v37 = 0;
      v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v39 = v36 == v38;
        if (v36 == v38)
          v36 = 0;
        v37 |= v39;
        v40 = *(_QWORD *)(v16 + 8 * v36);
      }
      while (v40 == -1);
      v18 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(_QWORD *)(v16 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    sub_1004B84E0((uint64_t)v8, *(_QWORD *)(v11 + 48) + v25 * v18, type metadata accessor for CRLBoardIdentifier);
    *(_BYTE *)(*(_QWORD *)(v11 + 56) + v18) = v27;
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release(v9);
  v3 = v42;
  v22 = v44;
  if ((v46 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v41 = 1 << *(_BYTE *)(v9 + 32);
  if (v41 >= 64)
    bzero(v22, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v41;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_43:
  swift_release(v9);
  *v3 = v11;
}

void sub_100824A30(uint64_t a1, uint64_t a2)
{
  sub_10081A508(a1, a2, type metadata accessor for CRLBoardViewModelMetadata.ShareMetadata, &qword_1013F4E50);
}

void sub_100824A44(uint64_t a1, uint64_t a2)
{
  sub_100824A50(a1, a2, &qword_1013F4F08);
}

void sub_100824A50(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  int64_t v15;
  Swift::Int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_1004B804C(a3);
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = v8;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_43;
  v10 = 1 << *(_BYTE *)(v6 + 32);
  v37 = v4;
  v38 = v6 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v6 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 64;
  swift_retain(v6);
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v22 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v23 = v22 | (v15 << 6);
      goto LABEL_34;
    }
    v24 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v24 >= v13)
      break;
    v25 = (_QWORD *)(v6 + 64);
    v26 = *(_QWORD *)(v38 + 8 * v24);
    ++v15;
    if (!v26)
    {
      v15 = v24 + 1;
      if (v24 + 1 >= v13)
        goto LABEL_36;
      v26 = *(_QWORD *)(v38 + 8 * v15);
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v13)
        {
LABEL_36:
          swift_release(v6);
          v4 = v37;
          if ((a2 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = *(_QWORD *)(v38 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            v15 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v15 >= v13)
              goto LABEL_36;
            v26 = *(_QWORD *)(v38 + 8 * v15);
            ++v27;
            if (v26)
              goto LABEL_33;
          }
        }
        v15 = v27;
      }
    }
LABEL_33:
    v12 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v15 << 6);
LABEL_34:
    v32 = 8 * v23;
    v33 = *(void **)(*(_QWORD *)(v6 + 48) + v32);
    v34 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + v32);
    if ((a2 & 1) == 0)
    {
      v35 = v33;
      swift_bridgeObjectRetain(v34);
    }
    v16 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v9 + 40));
    v17 = -1 << *(_BYTE *)(v9 + 32);
    v18 = v16 & ~v17;
    v19 = v18 >> 6;
    if (((-1 << v18) & ~*(_QWORD *)(v14 + 8 * (v18 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v14 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v17) >> 6;
      do
      {
        if (++v19 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v30 = v19 == v29;
        if (v19 == v29)
          v19 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v14 + 8 * v19);
      }
      while (v31 == -1);
      v20 = __clz(__rbit64(~v31)) + (v19 << 6);
    }
    *(_QWORD *)(v14 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    v21 = 8 * v20;
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + v21) = v33;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + v21) = v34;
    ++*(_QWORD *)(v9 + 16);
  }
  swift_release(v6);
  v4 = v37;
  v25 = (_QWORD *)(v6 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v36 = 1 << *(_BYTE *)(v6 + 32);
  if (v36 >= 64)
    bzero(v25, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v36;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_43:
  swift_release(v6);
  *v4 = v9;
}

void sub_100824D20(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __n128 v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;

  v5 = type metadata accessor for UUID(0);
  v46 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = v2;
  v8 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1013F4F00);
  v9 = static _DictionaryStorage.resize(original:capacity:move:)(v8, a1, a2);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
    swift_release(v8);
    v39 = v42;
LABEL_44:
    *v39 = v10;
    return;
  }
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 64);
  v44 = (_QWORD *)(v8 + 64);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v43 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 64;
  v16 = swift_retain(v8);
  v17 = 0;
  HIDWORD(v41) = a2;
  v18 = 16;
  if ((a2 & 1) != 0)
    v18 = 32;
  v45 = v18;
  while (1)
  {
    if (v14)
    {
      v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v21 = v20 | (v17 << 6);
      goto LABEL_26;
    }
    v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    if (v22 >= v43)
    {
      swift_release(v8);
      v39 = v42;
      v23 = v44;
      if ((v41 & 0x100000000) != 0)
      {
LABEL_39:
        v40 = 1 << *(_BYTE *)(v8 + 32);
        if (v40 >= 64)
          bzero(v23, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
        else
          *v23 = -1 << v40;
        *(_QWORD *)(v8 + 16) = 0;
      }
LABEL_43:
      swift_release(v8);
      goto LABEL_44;
    }
    v23 = v44;
    v24 = v44[v22];
    ++v17;
    if (!v24)
    {
      v17 = v22 + 1;
      if (v22 + 1 >= v43)
        goto LABEL_36;
      v24 = v44[v17];
      if (!v24)
        break;
    }
LABEL_25:
    v14 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_26:
    v26 = *(_QWORD *)(v46 + 72);
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v46 + v45))(v7, *(_QWORD *)(v8 + 48) + v26 * v21, v5, v16);
    v27 = v8;
    v28 = *(_BYTE *)(*(_QWORD *)(v8 + 56) + v21);
    v29 = *(_QWORD *)(v10 + 40);
    v30 = sub_1005034A0((unint64_t *)&qword_1013DE630, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v31 = dispatch thunk of Hashable._rawHashValue(seed:)(v29, v5, v30);
    v32 = -1 << *(_BYTE *)(v10 + 32);
    v33 = v31 & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v15 + 8 * (v33 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v15 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v15 + 8 * v34);
      }
      while (v38 == -1);
      v19 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v15 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    (*(void (**)(unint64_t, char *, uint64_t))(v46 + 32))(*(_QWORD *)(v10 + 48) + v26 * v19, v7, v5);
    *(_BYTE *)(*(_QWORD *)(v10 + 56) + v19) = v28;
    ++*(_QWORD *)(v10 + 16);
    v8 = v27;
  }
  v25 = v22 + 2;
  if (v25 >= v43)
  {
LABEL_36:
    swift_release(v8);
    v39 = v42;
    if ((v41 & 0x100000000) != 0)
      goto LABEL_39;
    goto LABEL_43;
  }
  v24 = v44[v25];
  if (v24)
  {
    v17 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v17 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v17 >= v43)
      goto LABEL_36;
    v24 = v44[v17];
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_46:
  __break(1u);
}

void sub_1008250C0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  id *v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  Swift::Int v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int64_t v43;
  uint64_t v44;
  char v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1013F4EF0);
  v45 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v44 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v42 = v3;
  v43 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain(v5);
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v19 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_25;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return;
    }
    if (v21 >= v43)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v44 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v43)
        goto LABEL_37;
      v23 = *(_QWORD *)(v44 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v43)
        {
LABEL_37:
          swift_release(v5);
          v3 = v42;
          if ((v45 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v23 = *(_QWORD *)(v44 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_46;
            if (v13 >= v43)
              goto LABEL_37;
            v23 = *(_QWORD *)(v44 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_24;
          }
        }
        v13 = v24;
      }
    }
LABEL_24:
    v11 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_25:
    v25 = *(_QWORD *)(v5 + 48) + 40 * v20;
    if ((v45 & 1) != 0)
    {
      v26 = *(_OWORD *)v25;
      v27 = *(_OWORD *)(v25 + 16);
      v48 = *(_QWORD *)(v25 + 32);
      v46 = v26;
      v47 = v27;
      v28 = (id *)(*(_QWORD *)(v5 + 56) + 24 * v20);
      v29 = *v28;
      v30 = v28[1];
      v31 = v28[2];
    }
    else
    {
      sub_1004B8968(v25, (uint64_t)&v46);
      v32 = *(_QWORD *)(v5 + 56) + 24 * v20;
      v29 = *(id *)v32;
      v30 = *(id *)(v32 + 8);
      v31 = *(id *)(v32 + 16);
      sub_100836CEC(*(id *)v32, v30, v31);
    }
    v33 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v34 = -1 << *(_BYTE *)(v8 + 32);
    v35 = v33 & ~v34;
    v36 = v35 >> 6;
    if (((-1 << v35) & ~*(_QWORD *)(v12 + 8 * (v35 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v35) & ~*(_QWORD *)(v12 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v37 = 0;
      v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v39 = v36 == v38;
        if (v36 == v38)
          v36 = 0;
        v37 |= v39;
        v40 = *(_QWORD *)(v12 + 8 * v36);
      }
      while (v40 == -1);
      v14 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(_QWORD *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = *(_QWORD *)(v8 + 48) + 40 * v14;
    v16 = v46;
    v17 = v47;
    *(_QWORD *)(v15 + 32) = v48;
    *(_OWORD *)v15 = v16;
    *(_OWORD *)(v15 + 16) = v17;
    v18 = (_QWORD *)(*(_QWORD *)(v8 + 56) + 24 * v14);
    *v18 = v29;
    v18[1] = v30;
    v18[2] = v31;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v42;
  v22 = (_QWORD *)(v5 + 64);
  if ((v45 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v41 = 1 << *(_BYTE *)(v5 + 32);
  if (v41 >= 64)
    bzero(v22, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v41;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  swift_release(v5);
  *v3 = v8;
}

void sub_10082540C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;

  v5 = (_QWORD **)v4;
  v27 = a2;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)*v4;
  v15 = sub_100842EFC(a3);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  v19 = v14;
  v20 = v13[3];
  if (v20 >= v18 && (a4 & 1) != 0)
  {
LABEL_7:
    v21 = *v5;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      v22 = (uint64_t *)(v21[7] + 16 * v15);
      swift_unknownObjectRelease(*v22);
      v23 = v27;
      *v22 = a1;
      v22[1] = v23;
      return;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a4 & 1) == 0)
  {
    sub_10082C13C();
    goto LABEL_7;
  }
  sub_100813BF8(v18, a4 & 1);
  v24 = sub_100842EFC(a3);
  if ((v19 & 1) != (v25 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v9);
    __break(1u);
    return;
  }
  v15 = v24;
  v21 = *v5;
  if ((v19 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
  sub_10082ACE0(v15, (uint64_t)v12, a1, v27, v21);
}

void sub_100825578(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;

  v5 = v4;
  v10 = *v4;
  v12 = sub_1008430EC(a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_10082C378();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = (_QWORD *)(v18[7] + 16 * v12);
      swift_unknownObjectRelease(*v19);
      *v19 = a1;
      v19[1] = a2;
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    *(_QWORD *)(v18[6] + 8 * v12) = a3;
    v22 = (_QWORD *)(v18[7] + 16 * v12);
    *v22 = a1;
    v22[1] = a2;
    v23 = v18[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      swift_retain(a3);
      return;
    }
    goto LABEL_14;
  }
  sub_100813F94(v15, a4 & 1);
  v20 = sub_1008430EC(a3);
  if ((v16 & 1) == (v21 & 1))
  {
    v12 = v20;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  v26 = type metadata accessor for CRLTransactableHashableWrapper();
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v26);
  __break(1u);
}

_OWORD *sub_1008256CC(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _OWORD *result;
  uint64_t v19;
  char v20;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_1008431EC(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = (_QWORD *)(v16[7] + 32 * v10);
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v17);
        return sub_10050CB14(a1, v17);
      }
      return sub_10082AD80(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_10082C534();
      goto LABEL_7;
    }
    sub_10081433C(v13, a3 & 1);
    v19 = sub_1008431EC(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return sub_10082AD80(v10, a2, a1, v16);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for CRLTransactablePropertyMapKeys);
  __break(1u);
  return result;
}

uint64_t sub_1008257E4(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t result;
  uint64_t v18;
  char v19;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_1008431EC(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
        return sub_100582338(a1, v16[7] + 32 * v10, &qword_1013E0230);
      return sub_10082ADE4(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_10082C6F0();
      goto LABEL_7;
    }
    sub_10081473C(v13, a3 & 1);
    v18 = sub_1008431EC(a2);
    if ((v14 & 1) == (v19 & 1))
    {
      v10 = v18;
      v16 = *v4;
      if ((v14 & 1) != 0)
        return sub_100582338(a1, v16[7] + 32 * v10, &qword_1013E0230);
      return sub_10082ADE4(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for CRLTransactablePropertyMapKeys);
  __break(1u);
  return result;
}

uint64_t sub_1008258FC(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t result;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_100843260(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
        return sub_100582338(a1, v16[7] + 32 * v10, &qword_1013E0230);
      return sub_10082AE54(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_10082C8D0();
      goto LABEL_7;
    }
    sub_100814B68(v13, a3 & 1);
    v18 = sub_100843260(a2);
    if ((v14 & 1) == (v19 & 1))
    {
      v10 = v18;
      v16 = *v4;
      if ((v14 & 1) != 0)
        return sub_100582338(a1, v16[7] + 32 * v10, &qword_1013E0230);
      return sub_10082AE54(v10, a2, a1, v16);
    }
  }
  type metadata accessor for CRLChangeProperty(0);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v20);
  __break(1u);
  return result;
}

void sub_100825A14(uint64_t a1, uint64_t a2, char a3)
{
  sub_100829154(a1, a2, a3, &qword_1013F5060);
}

void sub_100825A20(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v4 = v3;
  v8 = *v3;
  v10 = sub_1008431EC(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= v13 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_10082CAC8();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = v16[7];
      swift_bridgeObjectRelease(*(_QWORD *)(v17 + 8 * v10));
      *(_QWORD *)(v17 + 8 * v10) = a1;
      return;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(_BYTE *)(v16[6] + v10) = a2;
    *(_QWORD *)(v16[7] + 8 * v10) = a1;
    v20 = v16[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (!v21)
    {
      v16[2] = v22;
      return;
    }
    goto LABEL_14;
  }
  sub_100814E78(v13, a3 & 1);
  v18 = sub_1008431EC(a2);
  if ((v14 & 1) == (v19 & 1))
  {
    v10 = v18;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for CRLTransactablePropertyMapKeys);
  __break(1u);
}

void sub_100825B54(uint64_t a1, uint64_t a2, char a3)
{
  sub_1008295BC(a1, a2, a3, &qword_1013F4ED0);
}

uint64_t sub_100825B60(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  unint64_t v24;
  char v25;
  uint64_t v26;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_100842EFC(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7];
      v22 = sub_1004B804C((uint64_t *)&unk_1013F13A0);
      return sub_100582338(a1, v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v14, (uint64_t *)&unk_1013F13A0);
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_100833E9C((uint64_t *)&unk_1013F13A0, &qword_1013F4E08);
    goto LABEL_7;
  }
  sub_100823174(v17, a3 & 1, (uint64_t *)&unk_1013F13A0, &qword_1013F4E08);
  v24 = sub_100842EFC(a2);
  if ((v18 & 1) != (v25 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }
  v14 = v24;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_10082AEC4(v14, (uint64_t)v11, a1, v20);
}

void sub_100825CF4(uint64_t a1, uint64_t a2, char a3)
{
  sub_1008295BC(a1, a2, a3, &qword_1013F51A0);
}

void sub_100825D00(uint64_t a1, uint64_t a2, char a3)
{
  sub_1008295BC(a1, a2, a3, &qword_1013F5008);
}

void sub_100825D0C(uint64_t a1, uint64_t a2, char a3)
{
  sub_100827C9C(a1, a2, a3, (uint64_t *)&unk_101405F30);
}

void sub_100825D18(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  char v22;
  uint64_t v23;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_100842EFC(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      *(_QWORD *)(v20[7] + 8 * v14) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_10082CCB8();
    goto LABEL_7;
  }
  sub_100815644(v17, a3 & 1);
  v21 = sub_100842EFC(a2);
  if ((v18 & 1) != (v22 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return;
  }
  v14 = v21;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  sub_10082AF80(v14, (uint64_t)v11, a1, v20);
}

_OWORD *sub_100825E68(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _OWORD *result;
  unint64_t v19;
  char v20;
  _BYTE v21[40];

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_1008432BC(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = (_QWORD *)(v16[7] + 32 * v10);
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v17);
        return sub_10050CB14(a1, v17);
      }
      goto LABEL_11;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_10082CEDC();
      goto LABEL_7;
    }
    sub_1008159E4(v13, a3 & 1);
    v19 = sub_1008432BC(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1004B8968(a2, (uint64_t)v21);
      return sub_10082B018(v10, (uint64_t)v21, a1, v16);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AnyHashable);
  __break(1u);
  return result;
}

void sub_100825FA0(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_100843394(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7];

      *(_QWORD *)(v21 + 8 * v14) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_1008327E0((uint64_t (*)(_QWORD))&type metadata accessor for URL, &qword_1013F51D8);
    goto LABEL_7;
  }
  sub_100815CF8(v17, a3 & 1, (uint64_t (*)(uint64_t))&type metadata accessor for URL, &qword_1013F51D8, (unint64_t *)&unk_1013F3CD0, (uint64_t)&protocol conformance descriptor for URL);
  v22 = sub_100843394(a2);
  if ((v18 & 1) != (v23 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return;
  }
  v14 = v22;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  sub_10082BC6C(v14, (uint64_t)v11, a1, v20, (uint64_t (*)(_QWORD))&type metadata accessor for URL);
}

_OWORD *sub_100826134(_OWORD *a1, void *a2, char a3)
{
  return sub_10082A2E8(a1, a2, a3, (uint64_t (*)(void *))sub_100842FAC, &qword_1013F4FF0, (uint64_t (*)(_QWORD))type metadata accessor for Key);
}

void sub_100826150(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v4 = v3;
  v8 = *v3;
  v10 = sub_100842E60(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= v13 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_10082D0C0();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = v16[7];
      swift_bridgeObjectRelease(*(_QWORD *)(v17 + 8 * v10));
      *(_QWORD *)(v17 + 8 * v10) = a1;
      return;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    v20 = 8 * v10;
    *(_QWORD *)(v16[6] + v20) = a2;
    *(_QWORD *)(v16[7] + v20) = a1;
    v21 = v16[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (!v22)
    {
      v16[2] = v23;
      return;
    }
    goto LABEL_14;
  }
  sub_100816088(v13, a3 & 1);
  v18 = sub_100842E60(a2);
  if ((v14 & 1) == (v19 & 1))
  {
    v10 = v18;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int);
  __break(1u);
}

uint64_t sub_100826288(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t result;
  unint64_t v22;
  char v23;
  uint64_t v24;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_100842EFC(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a3 & 1) != 0)
    {
LABEL_7:
      v20 = *v4;
      if ((v18 & 1) != 0)
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 40))(v20[7] + *(_QWORD *)(v9 + 72) * v14, a1, v8);
      goto LABEL_11;
    }
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_10082D4AC();
      goto LABEL_7;
    }
    sub_1008166C0(v17, a3 & 1);
    v22 = sub_100842EFC(a2);
    if ((v18 & 1) == (v23 & 1))
    {
      v14 = v22;
      v20 = *v4;
      if ((v18 & 1) != 0)
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 40))(v20[7] + *(_QWORD *)(v9 + 72) * v14, a1, v8);
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_10082B090(v14, (uint64_t)v11, a1, v20);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
  __break(1u);
  return result;
}

void sub_100826404(uint64_t a1, uint64_t a2, char a3)
{
  sub_1008295BC(a1, a2, a3, &qword_1013F4F10);
}

void sub_100826410(uint64_t a1, uint64_t a2, char a3)
{
  sub_1008295BC(a1, a2, a3, &qword_1013F5038);
}

void sub_10082641C(uint64_t a1, void *a2, char a3)
{
  sub_1008281A4(a1, a2, a3, (uint64_t (*)(void *))sub_100843350, &qword_1013F5178, type metadata accessor for CRLCollaborationParticipant);
}

uint64_t sub_100826438(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100828E54(a1, a2, a3, type metadata accessor for CRLRealTimeEnter, &qword_1013F5170);
}

uint64_t sub_10082644C(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  char v21;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_1008436B4(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7];
        v18 = sub_1004B804C(&qword_1013E1798);
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v10, a1, v18);
      }
      return sub_10082B13C(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_10082D740();
      goto LABEL_7;
    }
    sub_100816AA8(v13, a3 & 1);
    v20 = sub_1008436B4(a2);
    if ((v14 & 1) == (v21 & 1))
    {
      v10 = v20;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return sub_10082B13C(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for CRLBoardLibraryViewModel.Library);
  __break(1u);
  return result;
}

void sub_100826574(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  id v23;
  uint64_t v24;

  v4 = v3;
  v7 = *v3;
  v9 = sub_100843270((uint64_t)a2);
  v10 = *(_QWORD *)(v7 + 16);
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v13 = v8;
  v14 = *(_QWORD *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_100834F90(&qword_1013F4FE8);
LABEL_7:
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
    {
LABEL_8:
      v16 = v15[7];
      swift_bridgeObjectRelease(*(_QWORD *)(v16 + 8 * v9));
      *(_QWORD *)(v16 + 8 * v9) = a1;
      return;
    }
LABEL_11:
    v15[(v9 >> 6) + 8] |= 1 << v9;
    v19 = 8 * v9;
    *(_QWORD *)(v15[6] + v19) = a2;
    *(_QWORD *)(v15[7] + v19) = a1;
    v20 = v15[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (!v21)
    {
      v15[2] = v22;
      v23 = a2;
      return;
    }
    goto LABEL_14;
  }
  sub_100824A50(v12, a3 & 1, &qword_1013F4FE8);
  v17 = sub_100843270((uint64_t)a2);
  if ((v13 & 1) == (v18 & 1))
  {
    v9 = v17;
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  v24 = sub_1004B8930(0, (unint64_t *)&qword_1013E6268, off_1012299A0);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v24);
  __break(1u);
}

void sub_1008266E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD **v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;

  v6 = (_QWORD **)v5;
  v29 = a2;
  v30 = a3;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_QWORD *)*v5;
  v16 = sub_100842EFC(a4);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }
  v20 = v15;
  v21 = v14[3];
  if (v21 >= v19 && (a5 & 1) != 0)
  {
LABEL_7:
    v22 = *v6;
    if ((v20 & 1) != 0)
    {
LABEL_8:
      v23 = v22[7] + 24 * v16;
      v24 = *(void **)v23;
      v25 = *(void **)(v23 + 8);

      v26 = v29;
      *(_QWORD *)v23 = a1;
      *(_QWORD *)(v23 + 8) = v26;
      *(_QWORD *)(v23 + 16) = v30;
      return;
    }
    goto LABEL_11;
  }
  if (v21 >= v19 && (a5 & 1) == 0)
  {
    sub_10082D970();
    goto LABEL_7;
  }
  sub_100816DE8(v19, a5 & 1);
  v27 = sub_100842EFC(a4);
  if ((v20 & 1) != (v28 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v10);
    __break(1u);
    return;
  }
  v16 = v27;
  v22 = *v6;
  if ((v20 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a4, v10);
  sub_10082B1CC(v16, (uint64_t)v13, a1, v29, v30, v22);
}

void sub_100826868(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v5 = v4;
  v10 = *v4;
  v12 = sub_100842E98(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_10082DBC8();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];

      *(_QWORD *)(v19 + 8 * v12) = a1;
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v22 = (uint64_t *)(v18[6] + 16 * v12);
    *v22 = a2;
    v22[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v23 = v18[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      swift_bridgeObjectRetain(a3);
      return;
    }
    goto LABEL_14;
  }
  sub_1008171C4(v15, a4 & 1);
  v20 = sub_100842E98(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    v12 = v20;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

_OWORD *sub_1008269C4(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _OWORD *result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for CodingUserInfoKey(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_100843710(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a3 & 1) != 0)
    {
LABEL_7:
      v20 = *v4;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = (_QWORD *)(v20[7] + 32 * v14);
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v21);
        return sub_10050CB14(a1, v21);
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_10082DD78();
      goto LABEL_7;
    }
    sub_1008174D0(v17, a3 & 1);
    v23 = sub_100843710(a2);
    if ((v18 & 1) == (v24 & 1))
    {
      v14 = v23;
      v20 = *v4;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_10082B280(v14, (uint64_t)v11, a1, v20);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
  __break(1u);
  return result;
}

uint64_t sub_100826B40(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  unint64_t v24;
  char v25;
  uint64_t v26;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_100842EFC(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a3 & 1) != 0)
    {
LABEL_7:
      v20 = *v4;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = v20[7];
        v22 = type metadata accessor for URL(0);
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v14, a1, v22);
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_10082DFB4();
      goto LABEL_7;
    }
    sub_100817854(v17, a3 & 1);
    v24 = sub_100842EFC(a2);
    if ((v18 & 1) == (v25 & 1))
    {
      v14 = v24;
      v20 = *v4;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_10082B320(v14, (uint64_t)v11, a1, v20);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
  __break(1u);
  return result;
}

void sub_100826CC8(char a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  id v21;
  uint64_t v22;

  v4 = v3;
  v7 = *v3;
  v9 = sub_100843668((uint64_t)a2);
  v10 = *(_QWORD *)(v7 + 16);
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v13 = v8;
  v14 = *(_QWORD *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_10082E2A8();
LABEL_7:
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
    {
LABEL_8:
      *(_BYTE *)(v15[7] + v9) = a1 & 1;
      return;
    }
LABEL_11:
    v15[(v9 >> 6) + 8] |= 1 << v9;
    *(_QWORD *)(v15[6] + 8 * v9) = a2;
    *(_BYTE *)(v15[7] + v9) = a1 & 1;
    v18 = v15[2];
    v19 = __OFADD__(v18, 1);
    v20 = v18 + 1;
    if (!v19)
    {
      v15[2] = v20;
      v21 = a2;
      return;
    }
    goto LABEL_14;
  }
  sub_100818450(v12, a3 & 1);
  v16 = sub_100843668((uint64_t)a2);
  if ((v13 & 1) == (v17 & 1))
  {
    v9 = v16;
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  v22 = sub_1004B8930(0, &qword_1013E8E40, TUHandle_ptr);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v22);
  __break(1u);
}

void sub_100826E20(uint64_t a1, unsigned __int16 a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v4 = v3;
  v8 = *v3;
  v10 = sub_10084377C(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= v13 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_10082E448();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = v16[7];
      swift_release(*(_QWORD *)(v17 + 8 * v10));
      *(_QWORD *)(v17 + 8 * v10) = a1;
      return;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(_WORD *)(v16[6] + 2 * v10) = a2;
    *(_QWORD *)(v16[7] + 8 * v10) = a1;
    v20 = v16[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (!v21)
    {
      v16[2] = v22;
      return;
    }
    goto LABEL_14;
  }
  sub_100818714(v13, a3 & 1);
  v18 = sub_10084377C(a2);
  if ((v14 & 1) == (v19 & 1))
  {
    v10 = v18;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt16);
  __break(1u);
}

void sub_100826F54(uint64_t a1, uint64_t a2, char a3)
{
  sub_1008295BC(a1, a2, a3, &qword_1013F4EC0);
}

void sub_100826F60(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  id v25;

  v4 = v3;
  v8 = *v3;
  v10 = sub_1008437B0(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= v13 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_10082E5F8();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = v16[7];

      *(_QWORD *)(v17 + 8 * v10) = a1;
      return;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    v20 = v16[6] + 40 * v10;
    v21 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v20 = *(_OWORD *)a2;
    *(_OWORD *)(v20 + 16) = v21;
    *(_QWORD *)(v20 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(v16[7] + 8 * v10) = a1;
    v22 = v16[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (!v23)
    {
      v16[2] = v24;
      v25 = *(id *)(a2 + 24);
      return;
    }
    goto LABEL_14;
  }
  sub_1008189C4(v13, a3 & 1);
  v18 = sub_1008437B0(a2);
  if ((v14 & 1) == (v19 & 1))
  {
    v10 = v18;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for CRLWPStickyNoteShadowCache.CacheKey);
  __break(1u);
}

void sub_1008270C0(uint64_t a1, uint64_t a2, char a3)
{
  sub_100827234(a1, a2, a3, &qword_1013F51B8);
}

void sub_1008270CC(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_100842EFC(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7];
      swift_bridgeObjectRelease(*(_QWORD *)(v21 + 8 * v14));
      *(_QWORD *)(v21 + 8 * v14) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_10082EA04();
    goto LABEL_7;
  }
  sub_100818D48(v17, a3 & 1);
  v22 = sub_100842EFC(a2);
  if ((v18 & 1) != (v23 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return;
  }
  v14 = v22;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  sub_10082AF80(v14, (uint64_t)v11, a1, v20);
}

void sub_100827228(uint64_t a1, uint64_t a2, char a3)
{
  sub_100827234(a1, a2, a3, &qword_1013F51B0);
}

void sub_100827234(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  _QWORD *v4;
  _QWORD **v6;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v6 = (_QWORD **)v4;
  v10 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)*v4;
  v15 = sub_100843264(a2);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  v19 = v14;
  v20 = v13[3];
  if (v20 >= v18 && (a3 & 1) != 0)
  {
LABEL_7:
    v21 = *v6;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      v22 = v21[7];
      swift_bridgeObjectRelease(*(_QWORD *)(v22 + 8 * v15));
      *(_QWORD *)(v22 + 8 * v15) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a3 & 1) == 0)
  {
    sub_10082E7D4(type metadata accessor for CRLBoardIdentifier, a4);
    goto LABEL_7;
  }
  sub_1008190E0(v18, a3 & 1, a4);
  v23 = sub_100843264(a2);
  if ((v19 & 1) != (v24 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v10);
    __break(1u);
    return;
  }
  v15 = v23;
  v21 = *v6;
  if ((v19 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  sub_1004B8460(a2, (uint64_t)v12, type metadata accessor for CRLBoardIdentifier);
  sub_10082B3F0(v15, (uint64_t)v12, a1, v21, type metadata accessor for CRLBoardIdentifier);
}

void sub_1008273AC(uint64_t a1, uint64_t a2, char a3)
{
  sub_10082A028(a1, a2, a3, type metadata accessor for CRLBoardIdentifier, (uint64_t (*)(uint64_t))sub_100843264, &qword_1013F4E60);
}

void sub_1008273C8(uint64_t a1, uint64_t a2, char a3)
{
  sub_10082A028(a1, a2, a3, type metadata accessor for CRLBoardIdentifier, (uint64_t (*)(uint64_t))sub_100843264, &qword_1013F4DE8);
}

void sub_1008273E4(uint64_t *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  _QWORD v32[4];
  char v33;

  v4 = (_QWORD **)v3;
  v7 = *a1;
  v8 = a1[1];
  v9 = a1[3];
  v29 = a1[2];
  v30 = v9;
  v31 = *((unsigned __int8 *)a1 + 32);
  v10 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)*v3;
  v15 = sub_100843264(a2);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  v19 = v14;
  v20 = v13[3];
  if (v20 >= v18 && (a3 & 1) != 0)
  {
LABEL_7:
    v21 = *v4;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      v22 = v21[7] + 40 * v15;
      v23 = *(_QWORD *)v22;
      v24 = *(_QWORD *)(v22 + 8);
      v25 = *(void **)(v22 + 24);
      swift_release(*(_QWORD *)(v22 + 16));
      swift_release(v24);
      swift_release(v23);

      *(_QWORD *)v22 = v7;
      *(_QWORD *)(v22 + 8) = v8;
      v26 = v30;
      *(_QWORD *)(v22 + 16) = v29;
      *(_QWORD *)(v22 + 24) = v26;
      *(_BYTE *)(v22 + 32) = v31;
      return;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a3 & 1) == 0)
  {
    sub_10082F02C();
    goto LABEL_7;
  }
  sub_100819C94(v18, a3 & 1);
  v27 = sub_100843264(a2);
  if ((v19 & 1) != (v28 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v10);
    __break(1u);
    return;
  }
  v15 = v27;
  v21 = *v4;
  if ((v19 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  sub_1004B8460(a2, (uint64_t)v12, type metadata accessor for CRLBoardIdentifier);
  v32[0] = v7;
  v32[1] = v8;
  v32[2] = v29;
  v32[3] = v30;
  v33 = v31;
  sub_10082B494(v15, (uint64_t)v12, (uint64_t)v32, v21);
}

void sub_1008275A0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v5 = (_QWORD **)v4;
  v10 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)*v4;
  v15 = sub_100843264(a3);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  v19 = v14;
  v20 = v13[3];
  if (v20 >= v18 && (a4 & 1) != 0)
  {
LABEL_7:
    v21 = *v5;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      v22 = (uint64_t *)(v21[7] + 16 * v15);
      swift_bridgeObjectRelease(v22[1]);
      *v22 = a1;
      v22[1] = a2;
      return;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a4 & 1) == 0)
  {
    sub_10082F2D0();
    goto LABEL_7;
  }
  sub_10081A0D0(v18, a4 & 1);
  v23 = sub_100843264(a3);
  if ((v19 & 1) != (v24 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v10);
    __break(1u);
    return;
  }
  v15 = v23;
  v21 = *v5;
  if ((v19 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  sub_1004B8460(a3, (uint64_t)v12, type metadata accessor for CRLBoardIdentifier);
  sub_10082B550(v15, (uint64_t)v12, a1, a2, v21);
}

uint64_t sub_100827704(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10082A6D4(a1, a2, a3, type metadata accessor for CRLBoardEntity, &qword_1013F4E20);
}

void sub_100827718(uint64_t a1, uint64_t a2, char a3)
{
  sub_100828FDC(a1, a2, a3, type metadata accessor for CRLBoardLibraryViewModel.Folder, sub_1008436B8, &qword_1013F4E28, (void (*)(void))sub_10081A958);
}

void sub_10082773C(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for CRLBoardPreviewImageCache.Item(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (_QWORD *)*v3;
  v13 = sub_100843760(a2);
  v14 = v11[2];
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_14;
  }
  v17 = v12;
  v18 = v11[3];
  if (v18 >= v16 && (a3 & 1) != 0)
  {
LABEL_7:
    v19 = *v4;
    if ((v17 & 1) != 0)
    {
LABEL_8:
      v20 = v19[7];

      *(_QWORD *)(v20 + 8 * v13) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v18 >= v16 && (a3 & 1) == 0)
  {
    sub_10082F7E0(type metadata accessor for CRLBoardPreviewImageCache.Item, &qword_1013F51A8);
    goto LABEL_7;
  }
  sub_10081AEA8(v16, a3 & 1);
  v21 = sub_100843760(a2);
  if ((v17 & 1) != (v22 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return;
  }
  v13 = v21;
  v19 = *v4;
  if ((v17 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  sub_1004B8460(a2, (uint64_t)v10, type metadata accessor for CRLBoardPreviewImageCache.Item);
  sub_10082B3F0(v13, (uint64_t)v10, a1, v19, type metadata accessor for CRLBoardPreviewImageCache.Item);
}

void sub_1008278B0(uint64_t a1, uint64_t a2, char a3)
{
  sub_1008295BC(a1, a2, a3, &qword_1013F5198);
}

void sub_1008278BC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  char v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v10 = *v4;
  v12 = sub_100842E98(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_10082FA2C();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      *(_QWORD *)(v18[7] + 8 * v12) = a1;
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v21 = (uint64_t *)(v18[6] + 16 * v12);
    *v21 = a2;
    v21[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v22 = v18[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (!v23)
    {
      v18[2] = v24;
      swift_bridgeObjectRetain(a3);
      return;
    }
    goto LABEL_14;
  }
  sub_10081BA94(v15, a4 & 1);
  v19 = sub_100842E98(a2, a3);
  if ((v16 & 1) == (v20 & 1))
  {
    v12 = v19;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_100827A0C(uint64_t a1, char a2, void *a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  int v19;
  _QWORD *v20;
  BOOL v21;
  uint64_t v22;
  id v23;
  uint64_t v24;

  v5 = (_QWORD **)v4;
  v9 = (_QWORD *)*v4;
  v11 = sub_100843848((uint64_t)a3);
  v12 = v9[2];
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
    goto LABEL_13;
  }
  v15 = v10;
  v16 = v9[3];
  if (v16 >= v14 && (a4 & 1) != 0)
    goto LABEL_9;
  if (v16 >= v14 && (a4 & 1) == 0)
  {
    sub_10082FBD8();
    goto LABEL_9;
  }
  sub_10081BD9C(v14, a4 & 1);
  v17 = sub_100843848((uint64_t)a3);
  if ((v15 & 1) != (v18 & 1))
  {
LABEL_13:
    v24 = sub_1004B8930(0, &qword_1013E8810, CKRecordID_ptr);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v24);
    __break(1u);
    return;
  }
  v11 = v17;
LABEL_9:
  v19 = a2 & 1;
  v20 = *v5;
  if ((v15 & 1) != 0)
  {
    v21 = v19 != 0;
    v22 = v20[7] + 16 * v11;
    sub_1004E1E08(*(void **)v22, *(_BYTE *)(v22 + 8));
    *(_QWORD *)v22 = a1;
    *(_BYTE *)(v22 + 8) = v21;
  }
  else
  {
    sub_10082B64C(v11, (uint64_t)a3, a1, v19, v20);
    v23 = a3;
  }
}

void sub_100827B58(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v4 = v3;
  v8 = *v3;
  v10 = sub_100843260(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= v13 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_10082FFA8();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = v16[7];

      *(_QWORD *)(v17 + 8 * v10) = a1;
      return;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    v20 = 8 * v10;
    *(_QWORD *)(v16[6] + v20) = a2;
    *(_QWORD *)(v16[7] + v20) = a1;
    v21 = v16[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (!v22)
    {
      v16[2] = v23;
      return;
    }
    goto LABEL_14;
  }
  sub_10081C408(v13, a3 & 1);
  v18 = sub_100843260(a2);
  if ((v14 & 1) == (v19 & 1))
  {
    v10 = v18;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for CRLCollaboratorColorType);
  __break(1u);
}

void sub_100827C90(uint64_t a1, uint64_t a2, char a3)
{
  sub_100827C9C(a1, a2, a3, &qword_1013F5090);
}

void sub_100827C9C(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v6 = v4;
  v10 = *v4;
  v12 = sub_100842E60(a2);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a3 & 1) == 0)
  {
    sub_100830314(a4);
LABEL_7:
    v18 = (_QWORD *)*v6;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];
      swift_release(*(_QWORD *)(v19 + 8 * v12));
      *(_QWORD *)(v19 + 8 * v12) = a1;
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v22 = 8 * v12;
    *(_QWORD *)(v18[6] + v22) = a2;
    *(_QWORD *)(v18[7] + v22) = a1;
    v23 = v18[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      return;
    }
    goto LABEL_14;
  }
  sub_10081C6D8(v15, a3 & 1, a4);
  v20 = sub_100842E60(a2);
  if ((v16 & 1) == (v21 & 1))
  {
    v12 = v20;
    v18 = (_QWORD *)*v6;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int);
  __break(1u);
}

void sub_100827DE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  char v24;

  v6 = (_QWORD **)v5;
  v12 = (_QWORD *)*v5;
  v14 = sub_100842E60(a4);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a5 & 1) != 0)
    {
LABEL_7:
      v20 = *v6;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = (uint64_t *)(v20[7] + 24 * v14);
        v22 = *v21;
        swift_release(v21[1]);
        swift_release(v22);
        *v21 = a1;
        v21[1] = a2;
        v21[2] = a3;
        return;
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a5 & 1) == 0)
    {
      sub_100830154();
      goto LABEL_7;
    }
    sub_10081C988(v17, a5 & 1);
    v23 = sub_100842E60(a4);
    if ((v18 & 1) == (v24 & 1))
    {
      v14 = v23;
      v20 = *v6;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10082B710(v14, a4, a1, a2, a3, v20);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int);
  __break(1u);
}

void sub_100827F20(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v4 = v3;
  v8 = *v3;
  v10 = sub_100842E60(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= v13 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_100830314(&qword_1013F4E70);
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = v16[7];
      swift_release(*(_QWORD *)(v17 + 8 * v10));
      *(_QWORD *)(v17 + 8 * v10) = a1;
      return;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    v20 = 8 * v10;
    *(_QWORD *)(v16[6] + v20) = a2;
    *(_QWORD *)(v16[7] + v20) = a1;
    v21 = v16[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (!v22)
    {
      v16[2] = v23;
      return;
    }
    goto LABEL_14;
  }
  sub_10081CC60(v13, a3 & 1);
  v18 = sub_100842E60(a2);
  if ((v14 & 1) == (v19 & 1))
  {
    v10 = v18;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for ObjectIdentifier);
  __break(1u);
}

void sub_100828060(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v4 = v3;
  v8 = *v3;
  v10 = sub_100849E04();
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= v13 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_100830670();
LABEL_7:
    v16 = *v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = (_QWORD *)(*(_QWORD *)(v16 + 56) + 16 * v10);
      swift_bridgeObjectRelease(v17[1]);
      *v17 = a1;
      v17[1] = a2;
      return;
    }
LABEL_11:
    *(_QWORD *)(v16 + 8 * (v10 >> 6) + 64) |= 1 << v10;
    v20 = (_QWORD *)(*(_QWORD *)(v16 + 56) + 16 * v10);
    *v20 = a1;
    v20[1] = a2;
    v21 = *(_QWORD *)(v16 + 16);
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (!v22)
    {
      *(_QWORD *)(v16 + 16) = v23;
      return;
    }
    goto LABEL_14;
  }
  sub_10081D244(v13, a3 & 1);
  v18 = sub_100849E04();
  if ((v14 & 1) == (v19 & 1))
  {
    v10 = v18;
    v16 = *v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&_s11ClientSceneC11MetadataKeyON);
  __break(1u);
}

void sub_100828188(uint64_t a1, void *a2, char a3)
{
  sub_1008281A4(a1, a2, a3, (uint64_t (*)(void *))sub_10084393C, &qword_1013F50C8, type metadata accessor for CRLContainerItem);
}

void sub_1008281A4(uint64_t a1, void *a2, char a3, uint64_t (*a4)(void *), uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  _QWORD *v6;
  _QWORD *v10;
  uint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  id v29;
  uint64_t v30;

  v10 = v6;
  v13 = *v6;
  v15 = a4(a2);
  v16 = *(_QWORD *)(v13 + 16);
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v19 = v14;
  v20 = *(_QWORD *)(v13 + 24);
  if (v20 >= v18 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v20 >= v18 && (a3 & 1) == 0)
  {
    sub_100834F90(a5);
LABEL_7:
    v21 = (_QWORD *)*v10;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      v22 = v21[7];
      swift_bridgeObjectRelease(*(_QWORD *)(v22 + 8 * v15));
      *(_QWORD *)(v22 + 8 * v15) = a1;
      return;
    }
LABEL_11:
    v21[(v15 >> 6) + 8] |= 1 << v15;
    v25 = 8 * v15;
    *(_QWORD *)(v21[6] + v25) = a2;
    *(_QWORD *)(v21[7] + v25) = a1;
    v26 = v21[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (!v27)
    {
      v21[2] = v28;
      v29 = a2;
      return;
    }
    goto LABEL_14;
  }
  sub_100824A50(v18, a3 & 1, a5);
  v23 = a4(a2);
  if ((v19 & 1) == (v24 & 1))
  {
    v15 = v23;
    v21 = (_QWORD *)*v10;
    if ((v19 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  v30 = a6(0);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v30);
  __break(1u);
}

void sub_100828320(__int128 *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  __int128 v25;
  unint64_t v26;
  char v27;
  uint64_t v28;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_100842EFC(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7] + 48 * v14;
      v22 = *(void **)v21;
      v23 = *(void **)(v21 + 8);
      v24 = *(_QWORD *)(v21 + 24);
      swift_bridgeObjectRelease(*(_QWORD *)(v21 + 40));

      swift_bridgeObjectRelease(v24);
      v25 = a1[1];
      *(_OWORD *)v21 = *a1;
      *(_OWORD *)(v21 + 16) = v25;
      *(_OWORD *)(v21 + 32) = a1[2];
      return;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_100830824();
    goto LABEL_7;
  }
  sub_10081D55C(v17, a3 & 1);
  v26 = sub_100842EFC(a2);
  if ((v18 & 1) != (v27 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return;
  }
  v14 = v26;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  sub_10082B760(v14, (uint64_t)v11, a1, v20);
}

void sub_1008284A4(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  char v21;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_100842E98(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_QWORD *)(v18[7] + 32 * v12);
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v19);
        sub_10050CB14(a1, v19);
        return;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_100830CAC();
      goto LABEL_7;
    }
    sub_10081DC94(v15, a4 & 1);
    v20 = sub_100842E98(a2, a3);
    if ((v16 & 1) == (v21 & 1))
    {
      v12 = v20;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10082B80C(v12, a2, a3, a1, v18);
      swift_bridgeObjectRetain(a3);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

uint64_t sub_1008285D4(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t result;
  unint64_t v22;
  char v23;
  uint64_t v24;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_100842EFC(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a3 & 1) != 0)
    {
LABEL_7:
      v20 = *v4;
      if ((v18 & 1) != 0)
        return sub_100836EB0(a1, v20[7] + 56 * v14);
      goto LABEL_11;
    }
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_10083102C();
      goto LABEL_7;
    }
    sub_10081E27C(v17, a3 & 1);
    v22 = sub_100842EFC(a2);
    if ((v18 & 1) == (v23 & 1))
    {
      v14 = v22;
      v20 = *v4;
      if ((v18 & 1) != 0)
        return sub_100836EB0(a1, v20[7] + 56 * v14);
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_10082B874(v14, (uint64_t)v11, a1, v20);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
  __break(1u);
  return result;
}

void sub_100828748(uint64_t a1, uint64_t a2, char a3)
{
  sub_1008295BC(a1, a2, a3, &qword_1013F5148);
}

void sub_100828754(uint64_t a1, uint64_t a2, char a3)
{
  sub_100829154(a1, a2, a3, &qword_1013F50B8);
}

id sub_100828760(uint64_t a1, void *a2, char a3)
{
  return sub_100828A78(a1, a2, a3, type metadata accessor for CRLThrottleInfo, &qword_1013F50F0);
}

void sub_100828774(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  id v23;
  uint64_t v24;

  v4 = v3;
  v7 = *v3;
  v9 = sub_100843848((uint64_t)a2);
  v10 = *(_QWORD *)(v7 + 16);
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v13 = v8;
  v14 = *(_QWORD *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_100831474(&qword_1013F4F48);
LABEL_7:
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
    {
LABEL_8:
      v16 = v15[7];

      *(_QWORD *)(v16 + 8 * v9) = a1;
      return;
    }
LABEL_11:
    v15[(v9 >> 6) + 8] |= 1 << v9;
    v19 = 8 * v9;
    *(_QWORD *)(v15[6] + v19) = a2;
    *(_QWORD *)(v15[7] + v19) = a1;
    v20 = v15[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (!v21)
    {
      v15[2] = v22;
      v23 = a2;
      return;
    }
    goto LABEL_14;
  }
  sub_10081E960(v12, a3 & 1, &qword_1013F4F48);
  v17 = sub_100843848((uint64_t)a2);
  if ((v13 & 1) == (v18 & 1))
  {
    v9 = v17;
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  v24 = sub_1004B8930(0, &qword_1013E8810, CKRecordID_ptr);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v24);
  __break(1u);
}

uint64_t sub_1008288E4(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10082A6D4(a1, a2, a3, type metadata accessor for CRLZoneSyncResultScenarios, &qword_1013F5080);
}

void sub_1008288F8(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  id v23;
  uint64_t v24;

  v4 = v3;
  v7 = *v3;
  v9 = sub_100843894((uint64_t)a2);
  v10 = *(_QWORD *)(v7 + 16);
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v13 = v8;
  v14 = *(_QWORD *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_100831610();
LABEL_7:
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
    {
LABEL_8:
      v16 = v15[7];
      swift_release(*(_QWORD *)(v16 + 8 * v9));
      *(_QWORD *)(v16 + 8 * v9) = a1;
      return;
    }
LABEL_11:
    v15[(v9 >> 6) + 8] |= 1 << v9;
    v19 = 8 * v9;
    *(_QWORD *)(v15[6] + v19) = a2;
    *(_QWORD *)(v15[7] + v19) = a1;
    v20 = v15[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (!v21)
    {
      v15[2] = v22;
      v23 = a2;
      return;
    }
    goto LABEL_14;
  }
  sub_10081EC2C(v12, a3 & 1);
  v17 = sub_100843894((uint64_t)a2);
  if ((v13 & 1) == (v18 & 1))
  {
    v9 = v17;
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  v24 = sub_1004B8930(0, (unint64_t *)&qword_1013E1770, CKRecordZoneID_ptr);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v24);
  __break(1u);
}

void sub_100828A58(uint64_t a1, uint64_t a2, char a3)
{
  sub_1008295BC(a1, a2, a3, &qword_1013F5100);
}

id sub_100828A64(uint64_t a1, void *a2, char a3)
{
  return sub_100828A78(a1, a2, a3, type metadata accessor for CRLZoneSyncResultScenarios, &qword_1013F50E0);
}

id sub_100828A78(uint64_t a1, void *a2, char a3, uint64_t (*a4)(_QWORD), uint64_t *a5)
{
  _QWORD *v5;
  _QWORD **v8;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  id result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v8 = (_QWORD **)v5;
  v11 = (_QWORD *)*v5;
  v13 = sub_100843894((uint64_t)a2);
  v14 = v11[2];
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    v17 = v12;
    v18 = v11[3];
    if (v18 >= v16 && (a3 & 1) != 0)
    {
LABEL_7:
      v19 = *v8;
      if ((v17 & 1) != 0)
      {
LABEL_8:
        v20 = v19[7];
        v21 = a4(0);
        return (id)sub_100836E6C(a1, v20 + *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72) * v13, a4);
      }
      goto LABEL_11;
    }
    if (v18 >= v16 && (a3 & 1) == 0)
    {
      sub_100831B48(a4, a5);
      goto LABEL_7;
    }
    sub_10081F4F0(v16, a3 & 1, a4, a5);
    v23 = sub_100843894((uint64_t)a2);
    if ((v17 & 1) == (v24 & 1))
    {
      v13 = v23;
      v19 = *v8;
      if ((v17 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10082B9F4(v13, (uint64_t)a2, a1, v19, a4);
      return a2;
    }
  }
  v25 = sub_1004B8930(0, (unint64_t *)&qword_1013E1770, CKRecordZoneID_ptr);
  result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v25);
  __break(1u);
  return result;
}

uint64_t *sub_100828BDC(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *result;
  unint64_t v17;
  char v18;
  uint64_t v19;

  v4 = (_QWORD **)v3;
  v7 = (_QWORD *)*v3;
  v9 = sub_100843848((uint64_t)a2);
  v10 = v7[2];
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    v13 = v8;
    v14 = v7[3];
    if (v14 >= v12 && (a3 & 1) != 0)
    {
LABEL_7:
      v15 = *v4;
      if ((v13 & 1) != 0)
        return sub_100836E1C(a1, (uint64_t *)(v15[7] + 40 * v9));
      goto LABEL_11;
    }
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      sub_100831D70();
      goto LABEL_7;
    }
    sub_10081F83C(v12, a3 & 1);
    v17 = sub_100843848((uint64_t)a2);
    if ((v13 & 1) == (v18 & 1))
    {
      v9 = v17;
      v15 = *v4;
      if ((v13 & 1) != 0)
        return sub_100836E1C(a1, (uint64_t *)(v15[7] + 40 * v9));
LABEL_11:
      sub_10082BA88(v9, (uint64_t)a2, a1, v15);
      return (uint64_t *)a2;
    }
  }
  v19 = sub_1004B8930(0, &qword_1013E8810, CKRecordID_ptr);
  result = (uint64_t *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v19);
  __break(1u);
  return result;
}

void sub_100828D04(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;

  v5 = v4;
  v10 = *v4;
  v12 = sub_100843260(a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_100832120();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7] + 16 * v12;

      *(_QWORD *)v19 = a1;
      *(_QWORD *)(v19 + 8) = a2;
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    *(_QWORD *)(v18[6] + 8 * v12) = a3;
    v22 = (_QWORD *)(v18[7] + 16 * v12);
    *v22 = a1;
    v22[1] = a2;
    v23 = v18[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      return;
    }
    goto LABEL_14;
  }
  sub_10081FE68(v15, a4 & 1);
  v20 = sub_100843260(a3);
  if ((v16 & 1) == (v21 & 1))
  {
    v12 = v20;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  _s3__C4CodeOMa_0(0);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v26);
  __break(1u);
}

uint64_t sub_100828E40(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100828E54(a1, a2, a3, _s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa, &qword_1013F5018);
}

uint64_t sub_100828E54(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(_QWORD), uint64_t *a5)
{
  _QWORD *v5;
  _QWORD **v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  unint64_t v26;
  char v27;
  uint64_t *v28;
  uint64_t v29;

  v28 = a5;
  v29 = a1;
  v7 = (_QWORD **)v5;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_QWORD *)*v5;
  v16 = sub_100842EFC(a2);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }
  v20 = v15;
  v21 = v14[3];
  if (v21 >= v19 && (a3 & 1) != 0)
  {
LABEL_7:
    v22 = *v7;
    if ((v20 & 1) != 0)
    {
LABEL_8:
      v23 = v22[7];
      v24 = a4(0);
      return sub_100836E6C(v29, v23 + *(_QWORD *)(*(_QWORD *)(v24 - 8) + 72) * v16, a4);
    }
    goto LABEL_11;
  }
  if (v21 >= v19 && (a3 & 1) == 0)
  {
    sub_1008322E0(a4, v28);
    goto LABEL_7;
  }
  sub_100820158(v19, a3 & 1, a4, v28);
  v26 = sub_100842EFC(a2);
  if ((v20 & 1) != (v27 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v10);
    __break(1u);
    return result;
  }
  v16 = v26;
  v22 = *v7;
  if ((v20 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
  return sub_10082BAFC(v16, (uint64_t)v13, v29, v22, a4);
}

void sub_100828FDC(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(_QWORD), uint64_t (*a5)(uint64_t), uint64_t *a6, void (*a7)(void))
{
  _QWORD *v7;
  _QWORD **v10;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t *v28;
  void (*v29)(void);
  uint64_t v30;

  v28 = a6;
  v29 = a7;
  v10 = (_QWORD **)v7;
  v30 = a1;
  v13 = a4(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v27 - v14;
  v16 = (_QWORD *)*v7;
  v18 = a5(a2);
  v19 = v16[2];
  v20 = (v17 & 1) == 0;
  v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
    goto LABEL_14;
  }
  v22 = v17;
  v23 = v16[3];
  if (v23 >= v21 && (a3 & 1) != 0)
  {
LABEL_7:
    v24 = *v10;
    if ((v22 & 1) != 0)
    {
LABEL_8:
      *(_QWORD *)(v24[7] + 8 * v18) = v30;
      return;
    }
    goto LABEL_11;
  }
  if (v23 >= v21 && (a3 & 1) == 0)
  {
    sub_1008325A4(a4, v28);
    goto LABEL_7;
  }
  v29();
  v25 = a5(a2);
  if ((v22 & 1) != (v26 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v13);
    __break(1u);
    return;
  }
  v18 = v25;
  v24 = *v10;
  if ((v22 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  sub_1004B8460(a2, (uint64_t)v15, a4);
  sub_10082B3F0(v18, (uint64_t)v15, v30, v24, a4);
}

void sub_100829148(uint64_t a1, uint64_t a2, char a3)
{
  sub_100829154(a1, a2, a3, &qword_1013F50B0);
}

void sub_100829154(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  _QWORD *v4;
  _QWORD **v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;

  v6 = (_QWORD **)v4;
  v26 = a1;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)*v4;
  v15 = sub_100842EFC(a2);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  v19 = v14;
  v20 = v13[3];
  if (v20 >= v18 && (a3 & 1) != 0)
  {
LABEL_7:
    v21 = *v6;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      v22 = v21[7];

      *(_QWORD *)(v22 + 8 * v15) = v26;
      return;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a3 & 1) == 0)
  {
    sub_1008327E0((uint64_t (*)(_QWORD))&type metadata accessor for UUID, a4);
    goto LABEL_7;
  }
  sub_100815CF8(v18, a3 & 1, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, a4, (unint64_t *)&qword_1013DE630, (uint64_t)&protocol conformance descriptor for UUID);
  v23 = sub_100842EFC(a2);
  if ((v19 & 1) != (v24 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v9);
    __break(1u);
    return;
  }
  v15 = v23;
  v21 = *v6;
  if ((v19 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  sub_10082BC6C(v15, (uint64_t)v12, v26, v21, (uint64_t (*)(_QWORD))&type metadata accessor for UUID);
}

void sub_1008292EC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v5 = v4;
  v10 = *v4;
  v12 = sub_100842E60(a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_100832A08();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7] + 16 * v12;
      sub_1004BBBC8(*(_QWORD *)v19, *(_QWORD *)(v19 + 8));
      *(_QWORD *)v19 = a1;
      *(_QWORD *)(v19 + 8) = a2;
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    *(_QWORD *)(v18[6] + 8 * v12) = a3;
    v22 = (_QWORD *)(v18[7] + 16 * v12);
    *v22 = a1;
    v22[1] = a2;
    v23 = v18[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      return;
    }
    goto LABEL_14;
  }
  sub_100820930(v15, a4 & 1);
  v20 = sub_100842E60(a3);
  if ((v16 & 1) == (v21 & 1))
  {
    v12 = v20;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int);
  __break(1u);
}

uint64_t sub_100829428(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (_QWORD *)*v3;
  v13 = sub_100843264(a2);
  v14 = v11[2];
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    v17 = v12;
    v18 = v11[3];
    if (v18 >= v16 && (a3 & 1) != 0)
    {
LABEL_7:
      v19 = *v4;
      if ((v17 & 1) != 0)
      {
LABEL_8:
        v20 = v19[7];
        v21 = type metadata accessor for Date(0);
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 40))(v20 + *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72) * v13, a1, v21);
      }
      goto LABEL_11;
    }
    if (v18 >= v16 && (a3 & 1) == 0)
    {
      sub_100832BB4();
      goto LABEL_7;
    }
    sub_100820BF4(v16, a3 & 1);
    v23 = sub_100843264(a2);
    if ((v17 & 1) == (v24 & 1))
    {
      v13 = v23;
      v19 = *v4;
      if ((v17 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1004B8460(a2, (uint64_t)v10, type metadata accessor for CRLBoardIdentifier);
      return sub_10082BBB4(v13, (uint64_t)v10, a1, v19);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
  __break(1u);
  return result;
}

void sub_1008295B0(uint64_t a1, uint64_t a2, char a3)
{
  sub_1008295BC(a1, a2, a3, &qword_1013F5030);
}

void sub_1008295BC(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  _QWORD *v4;
  _QWORD **v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;

  v6 = (_QWORD **)v4;
  v26 = a1;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)*v4;
  v15 = sub_100842EFC(a2);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  v19 = v14;
  v20 = v13[3];
  if (v20 >= v18 && (a3 & 1) != 0)
  {
LABEL_7:
    v21 = *v6;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      v22 = v21[7];
      swift_release(*(_QWORD *)(v22 + 8 * v15));
      *(_QWORD *)(v22 + 8 * v15) = v26;
      return;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a3 & 1) == 0)
  {
    sub_1008344D4(a4);
    goto LABEL_7;
  }
  sub_100815290(v18, a3 & 1, a4);
  v23 = sub_100842EFC(a2);
  if ((v19 & 1) != (v24 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v9);
    __break(1u);
    return;
  }
  v15 = v23;
  v21 = *v6;
  if ((v19 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  sub_10082BC6C(v15, (uint64_t)v12, v26, v21, (uint64_t (*)(_QWORD))&type metadata accessor for UUID);
}

void sub_100829734(uint64_t a1, uint64_t a2, char a3)
{
  sub_10082A028(a1, a2, a3, type metadata accessor for CRLGloballyScopedBoardIdentifier, (uint64_t (*)(uint64_t))sub_100843584, &qword_1013F5040);
}

void sub_100829750(int a1, uint64_t a2, char a3)
{
  sub_100829E94(a1, a2, a3, type metadata accessor for CRLGloballyScopedBoardIdentifier, (uint64_t (*)(uint64_t, __n128))sub_100843584, &qword_1013F5048);
}

void sub_10082976C(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v4 = v3;
  v8 = *v3;
  v10 = sub_1008436B4(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= v13 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_100833060();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = v16[7];

      *(_QWORD *)(v17 + 8 * v10) = a1;
      return;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(_BYTE *)(v16[6] + v10) = a2;
    *(_QWORD *)(v16[7] + 8 * v10) = a1;
    v20 = v16[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (!v21)
    {
      v16[2] = v22;
      return;
    }
    goto LABEL_14;
  }
  sub_10082135C(v13, a3 & 1);
  v18 = sub_1008436B4(a2);
  if ((v14 & 1) == (v19 & 1))
  {
    v10 = v18;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for CRLFollowAccessibilityExperienceCoordinator.HistoryBreadcrumb.Event.EventType);
  __break(1u);
}

void sub_1008298A0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v5 = v4;
  v10 = *v4;
  v12 = sub_100842E98(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_100833200();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];

      *(_QWORD *)(v19 + 8 * v12) = a1;
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v22 = (uint64_t *)(v18[6] + 16 * v12);
    *v22 = a2;
    v22[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v23 = v18[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      swift_bridgeObjectRetain(a3);
      return;
    }
    goto LABEL_14;
  }
  sub_100821624(v15, a4 & 1);
  v20 = sub_100842E98(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    v12 = v20;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_1008299FC(uint64_t a1, char a2, double a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  char v21;
  uint64_t v22;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (_QWORD *)*v3;
  v13 = sub_100843264(a1);
  v14 = v11[2];
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    v17 = v12;
    v18 = v11[3];
    if (v18 >= v16 && (a2 & 1) != 0)
    {
LABEL_7:
      v19 = *v4;
      if ((v17 & 1) != 0)
      {
LABEL_8:
        *(double *)(v19[7] + 8 * v13) = a3;
        return;
      }
      goto LABEL_11;
    }
    if (v18 >= v16 && (a2 & 1) == 0)
    {
      sub_100833768();
      goto LABEL_7;
    }
    sub_100821F88(v16, a2 & 1);
    v20 = sub_100843264(a1);
    if ((v17 & 1) == (v21 & 1))
    {
      v13 = v20;
      v19 = *v4;
      if ((v17 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1004B8460(a1, (uint64_t)v10, type metadata accessor for CRLBoardIdentifier);
      sub_10082BD54(v13, (uint64_t)v10, v19, a3);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
  __break(1u);
}

void sub_100829B4C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_100842E98(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];
        v20 = type metadata accessor for UUID(0);
        (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 40))(v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v12, a1, v20);
        return;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1008339B8((uint64_t (*)(_QWORD))&type metadata accessor for UUID, &qword_1013F4EB0);
      goto LABEL_7;
    }
    sub_10082236C(v15, a4 & 1, (uint64_t (*)(_QWORD))&type metadata accessor for UUID, &qword_1013F4EB0);
    v21 = sub_100842E98(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10082BDEC(v12, a2, a3, a1, v18);
      swift_bridgeObjectRetain(a3);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_100829CA8(uint64_t a1, uint64_t a2, char a3)
{
  sub_10082A028(a1, a2, a3, type metadata accessor for CRLBoardIdentifier, (uint64_t (*)(uint64_t))sub_100843264, &qword_1013F4DF8);
}

uint64_t sub_100829CC4(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for CRLAssetReferrerIdentifier(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (_QWORD *)*v3;
  v13 = sub_100843F8C(a2);
  v14 = v11[2];
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_14;
  }
  v17 = v12;
  v18 = v11[3];
  if (v18 >= v16 && (a3 & 1) != 0)
  {
LABEL_7:
    v19 = *v4;
    if ((v17 & 1) != 0)
    {
LABEL_8:
      v20 = v19[7];
      v21 = type metadata accessor for CRLBoardIdentifier(0);
      return sub_100836E6C(a1, v20 + *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72) * v13, type metadata accessor for CRLBoardIdentifier);
    }
    goto LABEL_11;
  }
  if (v18 >= v16 && (a3 & 1) == 0)
  {
    sub_10082F564(type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLAssetReferrerIdentifier, &qword_1013F5190);
    goto LABEL_7;
  }
  sub_1008226F0(v16, a3 & 1);
  v23 = sub_100843F8C(a2);
  if ((v17 & 1) != (v24 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }
  v13 = v23;
  v19 = *v4;
  if ((v17 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  sub_1004B8460(a2, (uint64_t)v10, type metadata accessor for CRLAssetReferrerIdentifier);
  return sub_10082B934(v13, (uint64_t)v10, a1, v19, type metadata accessor for CRLAssetReferrerIdentifier, type metadata accessor for CRLBoardIdentifier);
}

void sub_100829E5C(uint64_t a1, uint64_t a2, char a3)
{
  sub_10082A028(a1, a2, a3, type metadata accessor for CRLBoardIdentifier, (uint64_t (*)(uint64_t))sub_100843264, &qword_1013F5088);
}

void sub_100829E78(int a1, uint64_t a2, char a3)
{
  sub_100829E94(a1, a2, a3, type metadata accessor for CRLBoardIdentifier, (uint64_t (*)(uint64_t, __n128))sub_100843264, &qword_1013F50D0);
}

void sub_100829E94(int a1, uint64_t a2, char a3, uint64_t (*a4)(_QWORD), uint64_t (*a5)(uint64_t, __n128), uint64_t *a6)
{
  _QWORD *v6;
  _QWORD **v9;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  char v26;
  uint64_t *v27;
  int v28;

  v27 = a6;
  v9 = (_QWORD **)v6;
  v28 = a1;
  v12 = a4(0);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v27 - v14;
  v16 = (_QWORD *)*v6;
  v18 = a5(a2, v13);
  v19 = v16[2];
  v20 = (v17 & 1) == 0;
  v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
    goto LABEL_14;
  }
  v22 = v17;
  v23 = v16[3];
  if (v23 >= v21 && (a3 & 1) != 0)
  {
LABEL_7:
    v24 = *v9;
    if ((v22 & 1) != 0)
    {
LABEL_8:
      *(_BYTE *)(v24[7] + v18) = v28 & 1;
      return;
    }
    goto LABEL_11;
  }
  if (v23 >= v21 && (a3 & 1) == 0)
  {
    sub_100833C50(a4, v27);
    goto LABEL_7;
  }
  sub_100822D88(v21, a3 & 1, a4, v27);
  v25 = ((uint64_t (*)(uint64_t))a5)(a2);
  if ((v22 & 1) != (v26 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v12);
    __break(1u);
    return;
  }
  v18 = v25;
  v24 = *v9;
  if ((v22 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  sub_1004B8460(a2, (uint64_t)v15, a4);
  sub_10082BE7C(v18, (uint64_t)v15, v28 & 1, v24, a4);
}

void sub_10082A00C(uint64_t a1, uint64_t a2, char a3)
{
  sub_10082A028(a1, a2, a3, type metadata accessor for CRLBoardIdentifier, (uint64_t (*)(uint64_t))sub_100843264, &qword_1013F5078);
}

void sub_10082A028(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(_QWORD), uint64_t (*a5)(uint64_t), uint64_t *a6)
{
  _QWORD *v6;
  _QWORD **v9;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t *v28;
  uint64_t v29;

  v28 = a6;
  v29 = a1;
  v9 = (_QWORD **)v6;
  v12 = a4(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v28 - v13;
  v15 = (_QWORD *)*v6;
  v17 = a5(a2);
  v18 = v15[2];
  v19 = (v16 & 1) == 0;
  v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_14;
  }
  v21 = v16;
  v22 = v15[3];
  if (v22 >= v20 && (a3 & 1) != 0)
  {
LABEL_7:
    v23 = *v9;
    if ((v21 & 1) != 0)
    {
LABEL_8:
      v24 = v23[7];
      v25 = 8 * v17;
      swift_release(*(_QWORD *)(v24 + v25));
      *(_QWORD *)(v24 + v25) = v29;
      return;
    }
    goto LABEL_11;
  }
  if (v22 >= v20 && (a3 & 1) == 0)
  {
    sub_10082EDFC(a4, v28);
    goto LABEL_7;
  }
  sub_1008198AC(v20, a3 & 1, a4, v28);
  v26 = a5(a2);
  if ((v21 & 1) != (v27 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v12);
    __break(1u);
    return;
  }
  v17 = v26;
  v23 = *v9;
  if ((v21 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  sub_1004B8460(a2, (uint64_t)v14, a4);
  sub_10082B3F0(v17, (uint64_t)v14, v29, v23, a4);
}

void sub_10082A1A0(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v4 = v3;
  v8 = *v3;
  v10 = sub_100843260(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= v13 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_10083415C();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      *(_QWORD *)(v16[7] + 8 * v10) = a1;
      return;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    v19 = 8 * v10;
    *(_QWORD *)(v16[6] + v19) = a2;
    *(_QWORD *)(v16[7] + v19) = a1;
    v20 = v16[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (!v21)
    {
      v16[2] = v22;
      return;
    }
    goto LABEL_14;
  }
  sub_100823570(v13, a3 & 1);
  v17 = sub_100843260(a2);
  if ((v14 & 1) == (v18 & 1))
  {
    v10 = v17;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for CRLFreehandDrawingShapeType);
  __break(1u);
}

_OWORD *sub_10082A2CC(_OWORD *a1, void *a2, char a3)
{
  return sub_10082A2E8(a1, a2, a3, (uint64_t (*)(void *))sub_100842FAC, &qword_1013F4F98, (uint64_t (*)(_QWORD))type metadata accessor for Name);
}

_OWORD *sub_10082A2E8(_OWORD *a1, void *a2, char a3, uint64_t (*a4)(void *), uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  _QWORD *v6;
  _QWORD **v10;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _OWORD *result;
  uint64_t v24;
  char v25;
  uint64_t v26;

  v10 = (_QWORD **)v6;
  v13 = (_QWORD *)*v6;
  v15 = a4(a2);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
  }
  else
  {
    v19 = v14;
    v20 = v13[3];
    if (v20 >= v18 && (a3 & 1) != 0)
    {
LABEL_7:
      v21 = *v10;
      if ((v19 & 1) != 0)
      {
LABEL_8:
        v22 = (_QWORD *)(v21[7] + 32 * v15);
        _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v22);
        return sub_10050CB14(a1, v22);
      }
      goto LABEL_11;
    }
    if (v20 >= v18 && (a3 & 1) == 0)
    {
      sub_100834300(a5);
      goto LABEL_7;
    }
    sub_100823848(v18, a3 & 1, a5);
    v24 = a4(a2);
    if ((v19 & 1) == (v25 & 1))
    {
      v15 = v24;
      v21 = *v10;
      if ((v19 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10082BF14(v15, (uint64_t)a2, a1, v21);
      return a2;
    }
  }
  v26 = a6(0);
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v26);
  __break(1u);
  return result;
}

void sub_10082A434(uint64_t a1, void *a2, char a3)
{
  sub_1008281A4(a1, a2, a3, (uint64_t (*)(void *))sub_10084406C, &qword_1013F4F70, type metadata accessor for CRLSceneInfo);
}

uint64_t sub_10082A450(uint64_t a1, char a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  char v7;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  unint64_t v20;
  char v21;

  v4 = (_QWORD **)v3;
  v7 = a2 & 1;
  v8 = (_QWORD *)*v3;
  v10 = sub_100843B24(a2 & 1);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7];
        v18 = type metadata accessor for CRLSyncScheduledActivity(0);
        return sub_100836E6C(a1, v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v10, type metadata accessor for CRLSyncScheduledActivity);
      }
      return sub_10082BF78(v10, v7, a1, v16, type metadata accessor for CRLSyncScheduledActivity);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_10083472C(type metadata accessor for CRLSyncScheduledActivity, &qword_1013F4F38);
      goto LABEL_7;
    }
    sub_100823B9C(v13, a3 & 1, type metadata accessor for CRLSyncScheduledActivity, &qword_1013F4F38);
    v20 = sub_100843B24(v7);
    if ((v14 & 1) == (v21 & 1))
    {
      v10 = v20;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return sub_10082BF78(v10, v7, a1, v16, type metadata accessor for CRLSyncScheduledActivity);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for CRLSyncActivityIdentifier);
  __break(1u);
  return result;
}

void sub_10082A590(uint64_t a1, uint64_t a2, char a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  char v9;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  unint64_t v20;
  char v21;

  v5 = (_QWORD **)v4;
  v9 = a3 & 1;
  v10 = (_QWORD *)*v4;
  v12 = sub_100843B24(a3 & 1);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (uint64_t *)(v18[7] + 16 * v12);
        swift_release(v19[1]);
        *v19 = a1;
        v19[1] = a2;
        return;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_10083494C();
      goto LABEL_7;
    }
    sub_100823F2C(v15, a4 & 1);
    v20 = sub_100843B24(v9);
    if ((v16 & 1) == (v21 & 1))
    {
      v12 = v20;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10082C010(v12, v9, a1, a2, v18);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for CRLSyncActivityIdentifier);
  __break(1u);
}

uint64_t sub_10082A6AC(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10082A6D4(a1, a2, a3, type metadata accessor for CRLBoardViewModelMetadata, &qword_1013F4E30);
}

uint64_t sub_10082A6C0(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10082A6D4(a1, a2, a3, type metadata accessor for CRLBoardViewModelMetadata.ShareMetadata, &qword_1013F4E50);
}

uint64_t sub_10082A6D4(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(_QWORD), uint64_t *a5)
{
  _QWORD *v5;
  _QWORD **v8;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;

  v8 = (_QWORD **)v5;
  v29 = a1;
  v11 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_QWORD *)*v5;
  v16 = sub_100843264(a2);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }
  v20 = v15;
  v21 = v14[3];
  if (v21 >= v19 && (a3 & 1) != 0)
  {
LABEL_7:
    v22 = *v8;
    if ((v20 & 1) != 0)
    {
LABEL_8:
      v23 = v22[7];
      v24 = a4(0);
      return sub_100836E6C(v29, v23 + *(_QWORD *)(*(_QWORD *)(v24 - 8) + 72) * v16, a4);
    }
    goto LABEL_11;
  }
  if (v21 >= v19 && (a3 & 1) == 0)
  {
    sub_10082F564(a4, type metadata accessor for CRLBoardIdentifier, a5);
    goto LABEL_7;
  }
  sub_10081A508(v19, a3 & 1, a4, a5);
  v26 = sub_100843264(a2);
  if ((v20 & 1) != (v27 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v11);
    __break(1u);
    return result;
  }
  v16 = v26;
  v22 = *v8;
  if ((v20 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  sub_1004B8460(a2, (uint64_t)v13, type metadata accessor for CRLBoardIdentifier);
  return sub_10082B934(v16, (uint64_t)v13, v29, v22, type metadata accessor for CRLBoardIdentifier, a4);
}

void sub_10082A870(uint64_t a1, void *a2, char a3)
{
  sub_1008281A4(a1, a2, a3, (uint64_t (*)(void *))sub_1008440B0, &qword_1013F4F08, (uint64_t (*)(_QWORD))type metadata accessor for CRLWPListStyle);
}

void sub_10082A88C(char a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  char v22;
  uint64_t v23;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_100842EFC(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      *(_BYTE *)(v20[7] + v14) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_100835130();
    goto LABEL_7;
  }
  sub_100824D20(v17, a3 & 1);
  v21 = sub_100842EFC(a2);
  if ((v18 & 1) != (v22 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return;
  }
  v14 = v21;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  sub_10082C0A4(v14, (uint64_t)v11, a1, v20);
}

void sub_10082A9DC(void *a1, void *a2, void *a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  void **v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  _QWORD *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  _OWORD v31[2];
  uint64_t v32;

  v6 = v5;
  v12 = *v5;
  v14 = sub_1008432BC(a4);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  v18 = v13;
  v19 = *(_QWORD *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0)
    goto LABEL_7;
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_100835350();
LABEL_7:
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = (void **)(v20[7] + 24 * v14);
      sub_100510E00(*v21, v21[1], v21[2]);
      *v21 = a1;
      v21[1] = a2;
      v21[2] = a3;
      return;
    }
    goto LABEL_11;
  }
  sub_1008250C0(v17, a5 & 1);
  v22 = sub_1008432BC(a4);
  if ((v18 & 1) != (v23 & 1))
  {
LABEL_16:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AnyHashable);
    __break(1u);
    return;
  }
  v14 = v22;
  v20 = (_QWORD *)*v6;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  sub_1004B8968(a4, (uint64_t)v31);
  v20[(v14 >> 6) + 8] |= 1 << v14;
  v24 = v20[6] + 40 * v14;
  v25 = v32;
  v26 = v31[1];
  *(_OWORD *)v24 = v31[0];
  *(_OWORD *)(v24 + 16) = v26;
  *(_QWORD *)(v24 + 32) = v25;
  v27 = (_QWORD *)(v20[7] + 24 * v14);
  *v27 = a1;
  v27[1] = a2;
  v27[2] = a3;
  v28 = v20[2];
  v29 = __OFADD__(v28, 1);
  v30 = v28 + 1;
  if (v29)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v20[2] = v30;
}

void sub_10082AB64(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (_QWORD *)*v3;
  v13 = sub_100843264(a2);
  v14 = v11[2];
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_14;
  }
  v17 = v12;
  v18 = v11[3];
  if (v18 >= v16 && (a3 & 1) != 0)
  {
LABEL_7:
    v19 = *v4;
    if ((v17 & 1) != 0)
    {
LABEL_8:
      v20 = v19[7];

      *(_QWORD *)(v20 + 8 * v13) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v18 >= v16 && (a3 & 1) == 0)
  {
    sub_10082F7E0(type metadata accessor for CRLBoardIdentifier, &qword_1013F4EE0);
    goto LABEL_7;
  }
  sub_10081B6A0(v16, a3 & 1, &qword_1013F4EE0);
  v21 = sub_100843264(a2);
  if ((v17 & 1) != (v22 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return;
  }
  v13 = v21;
  v19 = *v4;
  if ((v17 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  sub_1004B8460(a2, (uint64_t)v10, type metadata accessor for CRLBoardIdentifier);
  sub_10082B3F0(v13, (uint64_t)v10, a1, v19, type metadata accessor for CRLBoardIdentifier);
}

uint64_t sub_10082ACE0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v10 = a5[6];
  v11 = type metadata accessor for UUID(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a2, v11);
  v13 = (_QWORD *)(a5[7] + 16 * a1);
  *v13 = a3;
  v13[1] = a4;
  v14 = a5[2];
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    a5[2] = v16;
  return result;
}

_OWORD *sub_10082AD80(unint64_t a1, char a2, _OWORD *a3, _QWORD *a4)
{
  _OWORD *result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_BYTE *)(a4[6] + a1) = a2;
  result = sub_10050CB14(a3, (_OWORD *)(a4[7] + 32 * a1));
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

uint64_t sub_10082ADE4(unint64_t a1, char a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_BYTE *)(a4[6] + a1) = a2;
  result = sub_1004C4938(a3, a4[7] + 32 * a1, &qword_1013E0230);
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

uint64_t sub_10082AE54(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = sub_1004C4938(a3, a4[7] + 32 * a1, &qword_1013E0230);
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

uint64_t sub_10082AEC4(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  v10 = a4[7];
  v11 = sub_1004B804C((uint64_t *)&unk_1013F13A0);
  result = sub_1004C4938(a3, v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, (uint64_t *)&unk_1013F13A0);
  v13 = a4[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a4[2] = v15;
  return result;
}

uint64_t sub_10082AF80(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for UUID(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

_OWORD *sub_10082B018(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  uint64_t v5;
  __int128 v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v5 = a4[6] + 40 * a1;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  result = sub_10050CB14(a3, (_OWORD *)(a4[7] + 32 * a1));
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

uint64_t sub_10082B090(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 72) * a1;
  v12 = v8 + v11;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32);
  v13(v12, a2, v9);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v13)(a4[7] + v11, a3, v9);
  v15 = a4[2];
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
    __break(1u);
  else
    a4[2] = v17;
  return result;
}

uint64_t sub_10082B13C(unint64_t a1, char a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_BYTE *)(a4[6] + a1) = a2;
  v7 = a4[7];
  v8 = sub_1004B804C(&qword_1013E1798);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v7 + *(_QWORD *)(*(_QWORD *)(v8 - 8) + 72) * a1, a3, v8);
  v10 = a4[2];
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    __break(1u);
  else
    a4[2] = v12;
  return result;
}

uint64_t sub_10082B1CC(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  a6[(a1 >> 6) + 8] |= 1 << a1;
  v12 = a6[6];
  v13 = type metadata accessor for UUID(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v12 + *(_QWORD *)(*(_QWORD *)(v13 - 8) + 72) * a1, a2, v13);
  v15 = (_QWORD *)(a6[7] + 24 * a1);
  *v15 = a3;
  v15[1] = a4;
  v15[2] = a5;
  v16 = a6[2];
  v17 = __OFADD__(v16, 1);
  v18 = v16 + 1;
  if (v17)
    __break(1u);
  else
    a6[2] = v18;
  return result;
}

_OWORD *sub_10082B280(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  _OWORD *result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for CodingUserInfoKey(0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  result = sub_10050CB14(a3, (_OWORD *)(a4[7] + 32 * a1));
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

uint64_t sub_10082B320(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  v10 = a4[7];
  v11 = type metadata accessor for URL(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a3, v11);
  v13 = a4[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a4[2] = v15;
  return result;
}

uint64_t sub_10082B3D8(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  return sub_10082B3F0(a1, a2, a3, a4, type metadata accessor for CRLBoardPreviewImageCache.Item);
}

uint64_t sub_10082B3E4(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  return sub_10082B3F0(a1, a2, a3, a4, type metadata accessor for CRLBoardIdentifier);
}

uint64_t sub_10082B3F0(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v10 = a4[6];
  v11 = a5(0);
  result = sub_1004B84E0(a2, v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a5);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v13 = a4[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a4[2] = v15;
  return result;
}

uint64_t sub_10082B488(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  return sub_10082BC6C(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for UUID);
}

uint64_t sub_10082B494(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(a3 + 24);
  v10 = *(_BYTE *)(a3 + 32);
  a4[(a1 >> 6) + 8] |= 1 << a1;
  v11 = a4[6];
  v12 = type metadata accessor for CRLBoardIdentifier(0);
  result = sub_1004B84E0(a2, v11 + *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72) * a1, type metadata accessor for CRLBoardIdentifier);
  v14 = a4[7] + 40 * a1;
  *(_OWORD *)v14 = *(_OWORD *)a3;
  *(_QWORD *)(v14 + 16) = v8;
  *(_QWORD *)(v14 + 24) = v9;
  *(_BYTE *)(v14 + 32) = v10;
  v15 = a4[2];
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
    __break(1u);
  else
    a4[2] = v17;
  return result;
}

uint64_t sub_10082B550(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v10 = a5[6];
  v11 = type metadata accessor for CRLBoardIdentifier(0);
  result = sub_1004B84E0(a2, v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, type metadata accessor for CRLBoardIdentifier);
  v13 = (_QWORD *)(a5[7] + 16 * a1);
  *v13 = a3;
  v13[1] = a4;
  v14 = a5[2];
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    a5[2] = v16;
  return result;
}

uint64_t sub_10082B5F0(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  return sub_10082B934(a1, a2, a3, a4, type metadata accessor for CRLBoardIdentifier, type metadata accessor for CRLBoardEntity);
}

unint64_t sub_10082B604(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

unint64_t sub_10082B64C(unint64_t result, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a5[6] + 8 * result) = a2;
  v5 = a5[7] + 16 * result;
  *(_QWORD *)v5 = a3;
  *(_BYTE *)(v5 + 8) = a4 & 1;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

uint64_t sub_10082B69C(unint64_t a1, char a2, uint64_t a3, uint64_t a4, __int128 *a5, _QWORD *a6)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  a6[(a1 >> 6) + 8] |= 1 << a1;
  v7 = a6[6] + 24 * a1;
  *(_BYTE *)v7 = a2;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 16) = a4;
  result = sub_1004DB728(a5, a6[7] + 40 * a1);
  v9 = a6[2];
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
    __break(1u);
  else
    a6[2] = v11;
  return result;
}

unint64_t sub_10082B710(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  _QWORD *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  a6[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a6[6] + 8 * result) = a2;
  v6 = (_QWORD *)(a6[7] + 24 * result);
  *v6 = a3;
  v6[1] = a4;
  v6[2] = a5;
  v7 = a6[2];
  v8 = __OFADD__(v7, 1);
  v9 = v7 + 1;
  if (v8)
    __break(1u);
  else
    a6[2] = v9;
  return result;
}

uint64_t sub_10082B760(unint64_t a1, uint64_t a2, __int128 *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for UUID(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  v11 = (_OWORD *)(a4[7] + 48 * a1);
  v12 = a3[2];
  v13 = *a3;
  v11[1] = a3[1];
  v11[2] = v12;
  *v11 = v13;
  v14 = a4[2];
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    a4[2] = v16;
  return result;
}

_OWORD *sub_10082B80C(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_10050CB14(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

uint64_t sub_10082B874(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  result = sub_10062E5D8(a3, a4[7] + 56 * a1);
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

uint64_t sub_10082B918(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  return sub_10082B9F4(a1, a2, a3, a4, type metadata accessor for CRLThrottleInfo);
}

uint64_t sub_10082B924(unint64_t a1, char a2, uint64_t a3, _QWORD *a4)
{
  return sub_10082BF78(a1, a2, a3, a4, type metadata accessor for CRLSyncActivityThrottlingScheduler.CRLSyncActivityThrottlingState);
}

uint64_t sub_10082B934(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t (*a5)(_QWORD), uint64_t (*a6)(_QWORD))
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v12 = a4[6];
  v13 = a5(0);
  sub_1004B84E0(a2, v12 + *(_QWORD *)(*(_QWORD *)(v13 - 8) + 72) * a1, a5);
  v14 = a4[7];
  v15 = a6(0);
  result = sub_1004B84E0(a3, v14 + *(_QWORD *)(*(_QWORD *)(v15 - 8) + 72) * a1, a6);
  v17 = a4[2];
  v18 = __OFADD__(v17, 1);
  v19 = v17 + 1;
  if (v18)
    __break(1u);
  else
    a4[2] = v19;
  return result;
}

uint64_t sub_10082B9F4(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  v9 = a4[7];
  v10 = a5(0);
  result = sub_1004B84E0(a3, v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * a1, a5);
  v12 = a4[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    a4[2] = v14;
  return result;
}

uint64_t sub_10082BA88(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = sub_100836DE0(a3, a4[7] + 40 * a1);
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

uint64_t sub_10082BAF0(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  return sub_10082BAFC(a1, a2, a3, a4, _s6CoreREO19SceneRenderingStateC15SnapshotRequestVMa);
}

uint64_t sub_10082BAFC(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v10 = a4[6];
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a2, v11);
  v12 = a4[7];
  v13 = a5(0);
  result = sub_1004B84E0(a3, v12 + *(_QWORD *)(*(_QWORD *)(v13 - 8) + 72) * a1, a5);
  v15 = a4[2];
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
    __break(1u);
  else
    a4[2] = v17;
  return result;
}

uint64_t sub_10082BBB4(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for CRLBoardIdentifier(0);
  sub_1004B84E0(a2, v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, type metadata accessor for CRLBoardIdentifier);
  v10 = a4[7];
  v11 = type metadata accessor for Date(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a3, v11);
  v13 = a4[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a4[2] = v15;
  return result;
}

uint64_t sub_10082BC6C(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v9 = a4[6];
  v10 = a5(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * a1, a2, v10);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v12 = a4[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    a4[2] = v14;
  return result;
}

unint64_t sub_10082BD04(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, _QWORD *a7)
{
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a7[(result >> 6) + 8] |= 1 << result;
  v7 = a7[6] + 32 * result;
  *(_QWORD *)v7 = a2;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 16) = a4;
  *(_BYTE *)(v7 + 24) = a5;
  *(_QWORD *)(a7[7] + 8 * result) = a6;
  v8 = a7[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a7[2] = v10;
  return result;
}

uint64_t sub_10082BD54(unint64_t a1, uint64_t a2, _QWORD *a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a3[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a3[6];
  v9 = type metadata accessor for CRLBoardIdentifier(0);
  result = sub_1004B84E0(a2, v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, type metadata accessor for CRLBoardIdentifier);
  *(double *)(a3[7] + 8 * a1) = a4;
  v11 = a3[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a3[2] = v13;
  return result;
}

uint64_t sub_10082BDEC(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v8 = (_QWORD *)(a5[6] + 16 * a1);
  *v8 = a2;
  v8[1] = a3;
  v9 = a5[7];
  v10 = type metadata accessor for UUID(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * a1, a4, v10);
  v12 = a5[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    a5[2] = v14;
  return result;
}

uint64_t sub_10082BE7C(unint64_t a1, uint64_t a2, char a3, _QWORD *a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v10 = a4[6];
  v11 = a5(0);
  result = sub_1004B84E0(a2, v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a5);
  *(_BYTE *)(a4[7] + a1) = a3;
  v13 = a4[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a4[2] = v15;
  return result;
}

_OWORD *sub_10082BF14(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  _OWORD *result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = sub_10050CB14(a3, (_OWORD *)(a4[7] + 32 * a1));
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

uint64_t sub_10082BF78(unint64_t a1, char a2, uint64_t a3, _QWORD *a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_BYTE *)(a4[6] + a1) = a2 & 1;
  v9 = a4[7];
  v10 = a5(0);
  result = sub_1004B84E0(a3, v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * a1, a5);
  v12 = a4[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    a4[2] = v14;
  return result;
}

unint64_t sub_10082C010(unint64_t result, char a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  *(_BYTE *)(a5[6] + result) = a2 & 1;
  v5 = (_QWORD *)(a5[7] + 16 * result);
  *v5 = a3;
  v5[1] = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

unint64_t sub_10082C05C(unint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  a4[(result >> 6) + 8] |= 1 << result;
  v4 = 8 * result;
  *(_QWORD *)(a4[6] + v4) = a2;
  *(_QWORD *)(a4[7] + v4) = a3;
  v5 = a4[2];
  v6 = __OFADD__(v5, 1);
  v7 = v5 + 1;
  if (v6)
    __break(1u);
  else
    a4[2] = v7;
  return result;
}

uint64_t sub_10082C0A4(unint64_t a1, uint64_t a2, char a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for UUID(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  *(_BYTE *)(a4[7] + a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

void sub_10082C13C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void (*v22)(unint64_t, char *, uint64_t);
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  __int128 v29;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1004B804C(&qword_1013F4EA8);
  v6 = *v0;
  v7 = static _DictionaryStorage.copy(original:)(*v0);
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    swift_release(v6);
LABEL_28:
    *v1 = v8;
    return;
  }
  v27 = v1;
  v9 = (void *)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)v9 >= v6 + 64 + 8 * v10)
    memmove(v9, (const void *)(v6 + 64), 8 * v10);
  v28 = v6 + 64;
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    v24 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v24 >= v16)
      goto LABEL_26;
    v25 = *(_QWORD *)(v28 + 8 * v24);
    ++v12;
    if (!v25)
    {
      v12 = v24 + 1;
      if (v24 + 1 >= v16)
        goto LABEL_26;
      v25 = *(_QWORD *)(v28 + 8 * v12);
      if (!v25)
        break;
    }
LABEL_25:
    v15 = (v25 - 1) & v25;
    v18 = __clz(__rbit64(v25)) + (v12 << 6);
LABEL_12:
    v19 = *(_QWORD *)(v3 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v19, v2);
    v20 = 16 * v18;
    v21 = *(_QWORD *)(v8 + 48) + v19;
    v22 = *(void (**)(unint64_t, char *, uint64_t))(v3 + 32);
    v29 = *(_OWORD *)(*(_QWORD *)(v6 + 56) + v20);
    v22(v21, v5, v2);
    v23 = v29;
    *(_OWORD *)(*(_QWORD *)(v8 + 56) + v20) = v29;
    swift_unknownObjectRetain(v23);
  }
  v26 = v24 + 2;
  if (v26 >= v16)
  {
LABEL_26:
    swift_release(v6);
    v1 = v27;
    goto LABEL_28;
  }
  v25 = *(_QWORD *)(v28 + 8 * v26);
  if (v25)
  {
    v12 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v12 >= v16)
      goto LABEL_26;
    v25 = *(_QWORD *)(v28 + 8 * v12);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

void sub_10082C378()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  __int128 v22;

  v1 = v0;
  sub_1004B804C(&qword_1013F4EA0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 16 * v15;
    v22 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v18);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v18) = v22;
    swift_retain(v17);
    swift_unknownObjectRetain(v22);
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_10082C534()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _OWORD v20[2];

  v1 = v0;
  sub_1004B804C(&qword_1013F4FB8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    v16 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    sub_1004CB6E8(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v20);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = v16;
    sub_10050CB14(v20, (_OWORD *)(*(_QWORD *)(v4 + 56) + 32 * v15));
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_10082C6F0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _BYTE v20[32];

  v1 = v0;
  sub_1004B804C(&qword_1013F4FC8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    swift_release(v2);
LABEL_28:
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    v16 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    sub_1004CB7BC(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v20, &qword_1013E0230);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = v16;
    sub_1004C4938((uint64_t)v20, *(_QWORD *)(v4 + 56) + 32 * v15, &qword_1013E0230);
  }
  v19 = v17 + 2;
  if (v19 >= v13)
  {
LABEL_26:
    swift_release(v2);
    goto LABEL_28;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

void sub_10082C8D0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  _BYTE v23[32];

  v1 = v0;
  sub_1004B804C(&qword_1013F4E68);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    swift_release(v2);
LABEL_28:
    *v1 = v4;
    return;
  }
  v22 = v1;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 32 * v15;
    sub_1004CB7BC(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v23, &qword_1013E0230);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    sub_1004C4938((uint64_t)v23, *(_QWORD *)(v4 + 56) + v18, &qword_1013E0230);
  }
  v21 = v19 + 2;
  if (v21 >= v13)
  {
LABEL_26:
    swift_release(v2);
    v1 = v22;
    goto LABEL_28;
  }
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

void sub_10082CAB4()
{
  sub_1008327E0((uint64_t (*)(_QWORD))&type metadata accessor for UUID, &qword_1013F5060);
}

void sub_10082CAC8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v1 = v0;
  sub_1004B804C(&qword_1013F4FB0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
    swift_bridgeObjectRetain(v16);
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_10082CC68()
{
  sub_1008344D4(&qword_1013F4ED8);
}

void sub_10082CC74()
{
  sub_100833E9C((uint64_t *)&unk_1013F13A0, &qword_1013F4E08);
}

void sub_10082CC88()
{
  sub_1008344D4(&qword_1013F51A0);
}

void sub_10082CC94()
{
  sub_1008344D4(&qword_1013F5008);
}

void sub_10082CCA0()
{
  sub_100830314((uint64_t *)&unk_101405F30);
}

void sub_10082CCAC()
{
  sub_1008344D4(&qword_1013F4F30);
}

void sub_10082CCB8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1004B804C(&qword_1013F4FD8);
  v24 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    swift_release(v5);
    *v24 = v7;
    return;
  }
  v8 = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)v8 >= v5 + 64 + 8 * v9)
    memmove(v8, (const void *)(v5 + 64), 8 * v9);
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v25 = v5 + 64;
  v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      v11 = v20 + 1;
      if (v20 + 1 >= v26)
        goto LABEL_26;
      v21 = *(_QWORD *)(v25 + 8 * v11);
      if (!v21)
        break;
    }
LABEL_25:
    v14 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v17, v1);
    v18 = 8 * v16;
    v19 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v18);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 48) + v17, v4, v1);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v19;
  }
  v22 = v20 + 2;
  if (v22 >= v26)
    goto LABEL_26;
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v11 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v11);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_10082CEDC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  _OWORD v24[2];
  _OWORD v25[2];
  uint64_t v26;

  v1 = v0;
  sub_1004B804C(&qword_1013F4F78);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    sub_1004B8968(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    v17 = 32 * v15;
    sub_1004CB6E8(*(_QWORD *)(v2 + 56) + v17, (uint64_t)v24);
    v18 = *(_QWORD *)(v4 + 48) + v16;
    v19 = v25[0];
    v20 = v25[1];
    *(_QWORD *)(v18 + 32) = v26;
    *(_OWORD *)v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    sub_10050CB14(v24, (_OWORD *)(*(_QWORD *)(v4 + 56) + v17));
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_10082D0C0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  sub_1004B804C(&qword_1013F50C0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    swift_bridgeObjectRetain(v17);
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_10082D260()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;

  v1 = v0;
  v2 = sub_1004B804C((uint64_t *)&unk_1013E1A50);
  v28 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1004B804C(&qword_1013F4F18);
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    swift_release(v5);
LABEL_25:
    *v1 = v7;
    return;
  }
  v25 = v1;
  v8 = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)v8 >= v5 + 64 + 8 * v9)
    memmove(v8, (const void *)(v5 + 64), 8 * v9);
  v26 = v5 + 64;
  v10 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v11 = 1 << *(_BYTE *)(v5 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v5 + 64);
  v27 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    v22 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v22 >= v27)
      goto LABEL_23;
    v23 = *(_QWORD *)(v26 + 8 * v22);
    ++v10;
    if (!v23)
    {
      v10 = v22 + 1;
      if (v22 + 1 >= v27)
        goto LABEL_23;
      v23 = *(_QWORD *)(v26 + 8 * v10);
      if (!v23)
        break;
    }
LABEL_22:
    v13 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v10 << 6);
LABEL_9:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = *(_QWORD *)(v28 + 72) * v15;
    sub_1004CB7BC(*(_QWORD *)(v5 + 56) + v20, (uint64_t)v4, (uint64_t *)&unk_1013E1A50);
    v21 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_1004C4938((uint64_t)v4, *(_QWORD *)(v7 + 56) + v20, (uint64_t *)&unk_1013E1A50);
    swift_bridgeObjectRetain(v18);
  }
  v24 = v22 + 2;
  if (v24 >= v27)
  {
LABEL_23:
    swift_release(v5);
    v1 = v25;
    goto LABEL_25;
  }
  v23 = *(_QWORD *)(v26 + 8 * v24);
  if (v23)
  {
    v10 = v24;
    goto LABEL_22;
  }
  while (1)
  {
    v10 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v10 >= v27)
      goto LABEL_23;
    v23 = *(_QWORD *)(v26 + 8 * v10);
    ++v24;
    if (v23)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
}

void sub_10082D4AC()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  void (*v21)(unint64_t, char *, uint64_t);
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int64_t v28;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD **)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v25 - v6;
  sub_1004B804C(&qword_1013F4E90);
  v26 = v0;
  v8 = *v0;
  v9 = static _DictionaryStorage.copy(original:)(*v0);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
LABEL_23:
    swift_release(v8);
    *v26 = v10;
    return;
  }
  v11 = (void *)(v9 + 64);
  v12 = (unint64_t)((1 << *(_BYTE *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)v11 >= v8 + 64 + 8 * v12)
    memmove(v11, (const void *)(v8 + 64), 8 * v12);
  v27 = v8 + 64;
  v13 = 0;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v8 + 16);
  v14 = 1 << *(_BYTE *)(v8 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v8 + 64);
  v28 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v18 = v17 | (v13 << 6);
      goto LABEL_9;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v22 >= v28)
      goto LABEL_23;
    v23 = *(_QWORD *)(v27 + 8 * v22);
    ++v13;
    if (!v23)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v28)
        goto LABEL_23;
      v23 = *(_QWORD *)(v27 + 8 * v13);
      if (!v23)
        break;
    }
LABEL_22:
    v16 = (v23 - 1) & v23;
    v18 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_9:
    v19 = v2[9] * v18;
    v20 = (void (*)(char *, unint64_t, uint64_t))v2[2];
    v20(v7, *(_QWORD *)(v8 + 48) + v19, v1);
    v20(v4, *(_QWORD *)(v8 + 56) + v19, v1);
    v21 = (void (*)(unint64_t, char *, uint64_t))v2[4];
    v21(*(_QWORD *)(v10 + 48) + v19, v7, v1);
    v21(*(_QWORD *)(v10 + 56) + v19, v4, v1);
  }
  v24 = v22 + 2;
  if (v24 >= v28)
    goto LABEL_23;
  v23 = *(_QWORD *)(v27 + 8 * v24);
  if (v23)
  {
    v13 = v24;
    goto LABEL_22;
  }
  while (1)
  {
    v13 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v13 >= v28)
      goto LABEL_23;
    v23 = *(_QWORD *)(v27 + 8 * v13);
    ++v24;
    if (v23)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
}

void sub_10082D708()
{
  sub_1008344D4(&qword_1013F4F10);
}

void sub_10082D714()
{
  sub_100831474(&qword_1013F4FA0);
}

void sub_10082D720()
{
  sub_1008344D4(&qword_1013F5038);
}

void sub_10082D72C()
{
  sub_1008322E0(type metadata accessor for CRLRealTimeEnter, &qword_1013F5170);
}

void sub_10082D740()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int64_t v24;

  v1 = sub_1004B804C(&qword_1013E1798);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1004B804C(&qword_1013F51D0);
  v22 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_23:
    swift_release(v5);
    *v22 = v7;
    return;
  }
  v8 = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)v8 >= v5 + 64 + 8 * v9)
    memmove(v8, (const void *)(v5 + 64), 8 * v9);
  v10 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v11 = 1 << *(_BYTE *)(v5 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v5 + 64);
  v23 = v5 + 64;
  v24 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    v18 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v18 >= v24)
      goto LABEL_23;
    v19 = *(_QWORD *)(v23 + 8 * v18);
    ++v10;
    if (!v19)
    {
      v10 = v18 + 1;
      if (v18 + 1 >= v24)
        goto LABEL_23;
      v19 = *(_QWORD *)(v23 + 8 * v10);
      if (!v19)
        break;
    }
LABEL_22:
    v13 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v10 << 6);
LABEL_9:
    v16 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v15);
    v17 = *(_QWORD *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 56) + v17, v1);
    *(_BYTE *)(*(_QWORD *)(v7 + 48) + v15) = v16;
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 56) + v17, v4, v1);
  }
  v20 = v18 + 2;
  if (v20 >= v24)
    goto LABEL_23;
  v19 = *(_QWORD *)(v23 + 8 * v20);
  if (v19)
  {
    v10 = v20;
    goto LABEL_22;
  }
  while (1)
  {
    v10 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v10 >= v24)
      goto LABEL_23;
    v19 = *(_QWORD *)(v23 + 8 * v10);
    ++v20;
    if (v19)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
}

void sub_10082D964()
{
  sub_100834F90(&qword_1013F4FE8);
}

void sub_10082D970()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  unint64_t v21;
  void (*v22)(unint64_t, char *, uint64_t);
  uint64_t v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int64_t v34;
  __int128 v35;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1004B804C(&qword_1013F4FE0);
  v32 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    swift_release(v5);
    *v32 = v7;
    return;
  }
  v8 = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)v8 >= v5 + 64 + 8 * v9)
    memmove(v8, (const void *)(v5 + 64), 8 * v9);
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v33 = v5 + 64;
  v34 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v28 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v28 >= v34)
      goto LABEL_26;
    v29 = *(_QWORD *)(v33 + 8 * v28);
    ++v11;
    if (!v29)
    {
      v11 = v28 + 1;
      if (v28 + 1 >= v34)
        goto LABEL_26;
      v29 = *(_QWORD *)(v33 + 8 * v11);
      if (!v29)
        break;
    }
LABEL_25:
    v14 = (v29 - 1) & v29;
    v16 = __clz(__rbit64(v29)) + (v11 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v17, v1);
    v18 = 24 * v16;
    v19 = *(_QWORD *)(v5 + 56) + v18;
    v20 = *(void **)(v19 + 16);
    v21 = *(_QWORD *)(v7 + 48) + v17;
    v22 = *(void (**)(unint64_t, char *, uint64_t))(v2 + 32);
    v35 = *(_OWORD *)v19;
    v22(v21, v4, v1);
    v23 = *(_QWORD *)(v7 + 56) + v18;
    v24 = (void *)v35;
    *(_OWORD *)v23 = v35;
    *(_QWORD *)(v23 + 16) = v20;
    v25 = v24;
    v26 = *((id *)&v35 + 1);
    v27 = v20;
  }
  v30 = v28 + 2;
  if (v30 >= v34)
    goto LABEL_26;
  v29 = *(_QWORD *)(v33 + 8 * v30);
  if (v29)
  {
    v11 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v11 >= v34)
      goto LABEL_26;
    v29 = *(_QWORD *)(v33 + 8 * v11);
    ++v30;
    if (v29)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_10082DBC8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  id v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  sub_1004B804C(&qword_1013F4E98);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(void **)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    v22 = v20;
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

