void sub_100A69BF8(uint64_t a1, uint64_t a2, uint64_t *a3, void (*a4)(uint64_t *), uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  _QWORD *v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  __n128 v50;
  uint64_t v51;
  char *v52;
  unint64_t v53;
  char v54;
  __n128 v55;
  uint64_t v56;
  uint64_t Strong;
  uint64_t *v58;
  uint64_t v59;
  void *v60;
  __n128 v61;
  uint64_t v62;
  __n128 v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  void (*v70)(uint64_t *);
  uint64_t v71;
  uint64_t *v72;
  _QWORD v73[3];
  uint64_t v74;
  void *v75;

  v70 = a4;
  v71 = a5;
  v8 = sub_1004B804C((uint64_t *)&unk_1013E1A50);
  __chkstk_darwin(v8);
  v69 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v65 - v16;
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v65 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)&v65 - v21;
  v75 = &_swiftEmptySetSingleton;
  v72 = a3;
  v23 = *a3;
  v24 = a2 + *(_QWORD *)(*(_QWORD *)a2 + 104);
  swift_retain(a2);
  if ((sub_10062158C(v24, v23) & 1) != 0)
  {
    swift_release(a2);
    v25 = &_swiftEmptySetSingleton;
LABEL_27:
    swift_bridgeObjectRelease(v25);
    return;
  }
  v67 = a1;
  v68 = v11;
  v65 = v14;
  v66 = v17;
  while (1)
  {
    v26 = *(_QWORD *)(a2 + *(_QWORD *)(*(_QWORD *)a2 + 112));
    if (!v26)
    {
      v62 = a2;
      goto LABEL_26;
    }
    v27 = a2 + *(_QWORD *)(*(_QWORD *)a2 + 104);
    v74 = *(_QWORD *)(a2 + *(_QWORD *)(*(_QWORD *)a2 + 112));
    v28 = v68;
    v29 = *(void (**)(char *, uint64_t, uint64_t))(v68 + 16);
    v29(v20, v27, v10);
    swift_retain(v26);
    sub_100AD569C((uint64_t)v22, (uint64_t)v20);
    v30 = *(void (**)(char *, uint64_t))(v28 + 8);
    v30(v22, v10);
    v29(v20, v27, v10);
    sub_100AD569C((uint64_t)v22, (uint64_t)v20);
    v30(v22, v10);
    v31 = (uint64_t)v69;
    v70(&v74);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v31, 1, v10) == 1)
    {
      swift_release(v74);
      swift_bridgeObjectRelease(v75);
      sub_1004CB800(v31, (uint64_t *)&unk_1013E1A50);
      goto LABEL_16;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v28 + 32))(v17, v31, v10);
    v32 = v67;
    if (!*(_QWORD *)(v67 + 16) || (v33 = sub_100842EFC((uint64_t)v17), (v34 & 1) == 0))
    {
      v30(v17, v10);
      swift_release(v74);
      swift_bridgeObjectRelease(v75);
LABEL_16:
      swift_weakAssign(a2 + *(_QWORD *)(*(_QWORD *)a2 + 128), 0);
      swift_release(a2);
      return;
    }
    v35 = *(_QWORD *)(*(_QWORD *)(v32 + 56) + 8 * v33);
    v36 = (_QWORD *)(v35 + *(_QWORD *)(*(_QWORD *)v35 + 120));
    swift_beginAccess(v36, v73, 33, 0);
    swift_retain(v35);
    swift_retain(a2);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v37);
    v39 = *(_QWORD *)((*v36 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v38 = *(_QWORD *)((*v36 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v39 >= v38 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v39 + 1, 1);
    v40 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v39, a2);
    specialized Array._endMutation()(v40);
    swift_endAccess(v73);
    swift_weakAssign(a2 + *(_QWORD *)(*(_QWORD *)a2 + 128), v35);
    v41 = (uint64_t)v75;
    v42 = v35 + *(_QWORD *)(*(_QWORD *)v35 + 104);
    swift_bridgeObjectRetain(v75);
    v43 = sub_10062158C(v42, v41);
    swift_bridgeObjectRelease(v41);
    if ((v43 & 1) != 0)
      break;
    v44 = swift_release(a2);
    v17 = v66;
    ((void (*)(char *, uint64_t, __n128))v30)(v66, v10, v44);
    swift_release(v74);
    a2 = v35;
    if ((sub_10062158C(v42, *v72) & 1) != 0)
    {
      v62 = v35;
LABEL_26:
      swift_release(v62);
      v25 = v75;
      goto LABEL_27;
    }
  }
  swift_bridgeObjectRetain_n(v41, 2);
  v45 = sub_1005FF460(v41);
  swift_bridgeObjectRelease(v41);
  v73[0] = v45;
  v46 = 0;
  sub_100748B6C(v73);
  v47 = swift_bridgeObjectRelease(v41);
  v48 = v73[0];
  if (!*(_QWORD *)(v73[0] + 16))
  {
    __break(1u);
    goto LABEL_30;
  }
  v49 = (uint64_t)v65;
  ((void (*)(char *, unint64_t, uint64_t, __n128))v29)(v65, v73[0] + ((*(unsigned __int8 *)(v68 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80)), v10, v47);
  v50 = swift_release(v48);
  v52 = v66;
  v51 = v67;
  if (!*(_QWORD *)(v67 + 16) || (v53 = sub_100842EFC(v49), (v54 & 1) == 0))
  {
    ((void (*)(uint64_t, uint64_t, __n128))v30)(v49, v10, v50);
LABEL_25:
    swift_release(v35);
    v63 = swift_release(a2);
    ((void (*)(char *, uint64_t, __n128))v30)(v52, v10, v63);
    v62 = v74;
    goto LABEL_26;
  }
  v43 = *(_QWORD *)(*(_QWORD *)(v51 + 56) + 8 * v53);
  v55 = swift_retain(v43);
  ((void (*)(uint64_t, uint64_t, __n128))v30)(v49, v10, v55);
  v56 = v43 + *(_QWORD *)(*(_QWORD *)v43 + 128);
  Strong = swift_weakLoadStrong(v56);
  if (!Strong)
  {
    swift_release(v35);
    v35 = a2;
    a2 = v43;
    v52 = v66;
    goto LABEL_25;
  }
  v29 = (void (*)(char *, uint64_t, uint64_t))Strong;
  swift_weakAssign(v56, 0);
  v58 = (uint64_t *)((char *)v29 + *(_QWORD *)(*(_QWORD *)v29 + 120));
  swift_beginAccess(v58, v73, 33, 0);
  swift_retain(v43);
  v46 = sub_100AFE0CC(v58, v43, sub_100D14ED8);
  swift_release(v43);
  v42 = *v58;
  if (!((unint64_t)*v58 >> 62))
  {
    v59 = *(_QWORD *)((v42 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v59 >= v46)
      goto LABEL_23;
LABEL_34:
    __break(1u);
    swift_release(v73[0]);
    __break(1u);
    return;
  }
LABEL_30:
  if (v42 < 0)
    v64 = v42;
  else
    v64 = v42 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v42);
  v59 = _CocoaArrayWrapper.endIndex.getter(v64);
  swift_bridgeObjectRelease(v42);
  if (v59 < v46)
    goto LABEL_34;
LABEL_23:
  sub_100CFED7C(v46, v59);
  v60 = v75;
  swift_endAccess(v73);
  swift_release(v35);
  swift_release(a2);
  swift_release(v29);
  swift_release(v43);
  v61 = swift_bridgeObjectRelease(v60);
  ((void (*)(char *, uint64_t, __n128))v30)(v66, v10, v61);
  swift_release(v74);
}

void sub_100A6A1DC(uint64_t a1, uint64_t a2, uint64_t *a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  void (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  char v46;
  _QWORD *v47;
  uint64_t v48;
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  uint64_t v53;
  char *v54;
  unint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  __n128 v59;
  uint64_t v60;
  uint64_t Strong;
  uint64_t *v62;
  uint64_t v63;
  char *v64;
  __n128 v65;
  void (*v66)(char *, uint64_t, __n128);
  __n128 v67;
  __n128 v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  void (*v78)(uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(char *, uint64_t);
  uint64_t *v84;
  uint64_t v85;
  _QWORD v86[3];
  void *v87;

  v78 = a4;
  v79 = a5;
  v74 = a1;
  v7 = sub_1004B804C((uint64_t *)&unk_1013E1A50);
  __chkstk_darwin(v7);
  v77 = (char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v80 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v71 = (char *)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v70 - v12;
  __chkstk_darwin(v14);
  v76 = (char *)&v70 - v15;
  __chkstk_darwin(v16);
  v75 = (char *)&v70 - v17;
  v18 = sub_1004B804C(&qword_101405458);
  __chkstk_darwin(v18);
  v20 = (char *)&v70 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for CRLBoardItemPeerSyncUpdate(0);
  v81 = *(_QWORD *)(v21 - 8);
  v82 = v21;
  __chkstk_darwin(v21);
  v85 = (uint64_t)&v70 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = &_swiftEmptySetSingleton;
  v84 = a3;
  v23 = *a3;
  v24 = a2 + *(_QWORD *)(*(_QWORD *)a2 + 104);
  swift_retain(a2);
  if ((sub_10062158C(v24, v23) & 1) != 0)
  {
    swift_release(a2);
LABEL_3:
    swift_bridgeObjectRelease();
    return;
  }
  v72 = v20;
  v73 = v13;
  v25 = (uint64_t)v75;
  v26 = (uint64_t)v76;
  while (1)
  {
    sub_1004CB7BC(a2 + *(_QWORD *)(*(_QWORD *)a2 + 112), (uint64_t)v20, &qword_101405458);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v81 + 48))(v20, 1, v82) == 1)
    {
      swift_release(a2);
      swift_bridgeObjectRelease();
      sub_1004CB800((uint64_t)v20, &qword_101405458);
      return;
    }
    v27 = a2 + *(_QWORD *)(*(_QWORD *)a2 + 104);
    v28 = v85;
    sub_1004B84E0((uint64_t)v20, v85, type metadata accessor for CRLBoardItemPeerSyncUpdate);
    v29 = v80;
    v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v80 + 16);
    v30(v26, v27, v9);
    sub_100AD569C(v25, v26);
    v31 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
    v31(v25, v9);
    v30(v26, v27, v9);
    sub_100AD569C(v25, v26);
    v83 = (void (*)(char *, uint64_t))v31;
    v31(v25, v9);
    v32 = (uint64_t)v77;
    v78(v28);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v32, 1, v9) == 1)
    {
      sub_1004B84A4(v85, type metadata accessor for CRLBoardItemPeerSyncUpdate);
      swift_bridgeObjectRelease();
      sub_1004CB800(v32, (uint64_t *)&unk_1013E1A50);
      goto LABEL_17;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v29 + 32))(v13, v32, v9);
    v33 = v74;
    if (!*(_QWORD *)(v74 + 16) || (v34 = sub_100842EFC((uint64_t)v13), (v35 & 1) == 0))
    {
      v83(v13, v9);
      sub_1004B84A4(v85, type metadata accessor for CRLBoardItemPeerSyncUpdate);
      swift_bridgeObjectRelease();
LABEL_17:
      swift_weakAssign(a2 + *(_QWORD *)(*(_QWORD *)a2 + 128), 0);
      swift_release(a2);
      return;
    }
    v36 = *(_QWORD *)(*(_QWORD *)(v33 + 56) + 8 * v34);
    v37 = (_QWORD *)(v36 + *(_QWORD *)(*(_QWORD *)v36 + 120));
    swift_beginAccess(v37, v86, 33, 0);
    swift_retain(v36);
    swift_retain(a2);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v38);
    v40 = *(_QWORD *)((*v37 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v39 = *(_QWORD *)((*v37 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v40 >= v39 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v40 + 1, 1);
    v41 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v40, a2);
    specialized Array._endMutation()(v41);
    swift_endAccess(v86);
    swift_weakAssign(a2 + *(_QWORD *)(*(_QWORD *)a2 + 128), v36);
    v42 = (uint64_t)v87;
    v43 = v36 + *(_QWORD *)(*(_QWORD *)v36 + 104);
    swift_bridgeObjectRetain(v87);
    v44 = sub_10062158C(v43, v42);
    swift_bridgeObjectRelease();
    if ((v44 & 1) != 0)
      break;
    v45 = swift_release(a2);
    v13 = v73;
    ((void (*)(char *, uint64_t, __n128))v83)(v73, v9, v45);
    sub_1004B84A4(v85, type metadata accessor for CRLBoardItemPeerSyncUpdate);
    v46 = sub_10062158C(v43, *v84);
    a2 = v36;
    v20 = v72;
    if ((v46 & 1) != 0)
    {
      swift_release(v36);
      goto LABEL_3;
    }
  }
  swift_bridgeObjectRetain_n(v42, 2);
  v47 = sub_1005FF460(v42);
  swift_bridgeObjectRelease();
  v86[0] = v47;
  v48 = 0;
  sub_100748B6C(v86);
  v49 = swift_bridgeObjectRelease();
  v50 = v86[0];
  v51 = (uint64_t)v71;
  if (!*(_QWORD *)(v86[0] + 16))
  {
    __break(1u);
    goto LABEL_30;
  }
  ((void (*)(char *, unint64_t, uint64_t, __n128))v30)(v71, v86[0] + ((*(unsigned __int8 *)(v80 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v80 + 80)), v9, v49);
  v52 = swift_release(v50);
  v54 = v73;
  v53 = v74;
  if (!*(_QWORD *)(v74 + 16) || (v55 = sub_100842EFC(v51), (v56 & 1) == 0))
  {
    v66 = (void (*)(char *, uint64_t, __n128))v83;
    ((void (*)(uint64_t, uint64_t, __n128))v83)(v51, v9, v52);
    swift_release(v36);
    v67 = swift_release(a2);
    v66(v54, v9, v67);
LABEL_27:
    sub_1004B84A4(v85, type metadata accessor for CRLBoardItemPeerSyncUpdate);
    goto LABEL_3;
  }
  v57 = *(_QWORD *)(v53 + 56);
  v58 = v51;
  v51 = *(_QWORD *)(v57 + 8 * v55);
  v59 = swift_retain(v51);
  ((void (*)(uint64_t, uint64_t, __n128))v83)(v58, v9, v59);
  v60 = v51 + *(_QWORD *)(*(_QWORD *)v51 + 128);
  Strong = swift_weakLoadStrong(v60);
  if (!Strong)
  {
    swift_release(v36);
    swift_release(a2);
    v68 = swift_release(v51);
    ((void (*)(char *, uint64_t, __n128))v83)(v54, v9, v68);
    goto LABEL_27;
  }
  v30 = (void (*)(uint64_t, uint64_t, uint64_t))Strong;
  swift_weakAssign(v60, 0);
  v62 = (uint64_t *)((char *)v30 + *(_QWORD *)(*(_QWORD *)v30 + 120));
  swift_beginAccess(v62, v86, 33, 0);
  swift_retain(v51);
  v48 = sub_100AFE0CC(v62, v51, sub_100D14ED8);
  swift_release(v51);
  v44 = *v62;
  if (!((unint64_t)*v62 >> 62))
  {
    v63 = *(_QWORD *)((v44 & 0xFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_24;
  }
LABEL_30:
  if (v44 < 0)
    v69 = v44;
  else
    v69 = v44 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v44);
  v63 = _CocoaArrayWrapper.endIndex.getter(v69);
  swift_bridgeObjectRelease();
LABEL_24:
  v64 = v73;
  if (v63 < v48)
  {
    __break(1u);
    swift_release(v86[0]);
    __break(1u);
  }
  else
  {
    sub_100CFED88(v48, v63);
    swift_endAccess(v86);
    swift_release(v36);
    swift_release(a2);
    swift_release(v30);
    swift_release(v51);
    v65 = swift_bridgeObjectRelease();
    ((void (*)(char *, uint64_t, __n128))v83)(v64, v9, v65);
    sub_1004B84A4(v85, type metadata accessor for CRLBoardItemPeerSyncUpdate);
  }
}

uint64_t sub_100A6A908(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const mach_header_64 *a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t a9, uint64_t a10, unsigned __int8 a11, uint64_t a12)
{
  uint64_t v18;
  uint64_t inited;
  uint64_t v20;
  NSString v21;
  uint64_t v22;
  void *v26;
  _BYTE v27[72];

  v18 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v18, v27);
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  v26 = &type metadata for String;
  v20 = sub_1004B804C(&qword_1014053B8);
  String.init<A>(describing:)(&v26, v20);
  v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 56) = sub_1004B8930(0, (unint64_t *)&qword_1013E46B0, NSString_ptr);
  *(_QWORD *)(inited + 64) = sub_1005A15B8((unint64_t *)&qword_1013EE6B0, (unint64_t *)&qword_1013E46B0, NSString_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
  *(_QWORD *)(inited + 32) = v21;
  if (a1 == a3 && a2 == a4 || (_stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0) & 1) != 0)
  {
    sub_100757E04(a5, a6, a7, a8, a9, a10, a11, a12, "expected inequality between two values of type %{public}@", 57, 2u, inited);
    sub_1004F5394(inited, a6, a7, a8, a9, a10, a11, a12, (uint64_t)"expected inequality between two values of type %{public}@", 57, 2u);
    v22 = 0;
  }
  else
  {
    v22 = 1;
  }
  swift_bridgeObjectRelease();
  return v22;
}

BOOL sub_100A6AAD4(uint64_t a1, uint64_t a2, const mach_header_64 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10)
{
  return sub_100A6AB18(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&type metadata for Int, &qword_1013E48C8);
}

BOOL sub_100A6AB18(uint64_t a1, uint64_t a2, const mach_header_64 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t v18;
  uint64_t inited;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSString v23;
  uint64_t v27;
  _BYTE v28[72];

  v18 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v18, v28);
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  v27 = a11;
  v20 = sub_1004B804C(a12);
  String.init<A>(describing:)(&v27, v20);
  v22 = v21;
  v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v22);
  *(_QWORD *)(inited + 56) = sub_1004B8930(0, (unint64_t *)&qword_1013E46B0, NSString_ptr);
  *(_QWORD *)(inited + 64) = sub_1005A15B8((unint64_t *)&qword_1013EE6B0, (unint64_t *)&qword_1013E46B0, NSString_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
  *(_QWORD *)(inited + 32) = v23;
  if (a1 == a2)
  {
    sub_100757E04(a3, a4, a5, a6, a7, a8, a9, a10, "expected inequality between two values of type %{public}@", 57, 2u, inited);
    sub_1004F5394(inited, a4, a5, a6, a7, a8, a9, a10, (uint64_t)"expected inequality between two values of type %{public}@", 57, 2u);
  }
  swift_bridgeObjectRelease(inited);
  return a1 != a2;
}

uint64_t sub_100A6ACB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const mach_header_64 *a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t a9, uint64_t a10, unsigned __int8 a11, uint64_t a12)
{
  uint64_t v18;
  uint64_t inited;
  uint64_t v20;
  NSString v21;
  uint64_t v22;
  uint64_t v26;
  _BYTE v27[72];

  v18 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v18, v27);
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  v26 = sub_1004B804C((uint64_t *)&unk_1013E1C80);
  v20 = sub_1004B804C(&qword_1014053A8);
  String.init<A>(describing:)(&v26, v20);
  v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 56) = sub_1004B8930(0, (unint64_t *)&qword_1013E46B0, NSString_ptr);
  *(_QWORD *)(inited + 64) = sub_1005A15B8((unint64_t *)&qword_1013EE6B0, (unint64_t *)&qword_1013E46B0, NSString_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
  *(_QWORD *)(inited + 32) = v21;
  if (a2)
  {
    if (a4 && (a1 == a3 && a2 == a4 || (_stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0) & 1) != 0))
      goto LABEL_6;
LABEL_8:
    v22 = 1;
    goto LABEL_9;
  }
  if (a4)
    goto LABEL_8;
LABEL_6:
  sub_100757E04(a5, a6, a7, a8, a9, a10, a11, a12, "expected inequality between two values of type %{public}@", 57, 2u, inited);
  sub_1004F5394(inited, a6, a7, a8, a9, a10, a11, a12, (uint64_t)"expected inequality between two values of type %{public}@", 57, 2u);
  v22 = 0;
LABEL_9:
  swift_bridgeObjectRelease();
  return v22;
}

_QWORD *sub_100A6AE90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *result;

  if (a3 < 0)
  {
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
  }
  else
  {
    if (a3)
    {
      v6 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)(a3, &type metadata for String);
      v7 = v6;
      v6[2] = a3;
      v6[4] = a1;
      v6[5] = a2;
      if (a3 != 1)
      {
        v6[6] = a1;
        v6[7] = a2;
        v8 = a3 - 2;
        if (v8)
        {
          v9 = v6 + 9;
          do
          {
            *(v9 - 1) = a1;
            *v9 = a2;
            swift_bridgeObjectRetain(a2);
            v9 += 2;
            --v8;
          }
          while (v8);
        }
        swift_bridgeObjectRetain(a2);
      }
    }
    else
    {
      swift_bridgeObjectRelease(a2);
      return _swiftEmptyArrayStorage;
    }
    return v7;
  }
  return result;
}

uint64_t sub_100A6AF88(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;
  uint64_t result;
  double *v11;

  if (a2 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
  }
  else
  {
    if (a2)
    {
      v4 = sub_1004B8930(0, &qword_101405660, off_101229A20);
      v5 = static Array._allocateBufferUninitialized(minimumCapacity:)(a2, v4);
      v6 = v5 & 0xFFFFFFFFFFFFFF8;
      *(_QWORD *)(v6 + 16) = a2;
      v11 = (double *)v5;
      *(_QWORD *)(v6 + 32) = a1;
      if (a2 != 1)
      {
        *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x28) = a1;
        v7 = a2 - 2;
        if (v7)
        {
          v8 = (_QWORD *)(v6 + 48);
          do
          {
            *v8++ = a1;
            v9 = a1;
            --v7;
          }
          while (v7);
        }
        v5 = a1;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;

    }
    specialized Array._endMutation()(v5);
    return (uint64_t)v11;
  }
  return result;
}

double sub_100A6B328(uint64_t a1, uint64_t a2)
{
  return sub_100A9EEDC(a1, a2, (uint64_t)&OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue, (uint64_t)&unk_101293708, (uint64_t)sub_100B01080, (uint64_t)&unk_101293720);
}

uint64_t sub_100A6B34C(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  sub_100A6B3D4(1, 0);
  return a2(0);
}

uint64_t sub_100A6B3D4(int a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  void (*v13)(_QWORD *, uint64_t, uint64_t);
  id v14;
  uint64_t v15;
  void (*v16)(_QWORD *, uint64_t);
  id v17;
  __n128 v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t result;
  uint64_t v23;
  void *v24;
  id v25;
  void *v26;
  id v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t inited;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  void *v42;
  id v43;
  void *v44;
  id v45;
  void *v46;
  id v47;
  char v48;
  id v49;
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[3];
  _BYTE v54[72];
  _BYTE v55[24];
  _BYTE v56[8];

  v4 = v2;
  HIDWORD(v52) = a1;
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (_QWORD *)((char *)&v53[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *(void **)(v4 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v10 = v11;
  v12 = enum case for DispatchPredicate.onQueue(_:);
  v13 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v7 + 104);
  ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v13)(v10, enum case for DispatchPredicate.onQueue(_:), v6, v8);
  v14 = v11;
  v15 = _dispatchPreconditionTest(_:)(v10);
  v16 = *(void (**)(_QWORD *, uint64_t))(v7 + 8);
  v16(v10, v6);
  if ((v15 & 1) != 0)
  {
    v15 = (uint64_t)v16;
    if (qword_1013DD858 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1013DD858, sub_100A05554);
LABEL_3:
  swift_beginAccess(&static OS_os_log.boardStore, v55, 0, 0);
  v17 = (id)static OS_os_log.boardStore;
  v19 = static os_log_type_t.default.getter(v18);
  sub_100A06EBC((uint64_t)v17, &_mh_execute_header, v19, "Opening the board database", 26, 2, (uint64_t)_swiftEmptyArrayStorage);

  if ((a2 & 1) != 0)
  {
    v20 = *(void **)(v4 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_readQueue);
    *v10 = v20;
    v13(v10, v12, v6);
    v21 = v20;
    LOBYTE(v20) = _dispatchPreconditionTest(_:)(v10);
    result = ((uint64_t (*)(_QWORD *, uint64_t))v15)(v10, v6);
    if ((v20 & 1) == 0)
    {
      __break(1u);
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
    v23 = *(_QWORD *)(v4 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
    sub_1006B5520(3178497);
    if (!v3)
    {
      v24 = *(void **)(v23 + 32);
      *v10 = v24;
      v13(v10, v12, v6);
      v25 = v24;
      LOBYTE(v24) = _dispatchPreconditionTest(_:)(v10);
      result = ((uint64_t (*)(_QWORD *, uint64_t))v15)(v10, v6);
      if ((v24 & 1) != 0)
      {
        sub_1006B7B68(v23, 0xD00000000000001ALL, 0x8000000100FD6490);
        v26 = *(void **)(v23 + 32);
        *v10 = v26;
        v13(v10, v12, v6);
        v27 = v26;
        LOBYTE(v26) = _dispatchPreconditionTest(_:)(v10);
        result = ((uint64_t (*)(_QWORD *, uint64_t))v15)(v10, v6);
        if ((v26 & 1) != 0)
          return sub_1006B7B68(v23, 0xD000000000000019, 0x8000000100FD64B0);
        goto LABEL_23;
      }
      goto LABEL_20;
    }
LABEL_10:
    v29 = (void *)static OS_os_log.boardStore;
    v30 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    inited = swift_initStackObject(v30, v54);
    *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
    swift_getErrorValue(v3, v56, v53);
    v32 = v53[1];
    v33 = v53[2];
    v34 = v29;
    v35 = Error.localizedDescription.getter(v32, v33);
    v37 = v36;
    *(_QWORD *)(inited + 56) = &type metadata for String;
    v38 = sub_1004CFC2C();
    *(_QWORD *)(inited + 64) = v38;
    *(_QWORD *)(inited + 32) = v35;
    *(_QWORD *)(inited + 40) = v37;
    v39 = static os_log_type_t.error.getter(v38);
    sub_100A06EBC((uint64_t)v34, &_mh_execute_header, v39, "Opening the board database failed with error: %@", 48, 2, inited);
    swift_setDeallocating(inited);
    v40 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(inited + 32, 1, v40);

    return swift_willThrow(v41);
  }
  v28 = *(_QWORD *)(v4 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  sub_1006B5520(3178502);
  if (v3)
    goto LABEL_10;
  v42 = *(void **)(v28 + 32);
  *v10 = v42;
  v13(v10, v12, v6);
  v43 = v42;
  LOBYTE(v42) = _dispatchPreconditionTest(_:)(v10);
  result = ((uint64_t (*)(_QWORD *, uint64_t))v15)(v10, v6);
  if ((v42 & 1) == 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  sub_1006B7B68(v28, 0xD00000000000001CLL, 0x8000000100FD6470);
  sub_1006B48D0();
  v44 = *(void **)(v28 + 32);
  *v10 = v44;
  v13(v10, v12, v6);
  v45 = v44;
  LOBYTE(v44) = _dispatchPreconditionTest(_:)(v10);
  result = ((uint64_t (*)(_QWORD *, uint64_t))v15)(v10, v6);
  if ((v44 & 1) == 0)
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_1006B7B68(v28, 0xD00000000000001ALL, 0x8000000100FD6490);
  v46 = *(void **)(v28 + 32);
  *v10 = v46;
  v13(v10, v12, v6);
  v47 = v46;
  v48 = _dispatchPreconditionTest(_:)(v10);
  result = ((uint64_t (*)(_QWORD *, uint64_t))v15)(v10, v6);
  if ((v48 & 1) == 0)
  {
LABEL_24:
    __break(1u);
    return result;
  }
  sub_1006B7B68(v28, 0xD000000000000019, 0x8000000100FD64B0);
  v49 = (id)static OS_os_log.boardStore;
  v51 = static os_log_type_t.info.getter(v50);
  sub_100A06EBC((uint64_t)v49, &_mh_execute_header, v51, "Checking for schema version", 27, 2, (uint64_t)_swiftEmptyArrayStorage);

  sub_100A6C57C();
  if ((v52 & 0x100000000) != 0)
    sub_100A6CBE4();
  return sub_100A6D234();
}

double sub_100A6B9B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;
  uint64_t v10;

  v2 = sub_1004B804C(&qword_1013EB680);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v3 + 16))((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  v6 = *(unsigned __int8 *)(v3 + 80);
  v7 = (v6 + 16) & ~v6;
  v8 = swift_allocObject(&unk_1012936E0, v7 + v4, v6 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v8 + v7, (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  sub_100A9EEDC((uint64_t)sub_10073FDCC, v8, (uint64_t)&OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue, (uint64_t)&unk_101293708, (uint64_t)sub_100B01080, (uint64_t)&unk_101293720);
  *(_QWORD *)&result = swift_release(v8).n128_u64[0];
  return result;
}

uint64_t sub_100A6BBD0(const void *a1, void *a2)
{
  uint64_t v2;
  id v4;

  *(_QWORD *)(v2 + 16) = a2;
  *(_QWORD *)(v2 + 24) = _Block_copy(a1);
  v4 = a2;
  return swift_task_switch(sub_100A6BC18, 0, 0);
}

uint64_t sub_100A6BC18()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[2];
  v2 = swift_task_alloc(32);
  v0[4] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[5] = v3;
  *v3 = v0;
  v3[1] = sub_100A6BCB8;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v3, 0, 0, 0x617461446E65706FLL, 0xEE00292865736162, sub_100B01068, v2, (char *)&type metadata for () + 8);
}

uint64_t sub_100A6BCB8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 40);
  *(_QWORD *)(*v1 + 48) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100A6BD6C;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 32));
    v4 = sub_100A6BD24;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100A6BD24()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);

  (*(void (**)(uint64_t, _QWORD))(v1 + 16))(v1, 0);
  _Block_release(*(const void **)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100A6BD6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v1 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);

  swift_task_dealloc(v2);
  v4 = (void *)_convertErrorToNSError(_:)(v1);
  swift_errorRelease(v1);
  (*(void (**)(uint64_t, void *))(v3 + 16))(v3, v4);

  _Block_release(*(const void **)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100A6BDE4(int a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  void (*v11)(_QWORD *, _QWORD, uint64_t, __n128);
  id v12;
  void (*v13)(_QWORD *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  _DWORD *v27;
  uint64_t v28;
  id v29;
  void *v30;
  os_unfair_lock_s *v31;
  id v32;
  id v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  uint64_t result;
  char *v40;
  Class v41;
  void (*v42)(_QWORD *, uint64_t);
  unsigned int v43;
  void (*v44)(_QWORD *, _QWORD, uint64_t, __n128);
  int v45;
  char v46[24];
  char v47[24];
  objc_super v48;

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char **)((char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(void **)&v1[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue];
  *v8 = v9;
  v10 = enum case for DispatchPredicate.onQueue(_:);
  v11 = *(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v5 + 104);
  v11(v8, enum case for DispatchPredicate.onQueue(_:), v4, v6);
  v12 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  v13 = *(void (**)(_QWORD *, uint64_t))(v5 + 8);
  v13(v8, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    swift_once(&qword_1013DD858, sub_100A05554);
    goto LABEL_8;
  }
  v45 = a1;
  v14 = *(_QWORD *)&v2[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetManagerLock];
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v14 + 16));
  v15 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetManager;
  v16 = *(void **)&v2[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetManager];
  if (v16)
  {
    v17 = *(id *)&v2[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetManager];
  }
  else
  {
    v41 = (Class)type metadata accessor for CRLAssetManager();
    v18 = (char *)objc_allocWithZone(v41);
    v42 = v13;
    v19 = v18;
    v40 = &v18[OBJC_IVAR____TtC8Freeform15CRLAssetManager_store];
    swift_unknownObjectWeakInit(&v18[OBJC_IVAR____TtC8Freeform15CRLAssetManager_store]);
    v20 = OBJC_IVAR____TtC8Freeform15CRLAssetManager_lock;
    v21 = type metadata accessor for CRLUnfairLock();
    v22 = swift_allocObject(v21, 24, 7);
    v23 = v2;
    v44 = v11;
    v24 = v23;
    v25 = v19;
    v43 = v10;
    v26 = v25;
    v27 = (_DWORD *)swift_slowAlloc(4, -1);
    *v27 = 0;
    *(_QWORD *)(v22 + 16) = v27;
    atomic_thread_fence(memory_order_acq_rel);
    *(_QWORD *)&v19[v20] = v22;
    v13 = v42;
    *(_QWORD *)&v26[OBJC_IVAR____TtC8Freeform15CRLAssetManager_assets] = _swiftEmptyDictionarySingleton;
    v28 = OBJC_IVAR____TtC8Freeform15CRLAssetManager_owners;
    *(_QWORD *)&v26[v28] = objc_msgSend((id)objc_opt_self(NSMapTable), "mapTableWithKeyOptions:valueOptions:", 517, 0);
    *(_QWORD *)&v26[OBJC_IVAR____TtC8Freeform15CRLAssetManager_garbageCollectionWorkItem] = 0;
    swift_unknownObjectWeakAssign(v40, v24);

    v48.receiver = v26;
    v10 = v43;
    v48.super_class = v41;
    v29 = objc_msgSendSuper2(&v48, "init");

    v11 = v44;
    v30 = *(void **)&v2[v15];
    *(_QWORD *)&v2[v15] = v29;
    v17 = v29;

    v16 = 0;
  }
  v31 = *(os_unfair_lock_s **)(v14 + 16);
  v32 = v16;
  os_unfair_lock_unlock(v31);
  sub_100962E98();

  if ((v45 & 1) != 0)
    sub_100812948();
  if (qword_1013DD858 != -1)
    goto LABEL_11;
LABEL_8:
  swift_beginAccess(&static OS_os_log.boardStore, v47, 0, 0);
  v33 = (id)static OS_os_log.boardStore;
  v35 = static os_log_type_t.default.getter(v34);
  sub_100A06EBC((uint64_t)v33, &_mh_execute_header, v35, "Closing the board database", 26, 2, (uint64_t)_swiftEmptyArrayStorage);

  v36 = *(_QWORD *)&v2[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database];
  v37 = *(void **)(v36 + 32);
  *v8 = v37;
  ((void (*)(_QWORD *, uint64_t, uint64_t))v11)(v8, v10, v4);
  v38 = v37;
  LOBYTE(v37) = _dispatchPreconditionTest(_:)(v8);
  result = ((uint64_t (*)(_QWORD *, uint64_t))v13)(v8, v4);
  if ((v37 & 1) != 0)
  {
    swift_beginAccess(v36 + 16, v46, 1, 0);
    result = sqlite3_close_v2(*(sqlite3 **)(v36 + 16));
    *(_QWORD *)(v36 + 16) = 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

double sub_100A6C1DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;
  uint64_t v10;

  v2 = sub_1004B804C(&qword_1013EF328);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v3 + 16))((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  v6 = *(unsigned __int8 *)(v3 + 80);
  v7 = (v6 + 16) & ~v6;
  v8 = swift_allocObject(&unk_1012935C8, v7 + v4, v6 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v8 + v7, (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  sub_100A9EEDC((uint64_t)sub_10075D578, v8, (uint64_t)&OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue, (uint64_t)&unk_1012935F0, (uint64_t)sub_100B00FBC, (uint64_t)&unk_101293608);
  *(_QWORD *)&result = swift_release(v8).n128_u64[0];
  return result;
}

uint64_t sub_100A6C3F4(const void *a1, void *a2)
{
  uint64_t v2;
  id v4;

  *(_QWORD *)(v2 + 16) = a2;
  *(_QWORD *)(v2 + 24) = _Block_copy(a1);
  v4 = a2;
  return swift_task_switch(sub_100A6C43C, 0, 0);
}

uint64_t sub_100A6C43C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[2];
  v2 = swift_task_alloc(32);
  v0[4] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[5] = v3;
  *v3 = v0;
  v3[1] = sub_100A6C4DC;
  return withCheckedContinuation<A>(isolation:function:_:)(v3, 0, 0, 0x74614465736F6C63, 0xEF29286573616261, sub_100B00FA4, v2, (char *)&type metadata for () + 8);
}

uint64_t sub_100A6C4DC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 32);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 40));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100A6C538, 0, 0);
}

uint64_t sub_100A6C538()
{
  uint64_t v0;
  void (**v1)(_QWORD);

  v1 = *(void (***)(_QWORD))(v0 + 24);

  v1[2](v1);
  _Block_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100A6C57C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  id v8;
  char v9;
  uint64_t v10;
  char v11;
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  id v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t inited;
  const char *v24;
  const char *v25;
  unsigned __int8 v26;
  CKRecordID v27;
  Swift::String v28;
  _BYTE v29[16];
  _QWORD v30[3];
  _BYTE v31[120];
  uint64_t v32;

  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = &v29[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v6 = v7;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2, v4);
  v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) == 0)
  {
    __break(1u);
LABEL_12:
    swift_once(&qword_1013DD858, sub_100A05554);
    goto LABEL_8;
  }
  v9 = sub_10080DD28();
  if (v1)
  {
    v30[0] = v1;
    swift_errorRetain(v1);
    v10 = sub_1004B804C(&qword_1013E0210);
    if (!swift_dynamicCast(&v32, v30, v10, &type metadata for CRLSQLSchemaVersionError, 0))
    {
      swift_errorRelease(v30[0]);
      return;
    }
    v21 = v32;
    v22 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    inited = swift_initStackObject(v22, v31);
    v24 = (const char *)&type metadata for Int;
    *(_OWORD *)(inited + 16) = xmmword_100EF5A10;
    v25 = (const char *)&protocol witness table for Int;
    *(_QWORD *)(inited + 56) = &type metadata for Int;
    *(_QWORD *)(inited + 64) = &protocol witness table for Int;
    *(_QWORD *)(inited + 32) = v21;
    v26 = sub_10080D710((uint64_t)&off_101263628);
    if (v26 != 5)
    {
      while (1)
      {
        *(_QWORD *)(inited + 96) = v24;
        *(_QWORD *)(inited + 104) = v25;
        *(_QWORD *)(inited + 72) = v26;
        v24 = "Encountered an unknown schema version during possible migration, found value %{public}d is less than lates"
              "t known value %{public}d. You are probably trying to open a newer database on an older client, but this is not supported.";
        v25 = "_performSchemaMigrationIfNeeded()";
        sub_100757E04(&_mh_execute_header, (uint64_t)"_performSchemaMigrationIfNeeded()", 33, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2, 351, "Encountered an unknown schema version during possible migration, found value %{public}d is less than latest known value %{public}d. You are probably trying to open a newer database on an older client, but this is not supported.", 227, 2u, inited);
        sub_100518FC0(inited, (uint64_t)"Encountered an unknown schema version during possible migration, found value %{public}d is less than latest known value %{public}d. You are probably trying to open a newer database on an older client, but this is not supported.");
        sub_100519194(inited, (uint64_t)"_performSchemaMigrationIfNeeded()", 33, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2u, 351, (uint64_t)"Encountered an unknown schema version during possible migration, found value %{public}d is less than latest known value %{public}d. You are probably trying to open a newer database on an older client, but this is not supported.", 227, 2u);
        SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v27, v28);
        v26 = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Freeform/CRLAssert.swift", 24, 2, 348, 0);
        __break(1u);
      }
    }
    __break(1u);
    goto LABEL_15;
  }
  v11 = v9;
  v12 = sub_10080D710((uint64_t)&off_101263628);
  if (v12 == 5)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v11 != v12)
    __asm { BR              X10 }
  if (qword_1013DD858 != -1)
    goto LABEL_12;
LABEL_8:
  swift_beginAccess(&static OS_os_log.boardStore, v30, 0, 0);
  v13 = (void *)static OS_os_log.boardStore;
  v14 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  v15 = swift_initStackObject(v14, v29);
  *(_OWORD *)(v15 + 16) = xmmword_100EF5E40;
  v16 = sub_10080D710((uint64_t)&off_101263628);
  if (v16 == 5)
  {
LABEL_16:
    __break(1u);
    JUMPOUT(0x100A6CA3CLL);
  }
  *(_QWORD *)(v15 + 56) = &type metadata for Int;
  *(_QWORD *)(v15 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v15 + 32) = v16;
  v17 = v13;
  v19 = static os_log_type_t.default.getter(v18);
  sub_100A06EBC((uint64_t)v17, &_mh_execute_header, v19, "No need to migrate database schema, already on latest version %{public}d", 72, 2, v15);
  swift_setDeallocating(v15);
  v20 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(v15 + 32, 1, v20);

}

void sub_100A6CBE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  unint64_t v12;
  void (*v13)(_QWORD *, _QWORD, uint64_t, __n128);
  id v14;
  uint64_t v15;
  void (*v16)(_QWORD *, uint64_t);
  void (*v17)(_QWORD, _QWORD);
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void (*v23)(_QWORD, _QWORD);
  void *v24;
  uint64_t inited;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  id v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(_QWORD *, _QWORD, uint64_t);
  char v39;
  id v40;
  __n128 v41;
  uint64_t v42;
  id v43;
  __n128 v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  __n128 v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  void (*v59)(_QWORD, _QWORD);
  void (*v60)(_QWORD, _QWORD);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  void (*v66)(_QWORD *, uint64_t);
  unsigned int v67;
  char *v68;
  void (*v69)(_QWORD *, _QWORD, uint64_t);
  id v70;
  void (*v71)(_QWORD, _QWORD);
  char v72[72];
  char v73[96];
  char v74[8];
  uint64_t v75;

  v1 = type metadata accessor for CRLBoardDataStore.KeyValueTableKey(0);
  __chkstk_darwin(v1);
  v68 = (char *)&v61 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v5 = (char *)&v61 - v4;
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (uint64_t *)((char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v10 = v11;
  v12 = enum case for DispatchPredicate.onQueue(_:);
  v13 = *(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v7 + 104);
  v13(v10, enum case for DispatchPredicate.onQueue(_:), v6, v8);
  v14 = v11;
  v15 = _dispatchPreconditionTest(_:)(v10);
  v16 = *(void (**)(_QWORD *, uint64_t))(v7 + 8);
  v16(v10, v6);
  if ((v15 & 1) == 0)
  {
    __break(1u);
    goto LABEL_32;
  }
  v70 = sub_10050391C();
  v71 = v17;
  v18 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v10 = v18;
  v67 = v12;
  v69 = (void (*)(_QWORD *, _QWORD, uint64_t))v13;
  ((void (*)(_QWORD *, unint64_t, uint64_t))v13)(v10, v12, v6);
  v19 = v18;
  v15 = _dispatchPreconditionTest(_:)(v10);
  v66 = v16;
  v16(v10, v6);
  if ((v15 & 1) == 0)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    swift_once(&qword_1013DD858, sub_100A05554);
    goto LABEL_6;
  }
  v65 = v19;
  swift_storeEnumTagMultiPayload(v5, v1, 4);
  v20 = v75;
  sub_100AAF524((uint64_t)v5);
  v15 = v21;
  v12 = v22;
  sub_1004B84A4((uint64_t)v5, type metadata accessor for CRLBoardDataStore.KeyValueTableKey);
  if (v20)
  {
    v23 = v71;
LABEL_28:
    swift_bridgeObjectRelease(v23);
    return;
  }
  v62 = v6;
  v61 = v1;
  v75 = 0;
  v16 = (void (*)(_QWORD *, uint64_t))v71;
  if (qword_1013DD858 != -1)
    goto LABEL_33;
LABEL_6:
  swift_beginAccess(&static OS_os_log.boardStore, v74, 0, 0);
  v24 = (void *)static OS_os_log.boardStore;
  v64 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v64, v73);
  *(_OWORD *)(inited + 16) = xmmword_100EF5A10;
  *(_QWORD *)(inited + 56) = &type metadata for String;
  v26 = sub_1004CFC2C();
  v27 = 7104878;
  v28 = (uint64_t)v70;
  if (!v16)
    v28 = 7104878;
  *(_QWORD *)(inited + 32) = v28;
  v29 = inited + 32;
  v30 = 0xE300000000000000;
  if (v16)
    v31 = (unint64_t)v16;
  else
    v31 = 0xE300000000000000;
  *(_QWORD *)(inited + 40) = v31;
  *(_QWORD *)(inited + 96) = &type metadata for String;
  *(_QWORD *)(inited + 104) = v26;
  v32 = v26;
  if (v12)
  {
    v27 = v15;
    v30 = v12;
  }
  *(_QWORD *)(inited + 64) = v26;
  *(_QWORD *)(inited + 72) = v27;
  *(_QWORD *)(inited + 80) = v30;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v12);
  v33 = v24;
  v35 = static os_log_type_t.default.getter(v34);
  sub_100A06EBC((uint64_t)v33, &_mh_execute_header, v35, "Ensuring ownership of data. currentAccountIdentifier: %{public}@. accountIdentifierFromDatabase: %{public}@", 107, 2, inited);
  swift_setDeallocating(inited);
  v36 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(v29, 2, v36);

  if (!v12)
  {
    if (!v16)
    {
LABEL_23:
      v40 = (id)static OS_os_log.boardStore;
      v42 = static os_log_type_t.default.getter(v41);
      sub_100A06EBC((uint64_t)v40, &_mh_execute_header, v42, "No ownership change. Continuing.", 32, 2, (uint64_t)_swiftEmptyArrayStorage);

      return;
    }
    v63 = v36;
    goto LABEL_26;
  }
  v63 = v36;
  v37 = v75;
  if (v16)
  {
    v38 = v69;
    if ((id)v15 == v70 && (void (*)(_QWORD *, uint64_t))v12 == v16)
    {
      swift_bridgeObjectRelease(v12);
LABEL_22:
      swift_bridgeObjectRelease(v16);
      goto LABEL_23;
    }
    v39 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v12, v70, v16, 0);
    swift_bridgeObjectRelease(v12);
    if ((v39 & 1) != 0)
      goto LABEL_22;
  }
  else
  {
    swift_bridgeObjectRelease(v12);
    v38 = v69;
  }
  v43 = (id)static OS_os_log.boardStore;
  v45 = static os_log_type_t.default.getter(v44);
  sub_100A06EBC((uint64_t)v43, &_mh_execute_header, v45, "Ownership of data changed. Deleting data.", 41, 2, (uint64_t)_swiftEmptyArrayStorage);

  sub_100A74660();
  if (v37)
  {
LABEL_27:
    v23 = (void (*)(_QWORD, _QWORD))v16;
    goto LABEL_28;
  }
  if (v16)
  {
LABEL_26:
    v46 = (void *)static OS_os_log.boardStore;
    v47 = swift_initStackObject(v64, v72);
    *(_OWORD *)(v47 + 16) = xmmword_100EF5E40;
    *(_QWORD *)(v47 + 56) = &type metadata for String;
    *(_QWORD *)(v47 + 64) = v32;
    v48 = (uint64_t)v70;
    *(_QWORD *)(v47 + 32) = v70;
    *(_QWORD *)(v47 + 40) = v16;
    swift_bridgeObjectRetain(v16);
    v49 = v46;
    v51 = static os_log_type_t.default.getter(v50);
    sub_100A06EBC((uint64_t)v49, &_mh_execute_header, v51, "Previously unowned data is being claimed by owner: %@", 53, 2, v47);
    swift_setDeallocating(v47);
    swift_arrayDestroy(v47 + 32, 1, v63);

    sub_100A751F0(v48, (uint64_t)v16);
    goto LABEL_27;
  }
  v52 = (uint64_t)(id)static OS_os_log.boardStore;
  v54 = static os_log_type_t.default.getter(v53);
  sub_100A06EBC(v52, &_mh_execute_header, v54, "Owner set to nil.", 17, 2, (uint64_t)_swiftEmptyArrayStorage);

  v55 = v65;
  *v10 = v65;
  v56 = v62;
  v38(v10, v67, v62);
  v57 = v55;
  LOBYTE(v52) = _dispatchPreconditionTest(_:)(v10);
  v66(v10, v56);
  if ((v52 & 1) != 0)
  {
    v58 = (uint64_t)v68;
    swift_storeEnumTagMultiPayload(v68, v61, 4);
    sub_100AAF524(v58);
    v60 = v59;
    sub_1004B84A4(v58, type metadata accessor for CRLBoardDataStore.KeyValueTableKey);
    v23 = v60;
    goto LABEL_28;
  }
  __break(1u);
}

uint64_t sub_100A6D234()
{
  uint64_t v0;
  uint64_t v1;
  id *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t inited;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  sqlite3_int64 v40;
  int v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  __n128 v46;
  uint64_t v47;
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t Marks;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65[3];
  uint64_t v66;
  _QWORD v67[3];
  _BYTE v68[8];
  _BYTE v69[112];
  uint64_t v70;
  unsigned __int8 v71;

  Marks = type metadata accessor for CRLSideStore.BoardLoadMarksColumn.Row(0);
  v3 = *(_QWORD *)(Marks - 8);
  __chkstk_darwin(Marks);
  v60 = (uint64_t)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (uint64_t *)((char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v9 = v10;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5, v7);
  v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v9, v5);
  if ((v10 & 1) == 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  v58 = v0;
  v12 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_sideStore);
  v13 = sub_1004B804C(&qword_1014055B8);
  v53 = v12;
  OS_dispatch_queue.sync<A>(execute:)(sub_100B0108C, v12, v13);
  v1 = v70;
  v2 = (id *)&static OS_os_log.boardStore;
  v54 = v71;
  if ((v71 & 1) != 0)
  {
    swift_errorRetain(v70);
    if (qword_1013DD858 != -1)
      swift_once(&qword_1013DD858, sub_100A05554);
    swift_beginAccess(&static OS_os_log.boardStore, &v70, 0, 0);
    v14 = (void *)static OS_os_log.boardStore;
    v15 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    inited = swift_initStackObject(v15, v69);
    *(_OWORD *)(inited + 16) = xmmword_100EF5A10;
    swift_getErrorValue(v1, v68, v67);
    v17 = v67[1];
    v18 = v67[2];
    v19 = v14;
    v20 = Error.publicDescription.getter(v17, v18);
    v22 = v21;
    *(_QWORD *)(inited + 56) = &type metadata for String;
    v23 = sub_1004CFC2C();
    *(_QWORD *)(inited + 64) = v23;
    *(_QWORD *)(inited + 32) = v20;
    *(_QWORD *)(inited + 40) = v22;
    swift_getErrorValue(v1, &v66, v65);
    v24 = Error.fullDescription.getter(v65[1]);
    *(_QWORD *)(inited + 96) = &type metadata for String;
    *(_QWORD *)(inited + 104) = v23;
    *(_QWORD *)(inited + 72) = v24;
    *(_QWORD *)(inited + 80) = v25;
    v26 = static os_log_type_t.error.getter(v24);
    sub_100A06EBC((uint64_t)v19, &_mh_execute_header, v26, "Failed to updateLastOpenCrashedVersionBasedOnBoardLoadMarksInSideStore with error: %{public}@ %@", 96, 2, inited);
    swift_setDeallocating(inited);
    v27 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(inited + 32, 2, v27);

    sub_1004E1E54(v1, 1);
    v28 = &qword_1013DD000;
    goto LABEL_13;
  }
  v29 = *(_QWORD *)(v70 + 16);
  if (v29)
  {
    v30 = v70 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v57 = *(_QWORD *)(v3 + 72);
    v52 = v70;
    swift_bridgeObjectRetain(v70);
    v56 = xmmword_100EF5550;
    v55 = xmmword_100EF5A10;
    v31 = v60;
    do
    {
      v62 = v29;
      sub_1004B8460(v30, v31, type metadata accessor for CRLSideStore.BoardLoadMarksColumn.Row);
      if (qword_1013DD858 != -1)
        swift_once(&qword_1013DD858, sub_100A05554);
      swift_beginAccess(&static OS_os_log.boardStore, &v70, 0, 0);
      v32 = (void *)static OS_os_log.boardStore;
      v33 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      v34 = swift_initStackObject(v33, &v63);
      *(_OWORD *)(v34 + 16) = v56;
      v35 = v32;
      v36 = UUID.uuidString.getter(v35);
      v38 = v37;
      *(_QWORD *)(v34 + 56) = &type metadata for String;
      v61 = sub_1004CFC2C();
      *(_QWORD *)(v34 + 64) = v61;
      *(_QWORD *)(v34 + 32) = v36;
      *(_QWORD *)(v34 + 40) = v38;
      v39 = Marks;
      v40 = *(_QWORD *)(v31 + *(int *)(Marks + 20));
      *(_QWORD *)(v34 + 96) = &type metadata for UInt64;
      *(_QWORD *)(v34 + 104) = &protocol witness table for UInt64;
      *(_QWORD *)(v34 + 72) = v40;
      v41 = *(_DWORD *)(v31 + *(int *)(v39 + 24));
      *(_QWORD *)(v34 + 136) = &type metadata for Int32;
      *(_QWORD *)(v34 + 144) = &protocol witness table for Int32;
      *(_DWORD *)(v34 + 112) = v41;
      v43 = static os_log_type_t.default.getter(v42);
      sub_100A06EBC((uint64_t)v35, &_mh_execute_header, v43, "Setting lastOpenCrashVersion for board %{public}@ to %{public}d because it has %{public}d board load marks during updateLastOpenCrashedVersionBasedOnBoardLoadMarksInSideStore", 174, 2, v34);
      swift_setDeallocating(v34);
      v44 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(v34 + 32, 3, v44);

      sub_100AA2374(v31, v40, 0);
      v31 = v60;
      sub_1004B84A4(v60, type metadata accessor for CRLSideStore.BoardLoadMarksColumn.Row);
      v30 += v57;
      v29 = v62 - 1;
      v2 = (id *)&static OS_os_log.boardStore;
      v28 = &qword_1013DD000;
    }
    while (v62 != 1);
    v1 = v52;
    sub_1004E1E54(v52, 0);
    sub_100812DD4();
LABEL_13:
    LOBYTE(v9) = v54;
    if (v28[267] == -1)
    {
LABEL_14:
      swift_beginAccess(v2, &v64, 0, 0);
      v45 = *v2;
      v47 = static os_log_type_t.default.getter(v46);
      sub_100A06EBC((uint64_t)v45, &_mh_execute_header, v47, "Finished updateLastOpenCrashedVersionBasedOnBoardLoadMarksInSideStore", 69, 2, (uint64_t)_swiftEmptyArrayStorage);
      goto LABEL_15;
    }
LABEL_20:
    swift_once(&qword_1013DD858, sub_100A05554);
    goto LABEL_14;
  }
  if (qword_1013DD858 != -1)
    swift_once(&qword_1013DD858, sub_100A05554);
  swift_beginAccess(&static OS_os_log.boardStore, &v70, 0, 0);
  v45 = (id)static OS_os_log.boardStore;
  v50 = static os_log_type_t.default.getter(v49);
  sub_100A06EBC((uint64_t)v45, &_mh_execute_header, v50, "updateLastOpenCrashedVersionBasedOnBoardLoadMarksInSideStore resulted in no new crashed boards", 94, 2, (uint64_t)_swiftEmptyArrayStorage);
  LOBYTE(v9) = 0;
LABEL_15:

  return sub_1004E1E54(v1, (char)v9);
}

void sub_100A6D8F0(_QWORD *a1@<X8>)
{
  *a1 = &off_101263D28;
}

BOOL sub_100A6D900(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

BOOL sub_100A6D914(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 >= *a1;
}

BOOL sub_100A6D928(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 >= *a2;
}

BOOL sub_100A6D93C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 < *a1;
}

void sub_100A6D950()
{
  char *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  void (*v10)(_QWORD *, uint64_t, uint64_t);
  void (*v11)(_QWORD *, uint64_t);
  id v12;
  __n128 v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t inited;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  char v27;
  CKRecordID v28;
  Swift::String v29;
  uint64_t v30;
  void (*v31)(_QWORD *, uint64_t);
  char v32[32];
  char v33[112];
  char v34[32];
  id v35;

  v2 = v0;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (uint64_t *)((char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)&v0[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue];
  *v7 = v8;
  v9 = enum case for DispatchPredicate.onQueue(_:);
  v10 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v4 + 104);
  ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v10)(v7, enum case for DispatchPredicate.onQueue(_:), v3, v5);
  v35 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  v11 = *(void (**)(_QWORD *, uint64_t))(v4 + 8);
  v11(v7, v3);
  if ((v8 & 1) != 0)
  {
    if (qword_1013DD858 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1013DD858, sub_100A05554);
LABEL_3:
  swift_beginAccess(&static OS_os_log.boardStore, v34, 0, 0);
  v12 = (id)static OS_os_log.boardStore;
  v14 = static os_log_type_t.default.getter(v13);
  sub_100A06EBC((uint64_t)v12, &_mh_execute_header, v14, "Creating schema for a new board database", 40, 2, (uint64_t)_swiftEmptyArrayStorage);

  v15 = sub_10080DD28();
  if (v1)
    return;
  v16 = v15;
  v31 = v11;
  v17 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v17, v33);
  v19 = (char *)inited;
  *(_QWORD *)(inited + 32) = v16;
  v20 = inited + 32;
  *(_OWORD *)(inited + 16) = xmmword_100EF5A10;
  *(_QWORD *)(inited + 56) = &type metadata for Int;
  *(_QWORD *)(inited + 64) = &protocol witness table for Int;
  *(_QWORD *)(inited + 96) = &type metadata for Int;
  *(_QWORD *)(inited + 104) = &protocol witness table for Int;
  *(_QWORD *)(inited + 72) = 1;
  if (v16)
  {
LABEL_11:
    sub_100757E04(&_mh_execute_header, (uint64_t)"_createDatabaseSchema()", 23, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2, 581, "Current schema version %{public}d before migration to %{public}d is unexpected", 78, 2u, (uint64_t)v19);
    sub_100518FC0((uint64_t)v19, (uint64_t)"Current schema version %{public}d before migration to %{public}d is unexpected");
    sub_100519194((uint64_t)v19, (uint64_t)"_createDatabaseSchema()", 23, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2u, 581, (uint64_t)"Current schema version %{public}d before migration to %{public}d is unexpected", 78, 2u);
    SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v28, v29);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Freeform/CRLAssert.swift", 24, 2, 348, 0);
    __break(1u);
    return;
  }
  swift_setDeallocating(inited);
  v21 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(v20, 2, v21);
  v22 = *(_QWORD *)&v2[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database];
  v23 = type metadata accessor for SQLTransaction();
  v24 = swift_initStackObject(v23, v32);
  *(_QWORD *)(v24 + 16) = v22;
  *(_BYTE *)(v24 + 24) = 0;
  swift_retain(v22);
  sub_1006B6CB8();
  sub_100A70674();
  sub_100A70F0C();
  sub_100A714B4();
  sub_100A71DCC();
  sub_100A724E0();
  sub_100A72914();
  sub_100A72D54();
  sub_100A73438();
  sub_100A7393C();
  v25 = v35;
  *v7 = v35;
  v10(v7, v9, v3);
  v26 = v25;
  v19 = v2;
  v27 = _dispatchPreconditionTest(_:)(v7);
  v31(v7, v3);

  if ((v27 & 1) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  sub_10080E56C(1);
  sub_1006B70D4();
  swift_setDeallocating(v24);
  swift_release(*(_QWORD *)(v24 + 16));
}

void sub_100A6DDD4()
{
  char *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  void (*v10)(_QWORD *, uint64_t, uint64_t);
  id v11;
  void (*v12)(_QWORD *, uint64_t);
  id v13;
  __n128 v14;
  uint64_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t inited;
  char *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  char v29;
  CKRecordID v30;
  Swift::String v31;
  uint64_t v32;
  void (*v33)(_QWORD *, uint64_t);
  char v34[32];
  char v35[112];
  char v36[32];
  id v37;

  v2 = v0;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (uint64_t *)((char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)&v0[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue];
  *v7 = v8;
  v9 = enum case for DispatchPredicate.onQueue(_:);
  v10 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v4 + 104);
  ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v10)(v7, enum case for DispatchPredicate.onQueue(_:), v3, v5);
  v11 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  v12 = *(void (**)(_QWORD *, uint64_t))(v4 + 8);
  v12(v7, v3);
  if ((v8 & 1) != 0)
  {
    v37 = v11;
    if (qword_1013DD858 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1013DD858, sub_100A05554);
LABEL_3:
  swift_beginAccess(&static OS_os_log.boardStore, v36, 0, 0);
  v13 = (id)static OS_os_log.boardStore;
  v15 = static os_log_type_t.default.getter(v14);
  sub_100A06EBC((uint64_t)v13, &_mh_execute_header, v15, "Migrating database to minRequiredVersionForGoodEnoughFidelity schema version", 76, 2, (uint64_t)_swiftEmptyArrayStorage);

  v16 = sub_10080DD28();
  if (v1)
    return;
  v17 = v16;
  v33 = v12;
  v18 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v18, v35);
  v20 = (char *)inited;
  *(_OWORD *)(inited + 16) = xmmword_100EF5A10;
  *(_QWORD *)(inited + 32) = v17;
  v21 = inited + 32;
  v22 = v17;
  *(_QWORD *)(inited + 56) = &type metadata for Int;
  *(_QWORD *)(inited + 64) = &protocol witness table for Int;
  *(_QWORD *)(inited + 96) = &type metadata for Int;
  *(_QWORD *)(inited + 104) = &protocol witness table for Int;
  LOBYTE(v23) = 2;
  *(_QWORD *)(inited + 72) = 2;
  if (v22 != 1)
  {
LABEL_11:
    sub_100757E04(&_mh_execute_header, (uint64_t)"_migrateToMinRequiredVersionForGoodEnoughFidelitySchema()", 57, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2, 474, "Current schema version %{public}d before migration to %{public}d is unexpected", 78, v23, (uint64_t)v20);
    sub_100518FC0((uint64_t)v20, (uint64_t)"Current schema version %{public}d before migration to %{public}d is unexpected");
    sub_100519194((uint64_t)v20, (uint64_t)"_migrateToMinRequiredVersionForGoodEnoughFidelitySchema()", 57, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2u, 474, (uint64_t)"Current schema version %{public}d before migration to %{public}d is unexpected", 78, v23);
    SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v30, v31);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Freeform/CRLAssert.swift", 24, 2, 348, 0);
    __break(1u);
    return;
  }
  swift_setDeallocating(inited);
  v24 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(v21, 2, v24);
  v23 = *(_QWORD *)&v2[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database];
  v25 = type metadata accessor for SQLTransaction();
  v26 = swift_initStackObject(v25, v34);
  *(_QWORD *)(v26 + 16) = v23;
  *(_BYTE *)(v26 + 24) = 0;
  swift_retain(v23);
  sub_1006B6CB8();
  sub_100A6F5D0();
  sub_100A6F9F4();
  sub_100A6FE24();
  sub_100A7024C();
  v27 = v37;
  *v7 = v37;
  v10(v7, v9, v3);
  v28 = v27;
  v20 = v2;
  v29 = _dispatchPreconditionTest(_:)(v7);
  v33(v7, v3);

  if ((v29 & 1) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  sub_10080E56C(2);
  sub_1006B70D4();
  swift_setDeallocating(v26);
  swift_release(*(_QWORD *)(v26 + 16));
}

void sub_100A6E1F8()
{
  char *v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  void (*v9)(_QWORD, __n128);
  void (*v10)(_QWORD *, uint64_t);
  id v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  uint64_t inited;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  void *object;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  void *v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  void *v42;
  Swift::String v43;
  uint64_t v44;
  unint64_t v45;
  Swift::String v46;
  Swift::String v47;
  Swift::String v48;
  Swift::String v49;
  Swift::String v50;
  Swift::String v51;
  void *v52;
  Swift::String v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __n128 v72;
  void *v73;
  _QWORD *v74;
  uint64_t v75;
  id v76;
  sqlite3_stmt **v77;
  int v78;
  void *v79;
  _QWORD *v80;
  uint64_t v81;
  id v82;
  _QWORD *v83;
  unint64_t v84;
  int v85;
  unint64_t v86;
  uint64_t v87;
  __n128 v88;
  void *v89;
  uint64_t v90;
  _QWORD *v91;
  id v92;
  __n128 v93;
  uint64_t v94;
  _QWORD *v95;
  void *v96;
  id v97;
  char *v98;
  unint64_t v99;
  uint64_t v100;
  __n128 v101;
  unsigned __int8 v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  CKRecordID v106;
  uint64_t v107;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  id v116;
  uint64_t v117;
  void (*v118)(_QWORD *, uint64_t);
  char *v119;
  unsigned int v120;
  void (*v121)(_QWORD *, _QWORD, uint64_t, __n128);
  _QWORD *v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132[112];
  char v133[24];

  v2 = v1;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (_QWORD *)((char *)&v109 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v119 = v0;
  v8 = *(void **)&v0[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue];
  *v7 = v8;
  v9 = *(void (**)(_QWORD, __n128))(v4 + 104);
  v120 = enum case for DispatchPredicate.onQueue(_:);
  v121 = (void (*)(_QWORD *, _QWORD, uint64_t, __n128))v9;
  v9(v7, v5);
  v116 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  v10 = *(void (**)(_QWORD *, uint64_t))(v4 + 8);
  v122 = v7;
  v123 = v3;
  v10(v7, v3);
  if ((v8 & 1) == 0)
    goto LABEL_30;
  if (qword_1013DD858 != -1)
    goto LABEL_31;
LABEL_3:
  swift_beginAccess(&static OS_os_log.boardStore, v133, 0, 0);
  v11 = (id)static OS_os_log.boardStore;
  v13 = static os_log_type_t.default.getter(v12);
  sub_100A06EBC((uint64_t)v11, &_mh_execute_header, v13, "Migrating database to minRequiredVersionForFullFidelity schema version", 70, 2, (uint64_t)_swiftEmptyArrayStorage);

  v14 = v119;
  v15 = sub_10080DD28();
  if (v2)
    return;
  v16 = v15;
  v118 = v10;
  v124 = 0;
  v110 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v110, v132);
  v18 = inited;
  v109 = xmmword_100EF5A10;
  *(_OWORD *)(inited + 16) = xmmword_100EF5A10;
  *(_QWORD *)(inited + 32) = v16;
  v19 = inited + 32;
  *(_QWORD *)(inited + 56) = &type metadata for Int;
  *(_QWORD *)(inited + 64) = &protocol witness table for Int;
  *(_QWORD *)(inited + 96) = &type metadata for Int;
  *(_QWORD *)(inited + 104) = &protocol witness table for Int;
  *(_QWORD *)(inited + 72) = 3;
  if (v16 != 2)
  {
    sub_100757E04(&_mh_execute_header, (uint64_t)"_migrateToMinRequiredVersionForFullFidelitySchema()", 51, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2, 430, "Current schema version %{public}d before migration to %{public}d is unexpected", 78, 2u, inited);
    sub_100518FC0(v18, (uint64_t)"Current schema version %{public}d before migration to %{public}d is unexpected");
    sub_100519194(v18, (uint64_t)"_migrateToMinRequiredVersionForFullFidelitySchema()", 51, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2u, 430, (uint64_t)"Current schema version %{public}d before migration to %{public}d is unexpected", 78, 2u);
    goto LABEL_35;
  }
  swift_setDeallocating(inited);
  v111 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(v19, 2, v111);
  v128 = 0;
  v129 = 0xE000000000000000;
  _StringGuts.grow(_:)(57);
  v20._countAndFlagsBits = 0x4154205245544C41;
  v20._object = (void *)0xEC00000020454C42;
  String.append(_:)(v20);
  v21._countAndFlagsBits = 0x736472616F62;
  v21._object = (void *)0xE600000000000000;
  String.append(_:)(v21);
  v22._countAndFlagsBits = 0x4C4F432044444120;
  v22._object = (void *)0xEC000000204E4D55;
  String.append(_:)(v22);
  v23._countAndFlagsBits = 0xD000000000000026;
  v23._object = (void *)0x8000000100FEEB60;
  String.append(_:)(v23);
  v24._countAndFlagsBits = 0xD00000000000001ALL;
  v24._object = (void *)0x8000000100FF4030;
  String.append(_:)(v24);
  v114 = 0x1000000000000;
  v126 = 0x1000000000000;
  v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  object = v25._object;
  String.append(_:)(v25);
  swift_bridgeObjectRelease(object);
  v27._countAndFlagsBits = 59;
  v27._object = (void *)0xE100000000000000;
  String.append(_:)(v27);
  v117 = v128;
  v115 = v129;
  v128 = 0;
  v129 = 0xE000000000000000;
  _StringGuts.grow(_:)(57);
  v28._countAndFlagsBits = 0x4154205245544C41;
  v28._object = (void *)0xEC00000020454C42;
  String.append(_:)(v28);
  v29._countAndFlagsBits = 0x74695F6472616F62;
  v29._object = (void *)0xEB00000000736D65;
  String.append(_:)(v29);
  v30._countAndFlagsBits = 0x4C4F432044444120;
  v30._object = (void *)0xEC000000204E4D55;
  String.append(_:)(v30);
  v31._countAndFlagsBits = 0xD000000000000026;
  v31._object = (void *)0x8000000100FEEB60;
  String.append(_:)(v31);
  v32._countAndFlagsBits = 0xD00000000000001ALL;
  v32._object = (void *)0x8000000100FF4030;
  String.append(_:)(v32);
  v126 = 0x1000000000000;
  v33._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  v34 = v33._object;
  String.append(_:)(v33);
  swift_bridgeObjectRelease(v34);
  v35._countAndFlagsBits = 59;
  v35._object = (void *)0xE100000000000000;
  String.append(_:)(v35);
  v112 = v129;
  v113 = v128;
  v128 = 0;
  v129 = 0xE000000000000000;
  _StringGuts.grow(_:)(57);
  v36._countAndFlagsBits = 0x4154205245544C41;
  v36._object = (void *)0xEC00000020454C42;
  String.append(_:)(v36);
  v37._countAndFlagsBits = 0xD000000000000018;
  v37._object = (void *)0x8000000100FEF1F0;
  String.append(_:)(v37);
  v38._countAndFlagsBits = 0x4C4F432044444120;
  v38._object = (void *)0xEC000000204E4D55;
  String.append(_:)(v38);
  v39._countAndFlagsBits = 0xD000000000000026;
  v39._object = (void *)0x8000000100FEEB60;
  String.append(_:)(v39);
  v40._countAndFlagsBits = 0xD00000000000001ALL;
  v40._object = (void *)0x8000000100FF4030;
  String.append(_:)(v40);
  v126 = 0x1000000000000;
  v41._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  v42 = v41._object;
  String.append(_:)(v41);
  swift_bridgeObjectRelease(v42);
  v43._countAndFlagsBits = 59;
  v43._object = (void *)0xE100000000000000;
  String.append(_:)(v43);
  v44 = v128;
  v45 = v129;
  v128 = 0;
  v129 = 0xE000000000000000;
  _StringGuts.grow(_:)(57);
  v46._countAndFlagsBits = 0x4154205245544C41;
  v46._object = (void *)0xEC00000020454C42;
  String.append(_:)(v46);
  v47._countAndFlagsBits = 0x6D5F736472616F62;
  v47._object = (void *)0xEF61746164617465;
  String.append(_:)(v47);
  v48._countAndFlagsBits = 0x4C4F432044444120;
  v48._object = (void *)0xEC000000204E4D55;
  String.append(_:)(v48);
  v49._countAndFlagsBits = 0xD000000000000026;
  v49._object = (void *)0x8000000100FEEB60;
  String.append(_:)(v49);
  v50._countAndFlagsBits = 0xD00000000000001ALL;
  v50._object = (void *)0x8000000100FF4030;
  String.append(_:)(v50);
  v126 = v114;
  v51._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  v52 = v51._object;
  String.append(_:)(v51);
  swift_bridgeObjectRelease(v52);
  v53._countAndFlagsBits = 59;
  v53._object = (void *)0xE100000000000000;
  String.append(_:)(v53);
  v54 = v128;
  v55 = v129;
  v56 = sub_1004B804C((uint64_t *)&unk_1013DFC30);
  v57 = swift_initStackObject(v56, &v131);
  *(_QWORD *)(v57 + 32) = v117;
  *(_OWORD *)(v57 + 16) = xmmword_100EF5E30;
  v58 = v113;
  *(_QWORD *)(v57 + 40) = v115;
  *(_QWORD *)(v57 + 48) = v58;
  *(_QWORD *)(v57 + 56) = v112;
  *(_QWORD *)(v57 + 64) = v44;
  *(_QWORD *)(v57 + 72) = v45;
  *(_QWORD *)(v57 + 80) = v54;
  *(_QWORD *)(v57 + 88) = v55;
  v59 = *(_QWORD *)&v14[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database];
  v60 = type metadata accessor for SQLTransaction();
  v61 = swift_initStackObject(v60, &v125);
  *(_QWORD *)(v61 + 16) = v59;
  *(_BYTE *)(v61 + 24) = 0;
  swift_retain(v59);
  v62 = v124;
  sub_1006B6CB8();
  v63 = v62;
  if (v62)
  {
    swift_release(v59);
    swift_setDeallocating(v57);
    swift_arrayDestroy(v57 + 32, *(_QWORD *)(v57 + 16), &type metadata for String);
    return;
  }
  v117 = v59;
  v115 = v61;
  v124 = 0;
  v2 = (uint64_t *)(v57 + 40);
  v10 = v118;
  while (1)
  {
    if (v63 >= *(_QWORD *)(v57 + 16))
    {
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      swift_once(&qword_1013DD858, sub_100A05554);
      goto LABEL_3;
    }
    v65 = *(v2 - 1);
    v64 = *v2;
    v66 = type metadata accessor for SQLiteStatement();
    swift_initStackObject(v66, &v130);
    v67 = v117;
    swift_retain(v117);
    swift_bridgeObjectRetain(v64);
    v68 = v124;
    v69 = sub_1006B77CC(v67, v65, v64);
    v124 = v68;
    if (v68)
    {
      swift_release(v67);
      swift_bridgeObjectRelease(v57);
      v84 = v115;
      goto LABEL_23;
    }
    v70 = v69;
    v71 = v57;
    v72 = swift_release(v67);
    v73 = *(void **)(*(_QWORD *)(v70 + 16) + 32);
    v74 = v122;
    v75 = v123;
    *v122 = v73;
    v121(v74, v120, v75, v72);
    v76 = v73;
    LOBYTE(v73) = _dispatchPreconditionTest(_:)(v74);
    v10(v74, v75);
    if ((v73 & 1) == 0)
      goto LABEL_28;
    v77 = (sqlite3_stmt **)(v70 + 24);
    swift_beginAccess(v70 + 24, &v128, 1, 0);
    v78 = sqlite3_step(*(sqlite3_stmt **)(v70 + 24));
    if (v78 != 101)
      break;
    v79 = *(void **)(*(_QWORD *)(v70 + 16) + 32);
    v80 = v122;
    v81 = v123;
    *v122 = v79;
    ((void (*)(_QWORD *, _QWORD, uint64_t))v121)(v80, v120, v81);
    v82 = v79;
    LOBYTE(v79) = _dispatchPreconditionTest(_:)(v80);
    v83 = v80;
    v10 = v118;
    v118(v83, v81);
    if ((v79 & 1) == 0)
      goto LABEL_29;
    if (*v77)
    {
      sqlite3_finalize(*v77);
      *v77 = 0;
    }
    ++v63;
    swift_release(v70);
    v2 += 2;
    v57 = v71;
    if (v63 == 4)
    {
      v93 = swift_bridgeObjectRelease(v71);
      v95 = v122;
      v94 = v123;
      v96 = v116;
      *v122 = v116;
      v121(v95, v120, v94, v93);
      v97 = v96;
      v98 = v119;
      LOBYTE(v96) = _dispatchPreconditionTest(_:)(v95);
      v10(v95, v94);

      if ((v96 & 1) != 0)
      {
        v99 = v124;
        sub_10080E56C(3);
        v100 = v111;
        v84 = v115;
        if (v99)
          goto LABEL_23;
        sub_1006B70D4();
        v102 = sub_10080DD28();
        v103 = swift_initStackObject(v110, &v127);
        v18 = v103;
        *(_OWORD *)(v103 + 16) = v109;
        *(_QWORD *)(v103 + 32) = v102;
        v104 = v103 + 32;
        *(_QWORD *)(v103 + 56) = &type metadata for Int;
        *(_QWORD *)(v103 + 96) = &type metadata for Int;
        *(_QWORD *)(v103 + 104) = &protocol witness table for Int;
        *(_QWORD *)(v103 + 64) = &protocol witness table for Int;
        *(_QWORD *)(v103 + 72) = 3;
        if (v102 != 3)
        {
          while (1)
          {
            sub_100757E04(&_mh_execute_header, (uint64_t)"_migrateToMinRequiredVersionForFullFidelitySchema()", 51, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2, 464, "Queried schema version %{public}d after migration to %{public}d is unexpected", 77, 2u, v18);
            sub_100518FC0(v18, (uint64_t)"Queried schema version %{public}d after migration to %{public}d is unexpected");
            sub_100519194(v18, (uint64_t)"_migrateToMinRequiredVersionForFullFidelitySchema()", 51, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2u, 464, (uint64_t)"Queried schema version %{public}d after migration to %{public}d is unexpected", 77, 2u);
LABEL_35:
            SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v106, *(Swift::String *)&v107);
            _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Freeform/CRLAssert.swift", 24, 2, 348, 0);
            __break(1u);
          }
        }
        swift_setDeallocating(v103);
        swift_arrayDestroy(v104, 2, v100);
        v105 = v115;
        swift_setDeallocating(v115);
        swift_release(*(_QWORD *)(v105 + 16));
        return;
      }
LABEL_33:
      __break(1u);
    }
  }
  v85 = v78;
  swift_bridgeObjectRelease(v71);
  v86 = sub_1006B79EC();
  swift_allocError(&type metadata for SQLiteError, v86, 0, 0);
  *(_DWORD *)v87 = v85;
  *(_QWORD *)(v87 + 8) = 0xD000000000000017;
  *(_QWORD *)(v87 + 16) = 0x8000000100FF4320;
  swift_willThrow(v88);
  v89 = *(void **)(*(_QWORD *)(v70 + 16) + 32);
  v91 = v122;
  v90 = v123;
  *v122 = v89;
  ((void (*)(_QWORD *, _QWORD, uint64_t))v121)(v91, v120, v90);
  v92 = v89;
  LOBYTE(v85) = _dispatchPreconditionTest(_:)(v91);
  v118(v91, v90);
  if ((v85 & 1) == 0)
  {
    __break(1u);
    goto LABEL_33;
  }
  v84 = v115;
  if (*v77)
  {
    sqlite3_finalize(*v77);
    *(_QWORD *)(v70 + 24) = 0;
  }
  swift_release(v70);
LABEL_23:
  sub_1006B7380();
  swift_willThrow(v101);
  swift_setDeallocating(v84);
  swift_release(*(_QWORD *)(v84 + 16));
}

void sub_100A6EE30()
{
  char *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  unsigned int v9;
  void (*v10)(_QWORD *, _QWORD, uint64_t, __n128);
  void (*v11)(_QWORD *, uint64_t);
  id v12;
  __n128 v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  uint64_t inited;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  void *v28;
  void (*v29)(_QWORD *, _QWORD, uint64_t);
  id v30;
  int v31;
  void *v32;
  id v33;
  char *v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  __n128 v38;
  void *v39;
  id v40;
  __n128 v41;
  uint64_t v42;
  void *v43;
  id v44;
  sqlite3_stmt **v45;
  uint64_t v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  CKRecordID v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  sqlite3_stmt **v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  unsigned int v59;
  void (*v60)(_QWORD *, uint64_t);
  id v61;
  void (*v62)(_QWORD *, _QWORD, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char v68[112];
  char v69[24];

  v2 = v0;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (uint64_t *)((char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)&v0[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue];
  *v7 = v8;
  v9 = enum case for DispatchPredicate.onQueue(_:);
  v10 = *(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v4 + 104);
  v10(v7, enum case for DispatchPredicate.onQueue(_:), v3, v5);
  v61 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  v11 = *(void (**)(_QWORD *, uint64_t))(v4 + 8);
  v11(v7, v3);
  if ((v8 & 1) != 0)
  {
    v62 = (void (*)(_QWORD *, _QWORD, uint64_t))v10;
    if (qword_1013DD858 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1013DD858, sub_100A05554);
LABEL_3:
  swift_beginAccess(&static OS_os_log.boardStore, v69, 0, 0);
  v12 = (id)static OS_os_log.boardStore;
  v14 = static os_log_type_t.default.getter(v13);
  sub_100A06EBC((uint64_t)v12, &_mh_execute_header, v14, "Migrating database to optimizeSubtreeQuery schema version", 57, 2, (uint64_t)_swiftEmptyArrayStorage);

  v15 = sub_10080DD28();
  if (v1)
    return;
  v16 = v15;
  v59 = v9;
  v60 = v11;
  v58 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v58, v68);
  v18 = inited;
  v57 = xmmword_100EF5A10;
  *(_OWORD *)(inited + 16) = xmmword_100EF5A10;
  *(_QWORD *)(inited + 32) = v16;
  v19 = inited + 32;
  *(_QWORD *)(inited + 56) = &type metadata for Int;
  *(_QWORD *)(inited + 64) = &protocol witness table for Int;
  *(_QWORD *)(inited + 96) = &type metadata for Int;
  *(_QWORD *)(inited + 104) = &protocol witness table for Int;
  *(_QWORD *)(inited + 72) = 4;
  if (v16 != 3)
  {
    sub_100757E04(&_mh_execute_header, (uint64_t)"_migrateToOptimizedSubtreeQuerySchema()", 39, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2, 390, "Current schema version %{public}d before migration to %{public}d is unexpected", 78, 2u, inited);
    sub_100518FC0(v18, (uint64_t)"Current schema version %{public}d before migration to %{public}d is unexpected");
    sub_100519194(v18, (uint64_t)"_migrateToOptimizedSubtreeQuerySchema()", 39, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2u, 390, (uint64_t)"Current schema version %{public}d before migration to %{public}d is unexpected", 78, 2u);
    goto LABEL_27;
  }
  swift_setDeallocating(inited);
  v20 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(v19, 2, v20);
  v65 = 0;
  v66 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease(v66);
  v21 = *(_QWORD *)&v2[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database];
  v22 = type metadata accessor for SQLTransaction();
  v23 = swift_initStackObject(v22, &v63);
  *(_QWORD *)(v23 + 16) = v21;
  *(_BYTE *)(v23 + 24) = 0;
  swift_retain(v21);
  sub_1006B6CB8();
  v56 = v20;
  v24 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v24, &v67);
  swift_retain(v21);
  v26 = sub_1006B77CC(v25, 0xD000000000000061, 0x8000000100FF4400);
  v27 = swift_release(v21);
  v28 = *(void **)(*(_QWORD *)(v26 + 16) + 32);
  *v7 = v28;
  v29 = v62;
  ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v62)(v7, v59, v3, v27);
  v30 = v28;
  LOBYTE(v28) = _dispatchPreconditionTest(_:)(v7);
  v60(v7, v3);
  if ((v28 & 1) == 0)
  {
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v55 = (sqlite3_stmt **)(v26 + 24);
  swift_beginAccess(v26 + 24, &v65, 1, 0);
  v31 = sqlite3_step(*(sqlite3_stmt **)(v26 + 24));
  if (v31 == 101)
  {
    v54 = v26;
    v32 = v61;
    *v7 = v61;
    v29(v7, v59, v3);
    v33 = v32;
    v34 = v2;
    LOBYTE(v32) = _dispatchPreconditionTest(_:)(v7);
    v60(v7, v3);

    if ((v32 & 1) != 0)
    {
      sub_10080E56C(4);
      v43 = *(void **)(*(_QWORD *)(v54 + 16) + 32);
      *v7 = v43;
      v29(v7, v59, v3);
      v44 = v43;
      LOBYTE(v43) = _dispatchPreconditionTest(_:)(v7);
      v60(v7, v3);
      if ((v43 & 1) != 0)
      {
        v45 = v55;
        v46 = v56;
        if (*v55)
        {
          sqlite3_finalize(*v55);
          *v45 = 0;
        }
        swift_release(v54);
        sub_1006B70D4();
        v47 = sub_10080DD28();
        v48 = swift_initStackObject(v58, &v64);
        v18 = v48;
        *(_OWORD *)(v48 + 16) = v57;
        *(_QWORD *)(v48 + 32) = v47;
        v49 = v48 + 32;
        *(_QWORD *)(v48 + 56) = &type metadata for Int;
        *(_QWORD *)(v48 + 96) = &type metadata for Int;
        *(_QWORD *)(v48 + 104) = &protocol witness table for Int;
        *(_QWORD *)(v48 + 64) = &protocol witness table for Int;
        *(_QWORD *)(v48 + 72) = 4;
        if (v47 != 4)
        {
          while (1)
          {
            sub_100757E04(&_mh_execute_header, (uint64_t)"_migrateToOptimizedSubtreeQuerySchema()", 39, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2, 418, "Queried schema version %{public}d after migration to %{public}d is unexpected", 77, 2u, v18);
            sub_100518FC0(v18, (uint64_t)"Queried schema version %{public}d after migration to %{public}d is unexpected");
            sub_100519194(v18, (uint64_t)"_migrateToOptimizedSubtreeQuerySchema()", 39, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2u, 418, (uint64_t)"Queried schema version %{public}d after migration to %{public}d is unexpected", 77, 2u);
LABEL_27:
            SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v50, *(Swift::String *)&v51);
            _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Freeform/CRLAssert.swift", 24, 2, 348, 0);
            __break(1u);
          }
        }
        swift_setDeallocating(v48);
        swift_arrayDestroy(v49, 2, v46);
        swift_setDeallocating(v23);
        v42 = *(_QWORD *)(v23 + 16);
        goto LABEL_13;
      }
LABEL_25:
      __break(1u);
    }
    goto LABEL_23;
  }
  v35 = v31;
  v36 = sub_1006B79EC();
  swift_allocError(&type metadata for SQLiteError, v36, 0, 0);
  *(_DWORD *)v37 = v35;
  *(_QWORD *)(v37 + 8) = 0xD00000000000003DLL;
  *(_QWORD *)(v37 + 16) = 0x8000000100FF4470;
  swift_willThrow(v38);
  v39 = *(void **)(*(_QWORD *)(v26 + 16) + 32);
  *v7 = v39;
  v29(v7, v59, v3);
  v40 = v39;
  LOBYTE(v39) = _dispatchPreconditionTest(_:)(v7);
  v60(v7, v3);
  if ((v39 & 1) == 0)
  {
LABEL_24:
    __break(1u);
    __break(1u);
    goto LABEL_25;
  }
  if (*v55)
  {
    sqlite3_finalize(*v55);
    *(_QWORD *)(v26 + 24) = 0;
  }
  swift_release(v26);
  sub_1006B7380();
  swift_willThrow(v41);
  swift_setDeallocating(v23);
  v42 = *(_QWORD *)(v23 + 16);
LABEL_13:
  swift_release(v42);
}

void sub_100A6F5D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  void (*v10)(_QWORD *, uint64_t, uint64_t, __n128);
  id v11;
  void (*v12)(_QWORD *, uint64_t);
  id v13;
  __n128 v14;
  uint64_t v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  void *object;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  void *v31;
  id v32;
  sqlite3_stmt **v33;
  int v34;
  void *v35;
  id v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  __n128 v40;
  void *v41;
  id v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _BYTE v47[32];
  _BYTE v48[24];

  v2 = v0;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (uint64_t *)((char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v7 = v8;
  v9 = enum case for DispatchPredicate.onQueue(_:);
  v10 = *(void (**)(_QWORD *, uint64_t, uint64_t, __n128))(v4 + 104);
  v10(v7, enum case for DispatchPredicate.onQueue(_:), v3, v5);
  v11 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  v12 = *(void (**)(_QWORD *, uint64_t))(v4 + 8);
  v12(v7, v3);
  if ((v8 & 1) != 0)
  {
    if (qword_1013DD858 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1013DD858, sub_100A05554);
LABEL_3:
  swift_beginAccess(&static OS_os_log.boardStore, v48, 0, 0);
  v13 = (id)static OS_os_log.boardStore;
  v15 = static os_log_type_t.default.getter(v14);
  sub_100A06EBC((uint64_t)v13, &_mh_execute_header, v15, "Adding MinRequiredVersionForGoodEnoughFidelity to the boards table", 66, 2, (uint64_t)_swiftEmptyArrayStorage);

  v45 = 0;
  v46 = 0xE000000000000000;
  _StringGuts.grow(_:)(57);
  v16._countAndFlagsBits = 0x4154205245544C41;
  v16._object = (void *)0xEC00000020454C42;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0x736472616F62;
  v17._object = (void *)0xE600000000000000;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 0x4C4F43204444410ALL;
  v18._object = (void *)0xEC000000204E4D55;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 0xD00000000000002DLL;
  v19._object = (void *)0x8000000100FEEFF0;
  String.append(_:)(v19);
  v20._object = (void *)0x8000000100FF4030;
  v20._countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v20);
  v44 = 0x2000400000000;
  v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  object = v21._object;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(object);
  v23._countAndFlagsBits = 59;
  v23._object = (void *)0xE100000000000000;
  String.append(_:)(v23);
  v24 = v45;
  v25 = v46;
  v26 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v27 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v27, v47);
  swift_retain(v26);
  v29 = sub_1006B77CC(v28, v24, v25);
  v30 = swift_release(v26);
  if (v1)
    return;
  v31 = *(void **)(*(_QWORD *)(v29 + 16) + 32);
  *v7 = v31;
  v10(v7, v9, v3, v30);
  v32 = v31;
  LOBYTE(v31) = _dispatchPreconditionTest(_:)(v7);
  v12(v7, v3);
  if ((v31 & 1) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  v33 = (sqlite3_stmt **)(v29 + 24);
  swift_beginAccess(v29 + 24, &v45, 1, 0);
  v34 = sqlite3_step(*(sqlite3_stmt **)(v29 + 24));
  if (v34 != 101)
  {
LABEL_8:
    v37 = v34;
    v38 = sub_1006B79EC();
    swift_allocError(&type metadata for SQLiteError, v38, 0, 0);
    *(_DWORD *)v39 = v37;
    *(_QWORD *)(v39 + 8) = 0xD000000000000020;
    *(_QWORD *)(v39 + 16) = 0x8000000100FF4260;
    swift_willThrow(v40);
    v41 = *(void **)(*(_QWORD *)(v29 + 16) + 32);
    *v7 = v41;
    ((void (*)(_QWORD *, uint64_t, uint64_t))v10)(v7, v9, v3);
    v42 = v41;
    v43 = _dispatchPreconditionTest(_:)(v7);
    v12(v7, v3);
    if ((v43 & 1) != 0)
      goto LABEL_9;
LABEL_16:
    __break(1u);
  }
  v35 = *(void **)(*(_QWORD *)(v29 + 16) + 32);
  *v7 = v35;
  ((void (*)(_QWORD *, uint64_t, uint64_t))v10)(v7, v9, v3);
  v36 = v35;
  v9 = _dispatchPreconditionTest(_:)(v7);
  v34 = ((uint64_t (*)(_QWORD *, uint64_t))v12)(v7, v3);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
LABEL_9:
  if (*v33)
  {
    sqlite3_finalize(*v33);
    *v33 = 0;
  }
  swift_release(v29);
}

void sub_100A6F9F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  void (*v10)(_QWORD *, uint64_t, uint64_t, __n128);
  id v11;
  void (*v12)(_QWORD *, uint64_t);
  id v13;
  __n128 v14;
  uint64_t v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  void *object;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  void *v31;
  id v32;
  sqlite3_stmt **v33;
  int v34;
  void *v35;
  id v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  __n128 v40;
  void *v41;
  id v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _BYTE v47[32];
  _BYTE v48[24];

  v2 = v0;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (uint64_t *)((char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v7 = v8;
  v9 = enum case for DispatchPredicate.onQueue(_:);
  v10 = *(void (**)(_QWORD *, uint64_t, uint64_t, __n128))(v4 + 104);
  v10(v7, enum case for DispatchPredicate.onQueue(_:), v3, v5);
  v11 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  v12 = *(void (**)(_QWORD *, uint64_t))(v4 + 8);
  v12(v7, v3);
  if ((v8 & 1) != 0)
  {
    if (qword_1013DD858 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1013DD858, sub_100A05554);
LABEL_3:
  swift_beginAccess(&static OS_os_log.boardStore, v48, 0, 0);
  v13 = (id)static OS_os_log.boardStore;
  v15 = static os_log_type_t.default.getter(v14);
  sub_100A06EBC((uint64_t)v13, &_mh_execute_header, v15, "Adding MinRequiredVersionForGoodEnoughFidelity to the board items table", 71, 2, (uint64_t)_swiftEmptyArrayStorage);

  v45 = 0;
  v46 = 0xE000000000000000;
  _StringGuts.grow(_:)(57);
  v16._countAndFlagsBits = 0x4154205245544C41;
  v16._object = (void *)0xEC00000020454C42;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0x74695F6472616F62;
  v17._object = (void *)0xEB00000000736D65;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 0x4C4F43204444410ALL;
  v18._object = (void *)0xEC000000204E4D55;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 0xD00000000000002DLL;
  v19._object = (void *)0x8000000100FEEFF0;
  String.append(_:)(v19);
  v20._object = (void *)0x8000000100FF4030;
  v20._countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v20);
  v44 = 0x2000400000000;
  v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  object = v21._object;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(object);
  v23._countAndFlagsBits = 59;
  v23._object = (void *)0xE100000000000000;
  String.append(_:)(v23);
  v24 = v45;
  v25 = v46;
  v26 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v27 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v27, v47);
  swift_retain(v26);
  v29 = sub_1006B77CC(v28, v24, v25);
  v30 = swift_release(v26);
  if (v1)
    return;
  v31 = *(void **)(*(_QWORD *)(v29 + 16) + 32);
  *v7 = v31;
  v10(v7, v9, v3, v30);
  v32 = v31;
  LOBYTE(v31) = _dispatchPreconditionTest(_:)(v7);
  v12(v7, v3);
  if ((v31 & 1) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  v33 = (sqlite3_stmt **)(v29 + 24);
  swift_beginAccess(v29 + 24, &v45, 1, 0);
  v34 = sqlite3_step(*(sqlite3_stmt **)(v29 + 24));
  if (v34 != 101)
  {
LABEL_8:
    v37 = v34;
    v38 = sub_1006B79EC();
    swift_allocError(&type metadata for SQLiteError, v38, 0, 0);
    *(_DWORD *)v39 = v37;
    *(_QWORD *)(v39 + 8) = 0xD000000000000025;
    *(_QWORD *)(v39 + 16) = 0x8000000100FF41E0;
    swift_willThrow(v40);
    v41 = *(void **)(*(_QWORD *)(v29 + 16) + 32);
    *v7 = v41;
    ((void (*)(_QWORD *, uint64_t, uint64_t))v10)(v7, v9, v3);
    v42 = v41;
    v43 = _dispatchPreconditionTest(_:)(v7);
    v12(v7, v3);
    if ((v43 & 1) != 0)
      goto LABEL_9;
LABEL_16:
    __break(1u);
  }
  v35 = *(void **)(*(_QWORD *)(v29 + 16) + 32);
  *v7 = v35;
  ((void (*)(_QWORD *, uint64_t, uint64_t))v10)(v7, v9, v3);
  v36 = v35;
  v9 = _dispatchPreconditionTest(_:)(v7);
  v34 = ((uint64_t (*)(_QWORD *, uint64_t))v12)(v7, v3);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
LABEL_9:
  if (*v33)
  {
    sqlite3_finalize(*v33);
    *v33 = 0;
  }
  swift_release(v29);
}

void sub_100A6FE24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  void (*v10)(_QWORD *, uint64_t, uint64_t, __n128);
  id v11;
  void (*v12)(_QWORD *, uint64_t);
  id v13;
  __n128 v14;
  uint64_t v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  void *object;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  void *v31;
  id v32;
  sqlite3_stmt **v33;
  int v34;
  void *v35;
  id v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  __n128 v40;
  void *v41;
  id v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _BYTE v47[32];
  _BYTE v48[24];

  v2 = v0;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (uint64_t *)((char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v7 = v8;
  v9 = enum case for DispatchPredicate.onQueue(_:);
  v10 = *(void (**)(_QWORD *, uint64_t, uint64_t, __n128))(v4 + 104);
  v10(v7, enum case for DispatchPredicate.onQueue(_:), v3, v5);
  v11 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  v12 = *(void (**)(_QWORD *, uint64_t))(v4 + 8);
  v12(v7, v3);
  if ((v8 & 1) != 0)
  {
    if (qword_1013DD858 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1013DD858, sub_100A05554);
LABEL_3:
  swift_beginAccess(&static OS_os_log.boardStore, v48, 0, 0);
  v13 = (id)static OS_os_log.boardStore;
  v15 = static os_log_type_t.default.getter(v14);
  sub_100A06EBC((uint64_t)v13, &_mh_execute_header, v15, "Adding MinRequiredVersionForGoodEnoughFidelityForBucket to the freehand drawing buckets table", 93, 2, (uint64_t)_swiftEmptyArrayStorage);

  v45 = 0;
  v46 = 0xE000000000000000;
  _StringGuts.grow(_:)(57);
  v16._countAndFlagsBits = 0x4154205245544C41;
  v16._object = (void *)0xEC00000020454C42;
  String.append(_:)(v16);
  v17._object = (void *)0x8000000100FEF1F0;
  v17._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 0x4C4F43204444410ALL;
  v18._object = (void *)0xEC000000204E4D55;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 0xD000000000000038;
  v19._object = (void *)0x8000000100FEF2D0;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 0xD00000000000001ALL;
  v20._object = (void *)0x8000000100FF4030;
  String.append(_:)(v20);
  v44 = 0x2000400000000;
  v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  object = v21._object;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(object);
  v23._countAndFlagsBits = 59;
  v23._object = (void *)0xE100000000000000;
  String.append(_:)(v23);
  v24 = v45;
  v25 = v46;
  v26 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v27 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v27, v47);
  swift_retain(v26);
  v29 = sub_1006B77CC(v28, v24, v25);
  v30 = swift_release(v26);
  if (v1)
    return;
  v31 = *(void **)(*(_QWORD *)(v29 + 16) + 32);
  *v7 = v31;
  v10(v7, v9, v3, v30);
  v32 = v31;
  LOBYTE(v31) = _dispatchPreconditionTest(_:)(v7);
  v12(v7, v3);
  if ((v31 & 1) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  v33 = (sqlite3_stmt **)(v29 + 24);
  swift_beginAccess(v29 + 24, &v45, 1, 0);
  v34 = sqlite3_step(*(sqlite3_stmt **)(v29 + 24));
  if (v34 != 101)
  {
LABEL_8:
    v37 = v34;
    v38 = sub_1006B79EC();
    swift_allocError(&type metadata for SQLiteError, v38, 0, 0);
    *(_DWORD *)v39 = v37;
    *(_QWORD *)(v39 + 8) = 0xD000000000000065;
    *(_QWORD *)(v39 + 16) = 0x8000000100FF4120;
    swift_willThrow(v40);
    v41 = *(void **)(*(_QWORD *)(v29 + 16) + 32);
    *v7 = v41;
    ((void (*)(_QWORD *, uint64_t, uint64_t))v10)(v7, v9, v3);
    v42 = v41;
    v43 = _dispatchPreconditionTest(_:)(v7);
    v12(v7, v3);
    if ((v43 & 1) != 0)
      goto LABEL_9;
LABEL_16:
    __break(1u);
  }
  v35 = *(void **)(*(_QWORD *)(v29 + 16) + 32);
  *v7 = v35;
  ((void (*)(_QWORD *, uint64_t, uint64_t))v10)(v7, v9, v3);
  v36 = v35;
  v9 = _dispatchPreconditionTest(_:)(v7);
  v34 = ((uint64_t (*)(_QWORD *, uint64_t))v12)(v7, v3);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
LABEL_9:
  if (*v33)
  {
    sqlite3_finalize(*v33);
    *v33 = 0;
  }
  swift_release(v29);
}

void sub_100A7024C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  void (*v10)(_QWORD *, uint64_t, uint64_t, __n128);
  id v11;
  void (*v12)(_QWORD *, uint64_t);
  id v13;
  __n128 v14;
  uint64_t v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  void *object;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  void *v31;
  id v32;
  sqlite3_stmt **v33;
  int v34;
  void *v35;
  id v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  __n128 v40;
  void *v41;
  id v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _BYTE v47[32];
  _BYTE v48[24];

  v2 = v0;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (uint64_t *)((char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v7 = v8;
  v9 = enum case for DispatchPredicate.onQueue(_:);
  v10 = *(void (**)(_QWORD *, uint64_t, uint64_t, __n128))(v4 + 104);
  v10(v7, enum case for DispatchPredicate.onQueue(_:), v3, v5);
  v11 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  v12 = *(void (**)(_QWORD *, uint64_t))(v4 + 8);
  v12(v7, v3);
  if ((v8 & 1) != 0)
  {
    if (qword_1013DD858 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1013DD858, sub_100A05554);
LABEL_3:
  swift_beginAccess(&static OS_os_log.boardStore, v48, 0, 0);
  v13 = (id)static OS_os_log.boardStore;
  v15 = static os_log_type_t.default.getter(v14);
  sub_100A06EBC((uint64_t)v13, &_mh_execute_header, v15, "Adding MinRequiredVersionForGoodEnoughFidelityForItems to the freehand drawing buckets table", 92, 2, (uint64_t)_swiftEmptyArrayStorage);

  v45 = 0;
  v46 = 0xE000000000000000;
  _StringGuts.grow(_:)(57);
  v16._countAndFlagsBits = 0x4154205245544C41;
  v16._object = (void *)0xEC00000020454C42;
  String.append(_:)(v16);
  v17._object = (void *)0x8000000100FEF1F0;
  v17._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 0x4C4F43204444410ALL;
  v18._object = (void *)0xEC000000204E4D55;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 0xD000000000000037;
  v19._object = (void *)0x8000000100FEF310;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 0xD00000000000001ALL;
  v20._object = (void *)0x8000000100FF4030;
  String.append(_:)(v20);
  v44 = 0x2000400000000;
  v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  object = v21._object;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(object);
  v23._countAndFlagsBits = 59;
  v23._object = (void *)0xE100000000000000;
  String.append(_:)(v23);
  v24 = v45;
  v25 = v46;
  v26 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v27 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v27, v47);
  swift_retain(v26);
  v29 = sub_1006B77CC(v28, v24, v25);
  v30 = swift_release(v26);
  if (v1)
    return;
  v31 = *(void **)(*(_QWORD *)(v29 + 16) + 32);
  *v7 = v31;
  v10(v7, v9, v3, v30);
  v32 = v31;
  LOBYTE(v31) = _dispatchPreconditionTest(_:)(v7);
  v12(v7, v3);
  if ((v31 & 1) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  v33 = (sqlite3_stmt **)(v29 + 24);
  swift_beginAccess(v29 + 24, &v45, 1, 0);
  v34 = sqlite3_step(*(sqlite3_stmt **)(v29 + 24));
  if (v34 != 101)
  {
LABEL_8:
    v37 = v34;
    v38 = sub_1006B79EC();
    swift_allocError(&type metadata for SQLiteError, v38, 0, 0);
    *(_DWORD *)v39 = v37;
    *(_QWORD *)(v39 + 8) = 0xD000000000000064;
    *(_QWORD *)(v39 + 16) = 0x8000000100FF4050;
    swift_willThrow(v40);
    v41 = *(void **)(*(_QWORD *)(v29 + 16) + 32);
    *v7 = v41;
    ((void (*)(_QWORD *, uint64_t, uint64_t))v10)(v7, v9, v3);
    v42 = v41;
    v43 = _dispatchPreconditionTest(_:)(v7);
    v12(v7, v3);
    if ((v43 & 1) != 0)
      goto LABEL_9;
LABEL_16:
    __break(1u);
  }
  v35 = *(void **)(*(_QWORD *)(v29 + 16) + 32);
  *v7 = v35;
  ((void (*)(_QWORD *, uint64_t, uint64_t))v10)(v7, v9, v3);
  v36 = v35;
  v9 = _dispatchPreconditionTest(_:)(v7);
  v34 = ((uint64_t (*)(_QWORD *, uint64_t))v12)(v7, v3);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
LABEL_9:
  if (*v33)
  {
    sqlite3_finalize(*v33);
    *v33 = 0;
  }
  swift_release(v29);
}

void sub_100A70674()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  unsigned int v8;
  void (*v9)(_QWORD *, uint64_t, uint64_t);
  id v10;
  void (*v11)(_QWORD *, uint64_t);
  id v12;
  __n128 v13;
  uint64_t v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  Swift::String v42;
  Swift::String v43;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;
  Swift::String v48;
  Swift::String v49;
  Swift::String v50;
  Swift::String v51;
  Swift::String v52;
  Swift::String v53;
  Swift::String v54;
  Swift::String v55;
  Swift::String v56;
  Swift::String v57;
  Swift::String v58;
  Swift::String v59;
  Swift::String v60;
  Swift::String v61;
  Swift::String v62;
  Swift::String v63;
  Swift::String v64;
  Swift::String v65;
  Swift::String v66;
  Swift::String v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __n128 v75;
  void *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(_QWORD *, uint64_t, uint64_t);
  id v81;
  uint64_t (*v82)(unint64_t, uint64_t);
  unint64_t v83;
  sqlite3_stmt **v84;
  int v85;
  void *v86;
  id v87;
  int v88;
  unint64_t v89;
  uint64_t v90;
  __n128 v91;
  void *v92;
  _QWORD *v93;
  id v94;
  uint64_t v95;
  unsigned int v96;
  void (*v97)(_QWORD *, uint64_t, uint64_t);
  void (*v98)(_QWORD *, uint64_t);
  uint64_t v99;
  _QWORD *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char v106[32];
  char v107[24];

  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (uint64_t *)((char *)&v95 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v6 = v7;
  v8 = enum case for DispatchPredicate.onQueue(_:);
  v9 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v3 + 104);
  ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v9)(v6, enum case for DispatchPredicate.onQueue(_:), v2, v4);
  v10 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  v11 = *(void (**)(_QWORD *, uint64_t))(v3 + 8);
  v100 = v6;
  v11(v6, v2);
  if ((v7 & 1) != 0)
  {
    v102 = v0;
    v103 = v1;
    v96 = v8;
    v97 = v9;
    v98 = v11;
    v99 = v2;
    if (qword_1013DD858 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1013DD858, sub_100A05554);
LABEL_3:
  swift_beginAccess(&static OS_os_log.boardStore, v107, 0, 0);
  v12 = (id)static OS_os_log.boardStore;
  v14 = static os_log_type_t.info.getter(v13);
  sub_100A06EBC((uint64_t)v12, &_mh_execute_header, v14, "Creating schema for the boards table", 36, 2, (uint64_t)_swiftEmptyArrayStorage);

  v104 = 0;
  v105 = 0xE000000000000000;
  _StringGuts.grow(_:)(479);
  v15._countAndFlagsBits = 0x5420455441455243;
  v15._object = (void *)0xED000020454C4241;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0x736472616F62;
  v16._object = (void *)0xE600000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 10272;
  v17._object = (void *)0xE200000000000000;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 0xD000000000000010;
  v18._object = (void *)0x8000000100FD6350;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 0xD00000000000001CLL;
  v19._object = (void *)0x8000000100FD6A30;
  String.append(_:)(v19);
  v20._object = (void *)0xEA0000000000656DLL;
  v20._countAndFlagsBits = 0x616E5F72656E776FLL;
  String.append(_:)(v20);
  v21._object = (void *)0x8000000100FF3760;
  v21._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v21);
  v22._countAndFlagsBits = 0x656E6961746E6F63;
  v22._object = (void *)0xEE00646975755F72;
  String.append(_:)(v22);
  v23._countAndFlagsBits = 0xD000000000000010;
  v23._object = (void *)0x8000000100FF36B0;
  String.append(_:)(v23);
  v24._object = (void *)0x8000000100FEEC30;
  v101 = (void *)0x8000000100FEEC30;
  v24._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v24);
  v25._countAndFlagsBits = 0xD000000000000010;
  v25._object = (void *)0x8000000100FF36B0;
  String.append(_:)(v25);
  v26._countAndFlagsBits = 1635017060;
  v26._object = (void *)0xE400000000000000;
  String.append(_:)(v26);
  v27._countAndFlagsBits = 0x202C424F4C4220;
  v27._object = (void *)0xE700000000000000;
  String.append(_:)(v27);
  v28._countAndFlagsBits = 0xD000000000000012;
  v28._object = (void *)0x8000000100FEF060;
  String.append(_:)(v28);
  v29._countAndFlagsBits = 0x202C4C41455220;
  v29._object = (void *)0xE700000000000000;
  String.append(_:)(v29);
  v30._countAndFlagsBits = 0x6E6F7473626D6F74;
  v30._object = (void *)0xEA00000000006465;
  String.append(_:)(v30);
  v31._countAndFlagsBits = 0xD000000000000013;
  v31._object = (void *)0x8000000100FF3780;
  String.append(_:)(v31);
  v32._object = (void *)0x8000000100FEEB40;
  v32._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v32);
  v33._countAndFlagsBits = 0xD00000000000001DLL;
  v33._object = (void *)0x8000000100FF3A70;
  String.append(_:)(v33);
  v34._object = (void *)0x8000000100FEF020;
  v34._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v34);
  v35._object = (void *)0x8000000100FF3E30;
  v35._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v35);
  v36._object = (void *)0xE900000000000061;
  v36._countAndFlagsBits = 0x7461645F636E7973;
  String.append(_:)(v36);
  v37._countAndFlagsBits = 0x202C424F4C4220;
  v37._object = (void *)0xE700000000000000;
  String.append(_:)(v37);
  v38._countAndFlagsBits = 0x6E6F7473626D6F74;
  v38._object = (void *)0xEE00657461645F65;
  String.append(_:)(v38);
  v39._countAndFlagsBits = 0x202C4C41455220;
  v39._object = (void *)0xE700000000000000;
  String.append(_:)(v39);
  v40._countAndFlagsBits = 0xD00000000000001ALL;
  v40._object = (void *)0x8000000100FEF040;
  String.append(_:)(v40);
  v41._countAndFlagsBits = 0xD000000000000013;
  v41._object = (void *)0x8000000100FF3780;
  String.append(_:)(v41);
  v42._countAndFlagsBits = 0x5F65726168736B63;
  v42._object = (void *)0xEC00000061746164;
  String.append(_:)(v42);
  v43._countAndFlagsBits = 0x202C424F4C4220;
  v43._object = (void *)0xE700000000000000;
  String.append(_:)(v43);
  v44._object = (void *)0x8000000100FEEDE0;
  v44._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v44);
  v45._countAndFlagsBits = 0xD00000000000001DLL;
  v45._object = (void *)0x8000000100FF3A70;
  String.append(_:)(v45);
  v46._countAndFlagsBits = 0x61637369645F7369;
  v46._object = (void *)0xEE00656C62616472;
  String.append(_:)(v46);
  v47._countAndFlagsBits = 0xD000000000000020;
  v47._object = (void *)0x8000000100FF3E50;
  String.append(_:)(v47);
  v48._countAndFlagsBits = 0x656E6961746E6F63;
  v48._object = (void *)0xEE00646975755F72;
  String.append(_:)(v48);
  v49._countAndFlagsBits = 8236;
  v49._object = (void *)0xE200000000000000;
  String.append(_:)(v49);
  v50._countAndFlagsBits = 0xD000000000000010;
  v50._object = (void *)0x8000000100FD6350;
  String.append(_:)(v50);
  v51._countAndFlagsBits = 0x4552454645522029;
  v51._object = (void *)0xED0000205345434ELL;
  String.append(_:)(v51);
  v52._countAndFlagsBits = 0x74695F6472616F62;
  v52._object = (void *)0xEB00000000736D65;
  String.append(_:)(v52);
  v53._countAndFlagsBits = 10272;
  v53._object = (void *)0xE200000000000000;
  String.append(_:)(v53);
  v54._countAndFlagsBits = 0x6975755F6D657469;
  v54._object = (void *)0xE900000000000064;
  String.append(_:)(v54);
  v55._countAndFlagsBits = 8236;
  v55._object = (void *)0xE200000000000000;
  String.append(_:)(v55);
  v56._countAndFlagsBits = 0xD000000000000010;
  v56._object = (void *)0x8000000100FD6350;
  String.append(_:)(v56);
  v57._countAndFlagsBits = 0xD000000000000040;
  v57._object = (void *)0x8000000100FF3E80;
  String.append(_:)(v57);
  v58._countAndFlagsBits = 0xD000000000000018;
  v58._object = v101;
  String.append(_:)(v58);
  v59._countAndFlagsBits = 8236;
  v59._object = (void *)0xE200000000000000;
  String.append(_:)(v59);
  v60._countAndFlagsBits = 0xD000000000000010;
  v60._object = (void *)0x8000000100FD6350;
  String.append(_:)(v60);
  v61._countAndFlagsBits = 0x4552454645522029;
  v61._object = (void *)0xED0000205345434ELL;
  String.append(_:)(v61);
  v62._countAndFlagsBits = 0x74695F6472616F62;
  v62._object = (void *)0xEB00000000736D65;
  String.append(_:)(v62);
  v63._countAndFlagsBits = 10272;
  v63._object = (void *)0xE200000000000000;
  String.append(_:)(v63);
  v64._countAndFlagsBits = 0x6975755F6D657469;
  v64._object = (void *)0xE900000000000064;
  String.append(_:)(v64);
  v65._countAndFlagsBits = 8236;
  v65._object = (void *)0xE200000000000000;
  String.append(_:)(v65);
  v66._countAndFlagsBits = 0xD000000000000010;
  v66._object = (void *)0x8000000100FD6350;
  String.append(_:)(v66);
  v67._countAndFlagsBits = 0xD000000000000033;
  v67._object = (void *)0x8000000100FF3ED0;
  String.append(_:)(v67);
  v68 = v104;
  v69 = v105;
  v70 = *(_QWORD *)(v102 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v71 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v71, v106);
  swift_retain(v70);
  v72 = v103;
  v74 = sub_1006B77CC(v73, v68, v69);
  v75 = swift_release(v70);
  if (v72)
    return;
  v76 = *(void **)(*(_QWORD *)(v74 + 16) + 32);
  v78 = v99;
  v77 = v100;
  *v100 = v76;
  v79 = v96;
  v80 = v97;
  ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v97)(v77, v96, v78, v75);
  v81 = v76;
  LOBYTE(v76) = _dispatchPreconditionTest(_:)(v77);
  v82 = v98;
  v98(v77, v78);
  if ((v76 & 1) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  v83 = 0xD000000000000010;
  v84 = (sqlite3_stmt **)(v74 + 24);
  swift_beginAccess(v74 + 24, &v104, 1, 0);
  v85 = sqlite3_step(*(sqlite3_stmt **)(v74 + 24));
  if (v85 != 101)
  {
LABEL_8:
    v88 = v85;
    v89 = sub_1006B79EC();
    swift_allocError(&type metadata for SQLiteError, v89, 0, 0);
    *(_DWORD *)v90 = v88;
    *(_QWORD *)(v90 + 8) = v83 + 17;
    *(_QWORD *)(v90 + 16) = 0x8000000100FF3F10;
    swift_willThrow(v91);
    v92 = *(void **)(*(_QWORD *)(v74 + 16) + 32);
    v93 = v100;
    *v100 = v92;
    v80(v93, v79, v78);
    v94 = v92;
    LOBYTE(v92) = _dispatchPreconditionTest(_:)(v93);
    v82(v93, v78);
    if ((v92 & 1) != 0)
      goto LABEL_9;
LABEL_16:
    __break(1u);
  }
  v86 = *(void **)(*(_QWORD *)(v74 + 16) + 32);
  v83 = (unint64_t)v100;
  *v100 = v86;
  v80((_QWORD *)v83, v79, v78);
  v87 = v86;
  LOBYTE(v86) = _dispatchPreconditionTest(_:)(v83);
  v85 = ((uint64_t (*)(unint64_t, uint64_t))v82)(v83, v78);
  if ((v86 & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
LABEL_9:
  if (*v84)
  {
    sqlite3_finalize(*v84);
    *v84 = 0;
  }
  swift_release(v74);
}

void sub_100A70F0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  void (*v9)(_QWORD *, __n128);
  id v10;
  void (*v11)(_QWORD *, uint64_t);
  uint64_t v12;
  id v13;
  __n128 v14;
  uint64_t v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  void *v46;
  void (*v47)(_QWORD *, _QWORD, uint64_t);
  id v48;
  void (*v49)(_QWORD *, uint64_t);
  sqlite3_stmt **v50;
  int v51;
  void *v52;
  id v53;
  int v54;
  unint64_t v55;
  uint64_t v56;
  __n128 v57;
  void *v58;
  id v59;
  void (*v60)(_QWORD *, _QWORD, uint64_t);
  void (*v61)(_QWORD *, uint64_t);
  unsigned int v62;
  uint64_t v63;
  unint64_t v64;
  _BYTE v65[32];
  _BYTE v66[24];

  v2 = v0;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (void (**)(_QWORD *, _QWORD, uint64_t))((char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v7 = v8;
  v9 = *(void (**)(_QWORD *, __n128))(v4 + 104);
  v62 = enum case for DispatchPredicate.onQueue(_:);
  v9(v7, v5);
  v10 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  v11 = *(void (**)(_QWORD *, uint64_t))(v4 + 8);
  v11(v7, v3);
  if ((v8 & 1) != 0)
  {
    v60 = (void (*)(_QWORD *, _QWORD, uint64_t))v9;
    v61 = v11;
    if (qword_1013DD858 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1013DD858, sub_100A05554);
LABEL_3:
  v12 = 0xD000000000000010;
  swift_beginAccess(&static OS_os_log.boardStore, v66, 0, 0);
  v13 = (id)static OS_os_log.boardStore;
  v15 = static os_log_type_t.info.getter(v14);
  sub_100A06EBC((uint64_t)v13, &_mh_execute_header, v15, "Creating schema for the boards metadata table", 45, 2, (uint64_t)_swiftEmptyArrayStorage);

  v63 = 0;
  v64 = 0xE000000000000000;
  _StringGuts.grow(_:)(236);
  v16._countAndFlagsBits = 0x5420455441455243;
  v16._object = (void *)0xED000020454C4241;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0x6D5F736472616F62;
  v17._object = (void *)0xEF61746164617465;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 10272;
  v18._object = (void *)0xE200000000000000;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 0xD000000000000010;
  v19._object = (void *)0x8000000100FD6350;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 0xD000000000000026;
  v20._object = (void *)0x8000000100FF3DA0;
  String.append(_:)(v20);
  v21._countAndFlagsBits = 0x736472616F62;
  v21._object = (void *)0xE600000000000000;
  String.append(_:)(v21);
  v22._countAndFlagsBits = 10272;
  v22._object = (void *)0xE200000000000000;
  String.append(_:)(v22);
  v23._countAndFlagsBits = 0xD000000000000010;
  v23._object = (void *)0x8000000100FD6350;
  String.append(_:)(v23);
  v24._countAndFlagsBits = 0xD000000000000015;
  v24._object = (void *)0x8000000100FF3460;
  String.append(_:)(v24);
  v25._countAndFlagsBits = 0x7461645F74647263;
  v25._object = (void *)0xE900000000000061;
  String.append(_:)(v25);
  v26._countAndFlagsBits = 0xD000000000000010;
  v26._object = (void *)0x8000000100FF36B0;
  String.append(_:)(v26);
  v27._countAndFlagsBits = 0x726F7661665F7369;
  v27._object = (void *)0xEB00000000657469;
  String.append(_:)(v27);
  v28._countAndFlagsBits = 0xD000000000000013;
  v28._object = (void *)0x8000000100FF3780;
  String.append(_:)(v28);
  v29._countAndFlagsBits = 0xD00000000000001BLL;
  v29._object = (void *)0x8000000100FEEB00;
  String.append(_:)(v29);
  v30._countAndFlagsBits = 0xD000000000000013;
  v30._object = (void *)0x8000000100FF3780;
  String.append(_:)(v30);
  v31._countAndFlagsBits = 0x6174735F77656976;
  v31._object = (void *)0xEF617461645F6574;
  String.append(_:)(v31);
  v32._countAndFlagsBits = 0xD000000000000010;
  v32._object = (void *)0x8000000100FF36B0;
  String.append(_:)(v32);
  v33._countAndFlagsBits = 0xD000000000000019;
  v33._object = (void *)0x8000000100FEEB20;
  String.append(_:)(v33);
  v34._countAndFlagsBits = 0xD000000000000020;
  v34._object = (void *)0x8000000100FD6A50;
  String.append(_:)(v34);
  v35._object = (void *)0x8000000100FEEB40;
  v35._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v35);
  v36._countAndFlagsBits = 0xD00000000000001DLL;
  v36._object = (void *)0x8000000100FF3A70;
  String.append(_:)(v36);
  v37._countAndFlagsBits = 0x7461645F636E7973;
  v37._object = (void *)0xE900000000000061;
  String.append(_:)(v37);
  v38._countAndFlagsBits = 0x2920424F4C4220;
  v38._object = (void *)0xE700000000000000;
  String.append(_:)(v38);
  v39 = v63;
  v40 = v64;
  v41 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v42 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v42, v65);
  swift_retain(v41);
  v44 = sub_1006B77CC(v43, v39, v40);
  v45 = swift_release(v41);
  if (v1)
    return;
  v46 = *(void **)(*(_QWORD *)(v44 + 16) + 32);
  *v7 = v46;
  v47 = v60;
  ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v60)(v7, v62, v3, v45);
  v48 = v46;
  LOBYTE(v46) = _dispatchPreconditionTest(_:)(v7);
  v49 = v61;
  v61(v7, v3);
  if ((v46 & 1) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  v50 = (sqlite3_stmt **)(v44 + 24);
  swift_beginAccess(v44 + 24, &v63, 1, 0);
  v51 = sqlite3_step(*(sqlite3_stmt **)(v44 + 24));
  if (v51 != 101)
  {
LABEL_8:
    v54 = v51;
    v55 = sub_1006B79EC();
    swift_allocError(&type metadata for SQLiteError, v55, 0, 0);
    *(_DWORD *)v56 = v54;
    *(_QWORD *)(v56 + 8) = v12 + 26;
    *(_QWORD *)(v56 + 16) = 0x8000000100FF3DD0;
    swift_willThrow(v57);
    v58 = *(void **)(*(_QWORD *)(v44 + 16) + 32);
    *v7 = v58;
    v47(v7, v62, v3);
    v59 = v58;
    LOBYTE(v58) = _dispatchPreconditionTest(_:)(v7);
    v49(v7, v3);
    if ((v58 & 1) != 0)
      goto LABEL_9;
LABEL_16:
    __break(1u);
  }
  v52 = *(void **)(*(_QWORD *)(v44 + 16) + 32);
  *v7 = v52;
  v47(v7, v62, v3);
  v53 = v52;
  v12 = _dispatchPreconditionTest(_:)(v7);
  v51 = ((uint64_t (*)(_QWORD *, uint64_t))v49)(v7, v3);
  if ((v12 & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
LABEL_9:
  if (*v50)
  {
    sqlite3_finalize(*v50);
    *v50 = 0;
  }
  swift_release(v44);
}

void sub_100A714B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  void (*v9)(_QWORD, __n128);
  id v10;
  void (*v11)(_QWORD *, uint64_t);
  id v12;
  __n128 v13;
  uint64_t v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  Swift::String v42;
  Swift::String v43;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;
  Swift::String v48;
  Swift::String v49;
  Swift::String v50;
  Swift::String v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __n128 v58;
  void *v59;
  id v60;
  uint64_t (*v61)(_QWORD *, uint64_t);
  sqlite3_stmt **v62;
  int v63;
  int v64;
  int v65;
  void *v66;
  id v67;
  int v68;
  unint64_t v69;
  uint64_t v70;
  __n128 v71;
  void *v72;
  id v73;
  int v74;
  unint64_t v75;
  uint64_t v76;
  __n128 v77;
  void *v78;
  id v79;
  int v80;
  Swift::String v81;
  Swift::String v82;
  Swift::String v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  __n128 v88;
  void *v89;
  id v90;
  uint64_t (*v91)(_QWORD *, uint64_t);
  unsigned int v92;
  void (*v93)(_QWORD *, _QWORD, uint64_t, __n128);
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  _BYTE v98[32];
  _BYTE v99[24];

  v2 = v0;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (uint64_t (**)(_QWORD *, uint64_t))((char *)&v91 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v7 = v8;
  v9 = *(void (**)(_QWORD, __n128))(v4 + 104);
  v92 = enum case for DispatchPredicate.onQueue(_:);
  v93 = (void (*)(_QWORD *, _QWORD, uint64_t, __n128))v9;
  v9(v7, v5);
  v10 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  v11 = *(void (**)(_QWORD *, uint64_t))(v4 + 8);
  v11(v7, v3);
  if ((v8 & 1) != 0)
  {
    v91 = (uint64_t (*)(_QWORD *, uint64_t))v11;
    if (qword_1013DD858 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1013DD858, sub_100A05554);
LABEL_3:
  swift_beginAccess(&static OS_os_log.boardStore, v99, 0, 0);
  v12 = (id)static OS_os_log.boardStore;
  v14 = static os_log_type_t.info.getter(v13);
  sub_100A06EBC((uint64_t)v12, &_mh_execute_header, v14, "Creating schema for the board items table", 41, 2, (uint64_t)_swiftEmptyArrayStorage);

  v96 = 0;
  v97 = 0xE000000000000000;
  _StringGuts.grow(_:)(328);
  v15._countAndFlagsBits = 0x5420455441455243;
  v15._object = (void *)0xED000020454C4241;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0x74695F6472616F62;
  v16._object = (void *)0xEB00000000736D65;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 10272;
  v17._object = (void *)0xE200000000000000;
  String.append(_:)(v17);
  v18._object = (void *)0xE900000000000064;
  v18._countAndFlagsBits = 0x6975755F6D657469;
  String.append(_:)(v18);
  v19._object = (void *)0x8000000100FF36B0;
  v19._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 0x755F746E65726170;
  v20._object = (void *)0xEB00000000646975;
  String.append(_:)(v20);
  v21._countAndFlagsBits = 0x202C424F4C4220;
  v21._object = (void *)0xE700000000000000;
  String.append(_:)(v21);
  v22._countAndFlagsBits = 0xD000000000000010;
  v22._object = (void *)0x8000000100FD6350;
  String.append(_:)(v22);
  v23._countAndFlagsBits = 0xD00000000000001ALL;
  v23._object = (void *)0x8000000100FF3440;
  String.append(_:)(v23);
  v24._countAndFlagsBits = 0x736472616F62;
  v24._object = (void *)0xE600000000000000;
  String.append(_:)(v24);
  v25._countAndFlagsBits = 10272;
  v25._object = (void *)0xE200000000000000;
  String.append(_:)(v25);
  v26._countAndFlagsBits = 0xD000000000000010;
  v26._object = (void *)0x8000000100FD6350;
  String.append(_:)(v26);
  v27._countAndFlagsBits = 0xD000000000000015;
  v27._object = (void *)0x8000000100FF3460;
  String.append(_:)(v27);
  v28._object = (void *)0xE900000000000065;
  v28._countAndFlagsBits = 0x7079745F6D657469;
  String.append(_:)(v28);
  v29._countAndFlagsBits = 0xD000000000000013;
  v29._object = (void *)0x8000000100FF3780;
  String.append(_:)(v29);
  v30._countAndFlagsBits = 0x645F6E6F6D6D6F63;
  v30._object = (void *)0xEB00000000617461;
  String.append(_:)(v30);
  v31._countAndFlagsBits = 0x202C424F4C4220;
  v31._object = (void *)0xE700000000000000;
  String.append(_:)(v31);
  v32._countAndFlagsBits = 0x6369666963657073;
  v32._object = (void *)0xED0000617461645FLL;
  String.append(_:)(v32);
  v33._countAndFlagsBits = 0x202C424F4C4220;
  v33._object = (void *)0xE700000000000000;
  String.append(_:)(v33);
  v34._countAndFlagsBits = 0x6E6F7473626D6F74;
  v34._object = (void *)0xEA00000000006465;
  String.append(_:)(v34);
  v35._countAndFlagsBits = 0xD000000000000013;
  v35._object = (void *)0x8000000100FF3780;
  String.append(_:)(v35);
  v36._object = (void *)0x8000000100FEEB40;
  v36._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v36);
  v37._countAndFlagsBits = 0xD00000000000001DLL;
  v37._object = (void *)0x8000000100FF3A70;
  String.append(_:)(v37);
  v38._countAndFlagsBits = 0x7461645F636E7973;
  v38._object = (void *)0xE900000000000061;
  String.append(_:)(v38);
  v39._countAndFlagsBits = 0x202C424F4C4220;
  v39._object = (void *)0xE700000000000000;
  String.append(_:)(v39);
  v40._object = (void *)0x8000000100FEEDE0;
  v40._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v40);
  v41._countAndFlagsBits = 0xD00000000000001DLL;
  v41._object = (void *)0x8000000100FF3A70;
  String.append(_:)(v41);
  v42._countAndFlagsBits = 0x6F5F7463656A626FLL;
  v42._object = (void *)0xEE00736E6F697470;
  String.append(_:)(v42);
  v43._countAndFlagsBits = 0xD000000000000029;
  v43._object = (void *)0x8000000100FF3BF0;
  String.append(_:)(v43);
  v44._countAndFlagsBits = 0xD00000000000001DLL;
  v44._object = (void *)0x8000000100FF3BB0;
  String.append(_:)(v44);
  v45._countAndFlagsBits = 0x474945524F460A2CLL;
  v45._object = (void *)0xEE002059454B204ELL;
  String.append(_:)(v45);
  v46._countAndFlagsBits = 0xD00000000000001FLL;
  v46._object = (void *)0x8000000100FF3BD0;
  String.append(_:)(v46);
  v47._countAndFlagsBits = 0x4E45524546455220;
  v47._object = (void *)0xEC00000020534543;
  String.append(_:)(v47);
  v48._countAndFlagsBits = 0x74695F6472616F62;
  v48._object = (void *)0xEB00000000736D65;
  String.append(_:)(v48);
  v49._countAndFlagsBits = 32;
  v49._object = (void *)0xE100000000000000;
  String.append(_:)(v49);
  v50._countAndFlagsBits = 0xD00000000000001DLL;
  v50._object = (void *)0x8000000100FF3BB0;
  String.append(_:)(v50);
  v51._object = (void *)0x8000000100FF3C20;
  v51._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v51);
  v52 = v96;
  v53 = v97;
  v54 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v55 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v55, v98);
  swift_retain(v54);
  v57 = sub_1006B77CC(v56, v52, v53);
  v58 = swift_release(v54);
  if (v1)
    return;
  v59 = *(void **)(*(_QWORD *)(v57 + 16) + 32);
  *v7 = v59;
  v93(v7, v92, v3, v58);
  v60 = v59;
  LOBYTE(v59) = _dispatchPreconditionTest(_:)(v7);
  v61 = v91;
  v91(v7, v3);
  if ((v59 & 1) == 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v62 = (sqlite3_stmt **)(v57 + 24);
  swift_beginAccess(v57 + 24, &v96, 1, 0);
  v63 = sqlite3_step(*(sqlite3_stmt **)(v57 + 24));
  if (v63 != 101)
    goto LABEL_10;
  v61 = (uint64_t (*)(_QWORD *, uint64_t))0xE000000000000000;
  v94 = 0;
  v95 = 0xE000000000000000;
  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease(v95);
  v64 = sub_1006B7B68(v54, 0xD000000000000035, 0x8000000100FF3C70);
  if (v64 != 101)
  {
LABEL_12:
    v74 = v64;
    v75 = sub_1006B79EC();
    swift_allocError(&type metadata for SQLiteError, v75, 0, 0);
    *(_DWORD *)v76 = v74;
    *(_QWORD *)(v76 + 8) = 0xD000000000000038;
    *(_QWORD *)(v76 + 16) = 0x8000000100FF3CB0;
    swift_willThrow(v77);
    v78 = *(void **)(*(_QWORD *)(v57 + 16) + 32);
    *v7 = v78;
    ((void (*)(_QWORD *, _QWORD, uint64_t))v93)(v7, v92, v3);
    v79 = v78;
    LOBYTE(v78) = _dispatchPreconditionTest(_:)(v7);
    v65 = v91(v7, v3);
    if ((v78 & 1) == 0)
    {
      __break(1u);
LABEL_14:
      v80 = v65;
      v94 = 0;
      v95 = 0xE000000000000000;
      _StringGuts.grow(_:)(68);
      v81._countAndFlagsBits = 0xD000000000000017;
      v81._object = (void *)0x8000000100FF3B30;
      String.append(_:)(v81);
      v82._countAndFlagsBits = 0x74695F6472616F62;
      v82._object = (void *)0xEB00000000736D65;
      String.append(_:)(v82);
      v83._countAndFlagsBits = 0xD00000000000002BLL;
      v83._object = (void *)0x8000000100FF3D40;
      String.append(_:)(v83);
      v84 = v94;
      v85 = v95;
      v86 = sub_1006B79EC();
      swift_allocError(&type metadata for SQLiteError, v86, 0, 0);
      *(_DWORD *)v87 = v80;
      *(_QWORD *)(v87 + 8) = v84;
      *(_QWORD *)(v87 + 16) = v85;
      swift_willThrow(v88);
      v89 = *(void **)(*(_QWORD *)(v57 + 16) + 32);
      *v7 = v89;
      ((void (*)(_QWORD *, _QWORD, uint64_t))v93)(v7, v92, v3);
      v90 = v89;
      LOBYTE(v89) = _dispatchPreconditionTest(_:)(v7);
      v91(v7, v3);
      if ((v89 & 1) != 0)
        goto LABEL_15;
LABEL_22:
      __break(1u);
    }
    goto LABEL_15;
  }
  v94 = 0;
  v95 = 0xE000000000000000;
  _StringGuts.grow(_:)(47);
  swift_bridgeObjectRelease(v95);
  v65 = sub_1006B7B68(v54, 0xD00000000000004FLL, 0x8000000100FF3CF0);
  if (v65 != 101)
    goto LABEL_14;
  v66 = *(void **)(*(_QWORD *)(v57 + 16) + 32);
  *v7 = v66;
  ((void (*)(_QWORD *, _QWORD, uint64_t))v93)(v7, v92, v3);
  v67 = v66;
  LOBYTE(v66) = _dispatchPreconditionTest(_:)(v7);
  v63 = v91(v7, v3);
  if ((v66 & 1) == 0)
  {
    __break(1u);
LABEL_10:
    v68 = v63;
    v69 = sub_1006B79EC();
    swift_allocError(&type metadata for SQLiteError, v69, 0, 0);
    *(_DWORD *)v70 = v68;
    *(_QWORD *)(v70 + 8) = 0xD000000000000026;
    *(_QWORD *)(v70 + 16) = 0x8000000100FF3C40;
    swift_willThrow(v71);
    v72 = *(void **)(*(_QWORD *)(v57 + 16) + 32);
    *v7 = v72;
    ((void (*)(_QWORD *, _QWORD, uint64_t))v93)(v7, v92, v3);
    v73 = v72;
    LOBYTE(v72) = _dispatchPreconditionTest(_:)(v7);
    v64 = v61(v7, v3);
    if ((v72 & 1) != 0)
      goto LABEL_15;
    __break(1u);
    goto LABEL_12;
  }
LABEL_15:
  if (*v62)
  {
    sqlite3_finalize(*v62);
    *v62 = 0;
  }
  swift_release(v57);
}

void sub_100A71DCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  void (*v8)(_QWORD, __n128);
  id v9;
  void (*v10)(_QWORD *, uint64_t);
  id v11;
  __n128 v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __n128 v48;
  void *v49;
  id v50;
  uint64_t (*v51)(_QWORD *, uint64_t);
  sqlite3_stmt **v52;
  int v53;
  int v54;
  void *v55;
  id v56;
  int v57;
  unint64_t v58;
  uint64_t v59;
  __n128 v60;
  void *v61;
  id v62;
  int v63;
  Swift::String v64;
  Swift::String v65;
  Swift::String v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  __n128 v71;
  void *v72;
  id v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t (*v76)(_QWORD *, uint64_t);
  unsigned int v77;
  void (*v78)(_QWORD *, _QWORD, uint64_t, __n128);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  _BYTE v85[32];
  _BYTE v86[24];

  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (uint64_t *)((char *)&v74 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v6 = v7;
  v8 = *(void (**)(_QWORD, __n128))(v3 + 104);
  v77 = enum case for DispatchPredicate.onQueue(_:);
  v78 = (void (*)(_QWORD *, _QWORD, uint64_t, __n128))v8;
  v8(v6, v4);
  v9 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  v10 = *(void (**)(_QWORD *, uint64_t))(v3 + 8);
  v10(v6, v2);
  if ((v7 & 1) != 0)
  {
    v79 = v0;
    v80 = v1;
    v76 = (uint64_t (*)(_QWORD *, uint64_t))v10;
    if (qword_1013DD858 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1013DD858, sub_100A05554);
LABEL_3:
  swift_beginAccess(&static OS_os_log.boardStore, v86, 0, 0);
  v11 = (id)static OS_os_log.boardStore;
  v13 = static os_log_type_t.info.getter(v12);
  sub_100A06EBC((uint64_t)v11, &_mh_execute_header, v13, "Creating schema for the board drawings table", 44, 2, (uint64_t)_swiftEmptyArrayStorage);

  v83 = 0;
  v84 = 0xE000000000000000;
  _StringGuts.grow(_:)(236);
  v14._countAndFlagsBits = 0x5420455441455243;
  v14._object = (void *)0xED000020454C4241;
  String.append(_:)(v14);
  v15._countAndFlagsBits = 0xD000000000000018;
  v75 = (unint64_t)"bucket with error %@";
  v15._object = (void *)0x8000000100FEF1F0;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 10272;
  v16._object = (void *)0xE200000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0xD000000000000011;
  v17._object = (void *)0x8000000100FEF210;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 0xD00000000000001ALL;
  v18._object = (void *)0x8000000100FF3440;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 0x736472616F62;
  v19._object = (void *)0xE600000000000000;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 10272;
  v20._object = (void *)0xE200000000000000;
  String.append(_:)(v20);
  v21._object = (void *)0x8000000100FD6350;
  v21._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v21);
  v22._countAndFlagsBits = 0xD000000000000015;
  v22._object = (void *)0x8000000100FF3460;
  String.append(_:)(v22);
  v23._countAndFlagsBits = 0x695F74656B637562;
  v23._object = (void *)0xEC0000007865646ELL;
  String.append(_:)(v23);
  v24._countAndFlagsBits = 0xD000000000000013;
  v24._object = (void *)0x8000000100FF3780;
  String.append(_:)(v24);
  v25._countAndFlagsBits = 0x645F74656B637562;
  v25._object = (void *)0xEB00000000617461;
  String.append(_:)(v25);
  v26._object = (void *)0x8000000100FF36B0;
  v26._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v26);
  v27._object = (void *)0x8000000100FEEB40;
  v27._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v27);
  v28._countAndFlagsBits = 0xD00000000000001DLL;
  v28._object = (void *)0x8000000100FF3A70;
  String.append(_:)(v28);
  v29._countAndFlagsBits = 0x7461645F636E7973;
  v29._object = (void *)0xE900000000000061;
  String.append(_:)(v29);
  v30._countAndFlagsBits = 0x202C424F4C4220;
  v30._object = (void *)0xE700000000000000;
  String.append(_:)(v30);
  v31._object = (void *)0x8000000100FEF270;
  v31._countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v31);
  v32._countAndFlagsBits = 0x202C424F4C4220;
  v32._object = (void *)0xE700000000000000;
  String.append(_:)(v32);
  v33._countAndFlagsBits = 0xD00000000000001FLL;
  v33._object = (void *)0x8000000100FEF290;
  String.append(_:)(v33);
  v34._countAndFlagsBits = 0xD00000000000001DLL;
  v34._object = (void *)0x8000000100FF3A70;
  String.append(_:)(v34);
  v35._object = (void *)0x8000000100FEF2B0;
  v35._countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v35);
  v36._countAndFlagsBits = 0xD000000000000024;
  v36._object = (void *)0x8000000100FF37A0;
  String.append(_:)(v36);
  v37._countAndFlagsBits = 0xD000000000000011;
  v37._object = (void *)0x8000000100FEF210;
  String.append(_:)(v37);
  v38._countAndFlagsBits = 44;
  v38._object = (void *)0xE100000000000000;
  String.append(_:)(v38);
  v39._countAndFlagsBits = 0x695F74656B637562;
  v39._object = (void *)0xEC0000007865646ELL;
  String.append(_:)(v39);
  v40._countAndFlagsBits = 10537;
  v40._object = (void *)0xE200000000000000;
  String.append(_:)(v40);
  v41 = v83;
  v42 = v84;
  v43 = *(_QWORD *)(v79 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v44 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v44, v85);
  swift_retain(v43);
  v45 = v80;
  v47 = sub_1006B77CC(v46, v41, v42);
  v48 = swift_release(v43);
  if (v45)
    return;
  v49 = *(void **)(*(_QWORD *)(v47 + 16) + 32);
  *v6 = v49;
  v78(v6, v77, v2, v48);
  v50 = v49;
  LOBYTE(v49) = _dispatchPreconditionTest(_:)(v6);
  v51 = v76;
  v76(v6, v2);
  if ((v49 & 1) == 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  v52 = (sqlite3_stmt **)(v47 + 24);
  swift_beginAccess(v47 + 24, &v83, 1, 0);
  v53 = sqlite3_step(*(sqlite3_stmt **)(v47 + 24));
  if (v53 != 101)
  {
LABEL_9:
    v57 = v53;
    v58 = sub_1006B79EC();
    swift_allocError(&type metadata for SQLiteError, v58, 0, 0);
    *(_DWORD *)v59 = v57;
    *(_QWORD *)(v59 + 8) = 0xD000000000000029;
    *(_QWORD *)(v59 + 16) = 0x8000000100FF3A90;
    swift_willThrow(v60);
    v61 = *(void **)(*(_QWORD *)(v47 + 16) + 32);
    *v6 = v61;
    ((void (*)(_QWORD *, _QWORD, uint64_t))v78)(v6, v77, v2);
    v62 = v61;
    LOBYTE(v61) = _dispatchPreconditionTest(_:)(v6);
    v54 = v51(v6, v2);
    if ((v61 & 1) == 0)
    {
      __break(1u);
LABEL_11:
      v63 = v54;
      v81 = 0;
      v82 = (unint64_t)v51;
      _StringGuts.grow(_:)(71);
      v64._countAndFlagsBits = 0xD000000000000017;
      v64._object = (void *)0x8000000100FF3B30;
      String.append(_:)(v64);
      v65._countAndFlagsBits = 0xD000000000000018;
      v65._object = (void *)(v75 | 0x8000000000000000);
      String.append(_:)(v65);
      v66._countAndFlagsBits = 0xD00000000000002ELL;
      v66._object = (void *)0x8000000100FF3B50;
      String.append(_:)(v66);
      v67 = v81;
      v68 = v82;
      v69 = sub_1006B79EC();
      swift_allocError(&type metadata for SQLiteError, v69, 0, 0);
      *(_DWORD *)v70 = v63;
      *(_QWORD *)(v70 + 8) = v67;
      *(_QWORD *)(v70 + 16) = v68;
      swift_willThrow(v71);
      v72 = *(void **)(*(_QWORD *)(v47 + 16) + 32);
      *v6 = v72;
      ((void (*)(_QWORD *, _QWORD, uint64_t))v78)(v6, v77, v2);
      v73 = v72;
      LOBYTE(v72) = _dispatchPreconditionTest(_:)(v6);
      v76(v6, v2);
      if ((v72 & 1) != 0)
        goto LABEL_12;
LABEL_19:
      __break(1u);
    }
    goto LABEL_12;
  }
  v51 = (uint64_t (*)(_QWORD *, uint64_t))0xE000000000000000;
  v81 = 0;
  v82 = 0xE000000000000000;
  _StringGuts.grow(_:)(47);
  swift_bridgeObjectRelease(v82);
  v54 = sub_1006B7B68(v43, 0xD00000000000006ALL, 0x8000000100FF3AC0);
  if (v54 != 101)
    goto LABEL_11;
  v55 = *(void **)(*(_QWORD *)(v47 + 16) + 32);
  *v6 = v55;
  ((void (*)(_QWORD *, _QWORD, uint64_t))v78)(v6, v77, v2);
  v56 = v55;
  LOBYTE(v55) = _dispatchPreconditionTest(_:)(v6);
  v53 = v76(v6, v2);
  if ((v55 & 1) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
LABEL_12:
  if (*v52)
  {
    sqlite3_finalize(*v52);
    *v52 = 0;
  }
  swift_release(v47);
}

void sub_100A724E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  void (*v10)(_QWORD *, uint64_t, uint64_t, __n128);
  id v11;
  void (*v12)(_QWORD *, uint64_t);
  id v13;
  __n128 v14;
  uint64_t v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  void *v32;
  id v33;
  sqlite3_stmt **v34;
  int v35;
  void *v36;
  id v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  __n128 v41;
  void *v42;
  id v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _BYTE v48[32];
  _BYTE v49[24];

  v2 = v0;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (uint64_t *)((char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v7 = v8;
  v9 = enum case for DispatchPredicate.onQueue(_:);
  v10 = *(void (**)(_QWORD *, uint64_t, uint64_t, __n128))(v4 + 104);
  v10(v7, enum case for DispatchPredicate.onQueue(_:), v3, v5);
  v11 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  v12 = *(void (**)(_QWORD *, uint64_t))(v4 + 8);
  v12(v7, v3);
  if ((v8 & 1) != 0)
  {
    if (qword_1013DD858 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1013DD858, sub_100A05554);
LABEL_3:
  swift_beginAccess(&static OS_os_log.boardStore, v49, 0, 0);
  v13 = (id)static OS_os_log.boardStore;
  v15 = static os_log_type_t.info.getter(v14);
  sub_100A06EBC((uint64_t)v13, &_mh_execute_header, v15, "Creating schema for the key/value table", 39, 2, (uint64_t)_swiftEmptyArrayStorage);

  v46 = 0;
  v47 = 0xE000000000000000;
  _StringGuts.grow(_:)(74);
  v16._countAndFlagsBits = 0x5420455441455243;
  v16._object = (void *)0xED000020454C4241;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0x756C61765F79656BLL;
  v17._object = (void *)0xEE00617461645F65;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 10272;
  v18._object = (void *)0xE200000000000000;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 7955819;
  v19._object = (void *)0xE300000000000000;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 0xD00000000000001CLL;
  v20._object = (void *)0x8000000100FF39F0;
  String.append(_:)(v20);
  v21._countAndFlagsBits = 0x65756C6176;
  v21._object = (void *)0xE500000000000000;
  String.append(_:)(v21);
  v22._object = (void *)0x8000000100FF3760;
  v22._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v22);
  v23._countAndFlagsBits = 0x6E695F6172747865;
  v23._object = (void *)0xEA00000000006F66;
  String.append(_:)(v23);
  v24._countAndFlagsBits = 0x29205458455420;
  v24._object = (void *)0xE700000000000000;
  String.append(_:)(v24);
  v25 = v46;
  v26 = v47;
  v27 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v28 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v28, v48);
  swift_retain(v27);
  v30 = sub_1006B77CC(v29, v25, v26);
  v31 = swift_release(v27);
  if (v1)
    return;
  v32 = *(void **)(*(_QWORD *)(v30 + 16) + 32);
  *v7 = v32;
  v10(v7, v9, v3, v31);
  v33 = v32;
  LOBYTE(v32) = _dispatchPreconditionTest(_:)(v7);
  v12(v7, v3);
  if ((v32 & 1) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  v34 = (sqlite3_stmt **)(v30 + 24);
  swift_beginAccess(v30 + 24, &v46, 1, 0);
  v35 = sqlite3_step(*(sqlite3_stmt **)(v30 + 24));
  if (v35 != 101)
  {
LABEL_8:
    v38 = v35;
    v39 = sub_1006B79EC();
    swift_allocError(&type metadata for SQLiteError, v39, 0, 0);
    *(_DWORD *)v40 = v38;
    *(_QWORD *)(v40 + 8) = 0xD000000000000024;
    *(_QWORD *)(v40 + 16) = 0x8000000100FF3A10;
    swift_willThrow(v41);
    v42 = *(void **)(*(_QWORD *)(v30 + 16) + 32);
    *v7 = v42;
    ((void (*)(_QWORD *, uint64_t, uint64_t))v10)(v7, v9, v3);
    v43 = v42;
    v44 = _dispatchPreconditionTest(_:)(v7);
    v12(v7, v3);
    if ((v44 & 1) != 0)
      goto LABEL_9;
LABEL_16:
    __break(1u);
  }
  v36 = *(void **)(*(_QWORD *)(v30 + 16) + 32);
  *v7 = v36;
  ((void (*)(_QWORD *, uint64_t, uint64_t))v10)(v7, v9, v3);
  v37 = v36;
  v9 = _dispatchPreconditionTest(_:)(v7);
  v35 = ((uint64_t (*)(_QWORD *, uint64_t))v12)(v7, v3);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
LABEL_9:
  if (*v34)
  {
    sqlite3_finalize(*v34);
    *v34 = 0;
  }
  swift_release(v30);
}

void sub_100A72914()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  void (*v10)(_QWORD *, uint64_t, uint64_t, __n128);
  id v11;
  void (*v12)(_QWORD *, uint64_t);
  id v13;
  __n128 v14;
  uint64_t v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  void *v32;
  id v33;
  sqlite3_stmt **v34;
  int v35;
  void *v36;
  id v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  __n128 v41;
  void *v42;
  id v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _BYTE v48[32];
  _BYTE v49[24];

  v2 = v0;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (uint64_t *)((char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v7 = v8;
  v9 = enum case for DispatchPredicate.onQueue(_:);
  v10 = *(void (**)(_QWORD *, uint64_t, uint64_t, __n128))(v4 + 104);
  v10(v7, enum case for DispatchPredicate.onQueue(_:), v3, v5);
  v11 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  v12 = *(void (**)(_QWORD *, uint64_t))(v4 + 8);
  v12(v7, v3);
  if ((v8 & 1) != 0)
  {
    if (qword_1013DD858 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1013DD858, sub_100A05554);
LABEL_3:
  swift_beginAccess(&static OS_os_log.boardStore, v49, 0, 0);
  v13 = (id)static OS_os_log.boardStore;
  v15 = static os_log_type_t.info.getter(v14);
  sub_100A06EBC((uint64_t)v13, &_mh_execute_header, v15, "Creating schema for the assets table", 36, 2, (uint64_t)_swiftEmptyArrayStorage);

  v46 = 0;
  v47 = 0xE000000000000000;
  _StringGuts.grow(_:)(74);
  v16._countAndFlagsBits = 0x5420455441455243;
  v16._object = (void *)0xED000020454C4241;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0x737465737361;
  v17._object = (void *)0xE600000000000000;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 10272;
  v18._object = (void *)0xE200000000000000;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 0x75755F7465737361;
  v19._object = (void *)0xEA00000000006469;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 0xD00000000000001CLL;
  v20._object = (void *)0x8000000100FD6A30;
  String.append(_:)(v20);
  v21._countAndFlagsBits = 0x6F69736E65747865;
  v21._object = (void *)0xE90000000000006ELL;
  String.append(_:)(v21);
  v22._countAndFlagsBits = 0x202C5458455420;
  v22._object = (void *)0xE700000000000000;
  String.append(_:)(v22);
  v23._countAndFlagsBits = 0x6E6F7473626D6F74;
  v23._object = (void *)0xEE00657461645F65;
  String.append(_:)(v23);
  v24._object = (void *)0x8000000100FF3970;
  v24._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v24);
  v25 = v46;
  v26 = v47;
  v27 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v28 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v28, v48);
  swift_retain(v27);
  v30 = sub_1006B77CC(v29, v25, v26);
  v31 = swift_release(v27);
  if (v1)
    return;
  v32 = *(void **)(*(_QWORD *)(v30 + 16) + 32);
  *v7 = v32;
  v10(v7, v9, v3, v31);
  v33 = v32;
  LOBYTE(v32) = _dispatchPreconditionTest(_:)(v7);
  v12(v7, v3);
  if ((v32 & 1) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  v34 = (sqlite3_stmt **)(v30 + 24);
  swift_beginAccess(v30 + 24, &v46, 1, 0);
  v35 = sqlite3_step(*(sqlite3_stmt **)(v30 + 24));
  if (v35 != 101)
  {
LABEL_8:
    v38 = v35;
    v39 = sub_1006B79EC();
    swift_allocError(&type metadata for SQLiteError, v39, 0, 0);
    *(_DWORD *)v40 = v38;
    *(_QWORD *)(v40 + 8) = 0xD000000000000021;
    *(_QWORD *)(v40 + 16) = 0x8000000100FF3990;
    swift_willThrow(v41);
    v42 = *(void **)(*(_QWORD *)(v30 + 16) + 32);
    *v7 = v42;
    ((void (*)(_QWORD *, uint64_t, uint64_t))v10)(v7, v9, v3);
    v43 = v42;
    v44 = _dispatchPreconditionTest(_:)(v7);
    v12(v7, v3);
    if ((v44 & 1) != 0)
      goto LABEL_9;
LABEL_16:
    __break(1u);
  }
  v36 = *(void **)(*(_QWORD *)(v30 + 16) + 32);
  *v7 = v36;
  ((void (*)(_QWORD *, uint64_t, uint64_t))v10)(v7, v9, v3);
  v37 = v36;
  v9 = _dispatchPreconditionTest(_:)(v7);
  v35 = ((uint64_t (*)(_QWORD *, uint64_t))v12)(v7, v3);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
LABEL_9:
  if (*v34)
  {
    sqlite3_finalize(*v34);
    *v34 = 0;
  }
  swift_release(v30);
}

void sub_100A72D54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  void (*v9)(_QWORD, __n128);
  id v10;
  void (*v11)(_QWORD *, uint64_t);
  id v12;
  __n128 v13;
  uint64_t v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  unint64_t v42;
  void *v43;
  id v44;
  uint64_t (*v45)(_QWORD *, uint64_t);
  sqlite3_stmt **v46;
  int v47;
  int v48;
  int v49;
  void *v50;
  id v51;
  int v52;
  unint64_t v53;
  uint64_t v54;
  __n128 v55;
  void *v56;
  id v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  __n128 v61;
  void *v62;
  id v63;
  int v64;
  unint64_t v65;
  uint64_t v66;
  __n128 v67;
  void *v68;
  id v69;
  uint64_t v70;
  uint64_t (*v71)(_QWORD *, uint64_t);
  unsigned int v72;
  void (*v73)(_QWORD *, _QWORD, uint64_t, __n128);
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  _BYTE v79[32];
  _BYTE v80[24];

  v2 = v0;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (uint64_t *)((char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v7 = v8;
  v9 = *(void (**)(_QWORD, __n128))(v4 + 104);
  v72 = enum case for DispatchPredicate.onQueue(_:);
  v73 = (void (*)(_QWORD *, _QWORD, uint64_t, __n128))v9;
  v9(v7, v5);
  v10 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  v11 = *(void (**)(_QWORD *, uint64_t))(v4 + 8);
  v11(v7, v3);
  if ((v8 & 1) != 0)
  {
    v74 = v1;
    v71 = (uint64_t (*)(_QWORD *, uint64_t))v11;
    if (qword_1013DD858 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1013DD858, sub_100A05554);
LABEL_3:
  swift_beginAccess(&static OS_os_log.boardStore, v80, 0, 0);
  v12 = (id)static OS_os_log.boardStore;
  v14 = static os_log_type_t.info.getter(v13);
  sub_100A06EBC((uint64_t)v12, &_mh_execute_header, v14, "Creating schema for the asset_references table", 46, 2, (uint64_t)_swiftEmptyArrayStorage);

  v77 = 0;
  v78 = 0xE000000000000000;
  _StringGuts.grow(_:)(146);
  v15._countAndFlagsBits = 0x5420455441455243;
  v15._object = (void *)0xED000020454C4241;
  String.append(_:)(v15);
  v16._object = (void *)0x8000000100FEF8F0;
  v16._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 10272;
  v17._object = (void *)0xE200000000000000;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 0xD000000000000013;
  v18._object = (void *)0x8000000100FEFE20;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 0xD000000000000010;
  v19._object = (void *)0x8000000100FF36B0;
  String.append(_:)(v19);
  v20._object = (void *)0x8000000100FD6350;
  v20._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v20);
  v21._countAndFlagsBits = 0x202C424F4C4220;
  v21._object = (void *)0xE700000000000000;
  String.append(_:)(v21);
  v22._countAndFlagsBits = 0xD000000000000013;
  v22._object = (void *)0x8000000100FEFE40;
  String.append(_:)(v22);
  v23._object = (void *)0x8000000100FF3760;
  v23._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v23);
  v24._countAndFlagsBits = 0x75755F7465737361;
  v24._object = (void *)0xEA00000000006469;
  String.append(_:)(v24);
  v25._countAndFlagsBits = 0xD000000000000010;
  v25._object = (void *)0x8000000100FF36B0;
  String.append(_:)(v25);
  v26._countAndFlagsBits = 0x7265727265666572;
  v26._object = (void *)0xED0000657079745FLL;
  String.append(_:)(v26);
  v27._object = (void *)0x8000000100FF3780;
  v27._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v27);
  v28._object = (void *)0x8000000100FEEB40;
  v28._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v28);
  v29._countAndFlagsBits = 0xD000000000000024;
  v29._object = (void *)0x8000000100FF37A0;
  String.append(_:)(v29);
  v30._countAndFlagsBits = 0xD000000000000013;
  v30._object = (void *)0x8000000100FEFE20;
  String.append(_:)(v30);
  v31._countAndFlagsBits = 44;
  v31._object = (void *)0xE100000000000000;
  String.append(_:)(v31);
  v32._countAndFlagsBits = 0xD000000000000013;
  v32._object = (void *)0x8000000100FEFE40;
  String.append(_:)(v32);
  v33._countAndFlagsBits = 10537;
  v33._object = (void *)0xE200000000000000;
  String.append(_:)(v33);
  v34 = v77;
  v35 = v78;
  v36 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v37 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v37, v79);
  swift_retain(v36);
  v38 = v74;
  v40 = sub_1006B77CC(v39, v34, v35);
  v41 = swift_release(v36);
  if (v38)
    return;
  v42 = 0xD000000000000010;
  v43 = *(void **)(*(_QWORD *)(v40 + 16) + 32);
  *v7 = v43;
  v73(v7, v72, v3, v41);
  v44 = v43;
  LOBYTE(v43) = _dispatchPreconditionTest(_:)(v7);
  v45 = v71;
  v71(v7, v3);
  if ((v43 & 1) == 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v46 = (sqlite3_stmt **)(v40 + 24);
  swift_beginAccess(v40 + 24, &v77, 1, 0);
  v47 = sqlite3_step(*(sqlite3_stmt **)(v40 + 24));
  if (v47 != 101)
    goto LABEL_10;
  v42 = 0xE000000000000000;
  v75 = 0;
  v76 = 0xE000000000000000;
  _StringGuts.grow(_:)(47);
  swift_bridgeObjectRelease(v76);
  v48 = sub_1006B7B68(v36, 0xD00000000000004ELL, 0x8000000100FF3800);
  if (v48 != 101)
  {
LABEL_12:
    v58 = v48;
    v59 = sub_1006B79EC();
    swift_allocError(&type metadata for SQLiteError, v59, 0, 0);
    *(_DWORD *)v60 = v58;
    *(_QWORD *)(v60 + 8) = 0xD000000000000044;
    *(_QWORD *)(v60 + 16) = 0x8000000100FF3850;
    swift_willThrow(v61);
    v62 = *(void **)(*(_QWORD *)(v40 + 16) + 32);
    *v7 = v62;
    ((void (*)(_QWORD *, _QWORD, uint64_t))v73)(v7, v72, v3);
    v63 = v62;
    LOBYTE(v62) = _dispatchPreconditionTest(_:)(v7);
    v49 = v45(v7, v3);
    if ((v62 & 1) == 0)
    {
      __break(1u);
LABEL_14:
      v64 = v49;
      v65 = sub_1006B79EC();
      swift_allocError(&type metadata for SQLiteError, v65, 0, 0);
      *(_DWORD *)v66 = v64;
      *(_QWORD *)(v66 + 8) = v42 + 48;
      *(_QWORD *)(v66 + 16) = 0x8000000100FF38F0;
      swift_willThrow(v67);
      v68 = *(void **)(*(_QWORD *)(v40 + 16) + 32);
      *v7 = v68;
      ((void (*)(_QWORD *, _QWORD, uint64_t))v73)(v7, v72, v3);
      v69 = v68;
      LOBYTE(v68) = _dispatchPreconditionTest(_:)(v7);
      v45(v7, v3);
      if ((v68 & 1) != 0)
        goto LABEL_15;
LABEL_22:
      __break(1u);
    }
    goto LABEL_15;
  }
  v75 = 0;
  v76 = 0xE000000000000000;
  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease(v76);
  v49 = sub_1006B7B68(v36, 0xD00000000000004DLL, 0x8000000100FF38A0);
  v42 = 0xD000000000000010;
  if (v49 != 101)
    goto LABEL_14;
  v50 = *(void **)(*(_QWORD *)(v40 + 16) + 32);
  *v7 = v50;
  ((void (*)(_QWORD *, _QWORD, uint64_t))v73)(v7, v72, v3);
  v51 = v50;
  LOBYTE(v50) = _dispatchPreconditionTest(_:)(v7);
  v47 = v45(v7, v3);
  if ((v50 & 1) == 0)
  {
    __break(1u);
LABEL_10:
    v52 = v47;
    v53 = sub_1006B79EC();
    swift_allocError(&type metadata for SQLiteError, v53, 0, 0);
    *(_DWORD *)v54 = v52;
    *(_QWORD *)(v54 + 8) = 0xD00000000000002BLL;
    *(_QWORD *)(v54 + 16) = 0x8000000100FF37D0;
    swift_willThrow(v55);
    v56 = *(void **)(*(_QWORD *)(v40 + 16) + 32);
    *v7 = v56;
    ((void (*)(_QWORD *, _QWORD, uint64_t))v73)(v7, v72, v3);
    v57 = v56;
    LOBYTE(v56) = _dispatchPreconditionTest(_:)(v7);
    v48 = v45(v7, v3);
    if ((v56 & 1) != 0)
      goto LABEL_15;
    __break(1u);
    goto LABEL_12;
  }
LABEL_15:
  if (*v46)
  {
    sqlite3_finalize(*v46);
    *v46 = 0;
  }
  swift_release(v40);
}

void sub_100A73438()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  id v10;
  void (*v11)(_QWORD *, uint64_t);
  id v12;
  __n128 v13;
  uint64_t v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  void *v39;
  id v40;
  void (*v41)(_QWORD *, uint64_t);
  sqlite3_stmt **v42;
  int v43;
  void *v44;
  id v45;
  int v46;
  unint64_t v47;
  uint64_t v48;
  __n128 v49;
  void *v50;
  id v51;
  char v52;
  uint64_t v53;
  void (*v54)(_QWORD *, uint64_t);
  void (*v55)(_QWORD *, uint64_t, uint64_t, __n128);
  uint64_t v56;
  unint64_t v57;
  _BYTE v58[32];
  _BYTE v59[24];

  v2 = v0;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (uint64_t *)((char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v7 = v8;
  v9 = enum case for DispatchPredicate.onQueue(_:);
  v55 = *(void (**)(_QWORD *, uint64_t, uint64_t, __n128))(v4 + 104);
  v55(v7, enum case for DispatchPredicate.onQueue(_:), v3, v5);
  v10 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  v11 = *(void (**)(_QWORD *, uint64_t))(v4 + 8);
  v11(v7, v3);
  if ((v8 & 1) != 0)
  {
    v54 = v11;
    if (qword_1013DD858 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1013DD858, sub_100A05554);
LABEL_3:
  swift_beginAccess(&static OS_os_log.boardStore, v59, 0, 0);
  v12 = (id)static OS_os_log.boardStore;
  v14 = static os_log_type_t.info.getter(v13);
  sub_100A06EBC((uint64_t)v12, &_mh_execute_header, v14, "Creating schema for the command_history_items table", 51, 2, (uint64_t)_swiftEmptyArrayStorage);

  v56 = 0;
  v57 = 0xE000000000000000;
  _StringGuts.grow(_:)(167);
  v15._countAndFlagsBits = 0x5420455441455243;
  v15._object = (void *)0xED000020454C4241;
  String.append(_:)(v15);
  v16._object = (void *)0x8000000100FEF8D0;
  v16._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 10272;
  v17._object = (void *)0xE200000000000000;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 0x64695F6D657469;
  v18._object = (void *)0xE700000000000000;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 0xD000000000000024;
  v19._object = (void *)0x8000000100FF3680;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 0xD000000000000010;
  v20._object = (void *)0x8000000100FD6350;
  String.append(_:)(v20);
  v21._countAndFlagsBits = 0xD00000000000001ALL;
  v21._object = (void *)0x8000000100FF3440;
  String.append(_:)(v21);
  v22._countAndFlagsBits = 0x736472616F62;
  v22._object = (void *)0xE600000000000000;
  String.append(_:)(v22);
  v23._countAndFlagsBits = 10272;
  v23._object = (void *)0xE200000000000000;
  String.append(_:)(v23);
  v24._countAndFlagsBits = 0xD000000000000010;
  v24._object = (void *)0x8000000100FD6350;
  String.append(_:)(v24);
  v25._object = (void *)0x8000000100FF3460;
  v25._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v25);
  v26._object = (void *)0xE900000000000064;
  v26._countAndFlagsBits = 0x6975755F6D657469;
  String.append(_:)(v26);
  v27._countAndFlagsBits = 0xD000000000000010;
  v27._object = (void *)0x8000000100FF36B0;
  String.append(_:)(v27);
  v28._countAndFlagsBits = 0x7461645F6D657469;
  v28._object = (void *)0xE900000000000061;
  String.append(_:)(v28);
  v29._countAndFlagsBits = 0xD000000000000010;
  v29._object = (void *)0x8000000100FF36B0;
  String.append(_:)(v29);
  v30._object = (void *)0xE900000000000067;
  v30._countAndFlagsBits = 0x616C665F6F646E75;
  String.append(_:)(v30);
  v31._countAndFlagsBits = 0xD000000000000013;
  v31._object = (void *)0x8000000100FF36D0;
  String.append(_:)(v31);
  v32 = v56;
  v33 = v57;
  v34 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v35 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v35, v58);
  swift_retain(v34);
  v37 = sub_1006B77CC(v36, v32, v33);
  v38 = swift_release(v34);
  if (v1)
    return;
  v39 = *(void **)(*(_QWORD *)(v37 + 16) + 32);
  *v7 = v39;
  v55(v7, v9, v3, v38);
  v40 = v39;
  LOBYTE(v39) = _dispatchPreconditionTest(_:)(v7);
  v41 = v54;
  v54(v7, v3);
  if ((v39 & 1) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  v42 = (sqlite3_stmt **)(v37 + 24);
  swift_beginAccess(v37 + 24, &v56, 1, 0);
  v43 = sqlite3_step(*(sqlite3_stmt **)(v37 + 24));
  if (v43 != 101)
  {
LABEL_8:
    v46 = v43;
    v47 = sub_1006B79EC();
    swift_allocError(&type metadata for SQLiteError, v47, 0, 0);
    *(_DWORD *)v48 = v46;
    *(_QWORD *)(v48 + 8) = 0xD000000000000030;
    *(_QWORD *)(v48 + 16) = 0x8000000100FF36F0;
    swift_willThrow(v49);
    v50 = *(void **)(*(_QWORD *)(v37 + 16) + 32);
    *v7 = v50;
    ((void (*)(_QWORD *, uint64_t, uint64_t))v55)(v7, v9, v3);
    v51 = v50;
    v52 = _dispatchPreconditionTest(_:)(v7);
    v41(v7, v3);
    if ((v52 & 1) != 0)
      goto LABEL_9;
LABEL_16:
    __break(1u);
  }
  v44 = *(void **)(*(_QWORD *)(v37 + 16) + 32);
  *v7 = v44;
  ((void (*)(_QWORD *, uint64_t, uint64_t))v55)(v7, v9, v3);
  v45 = v44;
  v9 = _dispatchPreconditionTest(_:)(v7);
  v43 = ((uint64_t (*)(_QWORD *, uint64_t))v41)(v7, v3);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
LABEL_9:
  if (*v42)
  {
    sqlite3_finalize(*v42);
    *v42 = 0;
  }
  swift_release(v37);
}

void sub_100A7393C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  void (*v9)(_QWORD, __n128);
  id v10;
  id v11;
  __n128 v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  void *v36;
  id v37;
  sqlite3_stmt **v38;
  int v39;
  Swift::String v40;
  Swift::String v41;
  Swift::String v42;
  Swift::String v43;
  Swift::String v44;
  uint64_t v45;
  int v46;
  int v47;
  void *v48;
  id v49;
  sqlite3_stmt **v50;
  int v51;
  unint64_t v52;
  uint64_t v53;
  __n128 v54;
  void *v55;
  id v56;
  unint64_t v57;
  uint64_t v58;
  __n128 v59;
  void *v60;
  id v61;
  int v62;
  unint64_t v63;
  uint64_t v64;
  __n128 v65;
  void *v66;
  id v67;
  uint64_t v68;
  sqlite3_stmt **v69;
  unsigned int v70;
  void (*v71)(_QWORD *, _QWORD, uint64_t, __n128);
  void (*v72)(_QWORD *, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  _BYTE v77[32];
  _BYTE v78[24];

  v2 = v0;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (uint64_t *)((char *)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v7 = v8;
  v9 = *(void (**)(_QWORD, __n128))(v4 + 104);
  v70 = enum case for DispatchPredicate.onQueue(_:);
  v71 = (void (*)(_QWORD *, _QWORD, uint64_t, __n128))v9;
  v9(v7, v5);
  v10 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  v72 = *(void (**)(_QWORD *, uint64_t))(v4 + 8);
  v72(v7, v3);
  if ((v8 & 1) != 0)
  {
    if (qword_1013DD858 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1013DD858, sub_100A05554);
LABEL_3:
  swift_beginAccess(&static OS_os_log.boardStore, v78, 0, 0);
  v11 = (id)static OS_os_log.boardStore;
  v13 = static os_log_type_t.info.getter(v12);
  sub_100A06EBC((uint64_t)v11, &_mh_execute_header, v13, "Creating schema for the command_history_asset_references table", 62, 2, (uint64_t)_swiftEmptyArrayStorage);

  v75 = 0;
  v76 = 0xE000000000000000;
  _StringGuts.grow(_:)(105);
  v14._countAndFlagsBits = 0x5420455441455243;
  v14._object = (void *)0xED000020454C4241;
  String.append(_:)(v14);
  v15._countAndFlagsBits = 0xD000000000000020;
  v15._object = (void *)0x8000000100FEF880;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 10272;
  v16._object = (void *)0xE200000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0xD000000000000017;
  v17._object = (void *)0x8000000100FF3420;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 0xD00000000000001ALL;
  v18._object = (void *)0x8000000100FF3440;
  String.append(_:)(v18);
  v19._object = (void *)0x8000000100FEF8D0;
  v19._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 10272;
  v20._object = (void *)0xE200000000000000;
  String.append(_:)(v20);
  v21._countAndFlagsBits = 0x64695F6D657469;
  v21._object = (void *)0xE700000000000000;
  String.append(_:)(v21);
  v22._object = (void *)0x8000000100FF3460;
  v22._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v22);
  v23._countAndFlagsBits = 0x75755F7465737361;
  v23._object = (void *)0xEA00000000006469;
  String.append(_:)(v23);
  v24._object = (void *)0x8000000100FF3480;
  v24._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v24);
  v25._countAndFlagsBits = 0xD000000000000017;
  v25._object = (void *)0x8000000100FF3420;
  String.append(_:)(v25);
  v26._countAndFlagsBits = 8236;
  v26._object = (void *)0xE200000000000000;
  String.append(_:)(v26);
  v27._countAndFlagsBits = 0x75755F7465737361;
  v27._object = (void *)0xEA00000000006469;
  String.append(_:)(v27);
  v28._countAndFlagsBits = 10537;
  v28._object = (void *)0xE200000000000000;
  String.append(_:)(v28);
  v29 = v75;
  v30 = v76;
  v31 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v32 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v32, v77);
  swift_retain(v31);
  v34 = sub_1006B77CC(v33, v29, v30);
  v35 = swift_release(v31);
  if (v1)
    return;
  v36 = *(void **)(*(_QWORD *)(v34 + 16) + 32);
  *v7 = v36;
  v71(v7, v70, v3, v35);
  v37 = v36;
  LOBYTE(v36) = _dispatchPreconditionTest(_:)(v7);
  v72(v7, v3);
  if ((v36 & 1) == 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  v38 = (sqlite3_stmt **)(v34 + 24);
  swift_beginAccess(v34 + 24, &v75, 1, 0);
  v39 = sqlite3_step(*(sqlite3_stmt **)(v34 + 24));
  if (v39 != 101)
  {
    v51 = v39;
    v52 = sub_1006B79EC();
    swift_allocError(&type metadata for SQLiteError, v52, 0, 0);
    *(_DWORD *)v53 = v51;
    *(_QWORD *)(v53 + 8) = 0xD00000000000003BLL;
    *(_QWORD *)(v53 + 16) = 0x8000000100FF34A0;
    swift_willThrow(v54);
    v55 = *(void **)(*(_QWORD *)(v34 + 16) + 32);
    *v7 = v55;
    ((void (*)(_QWORD *, _QWORD, uint64_t))v71)(v7, v70, v3);
    v56 = v55;
    v46 = _dispatchPreconditionTest(_:)(v7);
    v72(v7, v3);
    if ((v46 & 1) != 0)
      goto LABEL_16;
    __break(1u);
LABEL_13:
    v57 = sub_1006B79EC();
    swift_allocError(&type metadata for SQLiteError, v57, 0, 0);
    *(_DWORD *)v58 = v46;
    *(_QWORD *)(v58 + 8) = 0xD00000000000005FLL;
    *(_QWORD *)(v58 + 16) = 0x8000000100FF3510;
    swift_willThrow(v59);
    v60 = *(void **)(*(_QWORD *)(v34 + 16) + 32);
    *v7 = v60;
    ((void (*)(_QWORD *, _QWORD, uint64_t))v71)(v7, v70, v3);
    v61 = v60;
    LOBYTE(v60) = _dispatchPreconditionTest(_:)(v7);
    v72(v7, v3);
    if ((v60 & 1) != 0)
    {
      v38 = v69;
      goto LABEL_16;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v69 = (sqlite3_stmt **)(v34 + 24);
  v73 = 0;
  v74 = 0xE000000000000000;
  _StringGuts.grow(_:)(53);
  v40._countAndFlagsBits = 0xD00000000000002ELL;
  v40._object = (void *)0x8000000100FF34E0;
  String.append(_:)(v40);
  v41._countAndFlagsBits = 0xD000000000000020;
  v41._object = (void *)0x8000000100FEF880;
  String.append(_:)(v41);
  v42._countAndFlagsBits = 10272;
  v42._object = (void *)0xE200000000000000;
  String.append(_:)(v42);
  v43._object = (void *)0x8000000100FF3420;
  v43._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v43);
  v44._countAndFlagsBits = 41;
  v44._object = (void *)0xE100000000000000;
  String.append(_:)(v44);
  v45 = v74;
  v46 = sub_1006B7B68(v31, v73, v74);
  swift_bridgeObjectRelease(v45);
  if (v46 != 101)
    goto LABEL_13;
  v73 = 0;
  v74 = 0xE000000000000000;
  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease(v74);
  v47 = sub_1006B7B68(v31, 0xD00000000000006DLL, 0x8000000100FF3570);
  if (v47 != 101)
  {
    v62 = v47;
    v63 = sub_1006B79EC();
    swift_allocError(&type metadata for SQLiteError, v63, 0, 0);
    *(_DWORD *)v64 = v62;
    *(_QWORD *)(v64 + 8) = 0xD000000000000050;
    *(_QWORD *)(v64 + 16) = 0x8000000100FF35E0;
    swift_willThrow(v65);
    v66 = *(void **)(*(_QWORD *)(v34 + 16) + 32);
    *v7 = v66;
    ((void (*)(_QWORD *, _QWORD, uint64_t))v71)(v7, v70, v3);
    v67 = v66;
    LOBYTE(v66) = _dispatchPreconditionTest(_:)(v7);
    v72(v7, v3);
    v38 = v69;
    if ((v66 & 1) == 0)
      goto LABEL_25;
LABEL_16:
    if (*v38)
    {
      sqlite3_finalize(*v38);
      *v38 = 0;
    }
    goto LABEL_18;
  }
  v48 = *(void **)(*(_QWORD *)(v34 + 16) + 32);
  *v7 = v48;
  ((void (*)(_QWORD *, _QWORD, uint64_t))v71)(v7, v70, v3);
  v49 = v48;
  LOBYTE(v48) = _dispatchPreconditionTest(_:)(v7);
  v72(v7, v3);
  v50 = v69;
  if ((v48 & 1) == 0)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
  }
  if (*v69)
  {
    sqlite3_finalize(*v69);
    *v50 = 0;
  }
LABEL_18:
  swift_release(v34);
}

unint64_t sub_100A74204@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100AFE64C(*a1);
  *a2 = result;
  return result;
}

void sub_100A7422C(_QWORD *a1@<X8>)
{
  *a1 = &off_101263CF0;
}

void sub_100A7423C(_QWORD *a1@<X8>)
{
  *a1 = &off_1012636F8;
}

NSString sub_100A7424C()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_101480A48 = (uint64_t)result;
  return result;
}

NSString sub_100A74280()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_101480A50 = (uint64_t)result;
  return result;
}

NSString sub_100A742B4()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_101480A58 = (uint64_t)result;
  return result;
}

NSString sub_100A742E8()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_101480A60 = (uint64_t)result;
  return result;
}

NSString sub_100A7431C()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_101480A68 = (uint64_t)result;
  return result;
}

NSString sub_100A74350()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_101480A70 = (uint64_t)result;
  return result;
}

id sub_100A74384()
{
  if (qword_1013DDAA0 != -1)
    swift_once(&qword_1013DDAA0, sub_100A7424C);
  qword_101480A78 = qword_101480A48;
  return (id)qword_101480A48;
}

uint64_t sub_100A7440C()
{
  return type metadata accessor for CRLBoardDataStore(0);
}

uint64_t type metadata accessor for CRLBoardDataStore(uint64_t a1)
{
  return sub_1004BD408(a1, (uint64_t *)&unk_101405058, (uint64_t)&nominal type descriptor for CRLBoardDataStore);
}

uint64_t sub_100A74428(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[27];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[5] = &unk_100F26F58;
    v4[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[7] = &unk_100F26F70;
    v4[8] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[9] = &unk_100F26F88;
    v4[10] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[11] = &unk_100F26F88;
    v4[12] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[13] = &unk_100F26F88;
    v4[14] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[15] = &unk_100F26F88;
    v4[16] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[17] = &unk_100F26F88;
    v4[18] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[19] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[20] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[21] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[22] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[23] = &unk_100F26F88;
    v4[24] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[25] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[26] = (char *)&value witness table for Builtin.UnknownObject + 64;
    return swift_updateClassMetadata2(a1, 256, 27, v4, a1 + 80);
  }
  return result;
}

uint64_t type metadata accessor for CRLBoardItemDatabaseResult()
{
  return objc_opt_self(_TtC8Freeform26CRLBoardItemDatabaseResult);
}

uint64_t sub_100A74534()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[5]);
  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for CRLBoardDatabaseFetchResult()
{
  return objc_opt_self(_TtC8Freeform27CRLBoardDatabaseFetchResult);
}

void sub_100A74634()
{
  sub_100A6CBE4();
}

void *sub_100A74660()
{
  char *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  id v17;
  id v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  id v25;
  char *v26;
  id v27;
  void *v28;
  os_unfair_lock_s *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, char *, uint64_t);
  char *v38;
  __n128 v39;
  const char *v40;
  unsigned int (*v41)(const char *, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  void *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  os_unfair_lock_s *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t *v61;
  char *v62;
  objc_class *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  _DWORD *v71;
  char *v72;
  uint64_t v73;
  id v74;
  void *v75;
  os_unfair_lock_s *v76;
  id v77;
  id v78;
  __n128 v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  void *result;
  uint64_t v85;
  uint64_t inited;
  uint64_t v87;
  void (*v88)(const char *, const char *, uint64_t);
  char *v89;
  char *v90;
  const char *v91;
  const char *v92;
  const char *v93;
  id v94;
  __int128 v95;
  char v96[72];
  char v97[24];
  char v98[24];
  objc_super v99;
  char v100[24];
  char v101[24];
  char *v102;

  v2 = v0;
  v3 = sub_1004B804C(&qword_1013E01F0);
  __chkstk_darwin(v3);
  v5 = (char *)&v87 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v91 = (char *)&v87 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1004B804C(&qword_1013E04D0);
  __chkstk_darwin(v9);
  v93 = (char *)&v87 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchPredicate(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (uint64_t *)((char *)&v87 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = *(void **)&v2[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue];
  *v15 = v16;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v12 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v11, v13);
  v17 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)(v15);
  (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(v15, v11);
  if ((v16 & 1) != 0)
  {
    if (qword_1013DD858 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1013DD858, sub_100A05554);
LABEL_3:
  swift_beginAccess(&static OS_os_log.boardStore, v101, 0, 0);
  v18 = (id)static OS_os_log.boardStore;
  v20 = static os_log_type_t.default.getter(v19);
  sub_100A06EBC((uint64_t)v18, &_mh_execute_header, v20, "Removing all assets.", 20, 2, (uint64_t)_swiftEmptyArrayStorage);

  v21 = *(_QWORD *)&v2[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManagerLock];
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v21 + 16));
  v22 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManager;
  v23 = *(char **)&v2[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManager];
  v102 = v2;
  v90 = v5;
  *(_QWORD *)&v95 = v1;
  if (v23)
  {
    v24 = v23;
  }
  else
  {
    v25 = objc_allocWithZone((Class)type metadata accessor for CRLAssetFileManager(0));
    v26 = v2;
    v27 = sub_100C7EE84((uint64_t)v26);

    v28 = *(void **)&v2[v22];
    *(_QWORD *)&v2[v22] = v27;
    v24 = (char *)v27;

    v23 = 0;
  }
  v29 = *(os_unfair_lock_s **)(v21 + 16);
  v30 = v23;
  os_unfair_lock_unlock(v29);
  v94 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v31 = sub_1004B804C(&qword_1013E1910);
  v32 = *(_QWORD *)(v7 + 72);
  v33 = *(unsigned __int8 *)(v7 + 80);
  v34 = (v33 + 32) & ~v33;
  v35 = swift_allocObject(v31, v34 + 2 * v32, v33 | 7);
  *(_OWORD *)(v35 + 16) = xmmword_100EF5A10;
  v36 = v35 + v34;
  v37 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 16);
  v37(v36, &v24[OBJC_IVAR____TtC8Freeform19CRLAssetFileManager_assetsDirectoryURL], v6);
  v38 = (char *)(v36 + v32);
  v37((uint64_t)v38, &v24[OBJC_IVAR____TtC8Freeform19CRLAssetFileManager_deletedAssetsDirectoryURL], v6);
  v39 = swift_bridgeObjectRetain(v35);
  v40 = v93;
  ((void (*)(const char *, uint64_t, uint64_t, __n128))v37)(v93, v36, v6, v39);
  v92 = *(const char **)(v7 + 56);
  ((void (*)(const char *, _QWORD, uint64_t, uint64_t))v92)(v40, 0, 1, v6);
  v41 = *(unsigned int (**)(const char *, uint64_t, uint64_t))(v7 + 48);
  if (v41(v40, 1, v6) != 1)
  {
    v89 = v24;
    v42 = (uint64_t)v91;
    v88 = *(void (**)(const char *, const char *, uint64_t))(v7 + 32);
    v88(v91, v40, v6);
    v43 = v95;
    sub_100C77AD4(v42, v94);
    v44 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    *(_QWORD *)&v95 = v43;
    if (!v43)
    {
      v44(v42, v6);
      v37((uint64_t)v40, v38, v6);
      ((void (*)(const char *, _QWORD, uint64_t, uint64_t))v92)(v40, 0, 1, v6);
      if (v41(v40, 1, v6) == 1)
      {
LABEL_11:
        v24 = v89;
        goto LABEL_12;
      }
      v88((const char *)v42, v40, v6);
      v45 = v95;
      sub_100C77AD4(v42, v94);
      *(_QWORD *)&v95 = v45;
      if (!v45)
      {
        v44(v42, v6);
        ((void (*)(const char *, uint64_t, uint64_t, uint64_t))v92)(v40, 1, 1, v6);
        goto LABEL_11;
      }
    }
    v44(v42, v6);
    swift_bridgeObjectRelease(v35);
    __break(1u);
    JUMPOUT(0x100A751CCLL);
  }
LABEL_12:
  v46 = v94;
  swift_bridgeObjectRelease(v35);
  swift_setDeallocating(v35);
  swift_arrayDestroy(v36, *(_QWORD *)(v35 + 16), v6);
  swift_deallocClassInstance(v35, 32, 7);
  v47 = *(_QWORD *)&v24[OBJC_IVAR____TtC8Freeform19CRLAssetFileManager_lock];
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v47 + 16));
  v48 = &v24[OBJC_IVAR____TtC8Freeform19CRLAssetFileManager_assetFileURLCache];
  swift_beginAccess(&v24[OBJC_IVAR____TtC8Freeform19CRLAssetFileManager_assetFileURLCache], v100, 1, 0);
  v49 = *(_QWORD *)v48;
  *(_QWORD *)v48 = _swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease(v49);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v47 + 16));

  v50 = v102;
  v51 = *(_QWORD *)&v102[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetDownloadManagerLock];
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v51 + 16));
  v52 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetDownloadManager;
  v53 = *(_QWORD *)&v50[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetDownloadManager];
  if (v53)
  {
    v54 = *(_QWORD *)&v50[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetDownloadManager];
  }
  else
  {
    v55 = v50;
    v54 = sub_1005D2858(v55);

    v56 = *(_QWORD *)&v50[v52];
    *(_QWORD *)&v50[v52] = v54;
    swift_retain(v54);
    swift_release(v56);
    v53 = 0;
  }
  v57 = *(os_unfair_lock_s **)(v51 + 16);
  swift_retain(v53);
  os_unfair_lock_unlock(v57);
  sub_1005CE5A0();
  swift_release(v54);
  v58 = *(_QWORD *)&v50[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetManagerLock];
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v58 + 16));
  v59 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetManager;
  v60 = *(void **)&v50[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetManager];
  v61 = &qword_1013FC000;
  if (v60)
  {
    v62 = *(char **)&v50[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetManager];
  }
  else
  {
    v63 = (objc_class *)type metadata accessor for CRLAssetManager();
    v64 = (char *)objc_allocWithZone(v63);
    v65 = &v64[OBJC_IVAR____TtC8Freeform15CRLAssetManager_store];
    swift_unknownObjectWeakInit(&v64[OBJC_IVAR____TtC8Freeform15CRLAssetManager_store]);
    v66 = OBJC_IVAR____TtC8Freeform15CRLAssetManager_lock;
    v67 = type metadata accessor for CRLUnfairLock();
    v68 = swift_allocObject(v67, 24, 7);
    v69 = v102;
    v70 = v64;
    v71 = (_DWORD *)swift_slowAlloc(4, -1);
    *v71 = 0;
    *(_QWORD *)(v68 + 16) = v71;
    atomic_thread_fence(memory_order_acq_rel);
    *(_QWORD *)&v64[v66] = v68;
    v72 = v102;
    *(_QWORD *)&v70[OBJC_IVAR____TtC8Freeform15CRLAssetManager_assets] = _swiftEmptyDictionarySingleton;
    v73 = OBJC_IVAR____TtC8Freeform15CRLAssetManager_owners;
    *(_QWORD *)&v70[v73] = objc_msgSend((id)objc_opt_self(NSMapTable), "mapTableWithKeyOptions:valueOptions:", 517, 0);
    *(_QWORD *)&v70[OBJC_IVAR____TtC8Freeform15CRLAssetManager_garbageCollectionWorkItem] = 0;
    swift_unknownObjectWeakAssign(v65, v69);

    v99.receiver = v70;
    v99.super_class = v63;
    v74 = objc_msgSendSuper2(&v99, "init");

    v75 = *(void **)&v72[v59];
    *(_QWORD *)&v72[v59] = v74;
    v62 = (char *)v74;

    v61 = &qword_1013FC000;
    v60 = 0;
  }
  v76 = *(os_unfair_lock_s **)(v58 + 16);
  v77 = v60;
  os_unfair_lock_unlock(v76);
  if (qword_1013DD8C0 != -1)
    swift_once(&qword_1013DD8C0, sub_100A0685C);
  swift_beginAccess(&static OS_os_log.assetManagement, v98, 0, 0);
  v78 = (id)static OS_os_log.assetManagement;
  v80 = static os_log_type_t.default.getter(v79);
  sub_100A06EBC((uint64_t)v78, &_mh_execute_header, v80, "reset() asset cache", 19, 2, (uint64_t)_swiftEmptyArrayStorage);

  v81 = &v62[v61[218]];
  swift_beginAccess(v81, v97, 1, 0);
  v82 = *(_QWORD *)v81;
  *(_QWORD *)v81 = _swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease(v82);

  v83 = v95;
  result = (void *)sub_100A7E774();
  if (!v83)
  {
    v94 = result;
    v95 = xmmword_100EF5E40;
    v93 = "command_history_items";
    v92 = "Clearing sync metadata.";
    v91 = "Removing data for table: %@";
    v89 = "bucket with error %@";
    v85 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    inited = swift_initStackObject(v85, v96);
    *(_OWORD *)(inited + 16) = v95;
    JUMPOUT(0x100A74F90);
  }
  return result;
}

uint64_t sub_100A751F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  void (*v12)(_QWORD *, uint64_t, uint64_t);
  id v13;
  char v14;
  uint64_t (*v15)(_QWORD *, uint64_t);
  uint64_t result;
  id v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v23 = a2;
  v21 = a1;
  v24 = type metadata accessor for CRLBoardDataStore.KeyValueTableKey(0);
  __chkstk_darwin(v24);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (uint64_t *)((char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v22 = v2;
  v10 = *(void **)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v9 = v10;
  v11 = enum case for DispatchPredicate.onQueue(_:);
  v12 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v6 + 104);
  ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v12)(v9, enum case for DispatchPredicate.onQueue(_:), v5, v7);
  v13 = v10;
  v14 = _dispatchPreconditionTest(_:)(v9);
  v15 = *(uint64_t (**)(_QWORD *, uint64_t))(v6 + 8);
  result = v15(v9, v5);
  if ((v14 & 1) != 0)
  {
    swift_storeEnumTagMultiPayload(v4, v24, 4);
    *v9 = v13;
    v12(v9, v11, v5);
    v17 = v13;
    v18 = _dispatchPreconditionTest(_:)(v9);
    result = v15(v9, v5);
    if ((v18 & 1) != 0)
    {
      v19 = v23;
      swift_bridgeObjectRetain(v23);
      sub_100AADF2C((uint64_t)v4, 0, 0, v22, v21, v19);
      return sub_1004B84A4((uint64_t)v4, type metadata accessor for CRLBoardDataStore.KeyValueTableKey);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100A75388(uint64_t a1, uint64_t a2, char a3)
{
  void *v3;
  void *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  _QWORD aBlock[5];
  uint64_t v27;

  v4 = v3;
  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v25 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1004B8930(0, (unint64_t *)&qword_1013DE090, OS_dispatch_queue_ptr);
  v14 = (void *)static OS_dispatch_queue.main.getter();
  v15 = swift_allocObject(&unk_101292718, 48, 7);
  *(_QWORD *)(v15 + 16) = a1;
  *(_QWORD *)(v15 + 24) = a2;
  *(_BYTE *)(v15 + 32) = a3;
  *(_QWORD *)(v15 + 40) = v3;
  aBlock[4] = sub_100AFF090;
  v27 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(_QWORD *)"";
  aBlock[2] = sub_1005D2FC0;
  aBlock[3] = &unk_101292730;
  v16 = _Block_copy(aBlock);
  v17 = v27;
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a2);
  v18 = v4;
  v19 = swift_release(v17);
  static DispatchQoS.unspecified.getter(v19);
  aBlock[0] = _swiftEmptyArrayStorage;
  v20 = sub_1004B7878((unint64_t *)&qword_1013E1D20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v21 = sub_1004B804C((uint64_t *)&unk_1013DFBF0);
  v22 = sub_1004CBA30((unint64_t *)&qword_1013E1D30, (uint64_t *)&unk_1013DFBF0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v21, v22, v8, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v10, v16);
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v25 + 8))(v10, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v24);
}

void sub_100A755BC(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t inited;
  uint64_t v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Class isa;
  uint64_t v17;

  v8 = sub_1004B804C(&qword_1013F7600);
  inited = swift_initStackObject(v8, &v17);
  *(_OWORD *)(inited + 16) = xmmword_100EF5550;
  *(_QWORD *)(inited + 32) = 0xD000000000000017;
  *(_QWORD *)(inited + 40) = 0x8000000100FB5A40;
  v10 = sub_1004B804C(&qword_1013E4980);
  *(_QWORD *)(inited + 48) = a1;
  *(_QWORD *)(inited + 72) = v10;
  *(_QWORD *)(inited + 80) = 0xD00000000000001BLL;
  *(_QWORD *)(inited + 88) = 0x8000000100FEF910;
  *(_QWORD *)(inited + 96) = a2;
  *(_QWORD *)(inited + 120) = v10;
  *(_QWORD *)(inited + 128) = 0x446C61636F4C7369;
  *(_QWORD *)(inited + 136) = 0xEF6E6F6974656C65;
  *(_QWORD *)(inited + 168) = &type metadata for Bool;
  *(_BYTE *)(inited + 144) = a3;
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a2);
  v11 = sub_1008D5E68(inited);
  v12 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_1013DDAA0 != -1)
    swift_once(&qword_1013DDAA0, sub_100A7424C);
  v13 = qword_101480A48;
  sub_100C9BC14(v11);
  v15 = v14;
  swift_bridgeObjectRelease(v11);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v12, "postNotificationName:object:userInfo:", v13, a4, isa, swift_bridgeObjectRelease(v15).n128_f64[0]);

}

uint64_t sub_100A75778(uint64_t a1, char a2, char a3, uint64_t a4)
{
  void *v4;
  void *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  id v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD aBlock[5];
  uint64_t v33;

  v5 = v4;
  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS(0);
  v15 = *(_QWORD *)(v14 - 8);
  result = __chkstk_darwin(v14);
  v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a1 + 16))
  {
    v31 = result;
    sub_1004B8930(0, (unint64_t *)&qword_1013DE090, OS_dispatch_queue_ptr);
    v30 = v11;
    v29 = static OS_dispatch_queue.main.getter();
    v19 = swift_allocObject(&unk_1012927B8, 48, 7);
    *(_QWORD *)(v19 + 16) = v5;
    *(_QWORD *)(v19 + 24) = a1;
    *(_BYTE *)(v19 + 32) = a2 & 1;
    *(_BYTE *)(v19 + 33) = a3 & 1;
    *(_QWORD *)(v19 + 40) = a4;
    aBlock[4] = sub_100AFF2E0;
    v33 = v19;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = *(_QWORD *)"";
    aBlock[2] = sub_1005D2FC0;
    aBlock[3] = &unk_1012927D0;
    v20 = _Block_copy(aBlock);
    v21 = v33;
    v22 = v5;
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRetain(a4);
    v23 = swift_release(v21);
    static DispatchQoS.unspecified.getter(v23);
    aBlock[0] = _swiftEmptyArrayStorage;
    v24 = sub_1004B7878((unint64_t *)&qword_1013E1D20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v25 = sub_1004B804C((uint64_t *)&unk_1013DFBF0);
    v26 = sub_1004CBA30((unint64_t *)&qword_1013E1D30, (uint64_t *)&unk_1013DFBF0, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v25, v26, v10, v24);
    v27 = (void *)v29;
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v18, v13, v20);
    _Block_release(v20);

    (*(void (**)(char *, uint64_t))(v30 + 8))(v13, v10);
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v31);
  }
  return result;
}

void sub_100A759C4(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5)
{
  id v9;
  uint64_t v10;
  uint64_t inited;
  unint64_t v12;
  Class isa;
  uint64_t v14;
  unint64_t v16;
  unint64_t v17;
  _BYTE v18[328];

  v9 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_1013DDAA8 != -1)
    swift_once(&qword_1013DDAA8, sub_100A74280);
  v14 = qword_101480A50;
  v10 = sub_1004B804C(&qword_1013E49B0);
  inited = swift_initStackObject(v10, v18);
  *(_OWORD *)(inited + 16) = xmmword_100EF5E30;
  v16 = 0xD000000000000010;
  v17 = 0x8000000100FB5A20;
  AnyHashable.init<A>(_:)(&v16, &type metadata for String, &protocol witness table for String);
  *(_QWORD *)(inited + 96) = sub_1004B804C(&qword_1013E4980);
  *(_QWORD *)(inited + 72) = a2;
  v16 = 0xD000000000000019;
  v17 = 0x8000000100FF02D0;
  swift_bridgeObjectRetain(a2);
  AnyHashable.init<A>(_:)(&v16, &type metadata for String, &protocol witness table for String);
  *(_QWORD *)(inited + 168) = &type metadata for Bool;
  *(_BYTE *)(inited + 144) = a3 & 1;
  v16 = 0xD000000000000010;
  v17 = 0x8000000100FF02F0;
  AnyHashable.init<A>(_:)(&v16, &type metadata for String, &protocol witness table for String);
  *(_QWORD *)(inited + 240) = &type metadata for Bool;
  *(_BYTE *)(inited + 216) = a4 & 1;
  v16 = 0xD00000000000001ALL;
  v17 = 0x8000000100FF0310;
  AnyHashable.init<A>(_:)(&v16, &type metadata for String, &protocol witness table for String);
  *(_QWORD *)(inited + 312) = sub_1004B804C(&qword_1014053E8);
  *(_QWORD *)(inited + 288) = a5;
  swift_bridgeObjectRetain(a5);
  v12 = sub_1008D5828(inited);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v9, "postNotificationName:object:userInfo:", v14, a1, isa, swift_bridgeObjectRelease(v12).n128_f64[0]);

}

uint64_t sub_100A75C10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  id v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD aBlock[5];
  uint64_t v36;

  v30 = a3;
  v31 = a4;
  v29 = a2;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v34 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v32 = *(_QWORD *)(v8 - 8);
  v33 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CRLBoardIdentifier(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v11);
  sub_1004B8930(0, (unint64_t *)&qword_1013DE090, OS_dispatch_queue_ptr);
  v14 = (void *)static OS_dispatch_queue.main.getter();
  sub_1004B8460(a1, (uint64_t)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for CRLBoardIdentifier);
  v15 = *(unsigned __int8 *)(v12 + 80);
  v16 = (v15 + 24) & ~v15;
  v17 = swift_allocObject(v29, v16 + v13, v15 | 7);
  v18 = v28;
  *(_QWORD *)(v17 + 16) = v28;
  sub_1004B84E0((uint64_t)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v17 + v16, type metadata accessor for CRLBoardIdentifier);
  aBlock[4] = v30;
  v36 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(_QWORD *)"";
  aBlock[2] = sub_1005D2FC0;
  aBlock[3] = v31;
  v19 = _Block_copy(aBlock);
  v20 = v36;
  v21 = v18;
  v22 = swift_release(v20);
  static DispatchQoS.unspecified.getter(v22);
  aBlock[0] = _swiftEmptyArrayStorage;
  v23 = sub_1004B7878((unint64_t *)&qword_1013E1D20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v24 = sub_1004B804C((uint64_t *)&unk_1013DFBF0);
  v25 = sub_1004CBA30((unint64_t *)&qword_1013E1D30, (uint64_t *)&unk_1013DFBF0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v24, v25, v5, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v7, v19);
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v34 + 8))(v7, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v10, v33);
}

void sub_100A75E8C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5)
{
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t inited;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  Class isa;
  _QWORD v25[2];
  _BYTE v26[104];

  v10 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (*a3 != -1)
    swift_once(a3, a5);
  v11 = *a4;
  v12 = sub_1004B804C(&qword_1013E49B0);
  inited = swift_initStackObject(v12, v26);
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  v25[0] = 0xD000000000000010;
  v25[1] = 0x8000000100FB5A20;
  AnyHashable.init<A>(_:)(v25, &type metadata for String, &protocol witness table for String);
  v14 = sub_1004B804C(&qword_1013E7870);
  v15 = type metadata accessor for CRLBoardIdentifier(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_QWORD *)(v16 + 72);
  v18 = *(unsigned __int8 *)(v16 + 80);
  v19 = (v18 + 32) & ~v18;
  v20 = swift_allocObject(v14, v19 + v17, v18 | 7);
  *(_OWORD *)(v20 + 16) = xmmword_100EF5E40;
  v21 = v20 + v19;
  sub_1004B8460(a2, v21, type metadata accessor for CRLBoardIdentifier);
  v22 = sub_100AF8AD8(v20, type metadata accessor for CRLBoardIdentifier, &qword_1013E9A00, (uint64_t)&unk_100F0215C, (void (*)(char *, char *))sub_100AD7844);
  swift_setDeallocating(v20);
  swift_arrayDestroy(v21, 1, v15);
  swift_deallocClassInstance(v20, 32, 7);
  *(_QWORD *)(inited + 96) = sub_1004B804C(&qword_1013E4980);
  *(_QWORD *)(inited + 72) = v22;
  v23 = sub_1008D5828(inited);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v10, "postNotificationName:object:userInfo:", v11, a1, isa, swift_bridgeObjectRelease(v23).n128_f64[0]);

}

uint64_t sub_100A760AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  id v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];
  _BYTE v10[24];

  v1 = type metadata accessor for CRLBoardDataStore.KeyValueTableKey(0);
  __chkstk_darwin(v1);
  v3 = (char *)v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1013DD8A0 != -1)
    swift_once(&qword_1013DD8A0, sub_100A0627C);
  swift_beginAccess(&static OS_os_log.upgrade, v10, 0, 0);
  v4 = (id)static OS_os_log.upgrade;
  v6 = static os_log_type_t.default.getter(v5);
  sub_100A06EBC((uint64_t)v4, &_mh_execute_header, v6, "Running upgrade code for rdar://102994991", 41, 2, (uint64_t)_swiftEmptyArrayStorage);

  v7 = swift_storeEnumTagMultiPayload(v3, v1, 6);
  __chkstk_darwin(v7);
  v9[-4] = v0;
  *(_OWORD *)&v9[-3] = xmmword_100F062D0;
  v9[-1] = v3;
  OS_dispatch_queue.sync<A>(execute:)(sub_100B00E58, &v9[-6], (char *)&type metadata for () + 8);
  return sub_1004B84A4((uint64_t)v3, type metadata accessor for CRLBoardDataStore.KeyValueTableKey);
}

uint64_t sub_100A76374()
{
  uint64_t v0;
  id v1;
  __n128 v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[5];
  _BYTE v7[24];

  if (qword_1013DD8A0 != -1)
    swift_once(&qword_1013DD8A0, sub_100A0627C);
  swift_beginAccess(&static OS_os_log.upgrade, v7, 0, 0);
  v1 = (id)static OS_os_log.upgrade;
  v3 = static os_log_type_t.default.getter(v2);
  sub_100A06EBC((uint64_t)v1, &_mh_execute_header, v3, "Running upgrade code for rdar://119152219", 41, 2, (uint64_t)_swiftEmptyArrayStorage);

  __chkstk_darwin(v4);
  v6[2] = v0;
  return OS_dispatch_queue.sync<A>(execute:)(sub_100B00E8C, v6, (char *)&type metadata for () + 8);
}

void sub_100A764C0(void *a1)
{
  char *v1;

  v1 = a1;
  sub_1004E6500(v1);

}

void sub_100A764FC(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  void *v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t, __n128);
  id v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  void *v23;
  id v24;
  sqlite3_stmt **v25;
  void *v26;
  id v27;
  int v28;
  void *v29;
  id v30;
  char v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  __n128 v35;
  void *v36;
  id v37;
  char v38;
  void *v39;
  uint64_t v40;
  uint64_t inited;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  char v53[8];
  uint64_t v54;
  uint64_t v55;
  char v56[8];
  char v57[24];
  char v58[72];
  uint64_t v59;
  unint64_t v60;
  char v61[32];

  v3 = v2;
  v4 = v1;
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = &v53[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v11 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *(_QWORD *)v10 = v11;
  v12 = enum case for DispatchPredicate.onQueue(_:);
  v13 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 104);
  v13(v10, enum case for DispatchPredicate.onQueue(_:), v6, v8);
  v14 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v10);
  v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v10, v6);
  if ((v11 & 1) == 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  v59 = 0;
  v60 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease(v60);
  v16 = *(_QWORD *)(v4 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v17 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v17, v61);
  swift_retain(v16);
  v19 = sub_1006B77CC(v18, 0xD000000000000037, 0x8000000100FF2BE0);
  if (v2)
  {
    v20 = v16;
    goto LABEL_15;
  }
  v21 = v19;
  v22 = swift_release(v16);
  v23 = *(void **)(*(_QWORD *)(v21 + 16) + 32);
  *(_QWORD *)v10 = v23;
  v13(v10, v12, v6, v22);
  v24 = v23;
  LOBYTE(v23) = _dispatchPreconditionTest(_:)(v10);
  v15(v10, v6);
  if ((v23 & 1) == 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  v25 = (sqlite3_stmt **)(v21 + 24);
  swift_beginAccess(v21 + 24, v57, 1, 0);
  sqlite3_bind_int(*(sqlite3_stmt **)(v21 + 24), 1, a1);
  v26 = *(void **)(*(_QWORD *)(v21 + 16) + 32);
  *(_QWORD *)v10 = v26;
  ((void (*)(char *, uint64_t, uint64_t))v13)(v10, v12, v6);
  v27 = v26;
  LOBYTE(v26) = _dispatchPreconditionTest(_:)(v10);
  v15(v10, v6);
  if ((v26 & 1) == 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v28 = sqlite3_step(*v25);
  if (v28 != 101)
  {
    v32 = v28;
    v33 = sub_1006B79EC();
    v3 = swift_allocError(&type metadata for SQLiteError, v33, 0, 0);
    *(_DWORD *)v34 = v32;
    *(_QWORD *)(v34 + 8) = 0xD00000000000003ELL;
    *(_QWORD *)(v34 + 16) = 0x8000000100FF2C60;
    swift_willThrow(v35);
    v36 = *(void **)(*(_QWORD *)(v21 + 16) + 32);
    *(_QWORD *)v10 = v36;
    ((void (*)(char *, uint64_t, uint64_t))v13)(v10, v12, v6);
    v37 = v36;
    v38 = _dispatchPreconditionTest(_:)(v10);
    v15(v10, v6);
    if ((v38 & 1) != 0)
    {
      if (*v25)
      {
        sqlite3_finalize(*v25);
        *(_QWORD *)(v21 + 24) = 0;
      }
      v20 = v21;
LABEL_15:
      swift_release(v20);
      if (qword_1013DD858 == -1)
      {
LABEL_16:
        swift_beginAccess(&static OS_os_log.boardStore, &v59, 0, 0);
        v39 = (void *)static OS_os_log.boardStore;
        v40 = sub_1004B804C((uint64_t *)&unk_1013E0180);
        inited = swift_initStackObject(v40, v58);
        *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
        swift_getErrorValue(v3, v56, v53);
        v42 = v54;
        v43 = v55;
        v44 = v39;
        v45 = Error.localizedDescription.getter(v42, v43);
        v47 = v46;
        *(_QWORD *)(inited + 56) = &type metadata for String;
        v48 = sub_1004CFC2C();
        *(_QWORD *)(inited + 64) = v48;
        *(_QWORD *)(inited + 32) = v45;
        *(_QWORD *)(inited + 40) = v47;
        v49 = static os_log_type_t.error.getter(v48);
        sub_100A06EBC((uint64_t)v44, &_mh_execute_header, v49, "Failed to removeAllBoardItemDatabaseRows with error %@", 54, 2, inited);
        swift_setDeallocating(inited);
        v50 = sub_1004B804C(&qword_1013E0190);
        swift_arrayDestroy(inited + 32, 1, v50);

        swift_willThrow(v51);
        return;
      }
LABEL_18:
      swift_once(&qword_1013DD858, sub_100A05554);
      goto LABEL_16;
    }
LABEL_22:
    __break(1u);
  }
  v29 = *(void **)(*(_QWORD *)(v21 + 16) + 32);
  *(_QWORD *)v10 = v29;
  ((void (*)(char *, uint64_t, uint64_t))v13)(v10, v12, v6);
  v30 = v29;
  v31 = _dispatchPreconditionTest(_:)(v10);
  v15(v10, v6);
  if ((v31 & 1) == 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (*v25)
  {
    sqlite3_finalize(*v25);
    *v25 = 0;
  }
  swift_release(v21);
}

void sub_100A769A4()
{
  id v0;
  __n128 v1;
  uint64_t v2;
  id v3;
  __n128 v4;
  uint64_t v5;
  _BYTE v6[24];

  if (qword_1013DD8A0 != -1)
    swift_once(&qword_1013DD8A0, sub_100A0627C);
  swift_beginAccess(&static OS_os_log.upgrade, v6, 0, 0);
  v0 = (id)static OS_os_log.upgrade;
  v2 = static os_log_type_t.default.getter(v1);
  sub_100A06EBC((uint64_t)v0, &_mh_execute_header, v2, "Running upgrade code for rdar://105187224", 41, 2, (uint64_t)_swiftEmptyArrayStorage);

  sub_100A76AB0(0);
  sub_100A76AB0(1);
  v3 = (id)static OS_os_log.upgrade;
  v5 = static os_log_type_t.default.getter(v4);
  sub_100A06EBC((uint64_t)v3, &_mh_execute_header, v5, "Finished running upgrade code for rdar://105187224", 50, 2, (uint64_t)_swiftEmptyArrayStorage);

}

void sub_100A76AB0(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  id v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  void *v28;
  uint64_t v29;
  uint64_t inited;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  unint64_t v34;
  id v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  id v50;
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __n128 v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  id v65;
  __n128 v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  id v75;
  __n128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  id v90;
  __n128 v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  char *v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD v113[5];
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118[3];
  uint64_t v119;
  uint64_t v120[3];
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD v127[37];

  v2 = v1;
  v109 = type metadata accessor for CKSyncEngine.State.Serialization(0);
  v105 = *(_QWORD *)(v109 - 8);
  __chkstk_darwin(v109);
  v108 = (char *)&v96 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CRLBoardDataStore.KeyValueTableKey(0);
  __chkstk_darwin(v5);
  v104 = (char *)&v96 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v96 - v8;
  __chkstk_darwin(v10);
  v13 = (char *)&v96 - v12;
  if ((a1 & 1) != 0)
    v14 = 6;
  else
    v14 = 5;
  v107 = v11;
  v106 = v14;
  swift_storeEnumTagMultiPayload((char *)&v96 - v12, v11, v14);
  v113[2] = v1;
  v113[3] = v13;
  v15 = sub_1004B804C(&qword_1013F9CE0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100B00E28, v113, v15);
  LODWORD(v112) = a1;
  v110 = v127[1];
  v111 = v127[0];
  sub_1004B84A4((uint64_t)v13, type metadata accessor for CRLBoardDataStore.KeyValueTableKey);
  if (qword_1013DD8A0 != -1)
    swift_once(&qword_1013DD8A0, sub_100A0627C);
  swift_beginAccess(&static OS_os_log.upgrade, &v114, 0, 0);
  v16 = (void *)static OS_os_log.upgrade;
  v17 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  v18 = swift_allocObject(v17, 72, 7);
  v19 = v18;
  *(_OWORD *)(v18 + 16) = xmmword_100EF5E40;
  if ((a1 & 1) != 0)
    v20 = 0x5320646572616853;
  else
    v20 = 0x2065746176697250;
  if ((a1 & 1) != 0)
    v21 = 0xEC00000065706F63;
  else
    v21 = 0xED000065706F6353;
  *(_QWORD *)(v18 + 56) = &type metadata for String;
  *(_QWORD *)(v18 + 64) = sub_1004CFC2C();
  *(_QWORD *)(v19 + 32) = v20;
  *(_QWORD *)(v19 + 40) = v21;
  v22 = v16;
  v24 = static os_log_type_t.default.getter(v23);
  sub_100A06EBC((uint64_t)v22, &_mh_execute_header, v24, "Successfully fetched %{public}@ oldSyncMetadata", 47, 2, v19);
  swift_setDeallocating(v19);
  v25 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(v19 + 32, 1, v25);
  swift_deallocClassInstance(v19, 32, 7);

  v26 = swift_storeEnumTagMultiPayload(v9, v107, v106);
  __chkstk_darwin(v26);
  v93 = v2;
  v94 = xmmword_100F062D0;
  v95 = v9;
  OS_dispatch_queue.sync<A>(execute:)(sub_100B00E58, &v96 - 3, (char *)&type metadata for () + 8);
  sub_1004B84A4((uint64_t)v9, type metadata accessor for CRLBoardDataStore.KeyValueTableKey);
  v27 = v112;
  if (qword_1013DD8A0 != -1)
    swift_once(&qword_1013DD8A0, sub_100A0627C);
  swift_beginAccess(&static OS_os_log.upgrade, &v116, 0, 0);
  v28 = (void *)static OS_os_log.upgrade;
  v29 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v29, &v115);
  v31 = inited;
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  v32 = (v27 & 1) == 0;
  if ((v27 & 1) != 0)
    v33 = 0x5320646572616853;
  else
    v33 = 0x2065746176697250;
  if (v32)
    v34 = 0xED000065706F6353;
  else
    v34 = 0xEC00000065706F63;
  *(_QWORD *)(inited + 56) = &type metadata for String;
  *(_QWORD *)(inited + 64) = sub_1004CFC2C();
  *(_QWORD *)(v31 + 32) = v33;
  *(_QWORD *)(v31 + 40) = v34;
  v35 = v28;
  v37 = static os_log_type_t.default.getter(v36);
  sub_100A06EBC((uint64_t)v35, &_mh_execute_header, v37, "Successfully deleted %{public}@ syncMetadata database entry", 59, 2, v31);
  swift_setDeallocating(v31);
  v38 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(v31 + 32, 1, v38);

  v39 = type metadata accessor for PropertyListEncoder(0);
  swift_allocObject(v39, *(unsigned int *)(v39 + 48), *(unsigned __int16 *)(v39 + 52));
  v40 = PropertyListEncoder.init()();
  v41 = v109;
  v42 = v110;
  v43 = v108;
  if (v110 >> 60 == 15)
  {
    if (qword_1013DD8A0 != -1)
      swift_once(&qword_1013DD8A0, sub_100A0627C);
    swift_beginAccess(&static OS_os_log.upgrade, v127, 0, 0);
    v44 = (void *)static OS_os_log.upgrade;
    v45 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    v46 = swift_initStackObject(v45, &v126);
    v47 = v46;
    *(_OWORD *)(v46 + 16) = xmmword_100EF5E40;
    if ((v112 & 1) != 0)
      v48 = 0x5320646572616853;
    else
      v48 = 0x2065746176697250;
    if ((v112 & 1) != 0)
      v49 = 0xEC00000065706F63;
    else
      v49 = 0xED000065706F6353;
    *(_QWORD *)(v46 + 56) = &type metadata for String;
    *(_QWORD *)(v46 + 64) = sub_1004CFC2C();
    *(_QWORD *)(v47 + 32) = v48;
    *(_QWORD *)(v47 + 40) = v49;
    v50 = v44;
    v52 = static os_log_type_t.default.getter(v51);
    sub_100A06EBC((uint64_t)v50, &_mh_execute_header, v52, "There was no %{public}@ oldSyncMetadata to convert.", 51, 2, v47);
    swift_setDeallocating(v47);
    v53 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(v47 + 32, 1, v53);

    if (qword_1013DD8A0 != -1)
      swift_once(&qword_1013DD8A0, sub_100A0627C);
    swift_beginAccess(&static OS_os_log.upgrade, &v125, 0, 0);
    v59 = (void *)static OS_os_log.upgrade;
    v60 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    v61 = swift_initStackObject(v60, &v124);
    v62 = v61;
    *(_OWORD *)(v61 + 16) = xmmword_100EF5E40;
    if ((v112 & 1) != 0)
      v63 = 0x5320646572616853;
    else
      v63 = 0x2065746176697250;
    if ((v112 & 1) != 0)
      v64 = 0xEC00000065706F63;
    else
      v64 = 0xED000065706F6353;
    *(_QWORD *)(v61 + 56) = &type metadata for String;
    *(_QWORD *)(v61 + 64) = sub_1004CFC2C();
    *(_QWORD *)(v62 + 32) = v63;
    *(_QWORD *)(v62 + 40) = v64;
    v65 = v59;
    v67 = static os_log_type_t.default.getter(v66);
    sub_100A06EBC((uint64_t)v65, &_mh_execute_header, v67, "There was no converted %{public}@ oldSyncMetadata to save.", 58, 2, v62);
    sub_1004BE2FC(v111, v42);
    swift_setDeallocating(v62);
    v68 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(v62 + 32, 1, v68);
    swift_release(v40);

  }
  else
  {
    v54 = v111;
    sub_1004BE310(v111, v110);
    CKSyncEngine.State.Serialization.init(deprecatedData:)(v54, v42);
    v55 = sub_1004B7878(&qword_1013E7DD8, (uint64_t (*)(uint64_t))&type metadata accessor for CKSyncEngine.State.Serialization, (uint64_t)&protocol conformance descriptor for CKSyncEngine.State.Serialization);
    v57 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v43, v41, v55, v56);
    v101 = 0;
    v102 = v58;
    v98 = v57;
    v103 = v40;
    if (qword_1013DD8A0 != -1)
      swift_once(&qword_1013DD8A0, sub_100A0627C);
    swift_beginAccess(&static OS_os_log.upgrade, v127, 0, 0);
    v69 = (void *)static OS_os_log.upgrade;
    v97 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    v70 = swift_initStackObject(v97, &v123);
    v71 = (_QWORD *)v70;
    v96 = xmmword_100EF5E40;
    *(_OWORD *)(v70 + 16) = xmmword_100EF5E40;
    if ((v112 & 1) != 0)
      v72 = 0x5320646572616853;
    else
      v72 = 0x2065746176697250;
    if ((v112 & 1) != 0)
      v73 = 0xEC00000065706F63;
    else
      v73 = 0xED000065706F6353;
    *(_QWORD *)(v70 + 56) = &type metadata for String;
    v74 = sub_1004CFC2C();
    v71[8] = v74;
    v99 = v73;
    v100 = v72;
    v71[4] = v72;
    v71[5] = v73;
    v75 = v69;
    v77 = static os_log_type_t.default.getter(v76);
    sub_100A06EBC((uint64_t)v75, &_mh_execute_header, v77, "Successfully converted %{public}@ oldSyncMetadata into new format.", 66, 2, (uint64_t)v71);
    swift_setDeallocating(v71);
    v112 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(v71 + 4, 1, v112);

    (*(void (**)(char *, uint64_t))(v105 + 8))(v108, v109);
    v78 = (uint64_t)v104;
    v79 = swift_storeEnumTagMultiPayload(v104, v107, v106);
    __chkstk_darwin(v79);
    v93 = v2;
    v80 = v98;
    v81 = v102;
    *(_QWORD *)&v94 = v98;
    *((_QWORD *)&v94 + 1) = v102;
    v95 = (char *)v78;
    sub_1004BE310(v98, v102);
    v82 = v101;
    OS_dispatch_queue.sync<A>(execute:)(sub_100B00E58, &v96 - 3, (char *)&type metadata for () + 8);
    sub_1004B84A4(v78, type metadata accessor for CRLBoardDataStore.KeyValueTableKey);
    if (v82)
    {
      sub_1004BBBC8(v80, v81);
      v83 = swift_initStackObject(v97, &v122);
      *(_OWORD *)(v83 + 16) = xmmword_100EF5550;
      *(_QWORD *)(v83 + 56) = &type metadata for String;
      *(_QWORD *)(v83 + 64) = v74;
      *(_QWORD *)(v83 + 32) = v100;
      *(_QWORD *)(v83 + 40) = v99;
      swift_getErrorValue(v82, &v121, v120);
      v84 = Error.publicDescription.getter(v120[1], v120[2]);
      *(_QWORD *)(v83 + 96) = &type metadata for String;
      *(_QWORD *)(v83 + 104) = v74;
      *(_QWORD *)(v83 + 72) = v84;
      *(_QWORD *)(v83 + 80) = v85;
      swift_getErrorValue(v82, &v119, v118);
      v86 = Error.fullDescription.getter(v118[1]);
      *(_QWORD *)(v83 + 136) = &type metadata for String;
      *(_QWORD *)(v83 + 144) = v74;
      *(_QWORD *)(v83 + 112) = v86;
      *(_QWORD *)(v83 + 120) = v87;
      sub_100757E04(&_mh_execute_header, (uint64_t)"upgradeSyncMetadataToNewFormat_105187224(syncScope:)", 52, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2, 1769, "Failed to save the new %{public}@ sync metadata with error=\"%{public}@ <%@>\"", 76, 2u, v83);
      sub_1004F5394(v83, (uint64_t)"upgradeSyncMetadataToNewFormat_105187224(syncScope:)", 52, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2u, 1769, (uint64_t)"Failed to save the new %{public}@ sync metadata with error=\"%{public}@ <%@>\"", 76, 2u);
      sub_1004BBBC8(v80, v81);
      sub_1004BE2FC(v111, v110);
      swift_release(v103);
      swift_setDeallocating(v83);
      swift_arrayDestroy(v83 + 32, 3, v112);
      swift_errorRelease(v82);
    }
    else
    {
      v88 = (void *)static OS_os_log.upgrade;
      v89 = swift_initStackObject(v97, &v117);
      *(_OWORD *)(v89 + 16) = v96;
      *(_QWORD *)(v89 + 56) = &type metadata for String;
      *(_QWORD *)(v89 + 64) = v74;
      *(_QWORD *)(v89 + 32) = v100;
      *(_QWORD *)(v89 + 40) = v99;
      v90 = v88;
      v92 = static os_log_type_t.default.getter(v91);
      sub_100A06EBC((uint64_t)v90, &_mh_execute_header, v92, "Successfully saved the new format of %{public}@ sync metadata", 61, 2, v89);
      sub_1004BE2FC(v111, v110);
      sub_1004BBBC8(v80, v81);
      sub_1004BBBC8(v80, v81);
      swift_setDeallocating(v89);
      swift_arrayDestroy(v89 + 32, 1, v112);
      swift_release(v103);

    }
  }
}

void sub_100A77B1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  void (*v8)(_QWORD *, uint64_t, uint64_t);
  id v9;
  void (*v10)(_QWORD *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  id v13;
  char v14;
  sqlite3_stmt **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v5 = v6;
  v7 = enum case for DispatchPredicate.onQueue(_:);
  v8 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v3 + 104);
  v8(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  v9 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v5);
  v10 = *(void (**)(_QWORD *, uint64_t))(v3 + 8);
  v10(v5, v2);
  if ((v6 & 1) == 0)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return;
  }
  v11 = sub_100A77CB8();
  if (!v1)
  {
    v12 = v11;
    *v5 = v9;
    v8(v5, v7, v2);
    v13 = v9;
    v14 = _dispatchPreconditionTest(_:)(v5);
    v10(v5, v2);
    if ((v14 & 1) != 0)
    {
      v15 = sub_100A7A110();
      sub_100A63EF0((uint64_t)v15);
      v17 = v16;
      swift_bridgeObjectRelease(v15);
      v18 = sub_100AF8AD8(v17, type metadata accessor for CRLBoardIdentifier, &qword_1013E9A00, (uint64_t)&unk_100F0215C, (void (*)(char *, char *))sub_100AD7844);
      swift_bridgeObjectRelease(v17);
      sub_100CA07CC(v18, v12);
      return;
    }
    goto LABEL_7;
  }
}

uint64_t sub_100A77CB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  void (*v21)(_QWORD);
  id v22;
  void (*v23)(_QWORD *, uint64_t);
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  Swift::String v42;
  Swift::String v43;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;
  Swift::String v48;
  Swift::String v49;
  Swift::String v50;
  Swift::String v51;
  Swift::String v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t inited;
  uint64_t v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __n128 v71;
  uint64_t v72;
  sqlite3_int64 v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(_QWORD *, uint64_t, uint64_t, __n128);
  id v80;
  void (*v81)(_QWORD *, uint64_t);
  uint64_t v82;
  _QWORD *v83;
  void *v84;
  __n128 v85;
  uint64_t v86;
  id v87;
  void (*v88)(_QWORD, _QWORD, _QWORD);
  _QWORD *v89;
  void (*v90)(_QWORD *, uint64_t);
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  id v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  unsigned int v109;
  void *v110;
  void (*v111)(_QWORD *, uint64_t);
  void (*v112)(_QWORD, _QWORD, _QWORD);
  uint64_t v113;
  uint64_t v114;
  void (*v115)(_QWORD, _QWORD, _QWORD);
  uint64_t v116;
  id v117;
  void *v118;
  uint64_t v119;
  void (*v120)(_QWORD, _QWORD, _QWORD);
  id v121;
  _QWORD *v122;
  sqlite3_stmt **v123;
  _BYTE *v124;
  _BYTE *v125;
  int v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  char *v130;
  uint64_t v131;
  id v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  __n128 v139;
  void *v140;
  uint64_t v141;
  id v142;
  uint64_t v143;
  sqlite3_stmt *v144;
  _QWORD *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void (*v153)(_QWORD *, uint64_t);
  void (*v154)(_QWORD *, uint64_t, uint64_t, __n128);
  uint64_t v155;
  char *v156;
  _QWORD *v157;
  uint64_t v158;
  _QWORD *v159;
  sqlite3_stmt **v160;
  uint64_t v161;
  unsigned int v162;
  uint64_t v163;
  _QWORD v164[3];
  uint64_t v165;
  uint64_t v166;
  void *v167;
  uint64_t v168;
  char v169[72];
  uint64_t v170;
  unint64_t v171;
  char v172[32];

  v2 = v0;
  v3 = type metadata accessor for CRLBoardIdentifierStorage(0);
  __chkstk_darwin(v3);
  v156 = (char *)&v146 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CRLBoardIdentifier(0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v146 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v152 = (uint64_t)&v146 - v10;
  v11 = __chkstk_darwin(v9);
  v151 = (uint64_t)&v146 - v12;
  v13 = __chkstk_darwin(v11);
  v150 = (uint64_t)&v146 - v14;
  __chkstk_darwin(v13);
  v155 = (uint64_t)&v146 - v15;
  v16 = type metadata accessor for DispatchPredicate(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (_QWORD **)((char *)&v146 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v19 = v20;
  v21 = *(void (**)(_QWORD))(v17 + 104);
  v162 = enum case for DispatchPredicate.onQueue(_:);
  v154 = (void (*)(_QWORD *, uint64_t, uint64_t, __n128))v21;
  v21(v19);
  v22 = v20;
  LOBYTE(v20) = _dispatchPreconditionTest(_:)(v19);
  v23 = *(void (**)(_QWORD *, uint64_t))(v17 + 8);
  v163 = v16;
  v153 = v23;
  v23(v19, v16);
  if ((v20 & 1) == 0)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v170 = 0;
  v171 = 0xE000000000000000;
  _StringGuts.grow(_:)(102);
  v24._countAndFlagsBits = 0x205443454C4553;
  v24._object = (void *)0xE700000000000000;
  String.append(_:)(v24);
  v25._countAndFlagsBits = 0x736472616F62;
  v25._object = (void *)0xE600000000000000;
  String.append(_:)(v25);
  v26._countAndFlagsBits = 46;
  v26._object = (void *)0xE100000000000000;
  String.append(_:)(v26);
  v27._countAndFlagsBits = 0xD000000000000010;
  v27._object = (void *)0x8000000100FD6350;
  String.append(_:)(v27);
  v28._countAndFlagsBits = 0x204D4F524620;
  v28._object = (void *)0xE600000000000000;
  String.append(_:)(v28);
  v29._countAndFlagsBits = 0x736472616F62;
  v29._object = (void *)0xE600000000000000;
  String.append(_:)(v29);
  v30._countAndFlagsBits = 0x4A2052454E4E4920;
  v30._object = (void *)0xEC000000204E494FLL;
  String.append(_:)(v30);
  v31._countAndFlagsBits = 0x74695F6472616F62;
  v31._object = (void *)0xEB00000000736D65;
  String.append(_:)(v31);
  v32._countAndFlagsBits = 542002976;
  v32._object = (void *)0xE400000000000000;
  String.append(_:)(v32);
  v33._countAndFlagsBits = 0x74695F6472616F62;
  v33._object = (void *)0xEB00000000736D65;
  String.append(_:)(v33);
  v34._countAndFlagsBits = 46;
  v34._object = (void *)0xE100000000000000;
  String.append(_:)(v34);
  v35._countAndFlagsBits = 0xD000000000000010;
  v35._object = (void *)0x8000000100FD6350;
  String.append(_:)(v35);
  v36._countAndFlagsBits = 2112800;
  v36._object = (void *)0xE300000000000000;
  String.append(_:)(v36);
  v37._countAndFlagsBits = 0x736472616F62;
  v37._object = (void *)0xE600000000000000;
  String.append(_:)(v37);
  v38._countAndFlagsBits = 46;
  v38._object = (void *)0xE100000000000000;
  String.append(_:)(v38);
  v39._countAndFlagsBits = 0xD000000000000010;
  v39._object = (void *)0x8000000100FD6350;
  String.append(_:)(v39);
  v40._countAndFlagsBits = 0x20455245485720;
  v40._object = (void *)0xE700000000000000;
  String.append(_:)(v40);
  v41._countAndFlagsBits = 0x736472616F62;
  v41._object = (void *)0xE600000000000000;
  String.append(_:)(v41);
  v42._countAndFlagsBits = 46;
  v42._object = (void *)0xE100000000000000;
  String.append(_:)(v42);
  v43._countAndFlagsBits = 0xD000000000000014;
  v43._object = (void *)0x8000000100FEEDE0;
  String.append(_:)(v43);
  v44._countAndFlagsBits = 0x20524F203F203E20;
  v44._object = (void *)0xE900000000000028;
  String.append(_:)(v44);
  v45._countAndFlagsBits = 0x74695F6472616F62;
  v45._object = (void *)0xEB00000000736D65;
  String.append(_:)(v45);
  v46._countAndFlagsBits = 46;
  v46._object = (void *)0xE100000000000000;
  String.append(_:)(v46);
  v47._countAndFlagsBits = 0xD000000000000014;
  v47._object = (void *)0x8000000100FEEDE0;
  String.append(_:)(v47);
  v48._countAndFlagsBits = 0x444E41203F203E20;
  v48._object = (void *)0xEA00000000002820;
  String.append(_:)(v48);
  v49._countAndFlagsBits = 0x74695F6472616F62;
  v49._object = (void *)0xEB00000000736D65;
  String.append(_:)(v49);
  v50._countAndFlagsBits = 46;
  v50._object = (void *)0xE100000000000000;
  String.append(_:)(v50);
  v51._countAndFlagsBits = 0x6F5F7463656A626FLL;
  v51._object = (void *)0xEE00736E6F697470;
  String.append(_:)(v51);
  v52._object = (void *)0xEA00000000002930;
  v52._countAndFlagsBits = 0x203E20293F202620;
  String.append(_:)(v52);
  v53 = v170;
  v54 = v171;
  v55 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v56 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v56, v172);
  swift_retain(v55);
  v58 = sub_1006B77CC(v57, v53, v54);
  v158 = v1;
  if (v1)
  {
    swift_release(v55);
    if (qword_1013DD858 == -1)
    {
LABEL_4:
      swift_beginAccess(&static OS_os_log.boardStore, &v170, 0, 0);
      v59 = (void *)static OS_os_log.boardStore;
      v60 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      inited = swift_initStackObject(v60, v169);
      *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
      swift_getErrorValue(v158, &v165, v164);
      v62 = v164[1];
      v63 = v164[2];
      v64 = v59;
      v65 = Error.localizedDescription.getter(v62, v63);
      v67 = v66;
      *(_QWORD *)(inited + 56) = &type metadata for String;
      v68 = sub_1004CFC2C();
      *(_QWORD *)(inited + 64) = v68;
      *(_QWORD *)(inited + 32) = v65;
      *(_QWORD *)(inited + 40) = v67;
      v69 = static os_log_type_t.error.getter(v68);
      sub_100A06EBC((uint64_t)v64, &_mh_execute_header, v69, "Failed to fetch list of unsupported boards with error %@", 56, 2, inited);
      swift_setDeallocating(inited);
      v70 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(inited + 32, 1, v70);

      swift_willThrow(v71);
      return v65;
    }
LABEL_33:
    swift_once(&qword_1013DD858, sub_100A05554);
    goto LABEL_4;
  }
  v72 = v58;
  swift_release(v55);
  v73 = sub_1001E9730();
  sub_1006B5B50(v73, 1);
  sub_1006B5B50(v73, 2);
  sub_1006B5B50(1, 3);
  v167 = &_swiftEmptySetSingleton;
  v74 = *(_QWORD *)(v72 + 16);
  v149 = v72 + 16;
  v75 = *(void **)(v74 + 32);
  *v19 = v75;
  v76 = v72;
  v77 = v162;
  v78 = v163;
  v79 = v154;
  ((void (*)(_QWORD *, _QWORD, uint64_t))v154)(v19, v162, v163);
  v80 = v75;
  LOBYTE(v72) = _dispatchPreconditionTest(_:)(v19);
  v81 = v153;
  v153(v19, v78);
  if ((v72 & 1) == 0)
  {
    __break(1u);
    goto LABEL_35;
  }
  v147 = v8;
  v82 = type metadata accessor for SQLiteRowIterator();
  v83 = (_QWORD *)swift_initStackObject(v82, &v168);
  v83[3] = 0;
  v159 = v83 + 3;
  v83[4] = 0;
  v146 = v83 + 4;
  v83[5] = 1;
  v83[2] = v76;
  v84 = *(void **)(*(_QWORD *)(v76 + 16) + 32);
  *v19 = v84;
  v148 = v76;
  v85 = swift_retain(v76);
  v86 = v163;
  v79(v19, v77, v163, v85);
  v87 = v84;
  LOBYTE(v84) = _dispatchPreconditionTest(_:)(v19);
  v81(v19, v86);
  if ((v84 & 1) == 0)
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v88 = (void (*)(_QWORD, _QWORD, _QWORD))v79;
  v89 = v83;
  v90 = v81;
  v92 = v148;
  v91 = v149;
  v157 = v89;
  while (1)
  {
    v105 = v89[3];
    v106 = v89[4];
    v107 = v89[5];
    v108 = v159;
    *v159 = 0;
    v108[1] = 0;
    v89[5] = 1;
    sub_1006B7DA4(v105, v106, v107);
    swift_beginAccess(v92 + 24, &v170, 0, 0);
    v109 = sqlite3_step(*(sqlite3_stmt **)(v92 + 24));
    if (v109 != 100)
      break;
    v160 = (sqlite3_stmt **)(v92 + 24);
    v110 = *(void **)(*(_QWORD *)v91 + 32);
    *v19 = v110;
    v111 = v90;
    v112 = v88;
    v113 = v162;
    v114 = v92;
    v115 = v112;
    v116 = v163;
    v112(v19, v162, v163);
    v161 = v114;
    swift_retain(v114);
    v117 = v110;
    LOBYTE(v110) = _dispatchPreconditionTest(_:)(v19);
    v111(v19, v116);
    if ((v110 & 1) == 0)
      goto LABEL_30;
    v118 = *(void **)(*(_QWORD *)v91 + 32);
    *v19 = v118;
    v119 = v163;
    v120 = v115;
    v115(v19, v113, v163);
    v121 = v118;
    LOBYTE(v118) = _dispatchPreconditionTest(_:)(v19);
    v122 = v19;
    v111(v19, v119);
    if ((v118 & 1) == 0)
      goto LABEL_31;
    v90 = v111;
    v123 = v160;
    if (sqlite3_column_type(*v160, 0) == 5)
    {
      v88 = v120;
LABEL_18:
      v89 = v157;
      if (qword_1013DD858 != -1)
        swift_once(&qword_1013DD858, sub_100A05554);
      swift_beginAccess(&static OS_os_log.boardStore, &v166, 0, 0);
      v132 = (id)static OS_os_log.boardStore;
      v133 = static os_log_type_t.error.getter(v132);
      sub_100A06EBC((uint64_t)v132, &_mh_execute_header, v133, "Failure reading board identifier data.", 38, 2, (uint64_t)_swiftEmptyArrayStorage);

      swift_release(v161);
      goto LABEL_9;
    }
    v124 = sqlite3_column_blob(*v123, 0);
    v88 = v120;
    if (!v124)
      goto LABEL_18;
    v125 = v124;
    v126 = sqlite3_column_bytes(*v123, 0);
    v127 = sub_1005CB82C(v125, v126);
    v129 = v128;
    sub_1004BE310(v127, v128);
    v130 = v156;
    v131 = v158;
    sub_10067B2E0(v127, v129);
    if (v131)
    {
      swift_errorRelease(v131);
      sub_1004BBBC8(v127, v129);
      v158 = 0;
      goto LABEL_18;
    }
    v158 = 0;
    v93 = (uint64_t)v130;
    v94 = v151;
    sub_1004B84E0(v93, v151, type metadata accessor for CRLBoardIdentifierStorage);
    v95 = v94;
    v96 = v150;
    sub_1004B84E0(v95, v150, type metadata accessor for CRLBoardIdentifier);
    v97 = v96;
    v98 = v155;
    sub_1004B84E0(v97, v155, type metadata accessor for CRLBoardIdentifier);
    v99 = (uint64_t)v147;
    sub_1004B8460(v98, (uint64_t)v147, type metadata accessor for CRLBoardIdentifier);
    v100 = v152;
    v90 = v153;
    v101 = v99;
    v88 = (void (*)(_QWORD, _QWORD, _QWORD))v154;
    sub_100AD7844(v152, v101);
    swift_release(v161);
    sub_1004BBBC8(v127, v129);
    sub_1004B84A4(v100, type metadata accessor for CRLBoardIdentifier);
    sub_1004B84A4(v155, type metadata accessor for CRLBoardIdentifier);
    v89 = v157;
LABEL_9:
    v19 = v122;
    v92 = v89[2];
    v91 = v92 + 16;
    v102 = *(void **)(*(_QWORD *)(v92 + 16) + 32);
    *v19 = v102;
    v103 = v163;
    v88(v19, v162, v163);
    v104 = v102;
    LOBYTE(v102) = _dispatchPreconditionTest(_:)(v19);
    v90(v19, v103);
    if ((v102 & 1) == 0)
      goto LABEL_29;
  }
  if (v109 && v109 != 101)
  {
    v134 = v109;
    v135 = v89[3];
    v136 = v89[4];
    v137 = v89[5];
    v89[3] = v134;
    v138 = v146;
    *v146 = 0;
    v138[1] = 0;
    sub_1006B7DA4(v135, v136, v137);
  }
  v139 = swift_release(v89);
  v65 = (uint64_t)v167;
  v140 = *(void **)(*(_QWORD *)v149 + 32);
  *v19 = v140;
  v141 = v163;
  ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v88)(v19, v162, v163, v139);
  v142 = v140;
  LOBYTE(v140) = _dispatchPreconditionTest(_:)(v19);
  v90(v19, v141);
  v143 = v148;
  if ((v140 & 1) == 0)
LABEL_35:
    __break(1u);
  swift_beginAccess(v148 + 24, &v167, 1, 0);
  v144 = *(sqlite3_stmt **)(v143 + 24);
  if (v144)
  {
    sqlite3_finalize(v144);
    *(_QWORD *)(v143 + 24) = 0;
  }
  swift_release(v143);
  return v65;
}

uint64_t sub_100A787E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  void (*v22)(_QWORD);
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t inited;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  void (*v46)(_QWORD *, uint64_t, uint64_t, __n128);
  id v47;
  void (*v48)(_QWORD *, uint64_t);
  uint64_t v49;
  _QWORD *v50;
  void *v51;
  __n128 v52;
  id v53;
  void (*v54)(_QWORD *, _QWORD, uint64_t);
  _QWORD *v55;
  void (*v56)(_QWORD *, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(_QWORD *, _QWORD, uint64_t);
  void *v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  unsigned int v75;
  void *v76;
  uint64_t v77;
  void (*v78)(_QWORD *, _QWORD, uint64_t);
  uint64_t v79;
  id v80;
  void *v81;
  uint64_t v82;
  id v83;
  sqlite3_stmt **v84;
  _BYTE *v85;
  _BYTE *v86;
  int v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  __n128 v101;
  void *v102;
  id v103;
  uint64_t v104;
  sqlite3_stmt *v105;
  uint64_t v107;
  _QWORD *v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void (*v115)(_QWORD *, uint64_t);
  void (*v116)(_QWORD *, uint64_t, uint64_t, __n128);
  uint64_t v117;
  char *v118;
  _QWORD *v119;
  uint64_t v120;
  _QWORD *v121;
  sqlite3_stmt **v122;
  uint64_t v123;
  unsigned int v124;
  _QWORD v125[3];
  uint64_t v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  char v130[72];
  uint64_t v131;
  unint64_t v132;
  char v133[32];

  v2 = v0;
  v3 = type metadata accessor for CRLBoardIdentifierStorage(0);
  __chkstk_darwin(v3);
  v118 = (char *)&v107 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CRLBoardIdentifier(0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v107 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v107 - v10;
  v12 = __chkstk_darwin(v9);
  v114 = (uint64_t)&v107 - v13;
  v14 = __chkstk_darwin(v12);
  v113 = (uint64_t)&v107 - v15;
  __chkstk_darwin(v14);
  v117 = (uint64_t)&v107 - v16;
  v17 = type metadata accessor for DispatchPredicate(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (uint64_t *)((char *)&v107 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v20 = v21;
  v22 = *(void (**)(_QWORD))(v18 + 104);
  v124 = enum case for DispatchPredicate.onQueue(_:);
  v116 = (void (*)(_QWORD *, uint64_t, uint64_t, __n128))v22;
  v22(v20);
  v23 = v21;
  LOBYTE(v21) = _dispatchPreconditionTest(_:)(v20);
  v115 = *(void (**)(_QWORD *, uint64_t))(v18 + 8);
  v115(v20, v17);
  if ((v21 & 1) == 0)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v131 = 0;
  v132 = 0xE000000000000000;
  _StringGuts.grow(_:)(46);
  swift_bridgeObjectRelease(v132);
  v24 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v25 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v25, v133);
  swift_retain(v24);
  v27 = sub_1006B77CC(v26, 0xD000000000000058, 0x8000000100FEF550);
  v120 = v1;
  if (v1)
  {
    swift_release(v24);
    if (qword_1013DD858 == -1)
    {
LABEL_4:
      swift_beginAccess(&static OS_os_log.boardStore, &v131, 0, 0);
      v28 = (void *)static OS_os_log.boardStore;
      v29 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      inited = swift_initStackObject(v29, v130);
      *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
      swift_getErrorValue(v120, &v126, v125);
      v31 = v125[1];
      v32 = v125[2];
      v33 = v28;
      v34 = Error.localizedDescription.getter(v31, v32);
      v36 = v35;
      *(_QWORD *)(inited + 56) = &type metadata for String;
      v37 = sub_1004CFC2C();
      *(_QWORD *)(inited + 64) = v37;
      *(_QWORD *)(inited + 32) = v34;
      *(_QWORD *)(inited + 40) = v36;
      v38 = static os_log_type_t.error.getter(v37);
      sub_100A06EBC((uint64_t)v33, &_mh_execute_header, v38, "Failed to fetch list of discardable boards with error %@", 56, 2, inited);
      swift_setDeallocating(inited);
      v39 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(inited + 32, 1, v39);

      swift_willThrow(v40);
      return v34;
    }
LABEL_32:
    swift_once(&qword_1013DD858, sub_100A05554);
    goto LABEL_4;
  }
  v41 = v27;
  v110 = v8;
  v42 = swift_release(v24);
  v128 = &_swiftEmptySetSingleton;
  v43 = *(_QWORD *)(v41 + 16);
  v112 = v41 + 16;
  v44 = *(void **)(v43 + 32);
  *v20 = v44;
  v45 = v124;
  v46 = v116;
  v116(v20, v124, v17, v42);
  v47 = v44;
  LOBYTE(v44) = _dispatchPreconditionTest(_:)(v20);
  v48 = v115;
  v115(v20, v17);
  if ((v44 & 1) == 0)
  {
    __break(1u);
    goto LABEL_34;
  }
  v109 = v11;
  v49 = type metadata accessor for SQLiteRowIterator();
  v50 = (_QWORD *)swift_initStackObject(v49, &v129);
  v50[3] = 0;
  v121 = v50 + 3;
  v50[4] = 0;
  v108 = v50 + 4;
  v50[5] = 1;
  v50[2] = v41;
  v51 = *(void **)(*(_QWORD *)(v41 + 16) + 32);
  *v20 = v51;
  v111 = v41;
  v52 = swift_retain(v41);
  v46(v20, v45, v17, v52);
  v53 = v51;
  LOBYTE(v51) = _dispatchPreconditionTest(_:)(v20);
  v48(v20, v17);
  if ((v51 & 1) == 0)
  {
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v54 = (void (*)(_QWORD *, _QWORD, uint64_t))v46;
  v55 = v50;
  v56 = v48;
  v58 = v111;
  v57 = v112;
  v119 = v55;
  while (1)
  {
    v71 = v55[3];
    v72 = v55[4];
    v73 = v55[5];
    v74 = v121;
    *v121 = 0;
    v74[1] = 0;
    v55[5] = 1;
    sub_1006B7DA4(v71, v72, v73);
    swift_beginAccess(v58 + 24, &v131, 0, 0);
    v75 = sqlite3_step(*(sqlite3_stmt **)(v58 + 24));
    if (v75 != 100)
      break;
    v122 = (sqlite3_stmt **)(v58 + 24);
    v76 = *(void **)(*(_QWORD *)v57 + 32);
    *v20 = v76;
    v77 = v58;
    v78 = v54;
    v79 = v124;
    v78(v20, v124, v17);
    v123 = v77;
    swift_retain(v77);
    v80 = v76;
    LOBYTE(v76) = _dispatchPreconditionTest(_:)(v20);
    v56(v20, v17);
    if ((v76 & 1) == 0)
      goto LABEL_29;
    v81 = *(void **)(*(_QWORD *)v57 + 32);
    *v20 = v81;
    v82 = v79;
    v54 = v78;
    v78(v20, v82, v17);
    v83 = v81;
    LOBYTE(v81) = _dispatchPreconditionTest(_:)(v20);
    v56(v20, v17);
    if ((v81 & 1) == 0)
      goto LABEL_30;
    v84 = v122;
    if (sqlite3_column_type(*v122, 0) == 5)
      goto LABEL_17;
    v85 = sqlite3_column_blob(*v84, 0);
    if (!v85)
      goto LABEL_17;
    v86 = v85;
    v87 = sqlite3_column_bytes(*v84, 0);
    v88 = sub_1005CB82C(v86, v87);
    v90 = v89;
    sub_1004BE310(v88, v89);
    v91 = v118;
    v92 = v120;
    sub_10067B2E0(v88, v90);
    if (v92)
    {
      swift_errorRelease(v92);
      sub_1004BBBC8(v88, v90);
      v120 = 0;
LABEL_17:
      v55 = v119;
      v93 = v123;
      if (qword_1013DD858 != -1)
        swift_once(&qword_1013DD858, sub_100A05554);
      swift_beginAccess(&static OS_os_log.boardStore, &v127, 0, 0);
      v94 = (id)static OS_os_log.boardStore;
      v95 = static os_log_type_t.error.getter(v94);
      sub_100A06EBC((uint64_t)v94, &_mh_execute_header, v95, "Failure reading board identifier data.", 38, 2, (uint64_t)_swiftEmptyArrayStorage);

      swift_release(v93);
      goto LABEL_9;
    }
    v120 = 0;
    v59 = (uint64_t)v91;
    v60 = v114;
    sub_1004B84E0(v59, v114, type metadata accessor for CRLBoardIdentifierStorage);
    v61 = v60;
    v62 = v113;
    sub_1004B84E0(v61, v113, type metadata accessor for CRLBoardIdentifier);
    v63 = v62;
    v64 = v117;
    sub_1004B84E0(v63, v117, type metadata accessor for CRLBoardIdentifier);
    v65 = (uint64_t)v110;
    sub_1004B8460(v64, (uint64_t)v110, type metadata accessor for CRLBoardIdentifier);
    v66 = (uint64_t)v109;
    v67 = v65;
    v56 = v115;
    v68 = (void (*)(_QWORD *, _QWORD, uint64_t))v116;
    sub_100AD7844((uint64_t)v109, v67);
    swift_release(v123);
    sub_1004BBBC8(v88, v90);
    sub_1004B84A4(v66, type metadata accessor for CRLBoardIdentifier);
    v54 = v68;
    sub_1004B84A4(v117, type metadata accessor for CRLBoardIdentifier);
    v55 = v119;
LABEL_9:
    v58 = v55[2];
    v57 = v58 + 16;
    v69 = *(void **)(*(_QWORD *)(v58 + 16) + 32);
    *v20 = v69;
    v54(v20, v124, v17);
    v70 = v69;
    LOBYTE(v69) = _dispatchPreconditionTest(_:)(v20);
    v56(v20, v17);
    if ((v69 & 1) == 0)
      goto LABEL_28;
  }
  if (v75 && v75 != 101)
  {
    v96 = v75;
    v97 = v55[3];
    v98 = v55[4];
    v99 = v55[5];
    v55[3] = v96;
    v100 = v108;
    *v108 = 0;
    v100[1] = 0;
    sub_1006B7DA4(v97, v98, v99);
  }
  v101 = swift_release(v55);
  v34 = (uint64_t)v128;
  v102 = *(void **)(*(_QWORD *)v112 + 32);
  *v20 = v102;
  ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v54)(v20, v124, v17, v101);
  v103 = v102;
  LOBYTE(v102) = _dispatchPreconditionTest(_:)(v20);
  v56(v20, v17);
  v104 = v111;
  if ((v102 & 1) == 0)
LABEL_34:
    __break(1u);
  swift_beginAccess(v111 + 24, &v128, 1, 0);
  v105 = *(sqlite3_stmt **)(v104 + 24);
  if (v105)
  {
    sqlite3_finalize(v105);
    *(_QWORD *)(v104 + 24) = 0;
  }
  swift_release(v104);
  return v34;
}

id sub_100A79050()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  unsigned int v22;
  id v23;
  void (*v24)(_QWORD *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  void (*v37)(_QWORD *, uint64_t, uint64_t, __n128);
  id v38;
  uint64_t v39;
  _QWORD *inited;
  void *v41;
  __n128 v42;
  id v43;
  void (*v44)(_QWORD *, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  void *v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  sqlite3_stmt **v54;
  unsigned int v55;
  uint64_t v56;
  void *v57;
  id v58;
  void *v59;
  id v60;
  _BYTE *v61;
  _BYTE *v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  __n128 v84;
  void *v85;
  id v86;
  uint64_t v87;
  sqlite3_stmt *v88;
  uint64_t v90;
  _QWORD *v91;
  void (*v92)(_QWORD *, uint64_t);
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(_QWORD *, uint64_t, uint64_t, __n128);
  uint64_t v100;
  char *v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  unsigned int v105;
  void *v106;
  char v107[48];
  _QWORD v108[3];
  char v109[32];

  v2 = v0;
  v3 = type metadata accessor for CRLBoardIdentifierStorage(0);
  __chkstk_darwin(v3);
  v101 = (char *)&v90 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v90 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v98 = (uint64_t)&v90 - v9;
  __chkstk_darwin(v10);
  v97 = (uint64_t)&v90 - v11;
  __chkstk_darwin(v12);
  v96 = (uint64_t)&v90 - v13;
  __chkstk_darwin(v14);
  v100 = (uint64_t)&v90 - v15;
  v16 = type metadata accessor for DispatchPredicate(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (uint64_t *)((char *)&v90 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v20 = v21;
  v22 = enum case for DispatchPredicate.onQueue(_:);
  v99 = *(void (**)(_QWORD *, uint64_t, uint64_t, __n128))(v17 + 104);
  v99(v20, enum case for DispatchPredicate.onQueue(_:), v16, v18);
  v23 = v21;
  LOBYTE(v21) = _dispatchPreconditionTest(_:)(v20);
  v24 = *(void (**)(_QWORD *, uint64_t))(v17 + 8);
  v24(v20, v16);
  if ((v21 & 1) == 0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v105 = v22;
  v108[0] = 0;
  v108[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(37);
  swift_bridgeObjectRelease();
  v25 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v26 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v26, v109);
  swift_retain(v25);
  v28 = sub_1006B77CC(v27, 0xD000000000000050, 0x8000000100FF5DB0);
  v102 = v1;
  if (v1)
  {
    swift_release(v25);
    if (qword_1013DD858 == -1)
    {
LABEL_4:
      swift_beginAccess(&static OS_os_log.boardStore, v108, 0, 0);
      v29 = (id)static OS_os_log.boardStore;
      v30 = static os_log_type_t.error.getter(v29);
      sub_100A06EBC((uint64_t)v29, &_mh_execute_header, v30, "Failed to fetch shared boards that were deleted while offline", 61, 2, (uint64_t)_swiftEmptyArrayStorage);

      swift_willThrow(v31);
      return v29;
    }
LABEL_31:
    swift_once(&qword_1013DD858, sub_100A05554);
    goto LABEL_4;
  }
  v32 = v28;
  v33 = swift_release(v25);
  v106 = &_swiftEmptySetSingleton;
  v34 = *(_QWORD *)(v32 + 16);
  v95 = v32 + 16;
  v35 = *(void **)(v34 + 32);
  *v20 = v35;
  v36 = v105;
  v37 = v99;
  v99(v20, v105, v16, v33);
  v38 = v35;
  LOBYTE(v35) = _dispatchPreconditionTest(_:)(v20);
  v24(v20, v16);
  if ((v35 & 1) == 0)
  {
    __break(1u);
    goto LABEL_33;
  }
  v93 = v7;
  v39 = type metadata accessor for SQLiteRowIterator();
  inited = (_QWORD *)swift_initStackObject(v39, v107);
  inited[3] = 0;
  v103 = inited + 3;
  inited[4] = 0;
  v91 = inited + 4;
  inited[5] = 1;
  inited[2] = v32;
  v41 = *(void **)(*(_QWORD *)(v32 + 16) + 32);
  *v20 = v41;
  v94 = v32;
  v42 = swift_retain(v32);
  v37(v20, v36, v16, v42);
  v43 = v41;
  LOBYTE(v41) = _dispatchPreconditionTest(_:)(v20);
  v24(v20, v16);
  if ((v41 & 1) == 0)
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v44 = (void (*)(_QWORD *, uint64_t, uint64_t))v37;
  v45 = v95;
  v46 = v94;
  v92 = v24;
  v104 = inited;
  while (1)
  {
    v50 = inited[3];
    v51 = inited[4];
    v52 = inited[5];
    v53 = v103;
    *v103 = 0;
    v53[1] = 0;
    inited[5] = 1;
    sub_1006B7DA4(v50, v51, v52);
    v54 = (sqlite3_stmt **)(v46 + 24);
    swift_beginAccess(v46 + 24, v108, 0, 0);
    v55 = sqlite3_step(*(sqlite3_stmt **)(v46 + 24));
    if (v55 != 100)
      break;
    v56 = v36;
    v57 = *(void **)(*(_QWORD *)v45 + 32);
    *v20 = v57;
    v44(v20, v56, v16);
    swift_retain(v46);
    v58 = v57;
    LOBYTE(v57) = _dispatchPreconditionTest(_:)(v20);
    v24(v20, v16);
    if ((v57 & 1) == 0)
      goto LABEL_28;
    v59 = *(void **)(*(_QWORD *)v45 + 32);
    *v20 = v59;
    v44(v20, v56, v16);
    v60 = v59;
    LOBYTE(v59) = _dispatchPreconditionTest(_:)(v20);
    v24(v20, v16);
    if ((v59 & 1) == 0)
      goto LABEL_29;
    if (sqlite3_column_type(*v54, 0) == 5 || (v61 = sqlite3_column_blob(*v54, 0)) == 0)
    {
      v47 = swift_release(v46);
      inited = v104;
    }
    else
    {
      v62 = v61;
      v63 = sqlite3_column_bytes(*v54, 0);
      v64 = sub_1005CB82C(v62, v63);
      v66 = v65;
      sub_1004BE310(v64, v65);
      v67 = (uint64_t)v101;
      v68 = v102;
      sub_10067B2E0(v64, v66);
      inited = v104;
      if (v68)
      {
        swift_errorRelease(v68);
        swift_release(v46);
        sub_1004BBBC8(v64, v66);
        v102 = 0;
      }
      else
      {
        v102 = 0;
        v69 = v97;
        sub_1004B84E0(v67, v97, type metadata accessor for CRLBoardIdentifierStorage);
        v70 = v69;
        v71 = v96;
        sub_1004B84E0(v70, v96, type metadata accessor for CRLBoardIdentifier);
        v72 = v71;
        v73 = v100;
        sub_1004B84E0(v72, v100, type metadata accessor for CRLBoardIdentifier);
        v74 = v73;
        v75 = (uint64_t)v93;
        sub_1004B8460(v74, (uint64_t)v93, type metadata accessor for CRLBoardIdentifier);
        v76 = v98;
        v77 = v75;
        v44 = (void (*)(_QWORD *, uint64_t, uint64_t))v99;
        sub_100AD7844(v98, v77);
        swift_release(v46);
        sub_1004BBBC8(v64, v66);
        v78 = v76;
        inited = v104;
        v24 = v92;
        sub_1004B84A4(v78, type metadata accessor for CRLBoardIdentifier);
        sub_1004B84A4(v100, type metadata accessor for CRLBoardIdentifier);
      }
    }
    v46 = inited[2];
    v45 = v46 + 16;
    v48 = *(void **)(*(_QWORD *)(v46 + 16) + 32);
    *v20 = v48;
    v36 = v105;
    ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v44)(v20, v105, v16, v47);
    v49 = v48;
    LOBYTE(v48) = _dispatchPreconditionTest(_:)(v20);
    v24(v20, v16);
    if ((v48 & 1) == 0)
      goto LABEL_27;
  }
  if (v55 && v55 != 101)
  {
    v79 = v55;
    v80 = inited[3];
    v81 = inited[4];
    v82 = inited[5];
    inited[3] = v79;
    v83 = v91;
    *v91 = 0;
    v83[1] = 0;
    sub_1006B7DA4(v80, v81, v82);
  }
  v84 = swift_release(inited);
  v29 = v106;
  v85 = *(void **)(*(_QWORD *)v95 + 32);
  *v20 = v85;
  ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v44)(v20, v105, v16, v84);
  v86 = v85;
  LOBYTE(v85) = _dispatchPreconditionTest(_:)(v20);
  v24(v20, v16);
  v87 = v94;
  if ((v85 & 1) == 0)
LABEL_33:
    __break(1u);
  swift_beginAccess(v94 + 24, &v106, 1, 0);
  v88 = *(sqlite3_stmt **)(v87 + 24);
  if (v88)
  {
    sqlite3_finalize(v88);
    *(_QWORD *)(v87 + 24) = 0;
  }
  swift_release(v87);
  return v29;
}

sqlite3_stmt **sub_100A79800(sqlite3_int64 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  void (*v11)(_QWORD *, __n128);
  uint64_t v12;
  id v13;
  sqlite3_stmt **v14;
  void (*v15)(_QWORD *, uint64_t);
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  sqlite3_stmt **v27;
  uint64_t v28;
  sqlite3_int64 v29;
  uint64_t v30;
  uint64_t inited;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  sqlite3_int64 v35;
  id v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  sqlite3_int64 v44;
  void (*v45)(_QWORD *, uint64_t, uint64_t, __n128);
  id v46;
  uint64_t v47;
  _QWORD *v48;
  void *v49;
  __n128 v50;
  id v51;
  uint64_t v52;
  sqlite3_int64 v53;
  sqlite3_int64 v54;
  __n128 v55;
  void *v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  unsigned int v62;
  void *v63;
  id v64;
  void *v65;
  id v66;
  char v67;
  _BYTE *v68;
  _BYTE *v69;
  int v70;
  sqlite3_int64 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  __n128 v89;
  void *v90;
  id v91;
  sqlite3_int64 v92;
  sqlite3_stmt *v93;
  void *v95;
  id v96;
  sqlite3_int64 v97;
  sqlite3_stmt *v98;
  uint64_t v99;
  _QWORD *v100;
  __int128 v101;
  sqlite3_int64 v102;
  sqlite3_int64 v103;
  void (*v104)(_QWORD *, uint64_t);
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  void (*v108)(_QWORD *, uint64_t, uint64_t, __n128);
  sqlite3_int64 v109;
  id v110[3];
  char v111[24];
  char v112[48];
  sqlite3_stmt **v113;
  unint64_t v114;
  char v115[32];

  v3 = v2;
  v4 = v1;
  v109 = a1;
  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (uint64_t *)((char *)&v99 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v9 = v10;
  v11 = *(void (**)(_QWORD *, __n128))(v6 + 104);
  v12 = enum case for DispatchPredicate.onQueue(_:);
  v11(v9, v7);
  v13 = v10;
  v14 = (sqlite3_stmt **)_dispatchPreconditionTest(_:)(v9);
  v15 = *(void (**)(_QWORD *, uint64_t))(v6 + 8);
  v15(v9, v5);
  if ((v14 & 1) == 0)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  v108 = (void (*)(_QWORD *, uint64_t, uint64_t, __n128))v11;
  v113 = 0;
  v114 = 0xE000000000000000;
  _StringGuts.grow(_:)(65);
  v16._countAndFlagsBits = 0x205443454C4553;
  v16._object = (void *)0xE700000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0x65756C6176;
  v17._object = (void *)0xE500000000000000;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 0x204D4F524620;
  v18._object = (void *)0xE600000000000000;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 0x756C61765F79656BLL;
  v19._object = (void *)0xEE00617461645F65;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 0x20455245485720;
  v20._object = (void *)0xE700000000000000;
  String.append(_:)(v20);
  v21._countAndFlagsBits = 7955819;
  v21._object = (void *)0xE300000000000000;
  String.append(_:)(v21);
  v22._countAndFlagsBits = 0x2720454B494C20;
  v22._object = (void *)0xE700000000000000;
  String.append(_:)(v22);
  v23._countAndFlagsBits = 0x6F7A5F6863746566;
  v23._object = (void *)0xEA0000000000656ELL;
  String.append(_:)(v23);
  v24._countAndFlagsBits = 0x4320444E41202725;
  v24._object = (void *)0xEC00000028545341;
  String.append(_:)(v24);
  v25._object = (void *)0xEA00000000006F66;
  v25._countAndFlagsBits = 0x6E695F6172747865;
  String.append(_:)(v25);
  v26._object = (void *)0x8000000100FF24B0;
  v26._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v26);
  v27 = v113;
  v28 = v114;
  v29 = *(_QWORD *)(v4 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v30 = type metadata accessor for SQLiteStatement();
  inited = swift_initStackObject(v30, v115);
  swift_retain(v29);
  v32 = (uint64_t)v27;
  v14 = (sqlite3_stmt **)inited;
  v34 = sub_1006B77CC(v33, v32, v28);
  if (v3)
  {
    v35 = v29;
    goto LABEL_4;
  }
  v39 = v34;
  swift_release(v29);
  sub_1006B5B50(v109, 1);
  v113 = (sqlite3_stmt **)&_swiftEmptySetSingleton;
  v40 = *(_QWORD *)(v39 + 16);
  v103 = v39 + 16;
  v41 = *(void **)(v40 + 32);
  *v9 = v41;
  v42 = v12;
  v43 = v12;
  v44 = v39;
  v45 = v108;
  ((void (*)(_QWORD *, uint64_t, uint64_t))v108)(v9, v43, v5);
  v46 = v41;
  LOBYTE(v41) = _dispatchPreconditionTest(_:)(v9);
  v15(v9, v5);
  if ((v41 & 1) == 0)
  {
    __break(1u);
    goto LABEL_47;
  }
  v105 = 0;
  v47 = type metadata accessor for SQLiteRowIterator();
  v48 = (_QWORD *)swift_initStackObject(v47, v112);
  v48[3] = 0;
  v107 = v48 + 3;
  v48[4] = 0;
  v100 = v48 + 4;
  v48[5] = 1;
  v48[2] = v44;
  v49 = *(void **)(*(_QWORD *)(v44 + 16) + 32);
  *v9 = v49;
  v102 = v44;
  v50 = swift_retain(v44);
  v45(v9, v42, v5, v50);
  v51 = v49;
  v14 = (sqlite3_stmt **)_dispatchPreconditionTest(_:)(v9);
  v15(v9, v5);
  if ((v14 & 1) == 0)
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  v52 = v42;
  v101 = xmmword_100F26EC0;
  v53 = v103;
  v54 = v102;
  v104 = v15;
  v106 = v48;
  while (1)
  {
    v58 = v48[3];
    v59 = v48[4];
    v60 = v48[5];
    v61 = v107;
    *v107 = 0;
    v61[1] = 0;
    v48[5] = 1;
    sub_1006B7DA4(v58, v59, v60);
    v14 = (sqlite3_stmt **)(v54 + 24);
    swift_beginAccess(v54 + 24, v111, 0, 0);
    v62 = sqlite3_step(*(sqlite3_stmt **)(v54 + 24));
    if (v62 != 100)
      break;
    v63 = *(void **)(*(_QWORD *)v53 + 32);
    *v9 = v63;
    ((void (*)(_QWORD *, uint64_t, uint64_t))v45)(v9, v52, v5);
    v109 = v54;
    swift_retain(v54);
    v64 = v63;
    LOBYTE(v63) = _dispatchPreconditionTest(_:)(v9);
    v15(v9, v5);
    if ((v63 & 1) == 0)
      goto LABEL_42;
    v65 = *(void **)(*(_QWORD *)v53 + 32);
    *v9 = v65;
    ((void (*)(_QWORD *, uint64_t, uint64_t))v45)(v9, v52, v5);
    v66 = v65;
    v67 = _dispatchPreconditionTest(_:)(v9);
    v15(v9, v5);
    if ((v67 & 1) == 0)
      goto LABEL_43;
    if (sqlite3_column_type(*v14, 0) == 5)
    {
      v55 = swift_release(v109);
      v48 = v106;
    }
    else
    {
      v68 = sqlite3_column_blob(*v14, 0);
      v48 = v106;
      if (v68)
      {
        v69 = v68;
        v70 = sqlite3_column_bytes(*v14, 0);
        v71 = v109;
        if (v70)
        {
          v72 = v70;
          if (v70 <= 14)
          {
            v76 = sub_100AF390C(v69, &v69[v70]);
            v77 = v78 & 0xFFFFFFFFFFFFFFLL;
          }
          else
          {
            v73 = type metadata accessor for __DataStorage(0);
            swift_allocObject(v73, *(unsigned int *)(v73 + 48), *(unsigned __int16 *)(v73 + 52));
            if ((_DWORD)v72 == 0x7FFFFFFF)
            {
              v74 = __DataStorage.init(bytes:length:)(v69, 0x7FFFFFFFLL);
              v75 = type metadata accessor for Data.RangeReference(0);
              v76 = swift_allocObject(v75, 32, 7);
              *(_OWORD *)(v76 + 16) = v101;
              v77 = v74 | 0x8000000000000000;
            }
            else
            {
              v79 = __DataStorage.init(bytes:length:)(v69, v72);
              v76 = v72 << 32;
              v77 = v79 | 0x4000000000000000;
            }
          }
        }
        else
        {
          v76 = 0;
          v77 = 0xC000000000000000;
        }
        sub_1004B8930(0, &qword_1013FF470, NSKeyedUnarchiver_ptr);
        v80 = sub_1004B8930(0, (unint64_t *)&qword_1013E1770, CKRecordZoneID_ptr);
        v81 = v105;
        v82 = (void *)static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v80, v76, v77, v80);
        v105 = v81;
        if (v81)
        {
          swift_bridgeObjectRelease(v113);
          sub_1004BBBC8(v76, v77);
          swift_release(v71);
          swift_setDeallocating(v48);
          swift_release(v48[2]);
          sub_1006B7DA4(v48[3], v48[4], v48[5]);
          v95 = *(void **)(*(_QWORD *)v103 + 32);
          *v9 = v95;
          ((void (*)(_QWORD *, uint64_t, uint64_t))v108)(v9, v52, v5);
          v96 = v95;
          v14 = (sqlite3_stmt **)_dispatchPreconditionTest(_:)(v9);
          v104(v9, v5);
          if ((v14 & 1) != 0)
          {
            v97 = v102;
            swift_beginAccess(v102 + 24, v110, 1, 0);
            v98 = *(sqlite3_stmt **)(v97 + 24);
            if (v98)
            {
              sqlite3_finalize(v98);
              *(_QWORD *)(v97 + 24) = 0;
            }
            v35 = v97;
LABEL_4:
            swift_release(v35);
            if (qword_1013DD770 == -1)
            {
LABEL_5:
              swift_beginAccess(&static OS_os_log.crlZoneRefetch, &v113, 0, 0);
              v36 = (id)static OS_os_log.crlZoneRefetch;
              v37 = static os_log_type_t.error.getter(v36);
              sub_100A06EBC((uint64_t)v36, &_mh_execute_header, v37, "Failed to fetch zones needing refetching from the datastore.", 60, 2, (uint64_t)_swiftEmptyArrayStorage);

              swift_willThrow(v38);
              return v14;
            }
LABEL_45:
            swift_once(&qword_1013DD770, sub_100A02AA0);
            goto LABEL_5;
          }
LABEL_48:
          __break(1u);
        }
        if (v82)
        {
          v83 = v82;
          sub_100ADA768((Swift::Int *)v110, v83, (unint64_t *)&qword_1013E1770, CKRecordZoneID_ptr, (uint64_t *)&unk_1013DE990);
          swift_release(v71);
          sub_1004BBBC8(v76, v77);

        }
        else
        {
          swift_release(v71);
          sub_1004BBBC8(v76, v77);
        }
        v15 = v104;
      }
      else
      {
        v55 = swift_release(v109);
      }
    }
    v54 = v48[2];
    v53 = v54 + 16;
    v56 = *(void **)(*(_QWORD *)(v54 + 16) + 32);
    *v9 = v56;
    v45 = v108;
    v108(v9, v52, v5, v55);
    v57 = v56;
    v14 = (sqlite3_stmt **)_dispatchPreconditionTest(_:)(v9);
    v15(v9, v5);
    if ((v14 & 1) == 0)
      goto LABEL_41;
  }
  if (v62 && v62 != 101)
  {
    v84 = v62;
    v85 = v48[3];
    v86 = v48[4];
    v87 = v48[5];
    v48[3] = v84;
    v88 = v100;
    *v100 = 0;
    v88[1] = 0;
    sub_1006B7DA4(v85, v86, v87);
  }
  v89 = swift_release(v48);
  v14 = v113;
  v90 = *(void **)(*(_QWORD *)v103 + 32);
  *v9 = v90;
  v45(v9, v52, v5, v89);
  v91 = v90;
  LOBYTE(v90) = _dispatchPreconditionTest(_:)(v9);
  v15(v9, v5);
  if ((v90 & 1) == 0)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  v92 = v102;
  swift_beginAccess(v102 + 24, &v113, 1, 0);
  v93 = *(sqlite3_stmt **)(v92 + 24);
  if (v93)
  {
    sqlite3_finalize(v93);
    *(_QWORD *)(v92 + 24) = 0;
  }
  swift_release(v92);
  return v14;
}

sqlite3_stmt **sub_100A7A110()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  void (*v9)(_QWORD *);
  id v10;
  sqlite3_stmt **v11;
  void (*v12)(_QWORD *, uint64_t);
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  sqlite3_stmt **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t inited;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  void *v46;
  __n128 v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  void *v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  unsigned int v58;
  void *v59;
  void (*v60)(_QWORD *, uint64_t);
  uint64_t v61;
  id v62;
  void *v63;
  id v64;
  char v65;
  _BYTE *v66;
  _BYTE *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  __n128 v87;
  void *v88;
  id v89;
  uint64_t v90;
  sqlite3_stmt *v91;
  void *v93;
  id v94;
  uint64_t v95;
  sqlite3_stmt *v96;
  uint64_t v97;
  _QWORD *v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(_QWORD *, uint64_t);
  uint64_t v103;
  _QWORD *v104;
  void (*v105)(_QWORD);
  _QWORD *v106;
  uint64_t v107;
  unsigned int v108;
  id v109[3];
  char v110[24];
  char v111[48];
  sqlite3_stmt **v112;
  unint64_t v113;
  char v114[32];

  v2 = v1;
  v3 = v0;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v97 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v7 = v8;
  v9 = *(void (**)(_QWORD *))(v5 + 104);
  v108 = enum case for DispatchPredicate.onQueue(_:);
  v9(v7);
  v10 = v8;
  v11 = (sqlite3_stmt **)_dispatchPreconditionTest(_:)(v7);
  v12 = *(void (**)(_QWORD *, uint64_t))(v5 + 8);
  v12(v7, v4);
  if ((v11 & 1) == 0)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  v112 = 0;
  v113 = 0xE000000000000000;
  _StringGuts.grow(_:)(65);
  v13._countAndFlagsBits = 0x205443454C4553;
  v13._object = (void *)0xE700000000000000;
  String.append(_:)(v13);
  v14._countAndFlagsBits = 0x65756C6176;
  v14._object = (void *)0xE500000000000000;
  String.append(_:)(v14);
  v15._countAndFlagsBits = 0x204D4F524620;
  v15._object = (void *)0xE600000000000000;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0x756C61765F79656BLL;
  v16._object = (void *)0xEE00617461645F65;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0x20455245485720;
  v17._object = (void *)0xE700000000000000;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 7955819;
  v18._object = (void *)0xE300000000000000;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 0x2720454B494C20;
  v19._object = (void *)0xE700000000000000;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 0xD000000000000016;
  v20._object = (void *)0x8000000100FEEF60;
  String.append(_:)(v20);
  v21._countAndFlagsBits = 0x4320444E41202725;
  v21._object = (void *)0xEC00000028545341;
  String.append(_:)(v21);
  v22._countAndFlagsBits = 0x6E695F6172747865;
  v22._object = (void *)0xEA00000000006F66;
  String.append(_:)(v22);
  v23._object = (void *)0x8000000100FEEF80;
  v23._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v23);
  v24 = v112;
  v25 = v113;
  v26 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v27 = type metadata accessor for SQLiteStatement();
  inited = swift_initStackObject(v27, v114);
  swift_retain(v26);
  v29 = (uint64_t)v24;
  v11 = (sqlite3_stmt **)inited;
  v31 = sub_1006B77CC(v30, v29, v25);
  if (v2)
  {
    v32 = v26;
    goto LABEL_4;
  }
  v36 = v31;
  v37 = swift_release(v26);
  v112 = (sqlite3_stmt **)&_swiftEmptySetSingleton;
  v38 = *(_QWORD *)(v36 + 16);
  v101 = v36 + 16;
  v39 = *(void **)(v38 + 32);
  *v7 = v39;
  v40 = v108;
  ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v9)(v7, v108, v4, v37);
  v41 = v39;
  LOBYTE(v39) = _dispatchPreconditionTest(_:)(v7);
  v12(v7, v4);
  if ((v39 & 1) == 0)
  {
    __break(1u);
    goto LABEL_47;
  }
  v103 = 0;
  v42 = type metadata accessor for SQLiteRowIterator();
  v43 = (_QWORD *)swift_initStackObject(v42, v111);
  v44 = v36;
  v45 = v43;
  v43[3] = 0;
  v106 = v43 + 3;
  v43[4] = 0;
  v98 = v43 + 4;
  v43[5] = 1;
  v43[2] = v44;
  v46 = *(void **)(*(_QWORD *)(v44 + 16) + 32);
  *v7 = v46;
  v100 = v44;
  v47 = swift_retain(v44);
  ((void (*)(_QWORD *, uint64_t, uint64_t, __n128))v9)(v7, v40, v4, v47);
  v48 = v46;
  v11 = (sqlite3_stmt **)_dispatchPreconditionTest(_:)(v7);
  v12(v7, v4);
  if ((v11 & 1) == 0)
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  v99 = xmmword_100F26EC0;
  v49 = v101;
  v50 = v100;
  v102 = v12;
  v105 = (void (*)(_QWORD))v9;
  v104 = v45;
  while (1)
  {
    v54 = v45[3];
    v55 = v45[4];
    v56 = v45[5];
    v57 = v106;
    *v106 = 0;
    v57[1] = 0;
    v45[5] = 1;
    sub_1006B7DA4(v54, v55, v56);
    v11 = (sqlite3_stmt **)(v50 + 24);
    swift_beginAccess(v50 + 24, v110, 0, 0);
    v58 = sqlite3_step(*(sqlite3_stmt **)(v50 + 24));
    if (v58 != 100)
      break;
    v59 = *(void **)(*(_QWORD *)v49 + 32);
    *v7 = v59;
    v60 = v12;
    v61 = v108;
    ((void (*)(_QWORD *, _QWORD, uint64_t))v9)(v7, v108, v4);
    v107 = v50;
    swift_retain(v50);
    v62 = v59;
    LOBYTE(v59) = _dispatchPreconditionTest(_:)(v7);
    v60(v7, v4);
    if ((v59 & 1) == 0)
      goto LABEL_42;
    v63 = *(void **)(*(_QWORD *)v49 + 32);
    *v7 = v63;
    ((void (*)(_QWORD *, uint64_t, uint64_t))v9)(v7, v61, v4);
    v64 = v63;
    v65 = _dispatchPreconditionTest(_:)(v7);
    v60(v7, v4);
    if ((v65 & 1) == 0)
      goto LABEL_43;
    v12 = v60;
    if (sqlite3_column_type(*v11, 0) == 5)
    {
      v51 = swift_release(v107);
      v45 = v104;
    }
    else
    {
      v66 = sqlite3_column_blob(*v11, 0);
      v45 = v104;
      if (v66)
      {
        v67 = v66;
        v68 = sqlite3_column_bytes(*v11, 0);
        if (v68)
        {
          v69 = v68;
          v70 = v107;
          if (v68 <= 14)
          {
            v74 = sub_100AF390C(v67, &v67[v68]);
            v75 = v76 & 0xFFFFFFFFFFFFFFLL;
          }
          else
          {
            v71 = type metadata accessor for __DataStorage(0);
            swift_allocObject(v71, *(unsigned int *)(v71 + 48), *(unsigned __int16 *)(v71 + 52));
            if ((_DWORD)v69 == 0x7FFFFFFF)
            {
              v72 = __DataStorage.init(bytes:length:)(v67, 0x7FFFFFFFLL);
              v73 = type metadata accessor for Data.RangeReference(0);
              v74 = swift_allocObject(v73, 32, 7);
              *(_OWORD *)(v74 + 16) = v99;
              v75 = v72 | 0x8000000000000000;
            }
            else
            {
              v77 = __DataStorage.init(bytes:length:)(v67, v69);
              v74 = v69 << 32;
              v75 = v77 | 0x4000000000000000;
            }
          }
        }
        else
        {
          v74 = 0;
          v75 = 0xC000000000000000;
          v70 = v107;
        }
        sub_1004B8930(0, &qword_1013FF470, NSKeyedUnarchiver_ptr);
        v78 = sub_1004B8930(0, (unint64_t *)&qword_1013E1770, CKRecordZoneID_ptr);
        v79 = v103;
        v80 = (void *)static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v78, v74, v75, v78);
        v103 = v79;
        if (v79)
        {
          swift_bridgeObjectRelease(v112);
          sub_1004BBBC8(v74, v75);
          swift_release(v70);
          swift_setDeallocating(v45);
          swift_release(v45[2]);
          sub_1006B7DA4(v45[3], v45[4], v45[5]);
          v93 = *(void **)(*(_QWORD *)v101 + 32);
          *v7 = v93;
          ((void (*)(_QWORD *, _QWORD, uint64_t))v105)(v7, v108, v4);
          v94 = v93;
          v11 = (sqlite3_stmt **)_dispatchPreconditionTest(_:)(v7);
          v102(v7, v4);
          if ((v11 & 1) != 0)
          {
            v95 = v100;
            swift_beginAccess(v100 + 24, v109, 1, 0);
            v96 = *(sqlite3_stmt **)(v95 + 24);
            if (v96)
            {
              sqlite3_finalize(v96);
              *(_QWORD *)(v95 + 24) = 0;
            }
            v32 = v95;
LABEL_4:
            swift_release(v32);
            if (qword_1013DD770 == -1)
            {
LABEL_5:
              swift_beginAccess(&static OS_os_log.crlZoneRefetch, &v112, 0, 0);
              v33 = (id)static OS_os_log.crlZoneRefetch;
              v34 = static os_log_type_t.error.getter(v33);
              sub_100A06EBC((uint64_t)v33, &_mh_execute_header, v34, "Failed to fetch unsupported zones needing refetching from the datastore.", 72, 2, (uint64_t)_swiftEmptyArrayStorage);

              swift_willThrow(v35);
              return v11;
            }
LABEL_45:
            swift_once(&qword_1013DD770, sub_100A02AA0);
            goto LABEL_5;
          }
LABEL_48:
          __break(1u);
        }
        if (v80)
        {
          v81 = v80;
          sub_100ADA768((Swift::Int *)v109, v81, (unint64_t *)&qword_1013E1770, CKRecordZoneID_ptr, (uint64_t *)&unk_1013DE990);
          swift_release(v70);
          sub_1004BBBC8(v74, v75);

        }
        else
        {
          swift_release(v70);
          sub_1004BBBC8(v74, v75);
        }
        v12 = v102;
      }
      else
      {
        v51 = swift_release(v107);
      }
    }
    v50 = v45[2];
    v49 = v50 + 16;
    v52 = *(void **)(*(_QWORD *)(v50 + 16) + 32);
    *v7 = v52;
    v9 = (void (*)(_QWORD *))v105;
    ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v105)(v7, v108, v4, v51);
    v53 = v52;
    v11 = (sqlite3_stmt **)_dispatchPreconditionTest(_:)(v7);
    v12(v7, v4);
    if ((v11 & 1) == 0)
      goto LABEL_41;
  }
  if (v58 && v58 != 101)
  {
    v82 = v58;
    v83 = v45[3];
    v84 = v45[4];
    v85 = v45[5];
    v45[3] = v82;
    v86 = v98;
    *v98 = 0;
    v86[1] = 0;
    sub_1006B7DA4(v83, v84, v85);
  }
  v87 = swift_release(v45);
  v11 = v112;
  v88 = *(void **)(*(_QWORD *)v101 + 32);
  *v7 = v88;
  ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v9)(v7, v108, v4, v87);
  v89 = v88;
  LOBYTE(v88) = _dispatchPreconditionTest(_:)(v7);
  v12(v7, v4);
  if ((v88 & 1) == 0)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  v90 = v100;
  swift_beginAccess(v100 + 24, &v112, 1, 0);
  v91 = *(sqlite3_stmt **)(v90 + 24);
  if (v91)
  {
    sqlite3_finalize(v91);
    *(_QWORD *)(v90 + 24) = 0;
  }
  swift_release(v90);
  return v11;
}

uint64_t sub_100A7AA2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  void (*v9)(_QWORD);
  id v10;
  void (*v11)(_QWORD *, uint64_t);
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t inited;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __n128 v62;
  uint64_t v64;
  unint64_t v65;
  sqlite3_int64 v66;
  void *v67;
  id v68;
  void (*v69)(_QWORD *, uint64_t);
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  char v75;
  void *v76;
  id v77;
  _QWORD *v78;
  void *v79;
  id v80;
  sqlite3_stmt *v81;
  void (*v82)(_QWORD *, uint64_t);
  unsigned int v83;
  void (*v84)(_QWORD *, _QWORD, uint64_t);
  uint64_t v85;
  _QWORD v86[3];
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  _BYTE v92[32];

  v3 = v1;
  v85 = a1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (void (**)(_QWORD *, uint64_t))((char *)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v7 = v8;
  v9 = *(void (**)(_QWORD))(v5 + 104);
  v83 = enum case for DispatchPredicate.onQueue(_:);
  v84 = (void (*)(_QWORD *, _QWORD, uint64_t))v9;
  v9(v7);
  v10 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  v11 = *(void (**)(_QWORD *, uint64_t))(v5 + 8);
  v11(v7, v4);
  if ((v8 & 1) == 0)
  {
    __break(1u);
LABEL_20:
    swift_once(&qword_1013DD858, sub_100A05554);
LABEL_6:
    swift_beginAccess(&static OS_os_log.boardStore, &v90, 0, 0);
    v50 = (void *)static OS_os_log.boardStore;
    v51 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    inited = swift_initStackObject(v51, &v89);
    *(_OWORD *)(inited + 16) = xmmword_100EF5A10;
    v53 = v50;
    v54 = UUID.uuidString.getter(v53);
    v56 = v55;
    *(_QWORD *)(inited + 56) = &type metadata for String;
    v57 = sub_1004CFC2C();
    *(_QWORD *)(inited + 64) = v57;
    *(_QWORD *)(inited + 32) = v54;
    *(_QWORD *)(inited + 40) = v56;
    swift_getErrorValue(v2, &v87, v86);
    v58 = Error.localizedDescription.getter(v86[1], v86[2]);
    *(_QWORD *)(inited + 96) = &type metadata for String;
    *(_QWORD *)(inited + 104) = v57;
    *(_QWORD *)(inited + 72) = v58;
    *(_QWORD *)(inited + 80) = v59;
    v60 = static os_log_type_t.error.getter(v58);
    sub_100A06EBC(v53, &_mh_execute_header, v60, "Failed to fetch if specific board %@ is unsupported with error %@", 65, 2, inited);
    swift_setDeallocating(inited);
    v61 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(inited + 32, 2, v61);

    swift_willThrow(v62);
    return v53 & 1;
  }
  v82 = v11;
  v90 = 0;
  v91 = 0xE000000000000000;
  _StringGuts.grow(_:)(131);
  v12._countAndFlagsBits = 0xD00000000000001ELL;
  v12._object = (void *)0x8000000100FEEDC0;
  String.append(_:)(v12);
  v13._countAndFlagsBits = 0x736472616F62;
  v13._object = (void *)0xE600000000000000;
  String.append(_:)(v13);
  v14._countAndFlagsBits = 0x4A2052454E4E4920;
  v14._object = (void *)0xEC000000204E494FLL;
  String.append(_:)(v14);
  v15._countAndFlagsBits = 0x74695F6472616F62;
  v15._object = (void *)0xEB00000000736D65;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 542002976;
  v16._object = (void *)0xE400000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0x74695F6472616F62;
  v17._object = (void *)0xEB00000000736D65;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 46;
  v18._object = (void *)0xE100000000000000;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 0xD000000000000010;
  v19._object = (void *)0x8000000100FD6350;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 2112800;
  v20._object = (void *)0xE300000000000000;
  String.append(_:)(v20);
  v21._countAndFlagsBits = 0x736472616F62;
  v21._object = (void *)0xE600000000000000;
  String.append(_:)(v21);
  v22._countAndFlagsBits = 46;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  v23._countAndFlagsBits = 0xD000000000000010;
  v23._object = (void *)0x8000000100FD6350;
  String.append(_:)(v23);
  v24._countAndFlagsBits = 0x20455245485720;
  v24._object = (void *)0xE700000000000000;
  String.append(_:)(v24);
  v25._countAndFlagsBits = 0x736472616F62;
  v25._object = (void *)0xE600000000000000;
  String.append(_:)(v25);
  v26._countAndFlagsBits = 46;
  v26._object = (void *)0xE100000000000000;
  String.append(_:)(v26);
  v27._countAndFlagsBits = 0xD000000000000010;
  v27._object = (void *)0x8000000100FD6350;
  String.append(_:)(v27);
  v28._countAndFlagsBits = 0x444E41203F203D20;
  v28._object = (void *)0xEA00000000002820;
  String.append(_:)(v28);
  v29._countAndFlagsBits = 0x736472616F62;
  v29._object = (void *)0xE600000000000000;
  String.append(_:)(v29);
  v30._countAndFlagsBits = 46;
  v30._object = (void *)0xE100000000000000;
  String.append(_:)(v30);
  v31._countAndFlagsBits = 0xD000000000000014;
  v31._object = (void *)0x8000000100FEEDE0;
  String.append(_:)(v31);
  v32._countAndFlagsBits = 0x20524F203F203E20;
  v32._object = (void *)0xE900000000000028;
  String.append(_:)(v32);
  v33._countAndFlagsBits = 0x74695F6472616F62;
  v33._object = (void *)0xEB00000000736D65;
  String.append(_:)(v33);
  v34._countAndFlagsBits = 46;
  v34._object = (void *)0xE100000000000000;
  String.append(_:)(v34);
  v35._countAndFlagsBits = 0xD000000000000014;
  v35._object = (void *)0x8000000100FEEDE0;
  String.append(_:)(v35);
  v36._countAndFlagsBits = 0x444E41203F203E20;
  v36._object = (void *)0xEA00000000002820;
  String.append(_:)(v36);
  v37._countAndFlagsBits = 0x74695F6472616F62;
  v37._object = (void *)0xEB00000000736D65;
  String.append(_:)(v37);
  v38._countAndFlagsBits = 46;
  v38._object = (void *)0xE100000000000000;
  String.append(_:)(v38);
  v39._countAndFlagsBits = 0x6F5F7463656A626FLL;
  v39._object = (void *)0xEE00736E6F697470;
  String.append(_:)(v39);
  v40._countAndFlagsBits = 0x203E20293F202620;
  v40._object = (void *)0xEC00000029292930;
  String.append(_:)(v40);
  v41 = v90;
  v42 = v91;
  v43 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v44 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v44, v92);
  swift_retain(v43);
  v46 = sub_1006B77CC(v45, v41, v42);
  if (v2)
  {
    swift_release(v43);
    if (qword_1013DD858 == -1)
      goto LABEL_6;
    goto LABEL_20;
  }
  v47 = v46;
  swift_release(v43);
  v48 = sub_10067BA88();
  v64 = v48;
  v65 = v49;
  sub_1006B5E80(v48, v49);
  sub_1004BBBC8(v64, v65);
  v66 = sub_1001E9730();
  sub_1006B5B50(v66, 2);
  sub_1006B5B50(v66, 3);
  sub_1006B5B50(1, 4);
  v67 = *(void **)(*(_QWORD *)(v47 + 16) + 32);
  *v7 = v67;
  v84(v7, v83, v4);
  v68 = v67;
  LOBYTE(v67) = _dispatchPreconditionTest(_:)(v7);
  v69 = v82;
  v82(v7, v4);
  if ((v67 & 1) == 0)
  {
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
  }
  v70 = type metadata accessor for SQLiteRowIterator();
  v71 = (_QWORD *)swift_initStackObject(v70, &v88);
  v71[4] = 0;
  v71[5] = 1;
  v71[2] = v47;
  v71[3] = 0;
  swift_retain(v47);
  sub_1006B6B04();
  if (!v72)
  {
    swift_release(v47);
    swift_setDeallocating(v71);
    sub_1006B7DA4(v71[3], v71[4], v71[5]);
LABEL_14:
    v79 = *(void **)(*(_QWORD *)(v47 + 16) + 32);
    *v7 = v79;
    v84(v7, v83, v4);
    v80 = v79;
    LOBYTE(v79) = _dispatchPreconditionTest(_:)(v7);
    v69(v7, v4);
    if ((v79 & 1) != 0)
    {
      v78 = (_QWORD *)(v47 + 24);
      swift_beginAccess(v47 + 24, &v90, 1, 0);
      LOBYTE(v53) = 0;
      goto LABEL_16;
    }
    goto LABEL_22;
  }
  v73 = v72;
  v85 = sub_1006B45D4(0, v72);
  v75 = v74;
  swift_release(v47);
  swift_release(v73);
  swift_setDeallocating(v71);
  sub_1006B7DA4(v71[3], v71[4], v71[5]);
  if ((v75 & 1) != 0)
    goto LABEL_14;
  v76 = *(void **)(*(_QWORD *)(v47 + 16) + 32);
  *v7 = v76;
  v84(v7, v83, v4);
  v77 = v76;
  LOBYTE(v76) = _dispatchPreconditionTest(_:)(v7);
  v69(v7, v4);
  if ((v76 & 1) == 0)
    goto LABEL_23;
  LOBYTE(v53) = v85 > 0;
  v78 = (_QWORD *)(v47 + 24);
  swift_beginAccess(v47 + 24, &v90, 1, 0);
LABEL_16:
  v81 = *(sqlite3_stmt **)(v47 + 24);
  if (v81)
  {
    sqlite3_finalize(v81);
    *v78 = 0;
  }
  swift_release(v47);
  return v53 & 1;
}

_QWORD *sub_100A7B210()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  unsigned int v14;
  char *v15;
  id v16;
  void (*v17)(_QWORD *, uint64_t);
  Swift::String v18;
  Swift::String v19;
  void *object;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  __n128 v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  id v52;
  void (*v53)(_QWORD *, uint64_t);
  uint64_t v54;
  _QWORD *inited;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  void *v60;
  __n128 v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __n128 v77;
  void *v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  id v93;
  uint64_t v94;
  unint64_t v95;
  _QWORD *v96;
  unint64_t v97;
  unint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  __n128 v101;
  void *v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  __n128 v109;
  uint64_t v110;
  void *v111;
  id v112;
  sqlite3_stmt *v113;
  _QWORD *result;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  id v120;
  sqlite3_stmt *v121;
  uint64_t v122;
  id v123;
  uint64_t v124;
  id v125;
  __int128 v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  void (*v138)(_QWORD *, uint64_t);
  char *v139;
  unsigned int v140;
  _QWORD v141[3];
  uint64_t v142;
  uint64_t v143;
  _BYTE v144[24];
  uint64_t v145;
  char v146[72];
  uint64_t v147;
  unint64_t v148;
  char v149[32];

  v2 = v0;
  v3 = sub_1004B804C(&qword_101406B10);
  __chkstk_darwin(v3);
  v135 = (char *)&v122 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CRLBoardCRDTData(0);
  v133 = *(_QWORD *)(v5 - 8);
  v134 = v5;
  v6 = __chkstk_darwin(v5);
  v129 = (uint64_t)&v122 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v128 = (uint64_t)&v122 - v8;
  v9 = type metadata accessor for DispatchPredicate(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (uint64_t *)((char *)&v122 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v12 = v13;
  v14 = enum case for DispatchPredicate.onQueue(_:);
  v15 = *(char **)(v10 + 104);
  ((void (*)(_QWORD *, _QWORD, uint64_t))v15)(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  v16 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)(v12);
  v17 = *(void (**)(_QWORD *, uint64_t))(v10 + 8);
  v136 = v9;
  v17(v12, v9);
  if ((v13 & 1) == 0)
  {
    __break(1u);
    goto LABEL_47;
  }
  v140 = v14;
  v138 = v17;
  v139 = v15;
  v147 = 0;
  v148 = 0xE000000000000000;
  _StringGuts.grow(_:)(49);
  v18._countAndFlagsBits = 0x205443454C4553;
  v18._object = (void *)0xE700000000000000;
  String.append(_:)(v18);
  v19._countAndFlagsBits = sub_100AF5090(0, (void *)0xE000000000000000);
  object = v19._object;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(object);
  v21._countAndFlagsBits = 0x204D4F524620;
  v21._object = (void *)0xE600000000000000;
  String.append(_:)(v21);
  v22._countAndFlagsBits = 0x736472616F62;
  v22._object = (void *)0xE600000000000000;
  String.append(_:)(v22);
  v23._countAndFlagsBits = 0x2045524548570ALL;
  v23._object = (void *)0xE700000000000000;
  String.append(_:)(v23);
  v144[0] = 4;
  _print_unlocked<A, B>(_:_:)(v144, &v147, &type metadata for CRLBoardDataStore.CRLBoardColumn, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v24._object = (void *)0x8000000100FEF350;
  v24._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v24);
  v144[0] = 5;
  _print_unlocked<A, B>(_:_:)(v144, &v147, &type metadata for CRLBoardDataStore.CRLBoardColumn, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v25._countAndFlagsBits = 807419168;
  v25._object = (void *)0xE400000000000000;
  String.append(_:)(v25);
  v26 = v147;
  v27 = v148;
  v28 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v29 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v29, v149);
  swift_retain(v28);
  v31 = sub_1006B77CC(v30, v26, v27);
  v2 = v1;
  if (v1)
  {
    v32 = v28;
    goto LABEL_4;
  }
  v46 = v31;
  v47 = swift_release(v28);
  v48 = *(void **)(*(_QWORD *)(v46 + 16) + 32);
  *v12 = v48;
  v49 = v140;
  v50 = v136;
  v51 = v139;
  ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v139)(v12, v140, v136, v47);
  v52 = v48;
  LOBYTE(v48) = _dispatchPreconditionTest(_:)(v12);
  v53 = v138;
  v138(v12, v50);
  if ((v48 & 1) == 0)
  {
    __break(1u);
    goto LABEL_49;
  }
  v137 = 0;
  v54 = type metadata accessor for SQLiteRowIterator();
  inited = (_QWORD *)swift_initStackObject(v54, &v145);
  v56 = v49;
  v57 = v46;
  v58 = inited;
  inited[3] = 0;
  v59 = inited + 3;
  inited[4] = 0;
  v127 = inited + 4;
  inited[5] = 1;
  inited[2] = v57;
  v60 = *(void **)(*(_QWORD *)(v57 + 16) + 32);
  *v12 = v60;
  v130 = v57;
  v61 = swift_retain(v57);
  ((void (*)(_QWORD *, uint64_t, uint64_t, __n128))v51)(v12, v56, v50, v61);
  v62 = v60;
  LOBYTE(v60) = _dispatchPreconditionTest(_:)(v12);
  v53(v12, v50);
  if ((v60 & 1) == 0)
  {
LABEL_41:
    __break(1u);
LABEL_42:
    v116 = v124;
    v115 = (unint64_t)v125;
    sub_1004BE2FC(v124, (unint64_t)v125);
    swift_bridgeObjectRelease(v131);
    sub_1004BE2FC(v116, v115);
    swift_release(v2);
    swift_release(v51);
    swift_release(v126);
    swift_setDeallocating(v58);
    swift_release(v58[2]);
    sub_1006B7DA4(v58[3], v58[4], v58[5]);
    v117 = v130;
    v118 = *(void **)(*(_QWORD *)(v130 + 16) + 32);
    *v12 = v118;
    v119 = v136;
    ((void (*)(_QWORD *, _QWORD, uint64_t))v139)(v12, v140, v136);
    v120 = v118;
    LOBYTE(v118) = _dispatchPreconditionTest(_:)(v12);
    result = (_QWORD *)((uint64_t (*)(_QWORD *, uint64_t))v53)(v12, v119);
    if ((v118 & 1) == 0)
    {
      __break(1u);
      return result;
    }
    swift_beginAccess(v117 + 24, &v143, 1, 0);
    v121 = *(sqlite3_stmt **)(v117 + 24);
    v2 = v137;
    if (v121)
    {
      sqlite3_finalize(v121);
      *(_QWORD *)(v117 + 24) = 0;
    }
    v32 = v117;
LABEL_4:
    swift_release(v32);
    if (qword_1013DD858 == -1)
    {
LABEL_5:
      swift_beginAccess(&static OS_os_log.boardStore, &v147, 0, 0);
      v33 = (void *)static OS_os_log.boardStore;
      v34 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      v35 = swift_initStackObject(v34, v146);
      *(_OWORD *)(v35 + 16) = xmmword_100EF5E40;
      swift_getErrorValue(v2, &v142, v141);
      v36 = v141[1];
      v37 = v141[2];
      v38 = v33;
      v39 = Error.localizedDescription.getter(v36, v37);
      v41 = v40;
      *(_QWORD *)(v35 + 56) = &type metadata for String;
      v42 = sub_1004CFC2C();
      *(_QWORD *)(v35 + 64) = v42;
      *(_QWORD *)(v35 + 32) = v39;
      *(_QWORD *)(v35 + 40) = v41;
      v43 = static os_log_type_t.error.getter(v42);
      sub_100A06EBC((uint64_t)v38, &_mh_execute_header, v43, "Failed to fetch a board record with error %@", 44, 2, v35);
      swift_setDeallocating(v35);
      v44 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(v35 + 32, 1, v44);

      swift_willThrow(v45);
      return v131;
    }
LABEL_47:
    swift_once(&qword_1013DD858, sub_100A05554);
    goto LABEL_5;
  }
  v2 = v130;
  v131 = _swiftEmptyArrayStorage;
  v132 = v59;
  while (1)
  {
    v63 = v58[3];
    v64 = v58[4];
    v65 = v58[5];
    *v59 = 0;
    v59[1] = 0;
    v58[5] = 1;
    sub_1006B7DA4(v63, v64, v65);
    swift_beginAccess(v2 + 24, v144, 0, 0);
    v66 = sqlite3_step(*(sqlite3_stmt **)(v2 + 24));
    if (v66 != 100)
      break;
    v67 = swift_retain_n(v2, 2);
    v68 = sub_100AF5564(v67, 0);
    if (v68)
    {
      v51 = (char *)v68;
      v69 = (uint64_t *)(v68 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_data);
      v70 = *(_QWORD *)(v68 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_data + 8);
      if (v70 >> 60 == 15)
      {
        v53 = v138;
LABEL_15:
        swift_release(v51);
        goto LABEL_16;
      }
      v71 = *v69;
      sub_10057939C(*v69, v70);
      sub_10057939C(v71, v70);
      v72 = sub_1004B7878((unint64_t *)&unk_101405DC0, type metadata accessor for CRLBoardCRDTData, (uint64_t)&unk_100F3A2D0);
      swift_retain(v51);
      v73 = v134;
      v74 = (uint64_t)v135;
      v75 = v72;
      v76 = v137;
      CRDT.init(serializedData:)(v71, v70, v134, v75);
      if (v76)
      {
        swift_errorRelease(v76);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v133 + 56))(v74, 1, 1, v73);
        swift_release(v51);
        sub_1004BE2FC(v71, v70);
        sub_1004CB800(v74, &qword_101406B10);
        v137 = 0;
        v50 = v136;
        v53 = v138;
        v59 = v132;
        goto LABEL_15;
      }
      v137 = 0;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v133 + 56))(v74, 0, 1, v73);
      v80 = v128;
      sub_1004B84E0(v74, v128, type metadata accessor for CRLBoardCRDTData);
      v126 = *(_OWORD *)&v51[OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_minRequiredVersions];
      v124 = *(_QWORD *)&v51[OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_minRequiredVersions + 16];
      sub_1004B8460(v80, v129, type metadata accessor for CRLBoardCRDTData);
      v81 = OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_boardIdentifier;
      v82 = &v51[*(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20) + v81];
      v83 = *((_QWORD *)v82 + 1);
      v125 = *(id *)v82;
      v84 = type metadata accessor for CRLBoardData(0);
      v85 = swift_allocObject(v84, *(unsigned int *)(v84 + 48), *(unsigned __int16 *)(v84 + 52));
      *(_QWORD *)(v85 + 16) = 7;
      *(_OWORD *)(v85 + 24) = v126;
      *(_QWORD *)(v85 + 40) = v124;
      sub_1004B84E0(v129, v85 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, type metadata accessor for CRLBoardCRDTData);
      swift_bridgeObjectRetain(v83);
      swift_release(v51);
      sub_1004BE2FC(v71, v70);
      *(_QWORD *)&v126 = v85;
      v86 = (_QWORD *)(v85 + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
      *v86 = v125;
      v86[1] = v83;
      sub_1004B84A4(v128, type metadata accessor for CRLBoardCRDTData);
      v87 = *(_QWORD *)&v51[OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_ckShareData + 8];
      if (v87 >> 60 == 15)
      {
        v88 = 0;
        v59 = v132;
      }
      else
      {
        v89 = *(_QWORD *)&v51[OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_ckShareData];
        sub_1004B8930(0, &qword_1013FF470, NSKeyedUnarchiver_ptr);
        v90 = sub_1004B8930(0, &qword_1013E0240, CKShare_ptr);
        sub_1004BE310(v89, v87);
        sub_1004BE310(v89, v87);
        v124 = v89;
        v125 = (id)v87;
        v91 = v137;
        v92 = (void *)static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v90, v89, v87, v90);
        v137 = v91;
        v53 = v138;
        v59 = v132;
        if (v91)
          goto LABEL_42;
        v88 = v92;
        if (v92)
        {
          v123 = v92;
          v93 = objc_msgSend(v123, "containerID");

          if (!v93)
          {
            sub_100757E04(&_mh_execute_header, (uint64_t)"crl_checkForNilContainerID()", 28, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Sync/CRLCloudKitShareNameHelper.swift", 91, 2, 165, "The containerID of a share should never be nil. This can prevent fast sync from starting.", 89, 2u, (uint64_t)_swiftEmptyArrayStorage);
            sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"crl_checkForNilContainerID()", 28, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Sync/CRLCloudKitShareNameHelper.swift", 91, 2u, 165, (uint64_t)"The containerID of a share should never be nil. This can prevent fast sync from starting.", 89, 2u);
            objc_msgSend((id)objc_opt_self(CRLAssertionHandler), "logFullBacktrace");
          }
          v94 = v124;
          v95 = (unint64_t)v125;
          sub_1004BE2FC(v124, (unint64_t)v125);

        }
        else
        {
          v94 = v124;
          v95 = (unint64_t)v125;
          sub_1004BE2FC(v124, (unint64_t)v125);
        }
        sub_1004BE2FC(v94, v95);
      }
      v125 = v88;
      swift_retain(v126);
      if ((swift_isUniquelyReferenced_nonNull_native(v131) & 1) == 0)
        v131 = sub_100D117E0(0, v131[2] + 1, 1, v131);
      v96 = v131;
      v98 = v131[2];
      v97 = v131[3];
      if (v98 >= v97 >> 1)
        v96 = sub_100D117E0((_QWORD *)(v97 > 1), v98 + 1, 1, v131);
      v96[2] = v98 + 1;
      v131 = v96;
      v99 = &v96[2 * v98];
      v100 = v126;
      v99[4] = v126;
      v99[5] = v88;
      swift_release(v51);

      swift_release(v100);
      v101 = swift_release(v2);
      v2 = v58[2];
      v102 = *(void **)(*(_QWORD *)(v2 + 16) + 32);
      *v12 = v102;
      v50 = v136;
      v51 = v139;
      ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v139)(v12, v140, v136, v101);
      v103 = v102;
      LOBYTE(v102) = _dispatchPreconditionTest(_:)(v12);
      v53 = v138;
      v138(v12, v50);
      if ((v102 & 1) == 0)
        goto LABEL_41;
    }
    else
    {
LABEL_16:
      v77 = swift_release(v2);
      v2 = v58[2];
      v78 = *(void **)(*(_QWORD *)(v2 + 16) + 32);
      *v12 = v78;
      v51 = v139;
      ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v139)(v12, v140, v50, v77);
      v79 = v78;
      LOBYTE(v78) = _dispatchPreconditionTest(_:)(v12);
      v53(v12, v50);
      if ((v78 & 1) == 0)
        goto LABEL_41;
    }
  }
  if (v66 && v66 != 101)
  {
    v104 = v66;
    v105 = v58[3];
    v106 = v58[4];
    v107 = v58[5];
    v58[3] = v104;
    v108 = v127;
    *v127 = 0;
    v108[1] = 0;
    sub_1006B7DA4(v105, v106, v107);
  }
  v109 = swift_release(v58);
  v110 = v130;
  v111 = *(void **)(*(_QWORD *)(v130 + 16) + 32);
  *v12 = v111;
  ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v51)(v12, v140, v50, v109);
  v112 = v111;
  LOBYTE(v111) = _dispatchPreconditionTest(_:)(v12);
  v53(v12, v50);
  if ((v111 & 1) == 0)
LABEL_49:
    __break(1u);
  swift_beginAccess(v110 + 24, &v147, 1, 0);
  v113 = *(sqlite3_stmt **)(v110 + 24);
  if (v113)
  {
    sqlite3_finalize(v113);
    *(_QWORD *)(v110 + 24) = 0;
  }
  swift_release(v110);
  return v131;
}

_QWORD *sub_100A7BE3C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *inited;
  uint64_t v11;
  uint64_t v12;
  sqlite3_stmt ***v13;
  sqlite3_stmt **v14;
  void (*v15)(sqlite3_stmt ***);
  void (*v16)(_QWORD, _QWORD);
  Swift::String v17;
  Swift::String v18;
  void *object;
  Swift::String v20;
  Swift::String v21;
  void *v22;
  Swift::String v23;
  Swift::String v24;
  void *v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  Swift::String v42;
  Swift::String v43;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;
  Swift::String v48;
  Swift::String v49;
  Swift::String v50;
  Swift::String v51;
  Swift::String v52;
  uint64_t v53;
  uint64_t v54;
  sqlite3_stmt **v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  sqlite3_stmt **v59;
  __n128 v60;
  sqlite3_stmt **v61;
  _QWORD *v62;
  sqlite3_stmt **v63;
  uint64_t (*v64)(sqlite3_stmt ***, _QWORD *);
  sqlite3_stmt **v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __n128 v78;
  _QWORD *result;
  sqlite3_stmt **v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __n128 v85;
  sqlite3_stmt **v86;
  sqlite3_stmt **v87;
  sqlite3_stmt **v88;
  uint64_t v89;
  sqlite3_stmt **v90;
  __n128 v91;
  sqlite3_stmt **v92;
  sqlite3_stmt **v93;
  __n128 v94;
  sqlite3_stmt **v95;
  sqlite3_stmt **v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  sqlite3_stmt **v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  sqlite3_stmt **v125;
  sqlite3_stmt **v126;
  sqlite3_stmt **v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  sqlite3_stmt **v131;
  _QWORD *v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  void *v137;
  id v138;
  id v139;
  unint64_t v140;
  unint64_t v141;
  sqlite3_stmt **v142;
  sqlite3_stmt **v143;
  _QWORD *v144;
  char v145;
  uint64_t v146;
  id v147;
  _QWORD *v148;
  unint64_t v149;
  unint64_t v150;
  _QWORD *v151;
  sqlite3_stmt **v152;
  uint64_t v153;
  id v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  __n128 v160;
  sqlite3_stmt **v161;
  sqlite3_stmt **v162;
  sqlite3_stmt **v163;
  sqlite3_stmt *v164;
  __n128 v165;
  sqlite3_stmt **v166;
  sqlite3_stmt **v167;
  sqlite3_stmt **v168;
  sqlite3_stmt *v169;
  uint64_t v170;
  unint64_t v171;
  __n128 v172;
  sqlite3_stmt **v173;
  sqlite3_stmt **v174;
  sqlite3_stmt *v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  sqlite3_stmt **v181;
  _QWORD *v182;
  uint64_t v183;
  sqlite3_stmt **v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  id v188;
  sqlite3_stmt **v189;
  __int128 v190;
  uint64_t v191;
  uint64_t v192;
  sqlite3_stmt **v193;
  _QWORD *v194;
  uint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  void (*v201)(sqlite3_stmt ***);
  sqlite3_stmt **v202;
  _QWORD *v203;
  uint64_t (*v204)(sqlite3_stmt ***, _QWORD *);
  unsigned int v205;
  _QWORD v206[3];
  uint64_t v207;
  _BYTE v208[24];
  uint64_t v209;
  char v210[24];
  char v211[72];
  uint64_t v212;
  unint64_t v213;
  char v214[32];

  v2 = v0;
  v3 = sub_1004B804C(&qword_101406B10);
  __chkstk_darwin(v3);
  v5 = (char *)&v176 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CRLBoardCRDTData(0);
  v199 = *(_QWORD *)(v6 - 8);
  v200 = v6;
  v7 = __chkstk_darwin(v6);
  v195 = (uint64_t)&v176 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v197 = (uint64_t)&v176 - v9;
  inited = (_QWORD *)type metadata accessor for DispatchPredicate(0);
  v11 = *(inited - 1);
  __chkstk_darwin(inited);
  v13 = (sqlite3_stmt ***)((char *)&v176 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = *(sqlite3_stmt ***)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v13 = v14;
  v15 = *(void (**)(sqlite3_stmt ***))(v11 + 104);
  v205 = enum case for DispatchPredicate.onQueue(_:);
  v15(v13);
  v202 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)(v13);
  v16 = *(void (**)(_QWORD, _QWORD))(v11 + 8);
  v203 = inited;
  v204 = v16;
  v16(v13, inited);
  if ((v14 & 1) == 0)
    goto LABEL_64;
  v198 = v5;
  v212 = 0;
  v213 = 0xE000000000000000;
  _StringGuts.grow(_:)(179);
  v17._countAndFlagsBits = 0x205443454C4553;
  v17._object = (void *)0xE700000000000000;
  String.append(_:)(v17);
  v18._countAndFlagsBits = sub_100AF5090(0x736472616F62, (void *)0xE600000000000000);
  object = v18._object;
  String.append(_:)(v18);
  swift_bridgeObjectRelease(object);
  v20._countAndFlagsBits = 8236;
  v20._object = (void *)0xE200000000000000;
  String.append(_:)(v20);
  v21._countAndFlagsBits = sub_100AFB6C4(0x74695F6472616F62, (void *)0xED0000315F736D65);
  v22 = v21._object;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(v22);
  v23._countAndFlagsBits = 8236;
  v23._object = (void *)0xE200000000000000;
  String.append(_:)(v23);
  v24._countAndFlagsBits = sub_100AFB6C4(0x74695F6472616F62, (void *)0xED0000325F736D65);
  v25 = v24._object;
  String.append(_:)(v24);
  swift_bridgeObjectRelease(v25);
  v26._countAndFlagsBits = 0x204D4F524620;
  v26._object = (void *)0xE600000000000000;
  String.append(_:)(v26);
  v27._countAndFlagsBits = 0x736472616F62;
  v27._object = (void *)0xE600000000000000;
  String.append(_:)(v27);
  v28._countAndFlagsBits = 0x4A2052454E4E4920;
  v28._object = (void *)0xEC000000204E494FLL;
  String.append(_:)(v28);
  v29._countAndFlagsBits = 0x74695F6472616F62;
  v29._object = (void *)0xEB00000000736D65;
  String.append(_:)(v29);
  v30._object = (void *)0x8000000100FEEBD0;
  v30._countAndFlagsBits = 0xD000000000000021;
  String.append(_:)(v30);
  v31._countAndFlagsBits = 0x6975755F6D657469;
  v31._object = (void *)0xE900000000000064;
  String.append(_:)(v31);
  v32._countAndFlagsBits = 2112800;
  v32._object = (void *)0xE300000000000000;
  String.append(_:)(v32);
  v33._countAndFlagsBits = 0x736472616F62;
  v33._object = (void *)0xE600000000000000;
  String.append(_:)(v33);
  v34._countAndFlagsBits = 46;
  v34._object = (void *)0xE100000000000000;
  String.append(_:)(v34);
  v35._countAndFlagsBits = 0x656E6961746E6F63;
  v35._object = (void *)0xEE00646975755F72;
  String.append(_:)(v35);
  v36._countAndFlagsBits = 0x2052454E4E492029;
  v36._object = (void *)0xED0000204E494F4ALL;
  String.append(_:)(v36);
  v37._countAndFlagsBits = 0x74695F6472616F62;
  v37._object = (void *)0xEB00000000736D65;
  String.append(_:)(v37);
  v38._object = (void *)0x8000000100FEEC00;
  v38._countAndFlagsBits = 0xD000000000000021;
  String.append(_:)(v38);
  v39._countAndFlagsBits = 0x6975755F6D657469;
  v39._object = (void *)0xE900000000000064;
  String.append(_:)(v39);
  v40._countAndFlagsBits = 2112800;
  v40._object = (void *)0xE300000000000000;
  String.append(_:)(v40);
  v41._countAndFlagsBits = 0x736472616F62;
  v41._object = (void *)0xE600000000000000;
  String.append(_:)(v41);
  v42._countAndFlagsBits = 46;
  v42._object = (void *)0xE100000000000000;
  String.append(_:)(v42);
  v43._countAndFlagsBits = 0xD000000000000018;
  v43._object = (void *)0x8000000100FEEC30;
  String.append(_:)(v43);
  v44._countAndFlagsBits = 0x2045524548572029;
  v44._object = (void *)0xE800000000000000;
  String.append(_:)(v44);
  v45._countAndFlagsBits = 0x736472616F62;
  v45._object = (void *)0xE600000000000000;
  String.append(_:)(v45);
  v46._countAndFlagsBits = 46;
  v46._object = (void *)0xE100000000000000;
  String.append(_:)(v46);
  v47._countAndFlagsBits = 1635017060;
  v47._object = (void *)0xE400000000000000;
  String.append(_:)(v47);
  v48._countAndFlagsBits = 0xD000000000000011;
  v48._object = (void *)0x8000000100FEF350;
  String.append(_:)(v48);
  v49._countAndFlagsBits = 0x736472616F62;
  v49._object = (void *)0xE600000000000000;
  String.append(_:)(v49);
  v50._countAndFlagsBits = 46;
  v50._object = (void *)0xE100000000000000;
  String.append(_:)(v50);
  v51._countAndFlagsBits = 0x6E6F7473626D6F74;
  v51._object = (void *)0xEA00000000006465;
  String.append(_:)(v51);
  v52._countAndFlagsBits = 807419168;
  v52._object = (void *)0xE400000000000000;
  String.append(_:)(v52);
  v53 = v212;
  v54 = v213;
  v55 = *(sqlite3_stmt ***)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v56 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v56, v214);
  swift_retain(v55);
  v58 = sub_1006B77CC(v57, v53, v54);
  inited = v1;
  if (v1)
    goto LABEL_3;
  v192 = v2;
  v193 = (sqlite3_stmt **)v58;
  v60 = swift_release(v55);
  v61 = v202;
  v62 = v203;
  *v13 = v202;
  ((void (*)(sqlite3_stmt ***, _QWORD, _QWORD *, __n128))v15)(v13, v205, v62, v60);
  v63 = v61;
  LOBYTE(v61) = _dispatchPreconditionTest(_:)(v13);
  v64 = (uint64_t (*)(sqlite3_stmt ***, _QWORD *))v204;
  v204(v13, v62);
  if ((v61 & 1) == 0)
  {
    __break(1u);
LABEL_70:
    v170 = v179;
    v171 = v177;
    sub_1004BE2FC(v179, v177);
    swift_bridgeObjectRelease(v194);
    sub_1004BE2FC(v170, v171);
    swift_release(v63);
    swift_release(v15);
    swift_release(v191);
    swift_release(v190);
    swift_release(v189);
    swift_release(v181);
    swift_release(v182);
    swift_setDeallocating(inited);
    swift_release(inited[2]);
    sub_1006B7DA4(inited[3], inited[4], inited[5]);
    v172 = swift_bridgeObjectRelease(v187);
    v55 = v193;
    v173 = (sqlite3_stmt **)*((_QWORD *)v193[2] + 4);
    *v13 = v173;
    ((void (*)(sqlite3_stmt ***, _QWORD, _QWORD *, __n128))v201)(v13, v205, v62, v172);
    v174 = v173;
    LOBYTE(v173) = _dispatchPreconditionTest(_:)(v13);
    result = (_QWORD *)v64(v13, v62);
    if ((v173 & 1) == 0)
      goto LABEL_78;
    swift_beginAccess(v55 + 3, v208, 1, 0);
    v175 = v55[3];
    inited = v196;
    if (v175)
    {
      sqlite3_finalize(v175);
      v55[3] = 0;
    }
LABEL_3:
    v59 = v55;
    goto LABEL_8;
  }
  v65 = sub_100A7A110();
  v80 = v65;
  v184 = v63;
  sub_100A63EF0((uint64_t)v65);
  v82 = v81;
  v196 = 0;
  swift_bridgeObjectRelease(v80);
  v187 = sub_100AF8AD8(v82, type metadata accessor for CRLBoardIdentifier, &qword_1013E9A00, (uint64_t)&unk_100F0215C, (void (*)(char *, char *))sub_100AD7844);
  v83 = v82;
  v84 = v205;
  v85 = swift_bridgeObjectRelease(v83);
  v86 = v193;
  v87 = (sqlite3_stmt **)*((_QWORD *)v193[2] + 4);
  *v13 = v87;
  ((void (*)(sqlite3_stmt ***, uint64_t, _QWORD *, __n128))v15)(v13, v84, v62, v85);
  v88 = v87;
  LOBYTE(v87) = _dispatchPreconditionTest(_:)(v13);
  v64(v13, v62);
  if ((v87 & 1) == 0)
  {
    __break(1u);
    goto LABEL_74;
  }
  v89 = type metadata accessor for SQLiteRowIterator();
  inited = (_QWORD *)swift_initStackObject(v89, &v209);
  inited[3] = 0;
  v202 = (sqlite3_stmt **)(inited + 3);
  inited[4] = 0;
  v186 = inited + 4;
  inited[5] = 1;
  inited[2] = v86;
  v90 = (sqlite3_stmt **)*((_QWORD *)v86[2] + 4);
  *v13 = v90;
  v91 = swift_retain(v86);
  ((void (*)(sqlite3_stmt ***, uint64_t, _QWORD *, __n128))v15)(v13, v84, v62, v91);
  v92 = v90;
  LOBYTE(v90) = _dispatchPreconditionTest(_:)(v13);
  v64(v13, v62);
  if ((v90 & 1) == 0)
  {
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  v63 = v193;
  v194 = _swiftEmptyArrayStorage;
  v201 = (void (*)(_QWORD))v15;
  while (1)
  {
    v97 = inited[3];
    v98 = inited[4];
    v99 = inited[5];
    v100 = v202;
    *v202 = 0;
    v100[1] = 0;
    inited[5] = 1;
    sub_1006B7DA4(v97, v98, v99);
    swift_beginAccess(v63 + 3, v210, 0, 0);
    v101 = sqlite3_step(v63[3]);
    if (v101 != 100)
    {
      if (v101 && v101 != 101)
      {
        v155 = v101;
        v156 = inited[3];
        v157 = inited[4];
        v158 = inited[5];
        inited[3] = v155;
        v159 = v186;
        *v186 = 0;
        v159[1] = 0;
        sub_1006B7DA4(v156, v157, v158);
      }
      swift_release(inited);
      v160 = swift_bridgeObjectRelease(v187);
      v161 = v193;
      v162 = (sqlite3_stmt **)*((_QWORD *)v193[2] + 4);
      *v13 = v162;
      ((void (*)(sqlite3_stmt ***, uint64_t, _QWORD *, __n128))v15)(v13, v84, v62, v160);
      v163 = v162;
      LOBYTE(v162) = _dispatchPreconditionTest(_:)(v13);
      v64(v13, v62);
      if ((v162 & 1) != 0)
      {
        swift_beginAccess(v161 + 3, &v212, 1, 0);
        v164 = v161[3];
        if (v164)
        {
          sqlite3_finalize(v164);
          v161[3] = 0;
        }
        swift_release(v161);
        return v194;
      }
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
    }
    v102 = swift_retain_n(v63, 2);
    v103 = sub_100AF5564(v102, 0);
    if (!v103)
      goto LABEL_17;
    v15 = (void (*)(sqlite3_stmt ***))v103;
    v104 = (uint64_t *)(v103 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_data);
    v105 = *(_QWORD *)(v103 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_data + 8);
    if (v105 >> 60 != 15)
      break;
    v93 = v63;
    v63 = (sqlite3_stmt **)v15;
LABEL_15:
    v84 = v205;
LABEL_16:
    swift_release(v93);
LABEL_17:
    v15 = (void (*)(sqlite3_stmt ***))v201;
    v94 = swift_release(v63);
    v63 = (sqlite3_stmt **)inited[2];
    v95 = (sqlite3_stmt **)*((_QWORD *)v63[2] + 4);
    *v13 = v95;
    ((void (*)(sqlite3_stmt ***, uint64_t, _QWORD *, __n128))v15)(v13, v84, v62, v94);
    v96 = v95;
    LOBYTE(v95) = _dispatchPreconditionTest(_:)(v13);
    v64(v13, v62);
    if ((v95 & 1) == 0)
      goto LABEL_63;
  }
  v106 = *v104;
  sub_10057939C(*v104, v105);
  sub_10057939C(v106, v105);
  v107 = sub_1004B7878((unint64_t *)&unk_101405DC0, type metadata accessor for CRLBoardCRDTData, (uint64_t)&unk_100F3A2D0);
  swift_retain(v15);
  v108 = (uint64_t)v198;
  v109 = v200;
  v110 = v107;
  v111 = v196;
  CRDT.init(serializedData:)(v106, v105, v200, v110);
  if (v111)
  {
    swift_errorRelease(v111);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v199 + 56))(v108, 1, 1, v109);
    swift_release(v15);
    sub_1004BE2FC(v106, v105);
    sub_1004CB800(v108, &qword_101406B10);
    v196 = 0;
    v93 = v63;
    v63 = (sqlite3_stmt **)v15;
LABEL_23:
    v62 = v203;
    v64 = (uint64_t (*)(sqlite3_stmt ***, _QWORD *))v204;
    goto LABEL_15;
  }
  v196 = 0;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v199 + 56))(v108, 0, 1, v109);
  v112 = v197;
  sub_1004B84E0(v108, v197, type metadata accessor for CRLBoardCRDTData);
  v190 = *(_OWORD *)((char *)v15 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_minRequiredVersions);
  v189 = *(sqlite3_stmt ***)((char *)v15 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_minRequiredVersions + 16);
  v113 = v195;
  sub_1004B8460(v112, v195, type metadata accessor for CRLBoardCRDTData);
  v114 = (uint64_t)v15 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_boardIdentifier;
  v115 = *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20);
  v185 = v114;
  v116 = (uint64_t *)(v114 + v115);
  v118 = *v116;
  v117 = (void *)v116[1];
  v191 = v118;
  v188 = v117;
  v119 = type metadata accessor for CRLBoardData(0);
  v120 = swift_allocObject(v119, *(unsigned int *)(v119 + 48), *(unsigned __int16 *)(v119 + 52));
  *(_QWORD *)(v120 + 16) = 7;
  *(_OWORD *)(v120 + 24) = v190;
  *(_QWORD *)(v120 + 40) = v189;
  sub_1004B84E0(v113, v120 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, type metadata accessor for CRLBoardCRDTData);
  v121 = (uint64_t)v188;
  swift_bridgeObjectRetain(v188);
  swift_release(v15);
  sub_1004BE2FC(v106, v105);
  v122 = (uint64_t *)(v120 + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
  *v122 = v191;
  v122[1] = v121;
  sub_1004B84A4(v197, type metadata accessor for CRLBoardCRDTData);
  swift_retain(v63);
  v124 = sub_100AFA1D4(v123, 17);
  if (!v124)
  {
    swift_release(v63);
    v93 = (sqlite3_stmt **)v15;
    v63 = (sqlite3_stmt **)v120;
    goto LABEL_23;
  }
  v191 = v120;
  v125 = (sqlite3_stmt **)v124;
  v126 = (sqlite3_stmt **)sub_100AF5E90(v124);
  v62 = v203;
  v64 = (uint64_t (*)(sqlite3_stmt ***, _QWORD *))v204;
  v84 = v205;
  if (!v126)
  {
    swift_release(v63);
    swift_release(v15);
    v93 = (sqlite3_stmt **)v191;
    v63 = v125;
    goto LABEL_16;
  }
  *(_QWORD *)&v190 = v125;
  v127 = v126;
  v188 = (id)type metadata accessor for CRLContainerItemData(0);
  v128 = swift_dynamicCastClass(v127, v188);
  if (!v128)
  {
    swift_release(v127);
    swift_release(v63);
    swift_release(v15);
    v93 = (sqlite3_stmt **)v191;
    v63 = (sqlite3_stmt **)v190;
    goto LABEL_16;
  }
  v183 = v128;
  v189 = v127;
  if (__OFADD__(17, 13))
    goto LABEL_75;
  swift_retain(v63);
  v130 = sub_100AFA1D4(v129, 30);
  if (!v130)
  {
    swift_release(v63);
    swift_release(v15);
    swift_release(v191);
    v63 = v189;
    v93 = (sqlite3_stmt **)v190;
    goto LABEL_16;
  }
  v131 = (sqlite3_stmt **)v130;
  v132 = sub_100AF5E90(v130);
  if (!v132)
    goto LABEL_38;
  v182 = v132;
  v133 = swift_dynamicCastClass(v132, v188);
  if (!v133)
  {
    swift_release(v182);
LABEL_38:
    swift_release(v63);
    swift_release(v15);
    swift_release(v191);
    swift_release(v189);
    v93 = (sqlite3_stmt **)v190;
    v63 = v131;
    goto LABEL_16;
  }
  v180 = v133;
  v181 = v131;
  v134 = *(_QWORD *)((char *)v15 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_ckShareData + 8);
  if (v134 >> 60 == 15)
  {
    v188 = 0;
  }
  else
  {
    v135 = *(_QWORD *)((char *)v15 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_ckShareData);
    v188 = (id)sub_1004B8930(0, &qword_1013FF470, NSKeyedUnarchiver_ptr);
    v178 = sub_1004B8930(0, &qword_1013E0240, CKShare_ptr);
    sub_1004BE310(v135, v134);
    sub_1004BE310(v135, v134);
    v179 = v135;
    v177 = v134;
    v136 = v196;
    v137 = (void *)static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v178, v135, v134, v178);
    v196 = v136;
    if (v136)
      goto LABEL_70;
    if (v137)
    {
      v188 = v137;
      v138 = v137;
      v139 = objc_msgSend(v138, "containerID");

      if (!v139)
      {
        sub_100757E04(&_mh_execute_header, (uint64_t)"crl_checkForNilContainerID()", 28, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Sync/CRLCloudKitShareNameHelper.swift", 91, 2, 165, "The containerID of a share should never be nil. This can prevent fast sync from starting.", 89, 2u, (uint64_t)_swiftEmptyArrayStorage);
        sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"crl_checkForNilContainerID()", 28, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Sync/CRLCloudKitShareNameHelper.swift", 91, 2u, 165, (uint64_t)"The containerID of a share should never be nil. This can prevent fast sync from starting.", 89, 2u);
        objc_msgSend((id)objc_opt_self(CRLAssertionHandler), "logFullBacktrace");
      }
      v140 = v177;
      sub_1004BE2FC(v179, v177);

      v141 = v140;
    }
    else
    {
      v141 = v177;
      sub_1004BE2FC(v179, v177);
      v188 = 0;
    }
    v84 = v205;
    sub_1004BE2FC(v179, v141);
  }
  v142 = v184;
  *v13 = v184;
  ((void (*)(sqlite3_stmt ***, uint64_t, _QWORD *))v201)(v13, v84, v62);
  v143 = v142;
  swift_bridgeObjectRetain(v187);
  LOBYTE(v142) = _dispatchPreconditionTest(_:)(v13);
  v64(v13, v62);
  if ((v142 & 1) == 0)
    goto LABEL_76;
  v144 = v196;
  v145 = sub_100A7AA2C(v185);
  v196 = v144;
  if (!v144)
  {
    if ((v145 & 1) != 0)
    {
      LODWORD(v185) = 1;
      v146 = v187;
    }
    else
    {
      v146 = v187;
      LODWORD(v185) = sub_100622DD8(v185, v187);
    }
    swift_bridgeObjectRelease(v146);
    v147 = v188;
    swift_retain(v191);
    swift_retain(v189);
    swift_retain(v182);
    if ((swift_isUniquelyReferenced_nonNull_native(v194) & 1) == 0)
      v194 = sub_100D118EC(0, v194[2] + 1, 1, v194);
    v148 = v194;
    v150 = v194[2];
    v149 = v194[3];
    if (v150 >= v149 >> 1)
      v148 = sub_100D118EC((_QWORD *)(v149 > 1), v150 + 1, 1, v194);
    v148[2] = v150 + 1;
    v194 = v148;
    v151 = &v148[5 * v150];
    v152 = (sqlite3_stmt **)v191;
    v153 = v183;
    v151[4] = v191;
    v151[5] = v153;
    v154 = v188;
    v151[6] = v180;
    v151[7] = v154;
    *((_BYTE *)v151 + 64) = v185 & 1;
    swift_release(v15);
    swift_release(v190);
    swift_release(v181);

    swift_release(v182);
    swift_release(v189);
    v93 = v152;
    v64 = (uint64_t (*)(sqlite3_stmt ***, _QWORD *))v204;
    goto LABEL_15;
  }
  swift_release(v190);
  swift_release(v181);
  swift_release(v182);
  swift_bridgeObjectRelease_n(v187, 2);
  swift_release(v189);
  swift_release(v191);
  swift_release(v63);

  swift_setDeallocating(inited);
  swift_release(inited[2]);
  sub_1006B7DA4(inited[3], inited[4], inited[5]);
  swift_bridgeObjectRelease(v194);
  v165 = swift_release(v15);
  v166 = v193;
  v167 = (sqlite3_stmt **)*((_QWORD *)v193[2] + 4);
  *v13 = v167;
  ((void (*)(sqlite3_stmt ***, uint64_t, _QWORD *, __n128))v201)(v13, v84, v62, v165);
  v168 = v167;
  LOBYTE(v167) = _dispatchPreconditionTest(_:)(v13);
  result = (_QWORD *)v64(v13, v62);
  if ((v167 & 1) != 0)
  {
    swift_beginAccess(v166 + 3, v208, 1, 0);
    v169 = v166[3];
    inited = v196;
    if (v169)
    {
      sqlite3_finalize(v169);
      v166[3] = 0;
    }
    v59 = v166;
LABEL_8:
    swift_release(v59);
    if (qword_1013DD858 == -1)
    {
LABEL_9:
      swift_beginAccess(&static OS_os_log.boardStore, &v212, 0, 0);
      v66 = (void *)static OS_os_log.boardStore;
      v67 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      v68 = swift_initStackObject(v67, v211);
      *(_OWORD *)(v68 + 16) = xmmword_100EF5E40;
      swift_getErrorValue(inited, &v207, v206);
      v69 = v206[1];
      v70 = v206[2];
      v71 = v66;
      v72 = Error.localizedDescription.getter(v69, v70);
      v74 = v73;
      *(_QWORD *)(v68 + 56) = &type metadata for String;
      v75 = sub_1004CFC2C();
      *(_QWORD *)(v68 + 64) = v75;
      *(_QWORD *)(v68 + 32) = v72;
      *(_QWORD *)(v68 + 40) = v74;
      v76 = static os_log_type_t.error.getter(v75);
      sub_100A06EBC((uint64_t)v71, &_mh_execute_header, v76, "Failed to fetch a board and its container records and CKShares with error %@", 76, 2, v68);
      swift_setDeallocating(v68);
      v77 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(v68 + 32, 1, v77);

      swift_willThrow(v78);
      return v194;
    }
LABEL_65:
    swift_once(&qword_1013DD858, sub_100A05554);
    goto LABEL_9;
  }
  __break(1u);
LABEL_78:
  __break(1u);
  return result;
}

void sub_100A7D0B0(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  void (*v16)(_QWORD);
  id v17;
  void (*v18)(_QWORD *, uint64_t);
  Swift::String v19;
  Swift::String v20;
  void *object;
  Swift::String v22;
  Swift::String v23;
  void *v24;
  Swift::String v25;
  Swift::String v26;
  void *v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  Swift::String v42;
  Swift::String v43;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;
  Swift::String v48;
  Swift::String v49;
  Swift::String v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  char v63;
  void (*v64)(_QWORD *, uint64_t);
  void *v65;
  sqlite3_stmt **v66;
  void *v67;
  uint64_t v68;
  uint64_t inited;
  uint64_t v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __n128 v79;
  sqlite3_stmt **v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __n128 v84;
  void *v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __n128 v101;
  void *v102;
  id v103;
  __n128 v104;
  void *v105;
  id v106;
  __n128 v107;
  void *v108;
  id v109;
  _QWORD *v110;
  char v111;
  char *v112;
  sqlite3_stmt *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char **v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  id v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void (*v133)(_QWORD *, uint64_t);
  _QWORD *v134;
  uint64_t v135;
  uint64_t *v136;
  _QWORD *v137;
  __n128 v138;
  void *v139;
  uint64_t v140;
  id v141;
  __n128 v142;
  void *v143;
  uint64_t v144;
  id v145;
  __n128 v146;
  void *v147;
  uint64_t v148;
  id v149;
  uint64_t v150;
  __n128 v151;
  void *v152;
  id v153;
  uint64_t v154;
  uint64_t v155;
  id v156;
  id v157;
  void *v158;
  uint64_t v159;
  id v160;
  char v161;
  __n128 v162;
  void *v163;
  uint64_t v164;
  id v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  id v172;
  id v173;
  uint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  char *v177;
  __int128 v178;
  char *v179;
  uint64_t v180;
  void (*v181)(_QWORD *, uint64_t);
  uint64_t v182;
  unsigned int v183;
  void (*v184)(_QWORD *, _QWORD, uint64_t);
  char v185[8];
  uint64_t v186;
  uint64_t v187;
  char v188[8];
  char v189[48];
  char v190[8];
  uint64_t v191;
  unint64_t v192;
  char v193[8];

  v3 = v2;
  v4 = v1;
  v180 = a1;
  v5 = sub_1004B804C(&qword_101406B10);
  __chkstk_darwin(v5);
  v179 = (char *)&v166 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v178 = type metadata accessor for CRLBoardCRDTData(0);
  v7 = *(_QWORD *)(v178 - 8);
  v8 = __chkstk_darwin(v178);
  v176 = (uint64_t *)((char *)&v166 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8);
  v177 = (char *)&v166 - v10;
  v11 = type metadata accessor for DispatchPredicate(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (uint64_t *)((char *)&v166 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v14 = v15;
  v16 = *(void (**)(_QWORD))(v12 + 104);
  v183 = enum case for DispatchPredicate.onQueue(_:);
  v184 = (void (*)(_QWORD *, _QWORD, uint64_t))v16;
  v16(v14);
  v17 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)(v14);
  v18 = *(void (**)(_QWORD *, uint64_t))(v12 + 8);
  v182 = v11;
  v18(v14, v11);
  if ((v15 & 1) == 0)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v181 = (void (*)(_QWORD, _QWORD))v18;
  v191 = 0;
  v192 = 0xE000000000000000;
  _StringGuts.grow(_:)(195);
  v19._countAndFlagsBits = 0x205443454C4553;
  v19._object = (void *)0xE700000000000000;
  String.append(_:)(v19);
  v20._countAndFlagsBits = sub_100AF5090(0x736472616F62, (void *)0xE600000000000000);
  object = v20._object;
  String.append(_:)(v20);
  swift_bridgeObjectRelease(object);
  v22._countAndFlagsBits = 8236;
  v22._object = (void *)0xE200000000000000;
  String.append(_:)(v22);
  v23._countAndFlagsBits = sub_100AFB6C4(0x74695F6472616F62, (void *)0xED0000315F736D65);
  v24 = v23._object;
  String.append(_:)(v23);
  swift_bridgeObjectRelease(v24);
  v25._countAndFlagsBits = 8236;
  v25._object = (void *)0xE200000000000000;
  String.append(_:)(v25);
  v26._countAndFlagsBits = sub_100AFB6C4(0x74695F6472616F62, (void *)0xED0000325F736D65);
  v27 = v26._object;
  String.append(_:)(v26);
  swift_bridgeObjectRelease(v27);
  v28._countAndFlagsBits = 0x204D4F524620;
  v28._object = (void *)0xE600000000000000;
  String.append(_:)(v28);
  v29._countAndFlagsBits = 0x736472616F62;
  v29._object = (void *)0xE600000000000000;
  String.append(_:)(v29);
  v30._countAndFlagsBits = 0x4A2052454E4E4920;
  v30._object = (void *)0xEC000000204E494FLL;
  String.append(_:)(v30);
  v31._countAndFlagsBits = 0x74695F6472616F62;
  v31._object = (void *)0xEB00000000736D65;
  String.append(_:)(v31);
  v32._object = (void *)0x8000000100FEEBD0;
  v32._countAndFlagsBits = 0xD000000000000021;
  String.append(_:)(v32);
  v33._countAndFlagsBits = 0x6975755F6D657469;
  v33._object = (void *)0xE900000000000064;
  String.append(_:)(v33);
  v34._countAndFlagsBits = 2112800;
  v34._object = (void *)0xE300000000000000;
  String.append(_:)(v34);
  v35._countAndFlagsBits = 0x736472616F62;
  v35._object = (void *)0xE600000000000000;
  String.append(_:)(v35);
  v36._countAndFlagsBits = 46;
  v36._object = (void *)0xE100000000000000;
  String.append(_:)(v36);
  v37._countAndFlagsBits = 0x656E6961746E6F63;
  v37._object = (void *)0xEE00646975755F72;
  String.append(_:)(v37);
  v38._countAndFlagsBits = 0x2052454E4E492029;
  v38._object = (void *)0xED0000204E494F4ALL;
  String.append(_:)(v38);
  v39._countAndFlagsBits = 0x74695F6472616F62;
  v39._object = (void *)0xEB00000000736D65;
  String.append(_:)(v39);
  v40._object = (void *)0x8000000100FEEC00;
  v40._countAndFlagsBits = 0xD000000000000021;
  String.append(_:)(v40);
  v41._countAndFlagsBits = 0x6975755F6D657469;
  v41._object = (void *)0xE900000000000064;
  String.append(_:)(v41);
  v42._countAndFlagsBits = 2112800;
  v42._object = (void *)0xE300000000000000;
  String.append(_:)(v42);
  v43._countAndFlagsBits = 0x736472616F62;
  v43._object = (void *)0xE600000000000000;
  String.append(_:)(v43);
  v44._countAndFlagsBits = 46;
  v44._object = (void *)0xE100000000000000;
  String.append(_:)(v44);
  v45._countAndFlagsBits = 0xD000000000000018;
  v45._object = (void *)0x8000000100FEEC30;
  String.append(_:)(v45);
  v46._object = (void *)0x8000000100FEEC50;
  v46._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v46);
  v47._countAndFlagsBits = 0xD000000000000010;
  v47._object = (void *)0x8000000100FD6350;
  String.append(_:)(v47);
  v48._object = (void *)0x8000000100FEEC70;
  v48._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v48);
  v49._countAndFlagsBits = 0x6E6F7473626D6F74;
  v49._object = (void *)0xEA00000000006465;
  String.append(_:)(v49);
  v50._countAndFlagsBits = 0x2930203D20;
  v50._object = (void *)0xE500000000000000;
  String.append(_:)(v50);
  v51 = v191;
  v52 = v192;
  v53 = *(_QWORD *)(v4 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v54 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v54, v193);
  swift_retain(v53);
  v56 = sub_1006B77CC(v55, v51, v52);
  if (v2)
  {
    swift_release(v53);
    if (qword_1013DD858 == -1)
    {
LABEL_6:
      swift_beginAccess(&static OS_os_log.boardStore, &v191, 0, 0);
      v67 = (void *)static OS_os_log.boardStore;
      v68 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      inited = swift_initStackObject(v68, v190);
      *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
      swift_getErrorValue(v3, v188, v185);
      v70 = v186;
      v71 = v187;
      v72 = v67;
      v73 = Error.localizedDescription.getter(v70, v71);
      v75 = v74;
      *(_QWORD *)(inited + 56) = &type metadata for String;
      v76 = sub_1004CFC2C();
      *(_QWORD *)(inited + 64) = v76;
      *(_QWORD *)(inited + 32) = v73;
      *(_QWORD *)(inited + 40) = v75;
      v77 = static os_log_type_t.error.getter(v76);
      sub_100A06EBC((uint64_t)v72, &_mh_execute_header, v77, "Failed to fetch a board and its container records and CKShare with error %@", 75, 2, inited);
      swift_setDeallocating(inited);
      v78 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(inited + 32, 1, v78);

      swift_willThrow(v79);
      return;
    }
LABEL_36:
    swift_once(&qword_1013DD858, sub_100A05554);
    goto LABEL_6;
  }
  v57 = v56;
  v175 = v4;
  swift_release(v53);
  v58 = sub_10067BA88();
  v60 = v59;
  sub_1006B5E80(v58, v59);
  sub_1004BBBC8(v58, v60);
  *v14 = v17;
  v61 = v182;
  v184(v14, v183, v182);
  v62 = (char *)v17;
  v63 = _dispatchPreconditionTest(_:)(v14);
  v64 = (void (*)(_QWORD *, uint64_t))v181;
  v65 = (void *)((uint64_t (*)(_QWORD *, uint64_t))v181)(v14, v61);
  if ((v63 & 1) != 0)
  {
    v66 = sub_100A7A110();
    v80 = v66;
    sub_100A63EF0((uint64_t)v66);
    v82 = v81;
    v3 = 0;
    swift_bridgeObjectRelease(v80);
    v174 = sub_100AF8AD8(v82, type metadata accessor for CRLBoardIdentifier, &qword_1013E9A00, (uint64_t)&unk_100F0215C, (void (*)(char *, char *))sub_100AD7844);
    v83 = v82;
    v61 = v182;
    v84 = swift_bridgeObjectRelease(v83);
    v85 = *(void **)(*(_QWORD *)(v57 + 16) + 32);
    *v14 = v85;
    ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v184)(v14, v183, v61, v84);
    v86 = v85;
    LOBYTE(v85) = _dispatchPreconditionTest(_:)(v14);
    v64(v14, v61);
    if ((v85 & 1) == 0)
    {
      __break(1u);
      goto LABEL_50;
    }
    v87 = type metadata accessor for SQLiteRowIterator();
    v88 = swift_initStackObject(v87, v189);
    *(_QWORD *)(v88 + 32) = 0;
    *(_QWORD *)(v88 + 40) = 1;
    *(_QWORD *)(v88 + 16) = v57;
    *(_QWORD *)(v88 + 24) = 0;
    swift_retain(v57);
    sub_1006B6B04();
    if (v89)
    {
      v90 = v89;
      v172 = v62;
      swift_retain(v89);
      v92 = sub_100AF5564(v91, 0);
      v62 = v90;
      if (!v92)
      {
LABEL_16:
        swift_release(v57);
        swift_release(v62);
        swift_setDeallocating(v88);
        sub_1006B7DA4(*(_QWORD *)(v88 + 24), *(_QWORD *)(v88 + 32), *(_QWORD *)(v88 + 40));
        v107 = swift_bridgeObjectRelease(v174);
        v108 = *(void **)(*(_QWORD *)(v57 + 16) + 32);
        *v14 = v108;
        ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v184)(v14, v183, v61, v107);
        v109 = v108;
        LOBYTE(v108) = _dispatchPreconditionTest(_:)(v14);
        v64(v14, v61);
        if ((v108 & 1) == 0)
          __break(1u);
        goto LABEL_17;
      }
      v93 = v92;
      v173 = v62;
      v94 = (uint64_t *)(v92 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_data);
      v95 = *(_QWORD *)(v92 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_data + 8);
      if (v95 >> 60 != 15)
      {
        v170 = (_QWORD *)v88;
        v96 = v92;
        v97 = *v94;
        sub_10057939C(*v94, v95);
        sub_10057939C(v97, v95);
        v98 = sub_1004B7878((unint64_t *)&unk_101405DC0, type metadata accessor for CRLBoardCRDTData, (uint64_t)&unk_100F3A2D0);
        v171 = v96;
        swift_retain(v96);
        v99 = (uint64_t)v179;
        v100 = v178;
        CRDT.init(serializedData:)(v97, v95, v178, v98);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(v99, 0, 1, v100);
        v115 = (uint64_t)v177;
        sub_1004B84E0(v99, (uint64_t)v177, type metadata accessor for CRLBoardCRDTData);
        v116 = v171;
        v178 = *(_OWORD *)(v171 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_minRequiredVersions);
        v169 = *(_QWORD *)(v171 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_minRequiredVersions + 16);
        v117 = (uint64_t)v176;
        sub_1004B8460(v115, (uint64_t)v176, type metadata accessor for CRLBoardCRDTData);
        v118 = v116 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_boardIdentifier;
        v119 = *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20);
        v168 = v118;
        v120 = (char **)(v118 + v119);
        v7 = (uint64_t)v120[1];
        v179 = *v120;
        v121 = type metadata accessor for CRLBoardData(0);
        v122 = swift_allocObject(v121, *(unsigned int *)(v121 + 48), *(unsigned __int16 *)(v121 + 52));
        *(_QWORD *)(v122 + 16) = 7;
        *(_OWORD *)(v122 + 24) = v178;
        *(_QWORD *)(v122 + 40) = v169;
        sub_1004B84E0(v117, v122 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, type metadata accessor for CRLBoardCRDTData);
        swift_bridgeObjectRetain(v7);
        swift_release(v116);
        sub_1004BE2FC(v97, v95);
        v123 = (_QWORD *)(v122 + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
        *v123 = v179;
        v123[1] = v7;
        sub_1004B84A4((uint64_t)v177, type metadata accessor for CRLBoardCRDTData);
        v124 = v173;
        swift_retain(v173);
        v126 = sub_100AFA1D4(v125, 17);
        if (v126)
        {
          v7 = v126;
          v179 = (char *)v122;
          v127 = (char *)sub_100AF5E90(v126);
          v128 = v174;
          v97 = (unint64_t)v170;
          if (v127)
          {
            v62 = v127;
            v129 = type metadata accessor for CRLContainerItemData(0);
            v130 = swift_dynamicCastClass(v62, v129);
            if (v130)
            {
              *(_QWORD *)&v178 = v62;
              if (__OFADD__(17, 13))
              {
                __break(1u);
                goto LABEL_62;
              }
              v61 = v130;
              swift_retain(v173);
              v132 = sub_100AFA1D4(v131, 30);
              v133 = (void (*)(_QWORD *, uint64_t))v181;
              if (v132)
              {
                v62 = (char *)v132;
                v134 = sub_100AF5E90(v132);
                if (v134)
                {
                  v177 = v62;
                  v176 = v134;
                  v135 = swift_dynamicCastClass(v134, v129);
                  if (v135)
                  {
                    v62 = (char *)v135;
                    v136 = (uint64_t *)(v171 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_ckShareData);
                    v97 = *(_QWORD *)(v171 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_ckShareData + 8);
                    if (v97 >> 60 == 15)
                    {
                      v17 = 0;
                      goto LABEL_52;
                    }
                    goto LABEL_43;
                  }
                  swift_release(v7);
                  swift_release(v177);
                  swift_setDeallocating(v97);
                  swift_release(*(_QWORD *)(v97 + 16));
                  sub_1006B7DA4(*(_QWORD *)(v97 + 24), *(_QWORD *)(v97 + 32), *(_QWORD *)(v97 + 40));
                  swift_release(v176);
                  goto LABEL_41;
                }
              }
              else
              {
                swift_release(v173);
                swift_release(v171);
                swift_release(v179);
                swift_release(v7);
                swift_release(v178);
                swift_setDeallocating(v97);
                swift_release(*(_QWORD *)(v97 + 16));
                sub_1006B7DA4(*(_QWORD *)(v97 + 24), *(_QWORD *)(v97 + 32), *(_QWORD *)(v97 + 40));
                v146 = swift_bridgeObjectRelease(v174);
                v147 = *(void **)(*(_QWORD *)(v57 + 16) + 32);
                *v14 = v147;
                v148 = v182;
                ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v184)(v14, v183, v182, v146);
                v149 = v147;
                LOBYTE(v147) = _dispatchPreconditionTest(_:)(v14);
                v133(v14, v148);
                if ((v147 & 1) != 0)
                  goto LABEL_17;
                __break(1u);
              }
              swift_release(v7);
              swift_release(v62);
              swift_setDeallocating(v97);
              swift_release(*(_QWORD *)(v97 + 16));
              sub_1006B7DA4(*(_QWORD *)(v97 + 24), *(_QWORD *)(v97 + 32), *(_QWORD *)(v97 + 40));
LABEL_41:
              v150 = v174;
              swift_release(v173);
              swift_release(v171);
              swift_bridgeObjectRelease(v150);
              swift_release(v179);
              v151 = swift_release(v178);
              v152 = *(void **)(*(_QWORD *)(v57 + 16) + 32);
              *v14 = v152;
              v61 = v182;
              ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v184)(v14, v183, v182, v151);
              v153 = v152;
              LOBYTE(v152) = _dispatchPreconditionTest(_:)(v14);
              v133(v14, v61);
              if ((v152 & 1) == 0)
              {
                __break(1u);
LABEL_43:
                v154 = *v136;
                v166 = sub_1004B8930(0, &qword_1013FF470, NSKeyedUnarchiver_ptr);
                v155 = sub_1004B8930(0, &qword_1013E0240, CKShare_ptr);
                sub_1004BE310(v154, v97);
                sub_1004BE310(v154, v97);
                v167 = v154;
                v169 = v97;
                v65 = (void *)static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v155, v154, v97, v155);
                goto LABEL_45;
              }
LABEL_17:
              v110 = (_QWORD *)(v57 + 24);
              swift_beginAccess(v57 + 24, &v191, 1, 0);
              v111 = 0;
              v112 = 0;
              v113 = *(sqlite3_stmt **)(v57 + 24);
              v114 = v180;
              v61 = 0;
              v62 = 0;
              v17 = 0;
              if (!v113)
              {
LABEL_19:
                swift_release(v57);
                *(_QWORD *)v114 = v112;
                *(_QWORD *)(v114 + 8) = v61;
                *(_QWORD *)(v114 + 16) = v62;
                *(_QWORD *)(v114 + 24) = v17;
                *(_BYTE *)(v114 + 32) = v111 & 1;
                return;
              }
LABEL_18:
              sqlite3_finalize(v113);
              *v110 = 0;
              goto LABEL_19;
            }
            swift_release(v7);
            swift_setDeallocating(v97);
            swift_release(*(_QWORD *)(v97 + 16));
            sub_1006B7DA4(*(_QWORD *)(v97 + 24), *(_QWORD *)(v97 + 32), *(_QWORD *)(v97 + 40));
            swift_release(v62);
            v128 = v174;
            goto LABEL_33;
          }
        }
        else
        {
          swift_release(v124);
          swift_release(v171);
          swift_release(v122);
          v137 = v170;
          swift_setDeallocating(v170);
          swift_release(v137[2]);
          sub_1006B7DA4(v137[3], v137[4], v137[5]);
          v138 = swift_bridgeObjectRelease(v174);
          v139 = *(void **)(*(_QWORD *)(v57 + 16) + 32);
          *v14 = v139;
          v140 = v182;
          ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v184)(v14, v183, v182, v138);
          v141 = v139;
          v128 = _dispatchPreconditionTest(_:)(v14);
          v181(v14, v140);
          if ((v128 & 1) != 0)
            goto LABEL_17;
          __break(1u);
        }
        swift_release(v7);
        swift_setDeallocating(v97);
        swift_release(*(_QWORD *)(v97 + 16));
        sub_1006B7DA4(*(_QWORD *)(v97 + 24), *(_QWORD *)(v97 + 32), *(_QWORD *)(v97 + 40));
LABEL_33:
        swift_release(v173);
        swift_release(v171);
        swift_bridgeObjectRelease(v128);
        v142 = swift_release(v179);
        v143 = *(void **)(*(_QWORD *)(v57 + 16) + 32);
        *v14 = v143;
        v144 = v182;
        ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v184)(v14, v183, v182, v142);
        v145 = v143;
        LOBYTE(v143) = _dispatchPreconditionTest(_:)(v14);
        v181(v14, v144);
        if ((v143 & 1) != 0)
          goto LABEL_17;
        __break(1u);
        goto LABEL_35;
      }
      swift_release(v173);
      swift_release(v93);
      swift_setDeallocating(v88);
      swift_release(*(_QWORD *)(v88 + 16));
      sub_1006B7DA4(*(_QWORD *)(v88 + 24), *(_QWORD *)(v88 + 32), *(_QWORD *)(v88 + 40));
      v101 = swift_bridgeObjectRelease(v174);
      v102 = *(void **)(*(_QWORD *)(v57 + 16) + 32);
      *v14 = v102;
      v61 = v182;
      ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v184)(v14, v183, v182, v101);
      v103 = v102;
      v88 = _dispatchPreconditionTest(_:)(v14);
      v64(v14, v61);
      if ((v88 & 1) != 0)
        goto LABEL_17;
      __break(1u);
    }
    swift_release(v57);
    swift_setDeallocating(v88);
    sub_1006B7DA4(*(_QWORD *)(v88 + 24), *(_QWORD *)(v88 + 32), *(_QWORD *)(v88 + 40));
    v104 = swift_bridgeObjectRelease(v174);
    v105 = *(void **)(*(_QWORD *)(v57 + 16) + 32);
    *v14 = v105;
    ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v184)(v14, v183, v61, v104);
    v106 = v105;
    v88 = _dispatchPreconditionTest(_:)(v14);
    v64(v14, v61);
    if ((v88 & 1) != 0)
      goto LABEL_17;
    __break(1u);
    goto LABEL_16;
  }
  __break(1u);
  __break(1u);
LABEL_45:
  v17 = v65;
  if (v65)
  {
    v156 = v65;
    v157 = objc_msgSend(v156, "containerID");

    if (!v157)
    {
      sub_100757E04(&_mh_execute_header, (uint64_t)"crl_checkForNilContainerID()", 28, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Sync/CRLCloudKitShareNameHelper.swift", 91, 2, 165, "The containerID of a share should never be nil. This can prevent fast sync from starting.", 89, 2u, (uint64_t)_swiftEmptyArrayStorage);
      sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"crl_checkForNilContainerID()", 28, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Sync/CRLCloudKitShareNameHelper.swift", 91, 2u, 165, (uint64_t)"The containerID of a share should never be nil. This can prevent fast sync from starting.", 89, 2u);
      objc_msgSend((id)objc_opt_self(CRLAssertionHandler), "logFullBacktrace");
    }
    sub_1004BE2FC(v167, v169);

    goto LABEL_51;
  }
LABEL_50:
  sub_1004BE2FC(v167, v169);
LABEL_51:
  sub_1004BE2FC(v167, v169);
LABEL_52:
  v158 = v172;
  *v14 = v172;
  v159 = v182;
  v184(v14, v183, v182);
  v160 = v158;
  LOBYTE(v158) = _dispatchPreconditionTest(_:)(v14);
  v181(v14, v159);
  if ((v158 & 1) == 0)
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if ((sub_100A7AA2C(v168) & 1) != 0)
    v161 = 1;
  else
    v161 = sub_100622DD8(v168, v174);
  swift_release(v170);
  swift_release(v7);
  swift_release(v177);
  swift_release(v173);
  swift_release(v171);
  v162 = swift_bridgeObjectRelease(v174);
  v163 = *(void **)(*(_QWORD *)(v57 + 16) + 32);
  *v14 = v163;
  v164 = v182;
  ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v184)(v14, v183, v182, v162);
  v165 = v163;
  LOBYTE(v163) = _dispatchPreconditionTest(_:)(v14);
  v181(v14, v164);
  if ((v163 & 1) != 0)
  {
    swift_beginAccess(v57 + 24, &v191, 1, 0);
    v113 = *(sqlite3_stmt **)(v57 + 24);
    if (!v113)
    {
      v111 = v161;
      v114 = v180;
      v112 = v179;
      goto LABEL_19;
    }
    v111 = v161;
    v110 = (_QWORD *)(v57 + 24);
    v114 = v180;
    v112 = v179;
    goto LABEL_18;
  }
LABEL_63:
  __break(1u);
}

uint64_t sub_100A7E774()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  void (*v23)(_QWORD, __n128);
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t inited;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  void (*v47)(_QWORD *, uint64_t, uint64_t, __n128);
  id v48;
  void (*v49)(_QWORD *, uint64_t);
  uint64_t v50;
  _QWORD *v51;
  void *v52;
  __n128 v53;
  id v54;
  void (*v55)(_QWORD *, _QWORD, uint64_t);
  _QWORD *v56;
  void (*v57)(_QWORD *, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(_QWORD *, _QWORD, uint64_t);
  void *v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  unsigned int v76;
  void *v77;
  uint64_t v78;
  void (*v79)(_QWORD *, _QWORD, uint64_t);
  uint64_t v80;
  id v81;
  void *v82;
  uint64_t v83;
  id v84;
  sqlite3_stmt **v85;
  _BYTE *v86;
  _BYTE *v87;
  int v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  __n128 v102;
  void *v103;
  id v104;
  uint64_t v105;
  sqlite3_stmt *v106;
  uint64_t v108;
  _QWORD *v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void (*v116)(_QWORD *, uint64_t);
  void (*v117)(_QWORD *, uint64_t, uint64_t, __n128);
  uint64_t v118;
  char *v119;
  _QWORD *v120;
  uint64_t v121;
  _QWORD *v122;
  sqlite3_stmt **v123;
  uint64_t v124;
  unsigned int v125;
  _QWORD v126[3];
  uint64_t v127;
  uint64_t v128;
  void *v129;
  uint64_t v130;
  char v131[72];
  uint64_t v132;
  unint64_t v133;
  char v134[32];

  v2 = v0;
  v3 = type metadata accessor for CRLBoardIdentifierStorage(0);
  __chkstk_darwin(v3);
  v119 = (char *)&v108 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v108 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v108 - v9;
  __chkstk_darwin(v11);
  v115 = (uint64_t)&v108 - v12;
  __chkstk_darwin(v13);
  v114 = (uint64_t)&v108 - v14;
  __chkstk_darwin(v15);
  v118 = (uint64_t)&v108 - v16;
  v17 = type metadata accessor for DispatchPredicate(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = (uint64_t *)((char *)&v108 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v22 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v21 = v22;
  v23 = *(void (**)(_QWORD, __n128))(v18 + 104);
  v125 = enum case for DispatchPredicate.onQueue(_:);
  v117 = (void (*)(_QWORD *, uint64_t, uint64_t, __n128))v23;
  v23(v21, v19);
  v24 = v22;
  LOBYTE(v22) = _dispatchPreconditionTest(_:)(v21);
  v116 = *(void (**)(_QWORD *, uint64_t))(v18 + 8);
  v116(v21, v17);
  if ((v22 & 1) == 0)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v132 = 0;
  v133 = 0xE000000000000000;
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease(v133);
  v25 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v26 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v26, v134);
  swift_retain(v25);
  v28 = sub_1006B77CC(v27, 0xD000000000000023, 0x8000000100FEF960);
  v121 = v1;
  if (v1)
  {
    swift_release(v25);
    if (qword_1013DD858 == -1)
    {
LABEL_4:
      swift_beginAccess(&static OS_os_log.boardStore, &v132, 0, 0);
      v29 = (void *)static OS_os_log.boardStore;
      v30 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      inited = swift_initStackObject(v30, v131);
      *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
      swift_getErrorValue(v121, &v127, v126);
      v32 = v126[1];
      v33 = v126[2];
      v34 = v29;
      v35 = Error.localizedDescription.getter(v32, v33);
      v37 = v36;
      *(_QWORD *)(inited + 56) = &type metadata for String;
      v38 = sub_1004CFC2C();
      *(_QWORD *)(inited + 64) = v38;
      *(_QWORD *)(inited + 32) = v35;
      *(_QWORD *)(inited + 40) = v37;
      v39 = static os_log_type_t.error.getter(v38);
      sub_100A06EBC((uint64_t)v34, &_mh_execute_header, v39, "Failed to fetch all board identifiers with error %@", 51, 2, inited);
      swift_setDeallocating(inited);
      v40 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(inited + 32, 1, v40);

      swift_willThrow(v41);
      return v35;
    }
LABEL_32:
    swift_once(&qword_1013DD858, sub_100A05554);
    goto LABEL_4;
  }
  v42 = v28;
  v111 = v7;
  v43 = swift_release(v25);
  v129 = &_swiftEmptySetSingleton;
  v44 = *(_QWORD *)(v42 + 16);
  v113 = v42 + 16;
  v45 = *(void **)(v44 + 32);
  *v21 = v45;
  v46 = v125;
  v47 = v117;
  v117(v21, v125, v17, v43);
  v48 = v45;
  LOBYTE(v45) = _dispatchPreconditionTest(_:)(v21);
  v49 = v116;
  v116(v21, v17);
  if ((v45 & 1) == 0)
  {
    __break(1u);
    goto LABEL_34;
  }
  v110 = v10;
  v50 = type metadata accessor for SQLiteRowIterator();
  v51 = (_QWORD *)swift_initStackObject(v50, &v130);
  v51[3] = 0;
  v122 = v51 + 3;
  v51[4] = 0;
  v109 = v51 + 4;
  v51[5] = 1;
  v51[2] = v42;
  v52 = *(void **)(*(_QWORD *)(v42 + 16) + 32);
  *v21 = v52;
  v112 = v42;
  v53 = swift_retain(v42);
  v47(v21, v46, v17, v53);
  v54 = v52;
  LOBYTE(v52) = _dispatchPreconditionTest(_:)(v21);
  v49(v21, v17);
  if ((v52 & 1) == 0)
  {
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v55 = (void (*)(_QWORD *, _QWORD, uint64_t))v47;
  v56 = v51;
  v57 = v49;
  v59 = v112;
  v58 = v113;
  v120 = v56;
  while (1)
  {
    v72 = v56[3];
    v73 = v56[4];
    v74 = v56[5];
    v75 = v122;
    *v122 = 0;
    v75[1] = 0;
    v56[5] = 1;
    sub_1006B7DA4(v72, v73, v74);
    swift_beginAccess(v59 + 24, &v132, 0, 0);
    v76 = sqlite3_step(*(sqlite3_stmt **)(v59 + 24));
    if (v76 != 100)
      break;
    v123 = (sqlite3_stmt **)(v59 + 24);
    v77 = *(void **)(*(_QWORD *)v58 + 32);
    *v21 = v77;
    v78 = v59;
    v79 = v55;
    v80 = v125;
    v79(v21, v125, v17);
    v124 = v78;
    swift_retain(v78);
    v81 = v77;
    LOBYTE(v77) = _dispatchPreconditionTest(_:)(v21);
    v57(v21, v17);
    if ((v77 & 1) == 0)
      goto LABEL_29;
    v82 = *(void **)(*(_QWORD *)v58 + 32);
    *v21 = v82;
    v83 = v80;
    v55 = v79;
    v79(v21, v83, v17);
    v84 = v82;
    LOBYTE(v82) = _dispatchPreconditionTest(_:)(v21);
    v57(v21, v17);
    if ((v82 & 1) == 0)
      goto LABEL_30;
    v85 = v123;
    if (sqlite3_column_type(*v123, 0) == 5)
      goto LABEL_17;
    v86 = sqlite3_column_blob(*v85, 0);
    if (!v86)
      goto LABEL_17;
    v87 = v86;
    v88 = sqlite3_column_bytes(*v85, 0);
    v89 = sub_1005CB82C(v87, v88);
    v91 = v90;
    sub_1004BE310(v89, v90);
    v92 = v119;
    v93 = v121;
    sub_10067B2E0(v89, v91);
    if (v93)
    {
      swift_errorRelease(v93);
      sub_1004BBBC8(v89, v91);
      v121 = 0;
LABEL_17:
      v56 = v120;
      v94 = v124;
      if (qword_1013DD858 != -1)
        swift_once(&qword_1013DD858, sub_100A05554);
      swift_beginAccess(&static OS_os_log.boardStore, &v128, 0, 0);
      v95 = (id)static OS_os_log.boardStore;
      v96 = static os_log_type_t.error.getter(v95);
      sub_100A06EBC((uint64_t)v95, &_mh_execute_header, v96, "Failure reading board identifier data.", 38, 2, (uint64_t)_swiftEmptyArrayStorage);

      swift_release(v94);
      goto LABEL_9;
    }
    v121 = 0;
    v60 = (uint64_t)v92;
    v61 = v115;
    sub_1004B84E0(v60, v115, type metadata accessor for CRLBoardIdentifierStorage);
    v62 = v61;
    v63 = v114;
    sub_1004B84E0(v62, v114, type metadata accessor for CRLBoardIdentifier);
    v64 = v63;
    v65 = v118;
    sub_1004B84E0(v64, v118, type metadata accessor for CRLBoardIdentifier);
    v66 = (uint64_t)v111;
    sub_1004B8460(v65, (uint64_t)v111, type metadata accessor for CRLBoardIdentifier);
    v67 = (uint64_t)v110;
    v68 = v66;
    v57 = v116;
    v69 = (void (*)(_QWORD *, _QWORD, uint64_t))v117;
    sub_100AD7844((uint64_t)v110, v68);
    swift_release(v124);
    sub_1004BBBC8(v89, v91);
    sub_1004B84A4(v67, type metadata accessor for CRLBoardIdentifier);
    v55 = v69;
    sub_1004B84A4(v118, type metadata accessor for CRLBoardIdentifier);
    v56 = v120;
LABEL_9:
    v59 = v56[2];
    v58 = v59 + 16;
    v70 = *(void **)(*(_QWORD *)(v59 + 16) + 32);
    *v21 = v70;
    v55(v21, v125, v17);
    v71 = v70;
    LOBYTE(v70) = _dispatchPreconditionTest(_:)(v21);
    v57(v21, v17);
    if ((v70 & 1) == 0)
      goto LABEL_28;
  }
  if (v76 && v76 != 101)
  {
    v97 = v76;
    v98 = v56[3];
    v99 = v56[4];
    v100 = v56[5];
    v56[3] = v97;
    v101 = v109;
    *v109 = 0;
    v101[1] = 0;
    sub_1006B7DA4(v98, v99, v100);
  }
  v102 = swift_release(v56);
  v35 = (uint64_t)v129;
  v103 = *(void **)(*(_QWORD *)v113 + 32);
  *v21 = v103;
  ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v55)(v21, v125, v17, v102);
  v104 = v103;
  LOBYTE(v103) = _dispatchPreconditionTest(_:)(v21);
  v57(v21, v17);
  v105 = v112;
  if ((v103 & 1) == 0)
LABEL_34:
    __break(1u);
  swift_beginAccess(v112 + 24, &v129, 1, 0);
  v106 = *(sqlite3_stmt **)(v105 + 24);
  if (v106)
  {
    sqlite3_finalize(v106);
    *(_QWORD *)(v105 + 24) = 0;
  }
  swift_release(v105);
  return v35;
}

uint64_t sub_100A7EFE0()
{
  uint64_t v0;
  void (*v1)(_QWORD *, uint64_t, uint64_t);
  void (*v2)(_QWORD *, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  id v21;
  void (*v22)(_QWORD *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t inited;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v41;
  __n128 v42;
  void *v43;
  void (*v44)(_QWORD *, uint64_t, uint64_t, __n128);
  id v45;
  void *v46;
  __n128 v47;
  id v48;
  sqlite3_stmt **v49;
  unsigned int v50;
  void *v51;
  id v52;
  char v53;
  void *v54;
  id v55;
  char v56;
  _BYTE *v57;
  _BYTE *v58;
  int v59;
  uint64_t v60;
  void (*v61)(_QWORD *, uint64_t, uint64_t);
  void (*v62)(_QWORD *, uint64_t, uint64_t);
  void *v63;
  id v64;
  __n128 v65;
  double v66;
  uint64_t v67;
  void *v68;
  id v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  char isUniquelyReferenced_nonNull_native;
  __n128 v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  id v82;
  uint64_t v83;
  _QWORD *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(_QWORD *, uint64_t, uint64_t, __n128);
  _BYTE v92[8];
  uint64_t v93;
  uint64_t v94;
  _BYTE v95[8];
  _QWORD *v96;
  _BYTE v97[72];
  uint64_t v98;
  unint64_t v99;
  _BYTE v100[32];

  v2 = v1;
  v3 = v0;
  v4 = type metadata accessor for CRLBoardIdentifierStorage(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v83 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CRLBoardIdentifier(0);
  v8 = __chkstk_darwin(v7);
  v89 = (uint64_t)&v83 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v87 = (uint64_t)&v83 - v11;
  v12 = __chkstk_darwin(v10);
  v86 = (uint64_t)&v83 - v13;
  __chkstk_darwin(v12);
  v88 = (uint64_t)&v83 - v14;
  v15 = type metadata accessor for DispatchPredicate(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (uint64_t *)((char *)&v83 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v18 = v19;
  v20 = enum case for DispatchPredicate.onQueue(_:);
  v91 = *(void (**)(_QWORD *, uint64_t, uint64_t, __n128))(v16 + 104);
  ((void (*)(_QWORD *, _QWORD, uint64_t))v91)(v18, enum case for DispatchPredicate.onQueue(_:), v15);
  v21 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)(v18);
  v22 = *(void (**)(_QWORD *, uint64_t))(v16 + 8);
  v22(v18, v15);
  if ((v19 & 1) == 0)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v98 = 0;
  v99 = 0xE000000000000000;
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease(v99);
  v23 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v24 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v24, v100);
  swift_retain(v23);
  v26 = sub_1006B77CC(v25, 0xD000000000000037, 0x8000000100FEF420);
  if (v1)
  {
    swift_release(v23);
    if (qword_1013DD858 == -1)
    {
LABEL_4:
      swift_beginAccess(&static OS_os_log.boardStore, &v98, 0, 0);
      v27 = (void *)static OS_os_log.boardStore;
      v28 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      inited = swift_initStackObject(v28, v97);
      *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
      swift_getErrorValue(v2, v95, v92);
      v30 = v93;
      v31 = v94;
      v32 = v27;
      v33 = Error.localizedDescription.getter(v30, v31);
      v35 = v34;
      *(_QWORD *)(inited + 56) = &type metadata for String;
      v36 = sub_1004CFC2C();
      *(_QWORD *)(inited + 64) = v36;
      *(_QWORD *)(inited + 32) = v33;
      *(_QWORD *)(inited + 40) = v35;
      v37 = static os_log_type_t.error.getter(v36);
      sub_100A06EBC((uint64_t)v32, &_mh_execute_header, v37, "Failed to fetch board activity times with error %@", 50, 2, inited);
      swift_setDeallocating(inited);
      v38 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(inited + 32, 1, v38);

      return swift_willThrow(v39);
    }
LABEL_37:
    swift_once(&qword_1013DD858, sub_100A05554);
    goto LABEL_4;
  }
  v41 = v26;
  v42 = swift_release(v23);
  v43 = *(void **)(*(_QWORD *)(v41 + 16) + 32);
  *v18 = v43;
  v44 = v91;
  v91(v18, v20, v15, v42);
  v45 = v43;
  LOBYTE(v43) = _dispatchPreconditionTest(_:)(v18);
  v22(v18, v15);
  if ((v43 & 1) == 0)
  {
    __break(1u);
    goto LABEL_39;
  }
  v85 = v6;
  v90 = 0;
  v46 = *(void **)(*(_QWORD *)(v41 + 16) + 32);
  *v18 = v46;
  v47 = swift_retain(v41);
  v44(v18, v20, v15, v47);
  v48 = v46;
  LOBYTE(v46) = _dispatchPreconditionTest(_:)(v18);
  v22(v18, v15);
  if ((v46 & 1) == 0)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v2 = (void (*)(_QWORD *, uint64_t, uint64_t))v44;
  v49 = (sqlite3_stmt **)(v41 + 24);
  v84 = _swiftEmptyDictionarySingleton;
  while (1)
  {
    sub_1006B7DA4(0, 0, 1);
    swift_beginAccess(v41 + 24, &v98, 0, 0);
    v50 = sqlite3_step(*v49);
    if (v50 != 100)
      break;
    v51 = *(void **)(*(_QWORD *)(v41 + 16) + 32);
    *v18 = v51;
    v2(v18, v20, v15);
    swift_retain(v41);
    v52 = v51;
    v53 = _dispatchPreconditionTest(_:)(v18);
    v22(v18, v15);
    if ((v53 & 1) == 0)
      goto LABEL_33;
    v54 = *(void **)(*(_QWORD *)(v41 + 16) + 32);
    *v18 = v54;
    v2(v18, v20, v15);
    v55 = v54;
    v56 = _dispatchPreconditionTest(_:)(v18);
    v22(v18, v15);
    if ((v56 & 1) == 0)
      goto LABEL_34;
    if (sqlite3_column_type(*v49, 0) == 5 || (v57 = sqlite3_column_blob(*v49, 0)) == 0)
    {
      v65 = swift_release(v41);
    }
    else
    {
      v58 = v57;
      v59 = sqlite3_column_bytes(*(sqlite3_stmt **)(v41 + 24), 0);
      v60 = sub_1005CB82C(v58, v59);
      v61 = v2;
      v2 = v62;
      v63 = *(void **)(*(_QWORD *)(v41 + 16) + 32);
      *v18 = v63;
      v61(v18, v20, v15);
      v64 = v63;
      LOBYTE(v63) = _dispatchPreconditionTest(_:)(v18);
      v22(v18, v15);
      if ((v63 & 1) == 0)
        goto LABEL_35;
      if (sqlite3_column_type(*v49, 1) == 5)
      {
        swift_release(v41);
        sub_1004BBBC8(v60, (unint64_t)v2);
      }
      else
      {
        v66 = sqlite3_column_double(*v49, 1);
        sub_1004BE310(v60, (unint64_t)v2);
        v67 = v90;
        sub_10067B2E0(v60, (uint64_t)v2);
        if (!v67)
        {
          v90 = 0;
          v71 = v87;
          sub_1004B84E0((uint64_t)v85, v87, type metadata accessor for CRLBoardIdentifierStorage);
          v72 = v71;
          v73 = v86;
          sub_1004B84E0(v72, v86, type metadata accessor for CRLBoardIdentifier);
          v74 = v73;
          v75 = v88;
          sub_1004B84E0(v74, v88, type metadata accessor for CRLBoardIdentifier);
          sub_1004B8460(v75, v89, type metadata accessor for CRLBoardIdentifier);
          v76 = v84;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v84);
          v96 = v76;
          sub_1008299FC(v89, isUniquelyReferenced_nonNull_native, v66);
          v84 = v96;
          swift_bridgeObjectRelease(0x8000000000000000);
          sub_1004B84A4(v89, type metadata accessor for CRLBoardIdentifier);
          swift_release(v41);
          sub_1004BBBC8(v60, (unint64_t)v2);
          sub_1004B84A4(v88, type metadata accessor for CRLBoardIdentifier);
          v68 = *(void **)(*(_QWORD *)(v41 + 16) + 32);
          *v18 = v68;
          v2 = (void (*)(_QWORD *, uint64_t, uint64_t))v91;
          v91(v18, v20, v15, v78);
          goto LABEL_21;
        }
        swift_errorRelease(v67);
        swift_release(v41);
        sub_1004BBBC8(v60, (unint64_t)v2);
        v90 = 0;
      }
      v2 = (void (*)(_QWORD *, uint64_t, uint64_t))v91;
    }
    v68 = *(void **)(*(_QWORD *)(v41 + 16) + 32);
    *v18 = v68;
    ((void (*)(_QWORD *, uint64_t, uint64_t, __n128))v2)(v18, v20, v15, v65);
LABEL_21:
    v69 = v68;
    v70 = _dispatchPreconditionTest(_:)(v18);
    v22(v18, v15);
    if ((v70 & 1) == 0)
      goto LABEL_32;
  }
  if (v50 && v50 != 101)
  {
    v79 = v50;
    sub_1006B7DA4(0, 0, 1);
    v80 = 0;
  }
  else
  {
    v79 = 0;
    v80 = 1;
  }
  swift_release(v41);
  sub_1006B7DA4(v79, 0, v80);
  v81 = *(void **)(*(_QWORD *)(v41 + 16) + 32);
  *v18 = v81;
  ((void (*)(_QWORD *, uint64_t, uint64_t))v91)(v18, v20, v15);
  v82 = v81;
  LOBYTE(v81) = _dispatchPreconditionTest(_:)(v18);
  v22(v18, v15);
  if ((v81 & 1) == 0)
LABEL_39:
    __break(1u);
  swift_beginAccess(v41 + 24, &v96, 1, 0);
  if (*v49)
  {
    sqlite3_finalize(*v49);
    *v49 = 0;
  }
  swift_release(v41);
  return (uint64_t)v84;
}

void sub_100A7F844(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  id v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t inited;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __n128 v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  void *v62;
  void (*v63)(_QWORD *, uint64_t, uint64_t, __n128);
  id v64;
  uint64_t v65;
  void (*v66)(_QWORD *, uint64_t);
  uint64_t v67;
  _QWORD *v68;
  void *v69;
  uint64_t v70;
  __n128 v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  unsigned int v79;
  void (*v80)(_QWORD *, uint64_t, uint64_t, __n128);
  _QWORD *v81;
  void (*v82)(_QWORD *, uint64_t, uint64_t, __n128);
  void (*v83)(_QWORD *, uint64_t);
  void *v84;
  id v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(_QWORD *, uint64_t, uint64_t, __n128);
  id v90;
  _QWORD *v91;
  uint64_t v92;
  sqlite3_stmt **v93;
  _BYTE *v94;
  __n128 v95;
  uint64_t v96;
  void *v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  id v101;
  char v102;
  _BYTE *v103;
  int v104;
  sqlite3_stmt **v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  id v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  __n128 v128;
  void *v129;
  id v130;
  uint64_t v131;
  _QWORD *v132;
  sqlite3_stmt *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  __int128 v143;
  _QWORD *v144;
  int v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  _QWORD *v160;
  void (*v161)(_QWORD *, uint64_t);
  sqlite3_stmt **v162;
  void (*v163)(_QWORD *, uint64_t, uint64_t, __n128);
  uint64_t v164;
  _QWORD v165[3];
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unsigned __int8 v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  unsigned __int8 v178;
  uint64_t v179;
  char v180[24];
  char v181[72];
  char v182[32];

  v4 = (unint64_t)v2;
  v164 = a1;
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (uint64_t *)((char *)&v139 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *(void **)((char *)v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v10 = v11;
  v12 = enum case for DispatchPredicate.onQueue(_:);
  v163 = *(void (**)(_QWORD *, uint64_t, uint64_t, __n128))(v7 + 104);
  v163(v10, enum case for DispatchPredicate.onQueue(_:), v6, v8);
  v13 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v10);
  v161 = *(void (**)(_QWORD *, uint64_t))(v7 + 8);
  v161(v10, v6);
  if ((v11 & 1) == 0)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v158 = a2;
  v169 = 0;
  v170 = 0xE000000000000000;
  _StringGuts.grow(_:)(80);
  v14._countAndFlagsBits = 0x205443454C4553;
  v14._object = (void *)0xE700000000000000;
  String.append(_:)(v14);
  v15._countAndFlagsBits = 0x6D5F736472616F62;
  v15._object = (void *)0xEF61746164617465;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 46;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0x6174735F77656976;
  v17._object = (void *)0xEF617461645F6574;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 0x204D4F524620;
  v18._object = (void *)0xE600000000000000;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 0x6D5F736472616F62;
  v19._object = (void *)0xEF61746164617465;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 0x4A2052454E4E4920;
  v20._object = (void *)0xEC000000204E494FLL;
  String.append(_:)(v20);
  v21._countAndFlagsBits = 0x736472616F62;
  v21._object = (void *)0xE600000000000000;
  String.append(_:)(v21);
  v22._countAndFlagsBits = 542002976;
  v22._object = (void *)0xE400000000000000;
  String.append(_:)(v22);
  v23._countAndFlagsBits = 0x736472616F62;
  v23._object = (void *)0xE600000000000000;
  String.append(_:)(v23);
  v24._countAndFlagsBits = 46;
  v24._object = (void *)0xE100000000000000;
  String.append(_:)(v24);
  v25._countAndFlagsBits = 0xD000000000000010;
  v25._object = (void *)0x8000000100FD6350;
  String.append(_:)(v25);
  v26._countAndFlagsBits = 2112800;
  v26._object = (void *)0xE300000000000000;
  String.append(_:)(v26);
  v27._countAndFlagsBits = 0x6D5F736472616F62;
  v27._object = (void *)0xEF61746164617465;
  String.append(_:)(v27);
  v28._countAndFlagsBits = 46;
  v28._object = (void *)0xE100000000000000;
  String.append(_:)(v28);
  v29._countAndFlagsBits = 0xD000000000000010;
  v29._object = (void *)0x8000000100FD6350;
  String.append(_:)(v29);
  v30._countAndFlagsBits = 0x2820455245485720;
  v30._object = (void *)0xE800000000000000;
  String.append(_:)(v30);
  v31._countAndFlagsBits = 0x6E6F7473626D6F74;
  v31._object = (void *)0xEA00000000006465;
  String.append(_:)(v31);
  v32._countAndFlagsBits = 0x444E412030203D20;
  v32._object = (void *)0xE900000000000020;
  String.append(_:)(v32);
  v33._countAndFlagsBits = 0x6D5F736472616F62;
  v33._object = (void *)0xEF61746164617465;
  String.append(_:)(v33);
  v34._countAndFlagsBits = 46;
  v34._object = (void *)0xE100000000000000;
  String.append(_:)(v34);
  v35._countAndFlagsBits = 0xD000000000000010;
  v35._object = (void *)0x8000000100FD6350;
  String.append(_:)(v35);
  v36._countAndFlagsBits = 0x293F203D20;
  v36._object = (void *)0xE500000000000000;
  String.append(_:)(v36);
  v37 = v169;
  v38 = v170;
  v39 = *(_QWORD *)(v4 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v40 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v40, v182);
  swift_retain(v39);
  v42 = sub_1006B77CC(v41, v37, v38);
  v4 = (unint64_t)v3;
  if (v3)
  {
    swift_release(v39);
    if (qword_1013DD858 == -1)
    {
LABEL_5:
      swift_beginAccess(&static OS_os_log.boardStore, &v169, 0, 0);
      v46 = (void *)static OS_os_log.boardStore;
      v47 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      inited = swift_initStackObject(v47, v181);
      *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
      swift_getErrorValue(v4, &v166, v165);
      v49 = v165[1];
      v50 = v165[2];
      v51 = v46;
      v52 = Error.localizedDescription.getter(v49, v50);
      v54 = v53;
      *(_QWORD *)(inited + 56) = &type metadata for String;
      v55 = sub_1004CFC2C();
      *(_QWORD *)(inited + 64) = v55;
      *(_QWORD *)(inited + 32) = v52;
      *(_QWORD *)(inited + 40) = v54;
      v56 = static os_log_type_t.error.getter(v55);
      sub_100A06EBC((uint64_t)v51, &_mh_execute_header, v56, "Failed to fetch view state with error %@", 40, 2, inited);
      swift_setDeallocating(inited);
      v57 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(inited + 32, 1, v57);

      swift_willThrow(v58);
      return;
    }
LABEL_34:
    swift_once(&qword_1013DD858, sub_100A05554);
    goto LABEL_5;
  }
  v43 = v42;
  swift_release(v39);
  v44 = sub_10067BA88();
  v59 = v44;
  v60 = v45;
  v155 = 0;
  sub_1006B5E80(v44, v45);
  sub_1004BBBC8(v59, v60);
  v61 = *(_QWORD *)(v43 + 16);
  v156 = v43 + 16;
  v62 = *(void **)(v61 + 32);
  *v10 = v62;
  v63 = v163;
  ((void (*)(_QWORD *, uint64_t, uint64_t))v163)(v10, v12, v6);
  v64 = v62;
  LOBYTE(v62) = _dispatchPreconditionTest(_:)(v10);
  v65 = v43;
  v66 = v161;
  v161(v10, v6);
  if ((v62 & 1) == 0)
  {
    __break(1u);
    goto LABEL_36;
  }
  v67 = type metadata accessor for SQLiteRowIterator();
  v68 = (_QWORD *)swift_initStackObject(v67, &v179);
  v68[3] = 0;
  v160 = v68 + 3;
  v68[4] = 0;
  v144 = v68 + 4;
  v68[5] = 1;
  v68[2] = v65;
  v69 = *(void **)(*(_QWORD *)(v65 + 16) + 32);
  *v10 = v69;
  v157 = v65;
  v70 = v65;
  v4 = (unint64_t)v68;
  v71 = swift_retain(v70);
  LODWORD(v164) = v12;
  v63(v10, v12, v6, v71);
  v72 = v69;
  LOBYTE(v69) = _dispatchPreconditionTest(_:)(v10);
  v66(v10, v6);
  if ((v69 & 1) == 0)
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v146 = 0;
  v147 = 0;
  v153 = 0;
  v154 = 0;
  v151 = 0;
  v152 = 0;
  v149 = 0;
  v150 = 0;
  v148 = 0;
  v145 = 2;
  v143 = xmmword_100EF5E40;
  v74 = v156;
  v73 = v157;
  v159 = (_QWORD *)v4;
  while (1)
  {
    v75 = *(_QWORD *)(v4 + 24);
    v76 = *(_QWORD *)(v4 + 32);
    v77 = *(_QWORD *)(v4 + 40);
    v78 = v160;
    *v160 = 0;
    v78[1] = 0;
    *(_QWORD *)(v4 + 40) = 1;
    sub_1006B7DA4(v75, v76, v77);
    swift_beginAccess(v73 + 24, v180, 0, 0);
    v79 = sqlite3_step(*(sqlite3_stmt **)(v73 + 24));
    if (v79 != 100)
      break;
    v162 = (sqlite3_stmt **)(v73 + 24);
    v80 = (void (*)(_QWORD *, uint64_t, uint64_t, __n128))v73;
    v81 = v10;
    v82 = v63;
    v83 = v66;
    v84 = *(void **)(*(_QWORD *)v74 + 32);
    *v81 = v84;
    v4 = v164;
    ((void (*)(_QWORD *, _QWORD, uint64_t))v82)(v81, v164, v6);
    v163 = v80;
    swift_retain(v80);
    v85 = v84;
    LOBYTE(v84) = _dispatchPreconditionTest(_:)(v81);
    v83(v81, v6);
    if ((v84 & 1) == 0)
      goto LABEL_31;
    v86 = *(void **)(*(_QWORD *)v74 + 32);
    *v81 = v86;
    v87 = v6;
    v88 = v6;
    v89 = v82;
    ((void (*)(_QWORD *, unint64_t, uint64_t))v82)(v81, v4, v87);
    v90 = v86;
    LOBYTE(v86) = _dispatchPreconditionTest(_:)(v81);
    v10 = v81;
    v91 = v81;
    v92 = v88;
    v83(v91, v88);
    if ((v86 & 1) == 0)
      goto LABEL_32;
    v93 = v162;
    if (sqlite3_column_type(*v162, 0) != 5 && (v94 = sqlite3_column_blob(*v93, 0)) != 0)
    {
      v103 = v94;
      v104 = sqlite3_column_bytes(*v93, 0);
      v105 = (sqlite3_stmt **)sub_1005CB82C(v103, v104);
      v107 = v106;
      v108 = type metadata accessor for JSONDecoder(0);
      swift_allocObject(v108, *(unsigned int *)(v108 + 48), *(unsigned __int16 *)(v108 + 52));
      v109 = JSONDecoder.init()();
      v110 = sub_100B01524();
      v111 = v155;
      dispatch thunk of JSONDecoder.decode<A>(_:from:)(&v169, &type metadata for CRLBoardViewState, v105, v107, &type metadata for CRLBoardViewState, v110);
      v63 = v89;
      v155 = v111;
      v4 = (unint64_t)v159;
      if (v111)
      {
        v142 = v107;
        v162 = v105;
        swift_release(v109);
        if (qword_1013DD6B8 != -1)
          swift_once(&qword_1013DD6B8, sub_100A00A6C);
        swift_beginAccess(&static OS_os_log.crlDefault, &v168, 0, 0);
        v112 = (void *)static OS_os_log.crlDefault;
        v113 = sub_1004B804C((uint64_t *)&unk_1013E0180);
        v114 = swift_initStackObject(v113, &v167);
        *(_OWORD *)(v114 + 16) = v143;
        v115 = v155;
        v169 = v155;
        v116 = v112;
        swift_errorRetain(v115);
        v117 = sub_1004B804C(&qword_1013E0210);
        v118 = String.init<A>(describing:)(&v169, v117);
        v140 = v119;
        v141 = v118;
        *(_QWORD *)(v114 + 56) = &type metadata for String;
        v120 = sub_1004CFC2C();
        *(_QWORD *)(v114 + 64) = v120;
        *(_QWORD *)(v114 + 32) = v141;
        *(_QWORD *)(v114 + 40) = v140;
        v121 = static os_log_type_t.error.getter(v120);
        sub_100A06EBC((uint64_t)v116, &_mh_execute_header, v121, "Error unarchiving view state: %@", 32, 2, v114);
        swift_setDeallocating(v114);
        v122 = sub_1004B804C(&qword_1013E0190);
        swift_arrayDestroy(v114 + 32, 1, v122);

        swift_errorRelease(v115);
        sub_1005E6090(v147, v148, v149, v150, v151, v152, v153, v154, v146, v145);
        sub_1004BBBC8((uint64_t)v162, v142);
        v95 = swift_release(v163);
        v147 = 0;
        v148 = 0;
        v149 = 0;
        v150 = 0;
        v151 = 0;
        v152 = 0;
        v153 = 0;
        v154 = 0;
        v146 = 0;
        v155 = 0;
        v145 = 2;
        v99 = v164;
        v6 = v92;
      }
      else
      {
        swift_release(v109);
        sub_1005E6090(v147, v148, v149, v150, v151, v152, v153, v154, v146, v145);
        sub_1004BBBC8((uint64_t)v105, v107);
        v95 = swift_release(v163);
        v147 = v169;
        v148 = v170;
        v149 = v171;
        v150 = v172;
        v151 = v173;
        v152 = v174;
        v153 = v175;
        v154 = v176;
        v146 = v177;
        v145 = v178;
        v6 = v92;
        v99 = v164;
      }
      v73 = *(_QWORD *)(v4 + 16);
      v74 = v73 + 16;
      v97 = *(void **)(*(_QWORD *)(v73 + 16) + 32);
      *v10 = v97;
      v98 = v10;
    }
    else
    {
      v95 = swift_release(v163);
      v4 = (unint64_t)v159;
      v96 = v159[2];
      v74 = v96 + 16;
      v97 = *(void **)(*(_QWORD *)(v96 + 16) + 32);
      *v10 = v97;
      v98 = v10;
      v99 = v164;
      v100 = v92;
      v73 = v96;
      v63 = v89;
      v6 = v100;
    }
    ((void (*)(_QWORD *, uint64_t, __n128))v63)(v98, v99, v95);
    v101 = v97;
    v102 = _dispatchPreconditionTest(_:)(v10);
    v66 = v161;
    v161(v10, v6);
    if ((v102 & 1) == 0)
      goto LABEL_30;
  }
  if (v79 && v79 != 101)
  {
    v123 = v79;
    v124 = *(_QWORD *)(v4 + 24);
    v125 = *(_QWORD *)(v4 + 32);
    v126 = *(_QWORD *)(v4 + 40);
    *(_QWORD *)(v4 + 24) = v123;
    v127 = v144;
    *v144 = 0;
    v127[1] = 0;
    sub_1006B7DA4(v124, v125, v126);
  }
  v128 = swift_release(v4);
  v129 = *(void **)(*(_QWORD *)v156 + 32);
  *v10 = v129;
  v63(v10, v164, v6, v128);
  v130 = v129;
  LOBYTE(v129) = _dispatchPreconditionTest(_:)(v10);
  v66(v10, v6);
  if ((v129 & 1) == 0)
LABEL_36:
    __break(1u);
  v131 = v157;
  v132 = (_QWORD *)(v157 + 24);
  swift_beginAccess(v157 + 24, &v169, 1, 0);
  v133 = *(sqlite3_stmt **)(v131 + 24);
  v134 = v158;
  if (v133)
  {
    sqlite3_finalize(v133);
    *v132 = 0;
  }
  swift_release(v157);
  v135 = v148;
  *(_QWORD *)v134 = v147;
  *(_QWORD *)(v134 + 8) = v135;
  v136 = v150;
  *(_QWORD *)(v134 + 16) = v149;
  *(_QWORD *)(v134 + 24) = v136;
  v137 = v152;
  *(_QWORD *)(v134 + 32) = v151;
  *(_QWORD *)(v134 + 40) = v137;
  v138 = v154;
  *(_QWORD *)(v134 + 48) = v153;
  *(_QWORD *)(v134 + 56) = v138;
  *(_QWORD *)(v134 + 64) = v146;
  *(_BYTE *)(v134 + 72) = v145;
}

uint64_t sub_100A80470(sqlite3_stmt **a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  void (*v16)(_QWORD);
  id v17;
  void (*v18)(_QWORD *, uint64_t);
  Swift::String v19;
  Swift::String v20;
  void *object;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t inited;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __n128 v50;
  uint64_t v51;
  __n128 v52;
  void *v53;
  uint64_t v54;
  void (*v55)(_QWORD *, uint64_t, uint64_t);
  id v56;
  sqlite3_stmt **v57;
  void *v58;
  id v59;
  void *v60;
  __n128 v61;
  id v62;
  __n128 v63;
  void *v64;
  id v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  id v94;
  sqlite3_stmt **v95;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  void (*v104)(_QWORD *, uint64_t, uint64_t);
  uint64_t v105;
  char *v106;
  uint64_t v107;
  void (*v108)(_QWORD *, uint64_t);
  unsigned int v109;
  uint64_t v110;
  sqlite3_stmt **v111;
  uint64_t v112;
  _BYTE v113[8];
  uint64_t v114;
  uint64_t v115;
  _BYTE v116[8];
  _BYTE v117[24];
  _BYTE v118[72];
  uint64_t v119;
  unint64_t v120;
  _BYTE v121[16];

  v3 = v1;
  v111 = a1;
  v4 = sub_1004B804C(&qword_101406B10);
  __chkstk_darwin(v4);
  v6 = (char *)&v97 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CRLBoardCRDTData(0);
  v107 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v103 = (uint64_t)&v97 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v105 = (uint64_t)&v97 - v10;
  v11 = type metadata accessor for DispatchPredicate(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (uint64_t *)((char *)&v97 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v14 = v15;
  v16 = *(void (**)(_QWORD))(v12 + 104);
  v109 = enum case for DispatchPredicate.onQueue(_:);
  v104 = (void (*)(_QWORD *, uint64_t, uint64_t))v16;
  v16(v14);
  v17 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)(v14);
  v18 = *(void (**)(_QWORD *, uint64_t))(v12 + 8);
  v18(v14, v11);
  if ((v15 & 1) == 0)
    goto LABEL_30;
  v106 = v6;
  v119 = 0;
  v120 = 0xE000000000000000;
  _StringGuts.grow(_:)(85);
  v19._countAndFlagsBits = 0x205443454C4553;
  v19._object = (void *)0xE700000000000000;
  String.append(_:)(v19);
  v20._countAndFlagsBits = sub_100AF5090(0, (void *)0xE000000000000000);
  object = v20._object;
  String.append(_:)(v20);
  swift_bridgeObjectRelease(object);
  v22._countAndFlagsBits = 0x204D4F524620;
  v22._object = (void *)0xE600000000000000;
  String.append(_:)(v22);
  v23._countAndFlagsBits = 0x736472616F62;
  v23._object = (void *)0xE600000000000000;
  String.append(_:)(v23);
  v24._countAndFlagsBits = 0x20455245485720;
  v24._object = (void *)0xE700000000000000;
  String.append(_:)(v24);
  v25._countAndFlagsBits = 0x6E6F7473626D6F74;
  v25._object = (void *)0xEA00000000006465;
  String.append(_:)(v25);
  v26._countAndFlagsBits = 0x444E412031203D20;
  v26._object = (void *)0xE900000000000020;
  String.append(_:)(v26);
  v27._countAndFlagsBits = 0xD00000000000001ALL;
  v27._object = (void *)0x8000000100FEF040;
  String.append(_:)(v27);
  v28._countAndFlagsBits = 0x444E412030203D20;
  v28._object = (void *)0xE900000000000020;
  String.append(_:)(v28);
  v117[0] = 4;
  _print_unlocked<A, B>(_:_:)(v117, &v119, &type metadata for CRLBoardDataStore.CRLBoardColumn, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v29._object = (void *)0x8000000100FEF3C0;
  v29._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v29);
  v30._countAndFlagsBits = 0x6E6F7473626D6F74;
  v30._object = (void *)0xEE00657461645F65;
  String.append(_:)(v30);
  v31._countAndFlagsBits = 0x494C0A4353454420;
  v31._object = (void *)0xED00003F2054494DLL;
  String.append(_:)(v31);
  v32 = v119;
  v33 = v120;
  v34 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v35 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v35, v121);
  swift_retain(v34);
  v37 = sub_1006B77CC(v36, v32, v33);
  v110 = v2;
  if (v2)
  {
    swift_release(v34);
    if (qword_1013DD858 == -1)
    {
LABEL_4:
      swift_beginAccess(&static OS_os_log.boardStore, &v119, 0, 0);
      v38 = (void *)static OS_os_log.boardStore;
      v39 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      inited = swift_initStackObject(v39, v118);
      *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
      swift_getErrorValue(v110, v116, v113);
      v41 = v114;
      v42 = v115;
      v43 = v38;
      v44 = Error.localizedDescription.getter(v41, v42);
      v46 = v45;
      *(_QWORD *)(inited + 56) = &type metadata for String;
      v47 = sub_1004CFC2C();
      *(_QWORD *)(inited + 64) = v47;
      *(_QWORD *)(inited + 32) = v44;
      *(_QWORD *)(inited + 40) = v46;
      v48 = static os_log_type_t.error.getter(v47);
      sub_100A06EBC((uint64_t)v43, &_mh_execute_header, v48, "Failed to fetch list of recently deleted boards with error %@", 61, 2, inited);
      swift_setDeallocating(inited);
      v49 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(inited + 32, 1, v49);

      swift_willThrow(v50);
      return v44;
    }
LABEL_31:
    swift_once(&qword_1013DD858, sub_100A05554);
    goto LABEL_4;
  }
  v51 = v37;
  v52 = swift_release(v34);
  v53 = *(void **)(*(_QWORD *)(v51 + 16) + 32);
  *v14 = v53;
  v54 = v109;
  v55 = v104;
  ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v104)(v14, v109, v11, v52);
  v56 = v53;
  LOBYTE(v53) = _dispatchPreconditionTest(_:)(v14);
  v18(v14, v11);
  if ((v53 & 1) == 0)
  {
    __break(1u);
    goto LABEL_33;
  }
  v57 = (sqlite3_stmt **)(v51 + 24);
  swift_beginAccess(v51 + 24, &v119, 1, 0);
  sqlite3_bind_int64(*(sqlite3_stmt **)(v51 + 24), 1, (sqlite3_int64)v111);
  v112 = (uint64_t)_swiftEmptyArrayStorage;
  v58 = *(void **)(*(_QWORD *)(v51 + 16) + 32);
  *v14 = v58;
  v55(v14, v54, v11);
  v59 = v58;
  LOBYTE(v58) = _dispatchPreconditionTest(_:)(v14);
  v18(v14, v11);
  if ((v58 & 1) == 0)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v60 = *(void **)(*(_QWORD *)(v51 + 16) + 32);
  *v14 = v60;
  v61 = swift_retain(v51);
  ((void (*)(_QWORD *, uint64_t, uint64_t, __n128))v55)(v14, v54, v11, v61);
  v62 = v60;
  LOBYTE(v60) = _dispatchPreconditionTest(_:)(v14);
  v18(v14, v11);
  if ((v60 & 1) == 0)
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v111 = (sqlite3_stmt **)(v51 + 24);
  v99 = v7;
  v98 = v11;
  v108 = v18;
  while (1)
  {
    sub_1006B7DA4(0, 0, 1);
    swift_beginAccess(v57, v117, 0, 0);
    v66 = sqlite3_step(*v57);
    if (v66 != 100)
      break;
    v67 = swift_retain_n(v51, 2);
    v68 = sub_100AF5564(v67, 0);
    if (v68)
    {
      v69 = v68;
      v70 = (uint64_t *)(v68 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_data);
      v71 = *(_QWORD *)(v68 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_data + 8);
      if (v71 >> 60 == 15)
      {
        v18 = v108;
      }
      else
      {
        v72 = *v70;
        sub_10057939C(*v70, v71);
        sub_10057939C(v72, v71);
        v73 = sub_1004B7878((unint64_t *)&unk_101405DC0, type metadata accessor for CRLBoardCRDTData, (uint64_t)&unk_100F3A2D0);
        swift_retain(v69);
        v74 = v7;
        v75 = (uint64_t)v106;
        v76 = v73;
        v77 = v110;
        CRDT.init(serializedData:)(v72, v71, v74, v76);
        if (v77)
        {
          swift_errorRelease(v77);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v107 + 56))(v75, 1, 1, v74);
          swift_release(v69);
          sub_1004BE2FC(v72, v71);
          sub_1004CB800(v75, &qword_101406B10);
          v110 = 0;
          v54 = v109;
          v18 = v108;
          v7 = v74;
        }
        else
        {
          v110 = 0;
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v107 + 56))(v75, 0, 1, v74);
          v78 = v105;
          sub_1004B84E0(v75, v105, type metadata accessor for CRLBoardCRDTData);
          v101 = *(_OWORD *)(v69 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_minRequiredVersions);
          v100 = *(_QWORD *)(v69 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_minRequiredVersions + 16);
          v79 = v78;
          v80 = v103;
          sub_1004B8460(v79, v103, type metadata accessor for CRLBoardCRDTData);
          v81 = OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_boardIdentifier;
          v82 = (uint64_t *)(v69 + *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20) + v81);
          v83 = v82[1];
          v102 = *v82;
          v84 = type metadata accessor for CRLBoardData(0);
          v85 = swift_allocObject(v84, *(unsigned int *)(v84 + 48), *(unsigned __int16 *)(v84 + 52));
          *(_QWORD *)(v85 + 16) = 7;
          *(_OWORD *)(v85 + 24) = v101;
          *(_QWORD *)(v85 + 40) = v100;
          sub_1004B84E0(v80, v85 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, type metadata accessor for CRLBoardCRDTData);
          swift_bridgeObjectRetain(v83);
          swift_release(v69);
          sub_1004BE2FC(v72, v71);
          v86 = (_QWORD *)(v85 + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
          *v86 = v102;
          v86[1] = v83;
          sub_1004B84A4(v105, type metadata accessor for CRLBoardCRDTData);
          swift_retain(v85);
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v87);
          v89 = *(_QWORD *)((v112 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v88 = *(_QWORD *)((v112 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v89 >= v88 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v88 > 1, v89 + 1, 1);
          v90 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v89, v85);
          specialized Array._endMutation()(v90);
          swift_release(v85);
          v55 = v104;
          v54 = v109;
          v18 = v108;
          v7 = v99;
          v11 = v98;
        }
      }
      swift_release(v69);
    }
    v63 = swift_release(v51);
    v64 = *(void **)(*(_QWORD *)(v51 + 16) + 32);
    *v14 = v64;
    ((void (*)(_QWORD *, uint64_t, uint64_t, __n128))v55)(v14, v54, v11, v63);
    v65 = v64;
    LOBYTE(v64) = _dispatchPreconditionTest(_:)(v14);
    v18(v14, v11);
    v57 = v111;
    if ((v64 & 1) == 0)
      goto LABEL_29;
  }
  if (v66 && v66 != 101)
  {
    v91 = v66;
    sub_1006B7DA4(0, 0, 1);
    v92 = 0;
  }
  else
  {
    v91 = 0;
    v92 = 1;
  }
  v44 = v112;
  swift_release(v51);
  sub_1006B7DA4(v91, 0, v92);
  v93 = *(void **)(*(_QWORD *)(v51 + 16) + 32);
  *v14 = v93;
  v55(v14, v109, v11);
  v94 = v93;
  LOBYTE(v93) = _dispatchPreconditionTest(_:)(v14);
  v18(v14, v11);
  if ((v93 & 1) == 0)
LABEL_34:
    __break(1u);
  v95 = v111;
  if (*v111)
  {
    sqlite3_finalize(*v111);
    *v95 = 0;
  }
  swift_release(v51);
  return v44;
}

uint64_t sub_100A80ED8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  void (*v9)(_QWORD *, uint64_t, uint64_t);
  id v10;
  void (*v11)(_QWORD *, uint64_t);
  Swift::String v12;
  void *object;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v42;
  unint64_t v43;
  void *v44;
  void (*v45)(_QWORD *, uint64_t, uint64_t);
  id v46;
  void (*v47)(_QWORD *, uint64_t);
  uint64_t v48;
  _QWORD *inited;
  uint64_t v50;
  void *v51;
  id v52;
  char v53;
  _QWORD *v54;
  sqlite3_stmt *v55;
  void *v56;
  id v57;
  uint64_t v58;
  void (*v59)(_QWORD *, uint64_t, uint64_t);
  void (*v60)(_QWORD *, uint64_t);
  _BYTE v61[8];
  uint64_t v62;
  uint64_t v63;
  _BYTE v64[8];
  _BYTE v65[48];
  _BYTE v66[72];
  uint64_t v67;
  unint64_t v68;
  _BYTE v69[32];

  v2 = v0;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (uint64_t *)((char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v6 = v7;
  v8 = enum case for DispatchPredicate.onQueue(_:);
  v9 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v4 + 104);
  v9(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  v10 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  v11 = *(void (**)(_QWORD *, uint64_t))(v4 + 8);
  v11(v6, v3);
  if ((v7 & 1) == 0)
  {
    __break(1u);
LABEL_17:
    swift_once(&qword_1013DD858, sub_100A05554);
    goto LABEL_5;
  }
  v59 = v9;
  v60 = v11;
  v67 = 0;
  v68 = 0xE000000000000000;
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease(v68);
  v67 = 0x205443454C4553;
  v68 = 0xE700000000000000;
  v12._countAndFlagsBits = sub_100AF5090(0, (void *)0xE000000000000000);
  object = v12._object;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(object);
  v14._countAndFlagsBits = 0x204D4F524620;
  v14._object = (void *)0xE600000000000000;
  String.append(_:)(v14);
  v15._countAndFlagsBits = 0x736472616F62;
  v15._object = (void *)0xE600000000000000;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0x2820455245485720;
  v16._object = (void *)0xE800000000000000;
  String.append(_:)(v16);
  v17._object = (void *)0x8000000100FD6350;
  v17._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 0x293F203D20;
  v18._object = (void *)0xE500000000000000;
  String.append(_:)(v18);
  v19 = v67;
  v20 = v68;
  v21 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v22 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v22, v69);
  swift_retain(v21);
  v24 = sub_1006B77CC(v23, v19, v20);
  if (!v1)
  {
    v25 = v24;
    swift_release(v21);
    v26 = sub_10067BA88();
    v42 = v26;
    v43 = v27;
    sub_1006B5E80(v26, v27);
    sub_1004BBBC8(v42, v43);
    v44 = *(void **)(*(_QWORD *)(v25 + 16) + 32);
    *v6 = v44;
    v45 = v59;
    v59(v6, v8, v3);
    v46 = v44;
    LOBYTE(v44) = _dispatchPreconditionTest(_:)(v6);
    v47 = v60;
    v60(v6, v3);
    if ((v44 & 1) != 0)
    {
      v48 = type metadata accessor for SQLiteRowIterator();
      inited = (_QWORD *)swift_initStackObject(v48, v65);
      inited[4] = 0;
      inited[5] = 1;
      inited[2] = v25;
      inited[3] = 0;
      swift_retain(v25);
      sub_1006B6B04();
      if (!v50)
      {
        swift_release(v25);
        swift_setDeallocating(inited);
        sub_1006B7DA4(inited[3], inited[4], inited[5]);
        v56 = *(void **)(*(_QWORD *)(v25 + 16) + 32);
        *v6 = v56;
        v45(v6, v8, v3);
        v57 = v56;
        LOBYTE(v56) = _dispatchPreconditionTest(_:)(v6);
        v47(v6, v3);
        if ((v56 & 1) != 0)
        {
          v54 = (_QWORD *)(v25 + 24);
          swift_beginAccess(v25 + 24, &v67, 1, 0);
          v34 = 0;
          v55 = *(sqlite3_stmt **)(v25 + 24);
          if (!v55)
            goto LABEL_12;
          goto LABEL_11;
        }
LABEL_20:
        __break(1u);
      }
      v34 = sub_100AF5564(v50, 0);
      swift_release(v25);
      swift_setDeallocating(inited);
      sub_1006B7DA4(inited[3], inited[4], inited[5]);
      v51 = *(void **)(*(_QWORD *)(v25 + 16) + 32);
      *v6 = v51;
      v45(v6, v8, v3);
      v52 = v51;
      v53 = _dispatchPreconditionTest(_:)(v6);
      v47(v6, v3);
      if ((v53 & 1) != 0)
      {
        v54 = (_QWORD *)(v25 + 24);
        swift_beginAccess(v25 + 24, &v67, 1, 0);
        v55 = *(sqlite3_stmt **)(v25 + 24);
        if (!v55)
        {
LABEL_12:
          swift_release(v25);
          return v34;
        }
LABEL_11:
        sqlite3_finalize(v55);
        *v54 = 0;
        goto LABEL_12;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_20;
  }
  swift_release(v21);
  if (qword_1013DD858 != -1)
    goto LABEL_17;
LABEL_5:
  swift_beginAccess(&static OS_os_log.boardStore, &v67, 0, 0);
  v28 = (void *)static OS_os_log.boardStore;
  v29 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  v30 = swift_initStackObject(v29, v66);
  *(_OWORD *)(v30 + 16) = xmmword_100EF5E40;
  swift_getErrorValue(v1, v64, v61);
  v31 = v62;
  v32 = v63;
  v33 = v28;
  v34 = Error.localizedDescription.getter(v31, v32);
  v36 = v35;
  *(_QWORD *)(v30 + 56) = &type metadata for String;
  v37 = sub_1004CFC2C();
  *(_QWORD *)(v30 + 64) = v37;
  *(_QWORD *)(v30 + 32) = v34;
  *(_QWORD *)(v30 + 40) = v36;
  v38 = static os_log_type_t.error.getter(v37);
  sub_100A06EBC((uint64_t)v33, &_mh_execute_header, v38, "Failed to fetch a board record with error %@", 44, 2, v30);
  swift_setDeallocating(v30);
  v39 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(v30 + 32, 1, v39);

  swift_willThrow(v40);
  return v34;
}

uint64_t sub_100A81494(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  id v19;
  char v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _BOOL8 v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  __n128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  uint64_t result;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD v80[3];
  uint64_t v81;

  v6 = sub_1004B804C((uint64_t *)&unk_1013E1A50);
  __chkstk_darwin(v6);
  v72 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v75 = *(_QWORD *)(v8 - 8);
  v76 = v8;
  v9 = __chkstk_darwin(v8);
  v73 = (char *)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v74 = (char *)&v69 - v12;
  __chkstk_darwin(v11);
  v81 = (uint64_t)&v69 - v13;
  v14 = type metadata accessor for DispatchPredicate(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (uint64_t *)((char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = *(void **)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v17 = v18;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v15 + 104))(v17, enum case for DispatchPredicate.onQueue(_:), v14);
  v19 = v18;
  v20 = _dispatchPreconditionTest(_:)(v17);
  (*(void (**)(_QWORD *, uint64_t))(v15 + 8))(v17, v14);
  if ((v20 & 1) == 0)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  v21 = (unint64_t)sub_100A81B30(a1, (void (*)(_QWORD *, uint64_t, uint64_t))a2);
  a2 = v3;
  if (v3)
    return v2;
  v14 = v21;
  if (v21 >> 62)
  {
LABEL_47:
    if (v14 < 0)
      v63 = v14;
    else
      v63 = v14 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v14);
    v64 = _CocoaArrayWrapper.endIndex.getter(v63);
    swift_bridgeObjectRelease(v14);
    if (v64)
    {
      v70 = a2;
      v71 = a1;
      swift_bridgeObjectRetain_n(v14, 2);
      v65 = _CocoaArrayWrapper.endIndex.getter(v63);
      swift_bridgeObjectRelease(v14);
      v79 = v65;
      if (!v65)
      {
        swift_bridgeObjectRelease(v14);
        v22 = &_swiftEmptyDictionarySingleton;
        goto LABEL_53;
      }
      goto LABEL_6;
    }
LABEL_58:
    swift_bridgeObjectRelease(v14);
    return 0;
  }
  v79 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v79)
    goto LABEL_58;
  v70 = 0;
  v71 = a1;
  swift_bridgeObjectRetain(v21);
LABEL_6:
  v78 = v14 & 0xC000000000000001;
  v22 = &_swiftEmptyDictionarySingleton;
  v23 = 4;
  v77 = v14;
  do
  {
    v29 = v23 - 4;
    if (v78)
    {
      v14 = specialized _ArrayBuffer._getElementSlowPath(_:)(v23 - 4, v14);
      v30 = v23 - 3;
      if (__OFADD__(v29, 1))
        goto LABEL_43;
    }
    else
    {
      v14 = *(_QWORD *)(v14 + 8 * v23);
      swift_retain(v14);
      v30 = v23 - 3;
      if (__OFADD__(v29, 1))
      {
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
    }
    v31 = v81;
    (*(void (**)(void))(*(_QWORD *)v14 + 256))();
    v32 = type metadata accessor for CRLBoardItemDatabaseResult();
    a2 = swift_allocObject(v32, 32, 7);
    *(_QWORD *)(a2 + 16) = v14;
    *(_QWORD *)(a2 + 24) = _swiftEmptyArrayStorage;
    swift_retain(v14);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v22);
    v80[0] = v22;
    v35 = sub_100842EFC(v31);
    v36 = v22[2];
    v37 = (v34 & 1) == 0;
    v38 = v36 + v37;
    if (__OFADD__(v36, v37))
      goto LABEL_44;
    a1 = v34;
    if (v22[3] >= v38)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v22 = (_QWORD *)v80[0];
        if ((v34 & 1) != 0)
          goto LABEL_7;
      }
      else
      {
        sub_100833998();
        v22 = (_QWORD *)v80[0];
        if ((a1 & 1) != 0)
          goto LABEL_7;
      }
    }
    else
    {
      sub_100822360(v38, isUniquelyReferenced_nonNull_native);
      v39 = sub_100842EFC(v81);
      if ((a1 & 1) != (v40 & 1))
        goto LABEL_61;
      v35 = v39;
      v22 = (_QWORD *)v80[0];
      if ((a1 & 1) != 0)
      {
LABEL_7:
        v24 = v22[7];
        swift_release(*(_QWORD *)(v24 + 8 * v35));
        *(_QWORD *)(v24 + 8 * v35) = a2;
        v25 = v75;
        goto LABEL_8;
      }
    }
    v22[(v35 >> 6) + 8] |= 1 << v35;
    v25 = v75;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v75 + 16))(v22[6] + *(_QWORD *)(v75 + 72) * v35, v81, v76);
    *(_QWORD *)(v22[7] + 8 * v35) = a2;
    v41 = v22[2];
    v42 = __OFADD__(v41, 1);
    v43 = v41 + 1;
    if (v42)
      goto LABEL_45;
    v22[2] = v43;
LABEL_8:
    v26 = swift_bridgeObjectRelease(0x8000000000000000);
    a1 = *(_QWORD *)(v25 + 8);
    v27 = v76;
    ((void (*)(uint64_t, uint64_t, __n128))a1)(v81, v76, v26);
    swift_release(v14);
    ++v23;
    v28 = (uint64_t)v73;
    a2 = (uint64_t)v74;
    v14 = v77;
  }
  while (v30 != v79);
  swift_bridgeObjectRelease(v77);
  if (v79 < 1)
  {
    __break(1u);
LABEL_61:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v76);
    __break(1u);
  }
  else
  {
    v44 = 0;
    v45 = (uint64_t)v72;
    do
    {
      if (v78)
      {
        v46 = specialized _ArrayBuffer._getElementSlowPath(_:)(v44, v14);
      }
      else
      {
        v46 = *(_QWORD *)(v14 + 8 * v44 + 32);
        v47 = swift_retain(v46);
      }
      (*(void (**)(__n128))(*(_QWORD *)v46 + 256))(v47);
      if (v22[2] && (v48 = sub_100842EFC(a2), (v49 & 1) != 0))
      {
        v50 = a2;
        v51 = *(_QWORD *)(v22[7] + 8 * v48);
        v52 = swift_retain(v51);
        v53 = ((uint64_t (*)(uint64_t, uint64_t, __n128))a1)(v50, v27, v52);
        (*(void (**)(uint64_t))(*(_QWORD *)v46 + 264))(v53);
        v54 = v75;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v75 + 48))(v45, 1, v27) == 1)
        {
          swift_release(v46);
          swift_release(v51);
          sub_1004CB800(v45, (uint64_t *)&unk_1013E1A50);
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 32))(v28, v45, v27);
          if (v22[2] && (v55 = sub_100842EFC(v28), (v56 & 1) != 0))
          {
            v57 = *(_QWORD *)(v22[7] + 8 * v55);
            swift_beginAccess(v57 + 24, v80, 33, 0);
            swift_retain(v51);
            swift_retain(v57);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v58);
            v60 = *(_QWORD *)((*(_QWORD *)(v57 + 24) & 0xFFFFFFFFFFFFFF8) + 0x10);
            v59 = *(_QWORD *)((*(_QWORD *)(v57 + 24) & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v60 >= v59 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v59 > 1, v60 + 1, 1);
            v61 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v60, v51);
            specialized Array._endMutation()(v61);
            swift_endAccess(v80);
            swift_release(v51);
            swift_release(v57);
            v62 = swift_release(v46);
            v28 = (uint64_t)v73;
            v27 = v76;
            ((void (*)(char *, uint64_t, __n128))a1)(v73, v76, v62);
          }
          else
          {
            ((void (*)(uint64_t, uint64_t))a1)(v28, v27);
            swift_release(v46);
            swift_release(v51);
          }
        }
        a2 = (uint64_t)v74;
      }
      else
      {
        ((void (*)(uint64_t, uint64_t))a1)(a2, v27);
        swift_release(v46);
      }
      ++v44;
      v14 = v77;
    }
    while (v79 != v44);
LABEL_53:
    swift_bridgeObjectRelease(v14);
    if (v22[2] && (v66 = sub_100842EFC(v71), (v67 & 1) != 0))
    {
      v2 = *(_QWORD *)(v22[7] + 8 * v66);
      swift_retain(v2);
    }
    else
    {
      v2 = 0;
    }
    swift_bridgeObjectRelease(v22);
    return v2;
  }
  return result;
}

_QWORD *sub_100A81B30(uint64_t a1, void (*a2)(_QWORD *, uint64_t, uint64_t))
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t inited;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSString v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v42[2];
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  char v51[72];
  unint64_t v52;

  v4 = v3;
  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (_QWORD *)((char *)v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *(void **)((char *)v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v10 = v11;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v10);
  (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(v10, v7);
  if ((v11 & 1) == 0)
  {
    __break(1u);
    goto LABEL_26;
  }
  v49 = sub_100A82278(a1, a2, 0);
  v2 = v3;
  if (!v3)
  {
    v52 = (unint64_t)_swiftEmptyArrayStorage;
    if (!((unint64_t)v49 >> 62))
    {
      v13 = *(_QWORD *)((v49 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v49);
      if (v13)
      {
LABEL_5:
        v42[1] = v2;
        if (v13 < 1)
        {
          __break(1u);
          JUMPOUT(0x100A82244);
        }
        v14 = 0;
        v15 = v49 & 0xC000000000000001;
        v47 = xmmword_100EF5E40;
        v46 = v13;
        v45 = v49 & 0xC000000000000001;
        do
        {
          if (v15)
          {
            v16 = specialized _ArrayBuffer._getElementSlowPath(_:)(v14, v49);
          }
          else
          {
            v16 = *(_QWORD *)(v49 + 8 * v14 + 32);
            swift_retain(v16);
          }
          if (*(_BYTE *)(v16 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_isLocalTombstone) == 1
            || (v17 = *(_QWORD *)(v16 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_commonData + 8),
                v17 >> 60 == 15))
          {
            swift_release(v16);
          }
          else
          {
            v18 = *(_QWORD *)(v16 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_commonData);
            v19 = (uint64_t *)(v16 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_minRequiredVersions);
            v20 = *(_QWORD *)(v16 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_minRequiredVersions);
            v44 = sub_1004B804C((uint64_t *)&unk_1013E0180);
            inited = swift_initStackObject(v44, v51);
            *(_OWORD *)(inited + 16) = v47;
            v50 = &type metadata for UInt64;
            v48 = v18;
            sub_1004BE310(v18, v17);
            v22 = sub_1004B804C(&qword_1014052E8);
            String.init<A>(describing:)(&v50, v22);
            v24 = v23;
            v25 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v24);
            *(_QWORD *)(inited + 56) = sub_1004B8930(0, (unint64_t *)&qword_1013E46B0, NSString_ptr);
            *(_QWORD *)(inited + 64) = sub_1005A15B8((unint64_t *)&qword_1013EE6B0, (unint64_t *)&qword_1013E46B0, NSString_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
            *(_QWORD *)(inited + 32) = v25;
            if (!v20)
            {
              sub_100757E04(&_mh_execute_header, (uint64_t)"createItemData(from:)", 21, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2, 11030, "expected inequality between two values of type %{public}@", 57, 2u, inited);
              sub_1004F5394(inited, (uint64_t)"createItemData(from:)", 21, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2u, 11030, (uint64_t)"expected inequality between two values of type %{public}@", 57, 2u);
            }
            swift_bridgeObjectRelease(inited);
            v26 = *(_QWORD *)(v16 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_itemTypeValue);
            v27 = sub_1007BD7CC(v26);
            if (v27 != 13)
              __asm { BR              X9 }
            v28 = *(_QWORD *)(v16 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_specificData + 8);
            if (v28 >> 60 == 15)
            {
              sub_1004BE2FC(v48, v17);
              swift_release(v16);
              v13 = v46;
              v15 = v45;
            }
            else
            {
              LODWORD(v44) = v27 != 13;
              v29 = *(_QWORD *)(v16 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_specificData);
              v30 = v19[1];
              v43 = *v19;
              v31 = v19[2];
              v32 = *(_QWORD *)(v16 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_objectOptions);
              sub_1004BE310(v29, v28);
              v33 = v32;
              v34 = v48;
              v35 = sub_10089BAB8(v26, v44, v43, v30, v31, v33, v48, v17, v29, v28);
              sub_1004BE2FC(v29, v28);
              sub_1004BE2FC(v34, v17);
              swift_release(v16);
              v13 = v46;
              v15 = v45;
              if (v35)
              {
                specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v36);
                v38 = *(_QWORD *)((v52 & 0xFFFFFFFFFFFFFF8) + 0x10);
                v37 = *(_QWORD *)((v52 & 0xFFFFFFFFFFFFFF8) + 0x18);
                if (v38 >= v37 >> 1)
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v38 + 1, 1);
                v39 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v38, v35);
                specialized Array._endMutation()(v39);
              }
            }
          }
          ++v14;
        }
        while (v13 != v14);
        swift_bridgeObjectRelease(v49);
        v4 = (_QWORD *)v52;
        goto LABEL_31;
      }
LABEL_30:
      swift_bridgeObjectRelease(v49);
      v4 = _swiftEmptyArrayStorage;
LABEL_31:
      swift_bridgeObjectRelease(v49);
      return v4;
    }
LABEL_26:
    if (v49 < 0)
      v40 = v49;
    else
      v40 = v49 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v49);
    v13 = _CocoaArrayWrapper.endIndex.getter(v40);
    if (v13)
      goto LABEL_5;
    goto LABEL_30;
  }
  return v4;
}

uint64_t sub_100A82278(uint64_t a1, void (*a2)(_QWORD *, uint64_t, uint64_t), char a3)
{
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  unsigned int v12;
  void (*v13)(_QWORD *, _QWORD, uint64_t);
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t inited;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  void *v42;
  id v43;
  void (*v44)(_QWORD *, uint64_t, uint64_t);
  uint64_t v45;
  void *v46;
  __n128 v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  void *v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  void *v71;
  id v72;
  sqlite3_stmt *v73;
  uint64_t v74;
  _QWORD *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(_QWORD *, uint64_t, uint64_t);
  char *v80;
  unsigned int v81;
  char v82[8];
  uint64_t v83;
  uint64_t v84;
  char v85[8];
  unint64_t v86;
  char v87[48];
  char v88[24];
  char v89[72];
  _BYTE v90[16];
  char v91[8];

  v5 = v3;
  LOBYTE(v6) = a3;
  v79 = (void (*)(_QWORD *, uint64_t, uint64_t))a2;
  v78 = a1;
  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (uint64_t *)((char *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *(void **)&v3[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue];
  *v10 = v11;
  v12 = enum case for DispatchPredicate.onQueue(_:);
  v13 = *(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104);
  v13(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  v14 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v10);
  v80 = *(char **)(v8 + 8);
  ((void (*)(_QWORD *, uint64_t))v80)(v10, v7);
  if ((v11 & 1) == 0)
    goto LABEL_26;
  v81 = v12;
  if (qword_1013DCFD0 != -1)
    goto LABEL_27;
  while (1)
  {
    CRLAnalyticsOSSignpostManager.beginSignpostInterval(for:with:)(29, 1, (uint64_t)_swiftEmptyArrayStorage);
    v15 = sub_100AF94C0((uint64_t)&off_1012636A0, v6 & 1);
    v17 = v16;
    v86 = (unint64_t)_swiftEmptyArrayStorage;
    v18 = *(_QWORD *)&v5[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database];
    v19 = type metadata accessor for SQLiteStatement();
    swift_initStackObject(v19, v91);
    swift_retain(v18);
    v21 = sub_1006B77CC(v20, v15, v17);
    if (v4)
    {
      swift_release(v18);
      swift_bridgeObjectRelease(v86);
      if (qword_1013DD858 != -1)
        swift_once(&qword_1013DD858, sub_100A05554);
      swift_beginAccess(&static OS_os_log.boardStore, v90, 0, 0);
      v28 = (void *)static OS_os_log.boardStore;
      v29 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      inited = swift_initStackObject(v29, v89);
      *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
      swift_getErrorValue(v4, v85, v82);
      v31 = v83;
      v32 = v84;
      v33 = v28;
      v34 = Error.localizedDescription.getter(v31, v32);
      v36 = v35;
      *(_QWORD *)(inited + 56) = &type metadata for String;
      v37 = sub_1004CFC2C();
      *(_QWORD *)(inited + 64) = v37;
      *(_QWORD *)(inited + 32) = v34;
      *(_QWORD *)(inited + 40) = v36;
      v38 = static os_log_type_t.error.getter(v37);
      sub_100A06EBC((uint64_t)v33, &_mh_execute_header, v38, "Failed to fetch a board item record with error %@", 49, 2, inited);
      swift_setDeallocating(inited);
      v39 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(inited + 32, 1, v39);

      return swift_willThrow(v40);
    }
    v22 = v21;
    swift_release(v18);
    v23 = UUID.crl_data()();
    v25 = v24;
    sub_1006B5E80(v23, v24);
    sub_1004BBBC8(v23, v25);
    v26 = sub_10067BA88();
    v77 = v26;
    v76 = v27;
    sub_1006B5E80(v26, v27);
    v42 = *(void **)(*(_QWORD *)(v22 + 16) + 32);
    *v10 = v42;
    v13(v10, v81, v7);
    v43 = v42;
    LOBYTE(v42) = _dispatchPreconditionTest(_:)(v10);
    v5 = v80;
    ((void (*)(_QWORD *, uint64_t))v80)(v10, v7);
    if ((v42 & 1) == 0)
    {
      __break(1u);
      goto LABEL_29;
    }
    v44 = (void (*)(_QWORD *, _QWORD, uint64_t, __n128))v13;
    v45 = type metadata accessor for SQLiteRowIterator();
    v6 = swift_initStackObject(v45, v87);
    *(_QWORD *)(v6 + 24) = 0;
    v13 = (void (*)(_QWORD *, _QWORD, uint64_t))(v6 + 24);
    *(_QWORD *)(v6 + 32) = 0;
    v75 = (_QWORD *)(v6 + 32);
    *(_QWORD *)(v6 + 40) = 1;
    *(_QWORD *)(v6 + 16) = v22;
    v46 = *(void **)(*(_QWORD *)(v22 + 16) + 32);
    *v10 = v46;
    v78 = v22;
    v47 = swift_retain(v22);
    v48 = v81;
    v79 = (void (*)(_QWORD *, uint64_t, uint64_t))v44;
    v44(v10, v81, v7, v47);
    v49 = v46;
    LOBYTE(v46) = _dispatchPreconditionTest(_:)(v10);
    ((void (*)(_QWORD *, uint64_t))v5)(v10, v7);
    if ((v46 & 1) != 0)
      break;
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    swift_once(&qword_1013DCFD0, sub_100709D64);
  }
  v50 = v78;
  while (1)
  {
    v55 = *(_QWORD *)(v6 + 24);
    v56 = *(_QWORD *)(v6 + 32);
    v57 = *(_QWORD *)(v6 + 40);
    *(_QWORD *)v13 = 0;
    *(_QWORD *)(v6 + 32) = 0;
    *(_QWORD *)(v6 + 40) = 1;
    sub_1006B7DA4(v55, v56, v57);
    swift_beginAccess(v50 + 24, v90, 0, 0);
    v58 = sqlite3_step(*(sqlite3_stmt **)(v50 + 24));
    if (v58 != 100)
      break;
    v59 = swift_retain_n(v50, 2);
    v60 = sub_100AFA1D4(v59, 0);
    if (v60)
    {
      v61 = v60;
      swift_retain(v60);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v62);
      v64 = *(_QWORD *)((v86 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v63 = *(_QWORD *)((v86 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v64 >= v63 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v63 > 1, v64 + 1, 1);
      v51 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v64, v61);
      specialized Array._endMutation()(v51);
      swift_release(v61);
      v5 = v80;
    }
    v52 = swift_release(v50);
    v50 = *(_QWORD *)(v6 + 16);
    v53 = *(void **)(*(_QWORD *)(v50 + 16) + 32);
    *v10 = v53;
    v48 = v81;
    ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v79)(v10, v81, v7, v52);
    v54 = v53;
    LOBYTE(v53) = _dispatchPreconditionTest(_:)(v10);
    ((void (*)(_QWORD *, uint64_t))v5)(v10, v7);
    if ((v53 & 1) == 0)
      goto LABEL_25;
  }
  if (v58 && v58 != 101)
  {
    v65 = v58;
    v66 = *(_QWORD *)(v6 + 24);
    v67 = *(_QWORD *)(v6 + 32);
    v68 = *(_QWORD *)(v6 + 40);
    *(_QWORD *)(v6 + 24) = v65;
    v69 = v75;
    *v75 = 0;
    v69[1] = 0;
    sub_1006B7DA4(v66, v67, v68);
  }
  swift_release(v6);
  sub_1004BBBC8(v77, v76);
  v70 = v78;
  v71 = *(void **)(*(_QWORD *)(v78 + 16) + 32);
  *v10 = v71;
  v79(v10, v48, v7);
  v72 = v71;
  LOBYTE(v71) = _dispatchPreconditionTest(_:)(v10);
  ((void (*)(_QWORD *, uint64_t))v5)(v10, v7);
  if ((v71 & 1) == 0)
LABEL_29:
    __break(1u);
  swift_beginAccess(v70 + 24, v88, 1, 0);
  v73 = *(sqlite3_stmt **)(v70 + 24);
  if (v73)
  {
    sqlite3_finalize(v73);
    *(_QWORD *)(v70 + 24) = 0;
  }
  swift_release(v70);
  CRLAnalyticsOSSignpostManager.endSignpostInterval(for:)(29, 1);
  return v86;
}

uint64_t sub_100A8296C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  void (*v8)(_QWORD);
  id v9;
  Swift::String v10;
  void *object;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  _QWORD *inited;
  uint64_t v52;
  void *v53;
  id v54;
  char v55;
  _QWORD *v56;
  sqlite3_stmt *v57;
  void *v58;
  id v59;
  uint64_t v60;
  void (*v61)(_QWORD *, uint64_t, uint64_t);
  void (*v62)(_QWORD *, uint64_t);
  _BYTE v63[8];
  uint64_t v64;
  uint64_t v65;
  _BYTE v66[8];
  _BYTE v67[48];
  _BYTE v68[72];
  uint64_t v69;
  unint64_t v70;
  _BYTE v71[32];

  v2 = v0;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (uint64_t *)((char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v6 = v7;
  v8 = *(void (**)(_QWORD))(v4 + 104);
  HIDWORD(v60) = enum case for DispatchPredicate.onQueue(_:);
  v61 = (void (*)(_QWORD *, uint64_t, uint64_t))v8;
  v8(v6);
  v9 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  v62 = *(void (**)(_QWORD *, uint64_t))(v4 + 8);
  v62(v6, v3);
  if ((v7 & 1) == 0)
  {
    __break(1u);
LABEL_17:
    swift_once(&qword_1013DD858, sub_100A05554);
    goto LABEL_5;
  }
  v69 = 0;
  v70 = 0xE000000000000000;
  _StringGuts.grow(_:)(43);
  swift_bridgeObjectRelease(v70);
  v69 = 0x205443454C4553;
  v70 = 0xE700000000000000;
  v10._countAndFlagsBits = sub_100AFB6C4(0, (void *)0xE000000000000000);
  object = v10._object;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(object);
  v12._countAndFlagsBits = 0x204D4F524620;
  v12._object = (void *)0xE600000000000000;
  String.append(_:)(v12);
  v13._countAndFlagsBits = 0x74695F6472616F62;
  v13._object = (void *)0xEB00000000736D65;
  String.append(_:)(v13);
  v14._countAndFlagsBits = 0x2820455245485720;
  v14._object = (void *)0xE800000000000000;
  String.append(_:)(v14);
  v15._object = (void *)0xE900000000000064;
  v15._countAndFlagsBits = 0x6975755F6D657469;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0x444E41203F203D20;
  v16._object = (void *)0xE900000000000020;
  String.append(_:)(v16);
  v17._object = (void *)0x8000000100FD6350;
  v17._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 0x293F203D20;
  v18._object = (void *)0xE500000000000000;
  String.append(_:)(v18);
  v19 = v69;
  v20 = v70;
  v21 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v22 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v22, v71);
  swift_retain(v21);
  v24 = sub_1006B77CC(v23, v19, v20);
  if (!v1)
  {
    v25 = v24;
    swift_release(v21);
    v26 = UUID.crl_data()();
    v28 = v27;
    sub_1006B5E80(v26, v27);
    sub_1004BBBC8(v26, v28);
    v29 = sub_10067BA88();
    v45 = v29;
    v46 = v30;
    sub_1006B5E80(v29, v30);
    v47 = *(void **)(*(_QWORD *)(v25 + 16) + 32);
    *v6 = v47;
    v48 = HIDWORD(v60);
    v61(v6, HIDWORD(v60), v3);
    v49 = v47;
    LOBYTE(v47) = _dispatchPreconditionTest(_:)(v6);
    v62(v6, v3);
    if ((v47 & 1) != 0)
    {
      v50 = type metadata accessor for SQLiteRowIterator();
      inited = (_QWORD *)swift_initStackObject(v50, v67);
      inited[4] = 0;
      inited[5] = 1;
      inited[2] = v25;
      inited[3] = 0;
      swift_retain(v25);
      sub_1006B6B04();
      if (!v52)
      {
        swift_release(v25);
        swift_setDeallocating(inited);
        sub_1006B7DA4(inited[3], inited[4], inited[5]);
        sub_1004BBBC8(v45, v46);
        v58 = *(void **)(*(_QWORD *)(v25 + 16) + 32);
        *v6 = v58;
        v61(v6, v48, v3);
        v59 = v58;
        LOBYTE(v58) = _dispatchPreconditionTest(_:)(v6);
        v62(v6, v3);
        if ((v58 & 1) != 0)
        {
          v56 = (_QWORD *)(v25 + 24);
          swift_beginAccess(v25 + 24, &v69, 1, 0);
          v37 = 0;
          v57 = *(sqlite3_stmt **)(v25 + 24);
          if (!v57)
            goto LABEL_12;
          goto LABEL_11;
        }
LABEL_20:
        __break(1u);
      }
      v37 = sub_100AFA1D4(v52, 0);
      swift_release(v25);
      swift_setDeallocating(inited);
      sub_1006B7DA4(inited[3], inited[4], inited[5]);
      sub_1004BBBC8(v45, v46);
      v53 = *(void **)(*(_QWORD *)(v25 + 16) + 32);
      *v6 = v53;
      v61(v6, v48, v3);
      v54 = v53;
      v55 = _dispatchPreconditionTest(_:)(v6);
      v62(v6, v3);
      if ((v55 & 1) != 0)
      {
        v56 = (_QWORD *)(v25 + 24);
        swift_beginAccess(v25 + 24, &v69, 1, 0);
        v57 = *(sqlite3_stmt **)(v25 + 24);
        if (!v57)
        {
LABEL_12:
          swift_release(v25);
          return v37;
        }
LABEL_11:
        sqlite3_finalize(v57);
        *v56 = 0;
        goto LABEL_12;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_20;
  }
  swift_release(v21);
  if (qword_1013DD858 != -1)
    goto LABEL_17;
LABEL_5:
  swift_beginAccess(&static OS_os_log.boardStore, &v69, 0, 0);
  v31 = (void *)static OS_os_log.boardStore;
  v32 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  v33 = swift_initStackObject(v32, v68);
  *(_OWORD *)(v33 + 16) = xmmword_100EF5E40;
  swift_getErrorValue(v1, v66, v63);
  v34 = v64;
  v35 = v65;
  v36 = v31;
  v37 = Error.localizedDescription.getter(v34, v35);
  v39 = v38;
  *(_QWORD *)(v33 + 56) = &type metadata for String;
  v40 = sub_1004CFC2C();
  *(_QWORD *)(v33 + 64) = v40;
  *(_QWORD *)(v33 + 32) = v37;
  *(_QWORD *)(v33 + 40) = v39;
  v41 = static os_log_type_t.error.getter(v40);
  sub_100A06EBC((uint64_t)v36, &_mh_execute_header, v41, "Failed to fetch a board item record with error %@", 49, 2, v33);
  swift_setDeallocating(v33);
  v42 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(v33 + 32, 1, v42);

  swift_willThrow(v43);
  return v37;
}

uint64_t sub_100A82FDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  id v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t inited;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __n128 v55;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  id v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  void *v66;
  id v67;
  _QWORD *v68;
  void *v69;
  id v70;
  sqlite3_stmt *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(_QWORD *, uint64_t, uint64_t);
  void (*v76)(_QWORD *, uint64_t);
  _BYTE v77[8];
  uint64_t v78;
  uint64_t v79;
  _BYTE v80[8];
  _BYTE v81[48];
  _BYTE v82[72];
  uint64_t v83;
  unint64_t v84;
  _BYTE v85[24];

  v3 = v1;
  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (uint64_t *)((char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v9 = v10;
  v11 = enum case for DispatchPredicate.onQueue(_:);
  v75 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v6 + 104);
  ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v75)(v9, enum case for DispatchPredicate.onQueue(_:), v5, v7);
  v12 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  v76 = *(void (**)(_QWORD *, uint64_t))(v6 + 8);
  v76(v9, v5);
  if ((v10 & 1) == 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  v74 = a1;
  v83 = 0;
  v84 = 0xE000000000000000;
  _StringGuts.grow(_:)(120);
  v13._object = (void *)0x8000000100FEF7D0;
  v13._countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v13);
  v14._countAndFlagsBits = 0x74695F6472616F62;
  v14._object = (void *)0xEB00000000736D65;
  String.append(_:)(v14);
  v15._countAndFlagsBits = 0x20455245485720;
  v15._object = (void *)0xE700000000000000;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0x74695F6472616F62;
  v16._object = (void *)0xEB00000000736D65;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 46;
  v17._object = (void *)0xE100000000000000;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 0xD000000000000010;
  v18._object = (void *)0x8000000100FD6350;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 0x444E41203F203D20;
  v19._object = (void *)0xE900000000000020;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 0x74695F6472616F62;
  v20._object = (void *)0xEB00000000736D65;
  String.append(_:)(v20);
  v21._countAndFlagsBits = 46;
  v21._object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  v22._countAndFlagsBits = 0xD000000000000010;
  v22._object = (void *)0x8000000100FEEB40;
  String.append(_:)(v22);
  v23._object = (void *)0x8000000100FEFAA0;
  v23._countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v23);
  v24._countAndFlagsBits = 0x736472616F62;
  v24._object = (void *)0xE600000000000000;
  String.append(_:)(v24);
  v25._countAndFlagsBits = 0x20455245485720;
  v25._object = (void *)0xE700000000000000;
  String.append(_:)(v25);
  v26._countAndFlagsBits = 0x736472616F62;
  v26._object = (void *)0xE600000000000000;
  String.append(_:)(v26);
  v27._countAndFlagsBits = 46;
  v27._object = (void *)0xE100000000000000;
  String.append(_:)(v27);
  v28._countAndFlagsBits = 0xD000000000000010;
  v28._object = (void *)0x8000000100FD6350;
  String.append(_:)(v28);
  v29._countAndFlagsBits = 0x444E410A3F203D20;
  v29._object = (void *)0xE900000000000020;
  String.append(_:)(v29);
  v30._countAndFlagsBits = 0x736472616F62;
  v30._object = (void *)0xE600000000000000;
  String.append(_:)(v30);
  v31._countAndFlagsBits = 46;
  v31._object = (void *)0xE100000000000000;
  String.append(_:)(v31);
  v32._countAndFlagsBits = 0xD000000000000010;
  v32._object = (void *)0x8000000100FEEB40;
  String.append(_:)(v32);
  v33._countAndFlagsBits = 0x292030203E20;
  v33._object = (void *)0xE600000000000000;
  String.append(_:)(v33);
  v34 = v83;
  v35 = v84;
  v36 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v37 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v37, v85);
  swift_retain(v36);
  v39 = sub_1006B77CC(v38, v34, v35);
  if (v2)
  {
    swift_release(v36);
    if (qword_1013DD858 == -1)
    {
LABEL_5:
      swift_beginAccess(&static OS_os_log.boardStore, &v83, 0, 0);
      v43 = (void *)static OS_os_log.boardStore;
      v44 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      inited = swift_initStackObject(v44, v82);
      *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
      swift_getErrorValue(v2, v80, v77);
      v46 = v78;
      v47 = v79;
      v48 = v43;
      v49 = Error.localizedDescription.getter(v46, v47);
      v51 = v50;
      *(_QWORD *)(inited + 56) = &type metadata for String;
      v52 = sub_1004CFC2C();
      *(_QWORD *)(inited + 64) = v52;
      *(_QWORD *)(inited + 32) = v49;
      *(_QWORD *)(inited + 40) = v51;
      v53 = static os_log_type_t.error.getter(v52);
      sub_100A06EBC(v48, &_mh_execute_header, v53, "Failed to fetch a board syncData with error %@", 46, 2, inited);
      swift_setDeallocating(inited);
      v54 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(inited + 32, 1, v54);

      swift_willThrow(v55);
      return v48 & 1;
    }
LABEL_19:
    swift_once(&qword_1013DD858, sub_100A05554);
    goto LABEL_5;
  }
  v40 = v39;
  swift_release(v36);
  v41 = sub_10067BA88();
  v57 = v41;
  v58 = v42;
  sub_1006B5E80(v41, v42);
  sub_1006B5E80(v57, v58);
  v59 = *(void **)(*(_QWORD *)(v40 + 16) + 32);
  *v9 = v59;
  v75(v9, v11, v5);
  v60 = v59;
  LOBYTE(v59) = _dispatchPreconditionTest(_:)(v9);
  v76(v9, v5);
  if ((v59 & 1) == 0)
  {
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
  }
  v61 = type metadata accessor for SQLiteRowIterator();
  v62 = (_QWORD *)swift_initStackObject(v61, v81);
  v62[4] = 0;
  v62[5] = 1;
  v62[2] = v40;
  v62[3] = 0;
  swift_retain(v40);
  sub_1006B6B04();
  if (!v63)
  {
    swift_release(v40);
    swift_setDeallocating(v62);
    sub_1006B7DA4(v62[3], v62[4], v62[5]);
    sub_1004BBBC8(v57, v58);
LABEL_13:
    v69 = *(void **)(*(_QWORD *)(v40 + 16) + 32);
    *v9 = v69;
    v75(v9, v11, v5);
    v70 = v69;
    LOBYTE(v69) = _dispatchPreconditionTest(_:)(v9);
    v76(v9, v5);
    if ((v69 & 1) != 0)
    {
      v68 = (_QWORD *)(v40 + 24);
      swift_beginAccess(v40 + 24, &v83, 1, 0);
      LOBYTE(v48) = 0;
      goto LABEL_15;
    }
    goto LABEL_21;
  }
  v64 = v63;
  v73 = sub_1006B45D4(0, v63);
  LODWORD(v74) = v65;
  swift_release(v40);
  swift_release(v64);
  swift_setDeallocating(v62);
  sub_1006B7DA4(v62[3], v62[4], v62[5]);
  sub_1004BBBC8(v57, v58);
  if ((v74 & 1) != 0)
    goto LABEL_13;
  v66 = *(void **)(*(_QWORD *)(v40 + 16) + 32);
  *v9 = v66;
  v75(v9, v11, v5);
  v67 = v66;
  LOBYTE(v66) = _dispatchPreconditionTest(_:)(v9);
  v76(v9, v5);
  if ((v66 & 1) == 0)
    goto LABEL_22;
  LOBYTE(v48) = v73 > 0;
  v68 = (_QWORD *)(v40 + 24);
  swift_beginAccess(v40 + 24, &v83, 1, 0);
LABEL_15:
  v71 = *(sqlite3_stmt **)(v40 + 24);
  if (v71)
  {
    sqlite3_finalize(v71);
    *v68 = 0;
  }
  swift_release(v40);
  return v48 & 1;
}

void sub_100A83754()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = type metadata accessor for CRLBoardDataStore.KeyValueTableKey(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (uint64_t *)((char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v9 = v10;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5, v7);
  v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v9, v5);
  if ((v10 & 1) != 0)
  {
    swift_storeEnumTagMultiPayload(v4, v2, 7);
    v12 = sub_100A83944((uint64_t)v4);
    v14 = v13;
    sub_1004B84A4((uint64_t)v4, type metadata accessor for CRLBoardDataStore.KeyValueTableKey);
    if (!v1 && v14 >> 60 != 15)
    {
      v15 = type metadata accessor for JSONDecoder(0);
      swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
      v16 = JSONDecoder.init()();
      v17 = sub_1004B804C(&qword_1013E4980);
      v18 = sub_100B00050(&qword_1014054A8, (unint64_t *)&unk_1013FE1B0, (uint64_t)&unk_100F0210C, (uint64_t)&protocol conformance descriptor for <> Set<A>);
      dispatch thunk of JSONDecoder.decode<A>(_:from:)(&v20, v17, v12, v14, v17, v18);
      sub_1004BE2FC(v12, v14);
      swift_release(v16);
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100A83944(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  id v10;
  uint64_t result;
  __int128 v12;

  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (_QWORD *)((char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v8 = v9;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4, v6);
  v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) != 0)
  {
    v12 = xmmword_100F062D0;
    sub_100AAD73C(a1, 0, 0, v1, (uint64_t *)&v12);
    result = v12;
    if (v2)
      return sub_1004BE2FC(v12, *((unint64_t *)&v12 + 1));
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100A83A44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  id v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t inited;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v41;
  unint64_t v42;
  void *v43;
  id v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char v51;
  void *v52;
  id v53;
  _QWORD *v54;
  void *v55;
  id v56;
  sqlite3_stmt *v57;
  uint64_t v58;
  void (*v59)(_QWORD *, uint64_t, uint64_t);
  void (*v60)(_QWORD *, uint64_t);
  _BYTE v61[8];
  uint64_t v62;
  uint64_t v63;
  _BYTE v64[8];
  _BYTE v65[48];
  _BYTE v66[72];
  uint64_t v67;
  unint64_t v68;
  _BYTE v69[32];

  v2 = v0;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (uint64_t *)((char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v7 = v8;
  v9 = enum case for DispatchPredicate.onQueue(_:);
  v59 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v4 + 104);
  ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v59)(v7, enum case for DispatchPredicate.onQueue(_:), v3, v5);
  v10 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  v60 = *(void (**)(_QWORD *, uint64_t))(v4 + 8);
  v60(v7, v3);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  v67 = 0;
  v68 = 0xE000000000000000;
  _StringGuts.grow(_:)(65);
  v11._countAndFlagsBits = 0xD00000000000001DLL;
  v11._object = (void *)0x8000000100FEF7D0;
  String.append(_:)(v11);
  v12._countAndFlagsBits = 0x736472616F62;
  v12._object = (void *)0xE600000000000000;
  String.append(_:)(v12);
  v13._countAndFlagsBits = 0x20455245485720;
  v13._object = (void *)0xE700000000000000;
  String.append(_:)(v13);
  v14._object = (void *)0x8000000100FD6350;
  v14._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v14);
  v15._countAndFlagsBits = 0x444E41203F203D20;
  v15._object = (void *)0xE900000000000020;
  String.append(_:)(v15);
  v16._object = (void *)0xE900000000000061;
  v16._countAndFlagsBits = 0x7461645F636E7973;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0x20544F4E20534920;
  v17._object = (void *)0xEE0029204C4C554ELL;
  String.append(_:)(v17);
  v18 = v67;
  v19 = v68;
  v20 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v21 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v21, v69);
  swift_retain(v20);
  v23 = sub_1006B77CC(v22, v18, v19);
  if (v1)
  {
    swift_release(v20);
    if (qword_1013DD858 == -1)
    {
LABEL_5:
      swift_beginAccess(&static OS_os_log.boardStore, &v67, 0, 0);
      v27 = (void *)static OS_os_log.boardStore;
      v28 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      inited = swift_initStackObject(v28, v66);
      *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
      swift_getErrorValue(v1, v64, v61);
      v30 = v62;
      v31 = v63;
      v32 = v27;
      v33 = Error.localizedDescription.getter(v30, v31);
      v35 = v34;
      *(_QWORD *)(inited + 56) = &type metadata for String;
      v36 = sub_1004CFC2C();
      *(_QWORD *)(inited + 64) = v36;
      *(_QWORD *)(inited + 32) = v33;
      *(_QWORD *)(inited + 40) = v35;
      v37 = static os_log_type_t.error.getter(v36);
      sub_100A06EBC(v32, &_mh_execute_header, v37, "Failed to fetch a board syncData with error %@", 46, 2, inited);
      swift_setDeallocating(inited);
      v38 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(inited + 32, 1, v38);

      swift_willThrow(v39);
      return v32 & 1;
    }
LABEL_19:
    swift_once(&qword_1013DD858, sub_100A05554);
    goto LABEL_5;
  }
  v24 = v23;
  swift_release(v20);
  v25 = sub_10067BA88();
  v41 = v25;
  v42 = v26;
  sub_1006B5E80(v25, v26);
  sub_1004BBBC8(v41, v42);
  v43 = *(void **)(*(_QWORD *)(v24 + 16) + 32);
  *v7 = v43;
  v59(v7, v9, v3);
  v44 = v43;
  LOBYTE(v43) = _dispatchPreconditionTest(_:)(v7);
  v60(v7, v3);
  if ((v43 & 1) == 0)
  {
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
  }
  v45 = type metadata accessor for SQLiteRowIterator();
  v46 = (_QWORD *)swift_initStackObject(v45, v65);
  v46[4] = 0;
  v46[5] = 1;
  v46[2] = v24;
  v46[3] = 0;
  swift_retain(v24);
  sub_1006B6B04();
  if (!v47)
  {
    swift_release(v24);
    swift_setDeallocating(v46);
    sub_1006B7DA4(v46[3], v46[4], v46[5]);
LABEL_13:
    v55 = *(void **)(*(_QWORD *)(v24 + 16) + 32);
    *v7 = v55;
    v59(v7, v9, v3);
    v56 = v55;
    LOBYTE(v55) = _dispatchPreconditionTest(_:)(v7);
    v60(v7, v3);
    if ((v55 & 1) != 0)
    {
      v54 = (_QWORD *)(v24 + 24);
      swift_beginAccess(v24 + 24, &v67, 1, 0);
      LOBYTE(v32) = 0;
      goto LABEL_15;
    }
    goto LABEL_21;
  }
  v48 = v47;
  v49 = sub_1006B45D4(0, v47);
  v51 = v50;
  swift_release(v24);
  swift_release(v48);
  swift_setDeallocating(v46);
  sub_1006B7DA4(v46[3], v46[4], v46[5]);
  if ((v51 & 1) != 0)
    goto LABEL_13;
  v52 = *(void **)(*(_QWORD *)(v24 + 16) + 32);
  *v7 = v52;
  v59(v7, v9, v3);
  v53 = v52;
  LOBYTE(v52) = _dispatchPreconditionTest(_:)(v7);
  v60(v7, v3);
  if ((v52 & 1) == 0)
    goto LABEL_22;
  LOBYTE(v32) = v49 > 0;
  v54 = (_QWORD *)(v24 + 24);
  swift_beginAccess(v24 + 24, &v67, 1, 0);
LABEL_15:
  v57 = *(sqlite3_stmt **)(v24 + 24);
  if (v57)
  {
    sqlite3_finalize(v57);
    *v54 = 0;
  }
  swift_release(v24);
  return v32 & 1;
}

uint64_t sub_100A84060(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  void (*v12)(_QWORD, __n128);
  id v13;
  uint64_t v14;
  void *v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t inited;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char v52;
  void *v53;
  id v54;
  _QWORD *v55;
  void *v56;
  id v57;
  sqlite3_stmt *v58;
  uint64_t v59;
  void (*v60)(_QWORD *, uint64_t, uint64_t);
  void (*v61)(_QWORD *, uint64_t);
  _BYTE v62[8];
  uint64_t v63;
  uint64_t v64;
  _BYTE v65[8];
  _BYTE v66[48];
  _BYTE v67[72];
  unint64_t v68;
  unint64_t v69;
  _BYTE v70[32];

  v4 = v2;
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (uint64_t *)((char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *(void **)(v4 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v10 = v11;
  v12 = *(void (**)(_QWORD, __n128))(v7 + 104);
  HIDWORD(v59) = enum case for DispatchPredicate.onQueue(_:);
  v60 = (void (*)(_QWORD *, uint64_t, uint64_t))v12;
  v12(v10, v8);
  v13 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v10);
  v61 = *(void (**)(_QWORD *, uint64_t))(v7 + 8);
  v61(v10, v6);
  if ((v11 & 1) == 0)
  {
    __break(1u);
    goto LABEL_25;
  }
  if ((a2 & 1) != 0)
    v14 = 0;
  else
    v14 = 0xD000000000000012;
  if ((a2 & 1) != 0)
    v15 = (void *)0xE000000000000000;
  else
    v15 = (void *)0x8000000100FF10A0;
  v68 = 0;
  v69 = 0xE000000000000000;
  _StringGuts.grow(_:)(49);
  swift_bridgeObjectRelease(v69);
  v68 = 0xD00000000000003FLL;
  v69 = 0x8000000100FF10C0;
  v16._countAndFlagsBits = v14;
  v16._object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(v15);
  v17._countAndFlagsBits = 10528;
  v17._object = (void *)0xE200000000000000;
  String.append(_:)(v17);
  v18 = v68;
  v19 = v69;
  v20 = *(_QWORD *)(v4 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v21 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v21, v70);
  swift_retain(v20);
  v23 = sub_1006B77CC(v22, v18, v19);
  if (v3)
  {
    swift_release(v20);
    if (qword_1013DD858 == -1)
    {
LABEL_11:
      swift_beginAccess(&static OS_os_log.boardStore, &v68, 0, 0);
      v27 = (void *)static OS_os_log.boardStore;
      v28 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      inited = swift_initStackObject(v28, v67);
      *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
      swift_getErrorValue(v3, v65, v62);
      v30 = v63;
      v31 = v64;
      v32 = v27;
      v33 = Error.localizedDescription.getter(v30, v31);
      v35 = v34;
      *(_QWORD *)(inited + 56) = &type metadata for String;
      v36 = sub_1004CFC2C();
      *(_QWORD *)(inited + 64) = v36;
      *(_QWORD *)(inited + 32) = v33;
      *(_QWORD *)(inited + 40) = v35;
      v37 = static os_log_type_t.error.getter(v36);
      sub_100A06EBC(v32, &_mh_execute_header, v37, "Failed to fetch a board with error %@", 37, 2, inited);
      swift_setDeallocating(inited);
      v38 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(inited + 32, 1, v38);

      swift_willThrow(v39);
      return v32 & 1;
    }
LABEL_25:
    swift_once(&qword_1013DD858, sub_100A05554);
    goto LABEL_11;
  }
  v24 = v23;
  swift_release(v20);
  v25 = sub_10067BA88();
  v41 = v25;
  v42 = v26;
  sub_1006B5E80(v25, v26);
  sub_1004BBBC8(v41, v42);
  v43 = *(void **)(*(_QWORD *)(v24 + 16) + 32);
  *v10 = v43;
  v44 = HIDWORD(v59);
  v60(v10, HIDWORD(v59), v6);
  v45 = v43;
  LOBYTE(v43) = _dispatchPreconditionTest(_:)(v10);
  v61(v10, v6);
  if ((v43 & 1) == 0)
  {
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
  }
  v46 = type metadata accessor for SQLiteRowIterator();
  v47 = (_QWORD *)swift_initStackObject(v46, v66);
  v47[4] = 0;
  v47[5] = 1;
  v47[2] = v24;
  v47[3] = 0;
  swift_retain(v24);
  sub_1006B6B04();
  if (!v48)
  {
    swift_release(v24);
    swift_setDeallocating(v47);
    sub_1006B7DA4(v47[3], v47[4], v47[5]);
LABEL_19:
    v56 = *(void **)(*(_QWORD *)(v24 + 16) + 32);
    *v10 = v56;
    v60(v10, v44, v6);
    v57 = v56;
    LOBYTE(v56) = _dispatchPreconditionTest(_:)(v10);
    v61(v10, v6);
    if ((v56 & 1) != 0)
    {
      v55 = (_QWORD *)(v24 + 24);
      swift_beginAccess(v24 + 24, &v68, 1, 0);
      LOBYTE(v32) = 0;
      goto LABEL_21;
    }
    goto LABEL_27;
  }
  v49 = v48;
  v50 = sub_1006B45D4(0, v48);
  v52 = v51;
  swift_release(v24);
  swift_release(v49);
  swift_setDeallocating(v47);
  sub_1006B7DA4(v47[3], v47[4], v47[5]);
  if ((v52 & 1) != 0)
    goto LABEL_19;
  v53 = *(void **)(*(_QWORD *)(v24 + 16) + 32);
  *v10 = v53;
  v60(v10, v44, v6);
  v54 = v53;
  LOBYTE(v53) = _dispatchPreconditionTest(_:)(v10);
  v61(v10, v6);
  if ((v53 & 1) == 0)
    goto LABEL_28;
  LOBYTE(v32) = v50 > 0;
  v55 = (_QWORD *)(v24 + 24);
  swift_beginAccess(v24 + 24, &v68, 1, 0);
LABEL_21:
  v58 = *(sqlite3_stmt **)(v24 + 24);
  if (v58)
  {
    sqlite3_finalize(v58);
    *v55 = 0;
  }
  swift_release(v24);
  return v32 & 1;
}

uint64_t sub_100A84620()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  void (*v9)(_QWORD, __n128);
  id v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t inited;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  void *v54;
  id v55;
  _QWORD *v56;
  void *v57;
  id v58;
  sqlite3_stmt *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  void (*v64)(_QWORD *, uint64_t, uint64_t);
  void (*v65)(_QWORD *, uint64_t);
  _BYTE v66[8];
  uint64_t v67;
  uint64_t v68;
  _BYTE v69[8];
  _BYTE v70[48];
  _BYTE v71[72];
  uint64_t v72;
  unint64_t v73;
  _BYTE v74[24];

  v2 = v0;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (uint64_t *)((char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v7 = v8;
  v9 = *(void (**)(_QWORD, __n128))(v4 + 104);
  v63 = enum case for DispatchPredicate.onQueue(_:);
  v64 = (void (*)(_QWORD *, uint64_t, uint64_t))v9;
  v9(v7, v5);
  v10 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  v65 = *(void (**)(_QWORD *, uint64_t))(v4 + 8);
  v65(v7, v3);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  v72 = 0;
  v73 = 0xE000000000000000;
  _StringGuts.grow(_:)(59);
  v11._countAndFlagsBits = 0xD00000000000001DLL;
  v11._object = (void *)0x8000000100FEF7D0;
  String.append(_:)(v11);
  v12._countAndFlagsBits = 0x74695F6472616F62;
  v12._object = (void *)0xEB00000000736D65;
  String.append(_:)(v12);
  v13._countAndFlagsBits = 0x2820455245485720;
  v13._object = (void *)0xE800000000000000;
  String.append(_:)(v13);
  v14._object = (void *)0xE900000000000064;
  v14._countAndFlagsBits = 0x6975755F6D657469;
  String.append(_:)(v14);
  v15._countAndFlagsBits = 0x444E41203F203D20;
  v15._object = (void *)0xE900000000000020;
  String.append(_:)(v15);
  v16._object = (void *)0x8000000100FD6350;
  v16._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0x2920293F203D20;
  v17._object = (void *)0xE700000000000000;
  String.append(_:)(v17);
  v18 = v72;
  v19 = v73;
  v20 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v21 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v21, v74);
  swift_retain(v20);
  v23 = sub_1006B77CC(v22, v18, v19);
  if (v1)
  {
    swift_release(v20);
    if (qword_1013DD858 == -1)
    {
LABEL_5:
      swift_beginAccess(&static OS_os_log.boardStore, &v72, 0, 0);
      v30 = (void *)static OS_os_log.boardStore;
      v31 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      inited = swift_initStackObject(v31, v71);
      *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
      swift_getErrorValue(v1, v69, v66);
      v33 = v67;
      v34 = v68;
      v35 = v30;
      v36 = Error.localizedDescription.getter(v33, v34);
      v38 = v37;
      *(_QWORD *)(inited + 56) = &type metadata for String;
      v39 = sub_1004CFC2C();
      *(_QWORD *)(inited + 64) = v39;
      *(_QWORD *)(inited + 32) = v36;
      *(_QWORD *)(inited + 40) = v38;
      v40 = static os_log_type_t.error.getter(v39);
      sub_100A06EBC(v35, &_mh_execute_header, v40, "Failed to fetch a board item record with error %@", 49, 2, inited);
      swift_setDeallocating(inited);
      v41 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(inited + 32, 1, v41);

      swift_willThrow(v42);
      return v35 & 1;
    }
LABEL_19:
    swift_once(&qword_1013DD858, sub_100A05554);
    goto LABEL_5;
  }
  v24 = v23;
  swift_release(v20);
  v25 = UUID.crl_data()();
  v27 = v26;
  sub_1006B5E80(v25, v26);
  sub_1004BBBC8(v25, v27);
  v28 = sub_10067BA88();
  v44 = v28;
  v45 = v29;
  sub_1006B5E80(v28, v29);
  v46 = *(void **)(*(_QWORD *)(v24 + 16) + 32);
  *v7 = v46;
  v47 = v63;
  v64(v7, v63, v3);
  v48 = v46;
  LOBYTE(v46) = _dispatchPreconditionTest(_:)(v7);
  v65(v7, v3);
  if ((v46 & 1) == 0)
  {
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
  }
  v49 = type metadata accessor for SQLiteRowIterator();
  v50 = (_QWORD *)swift_initStackObject(v49, v70);
  v50[4] = 0;
  v50[5] = 1;
  v50[2] = v24;
  v50[3] = 0;
  swift_retain(v24);
  sub_1006B6B04();
  if (!v51)
  {
    swift_release(v24);
    swift_setDeallocating(v50);
    sub_1006B7DA4(v50[3], v50[4], v50[5]);
    sub_1004BBBC8(v44, v45);
LABEL_13:
    v57 = *(void **)(*(_QWORD *)(v24 + 16) + 32);
    *v7 = v57;
    v64(v7, v47, v3);
    v58 = v57;
    LOBYTE(v57) = _dispatchPreconditionTest(_:)(v7);
    v65(v7, v3);
    if ((v57 & 1) != 0)
    {
      v56 = (_QWORD *)(v24 + 24);
      swift_beginAccess(v24 + 24, &v72, 1, 0);
      LOBYTE(v35) = 0;
      goto LABEL_15;
    }
    goto LABEL_21;
  }
  v52 = v51;
  v61 = sub_1006B45D4(0, v51);
  v62 = v53;
  swift_release(v24);
  swift_release(v52);
  swift_setDeallocating(v50);
  sub_1006B7DA4(v50[3], v50[4], v50[5]);
  sub_1004BBBC8(v44, v45);
  if ((v62 & 1) != 0)
    goto LABEL_13;
  v54 = *(void **)(*(_QWORD *)(v24 + 16) + 32);
  *v7 = v54;
  v64(v7, v47, v3);
  v55 = v54;
  LOBYTE(v54) = _dispatchPreconditionTest(_:)(v7);
  v65(v7, v3);
  if ((v54 & 1) == 0)
    goto LABEL_22;
  LOBYTE(v35) = v61 > 0;
  v56 = (_QWORD *)(v24 + 24);
  swift_beginAccess(v24 + 24, &v72, 1, 0);
LABEL_15:
  v59 = *(sqlite3_stmt **)(v24 + 24);
  if (v59)
  {
    sqlite3_finalize(v59);
    *v56 = 0;
  }
  swift_release(v24);
  return v35 & 1;
}

sqlite3_int64 sub_100A84CA0(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *, _QWORD, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  void (*v13)(_QWORD);
  void (*v14)(_QWORD *, _QWORD, uint64_t);
  id v15;
  void (*v16)(_QWORD *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t inited;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  sqlite3_int64 v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v42;
  unint64_t v43;
  void *v44;
  id v45;
  void (*v46)(_QWORD *, uint64_t);
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  void *v52;
  id v53;
  sqlite3_stmt *v54;
  uint64_t v55;
  int v56;
  void *v57;
  id v58;
  sqlite3_stmt *v59;
  _BYTE v60[12];
  int v61;
  sqlite3_int64 v62;
  uint64_t v63;
  void (*v64)(_QWORD *, uint64_t);
  uint64_t v65;
  _BYTE *v66;
  void (*v67)(_QWORD *, _QWORD, uint64_t);
  unsigned int v68;
  char v69[8];
  uint64_t v70;
  uint64_t v71;
  char v72[8];
  char v73[48];
  char v74[72];
  uint64_t v75;
  unint64_t v76;
  char v77[8];

  v5 = v3;
  v67 = a3;
  v65 = a1;
  v6 = sub_1004B804C((uint64_t *)&unk_1013E1A50);
  __chkstk_darwin(v6);
  v66 = &v60[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for DispatchPredicate(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v60[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = *(void **)(v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v11 = v12;
  v13 = *(void (**)(_QWORD))(v9 + 104);
  v68 = enum case for DispatchPredicate.onQueue(_:);
  v14 = (void (*)(_QWORD *, _QWORD, uint64_t))v13;
  v13(v11);
  v15 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)(v11);
  v16 = *(void (**)(_QWORD *, uint64_t))(v9 + 8);
  v16(v11, v8);
  if ((v12 & 1) == 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v75 = 0;
  v76 = 0xE000000000000000;
  _StringGuts.grow(_:)(47);
  swift_bridgeObjectRelease(v76);
  v17 = *(_QWORD *)(v5 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v18 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v18, v77);
  swift_retain(v17);
  v20 = sub_1006B77CC(v19, 0xD000000000000064, 0x8000000100FF0690);
  if (v4)
  {
    swift_release(v17);
    if (qword_1013DD858 == -1)
    {
LABEL_5:
      swift_beginAccess(&static OS_os_log.boardStore, &v75, 0, 0);
      v27 = (void *)static OS_os_log.boardStore;
      v28 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      inited = swift_initStackObject(v28, v74);
      *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
      swift_getErrorValue(v4, v72, v69);
      v30 = v70;
      v31 = v71;
      v32 = v27;
      v33 = Error.localizedDescription.getter(v30, v31);
      v35 = v34;
      *(_QWORD *)(inited + 56) = &type metadata for String;
      v36 = sub_1004CFC2C();
      *(_QWORD *)(inited + 64) = v36;
      *(_QWORD *)(inited + 32) = v33;
      v37 = inited + 32;
      *(_QWORD *)(inited + 40) = v35;
      v38 = static os_log_type_t.error.getter(v36);
      sub_100A06EBC((uint64_t)v32, &_mh_execute_header, v38, "Failed to fetch a board item's parent UUID with error %@", 56, 2, inited);
      swift_setDeallocating(inited);
      v39 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(inited + 32, 1, v39);

      swift_willThrow(v40);
      return v37;
    }
LABEL_22:
    swift_once(&qword_1013DD858, sub_100A05554);
    goto LABEL_5;
  }
  v21 = v20;
  swift_release(v17);
  v22 = UUID.crl_data()();
  v24 = v23;
  sub_1006B5E80(v22, v23);
  sub_1004BBBC8(v22, v24);
  v25 = sub_10067BA88();
  v42 = v25;
  v43 = v26;
  sub_1006B5E80(v25, v26);
  v44 = *(void **)(*(_QWORD *)(v21 + 16) + 32);
  *v11 = v44;
  v67 = v14;
  v14(v11, v68, v8);
  v45 = v44;
  LOBYTE(v44) = _dispatchPreconditionTest(_:)(v11);
  v46 = v16;
  v16(v11, v8);
  if ((v44 & 1) == 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  v47 = type metadata accessor for SQLiteRowIterator();
  v48 = (_QWORD *)swift_initStackObject(v47, v73);
  v48[4] = 0;
  v48[5] = 1;
  v48[2] = v21;
  v48[3] = 0;
  swift_retain(v21);
  sub_1006B6B04();
  v50 = v49;
  if (v49)
  {
    v64 = v46;
    v51 = v66;
    sub_1006B69C4(0, v49, (uint64_t)v66);
    v62 = sub_1006B64F4(1, v50);
    v61 = v56;
    swift_release(v48);
    v63 = v50;
    swift_release(v50);
    sub_1004BBBC8(v42, v43);
    if ((v61 & 1) != 0)
      v37 = 0;
    else
      v37 = v62;
    sub_1004C4938((uint64_t)v51, v65, (uint64_t *)&unk_1013E1A50);
    v57 = *(void **)(*(_QWORD *)(v21 + 16) + 32);
    *v11 = v57;
    v67(v11, v68, v8);
    v58 = v57;
    LOBYTE(v57) = _dispatchPreconditionTest(_:)(v11);
    v64(v11, v8);
    if ((v57 & 1) != 0)
    {
      swift_beginAccess(v21 + 24, &v75, 1, 0);
      v59 = *(sqlite3_stmt **)(v21 + 24);
      if (v59)
      {
        sqlite3_finalize(v59);
        *(_QWORD *)(v21 + 24) = 0;
      }
      swift_release(v21);
      return v37;
    }
LABEL_25:
    __break(1u);
  }
  v63 = 0;
  swift_release(v21);
  swift_setDeallocating(v48);
  sub_1006B7DA4(v48[3], v48[4], v48[5]);
  sub_1004BBBC8(v42, v43);
  v52 = *(void **)(*(_QWORD *)(v21 + 16) + 32);
  *v11 = v52;
  v67(v11, v68, v8);
  v53 = v52;
  LOBYTE(v52) = _dispatchPreconditionTest(_:)(v11);
  v46(v11, v8);
  if ((v52 & 1) == 0)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  swift_beginAccess(v21 + 24, &v75, 1, 0);
  v54 = *(sqlite3_stmt **)(v21 + 24);
  if (v54)
  {
    sqlite3_finalize(v54);
    *(_QWORD *)(v21 + 24) = 0;
  }
  swift_release(v21);
  v55 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v65, 1, 1, v55);
  return 0;
}

void sub_100A85390(_QWORD *a1, uint64_t a2, int a3, uint64_t a4, unint64_t a5, int a6, int a7)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  void *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(void);
  uint64_t v50;
  uint64_t (*v51)(char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(char *, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  _BOOL8 v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t (*v78)(__n128);
  __n128 v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  __n128 v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  void (*v90)(void);
  uint64_t v91;
  __n128 v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  __n128 v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  __n128 v102;
  uint64_t v103;
  char v104;
  unint64_t v105;
  uint64_t (*v106)(uint64_t);
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  void (*v110)(_QWORD *);
  _QWORD *v111;
  void (*v112)(__n128);
  __n128 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int (*v117)(uint64_t, uint64_t, uint64_t);
  uint64_t v118;
  unsigned int (*v119)(uint64_t, uint64_t, uint64_t);
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char v124;
  char *v125;
  void (*v126)(uint64_t, uint64_t);
  uint64_t v127;
  char v128;
  uint64_t v129;
  __n128 v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t (*v138)(uint64_t, _QWORD, __n128);
  __n128 v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  sqlite3_stmt **v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  char v193;
  char *v194;
  void (*v195)(uint64_t, uint64_t);
  __n128 v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  _QWORD *v200;
  uint64_t (*v201)(void);
  uint64_t v202;
  uint64_t (*v203)(void);
  uint64_t v204;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  sqlite3_stmt **v210;
  _QWORD *v211;
  uint64_t v212;
  uint64_t v213;
  __n128 v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  __n128 v227;
  uint64_t v228;
  unint64_t v229;
  _QWORD *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  __n128 v245;
  uint64_t v246;
  __n128 v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  void (*v252)(void);
  uint64_t v253;
  uint64_t v254;
  void (*v255)(uint64_t, uint64_t);
  char *v256;
  char *v257;
  uint64_t v258;
  sqlite3_stmt **v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  char *v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t (*v268)(void);
  uint64_t v269;
  uint64_t v270;
  _QWORD *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  int v275;
  void (*v276)(void);
  char *v277;
  _QWORD *v278;
  uint64_t v279[3];
  uint64_t v280;

  v9 = v8;
  v10 = v7;
  LODWORD(v269) = a7;
  LODWORD(v274) = a6;
  v267 = a5;
  v264 = a4;
  v275 = a3;
  v13 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v13);
  v258 = (uint64_t)&v249 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v260 = type metadata accessor for CRLAssetReferrerIdentifier(0);
  v15 = __chkstk_darwin(v260);
  v256 = (char *)&v249 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v257 = (char *)&v249 - v18;
  __chkstk_darwin(v17);
  v259 = (sqlite3_stmt **)((char *)&v249 - v19);
  v270 = sub_1004B804C((uint64_t *)&unk_1013F62D0);
  v20 = __chkstk_darwin(v270);
  v268 = (uint64_t (*)(void))((char *)&v249 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v20);
  v266 = (uint64_t)&v249 - v22;
  v23 = sub_1004B804C((uint64_t *)&unk_1013E1A50);
  v24 = __chkstk_darwin(v23);
  v262 = (uint64_t)&v249 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __chkstk_darwin(v24);
  v265 = (char *)&v249 - v27;
  v28 = __chkstk_darwin(v26);
  v263 = (uint64_t)&v249 - v29;
  v30 = __chkstk_darwin(v28);
  v272 = (uint64_t)&v249 - v31;
  v32 = __chkstk_darwin(v30);
  v273 = (uint64_t)&v249 - v33;
  __chkstk_darwin(v32);
  v276 = (void (*)(void))((char *)&v249 - v34);
  v280 = type metadata accessor for UUID(0);
  v278 = *(_QWORD **)(v280 - 8);
  v35 = __chkstk_darwin(v280);
  v261 = (uint64_t)&v249 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __chkstk_darwin(v35);
  v277 = (char *)&v249 - v38;
  __chkstk_darwin(v37);
  v40 = (char *)&v249 - v39;
  v41 = type metadata accessor for DispatchPredicate(0);
  v42 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v44 = (uint64_t *)((char *)&v249 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0));
  v45 = *(void **)(v10 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v44 = v45;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v42 + 104))(v44, enum case for DispatchPredicate.onQueue(_:), v41);
  v46 = v45;
  v47 = _dispatchPreconditionTest(_:)(v44);
  v48 = (*(uint64_t (**)(_QWORD *, uint64_t))(v42 + 8))(v44, v41);
  if ((v47 & 1) == 0)
  {
    __break(1u);
    goto LABEL_95;
  }
  v49 = *(void (**)(void))(*a1 + 256);
  ((void (*)(uint64_t))v49)(v48);
  v50 = sub_100A8296C();
  if (v8)
  {
    v51 = (uint64_t (*)(char *, uint64_t))v278[1];
    v52 = v280;
    v53 = v51(v40, v280);
    v54 = (uint64_t)v277;
    ((void (*)(uint64_t))v49)(v53);
    swift_beginAccess(v10 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_transientSyncExclusions, v279, 33, 0);
    sub_100D57874(v54, a2);
    swift_endAccess(v279);
    v51((char *)v54, v52);
    return;
  }
  v55 = v50;
  v56 = (uint64_t (*)(char *, uint64_t))v278[1];
  v57 = v280;
  v58 = v56(v40, v280);
  v271 = a1;
  if (!v55)
  {
    if ((v274 & 1) == 0)
      goto LABEL_28;
    v255 = (void (*)(uint64_t, uint64_t))v56;
    v70 = (_BYTE)v275 == 0;
    v71 = *(_QWORD *)(v10 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_crdtContext);
    v72 = (*(uint64_t (**)(uint64_t, _QWORD))(*a1 + 456))(v71, 0);
    v74 = v73;
    v75 = (*(uint64_t (**)(uint64_t, _QWORD))(*a1 + 464))(v71, 0);
    v278 = (_QWORD *)v176;
    v177 = v74;
    v276 = (void (*)(void))v70;
    v178 = v75;
    v179 = ((uint64_t (*)(void))v49)();
    v180 = a1[4];
    v272 = a1[5];
    v273 = v180;
    v181 = a1[2];
    v269 = a1[3];
    v270 = v181;
    (*(void (**)(uint64_t))(*a1 + 264))(v179);
    v182 = v258;
    v183 = sub_1004B8460(a2, v258, type metadata accessor for CRLBoardIdentifier);
    v184 = (*(uint64_t (**)(uint64_t))(*a1 + 408))(v183);
    v186 = v184 + 2;
    v253 = a2;
    v254 = v10;
    v252 = v49;
    if ((v185 & 1) == 0)
      v186 = v184;
    v268 = (uint64_t (*)(void))v186;
    v187 = type metadata accessor for CRLBoardItemDatabaseRow(0);
    swift_allocObject(v187, *(unsigned int *)(v187 + 48), *(unsigned __int16 *)(v187 + 52));
    v188 = v264;
    v189 = v267;
    sub_10057939C(v264, v267);
    sub_1004BE310(v72, v177);
    v190 = (uint64_t)v278;
    sub_1004BE310(v178, (unint64_t)v278);
    v274 = v178;
    v191 = sub_100C0227C(v261, v269, v273, v272, v270, v262, v182, (uint64_t)v268, v72, v177, v178, v190, 0, (uint64_t)v276, v188, v189);
    sub_100A88B38(v191);
    v270 = v72;
    v9 = v177;
    v200 = v271;
    v201 = *(uint64_t (**)(void))(*v271 + 568);
    v202 = v201();
    v203 = *(uint64_t (**)(void))(*v200 + 576);
    v204 = v203();
    swift_bridgeObjectRetain(v204);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v202);
    v279[0] = v202;
    sub_100AF23D8(v204, (uint64_t)sub_100AF236C, 0, isUniquelyReferenced_nonNull_native, v279);
    v273 = 0;
    v269 = v191;
    v42 = v279[0];
    swift_bridgeObjectRelease(v204);
    swift_bridgeObjectRelease(0x8000000000000000);
    v206 = sub_1004B804C((uint64_t *)&unk_1013E1780);
    a2 = (uint64_t)v256;
    v207 = (uint64_t)&v256[*(int *)(v206 + 48)];
    v252();
    sub_1004B8460(v253, v207, type metadata accessor for CRLBoardIdentifier);
    swift_storeEnumTagMultiPayload(a2, v260, 1);
    a1 = (_QWORD *)sub_1008D5968((uint64_t)_swiftEmptyArrayStorage);
    if (!a1[2] && !*(_QWORD *)(v42 + 16))
    {
      swift_bridgeObjectRetain(v42);
LABEL_96:
      sub_1004B84A4(a2, type metadata accessor for CRLAssetReferrerIdentifier);
      swift_bridgeObjectRelease(a1);
      swift_bridgeObjectRelease(v42);
      v229 = sub_1008D5968((uint64_t)_swiftEmptyArrayStorage);
      v230 = v271;
      v231 = v201();
      v232 = v42;
      v233 = v231;
      v234 = v203();
      sub_100A63508(v233);
      v236 = v235;
      swift_bridgeObjectRelease(v233);
      v237 = sub_100AF7994(v236);
      swift_bridgeObjectRelease(v236);
      sub_100A63508(v234);
      v239 = v238;
      swift_bridgeObjectRelease(v234);
      v240 = sub_100AF7994(v239);
      swift_bridgeObjectRelease(v239);
      v241 = sub_100CA03B4(v240, v237);
      v242 = v269;
      sub_100A883F8(v269, v275, v229, v232, v241);
      swift_bridgeObjectRelease(v229);
      swift_bridgeObjectRelease(v232);
      swift_bridgeObjectRelease(v241);
      sub_1001E9730();
      sub_1004BBBC8(v270, v9);
      sub_1004BBBC8(v274, (unint64_t)v278);
      v243 = v280;
      v244 = (uint64_t)v277;
      v245 = swift_release(v242);
      ((void (*)(__n128))v252)(v245);
      swift_beginAccess(v254 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_transientSyncExclusions, v279, 33, 0);
      sub_100D57874(v244, v253);
      swift_endAccess(v279);
      v255(v244, v243);
      swift_retain(v230);
      return;
    }
    v268 = v203;
    v47 = (uint64_t)v201;
    swift_bridgeObjectRetain(v42);
    v272 = sub_100A89A08((uint64_t)a1, v42, 0);
    v209 = v208;
    swift_bridgeObjectRetain(v208);
    v210 = (sqlite3_stmt **)a2;
    v211 = sub_100600358(v209);
    swift_bridgeObjectRelease(v209);
    v212 = v273;
    sub_100A8AEC4(v210, v211);
    if (v212)
    {
      v273 = v212;
      swift_bridgeObjectRelease(v209);
      swift_bridgeObjectRelease(v272);
      swift_release(v211);
      v213 = v253;
      swift_release(v269);
      swift_bridgeObjectRelease(a1);
      swift_bridgeObjectRelease(v42);
      sub_1004BBBC8(v274, (unint64_t)v278);
      sub_1004BBBC8(v270, v9);
      sub_1004B84A4((uint64_t)v210, type metadata accessor for CRLAssetReferrerIdentifier);
      v227 = swift_bridgeObjectRelease(v42);
      v228 = (uint64_t)v277;
      ((void (*)(__n128))v252)(v227);
      swift_beginAccess(v254 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_transientSyncExclusions, v279, 33, 0);
      sub_100D57874(v228, v213);
      swift_endAccess(v279);
      v255(v228, v280);
      return;
    }
    swift_release(v211);
    sub_100A8B5F4((uint64_t)v210, v272, (sqlite3_int64)v276);
    v273 = 0;
    a2 = (uint64_t)v210;
    v48 = v209;
LABEL_95:
    swift_bridgeObjectRelease(v48);
    swift_bridgeObjectRelease(v272);
    v201 = (uint64_t (*)(void))v47;
    v203 = v268;
    goto LABEL_96;
  }
  v252 = v49;
  v254 = v10;
  v255 = (void (*)(uint64_t, uint64_t))v56;
  v253 = a2;
  v59 = OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_isLocalTombstone;
  v60 = v55;
  v61 = *(unsigned __int8 *)(v55 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_isLocalTombstone);
  v62 = OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_unsyncedChanges;
  v63 = *(_QWORD *)(v60 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_unsyncedChanges);
  v262 = v60;
  v64 = sub_100AF5E90(v60);
  if (!v64)
  {
    if ((v274 & 1) != 0)
    {
      v250 = v59;
      v76 = v63 | 0xC;
      if (v61)
        v76 = 16;
      if ((_BYTE)v275)
        v76 = 0;
      v258 = v76;
      v77 = v271;
      v78 = *(uint64_t (**)(__n128))(*v271 + 568);
      v79 = swift_retain(v271);
      v80 = v78(v79);
      swift_bridgeObjectRetain(v80);
      v81 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
      v279[0] = (uint64_t)_swiftEmptyDictionarySingleton;
      sub_100AF23D8(v80, (uint64_t)sub_100AF236C, 0, v81, v279);
      v82 = v279[0];
      swift_bridgeObjectRelease(v80);
      v83 = swift_bridgeObjectRelease(0x8000000000000000);
      v84 = (*(uint64_t (**)(__n128))(*v77 + 576))(v83);
      swift_bridgeObjectRetain(v84);
      v85 = swift_isUniquelyReferenced_nonNull_native(v82);
      v279[0] = v82;
      sub_100AF23D8(v84, (uint64_t)sub_100AF236C, 0, v85, v279);
      v251 = v62;
      v278 = (_QWORD *)v279[0];
      swift_bridgeObjectRelease(v84);
      swift_bridgeObjectRelease(0x8000000000000000);
      LODWORD(v273) = 0;
      LODWORD(v269) = 0;
      LODWORD(v256) = 1;
      v274 = (uint64_t)_swiftEmptyDictionarySingleton;
      goto LABEL_77;
    }
    swift_bridgeObjectRelease_n(_swiftEmptyDictionarySingleton, 2);
    swift_release(v262);
    a2 = v253;
    v56 = (uint64_t (*)(char *, uint64_t))v255;
    v10 = v254;
    v49 = v252;
LABEL_28:
    v90 = v49;
    v91 = (uint64_t)v277;
    ((void (*)(uint64_t))v90)(v58);
    swift_beginAccess(v10 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_transientSyncExclusions, v279, 33, 0);
    sub_100D57874(v91, a2);
    swift_endAccess(v279);
    v56((char *)v91, v57);
    return;
  }
  v65 = v64;
  v66 = v275;
  v251 = v62;
  v250 = v59;
  LODWORD(v261) = v61;
  if ((_BYTE)v275)
  {
    if (v275 == 1)
    {
      v67 = (v63 >> 4) & 1;
      v68 = sub_100A870E0(v271);
      v69 = v67 & ~v61;
      if (v269 == 2)
      {
        if ((v61 & v67 & 1) == 0)
        {
          if (!v69)
          {
LABEL_40:
            v86 = v272;
            v87 = v273;
            if ((v61 & 1) != 0)
            {
              v258 = v68;
              LODWORD(v269) = v274 ^ 1;
              goto LABEL_24;
            }
            goto LABEL_42;
          }
          goto LABEL_37;
        }
      }
      else
      {
        if ((v61 & v67 & 1) == 0)
        {
          if (!v69)
            goto LABEL_40;
          if ((v269 & 1) == 0)
          {
LABEL_38:
            v86 = v272;
            v87 = v273;
            if ((v61 & 1) != 0)
            {
              v258 = v68;
              LODWORD(v269) = 0;
LABEL_24:
              LODWORD(v256) = 1;
              v88 = _swiftEmptyDictionarySingleton;
              v89 = _swiftEmptyDictionarySingleton;
              goto LABEL_48;
            }
            goto LABEL_42;
          }
LABEL_37:
          v68 |= 0x10uLL;
          goto LABEL_38;
        }
        if ((v269 & 1) != 0)
          goto LABEL_32;
      }
      v68 |= 0x10uLL;
LABEL_32:
      v258 = v68;
      LODWORD(v256) = 1;
      v88 = _swiftEmptyDictionarySingleton;
      v89 = _swiftEmptyDictionarySingleton;
      LODWORD(v269) = 1;
      goto LABEL_33;
    }
    v68 = 0;
    if ((v61 & 1) != 0)
    {
      v258 = 0;
      LODWORD(v269) = 0;
      LODWORD(v256) = 1;
      v88 = _swiftEmptyDictionarySingleton;
      v89 = _swiftEmptyDictionarySingleton;
LABEL_33:
      v86 = v272;
      v87 = v273;
      goto LABEL_48;
    }
    v86 = v272;
    v87 = v273;
  }
  else
  {
    v68 = sub_100A870E0(v64) | v63;
    v86 = v272;
    v87 = v273;
    if (v61)
    {
      LODWORD(v269) = v274 ^ 1;
      if ((v274 & 1) != 0)
        v68 |= 0x10uLL;
      v258 = v68;
      goto LABEL_24;
    }
  }
LABEL_42:
  v258 = v68;
  v88 = _swiftEmptyDictionarySingleton;
  if (((*(uint64_t (**)(_QWORD *))(*v271 + 472))(v65) & 1) != 0)
  {
    v93 = (*(uint64_t (**)(void))(*v65 + 568))();
    swift_bridgeObjectRetain(v93);
    v94 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    v279[0] = (uint64_t)_swiftEmptyDictionarySingleton;
    sub_100AF23D8(v93, (uint64_t)sub_100AF236C, 0, v94, v279);
    v95 = v279[0];
    swift_bridgeObjectRelease(v93);
    v96 = swift_bridgeObjectRelease(0x8000000000000000);
    v97 = (*(uint64_t (**)(__n128))(*v271 + 568))(v96);
    swift_bridgeObjectRetain(v97);
    v98 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    v279[0] = (uint64_t)_swiftEmptyDictionarySingleton;
    sub_100AF23D8(v97, (uint64_t)sub_100AF236C, 0, v98, v279);
    v88 = (_QWORD *)v279[0];
    swift_bridgeObjectRelease(v97);
    v92 = swift_bridgeObjectRelease(0x8000000000000000);
    v89 = (_QWORD *)v95;
    v87 = v273;
  }
  else
  {
    v89 = _swiftEmptyDictionarySingleton;
  }
  if (((*(uint64_t (**)(_QWORD *, __n128))(*v271 + 480))(v65, v92) & 1) != 0)
  {
    v99 = (*(uint64_t (**)(void))(*v65 + 576))();
    swift_bridgeObjectRetain(v99);
    v100 = swift_isUniquelyReferenced_nonNull_native(v89);
    v279[0] = (uint64_t)v89;
    sub_100AF23D8(v99, (uint64_t)sub_100AF236C, 0, v100, v279);
    v101 = v279[0];
    swift_bridgeObjectRelease(v99);
    v102 = swift_bridgeObjectRelease(0x8000000000000000);
    v103 = (*(uint64_t (**)(__n128))(*v271 + 576))(v102);
    swift_bridgeObjectRetain(v103);
    v104 = swift_isUniquelyReferenced_nonNull_native(v88);
    v279[0] = (uint64_t)v88;
    sub_100AF23D8(v103, (uint64_t)sub_100AF236C, 0, v104, v279);
    v88 = (_QWORD *)v279[0];
    swift_bridgeObjectRelease(v103);
    swift_bridgeObjectRelease(0x8000000000000000);
    LODWORD(v256) = 0;
    LODWORD(v269) = 0;
    v89 = (_QWORD *)v101;
    v87 = v273;
  }
  else
  {
    LODWORD(v256) = 0;
    LODWORD(v269) = 0;
  }
LABEL_48:
  v105 = v65[3];
  if (sub_1001E9730() >= v105)
    LODWORD(v273) = 0;
  else
    LODWORD(v273) = v65[2] & 1;
  (*(void (**)(void))(*v65 + 264))();
  v274 = (uint64_t)v89;
  if (v66 != 2)
  {
    v110 = *(void (**)(_QWORD *))(*v65 + 432);
    swift_retain_n(v65, 2);
    v111 = v271;
    v110(v271);
    (*(void (**)(_QWORD *))(*v65 + 424))(v111);
    sub_1005DAB90(v111[3], v111[4], v111[5], v111[2]);
    swift_release(v65);
    v112 = *(void (**)(__n128))(*v65 + 264);
    v113 = swift_retain(v65);
    v112(v113);
    v114 = *(int *)(v270 + 48);
    if (v66)
    {
      v115 = (uint64_t)v268;
      v116 = (uint64_t)v268 + v114;
      sub_1004CB7BC((uint64_t)v276, (uint64_t)v268, (uint64_t *)&unk_1013E1A50);
      sub_1004CB7BC(v87, v116, (uint64_t *)&unk_1013E1A50);
      v117 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v278[6];
      if (v117(v115, 1, v57) == 1)
      {
        if (v117(v116, 1, v57) == 1)
        {
          v109 = sub_1004CB800(v115, (uint64_t *)&unk_1013E1A50);
LABEL_70:
          v122 = v258 & 0xFFFFFFFFFFFFFFFDLL;
          goto LABEL_71;
        }
      }
      else
      {
        v121 = v263;
        sub_1004CB7BC(v115, v263, (uint64_t *)&unk_1013E1A50);
        if (v117(v116, 1, v57) != 1)
        {
          v123 = v277;
          ((void (*)(char *, uint64_t, uint64_t))v278[4])(v277, v116, v57);
          sub_1004B7878((unint64_t *)&qword_1013E4880, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v124 = dispatch thunk of static Equatable.== infix(_:_:)(v121, v123);
          v125 = v123;
          v126 = v255;
          v255((uint64_t)v125, v57);
          v126(v121, v57);
          v109 = sub_1004CB800(v115, (uint64_t *)&unk_1013E1A50);
          if ((v124 & 1) == 0)
            goto LABEL_72;
          goto LABEL_70;
        }
        v255(v121, v57);
      }
      v120 = (uint64_t *)&unk_1013F62D0;
LABEL_64:
      v109 = sub_1004CB800(v115, v120);
      goto LABEL_72;
    }
    v115 = v266;
    v118 = v266 + v114;
    sub_1004CB7BC((uint64_t)v276, v266, (uint64_t *)&unk_1013E1A50);
    sub_1004CB7BC(v87, v118, (uint64_t *)&unk_1013E1A50);
    v119 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v278[6];
    if (v119(v115, 1, v57) == 1)
    {
      if (v119(v118, 1, v57) == 1)
      {
        v120 = (uint64_t *)&unk_1013E1A50;
        goto LABEL_64;
      }
    }
    else
    {
      sub_1004CB7BC(v115, v86, (uint64_t *)&unk_1013E1A50);
      if (v119(v118, 1, v57) != 1)
      {
        v192 = v277;
        ((void (*)(char *, uint64_t, uint64_t))v278[4])(v277, v118, v57);
        sub_1004B7878((unint64_t *)&qword_1013E4880, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v193 = dispatch thunk of static Equatable.== infix(_:_:)(v86, v192);
        v194 = v192;
        v195 = v255;
        v255((uint64_t)v194, v57);
        v195(v86, v57);
        v109 = sub_1004CB800(v115, (uint64_t *)&unk_1013E1A50);
        if ((v193 & 1) != 0)
        {
LABEL_72:
          v108 = v65;
          v77 = v65;
          if (!(_DWORD)v261)
            goto LABEL_74;
          goto LABEL_73;
        }
        goto LABEL_68;
      }
      v255(v86, v57);
    }
    v109 = sub_1004CB800(v115, (uint64_t *)&unk_1013F62D0);
LABEL_68:
    v122 = v258 | 2;
LABEL_71:
    v258 = v122;
    goto LABEL_72;
  }
  v77 = v271;
  v106 = *(uint64_t (**)(uint64_t))(*v271 + 264);
  v107 = swift_retain_n(v271, 2);
  v108 = v77;
  v109 = v106(v107);
  if (!(_DWORD)v261)
    goto LABEL_74;
LABEL_73:
  if ((v269 & 1) == 0)
  {
    v127 = (*(uint64_t (**)(uint64_t))(*v108 + 568))(v109);
    swift_bridgeObjectRetain(v127);
    v128 = swift_isUniquelyReferenced_nonNull_native(v88);
    v279[0] = (uint64_t)v88;
    sub_100AF23D8(v127, (uint64_t)sub_100AF236C, 0, v128, v279);
    v129 = v279[0];
    swift_bridgeObjectRelease(v127);
    v130 = swift_bridgeObjectRelease(0x8000000000000000);
    v131 = (*(uint64_t (**)(__n128))(*v108 + 576))(v130);
    swift_bridgeObjectRetain(v131);
    v132 = swift_isUniquelyReferenced_nonNull_native(v129);
    v279[0] = v129;
    sub_100AF23D8(v131, (uint64_t)sub_100AF236C, 0, v132, v279);
    v278 = (_QWORD *)v279[0];
    swift_release(v65);
    swift_release(v108);
    swift_bridgeObjectRelease(v131);
    swift_bridgeObjectRelease(0x8000000000000000);
    LODWORD(v256) = 1;
    goto LABEL_76;
  }
LABEL_74:
  v278 = v88;
  swift_release(v65);
  swift_release(v108);
LABEL_76:
  sub_1004CB800(v87, (uint64_t *)&unk_1013E1A50);
  sub_1004CB800((uint64_t)v276, (uint64_t *)&unk_1013E1A50);
LABEL_77:
  v133 = v254;
  v134 = v77[5];
  v135 = v262;
  v136 = v262 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_minRequiredVersions;
  *(_OWORD *)v136 = *(_OWORD *)(v77 + 3);
  *(_QWORD *)(v136 + 16) = v134;
  *(_QWORD *)(v135 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_objectOptions) = v77[2];
  v137 = *(_QWORD *)(v133 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_crdtContext);
  v138 = *(uint64_t (**)(uint64_t, _QWORD, __n128))(*v77 + 456);
  v139 = swift_retain(v77);
  v140 = v138(v137, 0, v139);
  v141 = (uint64_t *)(v135 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_commonData);
  v142 = *(_QWORD *)(v135 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_commonData);
  v143 = *(_QWORD *)(v135 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_commonData + 8);
  *v141 = v140;
  v141[1] = v144;
  sub_1004BE2FC(v142, v143);
  v145 = (*(uint64_t (**)(uint64_t, _QWORD))(*v77 + 464))(v137, 0);
  v146 = (uint64_t *)(v135 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_specificData);
  v147 = *(_QWORD *)(v135 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_specificData);
  v148 = *(_QWORD *)(v135 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_specificData + 8);
  *v146 = v145;
  v146[1] = v149;
  v150 = sub_1004BE2FC(v147, v148);
  v151 = (uint64_t)v265;
  (*(void (**)(uint64_t))(*v77 + 264))(v150);
  v152 = v135 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_parentContainerUUID;
  swift_beginAccess(v135 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_parentContainerUUID, v279, 33, 0);
  sub_100582338(v151, v152, (uint64_t *)&unk_1013E1A50);
  v153 = swift_endAccess(v279);
  *(_QWORD *)(v135 + v251) = v258;
  *(_BYTE *)(v135 + v250) = v269 & 1;
  v154 = v267;
  v155 = (uint64_t)v278;
  if (v267 >> 60 != 15)
  {
    v156 = (_QWORD *)(v262 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_syncData);
    v157 = *(_QWORD *)(v262 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_syncData);
    v158 = *(_QWORD *)(v262 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_syncData + 8);
    v159 = v264;
    *v156 = v264;
    v156[1] = v154;
    sub_1004BE310(v159, v154);
    v153 = sub_1004BE2FC(v157, v158);
  }
  v160 = v271;
  if ((_BYTE)v275)
  {
    v161 = (*(uint64_t (**)(uint64_t))(*v271 + 568))(v153);
    sub_100A66064(v161);
    v163 = v162;
    v164 = (*(uint64_t (**)(void))(*v160 + 576))();
    sub_100A66064(v164);
    sub_100CA0650(v165, v163);
    v167 = v166;
    swift_bridgeObjectRetain(v155);
    v169 = sub_100DB9810(v168, v167);
    swift_bridgeObjectRelease(v155);
  }
  else
  {
    v169 = &_swiftEmptySetSingleton;
  }
  v170 = v274;
  sub_100A87178(v262);
  v171 = sub_1004B804C((uint64_t *)&unk_1013E1780);
  v172 = v259;
  v173 = (uint64_t)v259 + *(int *)(v171 + 48);
  v276 = *(void (**)(void))(*v77 + 256);
  v276();
  sub_1004B8460(v253, v173, type metadata accessor for CRLBoardIdentifier);
  v174 = v260;
  swift_storeEnumTagMultiPayload(v172, v260, 1);
  swift_bridgeObjectRetain(v170);
  v175 = (uint64_t)v278;
  swift_bridgeObjectRetain(v278);
  v274 = v170;
  sub_100A87C6C(v172, v170, v175, (char)v256, 1);
  sub_1004B84A4((uint64_t)v172, type metadata accessor for CRLAssetReferrerIdentifier);
  swift_bridgeObjectRelease(v274);
  v278 = (_QWORD *)v175;
  v196 = swift_bridgeObjectRelease(v175);
  v197 = (uint64_t)v257;
  v198 = (uint64_t)&v257[*(int *)(v171 + 48)];
  ((void (*)(__n128))v276)(v196);
  sub_1004B8460(v253, v198, type metadata accessor for CRLBoardIdentifier);
  swift_storeEnumTagMultiPayload(v197, v174, 1);
  v199 = sub_1005FF8B0((uint64_t)v169);
  swift_bridgeObjectRelease(v169);
  sub_100A87D74(v197, (uint64_t)v199, 0);
  sub_1004B84A4(v197, type metadata accessor for CRLAssetReferrerIdentifier);
  v214 = swift_release(v199);
  v215 = (*(uint64_t (**)(__n128))(*v77 + 568))(v214);
  v216 = (*(uint64_t (**)(void))(*v77 + 576))();
  sub_100A63508(v215);
  v218 = v217;
  swift_bridgeObjectRelease(v215);
  v219 = sub_100AF7994(v218);
  swift_bridgeObjectRelease(v218);
  sub_100A63508(v216);
  v221 = v220;
  swift_bridgeObjectRelease(v216);
  v222 = sub_100AF7994(v221);
  swift_bridgeObjectRelease(v221);
  v223 = sub_100CA03B4(v222, v219);
  v224 = v274;
  v225 = (uint64_t)v278;
  sub_100A883F8(v262, v275, v274, (uint64_t)v278, v223);
  swift_bridgeObjectRelease(v224);
  swift_bridgeObjectRelease(v225);
  swift_bridgeObjectRelease(v223);
  sub_1001E9730();
  v226 = v280;
  v246 = v262;
  swift_release(v77);
  v247 = swift_release(v246);
  v248 = (uint64_t)v277;
  ((void (*)(__n128))v252)(v247);
  swift_beginAccess(v254 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_transientSyncExclusions, v279, 33, 0);
  sub_100D57874(v248, v253);
  swift_endAccess(v279);
  v255(v248, v226);
}

uint64_t sub_100A870E0(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  char v4;
  uint64_t v5;

  if (((*(uint64_t (**)(void))(*v1 + 472))() & 1) != 0)
    v3 = 4;
  else
    v3 = 0;
  v4 = (*(uint64_t (**)(_QWORD *))(*v1 + 480))(a1);
  v5 = v3 | 8;
  if ((v4 & 1) == 0)
    v5 = v3;
  if (v1[3] != a1[3])
    v5 |= 0x20uLL;
  if (v1[4] != a1[4])
    v5 |= 0x80uLL;
  if (v1[5] != a1[5])
    v5 |= 0x100uLL;
  if (v1[2] == a1[2])
    return v5;
  else
    return v5 | 0x40;
}

void sub_100A87178(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  void (*v15)(_QWORD);
  id v16;
  void (*v17)(_QWORD *, uint64_t);
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  Swift::String v42;
  Swift::String v43;
  Swift::String v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  id v56;
  void (*v57)(_QWORD *, uint64_t);
  uint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  uint64_t *v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  id v84;
  sqlite3_stmt **v85;
  sqlite3_stmt *v86;
  uint64_t v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  id v91;
  int v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  id v96;
  int v97;
  unint64_t v98;
  uint64_t v99;
  __n128 v100;
  void *v101;
  uint64_t v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  void (*v109)(_QWORD *, uint64_t);
  uint64_t v110;
  unsigned int v111;
  void (*v112)(_QWORD *, _QWORD, uint64_t);
  _BYTE v113[24];
  char v114[24];
  char v115[24];
  char v116[24];
  uint64_t v117;
  unint64_t v118;
  char v119[32];

  v3 = v1;
  v5 = type metadata accessor for UUID(0);
  v108 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v107 = (char *)&v104 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1004B804C((uint64_t *)&unk_1013E1A50);
  __chkstk_darwin(v7);
  v9 = (char *)&v104 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchPredicate(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (uint64_t *)((char *)&v104 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v13 = v14;
  v15 = *(void (**)(_QWORD))(v11 + 104);
  v111 = enum case for DispatchPredicate.onQueue(_:);
  v112 = (void (*)(_QWORD *, _QWORD, uint64_t))v15;
  v15(v13);
  v16 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)(v13);
  v17 = *(void (**)(_QWORD *, uint64_t))(v11 + 8);
  v110 = v10;
  v17(v13, v10);
  if ((v14 & 1) == 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  v106 = v5;
  v109 = v17;
  v117 = 0;
  v118 = 0xE000000000000000;
  _StringGuts.grow(_:)(119);
  v18._countAndFlagsBits = 0x20455441445055;
  v18._object = (void *)0xE700000000000000;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 0x74695F6472616F62;
  v19._object = (void *)0xEB00000000736D65;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 0x2054455320;
  v20._object = (void *)0xE500000000000000;
  String.append(_:)(v20);
  v21._countAndFlagsBits = 0x755F746E65726170;
  v21._object = (void *)0xEB00000000646975;
  String.append(_:)(v21);
  v22._countAndFlagsBits = 0x202C3F203D20;
  v22._object = (void *)0xE600000000000000;
  String.append(_:)(v22);
  v23._countAndFlagsBits = 0x645F6E6F6D6D6F63;
  v23._object = (void *)0xEB00000000617461;
  String.append(_:)(v23);
  v24._countAndFlagsBits = 0x202C3F203D20;
  v24._object = (void *)0xE600000000000000;
  String.append(_:)(v24);
  v25._countAndFlagsBits = 0x6369666963657073;
  v25._object = (void *)0xED0000617461645FLL;
  String.append(_:)(v25);
  v26._countAndFlagsBits = 0x202C3F203D20;
  v26._object = (void *)0xE600000000000000;
  String.append(_:)(v26);
  v27._countAndFlagsBits = 0x6E6F7473626D6F74;
  v27._object = (void *)0xEA00000000006465;
  String.append(_:)(v27);
  v28._countAndFlagsBits = 0x202C3F203D20;
  v28._object = (void *)0xE600000000000000;
  String.append(_:)(v28);
  v29._object = (void *)0x8000000100FEEB40;
  v29._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v29);
  v30._countAndFlagsBits = 0x202C3F203D20;
  v30._object = (void *)0xE600000000000000;
  String.append(_:)(v30);
  v31._object = (void *)0xE900000000000061;
  v31._countAndFlagsBits = 0x7461645F636E7973;
  String.append(_:)(v31);
  v32._countAndFlagsBits = 0x202C3F203D20;
  v32._object = (void *)0xE600000000000000;
  String.append(_:)(v32);
  v33._countAndFlagsBits = 0xD000000000000014;
  v33._object = (void *)0x8000000100FEEDE0;
  String.append(_:)(v33);
  v34._countAndFlagsBits = 0x202C3F203D20;
  v34._object = (void *)0xE600000000000000;
  String.append(_:)(v34);
  v35._countAndFlagsBits = 0x6F5F7463656A626FLL;
  v35._object = (void *)0xEE00736E6F697470;
  String.append(_:)(v35);
  v36._countAndFlagsBits = 0x202C3F203D20;
  v36._object = (void *)0xE600000000000000;
  String.append(_:)(v36);
  v37._countAndFlagsBits = 0xD00000000000002DLL;
  v37._object = (void *)0x8000000100FEEFF0;
  String.append(_:)(v37);
  v38._countAndFlagsBits = 0x202C3F203D20;
  v38._object = (void *)0xE600000000000000;
  String.append(_:)(v38);
  v39._countAndFlagsBits = 0xD000000000000026;
  v39._object = (void *)0x8000000100FEEB60;
  String.append(_:)(v39);
  v40._countAndFlagsBits = 0x48570A203F203D20;
  v40._object = (void *)0xED00002820455245;
  String.append(_:)(v40);
  v41._object = (void *)0xE900000000000064;
  v41._countAndFlagsBits = 0x6975755F6D657469;
  String.append(_:)(v41);
  v42._countAndFlagsBits = 0x444E41203F203D20;
  v42._object = (void *)0xE900000000000020;
  String.append(_:)(v42);
  v43._object = (void *)0x8000000100FD6350;
  v43._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v43);
  v44._countAndFlagsBits = 0x293F203D20;
  v44._object = (void *)0xE500000000000000;
  String.append(_:)(v44);
  v45 = v117;
  v46 = v118;
  v47 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v48 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v48, v119);
  swift_retain(v47);
  v50 = sub_1006B77CC(v49, v45, v46);
  swift_release(v47);
  if (v2)
    return;
  v51 = a1 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_parentContainerUUID;
  swift_beginAccess(a1 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_parentContainerUUID, &v117, 0, 0);
  sub_1004CB7BC(v51, (uint64_t)v9, (uint64_t *)&unk_1013E1A50);
  sub_1006B6214((uint64_t)v9, 1);
  sub_1004CB800((uint64_t)v9, (uint64_t *)&unk_1013E1A50);
  v52 = (uint64_t *)(a1 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_commonData);
  v53 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_commonData + 8);
  if (v53 >> 60 == 15)
  {
    v54 = *(void **)(*(_QWORD *)(v50 + 16) + 32);
    *v13 = v54;
    v55 = v110;
    v112(v13, v111, v110);
    v56 = v54;
    LOBYTE(v54) = _dispatchPreconditionTest(_:)(v13);
    v57 = v109;
    v109(v13, v55);
    if ((v54 & 1) == 0)
    {
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    swift_beginAccess(v50 + 24, v116, 0, 0);
    sqlite3_bind_null(*(sqlite3_stmt **)(v50 + 24), 2);
  }
  else
  {
    v58 = *v52;
    sub_1004BE310(*v52, *(_QWORD *)(a1 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_commonData + 8));
    sub_1006B5E80(v58, v53);
    sub_1004BE2FC(v58, v53);
    v57 = v109;
  }
  v59 = (uint64_t *)(a1 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_specificData);
  v60 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_specificData + 8);
  if (v60 >> 60 == 15)
  {
    v61 = *(void **)(*(_QWORD *)(v50 + 16) + 32);
    *v13 = v61;
    v62 = v110;
    v112(v13, v111, v110);
    v63 = v61;
    LOBYTE(v61) = _dispatchPreconditionTest(_:)(v13);
    v57(v13, v62);
    if ((v61 & 1) == 0)
    {
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    swift_beginAccess(v50 + 24, v115, 0, 0);
    sqlite3_bind_null(*(sqlite3_stmt **)(v50 + 24), 3);
  }
  else
  {
    v64 = *v59;
    sub_1004BE310(*v59, *(_QWORD *)(a1 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_specificData + 8));
    sub_1006B5E80(v64, v60);
    sub_1004BE2FC(v64, v60);
  }
  sub_1006B59FC(*(_BYTE *)(a1 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_isLocalTombstone), 4);
  sub_1006B5B50(*(_QWORD *)(a1 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_unsyncedChanges), 5);
  v65 = (uint64_t *)(a1 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_syncData);
  v66 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_syncData + 8);
  v105 = 0;
  if (v66 >> 60 == 15)
  {
    v67 = *(void **)(*(_QWORD *)(v50 + 16) + 32);
    *v13 = v67;
    v68 = v110;
    v112(v13, v111, v110);
    v69 = v67;
    LOBYTE(v67) = _dispatchPreconditionTest(_:)(v13);
    v57(v13, v68);
    if ((v67 & 1) == 0)
    {
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    swift_beginAccess(v50 + 24, v114, 0, 0);
    sqlite3_bind_null(*(sqlite3_stmt **)(v50 + 24), 6);
  }
  else
  {
    v70 = *v65;
    sub_1004BE310(*v65, v66);
    sub_1006B5E80(v70, v66);
    sub_1004BE2FC(v70, v66);
  }
  v71 = a1 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_minRequiredVersions;
  sub_1006B5B50(*(_QWORD *)(a1 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_minRequiredVersions), 7);
  sub_1006B5B50(*(_QWORD *)(a1 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_objectOptions), 8);
  sub_1006B5B50(*(_QWORD *)(v71 + 8), 9);
  sub_1006B5B50(*(_QWORD *)(v71 + 16), 10);
  v72 = a1 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_itemUUID;
  v73 = v108;
  v74 = v107;
  v75 = v106;
  (*(void (**)(char *, uint64_t, uint64_t))(v108 + 16))(v107, v72, v106);
  v76 = UUID.crl_data()();
  v78 = v77;
  sub_1006B5E80(v76, v77);
  sub_1004BBBC8(v76, v78);
  (*(void (**)(char *, uint64_t))(v73 + 8))(v74, v75);
  v79 = v105;
  v80 = sub_10067BA88();
  if (!v79)
  {
    v87 = v80;
    v88 = v81;
    sub_1006B5E80(v80, v81);
    v89 = *(void **)(*(_QWORD *)(v50 + 16) + 32);
    *v13 = v89;
    v90 = v110;
    v112(v13, v111, v110);
    v91 = v89;
    LOBYTE(v89) = _dispatchPreconditionTest(_:)(v13);
    v109(v13, v90);
    if ((v89 & 1) == 0)
    {
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
    }
    v85 = (sqlite3_stmt **)(v50 + 24);
    swift_beginAccess(v50 + 24, v113, 1, 0);
    v92 = sqlite3_step(*(sqlite3_stmt **)(v50 + 24));
    v93 = 0xD000000000000010;
    if (v92 == 101)
    {
      sub_1004BBBC8(v87, v88);
      v94 = *(void **)(*(_QWORD *)(v50 + 16) + 32);
      *v13 = v94;
      v95 = v110;
      v112(v13, v111, v110);
      v96 = v94;
      v93 = _dispatchPreconditionTest(_:)(v13);
      v92 = ((uint64_t (*)(_QWORD *, uint64_t))v109)(v13, v95);
      if ((v93 & 1) != 0)
        goto LABEL_26;
      __break(1u);
    }
    v97 = v92;
    v98 = sub_1006B79EC();
    swift_allocError(&type metadata for SQLiteError, v98, 0, 0);
    *(_DWORD *)v99 = v97;
    *(_QWORD *)(v99 + 8) = v93 + 11;
    *(_QWORD *)(v99 + 16) = 0x8000000100FF05A0;
    swift_willThrow(v100);
    sub_1004BBBC8(v87, v88);
    v101 = *(void **)(*(_QWORD *)(v50 + 16) + 32);
    *v13 = v101;
    v102 = v110;
    v112(v13, v111, v110);
    v103 = v101;
    LOBYTE(v101) = _dispatchPreconditionTest(_:)(v13);
    v109(v13, v102);
    if ((v101 & 1) == 0)
      goto LABEL_34;
LABEL_26:
    v86 = *v85;
    if (!*v85)
      goto LABEL_19;
    goto LABEL_18;
  }
  v82 = *(void **)(*(_QWORD *)(v50 + 16) + 32);
  *v13 = v82;
  v83 = v110;
  v112(v13, v111, v110);
  v84 = v82;
  LOBYTE(v82) = _dispatchPreconditionTest(_:)(v13);
  v109(v13, v83);
  if ((v82 & 1) == 0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v85 = (sqlite3_stmt **)(v50 + 24);
  swift_beginAccess(v50 + 24, v113, 1, 0);
  v86 = *(sqlite3_stmt **)(v50 + 24);
  if (v86)
  {
LABEL_18:
    sqlite3_finalize(v86);
    *v85 = 0;
  }
LABEL_19:
  swift_release(v50);
}

void sub_100A87C6C(sqlite3_stmt **a1, uint64_t a2, uint64_t a3, char a4, sqlite3_int64 a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  if (*(_QWORD *)(a2 + 16) || *(_QWORD *)(a3 + 16) || (a4 & 1) != 0)
  {
    v10 = sub_100A89A08(a2, a3, a4 & 1);
    v11 = v9;
    if ((a4 & 1) != 0)
    {
      sub_100A8A7E4((uint64_t)a1);
      if (v5)
      {
LABEL_12:
        swift_bridgeObjectRelease(v11);
        swift_bridgeObjectRelease(v10);
        return;
      }
    }
    else
    {
      swift_bridgeObjectRetain(v9);
      v13 = sub_100600358(v12);
      swift_bridgeObjectRelease(v11);
      sub_100A8AEC4(a1, v13);
      if (v5)
      {
        swift_bridgeObjectRelease(v11);
        swift_bridgeObjectRelease(v10);
        swift_release(v13);
        return;
      }
      swift_release(v13);
    }
    sub_100A8B5F4((uint64_t)a1, v10, a5);
    goto LABEL_12;
  }
}

double sub_100A87D74(uint64_t a1, uint64_t a2, sqlite3_stmt **a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  void (*v16)(_QWORD);
  id v17;
  void (*v18)(_QWORD *, uint64_t);
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double result;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  id v47;
  __n128 v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  sqlite3_stmt *v52;
  uint64_t v53;
  const char *v54;
  BOOL v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  id v59;
  sqlite3_stmt **v60;
  int v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  id v65;
  sqlite3_stmt *v66;
  int v67;
  Swift::String v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  __n128 v74;
  void *v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  sqlite3_stmt **v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  void (*v86)(_QWORD *, _QWORD, uint64_t);
  void (*v87)(_QWORD *, uint64_t);
  uint64_t v88;
  unint64_t v89;
  _QWORD v90[3];
  unint64_t v91;
  unint64_t v92;
  char v93[32];

  v4 = v3;
  v8 = type metadata accessor for String.Encoding(0);
  v82 = *(_QWORD *)(v8 - 8);
  v83 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchPredicate(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (uint64_t *)((char *)&v78 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = *(void **)(v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v14 = v15;
  v16 = *(void (**)(_QWORD))(v12 + 104);
  v85 = enum case for DispatchPredicate.onQueue(_:);
  v86 = (void (*)(_QWORD *, _QWORD, uint64_t))v16;
  v16(v14);
  v17 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)(v14);
  v18 = *(void (**)(_QWORD *, uint64_t))(v12 + 8);
  v84 = v11;
  v87 = v18;
  v18(v14, v11);
  if ((v15 & 1) == 0)
  {
LABEL_28:
    __break(1u);
    __break(1u);
    goto LABEL_29;
  }
  v80 = a3;
  v79 = a1;
  v19 = *(_QWORD *)(a2 + 16);
  v91 = 0;
  v92 = 0xE000000000000000;
  _StringGuts.grow(_:)(50);
  swift_bridgeObjectRelease(v92);
  v91 = 0xD00000000000006CLL;
  v92 = 0x8000000100FEFD20;
  v20 = sub_100A6AE90(63, 0xE100000000000000, v19);
  v90[0] = v20;
  v21 = sub_1004B804C((uint64_t *)&unk_1013E4970);
  v22 = sub_1004CBA30((unint64_t *)&qword_1013DFC40, (uint64_t *)&unk_1013E4970, (uint64_t)&protocol conformance descriptor for [A]);
  v23 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v21, v22);
  v24 = a2;
  v26 = v25;
  swift_bridgeObjectRelease(v20);
  v27._countAndFlagsBits = v23;
  v27._object = v26;
  String.append(_:)(v27);
  swift_bridgeObjectRelease(v26);
  v28._countAndFlagsBits = 10537;
  v28._object = (void *)0xE200000000000000;
  String.append(_:)(v28);
  v29 = v91;
  v30 = v92;
  v31 = *(_QWORD *)(v4 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v32 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v32, v93);
  swift_retain(v31);
  v33 = v81;
  v35 = sub_1006B77CC(v34, v29, v30);
  *(_QWORD *)&result = swift_release(v31).n128_u64[0];
  if (!v33)
  {
    sub_1006B5B50((sqlite3_int64)v80, 1);
    v37 = sub_1004BC12C();
    v39 = v37;
    v40 = v38;
    v78 = 0;
    v81 = v35;
    sub_1006B5E80(v37, v38);
    sub_1004BBBC8(v39, v40);
    if (v19)
    {
      v80 = (sqlite3_stmt **)(v81 + 24);
      swift_beginAccess(v81 + 24, &v91, 0, 0);
      v41 = 0;
      v42 = (uint64_t *)(v24 + 40);
      while (1)
      {
        v44 = *(v42 - 1);
        v43 = *v42;
        v45 = *(void **)(*(_QWORD *)(v81 + 16) + 32);
        *v14 = v45;
        v46 = v84;
        v86(v14, v85, v84);
        swift_bridgeObjectRetain(v43);
        v47 = v45;
        LOBYTE(v45) = _dispatchPreconditionTest(_:)(v14);
        v87(v14, v46);
        if ((v45 & 1) == 0)
          break;
        v90[0] = v44;
        v90[1] = v43;
        static String.Encoding.utf8.getter(v48);
        v49 = sub_1004D292C();
        v50 = StringProtocol.cString(using:)(v10, &type metadata for String, v49);
        (*(void (**)(char *, uint64_t))(v82 + 8))(v10, v83);
        if (v41 == 2147483645)
          goto LABEL_27;
        v51 = v19;
        v52 = *v80;
        if (qword_1013DCE28 != -1)
          swift_once(&qword_1013DCE28, sub_1006B57D4);
        v53 = v41 + 1;
        v42 += 2;
        if (v50)
          v54 = (const char *)(v50 + 32);
        else
          v54 = 0;
        sqlite3_bind_text(v52, v41 + 3, v54, -1, (void (__cdecl *)(void *))qword_10147F168);
        swift_bridgeObjectRelease(v43);
        swift_bridgeObjectRelease(v50);
        ++v41;
        v55 = v51 == v53;
        v19 = v51;
        if (v55)
          goto LABEL_18;
      }
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
LABEL_18:
    v56 = v81;
    v57 = *(void **)(*(_QWORD *)(v81 + 16) + 32);
    *v14 = v57;
    v58 = v84;
    v86(v14, v85, v84);
    v59 = v57;
    LOBYTE(v57) = _dispatchPreconditionTest(_:)(v14);
    v87(v14, v58);
    if ((v57 & 1) == 0)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    v60 = (sqlite3_stmt **)(v56 + 24);
    swift_beginAccess(v56 + 24, v90, 1, 0);
    v61 = sqlite3_step(*(sqlite3_stmt **)(v56 + 24));
    v62 = v79;
    if (v61 == 101)
    {
      v63 = *(void **)(*(_QWORD *)(v56 + 16) + 32);
      *v14 = v63;
      v64 = v84;
      v86(v14, v85, v84);
      v65 = v63;
      LOBYTE(v63) = _dispatchPreconditionTest(_:)(v14);
      v87(v14, v64);
      if ((v63 & 1) == 0)
      {
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
      }
      v66 = *v60;
      if (!*v60)
        goto LABEL_5;
    }
    else
    {
      v67 = v61;
      v88 = 0;
      v89 = 0xE000000000000000;
      _StringGuts.grow(_:)(78);
      v68._object = (void *)0x8000000100FEFD90;
      v68._countAndFlagsBits = 0xD00000000000004CLL;
      String.append(_:)(v68);
      v69 = type metadata accessor for CRLAssetReferrerIdentifier(0);
      _print_unlocked<A, B>(_:_:)(v62, &v88, v69, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v70 = v88;
      v71 = v89;
      v72 = sub_1006B79EC();
      swift_allocError(&type metadata for SQLiteError, v72, 0, 0);
      *(_DWORD *)v73 = v67;
      *(_QWORD *)(v73 + 8) = v70;
      *(_QWORD *)(v73 + 16) = v71;
      swift_willThrow(v74);
      v75 = *(void **)(*(_QWORD *)(v56 + 16) + 32);
      *v14 = v75;
      v76 = v84;
      v86(v14, v85, v84);
      v77 = v75;
      LOBYTE(v75) = _dispatchPreconditionTest(_:)(v14);
      v87(v14, v76);
      if ((v75 & 1) == 0)
        goto LABEL_31;
      v66 = *v60;
      if (!*v60)
        goto LABEL_5;
    }
    sqlite3_finalize(v66);
    *v60 = 0;
LABEL_5:
    *(_QWORD *)&result = swift_release(v56).n128_u64[0];
  }
  return result;
}

void sub_100A883F8(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *v6;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int64_t v28;
  _QWORD *v29;
  uint64_t v30;
  __n128 v31;
  char *v32;
  unint64_t v33;
  int64_t v34;
  unint64_t v35;
  int64_t v36;
  void (*v37)(char *, unint64_t, uint64_t);
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  os_unfair_lock_s *v43;
  uint64_t v44;
  void *v45;
  char *v46;
  id v47;
  id v48;
  char *v49;
  id v50;
  void *v51;
  os_unfair_lock_s *v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  os_unfair_lock_s *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t *v64;
  char *v65;
  __n128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t ObjectType;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned __int8 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __n128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int64_t v87;
  char *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  char *v98;
  int64_t v99;
  unint64_t v100;
  _QWORD v101[5];

  v6 = v5;
  v100 = a4;
  v10 = a2;
  v11 = sub_1004B804C(&qword_1013E01F0);
  __chkstk_darwin(v11);
  v13 = (char *)&v82 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1004B804C((uint64_t *)&unk_1013E1A50);
  __chkstk_darwin(v14);
  v16 = (char *)&v82 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for UUID(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v82 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = v20;
  __chkstk_darwin(v19);
  v94 = (char *)&v82 - v22;
  if (!v10)
  {
    v76 = sub_100A89A08(a3, v100, 0);
    swift_bridgeObjectRelease(v77);
    v78 = sub_100A65D98(v76);
    v79 = v78;
    if (*(_QWORD *)(v78 + 16))
    {
      v80 = (uint64_t)v94;
      (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v94, a1 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_itemUUID, v17);
      sub_1005662A4(v79, v80, a1 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_boardIdentifier);
      v81 = swift_bridgeObjectRelease(v79);
      (*(void (**)(uint64_t, uint64_t, __n128))(v18 + 8))(v80, v17, v81);
    }
    else
    {
      swift_bridgeObjectRelease(v78);
    }
    return;
  }
  v95 = v6;
  v23 = *(_QWORD *)(a5 + 56);
  v86 = a5 + 56;
  v24 = 1 << *(_BYTE *)(a5 + 32);
  v25 = -1;
  if (v24 < 64)
    v25 = ~(-1 << v24);
  v26 = v25 & v23;
  v91 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetDownloadManagerLock;
  v97 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetDownloadManager;
  v84 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManagerLock;
  v27 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManager;
  v87 = (unint64_t)(v24 + 63) >> 6;
  swift_bridgeObjectRetain(a5);
  v28 = 0;
  v82 = xmmword_100EFCE10;
  v89 = v16;
  v90 = (char *)&type metadata for () + 8;
  v98 = v13;
  v96 = v21;
  v92 = a5;
  v83 = v27;
  while (1)
  {
    v32 = v95;
    if (v26)
    {
      v100 = (v26 - 1) & v26;
      v33 = __clz(__rbit64(v26)) | (v28 << 6);
      goto LABEL_23;
    }
    v34 = v28 + 1;
    if (__OFADD__(v28, 1))
    {
      __break(1u);
      goto LABEL_44;
    }
    if (v34 >= v87)
      goto LABEL_39;
    v35 = *(_QWORD *)(v86 + 8 * v34);
    ++v28;
    if (!v35)
    {
      v28 = v34 + 1;
      if (v34 + 1 >= v87)
        goto LABEL_39;
      v35 = *(_QWORD *)(v86 + 8 * v28);
      if (!v35)
      {
        v28 = v34 + 2;
        if (v34 + 2 >= v87)
          goto LABEL_39;
        v35 = *(_QWORD *)(v86 + 8 * v28);
        if (!v35)
          break;
      }
    }
LABEL_22:
    v100 = (v35 - 1) & v35;
    v33 = __clz(__rbit64(v35)) + (v28 << 6);
LABEL_23:
    v37 = *(void (**)(char *, unint64_t, uint64_t))(v18 + 16);
    v37(v16, *(_QWORD *)(a5 + 48) + *(_QWORD *)(v18 + 72) * v33, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v16, 0, 1, v17);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
      goto LABEL_40;
    v99 = v28;
    v38 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
    v38(v21, v16, v17);
    v39 = *(_QWORD *)&v32[v91];
    os_unfair_lock_lock(*(os_unfair_lock_t *)(v39 + 16));
    v40 = *(_QWORD *)&v32[v97];
    if (v40)
    {
      v41 = *(_QWORD *)&v32[v97];
    }
    else
    {
      v85 = swift_allocObject(&unk_101292858, 24, 7);
      swift_unknownObjectWeakInit(v85 + 16, v32);
      v42 = *(_QWORD *)&v32[v84];
      v43 = *(os_unfair_lock_s **)(v42 + 16);
      v88 = v32;
      os_unfair_lock_lock(v43);
      v44 = v83;
      v45 = *(void **)&v32[v83];
      v46 = v32;
      if (v45)
      {
        v47 = *(id *)&v32[v83];
      }
      else
      {
        v48 = objc_allocWithZone((Class)type metadata accessor for CRLAssetFileManager(0));
        v49 = v88;
        v50 = sub_100C7EE84((uint64_t)v49);

        v51 = *(void **)&v46[v44];
        *(_QWORD *)&v46[v44] = v50;
        v47 = v50;

        v45 = 0;
      }
      v52 = *(os_unfair_lock_s **)(v42 + 16);
      v53 = v45;
      os_unfair_lock_unlock(v52);
      v54 = type metadata accessor for CRLAssetDownloadManager();
      v41 = swift_allocObject(v54, 280, 15);
      swift_defaultActor_initialize(v41, v55);
      *(_OWORD *)(v41 + 224) = 0u;
      *(_OWORD *)(v41 + 240) = 0u;
      *(_OWORD *)(v41 + 192) = 0u;
      *(_OWORD *)(v41 + 208) = 0u;
      *(_QWORD *)(v41 + 256) = 0;
      *(_QWORD *)(v41 + 264) = &_swiftEmptySetSingleton;
      *(_QWORD *)(v41 + 272) = _swiftEmptyDictionarySingleton;
      *(_QWORD *)(v41 + 112) = v47;
      *(_QWORD *)(v41 + 120) = sub_1005D29B0;
      *(_QWORD *)(v41 + 128) = v85;
      *(_QWORD *)(v41 + 136) = sub_1005CC8D8;
      *(_QWORD *)(v41 + 144) = 0;
      *(_QWORD *)(v41 + 152) = 3;
      *(_OWORD *)(v41 + 160) = v82;
      *(_OWORD *)(v41 + 176) = 0u;

      v56 = *(_QWORD *)&v46[v97];
      *(_QWORD *)&v46[v97] = v41;
      swift_retain(v41);
      swift_release(v56);
      v40 = 0;
      v13 = v98;
      v21 = v96;
    }
    v57 = *(os_unfair_lock_s **)(v39 + 16);
    swift_retain(v40);
    os_unfair_lock_unlock(v57);
    v58 = type metadata accessor for TaskPriority(0);
    v59 = *(_QWORD *)(v58 - 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v59 + 56))(v13, 1, 1, v58);
    v60 = v94;
    v37(v94, (unint64_t)v21, v17);
    v61 = *(unsigned __int8 *)(v18 + 80);
    v62 = (v61 + 40) & ~v61;
    v63 = (_QWORD *)swift_allocObject(&unk_101292880, v62 + v93, v61 | 7);
    v63[2] = 0;
    v64 = v63 + 2;
    v63[3] = 0;
    v63[4] = v41;
    v65 = v60;
    v13 = v98;
    v38((char *)v63 + v62, v65, v17);
    LODWORD(v62) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v59 + 48))(v13, 1, v58);
    v66 = swift_retain(v41);
    if ((_DWORD)v62 == 1)
    {
      sub_1004CB800((uint64_t)v13, &qword_1013E01F0);
      v67 = 0;
      v68 = *v64;
      if (*v64)
        goto LABEL_32;
    }
    else
    {
      v74 = TaskPriority.rawValue.getter(v66);
      (*(void (**)(char *, uint64_t))(v59 + 8))(v13, v58);
      v67 = v74;
      v68 = *v64;
      if (*v64)
      {
LABEL_32:
        v69 = v63[3];
        ObjectType = swift_getObjectType(v68);
        swift_unknownObjectRetain(v68);
        v71 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v69);
        v73 = v72;
        swift_unknownObjectRelease(v68);
        goto LABEL_35;
      }
    }
    v71 = 0;
    v73 = 0;
LABEL_35:
    v75 = swift_allocObject(&unk_1012928A8, 32, 7);
    *(_QWORD *)(v75 + 16) = &unk_101405408;
    *(_QWORD *)(v75 + 24) = v63;
    if (v73 | v71)
    {
      v101[0] = 0;
      v101[1] = 0;
      v29 = v101;
      v101[2] = v71;
      v101[3] = v73;
    }
    else
    {
      v29 = 0;
    }
    v16 = v89;
    v21 = v96;
    v26 = v100;
    v30 = swift_task_create(v67 | 0x1C00, v29, v90, &unk_1013FE730);
    swift_release(v41);
    v31 = swift_release(v30);
    (*(void (**)(char *, uint64_t, __n128))(v18 + 8))(v21, v17, v31);
    a5 = v92;
    v28 = v99;
  }
  v36 = v34 + 3;
  if (v36 >= v87)
  {
LABEL_39:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v16, 1, 1, v17);
LABEL_40:
    swift_release(a5);
    return;
  }
  v35 = *(_QWORD *)(v86 + 8 * v36);
  if (v35)
  {
    v28 = v36;
    goto LABEL_22;
  }
  while (1)
  {
    v28 = v36 + 1;
    if (__OFADD__(v36, 1))
      break;
    if (v28 >= v87)
      goto LABEL_39;
    v35 = *(_QWORD *)(v86 + 8 * v28);
    ++v36;
    if (v35)
      goto LABEL_22;
  }
LABEL_44:
  __break(1u);
}

void sub_100A88B38(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  void (*v16)(_QWORD);
  id v17;
  void (**v18)(char *, uint64_t, uint64_t, __n128);
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  Swift::String v42;
  Swift::String v43;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __n128 v53;
  void (**v54)(char *, uint64_t, uint64_t, __n128);
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  void (*v60)(char *, uint64_t, uint64_t, __n128);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  void (*v68)(char *, uint64_t, uint64_t, __n128);
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  id v80;
  uint64_t v81;
  sqlite3_stmt **v82;
  sqlite3_stmt *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  void (*v88)(_QWORD *, _QWORD, uint64_t);
  uint64_t v89;
  void *v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  unint64_t v95;
  void *v96;
  id v97;
  uint64_t v98;
  uint64_t *v99;
  unint64_t v100;
  void *v101;
  id v102;
  uint64_t v103;
  uint64_t *v104;
  unint64_t v105;
  void *v106;
  id v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  id v112;
  int v113;
  void *v114;
  id v115;
  int v116;
  Swift::String v117;
  void *object;
  void *v119;
  __n128 v120;
  void *v121;
  id v122;
  uint64_t v123;
  int v124;
  const char *v125;
  const char *v126;
  Swift::String v127;
  void *v128;
  Swift::String v129;
  void *v130;
  uint64_t countAndFlagsBits;
  uint64_t v132;
  void *v133;
  void *v134;
  Swift::String v135;
  void *v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  __n128 v141;
  void *v142;
  id v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  void (**v148)(char *, uint64_t, uint64_t, __n128);
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void (*v152)(_QWORD *, _QWORD, uint64_t);
  unsigned int v153;
  uint64_t v154;
  int v155;
  Swift::String v156;
  unint64_t v157;
  unint64_t v158;
  Swift::String v159;
  _BYTE v160[24];
  char v161[24];
  uint64_t v162;
  unint64_t v163;
  char v164[32];

  v4 = sub_1004B804C((uint64_t *)&unk_1013E1A50);
  __chkstk_darwin(v4);
  v149 = (uint64_t)&v144 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v150 = type metadata accessor for UUID(0);
  v148 = *(void (***)(char *, uint64_t, uint64_t, __n128))(v150 - 8);
  v6 = __chkstk_darwin(v150);
  v8 = (char *)&v144 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v144 - v9;
  v11 = type metadata accessor for DispatchPredicate(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (uint64_t *)((char *)&v144 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v154 = v1;
  v15 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v14 = v15;
  v16 = *(void (**)(_QWORD))(v12 + 104);
  v153 = enum case for DispatchPredicate.onQueue(_:);
  v152 = (void (*)(_QWORD *, _QWORD, uint64_t))v16;
  v16(v14);
  v17 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)(v14);
  v18 = *(void (***)(char *, uint64_t, uint64_t, __n128))(v12 + 8);
  v151 = v11;
  ((void (*)(_QWORD *, uint64_t))v18)(v14, v11);
  if ((v15 & 1) == 0)
  {
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  v147 = v8;
  v146 = OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_itemTypeValue;
  if (*(_QWORD *)(a1 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_itemTypeValue) == 11)
  {
    sub_100757E04(&_mh_execute_header, (uint64_t)"_insertBoardItemDatabaseRow(_:)", 31, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2, 3207, "Attempted to save FreehandDrawingShapeItem (BoardItem_11) to SQL.", 65, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"_insertBoardItemDatabaseRow(_:)", 31, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2u, 3207, (uint64_t)"Attempted to save FreehandDrawingShapeItem (BoardItem_11) to SQL.", 65, 2u);
    objc_msgSend((id)objc_opt_self(CRLAssertionHandler), "logFullBacktrace");
  }
  v162 = 0;
  v163 = 0xE000000000000000;
  _StringGuts.grow(_:)(115);
  v19._countAndFlagsBits = 0x4920545245534E49;
  v19._object = (void *)0xEC000000204F544ELL;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 0x74695F6472616F62;
  v20._object = (void *)0xEB00000000736D65;
  String.append(_:)(v20);
  v21._countAndFlagsBits = 10272;
  v21._object = (void *)0xE200000000000000;
  String.append(_:)(v21);
  v22._object = (void *)0xE900000000000064;
  v22._countAndFlagsBits = 0x6975755F6D657469;
  String.append(_:)(v22);
  v23._countAndFlagsBits = 8236;
  v23._object = (void *)0xE200000000000000;
  String.append(_:)(v23);
  v24._countAndFlagsBits = 0x755F746E65726170;
  v24._object = (void *)0xEB00000000646975;
  String.append(_:)(v24);
  v25._countAndFlagsBits = 8236;
  v25._object = (void *)0xE200000000000000;
  String.append(_:)(v25);
  v26._object = (void *)0x8000000100FD6350;
  v26._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v26);
  v27._countAndFlagsBits = 8236;
  v27._object = (void *)0xE200000000000000;
  String.append(_:)(v27);
  v28._object = (void *)0xE900000000000065;
  v28._countAndFlagsBits = 0x7079745F6D657469;
  String.append(_:)(v28);
  v29._countAndFlagsBits = 8236;
  v29._object = (void *)0xE200000000000000;
  String.append(_:)(v29);
  v30._countAndFlagsBits = 0x645F6E6F6D6D6F63;
  v30._object = (void *)0xEB00000000617461;
  String.append(_:)(v30);
  v31._countAndFlagsBits = 8236;
  v31._object = (void *)0xE200000000000000;
  String.append(_:)(v31);
  v32._countAndFlagsBits = 0x6369666963657073;
  v32._object = (void *)0xED0000617461645FLL;
  String.append(_:)(v32);
  v33._countAndFlagsBits = 8236;
  v33._object = (void *)0xE200000000000000;
  String.append(_:)(v33);
  v34._countAndFlagsBits = 0x6E6F7473626D6F74;
  v34._object = (void *)0xEA00000000006465;
  String.append(_:)(v34);
  v35._countAndFlagsBits = 8236;
  v35._object = (void *)0xE200000000000000;
  String.append(_:)(v35);
  v36._object = (void *)0x8000000100FEEB40;
  v36._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v36);
  v37._countAndFlagsBits = 8236;
  v37._object = (void *)0xE200000000000000;
  String.append(_:)(v37);
  v38._countAndFlagsBits = 0x7461645F636E7973;
  v38._object = (void *)0xE900000000000061;
  String.append(_:)(v38);
  v39._countAndFlagsBits = 8236;
  v39._object = (void *)0xE200000000000000;
  String.append(_:)(v39);
  v40._countAndFlagsBits = 0xD000000000000014;
  v40._object = (void *)0x8000000100FEEDE0;
  String.append(_:)(v40);
  v41._countAndFlagsBits = 8236;
  v41._object = (void *)0xE200000000000000;
  String.append(_:)(v41);
  v42._countAndFlagsBits = 0x6F5F7463656A626FLL;
  v42._object = (void *)0xEE00736E6F697470;
  String.append(_:)(v42);
  v43._countAndFlagsBits = 8236;
  v43._object = (void *)0xE200000000000000;
  String.append(_:)(v43);
  v44._countAndFlagsBits = 0xD00000000000002DLL;
  v44._object = (void *)0x8000000100FEEFF0;
  String.append(_:)(v44);
  v45._countAndFlagsBits = 8236;
  v45._object = (void *)0xE200000000000000;
  String.append(_:)(v45);
  v46._countAndFlagsBits = 0xD000000000000026;
  v46._object = (void *)0x8000000100FEEB60;
  String.append(_:)(v46);
  v47._countAndFlagsBits = 0xD000000000000031;
  v47._object = (void *)0x8000000100FF0630;
  String.append(_:)(v47);
  v48 = v162;
  v49 = v163;
  v50 = *(_QWORD *)(v154 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v51 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v51, v164);
  swift_retain(v50);
  v154 = sub_1006B77CC(v52, v48, v49);
  v145 = v50;
  v53 = swift_release(v50);
  if (!v2)
  {
    v144 = 0;
    v54 = v148;
    v55 = v150;
    v148[2](v10, a1 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_itemUUID, v150, v53);
    v56 = UUID.crl_data()();
    v57 = v10;
    v59 = v58;
    sub_1006B5E80(v56, v58);
    sub_1004BBBC8(v56, v59);
    v60 = v54[1];
    ((void (*)(char *, uint64_t))v60)(v57, v55);
    v61 = a1 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_parentContainerUUID;
    swift_beginAccess(a1 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_parentContainerUUID, &v162, 0, 0);
    v62 = v61;
    v63 = v149;
    sub_1004CB7BC(v62, v149, (uint64_t *)&unk_1013E1A50);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v54[6])(v63, 1, v55) == 1)
    {
      sub_1004CB800(v63, (uint64_t *)&unk_1013E1A50);
      v64 = *(void **)(*(_QWORD *)(v154 + 16) + 32);
      *v14 = v64;
      v65 = v151;
      v152(v14, v153, v151);
      v66 = v64;
      LOBYTE(v64) = _dispatchPreconditionTest(_:)(v14);
      ((void (*)(_QWORD *, uint64_t))v18)(v14, v65);
      if ((v64 & 1) == 0)
      {
LABEL_43:
        __break(1u);
        goto LABEL_44;
      }
      v67 = v154;
      swift_beginAccess(v154 + 24, v161, 0, 0);
      sqlite3_bind_null(*(sqlite3_stmt **)(v67 + 24), 2);
    }
    else
    {
      v68 = v54[4];
      v148 = v18;
      v69 = v147;
      ((void (*)(char *, uint64_t, uint64_t))v68)(v147, v63, v55);
      v70 = UUID.crl_data()();
      v71 = v55;
      v72 = a1;
      v74 = v73;
      sub_1006B5E80(v70, v73);
      v75 = v74;
      a1 = v72;
      sub_1004BBBC8(v70, v75);
      v18 = v148;
      ((void (*)(char *, uint64_t))v60)(v69, v71);
      v65 = v151;
    }
    v76 = v144;
    v77 = sub_10067BA88();
    if (v76)
    {
      v79 = *(void **)(*(_QWORD *)(v154 + 16) + 32);
      *v14 = v79;
      v152(v14, v153, v65);
      v80 = v79;
      LOBYTE(v79) = _dispatchPreconditionTest(_:)(v14);
      ((void (*)(_QWORD *, uint64_t))v18)(v14, v65);
      if ((v79 & 1) != 0)
      {
        v81 = v154;
        v82 = (sqlite3_stmt **)(v154 + 24);
        swift_beginAccess(v154 + 24, v160, 1, 0);
        v83 = *(sqlite3_stmt **)(v81 + 24);
        if (!v83)
        {
LABEL_13:
          swift_release(v154);
          return;
        }
LABEL_12:
        sqlite3_finalize(v83);
        *v82 = 0;
        goto LABEL_13;
      }
      goto LABEL_42;
    }
    v84 = a1;
    v85 = v77;
    v86 = v78;
    v144 = 0;
    sub_1006B5E80(v77, v78);
    sub_1004BBBC8(v85, v86);
    v87 = *(_QWORD *)(v84 + v146);
    if (v87 < (uint64_t)0xFFFFFFFF80000000)
    {
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    v88 = v152;
    if (v87 > 0x7FFFFFFF)
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    v89 = v84;
    v90 = *(void **)(*(_QWORD *)(v154 + 16) + 32);
    *v14 = v90;
    v88(v14, v153, v65);
    v91 = v90;
    LOBYTE(v90) = _dispatchPreconditionTest(_:)(v14);
    v148 = v18;
    ((void (*)(_QWORD *, uint64_t))v18)(v14, v65);
    if ((v90 & 1) == 0)
    {
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    v92 = v154;
    v82 = (sqlite3_stmt **)(v154 + 24);
    swift_beginAccess(v154 + 24, v160, 1, 0);
    sqlite3_bind_int(*(sqlite3_stmt **)(v92 + 24), 4, v87);
    v93 = v89;
    v94 = (uint64_t *)(v89 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_commonData);
    v95 = *(_QWORD *)(v89 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_commonData + 8);
    if (v95 >> 60 == 15)
    {
      v96 = *(void **)(*(_QWORD *)(v154 + 16) + 32);
      *v14 = v96;
      v88(v14, v153, v65);
      v97 = v96;
      LOBYTE(v96) = _dispatchPreconditionTest(_:)(v14);
      ((void (*)(_QWORD *, uint64_t))v148)(v14, v65);
      if ((v96 & 1) == 0)
      {
LABEL_48:
        __break(1u);
        goto LABEL_49;
      }
      sqlite3_bind_null(*v82, 5);
    }
    else
    {
      v98 = *v94;
      sub_1004BE310(*v94, v95);
      sub_1006B5E80(v98, v95);
      sub_1004BE2FC(v98, v95);
    }
    v99 = (uint64_t *)(v93 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_specificData);
    v100 = *(_QWORD *)(v93 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_specificData + 8);
    if (v100 >> 60 == 15)
    {
      v101 = *(void **)(*(_QWORD *)(v154 + 16) + 32);
      *v14 = v101;
      v88(v14, v153, v65);
      v102 = v101;
      LOBYTE(v101) = _dispatchPreconditionTest(_:)(v14);
      ((void (*)(_QWORD *, uint64_t))v148)(v14, v65);
      if ((v101 & 1) == 0)
      {
LABEL_49:
        __break(1u);
        goto LABEL_50;
      }
      sqlite3_bind_null(*v82, 6);
    }
    else
    {
      v103 = *v99;
      sub_1004BE310(*v99, *(_QWORD *)(v93 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_specificData + 8));
      sub_1006B5E80(v103, v100);
      sub_1004BE2FC(v103, v100);
    }
    sub_1006B59FC(*(_BYTE *)(v93 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_isLocalTombstone), 7);
    sub_1006B5B50(*(_QWORD *)(v93 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_unsyncedChanges), 8);
    v104 = (uint64_t *)(v93 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_syncData);
    v105 = *(_QWORD *)(v93 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_syncData + 8);
    if (v105 >> 60 == 15)
    {
      v106 = *(void **)(*(_QWORD *)(v154 + 16) + 32);
      *v14 = v106;
      v88(v14, v153, v65);
      v107 = v106;
      LOBYTE(v106) = _dispatchPreconditionTest(_:)(v14);
      ((void (*)(_QWORD *, uint64_t))v148)(v14, v65);
      if ((v106 & 1) == 0)
      {
LABEL_50:
        __break(1u);
        goto LABEL_51;
      }
      sqlite3_bind_null(*v82, 9);
    }
    else
    {
      v108 = *v104;
      sub_1004BE310(*v104, *(_QWORD *)(v93 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_syncData + 8));
      sub_1006B5E80(v108, v105);
      sub_1004BE2FC(v108, v105);
    }
    v109 = v93 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_minRequiredVersions;
    v110 = v154;
    sub_1006B5B50(*(_QWORD *)(v93 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_minRequiredVersions), 10);
    sub_1006B5B50(*(_QWORD *)(v93 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_objectOptions), 11);
    sub_1006B5B50(*(_QWORD *)(v109 + 8), 12);
    sub_1006B5B50(*(_QWORD *)(v109 + 16), 13);
    v111 = *(void **)(*(_QWORD *)(v110 + 16) + 32);
    *v14 = v111;
    v88(v14, v153, v65);
    v112 = v111;
    LOBYTE(v111) = _dispatchPreconditionTest(_:)(v14);
    ((void (*)(_QWORD *, uint64_t))v148)(v14, v65);
    if ((v111 & 1) == 0)
    {
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    v113 = sqlite3_step(*v82);
    if (v113 == 101)
    {
      v114 = *(void **)(*(_QWORD *)(v154 + 16) + 32);
      *v14 = v114;
      v88(v14, v153, v65);
      v115 = v114;
      LOBYTE(v114) = _dispatchPreconditionTest(_:)(v14);
      v113 = ((uint64_t (*)(_QWORD *, uint64_t))v148)(v14, v65);
      if ((v114 & 1) != 0)
        goto LABEL_39;
      __break(1u);
    }
    v116 = v113;
    v157 = 0xD00000000000001BLL;
    v158 = 0x8000000100FF0670;
    if (sqlite3_errstr(v113))
    {
      v117._countAndFlagsBits = ((uint64_t (*)(void))String.init(cString:))();
      object = v117._object;
      v159._countAndFlagsBits = 8250;
      v159._object = (void *)0xE200000000000000;
      String.append(_:)(v117);
      swift_bridgeObjectRelease(object);
      v119 = v159._object;
      String.append(_:)(v159);
      v120 = swift_bridgeObjectRelease(v119);
      v121 = *(void **)(v145 + 32);
      *v14 = v121;
      ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v152)(v14, v153, v65, v120);
      v122 = v121;
      LOBYTE(v121) = _dispatchPreconditionTest(_:)(v14);
      ((void (*)(_QWORD *, uint64_t))v148)(v14, v65);
      if ((v121 & 1) == 0)
        goto LABEL_52;
      v123 = v145;
      swift_beginAccess(v145 + 16, &v159, 0, 0);
      v124 = sqlite3_extended_errcode(*(sqlite3 **)(v123 + 16));
      v125 = sqlite3_errstr(v124);
      if (v125)
      {
        v126 = v125;
        v156._countAndFlagsBits = 11552;
        v156._object = (void *)0xE200000000000000;
        v155 = v124;
        v127._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
        v128 = v127._object;
        String.append(_:)(v127);
        swift_bridgeObjectRelease(v128);
        v129._countAndFlagsBits = 8237;
        v129._object = (void *)0xE200000000000000;
        String.append(_:)(v129);
        countAndFlagsBits = v156._countAndFlagsBits;
        v130 = v156._object;
        v132 = String.init(cString:)(v126);
        v134 = v133;
        v156._countAndFlagsBits = countAndFlagsBits;
        v156._object = v130;
        swift_bridgeObjectRetain(v130);
        v135._countAndFlagsBits = v132;
        v135._object = v134;
        String.append(_:)(v135);
        swift_bridgeObjectRelease(v130);
        swift_bridgeObjectRelease(v134);
        v136 = v156._object;
        String.append(_:)(v156);
        swift_bridgeObjectRelease(v136);
      }
    }
    v137 = v157;
    v138 = v158;
    v139 = sub_1006B79EC();
    swift_allocError(&type metadata for SQLiteError, v139, 0, 0);
    *(_DWORD *)v140 = v116;
    *(_QWORD *)(v140 + 8) = v137;
    *(_QWORD *)(v140 + 16) = v138;
    swift_willThrow(v141);
    v142 = *(void **)(*(_QWORD *)(v154 + 16) + 32);
    *v14 = v142;
    v152(v14, v153, v65);
    v143 = v142;
    LOBYTE(v142) = _dispatchPreconditionTest(_:)(v14);
    ((void (*)(_QWORD *, uint64_t))v148)(v14, v65);
    if ((v142 & 1) == 0)
    {
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
    }
LABEL_39:
    v83 = *v82;
    if (!*v82)
      goto LABEL_13;
    goto LABEL_12;
  }
}

uint64_t sub_100A89A08(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  id v12;
  uint64_t result;
  uint64_t v14;
  _BYTE v15[16];
  void *v16;
  void *v17;

  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = &v15[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = *(void **)(v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v10 = v11;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v10);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v8 + 8))(v10, v7);
  if ((v11 & 1) != 0)
  {
    v16 = &_swiftEmptyDictionarySingleton;
    v17 = &_swiftEmptyDictionarySingleton;
    __chkstk_darwin(result);
    *(_QWORD *)&v15[-32] = a1;
    *(_QWORD *)&v15[-24] = &v17;
    v15[-16] = a3 & 1;
    *(_QWORD *)&v15[-8] = &v16;
    sub_100B4AF14(a2, (void (*)(uint64_t, uint64_t, uint64_t, __n128))sub_100AFF294);
    __chkstk_darwin(v14);
    *(_QWORD *)&v15[-16] = a2;
    *(_QWORD *)&v15[-8] = &v16;
    sub_100B4AF14(a1, (void (*)(uint64_t, uint64_t, uint64_t, __n128))sub_100AFF2A4);
    return (uint64_t)v17;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100A89B70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  uint64_t *v47;
  uint64_t v48;
  char *v50;
  uint64_t v51;
  char v52;
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int (*v58)(char *, uint64_t, uint64_t);
  void (*v59)(char *, char *, uint64_t);
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  void (*v65)(uint64_t, char *, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char v70;
  void (*v71)(char *, uint64_t);
  id v72;
  __n128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  __n128 v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(char *, uint64_t, __n128);
  uint64_t v87;
  void (*v88)(char *, uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107[32];

  v96 = a7;
  v95 = a6;
  v100 = a5;
  v105 = a3;
  v97 = sub_1004B804C((uint64_t *)&unk_1013F62D0);
  __chkstk_darwin(v97);
  v98 = (char *)&v87 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v103 = (char *)&v87 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v94 = (char *)&v87 - v16;
  v17 = __chkstk_darwin(v15);
  v93 = (char *)&v87 - v18;
  __chkstk_darwin(v17);
  v99 = (char *)&v87 - v19;
  v20 = sub_1004B804C(&qword_1014053E0);
  __chkstk_darwin(v20);
  v22 = (char *)&v87 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_1004B804C((uint64_t *)&unk_1013E1A50);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = __chkstk_darwin(v23);
  v27 = (char *)&v87 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v25);
  v29 = __chkstk_darwin(v28);
  v101 = (uint64_t)&v87 - v30;
  v31 = __chkstk_darwin(v29);
  v32 = __chkstk_darwin(v31);
  v33 = __chkstk_darwin(v32);
  v35 = (char *)&v87 - v34;
  __chkstk_darwin(v33);
  v102 = (uint64_t)&v87 - v39;
  v40 = *(_QWORD *)(a4 + 16);
  v106 = a2;
  v104 = a1;
  if (!v40)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 56))(v22, 1, 1, v23);
    v44 = v12;
    v45 = v105;
LABEL_7:
    v47 = &qword_1014053E0;
    v48 = (uint64_t)v22;
    goto LABEL_8;
  }
  v91 = v36;
  v92 = v38;
  v90 = v37;
  swift_bridgeObjectRetain(a2);
  v41 = sub_100842E98(a1, a2);
  if ((v42 & 1) != 0)
  {
    sub_1004CB7BC(*(_QWORD *)(a4 + 56) + *(_QWORD *)(v24 + 72) * v41, (uint64_t)v22, (uint64_t *)&unk_1013E1A50);
    v43 = 0;
  }
  else
  {
    v43 = 1;
  }
  v44 = v12;
  v45 = v105;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 56))(v22, v43, 1, v23);
  v46 = swift_bridgeObjectRelease(v106);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v24 + 48))(v22, 1, v23, v46) == 1)
    goto LABEL_7;
  v57 = v102;
  sub_1004C4938((uint64_t)v22, v102, (uint64_t *)&unk_1013E1A50);
  sub_1004CB7BC(v57, (uint64_t)v35, (uint64_t *)&unk_1013E1A50);
  v58 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v58(v35, 1, v11) == 1)
  {
    sub_1004CB800(v57, (uint64_t *)&unk_1013E1A50);
    v48 = (uint64_t)v35;
    v47 = (uint64_t *)&unk_1013E1A50;
    goto LABEL_8;
  }
  v59 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v60 = v99;
  v59(v99, v35, v11);
  if (qword_1013DDE28 != -1)
    swift_once(&qword_1013DDE28, sub_100C88730);
  v61 = sub_1004F2A1C(v11, (uint64_t)qword_101481278);
  v62 = sub_1004B7878((unint64_t *)&qword_1013E4880, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v89 = v61;
  v105 = v62;
  v63 = dispatch thunk of static Equatable.== infix(_:_:)(v60, v61);
  v64 = (uint64_t)v98;
  if ((v63 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v44 + 8))(v60, v11);
    v47 = (uint64_t *)&unk_1013E1A50;
    v48 = v57;
LABEL_8:
    sub_1004CB800(v48, v47);
    sub_1004CB7BC(v45, (uint64_t)v27, (uint64_t *)&unk_1013E1A50);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v27, 1, v11) == 1)
      return sub_1004CB800((uint64_t)v27, (uint64_t *)&unk_1013E1A50);
    v50 = v103;
    (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v103, v27, v11);
    if (qword_1013DDE28 != -1)
      swift_once(&qword_1013DDE28, sub_100C88730);
    v51 = sub_1004F2A1C(v11, (uint64_t)qword_101481278);
    sub_1004B7878((unint64_t *)&qword_1013E4880, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v52 = dispatch thunk of static Equatable.== infix(_:_:)(v50, v51);
    v54 = v106;
    v55 = v104;
    if ((v52 & 1) == 0)
    {
      v56 = v101;
      (*(void (**)(uint64_t, char *, uint64_t))(v44 + 16))(v101, v50, v11);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v44 + 56))(v56, 0, 1, v11);
      swift_bridgeObjectRetain(v54);
      v53.n128_f64[0] = sub_10083EC74(v56, v55, v54);
    }
    return (*(uint64_t (**)(char *, uint64_t, __n128))(v44 + 8))(v50, v11, v53);
  }
  v88 = (void (*)(char *, uint64_t, uint64_t))v59;
  v65 = *(void (**)(uint64_t, char *, uint64_t))(v44 + 16);
  v66 = v92;
  v65(v92, v60, v11);
  v103 = *(char **)(v44 + 56);
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v103)(v66, 0, 1, v11);
  v67 = v64 + *(int *)(v97 + 48);
  sub_1004CB7BC(v66, v64, (uint64_t *)&unk_1013E1A50);
  sub_1004CB7BC(v45, v67, (uint64_t *)&unk_1013E1A50);
  if (v58((char *)v64, 1, v11) == 1)
  {
    sub_1004CB800(v66, (uint64_t *)&unk_1013E1A50);
    if (v58((char *)v67, 1, v11) == 1)
    {
      sub_1004CB800(v64, (uint64_t *)&unk_1013E1A50);
      goto LABEL_28;
    }
    goto LABEL_26;
  }
  v68 = v90;
  sub_1004CB7BC(v64, v90, (uint64_t *)&unk_1013E1A50);
  if (v58((char *)v67, 1, v11) == 1)
  {
    sub_1004CB800(v92, (uint64_t *)&unk_1013E1A50);
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v68, v11);
LABEL_26:
    sub_1004CB800(v64, (uint64_t *)&unk_1013F62D0);
LABEL_32:
    v78 = v101;
    v65(v101, v60, v11);
    v79 = v103;
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v103)(v78, 0, 1, v11);
    v80 = v106;
    swift_bridgeObjectRetain(v106);
    sub_10083EC74(v78, v104, v80);
    v81 = v91;
    sub_1004CB7BC(v45, v91, (uint64_t *)&unk_1013E1A50);
    if (v58((char *)v81, 1, v11) == 1)
    {
      (*(void (**)(char *, uint64_t))(v44 + 8))(v60, v11);
      sub_1004CB800(v102, (uint64_t *)&unk_1013E1A50);
      return sub_1004CB800(v81, (uint64_t *)&unk_1013E1A50);
    }
    v82 = v94;
    v88(v94, v81, v11);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(v82, v89) & 1) == 0)
    {
      v84 = v101;
      v65(v101, v82, v11);
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v79)(v84, 0, 1, v11);
      v85 = v106;
      swift_bridgeObjectRetain(v106);
      v83.n128_f64[0] = sub_10083EC74(v84, v104, v85);
    }
    v86 = *(void (**)(char *, uint64_t, __n128))(v44 + 8);
    v86(v82, v11, v83);
    ((void (*)(char *, uint64_t))v86)(v60, v11);
    return sub_1004CB800(v102, (uint64_t *)&unk_1013E1A50);
  }
  v69 = v93;
  v88(v93, v67, v11);
  v70 = dispatch thunk of static Equatable.== infix(_:_:)(v68, v69);
  v71 = *(void (**)(char *, uint64_t))(v44 + 8);
  v71(v69, v11);
  sub_1004CB800(v92, (uint64_t *)&unk_1013E1A50);
  v71((char *)v68, v11);
  v60 = v99;
  sub_1004CB800(v64, (uint64_t *)&unk_1013E1A50);
  if ((v70 & 1) == 0)
    goto LABEL_32;
LABEL_28:
  if ((v95 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v44 + 8))(v60, v11);
    return sub_1004CB800(v102, (uint64_t *)&unk_1013E1A50);
  }
  if (qword_1013DD858 != -1)
    swift_once(&qword_1013DD858, sub_100A05554);
  swift_beginAccess(&static OS_os_log.boardStore, v107, 0, 0);
  v72 = (id)static OS_os_log.boardStore;
  v74 = static os_log_type_t.default.getter(v73);
  sub_100A06EBC((uint64_t)v72, &_mh_execute_header, v74, "Should deleteAllExistingReferencesFirst, so we need to add the newAssetUUID back into insert if it equals oldAssetUUID", 118, 2, (uint64_t)_swiftEmptyArrayStorage);

  v75 = v101;
  sub_1004CB7BC(v45, v101, (uint64_t *)&unk_1013E1A50);
  v76 = v106;
  swift_bridgeObjectRetain(v106);
  v77 = sub_10083EC74(v75, v104, v76);
  (*(void (**)(char *, uint64_t, double))(v44 + 8))(v60, v11, v77);
  return sub_1004CB800(v102, (uint64_t *)&unk_1013E1A50);
}

uint64_t sub_100A8A4E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v28 = a5;
  v29 = a2;
  v30 = a4;
  v31 = a1;
  v6 = sub_1004B804C(&qword_1014053E0);
  __chkstk_darwin(v6);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1004B804C((uint64_t *)&unk_1013E1A50);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v28 - v14;
  v16 = type metadata accessor for UUID(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1004CB7BC(a3, (uint64_t)v15, (uint64_t *)&unk_1013E1A50);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
    return sub_1004CB800((uint64_t)v15, (uint64_t *)&unk_1013E1A50);
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v19, v15, v16);
  if (qword_1013DDE28 != -1)
    swift_once(&qword_1013DDE28, sub_100C88730);
  v21 = sub_1004F2A1C(v16, (uint64_t)qword_101481278);
  sub_1004B7878((unint64_t *)&qword_1013E4880, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  if ((dispatch thunk of static Equatable.== infix(_:_:)(v19, v21) & 1) == 0)
  {
    v22 = v30;
    if (*(_QWORD *)(v30 + 16))
    {
      v23 = v29;
      swift_bridgeObjectRetain(v29);
      v24 = sub_100842E98(v31, v23);
      if ((v25 & 1) != 0)
      {
        sub_1004CB7BC(*(_QWORD *)(v22 + 56) + *(_QWORD *)(v10 + 72) * v24, (uint64_t)v8, (uint64_t *)&unk_1013E1A50);
        v26 = 0;
      }
      else
      {
        v26 = 1;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, v26, 1, v9);
      v27 = swift_bridgeObjectRelease(v23);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v10 + 48))(v8, 1, v9, v27) != 1)
      {
        sub_1004CB800((uint64_t)v8, &qword_1014053E0);
        return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v16);
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
      v23 = v29;
    }
    sub_1004CB800((uint64_t)v8, &qword_1014053E0);
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v13, v19, v16);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v13, 0, 1, v16);
    swift_bridgeObjectRetain(v23);
    sub_10083EC74((uint64_t)v13, v31, v23);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v16);
}

double sub_100A8A7E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void (*v15)(_QWORD);
  id v16;
  uint64_t v17;
  void (*v18)(_QWORD, _QWORD, _QWORD);
  unint64_t v19;
  double result;
  uint64_t v21;
  _QWORD *v22;
  uint64_t i;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  _QWORD *v43;
  id v44;
  void (*v45)(uint64_t, uint64_t);
  sqlite3_stmt **v46;
  int v47;
  uint64_t v48;
  int v49;
  Swift::String v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  __n128 v56;
  void *v57;
  id v58;
  __n128 v59;
  void *v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, uint64_t);
  _QWORD *v67;
  unsigned int v68;
  void (*v69)(_QWORD *, _QWORD, uint64_t);
  uint64_t v70;
  void (*v71)(_QWORD, _QWORD, _QWORD);
  uint64_t v72;
  unint64_t v73;
  _QWORD *v74;
  unint64_t v75;
  char v76[32];

  v70 = a1;
  v2 = v1;
  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v62 - v8;
  v10 = type metadata accessor for DispatchPredicate(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (uint64_t)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *(_QWORD *)v13 = v14;
  v15 = *(void (**)(_QWORD))(v11 + 104);
  v68 = enum case for DispatchPredicate.onQueue(_:);
  v69 = (void (*)(_QWORD *, _QWORD, uint64_t))v15;
  v15(v13);
  v16 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)(v13);
  v66 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v67 = (_QWORD *)v13;
  v17 = v10;
  v66(v13, v10);
  if ((v14 & 1) == 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  v18 = v71;
  v19 = sub_100ABB038();
  v10 = (uint64_t)v18;
  if (v18)
    return result;
  v13 = v19;
  v65 = v2;
  if (v19 >> 62)
  {
LABEL_18:
    if (v13 < 0)
      v30 = v13;
    else
      v30 = v13 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v13);
    v21 = _CocoaArrayWrapper.endIndex.getter(v30);
    swift_bridgeObjectRelease(v13);
    if (v21)
      goto LABEL_5;
LABEL_22:
    swift_bridgeObjectRelease(v13);
    v22 = _swiftEmptyArrayStorage;
    goto LABEL_23;
  }
  v21 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v21)
    goto LABEL_22;
LABEL_5:
  v74 = _swiftEmptyArrayStorage;
  sub_100600724(0, v21 & ~(v21 >> 63), 0);
  if (v21 < 0)
  {
    __break(1u);
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v63 = v17;
  v64 = v10;
  v22 = v74;
  if ((v13 & 0xC000000000000001) != 0)
  {
    for (i = 0; i != v21; ++i)
    {
      v24 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v13);
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v9, v24 + OBJC_IVAR____TtC8Freeform28CRLAssetReferenceDatabaseRow_assetUUID, v3);
      swift_unknownObjectRelease(v24);
      v74 = v22;
      v26 = v22[2];
      v25 = v22[3];
      if (v26 >= v25 >> 1)
      {
        sub_100600724(v25 > 1, v26 + 1, 1);
        v22 = v74;
      }
      v22[2] = v26 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))((unint64_t)v22+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v26, v9, v3);
    }
  }
  else
  {
    v27 = 0;
    v71 = *(void (**)(_QWORD, _QWORD, _QWORD))(v4 + 16);
    do
    {
      v71(v7, *(_QWORD *)(v13 + 8 * v27 + 32) + OBJC_IVAR____TtC8Freeform28CRLAssetReferenceDatabaseRow_assetUUID, v3);
      v74 = v22;
      v29 = v22[2];
      v28 = v22[3];
      if (v29 >= v28 >> 1)
      {
        sub_100600724(v28 > 1, v29 + 1, 1);
        v22 = v74;
      }
      ++v27;
      v22[2] = v29 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))((unint64_t)v22+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v29, v7, v3);
    }
    while (v21 != v27);
  }
  swift_bridgeObjectRelease(v13);
  v17 = v63;
  v10 = v64;
LABEL_23:
  v31 = sub_100AF7994((uint64_t)v22);
  swift_bridgeObjectRelease(v22);
  v32 = v65;
  if (!*(_QWORD *)(v31 + 16))
  {
LABEL_26:
    *(_QWORD *)&result = swift_bridgeObjectRelease(v31).n128_u64[0];
    return result;
  }
  v74 = 0;
  v75 = 0xE000000000000000;
  _StringGuts.grow(_:)(29);
  swift_bridgeObjectRelease(v75);
  v33 = *(_QWORD *)(v32 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v34 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v34, v76);
  swift_retain(v33);
  v36 = sub_1006B77CC(v35, 0xD00000000000003CLL, 0x8000000100FF0330);
  if (v10)
  {
    swift_release(v33);
    goto LABEL_26;
  }
  v37 = v36;
  swift_release(v33);
  v38 = sub_1004BC12C();
  v40 = v38;
  v41 = v39;
  sub_1006B5E80(v38, v39);
  sub_1004BBBC8(v40, v41);
  v42 = *(void **)(*(_QWORD *)(v37 + 16) + 32);
  v43 = v67;
  *v67 = v42;
  v69(v43, v68, v17);
  v44 = v42;
  LOBYTE(v42) = _dispatchPreconditionTest(_:)(v43);
  v45 = v66;
  v66((uint64_t)v43, v17);
  if ((v42 & 1) == 0)
    goto LABEL_40;
  v46 = (sqlite3_stmt **)(v37 + 24);
  swift_beginAccess(v37 + 24, &v74, 1, 0);
  v47 = sqlite3_step(*(sqlite3_stmt **)(v37 + 24));
  if (v47 == 101)
  {
    sub_100ABA65C(v31);
    v48 = v31;
    goto LABEL_36;
  }
  v49 = v47;
  swift_bridgeObjectRelease(v31);
  v72 = 0;
  v73 = 0xE000000000000000;
  _StringGuts.grow(_:)(53);
  v50._object = (void *)0x8000000100FF0370;
  v50._countAndFlagsBits = 0xD000000000000033;
  String.append(_:)(v50);
  v51 = type metadata accessor for CRLAssetReferrerIdentifier(0);
  _print_unlocked<A, B>(_:_:)(v70, &v72, v51, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v52 = v72;
  v53 = v73;
  v54 = sub_1006B79EC();
  swift_allocError(&type metadata for SQLiteError, v54, 0, 0);
  *(_DWORD *)v55 = v49;
  *(_QWORD *)(v55 + 8) = v52;
  *(_QWORD *)(v55 + 16) = v53;
  swift_willThrow(v56);
  v57 = *(void **)(*(_QWORD *)(v37 + 16) + 32);
  *v43 = v57;
  v69(v43, v68, v17);
  v58 = v57;
  LOBYTE(v57) = _dispatchPreconditionTest(_:)(v43);
  v48 = ((uint64_t (*)(_QWORD *, uint64_t))v45)(v43, v17);
  if ((v57 & 1) == 0)
  {
    __break(1u);
LABEL_36:
    v59 = swift_bridgeObjectRelease(v48);
    v60 = *(void **)(*(_QWORD *)(v37 + 16) + 32);
    *v43 = v60;
    ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v69)(v43, v68, v17, v59);
    v61 = v60;
    LOBYTE(v60) = _dispatchPreconditionTest(_:)(v43);
    v45((uint64_t)v43, v17);
    if ((v60 & 1) != 0)
      goto LABEL_37;
LABEL_41:
    __break(1u);
  }
LABEL_37:
  if (*v46)
  {
    sqlite3_finalize(*v46);
    *(_QWORD *)(v37 + 24) = 0;
  }
  *(_QWORD *)&result = swift_release(v37).n128_u64[0];
  return result;
}

void sub_100A8AEC4(sqlite3_stmt **a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  unsigned int v14;
  void (*v15)(_QWORD *, _QWORD, uint64_t);
  id v16;
  void (*v17)(_QWORD *, uint64_t);
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  Swift::String v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  id v40;
  __n128 v41;
  unint64_t v42;
  uint64_t v43;
  sqlite3_stmt *v44;
  uint64_t v45;
  const char *v46;
  __n128 v47;
  void *v48;
  void (*v49)(_QWORD *, _QWORD, uint64_t, __n128);
  id v50;
  uint64_t (*v51)(_QWORD *, uint64_t);
  sqlite3_stmt **v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  __n128 v57;
  void *v58;
  id v59;
  int v60;
  Swift::String v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  __n128 v67;
  void *v68;
  id v69;
  __n128 v70;
  void *v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  sqlite3_stmt **v76;
  uint64_t v77;
  void (*v78)(_QWORD *, _QWORD, uint64_t);
  void (*v79)(_QWORD *, uint64_t);
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  sqlite3_stmt **v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  _QWORD v88[3];
  unint64_t v89;
  unint64_t v90;
  char v91[32];

  v4 = v3;
  v84 = a1;
  v6 = type metadata accessor for String.Encoding(0);
  v82 = *(_QWORD *)(v6 - 8);
  v83 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchPredicate(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (uint64_t *)((char *)&v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v85 = v2;
  v13 = *(void **)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v12 = v13;
  v14 = enum case for DispatchPredicate.onQueue(_:);
  v15 = *(void (**)(_QWORD *, _QWORD, uint64_t))(v10 + 104);
  v15(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  v16 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)(v12);
  v17 = *(void (**)(_QWORD *, uint64_t))(v10 + 8);
  v17(v12, v9);
  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    __break(1u);
    goto LABEL_30;
  }
  if (a2[2])
  {
    v81 = a2[2];
    v18 = sub_100AB9A04(v84, a2);
    if (!v3)
    {
      if (!v18[2])
      {
        swift_bridgeObjectRelease(v18);
        return;
      }
      v75 = (unint64_t)v18;
      v80 = v14;
      v78 = v15;
      v79 = v17;
      v89 = 0;
      v90 = 0xE000000000000000;
      _StringGuts.grow(_:)(44);
      swift_bridgeObjectRelease(v90);
      v89 = 0xD000000000000058;
      v90 = 0x8000000100FEFFE0;
      v19 = sub_100A6AE90(63, 0xE100000000000000, v81);
      v88[0] = v19;
      v20 = sub_1004B804C((uint64_t *)&unk_1013E4970);
      v21 = sub_1004CBA30((unint64_t *)&qword_1013DFC40, (uint64_t *)&unk_1013E4970, (uint64_t)&protocol conformance descriptor for [A]);
      v22 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v20, v21);
      v24 = v23;
      swift_bridgeObjectRelease(v19);
      v25._countAndFlagsBits = v22;
      v25._object = v24;
      String.append(_:)(v25);
      swift_bridgeObjectRelease(v24);
      v26._countAndFlagsBits = 10537;
      v26._object = (void *)0xE200000000000000;
      String.append(_:)(v26);
      v27 = v89;
      v28 = v90;
      v29 = *(_QWORD *)(v85 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
      v30 = type metadata accessor for SQLiteStatement();
      swift_initStackObject(v30, v91);
      swift_retain(v29);
      v32 = sub_1006B77CC(v31, v27, v28);
      swift_release(v29);
      v33 = sub_1004BC12C();
      v35 = v34;
      v74 = 0;
      sub_1006B5E80(v33, v34);
      sub_1004BBBC8(v33, v35);
      v77 = v32;
      v76 = (sqlite3_stmt **)(v32 + 24);
      swift_beginAccess(v32 + 24, &v89, 0, 0);
      v36 = a2 + 5;
      do
      {
        v37 = *(v36 - 1);
        v38 = *v36;
        v39 = *(void **)(*(_QWORD *)(v77 + 16) + 32);
        *v12 = v39;
        v78(v12, v80, v9);
        swift_bridgeObjectRetain(v38);
        v40 = v39;
        LOBYTE(v39) = _dispatchPreconditionTest(_:)(v12);
        v79(v12, v9);
        if ((v39 & 1) == 0)
          goto LABEL_28;
        v88[0] = v37;
        v88[1] = v38;
        static String.Encoding.utf8.getter(v41);
        v42 = sub_1004D292C();
        v43 = StringProtocol.cString(using:)(v8, &type metadata for String, v42);
        (*(void (**)(char *, uint64_t))(v82 + 8))(v8, v83);
        if (v4 == 2147483646)
          goto LABEL_29;
        v44 = *v76;
        if (qword_1013DCE28 != -1)
          swift_once(&qword_1013DCE28, sub_1006B57D4);
        v45 = v4 + 1;
        v36 += 2;
        if (v43)
          v46 = (const char *)(v43 + 32);
        else
          v46 = 0;
        sqlite3_bind_text(v44, v4 + 2, v46, -1, (void (__cdecl *)(void *))qword_10147F168);
        swift_bridgeObjectRelease(v38);
        v47 = swift_bridgeObjectRelease(v43);
        ++v4;
      }
      while (v81 != v45);
      v48 = *(void **)(*(_QWORD *)(v77 + 16) + 32);
      *v12 = v48;
      v49 = (void (*)(_QWORD *, _QWORD, uint64_t, __n128))v78;
      ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v78)(v12, v80, v9, v47);
      v50 = v48;
      LOBYTE(v48) = _dispatchPreconditionTest(_:)(v12);
      v51 = (uint64_t (*)(_QWORD *, uint64_t))v79;
      v79(v12, v9);
      if ((v48 & 1) != 0)
      {
        v52 = v76;
        swift_beginAccess(v76, v88, 1, 0);
        v53 = sqlite3_step(*v52);
        v54 = v74;
        if (v53 == 101)
        {
          v55 = v75;
          sub_100ABA65C(v75);
          v56 = v55;
          if (!v54)
            goto LABEL_23;
          v57 = swift_bridgeObjectRelease(v55);
          v58 = *(void **)(*(_QWORD *)(v77 + 16) + 32);
          *v12 = v58;
          v49(v12, v80, v9, v57);
          v59 = v58;
          LOBYTE(v58) = _dispatchPreconditionTest(_:)(v12);
          v53 = v51(v12, v9);
          if ((v58 & 1) != 0)
            goto LABEL_24;
          __break(1u);
        }
        v60 = v53;
        swift_bridgeObjectRelease(v75);
        v86 = 0;
        v87 = 0xE000000000000000;
        _StringGuts.grow(_:)(43);
        v61._object = (void *)0x8000000100FF0040;
        v61._countAndFlagsBits = 0xD000000000000029;
        String.append(_:)(v61);
        v62 = type metadata accessor for CRLAssetReferrerIdentifier(0);
        _print_unlocked<A, B>(_:_:)(v84, &v86, v62, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        v63 = v86;
        v64 = v87;
        v65 = sub_1006B79EC();
        swift_allocError(&type metadata for SQLiteError, v65, 0, 0);
        *(_DWORD *)v66 = v60;
        *(_QWORD *)(v66 + 8) = v63;
        *(_QWORD *)(v66 + 16) = v64;
        swift_willThrow(v67);
        v68 = *(void **)(*(_QWORD *)(v77 + 16) + 32);
        *v12 = v68;
        ((void (*)(_QWORD *, _QWORD, uint64_t))v49)(v12, v80, v9);
        v69 = v68;
        LOBYTE(v68) = _dispatchPreconditionTest(_:)(v12);
        v56 = v51(v12, v9);
        if ((v68 & 1) != 0)
          goto LABEL_24;
        __break(1u);
LABEL_23:
        v70 = swift_bridgeObjectRelease(v56);
        v71 = *(void **)(*(_QWORD *)(v77 + 16) + 32);
        *v12 = v71;
        v49(v12, v80, v9, v70);
        v72 = v71;
        LOBYTE(v71) = _dispatchPreconditionTest(_:)(v12);
        v51(v12, v9);
        if ((v71 & 1) != 0)
        {
LABEL_24:
          if (*v76)
          {
            sqlite3_finalize(*v76);
            v73 = v77;
            *(_QWORD *)(v77 + 24) = 0;
            swift_release(v73);
          }
          else
          {
            swift_release(v77);
          }
          return;
        }
LABEL_31:
        __break(1u);
      }
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
  }
}

void sub_100A8B5F4(uint64_t a1, uint64_t a2, sqlite3_int64 a3)
{
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  void *v29;
  void (*v30)(_QWORD);
  id v31;
  void (*v32)(_QWORD *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;
  Swift::String v48;
  Swift::String v49;
  Swift::String v50;
  Swift::String v51;
  Swift::String v52;
  Swift::String v53;
  Swift::String v54;
  Swift::String v55;
  Swift::String v56;
  Swift::String v57;
  Swift::String v58;
  Swift::String v59;
  Swift::String v60;
  void *object;
  Swift::String v62;
  Swift::String v63;
  Swift::String v64;
  Swift::String v65;
  Swift::String v66;
  Swift::String v67;
  Swift::String v68;
  Swift::String v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t *v82;
  uint64_t v83;
  int v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t *v94;
  char *v95;
  uint64_t v96;
  void (*v97)(char *, char *, uint64_t);
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  id v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  id v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  _QWORD *v125;
  int v126;
  uint64_t v127;
  void *v128;
  _QWORD *v129;
  uint64_t v130;
  id v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  id v143;
  os_unfair_lock_s *v144;
  id v145;
  uint64_t v146;
  unint64_t v147;
  __n128 v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void *v155;
  uint64_t v156;
  id v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  void *v164;
  id v165;
  char *v166;
  id v167;
  void *v168;
  int v169;
  Swift::String v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  __n128 v175;
  void *v176;
  uint64_t v177;
  id v178;
  uint64_t v179;
  sqlite3_stmt **v180;
  uint64_t v181;
  uint64_t v182;
  void *v183;
  _QWORD *v184;
  id v185;
  sqlite3_stmt **v186;
  uint64_t v187;
  __n128 v188;
  uint64_t v189;
  void (*v190)(_QWORD *, _QWORD, uint64_t, __n128);
  uint64_t v191;
  void *v192;
  uint64_t v193;
  id v194;
  sqlite3_stmt **v195;
  __n128 v196;
  uint64_t v197;
  uint64_t v198;
  void *v199;
  id v200;
  uint64_t v201;
  sqlite3_stmt **v202;
  uint64_t v203;
  void (*v204)(char *, char *, uint64_t);
  _QWORD *v205;
  id v206;
  char *v207;
  sqlite3_stmt **v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  uint64_t v212;
  sqlite3_int64 v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t *v216;
  uint64_t v217;
  uint64_t *v218;
  _QWORD *v219;
  uint64_t *v220;
  _QWORD *v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int v224;
  void (*v225)(_QWORD *, _QWORD, uint64_t);
  void (*v226)(_QWORD *, uint64_t);
  uint64_t v227;
  uint64_t v228;
  char *v229;
  uint64_t v230;
  uint64_t v231;
  Swift::String v232;
  char v233[16];
  _QWORD *v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char v240[8];

  v213 = a3;
  v228 = a2;
  v230 = type metadata accessor for UUID(0);
  v223 = *(_QWORD *)(v230 - 8);
  __chkstk_darwin(v230);
  v212 = (uint64_t)&v203 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1004B804C((uint64_t *)&unk_1013E1A50);
  __chkstk_darwin(v6);
  v211 = (char *)&v203 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v217 = sub_1004B804C(&qword_101406490);
  v8 = __chkstk_darwin(v217);
  v216 = (uint64_t *)((char *)&v203 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8);
  v218 = (uint64_t *)((char *)&v203 - v10);
  v11 = sub_1004B804C(&qword_1014053C8);
  v12 = __chkstk_darwin(v11);
  v221 = (uint64_t *)((char *)&v203 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v12);
  v220 = (uint64_t *)((char *)&v203 - v14);
  v15 = type metadata accessor for CRLAssetReferrerIdentifier(0);
  v16 = __chkstk_darwin(v15);
  v214 = (uint64_t)&v203 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v19 = (char *)&v203 - v18;
  v20 = sub_1004B804C(&qword_1013E0270);
  v21 = __chkstk_darwin(v20);
  v215 = (uint64_t)&v203 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v24 = (char *)&v203 - v23;
  v25 = type metadata accessor for DispatchPredicate(0);
  v26 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v28 = (uint64_t *)((char *)&v203 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  v229 = v3;
  v29 = *(void **)&v3[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue];
  *v28 = v29;
  v30 = *(void (**)(_QWORD))(v26 + 104);
  v224 = enum case for DispatchPredicate.onQueue(_:);
  v225 = (void (*)(_QWORD *, _QWORD, uint64_t))v30;
  v30(v28);
  v31 = v29;
  LOBYTE(v29) = _dispatchPreconditionTest(_:)(v28);
  v32 = *(void (**)(_QWORD *, uint64_t))(v26 + 8);
  v219 = v28;
  v227 = v25;
  v226 = v32;
  v32(v28, v25);
  if ((v29 & 1) == 0)
  {
    __break(1u);
LABEL_94:
    __break(1u);
LABEL_95:
    __break(1u);
LABEL_96:
    __break(1u);
LABEL_97:
    __break(1u);
LABEL_98:
    __break(1u);
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
LABEL_101:
    __break(1u);
LABEL_102:
    __break(1u);
LABEL_103:
    __break(1u);
LABEL_104:
    __break(1u);
LABEL_105:
    __break(1u);
LABEL_106:
    __break(1u);
LABEL_107:
    __break(1u);
LABEL_108:
    __break(1u);
    goto LABEL_109;
  }
  sub_1004B8460(a1, (uint64_t)v19, type metadata accessor for CRLAssetReferrerIdentifier);
  if (swift_getEnumCaseMultiPayload(v19, v15) == 1)
  {
    v33 = sub_1004B804C((uint64_t *)&unk_1013E1780);
    sub_1004B84E0((uint64_t)&v19[*(int *)(v33 + 48)], (uint64_t)v24, type metadata accessor for CRLBoardIdentifier);
    v34 = type metadata accessor for CRLBoardIdentifier(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v24, 0, 1, v34);
    (*(void (**)(char *, uint64_t))(v223 + 8))(v19, v230);
  }
  else
  {
    sub_1004B84E0((uint64_t)v19, (uint64_t)v24, type metadata accessor for CRLBoardIdentifier);
    v35 = type metadata accessor for CRLBoardIdentifier(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v24, 0, 1, v35);
  }
  v36 = v231;
  v37 = *(_QWORD *)(v228 + 16);
  if (!v37)
  {
    v41 = (uint64_t)v24;
    goto LABEL_9;
  }
  v210 = v15;
  v222 = a1;
  v206 = v31;
  swift_bridgeObjectRetain(v228);
  v39 = sub_100A65D98(v38);
  v40 = sub_100AB84A8(v39);
  if (v36)
  {
    sub_1004CB800((uint64_t)v24, &qword_1013E0270);
    swift_bridgeObjectRelease(v39);
    return;
  }
  v42 = v40;
  if (v40[2] <= *(_QWORD *)(v39 + 16) >> 3)
  {
    v234 = (_QWORD *)v39;
    sub_100DB6134((uint64_t)v40);
    swift_bridgeObjectRelease(v42);
    v205 = v234;
  }
  else
  {
    v205 = sub_100DB730C((uint64_t)v40, v39);
    swift_bridgeObjectRelease(v42);
  }
  v207 = v24;
  v43 = 0;
  v232._countAndFlagsBits = 0;
  v232._object = (void *)0xE000000000000000;
  do
  {
    v44._countAndFlagsBits = 0xD000000000000012;
    v44._object = (void *)0x8000000100FEFE00;
    String.append(_:)(v44);
    if (v43 < v37 - 1)
    {
      v45._countAndFlagsBits = 8236;
      v45._object = (void *)0xE200000000000000;
      String.append(_:)(v45);
    }
    ++v43;
  }
  while (v37 != v43);
  v234 = 0;
  v235 = 0xE000000000000000;
  _StringGuts.grow(_:)(101);
  v46._countAndFlagsBits = 0x4920545245534E49;
  v46._object = (void *)0xEC000000204F544ELL;
  String.append(_:)(v46);
  v47._object = (void *)0x8000000100FEF8F0;
  v47._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v47);
  v48._countAndFlagsBits = 10272;
  v48._object = (void *)0xE200000000000000;
  String.append(_:)(v48);
  v49._countAndFlagsBits = 0xD000000000000013;
  v49._object = (void *)0x8000000100FEFE20;
  String.append(_:)(v49);
  v50._countAndFlagsBits = 8236;
  v50._object = (void *)0xE200000000000000;
  String.append(_:)(v50);
  v51._object = (void *)0x8000000100FD6350;
  v51._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v51);
  v52._countAndFlagsBits = 8236;
  v52._object = (void *)0xE200000000000000;
  String.append(_:)(v52);
  v53._countAndFlagsBits = 0x7265727265666572;
  v53._object = (void *)0xED0000657079745FLL;
  String.append(_:)(v53);
  v54._countAndFlagsBits = 8236;
  v54._object = (void *)0xE200000000000000;
  String.append(_:)(v54);
  v55._countAndFlagsBits = 0xD000000000000013;
  v55._object = (void *)0x8000000100FEFE40;
  String.append(_:)(v55);
  v56._countAndFlagsBits = 8236;
  v56._object = (void *)0xE200000000000000;
  String.append(_:)(v56);
  v57._countAndFlagsBits = 0x75755F7465737361;
  v57._object = (void *)0xEA00000000006469;
  String.append(_:)(v57);
  v58._countAndFlagsBits = 8236;
  v58._object = (void *)0xE200000000000000;
  String.append(_:)(v58);
  v59._object = (void *)0x8000000100FEEB40;
  v59._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v59);
  v60._countAndFlagsBits = 0x5345554C41562029;
  v60._object = (void *)0xE900000000000020;
  String.append(_:)(v60);
  object = v232._object;
  String.append(_:)(v232);
  swift_bridgeObjectRelease(object);
  v62._countAndFlagsBits = 0x464E4F43204E4F20;
  v62._object = (void *)0xEE0028205443494CLL;
  String.append(_:)(v62);
  v63._countAndFlagsBits = 0xD000000000000013;
  v63._object = (void *)0x8000000100FEFE20;
  String.append(_:)(v63);
  v64._countAndFlagsBits = 8236;
  v64._object = (void *)0xE200000000000000;
  String.append(_:)(v64);
  v65._countAndFlagsBits = 0xD000000000000013;
  v65._object = (void *)0x8000000100FEFE40;
  String.append(_:)(v65);
  v66._object = (void *)0x8000000100FEFE60;
  v66._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v66);
  v67._countAndFlagsBits = 0x75755F7465737361;
  v67._object = (void *)0xEA00000000006469;
  String.append(_:)(v67);
  v68._countAndFlagsBits = 0x756C637865203D20;
  v68._object = (void *)0xEC0000002E646564;
  String.append(_:)(v68);
  v69._countAndFlagsBits = 0x75755F7465737361;
  v69._object = (void *)0xEA00000000006469;
  String.append(_:)(v69);
  v70 = (uint64_t)v234;
  v71 = v235;
  v72 = *(_QWORD *)&v229[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database];
  v73 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v73, v240);
  swift_retain(v72);
  v75 = sub_1006B77CC(v74, v70, v71);
  swift_release(v72);
  v76 = -1 << *(_BYTE *)(v228 + 32);
  v77 = ~v76;
  v78 = *(_QWORD *)(v228 + 64);
  v79 = -v76;
  v234 = (_QWORD *)v228;
  v235 = v228 + 64;
  if (v79 < 64)
    v80 = ~(-1 << v79);
  else
    v80 = -1;
  v236 = v77;
  v237 = 0;
  v238 = v80 & v78;
  v239 = 0;
  swift_bridgeObjectRetain(v228);
  v208 = (sqlite3_stmt **)(v75 + 24);
  swift_beginAccess(v75 + 24, v233, 1, 0);
  v81 = v221;
  sub_100A66404(v221);
  v82 = v220;
  sub_1004C4938((uint64_t)v81, (uint64_t)v220, &qword_1014053C8);
  v83 = sub_1004B804C(&qword_1014053D0);
  v84 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v83 - 8) + 48))(v82, 1, v83);
  v228 = v75;
  if (v84 == 1)
  {
LABEL_43:
    v127 = v36;
    sub_1004D284C((uint64_t)v234);
    v128 = *(void **)(*(_QWORD *)(v75 + 16) + 32);
    v129 = v219;
    *v219 = v128;
    v130 = v227;
    v225(v129, v224, v227);
    v131 = v128;
    LOBYTE(v128) = _dispatchPreconditionTest(_:)(v129);
    v226(v129, v130);
    if ((v128 & 1) != 0)
    {
      v132 = sqlite3_step(*v208);
      v133 = v212;
      if (v132 == 101)
      {
        v134 = 0;
        v135 = v205[7];
        v221 = v205 + 7;
        v136 = 1 << *((_BYTE *)v205 + 32);
        v137 = -1;
        if (v136 < 64)
          v137 = ~(-1 << v136);
        v138 = v137 & v135;
        v220 = (uint64_t *)OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManagerLock;
        v218 = (uint64_t *)OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManager;
        v222 = (unint64_t)(v136 + 63) >> 6;
        v139 = v127;
        v140 = v230;
        v141 = v223;
        v142 = v211;
        while (1)
        {
          if (v138)
          {
            v149 = __clz(__rbit64(v138));
            v138 &= v138 - 1;
            v150 = v149 | (v134 << 6);
          }
          else
          {
            if (__OFADD__(v134++, 1))
              goto LABEL_108;
            if (v134 >= v222)
            {
LABEL_84:
              v191 = v228;
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v141 + 56))(v142, 1, 1, v140);
              v188 = swift_release(v205);
              v189 = (uint64_t)v207;
              v190 = (void (*)(_QWORD *, _QWORD, uint64_t, __n128))v225;
LABEL_85:
              v192 = *(void **)(*(_QWORD *)(v191 + 16) + 32);
              *v129 = v192;
              v193 = v227;
              v190(v129, v224, v227, v188);
              v194 = v192;
              LOBYTE(v192) = _dispatchPreconditionTest(_:)(v129);
              v226(v129, v193);
              v195 = v208;
              if ((v192 & 1) == 0)
                goto LABEL_113;
              if (*v208)
              {
                sqlite3_finalize(*v208);
                *v195 = 0;
              }
              swift_release(v191);
              v41 = v189;
LABEL_9:
              sub_1004CB800(v41, &qword_1013E0270);
              return;
            }
            v152 = v221[v134];
            if (!v152)
            {
              v153 = v134 + 1;
              if (v134 + 1 >= v222)
                goto LABEL_84;
              v152 = v221[v153];
              if (!v152)
              {
                v153 = v134 + 2;
                if (v134 + 2 >= v222)
                  goto LABEL_84;
                v152 = v221[v153];
                if (!v152)
                {
                  v153 = v134 + 3;
                  if (v134 + 3 >= v222)
                    goto LABEL_84;
                  v152 = v221[v153];
                  if (!v152)
                  {
                    while (1)
                    {
                      v134 = v153 + 1;
                      if (__OFADD__(v153, 1))
                        break;
                      if (v134 >= v222)
                        goto LABEL_84;
                      v152 = v221[v134];
                      ++v153;
                      if (v152)
                        goto LABEL_63;
                    }
LABEL_110:
                    __break(1u);
LABEL_111:
                    __break(1u);
LABEL_112:
                    __break(1u);
LABEL_113:
                    __break(1u);
                    goto LABEL_114;
                  }
                }
              }
              v134 = v153;
            }
LABEL_63:
            v138 = (v152 - 1) & v152;
            v150 = __clz(__rbit64(v152)) + (v134 << 6);
          }
          v154 = v139;
          (*(void (**)(char *, unint64_t, uint64_t))(v141 + 16))(v142, v205[6] + *(_QWORD *)(v141 + 72) * v150, v140);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v141 + 56))(v142, 0, 1, v140);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v141 + 48))(v142, 1, v140) == 1)
          {
            v188 = swift_release(v205);
            v189 = (uint64_t)v207;
            v190 = (void (*)(_QWORD *, _QWORD, uint64_t, __n128))v225;
            v191 = v228;
            goto LABEL_85;
          }
          (*(void (**)(uint64_t, char *, uint64_t))(v141 + 32))(v133, v142, v140);
          v155 = v206;
          *v129 = v206;
          v156 = v227;
          v225(v129, v224, v227);
          v157 = v155;
          LOBYTE(v155) = _dispatchPreconditionTest(_:)(v129);
          v226(v129, v156);
          if ((v155 & 1) == 0)
            goto LABEL_102;
          v158 = sub_100ABF660();
          v139 = v154;
          if (v154)
          {
            (*(void (**)(uint64_t, uint64_t, __n128))(v223 + 8))(v212, v230, v148);
            v196 = swift_release(v205);
            v197 = v227;
            v198 = v228;
            v199 = *(void **)(*(_QWORD *)(v228 + 16) + 32);
            *v129 = v199;
            ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v225)(v129, v224, v197, v196);
            v200 = v199;
            LOBYTE(v199) = _dispatchPreconditionTest(_:)(v129);
            v226(v129, v197);
            v201 = (uint64_t)v207;
            v202 = v208;
            if ((v199 & 1) != 0)
            {
              if (*v208)
              {
                sqlite3_finalize(*v208);
                *v202 = 0;
              }
              swift_release(v198);
              sub_1004CB800(v201, &qword_1013E0270);
              return;
            }
LABEL_114:
            __break(1u);
            __break(1u);
          }
          v159 = v158;
          if (v158)
          {
            v231 = v134;
            v160 = v129;
            v161 = v229;
            v162 = *(uint64_t *)((char *)v220 + (_QWORD)v229);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v162 + 16));
            v163 = (uint64_t)v218;
            v164 = *(void **)((char *)v218 + (_QWORD)v161);
            if (v164)
            {
              v143 = *(id *)((char *)v218 + (_QWORD)v161);
            }
            else
            {
              v165 = objc_allocWithZone((Class)type metadata accessor for CRLAssetFileManager(0));
              v166 = v161;
              v167 = sub_100C7EE84((uint64_t)v166);

              v168 = *(void **)&v161[v163];
              *(_QWORD *)&v161[v163] = v167;
              v143 = v167;

              v164 = 0;
            }
            v129 = v160;
            v144 = *(os_unfair_lock_s **)(v162 + 16);
            v145 = v164;
            os_unfair_lock_unlock(v144);
            v146 = *(_QWORD *)(v159 + OBJC_IVAR____TtC8Freeform19CRLAssetDatabaseRow_fileExtension);
            v147 = *(_QWORD *)(v159 + OBJC_IVAR____TtC8Freeform19CRLAssetDatabaseRow_fileExtension + 8);
            swift_bridgeObjectRetain(v147);
            v133 = v212;
            sub_100C7C7FC(v212, v146, v147);
            v142 = v211;
            v134 = v231;
            swift_release(v159);

            v148 = swift_bridgeObjectRelease(v147);
          }
          v141 = v223;
          v140 = v230;
          (*(void (**)(uint64_t, uint64_t, __n128))(v223 + 8))(v133, v230, v148);
        }
      }
      v169 = v132;
      swift_bridgeObjectRelease(v205);
      v234 = 0;
      v235 = 0xE000000000000000;
      _StringGuts.grow(_:)(60);
      v170._countAndFlagsBits = 0xD00000000000003ALL;
      v170._object = (void *)0x8000000100FEFE80;
      String.append(_:)(v170);
      _print_unlocked<A, B>(_:_:)(v222, &v234, v210, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v171 = (uint64_t)v234;
      v172 = v235;
      v173 = sub_1006B79EC();
      swift_allocError(&type metadata for SQLiteError, v173, 0, 0);
      *(_DWORD *)v174 = v169;
      *(_QWORD *)(v174 + 8) = v171;
      *(_QWORD *)(v174 + 16) = v172;
      swift_willThrow(v175);
      v176 = *(void **)(*(_QWORD *)(v75 + 16) + 32);
      *v129 = v176;
      v177 = v227;
      v225(v129, v224, v227);
      v178 = v176;
      LOBYTE(v176) = _dispatchPreconditionTest(_:)(v129);
      v226(v129, v177);
      v179 = (uint64_t)v207;
      if ((v176 & 1) == 0)
        goto LABEL_111;
      v180 = v208;
      if (*v208)
      {
        sqlite3_finalize(*v208);
        *v180 = 0;
      }
      swift_release(v75);
      sub_1004CB800(v179, &qword_1013E0270);
      return;
    }
LABEL_109:
    __break(1u);
    goto LABEL_110;
  }
  v204 = *(void (**)(char *, char *, uint64_t))(v223 + 32);
  v85 = v218;
  while (1)
  {
    v86 = v36;
    v87 = *v82;
    v88 = (uint64_t *)((char *)v82 + *(int *)(v83 + 48));
    v89 = *v88;
    v90 = v88[1];
    v91 = v217;
    v92 = *(int *)(v217 + 48);
    v93 = (char *)v88 + v92;
    v94 = v216;
    v95 = (char *)v216 + v92;
    *v216 = v89;
    v94[1] = v90;
    v96 = v230;
    v97 = v204;
    v204((char *)v94 + v92, v93, v230);
    v98 = (char *)v85 + *(int *)(v91 + 48);
    v209 = v89;
    *v85 = v89;
    v85[1] = v90;
    v97(v98, v95, v96);
    v99 = 6 * v87;
    if ((unsigned __int128)(v87 * (__int128)6) >> 64 != (6 * v87) >> 63)
      goto LABEL_94;
    swift_bridgeObjectRetain(v90);
    v100 = sub_1004BC12C();
    if (v86)
      break;
    v102 = v100;
    v103 = v101;
    sub_1006B5E80(v100, v101);
    sub_1004BBBC8(v102, v103);
    v104 = v215;
    sub_1004CB7BC((uint64_t)v207, v215, &qword_1013E0270);
    v105 = type metadata accessor for CRLBoardIdentifier(0);
    v106 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v105 - 8) + 48))(v104, 1, v105);
    v107 = v219;
    if (v106 == 1)
    {
      sub_1004CB800(v104, &qword_1013E0270);
      v108 = v99 + 2;
      if (__OFADD__(v99, 2))
        goto LABEL_103;
      v109 = v227;
      v110 = *(void **)(*(_QWORD *)(v228 + 16) + 32);
      *v107 = v110;
      v225(v107, v224, v109);
      v111 = v110;
      LOBYTE(v110) = _dispatchPreconditionTest(_:)(v107);
      v226(v107, v109);
      if ((v110 & 1) == 0)
        goto LABEL_104;
      if (v108 < (uint64_t)0xFFFFFFFF80000000)
        goto LABEL_105;
      if (v108 > 0x7FFFFFFF)
        goto LABEL_106;
      sqlite3_bind_null(*v208, v99 + 2);
    }
    else
    {
      v112 = sub_10067BA88();
      v114 = v113;
      sub_1004B84A4(v104, type metadata accessor for CRLBoardIdentifier);
      if (__OFADD__(v99, 2))
        goto LABEL_107;
      sub_1004BE310(v112, v114);
      sub_1006B5E80(v112, v114);
      sub_1004BBBC8(v112, v114);
      sub_1004BBBC8(v112, v114);
    }
    v115 = v214;
    sub_1004B8460(v222, v214, type metadata accessor for CRLAssetReferrerIdentifier);
    if (swift_getEnumCaseMultiPayload(v115, v210) == 1)
    {
      v116 = sub_1004B804C((uint64_t *)&unk_1013E1780);
      sub_1004B84A4(v115 + *(int *)(v116 + 48), type metadata accessor for CRLBoardIdentifier);
      (*(void (**)(uint64_t, uint64_t))(v223 + 8))(v115, v230);
      v117 = 1;
    }
    else
    {
      sub_1004B84A4(v115, type metadata accessor for CRLAssetReferrerIdentifier);
      v117 = 0;
    }
    v118 = v99 + 3;
    if (__OFADD__(v99, 3))
      goto LABEL_95;
    v231 = 0;
    v119 = *(void **)(*(_QWORD *)(v228 + 16) + 32);
    *v107 = v119;
    v120 = v227;
    v225(v107, v224, v227);
    v121 = v119;
    LOBYTE(v119) = _dispatchPreconditionTest(_:)(v107);
    v226(v107, v120);
    if ((v119 & 1) == 0)
      goto LABEL_96;
    if (v118 < (uint64_t)0xFFFFFFFF80000000)
      goto LABEL_97;
    if (v118 > 0x7FFFFFFF)
      goto LABEL_98;
    sqlite3_bind_int(*v208, v99 + 3, v117);
    if (__OFADD__(v99, 4))
      goto LABEL_99;
    v75 = v228;
    sub_1006B5CA4(v209, v90, v99 + 4);
    swift_bridgeObjectRelease(v90);
    if (__OFADD__(v99, 5))
      goto LABEL_100;
    v122 = UUID.crl_data()();
    v124 = v123;
    sub_1006B5E80(v122, v123);
    sub_1004BBBC8(v122, v124);
    if (__OFADD__(v99, 6))
      goto LABEL_101;
    sub_1006B5B50(v213, v99 + 6);
    v85 = v218;
    sub_1004CB800((uint64_t)v218, &qword_101406490);
    v125 = v221;
    sub_100A66404(v221);
    v82 = v220;
    sub_1004C4938((uint64_t)v125, (uint64_t)v220, &qword_1014053C8);
    v83 = sub_1004B804C(&qword_1014053D0);
    v126 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v83 - 8) + 48))(v82, 1, v83);
    v36 = v231;
    if (v126 == 1)
      goto LABEL_43;
  }
  swift_bridgeObjectRelease(v90);
  swift_bridgeObjectRelease(v205);
  sub_1004CB800((uint64_t)v218, &qword_101406490);
  sub_1004D284C((uint64_t)v234);
  v181 = v227;
  v182 = v228;
  v183 = *(void **)(*(_QWORD *)(v228 + 16) + 32);
  v184 = v219;
  *v219 = v183;
  v225(v184, v224, v181);
  v185 = v183;
  LOBYTE(v183) = _dispatchPreconditionTest(_:)(v184);
  v226(v184, v181);
  if ((v183 & 1) == 0)
    goto LABEL_112;
  v186 = v208;
  v187 = (uint64_t)v207;
  if (*v208)
  {
    sqlite3_finalize(*v208);
    *v186 = 0;
  }
  swift_release(v182);
  sub_1004CB800(v187, &qword_1013E0270);
}

void sub_100A8CC20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  void (*v13)(_QWORD *, __n128);
  id v14;
  void (*v15)(_QWORD *, uint64_t);
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  void *v43;
  id v44;
  sqlite3_stmt **v45;
  int v46;
  void *v47;
  id v48;
  int v49;
  unint64_t v50;
  uint64_t v51;
  __n128 v52;
  void *v53;
  id v54;
  uint64_t v55;
  void (*v56)(_QWORD *, _QWORD, uint64_t);
  void (*v57)(_QWORD *, uint64_t);
  unsigned int v58;
  uint64_t v59;
  unint64_t v60;
  _BYTE v61[32];

  v4 = v2;
  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (uint64_t *)((char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = *(void **)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v11 = v12;
  v13 = *(void (**)(_QWORD *, __n128))(v8 + 104);
  v58 = enum case for DispatchPredicate.onQueue(_:);
  v13(v11, v9);
  v14 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)(v11);
  v15 = *(void (**)(_QWORD *, uint64_t))(v8 + 8);
  v15(v11, v7);
  if ((v12 & 1) == 0)
  {
    __break(1u);
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_100A8D184(a1, a2);
  if (v3)
    return;
  v56 = (void (*)(_QWORD *, _QWORD, uint64_t))v13;
  v57 = v15;
  v59 = 0;
  v60 = 0xE000000000000000;
  _StringGuts.grow(_:)(56);
  v16._countAndFlagsBits = 0x20455441445055;
  v16._object = (void *)0xE700000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0x74695F6472616F62;
  v17._object = (void *)0xEB00000000736D65;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 0x2054455320;
  v18._object = (void *)0xE500000000000000;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 0x6E6F7473626D6F74;
  v19._object = (void *)0xEA00000000006465;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 0x202C31203D20;
  v20._object = (void *)0xE600000000000000;
  String.append(_:)(v20);
  v21._countAndFlagsBits = 0xD000000000000010;
  v21._object = (void *)0x8000000100FEEB40;
  String.append(_:)(v21);
  v22._countAndFlagsBits = 2112800;
  v22._object = (void *)0xE300000000000000;
  String.append(_:)(v22);
  v23._countAndFlagsBits = 0xD000000000000010;
  v23._object = (void *)0x8000000100FEEB40;
  String.append(_:)(v23);
  v24._countAndFlagsBits = 0x454857203F207C20;
  v24._object = (void *)0xEC00000028204552;
  String.append(_:)(v24);
  v25._countAndFlagsBits = 0x6975755F6D657469;
  v25._object = (void *)0xE900000000000064;
  String.append(_:)(v25);
  v26._countAndFlagsBits = 8236;
  v26._object = (void *)0xE200000000000000;
  String.append(_:)(v26);
  v27._object = (void *)0x8000000100FD6350;
  v27._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v27);
  v28._countAndFlagsBits = 0x28204E492029;
  v28._object = (void *)0xE600000000000000;
  String.append(_:)(v28);
  v29._countAndFlagsBits = sub_100AF94C0((uint64_t)&off_1012636D0, 0);
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  v30._countAndFlagsBits = 41;
  v30._object = (void *)0xE100000000000000;
  String.append(_:)(v30);
  v31 = v59;
  v32 = v60;
  v33 = *(_QWORD *)(v4 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v34 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v34, v61);
  swift_retain(v33);
  v36 = sub_1006B77CC(v35, v31, v32);
  swift_release(v33);
  sub_1006B5B50(16, 1);
  v37 = UUID.crl_data()();
  v39 = v38;
  sub_1006B5E80(v37, v38);
  sub_1004BBBC8(v37, v39);
  v40 = sub_10067BA88();
  v42 = v41;
  sub_1006B5E80(v40, v41);
  v43 = *(void **)(*(_QWORD *)(v36 + 16) + 32);
  *v11 = v43;
  v56(v11, v58, v7);
  v44 = v43;
  LOBYTE(v43) = _dispatchPreconditionTest(_:)(v11);
  v57(v11, v7);
  if ((v43 & 1) == 0)
    goto LABEL_14;
  v45 = (sqlite3_stmt **)(v36 + 24);
  swift_beginAccess(v36 + 24, &v59, 1, 0);
  v46 = sqlite3_step(*(sqlite3_stmt **)(v36 + 24));
  if (v46 != 101)
  {
    v49 = v46;
    v50 = sub_1006B79EC();
    swift_allocError(&type metadata for SQLiteError, v50, 0, 0);
    *(_DWORD *)v51 = v49;
    *(_QWORD *)(v51 + 8) = 0xD000000000000024;
    *(_QWORD *)(v51 + 16) = 0x8000000100FF0A60;
    swift_willThrow(v52);
    sub_1004BBBC8(v40, v42);
    v53 = *(void **)(*(_QWORD *)(v36 + 16) + 32);
    *v11 = v53;
    v56(v11, v58, v7);
    v54 = v53;
    LOBYTE(v53) = _dispatchPreconditionTest(_:)(v11);
    v57(v11, v7);
    if ((v53 & 1) != 0)
    {
      if (*v45)
      {
        sqlite3_finalize(*v45);
        *(_QWORD *)(v36 + 24) = 0;
      }
      goto LABEL_11;
    }
LABEL_16:
    __break(1u);
  }
  sub_1004BBBC8(v40, v42);
  v47 = *(void **)(*(_QWORD *)(v36 + 16) + 32);
  *v11 = v47;
  v56(v11, v58, v7);
  v48 = v47;
  LOBYTE(v47) = _dispatchPreconditionTest(_:)(v11);
  v57(v11, v7);
  if ((v47 & 1) == 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (*v45)
  {
    sqlite3_finalize(*v45);
    *v45 = 0;
  }
LABEL_11:
  swift_release(v36);
}

void sub_100A8D184(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  void (*v14)(_QWORD *, __n128);
  id v15;
  void (*v16)(_QWORD *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  void (*v39)(_QWORD *, uint64_t);
  int v40;
  unint64_t v41;
  uint64_t (*v42)(uint64_t);
  int v43;
  Swift::String v44;
  uint64_t v45;
  Swift::String v46;
  void (*v47)(_QWORD *, uint64_t);
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  __n128 v52;
  void *v53;
  id v54;
  void *v55;
  id v56;
  sqlite3_stmt **v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  void (*v61)(_QWORD *, uint64_t);
  void (*v62)(_QWORD *, _QWORD, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char v72[32];

  v4 = v2;
  v64 = type metadata accessor for CRLAssetReferrerIdentifier(0);
  __chkstk_darwin(v64);
  v67 = (uint64_t)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchPredicate(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (sqlite3_stmt ***)((char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = *(void **)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v12 = v13;
  v14 = *(void (**)(_QWORD *, __n128))(v9 + 104);
  v66 = enum case for DispatchPredicate.onQueue(_:);
  v14(v12, v10);
  v15 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)(v12);
  v16 = *(void (**)(_QWORD *, uint64_t))(v9 + 8);
  v65 = v8;
  v16(v12, v8);
  if ((v13 & 1) == 0)
  {
    __break(1u);
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v17 = sub_100ABB740(a1, a2);
  if (v3)
    return;
  v18 = v17;
  v63 = a1;
  if (!*(_QWORD *)(v17 + 16))
  {
    swift_bridgeObjectRelease();
    return;
  }
  v61 = v16;
  v62 = (void (*)(_QWORD *, _QWORD, uint64_t))v14;
  v70 = 0;
  v71 = 0xE000000000000000;
  _StringGuts.grow(_:)(37);
  swift_bridgeObjectRelease();
  v70 = 0xD00000000000004FLL;
  v71 = 0x8000000100FF18A0;
  v19._countAndFlagsBits = sub_100AF94C0((uint64_t)&off_101263678, 0);
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 41;
  v20._object = (void *)0xE100000000000000;
  String.append(_:)(v20);
  v21 = v70;
  v22 = v71;
  v23 = *(_QWORD *)(v4 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v24 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v24, v72);
  swift_retain(v23);
  v60 = sub_1006B77CC(v25, v21, v22);
  swift_release(v23);
  v26 = sub_1004B804C((uint64_t *)&unk_1013E1780);
  v27 = v67;
  v28 = v67 + *(int *)(v26 + 48);
  v29 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v27, v63, v29);
  sub_1004B8460(a2, v28, type metadata accessor for CRLBoardIdentifier);
  swift_storeEnumTagMultiPayload(v27, v64, 1);
  v30 = sub_1004BC12C();
  v32 = v31;
  v64 = v29;
  v33 = v60;
  sub_1006B5E80(v30, v31);
  sub_1004BBBC8(v30, v32);
  v34 = sub_10067BA88();
  v36 = v65;
  v58 = v34;
  v59 = v35;
  sub_1006B5E80(v34, v35);
  v37 = *(void **)(*(_QWORD *)(v33 + 16) + 32);
  *v12 = v37;
  v62(v12, v66, v36);
  v38 = v37;
  LOBYTE(v37) = _dispatchPreconditionTest(_:)(v12);
  v39 = v61;
  v61(v12, v36);
  if ((v37 & 1) == 0)
    goto LABEL_18;
  v57 = (sqlite3_stmt **)(v33 + 24);
  swift_beginAccess(v33 + 24, &v70, 1, 0);
  v40 = sqlite3_step(*(sqlite3_stmt **)(v33 + 24));
  if (v40 == 101)
  {
    v41 = sub_100AF7994(v18);
    swift_bridgeObjectRelease();
    sub_100ABA65C(v41);
    v42 = type metadata accessor for CRLAssetReferrerIdentifier;
    goto LABEL_14;
  }
  v43 = v40;
  swift_bridgeObjectRelease();
  v68 = 0;
  v69 = 0xE000000000000000;
  _StringGuts.grow(_:)(73);
  v44._object = (void *)0x8000000100FF18F0;
  v44._countAndFlagsBits = 0xD000000000000047;
  String.append(_:)(v44);
  v45 = sub_1004B7878(&qword_1013E49E0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v46._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v64, v45);
  String.append(_:)(v46);
  swift_bridgeObjectRelease();
  v47 = v39;
  v39 = (void (*)(_QWORD *, uint64_t))v33;
  v48 = v68;
  v49 = v69;
  v50 = sub_1006B79EC();
  swift_allocError(&type metadata for SQLiteError, v50, 0, 0);
  *(_DWORD *)v51 = v43;
  *(_QWORD *)(v51 + 8) = v48;
  *(_QWORD *)(v51 + 16) = v49;
  v33 = (uint64_t)v39;
  swift_willThrow(v52);
  sub_1004BBBC8(v58, v59);
  sub_1004B84A4(v67, type metadata accessor for CRLAssetReferrerIdentifier);
  v53 = *(void **)(*((_QWORD *)v39 + 2) + 32);
  *v12 = v53;
  v62(v12, v66, v36);
  v54 = v53;
  LOBYTE(v53) = _dispatchPreconditionTest(_:)(v12);
  v47(v12, v36);
  if ((v53 & 1) == 0)
  {
    __break(1u);
LABEL_14:
    sub_1004B84A4(v67, v42);
    swift_bridgeObjectRelease();
    sub_1004BBBC8(v58, v59);
    v55 = *(void **)(*(_QWORD *)(v33 + 16) + 32);
    *v12 = v55;
    v62(v12, v66, v36);
    v56 = v55;
    LOBYTE(v55) = _dispatchPreconditionTest(_:)(v12);
    v39(v12, v36);
    if ((v55 & 1) != 0)
      goto LABEL_15;
LABEL_19:
    __break(1u);
  }
LABEL_15:
  if (*v57)
  {
    sqlite3_finalize(*v57);
    *(_QWORD *)(v33 + 24) = 0;
  }
  swift_release(v33);
}

double sub_100A8D814(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  void (*v12)(_QWORD);
  id v13;
  void (*v14)(_QWORD *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double result;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  _QWORD *v47;
  id v48;
  sqlite3_stmt **v49;
  int v50;
  void *v51;
  id v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  __n128 v56;
  void *v57;
  id v58;
  uint64_t v59;
  void (*v60)(_QWORD *, uint64_t);
  _QWORD *v61;
  uint64_t v62;
  unsigned int v63;
  void (*v64)(_QWORD *, _QWORD, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char v69[32];

  v66 = a2;
  v4 = type metadata accessor for CRLAssetReferrerIdentifier(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (uint64_t *)((char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *(void **)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v10 = v11;
  v12 = *(void (**)(_QWORD))(v8 + 104);
  v63 = enum case for DispatchPredicate.onQueue(_:);
  v64 = (void (*)(_QWORD *, _QWORD, uint64_t))v12;
  v12(v10);
  v13 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v10);
  v14 = *(void (**)(_QWORD *, uint64_t))(v8 + 8);
  v61 = v10;
  v62 = v7;
  v14(v10, v7);
  if ((v11 & 1) == 0)
  {
    __break(1u);
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v15 = (uint64_t)&v6[*(int *)(sub_1004B804C((uint64_t *)&unk_1013E1780) + 48)];
  v16 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v6, a1, v16);
  sub_1004B8460(v66, v15, type metadata accessor for CRLBoardIdentifier);
  swift_storeEnumTagMultiPayload(v6, v4, 1);
  v17 = v2;
  v18 = v65;
  sub_100A8A7E4((uint64_t)v6);
  if (v18)
  {
    sub_1004B84A4((uint64_t)v6, type metadata accessor for CRLAssetReferrerIdentifier);
    return result;
  }
  v65 = a1;
  sub_1004B84A4((uint64_t)v6, type metadata accessor for CRLAssetReferrerIdentifier);
  v67 = 0;
  v68 = 0xE000000000000000;
  _StringGuts.grow(_:)(57);
  v20._countAndFlagsBits = 0x20455441445055;
  v20._object = (void *)0xE700000000000000;
  String.append(_:)(v20);
  v21._countAndFlagsBits = 0x74695F6472616F62;
  v21._object = (void *)0xEB00000000736D65;
  String.append(_:)(v21);
  v22._countAndFlagsBits = 0x2054455320;
  v22._object = (void *)0xE500000000000000;
  String.append(_:)(v22);
  v23._countAndFlagsBits = 0x6E6F7473626D6F74;
  v23._object = (void *)0xEA00000000006465;
  String.append(_:)(v23);
  v24._countAndFlagsBits = 0x202C31203D20;
  v24._object = (void *)0xE600000000000000;
  String.append(_:)(v24);
  v25._countAndFlagsBits = 0xD000000000000010;
  v25._object = (void *)0x8000000100FEEB40;
  String.append(_:)(v25);
  v26._countAndFlagsBits = 2112800;
  v26._object = (void *)0xE300000000000000;
  String.append(_:)(v26);
  v27._countAndFlagsBits = 0xD000000000000010;
  v27._object = (void *)0x8000000100FEEB40;
  String.append(_:)(v27);
  v28._countAndFlagsBits = 0x454857203F207C20;
  v28._object = (void *)0xEB00000000204552;
  String.append(_:)(v28);
  v29._object = (void *)0xE900000000000064;
  v29._countAndFlagsBits = 0x6975755F6D657469;
  String.append(_:)(v29);
  v30._countAndFlagsBits = 0x444E41203F203D20;
  v30._object = (void *)0xE900000000000020;
  String.append(_:)(v30);
  v31._object = (void *)0x8000000100FD6350;
  v31._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v31);
  v32._countAndFlagsBits = 1059077408;
  v32._object = (void *)0xE400000000000000;
  String.append(_:)(v32);
  v33 = v67;
  v34 = v68;
  v35 = *(_QWORD *)(v17 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v36 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v36, v69);
  swift_retain(v35);
  v38 = sub_1006B77CC(v37, v33, v34);
  v60 = v14;
  swift_release(v35);
  sub_1006B5B50(16, 1);
  v39 = UUID.crl_data()();
  v41 = v40;
  sub_1006B5E80(v39, v40);
  sub_1004BBBC8(v39, v41);
  v42 = sub_10067BA88();
  v44 = v43;
  sub_1006B5E80(v42, v43);
  v45 = *(void **)(*(_QWORD *)(v38 + 16) + 32);
  v47 = v61;
  v46 = v62;
  *v61 = v45;
  v64(v47, v63, v46);
  v48 = v45;
  LOBYTE(v45) = _dispatchPreconditionTest(_:)(v47);
  v60(v47, v46);
  if ((v45 & 1) == 0)
    goto LABEL_14;
  v49 = (sqlite3_stmt **)(v38 + 24);
  swift_beginAccess(v38 + 24, &v67, 1, 0);
  v50 = sqlite3_step(*(sqlite3_stmt **)(v38 + 24));
  if (v50 != 101)
  {
    v53 = v50;
    v54 = sub_1006B79EC();
    swift_allocError(&type metadata for SQLiteError, v54, 0, 0);
    *(_DWORD *)v55 = v53;
    *(_QWORD *)(v55 + 8) = 0xD000000000000024;
    *(_QWORD *)(v55 + 16) = 0x8000000100FF0A60;
    swift_willThrow(v56);
    sub_1004BBBC8(v42, v44);
    v57 = *(void **)(*(_QWORD *)(v38 + 16) + 32);
    *v47 = v57;
    v64(v47, v63, v46);
    v58 = v57;
    LOBYTE(v57) = _dispatchPreconditionTest(_:)(v47);
    v60(v47, v46);
    if ((v57 & 1) != 0)
    {
      if (*v49)
      {
        sqlite3_finalize(*v49);
        *(_QWORD *)(v38 + 24) = 0;
      }
      goto LABEL_12;
    }
LABEL_16:
    __break(1u);
  }
  sub_1004BBBC8(v42, v44);
  v51 = *(void **)(*(_QWORD *)(v38 + 16) + 32);
  *v47 = v51;
  v64(v47, v63, v46);
  v52 = v51;
  LOBYTE(v51) = _dispatchPreconditionTest(_:)(v47);
  v60(v47, v46);
  if ((v51 & 1) == 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (*v49)
  {
    sqlite3_finalize(*v49);
    *v49 = 0;
  }
LABEL_12:
  *(_QWORD *)&result = swift_release(v38).n128_u64[0];
  return result;
}

void sub_100A8DE24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void (*v3)(_QWORD *, uint64_t);
  void (*v4)(_QWORD *, uint64_t);
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  void (*v19)(_QWORD *, __n128);
  id v20;
  void (*v21)(_QWORD *, uint64_t);
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  char *v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  char v47;
  void (*v48)(char *, uint64_t);
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  _QWORD *v62;
  uint64_t v63;
  id v64;
  char v65;
  sqlite3_stmt **v66;
  int v67;
  void *v68;
  _QWORD *v69;
  uint64_t v70;
  id v71;
  char v72;
  int v73;
  unint64_t v74;
  uint64_t v75;
  __n128 v76;
  void *v77;
  _QWORD *v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(_QWORD *, _QWORD, uint64_t);
  void (*v88)(_QWORD *, uint64_t);
  uint64_t v89;
  void (*v90)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v91;
  unint64_t v92;
  void (*v93)(_QWORD *, uint64_t);
  uint64_t v94;
  _QWORD *v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  char v102[24];
  _QWORD v103[3];
  char v104[32];

  v4 = v3;
  v5 = v2;
  v97 = type metadata accessor for UUID(0);
  v101 = *(_QWORD *)(v97 - 8);
  __chkstk_darwin(v97);
  v100 = (char *)&v84 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v99 = (uint64_t)&v84 - v10;
  v11 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v11);
  v98 = (uint64_t *)((char *)&v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = type metadata accessor for DispatchPredicate(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (uint64_t *)((char *)&v84 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = *(void **)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v17 = v18;
  v19 = *(void (**)(_QWORD *, __n128))(v14 + 104);
  v96 = enum case for DispatchPredicate.onQueue(_:);
  v19(v17, v15);
  v20 = v18;
  LOBYTE(v18) = _dispatchPreconditionTest(_:)(v17);
  v21 = *(void (**)(_QWORD *, uint64_t))(v14 + 8);
  v95 = v17;
  v21(v17, v13);
  if ((v18 & 1) == 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  sub_100A8D184(a1, a2);
  if (v3)
    return;
  v22 = sub_100A82278(a1, (void (*)(_QWORD *, uint64_t, uint64_t))a2, 1);
  v4 = 0;
  v23 = a2;
  a2 = v22;
  v94 = a1;
  v86 = v23;
  v87 = (void (*)(_QWORD *, _QWORD, uint64_t))v19;
  v88 = v21;
  v89 = v13;
  v103[0] = _swiftEmptyArrayStorage;
  v91 = v5;
  if (v22 >> 62)
  {
LABEL_19:
    if (a2 < 0)
      v38 = a2;
    else
      v38 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
    v24 = _CocoaArrayWrapper.endIndex.getter(v38);
    swift_bridgeObjectRelease();
    v25 = v97;
    if (v24)
      goto LABEL_5;
LABEL_23:
    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
  v24 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
  v25 = v97;
  if (!v24)
    goto LABEL_23;
LABEL_5:
  v93 = v4;
  if (v24 < 1)
  {
    __break(1u);
    goto LABEL_62;
  }
  if ((a2 & 0xC000000000000001) != 0)
  {
    for (i = 0; i != v24; ++i)
    {
      v27 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, a2);
      v28 = v27;
      v29 = *(_QWORD *)(v27 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_unsyncedChanges);
      if ((v29 & 2) == 0 || (v29 & 1) != 0)
      {
        swift_unknownObjectRelease(v27);
      }
      else
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v27);
        v30 = *(_QWORD *)(v103[0] + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v30);
        v31 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v30, v28);
        specialized ContiguousArray._endMutation()(v31);
      }
    }
  }
  else
  {
    v32 = 0;
    v33 = OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_unsyncedChanges;
    do
    {
      v34 = *(_QWORD *)(a2 + 8 * v32 + 32);
      if ((*(_QWORD *)(v34 + v33) & 3) == 2)
      {
        swift_retain(*(_QWORD *)(a2 + 8 * v32 + 32));
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v35);
        v36 = *(_QWORD *)(v103[0] + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v36);
        v37 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v36, v34);
        specialized ContiguousArray._endMutation()(v37);
        v33 = OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_unsyncedChanges;
      }
      ++v32;
    }
    while (v24 != v32);
  }
  swift_bridgeObjectRelease();
  v4 = v93;
LABEL_24:
  a2 = v103[0];
  v21 = (void (*)(_QWORD *, uint64_t))v98;
  v13 = v91;
  if ((v103[0] & 0x8000000000000000) != 0 || (v103[0] & 0x4000000000000000) != 0)
    goto LABEL_59;
  v93 = *(void (**)(_QWORD *, uint64_t))(v103[0] + 16);
  if (v93)
  {
    do
    {
      v92 = a2 & 0xC000000000000001;
      if ((a2 & 0xC000000000000001) != 0)
      {
LABEL_62:
        v83 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2);
        sub_1004B8460(v83 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_boardIdentifier, (uint64_t)v21, type metadata accessor for CRLBoardIdentifier);
        swift_unknownObjectRelease(v83);
      }
      else
      {
        if (!*(_QWORD *)(a2 + 16))
        {
          __break(1u);
          __break(1u);
LABEL_64:
          __break(1u);
LABEL_65:
          __break(1u);
LABEL_66:
          __break(1u);
        }
        sub_1004B8460(*(_QWORD *)(a2 + 32) + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_boardIdentifier, (uint64_t)v21, type metadata accessor for CRLBoardIdentifier);
      }
      v39 = sub_100A80ED8();
      if (v4)
      {
        sub_1004B84A4((uint64_t)v21, type metadata accessor for CRLBoardIdentifier);
        v40 = a2;
        goto LABEL_46;
      }
      if (!v39)
      {
        sub_1004B84A4((uint64_t)v21, type metadata accessor for CRLBoardIdentifier);
        break;
      }
      v85 = v39;
      v41 = v39 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_rootContainerUUID;
      v42 = swift_beginAccess(v39 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_rootContainerUUID, v102, 0, 0);
      v90 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v101 + 16);
      v90(v99, v41, v25, v42);
      v13 = 4;
      v43 = v100;
      while (1)
      {
        if (v92)
        {
          v44 = specialized _ArrayBuffer._getElementSlowPath(_:)(v13 - 4, a2);
        }
        else
        {
          v44 = *(_QWORD *)(a2 + 8 * v13);
          v45 = swift_retain(v44);
        }
        v46 = v94;
        v21 = (void (*)(_QWORD *, uint64_t))(v13 - 3);
        if (__OFADD__(v13 - 4, 1))
          break;
        v90((uint64_t)v43, v44 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_itemUUID, v25, v45);
        sub_1004B7878((unint64_t *)&qword_1013E4880, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v47 = dispatch thunk of static Equatable.== infix(_:_:)(v43, v46);
        v48 = *(void (**)(char *, uint64_t))(v101 + 8);
        v48(v43, v25);
        if ((v47 & 1) == 0)
          sub_100A8E79C(v44, v99, v91);
        swift_release(v44);
        ++v13;
        if (v21 == v93)
        {
          swift_release(a2);
          v49 = swift_release(v85);
          ((void (*)(uint64_t, uint64_t, __n128))v48)(v99, v25, v49);
          sub_1004B84A4((uint64_t)v98, type metadata accessor for CRLBoardIdentifier);
          v13 = v91;
          goto LABEL_44;
        }
      }
      __break(1u);
LABEL_59:
      swift_retain(a2);
      v82 = _CocoaArrayWrapper.endIndex.getter(v81);
      swift_release(a2);
      v93 = (void (*)(_QWORD *, uint64_t))v82;
    }
    while (v82);
  }
  swift_release(a2);
LABEL_44:
  v103[0] = 0;
  v103[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(40);
  swift_bridgeObjectRelease();
  v50 = *(_QWORD *)(v13 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v51 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v51, v104);
  swift_retain(v50);
  v53 = sub_1006B77CC(v52, 0xD000000000000046, 0x8000000100FF1830);
  if (v4)
  {
    v40 = v50;
LABEL_46:
    swift_release(v40);
    return;
  }
  v54 = v53;
  swift_release(v50);
  v55 = UUID.crl_data()();
  v57 = v56;
  sub_1006B5E80(v55, v56);
  sub_1004BBBC8(v55, v57);
  v58 = sub_10067BA88();
  v60 = v59;
  sub_1006B5E80(v58, v59);
  v61 = *(void **)(*(_QWORD *)(v54 + 16) + 32);
  v62 = v95;
  *v95 = v61;
  v63 = v89;
  v87(v62, v96, v89);
  v64 = v61;
  v65 = _dispatchPreconditionTest(_:)(v62);
  v88(v62, v63);
  if ((v65 & 1) == 0)
    goto LABEL_64;
  v66 = (sqlite3_stmt **)(v54 + 24);
  swift_beginAccess(v54 + 24, v103, 1, 0);
  v67 = sqlite3_step(*(sqlite3_stmt **)(v54 + 24));
  if (v67 == 101)
  {
    sub_1004BBBC8(v58, v60);
    v68 = *(void **)(*(_QWORD *)(v54 + 16) + 32);
    v69 = v95;
    *v95 = v68;
    v70 = v89;
    v87(v69, v96, v89);
    v71 = v68;
    v72 = _dispatchPreconditionTest(_:)(v69);
    v88(v69, v70);
    if ((v72 & 1) == 0)
      goto LABEL_65;
    if (*v66)
    {
      sqlite3_finalize(*v66);
      *v66 = 0;
    }
    v40 = v54;
    goto LABEL_46;
  }
  v73 = v67;
  v74 = sub_1006B79EC();
  swift_allocError(&type metadata for SQLiteError, v74, 0, 0);
  *(_DWORD *)v75 = v73;
  *(_QWORD *)(v75 + 8) = 0xD00000000000001DLL;
  *(_QWORD *)(v75 + 16) = 0x8000000100FF1880;
  swift_willThrow(v76);
  sub_1004BBBC8(v58, v60);
  v77 = *(void **)(*(_QWORD *)(v54 + 16) + 32);
  v78 = v95;
  *v95 = v77;
  v79 = v89;
  v87(v78, v96, v89);
  v80 = v77;
  LOBYTE(v73) = _dispatchPreconditionTest(_:)(v78);
  v88(v78, v79);
  if ((v73 & 1) == 0)
    goto LABEL_66;
  if (*v66)
  {
    sqlite3_finalize(*v66);
    *(_QWORD *)(v54 + 24) = 0;
  }
  swift_release(v54);
}

double sub_100A8E79C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  __n128 v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  void (*v30)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  double result;
  void (*v34)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  char v38;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void (*v47)(void);
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(void);
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(uint64_t, uint64_t, uint64_t);
  _BYTE v83[32];
  uint64_t v84;

  v80 = a3;
  v5 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v5);
  v77 = (uint64_t)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v73 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v76 = (uint64_t)&v65 - v11;
  __chkstk_darwin(v12);
  v74 = (uint64_t)&v65 - v13;
  v14 = sub_1004B804C((uint64_t *)&unk_1013F62D0);
  __chkstk_darwin(v14);
  v16 = (char *)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1004B804C((uint64_t *)&unk_1013E1A50);
  __chkstk_darwin(v17);
  v75 = (uint64_t)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v78 = (uint64_t)&v65 - v20;
  __chkstk_darwin(v21);
  v23 = (char *)&v65 - v22;
  __chkstk_darwin(v24);
  v26 = (char *)&v65 - v25;
  v81 = a1;
  v27 = a1 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_parentContainerUUID;
  v28 = swift_beginAccess(v27, v83, 0, 0);
  v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  v79 = a2;
  v82 = v29;
  ((void (*)(char *, uint64_t, uint64_t, __n128))v29)(v26, a2, v7, v28);
  v30 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56);
  v30(v26, 0, 1, v7);
  v31 = (uint64_t)&v16[*(int *)(v14 + 48)];
  sub_1004CB7BC(v27, (uint64_t)v16, (uint64_t *)&unk_1013E1A50);
  sub_1004CB7BC((uint64_t)v26, v31, (uint64_t *)&unk_1013E1A50);
  v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (v32((uint64_t)v16, 1, v7) == 1)
  {
    sub_1004CB800((uint64_t)v26, (uint64_t *)&unk_1013E1A50);
    if (v32(v31, 1, v7) == 1)
    {
      sub_1004CB800((uint64_t)v16, (uint64_t *)&unk_1013E1A50);
      return result;
    }
    goto LABEL_6;
  }
  sub_1004CB7BC((uint64_t)v16, (uint64_t)v23, (uint64_t *)&unk_1013E1A50);
  if (v32(v31, 1, v7) == 1)
  {
    sub_1004CB800((uint64_t)v26, (uint64_t *)&unk_1013E1A50);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v23, v7);
LABEL_6:
    v34 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v30;
    sub_1004CB800((uint64_t)v16, (uint64_t *)&unk_1013F62D0);
    v35 = v84;
    v36 = v82;
    goto LABEL_8;
  }
  v34 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v30;
  v37 = v74;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v74, v31, v7);
  sub_1004B7878((unint64_t *)&qword_1013E4880, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v38 = dispatch thunk of static Equatable.== infix(_:_:)(v23, v37);
  v39 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v39(v37, v7);
  sub_1004CB800((uint64_t)v26, (uint64_t *)&unk_1013E1A50);
  v39((uint64_t)v23, v7);
  sub_1004CB800((uint64_t)v16, (uint64_t *)&unk_1013E1A50);
  v35 = v84;
  v36 = v82;
  if ((v38 & 1) != 0)
    return result;
LABEL_8:
  v40 = v81;
  v41 = sub_100AF5E90(v81);
  if (!v41)
    return result;
  v42 = v41;
  v43 = v78;
  v44 = v79;
  v36(v78, v79, v7);
  v34(v43, 0, 1, v7);
  (*(void (**)(uint64_t))(*v42 + 272))(v43);
  v45 = (*(uint64_t (**)(_QWORD, _QWORD))(*v42 + 456))(*(_QWORD *)(v80 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_crdtContext), 0);
  if (!v35)
  {
    v68 = v8;
    v82 = (void (*)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40
                                                                     + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_unsyncedChanges) | 0x16);
    v47 = *(void (**)(void))(*v42 + 256);
    v69 = v45;
    v70 = v46;
    v67 = v47;
    v47();
    v78 = *(_QWORD *)(v40 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_minRequiredVersions);
    v48 = *(_QWORD *)(v40 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_minRequiredVersions + 16);
    v74 = *(_QWORD *)(v40 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_minRequiredVersions + 8);
    v72 = v48;
    v71 = *(_QWORD *)(v40 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_objectOptions);
    v49 = v75;
    v36(v75, v44, v7);
    v34(v49, 0, 1, v7);
    v66 = v40 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_boardIdentifier;
    sub_1004B8460(v40 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_boardIdentifier, v77, type metadata accessor for CRLBoardIdentifier);
    v79 = *(_QWORD *)(v40 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_itemTypeValue);
    v51 = *(_QWORD *)(v40 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_specificData);
    v50 = *(_QWORD *)(v40 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_specificData + 8);
    v52 = v40 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_syncData;
    v54 = *(_QWORD *)(v40 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_syncData);
    v53 = *(_QWORD *)(v52 + 8);
    v55 = type metadata accessor for CRLBoardItemDatabaseRow(0);
    swift_allocObject(v55, *(unsigned int *)(v55 + 48), *(unsigned __int16 *)(v55 + 52));
    v84 = 0;
    v56 = v69;
    v57 = v70;
    sub_1004BE310(v69, v70);
    sub_10057939C(v51, v50);
    sub_10057939C(v54, v53);
    v64 = v51;
    v58 = v56;
    v59 = sub_100C0227C(v76, v78, v74, v72, v71, v75, v77, v79, v56, v57, v64, v50, 1, (uint64_t)v82, v54, v53);
    v60 = v84;
    sub_100A87178(v59);
    if (!v60)
    {
      v62 = v57;
      v63 = (uint64_t)v73;
      v67();
      sub_100A8CC20(v63, v66);
      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v63, v7);
      sub_1004BBBC8(v58, v62);
      swift_release(v42);
      v61 = v59;
      goto LABEL_13;
    }
    swift_release(v59);
    sub_1004BBBC8(v58, v57);
  }
  v61 = (uint64_t)v42;
LABEL_13:
  *(_QWORD *)&result = swift_release(v61).n128_u64[0];
  return result;
}

void sub_100A8EDF8(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  void (*v14)(_QWORD);
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  unint64_t v21;
  uint64_t v22;
  void (*v23)(_QWORD *, uint64_t);
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  id v31;
  sqlite3_stmt **v32;
  int v33;
  uint64_t v34;
  void *v35;
  id v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  __n128 v40;
  void *v41;
  id v42;
  char v43;
  uint64_t v44;
  int v45;
  void (*v46)(_QWORD *, uint64_t);
  unsigned int v47;
  void (*v48)(_QWORD *, _QWORD, uint64_t, __n128);
  _BYTE v49[24];
  uint64_t v50;
  unint64_t v51;
  _BYTE v52[32];

  v6 = v4;
  v44 = a2;
  v9 = type metadata accessor for DispatchPredicate(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (uint64_t *)((char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = *(void **)(v4 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v12 = v13;
  v14 = *(void (**)(_QWORD))(v10 + 104);
  v47 = enum case for DispatchPredicate.onQueue(_:);
  v48 = (void (*)(_QWORD *, _QWORD, uint64_t, __n128))v14;
  v14(v12);
  v15 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)(v12);
  v46 = *(void (**)(_QWORD *, uint64_t))(v10 + 8);
  v46(v12, v9);
  if ((v13 & 1) == 0)
  {
    __break(1u);
    __break(1u);
    goto LABEL_19;
  }
  v45 = a4;
  v50 = 0;
  v51 = 0xE000000000000000;
  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease(v51);
  v16 = *(_QWORD *)(v6 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v17 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v17, v52);
  swift_retain(v16);
  v19 = sub_1006B77CC(v18, 0xD00000000000005BLL, 0x8000000100FEF680);
  v20 = swift_release(v16);
  if (v5)
    return;
  v21 = a3 >> 60;
  if (a3 >> 60 == 15)
  {
    v24 = *(void **)(*(_QWORD *)(v19 + 16) + 32);
    *v12 = v24;
    v48(v12, v47, v9, v20);
    v25 = v24;
    LOBYTE(v24) = _dispatchPreconditionTest(_:)(v12);
    v23 = v46;
    v46(v12, v9);
    if ((v24 & 1) != 0)
    {
      swift_beginAccess(v19 + 24, &v50, 0, 0);
      sqlite3_bind_null(*(sqlite3_stmt **)(v19 + 24), 1);
      goto LABEL_7;
    }
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v22 = v44;
  sub_1004BE310(v44, a3);
  sub_1006B5E80(v22, a3);
  sub_1004BE2FC(v22, a3);
  v23 = v46;
LABEL_7:
  sub_1006B59FC((v21 < 0xF) & v45, 2);
  v26 = sub_10067BA88();
  v28 = v26;
  v29 = v27;
  sub_1006B5E80(v26, v27);
  sub_1004BBBC8(v28, v29);
  v30 = *(void **)(*(_QWORD *)(v19 + 16) + 32);
  *v12 = v30;
  ((void (*)(_QWORD *, _QWORD, uint64_t))v48)(v12, v47, v9);
  v31 = v30;
  LOBYTE(v30) = _dispatchPreconditionTest(_:)(v12);
  v23(v12, v9);
  if ((v30 & 1) == 0)
    goto LABEL_20;
  v32 = (sqlite3_stmt **)(v19 + 24);
  swift_beginAccess(v19 + 24, v49, 1, 0);
  v33 = sqlite3_step(*(sqlite3_stmt **)(v19 + 24));
  v34 = 0xD000000000000023;
  if (v33 != 101)
    goto LABEL_15;
  v35 = *(void **)(*(_QWORD *)(v19 + 16) + 32);
  *v12 = v35;
  ((void (*)(_QWORD *, _QWORD, uint64_t))v48)(v12, v47, v9);
  v36 = v35;
  v34 = _dispatchPreconditionTest(_:)(v12);
  v33 = ((uint64_t (*)(_QWORD *, uint64_t))v23)(v12, v9);
  if ((v34 & 1) == 0)
  {
    __break(1u);
LABEL_15:
    v37 = v33;
    v38 = sub_1006B79EC();
    swift_allocError(&type metadata for SQLiteError, v38, 0, 0);
    *(_DWORD *)v39 = v37;
    *(_QWORD *)(v39 + 8) = v34;
    *(_QWORD *)(v39 + 16) = 0x8000000100FEF6E0;
    swift_willThrow(v40);
    v41 = *(void **)(*(_QWORD *)(v19 + 16) + 32);
    *v12 = v41;
    ((void (*)(_QWORD *, _QWORD, uint64_t))v48)(v12, v47, v9);
    v42 = v41;
    v43 = _dispatchPreconditionTest(_:)(v12);
    v23(v12, v9);
    if ((v43 & 1) != 0)
      goto LABEL_16;
LABEL_21:
    __break(1u);
  }
LABEL_16:
  if (*v32)
  {
    sqlite3_finalize(*v32);
    *v32 = 0;
  }
  swift_release(v19);
}

void sub_100A8F258(_QWORD *a1, int a2, uint64_t a3, unint64_t a4, int a5, int a6)
{
  char *v6;
  double v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  void *v60;
  id v61;
  _QWORD *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  unint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  void *v76;
  void *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  void (*v94)(unint64_t, uint64_t, uint64_t);
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  __n128 v107;
  _BOOL8 v108;
  void *v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  double v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t inited;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  int v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  void *v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  __n128 v173;
  double v174;
  uint64_t v175;
  double v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  __n128 v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  sqlite3_stmt **v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  __n128 v202;
  uint64_t v203;
  uint64_t v204;
  void *v205;
  _QWORD *v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  unint64_t v210;
  char v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  char v215;
  _QWORD *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char v225;
  int *v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  int v233;
  uint64_t v234;
  int v235;
  unint64_t v236;
  _QWORD *v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  char v242;
  uint64_t v243;
  int *v244;
  unint64_t v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  id v249;
  uint64_t v250;
  unint64_t v251;
  unint64_t v252;
  unint64_t v253;
  __n128 v254;
  uint64_t v255;
  unint64_t v256;
  double v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t v265;
  sqlite3_stmt **v266;
  unint64_t v267;
  unint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  _QWORD *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  unint64_t v278;
  void *v279;
  unint64_t v280;
  _QWORD *v281;
  unint64_t v282;
  unint64_t v283;
  char v284;
  unint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  char *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  sqlite3_stmt **v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  sqlite3_stmt **v299;
  uint64_t v300;
  uint64_t v301;
  unint64_t v302;
  uint64_t *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  unint64_t v313;
  uint64_t v314;
  uint64_t v315;
  id v316;
  __int128 v317;
  uint64_t v318;
  unint64_t v319;
  unint64_t v320;
  _BOOL8 v321;
  double v322;
  _QWORD *v323;
  int *v324;
  unint64_t v325;
  char *v326;
  _QWORD *v327;
  char v328[8];
  char v329[8];
  char v330[8];
  double v331;
  double v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  char v336;
  __int128 v337;
  __int128 v338;
  char v339;
  char v340[8];

  LODWORD(v314) = a6;
  LODWORD(v322) = a5;
  v313 = a4;
  v309 = a3;
  LODWORD(v321) = a2;
  v327 = a1;
  v297 = type metadata accessor for CRLUserBoardMetadataCRDTData(0);
  v9 = __chkstk_darwin(v297);
  v295 = (uint64_t)&v285 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v298 = (uint64_t)&v285 - v11;
  v300 = type metadata accessor for CRLAssetReferrerIdentifier(0);
  v12 = __chkstk_darwin(v300);
  v293 = (sqlite3_stmt **)((char *)&v285 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = __chkstk_darwin(v12);
  v296 = (uint64_t)&v285 - v15;
  __chkstk_darwin(v14);
  v299 = (sqlite3_stmt **)((char *)&v285 - v16);
  v315 = type metadata accessor for CRLSharedBoardMetadataCRDTData(0);
  v17 = __chkstk_darwin(v315);
  v305 = (uint64_t)&v285 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v304 = (uint64_t)&v285 - v19;
  v20 = sub_1004B804C(&qword_101406B10);
  __chkstk_darwin(v20);
  *(_QWORD *)&v317 = (char *)&v285 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v324 = (int *)type metadata accessor for CRLBoardCRDTData(0);
  v316 = (id)*((_QWORD *)v324 - 1);
  v22 = __chkstk_darwin(v324);
  v302 = (unint64_t)&v285 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v301 = (uint64_t)&v285 - v25;
  v26 = __chkstk_darwin(v24);
  v312 = (uint64_t)&v285 - v27;
  v28 = __chkstk_darwin(v26);
  v320 = (unint64_t)&v285 - v29;
  v30 = __chkstk_darwin(v28);
  v308 = (uint64_t)&v285 - v31;
  v32 = __chkstk_darwin(v30);
  v307 = (uint64_t)&v285 - v33;
  v34 = __chkstk_darwin(v32);
  v306 = (uint64_t)&v285 - v35;
  __chkstk_darwin(v34);
  v37 = (char *)&v285 - v36;
  v38 = type metadata accessor for UUID(0);
  v319 = *(_QWORD *)(v38 - 8);
  v39 = __chkstk_darwin(v38);
  v303 = (uint64_t *)((char *)&v285 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0));
  v41 = __chkstk_darwin(v39);
  v311 = (uint64_t)&v285 - v42;
  __chkstk_darwin(v41);
  v44 = (char *)&v285 - v43;
  v45 = type metadata accessor for CRLBoardIdentifier(0);
  v290 = *(_QWORD *)(v45 - 8);
  v46 = __chkstk_darwin(v45);
  v292 = (uint64_t)&v285 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = __chkstk_darwin(v46);
  v291 = (uint64_t)&v285 - v49;
  v50 = __chkstk_darwin(v48);
  v294 = (uint64_t)&v285 - v51;
  v52 = __chkstk_darwin(v50);
  v310 = (uint64_t)&v285 - v53;
  __chkstk_darwin(v52);
  v55 = (char *)&v285 - v54;
  v56 = type metadata accessor for DispatchPredicate(0);
  v57 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  v59 = (unint64_t *)((char *)&v285 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0));
  v326 = v6;
  v60 = *(void **)&v6[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue];
  *v59 = v60;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v57 + 104))(v59, enum case for DispatchPredicate.onQueue(_:), v56);
  v61 = v60;
  LOBYTE(v60) = _dispatchPreconditionTest(_:)(v59);
  (*(void (**)(_QWORD *, uint64_t))(v57 + 8))(v59, v56);
  if ((v60 & 1) == 0)
  {
    __break(1u);
    goto LABEL_89;
  }
  v318 = v38;
  v62 = v327;
  v63 = (char *)v327 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess((char *)v327 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v340, 0, 0);
  sub_1004B8460((uint64_t)v63, (uint64_t)v37, type metadata accessor for CRLBoardCRDTData);
  v64 = sub_1004B804C(&qword_1013E1A80);
  CRRegister.wrappedValue.getter(v64);
  v323 = v37;
  sub_1004B84A4((uint64_t)v37, type metadata accessor for CRLBoardCRDTData);
  v65 = (uint64_t)v44;
  v66 = *(_QWORD *)((char *)v62 + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
  v67 = *(_QWORD *)((char *)v62 + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName + 8);
  swift_bridgeObjectRetain(v67);
  v68 = v65;
  sub_10067AFD0(v65, v66, v67, (uint64_t)v55);
  v69 = v326;
  v70 = v325;
  v71 = sub_100A80ED8();
  if (v70)
  {
    sub_1004B84A4((uint64_t)v55, type metadata accessor for CRLBoardIdentifier);
    v72 = v327;
    v37 = v69;
LABEL_4:
    sub_100A918A8((uint64_t)v37, (uint64_t)v72);
    return;
  }
  v73 = v71;
  v286 = v66;
  v288 = v64;
  v289 = v63;
  v287 = v68;
  sub_1004B84A4((uint64_t)v55, type metadata accessor for CRLBoardIdentifier);
  if (!v73)
  {
    v77 = v324;
    if ((LOBYTE(v322) & 1) != 0 || (v314 & 1) != 0)
    {
      v285 = v67;
      v108 = !v321;
      v109 = *(void **)&v69[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_crdtContext];
      v110 = v312;
      sub_1004B8460((uint64_t)v289, v312, type metadata accessor for CRLBoardCRDTData);
      v111 = v327;
      if (qword_1013DCB10 != -1)
        swift_once(&qword_1013DCB10, sub_1005DE88C);
      v112 = type metadata accessor for CRCodableVersion(0);
      v113 = sub_1004F2A1C(v112, (uint64_t)qword_10147EB08);
      v114 = sub_1004B7878((unint64_t *)&unk_101405DC0, type metadata accessor for CRLBoardCRDTData, (uint64_t)&unk_100F3A2D0);
      v159 = CRDT.serializedData(_:version:)(v109, v113, v77, v114);
      v316 = v109;
      v325 = v160;
      v161 = v110;
      v162 = v111;
      v321 = v108;
      sub_1004B84A4(v161, type metadata accessor for CRLBoardCRDTData);
      v163 = (uint64_t)v289;
      v322 = *(double *)&v159;
      v164 = (uint64_t)v323;
      sub_1004B8460((uint64_t)v289, (uint64_t)v323, type metadata accessor for CRLBoardCRDTData);
      v165 = v287;
      v166 = v288;
      v320 = 0;
      CRRegister.wrappedValue.getter(v288);
      sub_1004B84A4(v164, type metadata accessor for CRLBoardCRDTData);
      v167 = v285;
      swift_bridgeObjectRetain(v285);
      sub_10067AFD0(v165, v286, v167, v310);
      v319 = v162[3];
      v318 = v162[4];
      *(_QWORD *)&v317 = v162[5];
      v168 = v301;
      sub_1004B8460(v163, v301, type metadata accessor for CRLBoardCRDTData);
      CRRegister.wrappedValue.getter(v166);
      sub_1004B84A4(v168, type metadata accessor for CRLBoardCRDTData);
      v169 = v302;
      sub_1004B8460(v163, v302, type metadata accessor for CRLBoardCRDTData);
      type metadata accessor for CRLBoardRootContainerAffinityCRDTData(0);
      v170 = (uint64_t)v303;
      CRRegister.wrappedValue.getter(v166);
      sub_1004B84A4(v169, type metadata accessor for CRLBoardCRDTData);
      v171 = v309;
      v172 = v313;
      sub_10057939C(v309, v313);
      sub_1004BE310(*(uint64_t *)&v322, v325);
      v174 = static Date.timeIntervalSinceReferenceDate.getter(v173);
      sub_1004B8460(v163, v164, type metadata accessor for CRLBoardCRDTData);
      v175 = sub_1004B804C(&qword_1013FE148);
      CRMaxRegister.wrappedValue.getter(&v332, v175);
      v176 = v332;
      sub_1004B84A4(v164, type metadata accessor for CRLBoardCRDTData);
      sub_1004B8460(v163, v164, type metadata accessor for CRLBoardCRDTData);
      v177 = sub_1004B804C((uint64_t *)&unk_1013F5590);
      CRRegister.wrappedValue.getter(v177);
      LOBYTE(v162) = LOBYTE(v332);
      v178 = v164;
      v179 = *(_QWORD *)&v322;
      v37 = v326;
      sub_1004B84A4(v178, type metadata accessor for CRLBoardCRDTData);
      v180 = type metadata accessor for CRLBoardDatabaseRow(0);
      swift_allocObject(v180, *(unsigned int *)(v180 + 48), *(unsigned __int16 *)(v180 + 52));
      v284 = (char)v162;
      v181 = v325;
      v182 = sub_1009FFA00(v310, v319, v318, v317, v311, v170, v179, v325, v174, v176, 0, v321, 0, v171, v172, 0, 0, 0xF000000000000000, v284);
      v183 = v320;
      sub_100A92830(v182);
      if (v183)
      {
        swift_release(v182);
        sub_1004BBBC8(v179, v181);
        goto LABEL_22;
      }
      v189 = v298;
      *(_QWORD *)(v298 + *(int *)(v297 + 36)) = &_swiftEmptyDictionarySingleton;
      LOBYTE(v332) = 0;
      CRRegister.init(wrappedValue:)(&v332, &type metadata for Bool, &protocol witness table for Bool);
      LOBYTE(v332) = 1;
      CRRegister.init(wrappedValue:)(&v332, &type metadata for Bool, &protocol witness table for Bool);
      LOBYTE(v332) = 1;
      CRRegister.init(wrappedValue:)(&v332, &type metadata for Bool, &protocol witness table for Bool);
      LOBYTE(v332) = 0;
      CRRegister.init(wrappedValue:)(&v332, &type metadata for Bool, &protocol witness table for Bool);
      LOBYTE(v332) = 0;
      CRRegister.init(wrappedValue:)(&v332, &type metadata for Bool, &protocol witness table for Bool);
      v191 = type metadata accessor for JSONEncoder(0, v190);
      swift_allocObject(v191, *(unsigned int *)(v191 + 48), *(unsigned __int16 *)(v191 + 52));
      v192 = JSONEncoder.init()();
      v332 = 1.0;
      v333 = 0;
      v334 = 0;
      v335 = 0;
      v336 = 1;
      v337 = xmmword_100F062D0;
      v338 = xmmword_100F062D0;
      v339 = 0;
      v193 = sub_100AFF250();
      v244 = (int *)dispatch thunk of JSONEncoder.encode<A>(_:)(&v332, &type metadata for CRLBoardViewState, v193);
      v246 = v245;
      swift_release(v192);
      v247 = v294;
      sub_1004B8460(v182 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_boardIdentifier, v294, type metadata accessor for CRLBoardIdentifier);
      v324 = v244;
      v248 = v295;
      sub_1004B8460(v189, v295, type metadata accessor for CRLUserBoardMetadataCRDTData);
      v249 = v316;
      sub_1004BE310((uint64_t)v324, v246);
      v250 = sub_10073ED48(v247, v248, (uint64_t)v249, (uint64_t)v324, v246, 0, 1, 1uLL, 0, 0xF000000000000000, 0x1000000000000);
      v251 = v246;
      v255 = v250;
      v320 = v251;

      sub_100A93444(v255);
      v256 = v325;
      v262 = sub_1008D5968((uint64_t)_swiftEmptyArrayStorage);
      v263 = (uint64_t)v323;
      sub_1004B8460((uint64_t)v289, (uint64_t)v323, type metadata accessor for CRLBoardCRDTData);
      v264 = v287;
      CRRegister.wrappedValue.getter(v288);
      sub_1004B84A4(v263, type metadata accessor for CRLBoardCRDTData);
      v265 = v285;
      swift_bridgeObjectRetain(v285);
      v266 = v293;
      sub_10067AFD0(v264, v286, v265, (uint64_t)v293);
      swift_storeEnumTagMultiPayload(v266, v300, 0);
      v267 = sub_1008D5968((uint64_t)_swiftEmptyArrayStorage);
      v268 = v267;
      if (*(_QWORD *)(v267 + 16) || *(_QWORD *)(v262 + 16))
      {
        v319 = v262;
        v269 = sub_100A89A08(v267, v262, 0);
        v271 = v270;
        swift_bridgeObjectRetain(v270);
        v272 = sub_100600358(v271);
        swift_bridgeObjectRelease(v271);
        sub_100A8AEC4(v293, v272);
        swift_release(v272);
        sub_100A8B5F4((uint64_t)v293, v269, v321);
        swift_bridgeObjectRelease(v271);
        swift_bridgeObjectRelease(v269);
        v262 = v319;
      }
      sub_1004B84A4((uint64_t)v293, type metadata accessor for CRLAssetReferrerIdentifier);
      swift_bridgeObjectRelease(v262);
      swift_bridgeObjectRelease(v268);
      v281 = v327;
      v282 = v327[3];
      swift_retain_n(v327, 2);
      v283 = sub_1001E9730();
      swift_release(v182);
      swift_release(v255);
      sub_1004BBBC8((uint64_t)v324, v320);
      sub_1004BBBC8(*(uint64_t *)&v322, v256);
      swift_release(v281);
      sub_1004B84A4(v298, type metadata accessor for CRLUserBoardMetadataCRDTData);
      if (v283 >= v282)
      {
        v257 = COERCE_DOUBLE(&_swiftEmptySetSingleton);
        v37 = v326;
        goto LABEL_84;
      }
      v37 = v326;
      v59 = v323;
      goto LABEL_83;
    }
    v78 = v327;
    goto LABEL_24;
  }
  v311 = OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_isLocalTombstone;
  LODWORD(v314) = *(unsigned __int8 *)(v73 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_isLocalTombstone);
  v74 = *(_QWORD *)(v73 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_unsyncedChanges);
  v75 = *(_QWORD *)(v73 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_data + 8);
  v76 = v324;
  v325 = v73;
  v285 = v67;
  v310 = OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_unsyncedChanges;
  v303 = (uint64_t *)(v73 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_data);
  if (v75 >> 60 == 15)
  {
    v78 = v327;
    if ((LOBYTE(v322) & 1) != 0)
    {
      swift_retain(v327);
      v82 = sub_1008D5968((uint64_t)_swiftEmptyArrayStorage);
      swift_bridgeObjectRetain(v82);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
      v332 = COERCE_DOUBLE(&_swiftEmptyDictionarySingleton);
      sub_100AF23D8(v82, (uint64_t)sub_100AF236C, 0, isUniquelyReferenced_nonNull_native, (uint64_t *)&v332);
      v312 = 0;
      v84 = v74 | 2;
      if ((_DWORD)v314)
        v84 = 4;
      if (v321)
        v84 = 0;
      v302 = v84;
      v322 = v332;
      swift_bridgeObjectRelease(v82);
      swift_bridgeObjectRelease(0x8000000000000000);
      LODWORD(v305) = 0;
      LODWORD(v307) = 0;
      LODWORD(v306) = 0;
      LODWORD(v301) = 1;
      *(_QWORD *)&v317 = &_swiftEmptyDictionarySingleton;
      v85 = v325;
      goto LABEL_18;
    }
    swift_bridgeObjectRelease_n(&_swiftEmptyDictionarySingleton, 2);
    swift_release(v73);
LABEL_24:
    v37 = v69;
LABEL_25:
    sub_100A918A8((uint64_t)v37, (uint64_t)v78);
    return;
  }
  v302 = v74;
  v79 = *(_QWORD *)(v73 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_data);
  sub_10057939C(v79, v75);
  sub_10057939C(v79, v75);
  v80 = sub_1004B7878((unint64_t *)&unk_101405DC0, type metadata accessor for CRLBoardCRDTData, (uint64_t)&unk_100F3A2D0);
  swift_retain(v73);
  v81 = v317;
  CRDT.init(serializedData:)(v79, v75, v76, v80);
  v312 = 0;
  (*((void (**)(uint64_t, _QWORD, uint64_t, void *))v316 + 7))(v81, 0, 1, v76);
  v140 = v81;
  v141 = v306;
  sub_1004B84E0(v140, v306, type metadata accessor for CRLBoardCRDTData);
  v317 = *(_OWORD *)(v73 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_minRequiredVersions);
  v142 = *(_QWORD *)(v73 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_minRequiredVersions + 16);
  v143 = (uint64_t)v323;
  sub_1004B8460(v141, (uint64_t)v323, type metadata accessor for CRLBoardCRDTData);
  v144 = v73;
  v145 = OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_boardIdentifier;
  v146 = (uint64_t *)(v144 + v145 + *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20));
  v148 = *v146;
  v147 = v146[1];
  v149 = type metadata accessor for CRLBoardData(0);
  v150 = swift_allocObject(v149, *(unsigned int *)(v149 + 48), *(unsigned __int16 *)(v149 + 52));
  *(_QWORD *)(v150 + 16) = 7;
  *(_OWORD *)(v150 + 24) = v317;
  *(_QWORD *)(v150 + 40) = v142;
  v151 = v143;
  v152 = (_QWORD *)v150;
  sub_1004B84E0(v151, v150 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, type metadata accessor for CRLBoardCRDTData);
  swift_bridgeObjectRetain(v147);
  swift_release(v144);
  sub_1004BE2FC(v79, v75);
  v153 = (_QWORD *)((char *)v152 + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
  *v153 = v148;
  v153[1] = v147;
  sub_1004B84A4(v141, type metadata accessor for CRLBoardCRDTData);
  if (v321)
  {
    v154 = v314;
    if (v321)
    {
      v155 = (v302 >> 2) & 1;
      v156 = sub_100A91A58(v327);
      v157 = v156;
      v158 = v324;
      if ((v154 & v155) == 1)
      {
        v302 = v156 | 4;
LABEL_49:
        LODWORD(v301) = 1;
        v322 = COERCE_DOUBLE(&_swiftEmptyDictionarySingleton);
        *(_QWORD *)&v317 = &_swiftEmptyDictionarySingleton;
        LODWORD(v306) = 1;
        goto LABEL_62;
      }
      if ((v154 & 1) != 0)
      {
        v302 = v156;
        LODWORD(v306) = LODWORD(v322) ^ 1;
LABEL_57:
        LODWORD(v301) = 1;
        v322 = COERCE_DOUBLE(&_swiftEmptyDictionarySingleton);
        *(_QWORD *)&v317 = &_swiftEmptyDictionarySingleton;
        goto LABEL_62;
      }
    }
    else
    {
      v157 = 0;
      v158 = v324;
      if ((v314 & 1) != 0)
      {
        v302 = 0;
        goto LABEL_49;
      }
    }
  }
  else
  {
    v188 = sub_100A91A58(v152);
    v157 = v188 | v302;
    v158 = v324;
    if ((_DWORD)v314)
    {
      LODWORD(v306) = LODWORD(v322) ^ 1;
      if ((LOBYTE(v322) & 1) != 0)
        v157 |= 4uLL;
      v302 = v157;
      goto LABEL_57;
    }
  }
  v207 = (uint64_t)v323;
  sub_1004B8460((uint64_t)v289, (uint64_t)v323, type metadata accessor for CRLBoardCRDTData);
  v208 = (char *)v152 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess((char *)v152 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v329, 0, 0);
  v209 = sub_1004B7878((unint64_t *)&unk_101405DD0, type metadata accessor for CRLBoardCRDTData, (uint64_t)&unk_100F3A468);
  LOBYTE(v208) = CRStruct_6.hasDelta(from:)(v208, v158, v209);
  sub_1004B84A4(v207, type metadata accessor for CRLBoardCRDTData);
  v302 = v157;
  if ((v208 & 1) != 0)
  {
    v210 = sub_1008D5968((uint64_t)_swiftEmptyArrayStorage);
    swift_bridgeObjectRetain(v210);
    v211 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    v332 = COERCE_DOUBLE(&_swiftEmptyDictionarySingleton);
    v212 = v312;
    sub_100AF23D8(v210, (uint64_t)sub_100AF236C, 0, v211, (uint64_t *)&v332);
    if (v212)
      goto LABEL_99;
    v213 = *(_QWORD *)&v332;
    swift_bridgeObjectRelease(v210);
    swift_bridgeObjectRelease(0x8000000000000000);
    v214 = sub_1008D5968((uint64_t)_swiftEmptyArrayStorage);
    swift_bridgeObjectRetain(v214);
    v215 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    v332 = COERCE_DOUBLE(&_swiftEmptyDictionarySingleton);
    sub_100AF23D8(v214, (uint64_t)sub_100AF236C, 0, v215, (uint64_t *)&v332);
    v312 = 0;
    *(_QWORD *)&v317 = v213;
    v322 = v332;
    swift_bridgeObjectRelease(v214);
    swift_bridgeObjectRelease(0x8000000000000000);
    LODWORD(v301) = 0;
    LODWORD(v306) = 0;
  }
  else
  {
    LODWORD(v301) = 0;
    LODWORD(v306) = 0;
    v322 = COERCE_DOUBLE(&_swiftEmptyDictionarySingleton);
    *(_QWORD *)&v317 = &_swiftEmptyDictionarySingleton;
  }
LABEL_62:
  v216 = v152;
  v217 = (uint64_t)v152 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess((char *)v152 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v328, 0, 0);
  v218 = v307;
  sub_1004B8460(v217, v307, type metadata accessor for CRLBoardCRDTData);
  v219 = sub_1004B804C(&qword_1013E1980);
  CRRegister.wrappedValue.getter(v219);
  v221 = *(_QWORD *)&v332;
  v220 = v333;
  sub_1004B84A4(v218, type metadata accessor for CRLBoardCRDTData);
  v222 = v308;
  sub_1004B8460((uint64_t)v289, v308, type metadata accessor for CRLBoardCRDTData);
  CRRegister.wrappedValue.getter(v219);
  v224 = *(_QWORD *)&v332;
  v223 = v333;
  sub_1004B84A4(v222, type metadata accessor for CRLBoardCRDTData);
  if (v221 == v224 && v220 == v223)
  {
    swift_bridgeObjectRelease_n(v220, 2);
  }
  else
  {
    v225 = _stringCompareWithSmolCheck(_:_:expecting:)(v221, v220, v224, v223, 0);
    swift_bridgeObjectRelease(v220);
    swift_bridgeObjectRelease(v223);
    if ((v225 & 1) == 0)
    {
      v233 = 1;
      goto LABEL_68;
    }
  }
  v226 = v324;
  v227 = v304;
  sub_1004B8460(v217 + v324[8], v304, type metadata accessor for CRLSharedBoardMetadataCRDTData);
  v228 = sub_1004B804C((uint64_t *)&unk_1013F5590);
  CRRegister.wrappedValue.getter(v228);
  v229 = LOBYTE(v332);
  sub_1004B84A4(v227, type metadata accessor for CRLSharedBoardMetadataCRDTData);
  v230 = (uint64_t)&v289[v226[8]];
  v231 = v305;
  sub_1004B8460(v230, v305, type metadata accessor for CRLSharedBoardMetadataCRDTData);
  CRRegister.wrappedValue.getter(v228);
  v232 = LOBYTE(v332);
  sub_1004B84A4(v231, type metadata accessor for CRLSharedBoardMetadataCRDTData);
  v233 = v229 ^ v232;
LABEL_68:
  LODWORD(v305) = v233;
  v234 = (uint64_t)v323;
  v235 = v314;
  v236 = v216[3];
  LODWORD(v307) = sub_1001E9730() < v236;
  if (v321 == 2)
  {
    v237 = v327;
    swift_retain(v327);
    v78 = v237;
  }
  else
  {
    sub_1004B8460((uint64_t)v289, v234, type metadata accessor for CRLBoardCRDTData);
    swift_beginAccess(v217, &v332, 33, 0);
    v238 = sub_1004B7878((unint64_t *)&unk_101405DD0, type metadata accessor for CRLBoardCRDTData, (uint64_t)&unk_100F3A468);
    swift_retain_n(v216, 2);
    CRStruct_6.merge(_:)(v234, v324, v238);
    sub_1004B84A4(v234, type metadata accessor for CRLBoardCRDTData);
    swift_endAccess(&v332);
    v239 = v327[5];
    *(_OWORD *)(v216 + 3) = *(_OWORD *)(v327 + 3);
    v216[5] = v239;
    sub_100DD0B74();
    swift_release(v216);
    v78 = v216;
  }
  v85 = v325;
  if (!v235)
  {
    swift_release(v216);
    goto LABEL_18;
  }
  if ((v306 & 1) != 0)
  {
    swift_release(v216);
    LODWORD(v306) = 1;
LABEL_18:
    v314 = OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_lastActivityTime;
    v7 = *(double *)(v85 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_lastActivityTime);
    v86 = (uint64_t)v78 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
    swift_beginAccess((char *)v78 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, &v332, 0, 0);
    v87 = (uint64_t)v323;
    sub_1004B8460(v86, (uint64_t)v323, type metadata accessor for CRLBoardCRDTData);
    v88 = v324;
    swift_retain(v78);
    v308 = sub_1004B804C(&qword_1013FE148);
    CRMaxRegister.wrappedValue.getter(&v331, v308);
    v8 = v331;
    sub_1004B84A4(v87, type metadata accessor for CRLBoardCRDTData);
    v89 = v78[5];
    v90 = v85 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_minRequiredVersions;
    v316 = v78;
    *(_OWORD *)v90 = *(_OWORD *)(v78 + 3);
    *(_QWORD *)(v90 + 16) = v89;
    sub_1004B8460(v86, v87, type metadata accessor for CRLBoardCRDTData);
    v91 = v287;
    v92 = v288;
    CRRegister.wrappedValue.getter(v288);
    sub_1004B84A4(v87, type metadata accessor for CRLBoardCRDTData);
    v93 = v85 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_rootContainerUUID;
    swift_beginAccess(v85 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_rootContainerUUID, &v331, 33, 0);
    v94 = *(void (**)(unint64_t, uint64_t, uint64_t))(v319 + 40);
    v95 = v318;
    v94(v93, v91, v318);
    swift_endAccess(&v331);
    sub_1004B8460(v86, v87, type metadata accessor for CRLBoardCRDTData);
    type metadata accessor for CRLBoardRootContainerAffinityCRDTData(0);
    CRRegister.wrappedValue.getter(v92);
    sub_1004B84A4(v87, type metadata accessor for CRLBoardCRDTData);
    v96 = v85 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_alternateRootContainerUUID;
    swift_beginAccess(v85 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_alternateRootContainerUUID, &v331, 33, 0);
    v97 = v95;
    v98 = v86;
    v94(v96, v91, v97);
    swift_endAccess(&v331);
    v99 = *(_QWORD *)&v326[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_crdtContext];
    v100 = v320;
    sub_1004B8460(v86, v320, type metadata accessor for CRLBoardCRDTData);
    if (qword_1013DCB10 != -1)
      swift_once(&qword_1013DCB10, sub_1005DE88C);
    v101 = type metadata accessor for CRCodableVersion(0);
    v102 = sub_1004F2A1C(v101, (uint64_t)qword_10147EB08);
    v103 = sub_1004B7878((unint64_t *)&unk_101405DC0, type metadata accessor for CRLBoardCRDTData, (uint64_t)&unk_100F3A2D0);
    v104 = v312;
    v105 = CRDT.serializedData(_:version:)(v99, v102, v88, v103);
    if (v104)
    {
      sub_1004B84A4(v100, type metadata accessor for CRLBoardCRDTData);
      swift_bridgeObjectRelease(v317);
      swift_bridgeObjectRelease(*(_QWORD *)&v322);
      v107 = swift_release(v325);
      swift_release_n(v316, 2, v107);
      v37 = v326;
LABEL_22:
      v72 = v327;
      goto LABEL_4;
    }
    v115 = v105;
    v116 = v106;
    sub_1004B84A4(v100, type metadata accessor for CRLBoardCRDTData);
    v117 = v303;
    v118 = *v303;
    v119 = v303[1];
    *v303 = v115;
    v117[1] = v116;
    sub_1004BE2FC(v118, v119);
    v120 = (uint64_t)v323;
    sub_1004B8460(v98, (uint64_t)v323, type metadata accessor for CRLBoardCRDTData);
    CRMaxRegister.wrappedValue.getter(&v331, v308);
    v121 = v331;
    sub_1004B84A4(v120, type metadata accessor for CRLBoardCRDTData);
    v122 = v325;
    *(double *)(v325 + v314) = v121;
    *(_QWORD *)(v122 + v310) = v302;
    *(_BYTE *)(v122 + v311) = v306 & 1;
    v123 = OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_isDiscardable;
    LOBYTE(v116) = *(_BYTE *)(v122 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_isDiscardable);
    sub_1004B8460(v98, v120, type metadata accessor for CRLBoardCRDTData);
    v124 = sub_1004B804C((uint64_t *)&unk_1013F5590);
    CRRegister.wrappedValue.getter(v124);
    v125 = LOBYTE(v331);
    sub_1004B84A4(v120, type metadata accessor for CRLBoardCRDTData);
    *(_BYTE *)(v122 + v123) = v125;
    v126 = v316;
    if ((v116 & 1) == 0 && v125)
    {
      v127 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      inited = swift_initStackObject(v127, v330);
      *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
      v129 = UUID.uuidString.getter(inited);
      v131 = v130;
      *(_QWORD *)(inited + 56) = &type metadata for String;
      *(_QWORD *)(inited + 64) = sub_1004CFC2C();
      *(_QWORD *)(inited + 32) = v129;
      *(_QWORD *)(inited + 40) = v131;
      sub_100757E04(&_mh_execute_header, (uint64_t)"_mergeBoardData(_:syncChangeTrackingType:syncDataToOverwrite:canSaveNewBoardOrUndeleteTombstone:incomingDataIsServerData:)", 122, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2, 3685, "Non-discardable board became discardable for %{public}@. This can cause data loss.", 82, 2u, inited);
      sub_1004F5394(inited, (uint64_t)"_mergeBoardData(_:syncChangeTrackingType:syncDataToOverwrite:canSaveNewBoardOrUndeleteTombstone:incomingDataIsServerData:)", 122, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2u, 3685, (uint64_t)"Non-discardable board became discardable for %{public}@. This can cause data loss.", 82, 2u);
      swift_setDeallocating(inited);
      v132 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(inited + 32, 1, v132);
    }
    v133 = v313;
    if (v313 >> 60 != 15)
    {
      v134 = (_QWORD *)(v325 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_syncData);
      v135 = *(_QWORD *)(v325 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_syncData);
      v136 = *(_QWORD *)(v325 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_syncData + 8);
      v137 = v309;
      *v134 = v309;
      v134[1] = v133;
      sub_1004BE310(v137, v133);
      sub_1004BE2FC(v135, v136);
    }
    v37 = v326;
    sub_100A91BDC(v325);
    v138 = (uint64_t)v323;
    v139 = *(_QWORD *)&v322;
    v320 = 0;
    if (v321)
    {
      v184 = sub_1008D5968((uint64_t)_swiftEmptyArrayStorage);
      sub_100A66064(v184);
      v186 = v185;
      swift_bridgeObjectRetain(v139);
      v324 = (int *)sub_100DB9810(v187, v186);
      swift_bridgeObjectRelease(v139);
    }
    else
    {
      v324 = (int *)&_swiftEmptySetSingleton;
    }
    v194 = v139;
    sub_1004B8460((uint64_t)v289, v138, type metadata accessor for CRLBoardCRDTData);
    v195 = v287;
    CRRegister.wrappedValue.getter(v288);
    v196 = v195;
    sub_1004B84A4(v138, type metadata accessor for CRLBoardCRDTData);
    v197 = v285;
    swift_bridgeObjectRetain(v285);
    v198 = v299;
    sub_10067AFD0(v195, v286, v197, (uint64_t)v299);
    v199 = v300;
    swift_storeEnumTagMultiPayload(v198, v300, 0);
    v200 = v317;
    v201 = v320;
    sub_100A87C6C(v198, v317, v194, v301, 1);
    if (v201)
    {
      sub_1004B84A4((uint64_t)v198, type metadata accessor for CRLAssetReferrerIdentifier);
      v202 = swift_release(v325);
      swift_release_n(v126, 2, v202);
      swift_bridgeObjectRelease(v200);
      swift_bridgeObjectRelease(v194);
      swift_bridgeObjectRelease(v324);
      goto LABEL_22;
    }
    sub_1004B84A4((uint64_t)v198, type metadata accessor for CRLAssetReferrerIdentifier);
    swift_bridgeObjectRelease(v200);
    swift_bridgeObjectRelease(v194);
    v203 = (uint64_t)v323;
    sub_1004B8460((uint64_t)v289, (uint64_t)v323, type metadata accessor for CRLBoardCRDTData);
    CRRegister.wrappedValue.getter(v288);
    sub_1004B84A4(v203, type metadata accessor for CRLBoardCRDTData);
    swift_bridgeObjectRetain(v197);
    v204 = v296;
    sub_10067AFD0(v196, v286, v197, v296);
    swift_storeEnumTagMultiPayload(v204, v199, 0);
    v205 = v324;
    v206 = sub_1005FF8B0((uint64_t)v324);
    swift_bridgeObjectRelease(v205);
    sub_100A87D74(v204, (uint64_t)v206, 0);
    v59 = v323;
    sub_1004B84A4(v204, type metadata accessor for CRLAssetReferrerIdentifier);
    swift_release(v206);
    v252 = v126[3];
    swift_retain(v126);
    v253 = sub_1001E9730();
    swift_release_n(v126, 2, v254);
    swift_release(v325);
    if ((_DWORD)v307)
    {
      if ((v305 & 1) != 0)
        goto LABEL_82;
      goto LABEL_89;
    }
    if (v253 >= v252)
    {
      if ((v305 & 1) != 0)
      {
LABEL_82:
        v257 = COERCE_DOUBLE(&_swiftEmptySetSingleton);
LABEL_84:
        sub_100A75388((uint64_t)&_swiftEmptySetSingleton, *(uint64_t *)&v257, 0);
        swift_bridgeObjectRelease(*(_QWORD *)&v257);
LABEL_95:
        v78 = v327;
        goto LABEL_25;
      }
LABEL_89:
      if (v7 != v8)
      {
        v273 = sub_1004B804C(&qword_1013E7870);
        v274 = *(unsigned __int8 *)(v290 + 80);
        v275 = (v274 + 32) & ~v274;
        v276 = swift_allocObject(v273, v275 + *(_QWORD *)(v290 + 72), v274 | 7);
        *(_OWORD *)(v276 + 16) = xmmword_100EF5E40;
        sub_1004B8460((uint64_t)v289, (uint64_t)v59, type metadata accessor for CRLBoardCRDTData);
        v277 = v287;
        CRRegister.wrappedValue.getter(v288);
        sub_1004B84A4((uint64_t)v59, type metadata accessor for CRLBoardCRDTData);
        v278 = v285;
        swift_bridgeObjectRetain(v285);
        sub_10067AFD0(v277, v286, v278, v276 + v275);
        if (*(_QWORD *)(v276 + 16))
          v279 = sub_1004B5A78(v276);
        else
          v279 = &_swiftEmptySetSingleton;
        swift_bridgeObjectRelease(v276);
        v280 = sub_1008D800C((uint64_t)_swiftEmptyArrayStorage);
        sub_100A75778((uint64_t)v279, 0, 0, v280);
        swift_bridgeObjectRelease(v279);
        swift_bridgeObjectRelease(v280);
      }
      goto LABEL_95;
    }
LABEL_83:
    v331 = COERCE_DOUBLE(&_swiftEmptySetSingleton);
    sub_1004B8460((uint64_t)v289, (uint64_t)v59, type metadata accessor for CRLBoardCRDTData);
    v258 = v287;
    CRRegister.wrappedValue.getter(v288);
    sub_1004B84A4((uint64_t)v59, type metadata accessor for CRLBoardCRDTData);
    v259 = v285;
    swift_bridgeObjectRetain(v285);
    v260 = v292;
    sub_10067AFD0(v258, v286, v259, v292);
    v261 = v291;
    sub_100AD7844(v291, v260);
    sub_1004B84A4(v261, type metadata accessor for CRLBoardIdentifier);
    v257 = v331;
    goto LABEL_84;
  }
  swift_retain(v78);
  v240 = sub_1008D5968((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRetain(v240);
  *(double *)&v241 = v322;
  v242 = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)&v322);
  v332 = *(double *)&v241;
  v243 = v312;
  sub_100AF23D8(v240, (uint64_t)sub_100AF236C, 0, v242, (uint64_t *)&v332);
  v312 = v243;
  if (!v243)
  {
    v322 = v332;
    swift_release(v78);
    swift_bridgeObjectRelease(v240);
    swift_release(v216);
    swift_bridgeObjectRelease(0x8000000000000000);
    LODWORD(v306) = 0;
    LODWORD(v301) = 1;
    v85 = v325;
    goto LABEL_18;
  }
LABEL_99:
  swift_bridgeObjectRelease(0x8000000000000000);
  __break(1u);
}

uint64_t sub_100A918A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE v18[24];
  _BYTE v19[24];

  v4 = type metadata accessor for CRLBoardCRDTData(0);
  __chkstk_darwin(v4);
  v6 = &v18[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for UUID(0);
  __chkstk_darwin(v7);
  v9 = &v18[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v10);
  v12 = &v18[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = a2 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess(a2 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v19, 0, 0);
  sub_1004B8460(v13, (uint64_t)v6, type metadata accessor for CRLBoardCRDTData);
  v14 = sub_1004B804C(&qword_1013E1A80);
  CRRegister.wrappedValue.getter(v14);
  sub_1004B84A4((uint64_t)v6, type metadata accessor for CRLBoardCRDTData);
  v15 = *(_QWORD *)(a2 + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
  v16 = *(_QWORD *)(a2 + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName + 8);
  swift_bridgeObjectRetain(v16);
  sub_10067AFD0((uint64_t)v9, v15, v16, (uint64_t)v12);
  swift_beginAccess(a1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_transientSyncExclusions, v18, 33, 0);
  sub_100D5798C((uint64_t)v12, 1);
  swift_endAccess(v18);
  return sub_1004B84A4((uint64_t)v12, type metadata accessor for CRLBoardIdentifier);
}

uint64_t sub_100A91A58(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[24];
  _BYTE v16[24];

  v2 = v1;
  v4 = type metadata accessor for CRLBoardCRDTData(0);
  v5 = __chkstk_darwin(v4);
  v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  v9 = &v15[-v8];
  v10 = (uint64_t)v2 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess((char *)v2 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v16, 0, 0);
  sub_1004B8460(v10, (uint64_t)v9, type metadata accessor for CRLBoardCRDTData);
  v11 = (uint64_t)a1 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess((char *)a1 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v15, 0, 0);
  sub_1004B8460(v11, (uint64_t)v7, type metadata accessor for CRLBoardCRDTData);
  v12 = sub_1004B7878((unint64_t *)&unk_101405DD0, type metadata accessor for CRLBoardCRDTData, (uint64_t)&unk_100F3A468);
  LOBYTE(v4) = CRStruct_6.hasDelta(from:)(v7, v4, v12);
  sub_1004B84A4((uint64_t)v7, type metadata accessor for CRLBoardCRDTData);
  sub_1004B84A4((uint64_t)v9, type metadata accessor for CRLBoardCRDTData);
  v13 = 2;
  if ((v4 & 1) == 0)
    v13 = 0;
  if (v2[3] != a1[3])
    v13 |= 8uLL;
  if (v2[4] != a1[4])
    v13 |= 0x20uLL;
  if (v2[5] == a1[5])
    return v13;
  else
    return v13 | 0x40;
}

void sub_100A91BDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  void (*v12)(_QWORD *);
  id v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  Swift::String v42;
  Swift::String v43;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;
  Swift::String v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t, sqlite3_stmt **);
  uint64_t v59;
  char *v60;
  char *v61;
  sqlite3_stmt **v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  void (*v66)(char *, sqlite3_stmt **);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  void *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(_QWORD *, uint64_t, uint64_t);
  id v80;
  void (*v81)(_QWORD *, uint64_t);
  uint64_t v82;
  uint64_t *v83;
  unint64_t v84;
  void *v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  double v89;
  void *v90;
  id v91;
  uint64_t *v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  id v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  double v101;
  void *v102;
  uint64_t v103;
  id v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  id v110;
  sqlite3_stmt **v111;
  uint64_t v112;
  unint64_t v113;
  void *v114;
  uint64_t v115;
  void (*v116)(_QWORD *, uint64_t, uint64_t);
  id v117;
  int v118;
  void *v119;
  id v120;
  int v121;
  unint64_t v122;
  uint64_t v123;
  __n128 v124;
  void *v125;
  id v126;
  uint64_t v127;
  _QWORD *v128;
  void (*v129)(_QWORD *, uint64_t, uint64_t);
  void (*v130)(_QWORD *, uint64_t);
  uint64_t v131;
  sqlite3_stmt **v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  char v136[24];
  char v137[24];
  char v138[24];
  char v139[24];
  uint64_t v140;
  unint64_t v141;
  char v142[32];

  v3 = v1;
  v132 = (sqlite3_stmt **)type metadata accessor for UUID(0);
  v131 = (uint64_t)*(v132 - 1);
  __chkstk_darwin(v132);
  v6 = (char *)&v127 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (uint64_t *)((char *)&v127 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v10 = v11;
  v12 = *(void (**)(_QWORD *))(v8 + 104);
  v135 = enum case for DispatchPredicate.onQueue(_:);
  v12(v10);
  v13 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v10);
  v130 = *(void (**)(_QWORD *, uint64_t))(v8 + 8);
  v130(v10, v7);
  if ((v11 & 1) == 0)
  {
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v134 = a1;
  v140 = 0;
  v141 = 0xE000000000000000;
  _StringGuts.grow(_:)(146);
  v14._countAndFlagsBits = 0x20455441445055;
  v14._object = (void *)0xE700000000000000;
  String.append(_:)(v14);
  v15._countAndFlagsBits = 0x736472616F62;
  v15._object = (void *)0xE600000000000000;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0x2054455320;
  v16._object = (void *)0xE500000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0x656E6961746E6F63;
  v17._object = (void *)0xEE00646975755F72;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 0x202C3F203D20;
  v18._object = (void *)0xE600000000000000;
  String.append(_:)(v18);
  v19._object = (void *)0x8000000100FEEC30;
  v19._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 0x202C3F203D20;
  v20._object = (void *)0xE600000000000000;
  String.append(_:)(v20);
  v21._countAndFlagsBits = 1635017060;
  v21._object = (void *)0xE400000000000000;
  String.append(_:)(v21);
  v22._countAndFlagsBits = 0x202C3F203D20;
  v22._object = (void *)0xE600000000000000;
  String.append(_:)(v22);
  v23._countAndFlagsBits = 0x6E6F7473626D6F74;
  v23._object = (void *)0xEA00000000006465;
  String.append(_:)(v23);
  v24._countAndFlagsBits = 0x202C3F203D20;
  v24._object = (void *)0xE600000000000000;
  String.append(_:)(v24);
  v25._object = (void *)0x8000000100FEEB40;
  v25._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v25);
  v26._countAndFlagsBits = 0x202C3F203D20;
  v26._object = (void *)0xE600000000000000;
  String.append(_:)(v26);
  v27._object = (void *)0x8000000100FEF020;
  v27._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v27);
  v28._countAndFlagsBits = 0x202C3F203D20;
  v28._object = (void *)0xE600000000000000;
  String.append(_:)(v28);
  v29._countAndFlagsBits = 0x7461645F636E7973;
  v29._object = (void *)0xE900000000000061;
  String.append(_:)(v29);
  v30._countAndFlagsBits = 0x202C3F203D20;
  v30._object = (void *)0xE600000000000000;
  String.append(_:)(v30);
  v31._countAndFlagsBits = 0x6E6F7473626D6F74;
  v31._object = (void *)0xEE00657461645F65;
  String.append(_:)(v31);
  v32._countAndFlagsBits = 0x202C3F203D20;
  v32._object = (void *)0xE600000000000000;
  String.append(_:)(v32);
  v33._countAndFlagsBits = 0xD00000000000001ALL;
  v33._object = (void *)0x8000000100FEF040;
  String.append(_:)(v33);
  v34._countAndFlagsBits = 0x202C3F203D20;
  v34._object = (void *)0xE600000000000000;
  String.append(_:)(v34);
  v35._countAndFlagsBits = 0x5F65726168736B63;
  v35._object = (void *)0xEC00000061746164;
  String.append(_:)(v35);
  v36._countAndFlagsBits = 0x202C3F203D20;
  v36._object = (void *)0xE600000000000000;
  String.append(_:)(v36);
  v37._countAndFlagsBits = 0xD000000000000014;
  v37._object = (void *)0x8000000100FEEDE0;
  String.append(_:)(v37);
  v38._countAndFlagsBits = 0x202C3F203D20;
  v38._object = (void *)0xE600000000000000;
  String.append(_:)(v38);
  v39._countAndFlagsBits = 0xD000000000000012;
  v39._object = (void *)0x8000000100FEF060;
  String.append(_:)(v39);
  v40._countAndFlagsBits = 0x202C3F203D20;
  v40._object = (void *)0xE600000000000000;
  String.append(_:)(v40);
  v41._countAndFlagsBits = 0x61637369645F7369;
  v41._object = (void *)0xEE00656C62616472;
  String.append(_:)(v41);
  v42._countAndFlagsBits = 0x202C3F203D20;
  v42._object = (void *)0xE600000000000000;
  String.append(_:)(v42);
  v43._countAndFlagsBits = 0xD00000000000002DLL;
  v43._object = (void *)0x8000000100FEEFF0;
  String.append(_:)(v43);
  v44._countAndFlagsBits = 0x202C3F203D20;
  v44._object = (void *)0xE600000000000000;
  String.append(_:)(v44);
  v45._countAndFlagsBits = 0xD000000000000026;
  v45._object = (void *)0x8000000100FEEB60;
  String.append(_:)(v45);
  v46._countAndFlagsBits = 0x48570A203F203D20;
  v46._object = (void *)0xEC00000020455245;
  String.append(_:)(v46);
  v47._object = (void *)0x8000000100FD6350;
  v47._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v47);
  v48._countAndFlagsBits = 1059077408;
  v48._object = (void *)0xE400000000000000;
  String.append(_:)(v48);
  v49 = v140;
  v50 = v141;
  v51 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v52 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v52, v142);
  swift_retain(v51);
  v54 = sub_1006B77CC(v53, v49, v50);
  swift_release(v51);
  if (v2)
    return;
  v128 = v10;
  v127 = 0;
  v133 = v7;
  v129 = (void (*)(_QWORD *, uint64_t, uint64_t))v12;
  v55 = v134;
  v56 = v134 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_rootContainerUUID;
  swift_beginAccess(v134 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_rootContainerUUID, &v140, 0, 0);
  v57 = v131;
  v58 = *(void (**)(char *, uint64_t, sqlite3_stmt **))(v131 + 16);
  v59 = v54;
  v60 = v6;
  v61 = v6;
  v62 = v132;
  v58(v61, v56, v132);
  v63 = UUID.crl_data()();
  v65 = v64;
  sub_1006B5E80(v63, v64);
  sub_1004BBBC8(v63, v65);
  v66 = *(void (**)(char *, sqlite3_stmt **))(v57 + 8);
  v66(v60, v62);
  v67 = v55 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_alternateRootContainerUUID;
  swift_beginAccess(v55 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_alternateRootContainerUUID, v139, 0, 0);
  v58(v60, v67, v62);
  v68 = UUID.crl_data()();
  v70 = v69;
  sub_1006B5E80(v68, v69);
  sub_1004BBBC8(v68, v70);
  v66(v60, v62);
  v71 = v55;
  v72 = (uint64_t *)(v55 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_data);
  v73 = *(_QWORD *)(v55 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_data + 8);
  if (v73 >> 60 == 15)
  {
    v74 = v59;
    v75 = *(void **)(*(_QWORD *)(v59 + 16) + 32);
    v76 = v128;
    *v128 = v75;
    v77 = v135;
    v78 = v133;
    v79 = v129;
    v129(v76, v135, v133);
    v80 = v75;
    LOBYTE(v75) = _dispatchPreconditionTest(_:)(v76);
    v81 = v130;
    v130(v76, v78);
    if ((v75 & 1) == 0)
    {
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    swift_beginAccess(v74 + 24, v138, 0, 0);
    sqlite3_bind_null(*(sqlite3_stmt **)(v74 + 24), 3);
  }
  else
  {
    v82 = *v72;
    sub_1004BE310(*v72, *(_QWORD *)(v55 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_data + 8));
    v74 = v59;
    sub_1006B5E80(v82, v73);
    sub_1004BE2FC(v82, v73);
    v81 = v130;
    v79 = v129;
    v77 = v135;
    v78 = v133;
    v76 = v128;
  }
  sub_1006B59FC(*(_BYTE *)(v71 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_isLocalTombstone), 4);
  sub_1006B5B50(*(_QWORD *)(v71 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_unsyncedChanges), 5);
  sub_1006B59FC(*(_BYTE *)(v71 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_ckShareUnsyncedChanges), 6);
  v83 = (uint64_t *)(v71 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_syncData);
  v84 = *(_QWORD *)(v71 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_syncData + 8);
  if (v84 >> 60 == 15)
  {
    v85 = *(void **)(*(_QWORD *)(v74 + 16) + 32);
    *v76 = v85;
    v79(v76, v77, v78);
    v86 = v85;
    LOBYTE(v85) = _dispatchPreconditionTest(_:)(v76);
    v81(v76, v78);
    if ((v85 & 1) == 0)
    {
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    swift_beginAccess(v74 + 24, v137, 0, 0);
    sqlite3_bind_null(*(sqlite3_stmt **)(v74 + 24), 7);
  }
  else
  {
    v87 = *v83;
    sub_1004BE310(*v83, *(_QWORD *)(v71 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_syncData + 8));
    sub_1006B5E80(v87, v84);
    v88 = v87;
    v77 = v135;
    sub_1004BE2FC(v88, v84);
  }
  v89 = *(double *)(v71 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_tombstoneDate);
  v90 = *(void **)(*(_QWORD *)(v74 + 16) + 32);
  *v76 = v90;
  v79(v76, v77, v78);
  v91 = v90;
  LOBYTE(v90) = _dispatchPreconditionTest(_:)(v76);
  v81(v76, v78);
  if ((v90 & 1) == 0)
    goto LABEL_30;
  v132 = (sqlite3_stmt **)(v74 + 24);
  swift_beginAccess(v74 + 24, v136, 1, 0);
  sqlite3_bind_double(*(sqlite3_stmt **)(v74 + 24), 8, v89);
  sub_1006B59FC(*(_BYTE *)(v71 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_hideFromRecentlyDeleted), 9);
  v92 = (uint64_t *)(v71 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_ckShareData);
  v93 = *(_QWORD *)(v71 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_ckShareData + 8);
  if (v93 >> 60 == 15)
  {
    v94 = *(void **)(*(_QWORD *)(v74 + 16) + 32);
    *v76 = v94;
    v95 = v133;
    v79(v76, v77, v133);
    v96 = v94;
    LOBYTE(v94) = _dispatchPreconditionTest(_:)(v76);
    v81(v76, v95);
    if ((v94 & 1) == 0)
    {
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    sqlite3_bind_null(*v132, 10);
  }
  else
  {
    v97 = *v92;
    sub_1004BE310(*v92, *(_QWORD *)(v71 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_ckShareData + 8));
    sub_1006B5E80(v97, v93);
    v98 = v97;
    v77 = v135;
    sub_1004BE2FC(v98, v93);
  }
  v99 = v134;
  v100 = v134 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_minRequiredVersions;
  sub_1006B5B50(*(_QWORD *)(v134 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_minRequiredVersions), 11);
  v101 = *(double *)(v99 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_lastActivityTime);
  v102 = *(void **)(*(_QWORD *)(v74 + 16) + 32);
  *v76 = v102;
  v103 = v133;
  v79(v76, v77, v133);
  v104 = v102;
  LOBYTE(v102) = _dispatchPreconditionTest(_:)(v76);
  v81(v76, v103);
  if ((v102 & 1) == 0)
    goto LABEL_31;
  sqlite3_bind_double(*(sqlite3_stmt **)(v74 + 24), 12, v101);
  sub_1006B59FC(*(_BYTE *)(v99 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_isDiscardable), 13);
  sub_1006B5B50(*(_QWORD *)(v100 + 8), 14);
  sub_1006B5B50(*(_QWORD *)(v100 + 16), 15);
  v105 = v127;
  v106 = sub_10067BA88();
  if (!v105)
  {
    v112 = v106;
    v113 = v107;
    sub_1006B5E80(v106, v107);
    sub_1004BBBC8(v112, v113);
    v114 = *(void **)(*(_QWORD *)(v74 + 16) + 32);
    *v76 = v114;
    v115 = v133;
    v116 = v129;
    v129(v76, v77, v133);
    v117 = v114;
    LOBYTE(v114) = _dispatchPreconditionTest(_:)(v76);
    v81(v76, v115);
    if ((v114 & 1) != 0)
    {
      v111 = v132;
      v118 = sqlite3_step(*v132);
      if (v118 == 101)
      {
        v119 = *(void **)(*(_QWORD *)(v74 + 16) + 32);
        *v76 = v119;
        v116(v76, v77, v115);
        v120 = v119;
        LOBYTE(v119) = _dispatchPreconditionTest(_:)(v76);
        v118 = ((uint64_t (*)(_QWORD *, uint64_t))v81)(v76, v115);
        if ((v119 & 1) != 0)
          goto LABEL_25;
        __break(1u);
      }
      v121 = v118;
      v122 = sub_1006B79EC();
      swift_allocError(&type metadata for SQLiteError, v122, 0, 0);
      *(_DWORD *)v123 = v121;
      *(_QWORD *)(v123 + 8) = 0xD000000000000016;
      *(_QWORD *)(v123 + 16) = 0x8000000100FEFDE0;
      swift_willThrow(v124);
      v125 = *(void **)(*(_QWORD *)(v74 + 16) + 32);
      *v76 = v125;
      v116(v76, v77, v115);
      v126 = v125;
      LOBYTE(v125) = _dispatchPreconditionTest(_:)(v76);
      v81(v76, v115);
      if ((v125 & 1) != 0)
        goto LABEL_25;
LABEL_37:
      __break(1u);
    }
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v108 = *(void **)(*(_QWORD *)(v74 + 16) + 32);
  *v76 = v108;
  v109 = v133;
  v129(v76, v77, v133);
  v110 = v108;
  LOBYTE(v108) = _dispatchPreconditionTest(_:)(v76);
  v81(v76, v109);
  if ((v108 & 1) == 0)
    goto LABEL_32;
  v111 = v132;
LABEL_25:
  if (*v111)
  {
    sqlite3_finalize(*v111);
    *v111 = 0;
  }
  swift_release(v74);
}

void sub_100A92830(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  void (*v11)(_QWORD *);
  id v12;
  void (*v13)(_QWORD *, uint64_t);
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  Swift::String v42;
  Swift::String v43;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;
  Swift::String v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  sqlite3_stmt **v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  void (*v67)(char *, sqlite3_stmt **);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t *v72;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(_QWORD *, uint64_t, uint64_t);
  id v78;
  void (*v79)(_QWORD *, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  unint64_t v83;
  void *v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  double v89;
  void *v90;
  id v91;
  uint64_t *v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(_QWORD *, uint64_t, uint64_t);
  id v99;
  void (*v100)(_QWORD *, uint64_t);
  uint64_t v101;
  uint64_t v102;
  double v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  id v107;
  void *v108;
  id v109;
  sqlite3_stmt **v110;
  int v111;
  void *v112;
  uint64_t v113;
  id v114;
  sqlite3_stmt *v115;
  int v116;
  unint64_t v117;
  uint64_t v118;
  __n128 v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  id v123;
  uint64_t v124;
  void (*v125)(char *, uint64_t, sqlite3_stmt **);
  void (*v126)(_QWORD *, uint64_t, uint64_t);
  void (*v127)(_QWORD *, uint64_t);
  uint64_t v128;
  uint64_t v129;
  char *v130;
  sqlite3_stmt **v131;
  unsigned int v132;
  uint64_t v133;
  uint64_t v134;
  char v135[24];
  char v136[24];
  char v137[24];
  char v138[24];
  uint64_t v139;
  unint64_t v140;
  char v141[32];

  v3 = v1;
  v131 = (sqlite3_stmt **)type metadata accessor for UUID(0);
  v129 = (uint64_t)*(v131 - 1);
  __chkstk_darwin(v131);
  v130 = (char *)&v124 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (uint64_t *)((char *)&v124 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v9 = v10;
  v11 = *(void (**)(_QWORD *))(v7 + 104);
  v132 = enum case for DispatchPredicate.onQueue(_:);
  v11(v9);
  v12 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  v13 = *(void (**)(_QWORD *, uint64_t))(v7 + 8);
  v134 = v6;
  v13(v9, v6);
  if ((v10 & 1) == 0)
  {
    __break(1u);
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v133 = a1;
  v139 = 0;
  v140 = 0xE000000000000000;
  _StringGuts.grow(_:)(135);
  v14._countAndFlagsBits = 0x4920545245534E49;
  v14._object = (void *)0xEC000000204F544ELL;
  String.append(_:)(v14);
  v15._countAndFlagsBits = 0x736472616F62;
  v15._object = (void *)0xE600000000000000;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 10272;
  v16._object = (void *)0xE200000000000000;
  String.append(_:)(v16);
  v17._object = (void *)0x8000000100FD6350;
  v17._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 8236;
  v18._object = (void *)0xE200000000000000;
  String.append(_:)(v18);
  v19._object = (void *)0xEA0000000000656DLL;
  v19._countAndFlagsBits = 0x616E5F72656E776FLL;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 8236;
  v20._object = (void *)0xE200000000000000;
  String.append(_:)(v20);
  v21._countAndFlagsBits = 0x656E6961746E6F63;
  v21._object = (void *)0xEE00646975755F72;
  String.append(_:)(v21);
  v22._countAndFlagsBits = 8236;
  v22._object = (void *)0xE200000000000000;
  String.append(_:)(v22);
  v23._countAndFlagsBits = 0xD000000000000018;
  v23._object = (void *)0x8000000100FEEC30;
  String.append(_:)(v23);
  v24._countAndFlagsBits = 8236;
  v24._object = (void *)0xE200000000000000;
  String.append(_:)(v24);
  v25._countAndFlagsBits = 1635017060;
  v25._object = (void *)0xE400000000000000;
  String.append(_:)(v25);
  v26._countAndFlagsBits = 8236;
  v26._object = (void *)0xE200000000000000;
  String.append(_:)(v26);
  v27._countAndFlagsBits = 0x6E6F7473626D6F74;
  v27._object = (void *)0xEA00000000006465;
  String.append(_:)(v27);
  v28._countAndFlagsBits = 8236;
  v28._object = (void *)0xE200000000000000;
  String.append(_:)(v28);
  v29._object = (void *)0x8000000100FEEB40;
  v29._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v29);
  v30._countAndFlagsBits = 8236;
  v30._object = (void *)0xE200000000000000;
  String.append(_:)(v30);
  v31._countAndFlagsBits = 0x7461645F636E7973;
  v31._object = (void *)0xE900000000000061;
  String.append(_:)(v31);
  v32._countAndFlagsBits = 8236;
  v32._object = (void *)0xE200000000000000;
  String.append(_:)(v32);
  v33._countAndFlagsBits = 0x6E6F7473626D6F74;
  v33._object = (void *)0xEE00657461645F65;
  String.append(_:)(v33);
  v34._countAndFlagsBits = 8236;
  v34._object = (void *)0xE200000000000000;
  String.append(_:)(v34);
  v35._countAndFlagsBits = 0xD00000000000001ALL;
  v35._object = (void *)0x8000000100FEF040;
  String.append(_:)(v35);
  v36._countAndFlagsBits = 8236;
  v36._object = (void *)0xE200000000000000;
  String.append(_:)(v36);
  v37._countAndFlagsBits = 0x5F65726168736B63;
  v37._object = (void *)0xEC00000061746164;
  String.append(_:)(v37);
  v38._countAndFlagsBits = 8236;
  v38._object = (void *)0xE200000000000000;
  String.append(_:)(v38);
  v39._countAndFlagsBits = 0xD000000000000014;
  v39._object = (void *)0x8000000100FEEDE0;
  String.append(_:)(v39);
  v40._countAndFlagsBits = 8236;
  v40._object = (void *)0xE200000000000000;
  String.append(_:)(v40);
  v41._countAndFlagsBits = 0xD000000000000012;
  v41._object = (void *)0x8000000100FEF060;
  String.append(_:)(v41);
  v42._countAndFlagsBits = 8236;
  v42._object = (void *)0xE200000000000000;
  String.append(_:)(v42);
  v43._countAndFlagsBits = 0x61637369645F7369;
  v43._object = (void *)0xEE00656C62616472;
  String.append(_:)(v43);
  v44._countAndFlagsBits = 8236;
  v44._object = (void *)0xE200000000000000;
  String.append(_:)(v44);
  v45._countAndFlagsBits = 0xD00000000000002DLL;
  v45._object = (void *)0x8000000100FEEFF0;
  String.append(_:)(v45);
  v46._countAndFlagsBits = 8236;
  v46._object = (void *)0xE200000000000000;
  String.append(_:)(v46);
  v47._countAndFlagsBits = 0xD000000000000026;
  v47._object = (void *)0x8000000100FEEB60;
  String.append(_:)(v47);
  v48._countAndFlagsBits = 0xD000000000000039;
  v48._object = (void *)0x8000000100FF0270;
  String.append(_:)(v48);
  v49 = v139;
  v50 = v140;
  v51 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v52 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v52, v141);
  swift_retain(v51);
  v54 = sub_1006B77CC(v53, v49, v50);
  swift_release(v51);
  if (v2)
    return;
  v55 = v133;
  v56 = sub_10067BA88();
  v128 = 0;
  v57 = v56;
  v59 = v58;
  v126 = (void (*)(_QWORD *, uint64_t, uint64_t))v11;
  v127 = v13;
  sub_1006B5E80(v56, v58);
  sub_1004BBBC8(v57, v59);
  sub_1006B5CA4(*(_QWORD *)(v55 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_ownerName), *(_QWORD *)(v55 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_ownerName + 8), 2);
  v60 = v55 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_rootContainerUUID;
  swift_beginAccess(v55 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_rootContainerUUID, &v139, 0, 0);
  v61 = v129;
  v125 = *(void (**)(char *, uint64_t, sqlite3_stmt **))(v129 + 16);
  v62 = v130;
  v63 = v131;
  v125(v130, v60, v131);
  v64 = UUID.crl_data()();
  v66 = v65;
  sub_1006B5E80(v64, v65);
  sub_1004BBBC8(v64, v66);
  v67 = *(void (**)(char *, sqlite3_stmt **))(v61 + 8);
  v67(v62, v63);
  v68 = v55 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_alternateRootContainerUUID;
  swift_beginAccess(v55 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_alternateRootContainerUUID, v138, 0, 0);
  v125(v62, v68, v63);
  v69 = UUID.crl_data()();
  v71 = v70;
  sub_1006B5E80(v69, v70);
  sub_1004BBBC8(v69, v71);
  v67(v62, v63);
  v72 = (uint64_t *)(v55 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_data);
  v73 = *(_QWORD *)(v55 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_data + 8);
  if (v73 >> 60 == 15)
  {
    v74 = *(void **)(*(_QWORD *)(v54 + 16) + 32);
    *v9 = v74;
    v75 = v132;
    v76 = v134;
    v77 = v126;
    v126(v9, v132, v134);
    v78 = v74;
    LOBYTE(v74) = _dispatchPreconditionTest(_:)(v9);
    v79 = v127;
    v127(v9, v76);
    if ((v74 & 1) == 0)
    {
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    swift_beginAccess(v54 + 24, v137, 0, 0);
    sqlite3_bind_null(*(sqlite3_stmt **)(v54 + 24), 5);
  }
  else
  {
    v80 = *v72;
    sub_1004BE310(*v72, *(_QWORD *)(v55 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_data + 8));
    sub_1006B5E80(v80, v73);
    sub_1004BE2FC(v80, v73);
    v79 = v127;
    v77 = v126;
    v75 = v132;
    v76 = v134;
  }
  v81 = v133;
  sub_1006B59FC(*(_BYTE *)(v133 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_isLocalTombstone), 6);
  sub_1006B5B50(*(_QWORD *)(v81 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_unsyncedChanges), 7);
  v82 = (uint64_t *)(v81 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_syncData);
  v83 = *(_QWORD *)(v81 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_syncData + 8);
  if (v83 >> 60 == 15)
  {
    v84 = *(void **)(*(_QWORD *)(v54 + 16) + 32);
    *v9 = v84;
    v77(v9, v75, v76);
    v85 = v84;
    LOBYTE(v84) = _dispatchPreconditionTest(_:)(v9);
    v79(v9, v76);
    if ((v84 & 1) == 0)
    {
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    swift_beginAccess(v54 + 24, v136, 0, 0);
    sqlite3_bind_null(*(sqlite3_stmt **)(v54 + 24), 8);
  }
  else
  {
    v86 = *v82;
    sub_1004BE310(*v82, *(_QWORD *)(v81 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_syncData + 8));
    sub_1006B5E80(v86, v83);
    v87 = v86;
    v75 = v132;
    sub_1004BE2FC(v87, v83);
  }
  v88 = v133;
  v89 = *(double *)(v133 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_tombstoneDate);
  v90 = *(void **)(*(_QWORD *)(v54 + 16) + 32);
  *v9 = v90;
  v77(v9, v75, v76);
  v91 = v90;
  LOBYTE(v90) = _dispatchPreconditionTest(_:)(v9);
  v79(v9, v76);
  if ((v90 & 1) == 0)
    goto LABEL_28;
  swift_beginAccess(v54 + 24, v135, 1, 0);
  sqlite3_bind_double(*(sqlite3_stmt **)(v54 + 24), 9, v89);
  sub_1006B59FC(*(_BYTE *)(v88 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_hideFromRecentlyDeleted), 10);
  v92 = (uint64_t *)(v88 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_ckShareData);
  v93 = *(_QWORD *)(v88 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_ckShareData + 8);
  v131 = (sqlite3_stmt **)(v54 + 24);
  if (v93 >> 60 == 15)
  {
    v94 = *(void **)(*(_QWORD *)(v54 + 16) + 32);
    *v9 = v94;
    v95 = v75;
    v96 = v76;
    v97 = v76;
    v98 = v126;
    v126(v9, v95, v96);
    v99 = v94;
    LOBYTE(v94) = _dispatchPreconditionTest(_:)(v9);
    v100 = v127;
    v127(v9, v97);
    if ((v94 & 1) == 0)
    {
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    sqlite3_bind_null(*(sqlite3_stmt **)(v54 + 24), 11);
  }
  else
  {
    v101 = *v92;
    sub_1004BE310(*v92, v93);
    sub_1006B5E80(v101, v93);
    sub_1004BE2FC(v101, v93);
    v100 = v127;
    v98 = v126;
  }
  v102 = v88 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_minRequiredVersions;
  sub_1006B5B50(*(_QWORD *)(v88 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_minRequiredVersions), 12);
  v103 = *(double *)(v88 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_lastActivityTime);
  v104 = *(void **)(*(_QWORD *)(v54 + 16) + 32);
  *v9 = v104;
  v105 = v132;
  v106 = v134;
  v98(v9, v132, v134);
  v107 = v104;
  LOBYTE(v104) = _dispatchPreconditionTest(_:)(v9);
  v100(v9, v106);
  if ((v104 & 1) == 0)
    goto LABEL_29;
  sqlite3_bind_double(*(sqlite3_stmt **)(v54 + 24), 13, v103);
  sub_1006B59FC(*(_BYTE *)(v88 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_isDiscardable), 14);
  sub_1006B5B50(*(_QWORD *)(v102 + 8), 15);
  sub_1006B5B50(*(_QWORD *)(v102 + 16), 16);
  v108 = *(void **)(*(_QWORD *)(v54 + 16) + 32);
  *v9 = v108;
  v98(v9, v105, v106);
  v109 = v108;
  LOBYTE(v108) = _dispatchPreconditionTest(_:)(v9);
  v100(v9, v106);
  if ((v108 & 1) == 0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v110 = v131;
  v111 = sqlite3_step(*v131);
  if (v111 != 101)
  {
    v116 = v111;
    v117 = sub_1006B79EC();
    swift_allocError(&type metadata for SQLiteError, v117, 0, 0);
    *(_DWORD *)v118 = v116;
    *(_QWORD *)(v118 + 8) = 0xD000000000000016;
    *(_QWORD *)(v118 + 16) = 0x8000000100FF02B0;
    swift_willThrow(v119);
    v120 = *(void **)(*(_QWORD *)(v54 + 16) + 32);
    *v9 = v120;
    v121 = v105;
    v122 = v134;
    v98(v9, v121, v134);
    v123 = v120;
    LOBYTE(v120) = _dispatchPreconditionTest(_:)(v9);
    v100(v9, v122);
    if ((v120 & 1) != 0)
    {
      v115 = *v110;
      if (!*v110)
        goto LABEL_22;
      goto LABEL_21;
    }
LABEL_35:
    __break(1u);
  }
  v112 = *(void **)(*(_QWORD *)(v54 + 16) + 32);
  *v9 = v112;
  v113 = v134;
  v98(v9, v105, v134);
  v114 = v112;
  LOBYTE(v112) = _dispatchPreconditionTest(_:)(v9);
  v100(v9, v113);
  if ((v112 & 1) == 0)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v115 = *v110;
  if (*v110)
  {
LABEL_21:
    sqlite3_finalize(v115);
    *v110 = 0;
  }
LABEL_22:
  swift_release(v54);
}

void sub_100A93444(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  void (*v10)(_QWORD *);
  id v11;
  void (*v12)(_QWORD *, uint64_t);
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  void (*v43)(_QWORD *, _QWORD, uint64_t);
  id v44;
  void (*v45)(_QWORD *, uint64_t);
  void *v46;
  id v47;
  sqlite3_stmt **v48;
  int v49;
  void *v50;
  id v51;
  int v52;
  unint64_t v53;
  uint64_t v54;
  __n128 v55;
  void *v56;
  id v57;
  void (*v58)(_QWORD *, _QWORD, uint64_t);
  void (*v59)(_QWORD *, uint64_t);
  unsigned int v60;
  _BYTE v61[24];
  uint64_t v62;
  unint64_t v63;
  _BYTE v64[32];

  v3 = v1;
  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (void (**)(_QWORD *, _QWORD, uint64_t))((char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v8 = v9;
  v10 = *(void (**)(_QWORD *))(v6 + 104);
  v60 = enum case for DispatchPredicate.onQueue(_:);
  v10(v8);
  v11 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  v12 = *(void (**)(_QWORD *, uint64_t))(v6 + 8);
  v12(v8, v5);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    __break(1u);
    goto LABEL_19;
  }
  v58 = (void (*)(_QWORD *, _QWORD, uint64_t))v10;
  v59 = v12;
  v13 = 0xD000000000000010;
  v62 = 0;
  v63 = 0xE000000000000000;
  _StringGuts.grow(_:)(79);
  v14._countAndFlagsBits = 0x4920545245534E49;
  v14._object = (void *)0xEC000000204F544ELL;
  String.append(_:)(v14);
  v15._countAndFlagsBits = 0x6D5F736472616F62;
  v15._object = (void *)0xEF61746164617465;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 10272;
  v16._object = (void *)0xE200000000000000;
  String.append(_:)(v16);
  v17._object = (void *)0x8000000100FD6350;
  v17._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 8236;
  v18._object = (void *)0xE200000000000000;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 0x7461645F74647263;
  v19._object = (void *)0xE900000000000061;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 8236;
  v20._object = (void *)0xE200000000000000;
  String.append(_:)(v20);
  v21._countAndFlagsBits = 0x726F7661665F7369;
  v21._object = (void *)0xEB00000000657469;
  String.append(_:)(v21);
  v22._countAndFlagsBits = 8236;
  v22._object = (void *)0xE200000000000000;
  String.append(_:)(v22);
  v23._countAndFlagsBits = 0xD00000000000001BLL;
  v23._object = (void *)0x8000000100FEEB00;
  String.append(_:)(v23);
  v24._countAndFlagsBits = 8236;
  v24._object = (void *)0xE200000000000000;
  String.append(_:)(v24);
  v25._countAndFlagsBits = 0x6174735F77656976;
  v25._object = (void *)0xEF617461645F6574;
  String.append(_:)(v25);
  v26._countAndFlagsBits = 8236;
  v26._object = (void *)0xE200000000000000;
  String.append(_:)(v26);
  v27._countAndFlagsBits = 0xD000000000000019;
  v27._object = (void *)0x8000000100FEEB20;
  String.append(_:)(v27);
  v28._countAndFlagsBits = 8236;
  v28._object = (void *)0xE200000000000000;
  String.append(_:)(v28);
  v29._object = (void *)0x8000000100FEEB40;
  v29._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v29);
  v30._countAndFlagsBits = 8236;
  v30._object = (void *)0xE200000000000000;
  String.append(_:)(v30);
  v31._countAndFlagsBits = 0xD000000000000026;
  v31._object = (void *)0x8000000100FEEB60;
  String.append(_:)(v31);
  v32._countAndFlagsBits = 0xD000000000000021;
  v32._object = (void *)0x8000000100FF0220;
  String.append(_:)(v32);
  v33 = v62;
  v34 = v63;
  v35 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v36 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v36, v64);
  swift_retain(v35);
  v38 = sub_1006B77CC(v37, v33, v34);
  swift_release(v35);
  if (v2)
    return;
  v39 = sub_10067BA88();
  v41 = v40;
  sub_1006B5E80(v39, v40);
  sub_1004BBBC8(v39, v41);
  sub_1006B5E80(*(_QWORD *)(a1 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_crdtData), *(_QWORD *)(a1 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_crdtData + 8));
  sub_1006B59FC(*(_BYTE *)(a1 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_isFavorite), 3);
  sub_1006B59FC(*(_BYTE *)(a1 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_enableCollaboratorCursors), 4);
  sub_1006B5E80(*(_QWORD *)(a1 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_viewStateData), *(_QWORD *)(a1 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_viewStateData + 8));
  if ((*(_BYTE *)(a1 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_lastOpenCrashedVersion + 8) & 1) != 0)
  {
    v42 = *(void **)(*(_QWORD *)(v38 + 16) + 32);
    *v8 = v42;
    v43 = v58;
    v58(v8, v60, v5);
    v44 = v42;
    LOBYTE(v42) = _dispatchPreconditionTest(_:)(v8);
    v45 = v59;
    v59(v8, v5);
    if ((v42 & 1) == 0)
    {
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
    swift_beginAccess(v38 + 24, &v62, 0, 0);
    sqlite3_bind_null(*(sqlite3_stmt **)(v38 + 24), 6);
  }
  else
  {
    sub_1006B5B50(*(_QWORD *)(a1 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_lastOpenCrashedVersion), 6);
    v43 = v58;
    v45 = v59;
  }
  sub_1006B5B50(*(_QWORD *)(a1 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_unsyncedChanges), 7);
  sub_1006B5B50(*(_QWORD *)(a1 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_minRequiredVersionForFullFidelity), 8);
  v46 = *(void **)(*(_QWORD *)(v38 + 16) + 32);
  *v8 = v46;
  v43(v8, v60, v5);
  v47 = v46;
  LOBYTE(v46) = _dispatchPreconditionTest(_:)(v8);
  v45(v8, v5);
  if ((v46 & 1) == 0)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v48 = (sqlite3_stmt **)(v38 + 24);
  swift_beginAccess(v38 + 24, v61, 1, 0);
  v49 = sqlite3_step(*(sqlite3_stmt **)(v38 + 24));
  if (v49 != 101)
    goto LABEL_15;
  v50 = *(void **)(*(_QWORD *)(v38 + 16) + 32);
  *v8 = v50;
  v43(v8, v60, v5);
  v51 = v50;
  v13 = _dispatchPreconditionTest(_:)(v8);
  v49 = ((uint64_t (*)(_QWORD *, uint64_t))v45)(v8, v5);
  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_15:
    v52 = v49;
    v53 = sub_1006B79EC();
    swift_allocError(&type metadata for SQLiteError, v53, 0, 0);
    *(_DWORD *)v54 = v52;
    *(_QWORD *)(v54 + 8) = v13 + 15;
    *(_QWORD *)(v54 + 16) = 0x8000000100FF0250;
    swift_willThrow(v55);
    v56 = *(void **)(*(_QWORD *)(v38 + 16) + 32);
    *v8 = v56;
    v43(v8, v60, v5);
    v57 = v56;
    LOBYTE(v56) = _dispatchPreconditionTest(_:)(v8);
    v45(v8, v5);
    if ((v56 & 1) != 0)
      goto LABEL_16;
LABEL_21:
    __break(1u);
  }
LABEL_16:
  if (*v48)
  {
    sqlite3_finalize(*v48);
    *v48 = 0;
  }
  swift_release(v38);
}

uint64_t sub_100A93A98(uint64_t a1, int a2, uint64_t a3, unint64_t a4, int a5)
{
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  _QWORD *v24;
  void *v25;
  id v26;
  uint64_t result;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  char v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  _BYTE v93[24];
  _BYTE v94[24];
  _QWORD v95[4];
  char v96;
  __int128 v97;
  __int128 v98;
  char v99;
  unint64_t v100;

  v7 = v5;
  LODWORD(v91) = a5;
  v100 = a4;
  v92 = a3;
  LODWORD(v88) = a2;
  v86 = type metadata accessor for CRLUserBoardMetadataCRDTData(0);
  __chkstk_darwin(v86);
  v90 = (uint64_t)&v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v78 - v11;
  __chkstk_darwin(v13);
  v87 = (uint64_t)&v78 - v14;
  v15 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v15);
  v89 = (uint64_t)&v78 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v19 = (char *)&v78 - v18;
  v20 = type metadata accessor for DispatchPredicate(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = __chkstk_darwin(v20);
  v24 = (uint64_t *)((char *)&v78 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v25 = *(void **)&v7[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue];
  *v24 = v25;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v21 + 104))(v24, enum case for DispatchPredicate.onQueue(_:), v20, v22);
  v26 = v25;
  LOBYTE(v25) = _dispatchPreconditionTest(_:)(v24);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v21 + 8))(v24, v20);
  if ((v25 & 1) != 0)
  {
    sub_1004B8460(a1 + OBJC_IVAR____TtC8Freeform24CRLUserBoardMetadataData_boardIdentifier, (uint64_t)v19, type metadata accessor for CRLBoardIdentifier);
    v28 = sub_100A94568();
    if (v6)
    {
      sub_1004B84A4((uint64_t)v19, type metadata accessor for CRLBoardIdentifier);
      return (uint64_t)v7;
    }
    v30 = v28;
    v31 = a1;
    if (v28)
    {
      v32 = swift_retain_n(v28, 2);
      v33 = sub_100AF48BC(v32);
      if (v33)
      {
        v34 = v33;
        v85 = (char *)v33;
        v79 = v7;
        v35 = (uint64_t)v19;
        if ((_BYTE)v88)
        {
          if (v88 != 1)
          {
            v83 = 0;
            goto LABEL_28;
          }
          v36 = a1;
          v37 = v33 + OBJC_IVAR____TtC8Freeform24CRLUserBoardMetadataData_crdtData;
          swift_beginAccess(v33 + OBJC_IVAR____TtC8Freeform24CRLUserBoardMetadataData_crdtData, v94, 0, 0);
          v38 = v87;
          sub_1004B8460(v37, v87, type metadata accessor for CRLUserBoardMetadataCRDTData);
          v31 = v36;
          v39 = v36 + OBJC_IVAR____TtC8Freeform24CRLUserBoardMetadataData_crdtData;
          swift_beginAccess(v36 + OBJC_IVAR____TtC8Freeform24CRLUserBoardMetadataData_crdtData, v93, 0, 0);
          sub_1004B8460(v39, (uint64_t)v12, type metadata accessor for CRLUserBoardMetadataCRDTData);
          v40 = sub_1004B7878((unint64_t *)&qword_101402388, type metadata accessor for CRLUserBoardMetadataCRDTData, (uint64_t)&unk_100F39A58);
          LOBYTE(v39) = CRStruct_5.hasDelta(from:)(v12, v86, v40);
          sub_1004B84A4((uint64_t)v12, type metadata accessor for CRLUserBoardMetadataCRDTData);
          v34 = (uint64_t)v85;
          sub_1004B84A4(v38, type metadata accessor for CRLUserBoardMetadataCRDTData);
          v41 = 2;
          if ((v39 & 1) == 0)
            v41 = 0;
          if (*(_QWORD *)(v34 + OBJC_IVAR____TtC8Freeform24CRLUserBoardMetadataData_minRequiredVersionForFullFidelity) != *(_QWORD *)(v36 + OBJC_IVAR____TtC8Freeform24CRLUserBoardMetadataData_minRequiredVersionForFullFidelity))
            v41 |= 4uLL;
        }
        else
        {
          v91 = *(_QWORD *)(v30 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_unsyncedChanges);
          v50 = a1;
          v51 = a1 + OBJC_IVAR____TtC8Freeform24CRLUserBoardMetadataData_crdtData;
          swift_beginAccess(a1 + OBJC_IVAR____TtC8Freeform24CRLUserBoardMetadataData_crdtData, v94, 0, 0);
          v52 = v87;
          sub_1004B8460(v51, v87, type metadata accessor for CRLUserBoardMetadataCRDTData);
          v31 = v50;
          v53 = (uint64_t)&v85[OBJC_IVAR____TtC8Freeform24CRLUserBoardMetadataData_crdtData];
          swift_beginAccess(&v85[OBJC_IVAR____TtC8Freeform24CRLUserBoardMetadataData_crdtData], v93, 0, 0);
          sub_1004B8460(v53, (uint64_t)v12, type metadata accessor for CRLUserBoardMetadataCRDTData);
          v54 = sub_1004B7878((unint64_t *)&qword_101402388, type metadata accessor for CRLUserBoardMetadataCRDTData, (uint64_t)&unk_100F39A58);
          LOBYTE(v53) = CRStruct_5.hasDelta(from:)(v12, v86, v54);
          sub_1004B84A4((uint64_t)v12, type metadata accessor for CRLUserBoardMetadataCRDTData);
          v34 = (uint64_t)v85;
          sub_1004B84A4(v52, type metadata accessor for CRLUserBoardMetadataCRDTData);
          v55 = 2;
          if ((v53 & 1) == 0)
            v55 = 0;
          if (*(_QWORD *)(v50 + OBJC_IVAR____TtC8Freeform24CRLUserBoardMetadataData_minRequiredVersionForFullFidelity) != *(_QWORD *)(v34 + OBJC_IVAR____TtC8Freeform24CRLUserBoardMetadataData_minRequiredVersionForFullFidelity))
            v55 |= 4uLL;
          v41 = v55 | v91;
        }
        v83 = v41;
LABEL_28:
        swift_retain(v34);
        sub_100A13790(v31);
        swift_release(v34);
        swift_release(v30);
        v31 = v34;
        goto LABEL_29;
      }
      swift_release(v30);
      if ((v91 & 1) != 0)
      {
        v79 = v7;
        v35 = (uint64_t)v19;
        v83 = (_BYTE)v88 == 0;
        swift_retain(a1);
        v85 = (char *)a1;
LABEL_29:
        v56 = *(_QWORD *)(v30 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_viewStateData);
        v57 = *(_QWORD *)(v30 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_viewStateData + 8);
        v86 = *(_QWORD *)(v30 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_lastOpenCrashedVersion);
        v82 = *(unsigned __int8 *)(v30
                                 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_lastOpenCrashedVersion
                                 + 8);
        swift_retain(v31);
        v48 = v57;
        sub_1004BE310(v56, v57);
        if (v100 >= 0xF000000000000000)
          v58 = 0xF000000000000000;
        else
          v58 = v100;
        v59 = v92;
        if (v100 >> 60 == 15)
          v59 = 0;
        v84 = 0;
        v87 = v56;
        v78 = v30;
        if (v100 >> 60 == 15)
        {
          v60 = *(_QWORD *)(v30 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_syncData + 8);
          v88 = *(_QWORD *)(v30 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_syncData);
          v91 = v60;
          sub_10057939C(v88, v60);
        }
        else
        {
          v91 = v58;
          v88 = v59;
        }
LABEL_42:
        v81 = v35;
        v63 = v89;
        sub_1004B8460(v35, v89, type metadata accessor for CRLBoardIdentifier);
        v64 = v31 + OBJC_IVAR____TtC8Freeform24CRLUserBoardMetadataData_crdtData;
        swift_beginAccess(v31 + OBJC_IVAR____TtC8Freeform24CRLUserBoardMetadataData_crdtData, v95, 0, 0);
        v65 = v90;
        sub_1004B8460(v64, v90, type metadata accessor for CRLUserBoardMetadataCRDTData);
        v66 = *(void **)&v79[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_crdtContext];
        v80 = v31;
        v67 = *(_QWORD *)(v31 + OBJC_IVAR____TtC8Freeform24CRLUserBoardMetadataData_minRequiredVersionForFullFidelity);
        sub_10057939C(v92, v100);
        v7 = v66;
        v68 = v87;
        sub_1004BE310(v87, v48);
        v69 = v88;
        v70 = v91;
        sub_10057939C(v88, v91);
        v71 = v84;
        v72 = sub_10073ED48(v63, v65, (uint64_t)v7, v68, v48, v86, v82, v83, v69, v70, v67);
        if (v71)
        {

          sub_1004B84A4(v81, type metadata accessor for CRLBoardIdentifier);
          swift_release(v78);
          sub_1004BBBC8(v68, v48);
          sub_1004BE2FC(v88, v91);
          swift_release(v80);
          swift_release(v85);
          return (uint64_t)v7;
        }
        v49 = v72;
        v73 = v80;
        v74 = v81;

        v75 = v78;
        if (v78)
        {
          sub_100A94B34(v49);
          v7 = v85;
          swift_retain(v85);
          swift_retain(v75);
          v77 = sub_10073EAF0(v49);
          swift_release(v75);
          if ((v77 & 1) == 0)
          {
            sub_1004B84A4(v74, type metadata accessor for CRLBoardIdentifier);
            swift_release(v75);
            sub_1004BBBC8(v87, v48);
            sub_1004BE2FC(v88, v91);
            swift_release(v73);
            swift_release(v7);
            goto LABEL_20;
          }
        }
        else
        {
          v76 = sub_100A84060(v74, 1);
          if ((v76 & 1) == 0)
          {
            sub_1004B84A4(v74, type metadata accessor for CRLBoardIdentifier);
            swift_release(v49);
            sub_1004BE2FC(v88, v91);
            sub_1004BBBC8(v87, v48);
            swift_release(v73);
            v49 = (uint64_t)v85;
            v7 = 0;
            goto LABEL_20;
          }
          sub_100A93444(v49);
          swift_retain(v85);
          v75 = 0;
        }
        sub_100A75C10(v74, (uint64_t)&unk_101292268, (uint64_t)sub_100AD3F18, (uint64_t)&unk_101292280);
        v7 = v85;
        swift_release(v85);
        swift_release(v49);
        sub_1004BE2FC(v88, v91);
        sub_1004BBBC8(v87, v48);
        swift_release(v75);
        sub_1004B84A4(v74, type metadata accessor for CRLBoardIdentifier);
        v49 = (uint64_t)v7;
LABEL_20:
        swift_release(v49);
        return (uint64_t)v7;
      }
    }
    else
    {
      if ((v91 & 1) != 0)
      {
        v42 = type metadata accessor for JSONEncoder(0, v29);
        swift_allocObject(v42, *(unsigned int *)(v42 + 48), *(unsigned __int16 *)(v42 + 52));
        v43 = swift_retain_n(a1, 2);
        v44 = JSONEncoder.init()(v43);
        v95[0] = 0x3FF0000000000000;
        memset(&v95[1], 0, 24);
        v96 = 1;
        v97 = xmmword_100F062D0;
        v98 = xmmword_100F062D0;
        v99 = 0;
        v45 = sub_100AFF250();
        v46 = dispatch thunk of JSONEncoder.encode<A>(_:)(v95, &type metadata for CRLBoardViewState, v45);
        v48 = v47;
        swift_release(v44);
        v78 = 0;
        v87 = v46;
        v84 = 0;
        v79 = v7;
        v35 = (uint64_t)v19;
        v86 = 0;
        v83 = (_BYTE)v88 == 0;
        v61 = v92;
        if (v100 >> 60 == 15)
          v61 = 0;
        v88 = v61;
        v62 = 0xF000000000000000;
        if (v100 < 0xF000000000000000)
          v62 = v100;
        v91 = v62;
        v82 = 1;
        v85 = (char *)v31;
        goto LABEL_42;
      }
      v30 = 0;
    }
    sub_1004B84A4((uint64_t)v19, type metadata accessor for CRLBoardIdentifier);
    v7 = 0;
    v49 = v30;
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t sub_100A94568()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  void (*v9)(_QWORD *, uint64_t, uint64_t);
  id v10;
  void (*v11)(_QWORD *, uint64_t);
  Swift::String v12;
  void *object;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v42;
  unint64_t v43;
  void *v44;
  void (*v45)(_QWORD *, uint64_t, uint64_t);
  id v46;
  void (*v47)(_QWORD *, uint64_t);
  uint64_t v48;
  _QWORD *inited;
  uint64_t v50;
  void *v51;
  id v52;
  char v53;
  _QWORD *v54;
  sqlite3_stmt *v55;
  void *v56;
  id v57;
  uint64_t v58;
  void (*v59)(_QWORD *, uint64_t, uint64_t);
  void (*v60)(_QWORD *, uint64_t);
  _BYTE v61[8];
  uint64_t v62;
  uint64_t v63;
  _BYTE v64[8];
  _BYTE v65[48];
  _BYTE v66[72];
  uint64_t v67;
  unint64_t v68;
  _BYTE v69[32];

  v2 = v0;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (uint64_t *)((char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v6 = v7;
  v8 = enum case for DispatchPredicate.onQueue(_:);
  v9 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v4 + 104);
  v9(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  v10 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  v11 = *(void (**)(_QWORD *, uint64_t))(v4 + 8);
  v11(v6, v3);
  if ((v7 & 1) == 0)
  {
    __break(1u);
LABEL_17:
    swift_once(&qword_1013DD858, sub_100A05554);
    goto LABEL_5;
  }
  v59 = v9;
  v60 = v11;
  v67 = 0;
  v68 = 0xE000000000000000;
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease(v68);
  v67 = 0x205443454C4553;
  v68 = 0xE700000000000000;
  v12._countAndFlagsBits = sub_100AFAA78(0, (void *)0xE000000000000000);
  object = v12._object;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(object);
  v14._countAndFlagsBits = 0x204D4F524620;
  v14._object = (void *)0xE600000000000000;
  String.append(_:)(v14);
  v15._countAndFlagsBits = 0x6D5F736472616F62;
  v15._object = (void *)0xEF61746164617465;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0x2820455245485720;
  v16._object = (void *)0xE800000000000000;
  String.append(_:)(v16);
  v17._object = (void *)0x8000000100FD6350;
  v17._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 0x293F203D20;
  v18._object = (void *)0xE500000000000000;
  String.append(_:)(v18);
  v19 = v67;
  v20 = v68;
  v21 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v22 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v22, v69);
  swift_retain(v21);
  v24 = sub_1006B77CC(v23, v19, v20);
  if (!v1)
  {
    v25 = v24;
    swift_release(v21);
    v26 = sub_10067BA88();
    v42 = v26;
    v43 = v27;
    sub_1006B5E80(v26, v27);
    sub_1004BBBC8(v42, v43);
    v44 = *(void **)(*(_QWORD *)(v25 + 16) + 32);
    *v6 = v44;
    v45 = v59;
    v59(v6, v8, v3);
    v46 = v44;
    LOBYTE(v44) = _dispatchPreconditionTest(_:)(v6);
    v47 = v60;
    v60(v6, v3);
    if ((v44 & 1) != 0)
    {
      v48 = type metadata accessor for SQLiteRowIterator();
      inited = (_QWORD *)swift_initStackObject(v48, v65);
      inited[4] = 0;
      inited[5] = 1;
      inited[2] = v25;
      inited[3] = 0;
      swift_retain(v25);
      sub_1006B6B04();
      if (!v50)
      {
        swift_release(v25);
        swift_setDeallocating(inited);
        sub_1006B7DA4(inited[3], inited[4], inited[5]);
        v56 = *(void **)(*(_QWORD *)(v25 + 16) + 32);
        *v6 = v56;
        v45(v6, v8, v3);
        v57 = v56;
        LOBYTE(v56) = _dispatchPreconditionTest(_:)(v6);
        v47(v6, v3);
        if ((v56 & 1) != 0)
        {
          v54 = (_QWORD *)(v25 + 24);
          swift_beginAccess(v25 + 24, &v67, 1, 0);
          v34 = 0;
          v55 = *(sqlite3_stmt **)(v25 + 24);
          if (!v55)
            goto LABEL_12;
          goto LABEL_11;
        }
LABEL_20:
        __break(1u);
      }
      v34 = sub_100AFAD48(v50, 0);
      swift_release(v25);
      swift_setDeallocating(inited);
      sub_1006B7DA4(inited[3], inited[4], inited[5]);
      v51 = *(void **)(*(_QWORD *)(v25 + 16) + 32);
      *v6 = v51;
      v45(v6, v8, v3);
      v52 = v51;
      v53 = _dispatchPreconditionTest(_:)(v6);
      v47(v6, v3);
      if ((v53 & 1) != 0)
      {
        v54 = (_QWORD *)(v25 + 24);
        swift_beginAccess(v25 + 24, &v67, 1, 0);
        v55 = *(sqlite3_stmt **)(v25 + 24);
        if (!v55)
        {
LABEL_12:
          swift_release(v25);
          return v34;
        }
LABEL_11:
        sqlite3_finalize(v55);
        *v54 = 0;
        goto LABEL_12;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_20;
  }
  swift_release(v21);
  if (qword_1013DD858 != -1)
    goto LABEL_17;
LABEL_5:
  swift_beginAccess(&static OS_os_log.boardStore, &v67, 0, 0);
  v28 = (void *)static OS_os_log.boardStore;
  v29 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  v30 = swift_initStackObject(v29, v66);
  *(_OWORD *)(v30 + 16) = xmmword_100EF5E40;
  swift_getErrorValue(v1, v64, v61);
  v31 = v62;
  v32 = v63;
  v33 = v28;
  v34 = Error.localizedDescription.getter(v31, v32);
  v36 = v35;
  *(_QWORD *)(v30 + 56) = &type metadata for String;
  v37 = sub_1004CFC2C();
  *(_QWORD *)(v30 + 64) = v37;
  *(_QWORD *)(v30 + 32) = v34;
  *(_QWORD *)(v30 + 40) = v36;
  v38 = static os_log_type_t.error.getter(v37);
  sub_100A06EBC((uint64_t)v33, &_mh_execute_header, v38, "Failed to fetch board metadata record with error %@", 51, 2, v30);
  swift_setDeallocating(v30);
  v39 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(v30 + 32, 1, v39);

  swift_willThrow(v40);
  return v34;
}

void sub_100A94B34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  void (*v14)(_QWORD, __n128);
  id v15;
  void (*v16)(_QWORD *, uint64_t);
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  char v45;
  void *v46;
  id v47;
  void (*v48)(_QWORD *, uint64_t);
  uint64_t *v49;
  unint64_t v50;
  void *v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  id v60;
  sqlite3_stmt **v61;
  int v62;
  void *v63;
  id v64;
  int v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  Swift::String v69;
  uint64_t v70;
  Swift::String v71;
  void *object;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  __n128 v77;
  void *v78;
  id v79;
  _BYTE v80[4];
  int v81;
  void (*v82)(_QWORD *, uint64_t);
  unsigned int v83;
  void (*v84)(_QWORD *, _QWORD, uint64_t);
  unint64_t v85;
  unint64_t v86;
  _BYTE v87[24];
  _BYTE v88[24];
  uint64_t v89;
  unint64_t v90;
  _BYTE v91[32];

  v3 = v1;
  v5 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v5);
  v7 = &v80[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for DispatchPredicate(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = &v80[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v12 = v13;
  v14 = *(void (**)(_QWORD, __n128))(v9 + 104);
  v83 = enum case for DispatchPredicate.onQueue(_:);
  v84 = (void (*)(_QWORD *, _QWORD, uint64_t))v14;
  v14(v12, v10);
  v15 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)(v12);
  v16 = *(void (**)(_QWORD *, uint64_t))(v9 + 8);
  v16(v12, v8);
  if ((v13 & 1) == 0)
  {
    __break(1u);
    __break(1u);
    goto LABEL_29;
  }
  v82 = v16;
  v89 = 0;
  v90 = 0xE000000000000000;
  _StringGuts.grow(_:)(89);
  v17._countAndFlagsBits = 0x20455441445055;
  v17._object = (void *)0xE700000000000000;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 0x6D5F736472616F62;
  v18._object = (void *)0xEF61746164617465;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 0x2054455320;
  v19._object = (void *)0xE500000000000000;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 0x7461645F74647263;
  v20._object = (void *)0xE900000000000061;
  String.append(_:)(v20);
  v21._countAndFlagsBits = 0x202C3F203D20;
  v21._object = (void *)0xE600000000000000;
  String.append(_:)(v21);
  v22._countAndFlagsBits = 0x726F7661665F7369;
  v22._object = (void *)0xEB00000000657469;
  String.append(_:)(v22);
  v23._countAndFlagsBits = 0x202C3F203D20;
  v23._object = (void *)0xE600000000000000;
  String.append(_:)(v23);
  v24._countAndFlagsBits = 0xD00000000000001BLL;
  v24._object = (void *)0x8000000100FEEB00;
  String.append(_:)(v24);
  v25._countAndFlagsBits = 0x202C3F203D20;
  v25._object = (void *)0xE600000000000000;
  String.append(_:)(v25);
  v26._countAndFlagsBits = 0x6174735F77656976;
  v26._object = (void *)0xEF617461645F6574;
  String.append(_:)(v26);
  v27._countAndFlagsBits = 0x202C3F203D20;
  v27._object = (void *)0xE600000000000000;
  String.append(_:)(v27);
  v28._countAndFlagsBits = 0xD000000000000019;
  v28._object = (void *)0x8000000100FEEB20;
  String.append(_:)(v28);
  v29._countAndFlagsBits = 0x202C3F203D20;
  v29._object = (void *)0xE600000000000000;
  String.append(_:)(v29);
  v30._object = (void *)0x8000000100FEEB40;
  v30._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v30);
  v31._countAndFlagsBits = 0x202C3F203D20;
  v31._object = (void *)0xE600000000000000;
  String.append(_:)(v31);
  v32._countAndFlagsBits = 0x7461645F636E7973;
  v32._object = (void *)0xE900000000000061;
  String.append(_:)(v32);
  v33._countAndFlagsBits = 0x202C3F203D20;
  v33._object = (void *)0xE600000000000000;
  String.append(_:)(v33);
  v34._countAndFlagsBits = 0xD000000000000026;
  v34._object = (void *)0x8000000100FEEB60;
  String.append(_:)(v34);
  v35._countAndFlagsBits = 0x454857203F203D20;
  v35._object = (void *)0xEB00000000204552;
  String.append(_:)(v35);
  v36._object = (void *)0x8000000100FD6350;
  v36._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v36);
  v37._countAndFlagsBits = 1059077408;
  v37._object = (void *)0xE400000000000000;
  String.append(_:)(v37);
  v38 = v89;
  v39 = v90;
  v40 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v41 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v41, v91);
  swift_retain(v40);
  v43 = sub_1006B77CC(v42, v38, v39);
  swift_release(v40);
  if (v2)
    return;
  sub_1006B5E80(*(_QWORD *)(a1 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_crdtData), *(_QWORD *)(a1 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_crdtData + 8));
  v44 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_isFavorite);
  sub_1006B59FC(*(_BYTE *)(a1 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_isFavorite), 2);
  sub_1006B59FC(*(_BYTE *)(a1 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_enableCollaboratorCursors), 3);
  sub_1006B5E80(*(_QWORD *)(a1 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_viewStateData), *(_QWORD *)(a1 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_viewStateData + 8));
  v45 = *(_BYTE *)(a1 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_lastOpenCrashedVersion + 8);
  v81 = v44;
  if ((v45 & 1) != 0)
  {
    v46 = *(void **)(*(_QWORD *)(v43 + 16) + 32);
    *v12 = v46;
    v84(v12, v83, v8);
    v47 = v46;
    LOBYTE(v46) = _dispatchPreconditionTest(_:)(v12);
    v48 = v82;
    v82(v12, v8);
    if ((v46 & 1) != 0)
    {
      swift_beginAccess(v43 + 24, &v89, 0, 0);
      sqlite3_bind_null(*(sqlite3_stmt **)(v43 + 24), 5);
      goto LABEL_7;
    }
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  sub_1006B5B50(*(_QWORD *)(a1 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_lastOpenCrashedVersion), 5);
  v48 = v82;
LABEL_7:
  sub_1006B5B50(*(_QWORD *)(a1 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_unsyncedChanges), 6);
  v49 = (uint64_t *)(a1 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_syncData);
  v50 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_syncData + 8);
  if (v50 >> 60 != 15)
  {
    v53 = *v49;
    sub_1004BE310(*v49, *(_QWORD *)(a1 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_syncData + 8));
    sub_1006B5E80(v53, v50);
    v54 = v53;
    v48 = v82;
    sub_1004BE2FC(v54, v50);
    goto LABEL_11;
  }
  v51 = *(void **)(*(_QWORD *)(v43 + 16) + 32);
  *v12 = v51;
  v84(v12, v83, v8);
  v52 = v51;
  LOBYTE(v51) = _dispatchPreconditionTest(_:)(v12);
  v48(v12, v8);
  if ((v51 & 1) == 0)
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  swift_beginAccess(v43 + 24, v88, 0, 0);
  sqlite3_bind_null(*(sqlite3_stmt **)(v43 + 24), 7);
LABEL_11:
  sub_1006B5B50(*(_QWORD *)(a1 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_minRequiredVersionForFullFidelity), 8);
  sub_1004B8460(a1 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_boardIdentifier, (uint64_t)v7, type metadata accessor for CRLBoardIdentifier);
  v55 = sub_10067BA88();
  v57 = v55;
  v58 = v56;
  sub_1006B5E80(v55, v56);
  sub_1004BBBC8(v57, v58);
  v59 = *(void **)(*(_QWORD *)(v43 + 16) + 32);
  *v12 = v59;
  v84(v12, v83, v8);
  v60 = v59;
  LOBYTE(v59) = _dispatchPreconditionTest(_:)(v12);
  v48(v12, v8);
  if ((v59 & 1) == 0)
    goto LABEL_31;
  v61 = (sqlite3_stmt **)(v43 + 24);
  swift_beginAccess(v43 + 24, v87, 1, 0);
  v62 = sqlite3_step(*(sqlite3_stmt **)(v43 + 24));
  if (v62 != 101)
    goto LABEL_19;
  sub_1004B84A4((uint64_t)v7, type metadata accessor for CRLBoardIdentifier);
  v63 = *(void **)(*(_QWORD *)(v43 + 16) + 32);
  *v12 = v63;
  v84(v12, v83, v8);
  v64 = v63;
  LOBYTE(v63) = _dispatchPreconditionTest(_:)(v12);
  v62 = ((uint64_t (*)(_QWORD *, uint64_t))v48)(v12, v8);
  if ((v63 & 1) == 0)
  {
    __break(1u);
LABEL_19:
    v65 = v62;
    v85 = 0;
    v86 = 0xE000000000000000;
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease(v86);
    v85 = 0xD000000000000019;
    v86 = 0x8000000100FF1080;
    if (v81)
      v66 = 1702195828;
    else
      v66 = 0x65736C6166;
    if (v81)
      v67 = 0xE400000000000000;
    else
      v67 = 0xE500000000000000;
    v68 = v67;
    String.append(_:)(*(Swift::String *)&v66);
    swift_bridgeObjectRelease(v67);
    v69._countAndFlagsBits = 0x616F6220726F6620;
    v69._object = (void *)0xEB00000000206472;
    String.append(_:)(v69);
    v71._countAndFlagsBits = UUID.uuidString.getter(v70);
    object = v71._object;
    String.append(_:)(v71);
    swift_bridgeObjectRelease(object);
    v73 = v85;
    v74 = v86;
    v75 = sub_1006B79EC();
    swift_allocError(&type metadata for SQLiteError, v75, 0, 0);
    *(_DWORD *)v76 = v65;
    *(_QWORD *)(v76 + 8) = v73;
    *(_QWORD *)(v76 + 16) = v74;
    swift_willThrow(v77);
    sub_1004B84A4((uint64_t)v7, type metadata accessor for CRLBoardIdentifier);
    v78 = *(void **)(*(_QWORD *)(v43 + 16) + 32);
    *v12 = v78;
    v84(v12, v83, v8);
    v79 = v78;
    LOBYTE(v78) = _dispatchPreconditionTest(_:)(v12);
    v82(v12, v8);
    if ((v78 & 1) != 0)
      goto LABEL_26;
LABEL_32:
    __break(1u);
  }
LABEL_26:
  if (*v61)
  {
    sqlite3_finalize(*v61);
    *v61 = 0;
  }
  swift_release(v43);
}

void sub_100A953EC(unint64_t a1, sqlite3_int64 a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  void (*v13)(_QWORD *, uint64_t, uint64_t);
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  id v24;
  sqlite3_stmt **v25;
  int v26;
  void *v27;
  id v28;
  int v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  __n128 v36;
  void *v37;
  id v38;
  unint64_t v39;
  void (*v40)(_QWORD *, uint64_t);
  uint64_t v41;
  unint64_t v42;
  _QWORD v43[3];
  char v44[32];

  v4 = v2;
  v39 = a1;
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (unint64_t *)((char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *(void **)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v10 = v11;
  v12 = enum case for DispatchPredicate.onQueue(_:);
  v13 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v7 + 104);
  ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v13)(v10, enum case for DispatchPredicate.onQueue(_:), v6, v8);
  v14 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v10);
  v40 = *(void (**)(_QWORD *, uint64_t))(v7 + 8);
  v40(v10, v6);
  if ((v11 & 1) == 0)
  {
    __break(1u);
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v43[0] = 0;
  v43[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(v4 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v16 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v16, v44);
  swift_retain(v15);
  v18 = sub_1006B77CC(v17, 0xD00000000000004BLL, 0x8000000100FF59B0);
  swift_release(v15);
  if (v3)
    return;
  sub_1006B5B50(a2, 1);
  v19 = sub_10067BA88();
  v21 = v19;
  v22 = v20;
  sub_1006B5E80(v19, v20);
  sub_1004BBBC8(v21, v22);
  v23 = *(void **)(*(_QWORD *)(v18 + 16) + 32);
  *v10 = v23;
  v13(v10, v12, v6);
  v24 = v23;
  LOBYTE(v23) = _dispatchPreconditionTest(_:)(v10);
  v40(v10, v6);
  if ((v23 & 1) == 0)
    goto LABEL_15;
  v25 = (sqlite3_stmt **)(v18 + 24);
  swift_beginAccess(v18 + 24, v43, 1, 0);
  v26 = sqlite3_step(*(sqlite3_stmt **)(v18 + 24));
  if (v26 != 101)
    goto LABEL_11;
  v27 = *(void **)(*(_QWORD *)(v18 + 16) + 32);
  *v10 = v27;
  v13(v10, v12, v6);
  v28 = v27;
  LOBYTE(v27) = _dispatchPreconditionTest(_:)(v10);
  v26 = ((uint64_t (*)(_QWORD *, uint64_t))v40)(v10, v6);
  if ((v27 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    v29 = v26;
    v41 = 0;
    v42 = 0xE000000000000000;
    _StringGuts.grow(_:)(86);
    v30._countAndFlagsBits = 0xD000000000000054;
    v30._object = (void *)0x8000000100FF5A00;
    String.append(_:)(v30);
    v31._countAndFlagsBits = sub_10067AD38();
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v32 = v41;
    v39 = v42;
    v33 = sub_1006B79EC();
    swift_allocError(&type metadata for SQLiteError, v33, 0, 0);
    *(_DWORD *)v34 = v29;
    v35 = v39;
    *(_QWORD *)(v34 + 8) = v32;
    *(_QWORD *)(v34 + 16) = v35;
    swift_willThrow(v36);
    v37 = *(void **)(*(_QWORD *)(v18 + 16) + 32);
    *v10 = v37;
    v13(v10, v12, v6);
    v38 = v37;
    LOBYTE(v37) = _dispatchPreconditionTest(_:)(v10);
    v40(v10, v6);
    if ((v37 & 1) != 0)
      goto LABEL_12;
LABEL_16:
    __break(1u);
  }
LABEL_12:
  if (*v25)
  {
    sqlite3_finalize(*v25);
    *v25 = 0;
  }
  swift_release(v18);
}

double sub_100A957C8(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double result;
  _QWORD v24[2];
  uint64_t v25;
  double *v26;
  _QWORD aBlock[5];
  uint64_t v28;

  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v25 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24[1] = *(_QWORD *)&v4[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue];
  v16 = swift_allocObject(&unk_101292CB8, 49, 7);
  *(_QWORD *)(v16 + 16) = v4;
  *(_QWORD *)(v16 + 24) = a1;
  *(_QWORD *)(v16 + 32) = a3;
  *(_QWORD *)(v16 + 40) = a4;
  *(_BYTE *)(v16 + 48) = a2;
  aBlock[4] = sub_100AFFE04;
  v28 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(_QWORD *)"";
  aBlock[2] = sub_1005D2FC0;
  aBlock[3] = &unk_101292CD0;
  v17 = _Block_copy(aBlock);
  v18 = v4;
  swift_bridgeObjectRetain(a1);
  sub_1004C0F54(a3, a4);
  static DispatchQoS.unspecified.getter(v19);
  v26 = _swiftEmptyArrayStorage;
  v20 = sub_1004B7878((unint64_t *)&qword_1013E1D20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v21 = sub_1004B804C((uint64_t *)&unk_1013DFBF0);
  v22 = sub_1004CBA30((unint64_t *)&qword_1013E1D30, (uint64_t *)&unk_1013DFBF0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v21, v22, v9, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v11, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  *(_QWORD *)&result = swift_release(v28).n128_u64[0];
  return result;
}

uint64_t sub_100A959E4(void *a1, uint64_t a2, void (*a3)(_QWORD), uint64_t a4, char a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  _QWORD v16[8];

  v9 = type metadata accessor for CRLBoardIdentifier(0);
  v16[7] = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v16[6] = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v16[5] = (char *)v16 - v12;
  swift_bridgeObjectRetain(a2);
  v13 = a1;
  sub_1004E67A8(v13, a2, (uint64_t)v13);
  swift_bridgeObjectRelease();

  if (a3)
    a3(0);
  v14 = sub_1008D800C((uint64_t)_swiftEmptyArrayStorage);
  sub_100A75778(a2, 1, 0, v14);
  swift_bridgeObjectRelease();
  return sub_100A75388(a2, (uint64_t)&_swiftEmptySetSingleton, a5 & 1);
}

uint64_t sub_100A95EE8(uint64_t a1, uint64_t a2)
{
  char v2;

  sub_100A985D8(a1, a2, (void (*)(char *))sub_100A95F08);
  return v2 & 1;
}

void sub_100A95F08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  void (*v9)(_QWORD *, uint64_t, uint64_t);
  id v10;
  void (*v11)(_QWORD *, uint64_t);
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  double v32;
  void *v33;
  id v34;
  sqlite3_stmt **v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  void (*v40)(_QWORD *, uint64_t, uint64_t);
  id v41;
  void (*v42)(_QWORD *, uint64_t);
  int v43;
  void *v44;
  id v45;
  int v46;
  unint64_t v47;
  uint64_t v48;
  __n128 v49;
  void *v50;
  id v51;
  void (*v52)(_QWORD *, uint64_t, uint64_t);
  void (*v53)(_QWORD *, uint64_t);
  uint64_t v54;
  unint64_t v55;
  _BYTE v56[32];

  v2 = v0;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (void (**)(_QWORD *, uint64_t, uint64_t))((char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v6 = v7;
  v8 = enum case for DispatchPredicate.onQueue(_:);
  v9 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v4 + 104);
  v9(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  v10 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  v11 = *(void (**)(_QWORD *, uint64_t))(v4 + 8);
  v11(v6, v3);
  if ((v7 & 1) == 0)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  sub_100A9BA38();
  if (v1)
    return;
  v52 = v9;
  v53 = v11;
  v54 = 0;
  v55 = 0xE000000000000000;
  _StringGuts.grow(_:)(54);
  v12._countAndFlagsBits = 0x20455441445055;
  v12._object = (void *)0xE700000000000000;
  String.append(_:)(v12);
  v13._countAndFlagsBits = 0x736472616F62;
  v13._object = (void *)0xE600000000000000;
  String.append(_:)(v13);
  v14._countAndFlagsBits = 0x2054455320;
  v14._object = (void *)0xE500000000000000;
  String.append(_:)(v14);
  v15._countAndFlagsBits = 0x6E6F7473626D6F74;
  v15._object = (void *)0xEA00000000006465;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0x202C31203D20;
  v16._object = (void *)0xE600000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0xD000000000000010;
  v17._object = (void *)0x8000000100FEEB40;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 2112800;
  v18._object = (void *)0xE300000000000000;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 0xD000000000000010;
  v19._object = (void *)0x8000000100FEEB40;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 0x202C3F207C20;
  v20._object = (void *)0xE600000000000000;
  String.append(_:)(v20);
  v21._countAndFlagsBits = 0x6E6F7473626D6F74;
  v21._object = (void *)0xEE00657461645F65;
  String.append(_:)(v21);
  v22._countAndFlagsBits = 0x454857203F203D20;
  v22._object = (void *)0xEB00000000204552;
  String.append(_:)(v22);
  v23._object = (void *)0x8000000100FD6350;
  v23._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v23);
  v24._countAndFlagsBits = 1059077408;
  v24._object = (void *)0xE400000000000000;
  String.append(_:)(v24);
  v25 = v54;
  v26 = v55;
  v27 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v28 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v28, v56);
  swift_retain(v27);
  v30 = sub_1006B77CC(v29, v25, v26);
  swift_release(v27);
  sub_1006B5B50(4, 1);
  v32 = static Date.timeIntervalSinceReferenceDate.getter(v31);
  v33 = *(void **)(*(_QWORD *)(v30 + 16) + 32);
  *v6 = v33;
  v52(v6, v8, v3);
  v34 = v33;
  LOBYTE(v33) = _dispatchPreconditionTest(_:)(v6);
  v53(v6, v3);
  if ((v33 & 1) == 0)
    goto LABEL_15;
  v35 = (sqlite3_stmt **)(v30 + 24);
  swift_beginAccess(v30 + 24, &v54, 1, 0);
  sqlite3_bind_double(*(sqlite3_stmt **)(v30 + 24), 2, v32);
  v36 = sub_10067BA88();
  v38 = v37;
  sub_1006B5E80(v36, v37);
  sub_1004BBBC8(v36, v38);
  v39 = *(void **)(*(_QWORD *)(v30 + 16) + 32);
  *v6 = v39;
  v40 = v52;
  v52(v6, v8, v3);
  v41 = v39;
  LOBYTE(v39) = _dispatchPreconditionTest(_:)(v6);
  v42 = v53;
  v53(v6, v3);
  if ((v39 & 1) == 0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v43 = sqlite3_step(*v35);
  if (v43 != 101)
  {
    v46 = v43;
    v47 = sub_1006B79EC();
    swift_allocError(&type metadata for SQLiteError, v47, 0, 0);
    *(_DWORD *)v48 = v46;
    *(_QWORD *)(v48 + 8) = 0xD00000000000001FLL;
    *(_QWORD *)(v48 + 16) = 0x8000000100FF0C20;
    swift_willThrow(v49);
    v50 = *(void **)(*(_QWORD *)(v30 + 16) + 32);
    *v6 = v50;
    v40(v6, v8, v3);
    v51 = v50;
    LOBYTE(v50) = _dispatchPreconditionTest(_:)(v6);
    v42(v6, v3);
    if ((v50 & 1) != 0)
    {
      if (*v35)
      {
        sqlite3_finalize(*v35);
        *(_QWORD *)(v30 + 24) = 0;
      }
      goto LABEL_12;
    }
LABEL_18:
    __break(1u);
  }
  v44 = *(void **)(*(_QWORD *)(v30 + 16) + 32);
  *v6 = v44;
  v40(v6, v8, v3);
  v45 = v44;
  LOBYTE(v44) = _dispatchPreconditionTest(_:)(v6);
  v42(v6, v3);
  if ((v44 & 1) == 0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (*v35)
  {
    sqlite3_finalize(*v35);
    *v35 = 0;
  }
LABEL_12:
  swift_release(v30);
}

double sub_100A96434(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  void *v22;
  char *v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double result;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD aBlock[5];
  uint64_t v35;

  v29[0] = a3;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v32 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v30 = *(_QWORD *)(v9 - 8);
  v31 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CRLBoardIdentifier(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12);
  v15 = (char *)v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29[1] = *(_QWORD *)&v3[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue];
  sub_1004B8460(a1, (uint64_t)v15, type metadata accessor for CRLBoardIdentifier);
  v16 = *(unsigned __int8 *)(v13 + 80);
  v17 = (v16 + 24) & ~v16;
  v18 = (v14 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = swift_allocObject(&unk_1012928D0, v18 + 16, v16 | 7);
  *(_QWORD *)(v19 + 16) = v3;
  sub_1004B84E0((uint64_t)v15, v19 + v17, type metadata accessor for CRLBoardIdentifier);
  v20 = (uint64_t *)(v19 + v18);
  v21 = v29[0];
  *v20 = a2;
  v20[1] = v21;
  aBlock[4] = sub_100AFF670;
  v35 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(_QWORD *)"";
  aBlock[2] = sub_1005D2FC0;
  aBlock[3] = &unk_1012928E8;
  v22 = _Block_copy(aBlock);
  v23 = v3;
  sub_1004C0F54(a2, v21);
  static DispatchQoS.unspecified.getter(v24);
  v33 = _swiftEmptyArrayStorage;
  v25 = sub_1004B7878((unint64_t *)&qword_1013E1D20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v26 = sub_1004B804C((uint64_t *)&unk_1013DFBF0);
  v27 = sub_1004CBA30((unint64_t *)&qword_1013E1D30, (uint64_t *)&unk_1013DFBF0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v33, v26, v27, v6, v25);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v8, v22);
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v11, v31);
  *(_QWORD *)&result = swift_release(v35).n128_u64[0];
  return result;
}

double sub_100A966C0(uint64_t a1, uint64_t a2, void (*a3)(_QWORD))
{
  uint64_t v5;
  char v6;
  uint64_t v7;
  double result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;

  v5 = sub_100A787E4();
  v6 = sub_100622DD8(a2, v5);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v5).n128_u64[0];
  if ((v6 & 1) != 0)
  {
    __chkstk_darwin(v7);
    sub_10080EB50(sub_100AFF684);
    if (a3)
      a3(0);
    v9 = sub_1004B804C(&qword_1013E7870);
    v10 = type metadata accessor for CRLBoardIdentifier(0);
    v11 = *(_QWORD *)(v10 - 8);
    v12 = *(_QWORD *)(v11 + 72);
    v13 = *(unsigned __int8 *)(v11 + 80);
    v14 = (v13 + 32) & ~v13;
    v15 = v14 + v12;
    v16 = v13 | 7;
    v17 = swift_allocObject(v9, v14 + v12, v13 | 7);
    *(_OWORD *)(v17 + 16) = xmmword_100EF5E40;
    sub_1004B8460(a2, v17 + v14, type metadata accessor for CRLBoardIdentifier);
    v18 = sub_1004B5A78(v17);
    swift_setDeallocating(v17);
    swift_arrayDestroy(v17 + v14, 1, v10);
    swift_deallocClassInstance(v17, 32, 7);
    v19 = sub_1008D800C((uint64_t)_swiftEmptyArrayStorage);
    sub_100A75778((uint64_t)v18, 1, 0, v19);
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(v19);
    v20 = swift_allocObject(v9, v15, v16);
    *(_OWORD *)(v20 + 16) = xmmword_100EF5E40;
    v21 = v20 + v14;
    sub_1004B8460(a2, v20 + v14, type metadata accessor for CRLBoardIdentifier);
    v22 = sub_1004B5A78(v20);
    swift_setDeallocating(v20);
    swift_arrayDestroy(v21, 1, v10);
    swift_deallocClassInstance(v20, 32, 7);
    sub_100A75388((uint64_t)v22, (uint64_t)&_swiftEmptySetSingleton, 0);
    *(_QWORD *)&result = swift_bridgeObjectRelease(v22).n128_u64[0];
  }
  return result;
}

uint64_t sub_100A96A90(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t inited;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _BYTE v23[72];
  _BYTE v24[24];

  if (qword_1013DD858 != -1)
    swift_once(&qword_1013DD858, sub_100A05554);
  swift_beginAccess(&static OS_os_log.boardStore, v24, 0, 0);
  v3 = (void *)static OS_os_log.boardStore;
  v4 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v4, v23);
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  v6 = v3;
  v7 = UUID.uuidString.getter(v6);
  v9 = v8;
  *(_QWORD *)(inited + 56) = &type metadata for String;
  *(_QWORD *)(inited + 64) = sub_1004CFC2C();
  *(_QWORD *)(inited + 32) = v7;
  *(_QWORD *)(inited + 40) = v9;
  v11 = static os_log_type_t.default.getter(v10);
  sub_100A06EBC((uint64_t)v6, &_mh_execute_header, v11, "Deleting discardable board %{public}@", 37, 2, inited);
  swift_setDeallocating(inited);
  v12 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(inited + 32, 1, v12);

  sub_100A95F08();
  if (!v1)
  {
    v13 = sub_1004B804C(&qword_1013E7870);
    v14 = type metadata accessor for CRLBoardIdentifier(0);
    v15 = *(_QWORD *)(v14 - 8);
    v16 = *(_QWORD *)(v15 + 72);
    v17 = *(unsigned __int8 *)(v15 + 80);
    v18 = (v17 + 32) & ~v17;
    v19 = swift_allocObject(v13, v18 + v16, v17 | 7);
    *(_OWORD *)(v19 + 16) = xmmword_100EF5E40;
    v20 = v19 + v18;
    sub_1004B8460(a1, v20, type metadata accessor for CRLBoardIdentifier);
    v21 = sub_1004B5A78(v19);
    swift_setDeallocating(v19);
    swift_arrayDestroy(v20, 1, v14);
    swift_deallocClassInstance(v19, 32, 7);
    sub_100A96CAC(0, (uint64_t)v21);
    swift_bridgeObjectRelease(v21);
  }
  return 1;
}

void sub_100A96CAC(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  void (*v20)(_QWORD);
  id v21;
  void (*v22)(_QWORD *, uint64_t);
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  void *v48;
  uint64_t v49;
  uint64_t inited;
  id v51;
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  Swift::String v57;
  Swift::String v58;
  Swift::String v59;
  Swift::String v60;
  Swift::String v61;
  Swift::String v62;
  Swift::String v63;
  Swift::String v64;
  Swift::String v65;
  Swift::String v66;
  Swift::String v67;
  _QWORD *v68;
  uint64_t v69;
  void *v70;
  void *v71;
  Swift::String v72;
  Swift::String v73;
  uint64_t v74;
  uint64_t v75;
  sqlite3_int64 v76;
  Swift::String v77;
  Swift::String v78;
  Swift::String v79;
  Swift::String v80;
  Swift::String v81;
  Swift::String v82;
  Swift::String v83;
  Swift::String v84;
  Swift::String v85;
  Swift::String v86;
  Swift::String v87;
  _QWORD *v88;
  uint64_t v89;
  void *v90;
  void *v91;
  Swift::String v92;
  Swift::String v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __int16 v110;
  char v111;
  char v112;
  char v113;
  char v114;
  char v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  __n128 v122;
  char *v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  void *v127;
  _QWORD *v128;
  id v129;
  __n128 v130;
  uint64_t v131;
  void *v132;
  _QWORD *v133;
  id v134;
  sqlite3_stmt **v135;
  int v136;
  void *v137;
  _QWORD *v138;
  id v139;
  unint64_t v140;
  _BYTE *v141;
  __n128 v142;
  __n128 v143;
  uint64_t v144;
  void *v145;
  _QWORD *v146;
  id v147;
  sqlite3_stmt **v148;
  uint64_t v149;
  int v150;
  Swift::String v151;
  void *v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  __n128 v157;
  void *v158;
  _QWORD *v159;
  id v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unsigned int v171;
  void (*v172)(_QWORD *, _QWORD, uint64_t, __n128);
  void (*v173)(_QWORD *, uint64_t);
  _QWORD *v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  char v189[16];
  char v190[8];
  _QWORD *v191;

  v169 = type metadata accessor for String.Encoding(0);
  v168 = *(_QWORD *)(v169 - 8);
  __chkstk_darwin(v169);
  v167 = (char *)&v161 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CRLBoardIdentifier(0);
  v178 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v175 = (uint64_t)&v161 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v170 = (uint64_t)&v161 - v11;
  v12 = __chkstk_darwin(v10);
  v177 = (uint64_t)&v161 - v13;
  __chkstk_darwin(v12);
  v176 = (char *)&v161 - v14;
  v15 = type metadata accessor for DispatchPredicate(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (uint64_t *)((char *)&v161 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = *(void **)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v18 = v19;
  v20 = *(void (**)(_QWORD))(v16 + 104);
  v171 = enum case for DispatchPredicate.onQueue(_:);
  v172 = (void (*)(_QWORD *, _QWORD, uint64_t, __n128))v20;
  v20(v18);
  v21 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)(v18);
  v22 = *(void (**)(_QWORD *, uint64_t))(v16 + 8);
  v174 = v18;
  v173 = v22;
  v22(v18, v15);
  if ((v19 & 1) == 0)
  {
    __break(1u);
    JUMPOUT(0x100A98074);
  }
  v23 = *(_QWORD *)(a2 + 16);
  if (!v23)
    return;
  v162 = a1;
  v164 = v2;
  v166 = v15;
  v165 = v3;
  v191 = _swiftEmptyArrayStorage;
  sub_1006006EC(0, v23, 0);
  v24 = sub_100CE0488(a2);
  v26 = v25;
  v28 = v27 & 1;
  v180 = (_QWORD *)(a2 + 56);
  v163 = v23;
  v179 = a2;
  do
  {
    if (v24 < 0 || v24 >= 1 << *(_BYTE *)(a2 + 32))
    {
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }
    if (((*(_QWORD *)((char *)v180 + (((unint64_t)v24 >> 3) & 0xFFFFFFFFFFFFF8)) >> v24) & 1) == 0)
      goto LABEL_58;
    if (*(_DWORD *)(a2 + 36) != (_DWORD)v26)
      goto LABEL_59;
    v29 = *(_QWORD *)(a2 + 48);
    v181 = *(_QWORD *)(v178 + 72);
    v30 = (uint64_t)v176;
    sub_1004B8460(v29 + v181 * v24, (uint64_t)v176, type metadata accessor for CRLBoardIdentifier);
    v31 = v30;
    v32 = v177;
    v33 = sub_1004B84E0(v31, v177, type metadata accessor for CRLBoardIdentifier);
    v182 = UUID.uuidString.getter(v33);
    v35 = v34;
    sub_1004B84A4(v32, type metadata accessor for CRLBoardIdentifier);
    v36 = v191;
    if ((swift_isUniquelyReferenced_nonNull_native(v191) & 1) == 0)
    {
      sub_1006006EC(0, v36[2] + 1, 1);
      v36 = v191;
    }
    v38 = v36[2];
    v37 = v36[3];
    if (v38 >= v37 >> 1)
    {
      sub_1006006EC(v37 > 1, v38 + 1, 1);
      v36 = v191;
    }
    v36[2] = v38 + 1;
    v39 = &v36[2 * v38];
    v39[4] = v182;
    v39[5] = v35;
    a2 = v179;
    v40 = sub_1005C3B08(v24, v26, v28 & 1, v179);
    v24 = v40;
    v26 = v41;
    v28 = v42 & 1;
    --v23;
  }
  while (v23);
  sub_100503494(v40, v41, v42 & 1);
  v191 = v36;
  v43 = sub_1004B804C((uint64_t *)&unk_1013E4970);
  v44 = sub_1004CBA30((unint64_t *)&qword_1013DFC40, (uint64_t *)&unk_1013E4970, (uint64_t)&protocol conformance descriptor for [A]);
  v182 = v43;
  v45 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v43, v44);
  v47 = v46;
  swift_release(v36);
  if (qword_1013DD858 != -1)
    swift_once(&qword_1013DD858, sub_100A05554);
  swift_beginAccess(&static OS_os_log.boardStore, &v191, 0, 0);
  v48 = (void *)static OS_os_log.boardStore;
  v49 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v49, v190);
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  *(_QWORD *)(inited + 56) = &type metadata for String;
  *(_QWORD *)(inited + 64) = sub_1004CFC2C();
  v161 = v45;
  *(_QWORD *)(inited + 32) = v45;
  *(_QWORD *)(inited + 40) = v47;
  v51 = v48;
  v176 = v47;
  v52 = swift_bridgeObjectRetain(v47);
  v53 = static os_log_type_t.default.getter(v52);
  sub_100A06EBC((uint64_t)v51, &_mh_execute_header, v53, "Hiding boards from recently deleted: %{public}@", 47, 2, inited);
  swift_setDeallocating(inited);
  v54 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(inited + 32, 1, v54);

  v55 = v165;
  v56 = v164;
  v187 = 0;
  v188 = 0xE000000000000000;
  if ((_BYTE)v162)
  {
    _StringGuts.grow(_:)(52);
    v57._countAndFlagsBits = 0x20455441445055;
    v57._object = (void *)0xE700000000000000;
    String.append(_:)(v57);
    v58._countAndFlagsBits = 0x736472616F62;
    v58._object = (void *)0xE600000000000000;
    String.append(_:)(v58);
    v59._countAndFlagsBits = 0x2054455320;
    v59._object = (void *)0xE500000000000000;
    String.append(_:)(v59);
    v60._countAndFlagsBits = 0xD00000000000001ALL;
    v60._object = (void *)0x8000000100FEF040;
    String.append(_:)(v60);
    v61._countAndFlagsBits = 0x202C31203D20;
    v61._object = (void *)0xE600000000000000;
    String.append(_:)(v61);
    v62._countAndFlagsBits = 0xD000000000000010;
    v62._object = (void *)0x8000000100FEEB40;
    String.append(_:)(v62);
    v63._countAndFlagsBits = 2112800;
    v63._object = (void *)0xE300000000000000;
    String.append(_:)(v63);
    v64._countAndFlagsBits = 0xD000000000000010;
    v64._object = (void *)0x8000000100FEEB40;
    String.append(_:)(v64);
    v65._countAndFlagsBits = 0x454857203F202620;
    v65._object = (void *)0xEC00000028204552;
    String.append(_:)(v65);
    v66._object = (void *)0x8000000100FD6350;
    v66._countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v66);
    v67._countAndFlagsBits = 0x28204E4920;
    v67._object = (void *)0xE500000000000000;
    String.append(_:)(v67);
    v68 = sub_100A6AE90(63, 0xE100000000000000, v163);
    v185 = (uint64_t)v68;
    v69 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v182, v44);
    v71 = v70;
    swift_bridgeObjectRelease(v68);
    v72._countAndFlagsBits = v69;
    v72._object = v71;
    String.append(_:)(v72);
    swift_bridgeObjectRelease(v71);
    v73._countAndFlagsBits = 10537;
    v73._object = (void *)0xE200000000000000;
    String.append(_:)(v73);
    v74 = v187;
    v75 = v188;
    v76 = -17;
  }
  else
  {
    _StringGuts.grow(_:)(52);
    v77._countAndFlagsBits = 0x20455441445055;
    v77._object = (void *)0xE700000000000000;
    String.append(_:)(v77);
    v78._countAndFlagsBits = 0x736472616F62;
    v78._object = (void *)0xE600000000000000;
    String.append(_:)(v78);
    v79._countAndFlagsBits = 0x2054455320;
    v79._object = (void *)0xE500000000000000;
    String.append(_:)(v79);
    v80._countAndFlagsBits = 0xD00000000000001ALL;
    v80._object = (void *)0x8000000100FEF040;
    String.append(_:)(v80);
    v81._countAndFlagsBits = 0x202C31203D20;
    v81._object = (void *)0xE600000000000000;
    String.append(_:)(v81);
    v82._countAndFlagsBits = 0xD000000000000010;
    v82._object = (void *)0x8000000100FEEB40;
    String.append(_:)(v82);
    v83._countAndFlagsBits = 2112800;
    v83._object = (void *)0xE300000000000000;
    String.append(_:)(v83);
    v84._countAndFlagsBits = 0xD000000000000010;
    v84._object = (void *)0x8000000100FEEB40;
    String.append(_:)(v84);
    v85._countAndFlagsBits = 0x454857203F207C20;
    v85._object = (void *)0xEC00000028204552;
    String.append(_:)(v85);
    v86._object = (void *)0x8000000100FD6350;
    v86._countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v86);
    v87._countAndFlagsBits = 0x28204E4920;
    v87._object = (void *)0xE500000000000000;
    String.append(_:)(v87);
    v88 = sub_100A6AE90(63, 0xE100000000000000, v163);
    v185 = (uint64_t)v88;
    v89 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v182, v44);
    v91 = v90;
    swift_bridgeObjectRelease(v88);
    v92._countAndFlagsBits = v89;
    v92._object = v91;
    String.append(_:)(v92);
    swift_bridgeObjectRelease(v91);
    v93._countAndFlagsBits = 10537;
    v93._object = (void *)0xE200000000000000;
    String.append(_:)(v93);
    v74 = v187;
    v75 = v188;
    v76 = 16;
  }
  v94 = *(_QWORD *)(v56 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v95 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v95, v189);
  swift_retain(v94);
  v97 = sub_1006B77CC(v96, v74, v75);
  if (v55)
  {
    swift_release(v94);
    swift_bridgeObjectRelease(v176);
    return;
  }
  v98 = v97;
  v165 = 0;
  swift_release(v94);
  sub_1006B5B50(v76, 1);
  v99 = 1 << *(_BYTE *)(a2 + 32);
  v100 = -1;
  if (v99 < 64)
    v100 = ~(-1 << v99);
  v101 = v100 & *(_QWORD *)(a2 + 56);
  v182 = v98;
  swift_bridgeObjectRetain(a2);
  v178 = v98 + 24;
  swift_beginAccess(v98 + 24, &v187, 0, 0);
  v177 = (unint64_t)(v99 + 63) >> 6;
  v102 = v166;
  if (v101)
  {
    v103 = __clz(__rbit64(v101));
    goto LABEL_37;
  }
  if (v177 <= 1)
    goto LABEL_42;
  v104 = v180[1];
  v105 = 1;
  if (v104)
    goto LABEL_36;
  v105 = 2;
  if (v177 <= 2)
    goto LABEL_42;
  v104 = v180[2];
  if (v104)
    goto LABEL_36;
  v105 = 3;
  if (v177 <= 3)
    goto LABEL_42;
  v104 = v180[3];
  if (v104)
  {
LABEL_36:
    v103 = __clz(__rbit64(v104)) + (v105 << 6);
LABEL_37:
    v107 = v170;
    sub_1004B8460(*(_QWORD *)(a2 + 48) + v103 * v181, v170, type metadata accessor for CRLBoardIdentifier);
    v108 = v175;
    v109 = sub_1004B84E0(v107, v175, type metadata accessor for CRLBoardIdentifier);
    v183 = UUID.uuid.getter(v109);
    LOWORD(v184) = v110;
    BYTE2(v184) = v111;
    BYTE3(v184) = v112;
    BYTE4(v184) = v113;
    BYTE5(v184) = v114;
    BYTE6(v184) = v115;
    HIBYTE(v184) = v116;
    UUID.uuid.getter(v183);
    v117 = type metadata accessor for __DataStorage(0);
    swift_allocObject(v117, *(unsigned int *)(v117 + 48), *(unsigned __int16 *)(v117 + 52));
    v118 = __DataStorage.init(bytes:length:)(&v183, 16) | 0x4000000000000000;
    v185 = 0x1000000000;
    v186 = v118;
    v119 = (_QWORD *)(v108 + *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20));
    v120 = *v119;
    v121 = v119[1];
    if (String.count.getter(*v119, v121) >= 1)
    {
      v123 = v167;
      static String.Encoding.utf8.getter(v122);
      v124 = String.data(using:allowLossyConversion:)(v123, 0, v120, v121);
      v126 = v125;
      (*(void (**)(char *, uint64_t))(v168 + 8))(v123, v169);
      if (v126 >> 60 == 15)
      {
        v140 = sub_10067D5A0();
        swift_allocError(&type metadata for CRLBoardIdentifierCodingError, v140, 0, 0);
        *v141 = 2;
        swift_willThrow(v142);
        sub_1004BBBC8(v185, v186);
        swift_bridgeObjectRelease(v176);
        sub_1004B84A4(v175, type metadata accessor for CRLBoardIdentifier);
        v143 = swift_release(a2);
        v144 = v182;
        v145 = *(void **)(*(_QWORD *)(v182 + 16) + 32);
        v146 = v174;
        *v174 = v145;
        v172(v146, v171, v102, v143);
        v147 = v145;
        LOBYTE(v145) = _dispatchPreconditionTest(_:)(v146);
        v173(v146, v102);
        if ((v145 & 1) == 0)
          goto LABEL_64;
        v148 = (sqlite3_stmt **)v178;
        swift_beginAccess(v178, &v185, 1, 0);
        if (*v148)
        {
          sqlite3_finalize(*v148);
          *(_QWORD *)(v144 + 24) = 0;
        }
        v149 = v144;
        goto LABEL_55;
      }
      Data.append(_:)(v124, v126);
      sub_1004BE2FC(v124, v126);
      v118 = v186;
    }
    v127 = *(void **)(*(_QWORD *)(v182 + 16) + 32);
    v128 = v174;
    *v174 = v127;
    ((void (*)(_QWORD *, _QWORD, uint64_t))v172)(v128, v171, v102);
    v129 = v127;
    LOBYTE(v127) = _dispatchPreconditionTest(_:)(v128);
    v173(v128, v102);
    if ((v127 & 1) != 0)
      __asm { BR              X9 }
LABEL_60:
    __break(1u);
    __break(1u);
    JUMPOUT(0x100A98048);
  }
  v106 = 4;
  if (v177 > 4)
  {
    v104 = v180[4];
    if (v104)
    {
      v105 = 4;
      goto LABEL_36;
    }
    while (1)
    {
      v105 = v106 + 1;
      if (__OFADD__(v106, 1))
        break;
      if (v105 >= v177)
        goto LABEL_42;
      v104 = v180[v105];
      ++v106;
      if (v104)
        goto LABEL_36;
    }
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
  }
LABEL_42:
  v130 = swift_release(a2);
  v131 = v182;
  v132 = *(void **)(*(_QWORD *)(v182 + 16) + 32);
  v133 = v174;
  *v174 = v132;
  v172(v133, v171, v102, v130);
  v134 = v132;
  LOBYTE(v132) = _dispatchPreconditionTest(_:)(v133);
  v173(v133, v102);
  if ((v132 & 1) == 0)
    goto LABEL_63;
  v135 = (sqlite3_stmt **)v178;
  swift_beginAccess(v178, &v185, 1, 0);
  v136 = sqlite3_step(*v135);
  if (v136 == 101)
  {
    swift_bridgeObjectRelease(v176);
    sub_100A75388(a2, (uint64_t)&_swiftEmptySetSingleton, 0);
    v137 = *(void **)(*(_QWORD *)(v131 + 16) + 32);
    v138 = v174;
    *v174 = v137;
    ((void (*)(_QWORD *, _QWORD, uint64_t))v172)(v138, v171, v102);
    v139 = v137;
    LOBYTE(v137) = _dispatchPreconditionTest(_:)(v138);
    v173(v138, v102);
    if ((v137 & 1) == 0)
      goto LABEL_65;
    if (*v135)
    {
      sqlite3_finalize(*v135);
      *v135 = 0;
    }
  }
  else
  {
    v150 = v136;
    v183 = 0;
    v184 = 0xE000000000000000;
    _StringGuts.grow(_:)(47);
    swift_bridgeObjectRelease(v184);
    v183 = 0xD00000000000002DLL;
    v184 = 0x8000000100FF0BF0;
    v151._countAndFlagsBits = v161;
    v152 = v176;
    v151._object = v176;
    String.append(_:)(v151);
    swift_bridgeObjectRelease(v152);
    v153 = v183;
    v154 = v184;
    v155 = sub_1006B79EC();
    swift_allocError(&type metadata for SQLiteError, v155, 0, 0);
    *(_DWORD *)v156 = v150;
    *(_QWORD *)(v156 + 8) = v153;
    *(_QWORD *)(v156 + 16) = v154;
    swift_willThrow(v157);
    v158 = *(void **)(*(_QWORD *)(v131 + 16) + 32);
    v159 = v174;
    *v174 = v158;
    ((void (*)(_QWORD *, _QWORD, uint64_t))v172)(v159, v171, v102);
    v160 = v158;
    LOBYTE(v158) = _dispatchPreconditionTest(_:)(v159);
    v173(v159, v102);
    if ((v158 & 1) == 0)
      goto LABEL_66;
    if (*v135)
    {
      sqlite3_finalize(*v135);
      *(_QWORD *)(v131 + 24) = 0;
    }
  }
  v149 = v131;
LABEL_55:
  swift_release(v149);
}

uint64_t sub_100A980BC(void *a1, uint64_t a2, void (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  _QWORD v13[8];

  v6 = type metadata accessor for CRLBoardIdentifier(0);
  v13[7] = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v13[6] = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v13[5] = (char *)v13 - v9;
  swift_bridgeObjectRetain(a2);
  v10 = a1;
  sub_1004E67C4(v10, a2, (uint64_t)v10);
  swift_bridgeObjectRelease();

  if (a3)
    a3(0);
  v11 = sub_1008D800C((uint64_t)_swiftEmptyArrayStorage);
  sub_100A75778(a2, 1, 0, v11);
  swift_bridgeObjectRelease();
  return sub_100A75388((uint64_t)&_swiftEmptySetSingleton, (uint64_t)&_swiftEmptySetSingleton, 0);
}

uint64_t sub_100A985B8(uint64_t a1, uint64_t a2)
{
  char v2;

  sub_100A985D8(a1, a2, (void (*)(char *))sub_100A987FC);
  return v2 & 1;
}

void sub_100A985D8(uint64_t a1, uint64_t a2, void (*a3)(char *))
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  int64_t v23;
  void (*v24)(char *);

  v24 = a3;
  v5 = type metadata accessor for CRLBoardIdentifier(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v22 - v10;
  v12 = *(_QWORD *)(a1 + 56);
  v22 = a1 + 56;
  v13 = 1 << *(_BYTE *)(a1 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & v12;
  v23 = (unint64_t)(v13 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v16 = 0;
  while (v15)
  {
    v17 = __clz(__rbit64(v15));
    v15 &= v15 - 1;
    v18 = v17 | (v16 << 6);
LABEL_5:
    sub_1004B8460(*(_QWORD *)(a1 + 48) + *(_QWORD *)(v6 + 72) * v18, (uint64_t)v11, type metadata accessor for CRLBoardIdentifier);
    sub_1004B84E0((uint64_t)v11, (uint64_t)v8, type metadata accessor for CRLBoardIdentifier);
    v24(v8);
    sub_1004B84A4((uint64_t)v8, type metadata accessor for CRLBoardIdentifier);
    if (v3)
      goto LABEL_22;
  }
  if (__OFADD__(v16++, 1))
  {
    __break(1u);
    goto LABEL_24;
  }
  if (v16 >= v23)
    goto LABEL_22;
  v20 = *(_QWORD *)(v22 + 8 * v16);
  if (v20)
  {
LABEL_17:
    v15 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v16 << 6);
    goto LABEL_5;
  }
  v21 = v16 + 1;
  if (v16 + 1 >= v23)
    goto LABEL_22;
  v20 = *(_QWORD *)(v22 + 8 * v21);
  if (v20)
    goto LABEL_16;
  v21 = v16 + 2;
  if (v16 + 2 >= v23)
    goto LABEL_22;
  v20 = *(_QWORD *)(v22 + 8 * v21);
  if (v20)
    goto LABEL_16;
  v21 = v16 + 3;
  if (v16 + 3 >= v23)
  {
LABEL_22:
    swift_release(a1);
    return;
  }
  v20 = *(_QWORD *)(v22 + 8 * v21);
  if (v20)
  {
LABEL_16:
    v16 = v21;
    goto LABEL_17;
  }
  while (1)
  {
    v16 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v16 >= v23)
      goto LABEL_22;
    v20 = *(_QWORD *)(v22 + 8 * v16);
    ++v21;
    if (v20)
      goto LABEL_17;
  }
LABEL_24:
  __break(1u);
}

void sub_100A987FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  void (*v10)(_QWORD *, uint64_t, uint64_t);
  id v11;
  void (*v12)(_QWORD *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  id v23;
  uint64_t (*v24)(_QWORD *, uint64_t);
  sqlite3_stmt **v25;
  int v26;
  void *v27;
  id v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  __n128 v32;
  void *v33;
  id v34;
  char v35;
  uint64_t (*v36)(_QWORD *, uint64_t);
  uint64_t v37;
  _QWORD v38[3];
  _BYTE v39[32];

  v2 = v0;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (uint64_t (**)(_QWORD *, uint64_t))((char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v7 = v8;
  v9 = enum case for DispatchPredicate.onQueue(_:);
  v10 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v4 + 104);
  ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v10)(v7, enum case for DispatchPredicate.onQueue(_:), v3, v5);
  v11 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  v12 = *(void (**)(_QWORD *, uint64_t))(v4 + 8);
  v12(v7, v3);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v13 = sub_100A80ED8();
  if (v1 || !v13)
    return;
  v36 = (uint64_t (*)(_QWORD *, uint64_t))v12;
  v37 = v13;
  v38[0] = 0;
  v38[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v15 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v15, v39);
  swift_retain(v14);
  v17 = sub_1006B77CC(v16, 0xD000000000000051, 0x8000000100FF16C0);
  swift_release(v14);
  sub_1006B5B50(*(_QWORD *)(v37 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_unsyncedChanges) | 4, 1);
  v18 = sub_10067BA88();
  v20 = v18;
  v21 = v19;
  sub_1006B5E80(v18, v19);
  sub_1004BBBC8(v20, v21);
  v22 = *(void **)(*(_QWORD *)(v17 + 16) + 32);
  *v7 = v22;
  v10(v7, v9, v3);
  v23 = v22;
  LOBYTE(v22) = _dispatchPreconditionTest(_:)(v7);
  v24 = v36;
  v36(v7, v3);
  if ((v22 & 1) == 0)
    goto LABEL_16;
  v25 = (sqlite3_stmt **)(v17 + 24);
  swift_beginAccess(v17 + 24, v38, 1, 0);
  v26 = sqlite3_step(*(sqlite3_stmt **)(v17 + 24));
  if (v26 != 101)
    goto LABEL_12;
  v27 = *(void **)(*(_QWORD *)(v17 + 16) + 32);
  *v7 = v27;
  v10(v7, v9, v3);
  v28 = v27;
  v9 = _dispatchPreconditionTest(_:)(v7);
  v26 = v24(v7, v3);
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_12:
    v29 = v26;
    v30 = sub_1006B79EC();
    swift_allocError(&type metadata for SQLiteError, v30, 0, 0);
    *(_DWORD *)v31 = v29;
    *(_QWORD *)(v31 + 8) = 0xD00000000000001ELL;
    *(_QWORD *)(v31 + 16) = 0x8000000100FF1720;
    swift_willThrow(v32);
    v33 = *(void **)(*(_QWORD *)(v17 + 16) + 32);
    *v7 = v33;
    v10(v7, v9, v3);
    v34 = v33;
    v35 = _dispatchPreconditionTest(_:)(v7);
    v24(v7, v3);
    if ((v35 & 1) != 0)
      goto LABEL_13;
LABEL_17:
    __break(1u);
  }
LABEL_13:
  if (*v25)
  {
    sqlite3_finalize(*v25);
    *v25 = 0;
  }
  swift_release(v17);
  swift_release(v37);
}

double sub_100A98BBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  double result;
  _QWORD v21[2];
  uint64_t v22;
  double *v23;
  _QWORD aBlock[5];
  _QWORD *v25;

  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v22 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21[1] = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  v12 = swift_allocObject(&unk_101292858, 24, 7);
  swift_unknownObjectWeakInit(v12 + 16);
  v13 = (_QWORD *)swift_allocObject(&unk_1012934B0, 40, 7);
  v13[2] = v12;
  v13[3] = a1;
  v13[4] = a2;
  aBlock[4] = sub_100B00DC4;
  v25 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(_QWORD *)"";
  aBlock[2] = sub_1005D2FC0;
  aBlock[3] = &unk_1012934C8;
  v14 = _Block_copy(aBlock);
  swift_retain(v12);
  sub_1004C0F54(a1, a2);
  static DispatchQoS.unspecified.getter(v15);
  v23 = _swiftEmptyArrayStorage;
  v16 = sub_1004B7878((unint64_t *)&qword_1013E1D20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v17 = sub_1004B804C((uint64_t *)&unk_1013DFBF0);
  v18 = sub_1004CBA30((unint64_t *)&qword_1013E1D30, (uint64_t *)&unk_1013DFBF0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v17, v18, v5, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v7, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v19 = v25;
  swift_release(v12);
  *(_QWORD *)&result = swift_release(v19).n128_u64[0];
  return result;
}

void sub_100A98E00(uint64_t a1, void (*a2)(_QWORD), uint64_t a3)
{
  uint64_t v5;
  void *Strong;
  char *v7;
  _BYTE v8[24];

  v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v8, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v5);
  if (Strong)
  {
    v7 = Strong;
    sub_1004E67E0(v7, (uint64_t)v7);

    if (a2)
      a2(0);
    sub_100A75388((uint64_t)&_swiftEmptySetSingleton, (uint64_t)&_swiftEmptySetSingleton, 0);
    sub_100A99B04((uint64_t)a2, a3, *(double *)&v7[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__deletedBoardsCleanupTolerance]);

  }
}

void sub_100A98F6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  _QWORD *v22;
  void *v23;
  void (*v24)(_QWORD *, __n128);
  id v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  double v49;
  double v50;
  void *v51;
  uint64_t v52;
  void (*v53)(_QWORD *, uint64_t, uint64_t);
  id v54;
  void (*v55)(_QWORD *, uint64_t);
  void *v56;
  id v57;
  void *v58;
  __n128 v59;
  id v60;
  id v61;
  uint64_t v62;
  __n128 v63;
  void *v64;
  id v65;
  sqlite3_stmt **v66;
  unsigned int v67;
  void *v68;
  id v69;
  void *v70;
  id v71;
  sqlite3_stmt **v72;
  _BYTE *v73;
  sqlite3_stmt **v74;
  _BYTE *v75;
  int v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t inited;
  id v88;
  __n128 v89;
  uint64_t v90;
  uint64_t v91;
  __n128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  void *v99;
  id v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  id v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __n128 v113;
  void *v114;
  id v115;
  sqlite3_stmt **v116;
  _QWORD v117[2];
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void (*v126)(_QWORD *, uint64_t);
  char *v127;
  uint64_t v128;
  void (*v129)(_QWORD *, uint64_t, uint64_t);
  unsigned int v130;
  sqlite3_stmt **v131;
  _QWORD v132[3];
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char v139[72];
  void *v140;
  unint64_t v141;
  char v142[32];

  v2 = v1;
  v3 = v0;
  v4 = type metadata accessor for CRLBoardIdentifierStorage(0);
  __chkstk_darwin(v4);
  v127 = (char *)v117 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v6);
  v125 = (uint64_t)v117 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v124 = (uint64_t)v117 - v9;
  __chkstk_darwin(v10);
  v123 = (uint64_t)v117 - v11;
  __chkstk_darwin(v12);
  v122 = (uint64_t)v117 - v13;
  __chkstk_darwin(v14);
  v128 = (uint64_t)v117 - v15;
  v131 = (sqlite3_stmt **)type metadata accessor for Date(0);
  v121 = (uint64_t)*(v131 - 1);
  __chkstk_darwin(v131);
  v17 = (char *)v117 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DispatchPredicate(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v22 = (_QWORD *)((char *)v117 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v23 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v22 = v23;
  v24 = *(void (**)(_QWORD *, __n128))(v19 + 104);
  v130 = enum case for DispatchPredicate.onQueue(_:);
  v24(v22, v20);
  v25 = v23;
  LOBYTE(v23) = _dispatchPreconditionTest(_:)(v22);
  v126 = *(void (**)(_QWORD *, uint64_t))(v19 + 8);
  v126(v22, v18);
  if ((v23 & 1) == 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v129 = (void (*)(_QWORD *, uint64_t, uint64_t))v24;
  v140 = 0;
  v141 = 0xE000000000000000;
  _StringGuts.grow(_:)(64);
  v26._countAndFlagsBits = 0x205443454C4553;
  v26._object = (void *)0xE700000000000000;
  String.append(_:)(v26);
  v27._countAndFlagsBits = 0x736472616F62;
  v27._object = (void *)0xE600000000000000;
  String.append(_:)(v27);
  v28._countAndFlagsBits = 46;
  v28._object = (void *)0xE100000000000000;
  String.append(_:)(v28);
  v29._object = (void *)0x8000000100FD6350;
  v29._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v29);
  v30._countAndFlagsBits = 0x204D4F524620;
  v30._object = (void *)0xE600000000000000;
  String.append(_:)(v30);
  v31._countAndFlagsBits = 0x736472616F62;
  v31._object = (void *)0xE600000000000000;
  String.append(_:)(v31);
  v32._countAndFlagsBits = 0x20455245485720;
  v32._object = (void *)0xE700000000000000;
  String.append(_:)(v32);
  v33._countAndFlagsBits = 0x6E6F7473626D6F74;
  v33._object = (void *)0xEE00657461645F65;
  String.append(_:)(v33);
  v34._countAndFlagsBits = 0xD000000000000011;
  v34._object = (void *)0x8000000100FEF350;
  String.append(_:)(v34);
  v35._countAndFlagsBits = 0x6E6F7473626D6F74;
  v35._object = (void *)0xEA00000000006465;
  String.append(_:)(v35);
  v36._countAndFlagsBits = 0x444E412031203D20;
  v36._object = (void *)0xE900000000000020;
  String.append(_:)(v36);
  v37._countAndFlagsBits = 0x6E6F7473626D6F74;
  v37._object = (void *)0xEE00657461645F65;
  String.append(_:)(v37);
  v38._countAndFlagsBits = 0x3F203D3C20;
  v38._object = (void *)0xE500000000000000;
  String.append(_:)(v38);
  v39 = (uint64_t)v140;
  v40 = v141;
  v41 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v42 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v42, v142);
  swift_retain(v41);
  v44 = sub_1006B77CC(v43, v39, v40);
  if (v1)
  {
    v45 = v41;
    goto LABEL_31;
  }
  v46 = v44;
  v47 = swift_release(v41);
  v48 = static Date.now.getter(v47);
  v49 = Date.timeIntervalSinceReferenceDate.getter(v48);
  (*(void (**)(char *, sqlite3_stmt **))(v121 + 8))(v17, v131);
  v117[1] = v3;
  v50 = *(double *)(v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__deletedBoardTTL);
  v51 = *(void **)(*(_QWORD *)(v46 + 16) + 32);
  *v22 = v51;
  v52 = v130;
  v53 = v129;
  v129(v22, v130, v18);
  v54 = v51;
  LOBYTE(v51) = _dispatchPreconditionTest(_:)(v22);
  v55 = v126;
  v126(v22, v18);
  if ((v51 & 1) == 0)
  {
    __break(1u);
    goto LABEL_43;
  }
  v131 = (sqlite3_stmt **)(v46 + 24);
  swift_beginAccess(v46 + 24, &v138, 1, 0);
  sqlite3_bind_double(*(sqlite3_stmt **)(v46 + 24), 1, v49 - v50);
  v140 = &_swiftEmptySetSingleton;
  v56 = *(void **)(*(_QWORD *)(v46 + 16) + 32);
  *v22 = v56;
  v53(v22, v52, v18);
  v57 = v56;
  LOBYTE(v56) = _dispatchPreconditionTest(_:)(v22);
  v55(v22, v18);
  if ((v56 & 1) == 0)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  v58 = *(void **)(*(_QWORD *)(v46 + 16) + 32);
  *v22 = v58;
  v59 = swift_retain(v46);
  ((void (*)(_QWORD *, uint64_t, uint64_t, __n128))v53)(v22, v52, v18, v59);
  v60 = v58;
  LOBYTE(v58) = _dispatchPreconditionTest(_:)(v22);
  v55(v22, v18);
  if ((v58 & 1) == 0)
  {
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  v118 = xmmword_100EF5E40;
  while (1)
  {
    sub_1006B7DA4(0, 0, 1);
    v66 = v131;
    swift_beginAccess(v131, &v137, 0, 0);
    v67 = sqlite3_step(*v66);
    if (v67 != 100)
      break;
    v68 = *(void **)(*(_QWORD *)(v46 + 16) + 32);
    *v22 = v68;
    v53(v22, v52, v18);
    swift_retain(v46);
    v69 = v68;
    LOBYTE(v68) = _dispatchPreconditionTest(_:)(v22);
    v55(v22, v18);
    if ((v68 & 1) == 0)
      goto LABEL_38;
    v70 = *(void **)(*(_QWORD *)(v46 + 16) + 32);
    *v22 = v70;
    v53(v22, v52, v18);
    v71 = v70;
    LOBYTE(v70) = _dispatchPreconditionTest(_:)(v22);
    v55(v22, v18);
    if ((v70 & 1) == 0)
      goto LABEL_39;
    v72 = v131;
    if (sqlite3_column_type(*v131, 0) == 5)
      goto LABEL_9;
    v73 = sqlite3_column_blob(*v72, 0);
    if (!v73)
      goto LABEL_9;
    v74 = v72;
    v75 = v73;
    v76 = sqlite3_column_bytes(*v74, 0);
    v77 = sub_1005CB82C(v75, v76);
    v79 = v78;
    sub_1004BE310(v77, v78);
    v80 = v127;
    sub_10067B2E0(v77, v79);
    if (v2)
    {
      swift_errorRelease(v2);
      sub_1004BBBC8(v77, v79);
      v2 = 0;
      v53 = v129;
      v52 = v130;
LABEL_9:
      if (qword_1013DD858 != -1)
        swift_once(&qword_1013DD858, sub_100A05554);
      swift_beginAccess(&static OS_os_log.boardStore, &v136, 0, 0);
      v61 = (id)static OS_os_log.boardStore;
      v62 = static os_log_type_t.error.getter(v61);
      sub_100A06EBC((uint64_t)v61, &_mh_execute_header, v62, "Failure reading board identifier data.", 38, 2, (uint64_t)_swiftEmptyArrayStorage);

      v63 = swift_release(v46);
      goto LABEL_12;
    }
    v121 = 0;
    v81 = (uint64_t)v80;
    v82 = v123;
    sub_1004B84E0(v81, v123, type metadata accessor for CRLBoardIdentifierStorage);
    v83 = v82;
    v84 = v122;
    sub_1004B84E0(v83, v122, type metadata accessor for CRLBoardIdentifier);
    sub_1004B84E0(v84, v128, type metadata accessor for CRLBoardIdentifier);
    if (qword_1013DD858 != -1)
      swift_once(&qword_1013DD858, sub_100A05554);
    swift_beginAccess(&static OS_os_log.boardStore, &v135, 0, 0);
    v85 = (void *)static OS_os_log.boardStore;
    v86 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    inited = swift_initStackObject(v86, &v134);
    *(_OWORD *)(inited + 16) = v118;
    v88 = v85;
    v90 = UUID.description.getter(v89);
    v119 = v91;
    v120 = v90;
    *(_QWORD *)(inited + 56) = &type metadata for String;
    *(_QWORD *)(inited + 64) = sub_1004CFC2C();
    *(_QWORD *)(inited + 32) = v120;
    *(_QWORD *)(inited + 40) = v119;
    v93 = static os_log_type_t.default.getter(v92);
    sub_100A06EBC((uint64_t)v88, &_mh_execute_header, v93, "Setting hideFromRecentlyDeleted to true after TTL expiration. Board ID:%{public}@)", 82, 2, inited);
    swift_setDeallocating(inited);
    v94 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(inited + 32, 1, v94);

    v95 = v125;
    sub_1004B8460(v128, v125, type metadata accessor for CRLBoardIdentifier);
    v96 = v124;
    sub_100AD7844(v124, v95);
    swift_release(v46);
    sub_1004BBBC8(v77, v79);
    sub_1004B84A4(v96, type metadata accessor for CRLBoardIdentifier);
    sub_1004B84A4(v128, type metadata accessor for CRLBoardIdentifier);
    v2 = v121;
    v55 = v126;
    v53 = v129;
    v52 = v130;
LABEL_12:
    v64 = *(void **)(*(_QWORD *)(v46 + 16) + 32);
    *v22 = v64;
    ((void (*)(_QWORD *, uint64_t, uint64_t, __n128))v53)(v22, v52, v18, v63);
    v65 = v64;
    LOBYTE(v64) = _dispatchPreconditionTest(_:)(v22);
    v55(v22, v18);
    if ((v64 & 1) == 0)
      goto LABEL_37;
  }
  if (v67 && v67 != 101)
  {
    v128 = v67;
    sub_1006B7DA4(0, 0, 1);
    v97 = 0;
  }
  else
  {
    v128 = 0;
    v97 = 1;
  }
  v98 = v140;
  sub_100A96CAC(0, (uint64_t)v140);
  if (v2)
  {
    swift_release(v46);
    swift_bridgeObjectRelease(v98);
    sub_1006B7DA4(v128, 0, v97);
    v99 = *(void **)(*(_QWORD *)(v46 + 16) + 32);
    *v22 = v99;
    v129(v22, v130, v18);
    v100 = v99;
    LOBYTE(v99) = _dispatchPreconditionTest(_:)(v22);
    v55(v22, v18);
    if ((v99 & 1) != 0)
    {
      if (*v131)
      {
        sqlite3_finalize(*v131);
        *(_QWORD *)(v46 + 24) = 0;
      }
      v45 = v46;
LABEL_31:
      swift_release(v45);
      if (qword_1013DD858 == -1)
      {
LABEL_32:
        swift_beginAccess(&static OS_os_log.boardStore, &v140, 0, 0);
        v101 = (void *)static OS_os_log.boardStore;
        v102 = sub_1004B804C((uint64_t *)&unk_1013E0180);
        v103 = swift_initStackObject(v102, v139);
        *(_OWORD *)(v103 + 16) = xmmword_100EF5E40;
        swift_getErrorValue(v2, &v133, v132);
        v104 = v132[1];
        v105 = v132[2];
        v106 = v101;
        v107 = Error.localizedDescription.getter(v104, v105);
        v109 = v108;
        *(_QWORD *)(v103 + 56) = &type metadata for String;
        v110 = sub_1004CFC2C();
        *(_QWORD *)(v103 + 64) = v110;
        *(_QWORD *)(v103 + 32) = v107;
        *(_QWORD *)(v103 + 40) = v109;
        v111 = static os_log_type_t.error.getter(v110);
        sub_100A06EBC((uint64_t)v106, &_mh_execute_header, v111, "Failed to hide TTL'd boards from recently deleted, with error %@", 64, 2, v103);
        swift_setDeallocating(v103);
        v112 = sub_1004B804C(&qword_1013E0190);
        swift_arrayDestroy(v103 + 32, 1, v112);

        swift_willThrow(v113);
        return;
      }
LABEL_41:
      swift_once(&qword_1013DD858, sub_100A05554);
      goto LABEL_32;
    }
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
  }
  swift_release(v46);
  swift_bridgeObjectRelease(v98);
  sub_1006B7DA4(v128, 0, v97);
  v114 = *(void **)(*(_QWORD *)(v46 + 16) + 32);
  *v22 = v114;
  v129(v22, v130, v18);
  v115 = v114;
  LOBYTE(v114) = _dispatchPreconditionTest(_:)(v22);
  v55(v22, v18);
  if ((v114 & 1) == 0)
    goto LABEL_45;
  v116 = v131;
  if (*v131)
  {
    sqlite3_finalize(*v131);
    *v116 = 0;
  }
  swift_release(v46);
}

void sub_100A99B04(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  char *v36;
  double (*v37)(char *, uint64_t);
  char *v38;
  uint64_t v39;
  __n128 v40;
  __n128 v41;
  id v42;
  uint64_t v43;
  _QWORD v44[2];
  uint64_t v45;
  char *v46;
  uint64_t v47;
  double *v48;
  _QWORD aBlock[5];
  uint64_t v50;

  v4 = v3;
  v47 = type metadata accessor for DispatchTime(0);
  v45 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v9 = (char *)v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v46 = (char *)v44 - v11;
  v12 = type metadata accessor for DispatchWorkItemFlags(0);
  __chkstk_darwin(v12);
  v14 = (char *)v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchPredicate(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (_QWORD *)((char *)v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = *(void **)(v4 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v19 = v20;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v16 + 104))(v19, enum case for DispatchPredicate.onQueue(_:), v15, v17);
  v44[1] = v20;
  LOBYTE(v20) = _dispatchPreconditionTest(_:)(v19);
  (*(void (**)(_QWORD *, uint64_t))(v16 + 8))(v19, v15);
  if ((v20 & 1) == 0)
  {
    __break(1u);
LABEL_8:
    swift_once(&qword_1013DD858, sub_100A05554);
    goto LABEL_6;
  }
  v21 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_deletedBoardsCleanupWorkItem;
  v22 = *(_QWORD *)(v4 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_deletedBoardsCleanupWorkItem);
  if (!v22
    || (v23 = swift_retain(*(_QWORD *)(v4 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_deletedBoardsCleanupWorkItem)),
        v24 = dispatch thunk of DispatchWorkItem.isCancelled.getter(v23),
        swift_release(v22),
        (v24 & 1) != 0))
  {
    v25 = swift_allocObject(&unk_101292858, 24, 7);
    swift_unknownObjectWeakInit(v25 + 16);
    v26 = swift_allocObject(&unk_101293500, 48, 7);
    *(_QWORD *)(v26 + 16) = v25;
    *(_QWORD *)(v26 + 24) = a1;
    *(_QWORD *)(v26 + 32) = a2;
    *(double *)(v26 + 40) = a3;
    aBlock[4] = sub_100B00E18;
    v50 = v26;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = *(_QWORD *)"";
    aBlock[2] = sub_1005D2FC0;
    aBlock[3] = &unk_101293518;
    v27 = _Block_copy(aBlock);
    v48 = _swiftEmptyArrayStorage;
    swift_retain(v25);
    sub_1004C0F54(a1, a2);
    v28 = sub_1004B7878((unint64_t *)&qword_1013E1D20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v29 = sub_1004B804C((uint64_t *)&unk_1013DFBF0);
    v30 = sub_1004CBA30((unint64_t *)&qword_1013E1D30, (uint64_t *)&unk_1013DFBF0, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v48, v29, v30, v12, v28);
    v31 = type metadata accessor for DispatchWorkItem(0);
    swift_allocObject(v31, *(unsigned int *)(v31 + 48), *(unsigned __int16 *)(v31 + 52));
    v32 = DispatchWorkItem.init(flags:block:)(v14, v27);
    v33 = v50;
    swift_release(v25);
    swift_release(v33);
    v34 = *(_QWORD *)(v4 + v21);
    *(_QWORD *)(v4 + v21) = v32;
    swift_retain(v32);
    v35 = swift_release(v34);
    static DispatchTime.now()(v35);
    v36 = v46;
    + infix(_:_:)(v9, ceil(a3));
    v37 = *(double (**)(char *, uint64_t))(v45 + 8);
    v38 = v9;
    v39 = v47;
    v40.n128_f64[0] = v37(v38, v47);
    OS_dispatch_queue.asyncAfter(deadline:execute:)(v36, v32, v40);
    v41 = swift_release(v32);
    ((void (*)(char *, uint64_t, __n128))v37)(v36, v39, v41);
    return;
  }
  if (qword_1013DD858 != -1)
    goto LABEL_8;
LABEL_6:
  swift_beginAccess(&static OS_os_log.boardStore, aBlock, 0, 0);
  v42 = (id)static OS_os_log.boardStore;
  v43 = static os_log_type_t.error.getter(v42);
  sub_100A06EBC((uint64_t)v42, &_mh_execute_header, v43, "Failed to schedule cleanup for boards past TTL. Found existing cleanup task", 75, 2, (uint64_t)_swiftEmptyArrayStorage);

}

double sub_100A99F8C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double result;
  uint64_t v15;

  v7 = sub_1004B804C(&qword_1013EB680);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = __chkstk_darwin(v7);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16))((char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7, v10);
  v11 = *(unsigned __int8 *)(v8 + 80);
  v12 = (v11 + 16) & ~v11;
  v13 = swift_allocObject(&unk_101292C90, v12 + v9, v11 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v13 + v12, (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  sub_100A957C8(a3, a4, (uint64_t)sub_10073FDCC, v13);
  *(_QWORD *)&result = swift_release(v13).n128_u64[0];
  return result;
}

double sub_100A9A084(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;

  v5 = sub_1004B804C(&qword_1013EB680);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = __chkstk_darwin(v5);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16))((char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5, v8);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = (v9 + 16) & ~v9;
  v11 = swift_allocObject(&unk_101292BA0, v10 + v7, v9 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v11 + v10, (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  sub_100A9FD18(a3, (uint64_t)sub_10073FDCC, v11, (uint64_t)&unk_101292BC8, (uint64_t)sub_100AFFDC4, (uint64_t)&unk_101292BE0);
  *(_QWORD *)&result = swift_release(v11).n128_u64[0];
  return result;
}

double sub_100A9A180(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;

  v5 = sub_1004B804C(&qword_1013EB680);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = __chkstk_darwin(v5);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16))((char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5, v8);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = (v9 + 16) & ~v9;
  v11 = swift_allocObject(&unk_101292C18, v10 + v7, v9 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v11 + v10, (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  sub_100A9FD18(a3, (uint64_t)sub_10073FDCC, v11, (uint64_t)&unk_101292C40, (uint64_t)sub_100AFFDE4, (uint64_t)&unk_101292C58);
  *(_QWORD *)&result = swift_release(v11).n128_u64[0];
  return result;
}

void sub_100A9A27C(void *a1, uint64_t a2, void (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD v11[8];

  v6 = type metadata accessor for CRLBoardIdentifier(0);
  v11[7] = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v11[6] = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11[5] = (char *)v11 - v9;
  swift_bridgeObjectRetain(a2);
  v10 = a1;
  sub_1004E67FC(v10, a2, (uint64_t)v10);
  swift_bridgeObjectRelease();

  if (a3)
    a3(0);
}

void sub_100A9A734(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;

  v3 = type metadata accessor for CRLBoardIdentifier(0);
  v21 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v19 - v7;
  v9 = *(_QWORD *)(a1 + 56);
  v19 = a1 + 56;
  v10 = 1 << *(_BYTE *)(a1 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & v9;
  v20 = (unint64_t)(v10 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v13 = 0;
  while (v12)
  {
    v14 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    v15 = v14 | (v13 << 6);
LABEL_5:
    sub_1004B8460(*(_QWORD *)(a1 + 48) + *(_QWORD *)(v21 + 72) * v15, (uint64_t)v8, type metadata accessor for CRLBoardIdentifier);
    sub_1004B84E0((uint64_t)v8, (uint64_t)v5, type metadata accessor for CRLBoardIdentifier);
    sub_100A9A978((uint64_t)v5, 0xD00000000000001BLL, 0x8000000100FF1790, 1);
    sub_1004B84A4((uint64_t)v5, type metadata accessor for CRLBoardIdentifier);
    if (v1)
      goto LABEL_22;
  }
  if (__OFADD__(v13++, 1))
  {
    __break(1u);
    goto LABEL_24;
  }
  if (v13 >= v20)
    goto LABEL_22;
  v17 = *(_QWORD *)(v19 + 8 * v13);
  if (v17)
  {
LABEL_17:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v13 << 6);
    goto LABEL_5;
  }
  v18 = v13 + 1;
  if (v13 + 1 >= v20)
    goto LABEL_22;
  v17 = *(_QWORD *)(v19 + 8 * v18);
  if (v17)
    goto LABEL_16;
  v18 = v13 + 2;
  if (v13 + 2 >= v20)
    goto LABEL_22;
  v17 = *(_QWORD *)(v19 + 8 * v18);
  if (v17)
    goto LABEL_16;
  v18 = v13 + 3;
  if (v13 + 3 >= v20)
  {
LABEL_22:
    swift_release(a1);
    return;
  }
  v17 = *(_QWORD *)(v19 + 8 * v18);
  if (v17)
  {
LABEL_16:
    v13 = v18;
    goto LABEL_17;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v20)
      goto LABEL_22;
    v17 = *(_QWORD *)(v19 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_17;
  }
LABEL_24:
  __break(1u);
}

void sub_100A9A978(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  void (*v19)(_QWORD, __n128);
  id v20;
  void (*v21)(_QWORD *, uint64_t);
  void *v22;
  uint64_t v23;
  uint64_t inited;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  void (*v41)(__n128);
  uint64_t v42;
  sqlite3_stmt **v43;
  void (*v44)(uint64_t, sqlite3_stmt **);
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  void *v55;
  _QWORD *v56;
  uint64_t v57;
  id v58;
  char v59;
  void (*v60)(_QWORD *, uint64_t);
  sqlite3_stmt **v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  __n128 v71;
  void *v72;
  id v73;
  sqlite3_stmt **v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  unint64_t v78;
  uint64_t v79;
  __n128 v80;
  void *v81;
  id v82;
  _BYTE v83[12];
  int v84;
  uint64_t v85;
  _QWORD *v86;
  void (*v87)(_QWORD *, uint64_t);
  unsigned int v88;
  void (*v89)(_QWORD *, _QWORD, uint64_t);
  _BYTE *v90;
  uint64_t v91;
  _BYTE *v92;
  _BYTE *v93;
  uint64_t v94;
  sqlite3_stmt **v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD v99[3];
  char v100[32];
  char v101[24];
  char v102[24];
  char v103[36];
  char v104[8];

  v96 = a2;
  v98 = a1;
  v91 = type metadata accessor for CRLAssetReferrerIdentifier(0);
  __chkstk_darwin(v91);
  v8 = &v83[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v95 = (sqlite3_stmt **)type metadata accessor for UUID(0);
  v94 = (uint64_t)*(v95 - 1);
  __chkstk_darwin(v95);
  v92 = &v83[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  v93 = &v83[-v11];
  v12 = type metadata accessor for DispatchPredicate(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = &v83[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = v4;
  v18 = *(void **)(v4 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v16 = v18;
  v19 = *(void (**)(_QWORD, __n128))(v13 + 104);
  v88 = enum case for DispatchPredicate.onQueue(_:);
  v89 = (void (*)(_QWORD *, _QWORD, uint64_t))v19;
  v19(v16, v14);
  v20 = v18;
  LOBYTE(v18) = _dispatchPreconditionTest(_:)(v16);
  v21 = *(void (**)(_QWORD *, uint64_t))(v13 + 8);
  v86 = v16;
  v21(v16, v12);
  if ((v18 & 1) == 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  v90 = v8;
  v84 = a4;
  v87 = v21;
  v85 = v12;
  if (qword_1013DD858 != -1)
LABEL_19:
    swift_once(&qword_1013DD858, sub_100A05554);
  swift_beginAccess(&static OS_os_log.boardStore, v104, 0, 0);
  v22 = (void *)static OS_os_log.boardStore;
  v23 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v23, v103);
  *(_OWORD *)(inited + 16) = xmmword_100EF5A10;
  v25 = v22;
  v26 = v98;
  v27 = UUID.uuidString.getter(v25);
  v29 = v28;
  *(_QWORD *)(inited + 56) = &type metadata for String;
  v30 = sub_1004CFC2C();
  *(_QWORD *)(inited + 32) = v27;
  *(_QWORD *)(inited + 40) = v29;
  *(_QWORD *)(inited + 96) = &type metadata for String;
  *(_QWORD *)(inited + 104) = v30;
  v31 = v96;
  *(_QWORD *)(inited + 64) = v30;
  *(_QWORD *)(inited + 72) = v31;
  *(_QWORD *)(inited + 80) = a3;
  v32 = swift_bridgeObjectRetain(a3);
  v33 = static os_log_type_t.default.getter(v32);
  sub_100A06EBC((uint64_t)v25, &_mh_execute_header, v33, "Board %{public}@ purged with reason: %{public}@", 47, 2, inited);
  swift_setDeallocating(inited);
  v34 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(inited + 32, 2, v34);

  v35 = v17;
  v36 = v97;
  v37 = sub_100A80ED8();
  if (!v36)
  {
    v38 = v37;
    if (v37)
    {
      v39 = swift_beginAccess(v37 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_rootContainerUUID, v102, 0, 0);
      v40 = v94;
      v41 = *(void (**)(__n128))(v94 + 16);
      v42 = (uint64_t)v93;
      v43 = v95;
      v41(v39);
      sub_100A8DE24(v42, v26);
      v44 = *(void (**)(uint64_t, sqlite3_stmt **))(v40 + 8);
      v44(v42, v43);
      v45 = swift_beginAccess(v38 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_alternateRootContainerUUID, v101, 0, 0);
      v46 = (uint64_t)v92;
      v41(v45);
      sub_100A8DE24(v46, v26);
      v44(v46, v43);
      v47 = (uint64_t)v90;
      sub_1004B8460(v26, (uint64_t)v90, type metadata accessor for CRLBoardIdentifier);
      swift_storeEnumTagMultiPayload(v47, v91, 0);
      sub_100A8A7E4(v47);
      sub_1004B84A4(v47, type metadata accessor for CRLAssetReferrerIdentifier);
      v99[0] = 0;
      v99[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(29);
      swift_bridgeObjectRelease();
      v48 = *(_QWORD *)(v35 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
      v49 = type metadata accessor for SQLiteStatement();
      swift_initStackObject(v49, v100);
      swift_retain(v48);
      v51 = sub_1006B77CC(v50, 0xD00000000000002FLL, 0x8000000100FF17E0);
      swift_release(v48);
      v52 = sub_10067BA88();
      v54 = v53;
      v97 = v38;
      sub_1006B5E80(v52, v53);
      sub_1004BBBC8(v52, v54);
      v55 = *(void **)(*(_QWORD *)(v51 + 16) + 32);
      v56 = v86;
      *v86 = v55;
      v57 = v85;
      v89(v56, v88, v85);
      v58 = v55;
      v59 = _dispatchPreconditionTest(_:)(v56);
      v60 = v87;
      v87(v56, v57);
      if ((v59 & 1) != 0)
      {
        v61 = (sqlite3_stmt **)(v51 + 24);
        swift_beginAccess(v51 + 24, v99, 1, 0);
        v62 = sqlite3_step(*(sqlite3_stmt **)(v51 + 24));
        if (v62 != 101)
        {
          v77 = v62;
          v78 = sub_1006B79EC();
          swift_allocError(&type metadata for SQLiteError, v78, 0, 0);
          *(_DWORD *)v79 = v77;
          *(_QWORD *)(v79 + 8) = 0xD000000000000018;
          *(_QWORD *)(v79 + 16) = 0x8000000100FF1810;
          swift_willThrow(v80);
          v81 = *(void **)(*(_QWORD *)(v51 + 16) + 32);
          *v56 = v81;
          v89(v56, v88, v57);
          v82 = v81;
          LOBYTE(v81) = _dispatchPreconditionTest(_:)(v56);
          v60(v56, v57);
          if ((v81 & 1) != 0)
          {
            v75 = v97;
            if (*v61)
            {
              sqlite3_finalize(*v61);
              *v61 = 0;
            }
            v76 = v51;
            goto LABEL_17;
          }
          goto LABEL_22;
        }
        v95 = (sqlite3_stmt **)(v51 + 24);
        v63 = sub_1004B804C(&qword_1013E7870);
        v64 = type metadata accessor for CRLBoardIdentifier(0);
        v65 = *(_QWORD *)(v64 - 8);
        v66 = *(_QWORD *)(v65 + 72);
        v67 = *(unsigned __int8 *)(v65 + 80);
        v96 = v35;
        v68 = (v67 + 32) & ~v67;
        v69 = swift_allocObject(v63, v68 + v66, v67 | 7);
        *(_OWORD *)(v69 + 16) = xmmword_100EF5E40;
        sub_1004B8460(v98, v69 + v68, type metadata accessor for CRLBoardIdentifier);
        v70 = sub_1004B5A78(v69);
        swift_setDeallocating(v69);
        swift_arrayDestroy(v69 + v68, 1, v64);
        swift_deallocClassInstance(v69, 32, 7);
        sub_100A75388((uint64_t)v70, (uint64_t)&_swiftEmptySetSingleton, v84 & 1);
        v71 = swift_bridgeObjectRelease();
        v72 = *(void **)(*(_QWORD *)(v51 + 16) + 32);
        *v56 = v72;
        ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v89)(v56, v88, v57, v71);
        v73 = v72;
        LOBYTE(v72) = _dispatchPreconditionTest(_:)(v56);
        v87(v56, v57);
        if ((v72 & 1) != 0)
        {
          v74 = v95;
          v75 = v97;
          if (*v95)
          {
            sqlite3_finalize(*v95);
            *v74 = 0;
          }
          v76 = v51;
LABEL_17:
          swift_release(v76);
          swift_release(v75);
          return;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
LABEL_22:
      __break(1u);
    }
  }
}

double sub_100A9B218(void *a1, uint64_t a2, void (*a3)(_QWORD, __n128))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __n128 v11;
  unint64_t v12;
  double result;
  _QWORD v14[8];

  v6 = type metadata accessor for CRLBoardIdentifier(0);
  v14[7] = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v14[6] = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v14[5] = (char *)v14 - v9;
  v10 = a1;
  swift_bridgeObjectRetain(a2);
  sub_1004E6818(v10, (uint64_t)v10, a2);

  v11 = swift_bridgeObjectRelease();
  if (a3)
    a3(0, v11);
  v12 = sub_1008D800C((uint64_t)_swiftEmptyArrayStorage);
  sub_100A75778(a2, 1, 0, v12);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

double sub_100A9B71C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;

  v5 = sub_1004B804C(&qword_1013EB680);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = __chkstk_darwin(v5);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16))((char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5, v8);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = (v9 + 16) & ~v9;
  v11 = swift_allocObject(&unk_101292E98, v10 + v7, v9 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v11 + v10, (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  sub_100A9FD18(a3, (uint64_t)sub_10073FDCC, v11, (uint64_t)&unk_101292EC0, (uint64_t)sub_100AFFFC8, (uint64_t)&unk_101292ED8);
  *(_QWORD *)&result = swift_release(v11).n128_u64[0];
  return result;
}

void sub_100A9B818(uint64_t a1, void (*a2)(char *), uint64_t a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t Strong;
  char *v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  char v20[32];
  char v21[24];

  v8 = type metadata accessor for DispatchPredicate(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v20[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a1 += 16;
  swift_beginAccess(a1, v21, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a1);
  if (Strong)
  {
    v13 = (char *)Strong;
    v14 = *(void **)(Strong + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
    *(_QWORD *)v11 = v14;
    (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
    v15 = v14;
    LOBYTE(v14) = _dispatchPreconditionTest(_:)(v11);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    if ((v14 & 1) != 0)
    {
      v13 = v13;
      sub_1004E67E0(v13, (uint64_t)v13);

      if (a2)
        a2(0);
    }
    else
    {
      __break(1u);
      swift_once(&qword_1013DD858, sub_100A05554);
      swift_beginAccess(&static OS_os_log.boardStore, v20, 0, 0);
      v16 = (id)static OS_os_log.boardStore;
      v17 = static os_log_type_t.error.getter(v16);
      sub_100A06EBC((uint64_t)v16, &_mh_execute_header, v17, "Failed to tombstone expired boards", 34, 2, (uint64_t)_swiftEmptyArrayStorage);

      if (a2)
      {
        swift_errorRetain(v11);
        a2(v11);
        swift_errorRelease(v11);
      }
      swift_errorRelease(v11);
    }
    sub_100A75388((uint64_t)&_swiftEmptySetSingleton, (uint64_t)&_swiftEmptySetSingleton, 0);
    v18 = *(_QWORD *)&v13[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_deletedBoardsCleanupWorkItem];
    *(_QWORD *)&v13[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_deletedBoardsCleanupWorkItem] = 0;
    swift_release(v18);
    sub_100A99B04(a2, a3, a4);

  }
}

void sub_100A9BA38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  id v9;
  void (*v10)(_QWORD *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  void (*v19)(_QWORD *, uint64_t, uint64_t);
  id v20;
  char v21;
  uint64_t (*v22)(_QWORD *, uint64_t);
  sqlite3_stmt **v23;
  int v24;
  void *v25;
  id v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  __n128 v30;
  void *v31;
  id v32;
  char v33;
  uint64_t (*v34)(_QWORD *, uint64_t);
  void (*v35)(_QWORD *, uint64_t, uint64_t);
  uint64_t v36;
  unint64_t v37;
  _BYTE v38[32];

  v2 = v0;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (uint64_t (**)(_QWORD *, uint64_t))((char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v6 = v7;
  v8 = enum case for DispatchPredicate.onQueue(_:);
  v35 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v4 + 104);
  v35(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  v9 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  v10 = *(void (**)(_QWORD *, uint64_t))(v4 + 8);
  v10(v6, v3);
  if ((v7 & 1) == 0)
  {
    __break(1u);
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v34 = (uint64_t (*)(_QWORD *, uint64_t))v10;
  v36 = 0;
  v37 = 0xE000000000000000;
  _StringGuts.grow(_:)(29);
  swift_bridgeObjectRelease(v37);
  v11 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v12 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v12, v38);
  swift_retain(v11);
  v14 = sub_1006B77CC(v13, 0xD00000000000003ELL, 0x8000000100FF0C40);
  swift_release(v11);
  if (v1)
    return;
  v15 = sub_10067BA88();
  v17 = v16;
  sub_1006B5E80(v15, v16);
  sub_1004BBBC8(v15, v17);
  v18 = *(void **)(*(_QWORD *)(v14 + 16) + 32);
  *v6 = v18;
  v19 = v35;
  v35(v6, v8, v3);
  v20 = v18;
  v21 = _dispatchPreconditionTest(_:)(v6);
  v22 = v34;
  v34(v6, v3);
  if ((v21 & 1) == 0)
    goto LABEL_15;
  v23 = (sqlite3_stmt **)(v14 + 24);
  swift_beginAccess(v14 + 24, &v36, 1, 0);
  v24 = sqlite3_step(*(sqlite3_stmt **)(v14 + 24));
  if (v24 != 101)
    goto LABEL_11;
  v25 = *(void **)(*(_QWORD *)(v14 + 16) + 32);
  *v6 = v25;
  v19(v6, v8, v3);
  v26 = v25;
  v8 = _dispatchPreconditionTest(_:)(v6);
  v24 = v22(v6, v3);
  if ((v8 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    v27 = v24;
    v28 = sub_1006B79EC();
    swift_allocError(&type metadata for SQLiteError, v28, 0, 0);
    *(_DWORD *)v29 = v27;
    *(_QWORD *)(v29 + 8) = 0xD000000000000032;
    *(_QWORD *)(v29 + 16) = 0x8000000100FF0C80;
    swift_willThrow(v30);
    v31 = *(void **)(*(_QWORD *)(v14 + 16) + 32);
    *v6 = v31;
    v19(v6, v8, v3);
    v32 = v31;
    v33 = _dispatchPreconditionTest(_:)(v6);
    v22(v6, v3);
    if ((v33 & 1) != 0)
      goto LABEL_12;
LABEL_16:
    __break(1u);
  }
LABEL_12:
  if (*v23)
  {
    sqlite3_finalize(*v23);
    *v23 = 0;
  }
  swift_release(v14);
}

double sub_100A9BDD4(uint64_t a1, char *a2, uint64_t a3)
{
  return sub_100AA0828(a1, a2, a3, &qword_101405340, (uint64_t)&unk_101292F60, (uint64_t)sub_100B000E0, (uint64_t)&unk_101292F78);
}

double sub_100A9BDF8(uint64_t a1, char *a2, uint64_t a3)
{
  return sub_100AA0828(a1, a2, a3, &qword_101405340, (uint64_t)&unk_101292678, (uint64_t)sub_100AFEF20, (uint64_t)&unk_101292690);
}

uint64_t sub_100A9BE1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v6;

  LOBYTE(v6) = a4(a2) & 1;
  v4 = sub_1004B804C(&qword_101405340);
  return CheckedContinuation.resume(returning:)(&v6, v4);
}

double sub_100A9BEA4(uint64_t a1, char *a2)
{
  return sub_100A9C8C4(a1, a2, &qword_101405328, (uint64_t)&unk_101292420, (uint64_t)sub_100AFEBD0, (uint64_t)&unk_101292438);
}

uint64_t sub_100A9BEC8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  void (*v11)(_QWORD *, uint64_t, uint64_t, __n128);
  id v12;
  Swift::String v13;
  void *object;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t inited;
  uint64_t v26;
  uint64_t v27;
  id v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  __n128 v37;
  void *v38;
  id v39;
  void (*v40)(_QWORD *, uint64_t);
  void *v41;
  __n128 v42;
  id v43;
  sqlite3_stmt **v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  __n128 v48;
  void *v49;
  id v50;
  uint64_t v51;
  _BYTE *v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  _BOOL8 v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  id v67;
  uint64_t result;
  _BYTE v69[4];
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  void (*v76)(_QWORD *, uint64_t);
  char v77[8];
  uint64_t v78;
  uint64_t v79;
  char v80[8];
  _QWORD *v81;
  char v82[72];
  uint64_t v83;
  unint64_t v84;
  char v85[32];

  v2 = v0;
  v3 = type metadata accessor for CRLBoardIdentifier(0);
  v74 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v75 = &v69[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD **)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v69[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v8 = v9;
  v10 = enum case for DispatchPredicate.onQueue(_:);
  v11 = (void (*)(_QWORD *, uint64_t, uint64_t, __n128))v6[13];
  ((void (*)(_QWORD *, _QWORD, uint64_t))v11)(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  v12 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  v76 = (void (*)(_QWORD *, uint64_t))v6[1];
  v76(v8, v5);
  if ((v9 & 1) == 0)
    goto LABEL_34;
  v73 = v3;
  v83 = 0;
  v84 = 0xE000000000000000;
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease(v84);
  v83 = 0x454C455320202020;
  v84 = 0xEB00000000205443;
  v13._countAndFlagsBits = sub_100AFAA78(0, (void *)0xE000000000000000);
  object = v13._object;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(object);
  v15._countAndFlagsBits = 0x4F52462020202020;
  v15._object = (void *)0xEA0000000000204DLL;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0x6D5F736472616F62;
  v16._object = (void *)0xEF61746164617465;
  String.append(_:)(v16);
  v17 = v83;
  v18 = v84;
  v19 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v20 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v20, v85);
  swift_retain(v19);
  v22 = sub_1006B77CC(v21, v17, v18);
  v6 = v1;
  if (v1)
  {
    swift_release(v19);
    if (qword_1013DD858 == -1)
    {
LABEL_4:
      swift_beginAccess(&static OS_os_log.boardStore, &v83, 0, 0);
      v23 = (void *)static OS_os_log.boardStore;
      v24 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      inited = swift_initStackObject(v24, v82);
      *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
      swift_getErrorValue(v6, v80, v77);
      v26 = v78;
      v27 = v79;
      v28 = v23;
      v29 = (_QWORD *)Error.localizedDescription.getter(v26, v27);
      v31 = v30;
      *(_QWORD *)(inited + 56) = &type metadata for String;
      v32 = sub_1004CFC2C();
      *(_QWORD *)(inited + 64) = v32;
      *(_QWORD *)(inited + 32) = v29;
      *(_QWORD *)(inited + 40) = v31;
      v33 = static os_log_type_t.error.getter(v32);
      sub_100A06EBC((uint64_t)v28, &_mh_execute_header, v33, "Failed to fetch board metadata records with error %@", 52, 2, inited);
      swift_setDeallocating(inited);
      v34 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(inited + 32, 1, v34);

      swift_willThrow(v35);
      return (uint64_t)v29;
    }
LABEL_35:
    swift_once(&qword_1013DD858, sub_100A05554);
    goto LABEL_4;
  }
  v36 = v22;
  v37 = swift_release(v19);
  v38 = *(void **)(*(_QWORD *)(v36 + 16) + 32);
  *v8 = v38;
  v11(v8, v10, v5, v37);
  v39 = v38;
  LOBYTE(v38) = _dispatchPreconditionTest(_:)(v8);
  v40 = v76;
  v76(v8, v5);
  if ((v38 & 1) == 0)
  {
    __break(1u);
    goto LABEL_37;
  }
  v72 = 0;
  v41 = *(void **)(*(_QWORD *)(v36 + 16) + 32);
  *v8 = v41;
  v42 = swift_retain(v36);
  v6 = v11;
  v11(v8, v10, v5, v42);
  v43 = v41;
  LOBYTE(v41) = _dispatchPreconditionTest(_:)(v8);
  v40(v8, v5);
  if ((v41 & 1) == 0)
  {
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v29 = _swiftEmptyDictionarySingleton;
  v44 = (sqlite3_stmt **)(v36 + 24);
  while (1)
  {
    sub_1006B7DA4(0, 0, 1);
    swift_beginAccess(v36 + 24, &v83, 0, 0);
    v45 = sqlite3_step(*v44);
    if (v45 != 100)
    {
      if (v45 && v45 != 101)
      {
        v64 = v45;
        sub_1006B7DA4(0, 0, 1);
        v65 = 0;
      }
      else
      {
        v64 = 0;
        v65 = 1;
      }
      swift_release(v36);
      sub_1006B7DA4(v64, 0, v65);
      v66 = *(void **)(*(_QWORD *)(v36 + 16) + 32);
      *v8 = v66;
      ((void (*)(_QWORD *, uint64_t, uint64_t))v6)(v8, v10, v5);
      v67 = v66;
      LOBYTE(v66) = _dispatchPreconditionTest(_:)(v8);
      v76(v8, v5);
      if ((v66 & 1) != 0)
      {
        swift_beginAccess(v36 + 24, &v81, 1, 0);
        if (*v44)
        {
          sqlite3_finalize(*v44);
          *v44 = 0;
        }
        swift_release(v36);
        return (uint64_t)v29;
      }
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
    }
    v46 = swift_retain_n(v36, 2);
    v47 = sub_100AFAD48(v46, 0);
    if (v47)
      break;
LABEL_10:
    v48 = swift_release(v36);
    v49 = *(void **)(*(_QWORD *)(v36 + 16) + 32);
    *v8 = v49;
    ((void (*)(_QWORD *, uint64_t, uint64_t, __n128))v6)(v8, v10, v5, v48);
    v50 = v49;
    LOBYTE(v49) = _dispatchPreconditionTest(_:)(v8);
    v76(v8, v5);
    if ((v49 & 1) == 0)
      goto LABEL_33;
  }
  v51 = v47;
  v52 = v75;
  sub_1004B8460(v47 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_boardIdentifier, (uint64_t)v75, type metadata accessor for CRLBoardIdentifier);
  swift_retain(v51);
  LODWORD(v71) = swift_isUniquelyReferenced_nonNull_native(v29);
  v81 = v29;
  v54 = sub_100843264((uint64_t)v52);
  v55 = v29[2];
  v56 = (v53 & 1) == 0;
  v57 = v55 + v56;
  if (__OFADD__(v55, v56))
    goto LABEL_38;
  if (v29[3] >= v57)
  {
    if ((v71 & 1) != 0)
    {
      v29 = v81;
      if ((v53 & 1) == 0)
        goto LABEL_21;
    }
    else
    {
      v70 = v53;
      sub_100833C14();
      v29 = v81;
      if ((v70 & 1) == 0)
        goto LABEL_21;
    }
    goto LABEL_19;
  }
  v70 = v53;
  sub_1008226D0(v57, v71);
  v58 = sub_100843264((uint64_t)v75);
  if ((v70 & 1) == (v59 & 1))
  {
    v54 = v58;
    v29 = v81;
    if ((v70 & 1) == 0)
    {
LABEL_21:
      v29[(v54 >> 6) + 8] |= 1 << v54;
      sub_1004B8460((uint64_t)v75, v29[6] + *(_QWORD *)(v74 + 72) * v54, type metadata accessor for CRLBoardIdentifier);
      *(_QWORD *)(v29[7] + 8 * v54) = v51;
      v61 = v29[2];
      v62 = __OFADD__(v61, 1);
      v63 = v61 + 1;
      if (v62)
        goto LABEL_39;
      v29[2] = v63;
      goto LABEL_23;
    }
LABEL_19:
    v71 = v29[7];
    v60 = 8 * v54;
    swift_release(*(_QWORD *)(v71 + v60));
    *(_QWORD *)(v71 + v60) = v51;
LABEL_23:
    swift_bridgeObjectRelease(0x8000000000000000);
    sub_1004B84A4((uint64_t)v75, type metadata accessor for CRLBoardIdentifier);
    swift_release(v51);
    goto LABEL_10;
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v73);
  __break(1u);
  return result;
}

uint64_t sub_100A9C608@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = sub_100A7EFE0();
  if (!v1)
    *a1 = result;
  return result;
}

double sub_100A9C634(uint64_t a1, char *a2)
{
  return sub_100A9C8C4(a1, a2, &qword_101405318, (uint64_t)&unk_101292380, (uint64_t)sub_100AFEB40, (uint64_t)&unk_101292398);
}

double sub_100A9C658(uint64_t a1, char *a2, uint64_t a3)
{
  return sub_100AA0828(a1, a2, a3, &qword_101405668, (uint64_t)&unk_101293938, (uint64_t)sub_100B01508, (uint64_t)&unk_101293950);
}

uint64_t sub_100A9C67C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[11];
  _BYTE v5[80];

  sub_100A7F844(a2, (uint64_t)v5);
  sub_1004C4938((uint64_t)v5, (uint64_t)v4, (uint64_t *)&unk_101405F80);
  v2 = sub_1004B804C(&qword_101405668);
  return CheckedContinuation.resume(returning:)(v4, v2);
}

double sub_100A9C714(uint64_t a1, char *a2)
{
  return sub_100A9C8C4(a1, a2, &qword_101405320, (uint64_t)&unk_1012923D0, (uint64_t)sub_100AFEB60, (uint64_t)&unk_1012923E8);
}

double sub_100A9C738(uint64_t a1, char *a2)
{
  return sub_100A9C8C4(a1, a2, &qword_101405320, (uint64_t)&unk_101292470, (uint64_t)sub_100AFEBF0, (uint64_t)&unk_101292488);
}

sqlite3_stmt **sub_100A9C75C@<X0>(sqlite3_int64 a1@<X1>, sqlite3_stmt ***a2@<X8>)
{
  uint64_t v2;
  sqlite3_stmt **result;

  result = sub_100A79800(a1);
  if (!v2)
    *a2 = result;
  return result;
}

double sub_100A9C8A0(uint64_t a1, char *a2)
{
  return sub_100A9C8C4(a1, a2, &qword_101405320, (uint64_t)&unk_1012938E8, (uint64_t)sub_100B013E8, (uint64_t)&unk_101293900);
}

double sub_100A9C8C4(uint64_t a1, char *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  char *v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD aBlock[5];
  uint64_t v37;

  v31 = a6;
  v28 = a4;
  v29 = a5;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v34 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v32 = *(_QWORD *)(v12 - 8);
  v33 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1004B804C(a3);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  __chkstk_darwin(v15);
  v30 = *(_QWORD *)&a2[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_readQueue];
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))((char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v15);
  v18 = *(unsigned __int8 *)(v16 + 80);
  v19 = (v18 + 24) & ~v18;
  v20 = swift_allocObject(v28, v19 + v17, v18 | 7);
  *(_QWORD *)(v20 + 16) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v20 + v19, (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), v15);
  aBlock[4] = v29;
  v37 = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(_QWORD *)"";
  aBlock[2] = sub_1005D2FC0;
  aBlock[3] = v31;
  v21 = _Block_copy(aBlock);
  v22 = a2;
  static DispatchQoS.unspecified.getter(v23);
  v35 = _swiftEmptyArrayStorage;
  v24 = sub_1004B7878((unint64_t *)&qword_1013E1D20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v25 = sub_1004B804C((uint64_t *)&unk_1013DFBF0);
  v26 = sub_1004CBA30((unint64_t *)&qword_1013E1D30, (uint64_t *)&unk_1013DFBF0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v35, v25, v26, v9, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v11, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v14, v33);
  *(_QWORD *)&result = swift_release(v37).n128_u64[0];
  return result;
}

uint64_t sub_100A9CB2C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t *a4)
{
  uint64_t v5;
  uint64_t v7;

  v7 = a3();
  v5 = sub_1004B804C(a4);
  return CheckedContinuation.resume(returning:)(&v7, v5);
}

uint64_t sub_100A9CCD4(uint64_t a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  id v5;

  v3[3] = a1;
  v3[4] = a3;
  v3[5] = _Block_copy(aBlock);
  v5 = a3;
  return swift_task_switch(sub_100A9CD20, 0, 0);
}

uint64_t sub_100A9CD20()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = v0[3];
  v1 = v0[4];
  v3 = swift_task_alloc(32);
  v0[6] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[7] = v4;
  v5 = sub_1004B804C(&qword_1013E0238);
  *v4 = v0;
  v4[1] = sub_100A9CDD0;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD00000000000001ELL, 0x8000000100FF26A0, sub_100B00C50, v3, v5);
}

uint64_t sub_100A9CDD0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 56);
  *(_QWORD *)(*v1 + 64) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100A9CEF8;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 48));
    v4 = sub_100A9CE3C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100A9CE3C()
{
  uint64_t v0;
  Class isa;
  __n128 v2;
  void (**v3)(_QWORD, _QWORD, _QWORD, __n128);

  sub_1004B8930(0, (unint64_t *)&qword_1013E1770, CKRecordZoneID_ptr);
  sub_1005A15B8((unint64_t *)&qword_1013E1778, (unint64_t *)&qword_1013E1770, CKRecordZoneID_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
  isa = Set._bridgeToObjectiveC()().super.isa;
  v2 = swift_bridgeObjectRelease();
  v3 = *(void (***)(_QWORD, _QWORD, _QWORD, __n128))(v0 + 40);
  ((void (**)(_QWORD, Class, _QWORD, __n128))v3)[2](v3, isa, 0, v2);

  _Block_release(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100A9CEF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void (**v4)(_QWORD, _QWORD, _QWORD);

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 48);

  swift_task_dealloc(v2);
  v3 = (void *)_convertErrorToNSError(_:)(v1);
  swift_errorRelease(v1);
  v4 = *(void (***)(_QWORD, _QWORD, _QWORD))(v0 + 40);
  ((void (**)(_QWORD, _QWORD, void *))v4)[2](v4, 0, v3);

  _Block_release(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double sub_100A9CF70(uint64_t a1, char *a2, uint64_t a3)
{
  return sub_100A9CF94(a1, a2, a3, &qword_101405310, (uint64_t)&unk_101292330, (uint64_t)sub_100AFEB20, (uint64_t)&unk_101292348);
}

double sub_100A9CF94(uint64_t a1, char *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  char *v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD aBlock[5];
  uint64_t v40;

  v34 = a7;
  v31 = a3;
  v32 = a6;
  v11 = type metadata accessor for DispatchWorkItemFlags(0);
  v37 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS(0);
  v35 = *(_QWORD *)(v14 - 8);
  v36 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1004B804C(a4);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_QWORD *)(v18 + 64);
  __chkstk_darwin(v17);
  v33 = *(_QWORD *)&a2[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_readQueue];
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))((char *)&v31 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v17);
  v20 = *(unsigned __int8 *)(v18 + 80);
  v21 = (v20 + 32) & ~v20;
  v22 = swift_allocObject(a5, v21 + v19, v20 | 7);
  v23 = v31;
  *(_QWORD *)(v22 + 16) = a2;
  *(_QWORD *)(v22 + 24) = v23;
  (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v22 + v21, (char *)&v31 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), v17);
  aBlock[4] = v32;
  v40 = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(_QWORD *)"";
  aBlock[2] = sub_1005D2FC0;
  aBlock[3] = v34;
  v24 = _Block_copy(aBlock);
  v25 = a2;
  static DispatchQoS.unspecified.getter(v26);
  v38 = _swiftEmptyArrayStorage;
  v27 = sub_1004B7878((unint64_t *)&qword_1013E1D20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v28 = sub_1004B804C((uint64_t *)&unk_1013DFBF0);
  v29 = sub_1004CBA30((unint64_t *)&qword_1013E1D30, (uint64_t *)&unk_1013DFBF0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v38, v28, v29, v11, v27);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v16, v13, v24);
  _Block_release(v24);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v13, v11);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v16, v36);
  *(_QWORD *)&result = swift_release(v40).n128_u64[0];
  return result;
}

uint64_t sub_100A9D204(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t *a5)
{
  uint64_t v6;
  uint64_t v8;

  v8 = a4(a2);
  v6 = sub_1004B804C(a5);
  return CheckedContinuation.resume(returning:)(&v8, v6);
}

_QWORD *sub_100A9D284@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  _QWORD *result;

  result = sub_100A7B210();
  if (!v1)
    *a1 = result;
  return result;
}

double sub_100A9D2B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  uint64_t v9;

  v2 = sub_1004B804C(&qword_101405330);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 16) & ~v5;
  v7 = swift_allocObject(&unk_1012924C0, v6 + v4, v5 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v7 + v6, (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  sub_100A9EEDC((uint64_t)sub_100AFEC10, v7, (uint64_t)&OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_readQueue, (uint64_t)&unk_1012924E8, (uint64_t)sub_100AFEC78, (uint64_t)&unk_101292500);
  *(_QWORD *)&result = swift_release(v7).n128_u64[0];
  return result;
}

double sub_100A9D3AC(uint64_t a1, void (*a2)(_QWORD *, _QWORD))
{
  _QWORD *v3;
  double result;

  v3 = sub_100A7B210();
  a2(v3, 0);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v3).n128_u64[0];
  return result;
}

uint64_t sub_100A9D444(_QWORD *a1, unint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  void *v28;
  id v29;
  uint64_t result;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  void *v45;
  uint64_t v46;
  uint64_t inited;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  __n128 v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  unsigned __int8 *v60;
  _BYTE *v61;
  __n128 v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _BYTE *v69;
  uint64_t v70;
  _BYTE *v71;
  _BYTE *v72;
  uint64_t *v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  _BYTE *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  BOOL v90;
  _BYTE *v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _BYTE *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void (*v105)(uint64_t, uint64_t, uint64_t);
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  char v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  _QWORD *v126;
  uint64_t v127;
  _BYTE v128[4];
  int v129;
  _QWORD *v130;
  _QWORD *v131;
  uint64_t v132;
  unint64_t v133;
  _BYTE *v134;
  _QWORD *v135;
  _BYTE *v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  NSString *v140;
  _BYTE *v141;
  _BYTE *v142;
  _BYTE *v143;
  _BYTE *v144;
  uint64_t v145;
  _BYTE *v146;
  uint64_t *v147;
  uint64_t v148;
  int v149;
  _QWORD *v150;
  __int128 v151;
  uint64_t v152;
  id v153;
  uint64_t v154;
  _BYTE *v155;
  _BYTE *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD v161[3];
  uint64_t v162[4];
  char v163;
  _BYTE v164[24];
  char v165[24];
  _BYTE v166[40];
  _QWORD v167[3];
  id v168;
  unsigned __int8 v169;
  uint64_t v170;

  v5 = v4;
  v129 = a3;
  v133 = a2;
  v150 = a1;
  v145 = type metadata accessor for CRLBoardIdentifierStorage(0);
  __chkstk_darwin(v145);
  v144 = &v128[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for CRLBoardCRDTData(0);
  __chkstk_darwin(v7);
  v143 = &v128[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v148 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v148 - 8);
  v10 = __chkstk_darwin(v148);
  v12 = &v128[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = __chkstk_darwin(v10);
  v136 = &v128[-v14];
  v15 = __chkstk_darwin(v13);
  v156 = &v128[-v16];
  __chkstk_darwin(v15);
  v146 = &v128[-v17];
  v18 = type metadata accessor for CRLBoardIdentifier(0);
  v132 = *(_QWORD *)(v18 - 8);
  v19 = __chkstk_darwin(v18);
  v142 = &v128[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v21 = __chkstk_darwin(v19);
  v141 = &v128[-v22];
  __chkstk_darwin(v21);
  v155 = &v128[-v23];
  v24 = type metadata accessor for DispatchPredicate(0);
  v25 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v27 = &v128[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v28 = *(void **)(v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v27 = v28;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v25 + 104))(v27, enum case for DispatchPredicate.onQueue(_:), v24);
  v29 = v28;
  LOBYTE(v28) = _dispatchPreconditionTest(_:)(v27);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v25 + 8))(v27, v24);
  if ((v28 & 1) != 0)
  {
    v31 = type metadata accessor for CRLBoardDatabaseFetchResult();
    v32 = (_QWORD *)swift_allocObject(v31, 48, 7);
    v32[2] = &_swiftEmptyDictionarySingleton;
    v147 = v32 + 2;
    v32[3] = &_swiftEmptyDictionarySingleton;
    v131 = v32 + 3;
    v32[4] = &_swiftEmptyDictionarySingleton;
    v130 = v32 + 4;
    v32[5] = &_swiftEmptyDictionarySingleton;
    v138 = v3;
    v157 = v9;
    v134 = v12;
    if (v150)
    {
      v135 = v32;
      v33 = v150[2];
      if (v33)
      {
        v34 = (char *)v150
            + ((*(unsigned __int8 *)(v132 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v132 + 80));
        v152 = *(_QWORD *)(v132 + 72);
        swift_bridgeObjectRetain(v150);
        v35 = _swiftEmptyArrayStorage;
        v151 = xmmword_100EF5E40;
        do
        {
          sub_100A7D0B0((uint64_t)v166);
          if (v5)
          {
            swift_bridgeObjectRelease(v35);
            v58 = v150;
            goto LABEL_57;
          }
          sub_1004C4938((uint64_t)v166, (uint64_t)v167, &qword_101405EE0);
          v37 = v167[0];
          if (v167[0])
          {
            v38 = v167[1];
            v39 = v167[2];
            v40 = v168;
            LODWORD(v154) = v169;
            v153 = v168;
            swift_retain(v37);
            swift_retain(v38);
            swift_retain(v39);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v35);
            v139 = 0;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              v35 = sub_100D118EC(0, v35[2] + 1, 1, v35);
            v43 = v35[2];
            v42 = v35[3];
            v44 = v35;
            if (v43 >= v42 >> 1)
              v44 = sub_100D118EC((_QWORD *)(v42 > 1), v43 + 1, 1, v35);
            v44[2] = v43 + 1;
            v35 = v44;
            v36 = &v44[5 * v43];
            v36[4] = v37;
            v36[5] = v38;
            v36[6] = v39;
            v36[7] = v40;
            *((_BYTE *)v36 + 64) = v154;

            swift_release(v39);
            swift_release(v38);
            swift_release(v37);
            v5 = v139;
          }
          else
          {
            v137 = v35;
            if (qword_1013DD858 != -1)
              swift_once(&qword_1013DD858, sub_100A05554);
            swift_beginAccess(&static OS_os_log.boardStore, &v159, 0, 0);
            v45 = (void *)static OS_os_log.boardStore;
            v46 = sub_1004B804C((uint64_t *)&unk_1013E0180);
            inited = swift_initStackObject(v46, &v158);
            *(_OWORD *)(inited + 16) = v151;
            v48 = v45;
            v49 = UUID.uuidString.getter(v48);
            v51 = v50;
            *(_QWORD *)(inited + 56) = &type metadata for String;
            v52 = sub_1004CFC2C();
            *(_QWORD *)(inited + 64) = v52;
            *(_QWORD *)(inited + 32) = v49;
            *(_QWORD *)(inited + 40) = v51;
            v53 = static os_log_type_t.error.getter(v52);
            sub_100A06EBC((uint64_t)v48, &_mh_execute_header, v53, "Failed to fetch boardAndContainerData for board %{public}@", 58, 2, inited);
            swift_setDeallocating(inited);
            v54 = sub_1004B804C(&qword_1013E0190);
            swift_arrayDestroy(inited + 32, 1, v54);

            v35 = v137;
          }
          v34 += v152;
          --v33;
          v3 = v138;
          v9 = v157;
        }
        while (v33);
        swift_bridgeObjectRelease(v150);
      }
      else
      {
        v35 = _swiftEmptyArrayStorage;
      }
      v57 = v148;
    }
    else
    {
      v55 = sub_100A7BE3C();
      v57 = v148;
      if (v4)
        goto LABEL_59;
      v35 = v55;
      v135 = v32;
    }
    v59 = v35[2];
    v137 = v35;
    if (v59)
    {
      v139 = v5;
      v140 = CKCurrentUserDefaultName;
      swift_bridgeObjectRetain(v35);
      v60 = (unsigned __int8 *)(v35 + 8);
      v61 = v146;
      do
      {
        v82 = (char *)*((_QWORD *)v60 - 4);
        v152 = *((_QWORD *)v60 - 3);
        v83 = *((_QWORD *)v60 - 2);
        v150 = (_QWORD *)*((_QWORD *)v60 - 1);
        *(_QWORD *)&v151 = v83;
        v149 = *v60;
        v84 = &v82[OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData];
        swift_beginAccess(&v82[OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData], v165, 0, 0);
        v85 = (uint64_t)v84;
        v86 = v143;
        sub_1004B8460(v85, (uint64_t)v143, type metadata accessor for CRLBoardCRDTData);
        v87 = sub_1004B804C(&qword_1013E1A80);
        CRRegister.wrappedValue.getter(v87);
        sub_1004B84A4((uint64_t)v86, type metadata accessor for CRLBoardCRDTData);
        v63 = *(_QWORD *)&v82[OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName];
        v64 = *(_QWORD *)&v82[OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName + 8];
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 16))(v156, v61, v57);
        v88 = static String._unconditionallyBridgeFromObjectiveC(_:)(v140);
        v90 = v63 == v88 && v64 == v89;
        v91 = v61;
        v153 = v82;
        v154 = v59;
        if (v90
          || (v92 = v89,
              v93 = _stringCompareWithSmolCheck(_:_:expecting:)(v63, v64, v88, v89, 0),
              swift_bridgeObjectRetain(v64),
              v62 = swift_bridgeObjectRelease(v92),
              (v93 & 1) != 0))
        {
          v62 = swift_bridgeObjectRelease(v64);
          v63 = 0;
          v64 = 0xE000000000000000;
        }
        v65 = v157;
        v66 = v148;
        (*(void (**)(_BYTE *, uint64_t, __n128))(v157 + 8))(v91, v148, v62);
        v67 = (uint64_t)v144;
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v65 + 32))(v144, v156, v66);
        v68 = (_QWORD *)(v67 + *(int *)(v145 + 20));
        *v68 = v63;
        v68[1] = v64;
        v69 = v141;
        sub_1004B84E0(v67, (uint64_t)v141, type metadata accessor for CRLBoardIdentifierStorage);
        v70 = (uint64_t)v69;
        v71 = v155;
        sub_1004B84E0(v70, (uint64_t)v155, type metadata accessor for CRLBoardIdentifier);
        v72 = v142;
        sub_1004B8460((uint64_t)v71, (uint64_t)v142, type metadata accessor for CRLBoardIdentifier);
        v73 = v147;
        swift_beginAccess(v147, v164, 33, 0);
        v74 = v150;
        v75 = v150;
        v76 = *v73;
        v77 = (uint64_t)v153;
        swift_retain(v153);
        v78 = v152;
        swift_retain(v152);
        v79 = v151;
        swift_retain(v151);
        v80 = swift_isUniquelyReferenced_nonNull_native(v76);
        v161[0] = *v73;
        *v73 = 0x8000000000000000;
        v162[0] = v77;
        v162[1] = v78;
        v57 = v66;
        v61 = v146;
        v162[2] = v79;
        v162[3] = (uint64_t)v74;
        v9 = v157;
        v163 = v149;
        sub_1008273E4(v162, (uint64_t)v72, v80);
        v81 = *v73;
        *v73 = v161[0];
        swift_bridgeObjectRelease(v81);
        sub_1004B84A4((uint64_t)v72, type metadata accessor for CRLBoardIdentifier);
        swift_endAccess(v164);
        sub_1004B84A4((uint64_t)v155, type metadata accessor for CRLBoardIdentifier);
        v60 += 40;
        v59 = v154 - 1;
      }
      while (v154 != 1);
      v35 = v137;
      swift_bridgeObjectRelease(v137);
      v3 = v138;
      v5 = v139;
    }
    v94 = (uint64_t)v136;
    if (v133)
    {
      if (v133 == 1)
      {
        v95 = v147;
        v96 = swift_beginAccess(v147, v164, 0, 0);
        v97 = v135[2];
        __chkstk_darwin(v96);
        *(_QWORD *)&v128[-16] = v3;
        *(_QWORD *)&v128[-8] = v98;
        swift_bridgeObjectRetain(v97);
        sub_100AF8F48(v99, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))sub_100AFB204, (uint64_t)&v128[-32]);
        if (v5)
        {
          swift_bridgeObjectRelease(v35);
          v56 = swift_bridgeObjectRelease(v97);
LABEL_58:
          v32 = v135;
          goto LABEL_59;
        }
        swift_bridgeObjectRelease(v97);
        if ((v129 & 1) == 0)
          goto LABEL_49;
LABEL_52:
        v123 = swift_beginAccess(v95, v161, 0, 0);
        v124 = v135[2];
        __chkstk_darwin(v123);
        *(_QWORD *)&v128[-16] = v3;
        *(_QWORD *)&v128[-8] = v125;
        v126 = v125;
        swift_bridgeObjectRetain(v124);
        sub_100AF8F48(v127, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))sub_100AFB21C, (uint64_t)&v128[-32]);
        if (!v5)
        {
          swift_bridgeObjectRelease(v35);
          swift_bridgeObjectRelease(v124);
          return (uint64_t)v126;
        }
        swift_bridgeObjectRelease(v35);
        v56 = swift_bridgeObjectRelease(v124);
        v32 = v126;
LABEL_59:
        swift_willThrow(v56);
        swift_release(v32);
        return (uint64_t)v32;
      }
      v100 = *(_BYTE **)(v133 + 16);
      if (v100)
      {
        v101 = v133 + ((*(unsigned __int8 *)(v132 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v132 + 80));
        v154 = *(_QWORD *)(v132 + 72);
        swift_bridgeObjectRetain(v133);
        while (1)
        {
          v102 = sub_100A80ED8();
          if (v5)
            break;
          v103 = v102;
          if (v102)
          {
            v156 = v100;
            v104 = v102 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_rootContainerUUID;
            swift_beginAccess(v102 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_rootContainerUUID, v164, 0, 0);
            v105 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
            v106 = v104;
            v107 = v9;
            v108 = v148;
            v105(v94, v106, v148);
            v109 = sub_100A81494(v94, v101);
            v139 = 0;
            v110 = v109;
            v155 = *(_BYTE **)(v107 + 8);
            ((void (*)(uint64_t, uint64_t))v155)(v94, v108);
            if (v110)
            {
              v111 = v131;
              swift_beginAccess(v131, v161, 33, 0);
              swift_retain(v110);
              v112 = swift_isUniquelyReferenced_nonNull_native(*v111);
              v170 = *v111;
              *v111 = 0x8000000000000000;
              sub_1008273C8(v110, v101, v112);
              v113 = *v111;
              *v111 = v170;
              swift_bridgeObjectRelease(v113);
              swift_endAccess(v161);
              swift_release(v110);
            }
            v114 = v103 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_alternateRootContainerUUID;
            swift_beginAccess(v103 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_alternateRootContainerUUID, &v160, 0, 0);
            v115 = (uint64_t)v134;
            v116 = v148;
            v105((uint64_t)v134, v114, v148);
            v117 = v139;
            v118 = sub_100A81494(v115, v101);
            v5 = v117;
            v35 = v137;
            if (v117)
            {
              ((void (*)(uint64_t, uint64_t))v155)(v115, v116);
              swift_release(v103);
              break;
            }
            v119 = v118;
            ((void (*)(uint64_t, uint64_t))v155)(v115, v116);
            if (v119)
            {
              v120 = v130;
              swift_beginAccess(v130, v161, 33, 0);
              swift_retain(v119);
              v121 = swift_isUniquelyReferenced_nonNull_native(*v120);
              v170 = *v120;
              *v120 = 0x8000000000000000;
              sub_1008273C8(v119, v101, v121);
              v122 = *v120;
              *v120 = v170;
              swift_bridgeObjectRelease(v122);
              swift_endAccess(v161);
              swift_release(v103);
              v103 = v119;
            }
            v3 = v138;
            v100 = v156;
            v9 = v157;
            v94 = (uint64_t)v136;
            swift_release(v103);
          }
          v101 += v154;
          if (!--v100)
          {
            sub_100AFB234(v133);
            goto LABEL_51;
          }
        }
        sub_100AFB234(v133);
        v58 = v35;
LABEL_57:
        v56 = swift_bridgeObjectRelease(v58);
        goto LABEL_58;
      }
    }
LABEL_51:
    v95 = v147;
    if ((v129 & 1) == 0)
    {
LABEL_49:
      swift_bridgeObjectRelease(v35);
      return (uint64_t)v135;
    }
    goto LABEL_52;
  }
  __break(1u);
  return result;
}

double sub_100A9E070(uint64_t a1, unint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void *v18;
  char *v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD aBlock[5];
  uint64_t v30;

  v11 = type metadata accessor for DispatchWorkItemFlags(0);
  v27 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for DispatchQoS(0);
  v14 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = *(_QWORD *)&v5[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_readQueue];
  v17 = swift_allocObject(&unk_1012922E0, 64, 7);
  *(_QWORD *)(v17 + 16) = v5;
  *(_QWORD *)(v17 + 24) = a1;
  *(_QWORD *)(v17 + 32) = a2;
  *(_BYTE *)(v17 + 40) = a3;
  *(_QWORD *)(v17 + 48) = a4;
  *(_QWORD *)(v17 + 56) = a5;
  aBlock[4] = sub_100AFB1E0;
  v30 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(_QWORD *)"";
  aBlock[2] = sub_1005D2FC0;
  aBlock[3] = &unk_1012922F8;
  v18 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a1);
  v19 = v5;
  sub_100AFB1F4(a2);
  v20 = swift_retain(a5);
  static DispatchQoS.unspecified.getter(v20);
  v28 = _swiftEmptyArrayStorage;
  v21 = sub_1004B7878((unint64_t *)&qword_1013E1D20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v22 = sub_1004B804C((uint64_t *)&unk_1013DFBF0);
  v23 = sub_1004CBA30((unint64_t *)&qword_1013E1D30, (uint64_t *)&unk_1013DFBF0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v28, v22, v23, v11, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v16, v13, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v11);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v26);
  *(_QWORD *)&result = swift_release(v30).n128_u64[0];
  return result;
}

uint64_t sub_100A9E298(uint64_t a1, _QWORD *a2, unint64_t a3, int a4, void (*a5)(__n128))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __n128 v15;
  __n128 v16;
  uint64_t v17;
  double v18;
  __n128 v19;
  uint64_t result;
  uint64_t v21;

  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100A9D444(a2, a3, a4);
  v15 = swift_retain(v14);
  a5(v15);
  v16 = swift_release(v14);
  v17 = static Date.now.getter(v16);
  v18 = Date.timeIntervalSince1970.getter(v17);
  v19 = swift_release(v14);
  result = (*(uint64_t (**)(char *, uint64_t, __n128))(v11 + 8))(v13, v10, v19);
  *(double *)(a1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_lastFetchResultsTime) = v18;
  return result;
}

double sub_100A9E3E8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double result;
  uint64_t v16;

  v9 = sub_1004B804C(&qword_1014052E0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
  v12 = *(unsigned __int8 *)(v10 + 80);
  v13 = (v12 + 16) & ~v12;
  v14 = swift_allocObject(&unk_1012922B8, v13 + v11, v12 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v14 + v13, (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  sub_100A9E070(a3, a4, a5, (uint64_t)sub_100AFB14C, v14);
  *(_QWORD *)&result = swift_release(v14).n128_u64[0];
  return result;
}

uint64_t sub_100A9E4E8(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v5 = a1;
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    v4 = sub_1004B804C(&qword_1014052E0);
    return CheckedContinuation.resume(throwing:)(&v5, v4);
  }
  else
  {
    swift_retain(a1);
    v2 = sub_1004B804C(&qword_1014052E0);
    return CheckedContinuation.resume(returning:)(&v5, v2);
  }
}

double sub_100A9E554(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  double result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  _QWORD v50[3];
  _BYTE v51[24];
  char v52[24];
  uint64_t v53;

  v49 = a7;
  v46 = a8;
  v47 = a4;
  v10 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v10);
  v45 = (uint64_t)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1004B804C((uint64_t *)&unk_1013F02C0);
  __chkstk_darwin(v12);
  v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for UUID(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v41 - v20;
  v22 = a3 + *(_QWORD *)(*(_QWORD *)a3 + 632);
  swift_beginAccess(v22, v52, 0, 0);
  sub_1004CB7BC(v22, (uint64_t)v14, (uint64_t *)&unk_1013F02C0);
  v23 = sub_1004B804C(&qword_1013E1A80);
  CRRegister.wrappedValue.getter(v23);
  sub_1004CB800((uint64_t)v14, (uint64_t *)&unk_1013F02C0);
  v24 = a1;
  v25 = v48;
  v26 = sub_100A81494((uint64_t)v21, a1);
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v21, v15);
  }
  else
  {
    v28 = v26;
    v42 = 0;
    v43 = v23;
    v48 = v19;
    v44 = *(void (**)(char *, uint64_t))(v16 + 8);
    v44(v21, v15);
    v29 = v46;
    if (v28)
    {
      v30 = v45;
      sub_1004B8460(v24, v45, type metadata accessor for CRLBoardIdentifier);
      swift_beginAccess(v29 + 24, v51, 33, 0);
      swift_retain(v28);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v29 + 24));
      v50[0] = *(_QWORD *)(v29 + 24);
      *(_QWORD *)(v29 + 24) = 0x8000000000000000;
      sub_1008273C8(v28, v30, isUniquelyReferenced_nonNull_native);
      v32 = *(_QWORD *)(v29 + 24);
      *(_QWORD *)(v29 + 24) = v50[0];
      swift_bridgeObjectRelease(v32);
      sub_1004B84A4(v30, type metadata accessor for CRLBoardIdentifier);
      swift_endAccess(v51);
      swift_release(v28);
    }
    v33 = v47 + *(_QWORD *)(*(_QWORD *)v47 + 632);
    swift_beginAccess(v33, v51, 0, 0);
    sub_1004CB7BC(v33, (uint64_t)v14, (uint64_t *)&unk_1013F02C0);
    v34 = (uint64_t)v48;
    CRRegister.wrappedValue.getter(v43);
    sub_1004CB800((uint64_t)v14, (uint64_t *)&unk_1013F02C0);
    v35 = v42;
    v36 = sub_100A81494(v34, v24);
    if (v35)
    {
      v44((char *)v34, v15);
    }
    else
    {
      v37 = v36;
      v44((char *)v34, v15);
      if (v37)
      {
        v38 = v45;
        sub_1004B8460(v24, v45, type metadata accessor for CRLBoardIdentifier);
        swift_beginAccess(v29 + 32, v50, 33, 0);
        swift_retain(v37);
        v39 = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v29 + 32));
        v53 = *(_QWORD *)(v29 + 32);
        *(_QWORD *)(v29 + 32) = 0x8000000000000000;
        sub_1008273C8(v37, v38, v39);
        v40 = *(_QWORD *)(v29 + 32);
        *(_QWORD *)(v29 + 32) = v53;
        swift_bridgeObjectRelease(v40);
        sub_1004B84A4(v38, type metadata accessor for CRLBoardIdentifier);
        swift_endAccess(v50);
        *(_QWORD *)&result = swift_release(v37).n128_u64[0];
      }
    }
  }
  return result;
}

void sub_100A9E8EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  uint64_t v8;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD v46[3];
  uint64_t v47;

  isUniquelyReferenced_nonNull_native = v8;
  v12 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100A9EC1C();
  if (!v8)
  {
    v16 = v15;
    if (v15 >> 62)
    {
LABEL_27:
      if (v16 < 0)
        v38 = v16;
      else
        v38 = v16 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v16);
      v17 = _CocoaArrayWrapper.endIndex.getter(v38);
      swift_bridgeObjectRelease(v16);
    }
    else
    {
      v17 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v40 = a1;
    v41 = v14;
    v43 = a8;
    v18 = &_swiftEmptyDictionarySingleton;
    v42 = isUniquelyReferenced_nonNull_native;
    if (v17)
    {
      v44 = v16;
      v45 = v16 & 0xC000000000000001;
      v19 = 4;
      do
      {
        isUniquelyReferenced_nonNull_native = v19 - 4;
        if (v45)
        {
          v21 = specialized _ArrayBuffer._getElementSlowPath(_:)(v19 - 4, v16);
          v14 = (char *)(v19 - 3);
          if (__OFADD__(isUniquelyReferenced_nonNull_native, 1))
            goto LABEL_24;
        }
        else
        {
          v21 = *(_QWORD *)(v16 + 8 * v19);
          swift_retain(v21);
          v14 = (char *)(v19 - 3);
          if (__OFADD__(isUniquelyReferenced_nonNull_native, 1))
          {
LABEL_24:
            __break(1u);
LABEL_25:
            __break(1u);
LABEL_26:
            __break(1u);
            goto LABEL_27;
          }
        }
        v16 = v17;
        v22 = *(_QWORD *)(v21 + 16);
        swift_retain(v21);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v18);
        v46[0] = v18;
        a8 = sub_100842E60(v22);
        v24 = v18[2];
        v25 = (v23 & 1) == 0;
        v26 = v24 + v25;
        if (__OFADD__(v24, v25))
          goto LABEL_25;
        a1 = v23;
        if (v18[3] >= v26)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            sub_10082CCA0();
        }
        else
        {
          sub_10081562C(v26, isUniquelyReferenced_nonNull_native);
          v27 = sub_100842E60(v22);
          if ((a1 & 1) != (v28 & 1))
          {
            KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int);
            __break(1u);
            return;
          }
          a8 = v27;
        }
        v18 = (_QWORD *)v46[0];
        isUniquelyReferenced_nonNull_native = 8 * a8;
        if ((a1 & 1) != 0)
        {
          a8 = *(_QWORD *)(v46[0] + 56);
          swift_release(*(_QWORD *)(a8 + isUniquelyReferenced_nonNull_native));
          *(_QWORD *)(a8 + isUniquelyReferenced_nonNull_native) = v21;
        }
        else
        {
          *(_QWORD *)(v46[0] + 8 * (a8 >> 6) + 64) |= 1 << a8;
          *(_QWORD *)(v18[6] + 8 * a8) = v22;
          *(_QWORD *)(v18[7] + 8 * a8) = v21;
          v29 = v18[2];
          v30 = __OFADD__(v29, 1);
          v31 = v29 + 1;
          if (v30)
            goto LABEL_26;
          v18[2] = v31;
        }
        swift_release(v21);
        swift_bridgeObjectRelease(0x8000000000000000);
        ++v19;
        v17 = v16;
        v20 = v14 == (char *)v16;
        v16 = v44;
      }
      while (!v20);
    }
    swift_bridgeObjectRelease(v16);
    v32 = sub_1004B804C((uint64_t *)&unk_101405D00);
    v33 = swift_allocObject(v32, 32, 7);
    *(_QWORD *)(v33 + 16) = v18;
    *(_QWORD *)(v33 + 24) = &_swiftEmptyDictionarySingleton;
    v34 = (uint64_t)v41;
    sub_1004B8460(v40, (uint64_t)v41, type metadata accessor for CRLBoardIdentifier);
    v35 = v43;
    swift_beginAccess(v43 + 40, v46, 33, 0);
    swift_retain(v33);
    v36 = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v35 + 40));
    v47 = *(_QWORD *)(v35 + 40);
    *(_QWORD *)(v35 + 40) = 0x8000000000000000;
    sub_100829CA8(v33, v34, v36);
    v37 = *(_QWORD *)(v35 + 40);
    *(_QWORD *)(v35 + 40) = v47;
    swift_bridgeObjectRelease(v37);
    sub_1004B84A4(v34, type metadata accessor for CRLBoardIdentifier);
    swift_endAccess(v46);
    swift_release(v33);
  }
}

void sub_100A9EC1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t inited;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE v26[24];
  unint64_t v27;

  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *(_QWORD *)v5 = v6;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v5);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) != 0)
  {
    v8 = sub_100AABE4C();
    if (v1)
      return;
    v5 = v8;
    if (!(v8 >> 62))
    {
      v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_5;
    }
  }
  else
  {
    __break(1u);
  }
  if (v5 < 0)
    v23 = v5;
  else
    v23 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v9 = _CocoaArrayWrapper.endIndex.getter(v23);
  swift_bridgeObjectRelease(v5);
LABEL_5:
  v27 = sub_1008E06EC(_swiftEmptyArrayStorage);
  v10 = type metadata accessor for CRLUnfairLock();
  inited = swift_initStackObject(v10, v26);
  v12 = (_DWORD *)swift_slowAlloc(4, -1);
  *v12 = 0;
  *(_QWORD *)(inited + 16) = v12;
  atomic_thread_fence(memory_order_acq_rel);
  v13 = sub_1004B8930(0, (unint64_t *)&qword_1013DE090, OS_dispatch_queue_ptr);
  __chkstk_darwin(v13);
  *(&v24 - 4) = v5;
  *(&v24 - 3) = inited;
  *(&v24 - 2) = (uint64_t)&v27;
  static OS_dispatch_queue.concurrentPerform(iterations:execute:)(v9, sub_100AFBAA0);
  swift_bridgeObjectRelease(v5);
  v25 = (unint64_t)_swiftEmptyArrayStorage;
  if (v9 < 0)
  {
    __break(1u);
  }
  else
  {
    if (v9)
    {
      v14 = 0;
      v15 = v27;
      do
      {
        if (*(_QWORD *)(v15 + 16))
        {
          v17 = sub_100842E60(v14);
          if ((v18 & 1) != 0)
          {
            v19 = *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v17);
            v20 = swift_retain_n(v19, 2);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v20);
            v22 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v21 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v22 >= v21 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
            v16 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v22, v19);
            specialized Array._endMutation()(v16);
            swift_release(v19);
          }
        }
        ++v14;
      }
      while (v9 != v14);
    }
    swift_release(inited);
    swift_bridgeObjectRelease(v27);
  }
}

double sub_100A9EEB8(uint64_t a1, uint64_t a2)
{
  return sub_100A9EEDC(a1, a2, (uint64_t)&OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_readQueue, (uint64_t)&unk_101292F10, (uint64_t)sub_100B00000, (uint64_t)&unk_101292F28);
}

double sub_100A9EEDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  void *v19;
  id v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD aBlock[5];
  _QWORD *v31;

  v12 = type metadata accessor for DispatchWorkItemFlags(0);
  v28 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchQoS(0);
  v26 = *(_QWORD *)(v15 - 8);
  v27 = v15;
  __chkstk_darwin(v15);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (_QWORD *)swift_allocObject(a4, 40, 7);
  v18[2] = v6;
  v18[3] = a1;
  v18[4] = a2;
  aBlock[4] = a5;
  v31 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(_QWORD *)"";
  aBlock[2] = sub_1005D2FC0;
  aBlock[3] = a6;
  v19 = _Block_copy(aBlock);
  v20 = v6;
  v21 = swift_retain(a2);
  static DispatchQoS.unspecified.getter(v21);
  v29 = _swiftEmptyArrayStorage;
  v22 = sub_1004B7878((unint64_t *)&qword_1013E1D20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v23 = sub_1004B804C((uint64_t *)&unk_1013DFBF0);
  v24 = sub_1004CBA30((unint64_t *)&qword_1013E1D30, (uint64_t *)&unk_1013DFBF0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v23, v24, v12, v22);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v17, v14, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v14, v12);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v17, v27);
  *(_QWORD *)&result = swift_release(v31).n128_u64[0];
  return result;
}

double sub_100A9F0D4(uint64_t a1, void (*a2)(void))
{
  double result;

  sub_100A7BE3C();
  a2();
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

double sub_100A9F170(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t (*v18)(_QWORD);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  char *v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  double result;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD aBlock[5];
  uint64_t v48;

  v38 = a3;
  v39 = a4;
  v37 = a1;
  v42 = type metadata accessor for DispatchWorkItemFlags(0);
  v45 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v41 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v43 = *(_QWORD *)(v7 - 8);
  v44 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for CRLBoardIdentifier(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  __chkstk_darwin(v14);
  v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = *(_QWORD *)&v4[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue];
  sub_1004B8460(v37, (uint64_t)v17, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
  v19 = *(unsigned __int8 *)(v15 + 80);
  v20 = (v19 + 24) & ~v19;
  v21 = *(unsigned __int8 *)(v11 + 80);
  v22 = (v16 + v21 + v20) & ~v21;
  v23 = (v12 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v24 = swift_allocObject(&unk_101292768, v23 + 16, v19 | v21 | 7);
  *(_QWORD *)(v24 + 16) = v4;
  sub_1004B84E0((uint64_t)v17, v24 + v20, type metadata accessor for CRLBoardIdentifier);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v24 + v22, v13, v10);
  v25 = (uint64_t *)(v24 + v23);
  v27 = v38;
  v26 = v39;
  *v25 = v38;
  v25[1] = v26;
  aBlock[4] = sub_100AFF1A8;
  v48 = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(_QWORD *)"";
  aBlock[2] = sub_1005D2FC0;
  aBlock[3] = &unk_101292780;
  v28 = _Block_copy(aBlock);
  v29 = v4;
  sub_1004C0F54(v27, v26);
  static DispatchQoS.unspecified.getter(v30);
  v46 = _swiftEmptyArrayStorage;
  v31 = sub_1004B7878((unint64_t *)&qword_1013E1D20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v32 = sub_1004B804C((uint64_t *)&unk_1013DFBF0);
  v33 = sub_1004CBA30((unint64_t *)&qword_1013E1D30, (uint64_t *)&unk_1013DFBF0, (uint64_t)&protocol conformance descriptor for [A]);
  v35 = v41;
  v34 = v42;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v46, v32, v33, v42, v31);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v35, v28);
  _Block_release(v28);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v35, v34);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v9, v44);
  *(_QWORD *)&result = swift_release(v48).n128_u64[0];
  return result;
}

void sub_100A9F478(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD))
{
  sub_10080EB50(sub_100AFF224);
  if (a4)
    a4(0);
}

void sub_100A9F668(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  void (*v16)(_QWORD *, uint64_t, uint64_t);
  id v17;
  void (*v18)(_QWORD *, uint64_t);
  void *v19;
  id v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t inited;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  double v61;
  _BYTE v62[72];
  _BYTE v63[32];

  v4 = v2;
  v57 = a2;
  v5 = sub_1004B804C(&qword_101406B10);
  __chkstk_darwin(v5);
  v59 = (unint64_t)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = type metadata accessor for CRLBoardCRDTData(0);
  v58 = *(_QWORD *)(v60 - 8);
  v7 = __chkstk_darwin(v60);
  v55 = (uint64_t)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v56 = (uint64_t)&v53 - v9;
  v10 = type metadata accessor for DispatchPredicate(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (_QWORD *)((char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = *(void **)(v4 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v13 = v14;
  v15 = enum case for DispatchPredicate.onQueue(_:);
  v16 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v11 + 104);
  v16(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  v17 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)(v13);
  v18 = *(void (**)(_QWORD *, uint64_t))(v11 + 8);
  v18(v13, v10);
  if ((v14 & 1) == 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  v19 = *(void **)(v4 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v13 = v19;
  v16(v13, v15, v10);
  v20 = v19;
  v21 = _dispatchPreconditionTest(_:)(v13);
  v18(v13, v10);
  if ((v21 & 1) == 0)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    swift_once(&qword_1013DD858, sub_100A05554);
    goto LABEL_9;
  }
  v22 = sub_100A80ED8();
  if (v3)
    return;
  v23 = v22;
  if (v22)
  {
    v24 = (uint64_t *)(v22 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_data);
    v25 = *(_QWORD *)(v22 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_data + 8);
    if (v25 >> 60 != 15)
    {
      v26 = *v24;
      sub_1004BE310(*v24, *(_QWORD *)(v22 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_data + 8));
      sub_1004BE310(v26, v25);
      v27 = sub_1004B7878((unint64_t *)&unk_101405DC0, type metadata accessor for CRLBoardCRDTData, (uint64_t)&unk_100F3A2D0);
      v28 = v59;
      v29 = v60;
      CRDT.init(serializedData:)(v26, v25, v60, v27);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v58 + 56))(v28, 0, 1, v29);
      v40 = v56;
      sub_1004B84E0(v28, v56, type metadata accessor for CRLBoardCRDTData);
      v53 = *(_OWORD *)(v23 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_minRequiredVersions);
      v58 = v26;
      v59 = v25;
      v41 = *(_QWORD *)(v23 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_minRequiredVersions + 16);
      v42 = v55;
      sub_1004B8460(v40, v55, type metadata accessor for CRLBoardCRDTData);
      v43 = OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_boardIdentifier;
      v44 = (uint64_t *)(v23 + *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20) + v43);
      v45 = v44[1];
      v54 = *v44;
      v46 = type metadata accessor for CRLBoardData(0);
      v47 = swift_allocObject(v46, *(unsigned int *)(v46 + 48), *(unsigned __int16 *)(v46 + 52));
      *(_QWORD *)(v47 + 16) = 7;
      *(_OWORD *)(v47 + 24) = v53;
      *(_QWORD *)(v47 + 40) = v41;
      sub_1004B84E0(v42, v47 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, type metadata accessor for CRLBoardCRDTData);
      swift_bridgeObjectRetain(v45);
      swift_release(v23);
      sub_1004BE2FC(v58, v59);
      v48 = (_QWORD *)(v47 + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
      *v48 = v54;
      v48[1] = v45;
      v49 = sub_1004B84A4(v40, type metadata accessor for CRLBoardCRDTData);
      v50 = Date.timeIntervalSinceReferenceDate.getter(v49);
      swift_beginAccess(v47 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v63, 33, 0);
      v61 = v50;
      v51 = sub_1004B804C(&qword_1013FE148);
      CRMaxRegister.wrappedValue.setter(&v61, v51);
      swift_endAccess(v63);
      sub_100A8F258((_QWORD *)v47, 0, 0, 0xF000000000000000, 0, 0);
      swift_release(v52);
      swift_setDeallocating(v47);
      sub_1004B84A4(v47 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, type metadata accessor for CRLBoardCRDTData);
      swift_bridgeObjectRelease(*(_QWORD *)(v47 + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName + 8));
      swift_deallocClassInstance(v47, *(unsigned int *)(*(_QWORD *)v47 + 48), *(unsigned __int16 *)(*(_QWORD *)v47 + 52));
      return;
    }
    swift_release(v22);
  }
  if (qword_1013DD858 != -1)
    goto LABEL_13;
LABEL_9:
  swift_beginAccess(&static OS_os_log.boardStore, v63, 0, 0);
  v30 = (void *)static OS_os_log.boardStore;
  v31 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v31, v62);
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  v33 = v30;
  v34 = sub_10067AD38();
  v36 = v35;
  *(_QWORD *)(inited + 56) = &type metadata for String;
  *(_QWORD *)(inited + 64) = sub_1004CFC2C();
  *(_QWORD *)(inited + 32) = v34;
  *(_QWORD *)(inited + 40) = v36;
  v38 = static os_log_type_t.default.getter(v37);
  sub_100A06EBC((uint64_t)v33, &_mh_execute_header, v38, "Attempted to update the last activity time but the board does not exist. Board identifier %@", 92, 2, inited);
  swift_setDeallocating(inited);
  v39 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(inited + 32, 1, v39);

}

double sub_100A9FC1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;

  v5 = sub_1004B804C(&qword_1013EB680);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = __chkstk_darwin(v5);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16))((char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5, v8);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = (v9 + 16) & ~v9;
  v11 = swift_allocObject(&unk_101292E20, v10 + v7, v9 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v11 + v10, (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  sub_100A9FD18(a3, (uint64_t)sub_10073FDCC, v11, (uint64_t)&unk_101292E48, (uint64_t)sub_100AFFF60, (uint64_t)&unk_101292E60);
  *(_QWORD *)&result = swift_release(v11).n128_u64[0];
  return result;
}

double sub_100A9FD18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char *v6;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  void *v20;
  char *v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double result;
  _QWORD v27[2];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double *v31;
  _QWORD aBlock[5];
  _QWORD *v33;

  v13 = type metadata accessor for DispatchWorkItemFlags(0);
  v30 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DispatchQoS(0);
  v28 = *(_QWORD *)(v16 - 8);
  v29 = v16;
  __chkstk_darwin(v16);
  v18 = (char *)v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27[1] = *(_QWORD *)&v6[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue];
  v19 = (_QWORD *)swift_allocObject(a4, 48, 7);
  v19[2] = v6;
  v19[3] = a1;
  v19[4] = a2;
  v19[5] = a3;
  aBlock[4] = a5;
  v33 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(_QWORD *)"";
  aBlock[2] = sub_1005D2FC0;
  aBlock[3] = a6;
  v20 = _Block_copy(aBlock);
  v21 = v6;
  swift_bridgeObjectRetain(a1);
  sub_1004C0F54(a2, a3);
  static DispatchQoS.unspecified.getter(v22);
  v31 = _swiftEmptyArrayStorage;
  v23 = sub_1004B7878((unint64_t *)&qword_1013E1D20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v24 = sub_1004B804C((uint64_t *)&unk_1013DFBF0);
  v25 = sub_1004CBA30((unint64_t *)&qword_1013E1D30, (uint64_t *)&unk_1013DFBF0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v24, v25, v13, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v18, v15, v20);
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v15, v13);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v18, v29);
  *(_QWORD *)&result = swift_release(v33).n128_u64[0];
  return result;
}

void sub_100A9FF24(void *a1, uint64_t a2, void (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD v11[8];

  v6 = type metadata accessor for CRLBoardIdentifierAndValue(0);
  v11[7] = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v11[6] = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11[5] = (char *)v11 - v9;
  swift_bridgeObjectRetain(a2);
  v10 = a1;
  sub_1004E6AD0(v10, a2, (uint64_t)v10);
  swift_bridgeObjectRelease(a2);

  if (a3)
    a3(0);
}

uint64_t sub_100AA03DC(uint64_t a1, uint64_t a2)
{
  char v2;

  sub_100AA3D7C(a1, a2, (void (*)(uint64_t, char *))sub_100AA03FC);
  return v2 & 1;
}

void sub_100AA03FC(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  void (*v11)(_QWORD *, uint64_t, uint64_t);
  id v12;
  void (*v13)(_QWORD *, uint64_t);
  void *v14;
  id v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  unint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t inited;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE v49[24];
  _BYTE v50[112];
  _BYTE v51[72];
  _BYTE v52[32];
  int v53;
  char v54;

  v3 = v1;
  v53 = a1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (uint64_t *)((char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(void **)(v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v8 = v9;
  v10 = enum case for DispatchPredicate.onQueue(_:);
  v11 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v5 + 104);
  ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v11)(v8, enum case for DispatchPredicate.onQueue(_:), v4, v6);
  v12 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  v13 = *(void (**)(_QWORD *, uint64_t))(v5 + 8);
  v13(v8, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  v14 = *(void **)(v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v8 = v14;
  v11(v8, v10, v4);
  v15 = v14;
  v16 = _dispatchPreconditionTest(_:)(v8);
  v13(v8, v4);
  if ((v16 & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v17 = sub_100A94568();
  if (v2)
    return;
  if (!v17 || (v18 = sub_100AF48BC(v17)) == 0)
  {
    if (qword_1013DD858 == -1)
    {
LABEL_15:
      swift_beginAccess(&static OS_os_log.boardStore, v52, 0, 0);
      v37 = (void *)static OS_os_log.boardStore;
      v38 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      inited = swift_initStackObject(v38, v51);
      *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
      v40 = v37;
      v41 = UUID.uuidString.getter(v40);
      v43 = v42;
      *(_QWORD *)(inited + 56) = &type metadata for String;
      *(_QWORD *)(inited + 64) = sub_1004CFC2C();
      *(_QWORD *)(inited + 32) = v41;
      *(_QWORD *)(inited + 40) = v43;
      v45 = static os_log_type_t.default.getter(v44);
      sub_100A06EBC((uint64_t)v40, &_mh_execute_header, v45, "Attempted to set the favorite state on a board that does not exist or does not have associated metadata. Board identifier: %{public}@", 133, 2, inited);
      swift_setDeallocating(inited);
      v46 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(inited + 32, 1, v46);

      return;
    }
LABEL_19:
    swift_once(&qword_1013DD858, sub_100A05554);
    goto LABEL_15;
  }
  v48 = v18;
  if (qword_1013DD858 != -1)
    swift_once(&qword_1013DD858, sub_100A05554);
  swift_beginAccess(&static OS_os_log.boardStore, v52, 0, 0);
  v19 = (void *)static OS_os_log.boardStore;
  v20 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  v21 = swift_initStackObject(v20, v50);
  *(_OWORD *)(v21 + 16) = xmmword_100EF5A10;
  v22 = sub_1004CFC2C();
  v23 = v22;
  v24 = (v53 & 1) == 0;
  v53 &= 1u;
  v25 = 1702195828;
  if (v24)
    v25 = 0x65736C6166;
  v26 = 0xE500000000000000;
  if (!v24)
    v26 = 0xE400000000000000;
  *(_QWORD *)(v21 + 56) = &type metadata for String;
  *(_QWORD *)(v21 + 64) = v22;
  *(_QWORD *)(v21 + 32) = v25;
  *(_QWORD *)(v21 + 40) = v26;
  v27 = v19;
  v28 = UUID.uuidString.getter(v27);
  *(_QWORD *)(v21 + 96) = &type metadata for String;
  *(_QWORD *)(v21 + 104) = v23;
  *(_QWORD *)(v21 + 72) = v28;
  *(_QWORD *)(v21 + 80) = v29;
  v31 = static os_log_type_t.default.getter(v30);
  sub_100A06EBC((uint64_t)v27, &_mh_execute_header, v31, "Set favorite status to [%{public}@] for board identifier: %{public}@", 68, 2, v21);
  swift_setDeallocating(v21);
  v32 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(v21 + 32, 2, v32);

  v33 = v48;
  swift_beginAccess(v48 + OBJC_IVAR____TtC8Freeform24CRLUserBoardMetadataData_crdtData, v49, 33, 0);
  v54 = v53;
  v34 = sub_1004B804C((uint64_t *)&unk_1013F5590);
  CRRegister.wrappedValue.setter(&v54, v34, v35);
  swift_endAccess(v49);
  v36 = sub_100A93A98(v33, 0, 0, 0xF000000000000000, 0);
  swift_release(v33);
  swift_release(v36);
}

double sub_100AA0804(uint64_t a1, char *a2, uint64_t a3)
{
  return sub_100AA0828(a1, a2, a3, &qword_101405658, (uint64_t)&unk_101293898, (uint64_t)sub_100B01350, (uint64_t)&unk_1012938B0);
}

double sub_100AA0828(uint64_t a1, char *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t (*v20)(_QWORD);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  char *v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  double result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD aBlock[5];
  uint64_t v48;

  v39 = a6;
  v40 = a7;
  v36 = a1;
  v37 = a5;
  v35 = a3;
  v42 = type metadata accessor for DispatchWorkItemFlags(0);
  v45 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v41 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v43 = *(_QWORD *)(v10 - 8);
  v44 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1004B804C(a4);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v13);
  v16 = type metadata accessor for CRLBoardIdentifier(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(_QWORD *)(v17 + 64);
  __chkstk_darwin(v16);
  v19 = (char *)&v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = *(_QWORD *)&a2[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_readQueue];
  sub_1004B8460(v35, (uint64_t)v19, v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v36, v13);
  v21 = *(unsigned __int8 *)(v17 + 80);
  v22 = (v21 + 24) & ~v21;
  v23 = *(unsigned __int8 *)(v14 + 80);
  v24 = (v18 + v23 + v22) & ~v23;
  v25 = swift_allocObject(v37, v24 + v15, v21 | v23 | 7);
  *(_QWORD *)(v25 + 16) = a2;
  sub_1004B84E0((uint64_t)v19, v25 + v22, type metadata accessor for CRLBoardIdentifier);
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v25 + v24, (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v13);
  aBlock[4] = v39;
  v48 = v25;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(_QWORD *)"";
  aBlock[2] = sub_1005D2FC0;
  aBlock[3] = v40;
  v26 = _Block_copy(aBlock);
  v27 = a2;
  static DispatchQoS.unspecified.getter(v28);
  v46 = _swiftEmptyArrayStorage;
  v29 = sub_1004B7878((unint64_t *)&qword_1013E1D20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v30 = sub_1004B804C((uint64_t *)&unk_1013DFBF0);
  v31 = sub_1004CBA30((unint64_t *)&qword_1013E1D30, (uint64_t *)&unk_1013DFBF0, (uint64_t)&protocol conformance descriptor for [A]);
  v33 = v41;
  v32 = v42;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v46, v30, v31, v42, v29);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v33, v26);
  _Block_release(v26);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v33, v32);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v12, v44);
  *(_QWORD *)&result = swift_release(v48).n128_u64[0];
  return result;
}

uint64_t sub_100AA0B08()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[16];

  v0 = type metadata accessor for CRLUserBoardMetadataCRDTData(0);
  __chkstk_darwin(v0);
  v2 = &v8[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v3 = sub_100A94568();
  if (v3)
  {
    sub_10073E8DC((uint64_t)v2);
    v5 = sub_1004B804C((uint64_t *)&unk_1013F5590);
    CRRegister.wrappedValue.getter(v5);
    v6 = sub_1004B804C(&qword_101405658);
    CheckedContinuation.resume(returning:)(v8, v6);
    swift_release(v3);
    return sub_1004B84A4((uint64_t)v2, type metadata accessor for CRLUserBoardMetadataCRDTData);
  }
  else
  {
    v8[0] = 2;
    v4 = sub_1004B804C(&qword_101405658);
    return CheckedContinuation.resume(returning:)(v8, v4);
  }
}

double sub_100AA0C58(uint64_t a1, char *a2, uint64_t a3)
{
  return sub_100AB374C(a1, a2, a3, (uint64_t)&unk_101292DD0, (uint64_t)sub_100AFFF40, (uint64_t)&unk_101292DE8);
}

uint64_t sub_100AA0C74(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD v11[37];

  v4 = type metadata accessor for CRLBoardIdentifierAndValue(0);
  v11[7] = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v11[6] = (char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v11[5] = (char *)v11 - v7;
  swift_bridgeObjectRetain(a2);
  v8 = a1;
  sub_1004E6AEC(v8, a2, (uint64_t)v8);
  swift_bridgeObjectRelease(a2);

  v9 = sub_1004B804C(&qword_1013EB680);
  return CheckedContinuation.resume(returning:)(v9, v9);
}

uint64_t sub_100AA10C8(uint64_t a1, uint64_t a2)
{
  char v2;

  sub_100AA3D7C(a1, a2, (void (*)(uint64_t, char *))sub_100AA10E8);
  return v2 & 1;
}

void sub_100AA10E8(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t inited;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE v43[24];
  _BYTE v44[112];
  _BYTE v45[72];
  _BYTE v46[32];
  int v47;
  char v48;

  v3 = v1;
  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (uint64_t *)((char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(void **)(v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v9 = v10;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5, v7);
  v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v9, v5);
  if ((v10 & 1) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  v12 = sub_100A94568();
  if (v2)
    return;
  if (!v12 || (v13 = sub_100AF48BC(v12)) == 0)
  {
    if (qword_1013DD858 == -1)
    {
LABEL_13:
      swift_beginAccess(&static OS_os_log.boardStore, v46, 0, 0);
      v31 = (void *)static OS_os_log.boardStore;
      v32 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      inited = swift_initStackObject(v32, v45);
      *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
      v34 = v31;
      v35 = UUID.uuidString.getter(v34);
      v37 = v36;
      *(_QWORD *)(inited + 56) = &type metadata for String;
      *(_QWORD *)(inited + 64) = sub_1004CFC2C();
      *(_QWORD *)(inited + 32) = v35;
      *(_QWORD *)(inited + 40) = v37;
      v39 = static os_log_type_t.default.getter(v38);
      sub_100A06EBC((uint64_t)v34, &_mh_execute_header, v39, "Attempted to enable collaborator cursors on a board that does not exist or does not have associated metadata. Board identifier: %{public}@", 138, 2, inited);
      swift_setDeallocating(inited);
      v40 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(inited + 32, 1, v40);

      return;
    }
LABEL_16:
    swift_once(&qword_1013DD858, sub_100A05554);
    goto LABEL_13;
  }
  v42 = v13;
  if (qword_1013DD858 != -1)
    swift_once(&qword_1013DD858, sub_100A05554);
  swift_beginAccess(&static OS_os_log.boardStore, v46, 0, 0);
  v14 = (void *)static OS_os_log.boardStore;
  v15 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  v16 = swift_initStackObject(v15, v44);
  *(_OWORD *)(v16 + 16) = xmmword_100EF5A10;
  v17 = sub_1004CFC2C();
  v18 = v17;
  v47 = a1 & 1;
  v19 = 1702195828;
  if ((a1 & 1) == 0)
    v19 = 0x65736C6166;
  v20 = 0xE500000000000000;
  if ((a1 & 1) != 0)
    v20 = 0xE400000000000000;
  *(_QWORD *)(v16 + 56) = &type metadata for String;
  *(_QWORD *)(v16 + 64) = v17;
  *(_QWORD *)(v16 + 32) = v19;
  *(_QWORD *)(v16 + 40) = v20;
  v21 = v14;
  v22 = UUID.uuidString.getter(v21);
  *(_QWORD *)(v16 + 96) = &type metadata for String;
  *(_QWORD *)(v16 + 104) = v18;
  *(_QWORD *)(v16 + 72) = v22;
  *(_QWORD *)(v16 + 80) = v23;
  v25 = static os_log_type_t.default.getter(v24);
  sub_100A06EBC((uint64_t)v21, &_mh_execute_header, v25, "Set enable collaborator cursors to [%{public}@] for board identifier: %{public}@", 80, 2, v16);
  swift_setDeallocating(v16);
  v26 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(v16 + 32, 2, v26);

  v27 = v42;
  swift_beginAccess(v42 + OBJC_IVAR____TtC8Freeform24CRLUserBoardMetadataData_crdtData, v43, 33, 0);
  v48 = v47;
  type metadata accessor for CRLUserBoardMetadataCRDTData(0);
  v28 = sub_1004B804C((uint64_t *)&unk_1013F5590);
  CRRegister.wrappedValue.setter(&v48, v28, v29);
  swift_endAccess(v43);
  v30 = sub_100A93A98(v27, 0, 0, 0xF000000000000000, 0);
  swift_release(v27);
  swift_release(v30);
}

double sub_100AA14B4(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t (*v18)(_QWORD);
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  _OWORD *v26;
  __int128 v27;
  __int128 v28;
  void *v29;
  id v30;
  char *v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  double result;
  void *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double *v48;
  _QWORD aBlock[5];
  uint64_t v50;

  v39 = a2;
  v40 = a3;
  v44 = type metadata accessor for DispatchWorkItemFlags(0);
  v47 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v43 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v45 = *(_QWORD *)(v8 - 8);
  v46 = v8;
  __chkstk_darwin(v8);
  v41 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1004B804C(&qword_1013EB680);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for CRLBoardIdentifier(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  __chkstk_darwin(v14);
  v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = *(_QWORD *)&a2[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue];
  sub_1004B8460(v40, (uint64_t)v17, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
  v19 = *(unsigned __int8 *)(v15 + 80);
  v20 = (v19 + 24) & ~v19;
  v21 = (v16 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = *(unsigned __int8 *)(v11 + 80);
  v23 = (v22 + v21 + 73) & ~v22;
  v24 = swift_allocObject(&unk_101292AB0, v23 + v12, v19 | v22 | 7);
  v25 = v39;
  *(_QWORD *)(v24 + 16) = v39;
  sub_1004B84E0((uint64_t)v17, v24 + v20, type metadata accessor for CRLBoardIdentifier);
  v26 = (_OWORD *)(v24 + v21);
  v27 = *(_OWORD *)(a4 + 48);
  v26[2] = *(_OWORD *)(a4 + 32);
  v26[3] = v27;
  *(_OWORD *)((char *)v26 + 57) = *(_OWORD *)(a4 + 57);
  v28 = *(_OWORD *)(a4 + 16);
  *v26 = *(_OWORD *)a4;
  v26[1] = v28;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v24 + v23, v13, v10);
  aBlock[4] = sub_100AFFC10;
  v50 = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(_QWORD *)"";
  aBlock[2] = sub_1005D2FC0;
  aBlock[3] = &unk_101292AC8;
  v29 = _Block_copy(aBlock);
  v30 = v25;
  sub_100AFFC88((_QWORD *)a4);
  v31 = v41;
  static DispatchQoS.unspecified.getter(v32);
  v48 = _swiftEmptyArrayStorage;
  v33 = sub_1004B7878((unint64_t *)&qword_1013E1D20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v34 = sub_1004B804C((uint64_t *)&unk_1013DFBF0);
  v35 = sub_1004CBA30((unint64_t *)&qword_1013E1D30, (uint64_t *)&unk_1013DFBF0, (uint64_t)&protocol conformance descriptor for [A]);
  v37 = v43;
  v36 = v44;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v48, v34, v35, v44, v33);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v31, v37, v29);
  _Block_release(v29);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v37, v36);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v31, v46);
  *(_QWORD *)&result = swift_release(v50).n128_u64[0];
  return result;
}

uint64_t sub_100AA17DC()
{
  uint64_t v0;

  sub_10080EB50(sub_100AFFCCC);
  v0 = sub_1004B804C(&qword_1013EB680);
  return CheckedContinuation.resume(returning:)(v0, v0);
}

void sub_100AA19C8(uint64_t a1, _OWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  unsigned int v12;
  void (*v13)(_QWORD *, uint64_t, uint64_t);
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;
  id v37;
  int v38;
  void *v39;
  id v40;
  _QWORD *v41;
  int v42;
  uint64_t v43;
  Swift::String v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  __n128 v49;
  void *v50;
  id v51;
  _QWORD v52[2];
  unsigned int v53;
  void (*v54)(_QWORD *, uint64_t);
  unint64_t v55;
  unint64_t v56;
  _OWORD v57[3];
  _OWORD v58[2];
  char v59[32];

  v4 = v2;
  v52[1] = a1;
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (_QWORD *)((char *)v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *(void **)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v10 = v11;
  v12 = enum case for DispatchPredicate.onQueue(_:);
  v13 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v7 + 104);
  ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v13)(v10, enum case for DispatchPredicate.onQueue(_:), v6, v8);
  v14 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v10);
  v54 = *(void (**)(_QWORD *, uint64_t))(v7 + 8);
  v54(v10, v6);
  if ((v11 & 1) == 0)
  {
    __break(1u);
    __break(1u);
    goto LABEL_17;
  }
  v53 = v12;
  *(_QWORD *)&v57[0] = 0;
  *((_QWORD *)&v57[0] + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(v4 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v16 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v16, v59);
  swift_retain(v15);
  v18 = sub_1006B77CC(v17, 0xD000000000000049, 0x8000000100FF12E0);
  if (!v3)
  {
    v20 = v18;
    v21 = swift_release(v15);
    v22 = type metadata accessor for JSONEncoder(0, v21);
    v23 = swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
    v24 = JSONEncoder.init()(v23);
    v25 = a2[3];
    v57[2] = a2[2];
    v58[0] = v25;
    *(_OWORD *)((char *)v58 + 9) = *(_OWORD *)((char *)a2 + 57);
    v26 = a2[1];
    v57[0] = *a2;
    v57[1] = v26;
    v27 = sub_100AFF250();
    v28 = dispatch thunk of JSONEncoder.encode<A>(_:)(v57, &type metadata for CRLBoardViewState, v27);
    v30 = v29;
    swift_release(v24);
    sub_1006B5E80(v28, v30);
    sub_1004BBBC8(v28, v30);
    v31 = sub_10067BA88();
    v33 = v53;
    v34 = v31;
    v35 = v32;
    sub_1006B5E80(v31, v32);
    sub_1004BBBC8(v34, v35);
    v36 = *(void **)(*(_QWORD *)(v20 + 16) + 32);
    *v10 = v36;
    v13(v10, v33, v6);
    v37 = v36;
    LOBYTE(v36) = _dispatchPreconditionTest(_:)(v10);
    v54(v10, v6);
    if ((v36 & 1) != 0)
    {
      v52[0] = v20 + 24;
      swift_beginAccess(v20 + 24, v57, 1, 0);
      v38 = sqlite3_step(*(sqlite3_stmt **)(v20 + 24));
      if (v38 != 101)
      {
        v42 = v38;
        v55 = 0;
        v56 = 0xE000000000000000;
        _StringGuts.grow(_:)(40);
        swift_bridgeObjectRelease();
        v55 = 0xD000000000000026;
        v56 = 0x8000000100FF1330;
        v44._countAndFlagsBits = UUID.uuidString.getter(v43);
        String.append(_:)(v44);
        swift_bridgeObjectRelease();
        v45 = v55;
        v46 = v56;
        v47 = sub_1006B79EC();
        swift_allocError(&type metadata for SQLiteError, v47, 0, 0);
        *(_DWORD *)v48 = v42;
        *(_QWORD *)(v48 + 8) = v45;
        *(_QWORD *)(v48 + 16) = v46;
        swift_willThrow(v49);
        v50 = *(void **)(*(_QWORD *)(v20 + 16) + 32);
        *v10 = v50;
        v13(v10, v33, v6);
        v51 = v50;
        LOBYTE(v50) = _dispatchPreconditionTest(_:)(v10);
        v54(v10, v6);
        if ((v50 & 1) != 0)
        {
          if (*(_QWORD *)v52[0])
          {
            sqlite3_finalize(*(sqlite3_stmt **)v52[0]);
            *(_QWORD *)(v20 + 24) = 0;
          }
          goto LABEL_6;
        }
LABEL_19:
        __break(1u);
      }
      v39 = *(void **)(*(_QWORD *)(v20 + 16) + 32);
      *v10 = v39;
      v13(v10, v33, v6);
      v40 = v39;
      LOBYTE(v39) = _dispatchPreconditionTest(_:)(v10);
      v54(v10, v6);
      if ((v39 & 1) != 0)
      {
        v41 = (_QWORD *)v52[0];
        if (*(_QWORD *)v52[0])
        {
          sqlite3_finalize(*(sqlite3_stmt **)v52[0]);
          *v41 = 0;
        }
LABEL_6:
        v19 = v20;
        goto LABEL_7;
      }
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v19 = v15;
LABEL_7:
  swift_release(v19);
}

double sub_100AA1E90(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t (*v17)(_QWORD);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  char *v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double *v38;
  _QWORD aBlock[5];
  uint64_t v40;

  v31 = a3;
  v32 = a1;
  v34 = type metadata accessor for DispatchWorkItemFlags(0);
  v37 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v35 = *(_QWORD *)(v6 - 8);
  v36 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1004B804C(&qword_1013EB680);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CRLBoardIdentifier(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v13);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = *(_QWORD *)&a2[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue];
  sub_1004B8460(v31, (uint64_t)v16, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v32, v9);
  v18 = *(unsigned __int8 *)(v14 + 80);
  v19 = (v18 + 24) & ~v18;
  v20 = *(unsigned __int8 *)(v10 + 80);
  v21 = (v15 + v20 + v19) & ~v20;
  v22 = swift_allocObject(&unk_101292218, v21 + v11, v18 | v20 | 7);
  *(_QWORD *)(v22 + 16) = a2;
  sub_1004B84E0((uint64_t)v16, v22 + v19, type metadata accessor for CRLBoardIdentifier);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v22 + v21, v12, v9);
  aBlock[4] = sub_100AD3EE0;
  v40 = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(_QWORD *)"";
  aBlock[2] = sub_1005D2FC0;
  aBlock[3] = &unk_101292230;
  v23 = _Block_copy(aBlock);
  v24 = a2;
  static DispatchQoS.unspecified.getter(v25);
  v38 = _swiftEmptyArrayStorage;
  v26 = sub_1004B7878((unint64_t *)&qword_1013E1D20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v27 = sub_1004B804C((uint64_t *)&unk_1013DFBF0);
  v28 = sub_1004CBA30((unint64_t *)&qword_1013E1D30, (uint64_t *)&unk_1013DFBF0, (uint64_t)&protocol conformance descriptor for [A]);
  v29 = v34;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v38, v27, v28, v34, v26);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v5, v23);
  _Block_release(v23);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v5, v29);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v8, v36);
  *(_QWORD *)&result = swift_release(v40).n128_u64[0];
  return result;
}

uint64_t sub_100AA2170(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t inited;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  _BYTE v18[24];

  v3 = sub_100A94568();
  v4 = v3;
  if (v3)
  {
    if ((*(_BYTE *)(v3 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_lastOpenCrashedVersion + 8) & 1) == 0)
    {
      if (qword_1013DD858 != -1)
        swift_once(&qword_1013DD858, sub_100A05554);
      swift_beginAccess(&static OS_os_log.boardStore, v18, 0, 0);
      v5 = (void *)static OS_os_log.boardStore;
      v6 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      inited = swift_initStackObject(v6, &v17);
      *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
      v8 = v5;
      v9 = UUID.uuidString.getter(v8);
      v11 = v10;
      *(_QWORD *)(inited + 56) = &type metadata for String;
      *(_QWORD *)(inited + 64) = sub_1004CFC2C();
      *(_QWORD *)(inited + 32) = v9;
      *(_QWORD *)(inited + 40) = v11;
      v13 = static os_log_type_t.default.getter(v12);
      sub_100A06EBC((uint64_t)v8, &_mh_execute_header, v13, "Actually setting BoardDidNotCrash for board %{public}@", 54, 2, inited);
      swift_setDeallocating(inited);
      v14 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(inited + 32, 1, v14);

      sub_100AA2374(a2, 0, 1);
      sub_100A75C10(a2, (uint64_t)&unk_101292268, (uint64_t)sub_100AD3F18, (uint64_t)&unk_101292280);
    }
    swift_release(v4);
  }
  v15 = sub_1004B804C(&qword_1013EB680);
  return CheckedContinuation.resume(returning:)(v15, v15);
}

void sub_100AA2374(uint64_t a1, sqlite3_int64 a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  void (*v14)(_QWORD *, uint64_t, uint64_t, __n128);
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  void *v21;
  id v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  id v29;
  sqlite3_stmt **v30;
  int v31;
  void *v32;
  id v33;
  Swift::String v34;
  uint64_t v35;
  Swift::String v36;
  uint64_t v37;
  Swift::String v38;
  void *object;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  __n128 v44;
  void *v45;
  id v46;
  uint64_t v47;
  sqlite3_int64 v48;
  uint64_t v49;
  int v50;
  void (*v51)(_QWORD *, uint64_t);
  uint64_t v52;
  unint64_t v53;
  sqlite3_int64 v54;
  char v55;
  _BYTE v56[24];
  uint64_t v57;
  unint64_t v58;
  _BYTE v59[32];

  v5 = v3;
  v50 = a3;
  v48 = a2;
  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (uint64_t *)((char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = *(void **)(v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v11 = v12;
  v13 = enum case for DispatchPredicate.onQueue(_:);
  v14 = *(void (**)(_QWORD *, uint64_t, uint64_t, __n128))(v8 + 104);
  v14(v11, enum case for DispatchPredicate.onQueue(_:), v7, v9);
  v15 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)(v11);
  v51 = *(void (**)(_QWORD *, uint64_t))(v8 + 8);
  v51(v11, v7);
  if ((v12 & 1) == 0)
  {
    __break(1u);
    __break(1u);
    goto LABEL_19;
  }
  v49 = a1;
  v57 = 0;
  v58 = 0xE000000000000000;
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease(v58);
  v16 = *(_QWORD *)(v5 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v17 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v17, v59);
  swift_retain(v16);
  v19 = sub_1006B77CC(v18, 0xD000000000000053, 0x8000000100FEEA30);
  v20 = swift_release(v16);
  if (v4)
    return;
  if ((v50 & 1) == 0)
  {
    sub_1006B5B50(v48, 1);
    goto LABEL_7;
  }
  v21 = *(void **)(*(_QWORD *)(v19 + 16) + 32);
  *v11 = v21;
  v14(v11, v13, v7, v20);
  v22 = v21;
  v23 = _dispatchPreconditionTest(_:)(v11);
  v51(v11, v7);
  if ((v23 & 1) == 0)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  swift_beginAccess(v19 + 24, &v57, 0, 0);
  sqlite3_bind_null(*(sqlite3_stmt **)(v19 + 24), 1);
LABEL_7:
  v24 = sub_10067BA88();
  v26 = v24;
  v27 = v25;
  sub_1006B5E80(v24, v25);
  sub_1004BBBC8(v26, v27);
  v28 = *(void **)(*(_QWORD *)(v19 + 16) + 32);
  *v11 = v28;
  ((void (*)(_QWORD *, uint64_t, uint64_t))v14)(v11, v13, v7);
  v29 = v28;
  LOBYTE(v28) = _dispatchPreconditionTest(_:)(v11);
  v51(v11, v7);
  if ((v28 & 1) == 0)
    goto LABEL_20;
  v30 = (sqlite3_stmt **)(v19 + 24);
  swift_beginAccess(v19 + 24, v56, 1, 0);
  v31 = sqlite3_step(*(sqlite3_stmt **)(v19 + 24));
  if (v31 != 101)
    goto LABEL_15;
  v32 = *(void **)(*(_QWORD *)(v19 + 16) + 32);
  *v11 = v32;
  ((void (*)(_QWORD *, uint64_t, uint64_t))v14)(v11, v13, v7);
  v33 = v32;
  LOBYTE(v32) = _dispatchPreconditionTest(_:)(v11);
  v31 = ((uint64_t (*)(_QWORD *, uint64_t))v51)(v11, v7);
  if ((v32 & 1) == 0)
  {
    __break(1u);
LABEL_15:
    v52 = 0;
    v53 = 0xE000000000000000;
    HIDWORD(v47) = v31;
    _StringGuts.grow(_:)(52);
    v34._object = (void *)0x8000000100FEEA90;
    v34._countAndFlagsBits = 0xD000000000000025;
    String.append(_:)(v34);
    v54 = v48;
    v55 = v50 & 1;
    v35 = sub_1004B804C(&qword_1013E4250);
    _print_unlocked<A, B>(_:_:)(&v54, &v52, v35, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v36._countAndFlagsBits = 0x616F6220726F6620;
    v36._object = (void *)0xEB00000000206472;
    String.append(_:)(v36);
    v38._countAndFlagsBits = UUID.uuidString.getter(v37);
    object = v38._object;
    String.append(_:)(v38);
    swift_bridgeObjectRelease(object);
    v40 = v52;
    v41 = v53;
    v42 = sub_1006B79EC();
    swift_allocError(&type metadata for SQLiteError, v42, 0, 0);
    *(_DWORD *)v43 = HIDWORD(v47);
    *(_QWORD *)(v43 + 8) = v40;
    *(_QWORD *)(v43 + 16) = v41;
    swift_willThrow(v44);
    v45 = *(void **)(*(_QWORD *)(v19 + 16) + 32);
    *v11 = v45;
    ((void (*)(_QWORD *, uint64_t, uint64_t))v14)(v11, v13, v7);
    v46 = v45;
    LOBYTE(v45) = _dispatchPreconditionTest(_:)(v11);
    v51(v11, v7);
    if ((v45 & 1) != 0)
      goto LABEL_16;
LABEL_21:
    __break(1u);
  }
LABEL_16:
  if (*v30)
  {
    sqlite3_finalize(*v30);
    *v30 = 0;
  }
  swift_release(v19);
}

double sub_100AA2828(uint64_t a1, char *a2, uint64_t a3)
{
  return sub_100AB374C(a1, a2, a3, (uint64_t)&unk_101292A60, (uint64_t)sub_100AFFAE8, (uint64_t)&unk_101292A78);
}

uint64_t sub_100AA2844(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD v11[37];

  v4 = type metadata accessor for CRLBoardIdentifierAndValue(0);
  v11[7] = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v11[6] = (char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v11[5] = (char *)v11 - v7;
  swift_bridgeObjectRetain(a2);
  v8 = a1;
  sub_1004E6B08(v8, a2, (uint64_t)v8);
  swift_bridgeObjectRelease(a2);

  v9 = sub_1004B804C(&qword_1013EB680);
  return CheckedContinuation.resume(returning:)(v9, v9);
}

uint64_t sub_100AA2C98(uint64_t a1, uint64_t a2)
{
  char v2;

  sub_100AA3D7C(a1, a2, (void (*)(uint64_t, char *))sub_100AA2CB8);
  return v2 & 1;
}

void sub_100AA2CB8(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t inited;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE v43[24];
  _BYTE v44[112];
  _BYTE v45[72];
  _BYTE v46[32];
  int v47;
  char v48;

  v3 = v1;
  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (uint64_t *)((char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(void **)(v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v9 = v10;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5, v7);
  v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v9, v5);
  if ((v10 & 1) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  v12 = sub_100A94568();
  if (v2)
    return;
  if (!v12 || (v13 = sub_100AF48BC(v12)) == 0)
  {
    if (qword_1013DD858 == -1)
    {
LABEL_13:
      swift_beginAccess(&static OS_os_log.boardStore, v46, 0, 0);
      v31 = (void *)static OS_os_log.boardStore;
      v32 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      inited = swift_initStackObject(v32, v45);
      *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
      v34 = v31;
      v35 = UUID.uuidString.getter(v34);
      v37 = v36;
      *(_QWORD *)(inited + 56) = &type metadata for String;
      *(_QWORD *)(inited + 64) = sub_1004CFC2C();
      *(_QWORD *)(inited + 32) = v35;
      *(_QWORD *)(inited + 40) = v37;
      v39 = static os_log_type_t.default.getter(v38);
      sub_100A06EBC((uint64_t)v34, &_mh_execute_header, v39, "Attempted to set the canvas dot grid enabled state on a board that does not exist or does not have associated metadata. Board identifier: %{public}@", 148, 2, inited);
      swift_setDeallocating(inited);
      v40 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(inited + 32, 1, v40);

      return;
    }
LABEL_16:
    swift_once(&qword_1013DD858, sub_100A05554);
    goto LABEL_13;
  }
  v42 = v13;
  if (qword_1013DD858 != -1)
    swift_once(&qword_1013DD858, sub_100A05554);
  swift_beginAccess(&static OS_os_log.boardStore, v46, 0, 0);
  v14 = (void *)static OS_os_log.boardStore;
  v15 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  v16 = swift_initStackObject(v15, v44);
  *(_OWORD *)(v16 + 16) = xmmword_100EF5A10;
  v17 = sub_1004CFC2C();
  v18 = v17;
  v47 = a1 & 1;
  v19 = 1702195828;
  if ((a1 & 1) == 0)
    v19 = 0x65736C6166;
  v20 = 0xE500000000000000;
  if ((a1 & 1) != 0)
    v20 = 0xE400000000000000;
  *(_QWORD *)(v16 + 56) = &type metadata for String;
  *(_QWORD *)(v16 + 64) = v17;
  *(_QWORD *)(v16 + 32) = v19;
  *(_QWORD *)(v16 + 40) = v20;
  v21 = v14;
  v22 = UUID.uuidString.getter(v21);
  *(_QWORD *)(v16 + 96) = &type metadata for String;
  *(_QWORD *)(v16 + 104) = v18;
  *(_QWORD *)(v16 + 72) = v22;
  *(_QWORD *)(v16 + 80) = v23;
  v25 = static os_log_type_t.default.getter(v24);
  sub_100A06EBC((uint64_t)v21, &_mh_execute_header, v25, "Set canvas dot grid visible to [%{public}@] for board identifier: %{public}@", 76, 2, v16);
  swift_setDeallocating(v16);
  v26 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(v16 + 32, 2, v26);

  v27 = v42;
  swift_beginAccess(v42 + OBJC_IVAR____TtC8Freeform24CRLUserBoardMetadataData_crdtData, v43, 33, 0);
  v48 = v47;
  type metadata accessor for CRLUserBoardMetadataCRDTData(0);
  v28 = sub_1004B804C((uint64_t *)&unk_1013F5590);
  CRRegister.wrappedValue.setter(&v48, v28, v29);
  swift_endAccess(v43);
  v30 = sub_100A93A98(v27, 0, 0, 0xF000000000000000, 0);
  swift_release(v27);
  swift_release(v30);
}

double sub_100AA3084(uint64_t a1, char *a2, uint64_t a3)
{
  return sub_100AB374C(a1, a2, a3, (uint64_t)&unk_101292A10, (uint64_t)sub_100AFFA94, (uint64_t)&unk_101292A28);
}

uint64_t sub_100AA30A0(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD v11[37];

  v4 = type metadata accessor for CRLBoardIdentifierAndValue(0);
  v11[7] = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v11[6] = (char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v11[5] = (char *)v11 - v7;
  swift_bridgeObjectRetain(a2);
  v8 = a1;
  sub_1004E6B24(v8, a2, (uint64_t)v8);
  swift_bridgeObjectRelease(a2);

  v9 = sub_1004B804C(&qword_1013EB680);
  return CheckedContinuation.resume(returning:)(v9, v9);
}

uint64_t sub_100AA34F4(uint64_t a1, uint64_t a2)
{
  char v2;

  sub_100AA3D7C(a1, a2, (void (*)(uint64_t, char *))sub_100AA3514);
  return v2 & 1;
}

void sub_100AA3514(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t inited;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE v43[24];
  _BYTE v44[112];
  _BYTE v45[72];
  _BYTE v46[32];
  int v47;
  char v48;

  v3 = v1;
  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (uint64_t *)((char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(void **)(v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v9 = v10;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5, v7);
  v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v9, v5);
  if ((v10 & 1) == 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  v12 = sub_100A94568();
  if (v2)
    return;
  if (!v12 || (v13 = sub_100AF48BC(v12)) == 0)
  {
    if (qword_1013DD858 == -1)
    {
LABEL_15:
      swift_beginAccess(&static OS_os_log.boardStore, v46, 0, 0);
      v31 = (void *)static OS_os_log.boardStore;
      v32 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      inited = swift_initStackObject(v32, v45);
      *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
      v34 = v31;
      v35 = UUID.uuidString.getter(v34);
      v37 = v36;
      *(_QWORD *)(inited + 56) = &type metadata for String;
      *(_QWORD *)(inited + 64) = sub_1004CFC2C();
      *(_QWORD *)(inited + 32) = v35;
      *(_QWORD *)(inited + 40) = v37;
      v39 = static os_log_type_t.default.getter(v38);
      sub_100A06EBC((uint64_t)v34, &_mh_execute_header, v39, "Attempted to set the connector mode enabled state on a board that does not exist or does not have associated metadata. Board identifier: %{public}@", 147, 2, inited);
      swift_setDeallocating(inited);
      v40 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(inited + 32, 1, v40);

      return;
    }
LABEL_18:
    swift_once(&qword_1013DD858, sub_100A05554);
    goto LABEL_15;
  }
  v42 = v13;
  if (qword_1013DD858 != -1)
    swift_once(&qword_1013DD858, sub_100A05554);
  swift_beginAccess(&static OS_os_log.boardStore, v46, 0, 0);
  v14 = (void *)static OS_os_log.boardStore;
  v15 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  v16 = swift_initStackObject(v15, v44);
  v17 = (_QWORD *)v16;
  *(_OWORD *)(v16 + 16) = xmmword_100EF5A10;
  v47 = a1 & 1;
  if ((a1 & 1) != 0)
    v18 = 1702195828;
  else
    v18 = 0x65736C6166;
  if ((a1 & 1) != 0)
    v19 = 0xE400000000000000;
  else
    v19 = 0xE500000000000000;
  *(_QWORD *)(v16 + 56) = &type metadata for String;
  v20 = sub_1004CFC2C();
  v17[8] = v20;
  v17[4] = v18;
  v17[5] = v19;
  v21 = v14;
  v22 = UUID.uuidString.getter(v21);
  v17[12] = &type metadata for String;
  v17[13] = v20;
  v17[9] = v22;
  v17[10] = v23;
  v25 = static os_log_type_t.default.getter(v24);
  sub_100A06EBC((uint64_t)v21, &_mh_execute_header, v25, "Set connector mode enabled to [%{public}@] for board identifier: %{public}@", 75, 2, (uint64_t)v17);
  swift_setDeallocating(v17);
  v26 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(v17 + 4, 2, v26);

  v27 = v42;
  swift_beginAccess(v42 + OBJC_IVAR____TtC8Freeform24CRLUserBoardMetadataData_crdtData, v43, 33, 0);
  v48 = v47;
  type metadata accessor for CRLUserBoardMetadataCRDTData(0);
  v28 = sub_1004B804C((uint64_t *)&unk_1013F5590);
  CRRegister.wrappedValue.setter(&v48, v28, v29);
  swift_endAccess(v43);
  v30 = sub_100A93A98(v27, 0, 0, 0xF000000000000000, 0);
  swift_release(v27);
  swift_release(v30);
}

double sub_100AA38EC(uint64_t a1, char *a2, uint64_t a3)
{
  return sub_100AB374C(a1, a2, a3, (uint64_t)&unk_101292B00, (uint64_t)sub_100AFFCFC, (uint64_t)&unk_101292B18);
}

uint64_t sub_100AA3908(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD v11[37];

  v4 = type metadata accessor for CRLBoardIdentifierAndValue(0);
  v11[7] = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v11[6] = (char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v11[5] = (char *)v11 - v7;
  swift_bridgeObjectRetain(a2);
  v8 = a1;
  sub_1004E6B40(v8, a2, (uint64_t)v8);
  swift_bridgeObjectRelease(a2);

  v9 = sub_1004B804C(&qword_1013EB680);
  return CheckedContinuation.resume(returning:)(v9, v9);
}

uint64_t sub_100AA3D5C(uint64_t a1, uint64_t a2)
{
  char v2;

  sub_100AA3D7C(a1, a2, (void (*)(uint64_t, char *))sub_100AA3FEC);
  return v2 & 1;
}

void sub_100AA3D7C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, char *))
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, char *);
  uint64_t v28;

  v27 = a3;
  v5 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CRLBoardIdentifierAndValue(0);
  v25 = *(_QWORD *)(v8 - 8);
  v26 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 + 56);
  v23 = a1 + 56;
  v12 = 1 << *(_BYTE *)(a1 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & v11;
  v24 = (unint64_t)(v12 + 63) >> 6;
  v28 = a1;
  swift_bridgeObjectRetain(a1);
  v15 = 0;
  while (v14)
  {
    v16 = __clz(__rbit64(v14));
    v14 &= v14 - 1;
    v17 = v16 | (v15 << 6);
LABEL_5:
    sub_1004B8460(*(_QWORD *)(v28 + 48) + *(_QWORD *)(v25 + 72) * v17, (uint64_t)v10, type metadata accessor for CRLBoardIdentifierAndValue);
    v18 = v10[*(int *)(v26 + 20)];
    sub_1004B8460((uint64_t)v10, (uint64_t)v7, type metadata accessor for CRLBoardIdentifier);
    sub_1004B84A4((uint64_t)v10, type metadata accessor for CRLBoardIdentifierAndValue);
    v27(v18, v7);
    sub_1004B84A4((uint64_t)v7, type metadata accessor for CRLBoardIdentifier);
    if (v3)
      goto LABEL_22;
  }
  if (__OFADD__(v15++, 1))
  {
    __break(1u);
    goto LABEL_24;
  }
  if (v15 >= v24)
    goto LABEL_22;
  v20 = *(_QWORD *)(v23 + 8 * v15);
  if (v20)
  {
LABEL_17:
    v14 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v15 << 6);
    goto LABEL_5;
  }
  v21 = v15 + 1;
  if (v15 + 1 >= v24)
    goto LABEL_22;
  v20 = *(_QWORD *)(v23 + 8 * v21);
  if (v20)
    goto LABEL_16;
  v21 = v15 + 2;
  if (v15 + 2 >= v24)
    goto LABEL_22;
  v20 = *(_QWORD *)(v23 + 8 * v21);
  if (v20)
    goto LABEL_16;
  v21 = v15 + 3;
  if (v15 + 3 >= v24)
  {
LABEL_22:
    swift_release(v28);
    return;
  }
  v20 = *(_QWORD *)(v23 + 8 * v21);
  if (v20)
  {
LABEL_16:
    v15 = v21;
    goto LABEL_17;
  }
  while (1)
  {
    v15 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v15 >= v24)
      goto LABEL_22;
    v20 = *(_QWORD *)(v23 + 8 * v15);
    ++v21;
    if (v20)
      goto LABEL_17;
  }
LABEL_24:
  __break(1u);
}

void sub_100AA3FEC(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t inited;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE v43[24];
  _BYTE v44[112];
  _BYTE v45[72];
  _BYTE v46[32];
  int v47;
  char v48;

  v3 = v1;
  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (uint64_t *)((char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(void **)(v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v9 = v10;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5, v7);
  v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v9, v5);
  if ((v10 & 1) == 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  v12 = sub_100A94568();
  if (v2)
    return;
  if (!v12 || (v13 = sub_100AF48BC(v12)) == 0)
  {
    if (qword_1013DD858 == -1)
    {
LABEL_15:
      swift_beginAccess(&static OS_os_log.boardStore, v46, 0, 0);
      v31 = (void *)static OS_os_log.boardStore;
      v32 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      inited = swift_initStackObject(v32, v45);
      *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
      v34 = v31;
      v35 = UUID.uuidString.getter(v34);
      v37 = v36;
      *(_QWORD *)(inited + 56) = &type metadata for String;
      *(_QWORD *)(inited + 64) = sub_1004CFC2C();
      *(_QWORD *)(inited + 32) = v35;
      *(_QWORD *)(inited + 40) = v37;
      v39 = static os_log_type_t.default.getter(v38);
      sub_100A06EBC((uint64_t)v34, &_mh_execute_header, v39, "Attempted to set the scenes navigator open state on a board that does not exist or does not have associated metadata. Board identifier: %{public}@", 146, 2, inited);
      swift_setDeallocating(inited);
      v40 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(inited + 32, 1, v40);

      return;
    }
LABEL_18:
    swift_once(&qword_1013DD858, sub_100A05554);
    goto LABEL_15;
  }
  v42 = v13;
  if (qword_1013DD858 != -1)
    swift_once(&qword_1013DD858, sub_100A05554);
  swift_beginAccess(&static OS_os_log.boardStore, v46, 0, 0);
  v14 = (void *)static OS_os_log.boardStore;
  v15 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  v16 = swift_initStackObject(v15, v44);
  v17 = (_QWORD *)v16;
  *(_OWORD *)(v16 + 16) = xmmword_100EF5A10;
  v47 = a1 & 1;
  if ((a1 & 1) != 0)
    v18 = 1702195828;
  else
    v18 = 0x65736C6166;
  if ((a1 & 1) != 0)
    v19 = 0xE400000000000000;
  else
    v19 = 0xE500000000000000;
  *(_QWORD *)(v16 + 56) = &type metadata for String;
  v20 = sub_1004CFC2C();
  v17[8] = v20;
  v17[4] = v18;
  v17[5] = v19;
  v21 = v14;
  v22 = UUID.uuidString.getter(v21);
  v17[12] = &type metadata for String;
  v17[13] = v20;
  v17[9] = v22;
  v17[10] = v23;
  v25 = static os_log_type_t.default.getter(v24);
  sub_100A06EBC((uint64_t)v21, &_mh_execute_header, v25, "Set scenes navigator open to [%{public}@] for board identifier: %{public}@", 74, 2, (uint64_t)v17);
  swift_setDeallocating(v17);
  v26 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(v17 + 4, 2, v26);

  v27 = v42;
  swift_beginAccess(v42 + OBJC_IVAR____TtC8Freeform24CRLUserBoardMetadataData_crdtData, v43, 33, 0);
  v48 = v47;
  type metadata accessor for CRLUserBoardMetadataCRDTData(0);
  v28 = sub_1004B804C((uint64_t *)&unk_1013F5590);
  CRRegister.wrappedValue.setter(&v48, v28, v29);
  swift_endAccess(v43);
  v30 = sub_100A93A98(v27, 0, 0, 0xF000000000000000, 0);
  swift_release(v27);
  swift_release(v30);
}

double sub_100AA43C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  char *v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double result;
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD aBlock[5];
  uint64_t v34;

  v28[0] = a2;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v31 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v29 = *(_QWORD *)(v9 - 8);
  v30 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CRLBoardIdentifier(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12);
  v15 = (char *)v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28[1] = *(_QWORD *)&v3[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_readQueue];
  sub_1004B8460(a1, (uint64_t)v15, type metadata accessor for CRLBoardIdentifier);
  v16 = *(unsigned __int8 *)(v13 + 80);
  v17 = (v16 + 24) & ~v16;
  v18 = (v14 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = swift_allocObject(&unk_101292628, v18 + 16, v16 | 7);
  *(_QWORD *)(v19 + 16) = v3;
  sub_1004B84E0((uint64_t)v15, v19 + v17, type metadata accessor for CRLBoardIdentifier);
  v20 = (_QWORD *)(v19 + v18);
  *v20 = v28[0];
  v20[1] = a3;
  aBlock[4] = sub_100AFEF00;
  v34 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(_QWORD *)"";
  aBlock[2] = sub_1005D2FC0;
  aBlock[3] = &unk_101292640;
  v21 = _Block_copy(aBlock);
  v22 = v3;
  v23 = swift_retain(a3);
  static DispatchQoS.unspecified.getter(v23);
  v32 = _swiftEmptyArrayStorage;
  v24 = sub_1004B7878((unint64_t *)&qword_1013E1D20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v25 = sub_1004B804C((uint64_t *)&unk_1013DFBF0);
  v26 = sub_1004CBA30((unint64_t *)&qword_1013E1D30, (uint64_t *)&unk_1013DFBF0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v32, v25, v26, v6, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v8, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v11, v30);
  *(_QWORD *)&result = swift_release(v34).n128_u64[0];
  return result;
}

void sub_100AA464C(uint64_t a1, uint64_t a2, void (*a3)(void *, _QWORD))
{
  void *v4;
  id v5;

  v4 = (void *)sub_100AA4814();
  v5 = v4;
  a3(v4, 0);

}

uint64_t sub_100AA4814()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  void (*v9)(_QWORD *, uint64_t, uint64_t);
  id v10;
  void (*v11)(_QWORD *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t inited;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  id v35;
  void (*v36)(_QWORD *, uint64_t);
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _BYTE *v40;
  unint64_t v41;
  void *v42;
  id v43;
  _QWORD *v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  void *v49;
  id v50;
  __n128 v51;
  void *v52;
  id v53;
  char v54;
  sqlite3_stmt *v55;
  id v56;
  _BYTE *v57;
  unint64_t v58;
  uint64_t v59;
  void (*v60)(_QWORD *, uint64_t);
  _BYTE v61[8];
  uint64_t v62;
  uint64_t v63;
  _BYTE v64[8];
  _BYTE v65[48];
  _BYTE v66[72];
  uint64_t v67;
  unint64_t v68;
  _BYTE v69[16];

  v2 = v0;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (id *)((char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v6 = v7;
  v8 = enum case for DispatchPredicate.onQueue(_:);
  v9 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v4 + 104);
  v9(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  v10 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  v11 = *(void (**)(_QWORD *, uint64_t))(v4 + 8);
  v11(v6, v3);
  if ((v7 & 1) == 0)
  {
    __break(1u);
    goto LABEL_25;
  }
  v60 = v11;
  v67 = 0;
  v68 = 0xE000000000000000;
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease(v68);
  v12 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v13 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v13, v69);
  swift_retain(v12);
  v15 = sub_1006B77CC(v14, 0xD00000000000003CLL, 0x8000000100FEF710);
  if (v1)
  {
    swift_release(v12);
    if (qword_1013DD858 == -1)
    {
LABEL_5:
      swift_beginAccess(&static OS_os_log.boardStore, &v67, 0, 0);
      v19 = (void *)static OS_os_log.boardStore;
      v20 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      inited = swift_initStackObject(v20, v66);
      *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
      swift_getErrorValue(v1, v64, v61);
      v22 = v62;
      v23 = v63;
      v24 = v19;
      v25 = Error.localizedDescription.getter(v22, v23);
      v27 = v26;
      *(_QWORD *)(inited + 56) = &type metadata for String;
      *(_QWORD *)(inited + 64) = sub_1004CFC2C();
      *(_QWORD *)(inited + 32) = v25;
      *(_QWORD *)(inited + 40) = v27;
      v28 = static os_log_type_t.error.getter();
      sub_100A06EBC((uint64_t)v24, &_mh_execute_header, v28, "Failed to fetch a ckShareData from board record with error %@", 61, 2, inited);
      swift_setDeallocating(inited);
      v29 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(inited + 32, 1, v29);

      swift_willThrow(v30);
      return v25;
    }
LABEL_25:
    swift_once(&qword_1013DD858, sub_100A05554);
    goto LABEL_5;
  }
  v16 = v15;
  swift_release(v12);
  v17 = sub_10067BA88();
  v32 = v17;
  v33 = v18;
  sub_1006B5E80(v17, v18);
  sub_1004BBBC8(v32, v33);
  v34 = *(void **)(*(_QWORD *)(v16 + 16) + 32);
  *v6 = v34;
  v9(v6, v8, v3);
  v35 = v34;
  LOBYTE(v34) = _dispatchPreconditionTest(_:)(v6);
  v36 = v60;
  v60(v6, v3);
  if ((v34 & 1) == 0)
  {
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
  }
  v37 = type metadata accessor for SQLiteRowIterator();
  v38 = (_QWORD *)swift_initStackObject(v37, v65);
  v38[4] = 0;
  v38[5] = 1;
  v38[2] = v16;
  v38[3] = 0;
  swift_retain(v16);
  sub_1006B6B04();
  if (v39)
  {
    v59 = v39;
    v40 = sub_1006B44FC(0, v39);
    if (v41 >> 60 == 15)
    {
      v25 = 0;
    }
    else
    {
      v58 = v41;
      v45 = v40;
      v57 = v40;
      v56 = (id)sub_1004B8930(0, &qword_1013FF470, NSKeyedUnarchiver_ptr);
      v46 = sub_1004B8930(0, &qword_1013E0240, CKShare_ptr);
      v47 = (uint64_t)v45;
      v48 = v58;
      sub_1004BE310(v47, v58);
      v49 = (void *)static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v46, v57, v48, v46);
      v25 = (uint64_t)v49;
      if (v49)
      {
        v56 = v49;
        v50 = objc_msgSend(v56, "containerID");

        if (!v50)
        {
          sub_100757E04(&_mh_execute_header, (uint64_t)"crl_checkForNilContainerID()", 28, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Sync/CRLCloudKitShareNameHelper.swift", 91, 2, 165, "The containerID of a share should never be nil. This can prevent fast sync from starting.", 89, 2u, (uint64_t)_swiftEmptyArrayStorage);
          sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"crl_checkForNilContainerID()", 28, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Sync/CRLCloudKitShareNameHelper.swift", 91, 2u, 165, (uint64_t)"The containerID of a share should never be nil. This can prevent fast sync from starting.", 89, 2u);
          objc_msgSend((id)objc_opt_self(CRLAssertionHandler), "logFullBacktrace");
        }
        sub_1004BE2FC((uint64_t)v57, v58);

      }
      else
      {
        sub_1004BE2FC((uint64_t)v57, v58);
      }
      v36 = v60;
      sub_1004BE2FC((uint64_t)v57, v58);
    }
    swift_release(v38);
    v51 = swift_release(v59);
    v52 = *(void **)(*(_QWORD *)(v16 + 16) + 32);
    *v6 = v52;
    ((void (*)(_QWORD *, uint64_t, uint64_t, __n128))v9)(v6, v8, v3, v51);
    v53 = v52;
    v54 = _dispatchPreconditionTest(_:)(v6);
    v36(v6, v3);
    if ((v54 & 1) != 0)
    {
      v44 = (_QWORD *)(v16 + 24);
      swift_beginAccess(v16 + 24, &v67, 1, 0);
      goto LABEL_21;
    }
    goto LABEL_27;
  }
  swift_release(v16);
  swift_setDeallocating(v38);
  sub_1006B7DA4(v38[3], v38[4], v38[5]);
  v42 = *(void **)(*(_QWORD *)(v16 + 16) + 32);
  *v6 = v42;
  v9(v6, v8, v3);
  v43 = v42;
  LOBYTE(v42) = _dispatchPreconditionTest(_:)(v6);
  v36(v6, v3);
  if ((v42 & 1) == 0)
    goto LABEL_28;
  v44 = (_QWORD *)(v16 + 24);
  swift_beginAccess(v16 + 24, &v67, 1, 0);
  v25 = 0;
LABEL_21:
  v55 = *(sqlite3_stmt **)(v16 + 24);
  if (v55)
  {
    sqlite3_finalize(v55);
    *v44 = 0;
  }
  swift_release(v16);
  return v25;
}

double sub_100AA4FA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100ABF0AC(a1, a2, a3, &qword_101405338, (uint64_t)&unk_101292600, (uint64_t)sub_100AFEC90, (void (*)(uint64_t, uint64_t, uint64_t))sub_100AA43C4);
}

double sub_100AA4FCC(uint64_t a1, void *a2, int a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t (*v17)(_QWORD);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  id v27;
  char *v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double result;
  uint64_t v34;
  void *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD aBlock[5];
  uint64_t v45;

  v37 = a4;
  v38 = a5;
  v36 = a3;
  v35 = a2;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v42 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v40 = *(_QWORD *)(v10 - 8);
  v41 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CRLBoardIdentifier(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v13);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = *(_QWORD *)&v5[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue];
  sub_1004B8460(a1, (uint64_t)v16, v17);
  v18 = *(unsigned __int8 *)(v14 + 80);
  v19 = (v18 + 24) & ~v18;
  v20 = v19 + v15;
  v21 = ((v20 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  v22 = swift_allocObject(&unk_101292560, v21 + 16, v18 | 7);
  *(_QWORD *)(v22 + 16) = v5;
  sub_1004B84E0((uint64_t)v16, v22 + v19, type metadata accessor for CRLBoardIdentifier);
  *(_BYTE *)(v22 + v20) = v36;
  v23 = v35;
  *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFFF8) + v22 + 8) = v35;
  v24 = (_QWORD *)(v22 + v21);
  v25 = v38;
  *v24 = v37;
  v24[1] = v25;
  aBlock[4] = sub_100AFEDA8;
  v45 = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(_QWORD *)"";
  aBlock[2] = sub_1005D2FC0;
  aBlock[3] = &unk_101292578;
  v26 = _Block_copy(aBlock);
  v27 = v23;
  swift_retain(v25);
  v28 = v5;
  static DispatchQoS.unspecified.getter(v29);
  v43 = _swiftEmptyArrayStorage;
  v30 = sub_1004B7878((unint64_t *)&qword_1013E1D20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v31 = sub_1004B804C((uint64_t *)&unk_1013DFBF0);
  v32 = sub_1004CBA30((unint64_t *)&qword_1013E1D30, (uint64_t *)&unk_1013DFBF0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v43, v31, v32, v7, v30);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v9, v26);
  _Block_release(v26);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v12, v41);
  *(_QWORD *)&result = swift_release(v45).n128_u64[0];
  return result;
}

uint64_t sub_100AA5274(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, _QWORD))
{
  sub_10080EB50(sub_100AFEE00);
  sub_100A75C10(a2, (uint64_t)&unk_1012925B0, (uint64_t)sub_100AFEE28, (uint64_t)&unk_1012925C8);
  return a5(a4, 0);
}

uint64_t sub_100AA548C(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  uint64_t v4;
  uint64_t v8;
  void *v9;
  char v10;
  id v11;
  id v12;
  char v13;

  v8 = sub_100AA4814();
  if (!v4)
  {
    v9 = (void *)v8;
    v10 = 0;
    if ((a3 & 1) != 0 && a4)
    {
      if (v8)
      {
        sub_1004B8930(0, &qword_1013E0240, CKShare_ptr);
        v11 = a4;
        v12 = v9;
        v13 = static NSObject.== infix(_:_:)(v12, v11);

        v10 = v13 ^ 1;
      }
      else
      {
        v10 = 1;
      }
    }
    sub_100AA5568(a2, a4, v10 & 1);

  }
  return 1;
}

uint64_t sub_100AA5568(uint64_t a1, void *a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  id v14;
  uint64_t result;
  id v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  _BYTE v26[24];

  v5 = v3;
  v9 = type metadata accessor for DispatchPredicate(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v26[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = *(void **)(v5 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v12 = v13;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)(v12);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v10 + 8))(v12, v9);
  if ((v13 & 1) != 0)
  {
    if (a2)
    {
      v16 = a2;
      v17 = objc_msgSend(v16, "containerID");

      if (!v17)
      {
        sub_100757E04(&_mh_execute_header, (uint64_t)"crl_checkForNilContainerID()", 28, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Sync/CRLCloudKitShareNameHelper.swift", 91, 2, 165, "The containerID of a share should never be nil. This can prevent fast sync from starting.", 89, 2u, (uint64_t)_swiftEmptyArrayStorage);
        sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"crl_checkForNilContainerID()", 28, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Sync/CRLCloudKitShareNameHelper.swift", 91, 2u, 165, (uint64_t)"The containerID of a share should never be nil. This can prevent fast sync from starting.", 89, 2u);
        objc_msgSend((id)objc_opt_self(CRLAssertionHandler), "logFullBacktrace");
      }
      v18 = sub_100B39284();
      v20 = v19;

    }
    else
    {
      v18 = 0;
      v20 = 0xF000000000000000;
    }
    sub_100A8EDF8(a1, v18, v20, a3 & 1);
    if (!v4)
    {
      v21 = (uint64_t *)(v5 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_transientSyncExclusions);
      swift_beginAccess(v5 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_transientSyncExclusions, v26, 33, 0);
      v22 = *v21;
      if (*(_QWORD *)(v22 + 16))
      {
        v23 = sub_100843264(a1);
        if ((v24 & 1) != 0)
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v22 + 56) + 8 * v23) + 17) = 0;
      }
      swift_endAccess(v26);
    }
    return sub_1004BE2FC(v18, v20);
  }
  else
  {
    __break(1u);
  }
  return result;
}

double sub_100AA57C8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double result;
  uint64_t v16;

  v9 = sub_1004B804C(&qword_101405338);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
  v12 = *(unsigned __int8 *)(v10 + 80);
  v13 = (v12 + 16) & ~v12;
  v14 = swift_allocObject(&unk_101292538, v13 + v11, v12 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v14 + v13, (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  sub_100AA4FCC(a3, a4, a5, (uint64_t)sub_100AFEC90, v14);
  *(_QWORD *)&result = swift_release(v14).n128_u64[0];
  return result;
}

uint64_t sub_100AA58C8(void *a1, char a2)
{
  id v2;
  uint64_t v3;
  uint64_t v5;
  void *v6;

  v6 = a1;
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    v5 = sub_1004B804C(&qword_101405338);
    return CheckedContinuation.resume(throwing:)(&v6, v5);
  }
  else
  {
    v2 = a1;
    v3 = sub_1004B804C(&qword_101405338);
    return CheckedContinuation.resume(returning:)(&v6, v3);
  }
}

double sub_100AA5934(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  char *v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double result;
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD aBlock[5];
  uint64_t v34;

  v28[0] = a2;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v31 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v29 = *(_QWORD *)(v9 - 8);
  v30 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CRLBoardDataStoreChangeSet(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12);
  v15 = (char *)v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28[1] = *(_QWORD *)&v3[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue];
  sub_1004B8460(a1, (uint64_t)v15, type metadata accessor for CRLBoardDataStoreChangeSet);
  v16 = *(unsigned __int8 *)(v13 + 80);
  v17 = (v16 + 24) & ~v16;
  v18 = (v14 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = swift_allocObject(&unk_101292808, v18 + 16, v16 | 7);
  *(_QWORD *)(v19 + 16) = v3;
  sub_1004B84E0((uint64_t)v15, v19 + v17, type metadata accessor for CRLBoardDataStoreChangeSet);
  v20 = (_QWORD *)(v19 + v18);
  *v20 = v28[0];
  v20[1] = a3;
  aBlock[4] = sub_100AFF434;
  v34 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(_QWORD *)"";
  aBlock[2] = sub_1005D2FC0;
  aBlock[3] = &unk_101292820;
  v21 = _Block_copy(aBlock);
  v22 = v3;
  v23 = swift_retain(a3);
  static DispatchQoS.unspecified.getter(v23);
  v32 = _swiftEmptyArrayStorage;
  v24 = sub_1004B7878((unint64_t *)&qword_1013E1D20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v25 = sub_1004B804C((uint64_t *)&unk_1013DFBF0);
  v26 = sub_1004CBA30((unint64_t *)&qword_1013E1D30, (uint64_t *)&unk_1013DFBF0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v32, v25, v26, v6, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v8, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v11, v30);
  *(_QWORD *)&result = swift_release(v34).n128_u64[0];
  return result;
}

uint64_t sub_100AA5BBC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  sub_10080EB50(sub_100AFF448);
  sub_100AA7350();
  return a3(0);
}

void sub_100AA5DC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  void *v23;
  id v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unsigned int v33;
  __n128 v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(__n128);
  __n128 v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t inited;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __n128 v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  _BOOL4 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __n128 v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void (*v105)(_BYTE *, _BYTE *);
  uint64_t v106;
  __n128 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void (*v124)(__n128);
  __n128 v125;
  char v126;
  void (*v127)(uint64_t, uint64_t);
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  __n128 v137;
  void (*v138)(_QWORD *, _QWORD, uint64_t);
  uint64_t v139;
  uint64_t v140;
  void (*i)(_QWORD *, _QWORD, uint64_t);
  uint64_t v142;
  _QWORD *v143;
  __n128 v144;
  _BYTE *v145;
  uint64_t v146;
  uint64_t v147;
  BOOL v148;
  _BYTE *v149;
  sqlite3_int64 v150;
  char v151;
  uint64_t v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  void (*v160)(_QWORD *, _QWORD, uint64_t);
  uint64_t v161;
  uint64_t v162;
  __n128 v163;
  uint64_t v164;
  void *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _BYTE *v169;
  double v170;
  __n128 v171;
  void (*v172)(_BYTE *, uint64_t);
  __n128 v173;
  _BYTE *v174;
  _BYTE *v175;
  __n128 v176;
  void (*v177)(_BYTE *, _BYTE *, __n128);
  __n128 v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  void (*v187)(_QWORD *, _QWORD, uint64_t);
  void *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  void *v198;
  unint64_t v199;
  __n128 v200;
  _BYTE v201[4];
  int v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  _BYTE *v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t v212;
  int *v213;
  _BYTE *v214;
  uint64_t v215;
  __int128 v216;
  __int128 v217;
  _BYTE *v218;
  uint64_t v219;
  _BYTE *v220;
  uint64_t v221;
  _BOOL4 v222;
  _BYTE *v223;
  void (*v224)(_QWORD *, _QWORD, uint64_t);
  uint64_t v225;
  uint64_t v226;
  _BYTE *v227;
  __int128 v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233[3];
  uint64_t v234[3];
  _QWORD *v235;
  void *v236;
  uint64_t v237;

  v208 = sub_1004B804C(&qword_1014053F8);
  __chkstk_darwin(v208);
  v209 = &v201[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v226 = type metadata accessor for UUID(0);
  v229 = *(_QWORD *)(v226 - 8);
  v4 = __chkstk_darwin(v226);
  v214 = &v201[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = __chkstk_darwin(v4);
  v220 = &v201[-v7];
  v8 = __chkstk_darwin(v6);
  v221 = (uint64_t)&v201[-v9];
  v10 = __chkstk_darwin(v8);
  v227 = &v201[-v11];
  v12 = __chkstk_darwin(v10);
  v223 = &v201[-v13];
  __chkstk_darwin(v12);
  v15 = &v201[-v14];
  v16 = type metadata accessor for CRLBoardIdentifier(0);
  v205 = *(_QWORD *)(v16 - 8);
  v206 = v16;
  __chkstk_darwin(v16);
  v18 = &v201[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = type metadata accessor for DispatchPredicate(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = &v201[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v225 = v1;
  v23 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v22 = v23;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v20 + 104))(v22, enum case for DispatchPredicate.onQueue(_:), v19);
  v24 = v23;
  v25 = _dispatchPreconditionTest(_:)(v22);
  (*(void (**)(_QWORD *, uint64_t))(v20 + 8))(v22, v19);
  if ((v25 & 1) == 0)
    goto LABEL_83;
  v26 = (int *)type metadata accessor for CRLBoardDataStoreChangeSet(0);
  sub_1004B8460(a1 + v26[5], (uint64_t)v18, type metadata accessor for CRLBoardIdentifier);
  v27 = a1 + v26[6];
  v28 = v226;
  v219 = *(_QWORD *)(v229 + 16);
  ((void (*)(_BYTE *, uint64_t, uint64_t))v219)(v15, v27, v226);
  v213 = v26;
  v29 = v26[7];
  v215 = a1;
  v25 = *(_QWORD *)(a1 + v29);
  if (v25)
  {
    swift_retain(*(_QWORD *)(a1 + v29));
    v30 = v228;
    sub_100A8F258(v31, 0, 0, 0xF000000000000000, 1, 0);
    *(_QWORD *)&v228 = v30;
    if (v30)
    {
      v34 = swift_release(v25);
      (*(void (**)(_BYTE *, uint64_t, __n128))(v229 + 8))(v15, v28, v34);
      sub_1004B84A4((uint64_t)v18, type metadata accessor for CRLBoardIdentifier);
      return;
    }
    v35 = v32;
    v36 = v33;
    swift_release(v25);
    v25 = (v36 >> 8) & 1;
    swift_release(v35);
  }
  v37 = v215;
  v38 = *(_QWORD *)(v215 + v213[8]);
  v237 = v38;
  v39 = *(_QWORD *)(v215 + v213[13]);
  v224 = (void (*)(_QWORD *, _QWORD, uint64_t))v18;
  swift_bridgeObjectRetain(v38);
  if (v39)
  {
    swift_bridgeObjectRetain(v39);
    sub_100620DD4(v40);
  }
  v218 = v15;
  a1 = *(_QWORD *)(v37 + v213[14]);
  if ((unint64_t)a1 >> 62)
  {
LABEL_84:
    if (a1 < 0)
      v108 = a1;
    else
      v108 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v41 = _CocoaArrayWrapper.endIndex.getter(v108);
  }
  else
  {
    v41 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(*(_QWORD *)(v37 + v213[14]));
  }
  v42 = (uint64_t)v223;
  v202 = v25;
  if (v41)
  {
    v235 = _swiftEmptyArrayStorage;
    sub_100600724(0, v41 & ~(v41 >> 63), 0);
    if (v41 < 0)
      goto LABEL_149;
    v25 = 0;
    v43 = v235;
    v223 = (_BYTE *)(a1 & 0xC000000000000001);
    v44 = a1;
    do
    {
      if (v223)
      {
        v45 = specialized _ArrayBuffer._getElementSlowPath(_:)(v25, a1);
      }
      else
      {
        v45 = *(_QWORD *)(a1 + 8 * v25 + 32);
        v46 = swift_retain(v45);
      }
      (*(void (**)(__n128))(*(_QWORD *)v45 + 256))(v46);
      swift_release(v45);
      v235 = v43;
      v48 = v43[2];
      v47 = v43[3];
      if (v48 >= v47 >> 1)
      {
        sub_100600724(v47 > 1, v48 + 1, 1);
        v43 = v235;
      }
      ++v25;
      v43[2] = v48 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v229 + 32))((unint64_t)v43+ ((*(unsigned __int8 *)(v229 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v229 + 80))+ *(_QWORD *)(v229 + 72) * v48, v42, v226);
      a1 = v44;
    }
    while (v41 != v25);
    swift_bridgeObjectRelease(v44);
  }
  else
  {
    swift_bridgeObjectRelease(a1);
    v43 = _swiftEmptyArrayStorage;
  }
  v41 = v228;
  v223 = (_BYTE *)sub_100AF7994((uint64_t)v43);
  swift_bridgeObjectRelease(v43);
  swift_bridgeObjectRetain(a1);
  sub_100620DD4(v49);
  v236 = &_swiftEmptySetSingleton;
  v50 = v237;
  v42 = sub_100A68270(v237, (void (*)(char **__return_ptr, void **, __n128))sub_100AA7690, 0, (void (*)(char **))sub_100AA769C, 0, (void (*)(uint64_t *))sub_100AA76C4, 0);
  swift_bridgeObjectRelease(v50);
  if ((unint64_t)v42 >> 62)
  {
    if (v42 < 0)
      v109 = v42;
    else
      v109 = v42 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v42);
    v51 = _CocoaArrayWrapper.endIndex.getter(v109);
    swift_bridgeObjectRelease(v42);
    v18 = (_BYTE *)v226;
    if (v51)
    {
LABEL_23:
      v52 = 0;
      v222 = 0;
      v211 = v42 & 0xC000000000000001;
      v203 = v42 + 32;
      v204 = v42 & 0xFFFFFFFFFFFFFF8;
      v217 = xmmword_100EF5E40;
      v210 = v42;
      v207 = v51;
      while (1)
      {
        if (v211)
        {
          v25 = v52;
          *(_QWORD *)&v216 = specialized _ArrayBuffer._getElementSlowPath(_:)(v52, v42);
          v53 = v52 + 1;
          if (__OFADD__(v25, 1))
            goto LABEL_82;
        }
        else
        {
          if (v52 >= *(_QWORD *)(v204 + 16))
            goto LABEL_148;
          *(_QWORD *)&v216 = *(_QWORD *)(v203 + 8 * v52);
          swift_retain(v216);
          v54 = __OFADD__(v52, 1);
          v53 = v52 + 1;
          if (v54)
            goto LABEL_82;
        }
        *(_QWORD *)&v228 = v41;
        v212 = v53;
        v55 = *(_QWORD *)(v216 + 16);
        v234[0] = (uint64_t)_swiftEmptyArrayStorage;
        v56 = swift_retain_n(v55, 2);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v56);
        v58 = *(_QWORD *)((v234[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
        v57 = *(_QWORD *)((v234[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v58 >= v57 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v57 > 1, v58 + 1, 1);
        v59 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v58, v55);
        specialized Array._endMutation()(v59);
        v60 = v234[0];
        if (!((unint64_t)v234[0] >> 62))
        {
          if (*(_QWORD *)((v234[0] & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_35;
          goto LABEL_24;
        }
        v103 = v234[0] < 0 ? v234[0] : v234[0] & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v234[0]);
        v104 = _CocoaArrayWrapper.endIndex.getter(v103);
        swift_bridgeObjectRelease(v60);
        if (v104)
          break;
LABEL_24:
        swift_release(v216);
        swift_release(v55);
        swift_bridgeObjectRelease(v60);
        v52 = v212;
        v42 = v210;
        v41 = v228;
        if (v212 == v207)
          goto LABEL_93;
      }
      while (1)
      {
LABEL_35:
        v61 = (unint64_t)v60 >> 62;
        if ((unint64_t)v60 >> 62)
        {
          if (v60 < 0)
            v97 = v60;
          else
            v97 = v60 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v60);
          v25 = _CocoaArrayWrapper.endIndex.getter(v97);
          swift_bridgeObjectRelease(v60);
          if (!v25)
          {
LABEL_78:
            __break(1u);
LABEL_79:
            __break(1u);
LABEL_80:
            __break(1u);
LABEL_81:
            __break(1u);
LABEL_82:
            __break(1u);
LABEL_83:
            __break(1u);
            goto LABEL_84;
          }
          swift_bridgeObjectRetain(v60);
          v98 = _CocoaArrayWrapper.endIndex.getter(v97);
          swift_bridgeObjectRelease(v60);
          if (!v98)
            goto LABEL_79;
        }
        else if (!*(_QWORD *)((v60 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_78;
        }
        if ((v60 & 0xC000000000000001) != 0)
        {
          v62 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v60);
          if (!v61)
            goto LABEL_40;
        }
        else
        {
          if (!*(_QWORD *)((v60 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_80;
          v62 = *(_QWORD *)(v60 + 32);
          swift_retain(v62);
          if (!v61)
          {
LABEL_40:
            if (!*(_QWORD *)((v60 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_81;
            goto LABEL_41;
          }
        }
        if (v60 < 0)
          v99 = v60;
        else
          v99 = v60 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v60);
        v100 = _CocoaArrayWrapper.endIndex.getter(v99);
        swift_bridgeObjectRelease(v60);
        if (!v100)
          goto LABEL_81;
LABEL_41:
        sub_100CFED7C(0, 1);
        v63 = *(_QWORD *)v62;
        v64 = *(_QWORD *)(*(_QWORD *)v62 + 112);
        a1 = *(_QWORD *)(v62 + v64);
        if (a1)
        {
          v65 = *(void (**)(__n128))(*(_QWORD *)a1 + 256);
          v66 = swift_retain(*(_QWORD *)(v62 + v64));
          v67 = (uint64_t)v227;
          v65(v66);
          if ((sub_10062158C(v67, (uint64_t)v223) & 1) != 0)
          {
            if (qword_1013DD858 != -1)
              swift_once(&qword_1013DD858, sub_100A05554);
            swift_beginAccess(&static OS_os_log.boardStore, &v231, 0, 0);
            v68 = (void *)static OS_os_log.boardStore;
            v69 = sub_1004B804C((uint64_t *)&unk_1013E0180);
            inited = swift_initStackObject(v69, &v230);
            *(_OWORD *)(inited + 16) = v217;
            v25 = v68;
            v71 = UUID.uuidString.getter(v25);
            v73 = v72;
            *(_QWORD *)(inited + 56) = &type metadata for String;
            *(_QWORD *)(inited + 64) = sub_1004CFC2C();
            *(_QWORD *)(inited + 32) = v71;
            *(_QWORD *)(inited + 40) = v73;
            v75 = static os_log_type_t.default.getter(v74);
            sub_100A06EBC(v25, &_mh_execute_header, v75, "Saving a peer server synced added item %{public}@", 49, 2, inited);
            swift_setDeallocating(inited);
            v76 = sub_1004B804C(&qword_1013E0190);
            v77 = 1;
            swift_arrayDestroy(inited + 32, 1, v76);

            v18 = (_BYTE *)v226;
          }
          else
          {
            if (v222)
            {
              v78 = 1;
            }
            else
            {
              v79 = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 568))();
              v80 = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 576))();
              v81 = v228;
              sub_100A63508(v79);
              v83 = v82;
              swift_bridgeObjectRelease(v79);
              v84 = sub_100AF7994(v83);
              swift_bridgeObjectRelease(v83);
              sub_100A63508(v80);
              v86 = v85;
              *(_QWORD *)&v228 = v81;
              swift_bridgeObjectRelease(v80);
              v87 = sub_100AF7994(v86);
              swift_bridgeObjectRelease(v86);
              v88 = sub_100CA03B4(v87, v84);
              v89 = *(_QWORD *)(v88 + 16);
              swift_bridgeObjectRelease(v88);
              v78 = v89 != 0;
            }
            v222 = v78;
            v25 = (uint64_t)v220;
            ((void (*)(_BYTE *, _BYTE *, _BYTE *))v219)(v220, v227, v18);
            v90 = v221;
            sub_100AD569C(v221, v25);
            (*(void (**)(uint64_t, _BYTE *))(v229 + 8))(v90, v18);
            v77 = 0;
          }
          v91 = v228;
          sub_100A85390((_QWORD *)a1, (uint64_t)v224, v77, 0, 0xF000000000000000, 1, 2);
          *(_QWORD *)&v228 = v91;
          if (v91)
          {
            v105 = *(void (**)(_BYTE *, _BYTE *))(v229 + 8);
            v105(v227, v18);
            swift_release(a1);
            v106 = v234[0];
            swift_release(v216);
            swift_release(v55);
            swift_bridgeObjectRelease(v223);
            swift_bridgeObjectRelease(v210);
            swift_release(v62);
            v107 = swift_bridgeObjectRelease(v106);
            ((void (*)(_BYTE *, _BYTE *, __n128))v105)(v218, v18, v107);
            sub_1004B84A4((uint64_t)v224, type metadata accessor for CRLBoardIdentifier);
            swift_bridgeObjectRelease(v236);
            return;
          }
          v93 = v92;
          swift_release(a1);
          v94 = swift_release(v93);
          (*(void (**)(_BYTE *, _BYTE *, __n128))(v229 + 8))(v227, v18, v94);
          v63 = *(_QWORD *)v62;
        }
        v95 = (_QWORD *)(v62 + *(_QWORD *)(v63 + 120));
        swift_beginAccess(v95, &v235, 0, 0);
        swift_bridgeObjectRetain(*v95);
        sub_100620DE0(v96);
        swift_release(v62);
        v60 = v234[0];
        if ((unint64_t)v234[0] >> 62)
        {
          if (v234[0] < 0)
            v101 = v234[0];
          else
            v101 = v234[0] & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v234[0]);
          v102 = _CocoaArrayWrapper.endIndex.getter(v101);
          swift_bridgeObjectRelease(v60);
          if (!v102)
            goto LABEL_24;
        }
        else if (!*(_QWORD *)((v234[0] & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_24;
        }
      }
    }
  }
  else
  {
    v51 = *(_QWORD *)((v42 & 0xFFFFFFFFFFFFF8) + 0x10);
    v18 = (_BYTE *)v226;
    if (v51)
      goto LABEL_23;
  }
  v222 = 0;
LABEL_93:
  swift_bridgeObjectRelease(v223);
  swift_bridgeObjectRelease(v42);
  v110 = *(_QWORD *)(v215 + v213[9]);
  swift_bridgeObjectRetain(v110);
  v42 = sub_100A68270(v111, (void (*)(char **__return_ptr, void **, __n128))sub_100B025E0, 0, (void (*)(char **))sub_100B026B8, 0, (void (*)(uint64_t *))sub_100B026BC, 0);
  swift_bridgeObjectRelease(v110);
  if ((unint64_t)v42 >> 62)
    goto LABEL_150;
  v112 = *(_QWORD *)((v42 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v112)
  {
    v113 = 0;
    v227 = (_BYTE *)(v42 & 0xC000000000000001);
    v219 = v42 & 0xFFFFFFFFFFFFFF8;
    v220 = (_BYTE *)v112;
    *(_QWORD *)&v217 = v42 + 32;
    v223 = (_BYTE *)v42;
    v114 = v221;
    while (v227)
    {
      v115 = specialized _ArrayBuffer._getElementSlowPath(_:)(v113, v42);
      v54 = __OFADD__(v113++, 1);
      if (v54)
        goto LABEL_147;
LABEL_103:
      *(_QWORD *)&v228 = v115;
      v18 = *(_BYTE **)(v115 + 16);
      v233[0] = (uint64_t)_swiftEmptyArrayStorage;
      v116 = swift_retain_n(v18, 2);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v116);
      v118 = *(_QWORD *)((v233[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
      v117 = *(_QWORD *)((v233[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v118 >= v117 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v117 > 1, v118 + 1, 1);
      v119 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v118, v18);
      specialized Array._endMutation()(v119);
      v120 = v233[0];
      if (!((unint64_t)v233[0] >> 62))
      {
        v42 = *(_QWORD *)((v233[0] & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v42)
          goto LABEL_107;
        goto LABEL_96;
      }
      if (v233[0] < 0)
        v135 = v233[0];
      else
        v135 = v233[0] & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v233[0]);
      v42 = _CocoaArrayWrapper.endIndex.getter(v135);
      swift_bridgeObjectRelease(v120);
      if (v42)
      {
        while (1)
        {
LABEL_107:
          v25 = (unint64_t)v120 >> 62;
          if ((unint64_t)v120 >> 62)
          {
            if (v120 < 0)
              v42 = v120;
            else
              v42 = v120 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(v120);
            v132 = _CocoaArrayWrapper.endIndex.getter(v42);
            swift_bridgeObjectRelease(v120);
            if (!v132)
            {
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
              goto LABEL_147;
            }
            swift_bridgeObjectRetain(v120);
            v42 = _CocoaArrayWrapper.endIndex.getter(v42);
            swift_bridgeObjectRelease(v120);
            if (!v42)
              goto LABEL_145;
          }
          else if (!*(_QWORD *)((v120 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            goto LABEL_143;
          }
          if ((v120 & 0xC000000000000001) != 0)
          {
            v121 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v120);
            if (!v25)
              goto LABEL_112;
          }
          else
          {
            if (!*(_QWORD *)((v120 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_144;
            v121 = *(_QWORD *)(v120 + 32);
            swift_retain(v121);
            if (!v25)
            {
LABEL_112:
              v42 = *(_QWORD *)((v120 & 0xFFFFFFFFFFFFF8) + 0x10);
              if (!v42)
                goto LABEL_146;
              goto LABEL_113;
            }
          }
          if (v120 < 0)
            v133 = v120;
          else
            v133 = v120 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v120);
          v42 = _CocoaArrayWrapper.endIndex.getter(v133);
          swift_bridgeObjectRelease(v120);
          if (!v42)
            goto LABEL_146;
LABEL_113:
          sub_100CFED7C(0, 1);
          v122 = *(_QWORD *)v121;
          v123 = *(_QWORD *)(*(_QWORD *)v121 + 112);
          v25 = *(_QWORD *)(v121 + v123);
          if (v25)
          {
            v124 = *(void (**)(__n128))(*(_QWORD *)v25 + 256);
            v125 = swift_retain(*(_QWORD *)(v121 + v123));
            v124(v125);
            v126 = static UUID.== infix(_:_:)(v114);
            v127 = *(void (**)(uint64_t, uint64_t))(v229 + 8);
            v127(v114, v226);
            sub_100A85390((_QWORD *)v25, (uint64_t)v224, 0, 0, 0xF000000000000000, v126 & 1, 2);
            if (v41)
            {
              swift_release(v25);
              v136 = v233[0];
              swift_release(v228);
              swift_release(v18);
              swift_bridgeObjectRelease(v223);
              swift_release(v121);
              v137 = swift_bridgeObjectRelease(v136);
              ((void (*)(_BYTE *, uint64_t, __n128))v127)(v218, v226, v137);
LABEL_142:
              v138 = v224;
LABEL_188:
              sub_1004B84A4((uint64_t)v138, type metadata accessor for CRLBoardIdentifier);
              swift_bridgeObjectRelease(v236);
              return;
            }
            v129 = v128;
            swift_release(v25);
            swift_release(v129);
            v122 = *(_QWORD *)v121;
          }
          v130 = (_QWORD *)(v121 + *(_QWORD *)(v122 + 120));
          swift_beginAccess(v130, v234, 0, 0);
          swift_bridgeObjectRetain(*v130);
          sub_100620DE0(v131);
          swift_release(v121);
          v120 = v233[0];
          if ((unint64_t)v233[0] >> 62)
          {
            if (v233[0] < 0)
              v134 = v233[0];
            else
              v134 = v233[0] & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(v233[0]);
            v42 = _CocoaArrayWrapper.endIndex.getter(v134);
            swift_bridgeObjectRelease(v120);
            if (!v42)
              break;
          }
          else
          {
            v42 = *(_QWORD *)((v233[0] & 0xFFFFFFFFFFFFF8) + 0x10);
            if (!v42)
              break;
          }
        }
      }
LABEL_96:
      swift_release(v228);
      swift_release(v18);
      swift_bridgeObjectRelease(v120);
      v18 = (_BYTE *)v226;
      v42 = (uint64_t)v223;
      if ((_BYTE *)v113 == v220)
        goto LABEL_154;
    }
    if (v113 >= *(_QWORD *)(v219 + 16))
      goto LABEL_179;
    swift_retain(*(_QWORD *)(v217 + 8 * v113));
    v54 = __OFADD__(v113++, 1);
    if (!v54)
      goto LABEL_103;
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    if (v42 < 0)
      v139 = v42;
    else
      v139 = v42 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v42);
    v112 = _CocoaArrayWrapper.endIndex.getter(v139);
    swift_bridgeObjectRelease(v42);
  }
LABEL_154:
  swift_bridgeObjectRelease(v42);
  v25 = *(_QWORD *)(v215 + v213[10]);
  if ((unint64_t)v25 >> 62)
    goto LABEL_180;
  v140 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(*(_QWORD *)(v215 + v213[10]));
  for (i = v224; v140; i = v224)
  {
    v223 = (_BYTE *)(v25 & 0xC000000000000001);
    v221 = v213[11];
    v142 = 4;
    v216 = xmmword_100EF5A10;
    v219 = v140;
    v220 = (_BYTE *)v25;
    while (1)
    {
      if (v223)
      {
        v143 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v142 - 4, v25);
      }
      else
      {
        v143 = *(_QWORD **)(v25 + 8 * v142);
        v144 = swift_retain(v143);
      }
      v145 = v214;
      if (__OFADD__(v142 - 4, 1))
        break;
      v227 = (_BYTE *)(v142 - 3);
      v146 = (*(uint64_t (**)(__n128))(*v143 + 256))(v144);
      v147 = *(_QWORD *)(v215 + v221);
      __chkstk_darwin(v146);
      *(_QWORD *)&v201[-16] = v145;
      swift_bridgeObjectRetain(v147);
      v148 = sub_100DAFBE0((uint64_t (*)(char *))sub_10074BA14, (_BOOL8)&v201[-32], v147);
      swift_bridgeObjectRelease(v147);
      if (v148)
      {
        v149 = v209;
        v150 = sub_100A84CA0((uint64_t)v209, (uint64_t)v145, v224);
        if (v41)
        {
          v176 = swift_release(v143);
          v177 = *(void (**)(_BYTE *, _BYTE *, __n128))(v229 + 8);
          v177(v214, v18, v176);
          v178 = swift_bridgeObjectRelease(v220);
          v177(v218, v18, v178);
          goto LABEL_142;
        }
        v152 = *(int *)(v208 + 64);
        *(_QWORD *)&v149[*(int *)(v208 + 48)] = v150;
        v149[v152] = v151 & 1;
        if ((v151 & 1) != 0)
        {
          i = v224;
        }
        else
        {
          *(_QWORD *)&v228 = 0;
          if (qword_1013DD858 != -1)
            swift_once(&qword_1013DD858, sub_100A05554);
          swift_beginAccess(&static OS_os_log.boardStore, v233, 0, 0);
          v153 = (void *)static OS_os_log.boardStore;
          v154 = sub_1004B804C((uint64_t *)&unk_1013E0180);
          v155 = swift_initStackObject(v154, &v232);
          *(_OWORD *)(v155 + 16) = v216;
          *(_QWORD *)&v217 = v153;
          v156 = UUID.uuidString.getter(v217);
          v158 = v157;
          *(_QWORD *)(v155 + 56) = &type metadata for String;
          v159 = sub_1004CFC2C();
          *(_QWORD *)(v155 + 64) = v159;
          *(_QWORD *)(v155 + 32) = v156;
          *(_QWORD *)(v155 + 40) = v158;
          v160 = v224;
          v161 = UUID.uuidString.getter(v159);
          *(_QWORD *)(v155 + 96) = &type metadata for String;
          *(_QWORD *)(v155 + 104) = v159;
          i = v160;
          *(_QWORD *)(v155 + 72) = v161;
          *(_QWORD *)(v155 + 80) = v162;
          v164 = static os_log_type_t.default.getter(v163);
          v165 = (void *)v217;
          sub_100A06EBC(v217, &_mh_execute_header, v164, "Create record for item %{public}@ we want to force writing a delete for. For Board: %{public}@", 94, 2, v155);
          swift_setDeallocating(v155);
          v166 = sub_1004B804C(&qword_1013E0190);
          swift_arrayDestroy(v155 + 32, 2, v166);

          v167 = v228;
          sub_100A85390(v143, (uint64_t)i, 0, 0, 0xF000000000000000, 1, 2);
          v41 = v167;
          if (v167)
          {
            swift_release(v143);
            sub_1004CB800((uint64_t)v209, &qword_1014053F8);
            v172 = *(void (**)(_BYTE *, uint64_t))(v229 + 8);
            v179 = v226;
            v172(v214, v226);
            v173 = swift_bridgeObjectRelease(v220);
            v174 = v218;
            v175 = (_BYTE *)v179;
            goto LABEL_175;
          }
          swift_release(v168);
          v18 = (_BYTE *)v226;
          v149 = v209;
        }
        v25 = (uint64_t)v220;
        sub_1004CB800((uint64_t)v149, &qword_1014053F8);
      }
      else
      {
        i = v224;
        v25 = (uint64_t)v220;
      }
      v169 = v214;
      v170 = sub_100A8D814((uint64_t)v214, (uint64_t)i);
      if (v41)
      {
        v171 = swift_release(v143);
        v172 = *(void (**)(_BYTE *, uint64_t))(v229 + 8);
        ((void (*)(_BYTE *, _BYTE *, __n128))v172)(v169, v18, v171);
        v173 = swift_bridgeObjectRelease(v25);
        v174 = v218;
        v175 = v18;
LABEL_175:
        ((void (*)(_BYTE *, _BYTE *, __n128))v172)(v174, v175, v173);
        goto LABEL_187;
      }
      (*(void (**)(_BYTE *, _BYTE *, double))(v229 + 8))(v169, v18, v170);
      swift_release(v143);
      ++v142;
      if (v227 == (_BYTE *)v219)
        goto LABEL_184;
    }
    __break(1u);
LABEL_179:
    __break(1u);
LABEL_180:
    if (v25 < 0)
      v180 = v25;
    else
      v180 = v25 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v25);
    v140 = _CocoaArrayWrapper.endIndex.getter(v180);
  }
LABEL_184:
  swift_bridgeObjectRelease(v25);
  v181 = *(_QWORD *)(v215 + v213[12]);
  if (*(_QWORD *)(v181 + 16))
  {
    sub_100AA76EC(v181, (uint64_t)i, 0);
    if (v41)
    {
      (*(void (**)(_BYTE *, _BYTE *))(v229 + 8))(v218, v18);
LABEL_187:
      v138 = i;
      goto LABEL_188;
    }
  }
  v182 = sub_1004B804C(&qword_1013E7870);
  v183 = *(unsigned __int8 *)(v205 + 80);
  v184 = (v183 + 32) & ~v183;
  v185 = swift_allocObject(v182, v184 + *(_QWORD *)(v205 + 72), v183 | 7);
  v228 = xmmword_100EF5E40;
  *(_OWORD *)(v185 + 16) = xmmword_100EF5E40;
  v186 = v185 + v184;
  v187 = v224;
  sub_1004B8460((uint64_t)v224, v186, type metadata accessor for CRLBoardIdentifier);
  v188 = sub_1004B5A78(v185);
  swift_setDeallocating(v185);
  swift_arrayDestroy(v186, 1, v206);
  swift_deallocClassInstance(v185, 32, 7);
  v189 = sub_1004B804C(&qword_101405400);
  v190 = sub_1004B804C(&qword_1013F9170);
  v191 = *(_QWORD *)(v190 - 8);
  v192 = *(_QWORD *)(v191 + 72);
  v193 = *(unsigned __int8 *)(v191 + 80);
  v194 = (v193 + 32) & ~v193;
  v195 = swift_allocObject(v189, v194 + v192, v193 | 7);
  *(_OWORD *)(v195 + 16) = v228;
  v196 = v195 + v194;
  v197 = *(int *)(v190 + 48);
  sub_1004B8460((uint64_t)v187, v196, type metadata accessor for CRLBoardIdentifier);
  v198 = v236;
  *(_QWORD *)(v196 + v197) = v236;
  swift_bridgeObjectRetain(v198);
  v199 = sub_1008D800C(v195);
  sub_100A75778((uint64_t)v188, v202, v222, v199);
  swift_bridgeObjectRelease(v188);
  v200 = swift_bridgeObjectRelease(v199);
  (*(void (**)(_BYTE *, _BYTE *, __n128))(v229 + 8))(v218, v18, v200);
  sub_1004B84A4((uint64_t)v187, type metadata accessor for CRLBoardIdentifier);
  swift_bridgeObjectRelease(v236);
}

void sub_100AA7350()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  id v7;
  __n128 v8;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE v11[24];

  v1 = type metadata accessor for DispatchPredicate(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = &v10[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)(v4);
  (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (*(_BYTE *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database) + 24) == 1)
  {
    sub_100757E04(&_mh_execute_header, (uint64_t)"_performIncrementalVacuumIfNeeded()", 35, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2, 5504, "Vacuum cannot be performed when there is an open transaction on the database", 76, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"_performIncrementalVacuumIfNeeded()", 35, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2u, 5504, (uint64_t)"Vacuum cannot be performed when there is an open transaction on the database", 76, 2u);
  }
  v2 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_hasAttemptedVacuum;
  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_hasAttemptedVacuum) & 1) == 0)
  {
    if (qword_1013DD858 == -1)
    {
LABEL_6:
      swift_beginAccess(&static OS_os_log.boardStore, v11, 0, 0);
      v7 = (id)static OS_os_log.boardStore;
      v9 = static os_log_type_t.default.getter(v8);
      sub_100A06EBC((uint64_t)v7, &_mh_execute_header, v9, "Attempting to perform an incremental vacuum if needed", 53, 2, (uint64_t)_swiftEmptyArrayStorage);

      *(_BYTE *)(v0 + v2) = 1;
      sub_1006B4A9C(0x200000, 0x100000);
      return;
    }
LABEL_9:
    swift_once(&qword_1013DD858, sub_100A05554);
    goto LABEL_6;
  }
}

double sub_100AA7690@<D0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *a1;
  *a2 = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

uint64_t sub_100AA769C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 256))();
}

uint64_t sub_100AA76C4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 264))();
}

void sub_100AA76EC(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  int64_t v27;

  v8 = type metadata accessor for DispatchPredicate(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (uint64_t *)((char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = *(void **)(v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v11 = v12;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)(v11);
  (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v11, v8);
  if ((v12 & 1) == 0)
    goto LABEL_26;
  v14 = a1 + 64;
  v15 = 1 << *(_BYTE *)(a1 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(a1 + 64);
  v27 = (unint64_t)(v15 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v18 = 0;
  while (v17)
  {
    v19 = __clz(__rbit64(v17));
    v17 &= v17 - 1;
    v20 = v19 | (v18 << 6);
LABEL_6:
    v21 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v20);
    swift_retain(v21);
    sub_100AA7910(v22, a2, a3, 0, 0xF000000000000000, 0);
    swift_release(v21);
    if (v4)
      goto LABEL_23;
  }
  if (__OFADD__(v18++, 1))
  {
    __break(1u);
    goto LABEL_25;
  }
  if (v18 >= v27)
    goto LABEL_23;
  v24 = *(_QWORD *)(v14 + 8 * v18);
  if (v24)
  {
LABEL_18:
    v17 = (v24 - 1) & v24;
    v20 = __clz(__rbit64(v24)) + (v18 << 6);
    goto LABEL_6;
  }
  v25 = v18 + 1;
  if (v18 + 1 >= v27)
    goto LABEL_23;
  v24 = *(_QWORD *)(v14 + 8 * v25);
  if (v24)
    goto LABEL_17;
  v25 = v18 + 2;
  if (v18 + 2 >= v27)
    goto LABEL_23;
  v24 = *(_QWORD *)(v14 + 8 * v25);
  if (v24)
    goto LABEL_17;
  v25 = v18 + 3;
  if (v18 + 3 >= v27)
  {
LABEL_23:
    swift_release(a1);
    return;
  }
  v24 = *(_QWORD *)(v14 + 8 * v25);
  if (v24)
  {
LABEL_17:
    v18 = v25;
    goto LABEL_18;
  }
  while (1)
  {
    v18 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v18 >= v27)
      goto LABEL_23;
    v24 = *(_QWORD *)(v14 + 8 * v18);
    ++v25;
    if (v24)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
}

uint64_t sub_100AA7910(uint64_t a1, uint64_t a2, int a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  unint64_t v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t inited;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  void (*v66)(uint64_t, uint64_t);
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t *v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t *v99;
  unint64_t v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  id v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  __int128 *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t *v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  __int128 v140;
  void *v141;
  unsigned int v142;
  id v143;
  id v144;
  id v145;
  unint64_t v146;
  id v147;
  uint64_t v148;
  __n128 v149;
  id v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  __int128 v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  __int128 v162;
  __int128 v163;
  unint64_t v164;
  uint64_t v165;
  char v166[24];
  id v167[3];
  char v168[72];
  char v169[8];

  v8 = v7;
  v9 = v6;
  *(_QWORD *)&v162 = a6;
  v160 = a5;
  v158 = a4;
  LODWORD(v159) = a3;
  v12 = type metadata accessor for CRLBoardIdentifier(0);
  v13 = __chkstk_darwin(v12);
  v155 = (uint64_t)&v153 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v156 = (uint64_t)&v153 - v15;
  *(_QWORD *)&v163 = sub_1004B804C(&qword_101405EC0);
  v164 = *(_QWORD *)(v163 - 8);
  v16 = __chkstk_darwin(v163);
  *(_QWORD *)&v157 = (char *)&v153 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v161 = (uint64_t)&v153 - v19;
  __chkstk_darwin(v18);
  v21 = (char *)&v153 - v20;
  v22 = type metadata accessor for DispatchPredicate(0);
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v25 = (uint64_t *)((char *)&v153 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  v26 = *(void **)(v9 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v25 = v26;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v23 + 104))(v25, enum case for DispatchPredicate.onQueue(_:), v22);
  v27 = v26;
  v28 = _dispatchPreconditionTest(_:)(v25);
  (*(void (**)(_QWORD *, uint64_t))(v23 + 8))(v25, v22);
  if ((v28 & 1) == 0)
  {
    __break(1u);
    goto LABEL_49;
  }
  v165 = a1;
  v29 = *(_QWORD *)(a1 + 16);
  v30 = sub_100AAA444(a2, v29);
  v23 = v9;
  v28 = a2;
  if (!v7)
  {
    if (!v30)
    {
      v161 = a2;
      v41 = v165;
      v159 = (_BYTE)v159 == 0;
      if ((_QWORD)v162)
      {
        v42 = (id)v162;
        *(_QWORD *)&v162 = sub_100B4B188((uint64_t)v42);
        v44 = v43;

      }
      else
      {
        *(_QWORD *)&v162 = 0;
        v44 = 0xF000000000000000;
      }
      v56 = v163;
      v57 = *(_QWORD *)(v23 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_crdtContext);
      v58 = v41 + *(_QWORD *)(*(_QWORD *)v41 + 120);
      swift_beginAccess(v58, v169, 0, 0);
      v59 = v157;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(v164 + 16))(v157, v58, v56);
      if (qword_1013DCB10 != -1)
        swift_once(&qword_1013DCB10, sub_1005DE88C);
      v60 = type metadata accessor for CRCodableVersion(0);
      v61 = sub_1004F2A1C(v60, (uint64_t)qword_10147EB08);
      v62 = sub_1004CBA30(&qword_101405EF0, (uint64_t *)&unk_1014148B0, (uint64_t)&protocol conformance descriptor for CRDictionary<A, B>);
      v63 = Capsule<>.serializedData(_:version:allowedAppFormats:)(v57, v61, 0, v56, v62);
      v65 = v64;
      v66 = *(void (**)(uint64_t, uint64_t))(v164 + 8);
      v164 = v44;
      v67 = v63;
      v66(v59, v56);
      v68 = v65;
      v69 = v155;
      sub_1004B8460(v161, v155, type metadata accessor for CRLBoardIdentifier);
      v70 = v41 + *(_QWORD *)(*(_QWORD *)v41 + 128);
      v163 = *(_OWORD *)v70;
      v157 = *(_OWORD *)(v70 + 16);
      v156 = *(_QWORD *)(v70 + 32);
      v71 = type metadata accessor for CRLFreehandDrawingBucketDatabaseRow(0);
      v72 = swift_allocObject(v71, *(unsigned int *)(v71 + 48), *(unsigned __int16 *)(v71 + 52));
      *(_OWORD *)(v72 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData) = xmmword_100F062D0;
      *(_OWORD *)(v72 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData) = xmmword_100F062D0;
      v73 = v69;
      v74 = v68;
      sub_1004B84E0(v73, v72 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_boardIdentifier, type metadata accessor for CRLBoardIdentifier);
      *(_QWORD *)(v72 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketIndex) = v29;
      v75 = (unint64_t *)(v72 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData);
      *v75 = v67;
      v75[1] = v68;
      *(_QWORD *)(v72 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_unsyncedChanges) = v159;
      v76 = (_QWORD *)(v72 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData);
      v77 = *(_QWORD *)(v72 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData);
      v78 = *(_QWORD *)(v72 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData + 8);
      v79 = v158;
      v80 = v160;
      *v76 = v158;
      v76[1] = v80;
      sub_10057939C(v79, v80);
      v160 = v67;
      v81 = v67;
      v82 = v164;
      sub_1004BE310(v81, v74);
      v83 = v162;
      sub_10057939C(v162, v82);
      sub_1004BE2FC(v77, v78);
      v84 = (uint64_t *)(v72 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData);
      v85 = *(_QWORD *)(v72 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData);
      v86 = *(_QWORD *)(v72
                      + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData
                      + 8);
      *v84 = v83;
      v84[1] = v82;
      sub_1004BE2FC(v85, v86);
      v87 = v72 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_minRequiredVersions;
      v88 = v157;
      *(_OWORD *)v87 = v163;
      *(_OWORD *)(v87 + 16) = v88;
      *(_QWORD *)(v87 + 32) = v156;
      sub_100AAB4DC(v72);
      sub_1004BE2FC(v83, v82);
      swift_setDeallocating(v72);
      sub_1004B84A4(v72 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_boardIdentifier, type metadata accessor for CRLBoardIdentifier);
      sub_1004BBBC8(*(_QWORD *)(v72 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData), *(_QWORD *)(v72 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData + 8));
      sub_1004BE2FC(*(_QWORD *)(v72 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData), *(_QWORD *)(v72 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData + 8));
      sub_1004BE2FC(*(_QWORD *)(v72 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData), *(_QWORD *)(v72 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData + 8));
      swift_deallocClassInstance(v72, *(unsigned int *)(*(_QWORD *)v72 + 48), *(unsigned __int16 *)(*(_QWORD *)v72 + 52));
      sub_1004BBBC8(v160, v74);
      goto LABEL_41;
    }
    v155 = OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_unsyncedChanges;
    v35 = *(_QWORD *)(v30 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_unsyncedChanges);
    swift_retain(v30);
    v154 = v36;
    v37 = sub_100AFC268(v36);
    v38 = v165;
    if (v37)
    {
      *(_QWORD *)&v157 = v37;
      v39 = v9;
      if ((_BYTE)v159)
      {
        if (v159 == 1)
          v40 = sub_100AAAAC8(v165);
        else
          v40 = 0;
      }
      else
      {
        v40 = sub_100AAAAC8(v157) | v35;
      }
      v89 = v38 + *(_QWORD *)(*(_QWORD *)v38 + 120);
      swift_beginAccess(v89, v169, 0, 0);
      v90 = v164;
      v91 = v163;
      (*(void (**)(char *, uint64_t, _QWORD))(v164 + 16))(v21, v89, v163);
      sub_100AFC540((uint64_t)v21);
      (*(void (**)(char *, uint64_t))(v90 + 8))(v21, v91);
      v23 = v39;
      a2 = v161;
    }
    else
    {
      a2 = v161;
      if (qword_1013DD858 != -1)
        swift_once(&qword_1013DD858, sub_100A05554);
      swift_beginAccess(&static OS_os_log.boardStore, v169, 0, 0);
      v45 = (void *)static OS_os_log.boardStore;
      v46 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      inited = swift_initStackObject(v46, v168);
      *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
      v48 = v45;
      v49 = UUID.uuidString.getter(v48);
      v51 = v50;
      *(_QWORD *)(inited + 56) = &type metadata for String;
      v52 = sub_1004CFC2C();
      *(_QWORD *)(inited + 64) = v52;
      *(_QWORD *)(inited + 32) = v49;
      *(_QWORD *)(inited + 40) = v51;
      v53 = static os_log_type_t.error.getter(v52);
      sub_100A06EBC((uint64_t)v48, &_mh_execute_header, v53, "An existing drawing bucket in the database could not be deserialized for merging. Replacing the bucket with the incoming bucket. Board identifier %{public}@", 156, 2, inited);
      swift_setDeallocating(inited);
      v54 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(inited + 32, 1, v54);

      swift_retain(v165);
      v40 = 0;
      *(_QWORD *)&v157 = v55;
    }
    v92 = v154;
    *(_QWORD *)(v154 + v155) = v40;
    v93 = v160;
    if (v160 >> 60 != 15)
    {
      v94 = (_QWORD *)(v92 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData);
      v95 = *(_QWORD *)(v92 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData);
      v96 = *(_QWORD *)(v92 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData + 8);
      v97 = v158;
      *v94 = v158;
      v94[1] = v93;
      sub_1004BE310(v97, v93);
      sub_1004BE2FC(v95, v96);
    }
    v98 = (void *)v162;
    if (!(_QWORD)v162)
    {
      a1 = v163;
      goto LABEL_33;
    }
    v99 = (uint64_t *)(v92 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData);
    v100 = *(_QWORD *)(v92
                     + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData
                     + 8);
    if (v100 >> 60 == 15)
    {
      v101 = (id)v162;
    }
    else
    {
      v102 = *v99;
      sub_1004B8930(0, &qword_1013FF470, NSKeyedUnarchiver_ptr);
      v103 = sub_1004B8930(0, (unint64_t *)&unk_1014064E0, CKMergeableRecordValue_ptr);
      sub_10057939C(v102, v100);
      sub_10057939C(v102, v100);
      v104 = v98;
      v141 = (void *)static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v103, v102, v100, v103);
      sub_1004BE2FC(v102, v100);
      sub_1004BE2FC(v102, v100);
      if (v141)
      {
        v167[0] = 0;
        v142 = objc_msgSend(v141, "mergeRecordValue:error:", v104, v167);
        v143 = v167[0];
        if (v142)
        {
          v144 = v167[0];

          v145 = v141;
          v105 = sub_100B4B188((uint64_t)v145);
          v107 = v146;

          if (v107 >> 60 != 15)
            goto LABEL_31;
        }
        else
        {
          v147 = v167[0];
          v148 = _convertNSErrorToError(_:)(v143);

          swift_willThrow(v149);
          if (qword_1013DD870 != -1)
            swift_once(&qword_1013DD870, sub_100A059E0);
          swift_beginAccess(&static OS_os_log.dataSync, v166, 0, 0);
          v150 = (id)static OS_os_log.dataSync;
          v151 = static os_log_type_t.error.getter(v150);
          sub_100A06EBC((uint64_t)v150, &_mh_execute_header, v151, "Failed to merge serialized ckMergeableRecordValueDatas, keep existing data", 74, 2, (uint64_t)_swiftEmptyArrayStorage);

          v105 = sub_100B4B188((uint64_t)v141);
          v107 = v152;

          swift_errorRelease(v148);
          if (v107 >> 60 != 15)
          {
            v8 = 0;
            goto LABEL_31;
          }
          v8 = 0;
        }
        a1 = v163;
        goto LABEL_32;
      }
      v98 = (void *)v162;
    }
    v105 = sub_100B4B188((uint64_t)v98);
    v107 = v106;

LABEL_31:
    a1 = v163;
    v108 = *v99;
    v109 = v99[1];
    *v99 = v105;
    v99[1] = v107;
    sub_1004BE2FC(v108, v109);
LABEL_32:
    a2 = v161;
LABEL_33:
    v22 = *(_QWORD *)(v23 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_crdtContext);
    v110 = v157 + *(_QWORD *)(*(_QWORD *)v157 + 120);
    swift_beginAccess(v110, v167, 0, 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v164 + 16))(a2, v110, a1);
    if (qword_1013DCB10 == -1)
    {
LABEL_34:
      v111 = type metadata accessor for CRCodableVersion(0);
      v112 = sub_1004F2A1C(v111, (uint64_t)qword_10147EB08);
      v113 = sub_1004CBA30(&qword_101405EF0, (uint64_t *)&unk_1014148B0, (uint64_t)&protocol conformance descriptor for CRDictionary<A, B>);
      v114 = Capsule<>.serializedData(_:version:allowedAppFormats:)(v22, v112, 0, a1, v113);
      v116 = a1;
      if (v8)
      {
        (*(void (**)(uint64_t, uint64_t))(v164 + 8))(a2, a1);
        swift_release(v154);
        swift_release(v157);
        goto LABEL_3;
      }
      v117 = v114;
      v118 = v115;
      v161 = v28;
      (*(void (**)(uint64_t, uint64_t))(v164 + 8))(a2, v116);
      v119 = v154;
      v120 = v156;
      sub_1004B8460(v154 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_boardIdentifier, v156, type metadata accessor for CRLBoardIdentifier);
      v153 = *(_QWORD *)(v119 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketIndex);
      v155 = *(_QWORD *)(v119 + v155);
      v121 = OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData;
      v164 = v23;
      v122 = *(_QWORD *)(v119 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData);
      v123 = *(_QWORD *)(v119 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData + 8);
      v124 = OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData;
      v125 = *(_QWORD *)(v119
                       + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData
                       + 8);
      v159 = *(_QWORD *)(v119 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData);
      v158 = v125;
      v126 = (__int128 *)(v157 + *(_QWORD *)(*(_QWORD *)v157 + 128));
      v163 = *v126;
      v162 = v126[1];
      v160 = *((_QWORD *)v126 + 4);
      v127 = type metadata accessor for CRLFreehandDrawingBucketDatabaseRow(0);
      v128 = swift_allocObject(v127, *(unsigned int *)(v127 + 48), *(unsigned __int16 *)(v127 + 52));
      *(_OWORD *)(v128 + v121) = xmmword_100F062D0;
      *(_OWORD *)(v128 + v124) = xmmword_100F062D0;
      sub_1004B84E0(v120, v128 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_boardIdentifier, type metadata accessor for CRLBoardIdentifier);
      *(_QWORD *)(v128 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketIndex) = v153;
      v129 = (uint64_t *)(v128 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData);
      *v129 = v117;
      v129[1] = v118;
      *(_QWORD *)(v128 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_unsyncedChanges) = v155;
      v130 = (uint64_t *)(v128 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData);
      v132 = *(_QWORD *)(v128 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData);
      v131 = *(_QWORD *)(v128 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData + 8);
      *v130 = v122;
      v130[1] = v123;
      sub_1004BE310(v117, v118);
      v133 = v122;
      v23 = v164;
      sub_10057939C(v133, v123);
      v134 = v159;
      v135 = v158;
      sub_10057939C(v159, v158);
      sub_1004BE2FC(v132, v131);
      v136 = (uint64_t *)(v128 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData);
      v137 = *(_QWORD *)(v128 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData);
      v138 = *(_QWORD *)(v128
                       + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData
                       + 8);
      *v136 = v134;
      v136[1] = v135;
      sub_1004BE2FC(v137, v138);
      v139 = v128 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_minRequiredVersions;
      v140 = v162;
      *(_OWORD *)v139 = v163;
      *(_OWORD *)(v139 + 16) = v140;
      *(_QWORD *)(v139 + 32) = v160;
      sub_100AAAC68(v128);
      swift_release(v157);
      sub_1004BBBC8(v117, v118);
      swift_setDeallocating(v128);
      sub_1004B84A4(v128 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_boardIdentifier, type metadata accessor for CRLBoardIdentifier);
      sub_1004BBBC8(*(_QWORD *)(v128 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData), *(_QWORD *)(v128 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData + 8));
      sub_1004BE2FC(*(_QWORD *)(v128 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData), *(_QWORD *)(v128 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData + 8));
      sub_1004BE2FC(*(_QWORD *)(v128 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData), *(_QWORD *)(v128 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData + 8));
      swift_deallocClassInstance(v128, *(unsigned int *)(*(_QWORD *)v128 + 48), *(unsigned __int16 *)(*(_QWORD *)v128 + 52));
      swift_release(v154);
LABEL_41:
      v33 = v161;
      v31 = v23;
      v32 = v165;
      return sub_100AABD9C(v31, v32, v33);
    }
LABEL_49:
    swift_once(&qword_1013DCB10, sub_1005DE88C);
    goto LABEL_34;
  }
LABEL_3:
  v31 = v23;
  v32 = v165;
  v33 = v28;
  return sub_100AABD9C(v31, v32, v33);
}

void sub_100AA894C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  _QWORD *v36;
  void *v37;
  id v38;
  int v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  char *v45;
  uint64_t v46;
  void *v47;
  unint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t *v51;
  int v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  Class v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  void *v63;
  void *v64;
  Swift::String v65;
  Class isa;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  unint64_t v78;
  id v79;
  _QWORD *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t countAndFlagsBits;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  _QWORD *v101;
  char v102;
  void (*v103)(char *, uint64_t, uint64_t);
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  __n128 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  id v123;
  id v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  unint64_t v131;
  id v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  __int128 v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t *v153;
  uint64_t *v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  __int128 v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  _QWORD *v179;
  char v180;
  void *v181;
  unsigned __int8 v182;
  id v183;
  id v184;
  void (*v185)(uint64_t, uint64_t, uint64_t);
  uint64_t v186;
  char *v187;
  uint64_t v188;
  char *v189;
  char *v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t *v194;
  uint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  _QWORD *v198;
  uint64_t v199;
  uint64_t v200;
  void *v201;
  uint64_t v202;
  uint64_t v203;
  id v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t *v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  char *v217;
  __n128 v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  _QWORD *v226;
  void (*v227)(uint64_t, uint64_t);
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  _QWORD *v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t *v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t *v245;
  uint64_t v246;
  unint64_t v247;
  uint64_t v248;
  __int128 v249;
  uint64_t v250;
  id v251;
  uint64_t v252;
  uint64_t v253;
  char *v254;
  id v255;
  uint64_t v256;
  __n128 v257;
  void *v258;
  uint64_t v259;
  uint64_t inited;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  id v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  __n128 v268;
  uint64_t v269;
  uint64_t v270;
  _QWORD *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  id v278;
  uint64_t v279;
  char *v280;
  uint64_t v281;
  char *v282;
  uint64_t v283;
  unint64_t v284;
  char *v285;
  char *v286;
  uint64_t v287;
  char *v288;
  __int128 v289;
  uint64_t v290;
  __int128 v291;
  char *v292;
  uint64_t v293;
  __int128 v294;
  __int128 v295;
  uint64_t v296;
  _QWORD v297[3];
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  _BYTE v301[24];
  Swift::String v302;
  char v303[72];
  id v304[3];

  v284 = a5;
  v281 = a4;
  v293 = a2;
  *(_QWORD *)&v295 = a1;
  v7 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v7);
  v279 = (uint64_t)&v271 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v274 = (uint64_t)&v271 - v10;
  v283 = sub_1004B804C((uint64_t *)&unk_1014148B0);
  __chkstk_darwin(v283);
  v282 = (char *)&v271 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v294 = sub_1004B804C(&qword_101405EC0);
  v12 = *(_QWORD *)(v294 - 8);
  __chkstk_darwin(v294);
  v285 = (char *)&v271 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v280 = (char *)&v271 - v15;
  __chkstk_darwin(v16);
  v277 = (uint64_t)&v271 - v17;
  __chkstk_darwin(v18);
  v288 = (char *)&v271 - v19;
  __chkstk_darwin(v20);
  v275 = (uint64_t)&v271 - v21;
  v22 = sub_1004B804C((uint64_t *)&unk_1014064B0);
  __chkstk_darwin(v22);
  v286 = (char *)&v271 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v276 = (uint64_t)&v271 - v25;
  __chkstk_darwin(v26);
  *(_QWORD *)&v291 = (char *)&v271 - v27;
  v28 = sub_1004B804C(&qword_101405628);
  v290 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v292 = (char *)&v271 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v287 = (uint64_t)&v271 - v31;
  v32 = type metadata accessor for DispatchPredicate(0);
  v33 = *(_QWORD *)(v32 - 8);
  v34 = __chkstk_darwin(v32);
  v36 = (_QWORD **)((char *)&v271 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
  v37 = *(void **)(v5 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v36 = v37;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v33 + 104))(v36, enum case for DispatchPredicate.onQueue(_:), v32, v34);
  v38 = v37;
  LOBYTE(v37) = _dispatchPreconditionTest(_:)(v36);
  (*(void (**)(_QWORD *, uint64_t))(v33 + 8))(v36, v32);
  if ((v37 & 1) == 0)
  {
    __break(1u);
    goto LABEL_70;
  }
  v39 = a3;
  LODWORD(v278) = a3;
  if (a3 == 2)
  {
    v50 = v294;
    v40 = v28;
    v32 = v295;
    goto LABEL_13;
  }
  v40 = v28;
  if (!v39)
  {
    sub_100757E04(&_mh_execute_header, (uint64_t)"_mergeFreehandDrawingRemoteRecord(_:boardIdentifier:syncChangeTrackingType:syncDataToOverwrite:)", 96, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2, 5651, "CKMergeable path for mergeFreehandDrawing should never be called with .trackAsUnsyncedChanges", 93, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"_mergeFreehandDrawingRemoteRecord(_:boardIdentifier:syncChangeTrackingType:syncDataToOverwrite:)", 96, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2u, 5651, (uint64_t)"CKMergeable path for mergeFreehandDrawing should never be called with .trackAsUnsyncedChanges", 93, 2u);
  }
  v32 = v295;
  v41 = *(char **)(v295 + OBJC_IVAR____TtC8Freeform34CRLFreehandDrawingBucketSyncRecord_bucketIndex);
  v42 = v296;
  v43 = sub_100AAA444(v293, (uint64_t)v41);
  v296 = v42;
  if (!v42)
  {
    if (v43)
    {
      v292 = v41;
      *(_QWORD *)&v289 = v12;
      v273 = v5;
      v44 = (uint64_t *)(v32 + OBJC_IVAR____TtC8Freeform40CRLFreehandDrawingBucketSyncRemoteRecord_minRequiredVersions);
      if (*(_BYTE *)(v32 + OBJC_IVAR____TtC8Freeform40CRLFreehandDrawingBucketSyncRemoteRecord_minRequiredVersions + 40) == 1)
        v44 = (uint64_t *)(v43 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_minRequiredVersions);
      v45 = (char *)v44[4];
      v285 = (char *)v44[3];
      v46 = v44[1];
      v280 = (char *)v44[2];
      v47 = *(void **)(v32 + OBJC_IVAR____TtC8Freeform40CRLFreehandDrawingBucketSyncRemoteRecord_ckMergeableRecordValue);
      *(_QWORD *)&v295 = v46;
      v279 = *v44;
      v48 = *(_QWORD *)(v43
                      + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData
                      + 8);
      v271 = (_QWORD *)v43;
      v286 = v45;
      if (v48 >> 60 == 15)
      {
        v49 = v47;
      }
      else
      {
        v121 = *(_QWORD *)(v43
                         + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData);
        sub_1004B8930(0, &qword_1013FF470, NSKeyedUnarchiver_ptr);
        v122 = sub_1004B8930(0, (unint64_t *)&unk_1014064E0, CKMergeableRecordValue_ptr);
        v123 = v47;
        sub_10057939C(v121, v48);
        v124 = v123;
        sub_10057939C(v121, v48);
        v125 = v296;
        v126 = static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v122, v121, v48, v122);
        v296 = v125;
        if (v125)
        {
          swift_errorRelease(v296);
          sub_1004BE2FC(v121, v48);
          sub_1004BE2FC(v121, v48);

          v296 = 0;
        }
        else
        {
          v181 = (void *)v126;
          sub_1004BE2FC(v121, v48);
          sub_1004BE2FC(v121, v48);
          if (v181)
          {
            v304[0] = 0;
            v182 = objc_msgSend(v181, "mergeRecordValue:error:", v124, v304);

            v183 = v304[0];
            if ((v182 & 1) != 0)
            {
              v184 = v304[0];

              v49 = v181;
            }
            else
            {
              v272 = v40;
              v278 = v124;
              v255 = v304[0];
              v256 = _convertNSErrorToError(_:)(v183);

              swift_willThrow(v257);
              if (qword_1013DD870 != -1)
                swift_once(&qword_1013DD870, sub_100A059E0);
              swift_beginAccess(&static OS_os_log.dataSync, v301, 0, 0);
              v258 = (void *)static OS_os_log.dataSync;
              v259 = sub_1004B804C((uint64_t *)&unk_1013E0180);
              inited = swift_initStackObject(v259, &v299);
              *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
              swift_getErrorValue(v256, &v298, v297);
              v261 = v256;
              v262 = v297[1];
              v263 = v297[2];
              v264 = v258;
              v265 = Error.localizedDescription.getter(v262, v263);
              v267 = v266;
              *(_QWORD *)(inited + 56) = &type metadata for String;
              *(_QWORD *)(inited + 64) = sub_1004CFC2C();
              *(_QWORD *)(inited + 32) = v265;
              *(_QWORD *)(inited + 40) = v267;
              v269 = static os_log_type_t.default.getter(v268);
              sub_100A06EBC((uint64_t)v264, &_mh_execute_header, v269, "Merge failed, this can happen if a record was deleted and replaced with something else and we're merging two distinctly different records. Super edge casey. %@", 159, 2, inited);

              swift_setDeallocating(inited);
              v270 = sub_1004B804C(&qword_1013E0190);
              swift_arrayDestroy(inited + 32, 1, v270);

              swift_errorRelease(v261);
              v296 = 0;
              v49 = v181;
              v40 = v272;
            }
            goto LABEL_29;
          }

        }
        v49 = v124;
      }
LABEL_29:
      v127 = v289;
      v128 = v291;
      v129 = v294;
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v289 + 56))(v291, 1, 1, v294);
      v130 = *(void **)(v273 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_crdtContext);
      v131 = sub_100B01190();
      v132 = v130;
      v133 = v287;
      CRCKMergeable.init(crdt:context:)(v128, v132, v129, v131);
      v134 = sub_1004CBA30((unint64_t *)&unk_1014064D0, &qword_101405628, (uint64_t)&protocol conformance descriptor for CRCKMergeable<A>);
      v135 = v296;
      CKMergeable.merge(_:)(v49, v40, v134);
      v296 = v135;
      if (v135)
      {
        (*(void (**)(uint64_t, uint64_t))(v290 + 8))(v133, v40);
        swift_release(v271);

        return;
      }
      *(_QWORD *)&v291 = v132;
      v165 = v276;
      CRCKMergeable.crdt.getter(v40);
      v166 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v127 + 48))(v165, 1, v129);
      v272 = v40;
      v278 = v49;
      if (v166 == 1)
      {
        sub_1004CB800(v165, (uint64_t *)&unk_1014064B0);
        v304[0] = v292;
        v167 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
        v275 = v168;
        v276 = v167;
        v169 = type metadata accessor for UUID(0);
        v170 = sub_1004B804C(&qword_101405F00);
        v171 = sub_1004B7878((unint64_t *)&qword_1013DE630, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v172 = sub_1004CBA30(&qword_101403070, &qword_101405F00, (uint64_t)&protocol conformance descriptor for Ref<A>);
        v173 = v271;
        v174 = sub_1004CBA30((unint64_t *)&unk_1014064F0, &qword_101405F00, (uint64_t)&protocol conformance descriptor for Ref<A>);
        v175 = v282;
        CRDictionary.init()(v169, v170, &protocol witness table for UUID, v171, v172, v174);
        v176 = sub_1004CBA30(&qword_101405EF0, (uint64_t *)&unk_1014148B0, (uint64_t)&protocol conformance descriptor for CRDictionary<A, B>);
        v177 = v288;
        Capsule<>.init(_:id:)(v175, v276, v275, v283, v176);
        v178 = sub_1004B804C((uint64_t *)&unk_101406AD0);
        v179 = (_QWORD *)swift_allocObject(v178, *(unsigned int *)(v178 + 48), *(unsigned __int16 *)(v178 + 52));
        *((_BYTE *)v179 + *(_QWORD *)(*v179 + 136)) = 0;
        v179[2] = v292;
        (*(void (**)(char *, char *, uint64_t))(v289 + 32))((char *)v179 + *(_QWORD *)(*v179 + 120), v177, v129);
        v180 = 0;
      }
      else
      {
        v185 = *(void (**)(uint64_t, uint64_t, uint64_t))(v127 + 32);
        v186 = v275;
        v185(v275, v165, v129);
        v187 = v288;
        v185((uint64_t)v288, v186, v129);
        v188 = sub_1004B804C((uint64_t *)&unk_101406AD0);
        v179 = (_QWORD *)swift_allocObject(v188, *(unsigned int *)(v188 + 48), *(unsigned __int16 *)(v188 + 52));
        *((_BYTE *)v179 + *(_QWORD *)(*v179 + 136)) = 0;
        v179[2] = v292;
        v185((uint64_t)v179 + *(_QWORD *)(*v179 + 120), (uint64_t)v187, v129);
        v180 = 1;
        v173 = v271;
      }
      v190 = v285;
      v189 = v286;
      v192 = v279;
      v191 = v280;
      v193 = v295;
      *((_BYTE *)v179 + *(_QWORD *)(*v179 + 136)) = v180;
      v194 = (_QWORD *)((char *)v179 + *(_QWORD *)(*v179 + 128));
      *v194 = v192;
      v194[1] = v193;
      v194[2] = (uint64_t)v191;
      v194[3] = (uint64_t)v190;
      v194[4] = (uint64_t)v189;
      swift_retain(v173);
      v196 = sub_100AFC268(v195);
      v197 = v277;
      if (v196)
      {
        v198 = v196;
        v199 = sub_100AAAAC8((uint64_t)v179);
        v200 = (uint64_t)v179 + *(_QWORD *)(*v179 + 120);
        swift_beginAccess(v200, v304, 0, 0);
        sub_100AFC540(v200);
      }
      else
      {
        if (qword_1013DD858 != -1)
          swift_once(&qword_1013DD858, sub_100A05554);
        swift_beginAccess(&static OS_os_log.boardStore, v304, 0, 0);
        v201 = (void *)static OS_os_log.boardStore;
        v202 = sub_1004B804C((uint64_t *)&unk_1013E0180);
        v203 = swift_initStackObject(v202, &v300);
        *(_OWORD *)(v203 + 16) = xmmword_100EF5E40;
        v204 = v201;
        v205 = UUID.uuidString.getter(v204);
        v207 = v206;
        *(_QWORD *)(v203 + 56) = &type metadata for String;
        v208 = sub_1004CFC2C();
        *(_QWORD *)(v203 + 64) = v208;
        *(_QWORD *)(v203 + 32) = v205;
        *(_QWORD *)(v203 + 40) = v207;
        v209 = static os_log_type_t.error.getter(v208);
        sub_100A06EBC((uint64_t)v204, &_mh_execute_header, v209, "An existing drawing bucket in the database failed to deserialize for merging. Replacing the bucket with the incoming bucket. Board identifier %{public}@", 152, 2, v203);
        swift_setDeallocating(v203);
        v210 = sub_1004B804C(&qword_1013E0190);
        swift_arrayDestroy(v203 + 32, 1, v210);

        swift_retain(v179);
        v199 = 0;
        v198 = v179;
        v173 = v271;
      }
      v211 = OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_unsyncedChanges;
      *(_QWORD *)((char *)v173 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_unsyncedChanges) = v199;
      v212 = v284;
      if (v284 >> 60 != 15)
      {
        v213 = (_QWORD *)((char *)v173 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData);
        v214 = *(_QWORD *)((char *)v173 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData);
        v215 = *(_QWORD *)((char *)v173 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData + 8);
        v216 = v281;
        *v213 = v281;
        v213[1] = v212;
        sub_1004BE310(v216, v212);
        sub_1004BE2FC(v214, v215);
      }
      v217 = (char *)v198 + *(_QWORD *)(*v198 + 120);
      v218 = swift_beginAccess(v217, &v302, 0, 0);
      v219 = v294;
      (*(void (**)(uint64_t, char *, _QWORD, __n128))(v289 + 16))(v197, v217, v294, v218);
      if (qword_1013DCB10 != -1)
        swift_once(&qword_1013DCB10, sub_1005DE88C);
      v220 = type metadata accessor for CRCodableVersion(0);
      v221 = sub_1004F2A1C(v220, (uint64_t)qword_10147EB08);
      v222 = sub_1004CBA30(&qword_101405EF0, (uint64_t *)&unk_1014148B0, (uint64_t)&protocol conformance descriptor for CRDictionary<A, B>);
      v223 = v296;
      v224 = Capsule<>.serializedData(_:version:allowedAppFormats:)(v291, v221, 0, v219, v222);
      v296 = v223;
      if (v223)
      {
        (*(void (**)(uint64_t, uint64_t))(v289 + 8))(v197, v219);
        swift_release(v179);
        swift_release(v198);

        v226 = v173;
LABEL_53:
        swift_release(v226);
        (*(void (**)(uint64_t, uint64_t))(v290 + 8))(v287, v272);
        return;
      }
      v227 = *(void (**)(uint64_t, uint64_t))(v289 + 8);
      v293 = v224;
      *(_QWORD *)&v295 = v225;
      v227(v197, v219);
      v292 = (char *)sub_100B4B188((uint64_t)v278);
      *(_QWORD *)&v294 = v228;
      v229 = v274;
      sub_1004B8460((uint64_t)v173 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_boardIdentifier, v274, type metadata accessor for CRLBoardIdentifier);
      v230 = *(_QWORD *)((char *)v173 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketIndex);
      v285 = *(char **)((char *)v173 + v211);
      v231 = OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData;
      v232 = *(_QWORD *)((char *)v173 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData + 8);
      v286 = *(char **)((char *)v173 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData);
      v233 = (char *)v198 + *(_QWORD *)(*v198 + 128);
      v291 = *(_OWORD *)v233;
      v289 = *((_OWORD *)v233 + 1);
      v288 = (char *)*((_QWORD *)v233 + 4);
      v234 = type metadata accessor for CRLFreehandDrawingBucketDatabaseRow(0);
      v235 = swift_allocObject(v234, *(unsigned int *)(v234 + 48), *(unsigned __int16 *)(v234 + 52));
      *(_OWORD *)(v235 + v231) = xmmword_100F062D0;
      *(_OWORD *)(v235 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData) = xmmword_100F062D0;
      sub_1004B84E0(v229, v235 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_boardIdentifier, type metadata accessor for CRLBoardIdentifier);
      *(_QWORD *)(v235 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketIndex) = v230;
      v236 = (_QWORD *)(v235 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData);
      v237 = v293;
      v238 = v295;
      *v236 = v293;
      v236[1] = v238;
      v239 = (uint64_t)v286;
      *(_QWORD *)(v235 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_unsyncedChanges) = v285;
      v240 = (uint64_t *)(v235 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData);
      v242 = *(_QWORD *)(v235 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData);
      v241 = *(_QWORD *)(v235 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData + 8);
      *v240 = v239;
      v240[1] = v232;
      sub_1004BE310(v237, v238);
      sub_10057939C(v239, v232);
      v243 = (uint64_t)v292;
      v244 = v294;
      sub_10057939C((uint64_t)v292, v294);
      sub_1004BE2FC(v242, v241);
      v245 = (uint64_t *)(v235 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData);
      v246 = *(_QWORD *)(v235 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData);
      v247 = *(_QWORD *)(v235
                       + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData
                       + 8);
      *v245 = v243;
      v245[1] = v244;
      sub_1004BE2FC(v246, v247);
      v248 = v235 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_minRequiredVersions;
      v249 = v289;
      *(_OWORD *)v248 = v291;
      *(_OWORD *)(v248 + 16) = v249;
      *(_QWORD *)(v248 + 32) = v288;
      v250 = v296;
      sub_100AAAC68(v235);
      v296 = v250;
      if (v250)
      {
        swift_setDeallocating(v235);
        sub_1004B84A4(v235 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_boardIdentifier, type metadata accessor for CRLBoardIdentifier);
        sub_1004BBBC8(*(_QWORD *)(v235 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData), *(_QWORD *)(v235 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData + 8));
        sub_1004BE2FC(*(_QWORD *)(v235 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData), *(_QWORD *)(v235 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData + 8));
        sub_1004BE2FC(*(_QWORD *)(v235 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData), *(_QWORD *)(v235+ OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData+ 8));
        swift_deallocClassInstance(v235, *(unsigned int *)(*(_QWORD *)v235 + 48), *(unsigned __int16 *)(*(_QWORD *)v235 + 52));
        sub_1004BE2FC(v243, v244);
        sub_1004BBBC8(v293, v295);
        swift_release(v179);
        swift_release(v198);

        v226 = v271;
        goto LABEL_53;
      }
      swift_setDeallocating(v235);
      sub_1004B84A4(v235 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_boardIdentifier, type metadata accessor for CRLBoardIdentifier);
      sub_1004BBBC8(*(_QWORD *)(v235 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData), *(_QWORD *)(v235 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData + 8));
      sub_1004BE2FC(*(_QWORD *)(v235 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData), *(_QWORD *)(v235 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData + 8));
      sub_1004BE2FC(*(_QWORD *)(v235 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData), *(_QWORD *)(v235 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData + 8));
      swift_deallocClassInstance(v235, *(unsigned int *)(*(_QWORD *)v235 + 48), *(unsigned __int16 *)(*(_QWORD *)v235 + 52));
      sub_1004BE2FC(v243, v244);
      sub_1004BBBC8(v293, v295);
      swift_release(v179);
      swift_release(v198);

      v254 = (char *)v287;
      v253 = v272;
LABEL_62:
      swift_release(v271);
      (*(void (**)(char *, uint64_t))(v290 + 8))(v254, v253);
      return;
    }
    v50 = v294;
LABEL_13:
    v51 = (uint64_t *)(v32 + OBJC_IVAR____TtC8Freeform40CRLFreehandDrawingBucketSyncRemoteRecord_minRequiredVersions);
    v52 = *(unsigned __int8 *)(v32
                             + OBJC_IVAR____TtC8Freeform40CRLFreehandDrawingBucketSyncRemoteRecord_minRequiredVersions
                             + 40);
    *(_QWORD *)&v289 = v12;
    if (v52 != 1)
    {
      v287 = *v51;
      v72 = v51[2];
      v276 = v51[1];
      v277 = v72;
      v73 = v51[3];
      v274 = v51[4];
      v275 = v73;
      v71 = v40;
      goto LABEL_17;
    }
    v272 = v40;
    v273 = v5;
    if (qword_1013DD870 == -1)
    {
LABEL_15:
      swift_beginAccess(&static OS_os_log.dataSync, v304, 0, 0);
      v53 = (void *)static OS_os_log.dataSync;
      v54 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      v55 = swift_initStackObject(v54, v303);
      *(_OWORD *)(v55 + 16) = xmmword_100EF5E40;
      v56 = v32 + OBJC_IVAR____TtC8Freeform34CRLFreehandDrawingBucketSyncRecord_boardIdentifier;
      v57 = *(_QWORD *)(v32 + OBJC_IVAR____TtC8Freeform34CRLFreehandDrawingBucketSyncRecord_bucketIndex);
      v287 = v53;
      v58 = sub_100B4AD90(v56);
      v59 = sub_1004B8930(0, &qword_1013E8810, CKRecordID_ptr);
      v60 = qword_101406330;
      v61 = off_101406338;
      v302._countAndFlagsBits = v57;
      swift_bridgeObjectRetain(off_101406338);
      v62 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v64 = v63;
      v302._countAndFlagsBits = v60;
      v302._object = v61;
      v32 = v295;
      swift_bridgeObjectRetain(v61);
      v65._countAndFlagsBits = v62;
      v65._object = v64;
      String.append(_:)(v65);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      isa = CKRecordID.init(recordName:zoneID:)(v302, (CKRecordZoneID)v58).super.isa;
      *(_QWORD *)(v55 + 56) = v59;
      v67 = sub_1005A15B8((unint64_t *)&qword_1013F2108, &qword_1013E8810, CKRecordID_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
      *(_QWORD *)(v55 + 64) = v67;
      *(_QWORD *)(v55 + 32) = isa;
      v68 = static os_log_type_t.error.getter(v67);
      v69 = (void *)v287;
      sub_100A06EBC(v287, &_mh_execute_header, v68, "Incorrectly received missing values (partial record?) when saving a new freehandDrawingRemoteRecord, using default value to proceed. Incoming recordIDforCKRecord: %{public}@", 173, 2, v55);
      swift_setDeallocating(v55);
      v70 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(v55 + 32, 1, v70);

      v276 = 0x1000000000000;
      v277 = 0x2000400000000;
      v274 = 0x1000000000000;
      v275 = 0x2000400000000;
      v287 = 0x1000000000000;
      v71 = v272;
      v5 = v273;
      v50 = v294;
      v12 = v289;
LABEL_17:
      v74 = *(void **)(v32 + OBJC_IVAR____TtC8Freeform40CRLFreehandDrawingBucketSyncRemoteRecord_ckMergeableRecordValue);
      v75 = v291;
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v12 + 56))(v291, 1, 1, v50);
      v76 = v5;
      v77 = *(void **)(v5 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_crdtContext);
      v78 = sub_100B01190();
      v79 = v74;
      v80 = v77;
      v81 = v292;
      CRCKMergeable.init(crdt:context:)(v75, v80, v50, v78);
      v82 = sub_1004CBA30((unint64_t *)&unk_1014064D0, &qword_101405628, (uint64_t)&protocol conformance descriptor for CRCKMergeable<A>);
      v83 = v296;
      CKMergeable.merge(_:)(v79, v71, v82);
      v296 = v83;
      v84 = v71;
      if (v83)
      {
        (*(void (**)(char *, uint64_t))(v290 + 8))(v81, v71);

        return;
      }
      v271 = v80;
      *(_QWORD *)&v291 = v79;
      v273 = v76;
      v85 = (uint64_t)v286;
      CRCKMergeable.crdt.getter(v71);
      v86 = v289;
      v87 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v289 + 48))(v85, 1, v50);
      v88 = v50;
      v89 = v86;
      if (v87 == 1)
      {
        sub_1004CB800(v85, (uint64_t *)&unk_1014064B0);
        v302._countAndFlagsBits = *(_QWORD *)(v295
                                            + OBJC_IVAR____TtC8Freeform34CRLFreehandDrawingBucketSyncRecord_bucketIndex);
        countAndFlagsBits = v302._countAndFlagsBits;
        *(_QWORD *)&v295 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
        v286 = v91;
        v280 = (char *)type metadata accessor for UUID(0);
        v92 = sub_1004B804C(&qword_101405F00);
        v93 = sub_1004B7878((unint64_t *)&qword_1013DE630, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v94 = sub_1004CBA30(&qword_101403070, &qword_101405F00, (uint64_t)&protocol conformance descriptor for Ref<A>);
        v95 = sub_1004CBA30((unint64_t *)&unk_1014064F0, &qword_101405F00, (uint64_t)&protocol conformance descriptor for Ref<A>);
        v96 = v282;
        v97 = v93;
        v88 = v294;
        CRDictionary.init()(v280, v92, &protocol witness table for UUID, v97, v94, v95);
        v98 = sub_1004CBA30(&qword_101405EF0, (uint64_t *)&unk_1014148B0, (uint64_t)&protocol conformance descriptor for CRDictionary<A, B>);
        v99 = v288;
        Capsule<>.init(_:id:)(v96, v295, v286, v283, v98);
        v100 = sub_1004B804C((uint64_t *)&unk_101406AD0);
        v101 = (_QWORD *)swift_allocObject(v100, *(unsigned int *)(v100 + 48), *(unsigned __int16 *)(v100 + 52));
        *((_BYTE *)v101 + *(_QWORD *)(*v101 + 136)) = 0;
        v101[2] = countAndFlagsBits;
        (*(void (**)(char *, char *, uint64_t))(v89 + 32))((char *)v101 + *(_QWORD *)(*v101 + 120), v99, v88);
        v102 = 0;
      }
      else
      {
        v103 = *(void (**)(char *, uint64_t, uint64_t))(v86 + 32);
        v104 = v280;
        v103(v280, v85, v88);
        v105 = *(_QWORD *)(v295 + OBJC_IVAR____TtC8Freeform34CRLFreehandDrawingBucketSyncRecord_bucketIndex);
        v106 = v288;
        v103(v288, (uint64_t)v104, v88);
        v107 = sub_1004B804C((uint64_t *)&unk_101406AD0);
        v101 = (_QWORD *)swift_allocObject(v107, *(unsigned int *)(v107 + 48), *(unsigned __int16 *)(v107 + 52));
        *((_BYTE *)v101 + *(_QWORD *)(*v101 + 136)) = 0;
        v101[2] = v105;
        v103((char *)v101 + *(_QWORD *)(*v101 + 120), (uint64_t)v106, v88);
        v102 = 1;
      }
      v108 = v285;
      *((_BYTE *)v101 + *(_QWORD *)(*v101 + 136)) = v102;
      v109 = (_QWORD *)((char *)v101 + *(_QWORD *)(*v101 + 128));
      v110 = v276;
      *v109 = v287;
      v109[1] = v110;
      v111 = v275;
      v109[2] = v277;
      v109[3] = v111;
      v109[4] = v274;
      v112 = (char *)v101 + *(_QWORD *)(*v101 + 120);
      v113 = swift_beginAccess(v112, &v302, 0, 0);
      v114 = v89;
      (*(void (**)(char *, char *, uint64_t, __n128))(v89 + 16))(v108, v112, v88, v113);
      if (qword_1013DCB10 != -1)
        swift_once(&qword_1013DCB10, sub_1005DE88C);
      v115 = type metadata accessor for CRCodableVersion(0);
      v116 = sub_1004F2A1C(v115, (uint64_t)qword_10147EB08);
      v117 = sub_1004CBA30(&qword_101405EF0, (uint64_t *)&unk_1014148B0, (uint64_t)&protocol conformance descriptor for CRDictionary<A, B>);
      v118 = v296;
      v119 = Capsule<>.serializedData(_:version:allowedAppFormats:)(v271, v116, 0, v88, v117);
      v296 = v118;
      if (v118)
      {
        (*(void (**)(char *, uint64_t))(v89 + 8))(v108, v88);
        swift_release(v101);

        (*(void (**)(char *, uint64_t))(v290 + 8))(v292, v84);
        return;
      }
      v136 = v119;
      v137 = v120;
      v272 = v84;
      (*(void (**)(char *, uint64_t))(v114 + 8))(v108, v88);
      v138 = v101;
      v139 = sub_100B4B188(v291);
      v141 = v140;
      v142 = v279;
      sub_1004B8460(v293, v279, type metadata accessor for CRLBoardIdentifier);
      v143 = v138[2];
      v144 = *(_QWORD *)(*v138 + 128);
      v271 = v138;
      v145 = (char *)v138 + v144;
      v146 = *(_OWORD *)v145;
      v294 = *((_OWORD *)v145 + 1);
      v295 = v146;
      v293 = *((_QWORD *)v145 + 4);
      v147 = type metadata accessor for CRLFreehandDrawingBucketDatabaseRow(0);
      v148 = swift_allocObject(v147, *(unsigned int *)(v147 + 48), *(unsigned __int16 *)(v147 + 52));
      *(_OWORD *)(v148 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData) = xmmword_100F062D0;
      *(_OWORD *)(v148 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData) = xmmword_100F062D0;
      v149 = v142;
      v150 = v141;
      v151 = v139;
      v152 = v137;
      sub_1004B84E0(v149, v148 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_boardIdentifier, type metadata accessor for CRLBoardIdentifier);
      *(_QWORD *)(v148 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketIndex) = v143;
      v153 = (uint64_t *)(v148 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData);
      *v153 = v136;
      v153[1] = v137;
      *(_QWORD *)(v148 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_unsyncedChanges) = 0;
      v154 = (uint64_t *)(v148 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData);
      v155 = *(_QWORD *)(v148 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData);
      v156 = *(_QWORD *)(v148 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData + 8);
      v157 = v281;
      v158 = v284;
      *v154 = v281;
      v154[1] = v158;
      sub_10057939C(v157, v158);
      sub_1004BE310(v136, v152);
      sub_10057939C(v151, v150);
      sub_1004BE2FC(v155, v156);
      v159 = (uint64_t *)(v148 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData);
      v160 = *(_QWORD *)(v148 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData);
      v161 = *(_QWORD *)(v148
                       + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData
                       + 8);
      *v159 = v151;
      v159[1] = v150;
      sub_1004BE2FC(v160, v161);
      v162 = v148 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_minRequiredVersions;
      v163 = v294;
      *(_OWORD *)v162 = v295;
      *(_OWORD *)(v162 + 16) = v163;
      *(_QWORD *)(v162 + 32) = v293;
      if ((_BYTE)v278)
      {
        v164 = v296;
        if (v278 == 1)
          sub_100AAB4DC(v148);
        else
          sub_100AAAC68(v148);
        v253 = v272;
        v296 = v164;
        if (v164)
        {
          swift_setDeallocating(v148);
          sub_1004B84A4(v148 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_boardIdentifier, type metadata accessor for CRLBoardIdentifier);
          sub_1004BBBC8(*(_QWORD *)(v148 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData), *(_QWORD *)(v148 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData + 8));
          sub_1004BE2FC(*(_QWORD *)(v148 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData), *(_QWORD *)(v148 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData + 8));
          sub_1004BE2FC(*(_QWORD *)(v148 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData), *(_QWORD *)(v148+ OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData+ 8));
          swift_deallocClassInstance(v148, *(unsigned int *)(*(_QWORD *)v148 + 48), *(unsigned __int16 *)(*(_QWORD *)v148 + 52));

          sub_1004BE2FC(v151, v150);
          sub_1004BBBC8(v136, v152);
          swift_release(v271);
          (*(void (**)(char *, uint64_t))(v290 + 8))(v292, v253);
          return;
        }
        swift_setDeallocating(v148);
        sub_1004B84A4(v148 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_boardIdentifier, type metadata accessor for CRLBoardIdentifier);
        sub_1004BBBC8(*(_QWORD *)(v148 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData), *(_QWORD *)(v148 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData + 8));
        sub_1004BE2FC(*(_QWORD *)(v148 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData), *(_QWORD *)(v148 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData + 8));
        sub_1004BE2FC(*(_QWORD *)(v148 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData), *(_QWORD *)(v148+ OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData+ 8));
        swift_deallocClassInstance(v148, *(unsigned int *)(*(_QWORD *)v148 + 48), *(unsigned __int16 *)(*(_QWORD *)v148 + 52));
      }
      else
      {
        if (qword_1013DD870 != -1)
          swift_once(&qword_1013DD870, sub_100A059E0);
        swift_beginAccess(&static OS_os_log.dataSync, v301, 0, 0);
        v251 = (id)static OS_os_log.dataSync;
        v252 = static os_log_type_t.error.getter(v251);
        sub_100A06EBC((uint64_t)v251, &_mh_execute_header, v252, "CKMergeable path for mergeFreehandDrawing should never be called with .trackAsUnsyncedChanges", 93, 2, (uint64_t)_swiftEmptyArrayStorage);
        swift_setDeallocating(v148);
        sub_1004B84A4(v148 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_boardIdentifier, type metadata accessor for CRLBoardIdentifier);
        sub_1004BBBC8(*(_QWORD *)(v148 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData), *(_QWORD *)(v148 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData + 8));
        sub_1004BE2FC(*(_QWORD *)(v148 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData), *(_QWORD *)(v148 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData + 8));
        sub_1004BE2FC(*(_QWORD *)(v148 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData), *(_QWORD *)(v148+ OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData+ 8));
        swift_deallocClassInstance(v148, *(unsigned int *)(*(_QWORD *)v148 + 48), *(unsigned __int16 *)(*(_QWORD *)v148 + 52));

        v253 = v272;
      }

      sub_1004BE2FC(v151, v150);
      sub_1004BBBC8(v136, v152);
      v254 = v292;
      goto LABEL_62;
    }
LABEL_70:
    swift_once(&qword_1013DD870, sub_100A059E0);
    goto LABEL_15;
  }
}

uint64_t sub_100AAA444(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  id v12;
  void (*v13)(_QWORD *, uint64_t);
  Swift::String v14;
  void *object;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v46;
  unint64_t v47;
  void (*v48)(_QWORD *, uint64_t, uint64_t);
  void (*v49)(_QWORD *, uint64_t);
  void *v50;
  id v51;
  sqlite3_stmt **v52;
  void *v53;
  id v54;
  uint64_t v55;
  _QWORD *inited;
  uint64_t v57;
  void *v58;
  id v59;
  char v60;
  sqlite3_stmt *v61;
  void *v62;
  id v63;
  uint64_t v64;
  void (*v65)(_QWORD *, uint64_t);
  void (*v66)(_QWORD *, uint64_t, uint64_t);
  _BYTE v67[8];
  uint64_t v68;
  uint64_t v69;
  _BYTE v70[8];
  _BYTE v71[48];
  _BYTE v72[72];
  uint64_t v73;
  unint64_t v74;
  _BYTE v75[32];

  v4 = v2;
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (uint64_t *)((char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(void **)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v9 = v10;
  v11 = enum case for DispatchPredicate.onQueue(_:);
  v66 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v7 + 104);
  v66(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  v12 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  v13 = *(void (**)(_QWORD *, uint64_t))(v7 + 8);
  v13(v9, v6);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_20:
    swift_once(&qword_1013DD858, sub_100A05554);
    goto LABEL_5;
  }
  v64 = a2;
  v65 = v13;
  v73 = 0;
  v74 = 0xE000000000000000;
  _StringGuts.grow(_:)(44);
  swift_bridgeObjectRelease(v74);
  v73 = 0x205443454C4553;
  v74 = 0xE700000000000000;
  v14._countAndFlagsBits = sub_100AFBAAC(0, 0xE000000000000000);
  object = v14._object;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(object);
  v16._countAndFlagsBits = 0x204D4F524620;
  v16._object = (void *)0xE600000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0xD000000000000018;
  v17._object = (void *)0x8000000100FEF1F0;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 0x2820455245485720;
  v18._object = (void *)0xE800000000000000;
  String.append(_:)(v18);
  v19._object = (void *)0x8000000100FEF210;
  v19._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 0x444E41203F203D20;
  v20._object = (void *)0xE900000000000020;
  String.append(_:)(v20);
  v21._countAndFlagsBits = 0x695F74656B637562;
  v21._object = (void *)0xEC0000007865646ELL;
  String.append(_:)(v21);
  v22._countAndFlagsBits = 0x29203F203D20;
  v22._object = (void *)0xE600000000000000;
  String.append(_:)(v22);
  v23 = v73;
  v24 = v74;
  v25 = *(_QWORD *)(v4 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v26 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v26, v75);
  swift_retain(v25);
  v28 = sub_1006B77CC(v27, v23, v24);
  if (!v3)
  {
    v29 = v28;
    swift_release(v25);
    v30 = sub_10067BA88();
    v46 = v30;
    v47 = v31;
    sub_1006B5E80(v30, v31);
    sub_1004BBBC8(v46, v47);
    v48 = v66;
    if (v64 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else
    {
      v49 = v65;
      if (v64 <= 0x7FFFFFFF)
      {
        v50 = *(void **)(*(_QWORD *)(v29 + 16) + 32);
        *v9 = v50;
        v48(v9, v11, v6);
        v51 = v50;
        LOBYTE(v50) = _dispatchPreconditionTest(_:)(v9);
        v49(v9, v6);
        if ((v50 & 1) != 0)
        {
          v52 = (sqlite3_stmt **)(v29 + 24);
          swift_beginAccess(v29 + 24, &v73, 1, 0);
          sqlite3_bind_int(*(sqlite3_stmt **)(v29 + 24), 2, v64);
          v53 = *(void **)(*(_QWORD *)(v29 + 16) + 32);
          *v9 = v53;
          v48(v9, v11, v6);
          v54 = v53;
          LOBYTE(v53) = _dispatchPreconditionTest(_:)(v9);
          v49(v9, v6);
          if ((v53 & 1) != 0)
          {
            v55 = type metadata accessor for SQLiteRowIterator();
            inited = (_QWORD *)swift_initStackObject(v55, v71);
            inited[4] = 0;
            inited[5] = 1;
            inited[2] = v29;
            inited[3] = 0;
            swift_retain(v29);
            sub_1006B6B04();
            if (!v57)
            {
              swift_release(v29);
              swift_setDeallocating(inited);
              sub_1006B7DA4(inited[3], inited[4], inited[5]);
              v62 = *(void **)(*(_QWORD *)(v29 + 16) + 32);
              *v9 = v62;
              v66(v9, v11, v6);
              v63 = v62;
              LOBYTE(v62) = _dispatchPreconditionTest(_:)(v9);
              v49(v9, v6);
              if ((v62 & 1) != 0)
              {
                v38 = 0;
                v61 = *v52;
                if (!*v52)
                  goto LABEL_15;
                goto LABEL_14;
              }
LABEL_26:
              __break(1u);
            }
            v38 = sub_100AFBDE4(v57, 0);
            swift_release(v29);
            swift_setDeallocating(inited);
            sub_1006B7DA4(inited[3], inited[4], inited[5]);
            v58 = *(void **)(*(_QWORD *)(v29 + 16) + 32);
            *v9 = v58;
            v66(v9, v11, v6);
            v59 = v58;
            v60 = _dispatchPreconditionTest(_:)(v9);
            v49(v9, v6);
            if ((v60 & 1) != 0)
            {
              v61 = *v52;
              if (!*v52)
              {
LABEL_15:
                swift_release(v29);
                return v38;
              }
LABEL_14:
              sqlite3_finalize(v61);
              *v52 = 0;
              goto LABEL_15;
            }
LABEL_25:
            __break(1u);
            goto LABEL_26;
          }
LABEL_24:
          __break(1u);
          goto LABEL_25;
        }
LABEL_23:
        __break(1u);
        goto LABEL_24;
      }
    }
    __break(1u);
    goto LABEL_23;
  }
  swift_release(v25);
  if (qword_1013DD858 != -1)
    goto LABEL_20;
LABEL_5:
  swift_beginAccess(&static OS_os_log.boardStore, &v73, 0, 0);
  v32 = (void *)static OS_os_log.boardStore;
  v33 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  v34 = swift_initStackObject(v33, v72);
  *(_OWORD *)(v34 + 16) = xmmword_100EF5E40;
  swift_getErrorValue(v3, v70, v67);
  v35 = v68;
  v36 = v69;
  v37 = v32;
  v38 = Error.localizedDescription.getter(v35, v36);
  v40 = v39;
  *(_QWORD *)(v34 + 56) = &type metadata for String;
  v41 = sub_1004CFC2C();
  *(_QWORD *)(v34 + 64) = v41;
  *(_QWORD *)(v34 + 32) = v38;
  *(_QWORD *)(v34 + 40) = v40;
  v42 = static os_log_type_t.error.getter(v41);
  sub_100A06EBC((uint64_t)v37, &_mh_execute_header, v42, "Failed to fetch a board drawing row with error %@", 49, 2, v34);
  swift_setDeallocating(v34);
  v43 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(v34 + 32, 1, v43);

  swift_willThrow(v44);
  return v38;
}

uint64_t sub_100AAAAC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  void (*v12)(_BYTE *, uint64_t, uint64_t);
  uint64_t v13;
  void (*v14)(_BYTE *, uint64_t);
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _BYTE v19[24];
  _BYTE v20[24];

  v2 = v1;
  v4 = sub_1004B804C(&qword_101405EC0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = &v19[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  v10 = &v19[-v9];
  v11 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 120);
  swift_beginAccess(v11, v20, 0, 0);
  v12 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16);
  v12(v10, v11, v4);
  v13 = a1 + *(_QWORD *)(*(_QWORD *)a1 + 120);
  swift_beginAccess(v13, v19, 0, 0);
  v12(v8, v13, v4);
  LOBYTE(v13) = Capsule.hasDelta(from:)(v8, v4);
  v14 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
  v14(v8, v4);
  v14(v10, v4);
  v15 = 2;
  if ((v13 & 1) == 0)
    v15 = 0;
  v16 = (_QWORD *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 128));
  v17 = (_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 + 128));
  if (*v16 != *v17)
    v15 |= 4uLL;
  if (v16[1] != v17[1])
    v15 |= 8uLL;
  if (v16[2] != v17[2])
    v15 |= 0x10uLL;
  if (v16[3] != v17[3])
    v15 |= 0x20uLL;
  if (v16[4] == v17[4])
    return v15;
  else
    return v15 | 0x40;
}

void sub_100AAAC68(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  unsigned int v10;
  void (*v11)(_QWORD *, _QWORD, uint64_t);
  id v12;
  void (*v13)(_QWORD *, uint64_t);
  uint64_t v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  void *v48;
  void (*v49)(_QWORD *, _QWORD, uint64_t);
  id v50;
  uint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  void *v54;
  id v55;
  uint64_t v56;
  sqlite3_int64 *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  void (*v63)(_QWORD *, uint64_t, uint64_t);
  void *v64;
  uint64_t v65;
  id v66;
  sqlite3_stmt **v67;
  void *v68;
  id v69;
  uint64_t (*v70)(_QWORD *, uint64_t);
  int v71;
  void *v72;
  id v73;
  int v74;
  unint64_t v75;
  uint64_t v76;
  __n128 v77;
  void *v78;
  id v79;
  uint64_t v80;
  unsigned int v81;
  void (*v82)(_QWORD *, uint64_t);
  void (*v83)(_QWORD *, _QWORD, uint64_t);
  _BYTE v84[24];
  _BYTE v85[24];
  uint64_t v86;
  unint64_t v87;
  _BYTE v88[32];

  v3 = v1;
  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (uint64_t *)((char *)&v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v8 = v9;
  v10 = enum case for DispatchPredicate.onQueue(_:);
  v11 = *(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104);
  v11(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  v12 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  v13 = *(void (**)(_QWORD *, uint64_t))(v6 + 8);
  v13(v8, v5);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    __break(1u);
    goto LABEL_26;
  }
  v81 = v10;
  v82 = v13;
  v83 = v11;
  v14 = 0xD00000000000001ELL;
  v86 = 0;
  v87 = 0xE000000000000000;
  _StringGuts.grow(_:)(108);
  v15._countAndFlagsBits = 0x20455441445055;
  v15._object = (void *)0xE700000000000000;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0xD000000000000018;
  v16._object = (void *)0x8000000100FEF1F0;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0x2054455320;
  v17._object = (void *)0xE500000000000000;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 0x645F74656B637562;
  v18._object = (void *)0xEB00000000617461;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 0x202C3F203D20;
  v19._object = (void *)0xE600000000000000;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 0xD000000000000010;
  v20._object = (void *)0x8000000100FEEB40;
  String.append(_:)(v20);
  v21._countAndFlagsBits = 0x202C3F203D20;
  v21._object = (void *)0xE600000000000000;
  String.append(_:)(v21);
  v22._object = (void *)0xE900000000000061;
  v22._countAndFlagsBits = 0x7461645F636E7973;
  String.append(_:)(v22);
  v23._countAndFlagsBits = 0x202C3F203D20;
  v23._object = (void *)0xE600000000000000;
  String.append(_:)(v23);
  v24._object = (void *)0x8000000100FEF270;
  v24._countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v24);
  v25._countAndFlagsBits = 0x202C3F203D20;
  v25._object = (void *)0xE600000000000000;
  String.append(_:)(v25);
  v26._countAndFlagsBits = 0xD00000000000001FLL;
  v26._object = (void *)0x8000000100FEF290;
  String.append(_:)(v26);
  v27._countAndFlagsBits = 0x202C3F203D20;
  v27._object = (void *)0xE600000000000000;
  String.append(_:)(v27);
  v28._object = (void *)0x8000000100FEF2B0;
  v28._countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v28);
  v29._countAndFlagsBits = 0x202C3F203D20;
  v29._object = (void *)0xE600000000000000;
  String.append(_:)(v29);
  v30._countAndFlagsBits = 0xD000000000000038;
  v30._object = (void *)0x8000000100FEF2D0;
  String.append(_:)(v30);
  v31._countAndFlagsBits = 0x202C3F203D20;
  v31._object = (void *)0xE600000000000000;
  String.append(_:)(v31);
  v32._countAndFlagsBits = 0xD000000000000037;
  v32._object = (void *)0x8000000100FEF310;
  String.append(_:)(v32);
  v33._countAndFlagsBits = 0x202C3F203D20;
  v33._object = (void *)0xE600000000000000;
  String.append(_:)(v33);
  v34._countAndFlagsBits = 0xD000000000000026;
  v34._object = (void *)0x8000000100FEEB60;
  String.append(_:)(v34);
  v35._countAndFlagsBits = 0x454857203F203D20;
  v35._object = (void *)0xEB00000000204552;
  String.append(_:)(v35);
  v36._countAndFlagsBits = 0xD000000000000011;
  v36._object = (void *)0x8000000100FEF210;
  String.append(_:)(v36);
  v37._countAndFlagsBits = 0x444E41203F203D20;
  v37._object = (void *)0xE900000000000020;
  String.append(_:)(v37);
  v38._countAndFlagsBits = 0x695F74656B637562;
  v38._object = (void *)0xEC0000007865646ELL;
  String.append(_:)(v38);
  v39._countAndFlagsBits = 1059077408;
  v39._object = (void *)0xE400000000000000;
  String.append(_:)(v39);
  v40 = v86;
  v41 = v87;
  v42 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v43 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v43, v88);
  swift_retain(v42);
  v45 = sub_1006B77CC(v44, v40, v41);
  swift_release(v42);
  if (v2)
    return;
  sub_1006B5E80(*(_QWORD *)(a1 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData), *(_QWORD *)(a1 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData + 8));
  sub_1006B5B50(*(_QWORD *)(a1 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_unsyncedChanges), 2);
  v46 = (uint64_t *)(a1 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData);
  v47 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData + 8);
  if (v47 >> 60 == 15)
  {
    v48 = *(void **)(*(_QWORD *)(v45 + 16) + 32);
    *v8 = v48;
    v49 = v83;
    v83(v8, v81, v5);
    v50 = v48;
    LOBYTE(v48) = _dispatchPreconditionTest(_:)(v8);
    v82(v8, v5);
    if ((v48 & 1) != 0)
    {
      swift_beginAccess(v45 + 24, &v86, 0, 0);
      sqlite3_bind_null(*(sqlite3_stmt **)(v45 + 24), 3);
      goto LABEL_7;
    }
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v51 = *v46;
  sub_1004BE310(*v46, *(_QWORD *)(a1 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData + 8));
  sub_1006B5E80(v51, v47);
  sub_1004BE2FC(v51, v47);
  v49 = v83;
LABEL_7:
  v52 = (uint64_t *)(a1 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData);
  v53 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData + 8);
  if (v53 >> 60 != 15)
  {
    v56 = *v52;
    sub_1004BE310(*v52, *(_QWORD *)(a1 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData + 8));
    sub_1006B5E80(v56, v53);
    sub_1004BE2FC(v56, v53);
    goto LABEL_11;
  }
  v54 = *(void **)(*(_QWORD *)(v45 + 16) + 32);
  *v8 = v54;
  v49(v8, v81, v5);
  v55 = v54;
  LOBYTE(v54) = _dispatchPreconditionTest(_:)(v8);
  v82(v8, v5);
  if ((v54 & 1) == 0)
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  swift_beginAccess(v45 + 24, v85, 0, 0);
  sqlite3_bind_null(*(sqlite3_stmt **)(v45 + 24), 4);
LABEL_11:
  v57 = (sqlite3_int64 *)(a1 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_minRequiredVersions);
  sub_1006B5B50(*(_QWORD *)(a1 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_minRequiredVersions), 5);
  sub_1006B5B50(v57[1], 6);
  sub_1006B5B50(v57[2], 7);
  sub_1006B5B50(v57[3], 8);
  sub_1006B5B50(v57[4], 9);
  v58 = sub_10067BA88();
  v60 = v58;
  v61 = v59;
  sub_1006B5E80(v58, v59);
  sub_1004BBBC8(v60, v61);
  v62 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketIndex);
  if (v62 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_28;
  v63 = v83;
  if (v62 > 0x7FFFFFFF)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v64 = *(void **)(*(_QWORD *)(v45 + 16) + 32);
  *v8 = v64;
  v65 = v81;
  v63(v8, v81, v5);
  v66 = v64;
  LOBYTE(v64) = _dispatchPreconditionTest(_:)(v8);
  v82(v8, v5);
  if ((v64 & 1) == 0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v67 = (sqlite3_stmt **)(v45 + 24);
  swift_beginAccess(v45 + 24, v84, 1, 0);
  sqlite3_bind_int(*(sqlite3_stmt **)(v45 + 24), 11, v62);
  v68 = *(void **)(*(_QWORD *)(v45 + 16) + 32);
  *v8 = v68;
  v63(v8, v65, v5);
  v69 = v68;
  LOBYTE(v68) = _dispatchPreconditionTest(_:)(v8);
  v70 = (uint64_t (*)(_QWORD *, uint64_t))v82;
  v82(v8, v5);
  if ((v68 & 1) == 0)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v71 = sqlite3_step(*v67);
  if (v71 != 101)
    goto LABEL_22;
  v72 = *(void **)(*(_QWORD *)(v45 + 16) + 32);
  *v8 = v72;
  v83(v8, v81, v5);
  v73 = v72;
  v14 = _dispatchPreconditionTest(_:)(v8);
  v71 = v70(v8, v5);
  if ((v14 & 1) == 0)
  {
    __break(1u);
LABEL_22:
    v74 = v71;
    v75 = sub_1006B79EC();
    swift_allocError(&type metadata for SQLiteError, v75, 0, 0);
    *(_DWORD *)v76 = v74;
    *(_QWORD *)(v76 + 8) = v14 + 11;
    *(_QWORD *)(v76 + 16) = 0x8000000100FF0980;
    swift_willThrow(v77);
    v78 = *(void **)(*(_QWORD *)(v45 + 16) + 32);
    *v8 = v78;
    v83(v8, v81, v5);
    v79 = v78;
    LOBYTE(v78) = _dispatchPreconditionTest(_:)(v8);
    v70(v8, v5);
    if ((v78 & 1) != 0)
      goto LABEL_23;
LABEL_32:
    __break(1u);
  }
LABEL_23:
  if (*v67)
  {
    sqlite3_finalize(*v67);
    *v67 = 0;
  }
  swift_release(v45);
}

void sub_100AAB4DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  void (*v10)(_QWORD);
  id v11;
  void (*v12)(_QWORD *, uint64_t);
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  Swift::String v42;
  Swift::String v43;
  Swift::String v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  void (*v56)(_QWORD *, uint64_t);
  void *v57;
  id v58;
  sqlite3_stmt **v59;
  uint64_t v60;
  uint64_t *v61;
  unint64_t v62;
  void *v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  unint64_t v68;
  void *v69;
  id v70;
  void (*v71)(_QWORD *, uint64_t);
  uint64_t v72;
  uint64_t v73;
  sqlite3_int64 *v74;
  void *v75;
  id v76;
  int v77;
  void *v78;
  id v79;
  int v80;
  unint64_t v81;
  uint64_t v82;
  __n128 v83;
  void *v84;
  id v85;
  void (*v86)(_QWORD *, uint64_t);
  uint64_t v87;
  unsigned int v88;
  void (*v89)(_QWORD *, _QWORD, uint64_t);
  uint64_t v90;
  unint64_t v91;
  _BYTE v92[32];

  v3 = v1;
  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (void (**)(_QWORD *, uint64_t))((char *)&v86 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v8 = v9;
  v10 = *(void (**)(_QWORD))(v6 + 104);
  v88 = enum case for DispatchPredicate.onQueue(_:);
  v89 = (void (*)(_QWORD *, _QWORD, uint64_t))v10;
  v10(v8);
  v11 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  v12 = *(void (**)(_QWORD *, uint64_t))(v6 + 8);
  v12(v8, v5);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v86 = v12;
  v87 = a1;
  v90 = 0;
  v91 = 0xE000000000000000;
  _StringGuts.grow(_:)(152);
  v13._countAndFlagsBits = 0x4920545245534E49;
  v13._object = (void *)0xEC000000204F544ELL;
  String.append(_:)(v13);
  v14._countAndFlagsBits = 0xD000000000000018;
  v14._object = (void *)0x8000000100FEF1F0;
  String.append(_:)(v14);
  v15._countAndFlagsBits = 10272;
  v15._object = (void *)0xE200000000000000;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0xD000000000000011;
  v16._object = (void *)0x8000000100FEF210;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 8236;
  v17._object = (void *)0xE200000000000000;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 0x695F74656B637562;
  v18._object = (void *)0xEC0000007865646ELL;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 8236;
  v19._object = (void *)0xE200000000000000;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 0x645F74656B637562;
  v20._object = (void *)0xEB00000000617461;
  String.append(_:)(v20);
  v21._countAndFlagsBits = 8236;
  v21._object = (void *)0xE200000000000000;
  String.append(_:)(v21);
  v22._object = (void *)0x8000000100FEEB40;
  v22._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v22);
  v23._countAndFlagsBits = 8236;
  v23._object = (void *)0xE200000000000000;
  String.append(_:)(v23);
  v24._countAndFlagsBits = 0x7461645F636E7973;
  v24._object = (void *)0xE900000000000061;
  String.append(_:)(v24);
  v25._countAndFlagsBits = 8236;
  v25._object = (void *)0xE200000000000000;
  String.append(_:)(v25);
  v26._object = (void *)0x8000000100FEF270;
  v26._countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v26);
  v27._countAndFlagsBits = 8236;
  v27._object = (void *)0xE200000000000000;
  String.append(_:)(v27);
  v28._countAndFlagsBits = 0xD00000000000001FLL;
  v28._object = (void *)0x8000000100FEF290;
  String.append(_:)(v28);
  v29._countAndFlagsBits = 8236;
  v29._object = (void *)0xE200000000000000;
  String.append(_:)(v29);
  v30._object = (void *)0x8000000100FEF2B0;
  v30._countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v30);
  v31._countAndFlagsBits = 8236;
  v31._object = (void *)0xE200000000000000;
  String.append(_:)(v31);
  v32._object = (void *)0x8000000100FEF2D0;
  v32._countAndFlagsBits = 0xD000000000000038;
  String.append(_:)(v32);
  v33._countAndFlagsBits = 8236;
  v33._object = (void *)0xE200000000000000;
  String.append(_:)(v33);
  v34._countAndFlagsBits = 0xD000000000000037;
  v34._object = (void *)0x8000000100FEF310;
  String.append(_:)(v34);
  v35._countAndFlagsBits = 8236;
  v35._object = (void *)0xE200000000000000;
  String.append(_:)(v35);
  v36._countAndFlagsBits = 0xD000000000000026;
  v36._object = (void *)0x8000000100FEEB60;
  String.append(_:)(v36);
  v37._object = (void *)0x8000000100FF09B0;
  v37._countAndFlagsBits = 0xD000000000000038;
  String.append(_:)(v37);
  v38._countAndFlagsBits = 0xD000000000000011;
  v38._object = (void *)0x8000000100FEF210;
  String.append(_:)(v38);
  v39._countAndFlagsBits = 8236;
  v39._object = (void *)0xE200000000000000;
  String.append(_:)(v39);
  v40._countAndFlagsBits = 0x695F74656B637562;
  v40._object = (void *)0xEC0000007865646ELL;
  String.append(_:)(v40);
  v41._object = (void *)0x8000000100FEFE60;
  v41._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v41);
  v42._countAndFlagsBits = 0x645F74656B637562;
  v42._object = (void *)0xEB00000000617461;
  String.append(_:)(v42);
  v43._countAndFlagsBits = 0x756C637865203D20;
  v43._object = (void *)0xEC0000002E646564;
  String.append(_:)(v43);
  v44._countAndFlagsBits = 0x645F74656B637562;
  v44._object = (void *)0xEB00000000617461;
  String.append(_:)(v44);
  v45 = v90;
  v46 = v91;
  v47 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v48 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v48, v92);
  swift_retain(v47);
  v50 = sub_1006B77CC(v49, v45, v46);
  swift_release(v47);
  if (v2)
    return;
  v51 = v87;
  v52 = sub_10067BA88();
  v54 = v53;
  sub_1006B5E80(v52, v53);
  sub_1004BBBC8(v52, v54);
  v55 = *(_QWORD *)(v51 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketIndex);
  if (v55 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_26;
  v56 = v86;
  if (v55 > 0x7FFFFFFF)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v57 = *(void **)(*(_QWORD *)(v50 + 16) + 32);
  *v8 = v57;
  v89(v8, v88, v5);
  v58 = v57;
  LOBYTE(v57) = _dispatchPreconditionTest(_:)(v8);
  v56(v8, v5);
  if ((v57 & 1) == 0)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v59 = (sqlite3_stmt **)(v50 + 24);
  swift_beginAccess(v50 + 24, &v90, 1, 0);
  sqlite3_bind_int(*(sqlite3_stmt **)(v50 + 24), 2, v55);
  v60 = v87;
  sub_1006B5E80(*(_QWORD *)(v87 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData), *(_QWORD *)(v87 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData + 8));
  sub_1006B5B50(*(_QWORD *)(v60 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_unsyncedChanges), 4);
  v61 = (uint64_t *)(v60 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData);
  v62 = *(_QWORD *)(v60 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData + 8);
  if (v62 >> 60 == 15)
  {
    v63 = *(void **)(*(_QWORD *)(v50 + 16) + 32);
    *v8 = v63;
    v89(v8, v88, v5);
    v64 = v63;
    LOBYTE(v63) = _dispatchPreconditionTest(_:)(v8);
    v86(v8, v5);
    if ((v63 & 1) == 0)
    {
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    sqlite3_bind_null(*v59, 5);
  }
  else
  {
    v65 = *v61;
    sub_1004BE310(*v61, v62);
    sub_1006B5E80(v65, v62);
    v66 = v65;
    v60 = v87;
    sub_1004BE2FC(v66, v62);
  }
  v67 = (uint64_t *)(v60 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData);
  v68 = *(_QWORD *)(v60 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData + 8);
  if (v68 >> 60 == 15)
  {
    v69 = *(void **)(*(_QWORD *)(v50 + 16) + 32);
    *v8 = v69;
    v89(v8, v88, v5);
    v70 = v69;
    LOBYTE(v69) = _dispatchPreconditionTest(_:)(v8);
    v71 = v86;
    v86(v8, v5);
    if ((v69 & 1) == 0)
    {
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    sqlite3_bind_null(*v59, 6);
  }
  else
  {
    v72 = *v67;
    sub_1004BE310(*v67, v68);
    sub_1006B5E80(v72, v68);
    v73 = v72;
    v60 = v87;
    sub_1004BE2FC(v73, v68);
    v71 = v86;
  }
  v74 = (sqlite3_int64 *)(v60 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_minRequiredVersions);
  sub_1006B5B50(*v74, 7);
  sub_1006B5B50(v74[1], 8);
  sub_1006B5B50(v74[2], 9);
  sub_1006B5B50(v74[3], 10);
  sub_1006B5B50(v74[4], 11);
  v75 = *(void **)(*(_QWORD *)(v50 + 16) + 32);
  *v8 = v75;
  v89(v8, v88, v5);
  v76 = v75;
  LOBYTE(v75) = _dispatchPreconditionTest(_:)(v8);
  v71(v8, v5);
  if ((v75 & 1) == 0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v77 = sqlite3_step(*v59);
  if (v77 != 101)
    goto LABEL_22;
  v78 = *(void **)(*(_QWORD *)(v50 + 16) + 32);
  *v8 = v78;
  v89(v8, v88, v5);
  v79 = v78;
  LOBYTE(v78) = _dispatchPreconditionTest(_:)(v8);
  v77 = ((uint64_t (*)(_QWORD *, uint64_t))v71)(v8, v5);
  if ((v78 & 1) == 0)
  {
    __break(1u);
LABEL_22:
    v80 = v77;
    v81 = sub_1006B79EC();
    swift_allocError(&type metadata for SQLiteError, v81, 0, 0);
    *(_DWORD *)v82 = v80;
    *(_QWORD *)(v82 + 8) = 0xD00000000000002ELL;
    *(_QWORD *)(v82 + 16) = 0x8000000100FF09F0;
    swift_willThrow(v83);
    v84 = *(void **)(*(_QWORD *)(v50 + 16) + 32);
    *v8 = v84;
    v89(v8, v88, v5);
    v85 = v84;
    LOBYTE(v84) = _dispatchPreconditionTest(_:)(v8);
    v71(v8, v5);
    if ((v84 & 1) != 0)
      goto LABEL_23;
LABEL_32:
    __break(1u);
  }
LABEL_23:
  if (*v59)
  {
    sqlite3_finalize(*v59);
    *v59 = 0;
  }
  swift_release(v50);
}

uint64_t sub_100AABD9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  _BYTE v11[24];
  _BYTE v12[24];

  v4 = *(_QWORD *)(a2 + 16);
  v5 = (uint64_t *)(a1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_transientSyncExclusions);
  swift_beginAccess(a1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_transientSyncExclusions, v12, 33, 0);
  v6 = *v5;
  if (*(_QWORD *)(v6 + 16))
  {
    v7 = sub_100843264(a3);
    if ((v8 & 1) != 0)
    {
      v9 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v7);
      swift_beginAccess(v9 + 32, v11, 33, 0);
      swift_retain(v9);
      sub_100B28CF4(v4);
      swift_endAccess(v11);
      swift_release(v9);
    }
  }
  return swift_endAccess(v12);
}

uint64_t sub_100AABE4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  id v9;
  void (*v10)(_QWORD *, uint64_t);
  Swift::String v11;
  void *object;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t inited;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v41;
  unint64_t v42;
  void *v43;
  void (*v44)(_QWORD *, uint64_t, uint64_t, __n128);
  id v45;
  void (*v46)(_QWORD *, uint64_t);
  void *v47;
  __n128 v48;
  id v49;
  sqlite3_stmt **v50;
  uint64_t v51;
  __n128 v52;
  void *v53;
  id v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  id v65;
  char v66;
  uint64_t v67;
  void (*v68)(_QWORD *, uint64_t);
  void (*v69)(_QWORD *, uint64_t, uint64_t, __n128);
  _BYTE v70[8];
  uint64_t v71;
  uint64_t v72;
  _BYTE v73[8];
  uint64_t v74[3];
  _BYTE v75[72];
  uint64_t v76;
  unint64_t v77;
  _BYTE v78[32];

  v2 = v0;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (uint64_t *)((char *)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v6 = v7;
  v8 = enum case for DispatchPredicate.onQueue(_:);
  v69 = *(void (**)(_QWORD *, uint64_t, uint64_t, __n128))(v4 + 104);
  ((void (*)(_QWORD *, _QWORD, uint64_t))v69)(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  v9 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  v10 = *(void (**)(_QWORD *, uint64_t))(v4 + 8);
  v10(v6, v3);
  if ((v7 & 1) == 0)
    goto LABEL_25;
  v68 = v10;
  v76 = 0;
  v77 = 0xE000000000000000;
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease(v77);
  v76 = 0x205443454C4553;
  v77 = 0xE700000000000000;
  v11._countAndFlagsBits = sub_100AFBAAC(0, 0xE000000000000000);
  object = v11._object;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(object);
  v13._countAndFlagsBits = 0x204D4F524620;
  v13._object = (void *)0xE600000000000000;
  String.append(_:)(v13);
  v14._countAndFlagsBits = 0xD000000000000018;
  v14._object = (void *)0x8000000100FEF1F0;
  String.append(_:)(v14);
  v15._countAndFlagsBits = 0x2820455245485720;
  v15._object = (void *)0xE800000000000000;
  String.append(_:)(v15);
  v16._object = (void *)0x8000000100FEF210;
  v16._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0x293F203D20;
  v17._object = (void *)0xE500000000000000;
  String.append(_:)(v17);
  v18 = v76;
  v19 = v77;
  v20 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v21 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v21, v78);
  swift_retain(v20);
  v23 = sub_1006B77CC(v22, v18, v19);
  if (v1)
  {
    swift_release(v20);
    if (qword_1013DD858 == -1)
    {
LABEL_5:
      swift_beginAccess(&static OS_os_log.boardStore, &v76, 0, 0);
      v27 = (void *)static OS_os_log.boardStore;
      v28 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      inited = swift_initStackObject(v28, v75);
      *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
      swift_getErrorValue(v1, v73, v70);
      v30 = v71;
      v31 = v72;
      v32 = v27;
      v33 = Error.localizedDescription.getter(v30, v31);
      v35 = v34;
      *(_QWORD *)(inited + 56) = &type metadata for String;
      v36 = sub_1004CFC2C();
      *(_QWORD *)(inited + 64) = v36;
      *(_QWORD *)(inited + 32) = v33;
      *(_QWORD *)(inited + 40) = v35;
      v37 = static os_log_type_t.error.getter(v36);
      sub_100A06EBC((uint64_t)v32, &_mh_execute_header, v37, "Failed to fetch board drawing rows with error %@", 48, 2, inited);
      swift_setDeallocating(inited);
      v38 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(inited + 32, 1, v38);

      swift_willThrow(v39);
      return v33;
    }
LABEL_26:
    swift_once(&qword_1013DD858, sub_100A05554);
    goto LABEL_5;
  }
  v24 = v23;
  swift_release(v20);
  v25 = sub_10067BA88();
  v41 = v25;
  v42 = v26;
  sub_1006B5E80(v25, v26);
  sub_1004BBBC8(v41, v42);
  v74[0] = (uint64_t)_swiftEmptyArrayStorage;
  v43 = *(void **)(*(_QWORD *)(v24 + 16) + 32);
  *v6 = v43;
  v44 = v69;
  ((void (*)(_QWORD *, uint64_t, uint64_t))v69)(v6, v8, v3);
  v45 = v43;
  LOBYTE(v43) = _dispatchPreconditionTest(_:)(v6);
  v46 = v68;
  v68(v6, v3);
  if ((v43 & 1) == 0)
  {
    __break(1u);
    goto LABEL_28;
  }
  v47 = *(void **)(*(_QWORD *)(v24 + 16) + 32);
  *v6 = v47;
  v48 = swift_retain(v24);
  v44(v6, v8, v3, v48);
  v49 = v47;
  LOBYTE(v47) = _dispatchPreconditionTest(_:)(v6);
  v46(v6, v3);
  if ((v47 & 1) == 0)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v50 = (sqlite3_stmt **)(v24 + 24);
  while (1)
  {
    sub_1006B7DA4(0, 0, 1);
    swift_beginAccess(v24 + 24, &v76, 0, 0);
    v55 = sqlite3_step(*v50);
    if (v55 != 100)
      break;
    v56 = swift_retain_n(v24, 2);
    v57 = sub_100AFBDE4(v56, 0);
    if (v57)
    {
      v58 = v57;
      swift_retain(v57);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v59);
      v61 = *(_QWORD *)((v74[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
      v60 = *(_QWORD *)((v74[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v61 >= v60 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v60 > 1, v61 + 1, 1);
      v51 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v61, v58);
      specialized Array._endMutation()(v51);
      swift_release(v58);
      v46 = v68;
    }
    v52 = swift_release(v24);
    v53 = *(void **)(*(_QWORD *)(v24 + 16) + 32);
    *v6 = v53;
    v69(v6, v8, v3, v52);
    v54 = v53;
    LOBYTE(v53) = _dispatchPreconditionTest(_:)(v6);
    v46(v6, v3);
    if ((v53 & 1) == 0)
      goto LABEL_24;
  }
  if (v55 && v55 != 101)
  {
    v62 = v55;
    sub_1006B7DA4(0, 0, 1);
    v63 = 0;
  }
  else
  {
    v62 = 0;
    v63 = 1;
  }
  v33 = v74[0];
  swift_release(v24);
  sub_1006B7DA4(v62, 0, v63);
  v64 = *(void **)(*(_QWORD *)(v24 + 16) + 32);
  *v6 = v64;
  ((void (*)(_QWORD *, uint64_t, uint64_t))v69)(v6, v8, v3);
  v65 = v64;
  v66 = _dispatchPreconditionTest(_:)(v6);
  v68(v6, v3);
  if ((v66 & 1) == 0)
LABEL_28:
    __break(1u);
  swift_beginAccess(v24 + 24, v74, 1, 0);
  if (*v50)
  {
    sqlite3_finalize(*v50);
    *v50 = 0;
  }
  swift_release(v24);
  return v33;
}

uint64_t sub_100AAC4DC(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t inited;
  uint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __n128 v57;
  uint64_t v59;
  double v60;
  void *v61;
  uint64_t v62;
  void (*v63)(_QWORD *, uint64_t, uint64_t, __n128);
  id v64;
  void (*v65)(_QWORD *, uint64_t);
  uint64_t v66;
  _QWORD *v67;
  void *v68;
  __n128 v69;
  id v70;
  uint64_t v71;
  __n128 v72;
  void *v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __n128 v90;
  uint64_t v91;
  void *v92;
  id v93;
  sqlite3_stmt *v94;
  _QWORD v95[2];
  uint64_t v96;
  void (*v97)(_QWORD *, uint64_t, uint64_t, __n128);
  unsigned int v98;
  void (*v99)(_QWORD *, uint64_t);
  char v100[8];
  uint64_t v101;
  uint64_t v102;
  char v103[8];
  unint64_t v104;
  char v105[24];
  char v106[48];
  char v107[72];
  uint64_t v108;
  unint64_t v109;
  char v110[8];

  v3 = v1;
  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (_QWORD *)((char *)v95 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(void **)(v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v9 = v10;
  v11 = enum case for DispatchPredicate.onQueue(_:);
  v97 = *(void (**)(_QWORD *, uint64_t, uint64_t, __n128))(v6 + 104);
  v97(v9, enum case for DispatchPredicate.onQueue(_:), v5, v7);
  v12 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  v99 = *(void (**)(_QWORD *, uint64_t))(v6 + 8);
  v99(v9, v5);
  if ((v10 & 1) == 0)
    goto LABEL_25;
  v98 = v11;
  if ((a1 & 1) != 0)
    v13 = 15649;
  else
    v13 = 15677;
  v108 = 0;
  v109 = 0xE000000000000000;
  _StringGuts.grow(_:)(79);
  v14._countAndFlagsBits = 0x205443454C4553;
  v14._object = (void *)0xE700000000000000;
  String.append(_:)(v14);
  v15._countAndFlagsBits = sub_100AFBAAC(0xD000000000000018, 0x8000000100FEF1F0);
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 0x204D4F524620;
  v16._object = (void *)0xE600000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0xD000000000000018;
  v17._object = (void *)0x8000000100FEF1F0;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 0x4A2052454E4E4920;
  v18._object = (void *)0xEC000000204E494FLL;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 0x736472616F62;
  v19._object = (void *)0xE600000000000000;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 542002976;
  v20._object = (void *)0xE400000000000000;
  String.append(_:)(v20);
  v21._countAndFlagsBits = 0xD000000000000018;
  v21._object = (void *)0x8000000100FEF1F0;
  String.append(_:)(v21);
  v22._countAndFlagsBits = 46;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  v23._countAndFlagsBits = 0xD000000000000011;
  v23._object = (void *)0x8000000100FEF210;
  String.append(_:)(v23);
  v24._countAndFlagsBits = 2112800;
  v24._object = (void *)0xE300000000000000;
  String.append(_:)(v24);
  v25._countAndFlagsBits = 0x736472616F62;
  v25._object = (void *)0xE600000000000000;
  String.append(_:)(v25);
  v26._countAndFlagsBits = 46;
  v26._object = (void *)0xE100000000000000;
  String.append(_:)(v26);
  v27._object = (void *)0x8000000100FD6350;
  v27._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v27);
  v28._countAndFlagsBits = 0x20455245485720;
  v28._object = (void *)0xE700000000000000;
  String.append(_:)(v28);
  v29._countAndFlagsBits = 0xD000000000000018;
  v29._object = (void *)0x8000000100FEF1F0;
  String.append(_:)(v29);
  v30._countAndFlagsBits = 46;
  v30._object = (void *)0xE100000000000000;
  String.append(_:)(v30);
  v31._object = (void *)0x8000000100FEEB40;
  v31._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v31);
  v32._countAndFlagsBits = 0x444E412030203E20;
  v32._object = (void *)0xE900000000000020;
  String.append(_:)(v32);
  v33._countAndFlagsBits = 0x736472616F62;
  v33._object = (void *)0xE600000000000000;
  String.append(_:)(v33);
  v34._countAndFlagsBits = 46;
  v34._object = (void *)0xE100000000000000;
  String.append(_:)(v34);
  v35._countAndFlagsBits = 0x616E5F72656E776FLL;
  v35._object = (void *)0xEA0000000000656DLL;
  String.append(_:)(v35);
  v36._countAndFlagsBits = 32;
  v36._object = (void *)0xE100000000000000;
  String.append(_:)(v36);
  v37._countAndFlagsBits = v13;
  v37._object = (void *)0xE200000000000000;
  String.append(_:)(v37);
  swift_bridgeObjectRelease();
  v38._countAndFlagsBits = 16160;
  v38._object = (void *)0xE200000000000000;
  String.append(_:)(v38);
  v39 = v108;
  v40 = v109;
  v104 = (unint64_t)_swiftEmptyArrayStorage;
  v41 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v42 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v42, v110);
  swift_retain(v41);
  v44 = sub_1006B77CC(v43, v39, v40);
  v11 = v2;
  if (v2)
  {
    swift_release(v41);
    swift_bridgeObjectRelease();
    if (qword_1013DD858 == -1)
    {
LABEL_7:
      swift_beginAccess(&static OS_os_log.boardStore, &v108, 0, 0);
      v45 = (void *)static OS_os_log.boardStore;
      v46 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      inited = swift_initStackObject(v46, v107);
      *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
      swift_getErrorValue(v11, v103, v100);
      v48 = v101;
      v49 = v102;
      v50 = v45;
      v51 = Error.localizedDescription.getter(v48, v49);
      v53 = v52;
      *(_QWORD *)(inited + 56) = &type metadata for String;
      v54 = sub_1004CFC2C();
      *(_QWORD *)(inited + 64) = v54;
      *(_QWORD *)(inited + 32) = v51;
      *(_QWORD *)(inited + 40) = v53;
      v55 = static os_log_type_t.error.getter(v54);
      sub_100A06EBC((uint64_t)v50, &_mh_execute_header, v55, "Failed to fetch a board record with error %@", 44, 2, inited);
      swift_setDeallocating(inited);
      v56 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(inited + 32, 1, v56);

      return swift_willThrow(v57);
    }
LABEL_26:
    swift_once(&qword_1013DD858, sub_100A05554);
    goto LABEL_7;
  }
  v59 = v44;
  swift_release(v41);
  v60 = sub_1006B5CA4(0, 0xE000000000000000, 1);
  v61 = *(void **)(*(_QWORD *)(v59 + 16) + 32);
  *v9 = v61;
  v62 = v98;
  v63 = v97;
  ((void (*)(_QWORD *, _QWORD, uint64_t, double))v97)(v9, v98, v5, v60);
  v64 = v61;
  LOBYTE(v61) = _dispatchPreconditionTest(_:)(v9);
  v65 = v99;
  v99(v9, v5);
  if ((v61 & 1) == 0)
  {
    __break(1u);
    goto LABEL_28;
  }
  v95[1] = 0;
  v66 = type metadata accessor for SQLiteRowIterator();
  v67 = (_QWORD *)swift_initStackObject(v66, v106);
  v67[3] = 0;
  v67[4] = 0;
  v95[0] = v67 + 4;
  v67[5] = 1;
  v67[2] = v59;
  v68 = *(void **)(*(_QWORD *)(v59 + 16) + 32);
  *v9 = v68;
  v96 = v59;
  v69 = swift_retain(v59);
  v63(v9, v62, v5, v69);
  v70 = v68;
  LOBYTE(v68) = _dispatchPreconditionTest(_:)(v9);
  v65(v9, v5);
  if ((v68 & 1) == 0)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v11 = v96;
  while (1)
  {
    v75 = v67[3];
    v76 = v67[4];
    v77 = v67[5];
    v67[3] = 0;
    v67[4] = 0;
    v67[5] = 1;
    sub_1006B7DA4(v75, v76, v77);
    swift_beginAccess(v11 + 24, &v108, 0, 0);
    v78 = sqlite3_step(*(sqlite3_stmt **)(v11 + 24));
    if (v78 != 100)
      break;
    v79 = swift_retain_n(v11, 2);
    v80 = sub_100AFBDE4(v79, 0);
    if (v80)
    {
      v81 = v80;
      swift_retain(v80);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v82);
      v84 = *(_QWORD *)((v104 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v83 = *(_QWORD *)((v104 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v84 >= v83 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v83 > 1, v84 + 1, 1);
      v71 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v84, v81);
      specialized Array._endMutation()(v71);
      swift_release(v81);
      v63 = v97;
    }
    v72 = swift_release(v11);
    v11 = v67[2];
    v73 = *(void **)(*(_QWORD *)(v11 + 16) + 32);
    *v9 = v73;
    v62 = v98;
    v63(v9, v98, v5, v72);
    v74 = v73;
    LOBYTE(v73) = _dispatchPreconditionTest(_:)(v9);
    v99(v9, v5);
    if ((v73 & 1) == 0)
      goto LABEL_24;
  }
  if (v78 && v78 != 101)
  {
    v85 = v78;
    v86 = v67[3];
    v87 = v67[4];
    v88 = v67[5];
    v67[3] = v85;
    v89 = v95[0];
    *(_QWORD *)v95[0] = 0;
    *(_QWORD *)(v89 + 8) = 0;
    sub_1006B7DA4(v86, v87, v88);
  }
  v90 = swift_release(v67);
  v91 = v96;
  v92 = *(void **)(*(_QWORD *)(v96 + 16) + 32);
  *v9 = v92;
  v63(v9, v62, v5, v90);
  v93 = v92;
  LOBYTE(v92) = _dispatchPreconditionTest(_:)(v9);
  v99(v9, v5);
  if ((v92 & 1) == 0)
LABEL_28:
    __break(1u);
  swift_beginAccess(v91 + 24, v105, 1, 0);
  v94 = *(sqlite3_stmt **)(v91 + 24);
  if (v94)
  {
    sqlite3_finalize(v94);
    *(_QWORD *)(v91 + 24) = 0;
  }
  swift_release(v91);
  return v104;
}

void sub_100AACCB8(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  os_unfair_lock_s *v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if ((a2 & 0xC000000000000001) != 0)
  {
    v13 = specialized _ArrayBuffer._getElementSlowPath(_:)(a1, a2);
    v8 = sub_100AFC268(v13);
    if (v8)
      goto LABEL_5;
    return;
  }
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10) <= a1)
  {
LABEL_9:
    __break(1u);
    return;
  }
  swift_retain(*(_QWORD *)(a2 + 8 * a1 + 32));
  v8 = sub_100AFC268(v7);
  if (v8)
  {
LABEL_5:
    v9 = (uint64_t)v8;
    v10 = *(os_unfair_lock_s **)(a3 + 16);
    os_unfair_lock_lock(v10);
    swift_retain(v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a4);
    v14 = *a4;
    *a4 = 0x8000000000000000;
    sub_100825D0C(v9, a1, isUniquelyReferenced_nonNull_native);
    v12 = *a4;
    *a4 = v14;
    swift_bridgeObjectRelease(v12);
    os_unfair_lock_unlock(v10);
    swift_release(v9);
  }
}

void sub_100AACDB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t (*v5)(_QWORD);
  char *v6;
  uint64_t v7;

  v1 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v1);
  v2 = type metadata accessor for CRLBoardDataStore.KeyValueTableKey(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1004B8460(v0, (uint64_t)v4, v5);
  v6 = (char *)&loc_100AACE80 + dword_100AAD214[swift_getEnumCaseMultiPayload(v4, v2)];
  __asm { BR              X10 }
}

uint64_t sub_100AACE90()
{
  void **v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  double v17;
  id v18;
  uint64_t v19;
  void *v20;
  void *v21;
  Swift::String v22;

  v2 = *v0;
  *(_QWORD *)(v1 - 64) = 0x6F7A5F6863746566;
  *(_QWORD *)(v1 - 56) = 0xEB000000005F656ELL;
  v3 = objc_msgSend(v2, "zoneName");
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 95;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  v9 = objc_msgSend(v2, "ownerName");
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v12 = v11;

  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(CKCurrentUserDefaultName);
  if (v10 == v13 && v12 == v14)
  {
    swift_bridgeObjectRelease_n(v12, 2);
    goto LABEL_8;
  }
  v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v12, v13, v14, 0);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v17 = swift_bridgeObjectRelease().n128_u64[0];
  if ((v16 & 1) != 0)
  {
LABEL_8:
    v19 = 0;
    v21 = (void *)0xE000000000000000;
    goto LABEL_9;
  }
  v18 = objc_msgSend(v2, "ownerName", v17);
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v21 = v20;

LABEL_9:
  v22._countAndFlagsBits = v19;
  v22._object = v21;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();

  return *(_QWORD *)(v1 - 64);
}

void sub_100AAD234()
{
  CKRecordID v0;
  Swift::String v1;

  sub_100757E04(&_mh_execute_header, (uint64_t)"init(rawValue:)", 15, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2, 6093, "Unexpected call to KeyValueTableKey initializer.", 48, 2u, (uint64_t)_swiftEmptyArrayStorage);
  sub_100518FC0((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"Unexpected call to KeyValueTableKey initializer.");
  sub_100519194((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"init(rawValue:)", 15, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2u, 6093, (uint64_t)"Unexpected call to KeyValueTableKey initializer.", 48, 2u);
  SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v0, v1);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Freeform/CRLAssert.swift", 24, 2, 348, 0);
  __break(1u);
}

void sub_100AAD320(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  sub_100AACDB4();
  *a1 = v2;
  a1[1] = v3;
}

void sub_100AAD344(uint64_t a1, void (*a2)(__n128), uint64_t a3, uint64_t a4, const unsigned __int8 **a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t inited;
  id v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  __n128 v31;
  void *v32;
  void (*v33)(_QWORD *, uint64_t, uint64_t, __n128);
  id v34;
  void (*v35)(_QWORD *, uint64_t);
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  const unsigned __int8 *v41;
  const unsigned __int8 **v42;
  const unsigned __int8 *v43;
  const unsigned __int8 *v44;
  void (*v45)(__n128);
  __n128 v46;
  void *v47;
  id v48;
  sqlite3_stmt *v49;
  _QWORD v50[2];
  void (*v51)(__n128);
  const unsigned __int8 **v52;
  void (*v53)(_QWORD *, uint64_t);
  char v54[48];
  char v55[72];
  uint64_t v56;
  unint64_t v57;
  void (*v58)(_QWORD *, uint64_t, uint64_t, __n128);

  v52 = a5;
  v50[1] = a3;
  v8 = type metadata accessor for DispatchPredicate(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (_QWORD *)((char *)v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = *(void **)(a4 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v12 = v13;
  v14 = enum case for DispatchPredicate.onQueue(_:);
  v58 = *(void (**)(_QWORD *, uint64_t, uint64_t, __n128))(v9 + 104);
  v58(v12, enum case for DispatchPredicate.onQueue(_:), v8, v10);
  v15 = v13;
  v16 = _dispatchPreconditionTest(_:)(v12);
  v53 = *(void (**)(_QWORD *, uint64_t))(v9 + 8);
  v53(v12, v8);
  if ((v16 & 1) == 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  v51 = a2;
  sub_100AACDB4();
  v16 = v17;
  v9 = v18;
  v56 = 0;
  v57 = 0xE000000000000000;
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease(v57);
  v19 = *(_QWORD *)(a4 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v20 = type metadata accessor for SQLiteStatement();
  swift_allocObject(v20, 32, 7);
  swift_retain(v19);
  v22 = sub_1006B77CC(v21, 0xD00000000000003ALL, 0x8000000100FF1F20);
  if (v5)
  {
    swift_release(v19);
    if (qword_1013DD858 == -1)
    {
LABEL_4:
      swift_beginAccess(&static OS_os_log.boardStore, &v56, 0, 0);
      v23 = (void *)static OS_os_log.boardStore;
      v24 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      inited = swift_initStackObject(v24, v55);
      *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
      *(_QWORD *)(inited + 56) = &type metadata for String;
      *(_QWORD *)(inited + 64) = sub_1004CFC2C();
      *(_QWORD *)(inited + 32) = v16;
      *(_QWORD *)(inited + 40) = v9;
      v26 = v23;
      v27 = static os_log_type_t.error.getter(v26);
      sub_100A06EBC((uint64_t)v26, &_mh_execute_header, v27, "Failed to fetch value for key %@", 32, 2, inited);
      swift_setDeallocating(inited);
      v28 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(inited + 32, 1, v28);

      swift_willThrow(v29);
      return;
    }
LABEL_15:
    swift_once(&qword_1013DD858, sub_100A05554);
    goto LABEL_4;
  }
  v30 = v22;
  swift_release(v19);
  sub_1006B5CA4(v16, v9, 1);
  v31 = swift_bridgeObjectRelease(v9);
  v32 = *(void **)(*(_QWORD *)(v30 + 16) + 32);
  *v12 = v32;
  v33 = v58;
  v58(v12, v14, v8, v31);
  v34 = v32;
  LOBYTE(v32) = _dispatchPreconditionTest(_:)(v12);
  v35 = v53;
  v53(v12, v8);
  if ((v32 & 1) == 0)
  {
    __break(1u);
LABEL_17:
    __break(1u);
    return;
  }
  v36 = type metadata accessor for SQLiteRowIterator();
  v37 = (_QWORD *)swift_initStackObject(v36, v54);
  v37[4] = 0;
  v37[5] = 1;
  v37[2] = v30;
  v37[3] = 0;
  sub_1006B6B04();
  v39 = v38;
  swift_setDeallocating(v37);
  sub_1006B7DA4(v37[3], v37[4], v37[5]);
  if (v39)
  {
    swift_retain(v39);
    v41 = sub_1006B6750(0, v39);
    v42 = v52;
    v43 = v52[1];
    *v52 = v41;
    v42[1] = v44;
    swift_release(v39);
    swift_bridgeObjectRelease(v43);
    v45 = v51;
    if (v51)
    {
      v46 = swift_retain(v39);
      v45(v46);
      swift_release(v39);
    }
    v40 = swift_release(v39);
  }
  v47 = *(void **)(*(_QWORD *)(v30 + 16) + 32);
  *v12 = v47;
  v33(v12, v14, v8, v40);
  v48 = v47;
  LOBYTE(v47) = _dispatchPreconditionTest(_:)(v12);
  v35(v12, v8);
  if ((v47 & 1) == 0)
    goto LABEL_17;
  swift_beginAccess(v30 + 24, &v56, 1, 0);
  v49 = *(sqlite3_stmt **)(v30 + 24);
  if (v49)
  {
    sqlite3_finalize(v49);
    *(_QWORD *)(v30 + 24) = 0;
  }
  swift_release(v30);
}

void sub_100AAD73C(uint64_t a1, void (*a2)(__n128), uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t inited;
  id v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  __n128 v31;
  void *v32;
  void (*v33)(_QWORD *, uint64_t, uint64_t, __n128);
  id v34;
  void (*v35)(_QWORD *, uint64_t);
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  _BYTE *v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  void (*v46)(__n128);
  __n128 v47;
  void *v48;
  id v49;
  sqlite3_stmt *v50;
  _QWORD v51[2];
  void (*v52)(__n128);
  uint64_t *v53;
  void (*v54)(_QWORD *, uint64_t);
  char v55[48];
  char v56[72];
  uint64_t v57;
  unint64_t v58;
  void (*v59)(_QWORD *, uint64_t, uint64_t, __n128);

  v53 = a5;
  v51[1] = a3;
  v8 = type metadata accessor for DispatchPredicate(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (_QWORD *)((char *)v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = *(void **)(a4 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v12 = v13;
  v14 = enum case for DispatchPredicate.onQueue(_:);
  v59 = *(void (**)(_QWORD *, uint64_t, uint64_t, __n128))(v9 + 104);
  v59(v12, enum case for DispatchPredicate.onQueue(_:), v8, v10);
  v15 = v13;
  v16 = _dispatchPreconditionTest(_:)(v12);
  v54 = *(void (**)(_QWORD *, uint64_t))(v9 + 8);
  v54(v12, v8);
  if ((v16 & 1) == 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  v52 = a2;
  sub_100AACDB4();
  v16 = v17;
  v9 = v18;
  v57 = 0;
  v58 = 0xE000000000000000;
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease(v58);
  v19 = *(_QWORD *)(a4 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v20 = type metadata accessor for SQLiteStatement();
  swift_allocObject(v20, 32, 7);
  swift_retain(v19);
  v22 = sub_1006B77CC(v21, 0xD00000000000003ALL, 0x8000000100FF1F20);
  if (v5)
  {
    swift_release(v19);
    if (qword_1013DD858 == -1)
    {
LABEL_4:
      swift_beginAccess(&static OS_os_log.boardStore, &v57, 0, 0);
      v23 = (void *)static OS_os_log.boardStore;
      v24 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      inited = swift_initStackObject(v24, v56);
      *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
      *(_QWORD *)(inited + 56) = &type metadata for String;
      *(_QWORD *)(inited + 64) = sub_1004CFC2C();
      *(_QWORD *)(inited + 32) = v16;
      *(_QWORD *)(inited + 40) = v9;
      v26 = v23;
      v27 = static os_log_type_t.error.getter(v26);
      sub_100A06EBC((uint64_t)v26, &_mh_execute_header, v27, "Failed to fetch value for key %@", 32, 2, inited);
      swift_setDeallocating(inited);
      v28 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(inited + 32, 1, v28);

      swift_willThrow(v29);
      return;
    }
LABEL_15:
    swift_once(&qword_1013DD858, sub_100A05554);
    goto LABEL_4;
  }
  v30 = v22;
  swift_release(v19);
  sub_1006B5CA4(v16, v9, 1);
  v31 = swift_bridgeObjectRelease(v9);
  v32 = *(void **)(*(_QWORD *)(v30 + 16) + 32);
  *v12 = v32;
  v33 = v59;
  v59(v12, v14, v8, v31);
  v34 = v32;
  LOBYTE(v32) = _dispatchPreconditionTest(_:)(v12);
  v35 = v54;
  v54(v12, v8);
  if ((v32 & 1) == 0)
  {
    __break(1u);
LABEL_17:
    __break(1u);
    return;
  }
  v36 = type metadata accessor for SQLiteRowIterator();
  v37 = (_QWORD *)swift_initStackObject(v36, v55);
  v37[4] = 0;
  v37[5] = 1;
  v37[2] = v30;
  v37[3] = 0;
  sub_1006B6B04();
  v39 = v38;
  swift_setDeallocating(v37);
  sub_1006B7DA4(v37[3], v37[4], v37[5]);
  if (v39)
  {
    swift_retain(v39);
    v41 = sub_1006B44FC(0, v39);
    v42 = v53;
    v43 = *v53;
    v44 = v53[1];
    *v53 = (uint64_t)v41;
    v42[1] = v45;
    sub_1004BE2FC(v43, v44);
    swift_release(v39);
    v46 = v52;
    if (v52)
    {
      v47 = swift_retain(v39);
      v46(v47);
      swift_release(v39);
    }
    v40 = swift_release(v39);
  }
  v48 = *(void **)(*(_QWORD *)(v30 + 16) + 32);
  *v12 = v48;
  v33(v12, v14, v8, v40);
  v49 = v48;
  LOBYTE(v48) = _dispatchPreconditionTest(_:)(v12);
  v35(v12, v8);
  if ((v48 & 1) == 0)
    goto LABEL_17;
  swift_beginAccess(v30 + 24, &v57, 1, 0);
  v50 = *(sqlite3_stmt **)(v30 + 24);
  if (v50)
  {
    sqlite3_finalize(v50);
    *(_QWORD *)(v30 + 24) = 0;
  }
  swift_release(v30);
}

void sub_100AADB38(uint64_t a1, void (*a2)(__n128), uint64_t a3, uint64_t a4, sqlite3_int64 *a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t inited;
  id v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  __n128 v31;
  void *v32;
  void (*v33)(_QWORD *, uint64_t, uint64_t, __n128);
  id v34;
  void (*v35)(_QWORD *, uint64_t);
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  sqlite3_int64 v41;
  sqlite3_int64 *v42;
  char v43;
  void (*v44)(__n128);
  __n128 v45;
  void *v46;
  id v47;
  sqlite3_stmt *v48;
  _QWORD v49[2];
  void (*v50)(__n128);
  sqlite3_int64 *v51;
  void (*v52)(_QWORD *, uint64_t);
  char v53[48];
  char v54[72];
  uint64_t v55;
  unint64_t v56;
  void (*v57)(_QWORD *, uint64_t, uint64_t, __n128);

  v51 = a5;
  v49[1] = a3;
  v8 = type metadata accessor for DispatchPredicate(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (_QWORD *)((char *)v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = *(void **)(a4 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v12 = v13;
  v14 = enum case for DispatchPredicate.onQueue(_:);
  v57 = *(void (**)(_QWORD *, uint64_t, uint64_t, __n128))(v9 + 104);
  v57(v12, enum case for DispatchPredicate.onQueue(_:), v8, v10);
  v15 = v13;
  v16 = _dispatchPreconditionTest(_:)(v12);
  v52 = *(void (**)(_QWORD *, uint64_t))(v9 + 8);
  v52(v12, v8);
  if ((v16 & 1) == 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  v50 = a2;
  sub_100AACDB4();
  v16 = v17;
  v9 = v18;
  v55 = 0;
  v56 = 0xE000000000000000;
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease(v56);
  v19 = *(_QWORD *)(a4 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v20 = type metadata accessor for SQLiteStatement();
  swift_allocObject(v20, 32, 7);
  swift_retain(v19);
  v22 = sub_1006B77CC(v21, 0xD00000000000003ALL, 0x8000000100FF1F20);
  if (v5)
  {
    swift_release(v19);
    if (qword_1013DD858 == -1)
    {
LABEL_4:
      swift_beginAccess(&static OS_os_log.boardStore, &v55, 0, 0);
      v23 = (void *)static OS_os_log.boardStore;
      v24 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      inited = swift_initStackObject(v24, v54);
      *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
      *(_QWORD *)(inited + 56) = &type metadata for String;
      *(_QWORD *)(inited + 64) = sub_1004CFC2C();
      *(_QWORD *)(inited + 32) = v16;
      *(_QWORD *)(inited + 40) = v9;
      v26 = v23;
      v27 = static os_log_type_t.error.getter(v26);
      sub_100A06EBC((uint64_t)v26, &_mh_execute_header, v27, "Failed to fetch value for key %@", 32, 2, inited);
      swift_setDeallocating(inited);
      v28 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(inited + 32, 1, v28);

      swift_willThrow(v29);
      return;
    }
LABEL_15:
    swift_once(&qword_1013DD858, sub_100A05554);
    goto LABEL_4;
  }
  v30 = v22;
  swift_release(v19);
  sub_1006B5CA4(v16, v9, 1);
  v31 = swift_bridgeObjectRelease(v9);
  v32 = *(void **)(*(_QWORD *)(v30 + 16) + 32);
  *v12 = v32;
  v33 = v57;
  v57(v12, v14, v8, v31);
  v34 = v32;
  LOBYTE(v32) = _dispatchPreconditionTest(_:)(v12);
  v35 = v52;
  v52(v12, v8);
  if ((v32 & 1) == 0)
  {
    __break(1u);
LABEL_17:
    __break(1u);
    return;
  }
  v36 = type metadata accessor for SQLiteRowIterator();
  v37 = (_QWORD *)swift_initStackObject(v36, v53);
  v37[4] = 0;
  v37[5] = 1;
  v37[2] = v30;
  v37[3] = 0;
  sub_1006B6B04();
  v39 = v38;
  swift_setDeallocating(v37);
  sub_1006B7DA4(v37[3], v37[4], v37[5]);
  if (v39)
  {
    swift_retain(v39);
    v41 = sub_1006B64F4(0, v39);
    v42 = v51;
    *v51 = v41;
    *((_BYTE *)v42 + 8) = v43 & 1;
    swift_release(v39);
    v44 = v50;
    if (v50)
    {
      v45 = swift_retain(v39);
      v44(v45);
      swift_release(v39);
    }
    v40 = swift_release(v39);
  }
  v46 = *(void **)(*(_QWORD *)(v30 + 16) + 32);
  *v12 = v46;
  v33(v12, v14, v8, v40);
  v47 = v46;
  LOBYTE(v46) = _dispatchPreconditionTest(_:)(v12);
  v35(v12, v8);
  if ((v46 & 1) == 0)
    goto LABEL_17;
  swift_beginAccess(v30 + 24, &v55, 1, 0);
  v48 = *(sqlite3_stmt **)(v30 + 24);
  if (v48)
  {
    sqlite3_finalize(v48);
    *(_QWORD *)(v30 + 24) = 0;
  }
  swift_release(v30);
}

void sub_100AADF2C(uint64_t a1, void (*a2)(uint64_t, uint64_t, __n128), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  void (*v16)(_QWORD, __n128);
  id v17;
  void (*v18)(_QWORD *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  void (*v40)(uint64_t, uint64_t, __n128);
  uint64_t v41;
  __n128 v42;
  void (*v43)(_QWORD *, uint64_t);
  void *v44;
  id v45;
  void *v46;
  id v47;
  sqlite3_stmt **v48;
  int v49;
  __n128 v50;
  void *v51;
  id v52;
  int v53;
  Swift::String v54;
  void (*v55)(_QWORD *, uint64_t);
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  __n128 v60;
  void *v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, uint64_t, __n128);
  void (*v67)(_QWORD *, uint64_t);
  uint64_t v68;
  unsigned int v69;
  void (*v70)(_QWORD *, _QWORD, uint64_t, double);
  unint64_t v71;
  unint64_t v72;
  char v73[24];
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;

  v76 = a6;
  v68 = a5;
  v10 = type metadata accessor for DispatchPredicate(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (uint64_t *)((char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = *(void **)(a4 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v14 = v15;
  v16 = *(void (**)(_QWORD, __n128))(v11 + 104);
  v69 = enum case for DispatchPredicate.onQueue(_:);
  v70 = (void (*)(_QWORD *, _QWORD, uint64_t, double))v16;
  v16(v14, v12);
  v17 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)(v14);
  v18 = *(void (**)(_QWORD *, uint64_t))(v11 + 8);
  v18(v14, v10);
  if ((v15 & 1) == 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  v65 = a3;
  v66 = a2;
  v67 = v18;
  sub_100AACDB4();
  v20 = v19;
  v22 = v21;
  v74 = 0;
  v75 = 0xE000000000000000;
  _StringGuts.grow(_:)(55);
  v23._countAndFlagsBits = 0xD000000000000017;
  v23._object = (void *)0x8000000100FF1A70;
  String.append(_:)(v23);
  v24._countAndFlagsBits = 0x756C61765F79656BLL;
  v24._object = (void *)0xEE00617461645F65;
  String.append(_:)(v24);
  v25._countAndFlagsBits = 10272;
  v25._object = (void *)0xE200000000000000;
  String.append(_:)(v25);
  v26._countAndFlagsBits = 7955819;
  v26._object = (void *)0xE300000000000000;
  String.append(_:)(v26);
  v27._countAndFlagsBits = 8236;
  v27._object = (void *)0xE200000000000000;
  String.append(_:)(v27);
  v28._countAndFlagsBits = 0x65756C6176;
  v28._object = (void *)0xE500000000000000;
  String.append(_:)(v28);
  v29._countAndFlagsBits = 8236;
  v29._object = (void *)0xE200000000000000;
  String.append(_:)(v29);
  v30._countAndFlagsBits = 0x6E695F6172747865;
  v30._object = (void *)0xEA00000000006F66;
  String.append(_:)(v30);
  v31._object = (void *)0x8000000100FF1A90;
  v31._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v31);
  v32 = v74;
  v33 = v75;
  v34 = *(_QWORD *)(a4 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v35 = type metadata accessor for SQLiteStatement();
  swift_allocObject(v35, 32, 7);
  swift_retain(v34);
  v37 = sub_1006B77CC(v36, v32, v33);
  if (v6)
  {
    swift_release(v34);
    swift_bridgeObjectRelease(v22);
LABEL_17:
    swift_bridgeObjectRelease(v76);
    return;
  }
  v38 = v37;
  swift_release(v34);
  v64 = v20;
  sub_1006B5CA4(v20, (uint64_t)v22, 1);
  v39 = sub_1006B5CA4(v68, v76, 2);
  v40 = v66;
  if (v66)
  {
    v41 = v65;
    v42 = swift_retain(v65);
    v40(v38, 3, v42);
    sub_1004C1024((uint64_t)v40, v41);
    v43 = v67;
    goto LABEL_8;
  }
  v44 = *(void **)(*(_QWORD *)(v38 + 16) + 32);
  *v14 = v44;
  v70(v14, v69, v10, v39);
  v45 = v44;
  LOBYTE(v44) = _dispatchPreconditionTest(_:)(v14);
  v43 = v67;
  v67(v14, v10);
  if ((v44 & 1) != 0)
  {
    swift_beginAccess(v38 + 24, &v74, 0, 0);
    sqlite3_bind_null(*(sqlite3_stmt **)(v38 + 24), 3);
LABEL_8:
    v46 = *(void **)(*(_QWORD *)(v38 + 16) + 32);
    *v14 = v46;
    ((void (*)(_QWORD *, _QWORD, uint64_t))v70)(v14, v69, v10);
    v47 = v46;
    LOBYTE(v46) = _dispatchPreconditionTest(_:)(v14);
    v43(v14, v10);
    if ((v46 & 1) != 0)
    {
      v48 = (sqlite3_stmt **)(v38 + 24);
      swift_beginAccess(v38 + 24, v73, 1, 0);
      v49 = sqlite3_step(*(sqlite3_stmt **)(v38 + 24));
      if (v49 != 101)
      {
        v53 = v49;
        v71 = 0;
        v72 = 0xE000000000000000;
        _StringGuts.grow(_:)(46);
        swift_bridgeObjectRelease(v72);
        v71 = 0xD00000000000002CLL;
        v72 = 0x8000000100FF1AB0;
        v54._countAndFlagsBits = v64;
        v54._object = v22;
        String.append(_:)(v54);
        swift_bridgeObjectRelease(v22);
        v55 = v43;
        v56 = v71;
        v57 = v72;
        v58 = sub_1006B79EC();
        swift_allocError(&type metadata for SQLiteError, v58, 0, 0);
        *(_DWORD *)v59 = v53;
        *(_QWORD *)(v59 + 8) = v56;
        *(_QWORD *)(v59 + 16) = v57;
        swift_willThrow(v60);
        v61 = *(void **)(*(_QWORD *)(v38 + 16) + 32);
        *v14 = v61;
        ((void (*)(_QWORD *, _QWORD, uint64_t))v70)(v14, v69, v10);
        v62 = v61;
        LOBYTE(v61) = _dispatchPreconditionTest(_:)(v14);
        v55(v14, v10);
        if ((v61 & 1) != 0)
        {
          if (*v48)
          {
            sqlite3_finalize(*v48);
            *(_QWORD *)(v38 + 24) = 0;
          }
          goto LABEL_16;
        }
        goto LABEL_21;
      }
      v50 = swift_bridgeObjectRelease(v22);
      v51 = *(void **)(*(_QWORD *)(v38 + 16) + 32);
      *v14 = v51;
      ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v70)(v14, v69, v10, v50);
      v52 = v51;
      LOBYTE(v51) = _dispatchPreconditionTest(_:)(v14);
      v43(v14, v10);
      if ((v51 & 1) != 0)
      {
        if (*v48)
        {
          sqlite3_finalize(*v48);
          *v48 = 0;
        }
LABEL_16:
        swift_release(v38);
        goto LABEL_17;
      }
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
LABEL_22:
  __break(1u);
}

void sub_100AAE404(uint64_t a1, void (*a2)(uint64_t, uint64_t, __n128), uint64_t a3, uint64_t a4, sqlite3_stmt **a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  void (*v15)(_QWORD, __n128);
  id v16;
  void (*v17)(_QWORD *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t, __n128);
  uint64_t v40;
  __n128 v41;
  void (*v42)(_QWORD *, uint64_t);
  void *v43;
  id v44;
  void *v45;
  id v46;
  int v47;
  __n128 v48;
  void *v49;
  id v50;
  sqlite3_stmt **v51;
  int v52;
  Swift::String v53;
  void (*v54)(_QWORD *, uint64_t);
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  __n128 v59;
  void *v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t, __n128);
  void (*v65)(_QWORD *, uint64_t);
  sqlite3_stmt **v66;
  unsigned int v67;
  unint64_t v68;
  unint64_t v69;
  char v70[24];
  uint64_t v71;
  unint64_t v72;
  void (*v73)(_QWORD *, _QWORD, uint64_t);

  v66 = a5;
  v9 = type metadata accessor for DispatchPredicate(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (uint64_t *)((char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = *(void **)(a4 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v13 = v14;
  v15 = *(void (**)(_QWORD, __n128))(v10 + 104);
  v67 = enum case for DispatchPredicate.onQueue(_:);
  v73 = (void (*)(_QWORD *, _QWORD, uint64_t))v15;
  v15(v13, v11);
  v16 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)(v13);
  v17 = *(void (**)(_QWORD *, uint64_t))(v10 + 8);
  v17(v13, v9);
  if ((v14 & 1) == 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  v63 = a3;
  v64 = a2;
  v65 = v17;
  sub_100AACDB4();
  v19 = v18;
  v21 = v20;
  v71 = 0;
  v72 = 0xE000000000000000;
  _StringGuts.grow(_:)(55);
  v22._countAndFlagsBits = 0xD000000000000017;
  v22._object = (void *)0x8000000100FF1A70;
  String.append(_:)(v22);
  v23._countAndFlagsBits = 0x756C61765F79656BLL;
  v23._object = (void *)0xEE00617461645F65;
  String.append(_:)(v23);
  v24._countAndFlagsBits = 10272;
  v24._object = (void *)0xE200000000000000;
  String.append(_:)(v24);
  v25._countAndFlagsBits = 7955819;
  v25._object = (void *)0xE300000000000000;
  String.append(_:)(v25);
  v26._countAndFlagsBits = 8236;
  v26._object = (void *)0xE200000000000000;
  String.append(_:)(v26);
  v27._countAndFlagsBits = 0x65756C6176;
  v27._object = (void *)0xE500000000000000;
  String.append(_:)(v27);
  v28._countAndFlagsBits = 8236;
  v28._object = (void *)0xE200000000000000;
  String.append(_:)(v28);
  v29._countAndFlagsBits = 0x6E695F6172747865;
  v29._object = (void *)0xEA00000000006F66;
  String.append(_:)(v29);
  v30._object = (void *)0x8000000100FF1A90;
  v30._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v30);
  v31 = v71;
  v32 = v72;
  v33 = *(_QWORD *)(a4 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v34 = type metadata accessor for SQLiteStatement();
  swift_allocObject(v34, 32, 7);
  swift_retain(v33);
  v36 = sub_1006B77CC(v35, v31, v32);
  if (v5)
  {
    swift_bridgeObjectRelease(v21);
    v37 = v33;
LABEL_17:
    swift_release(v37);
    return;
  }
  v38 = v36;
  swift_release(v33);
  sub_1006B5CA4(v19, (uint64_t)v21, 1);
  sub_1006B5B50((sqlite3_int64)v66, 2);
  v39 = v64;
  if (v64)
  {
    v40 = v63;
    v41 = swift_retain(v63);
    v39(v38, 3, v41);
    sub_1004C1024((uint64_t)v39, v40);
    v42 = v65;
    goto LABEL_8;
  }
  v43 = *(void **)(*(_QWORD *)(v38 + 16) + 32);
  *v13 = v43;
  v73(v13, v67, v9);
  v44 = v43;
  LOBYTE(v43) = _dispatchPreconditionTest(_:)(v13);
  v42 = v65;
  v65(v13, v9);
  if ((v43 & 1) != 0)
  {
    swift_beginAccess(v38 + 24, &v71, 0, 0);
    sqlite3_bind_null(*(sqlite3_stmt **)(v38 + 24), 3);
LABEL_8:
    v45 = *(void **)(*(_QWORD *)(v38 + 16) + 32);
    *v13 = v45;
    v73(v13, v67, v9);
    v46 = v45;
    LOBYTE(v45) = _dispatchPreconditionTest(_:)(v13);
    v42(v13, v9);
    if ((v45 & 1) != 0)
    {
      v66 = (sqlite3_stmt **)(v38 + 24);
      swift_beginAccess(v38 + 24, v70, 1, 0);
      v47 = sqlite3_step(*(sqlite3_stmt **)(v38 + 24));
      if (v47 != 101)
      {
        v52 = v47;
        v68 = 0;
        v69 = 0xE000000000000000;
        _StringGuts.grow(_:)(46);
        swift_bridgeObjectRelease(v69);
        v68 = 0xD00000000000002CLL;
        v69 = 0x8000000100FF1AB0;
        v53._countAndFlagsBits = v19;
        v53._object = v21;
        String.append(_:)(v53);
        swift_bridgeObjectRelease(v21);
        v54 = v42;
        v55 = v68;
        v56 = v69;
        v57 = sub_1006B79EC();
        swift_allocError(&type metadata for SQLiteError, v57, 0, 0);
        *(_DWORD *)v58 = v52;
        *(_QWORD *)(v58 + 8) = v55;
        *(_QWORD *)(v58 + 16) = v56;
        swift_willThrow(v59);
        v60 = *(void **)(*(_QWORD *)(v38 + 16) + 32);
        *v13 = v60;
        v73(v13, v67, v9);
        v61 = v60;
        LOBYTE(v60) = _dispatchPreconditionTest(_:)(v13);
        v54(v13, v9);
        if ((v60 & 1) != 0)
        {
          if (*v66)
          {
            sqlite3_finalize(*v66);
            *(_QWORD *)(v38 + 24) = 0;
          }
          goto LABEL_16;
        }
        goto LABEL_21;
      }
      v48 = swift_bridgeObjectRelease(v21);
      v49 = *(void **)(*(_QWORD *)(v38 + 16) + 32);
      *v13 = v49;
      ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v73)(v13, v67, v9, v48);
      v50 = v49;
      LOBYTE(v49) = _dispatchPreconditionTest(_:)(v13);
      v42(v13, v9);
      if ((v49 & 1) != 0)
      {
        v51 = v66;
        if (*v66)
        {
          sqlite3_finalize(*v66);
          *v51 = 0;
        }
LABEL_16:
        v37 = v38;
        goto LABEL_17;
      }
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
LABEL_22:
  __break(1u);
}

uint64_t sub_100AAE8CC(uint64_t a1, sqlite3_stmt **a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  void (*v15)(_QWORD, __n128);
  id v16;
  uint64_t (*v17)(_QWORD *, uint64_t);
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  sqlite3_stmt **v40;
  uint64_t v41;
  __n128 v42;
  uint64_t (*v43)(_QWORD *, uint64_t);
  void *v44;
  id v45;
  void *v46;
  id v47;
  uint64_t v48;
  int v49;
  __n128 v50;
  void *v51;
  id v52;
  sqlite3_stmt **v53;
  int v54;
  Swift::String v55;
  uint64_t (*v56)(_QWORD *, uint64_t);
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  __n128 v61;
  void *v62;
  id v63;
  uint64_t v64;
  uint64_t (*v65)(_QWORD *, uint64_t);
  sqlite3_stmt **v66;
  unsigned int v67;
  void (*v68)(_QWORD *, _QWORD, uint64_t);
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char v72[24];
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;

  v75 = a6;
  v69 = a5;
  v66 = a2;
  v9 = type metadata accessor for DispatchPredicate(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (uint64_t *)((char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = *(void **)(a4 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v13 = v14;
  v15 = *(void (**)(_QWORD, __n128))(v10 + 104);
  v67 = enum case for DispatchPredicate.onQueue(_:);
  v68 = (void (*)(_QWORD *, _QWORD, uint64_t))v15;
  v15(v13, v11);
  v16 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)(v13);
  v17 = *(uint64_t (**)(_QWORD *, uint64_t))(v10 + 8);
  result = v17(v13, v9);
  if ((v14 & 1) == 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  v64 = a3;
  v65 = v17;
  sub_100AACDB4();
  v20 = v19;
  v22 = v21;
  v73 = 0;
  v74 = 0xE000000000000000;
  _StringGuts.grow(_:)(55);
  v23._countAndFlagsBits = 0xD000000000000017;
  v23._object = (void *)0x8000000100FF1A70;
  String.append(_:)(v23);
  v24._countAndFlagsBits = 0x756C61765F79656BLL;
  v24._object = (void *)0xEE00617461645F65;
  String.append(_:)(v24);
  v25._countAndFlagsBits = 10272;
  v25._object = (void *)0xE200000000000000;
  String.append(_:)(v25);
  v26._countAndFlagsBits = 7955819;
  v26._object = (void *)0xE300000000000000;
  String.append(_:)(v26);
  v27._countAndFlagsBits = 8236;
  v27._object = (void *)0xE200000000000000;
  String.append(_:)(v27);
  v28._countAndFlagsBits = 0x65756C6176;
  v28._object = (void *)0xE500000000000000;
  String.append(_:)(v28);
  v29._countAndFlagsBits = 8236;
  v29._object = (void *)0xE200000000000000;
  String.append(_:)(v29);
  v30._countAndFlagsBits = 0x6E695F6172747865;
  v30._object = (void *)0xEA00000000006F66;
  String.append(_:)(v30);
  v31._object = (void *)0x8000000100FF1A90;
  v31._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v31);
  v32 = v73;
  v33 = v74;
  v34 = *(_QWORD *)(a4 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v35 = type metadata accessor for SQLiteStatement();
  swift_allocObject(v35, 32, 7);
  swift_retain(v34);
  v37 = sub_1006B77CC(v36, v32, v33);
  if (v6)
  {
    swift_bridgeObjectRelease(v22);
    v38 = v34;
LABEL_17:
    swift_release(v38);
    return sub_1004BBBC8(v69, v75);
  }
  v39 = v37;
  swift_release(v34);
  sub_1006B5CA4(v20, (uint64_t)v22, 1);
  sub_1006B5E80(v69, v75);
  v40 = v66;
  if (v66)
  {
    v41 = v64;
    v42 = swift_retain(v64);
    ((void (*)(uint64_t, uint64_t, __n128))v40)(v39, 3, v42);
    sub_1004C1024((uint64_t)v40, v41);
    v43 = v65;
    goto LABEL_8;
  }
  v44 = *(void **)(*(_QWORD *)(v39 + 16) + 32);
  *v13 = v44;
  v68(v13, v67, v9);
  v45 = v44;
  LOBYTE(v44) = _dispatchPreconditionTest(_:)(v13);
  v43 = v65;
  result = v65(v13, v9);
  if ((v44 & 1) != 0)
  {
    swift_beginAccess(v39 + 24, &v73, 0, 0);
    sqlite3_bind_null(*(sqlite3_stmt **)(v39 + 24), 3);
LABEL_8:
    v46 = *(void **)(*(_QWORD *)(v39 + 16) + 32);
    *v13 = v46;
    v68(v13, v67, v9);
    v47 = v46;
    LOBYTE(v46) = _dispatchPreconditionTest(_:)(v13);
    result = v43(v13, v9);
    if ((v46 & 1) != 0)
    {
      v48 = v20;
      v66 = (sqlite3_stmt **)(v39 + 24);
      swift_beginAccess(v39 + 24, v72, 1, 0);
      v49 = sqlite3_step(*(sqlite3_stmt **)(v39 + 24));
      if (v49 != 101)
      {
        v54 = v49;
        v70 = 0;
        v71 = 0xE000000000000000;
        _StringGuts.grow(_:)(46);
        swift_bridgeObjectRelease(v71);
        v70 = 0xD00000000000002CLL;
        v71 = 0x8000000100FF1AB0;
        v55._countAndFlagsBits = v48;
        v55._object = v22;
        String.append(_:)(v55);
        swift_bridgeObjectRelease(v22);
        v56 = v43;
        v57 = v70;
        v58 = v71;
        v59 = sub_1006B79EC();
        swift_allocError(&type metadata for SQLiteError, v59, 0, 0);
        *(_DWORD *)v60 = v54;
        *(_QWORD *)(v60 + 8) = v57;
        *(_QWORD *)(v60 + 16) = v58;
        swift_willThrow(v61);
        v62 = *(void **)(*(_QWORD *)(v39 + 16) + 32);
        *v13 = v62;
        v68(v13, v67, v9);
        v63 = v62;
        LOBYTE(v62) = _dispatchPreconditionTest(_:)(v13);
        result = v56(v13, v9);
        if ((v62 & 1) != 0)
        {
          if (*v66)
          {
            sqlite3_finalize(*v66);
            *(_QWORD *)(v39 + 24) = 0;
          }
          goto LABEL_16;
        }
        goto LABEL_21;
      }
      v50 = swift_bridgeObjectRelease(v22);
      v51 = *(void **)(*(_QWORD *)(v39 + 16) + 32);
      *v13 = v51;
      ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v68)(v13, v67, v9, v50);
      v52 = v51;
      LOBYTE(v51) = _dispatchPreconditionTest(_:)(v13);
      result = v43(v13, v9);
      if ((v51 & 1) != 0)
      {
        v53 = v66;
        if (*v66)
        {
          sqlite3_finalize(*v66);
          *v53 = 0;
        }
LABEL_16:
        v38 = v39;
        goto LABEL_17;
      }
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
LABEL_22:
  __break(1u);
  return result;
}

void sub_100AAEDA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  void (*v14)(_QWORD, __n128);
  id v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  void *v26;
  id v27;
  sqlite3_stmt **v28;
  int v29;
  __n128 v30;
  void *v31;
  id v32;
  int v33;
  Swift::String v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  __n128 v39;
  void *v40;
  id v41;
  sqlite3_stmt **v42;
  void (*v43)(_QWORD *, uint64_t);
  unsigned int v44;
  void (*v45)(_QWORD *, _QWORD, uint64_t, double);
  unint64_t v46;
  unint64_t v47;
  _QWORD v48[3];
  _BYTE v49[32];

  v3 = v1;
  v5 = type metadata accessor for CRLBoardDataStore.KeyValueTableKey(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchPredicate(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (sqlite3_stmt ***)((char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = *(void **)(v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v12 = v13;
  v14 = *(void (**)(_QWORD, __n128))(v9 + 104);
  v44 = enum case for DispatchPredicate.onQueue(_:);
  v45 = (void (*)(_QWORD *, _QWORD, uint64_t, double))v14;
  v14(v12, v10);
  v15 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)(v12);
  v43 = *(void (**)(_QWORD *, uint64_t))(v9 + 8);
  v43(v12, v8);
  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_1004B8460(a1, (uint64_t)v7, type metadata accessor for CRLBoardIdentifier);
  swift_storeEnumTagMultiPayload(v7, v5, 2);
  sub_100AACDB4();
  v17 = v16;
  v19 = v18;
  sub_1004B84A4((uint64_t)v7, type metadata accessor for CRLBoardDataStore.KeyValueTableKey);
  v48[0] = 0;
  v48[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  v20 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v21 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v21, v49);
  swift_retain(v20);
  v23 = sub_1006B77CC(v22, 0xD00000000000003ELL, 0x8000000100FF1500);
  if (v2)
  {
    swift_release(v20);
    swift_bridgeObjectRelease();
    return;
  }
  v24 = v23;
  swift_release(v20);
  v25 = sub_1006B5CA4(v17, (uint64_t)v19, 1);
  v26 = *(void **)(*(_QWORD *)(v24 + 16) + 32);
  *v12 = v26;
  v45(v12, v44, v8, v25);
  v27 = v26;
  LOBYTE(v26) = _dispatchPreconditionTest(_:)(v12);
  v43(v12, v8);
  if ((v26 & 1) == 0)
    goto LABEL_14;
  v28 = (sqlite3_stmt **)(v24 + 24);
  swift_beginAccess(v24 + 24, v48, 1, 0);
  v29 = sqlite3_step(*(sqlite3_stmt **)(v24 + 24));
  if (v29 != 101)
  {
    v33 = v29;
    v42 = (sqlite3_stmt **)(v24 + 24);
    v46 = 0;
    v47 = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    v46 = 0xD000000000000021;
    v47 = 0x8000000100FF1540;
    v34._countAndFlagsBits = v17;
    v34._object = v19;
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    v35 = v46;
    v36 = v47;
    v37 = sub_1006B79EC();
    swift_allocError(&type metadata for SQLiteError, v37, 0, 0);
    *(_DWORD *)v38 = v33;
    *(_QWORD *)(v38 + 8) = v35;
    *(_QWORD *)(v38 + 16) = v36;
    swift_willThrow(v39);
    v40 = *(void **)(*(_QWORD *)(v24 + 16) + 32);
    *v12 = v40;
    ((void (*)(_QWORD *, _QWORD, uint64_t))v45)(v12, v44, v8);
    v41 = v40;
    LOBYTE(v40) = _dispatchPreconditionTest(_:)(v12);
    v43(v12, v8);
    if ((v40 & 1) != 0)
    {
      if (*v42)
      {
        sqlite3_finalize(*v42);
        *(_QWORD *)(v24 + 24) = 0;
      }
      goto LABEL_12;
    }
LABEL_16:
    __break(1u);
  }
  v30 = swift_bridgeObjectRelease();
  v31 = *(void **)(*(_QWORD *)(v24 + 16) + 32);
  *v12 = v31;
  ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v45)(v12, v44, v8, v30);
  v32 = v31;
  LOBYTE(v31) = _dispatchPreconditionTest(_:)(v12);
  v43(v12, v8);
  if ((v31 & 1) == 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (*v28)
  {
    sqlite3_finalize(*v28);
    *v28 = 0;
  }
LABEL_12:
  swift_release(v24);
}

void sub_100AAF198()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  unsigned int v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  void *v20;
  uint64_t v21;
  id v22;
  int v23;
  __n128 v24;
  void *v25;
  id v26;
  sqlite3_stmt **v27;
  int v28;
  Swift::String v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  __n128 v34;
  void *v35;
  id v36;
  sqlite3_stmt **v37;
  unsigned int v38;
  void (*v39)(_QWORD *, _QWORD, uint64_t, __n128);
  void (*v40)(_QWORD *, uint64_t);
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _BYTE v45[32];

  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (sqlite3_stmt ***)((char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v6 = v7;
  v8 = enum case for DispatchPredicate.onQueue(_:);
  v39 = *(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v3 + 104);
  v39(v6, enum case for DispatchPredicate.onQueue(_:), v2, v4);
  v9 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  v40 = *(void (**)(_QWORD *, uint64_t))(v3 + 8);
  v40(v6, v2);
  if ((v7 & 1) == 0)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v38 = v8;
  sub_100AACDB4();
  v11 = v10;
  v13 = v12;
  v43 = 0;
  v44 = 0xE000000000000000;
  _StringGuts.grow(_:)(29);
  swift_bridgeObjectRelease(v44);
  v14 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v15 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v15, v45);
  swift_retain(v14);
  v17 = sub_1006B77CC(v16, 0xD00000000000002ALL, 0x8000000100FF19F0);
  if (v1)
  {
    swift_release(v14);
    swift_bridgeObjectRelease(v13);
    return;
  }
  v18 = v17;
  swift_release(v14);
  v19 = sub_1006B5CA4(v11, (uint64_t)v13, 1);
  v20 = *(void **)(*(_QWORD *)(v18 + 16) + 32);
  *v6 = v20;
  v21 = v38;
  ((void (*)(_QWORD *, _QWORD, uint64_t, double))v39)(v6, v38, v2, v19);
  v22 = v20;
  LOBYTE(v20) = _dispatchPreconditionTest(_:)(v6);
  v40(v6, v2);
  if ((v20 & 1) == 0)
    goto LABEL_14;
  v37 = (sqlite3_stmt **)(v18 + 24);
  swift_beginAccess(v18 + 24, &v43, 1, 0);
  v23 = sqlite3_step(*(sqlite3_stmt **)(v18 + 24));
  if (v23 != 101)
  {
    v28 = v23;
    v41 = 0;
    v42 = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease(v42);
    v41 = 0xD000000000000021;
    v42 = 0x8000000100FF1540;
    v29._countAndFlagsBits = v11;
    v29._object = v13;
    String.append(_:)(v29);
    swift_bridgeObjectRelease(v13);
    v30 = v41;
    v31 = v42;
    v32 = sub_1006B79EC();
    swift_allocError(&type metadata for SQLiteError, v32, 0, 0);
    *(_DWORD *)v33 = v28;
    *(_QWORD *)(v33 + 8) = v30;
    *(_QWORD *)(v33 + 16) = v31;
    swift_willThrow(v34);
    v35 = *(void **)(*(_QWORD *)(v18 + 16) + 32);
    *v6 = v35;
    ((void (*)(_QWORD *, uint64_t, uint64_t))v39)(v6, v21, v2);
    v36 = v35;
    LOBYTE(v35) = _dispatchPreconditionTest(_:)(v6);
    v40(v6, v2);
    if ((v35 & 1) != 0)
    {
      if (*v37)
      {
        sqlite3_finalize(*v37);
        *(_QWORD *)(v18 + 24) = 0;
      }
      goto LABEL_12;
    }
LABEL_16:
    __break(1u);
  }
  v24 = swift_bridgeObjectRelease(v13);
  v25 = *(void **)(*(_QWORD *)(v18 + 16) + 32);
  *v6 = v25;
  v39(v6, v21, v2, v24);
  v26 = v25;
  LOBYTE(v25) = _dispatchPreconditionTest(_:)(v6);
  v40(v6, v2);
  if ((v25 & 1) == 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v27 = v37;
  if (*v37)
  {
    sqlite3_finalize(*v37);
    *v27 = 0;
  }
LABEL_12:
  swift_release(v18);
}

void sub_100AAF524(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  id v10;
  const unsigned __int8 *v11;
  uint64_t v12;

  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (const unsigned __int8 **)((char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v8 = v9;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4, v6);
  v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) != 0)
  {
    v11 = 0;
    v12 = 0;
    sub_100AAD344(a1, 0, 0, v1, &v11);
    if (v2)
      swift_bridgeObjectRelease(v12);
  }
  else
  {
    __break(1u);
  }
}

void sub_100AAF624()
{
  sub_10080EB50(sub_100B013FC);
}

uint64_t sub_100AAF668(sqlite3_stmt **a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  id v14;
  uint64_t result;
  uint64_t v16;

  v8 = type metadata accessor for DispatchPredicate(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (uint64_t *)((char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if ((a2 & 1) != 0)
  {
    sub_100AAF198();
    return 1;
  }
  v13 = *(void **)(a3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v12 = v13;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8, v10);
  v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)(v12);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v9 + 8))(v12, v8);
  if ((v13 & 1) != 0)
  {
    sub_100AAE404(a4, 0, 0, a3, a1);
    return 1;
  }
  __break(1u);
  return result;
}

void sub_100AAF770(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  id v13;
  char v14;
  sqlite3_int64 v15;
  char v16;

  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (sqlite3_int64 *)((char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = *(void **)(a1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v11 = v12;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v8 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v7, v9);
  v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)(v11);
  (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(v11, v7);
  if ((v12 & 1) != 0)
  {
    v15 = 0;
    v16 = 1;
    sub_100AADB38(a2, 0, 0, a1, &v15);
    if (!v3)
    {
      v14 = v16;
      *(_QWORD *)a3 = v15;
      *(_BYTE *)(a3 + 8) = v14;
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_100AAF880()
{
  sub_10080EB50(sub_100B00E6C);
}

uint64_t sub_100AAF8BC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  id v14;
  uint64_t result;
  uint64_t v16;

  v8 = type metadata accessor for DispatchPredicate(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (uint64_t *)((char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a2 >> 60 == 15)
  {
    sub_100AAF198();
    return 1;
  }
  v13 = *(void **)(a3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v12 = v13;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8, v10);
  sub_10057939C(a1, a2);
  v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)(v12);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v9 + 8))(v12, v8);
  if ((v13 & 1) != 0)
  {
    sub_10057939C(a1, a2);
    sub_100AAE8CC(a4, 0, 0, a3, a1, a2);
    sub_1004BE2FC(a1, a2);
    return 1;
  }
  __break(1u);
  return result;
}

uint64_t sub_100AAFA0C@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_100A83944(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

double sub_100AAFA3C(uint64_t a1, char *a2, uint64_t a3)
{
  return sub_100AB374C(a1, a2, a3, (uint64_t)&unk_101292D58, (uint64_t)sub_100AFFE5C, (uint64_t)&unk_101292D70);
}

uint64_t sub_100AAFA58(void *a1, uint64_t a2)
{
  char *v3;
  uint64_t v4;

  v3 = a1;
  swift_bridgeObjectRetain(a2);
  sub_1004E6B5C(v3, (uint64_t)v3, a2);

  swift_bridgeObjectRelease();
  v4 = sub_1004B804C(&qword_1013EB680);
  return CheckedContinuation.resume(returning:)(v4, v4);
}

double sub_100AAFC1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  id v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  BOOL v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  __n128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t inited;
  uint64_t v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  double result;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int64_t v85;
  __int128 v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int64_t v91;
  _QWORD v92[3];
  char v93[8];
  uint64_t __src;
  char v95;
  char v96;
  char v97;
  char v98;
  char v99;
  char v100;
  char v101;
  char v102;
  char v103[72];
  char v104[8];
  uint64_t v105;
  unint64_t v106;

  v83 = type metadata accessor for CRLBoardDataStore.KeyValueTableKey(0);
  __chkstk_darwin(v83);
  v4 = (char *)&v76 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = type metadata accessor for String.Encoding(0);
  v78 = *(_QWORD *)(v79 - 8);
  __chkstk_darwin(v79);
  v77 = (char *)&v76 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CRLBoardIdentifier(0);
  v89 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v81 = (uint64_t)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v76 - v9;
  v82 = v11;
  __chkstk_darwin(v12);
  v88 = (uint64_t)&v76 - v13;
  v14 = type metadata accessor for DispatchPredicate(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (uint64_t *)((char *)&v76 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v84 = v1;
  v19 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v18 = v19;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v15 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v14, v16);
  v20 = v19;
  v21 = _dispatchPreconditionTest(_:)(v18);
  (*(void (**)(_QWORD *, uint64_t))(v15 + 8))(v18, v14);
  if ((v21 & 1) == 0)
    goto LABEL_36;
  v22 = *(_QWORD *)(a1 + 56);
  v80 = a1 + 56;
  v23 = 1 << *(_BYTE *)(a1 + 32);
  v24 = -1;
  if (v23 < 64)
    v24 = ~(-1 << v23);
  v25 = v24 & v22;
  v85 = (unint64_t)(v23 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v26 = 0;
  v86 = xmmword_100EF5E40;
  v27 = v91;
  v87 = v4;
  while (1)
  {
    if (v25)
    {
      v90 = (v25 - 1) & v25;
      v91 = v26;
      v28 = __clz(__rbit64(v25)) | (v26 << 6);
      goto LABEL_20;
    }
    v29 = __OFADD__(v26, 1);
    v30 = v26 + 1;
    if (v29)
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v30 >= v85)
      goto LABEL_33;
    v31 = *(_QWORD *)(v80 + 8 * v30);
    if (!v31)
      break;
LABEL_19:
    v90 = (v31 - 1) & v31;
    v91 = v30;
    v28 = __clz(__rbit64(v31)) + (v30 << 6);
LABEL_20:
    v33 = v88;
    sub_1004B8460(*(_QWORD *)(a1 + 48) + *(_QWORD *)(v89 + 72) * v28, v88, type metadata accessor for CRLBoardIdentifier);
    v34 = sub_1004B84E0(v33, (uint64_t)v10, type metadata accessor for CRLBoardIdentifier);
    __src = UUID.uuid.getter(v34);
    v95 = v35;
    v96 = v36;
    v97 = v37;
    v98 = v38;
    v99 = v39;
    v100 = v40;
    v101 = v41;
    v102 = v42;
    UUID.uuid.getter(__src);
    v43 = sub_1005CB82C(&__src, 16);
    v45 = v44;
    v105 = v43;
    v106 = v44;
    v46 = &v10[*(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20)];
    v47 = *(_QWORD *)v46;
    v48 = *((_QWORD *)v46 + 1);
    if (String.count.getter(*(_QWORD *)v46, v48) >= 1)
    {
      v50 = v77;
      static String.Encoding.utf8.getter(v49);
      v51 = String.data(using:allowLossyConversion:)(v50, 0, v47, v48);
      v53 = v52;
      (*(void (**)(char *, uint64_t))(v78 + 8))(v50, v79);
      if (v53 >> 60 == 15)
      {
        v54 = sub_10067D5A0();
        v55 = swift_allocError(&type metadata for CRLBoardIdentifierCodingError, v54, 0, 0);
        *v56 = 2;
        swift_willThrow(v57);
        sub_1004BBBC8(v105, v106);
        goto LABEL_26;
      }
      Data.append(_:)(v51, v53);
      sub_1004BE2FC(v51, v53);
      v43 = v105;
      v45 = v106;
    }
    sub_1004B8460((uint64_t)v10, (uint64_t)v4, type metadata accessor for CRLBoardIdentifier);
    swift_storeEnumTagMultiPayload(v4, v83, 2);
    v58 = v81;
    sub_1004B8460((uint64_t)v10, v81, type metadata accessor for CRLBoardIdentifier);
    v59 = *(unsigned __int8 *)(v89 + 80);
    v60 = (v59 + 16) & ~v59;
    v61 = swift_allocObject(&unk_101292DA8, v60 + v82, v59 | 7);
    sub_1004B84E0(v58, v61 + v60, type metadata accessor for CRLBoardIdentifier);
    sub_1004BE310(v43, v45);
    sub_100AAE8CC((uint64_t)v4, (sqlite3_stmt **)sub_100AFFEF0, v61, v84, v43, v45);
    if (!v27)
    {
      swift_release(v61);
      sub_1004B84A4((uint64_t)v4, type metadata accessor for CRLBoardDataStore.KeyValueTableKey);
      sub_1004B84A4((uint64_t)v10, type metadata accessor for CRLBoardIdentifier);
      sub_1004BBBC8(v43, v45);
      goto LABEL_6;
    }
    sub_1004B84A4((uint64_t)v4, type metadata accessor for CRLBoardDataStore.KeyValueTableKey);
    swift_release(v61);
    sub_1004BBBC8(v43, v45);
    v55 = v27;
LABEL_26:
    v62 = a1;
    if (qword_1013DD858 != -1)
      swift_once(&qword_1013DD858, sub_100A05554);
    swift_beginAccess(&static OS_os_log.boardStore, v104, 0, 0);
    v63 = (void *)static OS_os_log.boardStore;
    v64 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    inited = swift_initStackObject(v64, v103);
    *(_OWORD *)(inited + 16) = v86;
    swift_getErrorValue(v55, v93, v92);
    v66 = v92[1];
    v67 = v92[2];
    v68 = v63;
    v69 = Error.localizedDescription.getter(v66, v67);
    v71 = v70;
    *(_QWORD *)(inited + 56) = &type metadata for String;
    v72 = sub_1004CFC2C();
    *(_QWORD *)(inited + 64) = v72;
    *(_QWORD *)(inited + 32) = v69;
    *(_QWORD *)(inited + 40) = v71;
    v73 = static os_log_type_t.error.getter(v72);
    sub_100A06EBC((uint64_t)v68, &_mh_execute_header, v73, "Failed to add shared boards deleted offline to the database with error %@", 73, 2, inited);
    swift_setDeallocating(inited);
    v74 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(inited + 32, 1, v74);

    swift_errorRelease(v55);
    sub_1004B84A4((uint64_t)v10, type metadata accessor for CRLBoardIdentifier);
    a1 = v62;
    v27 = 0;
    v4 = v87;
LABEL_6:
    v26 = v91;
    v25 = v90;
  }
  v32 = v30 + 1;
  if (v30 + 1 >= v85)
    goto LABEL_33;
  v31 = *(_QWORD *)(v80 + 8 * v32);
  if (v31)
    goto LABEL_18;
  v32 = v30 + 2;
  if (v30 + 2 >= v85)
    goto LABEL_33;
  v31 = *(_QWORD *)(v80 + 8 * v32);
  if (v31)
  {
LABEL_18:
    v30 = v32;
    goto LABEL_19;
  }
  v32 = v30 + 3;
  if (v30 + 3 < v85)
  {
    v31 = *(_QWORD *)(v80 + 8 * v32);
    if (!v31)
    {
      while (1)
      {
        v30 = v32 + 1;
        if (__OFADD__(v32, 1))
          break;
        if (v30 >= v85)
          goto LABEL_33;
        v31 = *(_QWORD *)(v80 + 8 * v30);
        ++v32;
        if (v31)
          goto LABEL_19;
      }
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
    }
    goto LABEL_18;
  }
LABEL_33:
  *(_QWORD *)&result = swift_release(a1).n128_u64[0];
  return result;
}

double sub_100AB0404(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  double result;

  v4 = (_QWORD *)(a3 + *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20));
  v5 = v4[1];
  if (*v4)
    v6 = 0;
  else
    v6 = v5 == 0xE000000000000000;
  if (v6)
  {
    v7 = 49;
  }
  else if ((_stringCompareWithSmolCheck(_:_:expecting:)(*v4, v5, 0, 0xE000000000000000, 0) & 1) != 0)
  {
    v7 = 49;
  }
  else
  {
    v7 = 48;
  }
  sub_1006B5CA4(v7, 0xE100000000000000, a2);
  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

void sub_100AB0488(uint64_t a1, uint64_t a2, char *a3)
{
  sub_100AB0714(a1, a2, a3, (uint64_t)&unk_101292D08, (uint64_t)sub_100AFFE20, (uint64_t)&unk_101292D20);
}

void sub_100AB04A4()
{
  sub_10080EB50(sub_100AFFE3C);
}

uint64_t sub_100AB0634(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v3 = type metadata accessor for CRLBoardDataStore.KeyValueTableKey(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1004B8460(a2, (uint64_t)v5, type metadata accessor for CRLBoardIdentifier);
  swift_storeEnumTagMultiPayload(v5, v3, 2);
  sub_100AAF198();
  sub_1004B84A4((uint64_t)v5, type metadata accessor for CRLBoardDataStore.KeyValueTableKey);
  return 1;
}

void sub_100AB06F8(uint64_t a1, uint64_t a2, char *a3)
{
  sub_100AB0714(a1, a2, a3, (uint64_t)&unk_101292B50, (uint64_t)sub_100AFFD58, (uint64_t)&unk_101292B68);
}

void sub_100AB0714(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  char *v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  int64_t v43;
  unint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int64_t v73;
  double *v74;
  _QWORD aBlock[5];
  uint64_t v76;

  v67 = a5;
  v68 = a6;
  v65 = a3;
  v66 = a4;
  v71 = a1;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v63 = *(_QWORD *)(v7 - 8);
  v64 = v7;
  __chkstk_darwin(v7);
  v60 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = type metadata accessor for DispatchQoS(0);
  v61 = *(_QWORD *)(v62 - 8);
  __chkstk_darwin(v62);
  v57 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = sub_1004B804C(&qword_1013EB680);
  v53 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69);
  v59 = v10;
  v58 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CRLBoardIdentifier(0);
  v56 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v54 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = v12;
  __chkstk_darwin(v13);
  v52 = (uint64_t)&v48 - v14;
  v15 = *(_QWORD *)(a2 + 56);
  v49 = a2 + 56;
  v16 = 1 << *(_BYTE *)(a2 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & v15;
  v51 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue;
  v50 = (unint64_t)(v16 + 63) >> 6;
  v70 = a2;
  swift_bridgeObjectRetain(a2);
  v19 = 0;
  v20 = (uint64_t)v54;
  v21 = v53;
  while (1)
  {
    if (v18)
    {
      v22 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v73 = v19;
      v23 = v22 | (v19 << 6);
      goto LABEL_5;
    }
    v43 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v43 >= v50)
      goto LABEL_21;
    v44 = *(_QWORD *)(v49 + 8 * v43);
    v45 = v19 + 1;
    if (!v44)
    {
      v45 = v19 + 2;
      if (v19 + 2 >= v50)
        goto LABEL_21;
      v44 = *(_QWORD *)(v49 + 8 * v45);
      if (!v44)
      {
        v45 = v19 + 3;
        if (v19 + 3 >= v50)
          goto LABEL_21;
        v44 = *(_QWORD *)(v49 + 8 * v45);
        if (!v44)
          break;
      }
    }
LABEL_20:
    v18 = (v44 - 1) & v44;
    v73 = v45;
    v23 = __clz(__rbit64(v44)) + (v45 << 6);
LABEL_5:
    v24 = v56;
    v25 = v52;
    sub_1004B8460(*(_QWORD *)(v70 + 48) + *(_QWORD *)(v56 + 72) * v23, v52, type metadata accessor for CRLBoardIdentifier);
    v26 = v65;
    v72 = *(_QWORD *)&v65[v51];
    sub_1004B84E0(v25, v20, type metadata accessor for CRLBoardIdentifier);
    v27 = v58;
    v28 = v69;
    (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v58, v71, v69);
    v29 = *(unsigned __int8 *)(v24 + 80);
    v30 = (v29 + 24) & ~v29;
    v31 = *(unsigned __int8 *)(v21 + 80);
    v32 = (v55 + v31 + v30) & ~v31;
    v33 = swift_allocObject(v66, v32 + v59, v29 | v31 | 7);
    *(_QWORD *)(v33 + 16) = v26;
    sub_1004B84E0(v20, v33 + v30, type metadata accessor for CRLBoardIdentifier);
    (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))(v33 + v32, v27, v28);
    aBlock[4] = v67;
    v76 = v33;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = *(_QWORD *)"";
    aBlock[2] = sub_1005D2FC0;
    aBlock[3] = v68;
    v34 = _Block_copy(aBlock);
    v35 = v26;
    v36 = v57;
    static DispatchQoS.unspecified.getter(v37);
    v74 = _swiftEmptyArrayStorage;
    v38 = sub_1004B7878((unint64_t *)&qword_1013E1D20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v39 = sub_1004B804C((uint64_t *)&unk_1013DFBF0);
    v40 = sub_1004CBA30((unint64_t *)&qword_1013E1D30, (uint64_t *)&unk_1013DFBF0, (uint64_t)&protocol conformance descriptor for [A]);
    v41 = v60;
    v42 = v64;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v74, v39, v40, v64, v38);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v36, v41, v34);
    _Block_release(v34);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v41, v42);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v36, v62);
    swift_release(v76);
    v19 = v73;
  }
  v46 = v19 + 4;
  if (v19 + 4 >= v50)
  {
LABEL_21:
    swift_release(v70);
    CheckedContinuation.resume(returning:)(v47, v69);
    return;
  }
  v44 = *(_QWORD *)(v49 + 8 * v46);
  if (v44)
  {
    v45 = v19 + 4;
    goto LABEL_20;
  }
  while (1)
  {
    v45 = v46 + 1;
    if (__OFADD__(v46, 1))
      break;
    if (v45 >= v50)
      goto LABEL_21;
    v44 = *(_QWORD *)(v49 + 8 * v45);
    ++v46;
    if (v44)
      goto LABEL_20;
  }
LABEL_23:
  __break(1u);
}

void sub_100AB0C5C()
{
  sub_10080EB50(sub_100AFFD74);
}

double sub_100AB0DEC(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void *v21;
  char *v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double result;
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double *v32;
  _QWORD aBlock[5];
  char *v34;

  v28[0] = a4;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v31 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v29 = *(_QWORD *)(v10 - 8);
  v30 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1004B804C(&qword_1013EB680);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  v16 = __chkstk_darwin(v13);
  v17 = (char *)v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28[1] = *(_QWORD *)&a2[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue];
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v14 + 16))(v17, a1, v13, v16);
  v18 = *(unsigned __int8 *)(v14 + 80);
  v19 = (v18 + 40) & ~v18;
  v20 = (char *)swift_allocObject(&unk_101293370, v19 + v15, v18 | 7);
  *((_QWORD *)v20 + 2) = a3;
  *((_QWORD *)v20 + 3) = a2;
  *((_QWORD *)v20 + 4) = v28[0];
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(&v20[v19], v17, v13);
  aBlock[4] = sub_100B00B78;
  v34 = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(_QWORD *)"";
  aBlock[2] = sub_1005D2FC0;
  aBlock[3] = &unk_101293388;
  v21 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a3);
  v22 = a2;
  static DispatchQoS.unspecified.getter(v23);
  v32 = _swiftEmptyArrayStorage;
  v24 = sub_1004B7878((unint64_t *)&qword_1013E1D20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v25 = sub_1004B804C((uint64_t *)&unk_1013DFBF0);
  v26 = sub_1004CBA30((unint64_t *)&qword_1013E1D30, (uint64_t *)&unk_1013DFBF0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v32, v25, v26, v7, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v9, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v12, v30);
  *(_QWORD *)&result = swift_release(v34).n128_u64[0];
  return result;
}

uint64_t sub_100AB1070(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double *v27;
  uint64_t result;
  unint64_t v29;
  unint64_t v30;
  double *v31;
  uint64_t v32;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v34;
  void (*v35)(_QWORD *, _QWORD);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  void *v43;
  uint64_t v44;
  uint64_t inited;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  __n128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v67;
  unint64_t v68;
  char v69[112];
  _QWORD v70[2];
  char v71[8];
  _QWORD v72[3];
  char v73[8];
  char v74[200];
  _QWORD v75[4];
  uint64_t v76;
  uint64_t v77;
  unsigned __int8 v78;
  double *v79;

  v4 = a1;
  v68 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 >= 0)
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    v5 = __CocoaSet.count.getter(a1);
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 16);
  }
  v6 = _swiftEmptyArrayStorage;
  if (v5)
  {
    v79 = _swiftEmptyArrayStorage;
    sub_1006006EC(0, v5 & ~(v5 >> 63), 0);
    if (v68)
    {
      if (v4 < 0)
        v7 = v4;
      else
        v7 = v4 & 0xFFFFFFFFFFFFFF8;
      v8 = __CocoaSet.startIndex.getter(v7);
      v10 = 1;
    }
    else
    {
      v8 = sub_1005C461C(v4);
      v10 = v11 & 1;
    }
    v76 = v8;
    v77 = v9;
    v78 = v10;
    if (v5 < 0)
    {
      __break(1u);
      swift_once(&qword_1013DD770, sub_100A02AA0);
      swift_beginAccess(&static OS_os_log.crlZoneRefetch, v75, 0, 0);
      v43 = (void *)static OS_os_log.crlZoneRefetch;
      v44 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      inited = swift_initStackObject(v44, v74);
      *(_OWORD *)(inited + 16) = xmmword_100EF5E30;
      *(_QWORD *)(inited + 56) = &type metadata for UInt64;
      *(_QWORD *)(inited + 64) = &protocol witness table for UInt64;
      *(_QWORD *)(inited + 32) = a3;
      *(_QWORD *)(inited + 96) = &type metadata for String;
      v46 = sub_1004CFC2C();
      *(_QWORD *)(inited + 104) = v46;
      *(_QWORD *)(inited + 72) = v5;
      *(_QWORD *)(inited + 80) = &v79;
      swift_getErrorValue(v3, v73, v72);
      v47 = v72[1];
      v48 = v72[2];
      v49 = v43;
      v50 = Error.publicDescription.getter(v47, v48);
      *(_QWORD *)(inited + 136) = &type metadata for String;
      *(_QWORD *)(inited + 144) = v46;
      *(_QWORD *)(inited + 112) = v50;
      *(_QWORD *)(inited + 120) = v51;
      swift_getErrorValue(v3, v71, v70);
      v52 = Error.fullDescription.getter(v70[1]);
      *(_QWORD *)(inited + 176) = &type metadata for String;
      *(_QWORD *)(inited + 184) = v46;
      *(_QWORD *)(inited + 152) = v52;
      *(_QWORD *)(inited + 160) = v53;
      v54 = static os_log_type_t.error.getter(v52);
      sub_100A06EBC((uint64_t)v49, &_mh_execute_header, v54, "Failed to addZonesToRefetch to the database with version: %d, zones: %@, error: %{public}@ <%@>", 95, 2, inited);
      swift_setDeallocating(inited);
      v55 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(inited + 32, 4, v55);

      v76 = v3;
      v56 = sub_1004B804C(&qword_1013EB680);
      return CheckedContinuation.resume(throwing:)(&v76, v56);
    }
    else
    {
      v12 = v4 & 0xFFFFFFFFFFFFFF8;
      if (v4 < 0)
        v12 = v4;
      v67 = v12;
      while (1)
      {
        while (1)
        {
          v19 = v76;
          v18 = v77;
          v20 = v78;
          sub_1005C4550(v76, v77, v78, v4);
          v22 = v21;
          v23 = objc_msgSend(v21, "zoneName");
          v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
          v26 = v25;

          v27 = v79;
          result = swift_isUniquelyReferenced_nonNull_native(v79);
          if ((result & 1) == 0)
          {
            result = sub_1006006EC(0, *((_QWORD *)v27 + 2) + 1, 1);
            v27 = v79;
          }
          v30 = *((_QWORD *)v27 + 2);
          v29 = *((_QWORD *)v27 + 3);
          if (v30 >= v29 >> 1)
          {
            result = sub_1006006EC(v29 > 1, v30 + 1, 1);
            v27 = v79;
          }
          *((_QWORD *)v27 + 2) = v30 + 1;
          v31 = &v27[2 * v30];
          *((_QWORD *)v31 + 4) = v24;
          *((_QWORD *)v31 + 5) = v26;
          if (v68)
            break;
          v13 = sub_1005C3B08(v19, v18, v20, v4);
          v15 = v14;
          v17 = v16;
          sub_100503494(v19, v18, v20);
          v76 = v13;
          v77 = v15;
          v78 = v17 & 1;
          if (!--v5)
            goto LABEL_28;
        }
        if ((v20 & 1) == 0)
          break;
        v32 = __CocoaSet.Index.handleBitPattern.getter(v19, v18);
        if (v32)
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v32);
        else
          isUniquelyReferenced_nonNull_native = 1;
        v34 = sub_1004B804C(&qword_101405548);
        v35 = (void (*)(_QWORD *, _QWORD))Set.Index._asCocoa.modify(v75, v34);
        __CocoaSet.formIndex(after:isUnique:)(v36, isUniquelyReferenced_nonNull_native, v67);
        v35(v75, 0);
        if (!--v5)
        {
LABEL_28:
          sub_100503494(v76, v77, v78);
          v6 = v79;
          goto LABEL_29;
        }
      }
      __break(1u);
    }
  }
  else
  {
LABEL_29:
    v75[0] = v6;
    v37 = sub_1004B804C((uint64_t *)&unk_1013E4970);
    v38 = sub_1004CBA30((unint64_t *)&qword_1013DFC40, (uint64_t *)&unk_1013E4970, (uint64_t)&protocol conformance descriptor for [A]);
    v39 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v37, v38);
    v41 = v40;
    swift_bridgeObjectRelease();
    v42 = a2;
    swift_bridgeObjectRetain(v4);
    sub_1004E6B78(v42, (uint64_t)v42, v4, a3);

    swift_bridgeObjectRelease();
    if (qword_1013DD770 != -1)
      swift_once(&qword_1013DD770, sub_100A02AA0);
    swift_beginAccess(&static OS_os_log.crlZoneRefetch, v75, 0, 0);
    v57 = (void *)static OS_os_log.crlZoneRefetch;
    v58 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    v59 = swift_initStackObject(v58, v69);
    *(_OWORD *)(v59 + 16) = xmmword_100EF5A10;
    *(_QWORD *)(v59 + 56) = &type metadata for UInt64;
    *(_QWORD *)(v59 + 64) = &protocol witness table for UInt64;
    *(_QWORD *)(v59 + 32) = a3;
    *(_QWORD *)(v59 + 96) = &type metadata for String;
    *(_QWORD *)(v59 + 104) = sub_1004CFC2C();
    *(_QWORD *)(v59 + 72) = v39;
    *(_QWORD *)(v59 + 80) = v41;
    v60 = v57;
    v62 = static os_log_type_t.default.getter(v61);
    sub_100A06EBC((uint64_t)v60, &_mh_execute_header, v62, "Succeeded addZonesToRefetch to the database with version: %d, zones: %@", 71, 2, v59);
    swift_setDeallocating(v59);
    v63 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(v59 + 32, 2, v63);

    v64 = sub_1004B804C(&qword_1013EB680);
    return CheckedContinuation.resume(returning:)(v64, v64);
  }
  return result;
}

uint64_t sub_100AB15FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  int64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int64_t v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  void *v46;
  __n128 v47;
  _QWORD v49[2];
  char *v50;
  uint64_t v51;
  int64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  _QWORD v62[5];

  v55 = a2;
  v57 = type metadata accessor for CRLBoardDataStore.KeyValueTableKey(0);
  __chkstk_darwin(v57);
  v5 = (char *)v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (_QWORD *)((char *)v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v56 = v2;
  v11 = *(void **)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v10 = v11;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6, v8);
  v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v10);
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v10, v6);
  if ((v11 & 1) == 0)
LABEL_41:
    __break(1u);
  v58 = v5;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v13 = a1;
    else
      v13 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v14 = __CocoaSet.makeIterator()(v13);
    v15 = sub_1004B8930(0, (unint64_t *)&qword_1013E1770, CKRecordZoneID_ptr);
    v16 = sub_1005A15B8((unint64_t *)&qword_1013E1778, (unint64_t *)&qword_1013E1770, CKRecordZoneID_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
    v17 = Set.Iterator.init(_cocoa:)(v62, v14, v15, v16);
    a1 = v62[0];
    v53 = v62[1];
    v18 = v62[2];
    v19 = v62[3];
    v20 = v62[4];
  }
  else
  {
    v21 = -1 << *(_BYTE *)(a1 + 32);
    v22 = *(_QWORD *)(a1 + 56);
    v53 = a1 + 56;
    v18 = ~v21;
    v23 = -v21;
    if (v23 < 64)
      v24 = ~(-1 << v23);
    else
      v24 = -1;
    v20 = v24 & v22;
    swift_bridgeObjectRetain(a1);
    v19 = 0;
  }
  v49[1] = v18;
  v51 = a1 & 0x7FFFFFFFFFFFFFFFLL;
  v52 = (unint64_t)(v18 + 64) >> 6;
  v50 = (char *)&type metadata for Swift.AnyObject + 8;
  if ((a1 & 0x8000000000000000) == 0)
    goto LABEL_15;
LABEL_12:
  v25 = __CocoaSet.Iterator.next()(v17);
  v26 = v58;
  if (!v25)
    return sub_1004D284C(a1);
  v27 = v25;
  v60 = v25;
  v28 = sub_1004B8930(0, (unint64_t *)&qword_1013E1770, CKRecordZoneID_ptr);
  swift_unknownObjectRetain(v27);
  swift_dynamicCast(&v61, &v60, v50, v28, 7);
  v29 = v61;
  swift_unknownObjectRelease(v27);
  v30 = v19;
  v31 = v20;
  if (!v29)
    return sub_1004D284C(a1);
  while (1)
  {
    v54 = v20;
    *v26 = v29;
    swift_storeEnumTagMultiPayload(v26, v57, 0);
    v35 = (void *)objc_opt_self(NSKeyedArchiver);
    v61 = 0;
    v36 = v29;
    v37 = objc_msgSend(v35, "archivedDataWithRootObject:requiringSecureCoding:error:", v36, 1, &v61);
    v38 = v61;
    if (!v37)
    {
      v46 = v38;
      _convertNSErrorToError(_:)(v38);

      swift_willThrow(v47);
      sub_1004B84A4((uint64_t)v26, type metadata accessor for CRLBoardDataStore.KeyValueTableKey);
      return sub_1004D284C(a1);
    }
    v39 = a1;
    v40 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v37);
    v42 = v41;

    v43 = swift_allocObject(&unk_1012932D0, 24, 7);
    *(_QWORD *)(v43 + 16) = v55;
    sub_1004BE310(v40, v42);
    v44 = v59;
    sub_100AAE8CC((uint64_t)v26, (sqlite3_stmt **)sub_100B00A10, v43, v56, v40, v42);
    v59 = v44;
    if (v44)
      break;
    sub_1004B84A4((uint64_t)v26, type metadata accessor for CRLBoardDataStore.KeyValueTableKey);
    swift_release(v43);

    v17 = (_QWORD *)sub_1004BBBC8(v40, v42);
    v19 = v30;
    v20 = v31;
    a1 = v39;
    if (v39 < 0)
      goto LABEL_12;
LABEL_15:
    v26 = v58;
    if (v20)
    {
      v31 = (v20 - 1) & v20;
      v32 = __clz(__rbit64(v20)) | (v19 << 6);
      v30 = v19;
    }
    else
    {
      v30 = v19 + 1;
      if (__OFADD__(v19, 1))
      {
        __break(1u);
        goto LABEL_41;
      }
      if (v30 >= v52)
        return sub_1004D284C(a1);
      v33 = *(_QWORD *)(v53 + 8 * v30);
      if (!v33)
      {
        v34 = v19 + 2;
        if (v19 + 2 >= v52)
          return sub_1004D284C(a1);
        v33 = *(_QWORD *)(v53 + 8 * v34);
        if (v33)
          goto LABEL_24;
        v34 = v19 + 3;
        if (v19 + 3 >= v52)
          return sub_1004D284C(a1);
        v33 = *(_QWORD *)(v53 + 8 * v34);
        if (v33)
        {
LABEL_24:
          v30 = v34;
        }
        else
        {
          v30 = v19 + 4;
          if (v19 + 4 >= v52)
            return sub_1004D284C(a1);
          v33 = *(_QWORD *)(v53 + 8 * v30);
          if (!v33)
          {
            v45 = v19 + 5;
            do
            {
              if (v52 == v45)
                return sub_1004D284C(a1);
              v33 = *(_QWORD *)(v53 + 8 * v45++);
            }
            while (!v33);
            v30 = v45 - 1;
          }
        }
      }
      v31 = (v33 - 1) & v33;
      v32 = __clz(__rbit64(v33)) + (v30 << 6);
    }
    v29 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v32);
    if (!v29)
      return sub_1004D284C(a1);
  }

  swift_release(v43);
  sub_1004B84A4((uint64_t)v26, type metadata accessor for CRLBoardDataStore.KeyValueTableKey);
  sub_1004D284C(v39);
  return sub_1004BBBC8(v40, v42);
}

uint64_t sub_100AB1C88(uint64_t a1, uint64_t a2, void *aBlock, void *a4)
{
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  id v9;

  v4[2] = a2;
  v4[3] = a4;
  v4[4] = _Block_copy(aBlock);
  v7 = sub_1004B8930(0, (unint64_t *)&qword_1013E1770, CKRecordZoneID_ptr);
  v8 = sub_1005A15B8((unint64_t *)&qword_1013E1778, (unint64_t *)&qword_1013E1770, CKRecordZoneID_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
  v4[5] = static Set._unconditionallyBridgeFromObjectiveC(_:)(a1, v7, v8);
  v9 = a4;
  return swift_task_switch(sub_100AB1D3C, 0, 0);
}

uint64_t sub_100AB1D3C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = v0[5];
  v3 = v0[2];
  v2 = v0[3];
  v4 = (_QWORD *)swift_task_alloc(48);
  v0[6] = v4;
  v4[2] = v2;
  v4[3] = v1;
  v4[4] = v3;
  v5 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[7] = v5;
  *v5 = v0;
  v5[1] = sub_100AB1DE4;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD00000000000001DLL, 0x8000000100FF25D0, sub_100B00AEC, v4, (char *)&type metadata for () + 8);
}

uint64_t sub_100AB1DE4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 56);
  *(_QWORD *)(*v1 + 64) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100AB1EA4;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 48));
    v4 = sub_100AB1E50;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100AB1E50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);

  swift_bridgeObjectRelease(v2);
  (*(void (**)(uint64_t, _QWORD))(v1 + 16))(v1, 0);
  _Block_release(*(const void **)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AB1EA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v1 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 32);

  swift_bridgeObjectRelease(v3);
  swift_task_dealloc(v2);
  v5 = (void *)_convertErrorToNSError(_:)(v1);
  swift_errorRelease(v1);
  (*(void (**)(uint64_t, void *))(v4 + 16))(v4, v5);

  _Block_release(*(const void **)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double sub_100AB2020(uint64_t a1, void *a2, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  id v27;
  char *v28;
  char *v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  double result;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double *v48;
  _QWORD aBlock[5];
  uint64_t v50;

  v38 = a2;
  v39 = a1;
  v44 = type metadata accessor for DispatchWorkItemFlags(0);
  v47 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v43 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v45 = *(_QWORD *)(v6 - 8);
  v46 = v6;
  __chkstk_darwin(v6);
  v42 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1004B804C(&qword_1013EB680);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = type metadata accessor for CRLBoardDataStore.KeyValueTableKey(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v11);
  v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  *(uint64_t *)((char *)&v37 - v16) = (uint64_t)a2;
  v17 = (char *)&v37 - v16;
  v40 = (uint64_t)&v37 - v16;
  swift_storeEnumTagMultiPayload((char *)&v37 - v16, v18, 0);
  v41 = *(_QWORD *)&a3[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue];
  sub_1004B8460((uint64_t)v17, (uint64_t)v14, type metadata accessor for CRLBoardDataStore.KeyValueTableKey);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v39, v8);
  v19 = *(unsigned __int8 *)(v12 + 80);
  v20 = (v19 + 24) & ~v19;
  v21 = (v13 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = *(unsigned __int8 *)(v9 + 80);
  v23 = (v22 + v21 + 8) & ~v22;
  v24 = swift_allocObject(&unk_101293280, v23 + v10, v19 | v22 | 7);
  *(_QWORD *)(v24 + 16) = a3;
  sub_1004B84E0((uint64_t)v14, v24 + v20, type metadata accessor for CRLBoardDataStore.KeyValueTableKey);
  v25 = v38;
  *(_QWORD *)(v24 + v21) = v38;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v24 + v23, (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  aBlock[4] = sub_100B00960;
  v50 = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(_QWORD *)"";
  aBlock[2] = sub_1005D2FC0;
  aBlock[3] = &unk_101293298;
  v26 = _Block_copy(aBlock);
  v27 = v25;
  v28 = a3;
  v29 = v42;
  static DispatchQoS.unspecified.getter(v30);
  v48 = _swiftEmptyArrayStorage;
  v31 = sub_1004B7878((unint64_t *)&qword_1013E1D20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v32 = sub_1004B804C((uint64_t *)&unk_1013DFBF0);
  v33 = sub_1004CBA30((unint64_t *)&qword_1013E1D30, (uint64_t *)&unk_1013DFBF0, (uint64_t)&protocol conformance descriptor for [A]);
  v35 = v43;
  v34 = v44;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v48, v32, v33, v44, v31);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v29, v35, v26);
  _Block_release(v26);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v35, v34);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v29, v46);
  sub_1004B84A4(v40, type metadata accessor for CRLBoardDataStore.KeyValueTableKey);
  *(_QWORD *)&result = swift_release(v50).n128_u64[0];
  return result;
}

uint64_t sub_100AB2374(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  uint64_t v5;
  uint64_t inited;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[72];
  _BYTE v18[40];

  sub_10080EB50(sub_100B009D8);
  if (qword_1013DD770 != -1)
    swift_once(&qword_1013DD770, sub_100A02AA0);
  swift_beginAccess(&static OS_os_log.crlZoneRefetch, v18, 0, 0);
  v4 = (void *)static OS_os_log.crlZoneRefetch;
  v5 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v5, v17);
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  v7 = v4;
  v8 = objc_msgSend(a3, "zoneName");
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v11 = v10;

  *(_QWORD *)(inited + 56) = &type metadata for String;
  *(_QWORD *)(inited + 64) = sub_1004CFC2C();
  *(_QWORD *)(inited + 32) = v9;
  *(_QWORD *)(inited + 40) = v11;
  v13 = static os_log_type_t.default.getter(v12);
  sub_100A06EBC((uint64_t)v7, &_mh_execute_header, v13, "Succeeded removeZoneToRefetch to the database with zone: %@", 59, 2, inited);
  swift_setDeallocating(inited);
  v14 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(inited + 32, 1, v14);

  v15 = sub_1004B804C(&qword_1013EB680);
  return CheckedContinuation.resume(returning:)(v15, v15);
}

uint64_t sub_100AB27B0(void *a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  id v6;
  id v7;

  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  v6 = a1;
  v7 = a3;
  return swift_task_switch(sub_100AB2804, 0, 0);
}

uint64_t sub_100AB2804()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 16);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 48) = v2;
  *v2 = v0;
  v2[1] = sub_100AB289C;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v2, 0, 0, 0xD000000000000017, 0x8000000100FF2510, sub_100B00830, v1, (char *)&type metadata for () + 8);
}

uint64_t sub_100AB289C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 48);
  *(_QWORD *)(*v1 + 56) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100B026DC;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 40));
    v4 = sub_100B02504;
  }
  return swift_task_switch(v4, 0, 0);
}

double sub_100AB2908(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  id v36;
  char *v37;
  char *v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  double result;
  uint64_t v47;
  char *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double *v63;
  _QWORD aBlock[5];
  uint64_t v65;

  v53 = a1;
  v59 = type metadata accessor for DispatchWorkItemFlags(0);
  v62 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59);
  v58 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v60 = *(_QWORD *)(v6 - 8);
  v61 = v6;
  __chkstk_darwin(v6);
  v57 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1004B804C(&qword_1013EB680);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v51 = v8;
  v52 = v10;
  v11 = v9;
  __chkstk_darwin(v8);
  v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = v13;
  v14 = type metadata accessor for CRLBoardDataStore.KeyValueTableKey(0);
  v50 = *(_QWORD *)(v14 - 8);
  v15 = *(_QWORD *)(v50 + 64);
  __chkstk_darwin(v14);
  v47 = (uint64_t)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v47 - v17;
  __chkstk_darwin(v19);
  v21 = (uint64_t *)((char *)&v47 - v20);
  __chkstk_darwin(v22);
  v24 = (char *)&v47 - v23;
  v49 = (void *)a2;
  *(uint64_t *)((char *)&v47 - v23) = a2;
  v55 = (uint64_t)&v47 - v23;
  swift_storeEnumTagMultiPayload((char *)&v47 - v23, v14, 0);
  *v21 = a2;
  v56 = v21;
  swift_storeEnumTagMultiPayload(v21, v14, 1);
  v54 = *(_QWORD *)&a3[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue];
  sub_1004B8460((uint64_t)v24, (uint64_t)v18, type metadata accessor for CRLBoardDataStore.KeyValueTableKey);
  sub_1004B8460((uint64_t)v21, (uint64_t)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for CRLBoardDataStore.KeyValueTableKey);
  v25 = v11;
  v26 = v13;
  v27 = v51;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v26, v53, v51);
  v28 = *(unsigned __int8 *)(v50 + 80);
  v29 = (v28 + 32) & ~v28;
  v30 = (v15 + v28 + v29) & ~v28;
  v31 = *(unsigned __int8 *)(v11 + 80);
  v32 = (v15 + v31 + v30) & ~v31;
  v33 = swift_allocObject(&unk_1012931B8, v32 + v52, v28 | v31 | 7);
  v34 = v49;
  *(_QWORD *)(v33 + 16) = a3;
  *(_QWORD *)(v33 + 24) = v34;
  sub_1004B84E0((uint64_t)v18, v33 + v29, type metadata accessor for CRLBoardDataStore.KeyValueTableKey);
  sub_1004B84E0(v47, v33 + v30, type metadata accessor for CRLBoardDataStore.KeyValueTableKey);
  (*(void (**)(uint64_t, char *, uint64_t))(v25 + 32))(v33 + v32, v48, v27);
  aBlock[4] = sub_100B006EC;
  v65 = v33;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(_QWORD *)"";
  aBlock[2] = sub_1005D2FC0;
  aBlock[3] = &unk_1012931D0;
  v35 = _Block_copy(aBlock);
  v36 = v34;
  v37 = a3;
  v38 = v57;
  static DispatchQoS.unspecified.getter(v39);
  v63 = _swiftEmptyArrayStorage;
  v40 = sub_1004B7878((unint64_t *)&qword_1013E1D20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v41 = sub_1004B804C((uint64_t *)&unk_1013DFBF0);
  v42 = sub_1004CBA30((unint64_t *)&qword_1013E1D30, (uint64_t *)&unk_1013DFBF0, (uint64_t)&protocol conformance descriptor for [A]);
  v43 = v58;
  v44 = v41;
  v45 = v59;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v63, v44, v42, v59, v40);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v38, v43, v35);
  _Block_release(v35);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v43, v45);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v38, v61);
  sub_1004B84A4((uint64_t)v56, type metadata accessor for CRLBoardDataStore.KeyValueTableKey);
  sub_1004B84A4(v55, type metadata accessor for CRLBoardDataStore.KeyValueTableKey);
  *(_QWORD *)&result = swift_release(v65).n128_u64[0];
  return result;
}

uint64_t sub_100AB2D18()
{
  uint64_t v0;

  sub_10080EB50(sub_100B00764);
  v0 = sub_1004B804C(&qword_1013EB680);
  return CheckedContinuation.resume(returning:)(v0, v0);
}

uint64_t sub_100AB2EC8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  sqlite3_int64 v7;
  sqlite3_stmt **v8;
  char v9;
  void *v10;
  uint64_t v11;
  uint64_t inited;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  sqlite3_stmt **v32;
  char v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE v57[72];
  _BYTE v58[72];
  _BYTE v59[72];
  _BYTE v60[24];
  _BYTE v61[72];
  _BYTE v62[32];
  uint64_t v63;

  v7 = sub_1001E9730();
  v8 = sub_100A79800(v7);
  if (!v4)
  {
    v9 = sub_10062219C(a2, (uint64_t)v8);
    swift_bridgeObjectRelease();
    if ((v9 & 1) != 0)
    {
      v63 = a4;
      if (qword_1013DD770 != -1)
        swift_once(&qword_1013DD770, sub_100A02AA0);
      swift_beginAccess(&static OS_os_log.crlZoneRefetch, v62, 0, 0);
      v10 = (void *)static OS_os_log.crlZoneRefetch;
      v11 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      inited = swift_initStackObject(v11, v57);
      *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
      v13 = v10;
      v14 = objc_msgSend(a2, "zoneName");
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      v17 = v16;

      *(_QWORD *)(inited + 56) = &type metadata for String;
      *(_QWORD *)(inited + 64) = sub_1004CFC2C();
      *(_QWORD *)(inited + 32) = v15;
      *(_QWORD *)(inited + 40) = v17;
      v19 = static os_log_type_t.default.getter(v18);
      sub_100A06EBC((uint64_t)v13, &_mh_execute_header, v19, "Removing zone to refetch after successful refetch: %@", 53, 2, inited);
      swift_setDeallocating(inited);
      v20 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(inited + 32, 1, v20);

      sub_100AAF198();
    }
    else
    {
      if (qword_1013DD770 != -1)
        swift_once(&qword_1013DD770, sub_100A02AA0);
      swift_beginAccess(&static OS_os_log.crlZoneRefetch, v62, 0, 0);
      v21 = (void *)static OS_os_log.crlZoneRefetch;
      v22 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      v23 = swift_initStackObject(v22, v61);
      *(_OWORD *)(v23 + 16) = xmmword_100EF5E40;
      v24 = v21;
      v25 = objc_msgSend(a2, "zoneName");
      v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      v28 = v27;

      *(_QWORD *)(v23 + 56) = &type metadata for String;
      *(_QWORD *)(v23 + 64) = sub_1004CFC2C();
      *(_QWORD *)(v23 + 32) = v26;
      *(_QWORD *)(v23 + 40) = v28;
      v30 = static os_log_type_t.default.getter(v29);
      sub_100A06EBC((uint64_t)v24, &_mh_execute_header, v30, "Not removing zone to refetch, since it still needs to be refetched: %@", 70, 2, v23);
      swift_setDeallocating(v23);
      v31 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(v23 + 32, 1, v31);

    }
    v32 = sub_100A7A110();
    v33 = sub_10062219C(a2, (uint64_t)v32);
    swift_bridgeObjectRelease();
    if ((v33 & 1) != 0)
    {
      if (qword_1013DD770 != -1)
        swift_once(&qword_1013DD770, sub_100A02AA0);
      swift_beginAccess(&static OS_os_log.crlZoneRefetch, v60, 0, 0);
      v34 = (void *)static OS_os_log.crlZoneRefetch;
      v35 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      v36 = swift_initStackObject(v35, v58);
      *(_OWORD *)(v36 + 16) = xmmword_100EF5E40;
      v37 = v34;
      v38 = objc_msgSend(a2, "zoneName");
      v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
      v41 = v40;

      *(_QWORD *)(v36 + 56) = &type metadata for String;
      *(_QWORD *)(v36 + 64) = sub_1004CFC2C();
      *(_QWORD *)(v36 + 32) = v39;
      *(_QWORD *)(v36 + 40) = v41;
      v43 = static os_log_type_t.default.getter(v42);
      sub_100A06EBC((uint64_t)v37, &_mh_execute_header, v43, "Removing unsupported zone to refetch after successful refetch: %@", 65, 2, v36);
      swift_setDeallocating(v36);
      v44 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(v36 + 32, 1, v44);

      sub_100AAF198();
    }
    else
    {
      if (qword_1013DD770 != -1)
        swift_once(&qword_1013DD770, sub_100A02AA0);
      swift_beginAccess(&static OS_os_log.crlZoneRefetch, v60, 0, 0);
      v45 = (void *)static OS_os_log.crlZoneRefetch;
      v46 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      v47 = swift_initStackObject(v46, v59);
      *(_OWORD *)(v47 + 16) = xmmword_100EF5E40;
      v48 = v45;
      v49 = objc_msgSend(a2, "zoneName");
      v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
      v52 = v51;

      *(_QWORD *)(v47 + 56) = &type metadata for String;
      *(_QWORD *)(v47 + 64) = sub_1004CFC2C();
      *(_QWORD *)(v47 + 32) = v50;
      *(_QWORD *)(v47 + 40) = v52;
      v54 = static os_log_type_t.default.getter(v53);
      sub_100A06EBC((uint64_t)v48, &_mh_execute_header, v54, "Not removing unsupported zone to refetch (it may not exist, or maybe it still needs to be refetched): %@", 104, 2, v47);
      swift_setDeallocating(v47);
      v55 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(v47 + 32, 1, v55);

    }
  }
  return 1;
}

uint64_t sub_100AB3528(void *a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  id v6;
  id v7;

  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  v6 = a1;
  v7 = a3;
  return swift_task_switch(sub_100AB357C, 0, 0);
}

uint64_t sub_100AB357C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 16);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 48) = v2;
  *v2 = v0;
  v2[1] = sub_100AB3614;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v2, 0, 0, 0xD00000000000002FLL, 0x8000000100FDF080, sub_1008F96B4, v1, (char *)&type metadata for () + 8);
}

uint64_t sub_100AB3614()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 48);
  *(_QWORD *)(*v1 + 56) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100AB36D0;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 40));
    v4 = sub_100AB3680;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100AB3680()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  v1 = *(void **)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);

  (*(void (**)(uint64_t, _QWORD))(v2 + 16))(v2, 0);
  _Block_release(*(const void **)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AB36D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v1 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  v4 = *(void **)(v0 + 24);

  swift_task_dealloc(v2);
  v5 = (void *)_convertErrorToNSError(_:)(v1);
  swift_errorRelease(v1);
  (*(void (**)(uint64_t, void *))(v3 + 16))(v3, v5);

  _Block_release(*(const void **)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double sub_100AB374C(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  char *v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double *v38;
  _QWORD aBlock[5];
  uint64_t v40;

  v32 = a5;
  v33 = a6;
  v31 = a3;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v37 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v35 = *(_QWORD *)(v12 - 8);
  v36 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1004B804C(&qword_1013EB680);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  v18 = __chkstk_darwin(v15);
  v19 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = *(_QWORD *)&a2[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue];
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v16 + 16))(v19, a1, v15, v18);
  v20 = *(unsigned __int8 *)(v16 + 80);
  v21 = (v20 + 32) & ~v20;
  v22 = swift_allocObject(a4, v21 + v17, v20 | 7);
  v23 = v31;
  *(_QWORD *)(v22 + 16) = a2;
  *(_QWORD *)(v22 + 24) = v23;
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v22 + v21, v19, v15);
  aBlock[4] = v32;
  v40 = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(_QWORD *)"";
  aBlock[2] = sub_1005D2FC0;
  aBlock[3] = v33;
  v24 = _Block_copy(aBlock);
  v25 = a2;
  v26 = swift_bridgeObjectRetain(v23);
  static DispatchQoS.unspecified.getter(v26);
  v38 = _swiftEmptyArrayStorage;
  v27 = sub_1004B7878((unint64_t *)&qword_1013E1D20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v28 = sub_1004B804C((uint64_t *)&unk_1013DFBF0);
  v29 = sub_1004CBA30((unint64_t *)&qword_1013E1D30, (uint64_t *)&unk_1013DFBF0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v38, v28, v29, v9, v27);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v11, v24);
  _Block_release(v24);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v14, v36);
  *(_QWORD *)&result = swift_release(v40).n128_u64[0];
  return result;
}

uint64_t sub_100AB39C4(void *a1, uint64_t a2)
{
  char *v3;
  uint64_t v4;

  v3 = a1;
  swift_bridgeObjectRetain(a2);
  sub_1004E6E34(v3, (uint64_t)v3, a2);

  swift_bridgeObjectRelease();
  v4 = sub_1004B804C(&qword_1013EB680);
  return CheckedContinuation.resume(returning:)(v4, v4);
}

uint64_t sub_100AB3B88(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  unint64_t v29;
  unint64_t v30;
  int64_t v31;
  unint64_t v33;
  int64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int64_t v44;
  void *v45;
  __n128 v46;
  _QWORD v48[2];
  char *v49;
  uint64_t v50;
  int64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  _QWORD v59[5];

  v54 = type metadata accessor for CRLBoardDataStore.KeyValueTableKey(0);
  __chkstk_darwin(v54);
  v4 = (_QWORD *)((char *)v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (_QWORD *)((char *)v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v53 = v1;
  v10 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v9 = v10;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5, v7);
  v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v9, v5);
  if ((v10 & 1) == 0)
LABEL_43:
    __break(1u);
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v12 = a1;
    else
      v12 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v13 = __CocoaSet.makeIterator()(v12);
    v14 = sub_1004B8930(0, (unint64_t *)&qword_1013E1770, CKRecordZoneID_ptr);
    v15 = sub_1005A15B8((unint64_t *)&qword_1013E1778, (unint64_t *)&qword_1013E1770, CKRecordZoneID_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
    v16 = Set.Iterator.init(_cocoa:)(v59, v13, v14, v15);
    a1 = v59[0];
    v52 = v59[1];
    v17 = v59[2];
    v18 = v59[3];
    v19 = v59[4];
  }
  else
  {
    v20 = -1 << *(_BYTE *)(a1 + 32);
    v21 = *(_QWORD *)(a1 + 56);
    v52 = a1 + 56;
    v22 = ~v20;
    v23 = -v20;
    if (v23 < 64)
      v24 = ~(-1 << v23);
    else
      v24 = -1;
    v19 = v24 & v21;
    swift_bridgeObjectRetain(a1);
    v17 = v22;
    v18 = 0;
  }
  v48[1] = v17;
  v50 = a1 & 0x7FFFFFFFFFFFFFFFLL;
  v51 = (unint64_t)(v17 + 64) >> 6;
  v49 = (char *)&type metadata for Swift.AnyObject + 8;
  v55 = v19;
  if ((a1 & 0x8000000000000000) == 0)
    goto LABEL_15;
LABEL_12:
  v25 = __CocoaSet.Iterator.next()(v16);
  if (!v25)
    return sub_1004D284C(a1);
  v26 = v25;
  v57 = v25;
  v27 = sub_1004B8930(0, (unint64_t *)&qword_1013E1770, CKRecordZoneID_ptr);
  swift_unknownObjectRetain(v26);
  swift_dynamicCast(&v58, &v57, v49, v27, 7);
  v28 = v58;
  swift_unknownObjectRelease(v26);
  if (!v28)
    return sub_1004D284C(a1);
  while (1)
  {
    v35 = a1;
    *v4 = v28;
    swift_storeEnumTagMultiPayload(v4, v54, 1);
    v36 = (void *)objc_opt_self(NSKeyedArchiver);
    v58 = 0;
    v37 = v28;
    v38 = objc_msgSend(v36, "archivedDataWithRootObject:requiringSecureCoding:error:", v37, 1, &v58);
    v39 = v58;
    if (!v38)
    {
      v45 = v39;
      _convertNSErrorToError(_:)(v39);

      swift_willThrow(v46);
      sub_1004B84A4((uint64_t)v4, type metadata accessor for CRLBoardDataStore.KeyValueTableKey);
      return sub_1004D284C(v35);
    }
    v40 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v38);
    v42 = v41;

    sub_1004BE310(v40, v42);
    v43 = v56;
    sub_100AAE8CC((uint64_t)v4, (sqlite3_stmt **)sub_100AB448C, 0, v53, v40, v42);
    v56 = v43;
    if (v43)
      break;
    sub_1004B84A4((uint64_t)v4, type metadata accessor for CRLBoardDataStore.KeyValueTableKey);

    v16 = (_QWORD *)sub_1004BBBC8(v40, v42);
    a1 = v35;
    v55 = v19;
    if (v35 < 0)
      goto LABEL_12;
LABEL_15:
    if (v19)
    {
      v29 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v30 = v29 | (v18 << 6);
    }
    else
    {
      v31 = v18;
      if (__OFADD__(v18++, 1))
      {
        __break(1u);
        goto LABEL_43;
      }
      if (v18 >= v51)
        return sub_1004D284C(a1);
      v33 = *(_QWORD *)(v52 + 8 * v18);
      if (!v33)
      {
        v34 = v18 + 1;
        if (v18 + 1 >= v51)
          return sub_1004D284C(a1);
        v33 = *(_QWORD *)(v52 + 8 * v34);
        if (v33)
          goto LABEL_24;
        v34 = v18 + 2;
        if (v18 + 2 >= v51)
          return sub_1004D284C(a1);
        v33 = *(_QWORD *)(v52 + 8 * v34);
        if (v33)
        {
LABEL_24:
          v18 = v34;
        }
        else
        {
          v18 += 3;
          if (v18 >= v51)
            return sub_1004D284C(a1);
          v33 = *(_QWORD *)(v52 + 8 * v18);
          if (!v33)
          {
            v44 = v31 + 5;
            do
            {
              if (v51 == v44)
                return sub_1004D284C(a1);
              v33 = *(_QWORD *)(v52 + 8 * v44++);
            }
            while (!v33);
            v18 = v44 - 1;
          }
        }
      }
      v19 = (v33 - 1) & v33;
      v30 = __clz(__rbit64(v33)) + (v18 << 6);
    }
    v28 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v30);
    if (!v28)
      return sub_1004D284C(a1);
  }

  sub_1004B84A4((uint64_t)v4, type metadata accessor for CRLBoardDataStore.KeyValueTableKey);
  sub_1004D284C(v35);
  return sub_1004BBBC8(v40, v42);
}

uint64_t sub_100AB41F4(uint64_t a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v6 = sub_1004B8930(0, (unint64_t *)&qword_1013E1770, CKRecordZoneID_ptr);
  v7 = sub_1005A15B8((unint64_t *)&qword_1013E1778, (unint64_t *)&qword_1013E1770, CKRecordZoneID_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
  v3[4] = static Set._unconditionallyBridgeFromObjectiveC(_:)(a1, v6, v7);
  v8 = a3;
  return swift_task_switch(sub_100AB42A8, 0, 0);
}

uint64_t sub_100AB42A8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[4];
  v2 = v0[2];
  v3 = swift_task_alloc(32);
  v0[5] = v3;
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[6] = v4;
  *v4 = v0;
  v4[1] = sub_100AB434C;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000020, 0x8000000100FF22D0, sub_100B00428, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_100AB434C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 48);
  *(_QWORD *)(*v1 + 56) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100AB440C;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 40));
    v4 = sub_100AB43B8;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100AB43B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);

  swift_bridgeObjectRelease(v2);
  (*(void (**)(uint64_t, _QWORD))(v1 + 16))(v1, 0);
  _Block_release(*(const void **)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AB440C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v1 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 24);

  swift_bridgeObjectRelease(v3);
  swift_task_dealloc(v2);
  v5 = (void *)_convertErrorToNSError(_:)(v1);
  swift_errorRelease(v1);
  (*(void (**)(uint64_t, void *))(v4 + 16))(v4, v5);

  _Block_release(*(const void **)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AB448C(uint64_t a1, uint64_t a2)
{
  sqlite3_int64 v3;

  v3 = sub_1001E9730();
  return sub_1006B5B50(v3, a2);
}

double sub_100AB45A0(uint64_t a1, void *a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  id v26;
  char *v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  double result;
  uint64_t v35;
  id v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double *v46;
  _QWORD aBlock[5];
  uint64_t v48;

  v36 = a2;
  v37 = a3;
  v38 = a1;
  v42 = type metadata accessor for DispatchWorkItemFlags(0);
  v45 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v41 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v43 = *(_QWORD *)(v5 - 8);
  v44 = v5;
  __chkstk_darwin(v5);
  v40 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1004B804C(&qword_1013EB680);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v10 = type metadata accessor for CRLBoardDataStore.KeyValueTableKey(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v35 - v15;
  *(uint64_t *)((char *)&v35 - v15) = (uint64_t)a2;
  swift_storeEnumTagMultiPayload((char *)&v35 - v15, v17, 1);
  v18 = v37;
  v39 = *(_QWORD *)&v37[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue];
  sub_1004B8460((uint64_t)v16, (uint64_t)v13, type metadata accessor for CRLBoardDataStore.KeyValueTableKey);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v38, v7);
  v19 = *(unsigned __int8 *)(v11 + 80);
  v20 = (v19 + 24) & ~v19;
  v21 = *(unsigned __int8 *)(v8 + 80);
  v22 = (v12 + v21 + v20) & ~v21;
  v23 = swift_allocObject(&unk_101293028, v22 + v9, v19 | v21 | 7);
  *(_QWORD *)(v23 + 16) = v18;
  sub_1004B84E0((uint64_t)v13, v23 + v20, type metadata accessor for CRLBoardDataStore.KeyValueTableKey);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v23 + v22, (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  aBlock[4] = sub_100B00394;
  v48 = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(_QWORD *)"";
  aBlock[2] = sub_1005D2FC0;
  aBlock[3] = &unk_101293040;
  v24 = _Block_copy(aBlock);
  v25 = v36;
  v26 = v18;
  v27 = v40;
  static DispatchQoS.unspecified.getter(v28);
  v46 = _swiftEmptyArrayStorage;
  v29 = sub_1004B7878((unint64_t *)&qword_1013E1D20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v30 = sub_1004B804C((uint64_t *)&unk_1013DFBF0);
  v31 = sub_1004CBA30((unint64_t *)&qword_1013E1D30, (uint64_t *)&unk_1013DFBF0, (uint64_t)&protocol conformance descriptor for [A]);
  v33 = v41;
  v32 = v42;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v46, v30, v31, v42, v29);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v27, v33, v24);
  _Block_release(v24);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v33, v32);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v27, v44);
  sub_1004B84A4((uint64_t)v16, type metadata accessor for CRLBoardDataStore.KeyValueTableKey);
  *(_QWORD *)&result = swift_release(v48).n128_u64[0];
  return result;
}

uint64_t sub_100AB48E0()
{
  uint64_t v0;

  sub_10080EB50(sub_100B026C0);
  v0 = sub_1004B804C(&qword_1013EB680);
  return CheckedContinuation.resume(returning:)(v0, v0);
}

uint64_t sub_100AB4BBC(void *a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  id v6;
  id v7;

  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  v6 = a1;
  v7 = a3;
  return swift_task_switch(sub_100AB4C10, 0, 0);
}

uint64_t sub_100AB4C10()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 16);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 48) = v2;
  *v2 = v0;
  v2[1] = sub_100AB289C;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v2, 0, 0, 0xD000000000000022, 0x8000000100FF2250, sub_100B00278, v1, (char *)&type metadata for () + 8);
}

void sub_100AB4CA8()
{
  sub_10080EB50(sub_100AFF8F4);
}

void sub_100AB4CE4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  void (*v13)(_QWORD, __n128);
  id v14;
  void (*v15)(_QWORD *, uint64_t);
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  __n128 v35;
  void *v36;
  id v37;
  void *v38;
  id v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  id v44;
  int v45;
  sqlite3_stmt **v46;
  uint64_t v47;
  uint64_t v48;
  Swift::String v49;
  void *object;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  __n128 v55;
  void *v56;
  id v57;
  id v58;
  char *v59;
  id v60;
  void *v61;
  os_unfair_lock_s *v62;
  id v63;
  void *v64;
  id v65;
  sqlite3_stmt **v66;
  sqlite3_stmt **v67;
  void (*v68)(_QWORD *, uint64_t);
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  void (*v73)(_QWORD *, _QWORD, uint64_t);
  unint64_t v74;
  unint64_t v75;
  char v76[24];
  uint64_t v77;
  unint64_t v78;
  char v79[32];

  v5 = v3;
  v70 = a2;
  v71 = a1;
  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (sqlite3_stmt ***)((char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = *(void **)&v3[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue];
  *v11 = v12;
  v13 = *(void (**)(_QWORD, __n128))(v8 + 104);
  v72 = enum case for DispatchPredicate.onQueue(_:);
  v73 = (void (*)(_QWORD *, _QWORD, uint64_t))v13;
  v13(v11, v9);
  v14 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)(v11);
  v15 = *(void (**)(_QWORD *, uint64_t))(v8 + 8);
  v15(v11, v7);
  if ((v12 & 1) == 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  v69 = a3;
  v77 = 0;
  v78 = 0xE000000000000000;
  _StringGuts.grow(_:)(54);
  v16._countAndFlagsBits = 0xD000000000000016;
  v16._object = (void *)0x8000000100FF0E00;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0x737465737361;
  v17._object = (void *)0xE600000000000000;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 10272;
  v18._object = (void *)0xE200000000000000;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 0x75755F7465737361;
  v19._object = (void *)0xEA00000000006469;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 8236;
  v20._object = (void *)0xE200000000000000;
  String.append(_:)(v20);
  v21._countAndFlagsBits = 0x6F69736E65747865;
  v21._object = (void *)0xE90000000000006ELL;
  String.append(_:)(v21);
  v22._countAndFlagsBits = 8236;
  v22._object = (void *)0xE200000000000000;
  String.append(_:)(v22);
  v23._countAndFlagsBits = 0x6E6F7473626D6F74;
  v23._object = (void *)0xEE00657461645F65;
  String.append(_:)(v23);
  v24._object = (void *)0x8000000100FF0E20;
  v24._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v24);
  v25 = v77;
  v26 = v78;
  v27 = *(_QWORD *)&v5[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database];
  v28 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v28, v79);
  swift_retain(v27);
  v30 = sub_1006B77CC(v29, v25, v26);
  swift_release(v27);
  if (v4)
    return;
  v31 = UUID.crl_data()();
  v33 = v32;
  sub_1006B5E80(v31, v32);
  sub_1004BBBC8(v31, v33);
  if (!v69)
    goto LABEL_8;
  v34 = HIBYTE(v69) & 0xF;
  if ((v69 & 0x2000000000000000) == 0)
    v34 = v70 & 0xFFFFFFFFFFFFLL;
  if (v34)
  {
    v35.n128_f64[0] = sub_1006B5CA4(v70, v69, 2);
  }
  else
  {
LABEL_8:
    v36 = *(void **)(*(_QWORD *)(v30 + 16) + 32);
    *v11 = v36;
    v73(v11, v72, v7);
    v37 = v36;
    LOBYTE(v36) = _dispatchPreconditionTest(_:)(v11);
    v15(v11, v7);
    if ((v36 & 1) == 0)
    {
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    swift_beginAccess(v30 + 24, &v77, 0, 0);
    sqlite3_bind_null(*(sqlite3_stmt **)(v30 + 24), 2);
  }
  v38 = *(void **)(*(_QWORD *)(v30 + 16) + 32);
  *v11 = v38;
  ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v73)(v11, v72, v7, v35);
  v39 = v38;
  LOBYTE(v38) = _dispatchPreconditionTest(_:)(v11);
  v15(v11, v7);
  if ((v38 & 1) == 0)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v68 = v15;
  swift_beginAccess(v30 + 24, v76, 1, 0);
  v40 = sqlite3_step(*(sqlite3_stmt **)(v30 + 24));
  if (v40 != 101)
  {
    v45 = v40;
    v46 = (sqlite3_stmt **)(v30 + 24);
    v74 = 0;
    v75 = 0xE000000000000000;
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease(v75);
    v74 = 0xD00000000000002ALL;
    v75 = 0x8000000100FF0E40;
    v47 = type metadata accessor for UUID(0);
    v48 = sub_1004B7878(&qword_1013E49E0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v49._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v47, v48);
    object = v49._object;
    String.append(_:)(v49);
    swift_bridgeObjectRelease(object);
    v51 = v74;
    v52 = v75;
    v53 = sub_1006B79EC();
    swift_allocError(&type metadata for SQLiteError, v53, 0, 0);
    *(_DWORD *)v54 = v45;
    *(_QWORD *)(v54 + 8) = v51;
    *(_QWORD *)(v54 + 16) = v52;
    swift_willThrow(v55);
    v56 = *(void **)(*(_QWORD *)(v30 + 16) + 32);
    *v11 = v56;
    v73(v11, v72, v7);
    v57 = v56;
    LOBYTE(v56) = _dispatchPreconditionTest(_:)(v11);
    v68(v11, v7);
    if ((v56 & 1) != 0)
    {
      if (*v46)
      {
        sqlite3_finalize(*v46);
        *v46 = 0;
      }
      goto LABEL_21;
    }
    goto LABEL_26;
  }
  v67 = (sqlite3_stmt **)(v30 + 24);
  v41 = *(_QWORD *)&v5[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManagerLock];
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v41 + 16));
  v42 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManager;
  v43 = *(void **)&v5[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManager];
  if (v43)
  {
    v44 = *(id *)&v5[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManager];
  }
  else
  {
    v58 = objc_allocWithZone((Class)type metadata accessor for CRLAssetFileManager(0));
    v59 = v5;
    v60 = sub_100C7EE84((uint64_t)v59);

    v61 = *(void **)&v5[v42];
    *(_QWORD *)&v5[v42] = v60;
    v44 = v60;

    v43 = 0;
  }
  v62 = *(os_unfair_lock_s **)(v41 + 16);
  v63 = v43;
  os_unfair_lock_unlock(v62);
  sub_100C77704(v71, v70, v69);

  v64 = *(void **)(*(_QWORD *)(v30 + 16) + 32);
  *v11 = v64;
  v73(v11, v72, v7);
  v65 = v64;
  LOBYTE(v64) = _dispatchPreconditionTest(_:)(v11);
  v68(v11, v7);
  if ((v64 & 1) == 0)
LABEL_27:
    __break(1u);
  v66 = v67;
  if (*v67)
  {
    sqlite3_finalize(*v67);
    *v66 = 0;
  }
LABEL_21:
  swift_release(v30);
}

double sub_100AB5408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  char *v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD aBlock[5];
  uint64_t v45;

  v36 = a4;
  v37 = a5;
  v34 = a2;
  v35 = a3;
  v39 = type metadata accessor for DispatchWorkItemFlags(0);
  v42 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v40 = *(_QWORD *)(v9 - 8);
  v41 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  v15 = __chkstk_darwin(v12);
  v16 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = *(_QWORD *)&v5[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue];
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16))(v16, a1, v12, v15);
  v17 = *(unsigned __int8 *)(v13 + 80);
  v18 = (v17 + 24) & ~v17;
  v19 = (v14 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v19 + 23) & 0xFFFFFFFFFFFFFFF8;
  v21 = swift_allocObject(&unk_101292970, v20 + 16, v17 | 7);
  *(_QWORD *)(v21 + 16) = v5;
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v21 + v18, v16, v12);
  v22 = (_QWORD *)(v21 + v19);
  v23 = v35;
  *v22 = v34;
  v22[1] = v23;
  v24 = (_QWORD *)(v21 + v20);
  v25 = v37;
  *v24 = v36;
  v24[1] = v25;
  aBlock[4] = sub_100AFF89C;
  v45 = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(_QWORD *)"";
  aBlock[2] = sub_1005D2FC0;
  aBlock[3] = &unk_101292988;
  v26 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(v23);
  swift_retain(v25);
  v27 = v5;
  static DispatchQoS.unspecified.getter(v28);
  v43 = _swiftEmptyArrayStorage;
  v29 = sub_1004B7878((unint64_t *)&qword_1013E1D20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v30 = sub_1004B804C((uint64_t *)&unk_1013DFBF0);
  v31 = sub_1004CBA30((unint64_t *)&qword_1013E1D30, (uint64_t *)&unk_1013DFBF0, (uint64_t)&protocol conformance descriptor for [A]);
  v32 = v39;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v43, v30, v31, v39, v29);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v8, v26);
  _Block_release(v26);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v8, v32);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v11, v41);
  *(_QWORD *)&result = swift_release(v45).n128_u64[0];
  return result;
}

uint64_t sub_100AB56B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD))
{
  sub_10080EB50(sub_100AFF8F4);
  return a5(0, 0);
}

uint64_t sub_100AB5870@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = sub_100AB58A0();
  if (!v1)
    *a1 = result;
  return result;
}

uint64_t sub_100AB58A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  void (*v9)(_QWORD *, uint64_t, uint64_t);
  id v10;
  void (*v11)(_QWORD *, uint64_t);
  Swift::String v12;
  void *object;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  void (*v42)(_QWORD *, uint64_t, uint64_t);
  id v43;
  void (*v44)(_QWORD *, uint64_t);
  uint64_t v45;
  _QWORD *inited;
  uint64_t v47;
  void *v48;
  id v49;
  char v50;
  _QWORD *v51;
  sqlite3_stmt *v52;
  void *v54;
  id v55;
  void (*v56)(_QWORD *, uint64_t, uint64_t);
  void (*v57)(_QWORD *, uint64_t);
  _BYTE v58[8];
  uint64_t v59;
  uint64_t v60;
  _BYTE v61[8];
  _BYTE v62[48];
  _BYTE v63[72];
  uint64_t v64;
  unint64_t v65;
  _BYTE v66[32];

  v2 = v0;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (void (**)(_QWORD *, uint64_t, uint64_t))((char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v6 = v7;
  v8 = enum case for DispatchPredicate.onQueue(_:);
  v9 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v4 + 104);
  v9(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  v10 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  v11 = *(void (**)(_QWORD *, uint64_t))(v4 + 8);
  v11(v6, v3);
  if ((v7 & 1) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  v56 = v9;
  v57 = v11;
  v64 = 0;
  v65 = 0xE000000000000000;
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease(v65);
  v64 = 0x205443454C4553;
  v65 = 0xE700000000000000;
  v12._countAndFlagsBits = sub_100AF9E60(0, 0xE000000000000000);
  object = v12._object;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(object);
  v14._countAndFlagsBits = 0x204D4F524620;
  v14._object = (void *)0xE600000000000000;
  String.append(_:)(v14);
  v15._countAndFlagsBits = 0x737465737361;
  v15._object = (void *)0xE600000000000000;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0x2820455245485720;
  v16._object = (void *)0xE800000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0x75755F7465737361;
  v17._object = (void *)0xEA00000000006469;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 0x293F203D20;
  v18._object = (void *)0xE500000000000000;
  String.append(_:)(v18);
  v19 = v64;
  v20 = v65;
  v21 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v22 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v22, v66);
  swift_retain(v21);
  v24 = sub_1006B77CC(v23, v19, v20);
  if (!v1)
  {
    v37 = v24;
    swift_release(v21);
    v38 = UUID.crl_data()();
    v40 = v39;
    sub_1006B5E80(v38, v39);
    sub_1004BBBC8(v38, v40);
    v41 = *(void **)(*(_QWORD *)(v37 + 16) + 32);
    *v6 = v41;
    v42 = v56;
    v56(v6, v8, v3);
    v43 = v41;
    LOBYTE(v41) = _dispatchPreconditionTest(_:)(v6);
    v44 = v57;
    v57(v6, v3);
    if ((v41 & 1) != 0)
    {
      v45 = type metadata accessor for SQLiteRowIterator();
      inited = (_QWORD *)swift_initStackObject(v45, v62);
      inited[4] = 0;
      inited[5] = 1;
      inited[2] = v37;
      inited[3] = 0;
      swift_retain(v37);
      sub_1006B6B04();
      if (!v47)
      {
        swift_release(v37);
        swift_setDeallocating(inited);
        sub_1006B7DA4(inited[3], inited[4], inited[5]);
        v54 = *(void **)(*(_QWORD *)(v37 + 16) + 32);
        *v6 = v54;
        v42(v6, v8, v3);
        v55 = v54;
        LOBYTE(v54) = _dispatchPreconditionTest(_:)(v6);
        v44(v6, v3);
        if ((v54 & 1) != 0)
        {
          v51 = (_QWORD *)(v37 + 24);
          swift_beginAccess(v37 + 24, &v64, 1, 0);
          v31 = 0;
          v52 = *(sqlite3_stmt **)(v37 + 24);
          if (!v52)
            goto LABEL_10;
          goto LABEL_9;
        }
LABEL_19:
        __break(1u);
      }
      v31 = sub_100AF9FA8(v47, 0);
      swift_release(v37);
      swift_setDeallocating(inited);
      sub_1006B7DA4(inited[3], inited[4], inited[5]);
      v48 = *(void **)(*(_QWORD *)(v37 + 16) + 32);
      *v6 = v48;
      v42(v6, v8, v3);
      v49 = v48;
      v50 = _dispatchPreconditionTest(_:)(v6);
      v44(v6, v3);
      if ((v50 & 1) != 0)
      {
        v51 = (_QWORD *)(v37 + 24);
        swift_beginAccess(v37 + 24, &v64, 1, 0);
        v52 = *(sqlite3_stmt **)(v37 + 24);
        if (!v52)
        {
LABEL_10:
          swift_release(v37);
          return v31;
        }
LABEL_9:
        sqlite3_finalize(v52);
        *v51 = 0;
        goto LABEL_10;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
  swift_release(v21);
  if (qword_1013DD858 != -1)
LABEL_16:
    swift_once(&qword_1013DD858, sub_100A05554);
  swift_beginAccess(&static OS_os_log.boardStore, &v64, 0, 0);
  v25 = (void *)static OS_os_log.boardStore;
  v26 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  v27 = swift_initStackObject(v26, v63);
  *(_OWORD *)(v27 + 16) = xmmword_100EF5E40;
  swift_getErrorValue(v1, v61, v58);
  v28 = v59;
  v29 = v60;
  v30 = v25;
  v31 = Error.localizedDescription.getter(v28, v29);
  v33 = v32;
  *(_QWORD *)(v27 + 56) = &type metadata for String;
  *(_QWORD *)(v27 + 64) = sub_1004CFC2C();
  *(_QWORD *)(v27 + 32) = v31;
  *(_QWORD *)(v27 + 40) = v33;
  v34 = static os_log_type_t.error.getter();
  sub_100A06EBC((uint64_t)v30, &_mh_execute_header, v34, "Failed to fetch an asset with error %@", 38, 2, v27);
  swift_setDeallocating(v27);
  v35 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(v27 + 32, 1, v35);

  swift_willThrow(v36);
  return v31;
}

double sub_100AB5DD8(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  char *v21;
  char *v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  double result;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD aBlock[5];
  uint64_t v41;

  v30 = a3;
  v31 = a1;
  v35 = type metadata accessor for DispatchWorkItemFlags(0);
  v38 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v34 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v36 = *(_QWORD *)(v5 - 8);
  v37 = v5;
  __chkstk_darwin(v5);
  v32 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1004B804C(&qword_101405438);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v11);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = *(_QWORD *)&a2[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_readQueue];
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v30, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v31, v7);
  v15 = *(unsigned __int8 *)(v12 + 80);
  v16 = (v15 + 24) & ~v15;
  v17 = *(unsigned __int8 *)(v8 + 80);
  v18 = (v13 + v17 + v16) & ~v17;
  v19 = swift_allocObject(&unk_1012929C0, v18 + v9, v15 | v17 | 7);
  *(_QWORD *)(v19 + 16) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v19 + v16, v14, v11);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v19 + v18, v10, v7);
  aBlock[4] = sub_100AFF9F8;
  v41 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(_QWORD *)"";
  aBlock[2] = sub_1005D2FC0;
  aBlock[3] = &unk_1012929D8;
  v20 = _Block_copy(aBlock);
  v21 = a2;
  v22 = v32;
  static DispatchQoS.unspecified.getter(v23);
  v39 = _swiftEmptyArrayStorage;
  v24 = sub_1004B7878((unint64_t *)&qword_1013E1D20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v25 = sub_1004B804C((uint64_t *)&unk_1013DFBF0);
  v26 = sub_1004CBA30((unint64_t *)&qword_1013E1D30, (uint64_t *)&unk_1013DFBF0, (uint64_t)&protocol conformance descriptor for [A]);
  v28 = v34;
  v27 = v35;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v39, v25, v26, v35, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v22, v28, v20);
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v28, v27);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v22, v37);
  *(_QWORD *)&result = swift_release(v41).n128_u64[0];
  return result;
}

uint64_t sub_100AB60C8()
{
  uint64_t v0;
  uint64_t v2;

  v2 = sub_100AB58A0();
  v0 = sub_1004B804C(&qword_101405438);
  return CheckedContinuation.resume(returning:)(&v2, v0);
}

double sub_100AB614C(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  _QWORD *v26;
  uint64_t v27;
  void *v28;
  id v29;
  char *v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  double result;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD aBlock[5];
  uint64_t v52;

  v42 = a4;
  v43 = a5;
  v40 = a3;
  v38 = a2;
  v46 = type metadata accessor for DispatchWorkItemFlags(0);
  v49 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v45 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v47 = *(_QWORD *)(v8 - 8);
  v48 = v8;
  __chkstk_darwin(v8);
  v41 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1004B804C(&qword_101405438);
  v11 = *(_QWORD *)(v10 - 8);
  v39 = v10;
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  v17 = __chkstk_darwin(v14);
  v18 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = *(_QWORD *)&a2[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue];
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16))(v18, v40, v14, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
  v19 = *(unsigned __int8 *)(v15 + 80);
  v20 = (v19 + 24) & ~v19;
  v21 = (v16 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = *(unsigned __int8 *)(v11 + 80);
  v23 = (v22 + v21 + 16) & ~v22;
  v24 = swift_allocObject(&unk_101292920, v23 + v12, v19 | v22 | 7);
  v25 = v38;
  *(_QWORD *)(v24 + 16) = v38;
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v24 + v20, v18, v14);
  v26 = (_QWORD *)(v24 + v21);
  v27 = v43;
  *v26 = v42;
  v26[1] = v27;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v24 + v23, v13, v39);
  aBlock[4] = sub_100AFF778;
  v52 = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(_QWORD *)"";
  aBlock[2] = sub_1005D2FC0;
  aBlock[3] = &unk_101292938;
  v28 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(v27);
  v29 = v25;
  v30 = v41;
  static DispatchQoS.unspecified.getter(v31);
  v50 = _swiftEmptyArrayStorage;
  v32 = sub_1004B7878((unint64_t *)&qword_1013E1D20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v33 = sub_1004B804C((uint64_t *)&unk_1013DFBF0);
  v34 = sub_1004CBA30((unint64_t *)&qword_1013E1D30, (uint64_t *)&unk_1013DFBF0, (uint64_t)&protocol conformance descriptor for [A]);
  v36 = v45;
  v35 = v46;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v50, v33, v34, v46, v32);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v30, v36, v28);
  _Block_release(v28);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v36, v35);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v30, v48);
  *(_QWORD *)&result = swift_release(v52).n128_u64[0];
  return result;
}

uint64_t sub_100AB6470(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v6;

  v6 = sub_100AB64FC(a2, a3, a4);
  v4 = sub_1004B804C(&qword_101405438);
  return CheckedContinuation.resume(returning:)(&v6, v4);
}

uint64_t sub_100AB64FC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  void *v17;
  uint64_t v18;
  uint64_t inited;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27[72];
  char v28[24];

  v8 = sub_100AB58A0();
  if (v3)
    return v4;
  v4 = v8;
  if (v8)
  {
    v10 = (_QWORD *)(v8 + OBJC_IVAR____TtC8Freeform19CRLAssetDatabaseRow_fileExtension);
    v11 = *(_QWORD *)(v8 + OBJC_IVAR____TtC8Freeform19CRLAssetDatabaseRow_fileExtension + 8);
    if (!v11)
    {
      if (!a3)
        return v4;
LABEL_22:
      sub_100757E04(&_mh_execute_header, (uint64_t)"_ensureAssetDatabaseRowExists(assetUUID:fileExtension:)", 55, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2, 6850, "Mismatching file extensions for asset inside of ensureAssetDatabaseRowExists!", 77, 2u, (uint64_t)_swiftEmptyArrayStorage);
      sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"_ensureAssetDatabaseRowExists(assetUUID:fileExtension:)", 55, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2u, 6850, (uint64_t)"Mismatching file extensions for asset inside of ensureAssetDatabaseRowExists!", 77, 2u);
      return v4;
    }
    if (!a3)
      goto LABEL_22;
    v12 = *v10 == a2 && v11 == a3;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a2, a3, 0) & 1) == 0)
      goto LABEL_22;
  }
  else
  {
    sub_100AB4CE4(a1, a2, a3);
    v13 = sub_100AB58A0();
    v4 = v13;
    if (v13)
    {
      v14 = (_QWORD *)(v13 + OBJC_IVAR____TtC8Freeform19CRLAssetDatabaseRow_fileExtension);
      v15 = *(_QWORD *)(v13 + OBJC_IVAR____TtC8Freeform19CRLAssetDatabaseRow_fileExtension + 8);
      if (v15)
      {
        if (a3)
        {
          v16 = *v14 == a2 && v15 == a3;
          if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a2, a3, 0) & 1) != 0)
            return v4;
        }
      }
      else if (!a3)
      {
        return v4;
      }
      sub_100757E04(&_mh_execute_header, (uint64_t)"_ensureAssetDatabaseRowExists(assetUUID:fileExtension:)", 55, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2, 6857, "Mismatching file extensions for asset inside of ensureAssetDatabaseRowExists (even after just creating it)!", 107, 2u, (uint64_t)_swiftEmptyArrayStorage);
      sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"_ensureAssetDatabaseRowExists(assetUUID:fileExtension:)", 55, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2u, 6857, (uint64_t)"Mismatching file extensions for asset inside of ensureAssetDatabaseRowExists (even after just creating it)!", 107, 2u);
      return v4;
    }
    if (qword_1013DD858 != -1)
      swift_once(&qword_1013DD858, sub_100A05554);
    swift_beginAccess(&static OS_os_log.boardStore, v28, 0, 0);
    v17 = (void *)static OS_os_log.boardStore;
    v18 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    inited = swift_initStackObject(v18, v27);
    *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
    v20 = v17;
    v21 = UUID.uuidString.getter(v20);
    v23 = v22;
    *(_QWORD *)(inited + 56) = &type metadata for String;
    v24 = sub_1004CFC2C();
    *(_QWORD *)(inited + 64) = v24;
    *(_QWORD *)(inited + 32) = v21;
    *(_QWORD *)(inited + 40) = v23;
    v25 = static os_log_type_t.error.getter(v24);
    sub_100A06EBC((uint64_t)v20, &_mh_execute_header, v25, "Failed to _ensureAssetDatabaseRowExists for asset: %{public}@", 61, 2, inited);
    swift_setDeallocating(inited);
    v26 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(inited + 32, 1, v26);

    return 0;
  }
  return v4;
}

BOOL sub_100AB683C(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  _QWORD *v22;
  void *v23;
  void (*v24)(_QWORD, __n128);
  id v25;
  void (*v26)(_QWORD *, unint64_t);
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  Swift::String v34;
  Swift::String v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t inited;
  uint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __n128 v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __n128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  void (*v72)(char *, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v73;
  char v74;
  char v75;
  char v76;
  char v77;
  char v78;
  char v79;
  char v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  id v86;
  __n128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  const void *v91;
  uint64_t v92;
  uint64_t v93;
  int64_t v94;
  sqlite3_stmt *v95;
  __n128 v96;
  __n128 v97;
  void *v98;
  unint64_t v99;
  void (*v100)(_QWORD *, uint64_t, unint64_t, __n128);
  id v101;
  void (*v102)(_QWORD *, unint64_t);
  uint64_t v103;
  sqlite3_stmt **v104;
  void *v105;
  __n128 v106;
  id v107;
  void (*v108)(_QWORD *, unint64_t);
  _QWORD *v109;
  sqlite3_stmt **v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  sqlite3_stmt **v115;
  unsigned int v116;
  void (*v117)(_QWORD *, unint64_t);
  void (*v118)(_QWORD *, uint64_t, unint64_t);
  void *v119;
  id v120;
  void *v121;
  id v122;
  void *v123;
  id v124;
  uint64_t v125;
  uint64_t v126;
  _BYTE *v127;
  _BYTE *v128;
  int v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  char *v133;
  void *v134;
  id v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  __n128 v141;
  void (*v142)(uint64_t, uint64_t, __n128);
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  __n128 v149;
  void *v150;
  id v151;
  sqlite3_stmt **v152;
  sqlite3_stmt **v153;
  uint64_t v154;
  _QWORD *v156;
  char *v157;
  sqlite3_stmt **v158;
  uint64_t v159;
  char *v160;
  _QWORD *v161;
  _QWORD *v162;
  _QWORD *v163;
  char *v164;
  unint64_t v165;
  sqlite3_stmt **v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  void (*v171)(_QWORD *, unint64_t);
  void (*v172)(_QWORD *, uint64_t, uint64_t);
  unsigned int v173;
  uint64_t v174;
  char *v175;
  char v176[8];
  uint64_t v177;
  uint64_t v178;
  char v179[8];
  _QWORD *v180;
  uint64_t v181;
  char v182;
  char v183;
  char v184;
  char v185;
  char v186;
  char v187;
  char v188;
  char v189;
  char v190[32];
  char v191[8];
  _QWORD *v192;
  unint64_t v193;
  char v194[8];

  v2 = v1;
  v174 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v174 - 8);
  __chkstk_darwin(v174);
  v6 = (char *)&v156 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v159 = (uint64_t)&v156 - v8;
  __chkstk_darwin(v9);
  v160 = (char *)&v156 - v10;
  __chkstk_darwin(v11);
  v175 = (char *)&v156 - v12;
  v13 = sub_1004B804C((uint64_t *)&unk_1013E1A50);
  __chkstk_darwin(v13);
  v164 = (char *)&v156 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v156 - v16;
  v18 = type metadata accessor for DispatchPredicate(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v22 = (_QWORD **)((char *)&v156 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v23 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v22 = v23;
  v24 = *(void (**)(_QWORD, __n128))(v19 + 104);
  v173 = enum case for DispatchPredicate.onQueue(_:);
  v172 = (void (*)(_QWORD *, uint64_t, uint64_t))v24;
  v24(v22, v20);
  v25 = v23;
  LOBYTE(v23) = _dispatchPreconditionTest(_:)(v22);
  v26 = *(void (**)(_QWORD *, unint64_t))(v19 + 8);
  v170 = v18;
  v171 = v26;
  v26(v22, v18);
  if ((v23 & 1) == 0)
    goto LABEL_80;
  v27 = *(_QWORD *)(a1 + 16);
  if (!v27)
    return 1;
  v28 = a1;
  v157 = v6;
  v169 = v4;
  v192 = sub_100A6AE90(63, 0xE100000000000000, v27);
  v29 = sub_1004B804C((uint64_t *)&unk_1013E4970);
  v30 = sub_1004CBA30((unint64_t *)&qword_1013DFC40, (uint64_t *)&unk_1013E4970, (uint64_t)&protocol conformance descriptor for [A]);
  v31 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v29, v30);
  v33 = v32;
  swift_bridgeObjectRelease();
  v192 = 0;
  v193 = 0xE000000000000000;
  _StringGuts.grow(_:)(36);
  swift_bridgeObjectRelease();
  v192 = (_QWORD *)0xD000000000000034;
  v193 = 0x8000000100FF4760;
  v34._countAndFlagsBits = v31;
  v34._object = v33;
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  v35._countAndFlagsBits = 10537;
  v35._object = (void *)0xE200000000000000;
  String.append(_:)(v35);
  v36 = (uint64_t)v192;
  v37 = v193;
  v180 = &_swiftEmptySetSingleton;
  v38 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v39 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v39, v194);
  swift_retain(v38);
  v40 = v165;
  v42 = sub_1006B77CC(v41, v36, v37);
  a1 = v40;
  if (v40)
  {
    swift_release(v38);
    if (qword_1013DD858 != -1)
      goto LABEL_82;
    goto LABEL_5;
  }
  v57 = v42;
  v165 = 0;
  swift_release(v38);
  v58 = *(_QWORD *)(v28 + 56);
  v162 = (_QWORD *)(v28 + 56);
  v59 = 1 << *(_BYTE *)(v28 + 32);
  v60 = -1;
  if (v59 < 64)
    v60 = ~(-1 << v59);
  a1 = v60 & v58;
  v168 = v57 + 16;
  v158 = (sqlite3_stmt **)v57;
  v167 = v28;
  swift_bridgeObjectRetain(v28);
  v166 = (sqlite3_stmt **)(v57 + 24);
  v61 = swift_beginAccess(v57 + 24, &v192, 1, 0);
  v62 = 0;
  v63 = 0;
  v163 = (_QWORD *)((unint64_t)(v59 + 63) >> 6);
  v64 = v174;
  v65 = v169;
  while (1)
  {
    v66 = v173;
    if (a1)
    {
      v67 = __clz(__rbit64(a1));
      a1 &= a1 - 1;
      v68 = v67 | (v63 << 6);
      goto LABEL_26;
    }
    v69 = v63 + 1;
    if (__OFADD__(v63, 1))
      goto LABEL_79;
    if (v69 >= (uint64_t)v163)
      break;
    v70 = v162[v69];
    ++v63;
    if (!v70)
    {
      v63 = v69 + 1;
      if (v69 + 1 >= (uint64_t)v163)
        break;
      v70 = v162[v63];
      if (!v70)
      {
        v63 = v69 + 2;
        if (v69 + 2 >= (uint64_t)v163)
          break;
        v70 = v162[v63];
        if (!v70)
        {
          v71 = v69 + 3;
          if (v71 >= (uint64_t)v163)
            break;
          v70 = v162[v71];
          if (!v70)
          {
            while (1)
            {
              v63 = v71 + 1;
              if (__OFADD__(v71, 1))
                goto LABEL_81;
              if (v63 >= (uint64_t)v163)
                goto LABEL_42;
              v70 = v162[v63];
              ++v71;
              if (v70)
                goto LABEL_25;
            }
          }
          v63 = v71;
        }
      }
    }
LABEL_25:
    a1 = (v70 - 1) & v70;
    v68 = __clz(__rbit64(v70)) + (v63 << 6);
LABEL_26:
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v65 + 16))(v17, *(_QWORD *)(v167 + 48) + *(_QWORD *)(v65 + 72) * v68, v64, v61);
    v72 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v65 + 56);
    v72(v17, 0, 1, v64);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(v17, 1, v64) == 1)
      goto LABEL_43;
    v73 = (*(uint64_t (**)(char *, char *, uint64_t))(v65 + 32))(v175, v17, v64);
    v181 = UUID.uuid.getter(v73);
    v182 = v74;
    v183 = v75;
    v184 = v76;
    v185 = v77;
    v186 = v78;
    v187 = v79;
    v188 = v80;
    v189 = v81;
    UUID.uuid.getter(v181);
    v82 = type metadata accessor for __DataStorage(0);
    swift_allocObject(v82, *(unsigned int *)(v82 + 48), *(unsigned __int16 *)(v82 + 52));
    v83 = __DataStorage.init(bytes:length:)(&v181, 16);
    v84 = *(void **)(*(_QWORD *)v168 + 32);
    *v22 = v84;
    v85 = v170;
    v172(v22, v66, v170);
    v86 = v84;
    LOBYTE(v84) = _dispatchPreconditionTest(_:)(v22);
    v171(v22, v85);
    if ((v84 & 1) == 0)
    {
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
LABEL_78:
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      swift_once(&qword_1013DD858, sub_100A05554);
LABEL_5:
      swift_beginAccess(&static OS_os_log.boardStore, &v192, 0, 0);
      v43 = (void *)static OS_os_log.boardStore;
      v44 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      inited = swift_initStackObject(v44, v191);
      *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
      swift_getErrorValue(a1, v179, v176);
      v46 = v177;
      v47 = v178;
      v48 = v43;
      v49 = Error.localizedDescription.getter(v46, v47);
      v51 = v50;
      *(_QWORD *)(inited + 56) = &type metadata for String;
      v52 = sub_1004CFC2C();
      *(_QWORD *)(inited + 64) = v52;
      *(_QWORD *)(inited + 32) = v49;
      *(_QWORD *)(inited + 40) = v51;
      v53 = static os_log_type_t.error.getter(v52);
      sub_100A06EBC((uint64_t)v48, &_mh_execute_header, v53, "Failed to check asset UUIDs exist with error %@", 47, 2, inited);
      swift_setDeallocating(inited);
      v54 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(inited + 32, 1, v54);

      swift_willThrow(v55);
      return v56;
    }
    v87 = swift_retain(v83);
    v88 = __DataStorage._bytes.getter(v87);
    if (v88)
    {
      v89 = v88;
      v90 = __DataStorage._offset.getter();
      if (__OFSUB__(0, v90))
        goto LABEL_74;
      v91 = (const void *)(v89 - v90);
    }
    else
    {
      v91 = 0;
    }
    v92 = __DataStorage._length.getter();
    if (v62 == 0x7FFFFFFF)
      goto LABEL_72;
    v93 = 16;
    if (v92 < 16)
      v93 = v92;
    if (v91)
      v94 = v93;
    else
      v94 = 0;
    if (v94 < (uint64_t)0xFFFFFFFF80000000)
      goto LABEL_73;
    v95 = *v166;
    if (qword_1013DCE28 != -1)
      swift_once(&qword_1013DCE28, sub_1006B57D4);
    sqlite3_bind_blob(v95, ++v62, v91, v94, (void (__cdecl *)(void *))qword_10147F168);
    swift_release_n(v83, 2, v96);
    v65 = v169;
    v64 = v174;
    (*(void (**)(char *, uint64_t))(v169 + 8))(v175, v174);
  }
LABEL_42:
  v72 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v65 + 56);
  ((void (*)(char *, uint64_t, uint64_t, uint64_t, __n128))v72)(v17, 1, 1, v64, v61);
LABEL_43:
  v97 = swift_release(v167);
  v162 = v72;
  v98 = *(void **)(*(_QWORD *)v168 + 32);
  *v22 = v98;
  v99 = v170;
  v100 = (void (*)(_QWORD *, uint64_t, unint64_t, __n128))v172;
  ((void (*)(_QWORD *, uint64_t, uint64_t, __n128))v172)(v22, v66, v170, v97);
  v101 = v98;
  LOBYTE(v98) = _dispatchPreconditionTest(_:)(v22);
  v102 = v171;
  v171(v22, v99);
  if ((v98 & 1) == 0)
  {
    __break(1u);
    goto LABEL_84;
  }
  v103 = type metadata accessor for SQLiteRowIterator();
  a1 = swift_initStackObject(v103, v190);
  *(_QWORD *)(a1 + 24) = 0;
  v163 = (_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 32) = 0;
  v156 = (_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 40) = 1;
  v104 = v158;
  *(_QWORD *)(a1 + 16) = v158;
  v105 = (void *)*((_QWORD *)v104[2] + 4);
  *v22 = v105;
  v106 = swift_retain(v104);
  v100(v22, v66, v99, v106);
  v107 = v105;
  LOBYTE(v105) = _dispatchPreconditionTest(_:)(v22);
  v102(v22, v99);
  if ((v105 & 1) == 0)
    goto LABEL_75;
  v108 = v102;
  v109 = (_QWORD *)a1;
  a1 = v168;
  v110 = v158;
  v161 = v109;
  while (2)
  {
    v111 = v109[3];
    v112 = v109[4];
    v113 = v109[5];
    v114 = v163;
    *v163 = 0;
    v114[1] = 0;
    v109[5] = 1;
    sub_1006B7DA4(v111, v112, v113);
    v115 = v110 + 3;
    swift_beginAccess(v110 + 3, &v181, 0, 0);
    v116 = sqlite3_step(v110[3]);
    if (v116 == 100)
    {
      v117 = v108;
      v118 = (void (*)(_QWORD *, uint64_t, unint64_t))v100;
      v119 = *(void **)(*(_QWORD *)a1 + 32);
      *v22 = v119;
      v118(v22, v66, v99);
      v175 = (char *)v110;
      swift_retain(v110);
      v120 = v119;
      LOBYTE(v119) = _dispatchPreconditionTest(_:)(v22);
      v117(v22, v99);
      if ((v119 & 1) == 0)
        goto LABEL_76;
      v121 = *(void **)(*(_QWORD *)a1 + 32);
      *v22 = v121;
      v118(v22, v66, v99);
      v122 = v121;
      LOBYTE(v121) = _dispatchPreconditionTest(_:)(v22);
      v117(v22, v99);
      if ((v121 & 1) == 0)
        goto LABEL_77;
      v123 = *(void **)(*(_QWORD *)a1 + 32);
      *v22 = v123;
      v118(v22, v66, v99);
      v124 = v123;
      LOBYTE(v123) = _dispatchPreconditionTest(_:)(v22);
      a1 = v99;
      v117(v22, v99);
      if ((v123 & 1) == 0)
        goto LABEL_78;
      v108 = v117;
      if (sqlite3_column_type(*v115, 0) == 5)
      {
        v125 = v174;
        v126 = (uint64_t)v164;
        v109 = v161;
        v66 = v173;
        goto LABEL_56;
      }
      v127 = sqlite3_column_blob(*v115, 0);
      v109 = v161;
      if (v127)
      {
        v128 = v127;
        v129 = sqlite3_column_bytes(*v115, 0);
        v130 = sub_1005CB82C(v128, v129);
        v126 = (uint64_t)v164;
        v131 = v165;
        UUID.init(crl_data:)(v130, v132);
        v133 = v175;
        if (v131)
        {
          swift_errorRelease(v131);
          v165 = 0;
          v125 = v174;
          v66 = v173;
          goto LABEL_57;
        }
        v165 = 0;
        v136 = v174;
        ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v162)(v126, 0, 1, v174);
        v137 = v169;
        v138 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v169 + 48))(v126, 1, v136);
        v66 = v173;
        if (v138 != 1)
        {
          (*(void (**)(char *, uint64_t, uint64_t))(v137 + 32))(v160, v126, v136);
          v139 = (uint64_t)v157;
          (*(void (**)(char *, char *, uint64_t))(v137 + 16))(v157, v160, v136);
          v140 = v139;
          v99 = v170;
          sub_100AD569C(v159, v140);
          v141 = swift_release(v133);
          v142 = *(void (**)(uint64_t, uint64_t, __n128))(v137 + 8);
          v142(v159, v136, v141);
          ((void (*)(char *, uint64_t))v142)(v160, v136);
          v100 = (void (*)(_QWORD *, uint64_t, unint64_t, __n128))v172;
LABEL_59:
          v110 = (sqlite3_stmt **)v109[2];
          a1 = (unint64_t)(v110 + 2);
          v134 = (void *)*((_QWORD *)v110[2] + 4);
          *v22 = v134;
          ((void (*)(_QWORD *, uint64_t, unint64_t))v100)(v22, v66, v99);
          v135 = v134;
          LOBYTE(v134) = _dispatchPreconditionTest(_:)(v22);
          v108(v22, v99);
          if ((v134 & 1) == 0)
            goto LABEL_75;
          continue;
        }
      }
      else
      {
        v125 = v174;
        v126 = (uint64_t)v164;
        v66 = v173;
LABEL_56:
        v133 = v175;
LABEL_57:
        ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v162)(v126, 1, 1, v125);
      }
      v100 = (void (*)(_QWORD *, uint64_t, unint64_t, __n128))v172;
      swift_release(v133);
      sub_1004CB800(v126, (uint64_t *)&unk_1013E1A50);
      goto LABEL_59;
    }
    break;
  }
  v143 = v167;
  if (v116 && v116 != 101)
  {
    v144 = v116;
    v145 = v109[3];
    v146 = v109[4];
    v147 = v109[5];
    v109[3] = v144;
    v148 = v156;
    *v156 = 0;
    v148[1] = 0;
    sub_1006B7DA4(v145, v146, v147);
  }
  v149 = swift_release(v109);
  v150 = *(void **)(*(_QWORD *)v168 + 32);
  *v22 = v150;
  v100(v22, v66, v99, v149);
  v151 = v150;
  LOBYTE(v150) = _dispatchPreconditionTest(_:)(v22);
  v171(v22, v99);
  if ((v150 & 1) == 0)
LABEL_84:
    __break(1u);
  v152 = v166;
  v153 = v158;
  if (*v166)
  {
    sqlite3_finalize(*v166);
    *v152 = 0;
  }
  swift_release(v153);
  v154 = v180[2];
  swift_bridgeObjectRelease();
  return v154 == *(_QWORD *)(v143 + 16);
}

double *sub_100AB76F4(uint64_t a1)
{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  void (*v19)(_QWORD, __n128);
  id v20;
  void (*v21)(_QWORD *, int64_t);
  _QWORD *v22;
  double *v23;
  _QWORD *v24;
  char *v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t inited;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __n128 v53;
  uint64_t v54;
  char *v55;
  __n128 v56;
  _QWORD *v57;
  _QWORD *v58;
  sqlite3_stmt **v59;
  uint64_t v60;
  sqlite3_stmt **v61;
  uint64_t v62;
  char v63;
  char v64;
  char v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  int64_t v74;
  id v75;
  __n128 v76;
  uint64_t v77;
  uint64_t v78;
  const void *v79;
  uint64_t v80;
  uint64_t v81;
  sqlite3_stmt *v82;
  __n128 v83;
  void (*v84)(sqlite3_stmt **, uint64_t);
  void *v85;
  uint64_t v86;
  void (*v87)(_QWORD *, uint64_t, int64_t, __n128);
  id v88;
  void (*v89)(_QWORD *, int64_t);
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  void *v93;
  __n128 v94;
  uint64_t v95;
  id v96;
  void (*v97)(_QWORD *, int64_t);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  unsigned int v104;
  sqlite3_stmt **v105;
  void (*v106)(_QWORD *, int64_t);
  uint64_t v107;
  void (*v108)(_QWORD *, uint64_t, int64_t);
  void *v109;
  _QWORD *v110;
  id v111;
  void *v112;
  id v113;
  void *v114;
  id v115;
  void (*v116)(_QWORD *, int64_t);
  sqlite3_stmt **v117;
  _BYTE *v118;
  _BYTE *v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  sqlite3_stmt **v125;
  __n128 v126;
  void *v127;
  _QWORD *v128;
  id v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  int64_t v134;
  id v135;
  sqlite3_stmt **v136;
  int v137;
  int64_t v138;
  const unsigned __int8 *v139;
  uint64_t v140;
  void *v141;
  id v142;
  char v143;
  int64_t v144;
  char v145;
  __n128 v146;
  double v147;
  __n128 v148;
  char *v149;
  sqlite3_stmt **v150;
  uint64_t v151;
  void (*v152)(uint64_t, char *, uint64_t);
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  void (*v161)(_QWORD *, int64_t);
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  __n128 v167;
  void *v168;
  _QWORD *v169;
  id v170;
  sqlite3_stmt **v171;
  uint64_t v172;
  uint64_t v174;
  void (*v175)(char *, uint64_t, uint64_t);
  uint64_t v176;
  void (*v177)(char *, uint64_t, __n128);
  _QWORD *v178;
  uint64_t v179;
  char *v180;
  char *v181;
  uint64_t v182;
  _QWORD *v183;
  char *v184;
  _QWORD *v185;
  sqlite3_stmt **v186;
  sqlite3_stmt **v187;
  uint64_t v188;
  sqlite3_stmt **v189;
  uint64_t v190;
  int64_t v191;
  void (*v192)(_QWORD *, int64_t);
  uint64_t v193;
  void (*v194)(_QWORD *, uint64_t, int64_t, __n128);
  unsigned int v195;
  _QWORD *v196;
  _QWORD v197[3];
  uint64_t v198;
  unint64_t v199;
  Swift::String v200;
  uint64_t v201;
  uint64_t v202;
  char v203;
  char v204;
  char v205;
  char v206;
  char v207;
  char v208;
  char v209;
  char v210;
  uint64_t v211;
  char v212[72];
  uint64_t v213;
  unint64_t v214;
  char v215[32];

  v3 = v1;
  v5 = sub_1004B804C((uint64_t *)&unk_1013E1A50);
  __chkstk_darwin(v5);
  v184 = (char *)&v174 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v193 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v193 - 8);
  __chkstk_darwin(v193);
  v180 = (char *)&v174 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v181 = (char *)&v174 - v10;
  __chkstk_darwin(v11);
  v189 = (sqlite3_stmt **)((char *)&v174 - v12);
  v13 = type metadata accessor for DispatchPredicate(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (uint64_t *)((char *)&v174 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v17 = v18;
  v19 = *(void (**)(_QWORD, __n128))(v14 + 104);
  v195 = enum case for DispatchPredicate.onQueue(_:);
  v194 = (void (*)(_QWORD *, uint64_t, int64_t, __n128))v19;
  v19(v17, v15);
  v20 = v18;
  LOBYTE(v18) = _dispatchPreconditionTest(_:)(v17);
  v21 = *(void (**)(_QWORD *, int64_t))(v14 + 8);
  v21(v17, v13);
  if ((v18 & 1) == 0)
  {
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }
  v192 = v21;
  v187 = (sqlite3_stmt **)a1;
  v22 = *(_QWORD **)(a1 + 16);
  v23 = _swiftEmptyArrayStorage;
  if (!v22)
    return v23;
  v191 = v13;
  v24 = 0;
  v200._countAndFlagsBits = 0;
  v200._object = (void *)0xE000000000000000;
  v196 = v22;
  v25 = (char *)v22 - 1;
  do
  {
    v26._countAndFlagsBits = 63;
    v26._object = (void *)0xE100000000000000;
    String.append(_:)(v26);
    if ((uint64_t)v24 < (uint64_t)v25)
    {
      v27._countAndFlagsBits = 8236;
      v27._object = (void *)0xE200000000000000;
      String.append(_:)(v27);
    }
    v24 = (_QWORD *)((char *)v24 + 1);
  }
  while (v196 != v24);
  v213 = 0;
  v214 = 0xE000000000000000;
  _StringGuts.grow(_:)(36);
  swift_bridgeObjectRelease();
  v213 = 0x205443454C4553;
  v214 = 0xE700000000000000;
  v28._countAndFlagsBits = sub_100AF9E60(0, 0xE000000000000000);
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  v29._countAndFlagsBits = 0x204D4F524620;
  v29._object = (void *)0xE600000000000000;
  String.append(_:)(v29);
  v30._countAndFlagsBits = 0x737465737361;
  v30._object = (void *)0xE600000000000000;
  String.append(_:)(v30);
  v31._countAndFlagsBits = 0x2820455245485720;
  v31._object = (void *)0xE800000000000000;
  String.append(_:)(v31);
  v32._countAndFlagsBits = 0x75755F7465737361;
  v32._object = (void *)0xEA00000000006469;
  String.append(_:)(v32);
  v33._countAndFlagsBits = 0x28204E4920;
  v33._object = (void *)0xE500000000000000;
  String.append(_:)(v33);
  String.append(_:)(v200);
  swift_bridgeObjectRelease();
  v34._countAndFlagsBits = 10537;
  v34._object = (void *)0xE200000000000000;
  String.append(_:)(v34);
  v35 = v213;
  v36 = v214;
  v199 = (unint64_t)_swiftEmptyArrayStorage;
  v37 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v38 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v38, v215);
  swift_retain(v37);
  v40 = sub_1006B77CC(v39, v35, v36);
  v13 = v2;
  if (v2)
  {
    swift_release(v37);
    swift_bridgeObjectRelease();
    if (qword_1013DD858 == -1)
    {
LABEL_9:
      swift_beginAccess(&static OS_os_log.boardStore, &v213, 0, 0);
      v41 = (void *)static OS_os_log.boardStore;
      v42 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      inited = swift_initStackObject(v42, v212);
      *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
      swift_getErrorValue(v13, &v198, v197);
      v44 = v197[1];
      v45 = v197[2];
      v46 = v41;
      v47 = Error.localizedDescription.getter(v44, v45);
      v49 = v48;
      *(_QWORD *)(inited + 56) = &type metadata for String;
      v50 = sub_1004CFC2C();
      *(_QWORD *)(inited + 64) = v50;
      *(_QWORD *)(inited + 32) = v47;
      v23 = (double *)(inited + 32);
      *(_QWORD *)(inited + 40) = v49;
      v51 = static os_log_type_t.error.getter(v50);
      sub_100A06EBC((uint64_t)v46, &_mh_execute_header, v51, "Failed to fetch assets with error %@", 36, 2, inited);
      swift_setDeallocating(inited);
      v52 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(inited + 32, 1, v52);

      swift_willThrow(v53);
      return v23;
    }
LABEL_75:
    swift_once(&qword_1013DD858, sub_100A05554);
    goto LABEL_9;
  }
  v54 = v40;
  v182 = 0;
  swift_release(v37);
  v179 = v54;
  v55 = (char *)v187 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  v187 = (sqlite3_stmt **)(v54 + 24);
  v188 = v54 + 16;
  v56 = swift_beginAccess(v54 + 24, &v213, 0, 0);
  v57 = 0;
  v58 = *(_QWORD **)(v7 + 72);
  v190 = v7;
  v59 = *(sqlite3_stmt ***)(v7 + 16);
  v185 = v58;
  v186 = v59;
  v60 = v193;
  v61 = v189;
  do
  {
    v62 = ((uint64_t (*)(sqlite3_stmt **, char *, uint64_t, __n128))v186)(v61, v55, v60, v56);
    v202 = UUID.uuid.getter(v62);
    v203 = v63;
    v204 = v64;
    v205 = v65;
    v206 = v66;
    v207 = v67;
    v208 = v68;
    v209 = v69;
    v210 = v70;
    UUID.uuid.getter(v202);
    v71 = type metadata accessor for __DataStorage(0);
    swift_allocObject(v71, *(unsigned int *)(v71 + 48), *(unsigned __int16 *)(v71 + 52));
    v72 = __DataStorage.init(bytes:length:)(&v202, 16);
    v73 = *(void **)(*(_QWORD *)v188 + 32);
    *v17 = v73;
    v74 = v191;
    ((void (*)(_QWORD *, _QWORD, int64_t))v194)(v17, v195, v191);
    v75 = v73;
    v13 = _dispatchPreconditionTest(_:)(v17);
    v192(v17, v74);
    if ((v13 & 1) == 0)
    {
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
      goto LABEL_74;
    }
    sub_1004BE310(0x1000000000, v72 | 0x4000000000000000);
    v77 = __DataStorage._bytes.getter(v76);
    if (v77)
    {
      v13 = v77;
      v78 = __DataStorage._offset.getter();
      if (__OFSUB__(0, v78))
        goto LABEL_69;
      v79 = (const void *)(v13 - v78);
    }
    else
    {
      v79 = 0;
    }
    v80 = __DataStorage._length.getter();
    if (v57 == (_QWORD *)0x7FFFFFFF)
      goto LABEL_67;
    v81 = 16;
    if (v80 < 16)
      v81 = v80;
    if (v79)
      v13 = v81;
    else
      v13 = 0;
    if (v13 < (uint64_t)0xFFFFFFFF80000000)
      goto LABEL_68;
    v82 = *v187;
    if (qword_1013DCE28 != -1)
      swift_once(&qword_1013DCE28, sub_1006B57D4);
    sqlite3_bind_blob(v82, (_DWORD)v57 + 1, v79, v13, (void (__cdecl *)(void *))qword_10147F168);
    swift_release_n(v72, 2, v83);
    v61 = v189;
    v84 = *(void (**)(sqlite3_stmt **, uint64_t))(v190 + 8);
    v60 = v193;
    v84(v189, v193);
    v55 = (char *)v185 + (_QWORD)v55;
    v57 = (_QWORD *)((char *)v57 + 1);
  }
  while (v196 != v57);
  v177 = (void (*)(char *, uint64_t, __n128))v84;
  v85 = *(void **)(*(_QWORD *)v188 + 32);
  *v17 = v85;
  v86 = v195;
  v13 = v191;
  v87 = v194;
  ((void (*)(_QWORD *, _QWORD, int64_t))v194)(v17, v195, v191);
  v88 = v85;
  LOBYTE(v85) = _dispatchPreconditionTest(_:)(v17);
  v89 = v192;
  v192(v17, v13);
  if ((v85 & 1) == 0)
  {
    __break(1u);
    goto LABEL_77;
  }
  v90 = type metadata accessor for SQLiteRowIterator();
  v91 = (_QWORD *)swift_initStackObject(v90, &v211);
  v91[3] = 0;
  v185 = v91 + 3;
  v91[4] = 0;
  v178 = v91 + 4;
  v91[5] = 1;
  v92 = v179;
  v91[2] = v179;
  v93 = *(void **)(*(_QWORD *)(v92 + 16) + 32);
  *v17 = v93;
  v94 = swift_retain(v92);
  v95 = v86;
  v87(v17, v86, v13, v94);
  v96 = v93;
  LOBYTE(v93) = _dispatchPreconditionTest(_:)(v17);
  v196 = v17;
  v89(v17, v13);
  if ((v93 & 1) == 0)
    goto LABEL_70;
  v97 = v89;
  v98 = v188;
  v99 = v179;
  v183 = v91;
  while (1)
  {
    v100 = v91[3];
    v101 = v91[4];
    v102 = v91[5];
    v103 = v185;
    *v185 = 0;
    v103[1] = 0;
    v91[5] = 1;
    sub_1006B7DA4(v100, v101, v102);
    swift_beginAccess(v99 + 24, &v202, 0, 0);
    v104 = sqlite3_step(*(sqlite3_stmt **)(v99 + 24));
    if (v104 != 100)
      break;
    v189 = (sqlite3_stmt **)(v99 + 24);
    v105 = (sqlite3_stmt **)v99;
    v106 = v97;
    v107 = v95;
    v108 = (void (*)(_QWORD *, uint64_t, int64_t))v87;
    v109 = *(void **)(*(_QWORD *)v98 + 32);
    v110 = v196;
    *v196 = v109;
    v108(v110, v107, v13);
    v186 = v105;
    swift_retain_n(v105, 2);
    v111 = v109;
    LOBYTE(v109) = _dispatchPreconditionTest(_:)(v110);
    v106(v110, v13);
    if ((v109 & 1) == 0)
      goto LABEL_71;
    v112 = *(void **)(*(_QWORD *)v98 + 32);
    *v110 = v112;
    v108(v110, v107, v13);
    v113 = v112;
    LOBYTE(v112) = _dispatchPreconditionTest(_:)(v110);
    v106(v110, v13);
    if ((v112 & 1) == 0)
      goto LABEL_72;
    v114 = *(void **)(*(_QWORD *)v98 + 32);
    *v110 = v114;
    v108(v110, v107, v13);
    v115 = v114;
    LOBYTE(v114) = _dispatchPreconditionTest(_:)(v110);
    v106(v110, v13);
    if ((v114 & 1) == 0)
      goto LABEL_73;
    v116 = v106;
    v117 = v189;
    if (sqlite3_column_type(*v189, 0) == 5)
    {
      v13 = v191;
      v95 = v195;
      v91 = v183;
      goto LABEL_39;
    }
    v118 = sqlite3_column_blob(*v117, 0);
    v95 = v195;
    v91 = v183;
    if (!v118)
    {
      v13 = v191;
LABEL_39:
      v125 = v186;
LABEL_40:
      v122 = (uint64_t)v184;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v190 + 56))(v184, 1, 1, v193);
LABEL_41:
      swift_release(v125);
      sub_1004CB800(v122, (uint64_t *)&unk_1013E1A50);
      v126 = swift_release(v125);
      v87 = v194;
      goto LABEL_42;
    }
    v119 = v118;
    v120 = sqlite3_column_bytes(*v117, 0);
    v121 = sub_1005CB82C(v119, v120);
    v122 = (uint64_t)v184;
    v123 = v182;
    UUID.init(crl_data:)(v121, v124);
    v125 = v186;
    if (v123)
    {
      swift_errorRelease(v123);
      v182 = 0;
      v13 = v191;
      goto LABEL_40;
    }
    v182 = 0;
    v131 = v190;
    v132 = v193;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v190 + 56))(v122, 0, 1, v193);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v131 + 48))(v122, 1, v132) == 1)
    {
      v95 = v195;
      v13 = v191;
      goto LABEL_41;
    }
    v175 = *(void (**)(char *, uint64_t, uint64_t))(v190 + 32);
    v175(v181, v122, v132);
    v133 = *(void **)(*(_QWORD *)v98 + 32);
    *v110 = v133;
    v95 = v195;
    v134 = v191;
    ((void (*)(_QWORD *, _QWORD, int64_t))v194)(v110, v195, v191);
    v135 = v133;
    LOBYTE(v133) = _dispatchPreconditionTest(_:)(v110);
    v116(v110, v134);
    if ((v133 & 1) == 0)
      goto LABEL_78;
    v136 = v189;
    v137 = sqlite3_column_type(*v189, 1);
    v87 = v194;
    if (v137 == 5)
    {
      v174 = 0;
      v176 = 0;
      v138 = v191;
    }
    else
    {
      v139 = sqlite3_column_text(*v136, 1);
      v138 = v191;
      if (v139)
      {
        v174 = String.init(cString:)();
        v176 = v140;
      }
      else
      {
        v174 = 0;
        v176 = 0;
      }
    }
    v141 = *(void **)(*(_QWORD *)v98 + 32);
    *v110 = v141;
    ((void (*)(_QWORD *, uint64_t, int64_t))v87)(v110, v95, v138);
    v142 = v141;
    v143 = _dispatchPreconditionTest(_:)(v110);
    v144 = v138;
    v145 = v143;
    v116(v110, v144);
    if ((v145 & 1) == 0)
      goto LABEL_79;
    if (sqlite3_column_type(*v189, 2) == 5)
    {
      v146 = swift_release(v125);
      v177(v181, v193, v146);
      swift_release(v125);
      v126 = swift_bridgeObjectRelease();
      v13 = v191;
    }
    else
    {
      v147 = sqlite3_column_double(v125[3], 2);
      v148 = swift_release(v125);
      v149 = v180;
      v150 = v125;
      v151 = v193;
      v152 = (void (*)(uint64_t, char *, uint64_t))v175;
      ((void (*)(char *, char *, uint64_t, __n128))v175)(v180, v181, v193, v148);
      v153 = type metadata accessor for CRLAssetDatabaseRow(0);
      v154 = swift_allocObject(v153, *(unsigned int *)(v153 + 48), *(unsigned __int16 *)(v153 + 52));
      v152(v154 + OBJC_IVAR____TtC8Freeform19CRLAssetDatabaseRow_assetUUID, v149, v151);
      v155 = (uint64_t *)(v154 + OBJC_IVAR____TtC8Freeform19CRLAssetDatabaseRow_fileExtension);
      v156 = v176;
      *v155 = v174;
      v155[1] = v156;
      *(double *)(v154 + OBJC_IVAR____TtC8Freeform19CRLAssetDatabaseRow_tombstoneDate) = v147;
      swift_retain(v154);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v157);
      v159 = *(_QWORD *)((v199 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v158 = *(_QWORD *)((v199 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v159 >= v158 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v158 > 1, v159 + 1, 1);
      v160 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v159, v154);
      specialized Array._endMutation()(v160);
      swift_release(v154);
      v126 = swift_release(v150);
      v13 = v191;
    }
LABEL_42:
    v99 = v91[2];
    v98 = v99 + 16;
    v127 = *(void **)(*(_QWORD *)(v99 + 16) + 32);
    v128 = v196;
    *v196 = v127;
    v87(v128, v95, v13, v126);
    v129 = v127;
    LOBYTE(v127) = _dispatchPreconditionTest(_:)(v128);
    v130 = v128;
    v97 = v192;
    v192(v130, v13);
    if ((v127 & 1) == 0)
      goto LABEL_70;
  }
  v161 = v97;
  if (v104 && v104 != 101)
  {
    v162 = v104;
    v163 = v91[3];
    v164 = v91[4];
    v165 = v91[5];
    v91[3] = v162;
    v166 = v178;
    *v178 = 0;
    v166[1] = 0;
    sub_1006B7DA4(v163, v164, v165);
  }
  v167 = swift_release(v91);
  v168 = *(void **)(*(_QWORD *)v188 + 32);
  v169 = v196;
  *v196 = v168;
  v87(v169, v95, v13, v167);
  v170 = v168;
  LOBYTE(v168) = _dispatchPreconditionTest(_:)(v169);
  v161(v169, v13);
  if ((v168 & 1) == 0)
  {
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
  }
  v171 = v187;
  swift_beginAccess(v187, &v201, 1, 0);
  v172 = v179;
  if (*v171)
  {
    sqlite3_finalize(*v171);
    *v171 = 0;
  }
  swift_release(v172);
  return (double *)v199;
}

void *sub_100AB84A8(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  void (*v19)(_QWORD *);
  id v20;
  void (*v21)(_QWORD *, uint64_t);
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  Swift::String v28;
  Swift::String v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  sqlite3_stmt **v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  _QWORD *v69;
  uint64_t v70;
  __int16 v71;
  char v72;
  char v73;
  char v74;
  char v75;
  char v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  id v82;
  __n128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  const void *v87;
  uint64_t v88;
  uint64_t v89;
  int64_t v90;
  sqlite3_stmt *v91;
  __n128 v92;
  __n128 v93;
  void *v94;
  uint64_t v95;
  void (*v96)(_QWORD *, uint64_t, uint64_t, __n128);
  id v97;
  void (*v98)(_QWORD *, uint64_t);
  uint64_t v99;
  _QWORD *inited;
  uint64_t v101;
  void *v102;
  __n128 v103;
  id v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  unsigned int v112;
  void *v113;
  uint64_t v114;
  unint64_t v115;
  void (*v116)(_QWORD *, uint64_t);
  uint64_t v117;
  uint64_t v118;
  void (*v119)(_QWORD *, uint64_t, uint64_t);
  id v120;
  void *v121;
  id v122;
  void *v123;
  id v124;
  sqlite3_stmt **v125;
  _BYTE *v126;
  _BYTE *v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  void *v136;
  uint64_t v137;
  id v138;
  void (*v139)(char *, uint64_t, uint64_t);
  char *v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  __n128 v149;
  _QWORD *v150;
  void *v151;
  uint64_t v152;
  id v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  __n128 v159;
  void *v160;
  _QWORD *v161;
  uint64_t v162;
  id v163;
  uint64_t v164;
  sqlite3_stmt **v165;
  uint64_t v166;
  _QWORD *v168;
  void *v169;
  id v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  _QWORD *v174;
  uint64_t v175;
  char *v176;
  char *v177;
  sqlite3_stmt **v178;
  void (*v179)(sqlite3_stmt **, uint64_t, uint64_t, uint64_t);
  char *v180;
  uint64_t *v181;
  sqlite3_stmt **v182;
  unint64_t v183;
  uint64_t *v184;
  sqlite3_stmt **v185;
  uint64_t v186;
  uint64_t v187;
  void (*v188)(_QWORD *, uint64_t);
  unsigned int v189;
  _QWORD *v190;
  _QWORD *v191;
  void (*v192)(_QWORD *, uint64_t, uint64_t);
  uint64_t v193;
  _QWORD v194[3];
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  _QWORD *v198;
  char v199[72];
  uint64_t v200;
  unint64_t v201;
  char v202[32];

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v186 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v177 = (char *)&v172 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v176 = (char *)&v172 - v8;
  __chkstk_darwin(v7);
  v191 = (uint64_t *)((char *)&v172 - v9);
  v10 = sub_1004B804C((uint64_t *)&unk_1013E1A50);
  v11 = __chkstk_darwin(v10);
  v178 = (sqlite3_stmt **)((char *)&v172 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v11);
  v185 = (sqlite3_stmt **)((char *)&v172 - v13);
  v14 = type metadata accessor for DispatchPredicate(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (uint64_t *)((char *)&v172 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v17 = v18;
  v19 = *(void (**)(_QWORD *))(v15 + 104);
  v189 = enum case for DispatchPredicate.onQueue(_:);
  v19(v17);
  v20 = v18;
  LOBYTE(v18) = _dispatchPreconditionTest(_:)(v17);
  v21 = *(void (**)(_QWORD *, uint64_t))(v15 + 8);
  v193 = v14;
  v188 = v21;
  v21(v17, v14);
  if ((v18 & 1) == 0)
    goto LABEL_87;
  if (!*(_QWORD *)(a1 + 16))
    return &_swiftEmptySetSingleton;
  v192 = (void (*)(_QWORD *, uint64_t, uint64_t))v19;
  v187 = v4;
  v200 = 0;
  v201 = 0xE000000000000000;
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease(v201);
  v200 = 0xD00000000000003DLL;
  v201 = 0x8000000100FEFF60;
  v22 = sub_100A6AE90(63, 0xE100000000000000, *(_QWORD *)(a1 + 16));
  v198 = v22;
  v23 = sub_1004B804C((uint64_t *)&unk_1013E4970);
  v24 = sub_1004CBA30((unint64_t *)&qword_1013DFC40, (uint64_t *)&unk_1013E4970, (uint64_t)&protocol conformance descriptor for [A]);
  v25 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v23, v24);
  v27 = v26;
  swift_bridgeObjectRelease(v22);
  v28._countAndFlagsBits = v25;
  v28._object = v27;
  String.append(_:)(v28);
  swift_bridgeObjectRelease(v27);
  v29._countAndFlagsBits = 41;
  v29._object = (void *)0xE100000000000000;
  String.append(_:)(v29);
  v30 = v200;
  v31 = v201;
  v32 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v33 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v33, v202);
  swift_retain(v32);
  v34 = v181;
  v36 = sub_1006B77CC(v35, v30, v31);
  v37 = a1;
  a1 = (unint64_t)v34;
  if (v34)
  {
    v38 = v32;
    goto LABEL_5;
  }
  v52 = v36;
  v181 = 0;
  swift_release(v32);
  v53 = *(_QWORD *)(v37 + 56);
  v179 = (void (*)(sqlite3_stmt **, uint64_t, uint64_t, uint64_t))(v37 + 56);
  v54 = 1;
  v55 = 1 << *(_BYTE *)(v37 + 32);
  v56 = -1;
  if (v55 < 64)
    v56 = ~(-1 << v55);
  a1 = v56 & v53;
  v183 = v37;
  v184 = (uint64_t *)(v52 + 16);
  v175 = v52;
  swift_bridgeObjectRetain(v37);
  v182 = (sqlite3_stmt **)(v52 + 24);
  swift_beginAccess(v52 + 24, &v198, 1, 0);
  v57 = 0;
  v180 = (char *)((unint64_t)(v55 + 63) >> 6);
  v58 = v186;
  v59 = v187;
  while (1)
  {
    v60 = v189;
    v61 = v185;
    if (a1)
    {
      v62 = v189;
      v63 = __clz(__rbit64(a1));
      a1 &= a1 - 1;
      v190 = v57;
      v64 = v63 | ((_QWORD)v57 << 6);
      goto LABEL_27;
    }
    v65 = (uint64_t)v57 + 1;
    if (__OFADD__(v57, 1))
      goto LABEL_86;
    if (v65 >= (uint64_t)v180)
      break;
    v66 = *((_QWORD *)v179 + v65);
    v67 = (uint64_t)v57 + 1;
    if (!v66)
    {
      v67 = (uint64_t)v57 + 2;
      if ((uint64_t)((char *)v57 + 2) >= (uint64_t)v180)
        break;
      v66 = *((_QWORD *)v179 + v67);
      if (!v66)
      {
        v67 = (uint64_t)v57 + 3;
        if ((uint64_t)((char *)v57 + 3) >= (uint64_t)v180)
          break;
        v66 = *((_QWORD *)v179 + v67);
        if (!v66)
        {
          v68 = (char *)v57 + 4;
          if ((uint64_t)((char *)v57 + 4) >= (uint64_t)v180)
            break;
          v66 = *((_QWORD *)v179 + (_QWORD)v68);
          if (!v66)
          {
            while (1)
            {
              v67 = (uint64_t)(v68 + 1);
              if (__OFADD__(v68, 1))
                break;
              if (v67 >= (uint64_t)v180)
                goto LABEL_44;
              v66 = *((_QWORD *)v179 + v67);
              ++v68;
              if (v66)
                goto LABEL_26;
            }
LABEL_88:
            __break(1u);
            goto LABEL_89;
          }
          v67 = (uint64_t)v57 + 4;
        }
      }
    }
LABEL_26:
    v62 = v189;
    a1 = (v66 - 1) & v66;
    v190 = (_QWORD *)v67;
    v64 = __clz(__rbit64(v66)) + (v67 << 6);
LABEL_27:
    (*(void (**)(sqlite3_stmt **, unint64_t, uint64_t))(v58 + 16))(v185, *(_QWORD *)(v183 + 48) + *(_QWORD *)(v58 + 72) * v64, v59);
    v69 = *(_QWORD **)(v58 + 56);
    ((void (*)(sqlite3_stmt **, _QWORD, uint64_t, uint64_t))v69)(v61, 0, 1, v59);
    if ((*(unsigned int (**)(sqlite3_stmt **, uint64_t, uint64_t))(v58 + 48))(v61, 1, v59) == 1)
    {
      v179 = (void (*)(sqlite3_stmt **, uint64_t, uint64_t, uint64_t))v69;
      v93 = swift_release(v183);
      v60 = v62;
      goto LABEL_45;
    }
    v70 = (*(uint64_t (**)(_QWORD *, sqlite3_stmt **, uint64_t))(v58 + 32))(v191, v61, v59);
    v200 = UUID.uuid.getter(v70);
    LOWORD(v201) = v71;
    BYTE2(v201) = v72;
    BYTE3(v201) = v73;
    BYTE4(v201) = v74;
    BYTE5(v201) = v75;
    BYTE6(v201) = v76;
    HIBYTE(v201) = v77;
    UUID.uuid.getter(v200);
    v78 = type metadata accessor for __DataStorage(0);
    swift_allocObject(v78, *(unsigned int *)(v78 + 48), *(unsigned __int16 *)(v78 + 52));
    v79 = __DataStorage.init(bytes:length:)(&v200, 16);
    v80 = *(void **)(*v184 + 32);
    *v17 = v80;
    v81 = v193;
    v192(v17, v62, v193);
    v82 = v80;
    LOBYTE(v80) = _dispatchPreconditionTest(_:)(v17);
    v188(v17, v81);
    if ((v80 & 1) == 0)
    {
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
LABEL_87:
      __break(1u);
      goto LABEL_88;
    }
    v83 = swift_retain(v79);
    v84 = __DataStorage._bytes.getter(v83);
    if (v84)
    {
      v85 = v84;
      v86 = __DataStorage._offset.getter();
      if (__OFSUB__(0, v86))
        goto LABEL_81;
      v87 = (const void *)(v85 - v86);
    }
    else
    {
      v87 = 0;
    }
    v88 = __DataStorage._length.getter();
    if (v54 == 0x80000000)
      goto LABEL_79;
    v89 = 16;
    if (v88 < 16)
      v89 = v88;
    if (v87)
      v90 = v89;
    else
      v90 = 0;
    if (v90 < (uint64_t)0xFFFFFFFF80000000)
      goto LABEL_80;
    v91 = *v182;
    if (qword_1013DCE28 != -1)
      swift_once(&qword_1013DCE28, sub_1006B57D4);
    sqlite3_bind_blob(v91, v54, v87, v90, (void (__cdecl *)(void *))qword_10147F168);
    swift_release_n(v79, 2, v92);
    v58 = v186;
    v59 = v187;
    (*(void (**)(_QWORD *, uint64_t))(v186 + 8))(v191, v187);
    ++v54;
    v57 = v190;
  }
LABEL_44:
  v179 = *(void (**)(sqlite3_stmt **, uint64_t, uint64_t, uint64_t))(v58 + 56);
  v179(v185, 1, 1, v59);
  v93 = swift_release(v183);
LABEL_45:
  v94 = *(void **)(*v184 + 32);
  *v17 = v94;
  v96 = (void (*)(_QWORD *, uint64_t, uint64_t, __n128))v192;
  v95 = v193;
  ((void (*)(_QWORD *, uint64_t, uint64_t, __n128))v192)(v17, v60, v193, v93);
  v97 = v94;
  LOBYTE(v94) = _dispatchPreconditionTest(_:)(v17);
  v98 = v188;
  v188(v17, v95);
  if ((v94 & 1) == 0)
  {
    __break(1u);
    goto LABEL_91;
  }
  v99 = type metadata accessor for SQLiteRowIterator();
  inited = (_QWORD *)swift_initStackObject(v99, &v197);
  inited[3] = 0;
  v180 = (char *)(inited + 3);
  inited[4] = 0;
  v173 = inited + 4;
  inited[5] = 1;
  v191 = inited;
  v101 = v175;
  inited[2] = v175;
  v102 = *(void **)(*(_QWORD *)(v101 + 16) + 32);
  *v17 = v102;
  v103 = swift_retain(v101);
  v96(v17, v60, v95, v103);
  v104 = v102;
  LOBYTE(v102) = _dispatchPreconditionTest(_:)(v17);
  v190 = v17;
  v98(v17, v95);
  if ((v102 & 1) == 0)
    goto LABEL_82;
  v174 = _swiftEmptyArrayStorage;
  a1 = (unint64_t)v184;
  v105 = v175;
  v106 = v190;
  while (1)
  {
    v107 = v191;
    v108 = v191[3];
    v109 = v191[4];
    v110 = v191[5];
    v111 = v180;
    *(_QWORD *)v180 = 0;
    *((_QWORD *)v111 + 1) = 0;
    v107[5] = 1;
    sub_1006B7DA4(v108, v109, v110);
    swift_beginAccess(v105 + 24, &v196, 0, 0);
    v112 = sqlite3_step(*(sqlite3_stmt **)(v105 + 24));
    if (v112 != 100)
      break;
    v185 = (sqlite3_stmt **)(v105 + 24);
    v113 = *(void **)(*(_QWORD *)a1 + 32);
    *v106 = v113;
    v114 = v60;
    v115 = v105;
    v116 = v98;
    v117 = v193;
    v118 = v60;
    v119 = v192;
    v192(v106, v114, v193);
    v183 = v115;
    swift_retain(v115);
    v120 = v113;
    LOBYTE(v113) = _dispatchPreconditionTest(_:)(v106);
    v116(v106, v117);
    if ((v113 & 1) == 0)
      goto LABEL_83;
    v121 = *(void **)(*(_QWORD *)a1 + 32);
    *v106 = v121;
    v119(v106, v118, v117);
    v122 = v121;
    LOBYTE(v121) = _dispatchPreconditionTest(_:)(v106);
    v116(v106, v117);
    if ((v121 & 1) == 0)
      goto LABEL_84;
    v123 = *(void **)(*(_QWORD *)a1 + 32);
    *v106 = v123;
    v119(v106, v118, v117);
    v124 = v123;
    LOBYTE(v123) = _dispatchPreconditionTest(_:)(v106);
    v116(v106, v117);
    if ((v123 & 1) == 0)
      goto LABEL_85;
    v125 = v185;
    if (sqlite3_column_type(*v185, 0) == 5 || (v126 = sqlite3_column_blob(*v125, 0)) == 0)
    {
      v130 = (uint64_t)v178;
      v179(v178, 1, 1, v187);
      v98 = v188;
      v60 = v189;
LABEL_58:
      swift_release(v183);
      sub_1004CB800(v130, (uint64_t *)&unk_1013E1A50);
      v135 = v190;
      v105 = v191[2];
      a1 = v105 + 16;
      v136 = *(void **)(*(_QWORD *)(v105 + 16) + 32);
      *v190 = v136;
      v137 = v193;
      v192(v135, v60, v193);
      v138 = v136;
      LOBYTE(v136) = _dispatchPreconditionTest(_:)(v135);
      v98(v135, v137);
      if ((v136 & 1) == 0)
        goto LABEL_82;
      continue;
    }
    v127 = v126;
    v128 = sqlite3_column_bytes(*v125, 0);
    v129 = sub_1005CB82C(v127, v128);
    v130 = (uint64_t)v178;
    v131 = v181;
    UUID.init(crl_data:)(v129, v132);
    v181 = v131;
    v60 = v189;
    if (v131)
    {
      swift_release(v183);
      swift_bridgeObjectRelease(v174);
      v168 = v191;
      swift_setDeallocating(v191);
      swift_release(v168[2]);
      sub_1006B7DA4(v168[3], v168[4], v168[5]);
      v169 = *(void **)(*v184 + 32);
      *v106 = v169;
      v192(v106, v60, v117);
      v170 = v169;
      LOBYTE(v169) = _dispatchPreconditionTest(_:)(v106);
      v188(v106, v117);
      if ((v169 & 1) != 0)
      {
        a1 = (unint64_t)v181;
        v171 = v175;
        if (*v182)
        {
          sqlite3_finalize(*v182);
          *(_QWORD *)(v171 + 24) = 0;
        }
        v38 = v171;
LABEL_5:
        swift_release(v38);
        if (qword_1013DD858 == -1)
        {
LABEL_6:
          swift_beginAccess(&static OS_os_log.boardStore, &v200, 0, 0);
          v39 = (void *)static OS_os_log.boardStore;
          v40 = sub_1004B804C((uint64_t *)&unk_1013E0180);
          v41 = swift_initStackObject(v40, v199);
          *(_OWORD *)(v41 + 16) = xmmword_100EF5E40;
          swift_getErrorValue(a1, &v195, v194);
          v42 = v194[1];
          v43 = v194[2];
          v44 = v39;
          v45 = Error.localizedDescription.getter(v42, v43);
          v47 = v46;
          *(_QWORD *)(v41 + 56) = &type metadata for String;
          v48 = sub_1004CFC2C();
          *(_QWORD *)(v41 + 64) = v48;
          *(_QWORD *)(v41 + 32) = v45;
          *(_QWORD *)(v41 + 40) = v47;
          v49 = static os_log_type_t.error.getter(v48);
          sub_100A06EBC((uint64_t)v44, &_mh_execute_header, v49, "Failed to fetch an asset reference with error %@", 48, 2, v41);
          swift_setDeallocating(v41);
          v50 = sub_1004B804C(&qword_1013E0190);
          swift_arrayDestroy(v41 + 32, 1, v50);

          swift_willThrow(v51);
          return (void *)v45;
        }
LABEL_89:
        swift_once(&qword_1013DD858, sub_100A05554);
        goto LABEL_6;
      }
LABEL_92:
      __break(1u);
    }
    v133 = v187;
    v179((sqlite3_stmt **)v130, 0, 1, v187);
    v134 = v186;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v186 + 48))(v130, 1, v133) == 1)
    {
      v98 = v188;
      goto LABEL_58;
    }
    v139 = *(void (**)(char *, uint64_t, uint64_t))(v134 + 32);
    v140 = v176;
    v141 = v187;
    v139(v176, v130, v187);
    (*(void (**)(char *, char *, uint64_t))(v134 + 16))(v177, v140, v141);
    v142 = (unint64_t)v174;
    if ((swift_isUniquelyReferenced_nonNull_native(v174) & 1) == 0)
      v142 = sub_100D0EC28(0, *(_QWORD *)(v142 + 16) + 1, 1, v142);
    v144 = *(_QWORD *)(v142 + 16);
    v143 = *(_QWORD *)(v142 + 24);
    if (v144 >= v143 >> 1)
      v142 = sub_100D0EC28(v143 > 1, v144 + 1, 1, v142);
    *(_QWORD *)(v142 + 16) = v144 + 1;
    v145 = v186;
    v146 = (*(unsigned __int8 *)(v145 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v145 + 80);
    v174 = (_QWORD *)v142;
    v147 = v142 + v146 + *(_QWORD *)(v186 + 72) * v144;
    v148 = v187;
    v139((char *)v147, (uint64_t)v177, v187);
    v149 = swift_release(v183);
    (*(void (**)(char *, uint64_t, __n128))(v145 + 8))(v176, v148, v149);
    v150 = v190;
    v105 = v191[2];
    a1 = v105 + 16;
    v151 = *(void **)(*(_QWORD *)(v105 + 16) + 32);
    *v190 = v151;
    v152 = v193;
    v192(v150, v60, v193);
    v153 = v151;
    LOBYTE(v151) = _dispatchPreconditionTest(_:)(v150);
    v98 = v188;
    v188(v150, v152);
    if ((v151 & 1) == 0)
      goto LABEL_82;
  }
  if (v112 && v112 != 101)
  {
    v154 = v112;
    v155 = v191[3];
    v156 = v191[4];
    v157 = v191[5];
    v191[3] = v154;
    v158 = v173;
    *v173 = 0;
    v158[1] = 0;
    sub_1006B7DA4(v155, v156, v157);
  }
  v159 = swift_release(v191);
  v160 = *(void **)(*v184 + 32);
  v161 = v190;
  *v190 = v160;
  v162 = v193;
  ((void (*)(_QWORD *, uint64_t, uint64_t, __n128))v192)(v161, v60, v193, v159);
  v163 = v160;
  LOBYTE(v160) = _dispatchPreconditionTest(_:)(v161);
  v98(v161, v162);
  v164 = (uint64_t)v174;
  if ((v160 & 1) == 0)
  {
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  v165 = v182;
  v166 = v175;
  if (*v182)
  {
    sqlite3_finalize(*v182);
    *v165 = 0;
  }
  swift_release(v166);
  v45 = sub_100AF7994(v164);
  swift_bridgeObjectRelease(v164);
  return (void *)v45;
}

uint64_t sub_100AB92C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  void (*v9)(_QWORD *, __n128);
  id v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v42;
  unint64_t v43;
  void *v44;
  void (*v45)(_QWORD *, _QWORD, uint64_t, __n128);
  id v46;
  void (*v47)(_QWORD *, uint64_t);
  uint64_t v48;
  _QWORD *inited;
  void *v50;
  __n128 v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  __n128 v55;
  void *v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  __n128 v73;
  uint64_t v74;
  void *v75;
  id v76;
  sqlite3_stmt *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  void (*v81)(_QWORD *, uint64_t);
  void (*v82)(_QWORD *, _QWORD, uint64_t, __n128);
  unsigned int v83;
  char v84[8];
  uint64_t v85;
  uint64_t v86;
  char v87[8];
  unint64_t v88;
  char v89[48];
  char v90[24];
  char v91[72];
  uint64_t v92;
  unint64_t v93;
  char v94[8];

  v2 = v0;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (uint64_t *)((char *)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v7 = v8;
  v9 = *(void (**)(_QWORD *, __n128))(v4 + 104);
  v83 = enum case for DispatchPredicate.onQueue(_:);
  v9(v7, v5);
  v10 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  v81 = *(void (**)(_QWORD *, uint64_t))(v4 + 8);
  v81(v7, v3);
  if ((v8 & 1) == 0)
    goto LABEL_24;
  v82 = (void (*)(_QWORD *, _QWORD, uint64_t, __n128))v9;
  v92 = 0;
  v93 = 0xE000000000000000;
  _StringGuts.grow(_:)(43);
  swift_bridgeObjectRelease();
  v92 = 0x205443454C4553;
  v93 = 0xE700000000000000;
  v11._countAndFlagsBits = sub_100AF39CC(0, 0xE000000000000000);
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 0x204D4F524620;
  v12._object = (void *)0xE600000000000000;
  String.append(_:)(v12);
  v13._object = (void *)0x8000000100FEF8F0;
  v13._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v13);
  v14._countAndFlagsBits = 0x2820455245485720;
  v14._object = (void *)0xE800000000000000;
  String.append(_:)(v14);
  v15._countAndFlagsBits = 0xD000000000000013;
  v15._object = (void *)0x8000000100FEFE20;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0x444E41203F203D20;
  v16._object = (void *)0xE900000000000020;
  String.append(_:)(v16);
  v17._object = (void *)0x8000000100FEEB40;
  v17._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 0x2930203E20;
  v18._object = (void *)0xE500000000000000;
  String.append(_:)(v18);
  v19 = v92;
  v20 = v93;
  v88 = (unint64_t)_swiftEmptyArrayStorage;
  v21 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v22 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v22, v94);
  swift_retain(v21);
  v24 = sub_1006B77CC(v23, v19, v20);
  if (v1)
  {
    swift_release(v21);
    swift_bridgeObjectRelease();
    if (qword_1013DD858 == -1)
      goto LABEL_6;
    goto LABEL_25;
  }
  v25 = v24;
  swift_release(v21);
  v26 = sub_1004BC12C();
  v42 = v26;
  v43 = v27;
  sub_1006B5E80(v26, v27);
  sub_1004BBBC8(v42, v43);
  v44 = *(void **)(*(_QWORD *)(v25 + 16) + 32);
  *v7 = v44;
  v45 = v82;
  ((void (*)(_QWORD *, _QWORD, uint64_t))v82)(v7, v83, v3);
  v46 = v44;
  LOBYTE(v44) = _dispatchPreconditionTest(_:)(v7);
  v47 = v81;
  v81(v7, v3);
  if ((v44 & 1) == 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  v48 = type metadata accessor for SQLiteRowIterator();
  inited = (_QWORD *)swift_initStackObject(v48, v89);
  inited[3] = 0;
  inited[4] = 0;
  v79 = inited + 4;
  inited[5] = 1;
  inited[2] = v25;
  v50 = *(void **)(*(_QWORD *)(v25 + 16) + 32);
  *v7 = v50;
  v80 = v25;
  v51 = swift_retain(v25);
  v45(v7, v83, v3, v51);
  v52 = v50;
  LOBYTE(v50) = _dispatchPreconditionTest(_:)(v7);
  v47(v7, v3);
  if ((v50 & 1) == 0)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    swift_once(&qword_1013DD858, sub_100A05554);
LABEL_6:
    swift_beginAccess(&static OS_os_log.boardStore, &v92, 0, 0);
    v28 = (void *)static OS_os_log.boardStore;
    v29 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    v30 = swift_initStackObject(v29, v91);
    *(_OWORD *)(v30 + 16) = xmmword_100EF5E40;
    swift_getErrorValue(v1, v87, v84);
    v31 = v85;
    v32 = v86;
    v33 = v28;
    v34 = Error.localizedDescription.getter(v31, v32);
    v36 = v35;
    *(_QWORD *)(v30 + 56) = &type metadata for String;
    v37 = sub_1004CFC2C();
    *(_QWORD *)(v30 + 64) = v37;
    *(_QWORD *)(v30 + 32) = v34;
    *(_QWORD *)(v30 + 40) = v36;
    v38 = static os_log_type_t.error.getter(v37);
    sub_100A06EBC((uint64_t)v33, &_mh_execute_header, v38, "Failed to fetch an asset reference with error %@", 48, 2, v30);
    swift_setDeallocating(v30);
    v39 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(v30 + 32, 1, v39);

    return swift_willThrow(v40);
  }
  v53 = v80;
  while (1)
  {
    v58 = inited[3];
    v59 = inited[4];
    v60 = inited[5];
    inited[3] = 0;
    inited[4] = 0;
    inited[5] = 1;
    sub_1006B7DA4(v58, v59, v60);
    swift_beginAccess(v53 + 24, &v92, 0, 0);
    v61 = sqlite3_step(*(sqlite3_stmt **)(v53 + 24));
    if (v61 != 100)
      break;
    v62 = swift_retain_n(v53, 2);
    v63 = sub_100AF3BD8(v62, 0);
    if (v63)
    {
      v64 = v63;
      swift_retain(v63);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v65);
      v67 = *(_QWORD *)((v88 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v66 = *(_QWORD *)((v88 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v67 >= v66 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v66 > 1, v67 + 1, 1);
      v54 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v67, v64);
      specialized Array._endMutation()(v54);
      swift_release(v64);
      v47 = v81;
    }
    v55 = swift_release(v53);
    v53 = inited[2];
    v56 = *(void **)(*(_QWORD *)(v53 + 16) + 32);
    *v7 = v56;
    v45 = v82;
    v82(v7, v83, v3, v55);
    v57 = v56;
    LOBYTE(v56) = _dispatchPreconditionTest(_:)(v7);
    v47(v7, v3);
    if ((v56 & 1) == 0)
      goto LABEL_23;
  }
  if (v61 && v61 != 101)
  {
    v68 = v61;
    v69 = inited[3];
    v70 = inited[4];
    v71 = inited[5];
    inited[3] = v68;
    v72 = v79;
    *v79 = 0;
    v72[1] = 0;
    sub_1006B7DA4(v69, v70, v71);
  }
  v73 = swift_release(inited);
  v74 = v80;
  v75 = *(void **)(*(_QWORD *)(v80 + 16) + 32);
  *v7 = v75;
  v45(v7, v83, v3, v73);
  v76 = v75;
  LOBYTE(v75) = _dispatchPreconditionTest(_:)(v7);
  v47(v7, v3);
  if ((v75 & 1) == 0)
LABEL_27:
    __break(1u);
  swift_beginAccess(v74 + 24, v90, 1, 0);
  v77 = *(sqlite3_stmt **)(v74 + 24);
  if (v77)
  {
    sqlite3_finalize(v77);
    *(_QWORD *)(v74 + 24) = 0;
  }
  swift_release(v74);
  return v88;
}

void *sub_100AB9A04(sqlite3_stmt **a1, _QWORD *inited)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  void (*v19)(_QWORD *);
  id v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  Swift::String v29;
  Swift::String v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  void *v60;
  id v61;
  __n128 v62;
  unint64_t v63;
  uint64_t v64;
  sqlite3_stmt *v65;
  _QWORD *v66;
  const char *v67;
  __n128 v68;
  BOOL v69;
  void *v70;
  uint64_t v71;
  void (*v72)(_QWORD *, uint64_t, uint64_t, __n128);
  id v73;
  void (*v74)(_QWORD *, uint64_t);
  uint64_t v75;
  uint64_t v76;
  void *v77;
  __n128 v78;
  id v79;
  void (*v80)(_QWORD *, uint64_t);
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  unsigned int v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(_QWORD *, uint64_t);
  uint64_t v93;
  void (*v94)(_QWORD *, uint64_t, uint64_t);
  id v95;
  void *v96;
  id v97;
  void *v98;
  id v99;
  char v100;
  void (*v101)(_QWORD *, uint64_t);
  sqlite3_stmt **v102;
  _BYTE *v103;
  _BYTE *v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  void (*v113)(_QWORD *, uint64_t, uint64_t);
  void *v114;
  uint64_t v115;
  id v116;
  uint64_t v117;
  uint64_t v118;
  void (*v119)(char *, uint64_t, uint64_t);
  char *v120;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v122;
  unint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  __n128 v128;
  void *v129;
  uint64_t v130;
  id v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  __n128 v137;
  void *v138;
  uint64_t v139;
  id v140;
  sqlite3_stmt **v141;
  uint64_t v142;
  char *v143;
  void *v144;
  uint64_t v145;
  id v146;
  sqlite3_stmt **v147;
  sqlite3_stmt *v148;
  uint64_t v149;
  _QWORD *v150;
  char *v151;
  char *v152;
  uint64_t v153;
  _QWORD *v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  sqlite3_stmt **v160;
  _QWORD *v161;
  _QWORD *v162;
  uint64_t v163;
  sqlite3_stmt **v164;
  uint64_t v165;
  void (*v166)(_QWORD *, uint64_t);
  unsigned int v167;
  void (*v168)(_QWORD *, uint64_t, uint64_t, __n128);
  _QWORD v169[3];
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  char v175[72];
  unint64_t v176;
  unint64_t v177;
  char v178[32];

  v160 = a1;
  v4 = sub_1004B804C((uint64_t *)&unk_1013E1A50);
  __chkstk_darwin(v4);
  v156 = (char *)&v150 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v157 = *(_QWORD *)(v6 - 8);
  v158 = v6;
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v150 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v155 = (char *)&v150 - v10;
  v11 = type metadata accessor for String.Encoding(0);
  v163 = *(_QWORD *)(v11 - 8);
  v164 = (sqlite3_stmt **)v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v150 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchPredicate(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (_QWORD **)((char *)&v150 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v162 = v2;
  v18 = *(void **)((char *)v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v17 = v18;
  v19 = *(void (**)(_QWORD *))(v15 + 104);
  v167 = enum case for DispatchPredicate.onQueue(_:);
  v19(v17);
  v20 = v18;
  LOBYTE(v18) = _dispatchPreconditionTest(_:)(v17);
  v166 = *(void (**)(_QWORD *, uint64_t))(v15 + 8);
  v166(v17, v14);
  if ((v18 & 1) == 0)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  v21 = inited[2];
  if (!v21)
    return &_swiftEmptySetSingleton;
  v154 = inited;
  v152 = v9;
  v168 = (void (*)(_QWORD *, uint64_t, uint64_t, __n128))v19;
  v176 = 0;
  v177 = 0xE000000000000000;
  _StringGuts.grow(_:)(47);
  swift_bridgeObjectRelease(v177);
  v176 = 0xD000000000000063;
  v177 = 0x8000000100FF0130;
  v22 = sub_100A6AE90(63, 0xE100000000000000, v21);
  v174 = v22;
  v23 = (_QWORD *)v21;
  v24 = sub_1004B804C((uint64_t *)&unk_1013E4970);
  v25 = sub_1004CBA30((unint64_t *)&qword_1013DFC40, (uint64_t *)&unk_1013E4970, (uint64_t)&protocol conformance descriptor for [A]);
  v26 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v24, v25);
  v28 = v27;
  swift_bridgeObjectRelease(v22);
  v29._countAndFlagsBits = v26;
  v29._object = v28;
  String.append(_:)(v29);
  swift_bridgeObjectRelease(v28);
  v30._countAndFlagsBits = 10537;
  v30._object = (void *)0xE200000000000000;
  String.append(_:)(v30);
  v31 = v176;
  v32 = v177;
  v33 = *(_QWORD *)((char *)v162 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v34 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v34, v178);
  swift_retain(v33);
  v35 = v159;
  v37 = sub_1006B77CC(v36, v31, v32);
  inited = v35;
  if (v35)
  {
    v38 = v33;
    goto LABEL_5;
  }
  v161 = v23;
  v153 = v37;
  swift_release(v33);
  v53 = sub_1004BC12C();
  v55 = v54;
  v159 = 0;
  v56 = v153;
  sub_1006B5E80(v53, v54);
  sub_1004BBBC8(v53, v55);
  v162 = (_QWORD *)(v56 + 16);
  v160 = (sqlite3_stmt **)(v56 + 24);
  swift_beginAccess(v56 + 24, &v174, 0, 0);
  v57 = 0;
  inited = v154 + 5;
  v165 = v14;
  do
  {
    v58 = *(inited - 1);
    v59 = *inited;
    v60 = *(void **)(*v162 + 32);
    *v17 = v60;
    ((void (*)(_QWORD *, _QWORD, uint64_t))v168)(v17, v167, v14);
    swift_bridgeObjectRetain(v59);
    v61 = v60;
    LOBYTE(v60) = _dispatchPreconditionTest(_:)(v17);
    v166(v17, v14);
    if ((v60 & 1) == 0)
    {
      __break(1u);
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }
    v176 = v58;
    v177 = v59;
    static String.Encoding.utf8.getter(v62);
    v63 = sub_1004D292C();
    v64 = StringProtocol.cString(using:)(v13, &type metadata for String, v63);
    (*(void (**)(char *, sqlite3_stmt **))(v163 + 8))(v13, v164);
    if (v57 == 2147483646)
      goto LABEL_52;
    v65 = *v160;
    if (qword_1013DCE28 != -1)
      swift_once(&qword_1013DCE28, sub_1006B57D4);
    v66 = (_QWORD *)(v57 + 1);
    inited += 2;
    if (v64)
      v67 = (const char *)(v64 + 32);
    else
      v67 = 0;
    sqlite3_bind_text(v65, v57 + 2, v67, -1, (void (__cdecl *)(void *))qword_10147F168);
    swift_bridgeObjectRelease(v59);
    v68 = swift_bridgeObjectRelease(v64);
    ++v57;
    v69 = v161 == v66;
    v14 = v165;
  }
  while (!v69);
  v70 = *(void **)(*v162 + 32);
  *v17 = v70;
  v71 = v167;
  v72 = v168;
  v168(v17, v167, v14, v68);
  v73 = v70;
  LOBYTE(v70) = _dispatchPreconditionTest(_:)(v17);
  v74 = v166;
  v166(v17, v14);
  if ((v70 & 1) == 0)
  {
    __break(1u);
    goto LABEL_60;
  }
  v75 = type metadata accessor for SQLiteRowIterator();
  inited = (_QWORD *)swift_initStackObject(v75, &v173);
  inited[3] = 0;
  v161 = inited + 3;
  inited[4] = 0;
  v150 = inited + 4;
  inited[5] = 1;
  v76 = v153;
  inited[2] = v153;
  v77 = *(void **)(*(_QWORD *)(v76 + 16) + 32);
  *v17 = v77;
  v78 = swift_retain(v76);
  v72(v17, v71, v14, v78);
  v79 = v77;
  LOBYTE(v77) = _dispatchPreconditionTest(_:)(v17);
  v74(v17, v14);
  if ((v77 & 1) == 0)
  {
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  v80 = v74;
  v81 = v71;
  v82 = inited;
  v151 = (char *)_swiftEmptyArrayStorage;
  inited = v162;
  v83 = v153;
  v154 = v82;
  while (1)
  {
    v84 = v82[3];
    v85 = v82[4];
    v86 = v82[5];
    v87 = v161;
    *v161 = 0;
    v87[1] = 0;
    v82[5] = 1;
    sub_1006B7DA4(v84, v85, v86);
    swift_beginAccess(v83 + 24, &v172, 0, 0);
    v88 = sqlite3_step(*(sqlite3_stmt **)(v83 + 24));
    if (v88 != 100)
      break;
    v164 = (sqlite3_stmt **)(v83 + 24);
    v89 = *(void **)(*inited + 32);
    *v17 = v89;
    v90 = v81;
    v91 = v81;
    v92 = v80;
    v93 = v165;
    v94 = (void (*)(_QWORD *, uint64_t, uint64_t))v168;
    ((void (*)(_QWORD *, uint64_t, uint64_t))v168)(v17, v90, v165);
    v163 = v83;
    swift_retain(v83);
    v95 = v89;
    LOBYTE(v89) = _dispatchPreconditionTest(_:)(v17);
    v92(v17, v93);
    if ((v89 & 1) == 0)
      goto LABEL_55;
    v96 = *(void **)(*inited + 32);
    *v17 = v96;
    v94(v17, v91, v93);
    v97 = v96;
    LOBYTE(v96) = _dispatchPreconditionTest(_:)(v17);
    v92(v17, v93);
    if ((v96 & 1) == 0)
      goto LABEL_56;
    v98 = *(void **)(*inited + 32);
    *v17 = v98;
    v94(v17, v91, v93);
    v99 = v98;
    v100 = _dispatchPreconditionTest(_:)(v17);
    v92(v17, v93);
    if ((v100 & 1) == 0)
      goto LABEL_57;
    v101 = v92;
    v102 = v164;
    if (sqlite3_column_type(*v164, 0) == 5 || (v103 = sqlite3_column_blob(*v102, 0)) == 0)
    {
      v107 = (uint64_t)v156;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v157 + 56))(v156, 1, 1, v158);
      v113 = (void (*)(_QWORD *, uint64_t, uint64_t))v168;
      v81 = v167;
      v82 = v154;
      goto LABEL_32;
    }
    v104 = v103;
    v105 = sqlite3_column_bytes(*v102, 0);
    v106 = sub_1005CB82C(v104, v105);
    v107 = (uint64_t)v156;
    v108 = v159;
    UUID.init(crl_data:)(v106, v109);
    inited = v108;
    v82 = v154;
    if (v108)
    {
      swift_release(v163);
      swift_bridgeObjectRelease(v151);
      swift_setDeallocating(v82);
      swift_release(v82[2]);
      sub_1006B7DA4(v82[3], v82[4], v82[5]);
      v144 = *(void **)(*v162 + 32);
      *v17 = v144;
      v145 = v165;
      ((void (*)(_QWORD *, _QWORD, uint64_t))v168)(v17, v167, v165);
      v146 = v144;
      LOBYTE(v144) = _dispatchPreconditionTest(_:)(v17);
      v101(v17, v145);
      if ((v144 & 1) != 0)
      {
        v147 = v160;
        swift_beginAccess(v160, &v171, 1, 0);
        v148 = *v147;
        v149 = v153;
        if (v148)
        {
          sqlite3_finalize(v148);
          *(_QWORD *)(v149 + 24) = 0;
        }
        v38 = v149;
LABEL_5:
        swift_release(v38);
        if (qword_1013DD858 == -1)
        {
LABEL_6:
          swift_beginAccess(&static OS_os_log.boardStore, &v176, 0, 0);
          v39 = (void *)static OS_os_log.boardStore;
          v40 = sub_1004B804C((uint64_t *)&unk_1013E0180);
          v41 = swift_initStackObject(v40, v175);
          *(_OWORD *)(v41 + 16) = xmmword_100EF5E40;
          swift_getErrorValue(inited, &v170, v169);
          v42 = v169[1];
          v43 = v169[2];
          v44 = v39;
          v45 = Error.localizedDescription.getter(v42, v43);
          v47 = v46;
          *(_QWORD *)(v41 + 56) = &type metadata for String;
          v48 = sub_1004CFC2C();
          *(_QWORD *)(v41 + 64) = v48;
          *(_QWORD *)(v41 + 32) = v45;
          *(_QWORD *)(v41 + 40) = v47;
          v49 = static os_log_type_t.error.getter(v48);
          sub_100A06EBC((uint64_t)v44, &_mh_execute_header, v49, "Failed to fetch an asset reference with error %@", 48, 2, v41);
          swift_setDeallocating(v41);
          v50 = sub_1004B804C(&qword_1013E0190);
          swift_arrayDestroy(v41 + 32, 1, v50);

          swift_willThrow(v51);
          return (void *)v45;
        }
LABEL_58:
        swift_once(&qword_1013DD858, sub_100A05554);
        goto LABEL_6;
      }
LABEL_61:
      __break(1u);
    }
    v111 = v157;
    v110 = v158;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v157 + 56))(v107, 0, 1, v158);
    v112 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v111 + 48))(v107, 1, v110);
    v113 = (void (*)(_QWORD *, uint64_t, uint64_t))v168;
    v159 = 0;
    if (v112 == 1)
    {
      v81 = v167;
LABEL_32:
      swift_release(v163);
      sub_1004CB800(v107, (uint64_t *)&unk_1013E1A50);
      v83 = v82[2];
      inited = (_QWORD *)(v83 + 16);
      v114 = *(void **)(*(_QWORD *)(v83 + 16) + 32);
      *v17 = v114;
      v115 = v165;
      v113(v17, v81, v165);
      v116 = v114;
      LOBYTE(v114) = _dispatchPreconditionTest(_:)(v17);
      v80 = v166;
      v166(v17, v115);
      if ((v114 & 1) == 0)
        goto LABEL_54;
    }
    else
    {
      v118 = v157;
      v117 = v158;
      v119 = *(void (**)(char *, uint64_t, uint64_t))(v157 + 32);
      v120 = v155;
      v119(v155, v107, v158);
      (*(void (**)(char *, char *, uint64_t))(v118 + 16))(v152, v120, v117);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v151);
      v81 = v167;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        v151 = (char *)sub_100D0EC28(0, *((_QWORD *)v151 + 2) + 1, 1, (unint64_t)v151);
      v80 = v166;
      v123 = *((_QWORD *)v151 + 2);
      v122 = *((_QWORD *)v151 + 3);
      v82 = v154;
      if (v123 >= v122 >> 1)
        v151 = (char *)sub_100D0EC28(v122 > 1, v123 + 1, 1, (unint64_t)v151);
      v125 = v151;
      v124 = v152;
      *((_QWORD *)v151 + 2) = v123 + 1;
      v127 = v157;
      v126 = v158;
      v119(&v125[((*(unsigned __int8 *)(v127 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v127 + 80))+ *(_QWORD *)(v157 + 72) * v123], (uint64_t)v124, v158);
      v128 = swift_release(v163);
      (*(void (**)(char *, uint64_t, __n128))(v127 + 8))(v155, v126, v128);
      v83 = v82[2];
      inited = (_QWORD *)(v83 + 16);
      v129 = *(void **)(*(_QWORD *)(v83 + 16) + 32);
      *v17 = v129;
      v130 = v165;
      ((void (*)(_QWORD *, uint64_t, uint64_t))v168)(v17, v81, v165);
      v131 = v129;
      LOBYTE(v129) = _dispatchPreconditionTest(_:)(v17);
      v80(v17, v130);
      if ((v129 & 1) == 0)
        goto LABEL_54;
    }
  }
  if (v88 && v88 != 101)
  {
    v132 = v88;
    v133 = v82[3];
    v134 = v82[4];
    v135 = v82[5];
    v82[3] = v132;
    v136 = v150;
    *v150 = 0;
    v136[1] = 0;
    sub_1006B7DA4(v133, v134, v135);
  }
  v137 = swift_release(v82);
  v138 = *(void **)(*v162 + 32);
  *v17 = v138;
  v139 = v165;
  v168(v17, v167, v165, v137);
  v140 = v138;
  LOBYTE(v138) = _dispatchPreconditionTest(_:)(v17);
  v80(v17, v139);
  if ((v138 & 1) == 0)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  v141 = v160;
  swift_beginAccess(v160, &v176, 1, 0);
  v142 = v153;
  if (*v141)
  {
    sqlite3_finalize(*v141);
    *v141 = 0;
  }
  swift_release(v142);
  v143 = v151;
  v45 = sub_100AF7994((uint64_t)v151);
  swift_bridgeObjectRelease(v143);
  return (void *)v45;
}

void sub_100ABA65C(unint64_t a1)
{
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  id v21;
  char v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  os_unfair_lock_s **v41;
  os_unfair_lock_s *v42;
  void *v43;
  char *v44;
  id v45;
  char *v46;
  id v47;
  void *v48;
  os_unfair_lock_s *v49;
  id v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t inited;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __n128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  void *v79;
  id v80;
  id v81;
  char *v82;
  id v83;
  void *v84;
  os_unfair_lock_s *v85;
  void (*v86)(uint64_t, uint64_t);
  uint64_t v87;
  char *v88;
  uint64_t v89;
  os_unfair_lock_t *v90;
  uint64_t v91;
  id v92;
  char *v93;
  id v94;
  void *v95;
  id v96;
  uint64_t v97;
  os_unfair_lock_s **v98;
  __int128 v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  int64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int64_t v115;
  _BYTE v116[24];
  char v117[72];
  _QWORD *v118;
  uint64_t v119;

  v3 = v1;
  v5 = sub_1004B804C((uint64_t *)&unk_1013E1700);
  __chkstk_darwin(v5);
  v107 = (uint64_t)&v97 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = type metadata accessor for URL(0);
  v106 = *(_QWORD *)(v108 - 8);
  v7 = __chkstk_darwin(v108);
  v114 = (uint64_t)&v97 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v105 = (char *)&v97 - v9;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v112 = v10;
  v113 = v11;
  __chkstk_darwin(v10);
  v13 = (char *)&v97 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1004B804C((uint64_t *)&unk_1013E1A50);
  __chkstk_darwin(v14);
  v111 = (char *)&v97 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DispatchPredicate(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (uint64_t *)((char *)&v97 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = *(void **)&v3[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue];
  *v19 = v20;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v17 + 104))(v19, enum case for DispatchPredicate.onQueue(_:), v16);
  v21 = v20;
  v22 = _dispatchPreconditionTest(_:)(v19);
  (*(void (**)(_QWORD *, uint64_t))(v17 + 8))(v19, v16);
  if ((v22 & 1) != 0)
  {
    v23 = sub_100AB84A8(a1);
    if (!v2)
    {
      v24 = (uint64_t)v23;
      if (v23[2] <= *(_QWORD *)(a1 + 16) >> 3)
      {
        v118 = (_QWORD *)a1;
        swift_bridgeObjectRetain(a1);
        sub_100DB6134(v24);
        swift_bridgeObjectRelease(v24);
        v25 = v118;
      }
      else
      {
        swift_bridgeObjectRetain(a1);
        v25 = sub_100DB730C(v24, a1);
        swift_bridgeObjectRelease(v24);
      }
      v27 = v112;
      v26 = v113;
      v28 = v111;
      if (v25[2])
      {
        v29 = 0;
        v30 = v25[7];
        v103 = (char *)(v25 + 7);
        v31 = 1 << *((_BYTE *)v25 + 32);
        v32 = -1;
        if (v31 < 64)
          v32 = ~(-1 << v31);
        v33 = v32 & v30;
        v102 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManagerLock;
        v34 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManager;
        v104 = (unint64_t)(v31 + 63) >> 6;
        v99 = xmmword_100EF5E40;
        v101 = v3;
        v100 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManager;
        v109 = v25;
        while (1)
        {
          if (v33)
          {
            v119 = (v33 - 1) & v33;
            v35 = __clz(__rbit64(v33)) | (v29 << 6);
          }
          else
          {
            if (__OFADD__(v29++, 1))
              goto LABEL_51;
            if (v29 >= v104)
            {
LABEL_39:
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56))(v28, 1, 1, v27);
LABEL_40:
              swift_release(v25);
              v78 = *(_QWORD *)&v3[v102];
              os_unfair_lock_lock(*(os_unfair_lock_t *)(v78 + 16));
              v79 = *(void **)&v3[v34];
              if (v79)
              {
                v80 = *(id *)&v3[v34];
              }
              else
              {
                v81 = objc_allocWithZone((Class)type metadata accessor for CRLAssetFileManager(0));
                v82 = v3;
                v83 = sub_100C7EE84((uint64_t)v82);

                v84 = *(void **)&v3[v34];
                *(_QWORD *)&v3[v34] = v83;
                v80 = v83;

                v79 = 0;
              }
              v85 = *(os_unfair_lock_s **)(v78 + 16);
LABEL_48:
              v96 = v79;
              os_unfair_lock_unlock(v85);
              sub_100C7D764();

              return;
            }
            v37 = *(_QWORD *)&v103[8 * v29];
            if (!v37)
            {
              v38 = v29 + 1;
              if (v29 + 1 >= v104)
                goto LABEL_39;
              v37 = *(_QWORD *)&v103[8 * v38];
              if (!v37)
              {
                v38 = v29 + 2;
                if (v29 + 2 >= v104)
                  goto LABEL_39;
                v37 = *(_QWORD *)&v103[8 * v38];
                if (!v37)
                {
                  v38 = v29 + 3;
                  if (v29 + 3 >= v104)
                    goto LABEL_39;
                  v37 = *(_QWORD *)&v103[8 * v38];
                  if (!v37)
                  {
                    while (1)
                    {
                      v29 = v38 + 1;
                      if (__OFADD__(v38, 1))
                        goto LABEL_52;
                      if (v29 >= v104)
                        goto LABEL_39;
                      v37 = *(_QWORD *)&v103[8 * v29];
                      ++v38;
                      if (v37)
                        goto LABEL_24;
                    }
                  }
                }
              }
              v29 = v38;
            }
LABEL_24:
            v119 = (v37 - 1) & v37;
            v35 = __clz(__rbit64(v37)) + (v29 << 6);
          }
          (*(void (**)(char *, unint64_t, uint64_t))(v26 + 16))(v28, v25[6] + *(_QWORD *)(v26 + 72) * v35, v27);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v28, 0, 1, v27);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v28, 1, v27) == 1)
            goto LABEL_40;
          v115 = v29;
          (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v13, v28, v27);
          v39 = sub_100ABF204((uint64_t)v13);
          if (v39)
          {
            v40 = *(_QWORD *)&v3[v102];
            v42 = *(os_unfair_lock_s **)(v40 + 16);
            v41 = (os_unfair_lock_s **)(v40 + 16);
            os_unfair_lock_lock(v42);
            v43 = *(void **)&v3[v34];
            if (v43)
            {
              v44 = *(char **)&v3[v34];
            }
            else
            {
              v45 = objc_allocWithZone((Class)type metadata accessor for CRLAssetFileManager(0));
              v46 = v3;
              v47 = sub_100C7EE84((uint64_t)v46);

              v48 = *(void **)&v3[v34];
              *(_QWORD *)&v3[v34] = v47;
              v44 = (char *)v47;

              v43 = 0;
            }
            v49 = *v41;
            v50 = v43;
            os_unfair_lock_unlock(v49);
            v52 = *(_QWORD *)(v39 + OBJC_IVAR____TtC8Freeform19CRLAssetDatabaseRow_fileExtension);
            v51 = *(_QWORD *)(v39 + OBJC_IVAR____TtC8Freeform19CRLAssetDatabaseRow_fileExtension + 8);
            sub_100C7675C();
            v98 = v41;
            v110 = 0;
            v53 = sub_100C7F2B8((uint64_t)v13, v52, v51);
            v55 = v54;
            v56 = (uint64_t)v105;
            URL.appendingPathComponent(_:)(v53, v54);
            swift_bridgeObjectRelease(v55);
            sub_100C76E78((uint64_t)v13, v56, 1);
            v58 = UUID.uuidString.getter(v57);
            v60 = v59;
            URL.appendingPathComponent(_:)(v58, v59);
            swift_bridgeObjectRelease(v60);
            if (qword_1013DD8C0 != -1)
              swift_once(&qword_1013DD8C0, sub_100A0685C);
            swift_beginAccess(&static OS_os_log.assetManagement, &v118, 0, 0);
            v61 = (void *)static OS_os_log.assetManagement;
            v62 = sub_1004B804C((uint64_t *)&unk_1013E0180);
            inited = swift_initStackObject(v62, v117);
            *(_OWORD *)(inited + 16) = v99;
            v64 = v61;
            v65 = UUID.uuidString.getter(v64);
            v67 = v66;
            *(_QWORD *)(inited + 56) = &type metadata for String;
            *(_QWORD *)(inited + 64) = sub_1004CFC2C();
            *(_QWORD *)(inited + 32) = v65;
            *(_QWORD *)(inited + 40) = v67;
            v69 = static os_log_type_t.default.getter(v68);
            sub_100A06EBC((uint64_t)v64, &_mh_execute_header, v69, "CRLAssetFileManager moveAssetFileToDeletedDirectory() assetUUID: %@", 67, 2, inited);
            swift_setDeallocating(inited);
            v70 = sub_1004B804C(&qword_1013E0190);
            swift_arrayDestroy(inited + 32, 1, v70);

            v71 = *(_QWORD *)&v44[OBJC_IVAR____TtC8Freeform19CRLAssetFileManager_lock];
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v71 + 16));
            swift_beginAccess(&v44[OBJC_IVAR____TtC8Freeform19CRLAssetFileManager_assetFileURLCache], v116, 33, 0);
            v72 = v107;
            sub_100846E28((uint64_t)v13, v107);
            sub_1004CB800(v72, (uint64_t *)&unk_1013E1700);
            swift_endAccess(v116);
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v71 + 16));
            v73 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
            v74 = v114;
            v75 = v110;
            sub_100C7C410(v56, v114, 1, 1);
            if (v75)
            {

              v86 = *(void (**)(uint64_t, uint64_t))(v106 + 8);
              v87 = v108;
              v86(v74, v108);
              v86(v56, v87);
              v88 = v101;
              v89 = v112;
              v90 = v98;

              (*(void (**)(char *, uint64_t))(v113 + 8))(v13, v89);
              swift_release(v39);
              swift_release(v109);
              os_unfair_lock_lock(*v90);
              v91 = v100;
              v79 = *(void **)&v88[v100];
              if (v79)
              {
                v80 = *(id *)&v88[v100];
              }
              else
              {
                v92 = objc_allocWithZone((Class)type metadata accessor for CRLAssetFileManager(0));
                v93 = v88;
                v94 = sub_100C7EE84((uint64_t)v93);

                v95 = *(void **)&v88[v91];
                *(_QWORD *)&v88[v91] = v94;
                v80 = v94;

                v79 = 0;
              }
              v85 = *v90;
              goto LABEL_48;
            }

            v76 = *(void (**)(uint64_t, uint64_t))(v106 + 8);
            v77 = v108;
            v76(v74, v108);
            v76(v56, v77);
            v27 = v112;
            v26 = v113;
            (*(void (**)(char *, uint64_t))(v113 + 8))(v13, v112);
            swift_release(v39);

            v3 = v101;
            v34 = v100;
            v28 = v111;
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v26 + 8))(v13, v27);
          }
          v25 = v109;
          v29 = v115;
          v33 = v119;
        }
      }
      swift_bridgeObjectRelease(v25);
    }
  }
  else
  {
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
  }
}

uint64_t sub_100ABB038()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  void (*v8)(_QWORD *);
  id v9;
  Swift::String v10;
  void *object;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  void (*v43)(_QWORD *, _QWORD, uint64_t, __n128);
  id v44;
  void (*v45)(_QWORD *, uint64_t);
  uint64_t v46;
  _QWORD *inited;
  void *v48;
  __n128 v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  __n128 v53;
  void *v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  __n128 v71;
  uint64_t v72;
  void *v73;
  id v74;
  sqlite3_stmt *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  void (*v79)(_QWORD *, uint64_t);
  void (*v80)(_QWORD *, _QWORD, uint64_t, __n128);
  unsigned int v81;
  char v82[8];
  uint64_t v83;
  uint64_t v84;
  char v85[8];
  unint64_t v86;
  char v87[48];
  char v88[24];
  char v89[72];
  uint64_t v90;
  unint64_t v91;
  char v92[8];

  v2 = v0;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (uint64_t *)((char *)&v76 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v6 = v7;
  v8 = *(void (**)(_QWORD *))(v4 + 104);
  v81 = enum case for DispatchPredicate.onQueue(_:);
  v8(v6);
  v9 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  v79 = *(void (**)(_QWORD *, uint64_t))(v4 + 8);
  v79(v6, v3);
  if ((v7 & 1) == 0)
    goto LABEL_24;
  v80 = (void (*)(_QWORD *, _QWORD, uint64_t, __n128))v8;
  v90 = 0;
  v91 = 0xE000000000000000;
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease(v91);
  v90 = 0x205443454C4553;
  v91 = 0xE700000000000000;
  v10._countAndFlagsBits = sub_100AF39CC(0, 0xE000000000000000);
  object = v10._object;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(object);
  v12._countAndFlagsBits = 0x204D4F524620;
  v12._object = (void *)0xE600000000000000;
  String.append(_:)(v12);
  v13._object = (void *)0x8000000100FEF8F0;
  v13._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v13);
  v14._countAndFlagsBits = 0x2820455245485720;
  v14._object = (void *)0xE800000000000000;
  String.append(_:)(v14);
  v15._countAndFlagsBits = 0xD000000000000013;
  v15._object = (void *)0x8000000100FEFE20;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0x293F203D20;
  v16._object = (void *)0xE500000000000000;
  String.append(_:)(v16);
  v17 = v90;
  v18 = v91;
  v86 = (unint64_t)_swiftEmptyArrayStorage;
  v19 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v20 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v20, v92);
  swift_retain(v19);
  v22 = sub_1006B77CC(v21, v17, v18);
  if (v1)
  {
    swift_release(v19);
    swift_bridgeObjectRelease(v86);
    if (qword_1013DD858 == -1)
      goto LABEL_6;
    goto LABEL_25;
  }
  v23 = v22;
  swift_release(v19);
  v24 = sub_1004BC12C();
  v40 = v24;
  v41 = v25;
  sub_1006B5E80(v24, v25);
  sub_1004BBBC8(v40, v41);
  v42 = *(void **)(*(_QWORD *)(v23 + 16) + 32);
  *v6 = v42;
  v43 = v80;
  ((void (*)(_QWORD *, _QWORD, uint64_t))v80)(v6, v81, v3);
  v44 = v42;
  LOBYTE(v42) = _dispatchPreconditionTest(_:)(v6);
  v45 = v79;
  v79(v6, v3);
  if ((v42 & 1) == 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  v46 = type metadata accessor for SQLiteRowIterator();
  inited = (_QWORD *)swift_initStackObject(v46, v87);
  inited[3] = 0;
  inited[4] = 0;
  v77 = inited + 4;
  inited[5] = 1;
  inited[2] = v23;
  v48 = *(void **)(*(_QWORD *)(v23 + 16) + 32);
  *v6 = v48;
  v78 = v23;
  v49 = swift_retain(v23);
  v43(v6, v81, v3, v49);
  v50 = v48;
  LOBYTE(v48) = _dispatchPreconditionTest(_:)(v6);
  v45(v6, v3);
  if ((v48 & 1) == 0)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    swift_once(&qword_1013DD858, sub_100A05554);
LABEL_6:
    swift_beginAccess(&static OS_os_log.boardStore, &v90, 0, 0);
    v26 = (void *)static OS_os_log.boardStore;
    v27 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    v28 = swift_initStackObject(v27, v89);
    *(_OWORD *)(v28 + 16) = xmmword_100EF5E40;
    swift_getErrorValue(v1, v85, v82);
    v29 = v83;
    v30 = v84;
    v31 = v26;
    v32 = Error.localizedDescription.getter(v29, v30);
    v34 = v33;
    *(_QWORD *)(v28 + 56) = &type metadata for String;
    v35 = sub_1004CFC2C();
    *(_QWORD *)(v28 + 64) = v35;
    *(_QWORD *)(v28 + 32) = v32;
    *(_QWORD *)(v28 + 40) = v34;
    v36 = static os_log_type_t.error.getter(v35);
    sub_100A06EBC((uint64_t)v31, &_mh_execute_header, v36, "Failed to fetch an asset reference with error %@", 48, 2, v28);
    swift_setDeallocating(v28);
    v37 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(v28 + 32, 1, v37);

    return swift_willThrow(v38);
  }
  v51 = v78;
  while (1)
  {
    v56 = inited[3];
    v57 = inited[4];
    v58 = inited[5];
    inited[3] = 0;
    inited[4] = 0;
    inited[5] = 1;
    sub_1006B7DA4(v56, v57, v58);
    swift_beginAccess(v51 + 24, &v90, 0, 0);
    v59 = sqlite3_step(*(sqlite3_stmt **)(v51 + 24));
    if (v59 != 100)
      break;
    v60 = swift_retain_n(v51, 2);
    v61 = sub_100AF3BD8(v60, 0);
    if (v61)
    {
      v62 = v61;
      swift_retain(v61);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v63);
      v65 = *(_QWORD *)((v86 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v64 = *(_QWORD *)((v86 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v65 >= v64 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v64 > 1, v65 + 1, 1);
      v52 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v65, v62);
      specialized Array._endMutation()(v52);
      swift_release(v62);
      v45 = v79;
    }
    v53 = swift_release(v51);
    v51 = inited[2];
    v54 = *(void **)(*(_QWORD *)(v51 + 16) + 32);
    *v6 = v54;
    v43 = v80;
    v80(v6, v81, v3, v53);
    v55 = v54;
    LOBYTE(v54) = _dispatchPreconditionTest(_:)(v6);
    v45(v6, v3);
    if ((v54 & 1) == 0)
      goto LABEL_23;
  }
  if (v59 && v59 != 101)
  {
    v66 = v59;
    v67 = inited[3];
    v68 = inited[4];
    v69 = inited[5];
    inited[3] = v66;
    v70 = v77;
    *v77 = 0;
    v70[1] = 0;
    sub_1006B7DA4(v67, v68, v69);
  }
  v71 = swift_release(inited);
  v72 = v78;
  v73 = *(void **)(*(_QWORD *)(v78 + 16) + 32);
  *v6 = v73;
  v43(v6, v81, v3, v71);
  v74 = v73;
  LOBYTE(v73) = _dispatchPreconditionTest(_:)(v6);
  v45(v6, v3);
  if ((v73 & 1) == 0)
LABEL_27:
    __break(1u);
  swift_beginAccess(v72 + 24, v88, 1, 0);
  v75 = *(sqlite3_stmt **)(v72 + 24);
  if (v75)
  {
    sqlite3_finalize(v75);
    *(_QWORD *)(v72 + 24) = 0;
  }
  swift_release(v72);
  return v86;
}

uint64_t sub_100ABB740(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  void (*v20)(_QWORD, __n128);
  id v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(void);
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(_QWORD *, uint64_t);
  sqlite3_stmt *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(_QWORD *, uint64_t, uint64_t, __n128);
  id v61;
  uint64_t v62;
  _QWORD *inited;
  uint64_t v64;
  void *v65;
  __n128 v66;
  id v67;
  _QWORD *v68;
  void (*v69)(_QWORD *, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  sqlite3_stmt **v76;
  unsigned int v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  void (*v82)(_QWORD *, uint64_t);
  void *v83;
  id v84;
  void *v85;
  id v86;
  _BYTE *v87;
  _BYTE *v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  _QWORD *v99;
  uint64_t v100;
  id v101;
  char v102;
  void (*v103)(char *, uint64_t, uint64_t);
  char *v104;
  unint64_t v105;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v107;
  unint64_t v108;
  double *v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  __n128 v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  void *v121;
  id v122;
  uint64_t v123;
  sqlite3_stmt *v124;
  __n128 v125;
  void *v126;
  id v127;
  _QWORD *v128;
  uint64_t v129;
  unint64_t v130;
  double *v131;
  void (*v132)(void);
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  void (*v145)(_QWORD *, uint64_t, uint64_t, __n128);
  unsigned int v146;
  void (*v147)(_QWORD *, uint64_t);
  _QWORD v148[3];
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char v152[24];
  char v153[72];
  unint64_t v154;
  unint64_t v155;
  char v156[32];

  v4 = v3;
  v5 = v2;
  v140 = a2;
  v6 = sub_1004B804C((uint64_t *)&unk_1013E1A50);
  __chkstk_darwin(v6);
  v142 = (char *)&v128 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v143 = *(_QWORD *)(v8 - 8);
  v144 = v8;
  __chkstk_darwin(v8);
  v139 = (char *)&v128 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v138 = (char *)&v128 - v11;
  v12 = type metadata accessor for CRLAssetReferrerIdentifier(0);
  __chkstk_darwin(v12);
  v141 = (uint64_t)&v128 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchPredicate(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (_QWORD **)((char *)&v128 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = *(void **)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v18 = v19;
  v20 = *(void (**)(_QWORD, __n128))(v15 + 104);
  v146 = enum case for DispatchPredicate.onQueue(_:);
  v145 = (void (*)(_QWORD *, uint64_t, uint64_t, __n128))v20;
  v20(v18, v16);
  v21 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)(v18);
  v147 = *(void (**)(_QWORD *, uint64_t))(v15 + 8);
  v147(v18, v14);
  if ((v19 & 1) == 0)
  {
    __break(1u);
    goto LABEL_40;
  }
  v154 = 0;
  v155 = 0xE000000000000000;
  _StringGuts.grow(_:)(40);
  swift_bridgeObjectRelease();
  v154 = 0xD00000000000005ALL;
  v155 = 0x8000000100FF1940;
  v22._countAndFlagsBits = sub_100AF94C0((uint64_t)&off_101263650, 0);
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = 41;
  v23._object = (void *)0xE100000000000000;
  String.append(_:)(v23);
  v24 = v154;
  v25 = v155;
  v26 = *(_QWORD *)(v5 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v27 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v27, v156);
  swift_retain(v26);
  v29 = sub_1006B77CC(v28, v24, v25);
  if (v3)
    goto LABEL_5;
  v136 = v14;
  v137 = v29;
  swift_release(v26);
  v30 = sub_1004B804C((uint64_t *)&unk_1013E1780);
  v31 = v141 + *(int *)(v30 + 48);
  v32 = *(void (**)(void))(v143 + 16);
  v33 = v141;
  v32();
  sub_1004B8460(v140, v31, type metadata accessor for CRLBoardIdentifier);
  swift_storeEnumTagMultiPayload(v33, v12, 1);
  v48 = sub_1004BC12C();
  v50 = v49;
  v132 = v32;
  sub_1006B5E80(v48, v49);
  sub_1004BBBC8(v48, v50);
  v51 = sub_10067BA88();
  v4 = 0;
  v53 = v147;
  v129 = v51;
  v130 = v52;
  v55 = v137;
  sub_1006B5E80(v51, v52);
  v56 = *(_QWORD *)(v55 + 16);
  v133 = v55 + 16;
  v57 = *(void **)(v56 + 32);
  *v18 = v57;
  v58 = v146;
  v59 = v136;
  v60 = v145;
  ((void (*)(_QWORD *, _QWORD, uint64_t))v145)(v18, v146, v136);
  v61 = v57;
  LOBYTE(v57) = _dispatchPreconditionTest(_:)(v18);
  v53(v18, v59);
  if ((v57 & 1) == 0)
    goto LABEL_45;
  v62 = type metadata accessor for SQLiteRowIterator();
  inited = (_QWORD *)swift_initStackObject(v62, &v151);
  inited[3] = 0;
  v135 = inited + 3;
  inited[4] = 0;
  v128 = inited + 4;
  inited[5] = 1;
  inited[2] = v55;
  v64 = v55;
  v65 = *(void **)(*(_QWORD *)(v55 + 16) + 32);
  *v18 = v65;
  v66 = swift_retain(v64);
  v60(v18, v58, v59, v66);
  v67 = v65;
  LOBYTE(v65) = _dispatchPreconditionTest(_:)(v18);
  v53(v18, v59);
  if ((v65 & 1) == 0)
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    __break(1u);
    __break(1u);
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  v68 = inited;
  v69 = (void (*)(_QWORD *, uint64_t, uint64_t))v60;
  v131 = _swiftEmptyArrayStorage;
  v70 = v133;
  v71 = v137;
  v134 = v68;
  while (1)
  {
    v72 = v68[3];
    v73 = v68[4];
    v74 = v68[5];
    v75 = v135;
    *v135 = 0;
    v75[1] = 0;
    v68[5] = 1;
    sub_1006B7DA4(v72, v73, v74);
    v76 = (sqlite3_stmt **)(v71 + 24);
    swift_beginAccess(v71 + 24, v152, 0, 0);
    v77 = sqlite3_step(*(sqlite3_stmt **)(v71 + 24));
    if (v77 != 100)
      break;
    v140 = v4;
    v78 = *(void **)(*(_QWORD *)v70 + 32);
    *v18 = v78;
    v79 = v71;
    v80 = v146;
    v69(v18, v146, v59);
    v136 = v79;
    swift_retain(v79);
    v81 = v78;
    LOBYTE(v78) = _dispatchPreconditionTest(_:)(v18);
    v82 = v147;
    v147(v18, v59);
    if ((v78 & 1) == 0)
      goto LABEL_42;
    v83 = *(void **)(*(_QWORD *)v70 + 32);
    *v18 = v83;
    v69(v18, v80, v59);
    v84 = v83;
    LOBYTE(v83) = _dispatchPreconditionTest(_:)(v18);
    v82(v18, v59);
    if ((v83 & 1) == 0)
      goto LABEL_43;
    v85 = *(void **)(*(_QWORD *)v70 + 32);
    *v18 = v85;
    v69(v18, v80, v59);
    v86 = v85;
    LOBYTE(v85) = _dispatchPreconditionTest(_:)(v18);
    v82(v18, v59);
    if ((v85 & 1) == 0)
      goto LABEL_44;
    if (sqlite3_column_type(*v76, 0) == 5 || (v87 = sqlite3_column_blob(*v76, 0)) == 0)
    {
      v91 = (uint64_t)v142;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v143 + 56))(v142, 1, 1, v144);
      v69 = (void (*)(_QWORD *, uint64_t, uint64_t))v145;
      v4 = v140;
    }
    else
    {
      v88 = v87;
      v89 = sqlite3_column_bytes(*v76, 0);
      v90 = sub_1005CB82C(v88, v89);
      v91 = (uint64_t)v142;
      v92 = v140;
      UUID.init(crl_data:)(v90, v93);
      v4 = v92;
      if (v92)
      {
        swift_release(v134);
        swift_release(v136);
        sub_1004BBBC8(v129, v130);
        sub_1004B84A4(v141, type metadata accessor for CRLAssetReferrerIdentifier);
        v125 = swift_bridgeObjectRelease();
        v126 = *(void **)(*(_QWORD *)v133 + 32);
        *v18 = v126;
        v145(v18, v146, v59, v125);
        v127 = v126;
        LOBYTE(v126) = _dispatchPreconditionTest(_:)(v18);
        v147(v18, v59);
        v26 = v137;
        if ((v126 & 1) != 0)
        {
          swift_beginAccess(v137 + 24, &v150, 1, 0);
          v54 = *(sqlite3_stmt **)(v26 + 24);
          if (v54)
          {
            sqlite3_finalize(v54);
            *(_QWORD *)(v26 + 24) = 0;
          }
LABEL_5:
          swift_release(v26);
          if (qword_1013DD858 == -1)
          {
LABEL_6:
            swift_beginAccess(&static OS_os_log.boardStore, &v154, 0, 0);
            v34 = (void *)static OS_os_log.boardStore;
            v35 = sub_1004B804C((uint64_t *)&unk_1013E0180);
            v36 = swift_initStackObject(v35, v153);
            *(_OWORD *)(v36 + 16) = xmmword_100EF5E40;
            swift_getErrorValue(v4, &v149, v148);
            v37 = v148[1];
            v38 = v148[2];
            v39 = v34;
            v40 = Error.localizedDescription.getter(v37, v38);
            v42 = v41;
            *(_QWORD *)(v36 + 56) = &type metadata for String;
            v43 = sub_1004CFC2C();
            *(_QWORD *)(v36 + 64) = v43;
            *(_QWORD *)(v36 + 32) = v40;
            *(_QWORD *)(v36 + 40) = v42;
            v44 = static os_log_type_t.error.getter(v43);
            sub_100A06EBC((uint64_t)v39, &_mh_execute_header, v44, "Failed to fetch an asset reference with error %@", 48, 2, v36);
            swift_setDeallocating(v36);
            v45 = sub_1004B804C(&qword_1013E0190);
            swift_arrayDestroy(v36 + 32, 1, v45);

            return swift_willThrow(v46);
          }
LABEL_40:
          swift_once(&qword_1013DD858, sub_100A05554);
          goto LABEL_6;
        }
LABEL_47:
        __break(1u);
      }
      v95 = v143;
      v94 = v144;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v143 + 56))(v91, 0, 1, v144);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v95 + 48))(v91, 1, v94) != 1)
      {
        v103 = *(void (**)(char *, uint64_t, uint64_t))(v95 + 32);
        v104 = v138;
        v103(v138, v91, v94);
        ((void (*)(char *, char *, uint64_t))v132)(v139, v104, v94);
        v105 = (unint64_t)v131;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v131);
        v69 = (void (*)(_QWORD *, uint64_t, uint64_t))v145;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          v105 = sub_100D0EC28(0, *(_QWORD *)(v105 + 16) + 1, 1, v105);
        v108 = *(_QWORD *)(v105 + 16);
        v107 = *(_QWORD *)(v105 + 24);
        if (v108 >= v107 >> 1)
          v105 = sub_100D0EC28(v107 > 1, v108 + 1, 1, v105);
        *(_QWORD *)(v105 + 16) = v108 + 1;
        v109 = (double *)v105;
        v110 = v143;
        v111 = v144;
        v112 = (*(unsigned __int8 *)(v110 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v110 + 80);
        v131 = v109;
        v103((char *)v109 + v112 + *(_QWORD *)(v143 + 72) * v108, (uint64_t)v139, v144);
        v113 = swift_release(v136);
        (*(void (**)(char *, uint64_t, __n128))(v110 + 8))(v138, v111, v113);
        v68 = v134;
        v71 = v134[2];
        v70 = v71 + 16;
        v98 = *(void **)(*(_QWORD *)(v71 + 16) + 32);
        *v18 = v98;
        v99 = v18;
        v100 = v146;
        goto LABEL_23;
      }
      v69 = (void (*)(_QWORD *, uint64_t, uint64_t))v145;
    }
    v96 = v146;
    swift_release(v136);
    sub_1004CB800(v91, (uint64_t *)&unk_1013E1A50);
    v68 = v134;
    v97 = v134[2];
    v70 = v97 + 16;
    v98 = *(void **)(*(_QWORD *)(v97 + 16) + 32);
    *v18 = v98;
    v99 = v18;
    v100 = v96;
    v71 = v97;
LABEL_23:
    v69(v99, v100, v59);
    v101 = v98;
    v102 = _dispatchPreconditionTest(_:)(v18);
    v147(v18, v59);
    if ((v102 & 1) == 0)
      goto LABEL_41;
  }
  v114 = v146;
  v115 = v134;
  if (v77 && v77 != 101)
  {
    v116 = v77;
    v117 = v134[3];
    v118 = v134[4];
    v119 = v134[5];
    v134[3] = v116;
    v120 = v128;
    *v128 = 0;
    v120[1] = 0;
    sub_1006B7DA4(v117, v118, v119);
  }
  sub_1004B84A4(v141, type metadata accessor for CRLAssetReferrerIdentifier);
  swift_setDeallocating(v115);
  swift_release(v115[2]);
  sub_1006B7DA4(v115[3], v115[4], v115[5]);
  sub_1004BBBC8(v129, v130);
  v121 = *(void **)(*(_QWORD *)v133 + 32);
  *v18 = v121;
  ((void (*)(_QWORD *, uint64_t, uint64_t))v145)(v18, v114, v59);
  v122 = v121;
  LOBYTE(v121) = _dispatchPreconditionTest(_:)(v18);
  v147(v18, v59);
  v123 = v137;
  if ((v121 & 1) == 0)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  swift_beginAccess(v137 + 24, &v154, 1, 0);
  v124 = *(sqlite3_stmt **)(v123 + 24);
  if (v124)
  {
    sqlite3_finalize(v124);
    *(_QWORD *)(v123 + 24) = 0;
  }
  swift_release(v123);
  return (uint64_t)v131;
}

void sub_100ABC28C(sqlite3_int64 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  void (*v12)(_QWORD *, uint64_t, uint64_t);
  id v13;
  void (*v14)(_QWORD *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  sqlite3_stmt **v21;
  int v22;
  void *v23;
  id v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  __n128 v28;
  void *v29;
  id v30;
  char v31;
  _QWORD v32[3];
  _BYTE v33[32];

  v3 = v1;
  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (_QWORD *)((char *)v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v9 = v10;
  v11 = enum case for DispatchPredicate.onQueue(_:);
  v12 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v6 + 104);
  ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v12)(v9, enum case for DispatchPredicate.onQueue(_:), v5, v7);
  v13 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  v14 = *(void (**)(_QWORD *, uint64_t))(v6 + 8);
  v14(v9, v5);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v32[0] = 0;
  v32[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v16 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v16, v33);
  swift_retain(v15);
  v18 = sub_1006B77CC(v17, 0xD000000000000026, 0x8000000100FF2190);
  swift_release(v15);
  if (v2)
    return;
  sub_1006B5B50(a1, 1);
  v19 = *(void **)(*(_QWORD *)(v18 + 16) + 32);
  *v9 = v19;
  v12(v9, v11, v5);
  v20 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)(v9);
  v14(v9, v5);
  if ((v19 & 1) == 0)
    goto LABEL_13;
  v21 = (sqlite3_stmt **)(v18 + 24);
  swift_beginAccess(v18 + 24, v32, 1, 0);
  v22 = sqlite3_step(*(sqlite3_stmt **)(v18 + 24));
  if (v22 != 101)
    goto LABEL_7;
  v23 = *(void **)(*(_QWORD *)(v18 + 16) + 32);
  *v9 = v23;
  v12(v9, v11, v5);
  v24 = v23;
  v11 = _dispatchPreconditionTest(_:)(v9);
  v22 = ((uint64_t (*)(_QWORD *, uint64_t))v14)(v9, v5);
  if ((v11 & 1) == 0)
  {
    __break(1u);
LABEL_7:
    v25 = v22;
    v26 = sub_1006B79EC();
    swift_allocError(&type metadata for SQLiteError, v26, 0, 0);
    *(_DWORD *)v27 = v25;
    *(_QWORD *)(v27 + 8) = 0xD000000000000027;
    *(_QWORD *)(v27 + 16) = 0x8000000100FF21C0;
    swift_willThrow(v28);
    v29 = *(void **)(*(_QWORD *)(v18 + 16) + 32);
    *v9 = v29;
    v12(v9, v11, v5);
    v30 = v29;
    v31 = _dispatchPreconditionTest(_:)(v9);
    v14(v9, v5);
    if ((v31 & 1) != 0)
      goto LABEL_8;
LABEL_14:
    __break(1u);
  }
LABEL_8:
  if (*v21)
  {
    sqlite3_finalize(*v21);
    *v21 = 0;
  }
  swift_release(v18);
}

void sub_100ABC56C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  void (*v9)(_QWORD *, __n128);
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  void *v16;
  id v17;
  int v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  __n128 v23;
  void *v24;
  id v25;
  sqlite3_stmt **v26;
  uint64_t v27;
  __n128 v28;
  void *v29;
  id v30;
  sqlite3_stmt **v31;
  int v32;
  void *v33;
  id v34;
  __n128 v35;
  void *v36;
  id v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  __n128 v41;
  void *v42;
  id v43;
  __n128 v44;
  void *v45;
  id v46;
  sqlite3_stmt **v47;
  unsigned int v48;
  void (*v49)(_QWORD *, uint64_t);
  _QWORD v50[3];
  _BYTE v51[32];
  _QWORD v52[3];
  _BYTE v53[32];

  v2 = v0;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (sqlite3_stmt ***)((char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v7 = v8;
  v9 = *(void (**)(_QWORD *, __n128))(v4 + 104);
  v48 = enum case for DispatchPredicate.onQueue(_:);
  v9(v7, v5);
  v10 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  v49 = *(void (**)(_QWORD *, uint64_t))(v4 + 8);
  v49(v7, v3);
  if ((v8 & 1) == 0)
    goto LABEL_23;
  v52[0] = 0;
  v52[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v12 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v12, v53);
  swift_retain(v11);
  v14 = sub_1006B77CC(v13, 0xD000000000000027, 0x8000000100FF20D0);
  v15 = swift_release(v11);
  if (!v1)
  {
    v16 = *(void **)(*(_QWORD *)(v14 + 16) + 32);
    *v7 = v16;
    ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v9)(v7, v48, v3, v15);
    v17 = v16;
    LOBYTE(v16) = _dispatchPreconditionTest(_:)(v7);
    v49(v7, v3);
    if ((v16 & 1) == 0)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v47 = (sqlite3_stmt **)(v14 + 24);
    swift_beginAccess(v14 + 24, v52, 1, 0);
    v18 = sqlite3_step(*(sqlite3_stmt **)(v14 + 24));
    if (v18 == 101)
    {
      v50[0] = 0;
      v50[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(23);
      swift_bridgeObjectRelease();
      swift_initStackObject(v12, v51);
      swift_retain(v11);
      v27 = sub_1006B77CC(v19, 0xD000000000000022, 0x8000000100FF2130);
      v28 = swift_release(v11);
      v29 = *(void **)(*(_QWORD *)(v27 + 16) + 32);
      *v7 = v29;
      ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v9)(v7, v48, v3, v28);
      v30 = v29;
      LOBYTE(v29) = _dispatchPreconditionTest(_:)(v7);
      v49(v7, v3);
      if ((v29 & 1) == 0)
        goto LABEL_26;
      v31 = (sqlite3_stmt **)(v27 + 24);
      swift_beginAccess(v27 + 24, v50, 1, 0);
      v32 = sqlite3_step(*(sqlite3_stmt **)(v27 + 24));
      if (v32 != 101)
      {
LABEL_18:
        v38 = v32;
        v39 = sub_1006B79EC();
        swift_allocError(&type metadata for SQLiteError, v39, 0, 0);
        *(_DWORD *)v40 = v38;
        *(_QWORD *)(v40 + 8) = 0xD000000000000020;
        *(_QWORD *)(v40 + 16) = 0x8000000100FF2160;
        swift_willThrow(v41);
        v42 = *(void **)(*(_QWORD *)(v27 + 16) + 32);
        *v7 = v42;
        ((void (*)(_QWORD *, _QWORD, uint64_t))v9)(v7, v48, v3);
        v43 = v42;
        LOBYTE(v42) = _dispatchPreconditionTest(_:)(v7);
        v49(v7, v3);
        if ((v42 & 1) == 0)
          goto LABEL_28;
        if (*v31)
        {
          sqlite3_finalize(*v31);
          *v31 = 0;
        }
        v44 = swift_release(v27);
        v45 = *(void **)(*(_QWORD *)(v14 + 16) + 32);
        *v7 = v45;
        ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v9)(v7, v48, v3, v44);
        v46 = v45;
        LOBYTE(v45) = _dispatchPreconditionTest(_:)(v7);
        v49(v7, v3);
        if ((v45 & 1) == 0)
        {
          __break(1u);
LABEL_23:
          __break(1u);
          goto LABEL_24;
        }
        goto LABEL_7;
      }
      v33 = *(void **)(*(_QWORD *)(v27 + 16) + 32);
      *v7 = v33;
      ((void (*)(_QWORD *, _QWORD, uint64_t))v9)(v7, v48, v3);
      v34 = v33;
      LOBYTE(v33) = _dispatchPreconditionTest(_:)(v7);
      v49(v7, v3);
      if ((v33 & 1) == 0)
      {
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
      }
      if (*v31)
      {
        sqlite3_finalize(*v31);
        *v31 = 0;
      }
      v35 = swift_release(v27);
      v36 = *(void **)(*(_QWORD *)(v14 + 16) + 32);
      *v7 = v36;
      ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v9)(v7, v48, v3, v35);
      v37 = v36;
      v27 = _dispatchPreconditionTest(_:)(v7);
      v32 = ((uint64_t (*)(_QWORD *, uint64_t))v49)(v7, v3);
      if ((v27 & 1) == 0)
      {
        __break(1u);
        goto LABEL_18;
      }
    }
    else
    {
      v20 = v18;
      v21 = sub_1006B79EC();
      swift_allocError(&type metadata for SQLiteError, v21, 0, 0);
      *(_DWORD *)v22 = v20;
      *(_QWORD *)(v22 + 8) = 0xD000000000000025;
      *(_QWORD *)(v22 + 16) = 0x8000000100FF2100;
      swift_willThrow(v23);
      v24 = *(void **)(*(_QWORD *)(v14 + 16) + 32);
      *v7 = v24;
      ((void (*)(_QWORD *, _QWORD, uint64_t))v9)(v7, v48, v3);
      v25 = v24;
      LOBYTE(v24) = _dispatchPreconditionTest(_:)(v7);
      v49(v7, v3);
      if ((v24 & 1) == 0)
      {
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
    }
LABEL_7:
    v26 = v47;
    if (*v47)
    {
      sqlite3_finalize(*v47);
      *v26 = 0;
    }
    swift_release(v14);
  }
}

void sub_100ABCAC4(sqlite3_int64 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  void (*v12)(_QWORD *, uint64_t, uint64_t);
  id v13;
  void (*v14)(_QWORD *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  sqlite3_stmt **v21;
  int v22;
  void *v23;
  id v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  __n128 v28;
  void *v29;
  id v30;
  char v31;
  _QWORD v32[3];
  _BYTE v33[32];

  v3 = v1;
  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (_QWORD *)((char *)v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v9 = v10;
  v11 = enum case for DispatchPredicate.onQueue(_:);
  v12 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v6 + 104);
  ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v12)(v9, enum case for DispatchPredicate.onQueue(_:), v5, v7);
  v13 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  v14 = *(void (**)(_QWORD *, uint64_t))(v6 + 8);
  v14(v9, v5);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v32[0] = 0;
  v32[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v16 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v16, v33);
  swift_retain(v15);
  v18 = sub_1006B77CC(v17, 0xD00000000000002BLL, 0x8000000100FF21F0);
  swift_release(v15);
  if (v2)
    return;
  sub_1006B5B50(a1, 1);
  v19 = *(void **)(*(_QWORD *)(v18 + 16) + 32);
  *v9 = v19;
  v12(v9, v11, v5);
  v20 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)(v9);
  v14(v9, v5);
  if ((v19 & 1) == 0)
    goto LABEL_13;
  v21 = (sqlite3_stmt **)(v18 + 24);
  swift_beginAccess(v18 + 24, v32, 1, 0);
  v22 = sqlite3_step(*(sqlite3_stmt **)(v18 + 24));
  if (v22 != 101)
    goto LABEL_7;
  v23 = *(void **)(*(_QWORD *)(v18 + 16) + 32);
  *v9 = v23;
  v12(v9, v11, v5);
  v24 = v23;
  v11 = _dispatchPreconditionTest(_:)(v9);
  v22 = ((uint64_t (*)(_QWORD *, uint64_t))v14)(v9, v5);
  if ((v11 & 1) == 0)
  {
    __break(1u);
LABEL_7:
    v25 = v22;
    v26 = sub_1006B79EC();
    swift_allocError(&type metadata for SQLiteError, v26, 0, 0);
    *(_DWORD *)v27 = v25;
    *(_QWORD *)(v27 + 8) = 0xD00000000000002DLL;
    *(_QWORD *)(v27 + 16) = 0x8000000100FF2220;
    swift_willThrow(v28);
    v29 = *(void **)(*(_QWORD *)(v18 + 16) + 32);
    *v9 = v29;
    v12(v9, v11, v5);
    v30 = v29;
    v31 = _dispatchPreconditionTest(_:)(v9);
    v14(v9, v5);
    if ((v31 & 1) != 0)
      goto LABEL_8;
LABEL_14:
    __break(1u);
  }
LABEL_8:
  if (*v21)
  {
    sqlite3_finalize(*v21);
    *v21 = 0;
  }
  swift_release(v18);
}

void sub_100ABCDA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  void (*v9)(_QWORD *, __n128);
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  void *v16;
  id v17;
  int v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  __n128 v23;
  void *v24;
  id v25;
  sqlite3_stmt **v26;
  uint64_t v27;
  __n128 v28;
  void *v29;
  id v30;
  sqlite3_stmt **v31;
  int v32;
  void *v33;
  id v34;
  __n128 v35;
  void *v36;
  id v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  __n128 v41;
  void *v42;
  id v43;
  __n128 v44;
  void *v45;
  id v46;
  sqlite3_stmt **v47;
  unsigned int v48;
  void (*v49)(_QWORD *, uint64_t);
  _QWORD v50[3];
  _BYTE v51[32];
  _QWORD v52[3];
  _BYTE v53[32];

  v2 = v0;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (sqlite3_stmt ***)((char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v7 = v8;
  v9 = *(void (**)(_QWORD *, __n128))(v4 + 104);
  v48 = enum case for DispatchPredicate.onQueue(_:);
  v9(v7, v5);
  v10 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  v49 = *(void (**)(_QWORD *, uint64_t))(v4 + 8);
  v49(v7, v3);
  if ((v8 & 1) == 0)
    goto LABEL_23;
  v52[0] = 0;
  v52[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v12 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v12, v53);
  swift_retain(v11);
  v14 = sub_1006B77CC(v13, 0xD00000000000002CLL, 0x8000000100FF2010);
  v15 = swift_release(v11);
  if (!v1)
  {
    v16 = *(void **)(*(_QWORD *)(v14 + 16) + 32);
    *v7 = v16;
    ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v9)(v7, v48, v3, v15);
    v17 = v16;
    LOBYTE(v16) = _dispatchPreconditionTest(_:)(v7);
    v49(v7, v3);
    if ((v16 & 1) == 0)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v47 = (sqlite3_stmt **)(v14 + 24);
    swift_beginAccess(v14 + 24, v52, 1, 0);
    v18 = sqlite3_step(*(sqlite3_stmt **)(v14 + 24));
    if (v18 == 101)
    {
      v50[0] = 0;
      v50[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(27);
      swift_bridgeObjectRelease();
      swift_initStackObject(v12, v51);
      swift_retain(v11);
      v27 = sub_1006B77CC(v19, 0xD000000000000027, 0x8000000100FF2070);
      v28 = swift_release(v11);
      v29 = *(void **)(*(_QWORD *)(v27 + 16) + 32);
      *v7 = v29;
      ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v9)(v7, v48, v3, v28);
      v30 = v29;
      LOBYTE(v29) = _dispatchPreconditionTest(_:)(v7);
      v49(v7, v3);
      if ((v29 & 1) == 0)
        goto LABEL_26;
      v31 = (sqlite3_stmt **)(v27 + 24);
      swift_beginAccess(v27 + 24, v50, 1, 0);
      v32 = sqlite3_step(*(sqlite3_stmt **)(v27 + 24));
      if (v32 != 101)
      {
LABEL_18:
        v38 = v32;
        v39 = sub_1006B79EC();
        swift_allocError(&type metadata for SQLiteError, v39, 0, 0);
        *(_DWORD *)v40 = v38;
        *(_QWORD *)(v40 + 8) = 0xD000000000000025;
        *(_QWORD *)(v40 + 16) = 0x8000000100FF20A0;
        swift_willThrow(v41);
        v42 = *(void **)(*(_QWORD *)(v27 + 16) + 32);
        *v7 = v42;
        ((void (*)(_QWORD *, _QWORD, uint64_t))v9)(v7, v48, v3);
        v43 = v42;
        LOBYTE(v42) = _dispatchPreconditionTest(_:)(v7);
        v49(v7, v3);
        if ((v42 & 1) == 0)
          goto LABEL_28;
        if (*v31)
        {
          sqlite3_finalize(*v31);
          *v31 = 0;
        }
        v44 = swift_release(v27);
        v45 = *(void **)(*(_QWORD *)(v14 + 16) + 32);
        *v7 = v45;
        ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v9)(v7, v48, v3, v44);
        v46 = v45;
        LOBYTE(v45) = _dispatchPreconditionTest(_:)(v7);
        v49(v7, v3);
        if ((v45 & 1) == 0)
        {
          __break(1u);
LABEL_23:
          __break(1u);
          goto LABEL_24;
        }
        goto LABEL_7;
      }
      v33 = *(void **)(*(_QWORD *)(v27 + 16) + 32);
      *v7 = v33;
      ((void (*)(_QWORD *, _QWORD, uint64_t))v9)(v7, v48, v3);
      v34 = v33;
      LOBYTE(v33) = _dispatchPreconditionTest(_:)(v7);
      v49(v7, v3);
      if ((v33 & 1) == 0)
      {
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
      }
      if (*v31)
      {
        sqlite3_finalize(*v31);
        *v31 = 0;
      }
      v35 = swift_release(v27);
      v36 = *(void **)(*(_QWORD *)(v14 + 16) + 32);
      *v7 = v36;
      ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v9)(v7, v48, v3, v35);
      v37 = v36;
      v27 = _dispatchPreconditionTest(_:)(v7);
      v32 = ((uint64_t (*)(_QWORD *, uint64_t))v49)(v7, v3);
      if ((v27 & 1) == 0)
      {
        __break(1u);
        goto LABEL_18;
      }
    }
    else
    {
      v20 = v18;
      v21 = sub_1006B79EC();
      swift_allocError(&type metadata for SQLiteError, v21, 0, 0);
      *(_DWORD *)v22 = v20;
      *(_QWORD *)(v22 + 8) = 0xD00000000000002ALL;
      *(_QWORD *)(v22 + 16) = 0x8000000100FF2040;
      swift_willThrow(v23);
      v24 = *(void **)(*(_QWORD *)(v14 + 16) + 32);
      *v7 = v24;
      ((void (*)(_QWORD *, _QWORD, uint64_t))v9)(v7, v48, v3);
      v25 = v24;
      LOBYTE(v24) = _dispatchPreconditionTest(_:)(v7);
      v49(v7, v3);
      if ((v24 & 1) == 0)
      {
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
    }
LABEL_7:
    v26 = v47;
    if (*v47)
    {
      sqlite3_finalize(*v47);
      *v26 = 0;
    }
    swift_release(v14);
  }
}

void sub_100ABD2FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  void (*v9)(_QWORD *, __n128);
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  void *v16;
  id v17;
  int v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  __n128 v23;
  void *v24;
  id v25;
  sqlite3_stmt **v26;
  uint64_t v27;
  __n128 v28;
  void *v29;
  id v30;
  sqlite3_stmt **v31;
  int v32;
  void *v33;
  id v34;
  __n128 v35;
  void *v36;
  id v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  __n128 v41;
  void *v42;
  id v43;
  __n128 v44;
  void *v45;
  id v46;
  sqlite3_stmt **v47;
  unsigned int v48;
  void (*v49)(_QWORD *, uint64_t);
  _QWORD v50[3];
  _BYTE v51[32];
  _QWORD v52[3];
  _BYTE v53[32];

  v2 = v0;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (sqlite3_stmt ***)((char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v7 = v8;
  v9 = *(void (**)(_QWORD *, __n128))(v4 + 104);
  v48 = enum case for DispatchPredicate.onQueue(_:);
  v9(v7, v5);
  v10 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  v49 = *(void (**)(_QWORD *, uint64_t))(v4 + 8);
  v49(v7, v3);
  if ((v8 & 1) == 0)
    goto LABEL_23;
  v52[0] = 0;
  v52[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(38);
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v12 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v12, v53);
  swift_retain(v11);
  v14 = sub_1006B77CC(v13, 0xD000000000000045, 0x8000000100FF5BD0);
  v15 = swift_release(v11);
  if (!v1)
  {
    v16 = *(void **)(*(_QWORD *)(v14 + 16) + 32);
    *v7 = v16;
    ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v9)(v7, v48, v3, v15);
    v17 = v16;
    LOBYTE(v16) = _dispatchPreconditionTest(_:)(v7);
    v49(v7, v3);
    if ((v16 & 1) == 0)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v47 = (sqlite3_stmt **)(v14 + 24);
    swift_beginAccess(v14 + 24, v52, 1, 0);
    v18 = sqlite3_step(*(sqlite3_stmt **)(v14 + 24));
    if (v18 == 101)
    {
      v50[0] = 0;
      v50[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(38);
      swift_bridgeObjectRelease();
      swift_initStackObject(v12, v51);
      swift_retain(v11);
      v27 = sub_1006B77CC(v19, 0xD000000000000040, 0x8000000100FF5C60);
      v28 = swift_release(v11);
      v29 = *(void **)(*(_QWORD *)(v27 + 16) + 32);
      *v7 = v29;
      ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v9)(v7, v48, v3, v28);
      v30 = v29;
      LOBYTE(v29) = _dispatchPreconditionTest(_:)(v7);
      v49(v7, v3);
      if ((v29 & 1) == 0)
        goto LABEL_26;
      v31 = (sqlite3_stmt **)(v27 + 24);
      swift_beginAccess(v27 + 24, v50, 1, 0);
      v32 = sqlite3_step(*(sqlite3_stmt **)(v27 + 24));
      if (v32 != 101)
      {
LABEL_18:
        v38 = v32;
        v39 = sub_1006B79EC();
        swift_allocError(&type metadata for SQLiteError, v39, 0, 0);
        *(_DWORD *)v40 = v38;
        *(_QWORD *)(v40 + 8) = 0xD00000000000002CLL;
        *(_QWORD *)(v40 + 16) = 0x8000000100FF5CB0;
        swift_willThrow(v41);
        v42 = *(void **)(*(_QWORD *)(v27 + 16) + 32);
        *v7 = v42;
        ((void (*)(_QWORD *, _QWORD, uint64_t))v9)(v7, v48, v3);
        v43 = v42;
        LOBYTE(v42) = _dispatchPreconditionTest(_:)(v7);
        v49(v7, v3);
        if ((v42 & 1) == 0)
          goto LABEL_28;
        if (*v31)
        {
          sqlite3_finalize(*v31);
          *v31 = 0;
        }
        v44 = swift_release(v27);
        v45 = *(void **)(*(_QWORD *)(v14 + 16) + 32);
        *v7 = v45;
        ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v9)(v7, v48, v3, v44);
        v46 = v45;
        LOBYTE(v45) = _dispatchPreconditionTest(_:)(v7);
        v49(v7, v3);
        if ((v45 & 1) == 0)
        {
          __break(1u);
LABEL_23:
          __break(1u);
          goto LABEL_24;
        }
        goto LABEL_7;
      }
      v33 = *(void **)(*(_QWORD *)(v27 + 16) + 32);
      *v7 = v33;
      ((void (*)(_QWORD *, _QWORD, uint64_t))v9)(v7, v48, v3);
      v34 = v33;
      LOBYTE(v33) = _dispatchPreconditionTest(_:)(v7);
      v49(v7, v3);
      if ((v33 & 1) == 0)
      {
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
      }
      if (*v31)
      {
        sqlite3_finalize(*v31);
        *v31 = 0;
      }
      v35 = swift_release(v27);
      v36 = *(void **)(*(_QWORD *)(v14 + 16) + 32);
      *v7 = v36;
      ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v9)(v7, v48, v3, v35);
      v37 = v36;
      v27 = _dispatchPreconditionTest(_:)(v7);
      v32 = ((uint64_t (*)(_QWORD *, uint64_t))v49)(v7, v3);
      if ((v27 & 1) == 0)
      {
        __break(1u);
        goto LABEL_18;
      }
    }
    else
    {
      v20 = v18;
      v21 = sub_1006B79EC();
      swift_allocError(&type metadata for SQLiteError, v21, 0, 0);
      *(_DWORD *)v22 = v20;
      *(_QWORD *)(v22 + 8) = 0xD000000000000031;
      *(_QWORD *)(v22 + 16) = 0x8000000100FF5C20;
      swift_willThrow(v23);
      v24 = *(void **)(*(_QWORD *)(v14 + 16) + 32);
      *v7 = v24;
      ((void (*)(_QWORD *, _QWORD, uint64_t))v9)(v7, v48, v3);
      v25 = v24;
      LOBYTE(v24) = _dispatchPreconditionTest(_:)(v7);
      v49(v7, v3);
      if ((v24 & 1) == 0)
      {
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
    }
LABEL_7:
    v26 = v47;
    if (*v47)
    {
      sqlite3_finalize(*v47);
      *v26 = 0;
    }
    swift_release(v14);
  }
}

void sub_100ABD860()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  void (*v17)(_QWORD *, uint64_t, uint64_t, __n128);
  id v18;
  void (*v19)(_QWORD *, uint64_t);
  Swift::String v20;
  void *object;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  void *v36;
  id v37;
  void *v38;
  __n128 v39;
  id v40;
  uint64_t v41;
  sqlite3_stmt **v42;
  unsigned int v43;
  void *v44;
  id v45;
  void *v46;
  id v47;
  void *v48;
  id v49;
  _BYTE *v50;
  _BYTE *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __n128 v56;
  void *v57;
  id v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  id v62;
  unint64_t v63;
  const unsigned __int8 *v64;
  uint64_t v65;
  void *v66;
  id v67;
  __n128 v68;
  double v69;
  __n128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(char *, uint64_t, uint64_t);
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  id v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(char *, uint64_t, uint64_t);
  void (*v89)(_QWORD *, uint64_t, uint64_t, __n128);
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  char v97[24];
  uint64_t v98;
  unint64_t v99;
  char v100[32];

  v2 = v0;
  v3 = sub_1004B804C((uint64_t *)&unk_1013E1A50);
  __chkstk_darwin(v3);
  v5 = (char *)&v85 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v94 = v6;
  v95 = v7;
  v8 = __chkstk_darwin(v6);
  v90 = (char *)&v85 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v91 = (char *)&v85 - v10;
  v11 = type metadata accessor for DispatchPredicate(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (uint64_t *)((char *)&v85 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v14 = v15;
  v16 = enum case for DispatchPredicate.onQueue(_:);
  v17 = *(void (**)(_QWORD *, uint64_t, uint64_t, __n128))(v12 + 104);
  ((void (*)(_QWORD *, _QWORD, uint64_t))v17)(v14, enum case for DispatchPredicate.onQueue(_:), v11);
  v18 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)(v14);
  v19 = *(void (**)(_QWORD *, uint64_t))(v12 + 8);
  v19(v14, v11);
  if ((v15 & 1) == 0)
  {
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  v92 = v5;
  v98 = 0;
  v99 = 0xE000000000000000;
  _StringGuts.grow(_:)(47);
  swift_bridgeObjectRelease(v99);
  v98 = 0x205443454C4553;
  v99 = 0xE700000000000000;
  v20._countAndFlagsBits = sub_100AF9E60(0, 0xE000000000000000);
  object = v20._object;
  String.append(_:)(v20);
  swift_bridgeObjectRelease(object);
  v22._countAndFlagsBits = 0x204D4F524620;
  v22._object = (void *)0xE600000000000000;
  String.append(_:)(v22);
  v23._countAndFlagsBits = 0x737465737361;
  v23._object = (void *)0xE600000000000000;
  String.append(_:)(v23);
  v24._countAndFlagsBits = 0x20455245485720;
  v24._object = (void *)0xE700000000000000;
  String.append(_:)(v24);
  v25._countAndFlagsBits = 0x6E6F7473626D6F74;
  v25._object = (void *)0xEE00657461645F65;
  String.append(_:)(v25);
  v26._countAndFlagsBits = 0x44524F2030203E20;
  v26._object = (void *)0xEE00205942205245;
  String.append(_:)(v26);
  v27._countAndFlagsBits = 0x6E6F7473626D6F74;
  v27._object = (void *)0xEE00657461645F65;
  String.append(_:)(v27);
  v28._countAndFlagsBits = 0x4353454420;
  v28._object = (void *)0xE500000000000000;
  String.append(_:)(v28);
  v29 = v98;
  v30 = v99;
  v96 = (unint64_t)_swiftEmptyArrayStorage;
  v31 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v32 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v32, v100);
  swift_retain(v31);
  v34 = sub_1006B77CC(v33, v29, v30);
  v35 = swift_release(v31);
  if (v1)
  {
    swift_bridgeObjectRelease(v96);
    return;
  }
  v93 = 0;
  v36 = *(void **)(*(_QWORD *)(v34 + 16) + 32);
  *v14 = v36;
  v17(v14, v16, v11, v35);
  v37 = v36;
  LOBYTE(v36) = _dispatchPreconditionTest(_:)(v14);
  v19(v14, v11);
  if ((v36 & 1) == 0)
    goto LABEL_47;
  v38 = *(void **)(*(_QWORD *)(v34 + 16) + 32);
  *v14 = v38;
  v39 = swift_retain(v34);
  v17(v14, v16, v11, v39);
  v40 = v38;
  LOBYTE(v38) = _dispatchPreconditionTest(_:)(v14);
  v19(v14, v11);
  v41 = (uint64_t)v92;
  if ((v38 & 1) == 0)
  {
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  v42 = (sqlite3_stmt **)(v34 + 24);
  v89 = v17;
  while (1)
  {
    sub_1006B7DA4(0, 0, 1);
    swift_beginAccess(v34 + 24, &v98, 0, 0);
    v43 = sqlite3_step(*v42);
    if (v43 != 100)
      break;
    v44 = *(void **)(*(_QWORD *)(v34 + 16) + 32);
    *v14 = v44;
    ((void (*)(_QWORD *, uint64_t, uint64_t))v17)(v14, v16, v11);
    swift_retain_n(v34, 2);
    v45 = v44;
    LOBYTE(v44) = _dispatchPreconditionTest(_:)(v14);
    v19(v14, v11);
    if ((v44 & 1) == 0)
      goto LABEL_43;
    v46 = *(void **)(*(_QWORD *)(v34 + 16) + 32);
    *v14 = v46;
    ((void (*)(_QWORD *, uint64_t, uint64_t))v17)(v14, v16, v11);
    v47 = v46;
    LOBYTE(v46) = _dispatchPreconditionTest(_:)(v14);
    v19(v14, v11);
    if ((v46 & 1) == 0)
      goto LABEL_44;
    v48 = *(void **)(*(_QWORD *)(v34 + 16) + 32);
    *v14 = v48;
    ((void (*)(_QWORD *, uint64_t, uint64_t))v17)(v14, v16, v11);
    v49 = v48;
    LOBYTE(v48) = _dispatchPreconditionTest(_:)(v14);
    v19(v14, v11);
    if ((v48 & 1) == 0)
      goto LABEL_45;
    if (sqlite3_column_type(*v42, 0) == 5)
      goto LABEL_15;
    v50 = sqlite3_column_blob(*v42, 0);
    if (!v50)
      goto LABEL_15;
    v51 = v50;
    v52 = sqlite3_column_bytes(*v42, 0);
    v53 = sub_1005CB82C(v51, v52);
    v54 = v93;
    UUID.init(crl_data:)(v53, v55);
    if (v54)
    {
      swift_errorRelease(v54);
      v93 = 0;
LABEL_15:
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v95 + 56))(v41, 1, 1, v94);
LABEL_16:
      swift_release(v34);
      sub_1004CB800(v41, (uint64_t *)&unk_1013E1A50);
      v56 = swift_release(v34);
      goto LABEL_17;
    }
    v93 = 0;
    v59 = v94;
    v60 = v95;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v95 + 56))(v41, 0, 1, v94);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v60 + 48))(v41, 1, v59) == 1)
    {
      v17 = v89;
      goto LABEL_16;
    }
    v88 = *(void (**)(char *, uint64_t, uint64_t))(v60 + 32);
    v88(v91, v41, v59);
    v61 = *(void **)(*(_QWORD *)(v34 + 16) + 32);
    *v14 = v61;
    v17 = v89;
    ((void (*)(_QWORD *, uint64_t, uint64_t))v89)(v14, v16, v11);
    v62 = v61;
    LOBYTE(v61) = _dispatchPreconditionTest(_:)(v14);
    v19(v14, v11);
    if ((v61 & 1) == 0)
      goto LABEL_49;
    if (sqlite3_column_type(*v42, 1) == 5)
    {
      v86 = 0;
      v87 = 0;
      v63 = v95;
    }
    else
    {
      v64 = sqlite3_column_text(*v42, 1);
      v63 = v95;
      if (v64)
      {
        v86 = String.init(cString:)();
        v87 = v65;
      }
      else
      {
        v86 = 0;
        v87 = 0;
      }
    }
    v66 = *(void **)(*(_QWORD *)(v34 + 16) + 32);
    *v14 = v66;
    ((void (*)(_QWORD *, uint64_t, uint64_t))v17)(v14, v16, v11);
    v67 = v66;
    LOBYTE(v66) = _dispatchPreconditionTest(_:)(v14);
    v19(v14, v11);
    if ((v66 & 1) == 0)
      goto LABEL_50;
    if (sqlite3_column_type(*v42, 2) == 5)
    {
      v68 = swift_release(v34);
      (*(void (**)(char *, uint64_t, __n128))(v63 + 8))(v91, v94, v68);
      swift_release(v34);
      v56 = swift_bridgeObjectRelease(v87);
    }
    else
    {
      v69 = sqlite3_column_double(*(sqlite3_stmt **)(v34 + 24), 2);
      v70 = swift_release(v34);
      v71 = v94;
      ((void (*)(char *, char *, uint64_t, __n128))v88)(v90, v91, v94, v70);
      v72 = type metadata accessor for CRLAssetDatabaseRow(0);
      v73 = swift_allocObject(v72, *(unsigned int *)(v72 + 48), *(unsigned __int16 *)(v72 + 52));
      v88((char *)(v73 + OBJC_IVAR____TtC8Freeform19CRLAssetDatabaseRow_assetUUID), (uint64_t)v90, v71);
      v74 = (uint64_t *)(v73 + OBJC_IVAR____TtC8Freeform19CRLAssetDatabaseRow_fileExtension);
      v75 = v87;
      *v74 = v86;
      v74[1] = v75;
      *(double *)(v73 + OBJC_IVAR____TtC8Freeform19CRLAssetDatabaseRow_tombstoneDate) = v69;
      swift_retain(v73);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v76);
      v77 = *(void (**)(char *, uint64_t, uint64_t))((v96 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v78 = *(_QWORD *)((v96 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if ((unint64_t)v77 >= v78 >> 1)
      {
        v88 = *(void (**)(char *, uint64_t, uint64_t))((v96 & 0xFFFFFFFFFFFFFF8) + 0x10);
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v78 > 1, (char *)v77 + 1, 1);
        v77 = v88;
      }
      v79 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v77, v73);
      specialized Array._endMutation()(v79);
      swift_release(v73);
      v56 = swift_release(v34);
    }
    v41 = (uint64_t)v92;
LABEL_17:
    v57 = *(void **)(*(_QWORD *)(v34 + 16) + 32);
    *v14 = v57;
    v17(v14, v16, v11, v56);
    v58 = v57;
    LOBYTE(v57) = _dispatchPreconditionTest(_:)(v14);
    v19(v14, v11);
    if ((v57 & 1) == 0)
      goto LABEL_42;
  }
  if (v43 && v43 != 101)
  {
    v80 = v43;
    sub_1006B7DA4(0, 0, 1);
    v81 = 0;
  }
  else
  {
    v80 = 0;
    v81 = 1;
  }
  v95 = v96;
  swift_release(v34);
  sub_1006B7DA4(v80, 0, v81);
  v82 = *(void **)(*(_QWORD *)(v34 + 16) + 32);
  *v14 = v82;
  ((void (*)(_QWORD *, uint64_t, uint64_t))v17)(v14, v16, v11);
  v83 = v82;
  v84 = _dispatchPreconditionTest(_:)(v14);
  v19(v14, v11);
  if ((v84 & 1) == 0)
  {
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
  }
  swift_beginAccess(v34 + 24, v97, 1, 0);
  if (*v42)
  {
    sqlite3_finalize(*v42);
    *v42 = 0;
  }
  swift_release(v34);
}

uint64_t sub_100ABE12C()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  unsigned int v9;
  id v10;
  void (*v11)(_QWORD *, uint64_t);
  Swift::String v12;
  void *object;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t inited;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  void (*v45)(_QWORD *, uint64_t, uint64_t, __n128);
  id v46;
  void (*v47)(_QWORD *, uint64_t);
  uint64_t v48;
  _QWORD *v49;
  void *v50;
  __n128 v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __n128 v56;
  void *v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __n128 v74;
  uint64_t v75;
  void *v76;
  id v77;
  sqlite3_stmt *v78;
  _QWORD v79[2];
  uint64_t v80;
  unsigned int v81;
  void (*v82)(_QWORD *, uint64_t, uint64_t, __n128);
  void (*v83)(_QWORD *, uint64_t);
  char v84[8];
  uint64_t v85;
  uint64_t v86;
  char v87[8];
  unint64_t v88;
  char v89[24];
  char v90[48];
  char v91[72];
  uint64_t v92;
  unint64_t v93;
  char v94[8];

  v2 = v0;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (_QWORD *)((char *)v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)((char *)v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v7 = v8;
  v9 = enum case for DispatchPredicate.onQueue(_:);
  v82 = *(void (**)(_QWORD *, uint64_t, uint64_t, __n128))(v4 + 104);
  v82(v7, enum case for DispatchPredicate.onQueue(_:), v3, v5);
  v10 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  v11 = *(void (**)(_QWORD *, uint64_t))(v4 + 8);
  v11(v7, v3);
  if ((v8 & 1) == 0)
    goto LABEL_22;
  v81 = v9;
  v83 = v11;
  v92 = 0;
  v93 = 0xE000000000000000;
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease(v93);
  v92 = 0x205443454C4553;
  v93 = 0xE700000000000000;
  v12._countAndFlagsBits = sub_100AF39CC(0, 0xE000000000000000);
  object = v12._object;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(object);
  v14._countAndFlagsBits = 0x204D4F524620;
  v14._object = (void *)0xE600000000000000;
  String.append(_:)(v14);
  v15._object = (void *)0x8000000100FEF8F0;
  v15._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0x2820455245485720;
  v16._object = (void *)0xE800000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0x75755F7465737361;
  v17._object = (void *)0xEA00000000006469;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 0x293F203D20;
  v18._object = (void *)0xE500000000000000;
  String.append(_:)(v18);
  v19 = v92;
  v20 = v93;
  v88 = (unint64_t)_swiftEmptyArrayStorage;
  v21 = *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v22 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v22, v94);
  swift_retain(v21);
  v24 = sub_1006B77CC(v23, v19, v20);
  v2 = v1;
  if (v1)
  {
    swift_release(v21);
    swift_bridgeObjectRelease(v88);
    if (qword_1013DD858 == -1)
    {
LABEL_4:
      swift_beginAccess(&static OS_os_log.boardStore, &v92, 0, 0);
      v25 = (void *)static OS_os_log.boardStore;
      v26 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      inited = swift_initStackObject(v26, v91);
      *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
      swift_getErrorValue(v2, v87, v84);
      v28 = v85;
      v29 = v86;
      v30 = v25;
      v31 = Error.localizedDescription.getter(v28, v29);
      v33 = v32;
      *(_QWORD *)(inited + 56) = &type metadata for String;
      v34 = sub_1004CFC2C();
      *(_QWORD *)(inited + 64) = v34;
      *(_QWORD *)(inited + 32) = v31;
      *(_QWORD *)(inited + 40) = v33;
      v35 = static os_log_type_t.error.getter(v34);
      sub_100A06EBC((uint64_t)v30, &_mh_execute_header, v35, "Failed to fetch an asset reference with error %@", 48, 2, inited);
      swift_setDeallocating(inited);
      v36 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(inited + 32, 1, v36);

      return swift_willThrow(v37);
    }
LABEL_23:
    swift_once(&qword_1013DD858, sub_100A05554);
    goto LABEL_4;
  }
  v39 = v24;
  swift_release(v21);
  v40 = UUID.crl_data()();
  v42 = v41;
  sub_1006B5E80(v40, v41);
  sub_1004BBBC8(v40, v42);
  v43 = *(void **)(*(_QWORD *)(v39 + 16) + 32);
  *v7 = v43;
  v44 = v81;
  v45 = v82;
  ((void (*)(_QWORD *, _QWORD, uint64_t))v82)(v7, v81, v3);
  v46 = v43;
  LOBYTE(v43) = _dispatchPreconditionTest(_:)(v7);
  v47 = v83;
  v83(v7, v3);
  if ((v43 & 1) == 0)
  {
    __break(1u);
    goto LABEL_25;
  }
  v79[1] = 0;
  v48 = type metadata accessor for SQLiteRowIterator();
  v49 = (_QWORD *)swift_initStackObject(v48, v90);
  v49[3] = 0;
  v2 = v49 + 3;
  v49[4] = 0;
  v79[0] = v49 + 4;
  v49[5] = 1;
  v49[2] = v39;
  v50 = *(void **)(*(_QWORD *)(v39 + 16) + 32);
  *v7 = v50;
  v80 = v39;
  v51 = swift_retain(v39);
  v45(v7, v44, v3, v51);
  v52 = v50;
  LOBYTE(v50) = _dispatchPreconditionTest(_:)(v7);
  v47(v7, v3);
  if ((v50 & 1) == 0)
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v53 = v44;
  v54 = v80;
  while (1)
  {
    v59 = v49[3];
    v60 = v49[4];
    v61 = v49[5];
    *v2 = 0;
    v49[4] = 0;
    v49[5] = 1;
    sub_1006B7DA4(v59, v60, v61);
    swift_beginAccess(v54 + 24, &v92, 0, 0);
    v62 = sqlite3_step(*(sqlite3_stmt **)(v54 + 24));
    if (v62 != 100)
      break;
    v63 = swift_retain_n(v54, 2);
    v64 = sub_100AF3BD8(v63, 0);
    if (v64)
    {
      v65 = v64;
      swift_retain(v64);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v66);
      v68 = *(_QWORD *)((v88 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v67 = *(_QWORD *)((v88 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v68 >= v67 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v67 > 1, v68 + 1, 1);
      v55 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v68, v65);
      specialized Array._endMutation()(v55);
      swift_release(v65);
      v45 = v82;
    }
    v56 = swift_release(v54);
    v54 = v49[2];
    v57 = *(void **)(*(_QWORD *)(v54 + 16) + 32);
    *v7 = v57;
    v45(v7, v53, v3, v56);
    v58 = v57;
    LOBYTE(v57) = _dispatchPreconditionTest(_:)(v7);
    v47 = v83;
    v83(v7, v3);
    if ((v57 & 1) == 0)
      goto LABEL_21;
  }
  if (v62 && v62 != 101)
  {
    v69 = v62;
    v70 = v49[3];
    v71 = v49[4];
    v72 = v49[5];
    v49[3] = v69;
    v73 = v79[0];
    *(_QWORD *)v79[0] = 0;
    *(_QWORD *)(v73 + 8) = 0;
    sub_1006B7DA4(v70, v71, v72);
  }
  v74 = swift_release(v49);
  v75 = v80;
  v76 = *(void **)(*(_QWORD *)(v80 + 16) + 32);
  *v7 = v76;
  v45(v7, v81, v3, v74);
  v77 = v76;
  LOBYTE(v76) = _dispatchPreconditionTest(_:)(v7);
  v47(v7, v3);
  if ((v76 & 1) == 0)
LABEL_25:
    __break(1u);
  swift_beginAccess(v75 + 24, v89, 1, 0);
  v78 = *(sqlite3_stmt **)(v75 + 24);
  if (v78)
  {
    sqlite3_finalize(v78);
    *(_QWORD *)(v75 + 24) = 0;
  }
  swift_release(v75);
  return v88;
}

double sub_100ABE7A8@<D0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  void (*v33)(char *, uint64_t, uint64_t, uint64_t, __n128);
  unsigned int (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double result;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;

  v64 = a3;
  v57 = type metadata accessor for CRLAssetReferrerIdentifier(0);
  __chkstk_darwin(v57);
  v62 = (uint64_t)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v58 = (uint64_t)&v55 - v7;
  v8 = type metadata accessor for CRLBoardIdentifier(0);
  v9 = *(_QWORD **)(v8 - 8);
  __chkstk_darwin(v8);
  v61 = (uint64_t)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v56 = (uint64_t)&v55 - v12;
  v13 = sub_1004B804C(&qword_1013E0270);
  __chkstk_darwin(v13);
  v59 = (uint64_t)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v55 - v16;
  __chkstk_darwin(v18);
  v20 = (char *)&v55 - v19;
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v55 - v23;
  v25 = *a1;
  v26 = 1;
  v27 = (void (*)(char *, uint64_t, uint64_t, uint64_t, __n128))v9[7];
  v27((char *)&v55 - v23, 1, 1, v8, v22);
  v60 = v25;
  v28 = v25 + OBJC_IVAR____TtC8Freeform28CRLAssetReferenceDatabaseRow_referrerIdentifier;
  v63 = a2;
  v29 = *a2;
  if (*(_QWORD *)(*a2 + 16))
  {
    v30 = v28;
    v31 = sub_100843F8C(v28);
    if ((v32 & 1) != 0)
    {
      sub_1004B8460(*(_QWORD *)(v29 + 56) + v9[9] * v31, (uint64_t)v20, type metadata accessor for CRLBoardIdentifier);
      v26 = 0;
    }
  }
  else
  {
    v30 = v28;
  }
  v33 = v27;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v27)(v20, v26, 1, v8);
  sub_1004CB800((uint64_t)v24, &qword_1013E0270);
  v34 = (unsigned int (*)(char *, uint64_t, uint64_t))v9[6];
  if (v34(v20, 1, v8) == 1)
  {
    sub_1004CB800((uint64_t)v20, &qword_1013E0270);
    v35 = v58;
    sub_1004B8460(v30, v58, type metadata accessor for CRLAssetReferrerIdentifier);
    if (swift_getEnumCaseMultiPayload(v35, v57) == 1)
    {
      v36 = sub_1004B804C((uint64_t *)&unk_1013E1780);
      sub_1004B84E0(v35 + *(int *)(v36 + 48), (uint64_t)v24, type metadata accessor for CRLBoardIdentifier);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v27)(v24, 0, 1, v8);
      v37 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 8))(v35, v37);
    }
    else
    {
      sub_1004B84E0(v35, (uint64_t)v24, type metadata accessor for CRLBoardIdentifier);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v27)(v24, 0, 1, v8);
    }
  }
  else
  {
    v38 = v56;
    sub_1004B84E0((uint64_t)v20, v56, type metadata accessor for CRLBoardIdentifier);
    v33 = v27;
    sub_1004B84E0(v38, (uint64_t)v24, type metadata accessor for CRLBoardIdentifier);
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v27)(v24, 0, 1, v8);
  }
  sub_1004CB7BC((uint64_t)v24, (uint64_t)v17, &qword_1013E0270);
  if (v34(v17, 1, v8) == 1)
  {
    sub_1004CB800((uint64_t)v24, &qword_1013E0270);
    sub_1004CB800((uint64_t)v17, &qword_1013E0270);
    v39 = type metadata accessor for CRLAssetAddress(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v64, 1, 1, v39);
  }
  else
  {
    v41 = (uint64_t)v17;
    v42 = v61;
    sub_1004B84E0(v41, v61, type metadata accessor for CRLBoardIdentifier);
    v43 = v30;
    v44 = v33;
    v45 = v62;
    sub_1004B8460(v30, v62, type metadata accessor for CRLAssetReferrerIdentifier);
    v46 = v59;
    sub_1004B8460(v42, v59, type metadata accessor for CRLBoardIdentifier);
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v44)(v46, 0, 1, v8);
    sub_10083EDE8(v46, v45);
    sub_1004B84A4(v42, type metadata accessor for CRLBoardIdentifier);
    sub_1004CB800((uint64_t)v24, &qword_1013E0270);
    v47 = v60;
    v48 = v60 + OBJC_IVAR____TtC8Freeform28CRLAssetReferenceDatabaseRow_assetUUID;
    v49 = type metadata accessor for UUID(0);
    v50 = v64;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(v64, v48, v49);
    v52 = *(_QWORD *)(v47 + OBJC_IVAR____TtC8Freeform28CRLAssetReferenceDatabaseRow_referrerAssetName);
    v51 = *(_QWORD *)(v47 + OBJC_IVAR____TtC8Freeform28CRLAssetReferenceDatabaseRow_referrerAssetName + 8);
    v53 = type metadata accessor for CRLAssetAddress(0);
    sub_1004B8460(v43, v50 + *(int *)(v53 + 24), type metadata accessor for CRLAssetReferrerIdentifier);
    v54 = (_QWORD *)(v50 + *(int *)(v53 + 20));
    *v54 = v52;
    v54[1] = v51;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v50, 0, 1, v53);
    *(_QWORD *)&result = swift_bridgeObjectRetain(v51).n128_u64[0];
  }
  return result;
}

double sub_100ABECAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  char *v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD aBlock[5];
  uint64_t v38;

  v30 = a2;
  v31 = a3;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v35 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v33 = *(_QWORD *)(v8 - 8);
  v34 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  v14 = __chkstk_darwin(v11);
  v15 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = *(_QWORD *)&v3[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_readQueue];
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v12 + 16))(v15, a1, v11, v14);
  v16 = *(unsigned __int8 *)(v12 + 80);
  v17 = (v16 + 24) & ~v16;
  v18 = (v13 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = swift_allocObject(&unk_1012939B0, v18 + 16, v16 | 7);
  *(_QWORD *)(v19 + 16) = v3;
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v19 + v17, v15, v11);
  v20 = (_QWORD *)(v19 + v18);
  v21 = v31;
  *v20 = v30;
  v20[1] = v21;
  aBlock[4] = sub_100B01614;
  v38 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = *(_QWORD *)"";
  aBlock[2] = sub_1005D2FC0;
  aBlock[3] = &unk_1012939C8;
  v22 = _Block_copy(aBlock);
  v23 = v3;
  v24 = swift_retain(v21);
  static DispatchQoS.unspecified.getter(v24);
  v36 = _swiftEmptyArrayStorage;
  v25 = sub_1004B7878((unint64_t *)&qword_1013E1D20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v26 = sub_1004B804C((uint64_t *)&unk_1013DFBF0);
  v27 = sub_1004CBA30((unint64_t *)&qword_1013E1D30, (uint64_t *)&unk_1013DFBF0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v36, v26, v27, v5, v25);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v7, v22);
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v34);
  *(_QWORD *)&result = swift_release(v38).n128_u64[0];
  return result;
}

void sub_100ABEF34(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *, _QWORD, __n128))
{
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  id v11;
  uint64_t v12;
  _QWORD *v13;
  __n128 v14;
  uint64_t v15[2];

  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (uint64_t *)((char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(void **)(a1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v9 = v10;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5, v7);
  v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v9, v5);
  if ((v10 & 1) != 0)
  {
    v12 = sub_100ABE12C();
    v15[0] = (uint64_t)_swiftEmptyDictionarySingleton;
    v13 = sub_100A648B4(v12, v15);
    swift_bridgeObjectRelease(v12);
    v14 = swift_bridgeObjectRelease(v15[0]);
    a3(v13, 0, v14);
    swift_bridgeObjectRelease(v13);
  }
  else
  {
    __break(1u);
  }
}

double sub_100ABF088(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100ABF0AC(a1, a2, a3, &qword_101405678, (uint64_t)&unk_101293988, (uint64_t)sub_100B01574, (void (*)(uint64_t, uint64_t, uint64_t))sub_100ABECAC);
}

double sub_100ABF0AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double result;
  uint64_t v19;

  v12 = sub_1004B804C(a4);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v12);
  v15 = *(unsigned __int8 *)(v13 + 80);
  v16 = (v15 + 16) & ~v15;
  v17 = swift_allocObject(a5, v16 + v14, v15 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v17 + v16, (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
  a7(a3, a6, v17);
  *(_QWORD *)&result = swift_release(v17).n128_u64[0];
  return result;
}

uint64_t sub_100ABF19C(uint64_t a1, char a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v8 = a1;
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    v7 = sub_1004B804C(a4);
    return CheckedContinuation.resume(throwing:)(&v8, v7);
  }
  else
  {
    swift_bridgeObjectRetain(a1);
    v5 = sub_1004B804C(a4);
    return CheckedContinuation.resume(returning:)(&v8, v5);
  }
}

uint64_t sub_100ABF204(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  id v11;
  void (*v12)(_QWORD *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  double v20;
  void *v21;
  void (*v22)(_QWORD *, uint64_t, uint64_t);
  id v23;
  sqlite3_stmt **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  id v31;
  int v32;
  void *v33;
  id v34;
  sqlite3_stmt **v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  Swift::String v40;
  void *object;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  void *v49;
  id v50;
  sqlite3_stmt **v51;
  sqlite3_stmt **v53;
  unsigned int v54;
  uint64_t v55;
  void (*v56)(_QWORD *, uint64_t);
  uint64_t v57;
  void (*v58)(_QWORD *);
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63[32];

  v3 = v1;
  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (sqlite3_stmt ***)((char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v8 = v9;
  v10 = enum case for DispatchPredicate.onQueue(_:);
  v58 = *(void (**)(_QWORD *))(v6 + 104);
  v58(v8);
  v11 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  v12 = *(void (**)(_QWORD *, uint64_t))(v6 + 8);
  v12(v8, v5);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  v13 = sub_100AB58A0();
  v14 = v13;
  if (!v2)
  {
    v57 = a1;
    if (v13)
    {
      v56 = v12;
      v61 = 0;
      v62 = 0xE000000000000000;
      _StringGuts.grow(_:)(33);
      swift_bridgeObjectRelease(v62);
      v15 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
      v16 = type metadata accessor for SQLiteStatement();
      swift_initStackObject(v16, v63);
      swift_retain(v15);
      v18 = sub_1006B77CC(v17, 0xD000000000000039, 0x8000000100FF00C0);
      v19 = swift_release(v15);
      v20 = static Date.timeIntervalSinceReferenceDate.getter(v19);
      v21 = *(void **)(*(_QWORD *)(v18 + 16) + 32);
      *v8 = v21;
      v54 = v10;
      v22 = (void (*)(_QWORD *, uint64_t, uint64_t))v58;
      ((void (*)(_QWORD *, uint64_t, uint64_t))v58)(v8, v10, v5);
      v23 = v21;
      LOBYTE(v21) = _dispatchPreconditionTest(_:)(v8);
      v56(v8, v5);
      if ((v21 & 1) != 0)
      {
        v24 = (sqlite3_stmt **)(v18 + 24);
        swift_beginAccess(v18 + 24, &v61, 1, 0);
        sqlite3_bind_double(*(sqlite3_stmt **)(v18 + 24), 1, v20);
        v25 = UUID.crl_data()();
        v26 = v18;
        v28 = v27;
        sub_1006B5E80(v25, v27);
        sub_1004BBBC8(v25, v28);
        v55 = v26;
        v29 = *(void **)(*(_QWORD *)(v26 + 16) + 32);
        *v8 = v29;
        v30 = v54;
        v22(v8, v54, v5);
        v31 = v29;
        LOBYTE(v29) = _dispatchPreconditionTest(_:)(v8);
        v56(v8, v5);
        if ((v29 & 1) != 0)
        {
          v53 = v24;
          v32 = sqlite3_step(*v24);
          if (v32 != 101)
          {
            v37 = v32;
            v59 = 0;
            v60 = 0xE000000000000000;
            _StringGuts.grow(_:)(40);
            swift_bridgeObjectRelease(v60);
            v59 = 0xD000000000000026;
            v60 = 0x8000000100FF0100;
            v38 = type metadata accessor for UUID(0);
            v39 = sub_1004B7878(&qword_1013E49E0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            v40._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v38, v39);
            object = v40._object;
            String.append(_:)(v40);
            swift_bridgeObjectRelease(object);
            v42 = v30;
            v43 = v59;
            v44 = v60;
            v45 = sub_1006B79EC();
            swift_allocError(&type metadata for SQLiteError, v45, 0, 0);
            *(_DWORD *)v46 = v37;
            *(_QWORD *)(v46 + 8) = v43;
            *(_QWORD *)(v46 + 16) = v44;
            swift_willThrow(v47);
            v48 = v55;
            v49 = *(void **)(*(_QWORD *)(v55 + 16) + 32);
            *v8 = v49;
            v22(v8, v42, v5);
            v50 = v49;
            LOBYTE(v49) = _dispatchPreconditionTest(_:)(v8);
            v56(v8, v5);
            if ((v49 & 1) != 0)
            {
              v51 = v53;
              if (*v53)
              {
                sqlite3_finalize(*v53);
                *v51 = 0;
              }
              v36 = v48;
              goto LABEL_16;
            }
LABEL_23:
            __break(1u);
          }
          v33 = *(void **)(*(_QWORD *)(v55 + 16) + 32);
          *v8 = v33;
          v22(v8, v30, v5);
          v34 = v33;
          swift_retain(v14);
          LOBYTE(v33) = _dispatchPreconditionTest(_:)(v8);
          v56(v8, v5);
          if ((v33 & 1) != 0)
          {
            v35 = v53;
            if (*v53)
            {
              sqlite3_finalize(*v53);
              *v35 = 0;
            }
            v36 = v55;
LABEL_16:
            swift_release(v36);
            swift_release(v14);
            return v14;
          }
LABEL_22:
          __break(1u);
          goto LABEL_23;
        }
LABEL_21:
        __break(1u);
        goto LABEL_22;
      }
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
  }
  return v14;
}

uint64_t sub_100ABF660()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  id v9;
  void (*v10)(_QWORD *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  int v24;
  void *v25;
  id v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  Swift::String v30;
  void *object;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  __n128 v36;
  void *v37;
  id v38;
  sqlite3_stmt **v39;
  sqlite3_stmt **v41;
  uint64_t v42;
  void (*v43)(_QWORD *, uint64_t);
  void (*v44)(_QWORD *, uint64_t, uint64_t);
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49[32];

  v2 = v0;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (sqlite3_stmt ***)((char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v6 = v7;
  v8 = enum case for DispatchPredicate.onQueue(_:);
  v44 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v4 + 104);
  v44(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  v9 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  v10 = *(void (**)(_QWORD *, uint64_t))(v4 + 8);
  v10(v6, v3);
  if ((v7 & 1) == 0)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v11 = sub_100AB58A0();
  v12 = v11;
  if (v1 || !v11)
    return v12;
  v43 = v10;
  v47 = 0;
  v48 = 0xE000000000000000;
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease(v48);
  v13 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v14 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v14, v49);
  swift_retain(v13);
  v16 = sub_1006B77CC(v15, 0xD000000000000039, 0x8000000100FEFEC0);
  swift_release(v13);
  v17 = UUID.crl_data()();
  v42 = v16;
  v19 = v18;
  sub_1006B5E80(v17, v18);
  v20 = v19;
  v21 = v42;
  sub_1004BBBC8(v17, v20);
  v22 = *(void **)(*(_QWORD *)(v21 + 16) + 32);
  *v6 = v22;
  v44(v6, v8, v3);
  v23 = v22;
  LOBYTE(v22) = _dispatchPreconditionTest(_:)(v6);
  v43(v6, v3);
  if ((v22 & 1) == 0)
    goto LABEL_16;
  v41 = (sqlite3_stmt **)(v21 + 24);
  swift_beginAccess(v21 + 24, &v47, 1, 0);
  v24 = sqlite3_step(*(sqlite3_stmt **)(v21 + 24));
  if (v24 != 101)
    goto LABEL_9;
  v25 = *(void **)(*(_QWORD *)(v21 + 16) + 32);
  *v6 = v25;
  v44(v6, v8, v3);
  v26 = v25;
  swift_retain(v12);
  LOBYTE(v25) = _dispatchPreconditionTest(_:)(v6);
  v24 = ((uint64_t (*)(_QWORD *, uint64_t))v43)(v6, v3);
  if ((v25 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    v27 = v24;
    v45 = 0;
    v46 = 0xE000000000000000;
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease(v46);
    v45 = 0xD000000000000026;
    v46 = 0x8000000100FEFF00;
    v28 = type metadata accessor for UUID(0);
    v29 = sub_1004B7878(&qword_1013E49E0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v30._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v28, v29);
    object = v30._object;
    String.append(_:)(v30);
    swift_bridgeObjectRelease(object);
    v32 = v45;
    v33 = v46;
    v34 = sub_1006B79EC();
    swift_allocError(&type metadata for SQLiteError, v34, 0, 0);
    *(_DWORD *)v35 = v27;
    *(_QWORD *)(v35 + 8) = v32;
    *(_QWORD *)(v35 + 16) = v33;
    v21 = v42;
    swift_willThrow(v36);
    v37 = *(void **)(*(_QWORD *)(v21 + 16) + 32);
    *v6 = v37;
    v44(v6, v8, v3);
    v38 = v37;
    LOBYTE(v37) = _dispatchPreconditionTest(_:)(v6);
    v43(v6, v3);
    if ((v37 & 1) != 0)
      goto LABEL_10;
LABEL_17:
    __break(1u);
  }
LABEL_10:
  v39 = v41;
  if (*v41)
  {
    sqlite3_finalize(*v41);
    *v39 = 0;
  }
  swift_release(v21);
  swift_release(v12);
  return v12;
}

void sub_100ABFA30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  unsigned int v8;
  id v9;
  void (*v10)(_QWORD *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  id v20;
  sqlite3_stmt **v21;
  int v22;
  void *v23;
  id v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String v28;
  void *object;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  __n128 v34;
  void *v35;
  id v36;
  uint64_t v37;
  void (*v38)(_QWORD *, uint64_t);
  unsigned int v39;
  void (*v40)(_QWORD *, uint64_t, uint64_t);
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _BYTE v45[32];

  v2 = v0;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (uint64_t *)((char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v6 = v7;
  v8 = enum case for DispatchPredicate.onQueue(_:);
  v40 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v4 + 104);
  v40(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  v9 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  v10 = *(void (**)(_QWORD *, uint64_t))(v4 + 8);
  v10(v6, v3);
  if ((v7 & 1) == 0)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v39 = v8;
  v43 = 0;
  v44 = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease(v44);
  v11 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v12 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v12, v45);
  swift_retain(v11);
  v14 = sub_1006B77CC(v13, 0xD000000000000027, 0x8000000100FF0EB0);
  swift_release(v11);
  if (v1)
    return;
  v15 = UUID.crl_data()();
  v38 = v10;
  v17 = v16;
  sub_1006B5E80(v15, v16);
  sub_1004BBBC8(v15, v17);
  v18 = *(void **)(*(_QWORD *)(v14 + 16) + 32);
  *v6 = v18;
  v19 = v39;
  v40(v6, v39, v3);
  v20 = v18;
  LOBYTE(v18) = _dispatchPreconditionTest(_:)(v6);
  v38(v6, v3);
  if ((v18 & 1) == 0)
    goto LABEL_13;
  v21 = (sqlite3_stmt **)(v14 + 24);
  swift_beginAccess(v14 + 24, &v43, 1, 0);
  v22 = sqlite3_step(*(sqlite3_stmt **)(v14 + 24));
  if (v22 != 101)
    goto LABEL_7;
  v23 = *(void **)(*(_QWORD *)(v14 + 16) + 32);
  *v6 = v23;
  v40(v6, v19, v3);
  v24 = v23;
  LOBYTE(v23) = _dispatchPreconditionTest(_:)(v6);
  v22 = ((uint64_t (*)(_QWORD *, uint64_t))v38)(v6, v3);
  if ((v23 & 1) == 0)
  {
    __break(1u);
LABEL_7:
    v25 = v22;
    v41 = 0;
    v42 = 0xE000000000000000;
    _StringGuts.grow(_:)(26);
    swift_bridgeObjectRelease(v42);
    v41 = 0xD000000000000018;
    v42 = 0x8000000100FF0EE0;
    v26 = type metadata accessor for UUID(0);
    v27 = sub_1004B7878(&qword_1013E49E0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v28._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v26, v27);
    object = v28._object;
    String.append(_:)(v28);
    swift_bridgeObjectRelease(object);
    v30 = v41;
    v31 = v42;
    v32 = sub_1006B79EC();
    swift_allocError(&type metadata for SQLiteError, v32, 0, 0);
    *(_DWORD *)v33 = v25;
    *(_QWORD *)(v33 + 8) = v30;
    *(_QWORD *)(v33 + 16) = v31;
    swift_willThrow(v34);
    v35 = *(void **)(*(_QWORD *)(v14 + 16) + 32);
    *v6 = v35;
    v40(v6, v19, v3);
    v36 = v35;
    LOBYTE(v35) = _dispatchPreconditionTest(_:)(v6);
    v38(v6, v3);
    if ((v35 & 1) != 0)
      goto LABEL_8;
LABEL_14:
    __break(1u);
  }
LABEL_8:
  if (*v21)
  {
    sqlite3_finalize(*v21);
    *v21 = 0;
  }
  swift_release(v14);
}

uint64_t sub_100ABFDCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t (*v24)(char *, uint64_t);
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t inited;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  uint64_t (*v46)(char *, uint64_t);
  uint64_t result;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  uint64_t (*v55)(char *, uint64_t, uint64_t);
  uint64_t v56;
  double v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __n128 v62;
  void (*v63)(char *, uint64_t, __n128);
  __n128 v64;
  __n128 v65;
  __n128 v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t (*v72)(char *, uint64_t);
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  unint64_t v79;
  _QWORD v80[3];
  char v81[8];
  char v82[72];
  char v83[24];
  void *v84;

  v75 = a1;
  v73 = a2;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v68 - v10;
  __chkstk_darwin(v9);
  v13 = (char *)&v68 - v12;
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v68 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v78 = (char *)&v68 - v20;
  v21 = Date.init()(v19);
  v84 = &_swiftEmptySetSingleton;
  v22 = static Date.distantFuture.getter(v21);
  v23 = Date.timeIntervalSinceReferenceDate.getter(v22);
  v24 = *(uint64_t (**)(char *, uint64_t))(v15 + 8);
  v69 = v18;
  v25 = v14;
  v72 = v24;
  v24(v18, v14);
  v26 = (char *)v79;
  sub_100ABD860();
  if (v26)
  {
    v13 = v26;
    v28 = v73;
    v29 = v14;
LABEL_3:
    if (qword_1013DD858 != -1)
LABEL_33:
      swift_once(&qword_1013DD858, sub_100A05554);
    swift_beginAccess(&static OS_os_log.boardStore, v83, 0, 0);
    v30 = (void *)static OS_os_log.boardStore;
    v31 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    inited = swift_initStackObject(v31, v82);
    *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
    swift_getErrorValue(v13, v81, v80);
    v33 = v80[1];
    v34 = v80[2];
    v35 = v30;
    v36 = Error.localizedDescription.getter(v33, v34);
    v38 = v37;
    *(_QWORD *)(inited + 56) = &type metadata for String;
    v39 = sub_1004CFC2C();
    *(_QWORD *)(inited + 64) = v39;
    *(_QWORD *)(inited + 32) = v36;
    *(_QWORD *)(inited + 40) = v38;
    v40 = static os_log_type_t.error.getter(v39);
    sub_100A06EBC((uint64_t)v35, &_mh_execute_header, v40, "Failed to purge expired deleted asset files, error %@", 53, 2, inited);
    swift_setDeallocating(inited);
    v41 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(inited + 32, 1, v41);

    v42 = v69;
    v44 = static Date.distantFuture.getter(v43);
    v45 = Date.timeIntervalSinceReferenceDate.getter(v44);
    swift_errorRelease(v13);
    v46 = v72;
    v72(v42, v29);
    result = v46(v78, v29);
    if (v23 == v45)
      v23 = a3;
  }
  else
  {
    v48 = v27;
    v74 = v11;
    v71 = v8;
    v77 = v5;
    v76 = 0;
    if ((unint64_t)v27 >> 62)
    {
      if (v27 < 0)
        v67 = v27;
      else
        v67 = v27 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v27);
      v49 = _CocoaArrayWrapper.endIndex.getter(v67);
      swift_bridgeObjectRelease(v48);
    }
    else
    {
      v49 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v50 = v77;
    v68 = v25;
    if (v49)
    {
      v51 = v49;
      v79 = v48 & 0xC000000000000001;
      v29 = 4;
      v70 = v49;
      do
      {
        v52 = v29 - 4;
        if (v79)
        {
          v53 = specialized _ArrayBuffer._getElementSlowPath(_:)(v29 - 4, v48);
          v28 = v29 - 3;
          if (__OFADD__(v52, 1))
            goto LABEL_32;
        }
        else
        {
          v53 = *(_QWORD *)(v48 + 8 * v29);
          swift_retain(v53);
          v28 = v29 - 3;
          if (__OFADD__(v52, 1))
          {
LABEL_32:
            __break(1u);
            goto LABEL_33;
          }
        }
        v54 = *(double *)(v53 + OBJC_IVAR____TtC8Freeform19CRLAssetDatabaseRow_tombstoneDate);
        if (v54 <= 0.0)
        {
          swift_release(v53);
        }
        else
        {
          v55 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v50 + 16);
          v56 = v55(v13, v53 + OBJC_IVAR____TtC8Freeform19CRLAssetDatabaseRow_assetUUID, v4);
          v57 = Date.timeIntervalSinceReferenceDate.getter(v56) - v54;
          if (v57 <= a3)
          {
            v64 = swift_release(v53);
            if (v57 >= 0.0)
            {
              v64.n128_f64[0] = a3 - v57;
              if (v23 >= a3 - v57)
                v23 = a3 - v57;
            }
            else if (v23 >= a3)
            {
              v23 = a3;
            }
            v50 = v77;
            (*(void (**)(char *, uint64_t, __n128))(v77 + 8))(v13, v4, v64);
          }
          else
          {
            v58 = v76;
            sub_100ABFA30();
            v76 = v58;
            if (v58)
            {
              v66 = swift_release(v53);
              (*(void (**)(char *, uint64_t, __n128))(v77 + 8))(v13, v4, v66);
              swift_bridgeObjectRelease(v48);
              v13 = v76;
              v28 = v73;
              v29 = v68;
              goto LABEL_3;
            }
            v59 = v48;
            v60 = (uint64_t)v71;
            v55(v71, (uint64_t)v13, v4);
            v61 = v60;
            v48 = v59;
            v51 = v70;
            sub_100AD569C((uint64_t)v74, v61);
            v62 = swift_release(v53);
            v50 = v77;
            v63 = *(void (**)(char *, uint64_t, __n128))(v77 + 8);
            v63(v74, v4, v62);
            ((void (*)(char *, uint64_t))v63)(v13, v4);
          }
        }
        ++v29;
      }
      while (v28 != v51);
    }
    v65 = swift_bridgeObjectRelease(v48);
    result = ((uint64_t (*)(char *, uint64_t, __n128))v72)(v78, v68, v65);
    v28 = v73;
  }
  *(_QWORD *)v28 = v84;
  *(double *)(v28 + 8) = v23;
  return result;
}

uint64_t sub_100AC035C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = sub_100A83A44();
  if (!v1)
    *a1 = result & 1;
  return result;
}

void sub_100AC0390(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  sub_100A83754();
  if (!v1)
    *a1 = v3;
}

void sub_100AC03BC(char a1@<W1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  sub_100AC03EC(a1 & 1);
  if (!v2)
    *a2 = v4;
}

void sub_100AC03EC(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  void (*v10)(_QWORD *, uint64_t, uint64_t);
  id v11;
  char v12;
  void (*v13)(_QWORD *, uint64_t);
  uint64_t v14;
  double *v15;
  id v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  char v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  id v30;
  char v31;
  uint64_t v32;
  char *v33;
  id v34;
  uint64_t v35;
  _QWORD *v36;
  __n128 v37;
  void *v38;
  id v39;
  char v40;
  uint64_t v41;
  char *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  double *v46;
  double *v47;
  double *v48;
  double *v49;
  double *v50;
  double *v51;
  double *v52;
  double *v53;
  uint64_t v54;
  _QWORD *v55;
  id v56;
  double *v57;
  unsigned int v58;
  void (*v59)(_QWORD *, uint64_t);
  void (*v60)(_QWORD *, uint64_t, uint64_t);
  uint64_t v61;
  double *v62;

  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (uint64_t *)((char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)&v1[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue];
  *v7 = v8;
  v9 = enum case for DispatchPredicate.onQueue(_:);
  v10 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v4 + 104);
  ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v10)(v7, enum case for DispatchPredicate.onQueue(_:), v3, v5);
  v11 = v8;
  v12 = _dispatchPreconditionTest(_:)(v7);
  v13 = *(void (**)(_QWORD *, uint64_t))(v4 + 8);
  v14 = ((uint64_t (*)(_QWORD *, uint64_t))v13)(v7, v3);
  if ((v12 & 1) != 0)
  {
    *v7 = v11;
    v58 = v9;
    v10(v7, v9, v3);
    v16 = v11;
    v17 = _dispatchPreconditionTest(_:)(v7);
    v14 = ((uint64_t (*)(_QWORD *, uint64_t))v13)(v7, v3);
    if ((v17 & 1) != 0)
    {
      v59 = v13;
      v60 = v10;
      v18 = a1 & 1;
      v19 = v61;
      v20 = sub_100AC24E0(a1 & 1);
      v9 = v19;
      if (v19)
        return;
      v21 = v20;
      v22 = v1;
      sub_100AF41C0(v21, v22);
      a1 = v23;
      swift_bridgeObjectRelease();

      *v7 = v16;
      v24 = v58;
      v60(v7, v58, v3);
      v25 = v16;
      v26 = _dispatchPreconditionTest(_:)(v7);
      v59(v7, v3);
      if ((v26 & 1) != 0)
      {
        v27 = sub_100AC2B8C(v18);
        v28 = v22;
        sub_100AF436C(v27, (uint64_t)v28);
        v61 = v29;
        swift_bridgeObjectRelease();

        *v7 = v25;
        v60(v7, v24, v3);
        v30 = v25;
        v31 = _dispatchPreconditionTest(_:)(v7);
        v59(v7, v3);
        if ((v31 & 1) != 0)
        {
          v32 = (uint64_t)sub_100AC3238(v18);
          v33 = v28;
          v57 = sub_100AF4B40(v32, v33);
          swift_bridgeObjectRelease();

          *v7 = v30;
          v60(v7, v24, v3);
          v34 = v30;
          LOBYTE(v32) = _dispatchPreconditionTest(_:)(v7);
          v59(v7, v3);
          if ((v32 & 1) != 0)
          {
            v35 = sub_100AC1CF4(v18);
            v56 = v34;
            v62 = (double *)_swiftEmptyDictionarySingleton;
            v1 = v33;
            v36 = sub_100AF7344(v35, (uint64_t)v1, (uint64_t)&v62, (void (*)(uint64_t *__return_ptr, uint64_t *, uint64_t, uint64_t))sub_100AC481C);
            swift_bridgeObjectRelease();

            v55 = v36;
            v37 = swift_bridgeObjectRelease();
            v38 = v56;
            *v7 = v56;
            ((void (*)(_QWORD *, uint64_t, uint64_t, __n128))v60)(v7, v24, v3, v37);
            v39 = v38;
            v40 = _dispatchPreconditionTest(_:)(v7);
            v59(v7, v3);
            if ((v40 & 1) != 0)
            {
              v14 = sub_100AAC4DC(v18);
              v15 = (double *)_swiftEmptyDictionarySingleton;
              goto LABEL_13;
            }
LABEL_19:
            __break(1u);
            return;
          }
LABEL_18:
          __break(1u);
          goto LABEL_19;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      goto LABEL_18;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_13:
  v41 = v14;
  v62 = v15;
  v42 = v1;
  v43 = sub_100AF7344(v41, (uint64_t)v42, (uint64_t)&v62, (void (*)(uint64_t *__return_ptr, uint64_t *, uint64_t, uint64_t))sub_100AC42C4);
  v44 = (uint64_t)v55;
  if (v9)
  {
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v45 = (uint64_t)v43;
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    v46 = sub_100521790(a1);
    swift_bridgeObjectRelease();
    v47 = sub_10052179C(v61);
    swift_bridgeObjectRelease();
    v62 = v46;
    sub_100620DEC((uint64_t)v47);
    v48 = v62;
    v49 = sub_1005217A8((uint64_t)v57);
    swift_bridgeObjectRelease();
    v62 = v48;
    sub_100620DEC((uint64_t)v49);
    v50 = v62;
    v51 = sub_1005217B4(v44);
    swift_bridgeObjectRelease();
    v62 = v50;
    sub_100620DEC((uint64_t)v51);
    v52 = v62;
    v53 = sub_1005217C0(v45);
    swift_bridgeObjectRelease();
    v62 = v52;
    sub_100620DEC((uint64_t)v53);
  }
}

void sub_100AC095C(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;

  v5 = sub_100A80ED8();
  if (!v2)
  {
    v6 = v5;
    if (v5)
    {
      v7 = a1;
      v8 = sub_100AFE65C(v7, v6);

      swift_release(v6);
    }
    else
    {
      v8 = 0;
    }
    *a2 = v8;
  }
}

uint64_t sub_100AC09D8(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t inited;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t v32;
  id v33;
  char *v34;
  id v35;
  void *v36;
  os_unfair_lock_s *v37;
  id v38;
  uint64_t v39;
  char v40;
  void *v41;
  id v42;
  unsigned int v43;
  unint64_t v44;
  unint64_t v45;
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char v54[16];
  char *v55;
  uint64_t v56;
  _QWORD v57[3];
  char v58[8];
  char v59[72];
  uint64_t v60[5];

  v2 = v1;
  v55 = v1;
  v56 = a1;
  v3 = sub_1004B804C(&qword_101405498);
  OS_dispatch_queue.sync<A>(execute:)(sub_100AFFFD4, v54, v3);
  v18 = v60[0];
  if ((unint64_t)v60[0] >> 62)
  {
    if (v60[0] < 0)
      v47 = v60[0];
    else
      v47 = v60[0] & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v60[0]);
    v19 = _CocoaArrayWrapper.endIndex.getter(v47);
    swift_bridgeObjectRelease();
    if (v19)
      goto LABEL_6;
LABEL_51:
    swift_bridgeObjectRelease();
    v22 = 0;
    v16 = 0;
    return v16 | v22;
  }
  v19 = *(_QWORD *)((v60[0] & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v19)
    goto LABEL_51;
LABEL_6:
  v20 = 0;
  LOBYTE(v21) = 0;
  LOBYTE(v22) = 0;
  v50 = v2;
  v51 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManagerLock;
  v23 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManager;
  v24 = v18 & 0xC000000000000001;
  v48 = v18 & 0xFFFFFFFFFFFFFF8;
  v53 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManager;
  v49 = v18 & 0xC000000000000001;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        if (v24)
        {
          v25 = specialized _ArrayBuffer._getElementSlowPath(_:)(v20, v18);
          v26 = v20 + 1;
          if (__OFADD__(v20, 1))
            goto LABEL_45;
        }
        else
        {
          if (v20 >= *(_QWORD *)(v48 + 16))
            goto LABEL_46;
          v25 = *(_QWORD *)(v18 + 8 * v20 + 32);
          swift_retain(v25);
          v26 = v20 + 1;
          if (__OFADD__(v20, 1))
          {
LABEL_45:
            __break(1u);
LABEL_46:
            __break(1u);
            swift_once(&qword_1013DD858, sub_100A05554);
            swift_beginAccess(&static OS_os_log.boardStore, v60, 0, 0);
            v4 = (void *)static OS_os_log.boardStore;
            v5 = sub_1004B804C((uint64_t *)&unk_1013E0180);
            inited = swift_initStackObject(v5, v59);
            *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
            swift_getErrorValue(v18, v58, v57);
            v7 = v57[1];
            v8 = v57[2];
            v9 = v4;
            v10 = Error.publicDescription.getter(v7, v8);
            v12 = v11;
            *(_QWORD *)(inited + 56) = &type metadata for String;
            *(_QWORD *)(inited + 64) = sub_1004CFC2C();
            *(_QWORD *)(inited + 32) = v10;
            *(_QWORD *)(inited + 40) = v12;
            v14 = static os_log_type_t.default.getter(v13);
            sub_100A06EBC((uint64_t)v9, &_mh_execute_header, v14, "Caught error in checkIfBoardHasUnmaterializedAssetsAndUnsupportedBoardItems() %{public}@", 88, 2, inited);
            swift_errorRelease(v18);
            swift_setDeallocating(inited);
            v15 = sub_1004B804C(&qword_1013E0190);
            v22 = 1;
            swift_arrayDestroy(inited + 32, 1, v15);

            goto LABEL_2;
          }
        }
        if ((v22 & 1) != 0)
          break;
        v52 = (char)v21;
        v27 = v18;
        v28 = v19;
        v29 = *(_QWORD *)&v50[v51];
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v29 + 16));
        v30 = *(void **)&v50[v23];
        if (v30)
        {
          v31 = *(id *)&v50[v23];
        }
        else
        {
          v32 = v23;
          v33 = objc_allocWithZone((Class)type metadata accessor for CRLAssetFileManager(0));
          v34 = v50;
          v35 = sub_100C7EE84((uint64_t)v34);

          v36 = *(void **)&v50[v32];
          *(_QWORD *)&v50[v32] = v35;
          v31 = v35;

          v30 = 0;
        }
        v19 = v28;
        v37 = *(os_unfair_lock_s **)(v29 + 16);
        v38 = v30;
        os_unfair_lock_unlock(v37);
        LOBYTE(v37) = sub_100C76920(v25);

        v18 = v27;
        if ((v37 & 1) != 0)
        {
          v24 = v49;
          if ((v52 & 1) == 0)
          {
            v22 = 1;
LABEL_30:
            v23 = v53;
            goto LABEL_31;
          }
          swift_release(v25);
          v23 = v53;
          if (v26 == v19)
            goto LABEL_42;
          LOBYTE(v21) = 1;
          LOBYTE(v22) = 1;
          ++v20;
        }
        else
        {
          v24 = v49;
          if ((v52 & 1) == 0)
          {
            v22 = 0;
            goto LABEL_30;
          }
          swift_release(v25);
          v23 = v53;
          if (v26 == v19)
          {
            swift_bridgeObjectRelease();
            v22 = 0;
            goto LABEL_2;
          }
          LOBYTE(v22) = 0;
          LOBYTE(v21) = 1;
          ++v20;
        }
      }
      if ((v21 & 1) != 0)
      {
        swift_release(v25);
LABEL_42:
        swift_bridgeObjectRelease();
        v22 = 1;
LABEL_2:
        v16 = 256;
        return v16 | v22;
      }
      v22 = 1;
LABEL_31:
      v21 = *(_QWORD **)(v25 + OBJC_IVAR____TtC8Freeform33CRLBoardItemSyncLocalChangeRecord_itemData);
      if (v21)
        break;
      swift_release(v25);
      if (v26 == v19)
        goto LABEL_39;
LABEL_8:
      ++v20;
    }
    v39 = (*(uint64_t (**)(void))(*v21 + 408))();
    if ((v40 & 1) == 0 || v39 != 3)
      break;
    v41 = (void *)objc_opt_self(NSUserDefaults);
    v42 = objc_msgSend(v41, "standardUserDefaults", swift_retain(v21).n128_f64[0]);
    v43 = objc_msgSend(v42, "BOOLForKey:", CFSTR("CRLImageItemsAreUnsupportedWhenDownloadingSendACopyUserDefault"));

    if (!v43)
      goto LABEL_38;
    swift_release(v25);
    swift_release(v21);
    if (v26 == v19)
    {
      swift_bridgeObjectRelease();
      goto LABEL_2;
    }
    LOBYTE(v21) = 1;
    v23 = v53;
    ++v20;
  }
  swift_retain(v21);
LABEL_38:
  v44 = v21[3];
  swift_retain(v21);
  v45 = sub_1001E9730();
  swift_release_n(v21, 2, v46);
  swift_release(v25);
  LODWORD(v21) = v45 < v44;
  v23 = v53;
  if (v26 != v19)
    goto LABEL_8;
LABEL_39:
  swift_bridgeObjectRelease();
  if ((_DWORD)v21)
    goto LABEL_2;
  v16 = 0;
  return v16 | v22;
}

void sub_100AC0ECC(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  sub_100AC1C74(a1, a2, (uint64_t (*)(uint64_t))sub_100AC0EF0, (uint64_t (*)(uint64_t, id))sub_100AF63B0, a3);
}

uint64_t sub_100AC0EF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  void (*v10)(_QWORD *, _QWORD, uint64_t, __n128);
  id v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  sqlite3_int64 v47;
  void *v48;
  void (*v49)(_QWORD *, _QWORD, uint64_t, __n128);
  id v50;
  void (*v51)(_QWORD *, uint64_t);
  uint64_t v52;
  _QWORD *inited;
  void *v54;
  __n128 v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  __n128 v59;
  void *v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  __n128 v77;
  uint64_t v78;
  void *v79;
  id v80;
  sqlite3_stmt *v81;
  unint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  void (*v89)(_QWORD *, _QWORD, uint64_t, __n128);
  void (*v90)(_QWORD *, uint64_t);
  char v91[8];
  uint64_t v92;
  uint64_t v93;
  char v94[8];
  unint64_t v95;
  char v96[24];
  char v97[48];
  char v98[72];
  uint64_t v99;
  unint64_t v100;
  char v101[8];

  v2 = v0;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (uint64_t *)((char *)&v83 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v7 = v8;
  v9 = enum case for DispatchPredicate.onQueue(_:);
  v10 = *(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v4 + 104);
  v10(v7, enum case for DispatchPredicate.onQueue(_:), v3, v5);
  v11 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  v90 = *(void (**)(_QWORD *, uint64_t))(v4 + 8);
  v90(v7, v3);
  if ((v8 & 1) == 0)
    goto LABEL_24;
  v89 = v10;
  v99 = 0;
  v100 = 0xE000000000000000;
  _StringGuts.grow(_:)(55);
  v12._countAndFlagsBits = 0x2A205443454C4553;
  v12._object = (void *)0xEE00204D4F524620;
  String.append(_:)(v12);
  v13._countAndFlagsBits = 0x74695F6472616F62;
  v13._object = (void *)0xEB00000000736D65;
  String.append(_:)(v13);
  v14._countAndFlagsBits = 0x20455245485720;
  v14._object = (void *)0xE700000000000000;
  String.append(_:)(v14);
  v15._countAndFlagsBits = 0x74695F6472616F62;
  v15._object = (void *)0xEB00000000736D65;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 46;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  v17._object = (void *)0x8000000100FD6350;
  v17._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 0x444E410A3F203D20;
  v18._object = (void *)0xE900000000000020;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 0x6E6F7473626D6F74;
  v19._object = (void *)0xEA00000000006465;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 0x444E410A30203D20;
  v20._object = (void *)0xE900000000000020;
  String.append(_:)(v20);
  v21._countAndFlagsBits = 0xD000000000000014;
  v21._object = (void *)0x8000000100FEEDE0;
  String.append(_:)(v21);
  v22._countAndFlagsBits = 0x3F203D3C20;
  v22._object = (void *)0xE500000000000000;
  String.append(_:)(v22);
  v23 = v99;
  v24 = v100;
  v95 = (unint64_t)_swiftEmptyArrayStorage;
  v25 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v26 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v26, v101);
  swift_retain(v25);
  v28 = sub_1006B77CC(v27, v23, v24);
  if (v1)
  {
    swift_release(v25);
    swift_bridgeObjectRelease();
    if (qword_1013DD858 == -1)
      goto LABEL_6;
    goto LABEL_25;
  }
  v29 = v28;
  swift_release(v25);
  v44 = sub_10067BA88();
  v46 = v45;
  v47 = sub_1001E9730();
  v86 = v44;
  v85 = v46;
  sub_1006B5E80(v44, v46);
  sub_1006B5B50(v47, 2);
  v48 = *(void **)(*(_QWORD *)(v29 + 16) + 32);
  *v7 = v48;
  v49 = v89;
  ((void (*)(_QWORD *, uint64_t, uint64_t))v89)(v7, v9, v3);
  v50 = v48;
  LOBYTE(v48) = _dispatchPreconditionTest(_:)(v7);
  v51 = v90;
  v90(v7, v3);
  v88 = v9;
  if ((v48 & 1) == 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  v52 = type metadata accessor for SQLiteRowIterator();
  inited = (_QWORD *)swift_initStackObject(v52, v97);
  inited[3] = 0;
  inited[4] = 0;
  v84 = inited + 4;
  inited[5] = 1;
  inited[2] = v29;
  v54 = *(void **)(*(_QWORD *)(v29 + 16) + 32);
  *v7 = v54;
  v87 = v29;
  v55 = swift_retain(v29);
  v49(v7, v88, v3, v55);
  v56 = v54;
  LOBYTE(v54) = _dispatchPreconditionTest(_:)(v7);
  v51(v7, v3);
  if ((v54 & 1) == 0)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    swift_once(&qword_1013DD858, sub_100A05554);
LABEL_6:
    swift_beginAccess(&static OS_os_log.boardStore, &v99, 0, 0);
    v30 = (void *)static OS_os_log.boardStore;
    v31 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    v32 = swift_initStackObject(v31, v98);
    *(_OWORD *)(v32 + 16) = xmmword_100EF5E40;
    swift_getErrorValue(v1, v94, v91);
    v33 = v92;
    v34 = v93;
    v35 = v30;
    v36 = Error.localizedDescription.getter(v33, v34);
    v38 = v37;
    *(_QWORD *)(v32 + 56) = &type metadata for String;
    v39 = sub_1004CFC2C();
    *(_QWORD *)(v32 + 64) = v39;
    *(_QWORD *)(v32 + 32) = v36;
    *(_QWORD *)(v32 + 40) = v38;
    v40 = static os_log_type_t.error.getter(v39);
    sub_100A06EBC((uint64_t)v35, &_mh_execute_header, v40, "Failed to fetch a board item record with error %@", 49, 2, v32);
    swift_setDeallocating(v32);
    v41 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(v32 + 32, 1, v41);

    return swift_willThrow(v42);
  }
  v57 = v87;
  while (1)
  {
    v62 = inited[3];
    v63 = inited[4];
    v64 = inited[5];
    inited[3] = 0;
    inited[4] = 0;
    inited[5] = 1;
    sub_1006B7DA4(v62, v63, v64);
    swift_beginAccess(v57 + 24, &v99, 0, 0);
    v65 = sqlite3_step(*(sqlite3_stmt **)(v57 + 24));
    if (v65 != 100)
      break;
    v66 = swift_retain_n(v57, 2);
    v67 = sub_100AFA1D4(v66, 0);
    if (v67)
    {
      v68 = v67;
      swift_retain(v67);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v69);
      v71 = *(_QWORD *)((v95 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v70 = *(_QWORD *)((v95 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v71 >= v70 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v70 > 1, v71 + 1, 1);
      v58 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v71, v68);
      specialized Array._endMutation()(v58);
      swift_release(v68);
      v49 = v89;
    }
    v59 = swift_release(v57);
    v57 = inited[2];
    v60 = *(void **)(*(_QWORD *)(v57 + 16) + 32);
    *v7 = v60;
    v49(v7, v88, v3, v59);
    v61 = v60;
    LOBYTE(v60) = _dispatchPreconditionTest(_:)(v7);
    v51 = v90;
    v90(v7, v3);
    if ((v60 & 1) == 0)
      goto LABEL_23;
  }
  if (v65 && v65 != 101)
  {
    v72 = v65;
    v73 = inited[3];
    v74 = inited[4];
    v75 = inited[5];
    inited[3] = v72;
    v76 = v84;
    *v84 = 0;
    v76[1] = 0;
    sub_1006B7DA4(v73, v74, v75);
  }
  v77 = swift_release(inited);
  v78 = v87;
  v79 = *(void **)(*(_QWORD *)(v87 + 16) + 32);
  *v7 = v79;
  v49(v7, v88, v3, v77);
  v80 = v79;
  LOBYTE(v79) = _dispatchPreconditionTest(_:)(v7);
  v51(v7, v3);
  if ((v79 & 1) == 0)
LABEL_27:
    __break(1u);
  swift_beginAccess(v78 + 24, v96, 1, 0);
  v81 = *(sqlite3_stmt **)(v78 + 24);
  v82 = v85;
  if (v81)
  {
    sqlite3_finalize(v81);
    *(_QWORD *)(v78 + 24) = 0;
  }
  sub_1004BBBC8(v86, v82);
  swift_release(v78);
  return v95;
}

uint64_t sub_100AC1634()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  id v10;
  void (*v11)(_QWORD *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void (*v36)(_QWORD *, uint64_t, uint64_t, __n128);
  id v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *inited;
  void *v41;
  __n128 v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  void *v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  __n128 v64;
  uint64_t v65;
  void *v66;
  id v67;
  unint64_t v68;
  sqlite3_stmt *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unsigned int v75;
  void (*v76)(_QWORD *, uint64_t);
  void (*v77)(_QWORD *, uint64_t, uint64_t, __n128);
  char v78[8];
  uint64_t v79;
  uint64_t v80;
  char v81[8];
  unint64_t v82;
  char v83[24];
  char v84[48];
  char v85[72];
  _QWORD v86[2];
  char v87[8];

  v2 = v0;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (uint64_t *)((char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v7 = v8;
  v9 = enum case for DispatchPredicate.onQueue(_:);
  v77 = *(void (**)(_QWORD *, uint64_t, uint64_t, __n128))(v4 + 104);
  v77(v7, enum case for DispatchPredicate.onQueue(_:), v3, v5);
  v10 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  v11 = *(void (**)(_QWORD *, uint64_t))(v4 + 8);
  v11(v7, v3);
  if ((v8 & 1) == 0)
    goto LABEL_24;
  v86[0] = 0;
  v86[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(43);
  swift_bridgeObjectRelease();
  v82 = (unint64_t)_swiftEmptyArrayStorage;
  v12 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v13 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v13, v87);
  swift_retain(v12);
  v15 = sub_1006B77CC(v14, 0xD000000000000053, 0x8000000100FF1E30);
  if (v1)
  {
    swift_release(v12);
    swift_bridgeObjectRelease();
    if (qword_1013DD858 == -1)
      goto LABEL_6;
    goto LABEL_25;
  }
  v16 = v15;
  swift_release(v12);
  v31 = sub_10067BA88();
  v33 = v32;
  sub_1001E9730();
  v72 = v31;
  v73 = v33;
  sub_1006B5E80(v31, v33);
  v34 = *(void **)(*(_QWORD *)(v16 + 16) + 32);
  *v7 = v34;
  v35 = v16;
  v36 = v77;
  ((void (*)(_QWORD *, uint64_t, uint64_t))v77)(v7, v9, v3);
  v37 = v34;
  LOBYTE(v34) = _dispatchPreconditionTest(_:)(v7);
  v11(v7, v3);
  v76 = v11;
  if ((v34 & 1) == 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  v38 = v9;
  v39 = type metadata accessor for SQLiteRowIterator();
  inited = (_QWORD *)swift_initStackObject(v39, v84);
  inited[3] = 0;
  inited[4] = 0;
  v71 = inited + 4;
  inited[5] = 1;
  inited[2] = v35;
  v41 = *(void **)(*(_QWORD *)(v35 + 16) + 32);
  *v7 = v41;
  v74 = v35;
  v42 = swift_retain(v35);
  v75 = v38;
  v36(v7, v38, v3, v42);
  v43 = v41;
  LOBYTE(v41) = _dispatchPreconditionTest(_:)(v7);
  v76(v7, v3);
  if ((v41 & 1) == 0)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    swift_once(&qword_1013DD858, sub_100A05554);
LABEL_6:
    swift_beginAccess(&static OS_os_log.boardStore, v86, 0, 0);
    v17 = (void *)static OS_os_log.boardStore;
    v18 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    v19 = swift_initStackObject(v18, v85);
    *(_OWORD *)(v19 + 16) = xmmword_100EF5E40;
    swift_getErrorValue(v1, v81, v78);
    v20 = v79;
    v21 = v80;
    v22 = v17;
    v23 = Error.localizedDescription.getter(v20, v21);
    v25 = v24;
    *(_QWORD *)(v19 + 56) = &type metadata for String;
    v26 = sub_1004CFC2C();
    *(_QWORD *)(v19 + 64) = v26;
    *(_QWORD *)(v19 + 32) = v23;
    *(_QWORD *)(v19 + 40) = v25;
    v27 = static os_log_type_t.error.getter(v26);
    sub_100A06EBC((uint64_t)v22, &_mh_execute_header, v27, "Failed to fetch a board item record with error %@", 49, 2, v19);
    swift_setDeallocating(v19);
    v28 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(v19 + 32, 1, v28);

    return swift_willThrow(v29);
  }
  v44 = v74;
  while (1)
  {
    v49 = inited[3];
    v50 = inited[4];
    v51 = inited[5];
    inited[3] = 0;
    inited[4] = 0;
    inited[5] = 1;
    sub_1006B7DA4(v49, v50, v51);
    swift_beginAccess(v44 + 24, v86, 0, 0);
    v52 = sqlite3_step(*(sqlite3_stmt **)(v44 + 24));
    if (v52 != 100)
      break;
    v53 = swift_retain_n(v44, 2);
    v54 = sub_100AFA1D4(v53, 0);
    if (v54)
    {
      v55 = v54;
      swift_retain(v54);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v56);
      v58 = *(_QWORD *)((v82 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v57 = *(_QWORD *)((v82 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v58 >= v57 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v57 > 1, v58 + 1, 1);
      v45 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v58, v55);
      specialized Array._endMutation()(v45);
      swift_release(v55);
      v36 = v77;
    }
    v46 = swift_release(v44);
    v44 = inited[2];
    v47 = *(void **)(*(_QWORD *)(v44 + 16) + 32);
    *v7 = v47;
    v36(v7, v75, v3, v46);
    v48 = v47;
    LOBYTE(v47) = _dispatchPreconditionTest(_:)(v7);
    v76(v7, v3);
    if ((v47 & 1) == 0)
      goto LABEL_23;
  }
  if (v52 && v52 != 101)
  {
    v59 = v52;
    v60 = inited[3];
    v61 = inited[4];
    v62 = inited[5];
    inited[3] = v59;
    v63 = v71;
    *v71 = 0;
    v63[1] = 0;
    sub_1006B7DA4(v60, v61, v62);
  }
  v64 = swift_release(inited);
  v65 = v74;
  v66 = *(void **)(*(_QWORD *)(v74 + 16) + 32);
  *v7 = v66;
  v36(v7, v75, v3, v64);
  v67 = v66;
  LOBYTE(v66) = _dispatchPreconditionTest(_:)(v7);
  v76(v7, v3);
  v68 = v73;
  if ((v66 & 1) == 0)
LABEL_27:
    __break(1u);
  swift_beginAccess(v65 + 24, v83, 1, 0);
  v69 = *(sqlite3_stmt **)(v65 + 24);
  if (v69)
  {
    sqlite3_finalize(v69);
    *(_QWORD *)(v65 + 24) = 0;
  }
  sub_1004BBBC8(v72, v68);
  swift_release(v65);
  return v82;
}

void sub_100AC1C50(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  sub_100AC1C74(a1, a2, (uint64_t (*)(uint64_t))sub_100AABE4C, (uint64_t (*)(uint64_t, id))sub_100AF74F8, a3);
}

void sub_100AC1C74(void *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, uint64_t (*a4)(uint64_t, id)@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;

  v9 = a3(a2);
  if (!v5)
  {
    v10 = v9;
    v11 = a1;
    v12 = a4(v10, v11);
    swift_bridgeObjectRelease(v10);

    *a5 = v12;
  }
}

uint64_t sub_100AC1CF4(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t inited;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __n128 v58;
  uint64_t v60;
  double v61;
  void *v62;
  void (*v63)(_QWORD *, uint64_t, uint64_t, __n128);
  id v64;
  void (*v65)(_QWORD *, uint64_t);
  uint64_t v66;
  _QWORD *v67;
  void *v68;
  __n128 v69;
  id v70;
  uint64_t v71;
  __n128 v72;
  void *v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  __n128 v91;
  uint64_t v92;
  void *v93;
  id v94;
  sqlite3_stmt *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(_QWORD *, uint64_t, uint64_t, __n128);
  void (*v101)(_QWORD *, uint64_t);
  char v102[8];
  uint64_t v103;
  uint64_t v104;
  char v105[8];
  unint64_t v106;
  char v107[24];
  char v108[48];
  char v109[72];
  uint64_t v110;
  unint64_t v111;
  char v112[8];

  v4 = v1;
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (uint64_t *)((char *)&v96 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *(void **)(v4 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v10 = v11;
  v12 = enum case for DispatchPredicate.onQueue(_:);
  v100 = *(void (**)(_QWORD *, uint64_t, uint64_t, __n128))(v7 + 104);
  v100(v10, enum case for DispatchPredicate.onQueue(_:), v6, v8);
  v13 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v10);
  v101 = *(void (**)(_QWORD *, uint64_t))(v7 + 8);
  v101(v10, v6);
  if ((v11 & 1) == 0)
    goto LABEL_25;
  if ((a1 & 1) != 0)
    v14 = 15649;
  else
    v14 = 15677;
  v110 = 0;
  v111 = 0xE000000000000000;
  _StringGuts.grow(_:)(79);
  v15._countAndFlagsBits = 0x205443454C4553;
  v15._object = (void *)0xE700000000000000;
  String.append(_:)(v15);
  v16._countAndFlagsBits = sub_100AFB6C4(0x74695F6472616F62, (void *)0xEB00000000736D65);
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = 0x204D4F524620;
  v17._object = (void *)0xE600000000000000;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 0x74695F6472616F62;
  v18._object = (void *)0xEB00000000736D65;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 0x4A2052454E4E490ALL;
  v19._object = (void *)0xEC000000204E494FLL;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 0x736472616F62;
  v20._object = (void *)0xE600000000000000;
  String.append(_:)(v20);
  v21._countAndFlagsBits = 542002976;
  v21._object = (void *)0xE400000000000000;
  String.append(_:)(v21);
  v22._countAndFlagsBits = 0x74695F6472616F62;
  v22._object = (void *)0xEB00000000736D65;
  String.append(_:)(v22);
  v23._countAndFlagsBits = 46;
  v23._object = (void *)0xE100000000000000;
  String.append(_:)(v23);
  v24._countAndFlagsBits = 0xD000000000000010;
  v24._object = (void *)0x8000000100FD6350;
  String.append(_:)(v24);
  v25._countAndFlagsBits = 2112800;
  v25._object = (void *)0xE300000000000000;
  String.append(_:)(v25);
  v26._countAndFlagsBits = 0x736472616F62;
  v26._object = (void *)0xE600000000000000;
  String.append(_:)(v26);
  v27._countAndFlagsBits = 46;
  v27._object = (void *)0xE100000000000000;
  String.append(_:)(v27);
  v28._countAndFlagsBits = 0xD000000000000010;
  v28._object = (void *)0x8000000100FD6350;
  String.append(_:)(v28);
  v29._countAndFlagsBits = 0x20455245485720;
  v29._object = (void *)0xE700000000000000;
  String.append(_:)(v29);
  v30._countAndFlagsBits = 0x74695F6472616F62;
  v30._object = (void *)0xEB00000000736D65;
  String.append(_:)(v30);
  v31._countAndFlagsBits = 46;
  v31._object = (void *)0xE100000000000000;
  String.append(_:)(v31);
  v32._object = (void *)0x8000000100FEEB40;
  v32._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v32);
  v33._countAndFlagsBits = 0x444E412030203E20;
  v33._object = (void *)0xE900000000000020;
  String.append(_:)(v33);
  v34._countAndFlagsBits = 0x736472616F62;
  v34._object = (void *)0xE600000000000000;
  String.append(_:)(v34);
  v35._countAndFlagsBits = 46;
  v35._object = (void *)0xE100000000000000;
  String.append(_:)(v35);
  v36._countAndFlagsBits = 0x616E5F72656E776FLL;
  v36._object = (void *)0xEA0000000000656DLL;
  String.append(_:)(v36);
  v37._countAndFlagsBits = 32;
  v37._object = (void *)0xE100000000000000;
  String.append(_:)(v37);
  v38._countAndFlagsBits = v14;
  v38._object = (void *)0xE200000000000000;
  String.append(_:)(v38);
  swift_bridgeObjectRelease();
  v39._countAndFlagsBits = 16160;
  v39._object = (void *)0xE200000000000000;
  String.append(_:)(v39);
  v40 = v110;
  v41 = v111;
  v106 = (unint64_t)_swiftEmptyArrayStorage;
  v42 = *(_QWORD *)(v4 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v43 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v43, v112);
  swift_retain(v42);
  v45 = sub_1006B77CC(v44, v40, v41);
  v3 = v2;
  if (v2)
  {
    swift_release(v42);
    swift_bridgeObjectRelease();
    if (qword_1013DD858 == -1)
    {
LABEL_7:
      swift_beginAccess(&static OS_os_log.boardStore, &v110, 0, 0);
      v46 = (void *)static OS_os_log.boardStore;
      v47 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      inited = swift_initStackObject(v47, v109);
      *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
      swift_getErrorValue(v3, v105, v102);
      v49 = v103;
      v50 = v104;
      v51 = v46;
      v52 = Error.localizedDescription.getter(v49, v50);
      v54 = v53;
      *(_QWORD *)(inited + 56) = &type metadata for String;
      v55 = sub_1004CFC2C();
      *(_QWORD *)(inited + 64) = v55;
      *(_QWORD *)(inited + 32) = v52;
      *(_QWORD *)(inited + 40) = v54;
      v56 = static os_log_type_t.error.getter(v55);
      sub_100A06EBC((uint64_t)v51, &_mh_execute_header, v56, "Failed to fetch a board item record with error %@", 49, 2, inited);
      swift_setDeallocating(inited);
      v57 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(inited + 32, 1, v57);

      return swift_willThrow(v58);
    }
LABEL_26:
    swift_once(&qword_1013DD858, sub_100A05554);
    goto LABEL_7;
  }
  v60 = v45;
  swift_release(v42);
  v61 = sub_1006B5CA4(0, 0xE000000000000000, 1);
  v62 = *(void **)(*(_QWORD *)(v60 + 16) + 32);
  *v10 = v62;
  v63 = v100;
  ((void (*)(_QWORD *, uint64_t, uint64_t, double))v100)(v10, v12, v6, v61);
  v64 = v62;
  LOBYTE(v62) = _dispatchPreconditionTest(_:)(v10);
  v65 = v101;
  v101(v10, v6);
  if ((v62 & 1) == 0)
  {
    __break(1u);
    goto LABEL_28;
  }
  v98 = 0;
  v66 = type metadata accessor for SQLiteRowIterator();
  v67 = (_QWORD *)swift_initStackObject(v66, v108);
  v67[3] = 0;
  v67[4] = 0;
  v97 = v67 + 4;
  v67[5] = 1;
  v67[2] = v60;
  v68 = *(void **)(*(_QWORD *)(v60 + 16) + 32);
  *v10 = v68;
  v99 = v60;
  v69 = swift_retain(v60);
  v63(v10, v12, v6, v69);
  v70 = v68;
  LOBYTE(v68) = _dispatchPreconditionTest(_:)(v10);
  v65(v10, v6);
  if ((v68 & 1) == 0)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v3 = v99;
  while (1)
  {
    v75 = v67[3];
    v76 = v67[4];
    v77 = v67[5];
    v67[3] = 0;
    v67[4] = 0;
    v67[5] = 1;
    sub_1006B7DA4(v75, v76, v77);
    swift_beginAccess(v3 + 24, &v110, 0, 0);
    v78 = sqlite3_step(*(sqlite3_stmt **)(v3 + 24));
    if (v78 != 100)
      break;
    v79 = v12;
    v80 = swift_retain_n(v3, 2);
    v81 = sub_100AFA1D4(v80, 0);
    if (v81)
    {
      v82 = v81;
      swift_retain(v81);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v83);
      v85 = *(_QWORD *)((v106 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v84 = *(_QWORD *)((v106 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v85 >= v84 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v84 > 1, v85 + 1, 1);
      v71 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v85, v82);
      specialized Array._endMutation()(v71);
      swift_release(v82);
      v63 = v100;
    }
    v72 = swift_release(v3);
    v3 = v67[2];
    v73 = *(void **)(*(_QWORD *)(v3 + 16) + 32);
    *v10 = v73;
    v12 = v79;
    v63(v10, v79, v6, v72);
    v74 = v73;
    LOBYTE(v73) = _dispatchPreconditionTest(_:)(v10);
    v65 = v101;
    v101(v10, v6);
    if ((v73 & 1) == 0)
      goto LABEL_24;
  }
  if (v78 && v78 != 101)
  {
    v86 = v78;
    v87 = v67[3];
    v88 = v67[4];
    v89 = v67[5];
    v67[3] = v86;
    v90 = v97;
    *v97 = 0;
    v90[1] = 0;
    sub_1006B7DA4(v87, v88, v89);
  }
  v91 = swift_release(v67);
  v92 = v99;
  v93 = *(void **)(*(_QWORD *)(v99 + 16) + 32);
  *v10 = v93;
  v63(v10, v12, v6, v91);
  v94 = v93;
  LOBYTE(v93) = _dispatchPreconditionTest(_:)(v10);
  v65(v10, v6);
  if ((v93 & 1) == 0)
LABEL_28:
    __break(1u);
  swift_beginAccess(v92 + 24, v107, 1, 0);
  v95 = *(sqlite3_stmt **)(v92 + 24);
  if (v95)
  {
    sqlite3_finalize(v95);
    *(_QWORD *)(v92 + 24) = 0;
  }
  swift_release(v92);
  return v106;
}

uint64_t sub_100AC24E0(char a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  void (*v11)(_QWORD, __n128);
  id v12;
  void (*v13)(_QWORD *, uint64_t);
  uint64_t v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t inited;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v45;
  double v46;
  void *v47;
  uint64_t v48;
  void (*v49)(_QWORD *, uint64_t, uint64_t, __n128);
  id v50;
  uint64_t v51;
  _QWORD *v52;
  void *v53;
  __n128 v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  __n128 v58;
  void *v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  void (*v65)(_QWORD *, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  __n128 v77;
  uint64_t v78;
  void *v79;
  id v80;
  sqlite3_stmt *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(_QWORD *, uint64_t, uint64_t, __n128);
  unsigned int v87;
  char v88[8];
  uint64_t v89;
  uint64_t v90;
  char v91[8];
  unint64_t v92;
  char v93[24];
  char v94[48];
  char v95[72];
  uint64_t v96;
  unint64_t v97;
  char v98[8];

  v3 = v1;
  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (uint64_t *)((char *)&v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(void **)((char *)v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v9 = v10;
  v11 = *(void (**)(_QWORD, __n128))(v6 + 104);
  v87 = enum case for DispatchPredicate.onQueue(_:);
  v86 = (void (*)(_QWORD *, uint64_t, uint64_t, __n128))v11;
  v11(v9, v7);
  v12 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  v13 = *(void (**)(_QWORD *, uint64_t))(v6 + 8);
  v13(v9, v5);
  if ((v10 & 1) == 0)
    goto LABEL_25;
  if ((a1 & 1) != 0)
    v14 = 15649;
  else
    v14 = 15677;
  v96 = 0;
  v97 = 0xE000000000000000;
  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  v96 = 0x205443454C4553;
  v97 = 0xE700000000000000;
  v15._countAndFlagsBits = sub_100AF5090(0, (void *)0xE000000000000000);
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 0x204D4F524620;
  v16._object = (void *)0xE600000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0x736472616F62;
  v17._object = (void *)0xE600000000000000;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 0x20455245485720;
  v18._object = (void *)0xE700000000000000;
  String.append(_:)(v18);
  v19._object = (void *)0x8000000100FEEB40;
  v19._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 0x444E412030203E20;
  v20._object = (void *)0xE900000000000020;
  String.append(_:)(v20);
  v21._countAndFlagsBits = 0x616E5F72656E776FLL;
  v21._object = (void *)0xEA0000000000656DLL;
  String.append(_:)(v21);
  v22._countAndFlagsBits = 32;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  v23._countAndFlagsBits = v14;
  v23._object = (void *)0xE200000000000000;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._countAndFlagsBits = 16160;
  v24._object = (void *)0xE200000000000000;
  String.append(_:)(v24);
  v25 = v96;
  v26 = v97;
  v92 = (unint64_t)_swiftEmptyArrayStorage;
  v27 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v28 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v28, v98);
  swift_retain(v27);
  v30 = sub_1006B77CC(v29, v25, v26);
  v3 = v2;
  if (v2)
  {
    swift_release(v27);
    swift_bridgeObjectRelease();
    if (qword_1013DD858 == -1)
    {
LABEL_7:
      swift_beginAccess(&static OS_os_log.boardStore, &v96, 0, 0);
      v31 = (void *)static OS_os_log.boardStore;
      v32 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      inited = swift_initStackObject(v32, v95);
      *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
      swift_getErrorValue(v3, v91, v88);
      v34 = v89;
      v35 = v90;
      v36 = v31;
      v37 = Error.localizedDescription.getter(v34, v35);
      v39 = v38;
      *(_QWORD *)(inited + 56) = &type metadata for String;
      v40 = sub_1004CFC2C();
      *(_QWORD *)(inited + 64) = v40;
      *(_QWORD *)(inited + 32) = v37;
      *(_QWORD *)(inited + 40) = v39;
      v41 = static os_log_type_t.error.getter(v40);
      sub_100A06EBC((uint64_t)v36, &_mh_execute_header, v41, "Failed to fetch a board record with error %@", 44, 2, inited);
      swift_setDeallocating(inited);
      v42 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(inited + 32, 1, v42);

      return swift_willThrow(v43);
    }
LABEL_26:
    swift_once(&qword_1013DD858, sub_100A05554);
    goto LABEL_7;
  }
  v45 = v30;
  swift_release(v27);
  v46 = sub_1006B5CA4(0, 0xE000000000000000, 1);
  v47 = *(void **)(*(_QWORD *)(v45 + 16) + 32);
  *v9 = v47;
  v48 = v87;
  v49 = v86;
  ((void (*)(_QWORD *, _QWORD, uint64_t, double))v86)(v9, v87, v5, v46);
  v50 = v47;
  LOBYTE(v47) = _dispatchPreconditionTest(_:)(v9);
  v13(v9, v5);
  if ((v47 & 1) == 0)
  {
    __break(1u);
    goto LABEL_28;
  }
  v84 = 0;
  v51 = type metadata accessor for SQLiteRowIterator();
  v52 = (_QWORD *)swift_initStackObject(v51, v94);
  v52[3] = 0;
  v3 = v52 + 3;
  v52[4] = 0;
  v83 = v52 + 4;
  v52[5] = 1;
  v52[2] = v45;
  v53 = *(void **)(*(_QWORD *)(v45 + 16) + 32);
  *v9 = v53;
  v85 = v45;
  v54 = swift_retain(v45);
  v49(v9, v48, v5, v54);
  v55 = v53;
  LOBYTE(v53) = _dispatchPreconditionTest(_:)(v9);
  v13(v9, v5);
  if ((v53 & 1) == 0)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v56 = v85;
  while (1)
  {
    v61 = v52[3];
    v62 = v52[4];
    v63 = v52[5];
    *v3 = 0;
    v52[4] = 0;
    v52[5] = 1;
    sub_1006B7DA4(v61, v62, v63);
    swift_beginAccess(v56 + 24, &v96, 0, 0);
    v64 = sqlite3_step(*(sqlite3_stmt **)(v56 + 24));
    if (v64 != 100)
      break;
    v65 = v13;
    v66 = swift_retain_n(v56, 2);
    v67 = sub_100AF5564(v66, 0);
    if (v67)
    {
      v68 = v67;
      swift_retain(v67);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v69);
      v71 = *(_QWORD *)((v92 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v70 = *(_QWORD *)((v92 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v71 >= v70 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v70 > 1, v71 + 1, 1);
      v57 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v71, v68);
      specialized Array._endMutation()(v57);
      swift_release(v68);
      v49 = v86;
    }
    v58 = swift_release(v56);
    v56 = v52[2];
    v59 = *(void **)(*(_QWORD *)(v56 + 16) + 32);
    *v9 = v59;
    v49(v9, v87, v5, v58);
    v60 = v59;
    LOBYTE(v59) = _dispatchPreconditionTest(_:)(v9);
    v13 = v65;
    v65(v9, v5);
    if ((v59 & 1) == 0)
      goto LABEL_24;
  }
  if (v64 && v64 != 101)
  {
    v72 = v64;
    v73 = v52[3];
    v74 = v52[4];
    v75 = v52[5];
    v52[3] = v72;
    v76 = v83;
    *v83 = 0;
    v76[1] = 0;
    sub_1006B7DA4(v73, v74, v75);
  }
  v77 = swift_release(v52);
  v78 = v85;
  v79 = *(void **)(*(_QWORD *)(v85 + 16) + 32);
  *v9 = v79;
  v49(v9, v87, v5, v77);
  v80 = v79;
  LOBYTE(v79) = _dispatchPreconditionTest(_:)(v9);
  v13(v9, v5);
  if ((v79 & 1) == 0)
LABEL_28:
    __break(1u);
  swift_beginAccess(v78 + 24, v93, 1, 0);
  v81 = *(sqlite3_stmt **)(v78 + 24);
  if (v81)
  {
    sqlite3_finalize(v81);
    *(_QWORD *)(v78 + 24) = 0;
  }
  swift_release(v78);
  return v92;
}

uint64_t sub_100AC2B8C(char a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  void (*v11)(_QWORD, __n128);
  id v12;
  void (*v13)(_QWORD *, uint64_t);
  uint64_t v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t inited;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v45;
  double v46;
  void *v47;
  uint64_t v48;
  void (*v49)(_QWORD *, uint64_t, uint64_t, __n128);
  id v50;
  uint64_t v51;
  _QWORD *v52;
  void *v53;
  __n128 v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  __n128 v58;
  void *v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  void (*v65)(_QWORD *, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  __n128 v77;
  uint64_t v78;
  void *v79;
  id v80;
  sqlite3_stmt *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(_QWORD *, uint64_t, uint64_t, __n128);
  unsigned int v87;
  char v88[8];
  uint64_t v89;
  uint64_t v90;
  char v91[8];
  unint64_t v92;
  char v93[24];
  char v94[48];
  char v95[72];
  uint64_t v96;
  unint64_t v97;
  char v98[8];

  v3 = v1;
  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (uint64_t *)((char *)&v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(void **)((char *)v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v9 = v10;
  v11 = *(void (**)(_QWORD, __n128))(v6 + 104);
  v87 = enum case for DispatchPredicate.onQueue(_:);
  v86 = (void (*)(_QWORD *, uint64_t, uint64_t, __n128))v11;
  v11(v9, v7);
  v12 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  v13 = *(void (**)(_QWORD *, uint64_t))(v6 + 8);
  v13(v9, v5);
  if ((v10 & 1) == 0)
    goto LABEL_25;
  if ((a1 & 1) != 0)
    v14 = 15649;
  else
    v14 = 15677;
  v96 = 0;
  v97 = 0xE000000000000000;
  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  v96 = 0x205443454C4553;
  v97 = 0xE700000000000000;
  v15._countAndFlagsBits = sub_100AF5090(0, (void *)0xE000000000000000);
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 0x204D4F524620;
  v16._object = (void *)0xE600000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0x736472616F62;
  v17._object = (void *)0xE600000000000000;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 0x20455245485720;
  v18._object = (void *)0xE700000000000000;
  String.append(_:)(v18);
  v19._object = (void *)0x8000000100FEF020;
  v19._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 0x444E412031203D20;
  v20._object = (void *)0xE900000000000020;
  String.append(_:)(v20);
  v21._countAndFlagsBits = 0x616E5F72656E776FLL;
  v21._object = (void *)0xEA0000000000656DLL;
  String.append(_:)(v21);
  v22._countAndFlagsBits = 32;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  v23._countAndFlagsBits = v14;
  v23._object = (void *)0xE200000000000000;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._countAndFlagsBits = 16160;
  v24._object = (void *)0xE200000000000000;
  String.append(_:)(v24);
  v25 = v96;
  v26 = v97;
  v92 = (unint64_t)_swiftEmptyArrayStorage;
  v27 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v28 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v28, v98);
  swift_retain(v27);
  v30 = sub_1006B77CC(v29, v25, v26);
  v3 = v2;
  if (v2)
  {
    swift_release(v27);
    swift_bridgeObjectRelease();
    if (qword_1013DD858 == -1)
    {
LABEL_7:
      swift_beginAccess(&static OS_os_log.boardStore, &v96, 0, 0);
      v31 = (void *)static OS_os_log.boardStore;
      v32 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      inited = swift_initStackObject(v32, v95);
      *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
      swift_getErrorValue(v3, v91, v88);
      v34 = v89;
      v35 = v90;
      v36 = v31;
      v37 = Error.localizedDescription.getter(v34, v35);
      v39 = v38;
      *(_QWORD *)(inited + 56) = &type metadata for String;
      v40 = sub_1004CFC2C();
      *(_QWORD *)(inited + 64) = v40;
      *(_QWORD *)(inited + 32) = v37;
      *(_QWORD *)(inited + 40) = v39;
      v41 = static os_log_type_t.error.getter(v40);
      sub_100A06EBC((uint64_t)v36, &_mh_execute_header, v41, "Failed to fetch a board record with error %@", 44, 2, inited);
      swift_setDeallocating(inited);
      v42 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(inited + 32, 1, v42);

      return swift_willThrow(v43);
    }
LABEL_26:
    swift_once(&qword_1013DD858, sub_100A05554);
    goto LABEL_7;
  }
  v45 = v30;
  swift_release(v27);
  v46 = sub_1006B5CA4(0, 0xE000000000000000, 1);
  v47 = *(void **)(*(_QWORD *)(v45 + 16) + 32);
  *v9 = v47;
  v48 = v87;
  v49 = v86;
  ((void (*)(_QWORD *, _QWORD, uint64_t, double))v86)(v9, v87, v5, v46);
  v50 = v47;
  LOBYTE(v47) = _dispatchPreconditionTest(_:)(v9);
  v13(v9, v5);
  if ((v47 & 1) == 0)
  {
    __break(1u);
    goto LABEL_28;
  }
  v84 = 0;
  v51 = type metadata accessor for SQLiteRowIterator();
  v52 = (_QWORD *)swift_initStackObject(v51, v94);
  v52[3] = 0;
  v3 = v52 + 3;
  v52[4] = 0;
  v83 = v52 + 4;
  v52[5] = 1;
  v52[2] = v45;
  v53 = *(void **)(*(_QWORD *)(v45 + 16) + 32);
  *v9 = v53;
  v85 = v45;
  v54 = swift_retain(v45);
  v49(v9, v48, v5, v54);
  v55 = v53;
  LOBYTE(v53) = _dispatchPreconditionTest(_:)(v9);
  v13(v9, v5);
  if ((v53 & 1) == 0)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v56 = v85;
  while (1)
  {
    v61 = v52[3];
    v62 = v52[4];
    v63 = v52[5];
    *v3 = 0;
    v52[4] = 0;
    v52[5] = 1;
    sub_1006B7DA4(v61, v62, v63);
    swift_beginAccess(v56 + 24, &v96, 0, 0);
    v64 = sqlite3_step(*(sqlite3_stmt **)(v56 + 24));
    if (v64 != 100)
      break;
    v65 = v13;
    v66 = swift_retain_n(v56, 2);
    v67 = sub_100AF5564(v66, 0);
    if (v67)
    {
      v68 = v67;
      swift_retain(v67);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v69);
      v71 = *(_QWORD *)((v92 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v70 = *(_QWORD *)((v92 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v71 >= v70 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v70 > 1, v71 + 1, 1);
      v57 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v71, v68);
      specialized Array._endMutation()(v57);
      swift_release(v68);
      v49 = v86;
    }
    v58 = swift_release(v56);
    v56 = v52[2];
    v59 = *(void **)(*(_QWORD *)(v56 + 16) + 32);
    *v9 = v59;
    v49(v9, v87, v5, v58);
    v60 = v59;
    LOBYTE(v59) = _dispatchPreconditionTest(_:)(v9);
    v13 = v65;
    v65(v9, v5);
    if ((v59 & 1) == 0)
      goto LABEL_24;
  }
  if (v64 && v64 != 101)
  {
    v72 = v64;
    v73 = v52[3];
    v74 = v52[4];
    v75 = v52[5];
    v52[3] = v72;
    v76 = v83;
    *v83 = 0;
    v76[1] = 0;
    sub_1006B7DA4(v73, v74, v75);
  }
  v77 = swift_release(v52);
  v78 = v85;
  v79 = *(void **)(*(_QWORD *)(v85 + 16) + 32);
  *v9 = v79;
  v49(v9, v87, v5, v77);
  v80 = v79;
  LOBYTE(v79) = _dispatchPreconditionTest(_:)(v9);
  v13(v9, v5);
  if ((v79 & 1) == 0)
LABEL_28:
    __break(1u);
  swift_beginAccess(v78 + 24, v93, 1, 0);
  v81 = *(sqlite3_stmt **)(v78 + 24);
  if (v81)
  {
    sqlite3_finalize(v81);
    *(_QWORD *)(v78 + 24) = 0;
  }
  swift_release(v78);
  return v92;
}

double *sub_100AC3238(char a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  double *v6;
  __n128 v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  void (*v11)(_QWORD, __n128);
  id v12;
  void (*v13)(_QWORD *, uint64_t);
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t inited;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __n128 v50;
  uint64_t v51;
  __n128 v52;
  void *v53;
  uint64_t v54;
  void (*v55)(_QWORD *, uint64_t, uint64_t, __n128);
  id v56;
  uint64_t v57;
  void *v58;
  __n128 v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  __n128 v63;
  void *v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  void (*v70)(_QWORD *, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  __n128 v82;
  uint64_t v83;
  void *v84;
  id v85;
  sqlite3_stmt *v86;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(_QWORD *, uint64_t, uint64_t, __n128);
  unsigned int v93;
  char v94[8];
  uint64_t v95;
  uint64_t v96;
  char v97[8];
  unint64_t v98;
  char v99[24];
  char v100[48];
  char v101[72];
  uint64_t v102;
  unint64_t v103;
  char v104[8];

  v3 = v1;
  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(double **)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (uint64_t *)((char *)&v88 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(void **)((char *)v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v9 = v10;
  v11 = (void (*)(_QWORD, __n128))*((_QWORD *)v6 + 13);
  v93 = enum case for DispatchPredicate.onQueue(_:);
  v92 = (void (*)(_QWORD *, uint64_t, uint64_t, __n128))v11;
  v11(v9, v7);
  v12 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  v13 = (void (*)(_QWORD *, uint64_t))*((_QWORD *)v6 + 1);
  v13(v9, v5);
  if ((v10 & 1) == 0)
    goto LABEL_24;
  v6 = _swiftEmptyArrayStorage;
  if ((a1 & 1) != 0)
    return v6;
  v102 = 0;
  v103 = 0xE000000000000000;
  _StringGuts.grow(_:)(64);
  v14._countAndFlagsBits = 0x205443454C4553;
  v14._object = (void *)0xE700000000000000;
  String.append(_:)(v14);
  v15._countAndFlagsBits = sub_100AFAA78(0x6D5F736472616F62, (void *)0xEF61746164617465);
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 0x204D4F524620;
  v16._object = (void *)0xE600000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0x6D5F736472616F62;
  v17._object = (void *)0xEF61746164617465;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 0x4A2052454E4E4920;
  v18._object = (void *)0xEC000000204E494FLL;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 0x736472616F62;
  v19._object = (void *)0xE600000000000000;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 542002976;
  v20._object = (void *)0xE400000000000000;
  String.append(_:)(v20);
  v21._countAndFlagsBits = 0x736472616F62;
  v21._object = (void *)0xE600000000000000;
  String.append(_:)(v21);
  v22._countAndFlagsBits = 46;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  v23._countAndFlagsBits = 0xD000000000000010;
  v23._object = (void *)0x8000000100FD6350;
  String.append(_:)(v23);
  v24._countAndFlagsBits = 2112800;
  v24._object = (void *)0xE300000000000000;
  String.append(_:)(v24);
  v25._countAndFlagsBits = 0x6D5F736472616F62;
  v25._object = (void *)0xEF61746164617465;
  String.append(_:)(v25);
  v26._countAndFlagsBits = 46;
  v26._object = (void *)0xE100000000000000;
  String.append(_:)(v26);
  v27._countAndFlagsBits = 0xD000000000000010;
  v27._object = (void *)0x8000000100FD6350;
  String.append(_:)(v27);
  v28._countAndFlagsBits = 0x20455245485720;
  v28._object = (void *)0xE700000000000000;
  String.append(_:)(v28);
  v29._countAndFlagsBits = 0x6D5F736472616F62;
  v29._object = (void *)0xEF61746164617465;
  String.append(_:)(v29);
  v30._countAndFlagsBits = 46;
  v30._object = (void *)0xE100000000000000;
  String.append(_:)(v30);
  v31._object = (void *)0x8000000100FEEB40;
  v31._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v31);
  v32._countAndFlagsBits = 807419424;
  v32._object = (void *)0xE400000000000000;
  String.append(_:)(v32);
  v33 = v102;
  v34 = v103;
  v98 = (unint64_t)_swiftEmptyArrayStorage;
  v6 = *(double **)((char *)v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v35 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v35, v104);
  swift_retain(v6);
  v37 = sub_1006B77CC(v36, v33, v34);
  v3 = v2;
  if (v2)
  {
    swift_release(v6);
    swift_bridgeObjectRelease();
    if (qword_1013DD858 == -1)
    {
LABEL_5:
      swift_beginAccess(&static OS_os_log.boardStore, &v102, 0, 0);
      v38 = (void *)static OS_os_log.boardStore;
      v39 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      inited = swift_initStackObject(v39, v101);
      *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
      swift_getErrorValue(v3, v97, v94);
      v41 = v95;
      v42 = v96;
      v43 = v38;
      v44 = Error.localizedDescription.getter(v41, v42);
      v46 = v45;
      *(_QWORD *)(inited + 56) = &type metadata for String;
      v47 = sub_1004CFC2C();
      *(_QWORD *)(inited + 64) = v47;
      *(_QWORD *)(inited + 32) = v44;
      *(_QWORD *)(inited + 40) = v46;
      v48 = static os_log_type_t.error.getter(v47);
      sub_100A06EBC((uint64_t)v43, &_mh_execute_header, v48, "Failed to fetch a board record with error %@", 44, 2, inited);
      swift_setDeallocating(inited);
      v49 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(inited + 32, 1, v49);

      swift_willThrow(v50);
      return v6;
    }
LABEL_25:
    swift_once(&qword_1013DD858, sub_100A05554);
    goto LABEL_5;
  }
  v51 = v37;
  v90 = 0;
  v52 = swift_release(v6);
  v53 = *(void **)(*(_QWORD *)(v51 + 16) + 32);
  *v9 = v53;
  v54 = v93;
  v55 = v92;
  v92(v9, v93, v5, v52);
  v56 = v53;
  LOBYTE(v53) = _dispatchPreconditionTest(_:)(v9);
  v13(v9, v5);
  if ((v53 & 1) == 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  v57 = type metadata accessor for SQLiteRowIterator();
  v6 = (double *)swift_initStackObject(v57, v100);
  v6[3] = 0.0;
  v3 = v6 + 3;
  v6[4] = 0.0;
  v89 = v6 + 4;
  *((_QWORD *)v6 + 5) = 1;
  *((_QWORD *)v6 + 2) = v51;
  v58 = *(void **)(*(_QWORD *)(v51 + 16) + 32);
  *v9 = v58;
  v91 = v51;
  v59 = swift_retain(v51);
  v55(v9, v54, v5, v59);
  v60 = v58;
  LOBYTE(v58) = _dispatchPreconditionTest(_:)(v9);
  v13(v9, v5);
  if ((v58 & 1) == 0)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v61 = v91;
  while (1)
  {
    v66 = *((_QWORD *)v6 + 3);
    v67 = *((_QWORD *)v6 + 4);
    v68 = *((_QWORD *)v6 + 5);
    *v3 = 0;
    v6[4] = 0.0;
    *((_QWORD *)v6 + 5) = 1;
    sub_1006B7DA4(v66, v67, v68);
    swift_beginAccess(v61 + 24, &v102, 0, 0);
    v69 = sqlite3_step(*(sqlite3_stmt **)(v61 + 24));
    if (v69 != 100)
      break;
    v70 = v13;
    v71 = swift_retain_n(v61, 2);
    v72 = sub_100AFAD48(v71, 0);
    if (v72)
    {
      v73 = v72;
      swift_retain(v72);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v74);
      v76 = *(_QWORD *)((v98 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v75 = *(_QWORD *)((v98 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v76 >= v75 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v75 > 1, v76 + 1, 1);
      v62 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v76, v73);
      specialized Array._endMutation()(v62);
      swift_release(v73);
      v55 = v92;
    }
    v63 = swift_release(v61);
    v61 = *((_QWORD *)v6 + 2);
    v64 = *(void **)(*(_QWORD *)(v61 + 16) + 32);
    *v9 = v64;
    v55(v9, v93, v5, v63);
    v65 = v64;
    LOBYTE(v64) = _dispatchPreconditionTest(_:)(v9);
    v13 = v70;
    v70(v9, v5);
    if ((v64 & 1) == 0)
      goto LABEL_23;
  }
  if (v69 && v69 != 101)
  {
    v77 = v69;
    v78 = *((_QWORD *)v6 + 3);
    v79 = *((_QWORD *)v6 + 4);
    v80 = *((_QWORD *)v6 + 5);
    *((_QWORD *)v6 + 3) = v77;
    v81 = v89;
    *v89 = 0;
    v81[1] = 0;
    sub_1006B7DA4(v78, v79, v80);
  }
  v82 = swift_release(v6);
  v83 = v91;
  v84 = *(void **)(*(_QWORD *)(v91 + 16) + 32);
  *v9 = v84;
  v55(v9, v93, v5, v82);
  v85 = v84;
  LOBYTE(v84) = _dispatchPreconditionTest(_:)(v9);
  v13(v9, v5);
  if ((v84 & 1) == 0)
LABEL_27:
    __break(1u);
  swift_beginAccess(v83 + 24, v99, 1, 0);
  v86 = *(sqlite3_stmt **)(v83 + 24);
  if (v86)
  {
    sqlite3_finalize(v86);
    *(_QWORD *)(v83 + 24) = 0;
  }
  swift_release(v91);
  return (double *)v98;
}

void sub_100AC39A4(uint64_t *a1@<X0>, char *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  void *v30;
  uint64_t v31;
  uint64_t inited;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __n128 v67;
  void (*v68)(char *, uint64_t, uint64_t, __n128);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __n128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  char v100[72];
  char v101[24];
  _BYTE v102[24];
  char v103[16];
  void *v104;

  v4 = v3;
  v90 = a3;
  v97 = type metadata accessor for UUID(0);
  v96 = *(_QWORD *)(v97 - 8);
  __chkstk_darwin(v97);
  v99 = (char *)&v86 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v98 = (char *)&v86 - v9;
  v10 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v10);
  v91 = (uint64_t)&v86 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = type metadata accessor for CRLAssetReferrerIdentifier(0);
  __chkstk_darwin(v95);
  v13 = (char *)&v86 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1004B804C(&qword_101406B10);
  __chkstk_darwin(v14);
  v16 = (char *)&v86 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for CRLBoardCRDTData(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v88 = (uint64_t)&v86 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v89 = (uint64_t)&v86 - v21;
  v22 = *a1;
  v94 = a2;
  v23 = &a2[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_transientSyncExclusions];
  swift_beginAccess(&a2[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_transientSyncExclusions], v103, 0, 0);
  v24 = *(_QWORD *)v23;
  v25 = v22 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_boardIdentifier;
  v26 = *(_QWORD *)(*(_QWORD *)v23 + 16);
  v93 = v22;
  if (v26)
  {
    swift_bridgeObjectRetain(v24);
    v27 = sub_100843264(v25);
    if ((v28 & 1) != 0)
    {
      v29 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v24 + 56) + 8 * v27) + 16);
      swift_bridgeObjectRelease();
      v22 = v93;
      if ((v29 & 1) != 0)
      {
        if (qword_1013DD858 == -1)
        {
LABEL_5:
          swift_beginAccess(&static OS_os_log.boardStore, v102, 0, 0);
          v30 = (void *)static OS_os_log.boardStore;
          v31 = sub_1004B804C((uint64_t *)&unk_1013E0180);
          inited = swift_initStackObject(v31, v100);
          *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
          v33 = v30;
          v34 = sub_10067AD38();
          v36 = v35;
          *(_QWORD *)(inited + 56) = &type metadata for String;
          *(_QWORD *)(inited + 64) = sub_1004CFC2C();
          *(_QWORD *)(inited + 32) = v34;
          *(_QWORD *)(inited + 40) = v36;
          v38 = static os_log_type_t.default.getter(v37);
          sub_100A06EBC((uint64_t)v33, &_mh_execute_header, v38, "Excluding board from unsynced changes. Board identifier: %{public}@", 67, 2, inited);
          swift_setDeallocating(inited);
          v39 = sub_1004B804C(&qword_1013E0190);
          swift_arrayDestroy(inited + 32, 1, v39);

          *v90 = 0;
          return;
        }
LABEL_30:
        swift_once(&qword_1013DD858, sub_100A05554);
        goto LABEL_5;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      v22 = v93;
    }
  }
  v40 = (uint64_t *)(v22 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_data);
  v41 = *(_QWORD *)(v22 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_data + 8);
  if (v41 >> 60 == 15)
  {
    v42 = 0;
  }
  else
  {
    v92 = v25;
    v43 = v22;
    v44 = *v40;
    sub_10057939C(*v40, v41);
    sub_10057939C(v44, v41);
    v45 = sub_1004B7878((unint64_t *)&unk_101405DC0, type metadata accessor for CRLBoardCRDTData, (uint64_t)&unk_100F3A2D0);
    swift_retain(v43);
    CRDT.init(serializedData:)(v44, v41, v17, v45);
    if (v4)
    {
      swift_errorRelease(v4);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v16, 1, 1, v17);
      swift_release(v43);
      sub_1004BE2FC(v44, v41);
      sub_1004CB800((uint64_t)v16, &qword_101406B10);
      v42 = 0;
      v4 = 0;
    }
    else
    {
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v16, 0, 1, v17);
      v46 = (uint64_t)v16;
      v47 = v89;
      sub_1004B84E0(v46, v89, type metadata accessor for CRLBoardCRDTData);
      v86 = *(_OWORD *)(v43 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_minRequiredVersions);
      v48 = *(_QWORD *)(v43 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_minRequiredVersions + 16);
      v49 = v88;
      sub_1004B8460(v47, v88, type metadata accessor for CRLBoardCRDTData);
      v50 = (uint64_t *)(v92 + *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20));
      v51 = v50[1];
      v87 = *v50;
      v52 = type metadata accessor for CRLBoardData(0);
      v53 = v44;
      v42 = swift_allocObject(v52, *(unsigned int *)(v52 + 48), *(unsigned __int16 *)(v52 + 52));
      *(_QWORD *)(v42 + 16) = 7;
      *(_OWORD *)(v42 + 24) = v86;
      *(_QWORD *)(v42 + 40) = v48;
      v4 = 0;
      sub_1004B84E0(v49, v42 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, type metadata accessor for CRLBoardCRDTData);
      swift_bridgeObjectRetain(v51);
      swift_release(v43);
      sub_1004BE2FC(v53, v41);
      v54 = (_QWORD *)(v42 + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
      *v54 = v87;
      v54[1] = v51;
      sub_1004B84A4(v89, type metadata accessor for CRLBoardCRDTData);
    }
    v25 = v92;
  }
  sub_1004B8460(v25, (uint64_t)v13, type metadata accessor for CRLBoardIdentifier);
  swift_storeEnumTagMultiPayload(v13, v95, 0);
  v55 = sub_100AB92C4();
  sub_1004B84A4((uint64_t)v13, type metadata accessor for CRLAssetReferrerIdentifier);
  if (v4)
  {
    swift_release(v42);
  }
  else
  {
    v92 = v25;
    v104 = &_swiftEmptySetSingleton;
    if ((unint64_t)v55 >> 62)
    {
      if (v55 < 0)
        v84 = v55;
      else
        v84 = v55 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v55);
      v56 = _CocoaArrayWrapper.endIndex.getter(v84);
    }
    else
    {
      v56 = *(_QWORD *)((v55 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v55);
    }
    v88 = v42;
    v89 = 0;
    if (v56)
    {
      if (v56 < 1)
      {
        __break(1u);
        goto LABEL_30;
      }
      v57 = 0;
      v95 = v55 & 0xC000000000000001;
      v58 = v55;
      v59 = v96;
      v61 = (uint64_t)v98;
      v60 = (uint64_t)v99;
      v62 = v97;
      do
      {
        if (v95)
        {
          v63 = specialized _ArrayBuffer._getElementSlowPath(_:)(v57, v55);
        }
        else
        {
          v63 = *(_QWORD *)(v55 + 8 * v57 + 32);
          swift_retain(v63);
        }
        ++v57;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 16))(v60, v63 + OBJC_IVAR____TtC8Freeform28CRLAssetReferenceDatabaseRow_assetUUID, v62);
        sub_100AD569C(v61, v60);
        (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v61, v62);
        swift_release(v63);
        v55 = v58;
      }
      while (v56 != v57);
    }
    swift_bridgeObjectRelease_n(v55, 2);
    sub_1004B8460(v92, v91, type metadata accessor for CRLBoardIdentifier);
    v64 = v93;
    v95 = *(_QWORD *)(v93 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_minRequiredVersions);
    v65 = *(_QWORD *)(v93 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_minRequiredVersions + 16);
    v92 = *(_QWORD *)(v93 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_minRequiredVersions + 8);
    v87 = v65;
    v66 = v93 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_rootContainerUUID;
    v67 = swift_beginAccess(v93 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_rootContainerUUID, v102, 0, 0);
    v68 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v96 + 16);
    v69 = v97;
    v70 = (uint64_t)v98;
    v68(v98, v66, v97, v67);
    v71 = v64 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_alternateRootContainerUUID;
    v72 = swift_beginAccess(v64 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_alternateRootContainerUUID, v101, 0, 0);
    v73 = (uint64_t)v99;
    v68(v99, v71, v69, v72);
    LODWORD(v97) = *(unsigned __int8 *)(v64 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_isLocalTombstone);
    LOBYTE(v71) = *(_BYTE *)(v64 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_hideFromRecentlyDeleted);
    v74 = *(_QWORD *)(v64 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_unsyncedChanges);
    v75 = v64 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_syncData;
    v76 = *(_QWORD *)(v64 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_syncData);
    v77 = *(_QWORD *)(v75 + 8);
    v78 = (uint64_t)v104;
    v79 = type metadata accessor for CRLBoardSyncLocalChangeRecord(0);
    v80 = swift_allocObject(v79, *(unsigned int *)(v79 + 48), *(unsigned __int16 *)(v79 + 52));
    v81 = v94;
    sub_10057939C(v76, v77);
    v85 = v78;
    v82 = v88;
    v83 = sub_100AF3F94((uint64_t)v81, v91, v95, v92, v87, v70, v73, v97, v71, v88, v74, v76, v77, v85, v80);
    swift_release(v82);
    *v90 = v83;
  }
}

void sub_100AC42C4(uint64_t *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  void *v28;
  uint64_t v29;
  uint64_t inited;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  uint64_t *v62;
  char *v63;
  uint64_t v64;
  char v65[112];
  char v66[24];
  _QWORD v67[3];
  char v68[24];
  _OWORD v69[2];
  uint64_t v70;
  uint64_t v71;

  v8 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *a1;
  v12 = &a2[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_transientSyncExclusions];
  swift_beginAccess(&a2[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_transientSyncExclusions], v68, 0, 0);
  v13 = *(_QWORD *)v12;
  v14 = OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketIndex;
  v15 = v11 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_boardIdentifier;
  if (!*(_QWORD *)(*(_QWORD *)v12 + 16))
    goto LABEL_8;
  v16 = *(_QWORD *)(v11 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketIndex);
  swift_bridgeObjectRetain(v13);
  v17 = sub_100843264(v15);
  if ((v18 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  v19 = *(_QWORD *)(v13 + 56);
  v64 = a3;
  v20 = v15;
  v21 = a4;
  v22 = v14;
  v23 = a2;
  v24 = v10;
  v25 = *(_QWORD *)(v19 + 8 * v17);
  swift_beginAccess(v25 + 32, v66, 0, 0);
  v26 = *(_QWORD *)(v25 + 32);
  v10 = v24;
  a2 = v23;
  v14 = v22;
  a4 = v21;
  v15 = v20;
  a3 = v64;
  v27 = sub_100624428(v16, v26);
  swift_bridgeObjectRelease();
  if (!v27)
  {
LABEL_8:
    v39 = *(_QWORD *)a3;
    if (*(_QWORD *)(*(_QWORD *)a3 + 16) && (v40 = sub_100843264(v15), (v41 & 1) != 0))
    {
      v61 = a2;
      v62 = a4;
      v60 = *(_QWORD *)(*(_QWORD *)(v39 + 56) + 8 * v40);
      swift_retain(v60);
    }
    else
    {
      v42 = (_QWORD *)a3;
      v43 = v71;
      v44 = sub_100A80ED8();
      v71 = v43;
      if (v43)
        return;
      v45 = v44;
      if (!v44)
      {
        if (qword_1013DD870 != -1)
          swift_once(&qword_1013DD870, sub_100A059E0);
        swift_beginAccess(&static OS_os_log.dataSync, v67, 0, 0);
        v32 = (id)static OS_os_log.dataSync;
        v59 = static os_log_type_t.error.getter(v32);
        sub_100A06EBC((uint64_t)v32, &_mh_execute_header, v59, "Found a freehandDrawingBucket database row that has no corresponding board database row", 87, 2, (uint64_t)_swiftEmptyArrayStorage);
        goto LABEL_18;
      }
      v61 = a2;
      v62 = a4;
      sub_1004B8460(v44 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_boardIdentifier, (uint64_t)v10, type metadata accessor for CRLBoardIdentifier);
      swift_retain_n(v45, 2);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v42);
      v67[0] = *v42;
      *v42 = 0x8000000000000000;
      sub_100829E5C(v45, (uint64_t)v10, isUniquelyReferenced_nonNull_native);
      *v42 = v67[0];
      swift_bridgeObjectRelease();
      sub_1004B84A4((uint64_t)v10, type metadata accessor for CRLBoardIdentifier);
      v60 = v45;
      swift_release(v45);
    }
    v64 = *(_QWORD *)(v11 + v14);
    sub_1004B8460(v15, (uint64_t)v10, type metadata accessor for CRLBoardIdentifier);
    v47 = *(_QWORD *)(v11 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData);
    v48 = *(_QWORD *)(v11 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData + 8);
    v49 = *(_QWORD *)(v11 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData);
    v50 = *(_QWORD *)(v11 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData + 8);
    v63 = v10;
    v52 = *(_QWORD *)(v11 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData);
    v51 = *(_QWORD *)(v11 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData + 8);
    v53 = *(_OWORD *)(v11 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_minRequiredVersions + 16);
    v69[0] = *(_OWORD *)(v11 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_minRequiredVersions);
    v69[1] = v53;
    v70 = *(_QWORD *)(v11 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_minRequiredVersions + 32);
    v54 = *(_QWORD *)(v11 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_unsyncedChanges);
    v55 = type metadata accessor for CRLFreehandDrawingBucketSyncLocalChangeRecord(0);
    v56 = swift_allocObject(v55, *(unsigned int *)(v55 + 48), *(unsigned __int16 *)(v55 + 52));
    v57 = v61;
    sub_1004BE310(v47, v48);
    sub_10057939C(v49, v50);
    sub_10057939C(v52, v51);
    v58 = sub_100AF7190((uint64_t)v57, v64, (uint64_t)v63, v47, v48, v49, v50, v52, v51, (uint64_t)v69, v54, v56);
    sub_1004BE2FC(v52, v51);
    sub_1004BBBC8(v47, v48);
    swift_release(v60);
    *v62 = v58;
    return;
  }
  if (qword_1013DD858 != -1)
    swift_once(&qword_1013DD858, sub_100A05554);
  swift_beginAccess(&static OS_os_log.boardStore, v67, 0, 0);
  v28 = (void *)static OS_os_log.boardStore;
  v29 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v29, v65);
  *(_OWORD *)(inited + 16) = xmmword_100EF5A10;
  v31 = *(_QWORD *)(v11 + v14);
  *(_QWORD *)(inited + 56) = &type metadata for Int;
  *(_QWORD *)(inited + 64) = &protocol witness table for Int;
  *(_QWORD *)(inited + 32) = v31;
  v32 = v28;
  v33 = sub_10067AD38();
  v35 = v34;
  *(_QWORD *)(inited + 96) = &type metadata for String;
  *(_QWORD *)(inited + 104) = sub_1004CFC2C();
  *(_QWORD *)(inited + 72) = v33;
  *(_QWORD *)(inited + 80) = v35;
  v37 = static os_log_type_t.default.getter(v36);
  sub_100A06EBC((uint64_t)v32, &_mh_execute_header, v37, "Excluding freehand drawing bucket from unsynced changes. Bucket Index: %d, board identifier: %{public}@", 103, 2, inited);
  swift_setDeallocating(inited);
  v38 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(inited + 32, 2, v38);
LABEL_18:

  *a4 = 0;
}

void sub_100AC481C(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t *v23;
  __n128 v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  __n128 v28;
  void (*v29)(uint64_t, uint64_t);
  void *v30;
  uint64_t v31;
  uint64_t inited;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char isUniquelyReferenced_nonNull_native;
  void (*v54)(char *, uint64_t, uint64_t);
  _QWORD *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  id v74;
  id v75;
  char *v76;
  id v77;
  void *v78;
  os_unfair_lock_s *v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  void *v86;
  id v87;
  uint64_t v88;
  unint64_t v89;
  BOOL v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(__n128);
  id v95;
  __n128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  BOOL v102;
  __n128 v103;
  uint64_t v104;
  void (*v105)(char *, uint64_t, uint64_t);
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  id v115;
  uint64_t v116;
  uint64_t v117;
  id v118;
  __n128 v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  void (*v142)(uint64_t, uint64_t);
  char *v143;
  void (*v144)(char *, uint64_t, uint64_t);
  uint64_t v145;
  char *v146;
  char v147[96];
  char v148[8];
  uint64_t v149;
  char v150[8];
  void *v151;

  v135 = a4;
  v7 = sub_1004B804C((uint64_t *)&unk_1013E1A50);
  __chkstk_darwin(v7);
  v132 = (uint64_t)&v127 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1004B804C(&qword_1013E04D0);
  __chkstk_darwin(v9);
  v139 = (char *)&v127 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CRLAssetReferrerIdentifier(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v127 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v14);
  v133 = (uint64_t)&v127 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for UUID(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v138 = (char *)&v127 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v21 = (char *)&v127 - v20;
  v22 = *a1;
  v146 = (char *)a2;
  v23 = (uint64_t *)(a2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_transientSyncExclusions);
  v24 = swift_beginAccess(a2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_transientSyncExclusions, v150, 0, 0);
  v25 = *v23;
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v145 = v22 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_itemUUID;
  v144 = v26;
  ((void (*)(char *, __n128))v26)(v21, v24);
  v134 = v22;
  v27 = v22 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_boardIdentifier;
  swift_bridgeObjectRetain(v25);
  v140 = v27;
  LOBYTE(a2) = sub_100D57564((uint64_t)v21, v27, v25);
  v28 = swift_bridgeObjectRelease();
  v29 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
  v143 = v21;
  v142 = v29;
  ((void (*)(char *, uint64_t, __n128))v29)(v21, v16, v28);
  if ((a2 & 1) != 0)
  {
    if (qword_1013DD858 != -1)
LABEL_51:
      swift_once(&qword_1013DD858, sub_100A05554);
    swift_beginAccess(&static OS_os_log.boardStore, &v149, 0, 0);
    v30 = (void *)static OS_os_log.boardStore;
    v31 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    inited = swift_initStackObject(v31, v147);
    *(_OWORD *)(inited + 16) = xmmword_100EF5A10;
    v33 = (uint64_t)v143;
    v144(v143, v145, v16);
    v34 = v30;
    v35 = UUID.uuidString.getter(v34);
    v37 = v36;
    v142(v33, v16);
    *(_QWORD *)(inited + 56) = &type metadata for String;
    v38 = sub_1004CFC2C();
    *(_QWORD *)(inited + 64) = v38;
    *(_QWORD *)(inited + 32) = v35;
    *(_QWORD *)(inited + 40) = v37;
    v39 = sub_10067AD38();
    *(_QWORD *)(inited + 96) = &type metadata for String;
    *(_QWORD *)(inited + 104) = v38;
    *(_QWORD *)(inited + 72) = v39;
    *(_QWORD *)(inited + 80) = v40;
    v42 = static os_log_type_t.default.getter(v41);
    sub_100A06EBC((uint64_t)v34, &_mh_execute_header, v42, "Excluding board item from unsynced changes item UUID: %{public}@, board identifier: %{public}@", 94, 2, inited);
    swift_setDeallocating(inited);
    v43 = *(_QWORD *)(inited + 16);
    v44 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(inited + 32, v43, v44);
LABEL_4:

    *v135 = 0;
    return;
  }
  v45 = *a3;
  if (*(_QWORD *)(*a3 + 16) && (v46 = sub_100843264(v140), (v47 & 1) != 0))
  {
    v48 = *(_QWORD *)(*(_QWORD *)(v45 + 56) + 8 * v46);
    swift_retain(v48);
    v49 = v141;
  }
  else
  {
    v50 = v141;
    v51 = sub_100A80ED8();
    v49 = v50;
    if (v50)
      return;
    if (!v51)
    {
      if (qword_1013DD870 != -1)
        swift_once(&qword_1013DD870, sub_100A059E0);
      swift_beginAccess(&static OS_os_log.dataSync, &v149, 0, 0);
      v87 = (id)static OS_os_log.dataSync;
      v88 = static os_log_type_t.error.getter(v87);
      sub_100A06EBC((uint64_t)v87, &_mh_execute_header, v88, "Found a boardItem database row that has no corresponding board database row", 75, 2, (uint64_t)_swiftEmptyArrayStorage);

      goto LABEL_31;
    }
    v48 = v51;
    v52 = v133;
    sub_1004B8460(v51 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_boardIdentifier, v133, type metadata accessor for CRLBoardIdentifier);
    swift_retain_n(v48, 2);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a3);
    v149 = *a3;
    *a3 = 0x8000000000000000;
    sub_100829E5C(v48, v52, isUniquelyReferenced_nonNull_native);
    *a3 = v149;
    swift_bridgeObjectRelease();
    sub_1004B84A4(v52, type metadata accessor for CRLBoardIdentifier);
    swift_release(v48);
  }
  v54 = v144;
  v55 = sub_100AF5E90(v134);
  v56 = (uint64_t)&v13[*(int *)(sub_1004B804C((uint64_t *)&unk_1013E1780) + 48)];
  v54(v13, v145, v16);
  sub_1004B8460(v48 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_boardIdentifier, v56, type metadata accessor for CRLBoardIdentifier);
  swift_storeEnumTagMultiPayload(v13, v11, 1);
  v57 = v146;
  v58 = sub_100AB92C4();
  sub_1004B84A4((uint64_t)v13, type metadata accessor for CRLAssetReferrerIdentifier);
  if (v49)
  {
    swift_release(v48);
    swift_release(v55);
    return;
  }
  v127 = v55;
  v128 = v48;
  v151 = &_swiftEmptySetSingleton;
  if ((unint64_t)v58 >> 62)
  {
    if (v58 < 0)
      v125 = v58;
    else
      v125 = v58 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v58);
    v59 = _CocoaArrayWrapper.endIndex.getter(v125);
    swift_bridgeObjectRelease();
  }
  else
  {
    v59 = *(_QWORD *)((v58 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v60 = v134;
  v61 = v145;
  if (v59)
  {
    v141 = 0;
    v137 = *(_QWORD *)&v57[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManagerLock];
    v131 = v58 & 0xC000000000000001;
    v62 = 4;
    v130 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManager;
    v129 = v59;
    while (1)
    {
      v63 = v62 - 4;
      if (v131)
      {
        v64 = specialized _ArrayBuffer._getElementSlowPath(_:)(v62 - 4, v58);
        v65 = v62 - 3;
        if (__OFADD__(v63, 1))
          goto LABEL_50;
      }
      else
      {
        swift_retain(*(_QWORD *)(v58 + 8 * v62));
        v65 = v62 - 3;
        if (__OFADD__(v63, 1))
        {
LABEL_50:
          __break(1u);
          goto LABEL_51;
        }
      }
      v66 = v58;
      v136 = v64;
      v67 = v64 + OBJC_IVAR____TtC8Freeform28CRLAssetReferenceDatabaseRow_assetUUID;
      v68 = v16;
      v69 = v138;
      v54(v138, v64 + OBJC_IVAR____TtC8Freeform28CRLAssetReferenceDatabaseRow_assetUUID, v68);
      v70 = (uint64_t)v143;
      v71 = (uint64_t)v69;
      v16 = v68;
      sub_100AD569C((uint64_t)v143, v71);
      v142(v70, v68);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v137 + 16));
      v72 = v130;
      v73 = *(void **)&v57[v130];
      if (v73)
      {
        v74 = *(id *)&v57[v130];
      }
      else
      {
        v75 = objc_allocWithZone((Class)type metadata accessor for CRLAssetFileManager(0));
        v76 = v57;
        v77 = sub_100C7EE84((uint64_t)v76);

        v78 = *(void **)&v146[v72];
        *(_QWORD *)&v146[v72] = v77;
        v74 = v77;

        v73 = 0;
      }
      v58 = v66;
      v79 = *(os_unfair_lock_s **)(v137 + 16);
      v80 = v73;
      os_unfair_lock_unlock(v79);
      v81 = swift_allocObject(&unk_101292858, 24, 7);
      swift_unknownObjectWeakInit(v81 + 16);
      v82 = swift_allocObject(&unk_101293780, 32, 7);
      v83 = v136;
      *(_QWORD *)(v82 + 16) = v81;
      *(_QWORD *)(v82 + 24) = v83;
      swift_retain(v83);
      v84 = v139;
      sub_100C7857C(v67, 0, 3, (uint64_t (*)(uint64_t, __n128))sub_100B010E4, v139);

      swift_release(v82);
      v85 = type metadata accessor for URL(0);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v85 - 8) + 48))(v84, 1, v85) == 1)
        break;
      swift_release(v83);
      sub_1004CB800((uint64_t)v84, &qword_1013E04D0);
      ++v62;
      v57 = v146;
      v54 = v144;
      v61 = v145;
      if (v65 == v129)
      {
        swift_bridgeObjectRelease();
        v86 = v151;
        v49 = v141;
        v60 = v134;
        goto LABEL_33;
      }
    }
    sub_1004CB800((uint64_t)v84, &qword_1013E04D0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_1013DD870 != -1)
      swift_once(&qword_1013DD870, sub_100A059E0);
    swift_beginAccess(&static OS_os_log.dataSync, &v149, 0, 0);
    v34 = (id)static OS_os_log.dataSync;
    v91 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    v92 = swift_initStackObject(v91, v148);
    *(_OWORD *)(v92 + 16) = xmmword_100EF5E40;
    v93 = (uint64_t)v127;
    if (v127)
    {
      v94 = *(void (**)(__n128))(*v127 + 256);
      v95 = v34;
      v96 = swift_retain(v93);
      v97 = (uint64_t)v143;
      v94(v96);
      swift_release(v93);
      v99 = UUID.uuidString.getter(v98);
      v101 = v100;
      v142(v97, v16);
    }
    else
    {
      v118 = v34;
      v99 = 0;
      v101 = 0;
    }
    *(_QWORD *)(v92 + 56) = &type metadata for String;
    *(_QWORD *)(v92 + 64) = sub_1004CFC2C();
    if (v101)
      v120 = v99;
    else
      v120 = 0;
    v121 = 0xE000000000000000;
    if (v101)
      v121 = v101;
    *(_QWORD *)(v92 + 32) = v120;
    *(_QWORD *)(v92 + 40) = v121;
    v122 = static os_log_type_t.default.getter(v119);
    sub_100A06EBC((uint64_t)v34, &_mh_execute_header, v122, "Skipping item with id %{public}@ when fetching unsynced changes because file for the item's asset doesn't exists", 112, 2, v92);
    swift_release(v128);
    swift_release(v93);
    swift_setDeallocating(v92);
    v123 = *(_QWORD *)(v92 + 16);
    v124 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(v92 + 32, v123, v124);
    swift_release(v136);
    goto LABEL_4;
  }
  swift_bridgeObjectRelease();
  v86 = &_swiftEmptySetSingleton;
LABEL_33:
  swift_bridgeObjectRetain(v86);
  v90 = sub_100AB683C(v89);
  if (v49)
  {
    swift_release(v128);
    swift_bridgeObjectRelease_n(v86, 2);
    swift_release(v127);
    return;
  }
  v102 = v90;
  v103 = swift_bridgeObjectRelease();
  if (!v102)
  {
    swift_release(v128);
    swift_bridgeObjectRelease();
    swift_release(v127);
LABEL_31:
    *v135 = 0;
    return;
  }
  v104 = (uint64_t)v143;
  ((void (*)(char *, uint64_t, uint64_t, __n128))v54)(v143, v61, v16, v103);
  v146 = *(char **)(v60 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_minRequiredVersions);
  v105 = *(void (**)(char *, uint64_t, uint64_t))(v60
                                                         + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_minRequiredVersions
                                                         + 16);
  v145 = *(_QWORD *)(v60 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_minRequiredVersions + 8);
  v144 = v105;
  v142 = *(void (**)(uint64_t, uint64_t))(v60 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_objectOptions);
  v141 = *(_QWORD *)(v60 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_itemTypeValue);
  v106 = v60 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_parentContainerUUID;
  swift_beginAccess(v60 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_parentContainerUUID, &v149, 0, 0);
  v107 = v132;
  sub_1004CB7BC(v106, v132, (uint64_t *)&unk_1013E1A50);
  v108 = v133;
  sub_1004B8460(v140, v133, type metadata accessor for CRLBoardIdentifier);
  LODWORD(v140) = *(unsigned __int8 *)(v60 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_isLocalTombstone);
  v139 = *(char **)(v60 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_unsyncedChanges);
  v110 = *(_QWORD *)(v60 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_syncData);
  v109 = *(_QWORD *)(v60 + OBJC_IVAR____TtC8Freeform23CRLBoardItemDatabaseRow_syncData + 8);
  v111 = type metadata accessor for CRLBoardItemSyncLocalChangeRecord(0);
  v112 = swift_allocObject(v111, *(unsigned int *)(v111 + 48), *(unsigned __int16 *)(v111 + 52));
  v113 = v57;
  v114 = v112;
  v115 = v113;
  sub_10057939C(v110, v109);
  v126 = v109;
  v116 = (uint64_t)v127;
  v117 = sub_100AF6140((uint64_t)v115, v104, (uint64_t)v146, v145, (uint64_t)v144, (uint64_t)v142, v141, v107, v108, v140, (uint64_t)v127, (uint64_t)v139, v110, v126, (uint64_t)v86, v114);
  swift_release(v128);
  swift_release(v116);
  *v135 = v117;
}

uint64_t sub_100AC5540(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t inited;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  _BYTE v18[32];
  _BYTE v19[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v19, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (!Strong)
    return 0;
  v4 = (void *)Strong;
  v5 = sub_100AB58A0();
  if (qword_1013DD870 != -1)
    swift_once(&qword_1013DD870, sub_100A059E0);
  swift_beginAccess(&static OS_os_log.dataSync, v18, 0, 0);
  v6 = (void *)static OS_os_log.dataSync;
  v7 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v7, &v17);
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  v9 = v6;
  v10 = UUID.uuidString.getter(v9);
  v12 = v11;
  *(_QWORD *)(inited + 56) = &type metadata for String;
  v13 = sub_1004CFC2C();
  *(_QWORD *)(inited + 64) = v13;
  *(_QWORD *)(inited + 32) = v10;
  *(_QWORD *)(inited + 40) = v12;
  v14 = static os_log_type_t.error.getter(v13);
  sub_100A06EBC((uint64_t)v9, &_mh_execute_header, v14, "Failed to fetch asset row for assetUUID id %{public}@ when fetching unsynced changes", 84, 2, inited);
  swift_setDeallocating(inited);
  v15 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(inited + 32, 1, v15);

  return v5;
}

void sub_100AC56E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, int a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;

  v36 = a7;
  v34 = a6;
  v35 = a5;
  v31 = a3;
  v32 = a4;
  v37 = a2;
  v30 = a1;
  v8 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v8);
  v33 = (uint64_t)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1004B804C((uint64_t *)&unk_1013E1A50);
  __chkstk_darwin(v10);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DispatchPredicate(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = (uint64_t *)((char *)&v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v38 = v7;
  v22 = *(void **)(v7 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v21 = v22;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v18 + 104))(v21, enum case for DispatchPredicate.onQueue(_:), v17, v19);
  v23 = v22;
  LOBYTE(v22) = _dispatchPreconditionTest(_:)(v21);
  (*(void (**)(_QWORD *, uint64_t))(v18 + 8))(v21, v17);
  if ((v22 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v30, v13);
    sub_1004CB7BC(v31, (uint64_t)v12, (uint64_t *)&unk_1013E1A50);
    v24 = v33;
    sub_1004B8460(v32, v33, type metadata accessor for CRLBoardIdentifier);
    v25 = type metadata accessor for CRLBoardItemDatabaseRow(0);
    swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
    v27 = v34;
    v26 = v35;
    sub_10057939C(v35, v34);
    v28 = sub_100C0227C((uint64_t)v16, 0x1000000000000, 0x2000400000000, 0x1000000000000, 0, (uint64_t)v12, v24, v37, 0, 0xF000000000000000, 0, 0xF000000000000000, v36 & 1, 0, v26, v27);
    sub_100A88B38(v28);
    swift_release(v28);
  }
  else
  {
    __break(1u);
  }
}

void sub_100AC5964(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  id v21;
  __n128 v22;
  double v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;

  v34 = a4;
  v35 = a5;
  v31 = a2;
  v32 = a3;
  v30 = a1;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v33 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v30 - v10;
  v12 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchPredicate(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (uint64_t *)((char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v36 = v5;
  v20 = *(void **)(v5 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v19 = v20;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v16 + 104))(v19, enum case for DispatchPredicate.onQueue(_:), v15, v17);
  v21 = v20;
  LOBYTE(v20) = _dispatchPreconditionTest(_:)(v19);
  (*(void (**)(_QWORD *, uint64_t))(v16 + 8))(v19, v15);
  if ((v20 & 1) != 0)
  {
    v23 = static Date.timeIntervalSinceReferenceDate.getter(v22);
    sub_1004B8460(v30, (uint64_t)v14, type metadata accessor for CRLBoardIdentifier);
    v24 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v24(v11, v31, v6);
    v25 = (uint64_t)v33;
    v24(v33, v32, v6);
    v26 = type metadata accessor for CRLBoardDatabaseRow(0);
    swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
    v28 = v34;
    v27 = v35;
    sub_10057939C(v34, v35);
    v29 = sub_1009FFA00((uint64_t)v14, 0x1000000000000, 0x2000400000000, 0x1000000000000, (uint64_t)v11, v25, 0, 0xF000000000000000, v23, v23, 1, 0, 0, v28, v27, 0, 0, 0xF000000000000000, 0);
    sub_100A92830(v29);
    swift_release(v29);
  }
  else
  {
    __break(1u);
  }
}

sqlite3_int64 sub_100AC5BD0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *, _QWORD, uint64_t), uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  _QWORD *v22;
  void *v23;
  void (*v24)(_QWORD, __n128);
  id v25;
  void (*v26)(_QWORD *, uint64_t);
  _QWORD *v27;
  void (*v28)(_QWORD *, uint64_t);
  uint64_t v29;
  sqlite3_int64 result;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  Swift::String v52;
  Swift::String v53;
  Swift::String v54;
  Swift::String v55;
  Swift::String v56;
  Swift::String v57;
  Swift::String v58;
  Swift::String v59;
  Swift::String v60;
  Swift::String v61;
  Swift::String v62;
  Swift::String v63;
  Swift::String v64;
  Swift::String v65;
  Swift::String v66;
  Swift::String v67;
  Swift::String v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void (*v78)(_QWORD *, uint64_t);
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  void *v85;
  void (*v86)(_QWORD *, uint64_t);
  uint64_t v87;
  _QWORD *v88;
  id v89;
  sqlite3_stmt **v90;
  int v91;
  void *v92;
  uint64_t v93;
  _QWORD *v94;
  id v95;
  int v96;
  unint64_t v97;
  uint64_t v98;
  __n128 v99;
  void *v100;
  uint64_t v101;
  _QWORD *v102;
  id v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  void *v107;
  void (*v108)(_QWORD *, uint64_t);
  uint64_t v109;
  unsigned int v110;
  void (*v111)(_QWORD *, _QWORD, uint64_t);
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  char v125[32];

  v7 = v6;
  v119 = a3;
  v120 = a6;
  v118 = a5;
  v116 = a2;
  v117 = type metadata accessor for CRLAssetReferrerIdentifier(0);
  __chkstk_darwin(v117);
  v11 = (char *)&v104 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = sub_1004B804C(&qword_1014053F8);
  __chkstk_darwin(v121);
  v114 = (uint64_t)&v104 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v115 = (uint64_t)&v104 - v14;
  __chkstk_darwin(v15);
  v17 = (char *)&v104 - v16;
  v18 = type metadata accessor for DispatchPredicate(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v22 = (uint64_t *)((char *)&v104 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v23 = *(void **)(v6 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v22 = v23;
  v24 = *(void (**)(_QWORD, __n128))(v19 + 104);
  v110 = enum case for DispatchPredicate.onQueue(_:);
  v111 = (void (*)(_QWORD *, _QWORD, uint64_t))v24;
  v24(v22, v20);
  v25 = v23;
  LOBYTE(v23) = _dispatchPreconditionTest(_:)(v22);
  v26 = *(void (**)(_QWORD, _QWORD))(v19 + 8);
  v112 = v22;
  v113 = v18;
  v27 = v22;
  v28 = (void (*)(_QWORD *, uint64_t))v26;
  v26(v27, v18);
  if ((v23 & 1) == 0)
  {
    __break(1u);
    __break(1u);
    goto LABEL_30;
  }
  v29 = v122;
  result = sub_100A84CA0((uint64_t)v17, a1, a4);
  if (v29)
    return result;
  v32 = (uint64_t)v17;
  v108 = v28;
  v122 = v7;
  v109 = a1;
  v33 = *(int *)(v121 + 48);
  v34 = *(int *)(v121 + 64);
  *(_QWORD *)&v17[v33] = result;
  v17[v34] = v31 & 1;
  if ((v31 & 1) == 0)
  {
    sub_100AC56E8(v109, v116, v119, (uint64_t)a4, v118, v120, 1);
    return sub_1004CB800(v32, &qword_1014053F8);
  }
  v35 = (uint64_t)&v11[*(int *)(sub_1004B804C((uint64_t *)&unk_1013E1780) + 48)];
  v36 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v11, v109, v36);
  sub_1004B8460((uint64_t)a4, v35, type metadata accessor for CRLBoardIdentifier);
  swift_storeEnumTagMultiPayload(v11, v117, 1);
  sub_100A8A7E4((uint64_t)v11);
  sub_1004B84A4((uint64_t)v11, type metadata accessor for CRLAssetReferrerIdentifier);
  v117 = 0;
  v105 = v120 >> 60;
  v37 = 0x645F636E79732C20;
  if (v120 >> 60 == 15)
    v37 = 0;
  v116 = v37;
  v38 = 0xEF3F203D20617461;
  if (v120 >> 60 == 15)
    v38 = 0xE000000000000000;
  v107 = (void *)v38;
  v39 = v121;
  v40 = *(int *)(v121 + 48);
  v41 = *(int *)(v121 + 64);
  v42 = v115;
  sub_1004CB7BC((uint64_t)v17, v115, (uint64_t *)&unk_1013E1A50);
  v106 = v33;
  v43 = *(_QWORD *)&v17[v33];
  *(_QWORD *)(v42 + v40) = v43;
  LOBYTE(v40) = v17[v34];
  *(_BYTE *)(v42 + v41) = v40;
  v44 = *(int *)(v39 + 48);
  v45 = *(int *)(v39 + 64);
  v46 = v17;
  v47 = (uint64_t)v17;
  v48 = v114;
  sub_1004CB7BC(v47, v114, (uint64_t *)&unk_1013E1A50);
  *(_QWORD *)(v48 + v44) = v43;
  *(_BYTE *)(v48 + v45) = v40;
  if (v43)
  {
    sub_1004CB800(v48, &qword_1014053F8);
    sub_1004CB800(v42, (uint64_t *)&unk_1013E1A50);
    if (v43 != 16)
    {
      v49 = 0;
      v50 = (void *)0xE000000000000000;
      goto LABEL_16;
    }
  }
  else
  {
    sub_1004CB800(v48, &qword_1014053F8);
    sub_1004CB800(v42, (uint64_t *)&unk_1013E1A50);
  }
  v123 = 0;
  v124 = 0xE000000000000000;
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  v49 = 0xD000000000000029;
  v50 = (void *)0x8000000100FF4EB0;
LABEL_16:
  v51 = v122;
  v123 = 0;
  v124 = 0xE000000000000000;
  _StringGuts.grow(_:)(67);
  v52._countAndFlagsBits = 0x20455441445055;
  v52._object = (void *)0xE700000000000000;
  String.append(_:)(v52);
  v53._countAndFlagsBits = 0x74695F6472616F62;
  v53._object = (void *)0xEB00000000736D65;
  String.append(_:)(v53);
  v54._countAndFlagsBits = 0x2054455320;
  v54._object = (void *)0xE500000000000000;
  String.append(_:)(v54);
  v55._countAndFlagsBits = 0x755F746E65726170;
  v55._object = (void *)0xEB00000000646975;
  String.append(_:)(v55);
  v56._countAndFlagsBits = 0x202C3F203D20;
  v56._object = (void *)0xE600000000000000;
  String.append(_:)(v56);
  v57._countAndFlagsBits = 0x6E6F7473626D6F74;
  v57._object = (void *)0xEA00000000006465;
  String.append(_:)(v57);
  v58._countAndFlagsBits = 0x202C31203D20;
  v58._object = (void *)0xE600000000000000;
  String.append(_:)(v58);
  v59._countAndFlagsBits = v49;
  v59._object = v50;
  String.append(_:)(v59);
  swift_bridgeObjectRelease();
  v60._countAndFlagsBits = 32;
  v60._object = (void *)0xE100000000000000;
  String.append(_:)(v60);
  v61._object = (void *)0x8000000100FEEB40;
  v61._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v61);
  v62._countAndFlagsBits = 1059077408;
  v62._object = (void *)0xE400000000000000;
  String.append(_:)(v62);
  v63._countAndFlagsBits = v116;
  v63._object = v107;
  String.append(_:)(v63);
  swift_bridgeObjectRelease();
  v64._countAndFlagsBits = 0x2820455245485720;
  v64._object = (void *)0xE800000000000000;
  String.append(_:)(v64);
  v65._object = (void *)0xE900000000000064;
  v65._countAndFlagsBits = 0x6975755F6D657469;
  String.append(_:)(v65);
  v66._countAndFlagsBits = 0x444E41203F203D20;
  v66._object = (void *)0xE900000000000020;
  String.append(_:)(v66);
  v67._object = (void *)0x8000000100FD6350;
  v67._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v67);
  v68._countAndFlagsBits = 0x293F203D20;
  v68._object = (void *)0xE500000000000000;
  String.append(_:)(v68);
  v69 = v123;
  v70 = v124;
  v71 = *(_QWORD *)(v51 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v72 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v72, v125);
  swift_retain(v71);
  v73 = v117;
  v75 = sub_1006B77CC(v74, v69, v70);
  swift_release(v71);
  v32 = (uint64_t)v46;
  if (!v73)
  {
    sub_1006B6214(v119, 1);
    sub_1006B5B50(*(_QWORD *)&v46[v106] & 0xFFFFFFFFFFFFFFEFLL, 2);
    if (v105 <= 0xE)
    {
      v76 = v118;
      v77 = v120;
      sub_1004BE310(v118, v120);
      sub_1006B5E80(v76, v77);
      sub_1004BE2FC(v76, v77);
    }
    v78 = v108;
    v79 = UUID.crl_data()();
    v81 = v80;
    sub_1006B5E80(v79, v80);
    sub_1004BBBC8(v79, v81);
    v82 = sub_10067BA88();
    v84 = v83;
    sub_1006B5E80(v82, v83);
    v85 = *(void **)(*(_QWORD *)(v75 + 16) + 32);
    v86 = v78;
    v88 = v112;
    v87 = v113;
    *v112 = v85;
    v111(v88, v110, v87);
    v89 = v85;
    LOBYTE(v85) = _dispatchPreconditionTest(_:)(v88);
    v86(v88, v87);
    if ((v85 & 1) != 0)
    {
      v90 = (sqlite3_stmt **)(v75 + 24);
      swift_beginAccess(v75 + 24, &v123, 1, 0);
      v91 = sqlite3_step(*(sqlite3_stmt **)(v75 + 24));
      if (v91 != 101)
      {
        v96 = v91;
        v97 = sub_1006B79EC();
        swift_allocError(&type metadata for SQLiteError, v97, 0, 0);
        *(_DWORD *)v98 = v96;
        *(_QWORD *)(v98 + 8) = 0xD000000000000024;
        *(_QWORD *)(v98 + 16) = 0x8000000100FF0A60;
        swift_willThrow(v99);
        sub_1004BBBC8(v82, v84);
        v100 = *(void **)(*(_QWORD *)(v75 + 16) + 32);
        v102 = v112;
        v101 = v113;
        *v112 = v100;
        v111(v102, v110, v101);
        v103 = v100;
        LOBYTE(v100) = _dispatchPreconditionTest(_:)(v102);
        v86(v102, v101);
        if ((v100 & 1) != 0)
        {
          v32 = (uint64_t)v46;
          if (*v90)
          {
            sqlite3_finalize(*v90);
            *v90 = 0;
          }
          goto LABEL_24;
        }
LABEL_32:
        __break(1u);
      }
      sub_1004BBBC8(v82, v84);
      v92 = *(void **)(*(_QWORD *)(v75 + 16) + 32);
      v94 = v112;
      v93 = v113;
      *v112 = v92;
      v111(v94, v110, v93);
      v95 = v92;
      LOBYTE(v92) = _dispatchPreconditionTest(_:)(v94);
      v86(v94, v93);
      if ((v92 & 1) != 0)
      {
        v32 = (uint64_t)v46;
        if (*v90)
        {
          sqlite3_finalize(*v90);
          *v90 = 0;
        }
LABEL_24:
        swift_release(v75);
        return sub_1004CB800(v32, &qword_1014053F8);
      }
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  return sub_1004CB800(v32, &qword_1014053F8);
}

void sub_100AC6524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  void (*v17)(_QWORD, __n128);
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  double v46;
  void *v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  id v53;
  sqlite3_stmt **v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  unint64_t v65;
  __n128 v66;
  void *v67;
  id v68;
  _QWORD *v69;
  uint64_t v70;
  int v71;
  unint64_t v72;
  uint64_t v73;
  __n128 v74;
  void *v75;
  id v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unsigned int v80;
  void (*v81)(_QWORD *, _QWORD, uint64_t);
  void (*v82)(_QWORD *, uint64_t);
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  _BYTE v86[32];

  v7 = v5;
  v83 = a5;
  v79 = a4;
  v11 = type metadata accessor for DispatchPredicate(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (unint64_t *)((char *)&v78 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = *(void **)(v5 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v15 = v16;
  v17 = *(void (**)(_QWORD, __n128))(v12 + 104);
  v80 = enum case for DispatchPredicate.onQueue(_:);
  v81 = (void (*)(_QWORD *, _QWORD, uint64_t))v17;
  v17(v15, v13);
  v18 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)(v15);
  v82 = *(void (**)(_QWORD *, uint64_t))(v12 + 8);
  v82(v15, v11);
  if ((v16 & 1) == 0)
  {
    __break(1u);
LABEL_27:
    __break(1u);
    __break(1u);
    goto LABEL_28;
  }
  v19 = sub_100A80ED8();
  if (v6)
    return;
  v20 = v19;
  if (!v19)
  {
    sub_100AC5964(a1, a2, a3, v79, v83);
    return;
  }
  v78 = v83 >> 60;
  if (v83 >> 60 == 15)
    v21 = 0;
  else
    v21 = 0x7461645F636E7973;
  if (v83 >> 60 == 15)
    v22 = (void *)0xE000000000000000;
  else
    v22 = (void *)0xEE002C3F203D2061;
  v84 = 0;
  v85 = 0xE000000000000000;
  _StringGuts.grow(_:)(52);
  v23._countAndFlagsBits = 0x20455441445055;
  v23._object = (void *)0xE700000000000000;
  String.append(_:)(v23);
  v24._countAndFlagsBits = 0x736472616F62;
  v24._object = (void *)0xE600000000000000;
  String.append(_:)(v24);
  v25._countAndFlagsBits = 0x2054455320;
  v25._object = (void *)0xE500000000000000;
  String.append(_:)(v25);
  v26._countAndFlagsBits = 0x6E6F7473626D6F74;
  v26._object = (void *)0xEA00000000006465;
  String.append(_:)(v26);
  v27._countAndFlagsBits = 0x202C31203D20;
  v27._object = (void *)0xE600000000000000;
  String.append(_:)(v27);
  v28._object = (void *)0x8000000100FEEB40;
  v28._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v28);
  v29._countAndFlagsBits = 0x202C3F203D20;
  v29._object = (void *)0xE600000000000000;
  String.append(_:)(v29);
  v30._countAndFlagsBits = v21;
  v30._object = v22;
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  v31._countAndFlagsBits = 10;
  v31._object = (void *)0xE100000000000000;
  String.append(_:)(v31);
  v32._countAndFlagsBits = 0x6E6F7473626D6F74;
  v32._object = (void *)0xEE00657461645F65;
  String.append(_:)(v32);
  v33._countAndFlagsBits = 0x4548570A3F203D20;
  v33._object = (void *)0xEB00000000204552;
  String.append(_:)(v33);
  v34._object = (void *)0x8000000100FD6350;
  v34._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v34);
  v35._countAndFlagsBits = 1059077408;
  v35._object = (void *)0xE400000000000000;
  String.append(_:)(v35);
  v36 = v84;
  v37 = v85;
  v38 = *(_QWORD *)(v7 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v39 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v39, v86);
  swift_retain(v38);
  v41 = sub_1006B77CC(v40, v36, v37);
  swift_release(v38);
  sub_1006B5B50(*(_QWORD *)(v20 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_unsyncedChanges) & 0xFFFFFFFFFFFFFFFBLL, 1);
  if (v78 <= 0xE)
  {
    v44 = v79;
    v45 = v83;
    sub_1004BE310(v79, v83);
    sub_1006B5E80(v44, v45);
    sub_1004BE2FC(v44, v45);
    v42 = v41;
    v43 = 3;
  }
  else
  {
    v42 = v41;
    v43 = 2;
  }
  v79 = v20;
  v46 = *(double *)(v20 + OBJC_IVAR____TtC8Freeform19CRLBoardDatabaseRow_tombstoneDate);
  v47 = *(void **)(*(_QWORD *)(v42 + 16) + 32);
  *v15 = v47;
  v81(v15, v80, v11);
  v48 = v47;
  LOBYTE(v47) = _dispatchPreconditionTest(_:)(v15);
  v82(v15, v11);
  if ((v47 & 1) == 0)
    goto LABEL_27;
  v83 = v42 + 24;
  swift_beginAccess(v42 + 24, &v84, 1, 0);
  sqlite3_bind_double(*(sqlite3_stmt **)(v42 + 24), v43, v46);
  v49 = sub_10067BA88();
  v51 = v50;
  sub_1006B5E80(v49, v50);
  sub_1004BBBC8(v49, v51);
  v52 = *(void **)(*(_QWORD *)(v42 + 16) + 32);
  *v15 = v52;
  v81(v15, v80, v11);
  v53 = v52;
  LOBYTE(v52) = _dispatchPreconditionTest(_:)(v15);
  v82(v15, v11);
  if ((v52 & 1) == 0)
  {
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
  }
  v54 = (sqlite3_stmt **)v83;
  v55 = sqlite3_step(*(sqlite3_stmt **)v83);
  if (v55 == 101)
  {
    v56 = sub_1004B804C(&qword_1013E7870);
    v57 = type metadata accessor for CRLBoardIdentifier(0);
    v78 = v42;
    v58 = *(_QWORD *)(v57 - 8);
    v59 = *(_QWORD *)(v58 + 72);
    v60 = *(unsigned __int8 *)(v58 + 80);
    v61 = (v60 + 32) & ~v60;
    v62 = swift_allocObject(v56, v61 + v59, v60 | 7);
    *(_OWORD *)(v62 + 16) = xmmword_100EF5E40;
    v63 = v62 + v61;
    sub_1004B8460(a1, v63, type metadata accessor for CRLBoardIdentifier);
    v64 = sub_1004B5A78(v62);
    swift_setDeallocating(v62);
    swift_arrayDestroy(v63, 1, v57);
    swift_deallocClassInstance(v62, 32, 7);
    sub_100A75388((uint64_t)v64, (uint64_t)&_swiftEmptySetSingleton, 0);
    v65 = v78;
    v66 = swift_bridgeObjectRelease();
    v67 = *(void **)(*(_QWORD *)(v65 + 16) + 32);
    *v15 = v67;
    ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v81)(v15, v80, v11, v66);
    v68 = v67;
    LOBYTE(v67) = _dispatchPreconditionTest(_:)(v15);
    v82(v15, v11);
    if ((v67 & 1) != 0)
    {
      v69 = (_QWORD *)v83;
      v70 = v79;
      if (*(_QWORD *)v83)
      {
        sqlite3_finalize(*(sqlite3_stmt **)v83);
        *v69 = 0;
      }
      swift_release(v65);
      swift_release(v70);
      return;
    }
    goto LABEL_29;
  }
  v71 = v55;
  v72 = sub_1006B79EC();
  swift_allocError(&type metadata for SQLiteError, v72, 0, 0);
  *(_DWORD *)v73 = v71;
  *(_QWORD *)(v73 + 8) = 0xD000000000000024;
  *(_QWORD *)(v73 + 16) = 0x8000000100FF0A60;
  swift_willThrow(v74);
  v75 = *(void **)(*(_QWORD *)(v42 + 16) + 32);
  *v15 = v75;
  v81(v15, v80, v11);
  v76 = v75;
  LOBYTE(v75) = _dispatchPreconditionTest(_:)(v15);
  v82(v15, v11);
  v77 = v79;
  if ((v75 & 1) == 0)
    goto LABEL_30;
  if (*v54)
  {
    sqlite3_finalize(*v54);
    *(_QWORD *)(v42 + 24) = 0;
  }
  swift_release(v42);
  swift_release(v77);
}

void sub_100AC6C6C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  char v25;
  char isUniquelyReferenced_nonNull_native;
  int v27;
  void *v28;
  uint64_t v29;
  uint64_t inited;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  char v47[152];
  uint64_t v48[4];
  unint64_t v49;

  v8 = v6;
  v44 = a6;
  v49 = a4;
  v46 = a3;
  v45 = a2;
  v11 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchPredicate(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (_QWORD *)((char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = *(void **)(v8 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v18 = v19;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v15 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v14, v16);
  v20 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)(v18);
  (*(void (**)(_QWORD *, uint64_t))(v15 + 8))(v18, v14);
  if ((v19 & 1) == 0)
  {
    __break(1u);
LABEL_19:
    swift_once(&qword_1013DD870, sub_100A059E0);
    goto LABEL_12;
  }
  v21 = *a5;
  if (*(_QWORD *)(*a5 + 16) && (v22 = sub_100843264(a1), (v23 & 1) != 0))
  {
    if ((*(_BYTE *)(*(_QWORD *)(v21 + 56) + v22) & 1) == 0)
      return;
  }
  else
  {
    v24 = sub_100A84060(a1, 1);
    if (v7)
      return;
    v25 = v24;
    sub_1004B8460(a1, (uint64_t)v13, type metadata accessor for CRLBoardIdentifier);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a5);
    v48[0] = *a5;
    *a5 = 0x8000000000000000;
    sub_100829E78(v25 & 1, (uint64_t)v13, isUniquelyReferenced_nonNull_native);
    *a5 = v48[0];
    swift_bridgeObjectRelease();
    sub_1004B84A4((uint64_t)v13, type metadata accessor for CRLBoardIdentifier);
    if ((v25 & 1) == 0)
      return;
  }
  LOBYTE(v15) = v44;
  if ((v44 & 1) != 0)
    v27 = 2;
  else
    v27 = 1;
  v43 = v27;
  if (qword_1013DD870 != -1)
    goto LABEL_19;
LABEL_12:
  swift_beginAccess(&static OS_os_log.dataSync, v48, 0, 0);
  v28 = (void *)static OS_os_log.dataSync;
  v29 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v29, v47);
  *(_OWORD *)(inited + 16) = xmmword_100EF5550;
  v31 = sub_1004CFC2C();
  v32 = v31;
  v33 = 0x676E696772654DLL;
  if ((v15 & 1) != 0)
    v33 = 0x746972777265764FLL;
  v34 = 0xE700000000000000;
  if ((v15 & 1) != 0)
    v34 = 0xEB00000000676E69;
  *(_QWORD *)(inited + 56) = &type metadata for String;
  *(_QWORD *)(inited + 64) = v31;
  *(_QWORD *)(inited + 32) = v33;
  *(_QWORD *)(inited + 40) = v34;
  v35 = v45;
  v36 = *(_QWORD *)(v45 + OBJC_IVAR____TtC8Freeform34CRLFreehandDrawingBucketSyncRecord_bucketIndex);
  *(_QWORD *)(inited + 96) = &type metadata for Int;
  *(_QWORD *)(inited + 104) = &protocol witness table for Int;
  *(_QWORD *)(inited + 72) = v36;
  v37 = v28;
  v38 = UUID.uuidString.getter(v37);
  *(_QWORD *)(inited + 136) = &type metadata for String;
  *(_QWORD *)(inited + 144) = v32;
  *(_QWORD *)(inited + 112) = v38;
  *(_QWORD *)(inited + 120) = v39;
  v41 = static os_log_type_t.info.getter(v40);
  sub_100A06EBC((uint64_t)v37, &_mh_execute_header, v41, "%{public}@ freehand bucket with index %{public}d, boardID: %{public}@", 69, 2, inited);
  swift_setDeallocating(inited);
  v42 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(inited + 32, 3, v42);

  sub_100AA894C(v35, a1, v43, v46, v49);
}

uint64_t sub_100AC7008(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  id v20;
  uint64_t result;
  uint64_t v22;
  char v23;
  char v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v8 = v6;
  v28 = a4;
  v29 = a5;
  v26 = a2;
  v27 = a3;
  v11 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchPredicate(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (uint64_t *)((char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = *(void **)(v8 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v18 = v19;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v15 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v14, v16);
  v20 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)(v18);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v15 + 8))(v18, v14);
  if ((v19 & 1) == 0)
  {
    __break(1u);
    return result;
  }
  v22 = *a6;
  if (*(_QWORD *)(*a6 + 16))
  {
    result = sub_100843264(a1);
    if ((v23 & 1) != 0)
    {
      if ((*(_BYTE *)(*(_QWORD *)(v22 + 56) + result) & 1) == 0)
        return result;
      return sub_100AA7910(v26, a1, 1, v27, v28, v29);
    }
  }
  result = sub_100A84060(a1, 1);
  if (!v7)
  {
    v24 = result;
    sub_1004B8460(a1, (uint64_t)v13, type metadata accessor for CRLBoardIdentifier);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a6);
    v30 = *a6;
    *a6 = 0x8000000000000000;
    sub_100829E78(v24 & 1, (uint64_t)v13, isUniquelyReferenced_nonNull_native);
    *a6 = v30;
    swift_bridgeObjectRelease();
    result = sub_1004B84A4((uint64_t)v13, type metadata accessor for CRLBoardIdentifier);
    if ((v24 & 1) != 0)
      return sub_100AA7910(v26, a1, 1, v27, v28, v29);
  }
  return result;
}

_QWORD *sub_100AC71F0(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, void (*a6)(_QWORD *, _QWORD, uint64_t), int a7, uint64_t a8, unint64_t a9, _QWORD *a10, unsigned __int8 a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  _QWORD *v41;
  void *v42;
  id v43;
  uint64_t v44;
  void (*v45)(_QWORD *, _QWORD, uint64_t);
  unint64_t v46;
  char v47;
  uint64_t v48;
  unint64_t v49;
  unsigned int (*v50)(char *, uint64_t, uint64_t);
  uint64_t v51;
  char v52;
  char v53;
  char isUniquelyReferenced_nonNull_native;
  char *v55;
  uint64_t v56;
  unsigned int v57;
  void (*v58)(char *, char *, uint64_t);
  char *v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t inited;
  id v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  __n128 v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  _QWORD *v92;
  BOOL v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  int v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  void (*v101)(_QWORD *, _QWORD, uint64_t);
  uint64_t v102;
  uint64_t v103;
  __n128 v104;
  uint64_t v105;
  char v106;
  _QWORD *v107;
  uint64_t v108;
  _QWORD *v109;
  char v110;
  char v111;
  void (*v112)(__n128);
  __n128 v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  id v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  __n128 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void (*v128)(char *, char *, uint64_t);
  char *v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  int v141;
  char *v142;
  unint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void (*v149)(_QWORD *, _QWORD, uint64_t);
  uint64_t v150;
  uint64_t v151;
  char v152[24];
  char v153[72];
  uint64_t v154[4];
  uint64_t v155;

  v140 = a8;
  v141 = a7;
  v149 = a6;
  v137 = a5;
  v144 = a3;
  v145 = a4;
  v133 = a2;
  v146 = a1;
  v134 = sub_1004B804C((uint64_t *)&unk_1013F62D0);
  __chkstk_darwin(v134);
  v135 = (uint64_t)&v128 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1004B804C((uint64_t *)&unk_1013E1A50);
  __chkstk_darwin(v13);
  v131 = (char *)&v128 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v147 = (uint64_t)&v128 - v16;
  __chkstk_darwin(v17);
  v130 = (char *)&v128 - v18;
  __chkstk_darwin(v19);
  v132 = (uint64_t)&v128 - v20;
  __chkstk_darwin(v21);
  v136 = (char *)&v128 - v22;
  __chkstk_darwin(v23);
  v138 = (uint64_t)&v128 - v24;
  __chkstk_darwin(v25);
  v27 = (char *)&v128 - v26;
  v28 = type metadata accessor for UUID(0);
  v143 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v129 = (char *)&v128 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v139 = (char *)&v128 - v31;
  __chkstk_darwin(v32);
  v142 = (char *)&v128 - v33;
  v34 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v34);
  v36 = (char *)&v128 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for DispatchPredicate(0);
  v38 = *(_QWORD *)(v37 - 8);
  v39 = __chkstk_darwin(v37);
  v41 = (void (**)(char *, char *, uint64_t))((char *)&v128 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0));
  v148 = v11;
  v42 = *(void **)(v11 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v41 = v42;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v38 + 104))(v41, enum case for DispatchPredicate.onQueue(_:), v37, v39);
  v43 = v42;
  LOBYTE(v42) = _dispatchPreconditionTest(_:)(v41);
  (*(void (**)(_QWORD *, uint64_t))(v38 + 8))(v41, v37);
  if ((v42 & 1) == 0)
  {
    __break(1u);
    goto LABEL_52;
  }
  v44 = *a10;
  v45 = v149;
  if (*(_QWORD *)(*a10 + 16))
  {
    v46 = sub_100843264((uint64_t)v149);
    if ((v47 & 1) != 0)
    {
      if ((*(_BYTE *)(*(_QWORD *)(v44 + 56) + v46) & 1) != 0)
        goto LABEL_5;
      return 0;
    }
  }
  v51 = v155;
  v52 = sub_100A84060((uint64_t)v45, 1);
  if (!v51)
  {
    v53 = v52;
    v155 = 0;
    sub_1004B8460((uint64_t)v45, (uint64_t)v36, type metadata accessor for CRLBoardIdentifier);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a10);
    v154[0] = *a10;
    *a10 = 0x8000000000000000;
    sub_100829E78(v53 & 1, (uint64_t)v36, isUniquelyReferenced_nonNull_native);
    *a10 = v154[0];
    swift_bridgeObjectRelease();
    sub_1004B84A4((uint64_t)v36, type metadata accessor for CRLBoardIdentifier);
    if ((v53 & 1) != 0)
    {
LABEL_5:
      v48 = v145;
      sub_1004CB7BC(v145, (uint64_t)v27, (uint64_t *)&unk_1013E1A50);
      v49 = v143;
      v50 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v143 + 48);
      if (v50(v27, 1, v28) == 1)
      {
        sub_1004CB800((uint64_t)v27, (uint64_t *)&unk_1013E1A50);
        goto LABEL_27;
      }
      v55 = v142;
      v128 = *(void (**)(char *, char *, uint64_t))(v49 + 32);
      v128(v142, v27, v28);
      v56 = v137;
      v57 = v50((char *)v137, 1, v28);
      v58 = *(void (**)(char *, char *, uint64_t))(v49 + 16);
      v59 = v139;
      v58(v139, v55, v28);
      v60 = v56;
      v61 = v138;
      sub_1004CB7BC(v60, v138, (uint64_t *)&unk_1013E1A50);
      if (v57 == 1)
      {
        sub_1004CB800(v61, (uint64_t *)&unk_1013E1A50);
        v62 = *(void (**)(char *, uint64_t))(v49 + 8);
        v62(v59, v28);
        v63 = (uint64_t)v142;
      }
      else
      {
        v64 = (uint64_t)v136;
        v58(v136, v59, v28);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v49 + 56))(v64, 0, 1, v28);
        v65 = v135;
        v66 = v135 + *(int *)(v134 + 48);
        sub_1004CB7BC(v64, v135, (uint64_t *)&unk_1013E1A50);
        v137 = v66;
        sub_1004CB7BC(v61, v66, (uint64_t *)&unk_1013E1A50);
        if (v50((char *)v65, 1, v28) == 1)
        {
          sub_1004CB800(v64, (uint64_t *)&unk_1013E1A50);
          sub_1004CB800(v61, (uint64_t *)&unk_1013E1A50);
          v62 = *(void (**)(char *, uint64_t))(v49 + 8);
          v62(v59, v28);
          if (v50((char *)v137, 1, v28) == 1)
          {
            sub_1004CB800(v65, (uint64_t *)&unk_1013E1A50);
            v63 = (uint64_t)v142;
            goto LABEL_26;
          }
        }
        else
        {
          v67 = v132;
          sub_1004CB7BC(v65, v132, (uint64_t *)&unk_1013E1A50);
          if (v50((char *)v137, 1, v28) != 1)
          {
            v72 = v129;
            v128(v129, (char *)v137, v28);
            sub_1004B7878((unint64_t *)&qword_1013E4880, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            v73 = v65;
            v74 = dispatch thunk of static Equatable.== infix(_:_:)(v67, v72);
            v49 = v143;
            v75 = v61;
            v62 = *(void (**)(char *, uint64_t))(v143 + 8);
            v62(v72, v28);
            sub_1004CB800((uint64_t)v136, (uint64_t *)&unk_1013E1A50);
            sub_1004CB800(v75, (uint64_t *)&unk_1013E1A50);
            v62(v139, v28);
            v62((char *)v67, v28);
            sub_1004CB800(v73, (uint64_t *)&unk_1013E1A50);
            v63 = (uint64_t)v142;
            if ((v74 & 1) != 0)
              goto LABEL_26;
            goto LABEL_18;
          }
          sub_1004CB800((uint64_t)v136, (uint64_t *)&unk_1013E1A50);
          sub_1004CB800(v61, (uint64_t *)&unk_1013E1A50);
          v49 = v143;
          v62 = *(void (**)(char *, uint64_t))(v143 + 8);
          v62(v139, v28);
          v62((char *)v67, v28);
        }
        v63 = (uint64_t)v142;
        sub_1004CB800(v65, (uint64_t *)&unk_1013F62D0);
      }
LABEL_18:
      v41 = v149;
      v68 = v155;
      v69 = sub_100A84620();
      if (v68)
      {
        v62((char *)v63, v28);
        return v41;
      }
      v155 = 0;
      if ((v69 & 1) == 0)
      {
        v70 = (uint64_t)v130;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v49 + 56))(v130, 1, 1, v28);
        v71 = v155;
        sub_100AC56E8(v63, 2, v70, (uint64_t)v41, 0, 0xF000000000000000, 0);
        v155 = v71;
        if (v71)
        {
          sub_1004CB800(v70, (uint64_t *)&unk_1013E1A50);
          v62((char *)v63, v28);
          return v41;
        }
        sub_1004CB800(v70, (uint64_t *)&unk_1013E1A50);
      }
LABEL_26:
      v62((char *)v63, v28);
      v48 = v145;
LABEL_27:
      v143 = a9;
      v76 = v147;
      sub_1004CB7BC(v48, v147, (uint64_t *)&unk_1013E1A50);
      if (!v144)
      {
        v41 = 0;
        if ((v141 & 1) == 0)
          goto LABEL_49;
        goto LABEL_45;
      }
      LODWORD(v145) = a11;
      v77 = qword_1013DD870;
      swift_retain(v144);
      if (v77 == -1)
      {
LABEL_29:
        swift_beginAccess(&static OS_os_log.dataSync, v152, 0, 0);
        v78 = (void *)static OS_os_log.dataSync;
        v79 = sub_1004B804C((uint64_t *)&unk_1013E0180);
        inited = swift_initStackObject(v79, &v151);
        *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
        v81 = v78;
        v82 = UUID.uuidString.getter(v81);
        v84 = v83;
        *(_QWORD *)(inited + 56) = &type metadata for String;
        v85 = sub_1004CFC2C();
        *(_QWORD *)(inited + 64) = v85;
        *(_QWORD *)(inited + 32) = v82;
        v86 = inited + 32;
        *(_QWORD *)(inited + 40) = v84;
        v88 = static os_log_type_t.info.getter(v87);
        sub_100A06EBC((uint64_t)v81, &_mh_execute_header, v88, "Merging board item data with id %{public}@", 42, 2, inited);
        swift_setDeallocating(inited);
        v89 = sub_1004B804C(&qword_1013E0190);
        swift_arrayDestroy(v86, 1, v89);

        v90 = (void *)static OS_os_log.dataSync;
        v91 = swift_initStackObject(v79, &v150);
        v92 = (_QWORD *)v91;
        *(_OWORD *)(v91 + 16) = xmmword_100EF5550;
        v93 = (v145 & 1) == 0;
        v94 = 0x676E696772654DLL;
        if ((v145 & 1) != 0)
          v94 = 0x746972777265764FLL;
        v95 = 0xE700000000000000;
        if ((v145 & 1) != 0)
          v95 = 0xEB00000000676E69;
        v41 = &type metadata for String;
        *(_QWORD *)(v91 + 56) = &type metadata for String;
        *(_QWORD *)(v91 + 64) = v85;
        *(_QWORD *)(v91 + 32) = v94;
        v96 = v91 + 32;
        *(_QWORD *)(v91 + 40) = v95;
        if (v93)
          v97 = 1;
        else
          v97 = 2;
        v98 = v90;
        v99 = UUID.uuidString.getter(v98);
        v92[12] = &type metadata for String;
        v92[13] = v85;
        v92[9] = v99;
        v92[10] = v100;
        v101 = v149;
        v102 = UUID.uuidString.getter(v99);
        v92[17] = &type metadata for String;
        v92[18] = v85;
        v92[14] = v102;
        v92[15] = v103;
        v105 = static os_log_type_t.info.getter(v104);
        sub_100A06EBC((uint64_t)v98, &_mh_execute_header, v105, "%{public}@ board item with id: %{public}@, boardID: %{public}@", 62, 2, (uint64_t)v92);
        swift_setDeallocating(v92);
        swift_arrayDestroy(v96, 3, v89);
        v106 = v141;

        v107 = v144;
        v108 = v155;
        sub_100A85390(v144, (uint64_t)v101, v97, v140, v143, (v106 & 1) == 0, v106 & 1);
        if (v108)
        {
          swift_release(v107);
          sub_1004CB800(v147, (uint64_t *)&unk_1013E1A50);
          return v41;
        }
        v41 = v109;
        v111 = v110;
        v155 = 0;
        v76 = v147;
        if (v109)
        {
          v112 = *(void (**)(__n128))(*v109 + 264);
          v113 = swift_retain(v109);
          v114 = (uint64_t)v131;
          v112(v113);
          swift_release(v41);
          swift_release(v107);
          sub_1004CB800(v76, (uint64_t *)&unk_1013E1A50);
          sub_1004C4938(v114, v76, (uint64_t *)&unk_1013E1A50);
          if ((v141 & 1) == 0)
            goto LABEL_49;
        }
        else
        {
          swift_release(v107);
          if ((v141 & 1) == 0)
            goto LABEL_49;
        }
        if ((v111 & 0x10) != 0)
          goto LABEL_49;
LABEL_45:
        if (qword_1013DD870 != -1)
          swift_once(&qword_1013DD870, sub_100A059E0);
        swift_beginAccess(&static OS_os_log.dataSync, v154, 0, 0);
        v115 = (void *)static OS_os_log.dataSync;
        v116 = sub_1004B804C((uint64_t *)&unk_1013E0180);
        v117 = swift_initStackObject(v116, v153);
        *(_OWORD *)(v117 + 16) = xmmword_100EF5E40;
        v118 = v115;
        v119 = v146;
        v120 = UUID.uuidString.getter(v118);
        v122 = v121;
        *(_QWORD *)(v117 + 56) = &type metadata for String;
        *(_QWORD *)(v117 + 64) = sub_1004CFC2C();
        *(_QWORD *)(v117 + 32) = v120;
        *(_QWORD *)(v117 + 40) = v122;
        v124 = static os_log_type_t.default.getter(v123);
        sub_100A06EBC((uint64_t)v118, &_mh_execute_header, v124, "Merging a tombstoned BoardItem record with id %{public}@", 56, 2, v117);
        swift_setDeallocating(v117);
        v125 = sub_1004B804C(&qword_1013E0190);
        swift_arrayDestroy(v117 + 32, 1, v125);

        v76 = v147;
        v126 = v155;
        sub_100AC5BD0(v119, v133, v147, v149, v140, v143);
        v155 = v126;
        if (v126)
        {
          swift_release(v41);
          sub_1004CB800(v76, (uint64_t *)&unk_1013E1A50);
          return v41;
        }
LABEL_49:
        sub_1004CB800(v76, (uint64_t *)&unk_1013E1A50);
        return v41;
      }
LABEL_52:
      swift_once(&qword_1013DD870, sub_100A059E0);
      goto LABEL_29;
    }
    return 0;
  }
  return v41;
}

void *sub_100AC7DE4(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  Class v12;
  __n128 v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t (*v33)(__n128);
  __n128 v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t inited;
  uint64_t v52;
  objc_class *v53;
  void *v54;
  _QWORD *v55;
  uint64_t v56;
  objc_class *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  objc_class *v62;
  uint64_t v63;
  objc_class *v64;
  uint64_t v65;
  void *v66;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  _QWORD *v72;
  __int128 v73;
  _QWORD *v74;
  char v75[24];
  char v76[40];
  char v77[40];
  char v78[32];
  uint64_t v79;

  *(_QWORD *)&v73 = a2;
  LODWORD(v71) = a3;
  v5 = sub_1004B804C((uint64_t *)&unk_1013E1A50);
  __chkstk_darwin(v5);
  v7 = (char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v69 - v9;
  v11 = type metadata accessor for DispatchPredicate(0);
  v12 = *(Class *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (uint64_t *)((char *)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = *(char **)(v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v15 = v16;
  (*((void (**)(_QWORD *, _QWORD, uint64_t, __n128))v12 + 13))(v15, enum case for DispatchPredicate.onQueue(_:), v11, v13);
  v17 = v16;
  v18 = _dispatchPreconditionTest(_:)(v15);
  (*((void (**)(_QWORD *, uint64_t))v12 + 1))(v15, v11);
  if ((v18 & 1) == 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  v19 = v3;
  v74 = sub_100AFB244(a1);
  v20 = a1 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_id;
  v70 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_itemTypeValue);
  v21 = a1 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_parentContainerUUID;
  swift_beginAccess(a1 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_parentContainerUUID, v78, 0, 0);
  sub_1004CB7BC(v21, (uint64_t)v10, (uint64_t *)&unk_1013E1A50);
  v22 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v7, 1, 1, v22);
  v23 = (uint64_t)v7;
  v24 = (uint64_t)v10;
  v25 = (void *)(a1 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_boardIdentifier);
  v26 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_tombstoned);
  v27 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_syncData);
  v28 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_syncData + 8);
  sub_10057939C(v27, v28);
  v68 = (_QWORD *)v73;
  v29 = v20;
  v30 = v74;
  *(_QWORD *)&v73 = v24;
  v31 = v72;
  v72 = sub_100AC71F0(v29, v70, v74, v24, v23, (void (*)(_QWORD *, _QWORD, uint64_t))v25, v26, v27, v28, v68, v71 & 1);
  sub_1004BE2FC(v27, v28);
  if (!v31)
  {
    v70 = (uint64_t)v25;
    v69 = v19;
    v71 = 0;
    sub_1004CB800(v23, (uint64_t *)&unk_1013E1A50);
    sub_1004CB800(v73, (uint64_t *)&unk_1013E1A50);
    v32 = v72;
    if (v72 && (v26 & 1) == 0)
    {
      v33 = *(uint64_t (**)(__n128))(*v72 + 568);
      v34 = swift_retain(v72);
      v35 = v33(v34);
      v36 = v71;
      sub_100A63508(v35);
      v38 = v37;
      swift_bridgeObjectRelease();
      v39 = sub_100AF7994(v38);
      v40 = swift_bridgeObjectRelease();
      v41 = (*(uint64_t (**)(__n128))(*v32 + 576))(v40);
      sub_100A63508(v41);
      v43 = v42;
      v25 = v36;
      swift_bridgeObjectRelease();
      v44 = sub_100AF7994(v43);
      swift_bridgeObjectRelease();
      sub_100CA03B4(v44, v39);
      v45 = (uint64_t *)(a1 + OBJC_IVAR____TtC8Freeform28CRLBoardItemSyncRemoteRecord_assets);
      swift_beginAccess(a1 + OBJC_IVAR____TtC8Freeform28CRLBoardItemSyncRemoteRecord_assets, v75, 0, 0);
      v46 = *v45;
      __chkstk_darwin(v47);
      swift_bridgeObjectRetain(v46);
      sub_100AF923C(v48, (void (*)(char *, uint64_t, __n128))sub_100B01134);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release(v32);
      if (v36)
      {
        swift_release(v32);
        swift_release(v74);
        return v25;
      }
      v71 = 0;
    }
    v12 = sub_100B4AD90(v70);
    v16 = *(char **)(a1 + OBJC_IVAR____TtC8Freeform28CRLBoardItemSyncRemoteRecord_minRequiredVersionForSync);
    v49 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_minRequiredVersions + 16);
    v50 = sub_1001E9730();
    v7 = (char *)v50;
    if (v50 >= (unint64_t)v16 && v50 >= v49)
    {
      v55 = v74;
      if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) == 0)
      {
        v25 = &_swiftEmptySetSingleton;
LABEL_37:
        if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
          && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
        {
          sub_1004B5DF4((uint64_t)_swiftEmptyArrayStorage);
        }
        goto LABEL_38;
      }
      if (_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
      {
        sub_1004B5DF4((uint64_t)_swiftEmptyArrayStorage);
        v25 = v66;
      }
      else
      {
        v25 = &_swiftEmptySetSingleton;
      }
LABEL_36:
      v55 = v74;
      goto LABEL_37;
    }
    v15 = (_QWORD *)sub_1004B804C((uint64_t *)&unk_1013E4180);
    inited = swift_initStackObject(v15, v77);
    v73 = xmmword_100EEF400;
    *(_OWORD *)(inited + 16) = xmmword_100EEF400;
    *(_QWORD *)(inited + 32) = v12;
    v79 = inited;
    specialized Array._endMutation()(inited);
    v11 = v79;
    if (!((unint64_t)v79 >> 62))
    {
      v52 = *(_QWORD *)((v79 & 0xFFFFFFFFFFFFF8) + 0x10);
      v53 = v12;
      if (v52)
      {
LABEL_14:
        sub_1004B5DF4(v11);
        v25 = v54;
        goto LABEL_23;
      }
LABEL_22:
      v25 = &_swiftEmptySetSingleton;
LABEL_23:
      swift_bridgeObjectRelease();
      if (v7 < v16)
      {
        v59 = swift_initStackObject(v15, v76);
        *(_OWORD *)(v59 + 16) = v73;
        *(_QWORD *)(v59 + 32) = v12;
        v79 = v59;
        specialized Array._endMutation()(v59);
        v60 = v79;
        if ((unint64_t)v79 >> 62)
        {
          if (v79 < 0)
            v63 = v79;
          else
            v63 = v79 & 0xFFFFFFFFFFFFFF8;
          v64 = v12;
          swift_bridgeObjectRetain(v60);
          v65 = _CocoaArrayWrapper.endIndex.getter(v63);
          swift_bridgeObjectRelease();
          if (v65)
            goto LABEL_26;
        }
        else
        {
          v61 = *(_QWORD *)((v79 & 0xFFFFFFFFFFFFF8) + 0x10);
          v62 = v12;
          if (v61)
          {
LABEL_26:
            sub_1004B5DF4(v60);
            swift_bridgeObjectRelease();
LABEL_32:
            v55 = v74;
LABEL_38:

            swift_release(v55);
            swift_release(v72);
            return v25;
          }
        }
        swift_bridgeObjectRelease();
        goto LABEL_32;
      }
      goto LABEL_36;
    }
LABEL_18:
    if (v11 < 0)
      v56 = v11;
    else
      v56 = v11 & 0xFFFFFFFFFFFFFF8;
    v57 = v12;
    swift_bridgeObjectRetain(v11);
    v58 = _CocoaArrayWrapper.endIndex.getter(v56);
    swift_bridgeObjectRelease();
    if (v58)
      goto LABEL_14;
    goto LABEL_22;
  }
  swift_release(v30);
  sub_1004CB800(v23, (uint64_t *)&unk_1013E1A50);
  sub_1004CB800(v73, (uint64_t *)&unk_1013E1A50);
  return v25;
}

uint64_t sub_100AC847C(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  id v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  id v35;
  char *v36;
  id v37;
  void *v38;
  uint64_t v39;
  os_unfair_lock_s *v40;
  id v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t, uint64_t);
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t inited;
  uint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t);
  uint64_t v59;
  void (*v60)(char *, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  _QWORD v65[3];
  char v66[72];
  char v67[32];
  char v68[8];

  v64 = (char *)a1;
  v2 = v1;
  v3 = sub_1004B804C(&qword_1013E04D0);
  __chkstk_darwin(v3);
  v5 = (char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL(0);
  v61 = *(_QWORD *)(v6 - 8);
  v62 = v6;
  __chkstk_darwin(v6);
  v59 = (uint64_t)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v60 = (void (*)(char *, uint64_t, uint64_t))((char *)&v59 - v9);
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchPredicate(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (uint64_t *)((char *)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = *(void **)&v2[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue];
  *v18 = v19;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v15 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v14, v16);
  v20 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)(v18);
  (*(void (**)(_QWORD *, uint64_t))(v15 + 8))(v18, v14);
  if ((v19 & 1) != 0)
  {
    v21 = &v64[OBJC_IVAR____TtC8Freeform24CRLAssetSyncRemoteRecord_metadata];
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v13, &v64[OBJC_IVAR____TtC8Freeform24CRLAssetSyncRemoteRecord_metadata], v10);
    v22 = (uint64_t *)&v21[*(int *)(type metadata accessor for CRLAssetSyncMetadata(0) + 20)];
    v23 = *v22;
    v24 = v22[1];
    v25 = v63;
    sub_100AB4CE4((uint64_t)v13, *v22, v24);
    v26 = v10;
    if (v25)
    {
      return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    }
    else
    {
      v28 = v11;
      v63 = v26;
      sub_1004CB7BC((uint64_t)&v64[OBJC_IVAR____TtC8Freeform24CRLAssetSyncRemoteRecord_downloadedFileURL], (uint64_t)v5, &qword_1013E04D0);
      v29 = v61;
      v30 = v62;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(v5, 1, v62) == 1)
      {
        (*(void (**)(char *, uint64_t))(v28 + 8))(v13, v63);
        return sub_1004CB800((uint64_t)v5, &qword_1013E04D0);
      }
      else
      {
        (*(void (**)(_QWORD, char *, uint64_t))(v29 + 32))(v60, v5, v30);
        v31 = *(_QWORD *)&v2[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManagerLock];
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v31 + 16));
        v32 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManager;
        v33 = *(void **)&v2[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManager];
        v64 = v13;
        if (v33)
        {
          v34 = v33;
        }
        else
        {
          v35 = objc_allocWithZone((Class)type metadata accessor for CRLAssetFileManager(0));
          v36 = v2;
          v37 = sub_100C7EE84((uint64_t)v36);

          v38 = *(void **)&v2[v32];
          *(_QWORD *)&v2[v32] = v37;
          v34 = v37;

          v33 = 0;
        }
        v39 = v28;
        v40 = *(os_unfair_lock_s **)(v31 + 16);
        v41 = v33;
        os_unfair_lock_unlock(v40);
        v42 = v59;
        v43 = v60;
        v44 = (uint64_t)v64;
        sub_100C7DDCC((uint64_t)v64, v23, v24, v60, 1, v59);

        v57 = v62;
        v58 = *(void (**)(uint64_t, uint64_t))(v61 + 8);
        v58(v42, v62);
        v58((uint64_t)v43, v57);
        return (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 8))(v44, v63);
      }
    }
  }
  else
  {
    __break(1u);
    swift_once(&qword_1013DD858, sub_100A05554);
    swift_beginAccess(&static OS_os_log.boardStore, v67, 0, 0);
    v45 = (void *)static OS_os_log.boardStore;
    v46 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    inited = swift_initStackObject(v46, v66);
    *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
    swift_getErrorValue(v15, v68, v65);
    v48 = v65[1];
    v49 = v65[2];
    v50 = v45;
    v51 = Error.localizedDescription.getter(v48, v49);
    v53 = v52;
    *(_QWORD *)(inited + 56) = &type metadata for String;
    v54 = sub_1004CFC2C();
    *(_QWORD *)(inited + 64) = v54;
    *(_QWORD *)(inited + 32) = v51;
    *(_QWORD *)(inited + 40) = v53;
    v55 = static os_log_type_t.error.getter(v54);
    sub_100A06EBC((uint64_t)v50, &_mh_execute_header, v55, "Failed to create an asset from data with error: %@", 50, 2, inited);
    swift_setDeallocating(inited);
    v56 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(inited + 32, 1, v56);

    swift_errorRelease(v15);
    (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v10, v62);
    return (*((uint64_t (**)(uint64_t, uint64_t))v5 + 1))(v11, v63);
  }
}

void sub_100AC8940(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t inited;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[72];

  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = &v22[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v11 = *(void **)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v10 = v11;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6, v8);
  v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v10);
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v10, v6);
  if ((v11 & 1) != 0)
  {
    v13 = sub_100A80ED8();
    if (!v3)
    {
      v14 = v13;
      swift_release(v13);
      if (v14)
      {
        sub_100AC8B54(a2, a1);
      }
      else
      {
        v15 = sub_1004B804C((uint64_t *)&unk_1013E0180);
        inited = swift_initStackObject(v15, v22);
        *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
        v17 = UUID.uuidString.getter(inited);
        v19 = v18;
        *(_QWORD *)(inited + 56) = &type metadata for String;
        *(_QWORD *)(inited + 64) = sub_1004CFC2C();
        *(_QWORD *)(inited + 32) = v17;
        *(_QWORD *)(inited + 40) = v19;
        sub_100757E04(&_mh_execute_header, (uint64_t)"_sync_mergeServerSyncedBoardShare(boardIdentifier:ckShare:)", 59, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2, 9077, "Trying to apply merge of a CKShare from server when we don't have a corresponding local board database row. {public}%@", 118, 2u, inited);
        sub_1004F5394(inited, (uint64_t)"_sync_mergeServerSyncedBoardShare(boardIdentifier:ckShare:)", 59, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2u, 9077, (uint64_t)"Trying to apply merge of a CKShare from server when we don't have a corresponding local board database row. {public}%@", 118, 2u);
        swift_setDeallocating(inited);
        v20 = sub_1004B804C(&qword_1013E0190);
        swift_arrayDestroy(inited + 32, 1, v20);
      }
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_100AC8B54(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t inited;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  id v28;
  char v29;
  _BYTE v30[72];
  _BYTE v31[24];
  void *v32;

  v4 = v2;
  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = &v30[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = *(void **)(v4 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v11 = v12;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v8 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v7, v9);
  v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)(v11);
  (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(v11, v7);
  if ((v12 & 1) != 0)
  {
    if (qword_1013DD858 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1013DD858, sub_100A05554);
LABEL_3:
  swift_beginAccess(&static OS_os_log.boardStore, v31, 0, 0);
  v14 = (void *)static OS_os_log.boardStore;
  v15 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v15, v30);
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  v32 = a1;
  v17 = v14;
  v18 = sub_1004B804C(&qword_101405618);
  v19 = Optional.debugDescription.getter(v18);
  v21 = v20;
  *(_QWORD *)(inited + 56) = &type metadata for String;
  *(_QWORD *)(inited + 64) = sub_1004CFC2C();
  *(_QWORD *)(inited + 32) = v19;
  *(_QWORD *)(inited + 40) = v21;
  v23 = static os_log_type_t.debug.getter(v22);
  sub_100A06EBC((uint64_t)v17, &_mh_execute_header, v23, "sync overwrite local CKShare with remote CKShare %@", 51, 2, inited);
  swift_setDeallocating(inited);
  v24 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(inited + 32, 1, v24);

  v25 = sub_100AA4814();
  if (v3)
    return;
  v26 = (void *)v25;
  sub_100AA5568(a2, a1, 0);
  if (a1)
  {
    if (v26)
    {
      sub_1004B8930(0, &qword_1013E0240, CKShare_ptr);
      v27 = v26;
      v28 = a1;
      v29 = static NSObject.== infix(_:_:)(v28, v27);

      if ((v29 & 1) != 0)
        goto LABEL_10;
    }
  }
  else if (!v26)
  {
    return;
  }
  sub_100A75C10(a2, (uint64_t)&unk_1012937A8, (uint64_t)sub_100B01118, (uint64_t)&unk_1012937C0);
  v27 = v26;
LABEL_10:

}

uint64_t sub_100AC8E00(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, int a5, int a6, uint64_t a7, unint64_t a8, char a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  id v17;
  char v18;
  int v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t inited;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __n128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE v75[24];
  _BYTE v76[72];
  _BYTE v77[32];
  uint64_t v78;

  v68 = a7;
  v69 = a8;
  v67 = a6;
  v70 = a5;
  v65 = a2;
  v66 = a3;
  v78 = a1;
  v11 = type metadata accessor for DispatchPredicate(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (uint64_t *)((char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = *(void **)(v9 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v15 = v16;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v12 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v11, v13);
  v17 = v16;
  v18 = _dispatchPreconditionTest(_:)(v15);
  (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(v15, v11);
  if ((v18 & 1) == 0)
  {
    __break(1u);
LABEL_27:
    swift_once(&qword_1013DD870, sub_100A059E0);
    goto LABEL_7;
  }
  if (!a4)
  {
    v41 = 0;
    v37 = 0;
    v40 = v71;
    v34 = v70;
    goto LABEL_16;
  }
  LOBYTE(v12) = a9;
  if ((a9 & 1) != 0)
    v19 = 2;
  else
    v19 = 1;
  HIDWORD(v64) = v19;
  v20 = qword_1013DD870;
  swift_retain(a4);
  if (v20 != -1)
    goto LABEL_27;
LABEL_7:
  swift_beginAccess(&static OS_os_log.dataSync, &v73, 0, 0);
  v21 = (void *)static OS_os_log.dataSync;
  v22 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v22, &v72);
  *(_OWORD *)(inited + 16) = xmmword_100EF5A10;
  v24 = sub_1004CFC2C();
  v25 = v24;
  v26 = 0x676E696772654DLL;
  if ((v12 & 1) != 0)
    v26 = 0x746972777265764FLL;
  v27 = 0xE700000000000000;
  if ((v12 & 1) != 0)
    v27 = 0xEB00000000676E69;
  *(_QWORD *)(inited + 56) = &type metadata for String;
  *(_QWORD *)(inited + 64) = v24;
  *(_QWORD *)(inited + 32) = v26;
  *(_QWORD *)(inited + 40) = v27;
  v28 = v21;
  v29 = UUID.uuidString.getter(v28);
  *(_QWORD *)(inited + 96) = &type metadata for String;
  *(_QWORD *)(inited + 104) = v25;
  *(_QWORD *)(inited + 72) = v29;
  *(_QWORD *)(inited + 80) = v30;
  v32 = static os_log_type_t.info.getter(v31);
  sub_100A06EBC((uint64_t)v28, &_mh_execute_header, v32, "%{public}@ board data with id %{public}@", 40, 2, inited);
  swift_setDeallocating(inited);
  v33 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(inited + 32, 2, v33);

  v34 = v70;
  v35 = v71;
  sub_100A8F258(a4, SHIDWORD(v64), v68, v69, (v70 & 1) == 0, 1);
  v37 = v36;
  v39 = v38;
  v40 = v35;
  swift_release(a4);
  if (!v35)
  {
    if (v37)
      v41 = v39;
    else
      v41 = 0;
LABEL_16:
    LODWORD(v71) = v41;
    if ((v34 & 1) != 0)
    {
      if (qword_1013DD870 != -1)
        swift_once(&qword_1013DD870, sub_100A059E0);
      swift_beginAccess(&static OS_os_log.dataSync, v75, 0, 0);
      v42 = (void *)static OS_os_log.dataSync;
      v43 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      v44 = swift_initStackObject(v43, &v74);
      *(_OWORD *)(v44 + 16) = xmmword_100EF5E40;
      v45 = v42;
      v46 = UUID.uuidString.getter(v45);
      v48 = v47;
      *(_QWORD *)(v44 + 56) = &type metadata for String;
      *(_QWORD *)(v44 + 64) = sub_1004CFC2C();
      *(_QWORD *)(v44 + 32) = v46;
      *(_QWORD *)(v44 + 40) = v48;
      v49 = v78;
      v51 = static os_log_type_t.default.getter(v50);
      sub_100A06EBC((uint64_t)v45, &_mh_execute_header, v51, "Merging a tombstoned Board record with id %{public}@", 52, 2, v44);
      swift_setDeallocating(v44);
      v52 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(v44 + 32, 1, v52);

      sub_100AC6524(v49, v65, v66, v68, v69);
      if (v40)
        goto LABEL_24;
    }
    if ((v67 & 1) != 0)
    {
      if (qword_1013DD870 != -1)
        swift_once(&qword_1013DD870, sub_100A059E0);
      swift_beginAccess(&static OS_os_log.dataSync, v77, 0, 0);
      v53 = (void *)static OS_os_log.dataSync;
      v54 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      v55 = swift_initStackObject(v54, v76);
      *(_OWORD *)(v55 + 16) = xmmword_100EF5E40;
      v56 = v53;
      v57 = UUID.uuidString.getter(v56);
      v59 = v58;
      *(_QWORD *)(v55 + 56) = &type metadata for String;
      *(_QWORD *)(v55 + 64) = sub_1004CFC2C();
      *(_QWORD *)(v55 + 32) = v57;
      *(_QWORD *)(v55 + 40) = v59;
      v61 = static os_log_type_t.default.getter(v60);
      sub_100A06EBC((uint64_t)v56, &_mh_execute_header, v61, "Purging board with id %{public}@ after syncing hideFromRecentlyDeleted state", 76, 2, v55);
      swift_setDeallocating(v55);
      v62 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(v55 + 32, 1, v62);

      sub_100A9A978(v78, 0xD000000000000025, 0x8000000100FF4F30, 0);
      if (v40)
LABEL_24:
        swift_release(v37);
    }
  }
  return v37;
}

void sub_100AC931C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  id v17;
  char v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t inited;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[72];
  _BYTE v35[24];
  unint64_t v36;

  v5 = v4;
  v6 = v3;
  v36 = a3;
  v33 = a2;
  v8 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchPredicate(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (uint64_t *)((char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = *(void **)(v6 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v15 = v16;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v12 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v11, v13);
  v17 = v16;
  v18 = _dispatchPreconditionTest(_:)(v15);
  (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(v15, v11);
  if ((v18 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    swift_once(&qword_1013DD870, sub_100A059E0);
    goto LABEL_4;
  }
  if (!a1)
    return;
  sub_1004B8460(a1 + OBJC_IVAR____TtC8Freeform24CRLUserBoardMetadataData_boardIdentifier, (uint64_t)v10, type metadata accessor for CRLBoardIdentifier);
  v19 = qword_1013DD870;
  swift_retain(a1);
  if (v19 != -1)
    goto LABEL_9;
LABEL_4:
  swift_beginAccess(&static OS_os_log.dataSync, v35, 0, 0);
  v20 = (void *)static OS_os_log.dataSync;
  v21 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v21, v34);
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  v23 = v20;
  v24 = UUID.uuidString.getter(v23);
  v26 = v25;
  *(_QWORD *)(inited + 56) = &type metadata for String;
  *(_QWORD *)(inited + 64) = sub_1004CFC2C();
  *(_QWORD *)(inited + 32) = v24;
  *(_QWORD *)(inited + 40) = v26;
  v28 = static os_log_type_t.info.getter(v27);
  sub_100A06EBC((uint64_t)v23, &_mh_execute_header, v28, "Merging board metadata data with id %{public}@", 46, 2, inited);
  swift_setDeallocating(inited);
  v29 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(inited + 32, 1, v29);

  v30 = sub_100A93A98(a1, 1, v33, v36, 1);
  if (v5)
  {
    sub_1004B84A4((uint64_t)v10, type metadata accessor for CRLBoardIdentifier);
    swift_release(a1);
  }
  else
  {
    v31 = v30;
    swift_release(a1);
    swift_release(v31);
    sub_1004B84A4((uint64_t)v10, type metadata accessor for CRLBoardIdentifier);
  }
}

_BYTE *sub_100AC95C0(_BYTE *a1, Class a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t inited;
  uint64_t v25;
  uint64_t v26;
  objc_class *v27;
  _BYTE *v28;
  _BYTE *v30;
  uint64_t v31;
  objc_class *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  objc_class *v37;
  uint64_t v38;
  objc_class *v39;
  uint64_t v40;
  __int128 v41;
  char v42[40];
  char v43[40];
  uint64_t v44;

  v8 = type metadata accessor for DispatchPredicate(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = &v42[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 16];
  v13 = *(void **)(v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *(_QWORD *)v12 = v13;
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8, v10);
  v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)(v12);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  if ((v13 & 1) == 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  v15 = (uint64_t)&a1[OBJC_IVAR____TtC8Freeform34CRLFreehandDrawingBucketSyncRecord_boardIdentifier];
  v16 = *(_QWORD *)&a1[OBJC_IVAR____TtC8Freeform34CRLFreehandDrawingBucketSyncRecord_syncData];
  v17 = *(_QWORD *)&a1[OBJC_IVAR____TtC8Freeform34CRLFreehandDrawingBucketSyncRecord_syncData + 8];
  sub_10057939C(v16, v17);
  sub_100AC6C6C(v15, (uint64_t)a1, v16, v17, a2, a3 & 1);
  sub_1004BE2FC(v16, v17);
  if (!v4)
  {
    a2 = sub_100B4AD90(v15);
    if ((a1[OBJC_IVAR____TtC8Freeform40CRLFreehandDrawingBucketSyncRemoteRecord_minRequiredVersionForSync + 8] & 1) != 0
      || (a1[OBJC_IVAR____TtC8Freeform40CRLFreehandDrawingBucketSyncRemoteRecord_minRequiredVersions + 40] & 1) != 0
      || ((v18 = *(_QWORD *)&a1[OBJC_IVAR____TtC8Freeform40CRLFreehandDrawingBucketSyncRemoteRecord_minRequiredVersionForSync],
           v19 = *(_QWORD *)&a1[OBJC_IVAR____TtC8Freeform40CRLFreehandDrawingBucketSyncRemoteRecord_minRequiredVersions
                              + 32],
           v20 = sub_1001E9730(),
           v20 >= v18)
        ? (v21 = v20 >= v19)
        : (v21 = 0),
          v21))
    {
      if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
        && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
      {
        sub_1004B5DF4((uint64_t)_swiftEmptyArrayStorage);
        a1 = v30;
      }
      else
      {
        a1 = &_swiftEmptySetSingleton;
      }
LABEL_14:
      if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) == 0)
      {
LABEL_15:

        return a1;
      }
LABEL_18:
      if (_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
        sub_1004B5DF4((uint64_t)_swiftEmptyArrayStorage);
      goto LABEL_15;
    }
    v22 = v20;
    v23 = sub_1004B804C((uint64_t *)&unk_1013E4180);
    inited = swift_initStackObject(v23, v43);
    v41 = xmmword_100EEF400;
    *(_OWORD *)(inited + 16) = xmmword_100EEF400;
    *(_QWORD *)(inited + 32) = a2;
    v44 = inited;
    specialized Array._endMutation()(inited);
    v25 = v44;
    if ((unint64_t)v44 >> 62)
    {
      if (v44 < 0)
        v31 = v44;
      else
        v31 = v44 & 0xFFFFFFFFFFFFFF8;
      v32 = a2;
      swift_bridgeObjectRetain(v25);
      v33 = _CocoaArrayWrapper.endIndex.getter(v31);
      swift_bridgeObjectRelease();
      if (v33)
        goto LABEL_11;
    }
    else
    {
      v26 = *(_QWORD *)((v44 & 0xFFFFFFFFFFFFF8) + 0x10);
      v27 = a2;
      if (v26)
      {
LABEL_11:
        sub_1004B5DF4(v25);
        a1 = v28;
        goto LABEL_27;
      }
    }
    a1 = &_swiftEmptySetSingleton;
LABEL_27:
    swift_bridgeObjectRelease();
    if (v22 < v18)
    {
      v34 = swift_initStackObject(v23, v42);
      *(_OWORD *)(v34 + 16) = v41;
      *(_QWORD *)(v34 + 32) = a2;
      v44 = v34;
      specialized Array._endMutation()(v34);
      v35 = v44;
      if ((unint64_t)v44 >> 62)
      {
        if (v44 < 0)
          v38 = v44;
        else
          v38 = v44 & 0xFFFFFFFFFFFFFF8;
        v39 = a2;
        swift_bridgeObjectRetain(v35);
        v40 = _CocoaArrayWrapper.endIndex.getter(v38);
        swift_bridgeObjectRelease();
        if (v40)
          goto LABEL_30;
      }
      else
      {
        v36 = *(_QWORD *)((v44 & 0xFFFFFFFFFFFFF8) + 0x10);
        v37 = a2;
        if (v36)
        {
LABEL_30:
          sub_1004B5DF4(v35);
          swift_bridgeObjectRelease();
          goto LABEL_15;
        }
      }
      swift_bridgeObjectRelease();
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  return a1;
}

char *sub_100AC991C(char *a1, int a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Class v14;
  unint64_t v15;
  __n128 v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  id v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t inited;
  uint64_t v56;
  objc_class *v57;
  char *v58;
  uint64_t v59;
  objc_class *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  objc_class *v65;
  uint64_t v67;
  objc_class *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  char v80[24];
  char v81[40];
  char v82[48];
  uint64_t v83;

  LODWORD(v78) = a2;
  v4 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v4);
  v75 = (uint64_t)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1004B804C(&qword_101406B10);
  __chkstk_darwin(v6);
  v8 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CRLBoardCRDTData(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v74 = (uint64_t)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v76 = (uint64_t)&v71 - v13;
  v14 = (Class)type metadata accessor for DispatchPredicate(0);
  v15 = *((_QWORD *)v14 - 1);
  v16 = __chkstk_darwin(v14);
  v18 = (uint64_t *)((char *)&v71 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = *(void **)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v18 = v19;
  (*(void (**)(_QWORD *, _QWORD, Class, __n128))(v15 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v14, v16);
  v20 = v19;
  v21 = _dispatchPreconditionTest(_:)(v18);
  (*(void (**)(_QWORD *, Class))(v15 + 8))(v18, v14);
  if ((v21 & 1) == 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v22 = (uint64_t *)&a1[OBJC_IVAR____TtC8Freeform24CRLBoardSyncRemoteRecord_boardCRDTData];
  v23 = *(_QWORD *)&a1[OBJC_IVAR____TtC8Freeform24CRLBoardSyncRemoteRecord_boardCRDTData + 8];
  v77 = v2;
  if (v23 >> 60 == 15)
  {
    v24 = 0;
  }
  else
  {
    v25 = *v22;
    sub_10057939C(*v22, v23);
    sub_10057939C(v25, v23);
    v26 = sub_1004B7878((unint64_t *)&unk_101405DC0, type metadata accessor for CRLBoardCRDTData, (uint64_t)&unk_100F3A2D0);
    swift_retain(a1);
    v27 = v26;
    v28 = v79;
    CRDT.init(serializedData:)(v25, v23, v9, v27);
    if (v28)
    {
      swift_errorRelease(v28);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
      swift_release(a1);
      sub_1004BE2FC(v25, v23);
      sub_1004CB800((uint64_t)v8, &qword_101406B10);
      v24 = 0;
      v79 = 0;
    }
    else
    {
      v79 = 0;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
      v29 = v76;
      sub_1004B84E0((uint64_t)v8, v76, type metadata accessor for CRLBoardCRDTData);
      v73 = *(_OWORD *)&a1[OBJC_IVAR____TtC8Freeform18CRLBoardSyncRecord_minRequiredVersions];
      v72 = *(_QWORD *)&a1[OBJC_IVAR____TtC8Freeform18CRLBoardSyncRecord_minRequiredVersions + 16];
      v30 = v74;
      sub_1004B8460(v29, v74, type metadata accessor for CRLBoardCRDTData);
      v31 = v75;
      sub_1004B8460((uint64_t)&a1[OBJC_IVAR____TtC8Freeform18CRLBoardSyncRecord_boardIdentifier], v75, type metadata accessor for CRLBoardIdentifier);
      v32 = (uint64_t *)(v31 + *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20));
      v33 = *v32;
      v34 = v32[1];
      swift_bridgeObjectRetain(v34);
      sub_1004B84A4(v31, type metadata accessor for CRLBoardIdentifier);
      v35 = type metadata accessor for CRLBoardData(0);
      v24 = swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
      *(_QWORD *)(v24 + 16) = 7;
      *(_OWORD *)(v24 + 24) = v73;
      *(_QWORD *)(v24 + 40) = v72;
      sub_1004B84E0(v30, v24 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, type metadata accessor for CRLBoardCRDTData);
      swift_release(a1);
      sub_1004BE2FC(v25, v23);
      v36 = (_QWORD *)(v24 + OBJC_IVAR____TtC8Freeform12CRLBoardData_ownerName);
      *v36 = v33;
      v36[1] = v34;
      sub_1004B84A4(v29, type metadata accessor for CRLBoardCRDTData);
    }
  }
  v37 = (uint64_t)&a1[OBJC_IVAR____TtC8Freeform18CRLBoardSyncRecord_boardIdentifier];
  v38 = (uint64_t)&a1[OBJC_IVAR____TtC8Freeform18CRLBoardSyncRecord_rootContainerUUID];
  v39 = a1[OBJC_IVAR____TtC8Freeform18CRLBoardSyncRecord_tombstoned];
  v40 = (uint64_t)&a1[OBJC_IVAR____TtC8Freeform18CRLBoardSyncRecord_alternateRootContainerUUID];
  v41 = a1[OBJC_IVAR____TtC8Freeform18CRLBoardSyncRecord_hideFromRecentlyDeleted];
  v43 = *(_QWORD *)&a1[OBJC_IVAR____TtC8Freeform18CRLBoardSyncRecord_syncData];
  v42 = *(_QWORD *)&a1[OBJC_IVAR____TtC8Freeform18CRLBoardSyncRecord_syncData + 8];
  sub_10057939C(v43, v42);
  v44 = v79;
  v10 = sub_100AC8E00(v37, v38, v40, (_QWORD *)v24, v39, v41, v43, v42, v78 & 1);
  sub_1004BE2FC(v43, v42);
  if (!v44)
  {
    v79 = v24;
    if (v10)
      v45 = v41;
    else
      v45 = 1;
    if ((v45 & 1) == 0)
    {
      swift_retain(v10);
      v46 = sub_1008D5968((uint64_t)_swiftEmptyArrayStorage);
      sub_100A63508(v46);
      v48 = v47;
      swift_bridgeObjectRelease();
      sub_100AF7994(v48);
      swift_bridgeObjectRelease();
      v49 = &a1[OBJC_IVAR____TtC8Freeform24CRLBoardSyncRemoteRecord_assets];
      swift_beginAccess(&a1[OBJC_IVAR____TtC8Freeform24CRLBoardSyncRemoteRecord_assets], v80, 0, 0);
      v50 = *(_QWORD *)v49;
      __chkstk_darwin(v51);
      swift_bridgeObjectRetain(v50);
      sub_100AF923C(v52, (void (*)(char *, uint64_t, __n128))sub_100B01134);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release(v10);
    }
    v14 = sub_100B4AD90(v37);
    v15 = *(_QWORD *)&a1[OBJC_IVAR____TtC8Freeform24CRLBoardSyncRemoteRecord_minRequiredVersionForSync];
    v53 = *(_QWORD *)&a1[OBJC_IVAR____TtC8Freeform18CRLBoardSyncRecord_minRequiredVersions + 16];
    v54 = sub_1001E9730();
    v21 = v54;
    if (v54 >= v15 && v54 >= v53)
    {
      if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
        && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
      {
        sub_1004B5DF4((uint64_t)_swiftEmptyArrayStorage);
        a1 = v70;
      }
      else
      {
        a1 = (char *)&_swiftEmptySetSingleton;
      }
      goto LABEL_31;
    }
    v8 = (char *)sub_1004B804C((uint64_t *)&unk_1013E4180);
    inited = swift_initStackObject(v8, v82);
    v78 = xmmword_100EEF400;
    *(_OWORD *)(inited + 16) = xmmword_100EEF400;
    *(_QWORD *)(inited + 32) = v14;
    v83 = inited;
    specialized Array._endMutation()(inited);
    v2 = v83;
    if (!((unint64_t)v83 >> 62))
    {
      v56 = *(_QWORD *)((v83 & 0xFFFFFFFFFFFFF8) + 0x10);
      v57 = v14;
      if (v56)
      {
LABEL_18:
        sub_1004B5DF4(v2);
        a1 = v58;
        goto LABEL_27;
      }
LABEL_26:
      a1 = (char *)&_swiftEmptySetSingleton;
LABEL_27:
      swift_bridgeObjectRelease();
      if (v21 < v15)
      {
        v62 = swift_initStackObject(v8, v81);
        *(_OWORD *)(v62 + 16) = v78;
        *(_QWORD *)(v62 + 32) = v14;
        v83 = v62;
        specialized Array._endMutation()(v62);
        v63 = v83;
        if ((unint64_t)v83 >> 62)
        {
          if (v83 < 0)
            v67 = v83;
          else
            v67 = v83 & 0xFFFFFFFFFFFFFF8;
          v68 = v14;
          swift_bridgeObjectRetain(v63);
          v69 = _CocoaArrayWrapper.endIndex.getter(v67);
          swift_bridgeObjectRelease();
          if (v69)
            goto LABEL_30;
        }
        else
        {
          v64 = *(_QWORD *)((v83 & 0xFFFFFFFFFFFFF8) + 0x10);
          v65 = v14;
          if (v64)
          {
LABEL_30:
            sub_1004B5DF4(v63);
            swift_bridgeObjectRelease();
LABEL_32:

            swift_release(v79);
            swift_release(v10);
            return a1;
          }
        }
        swift_bridgeObjectRelease();
        goto LABEL_32;
      }
LABEL_31:
      if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
        && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
      {
        sub_1004B5DF4((uint64_t)_swiftEmptyArrayStorage);
      }
      goto LABEL_32;
    }
LABEL_22:
    if (v2 < 0)
      v59 = v2;
    else
      v59 = v2 & 0xFFFFFFFFFFFFFF8;
    v60 = v14;
    swift_bridgeObjectRetain(v2);
    v61 = _CocoaArrayWrapper.endIndex.getter(v59);
    swift_bridgeObjectRelease();
    if (v61)
      goto LABEL_18;
    goto LABEL_26;
  }
  swift_release(v24);
  return a1;
}

char *sub_100ACA120(char *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  void *v25;
  Swift::String v26;
  CKRecordZoneID v27;
  Class v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v33;
  uint64_t v34;
  uint64_t inited;
  uint64_t v36;
  uint64_t v37;
  objc_class *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  objc_class *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  objc_class *v47;
  char *v49;
  uint64_t v50;
  objc_class *v51;
  uint64_t v52;
  __int128 v53;
  char v54[40];
  char v55[40];
  char v56[72];
  uint64_t v57[4];

  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = &v54[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *(_QWORD *)v8 = v9;
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4, v6);
  v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_19:
    swift_once(&qword_1013DD858, sub_100A05554);
    goto LABEL_6;
  }
  swift_retain(a1);
  v12 = sub_100AFC61C(v11);
  if (v12)
  {
    v13 = v12;
    sub_100AC931C(v12, *(_QWORD *)&a1[OBJC_IVAR____TtC8Freeform30CRLUserBoardMetadataSyncRecord_syncData], *(_QWORD *)&a1[OBJC_IVAR____TtC8Freeform30CRLUserBoardMetadataSyncRecord_syncData + 8]);
    if (v2)
    {
      swift_release(v13);
      return a1;
    }
    sub_1004B8930(0, (unint64_t *)&qword_1013E1770, CKRecordZoneID_ptr);
    v24._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(CKCurrentUserDefaultName);
    v24._object = v25;
    v26._countAndFlagsBits = 0x74654D6472616F42;
    v26._object = (void *)0xED00006174616461;
    v27.super.isa = CKRecordZoneID.init(zoneName:ownerName:)(v26, v24).super.isa;
    v28 = sub_100B4AD90((uint64_t)&a1[OBJC_IVAR____TtC8Freeform30CRLUserBoardMetadataSyncRecord_boardIdentifier]);
    v29 = *(_QWORD *)&a1[OBJC_IVAR____TtC8Freeform36CRLUserBoardMetadataSyncRemoteRecord_minRequiredVersionForSync];
    v30 = *(_QWORD *)&a1[OBJC_IVAR____TtC8Freeform30CRLUserBoardMetadataSyncRecord_minRequiredVersionForFullFidelity];
    v31 = sub_1001E9730();
    if (v31 >= v29 && v31 >= v30)
    {
      if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
        && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
      {
        sub_1004B5DF4((uint64_t)_swiftEmptyArrayStorage);
        a1 = v49;
        if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) == 0)
          goto LABEL_35;
      }
      else
      {
        a1 = (char *)&_swiftEmptySetSingleton;
        if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) == 0)
          goto LABEL_35;
      }
      goto LABEL_39;
    }
    v33 = v31;
    v34 = sub_1004B804C((uint64_t *)&unk_1013E4180);
    inited = swift_initStackObject(v34, v55);
    v53 = xmmword_100EEF400;
    *(_OWORD *)(inited + 16) = xmmword_100EEF400;
    *(CKRecordZoneID *)(inited + 32) = v27;
    v57[0] = inited;
    specialized Array._endMutation()(inited);
    v36 = v57[0];
    if ((unint64_t)v57[0] >> 62)
    {
      if (v57[0] < 0)
        v41 = v57[0];
      else
        v41 = v57[0] & 0xFFFFFFFFFFFFFF8;
      v42 = v27.super.isa;
      swift_bridgeObjectRetain(v36);
      v43 = _CocoaArrayWrapper.endIndex.getter(v41);
      swift_bridgeObjectRelease();
      if (v43)
        goto LABEL_14;
    }
    else
    {
      v37 = *(_QWORD *)((v57[0] & 0xFFFFFFFFFFFFF8) + 0x10);
      v38 = v27.super.isa;
      if (v37)
      {
LABEL_14:
        sub_1004B5DF4(v36);
        a1 = v39;
        goto LABEL_30;
      }
    }
    a1 = (char *)&_swiftEmptySetSingleton;
LABEL_30:
    swift_bridgeObjectRelease();
    if (v33 < v29)
    {
      v44 = swift_initStackObject(v34, v54);
      *(_OWORD *)(v44 + 16) = v53;
      *(_QWORD *)(v44 + 32) = v28;
      v57[0] = v44;
      specialized Array._endMutation()(v44);
      v45 = v57[0];
      if ((unint64_t)v57[0] >> 62)
      {
        if (v57[0] < 0)
          v50 = v57[0];
        else
          v50 = v57[0] & 0xFFFFFFFFFFFFFF8;
        v51 = v28;
        swift_bridgeObjectRetain(v45);
        v52 = _CocoaArrayWrapper.endIndex.getter(v50);
        swift_bridgeObjectRelease();
        if (v52)
          goto LABEL_33;
      }
      else
      {
        v46 = *(_QWORD *)((v57[0] & 0xFFFFFFFFFFFFF8) + 0x10);
        v47 = v28;
        if (v46)
        {
LABEL_33:
          sub_1004B5DF4(v45);
          swift_bridgeObjectRelease();

          swift_release(v13);
          return a1;
        }
      }
      swift_bridgeObjectRelease();

      swift_release(v13);
      return a1;
    }
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) == 0)
    {
LABEL_35:

      swift_release(v13);
      return a1;
    }
LABEL_39:
    if (_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
    {
      sub_1004B5DF4((uint64_t)_swiftEmptyArrayStorage);

      swift_release(v13);
      return a1;
    }
    goto LABEL_35;
  }
  if (qword_1013DD858 != -1)
    goto LABEL_19;
LABEL_6:
  swift_beginAccess(&static OS_os_log.boardStore, v57, 0, 0);
  v14 = (void *)static OS_os_log.boardStore;
  v15 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  v16 = swift_initStackObject(v15, v56);
  *(_OWORD *)(v16 + 16) = xmmword_100EF5E40;
  v17 = v14;
  v18 = UUID.uuidString.getter(v17);
  v20 = v19;
  *(_QWORD *)(v16 + 56) = &type metadata for String;
  v21 = sub_1004CFC2C();
  *(_QWORD *)(v16 + 64) = v21;
  *(_QWORD *)(v16 + 32) = v18;
  *(_QWORD *)(v16 + 40) = v20;
  v22 = static os_log_type_t.error.getter(v21);
  sub_100A06EBC((uint64_t)v17, &_mh_execute_header, v22, "Unable to create CRLUserBoardMetadataData from CRLUserBoardMetadataSyncRemoteRecord remoteRecord: %{public}@.", 109, 2, v16);
  swift_setDeallocating(v16);
  v23 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(v16 + 32, 1, v23);

  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) == 0)
    return (char *)&_swiftEmptySetSingleton;
  if (_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    sub_1004B5DF4((uint64_t)_swiftEmptyArrayStorage);
    a1 = v40;
  }
  else
  {
    a1 = (char *)&_swiftEmptySetSingleton;
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) == 0)
      return a1;
  }
  if (_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
    sub_1004B5DF4((uint64_t)_swiftEmptyArrayStorage);
  return a1;
}

double sub_100ACA6A0(void *a1, uint64_t a2, int a3)
{
  char *v5;
  double result;

  v5 = a1;
  swift_retain(a2);
  sub_1004E6E6C(v5, (uint64_t)v5, a2, a3);

  *(_QWORD *)&result = swift_release(a2).n128_u64[0];
  return result;
}

void sub_100ACA708(uint64_t a1, char a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  id v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  int64_t i;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  char v43;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD v48[4];
  char *v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  int64_t v53;
  uint64_t v54;
  _BYTE v55[24];
  _QWORD *v56;
  char v57;
  _QWORD *v58;
  void *v59;
  void *v60;
  _QWORD *v61;

  v6 = type metadata accessor for CRLBoardIdentifier(0);
  v52 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v51 = (uint64_t)v48 - v10;
  v11 = type metadata accessor for DispatchPredicate(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (_QWORD *)((char *)v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = *(void **)&v2[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue];
  *v15 = v16;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v12 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v11, v13);
  v17 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)(v15);
  (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(v15, v11);
  if ((v16 & 1) != 0)
  {
    v61 = _swiftEmptyDictionarySingleton;
    v59 = &_swiftEmptySetSingleton;
    v60 = &_swiftEmptySetSingleton;
    v58 = &_swiftEmptySetSingleton;
    v57 = 0;
    v56 = &_swiftEmptySetSingleton;
    v18 = v2;
    sub_100615910(a1, (uint64_t)v18, a2 == 1, (objc_class *)&v61, (uint64_t)&v60, (uint64_t)&v59, (uint64_t)&v58, &v57);
    if (!v3)
    {

      v19 = (uint64_t)v60;
      swift_bridgeObjectRetain(v60);
      v20 = sub_1001E9730();
      sub_100AB15FC(v19, v20);
      swift_bridgeObjectRelease();
      v21 = v59;
      swift_bridgeObjectRetain(v59);
      sub_100AB3B88(v22);
      swift_bridgeObjectRelease();
      v23 = (uint64_t)v56;
      v48[0] = v21;
      v48[1] = v18;
      v48[2] = v19;
      v48[3] = 0;
      v24 = v56[7];
      v49 = (char *)(v56 + 7);
      v25 = 1 << *((_BYTE *)v56 + 32);
      v26 = -1;
      if (v25 < 64)
        v26 = ~(-1 << v25);
      v27 = v26 & v24;
      v28 = (uint64_t *)&v18[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_transientSyncExclusions];
      v50 = (unint64_t)(v25 + 63) >> 6;
      swift_bridgeObjectRetain(v56);
      for (i = 0; ; i = v53)
      {
        if (v27)
        {
          v31 = __clz(__rbit64(v27));
          v27 &= v27 - 1;
          v53 = i;
          v32 = v31 | (i << 6);
        }
        else
        {
          v33 = i + 1;
          if (__OFADD__(i, 1))
            goto LABEL_38;
          if (v33 >= v50)
          {
LABEL_30:
            swift_release(v23);
            if (*(_QWORD *)(v23 + 16))
            {
              swift_bridgeObjectRetain(v23);
              v46 = sub_1008D800C((uint64_t)_swiftEmptyArrayStorage);
              sub_100A75778(v23, 0, 0, v46);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            v47 = (uint64_t)v58;
            if ((v57 & 1) != 0 || v58[2])
            {
              swift_bridgeObjectRetain(v58);
              sub_100A75388((uint64_t)&_swiftEmptySetSingleton, v47, 0);
              swift_bridgeObjectRelease();
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_5;
          }
          v34 = *(_QWORD *)&v49[8 * v33];
          v35 = i + 1;
          if (!v34)
          {
            v35 = i + 2;
            if (i + 2 >= v50)
              goto LABEL_30;
            v34 = *(_QWORD *)&v49[8 * v35];
            if (!v34)
            {
              v35 = i + 3;
              if (i + 3 >= v50)
                goto LABEL_30;
              v34 = *(_QWORD *)&v49[8 * v35];
              if (!v34)
              {
                v36 = i + 4;
                if (i + 4 >= v50)
                  goto LABEL_30;
                v34 = *(_QWORD *)&v49[8 * v36];
                if (!v34)
                {
                  while (1)
                  {
                    v35 = v36 + 1;
                    if (__OFADD__(v36, 1))
                      goto LABEL_39;
                    if (v35 >= v50)
                      goto LABEL_30;
                    v34 = *(_QWORD *)&v49[8 * v35];
                    ++v36;
                    if (v34)
                      goto LABEL_26;
                  }
                }
                v35 = i + 4;
              }
            }
          }
LABEL_26:
          v27 = (v34 - 1) & v34;
          v53 = v35;
          v32 = __clz(__rbit64(v34)) + (v35 << 6);
        }
        v37 = v23;
        v38 = v51;
        v39 = *(_QWORD *)(v52 + 72);
        sub_1004B8460(*(_QWORD *)(v23 + 48) + v39 * v32, v51, type metadata accessor for CRLBoardIdentifier);
        sub_1004B84E0(v38, (uint64_t)v8, type metadata accessor for CRLBoardIdentifier);
        swift_beginAccess(v28, v55, 33, 0);
        swift_bridgeObjectRetain(*v28);
        v40 = (uint64_t)v8;
        v41 = sub_100843264((uint64_t)v8);
        v43 = v42;
        swift_bridgeObjectRelease();
        if ((v43 & 1) != 0)
        {
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v28);
          v45 = *v28;
          v54 = *v28;
          *v28 = 0x8000000000000000;
          if (!isUniquelyReferenced_nonNull_native)
          {
            sub_100833E74();
            v45 = v54;
          }
          sub_1004B84A4(*(_QWORD *)(v45 + 48) + v41 * v39, type metadata accessor for CRLBoardIdentifier);
          v30 = *(_QWORD *)(*(_QWORD *)(v45 + 56) + 8 * v41);
          sub_10051B744(v41, v45);
          *v28 = v45;
          swift_release(v30);
          swift_bridgeObjectRelease();
        }
        swift_endAccess(v55);
        v8 = (char *)v40;
        sub_1004B84A4(v40, type metadata accessor for CRLBoardIdentifier);
        v23 = v37;
      }
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
  }
}

void sub_100ACAC74(uint64_t a1, uint64_t a2, char a3, objc_class *a4, uint64_t a5, uint64_t a6, uint64_t a7, _BYTE *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v16;
  void (*v17)(_QWORD *, uint64_t, uint64_t);
  char v18;
  id v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t inited;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  CKRecordID v42;
  Swift::String v43;
  id v44;
  id v45;
  _BYTE v47[112];
  _BYTE v48[32];
  id v49;

  v9 = v8;
  v10 = *(_QWORD *)(a1 + 32);
  if (v10)
  {
    v16 = *(_QWORD *)(a1 + 40);
    swift_unknownObjectRetain(v10);
    v18 = sub_100ACB084(v17, v16, a3 & 1, 0, a4, a5, a6, a7, a8);
    if (v9 || (v18 & 1) != 0)
    {
      swift_unknownObjectRelease(v10);
    }
    else
    {
      v22 = type metadata accessor for CRLUnknownSyncRemoteRecord();
      v23 = swift_dynamicCastClass(v10, v22);
      if (v23)
      {
        v24 = *(void **)(v23 + 16);
        swift_unknownObjectRetain(v10);
        v25 = v24;
        v45 = objc_msgSend(v25, "zoneID");
        if (qword_1013DD870 != -1)
          swift_once(&qword_1013DD870, sub_100A059E0);
        swift_beginAccess(&static OS_os_log.dataSync, v48, 0, 0);
        v26 = (void *)static OS_os_log.dataSync;
        v27 = sub_1004B804C((uint64_t *)&unk_1013E0180);
        inited = swift_initStackObject(v27, v47);
        *(_OWORD *)(inited + 16) = xmmword_100EF5A10;
        v44 = v26;
        v29 = objc_msgSend(v25, "recordName");
        v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
        v32 = v31;

        *(_QWORD *)(inited + 56) = &type metadata for String;
        v33 = sub_1004CFC2C();
        *(_QWORD *)(inited + 64) = v33;
        *(_QWORD *)(inited + 32) = v30;
        *(_QWORD *)(inited + 40) = v32;
        v34 = objc_msgSend(v45, "zoneName");
        v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
        v37 = v36;

        *(_QWORD *)(inited + 96) = &type metadata for String;
        *(_QWORD *)(inited + 104) = v33;
        *(_QWORD *)(inited + 72) = v35;
        *(_QWORD *)(inited + 80) = v37;
        v39 = static os_log_type_t.default.getter(v38);
        sub_100A06EBC((uint64_t)v44, &_mh_execute_header, v39, "Adding unknown remote record to zonesNeedingRefetch, recordID: %@, zoneID: %@", 77, 2, inited);
        swift_setDeallocating(inited);
        v40 = sub_1004B804C(&qword_1013E0190);
        swift_arrayDestroy(inited + 32, 2, v40);

        v41 = v45;
        sub_100ADA768((Swift::Int *)&v49, v41, (unint64_t *)&qword_1013E1770, CKRecordZoneID_ptr, (uint64_t *)&unk_1013DE990);

        swift_unknownObjectRelease_n(v10, 2);
      }
      else
      {
        sub_100757E04(&_mh_execute_header, (uint64_t)"_sync_mergeRemoteSyncRecords(_:context:)", 40, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2, 9271, "Unknown record type", 19, 2u, (uint64_t)_swiftEmptyArrayStorage);
        sub_100518FC0((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"Unknown record type");
        sub_100519194((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"_sync_mergeRemoteSyncRecords(_:context:)", 40, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2u, 9271, (uint64_t)"Unknown record type", 19, 2u);
        SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v42, v43);
        _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Freeform/CRLAssert.swift", 24, 2, 348, 0);
        __break(1u);
      }
    }
  }
  else
  {
    if (qword_1013DD858 != -1)
      swift_once(&qword_1013DD858, sub_100A05554);
    swift_beginAccess(&static OS_os_log.boardStore, v48, 0, 0);
    v19 = (id)static OS_os_log.boardStore;
    v21 = static os_log_type_t.info.getter(v20);
    sub_100A06EBC((uint64_t)v19, &_mh_execute_header, v21, "Skipping a change with no data", 30, 2, (uint64_t)_swiftEmptyArrayStorage);

  }
}

uint64_t sub_100ACB084(void (*a1)(_QWORD *, uint64_t, uint64_t), uint64_t a2, int a3, int a4, objc_class *a5, uint64_t a6, uint64_t a7, uint64_t a8, _BYTE *a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  void (*v22)(_QWORD *, uint64_t, uint64_t);
  id v23;
  void (*v24)(_QWORD *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  _BYTE *v65;
  uint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _BYTE *v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  Class v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _BYTE v101[24];
  uint64_t v102;

  v92 = a8;
  v94 = a6;
  v95 = a7;
  v96 = a5;
  v93 = a4;
  v97 = a3;
  v11 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v11);
  v98 = (uint64_t)&v90 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v99 = (uint64_t)&v90 - v14;
  v15 = type metadata accessor for DispatchPredicate(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (uint64_t *)((char *)&v90 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v102 = v9;
  v20 = *(void **)(v9 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v19 = v20;
  v21 = enum case for DispatchPredicate.onQueue(_:);
  v22 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v16 + 104);
  ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v22)(v19, enum case for DispatchPredicate.onQueue(_:), v15, v17);
  v23 = v20;
  LOBYTE(v20) = _dispatchPreconditionTest(_:)(v19);
  v24 = *(void (**)(_QWORD *, uint64_t))(v16 + 8);
  v24(v19, v15);
  if ((v20 & 1) == 0)
  {
    __break(1u);
    goto LABEL_44;
  }
  v91 = a9;
  v25 = type metadata accessor for CRLBoardItemSyncRemoteRecord(0);
  v26 = swift_dynamicCastClass(a1, v25);
  if (v26)
  {
    v27 = v26;
    v28 = v26 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_boardIdentifier;
    v29 = v98;
    sub_1004B8460(v26 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_boardIdentifier, v98, type metadata accessor for CRLBoardIdentifier);
    swift_unknownObjectRetain(a1);
    v30 = v99;
    sub_100AD7844(v99, v29);
    sub_1004B84A4(v30, type metadata accessor for CRLBoardIdentifier);
    v31 = v100;
    v32 = sub_100AC7DE4(v27, (uint64_t)v96, v97 & 1);
    v22 = a1;
    if (!v31)
    {
      v35 = v33;
      v36 = v34;
      swift_bridgeObjectRetain(v32);
      sub_100512BA0(v37);
      swift_bridgeObjectRetain(v35);
      sub_100512BA0(v38);
      if (v36)
      {
        if (v36 == 1)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          *v91 = 1;
          if ((v93 & 1) == 0)
            goto LABEL_27;
        }
        else
        {
          v60 = v98;
          sub_1004B8460(v28, v98, type metadata accessor for CRLBoardIdentifier);
          v61 = v99;
          sub_100AD7844(v99, v60);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1004B84A4(v61, type metadata accessor for CRLBoardIdentifier);
          if ((v93 & 1) == 0)
          {
LABEL_27:
            swift_unknownObjectRelease(v22);
LABEL_28:
            v49 = 1;
            return v49 & 1;
          }
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v93 & 1) == 0)
          goto LABEL_27;
      }
      sub_100566EC0(v27);
      goto LABEL_27;
    }
LABEL_10:
    swift_unknownObjectRelease(v22);
    return v49 & 1;
  }
  v39 = type metadata accessor for CRLBoardSyncRemoteRecord(0);
  v40 = swift_dynamicCastClass(a1, v39);
  if (!v40)
  {
    v50 = type metadata accessor for CRLBoardShareSyncRemoteRecord(0);
    v51 = swift_dynamicCastClass(a1, v50);
    if (!v51)
    {
      v62 = type metadata accessor for CRLFreehandDrawingBucketSyncRemoteRecord(0);
      v63 = swift_dynamicCastClass(a1, v62);
      v22 = a1;
      if (v63)
      {
        v64 = (_BYTE *)v63;
        swift_unknownObjectRetain(a1);
        v65 = v64;
        v66 = v100;
        v67 = sub_100AC95C0(v65, v96, v97 & 1);
        if (!v66)
        {
          v69 = v68;
          sub_100512BA0((uint64_t)v67);
          sub_100512BA0(v69);
          goto LABEL_27;
        }
        goto LABEL_10;
      }
      v74 = type metadata accessor for CRLUserBoardMetadataSyncRemoteRecord(0);
      v75 = swift_dynamicCastClass(a1, v74);
      v76 = v100;
      if (!v75)
      {
        v49 = 0;
        return v49 & 1;
      }
      if ((v97 & 1) == 0)
      {
        v80 = (char *)v75;
        swift_unknownObjectRetain(a1);
        v81 = sub_100ACA120(v80);
        if (v76)
          goto LABEL_10;
        v84 = v82;
        v85 = v83;
        swift_bridgeObjectRetain(v81);
        sub_100512BA0(v86);
        swift_bridgeObjectRetain(v84);
        sub_100512BA0(v87);
        if (v85)
        {
          if (v85 != 1)
          {
            v88 = v98;
            sub_1004B8460((uint64_t)&v80[OBJC_IVAR____TtC8Freeform30CRLUserBoardMetadataSyncRecord_boardIdentifier], v98, type metadata accessor for CRLBoardIdentifier);
            v89 = v99;
            sub_100AD7844(v99, v88);
            swift_unknownObjectRelease(a1);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v73 = v89;
            goto LABEL_31;
          }
          sub_100757E04(&_mh_execute_header, (uint64_t)"_sync_applySyncRemoteRecord(record:shouldOverwrite:isResultOfSave:cachedBoardIdentifiers:zonesToRefetch:unsupportedZonesToRefetch:unsupportedBoardIdentifiers:needsHierarchyChangeNotification:modifiedBoardIdentifiers:)", 217, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2, 9363, "Merging a CRLUserBoardMetadataSyncRemoteRecord shouldn't result in us becoming supported again.", 95, 2u, (uint64_t)_swiftEmptyArrayStorage);
          sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"_sync_applySyncRemoteRecord(record:shouldOverwrite:isResultOfSave:cachedBoardIdentifiers:zonesToRefetch:unsupportedZonesToRefetch:unsupportedBoardIdentifiers:needsHierarchyChangeNotification:modifiedBoardIdentifiers:)", 217, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2u, 9363, (uint64_t)"Merging a CRLUserBoardMetadataSyncRemoteRecord shouldn't result in us becoming supported again.", 95, 2u);
        }
LABEL_26:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_27;
      }
      v77 = qword_1013DD870;
      swift_unknownObjectRetain(a1);
      if (v77 == -1)
      {
LABEL_35:
        swift_beginAccess(&static OS_os_log.dataSync, v101, 0, 0);
        v78 = (id)static OS_os_log.dataSync;
        v79 = static os_log_type_t.error.getter(v78);
        sub_100A06EBC((uint64_t)v78, &_mh_execute_header, v79, "Unexpected call to overwrite a boardMetadataRecord.", 51, 2, (uint64_t)_swiftEmptyArrayStorage);
        swift_unknownObjectRelease(v22);

        goto LABEL_28;
      }
LABEL_45:
      swift_once(&qword_1013DD870, sub_100A059E0);
      goto LABEL_35;
    }
    v52 = v51;
    *v19 = v23;
    v22(v19, v21, v15);
    v53 = v23;
    swift_unknownObjectRetain(a1);
    v54 = _dispatchPreconditionTest(_:)(v19);
    v24(v19, v15);
    if ((v54 & 1) != 0)
    {
      v55 = v100;
      sub_100AC8B54(*(void **)(v52 + OBJC_IVAR____TtC8Freeform23CRLBoardShareSyncRecord_ckShare), v52 + OBJC_IVAR____TtC8Freeform23CRLBoardShareSyncRecord_boardIdentifier);
      swift_unknownObjectRelease(a1);
      if (v55)
        return v49 & 1;
      goto LABEL_28;
    }
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  v41 = (char *)v40;
  v42 = v40 + OBJC_IVAR____TtC8Freeform18CRLBoardSyncRecord_boardIdentifier;
  v43 = v98;
  sub_1004B8460(v40 + OBJC_IVAR____TtC8Freeform18CRLBoardSyncRecord_boardIdentifier, v98, type metadata accessor for CRLBoardIdentifier);
  swift_unknownObjectRetain(a1);
  v44 = v99;
  sub_100AD7844(v99, v43);
  sub_1004B84A4(v44, type metadata accessor for CRLBoardIdentifier);
  v45 = v100;
  v46 = sub_100AC991C(v41, v97 & 1);
  v22 = a1;
  if (v45)
    goto LABEL_10;
  v56 = v47;
  v57 = v48;
  swift_bridgeObjectRetain(v46);
  sub_100512BA0(v58);
  swift_bridgeObjectRetain(v56);
  sub_100512BA0(v59);
  if (!v57)
    goto LABEL_26;
  if (v57 != 1)
  {
    v71 = v98;
    sub_1004B8460(v42, v98, type metadata accessor for CRLBoardIdentifier);
    v72 = v99;
    sub_100AD7844(v99, v71);
    swift_unknownObjectRelease(a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v73 = v72;
LABEL_31:
    sub_1004B84A4(v73, type metadata accessor for CRLBoardIdentifier);
    goto LABEL_28;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease(a1);
  v49 = 1;
  *v91 = 1;
  return v49 & 1;
}

double sub_100ACB7F4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v1 = (uint64_t *)(a1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_recordIDsToOverwrite);
  swift_beginAccess(a1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_recordIDsToOverwrite, v6, 0, 0);
  v2 = *v1;
  if ((v2 & 0xC000000000000001) == 0)
  {
    if (!*(_QWORD *)(v2 + 16))
      return sub_100566BB8();
    goto LABEL_6;
  }
  if (v2 < 0)
    v3 = v2;
  else
    v3 = v2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v2);
  v4 = __CocoaSet.count.getter(v3);
  swift_bridgeObjectRelease();
  if (v4)
  {
LABEL_6:
    sub_100757E04(&_mh_execute_header, (uint64_t)"sync_willApplySyncSaveResults(syncScope:)", 41, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2, 9376, "Expected recordIDsToOverwrite to be empty before saving new changes.", 68, 2u, (uint64_t)_swiftEmptyArrayStorage);
    sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"sync_willApplySyncSaveResults(syncScope:)", 41, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2u, 9376, (uint64_t)"Expected recordIDsToOverwrite to be empty before saving new changes.", 68, 2u);
  }
  return sub_100566BB8();
}

double sub_100ACB92C(uint64_t a1, char a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v14;
  _BYTE v15[24];

  v4 = (uint64_t *)(a1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_recordIDsToOverwrite);
  swift_beginAccess(a1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_recordIDsToOverwrite, v15, 1, 0);
  v5 = *v4;
  if ((*v4 & 0xC000000000000001) != 0)
  {
    if (v5 < 0)
      v6 = *v4;
    else
      v6 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v4);
    v7 = __CocoaSet.count.getter(v6);
    swift_bridgeObjectRelease();
    if (!v7)
      goto LABEL_13;
  }
  else if (!*(_QWORD *)(v5 + 16))
  {
    goto LABEL_13;
  }
  v8 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_syncHelper);
  if (v8)
  {
    v9 = *v4;
    swift_retain(*(_QWORD *)(a1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_syncHelper));
    swift_bridgeObjectRetain(v9);
    sub_100D0254C(v10, 1, a2 & 1);
    swift_release(v8);
    swift_bridgeObjectRelease();
  }
  else
  {
    if (qword_1013DD870 != -1)
      swift_once(&qword_1013DD870, sub_100A059E0);
    swift_beginAccess(&static OS_os_log.dataSync, &v14, 0, 0);
    v11 = (id)static OS_os_log.dataSync;
    v12 = static os_log_type_t.error.getter(v11);
    sub_100A06EBC((uint64_t)v11, &_mh_execute_header, v12, "Refetching readOnly changes was cancelled because there is no syncHelper set on the dataStore", 93, 2, (uint64_t)_swiftEmptyArrayStorage);

  }
LABEL_13:
  *v4 = (uint64_t)&_swiftEmptySetSingleton;
  swift_bridgeObjectRelease();
  return sub_100567244();
}

double sub_100ACBABC(void *a1, uint64_t a2, char a3)
{
  char v4;
  char *v5;
  double result;

  v4 = a3 & 1;
  v5 = a1;
  swift_retain(a2);
  sub_1004E7128(v5, (uint64_t)v5, a2, v4);

  *(_QWORD *)&result = swift_release(a2).n128_u64[0];
  return result;
}

void sub_100ACBB24(uint64_t a1, int a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  id v23;
  char v24;
  char v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int64_t v31;
  unint64_t v32;
  unint64_t v33;
  BOOL v34;
  unint64_t v35;
  int64_t v36;
  uint64_t v37;
  id v38;
  __n128 v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t *v63;
  uint64_t i;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  int64_t v88;
  int64_t v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _BYTE v98[152];
  uint64_t v99;
  _QWORD *v100;
  char v101;
  _QWORD *v102;
  void *v103;
  void *v104;
  char *v105;
  _QWORD *v106;
  _QWORD *v107;

  LODWORD(v93) = a2;
  v94 = a1;
  v4 = type metadata accessor for CRLBoardIdentifier(0);
  v96 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v86 = (uint64_t)&v83 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v84 = (uint64_t)&v83 - v7;
  __chkstk_darwin(v8);
  v95 = (uint64_t)&v83 - v9;
  __chkstk_darwin(v10);
  v90 = (uint64_t)&v83 - v11;
  __chkstk_darwin(v12);
  v14 = (char *)&v83 - v13;
  __chkstk_darwin(v15);
  v91 = (uint64_t *)((char *)&v83 - v16);
  v17 = type metadata accessor for DispatchPredicate(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = (uint64_t *)((char *)&v83 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v22 = *(void **)&v2[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue];
  *v21 = v22;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v18 + 104))(v21, enum case for DispatchPredicate.onQueue(_:), v17, v19);
  v23 = v22;
  v24 = _dispatchPreconditionTest(_:)(v21);
  (*(void (**)(_QWORD *, uint64_t))(v18 + 8))(v21, v17);
  if ((v24 & 1) == 0)
    goto LABEL_87;
  v25 = v93 & 1;
  v107 = _swiftEmptyDictionarySingleton;
  v105 = (char *)&_swiftEmptySetSingleton;
  v106 = &_swiftEmptySetSingleton;
  v103 = &_swiftEmptySetSingleton;
  v104 = &_swiftEmptySetSingleton;
  v102 = &_swiftEmptySetSingleton;
  v101 = 0;
  v100 = &_swiftEmptySetSingleton;
  v26 = v2;
  sub_100615BD4(v94, v26, (uint64_t)&v107, (uint64_t)&v104, (void (*)(char *, uint64_t))&v103, (uint64_t)&v102, (uint64_t)&v101, (uint64_t)&v100, v25, (char *)&v105);
  if (v3)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_51:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }

  v27 = v106[7];
  v87 = (char *)(v106 + 7);
  v28 = 1 << *((_BYTE *)v106 + 32);
  v29 = -1;
  if (v28 < 64)
    v29 = ~(-1 << v28);
  v30 = v29 & v27;
  v88 = (unint64_t)(v28 + 63) >> 6;
  v92 = v106;
  swift_bridgeObjectRetain(v106);
  v31 = 0;
  v85 = 0x8000000100FF4980;
  v93 = xmmword_100EF5E40;
  v94 = (uint64_t)v26;
  v89 = (int64_t)v14;
  while (1)
  {
    if (v30)
    {
      v32 = __clz(__rbit64(v30));
      v30 &= v30 - 1;
      v33 = v32 | (v31 << 6);
      goto LABEL_21;
    }
    v34 = __OFADD__(v31++, 1);
    if (v34)
    {
      __break(1u);
LABEL_84:
      __break(1u);
      goto LABEL_85;
    }
    if (v31 >= v88)
      goto LABEL_29;
    v35 = *(_QWORD *)&v87[8 * v31];
    if (!v35)
      break;
LABEL_20:
    v30 = (v35 - 1) & v35;
    v33 = __clz(__rbit64(v35)) + (v31 << 6);
LABEL_21:
    v37 = (uint64_t)v91;
    sub_1004B8460(v92[6] + *(_QWORD *)(v96 + 72) * v33, (uint64_t)v91, type metadata accessor for CRLBoardIdentifier);
    sub_1004B84E0(v37, (uint64_t)v14, type metadata accessor for CRLBoardIdentifier);
    if ((sub_100A83A44() & 1) != 0)
    {
      if (qword_1013DD858 != -1)
        swift_once(&qword_1013DD858, sub_100A05554);
      swift_beginAccess(&static OS_os_log.boardStore, &v99, 0, 0);
      v38 = (id)static OS_os_log.boardStore;
      v40 = static os_log_type_t.default.getter(v39);
      sub_100A06EBC((uint64_t)v38, &_mh_execute_header, v40, "User deleted zone was synced at least once. Purging it in response to userDeleteZone error", 90, 2, (uint64_t)_swiftEmptyArrayStorage);

      sub_100A9A978((uint64_t)v14, 0xD00000000000001FLL, v85, 0);
    }
    sub_1004B84A4((uint64_t)v14, type metadata accessor for CRLBoardIdentifier);
  }
  v36 = v31 + 1;
  if (v31 + 1 >= v88)
    goto LABEL_29;
  v35 = *(_QWORD *)&v87[8 * v36];
  if (v35)
    goto LABEL_19;
  v36 = v31 + 2;
  if (v31 + 2 >= v88)
    goto LABEL_29;
  v35 = *(_QWORD *)&v87[8 * v36];
  if (v35)
  {
LABEL_19:
    v31 = v36;
    goto LABEL_20;
  }
  v36 = v31 + 3;
  if (v31 + 3 < v88)
  {
    v35 = *(_QWORD *)&v87[8 * v36];
    if (!v35)
    {
      while (1)
      {
        v31 = v36 + 1;
        if (__OFADD__(v36, 1))
          break;
        if (v31 >= v88)
          goto LABEL_29;
        v35 = *(_QWORD *)&v87[8 * v31];
        ++v36;
        if (v35)
          goto LABEL_20;
      }
LABEL_85:
      __break(1u);
      goto LABEL_86;
    }
    goto LABEL_19;
  }
LABEL_29:
  swift_release(v92);
  v41 = v105;
  v42 = *((_QWORD *)v105 + 7);
  v88 = (int64_t)(v105 + 56);
  v43 = 1 << v105[32];
  v44 = -1;
  if (v43 < 64)
    v44 = ~(-1 << v43);
  v45 = v44 & v42;
  v89 = (unint64_t)(v43 + 63) >> 6;
  swift_bridgeObjectRetain(v105);
  v46 = 0;
  v91 = (_QWORD *)0x8000000100FF49A0;
  v87 = v41;
  while (2)
  {
    if (v45)
    {
      v47 = __clz(__rbit64(v45));
      v45 &= v45 - 1;
      v48 = v47 | (v46 << 6);
LABEL_45:
      v51 = v90;
      sub_1004B8460(*((_QWORD *)v41 + 6) + *(_QWORD *)(v96 + 72) * v48, v90, type metadata accessor for CRLBoardIdentifier);
      v52 = v51;
      v53 = v95;
      sub_1004B84E0(v52, v95, type metadata accessor for CRLBoardIdentifier);
      sub_100A9A978(v53, 0xD00000000000001DLL, (uint64_t)v91, 0);
      sub_1004B84A4(v95, type metadata accessor for CRLBoardIdentifier);
      continue;
    }
    break;
  }
  v34 = __OFADD__(v46++, 1);
  if (v34)
    goto LABEL_84;
  if (v46 >= v89)
  {
LABEL_50:
    swift_release(v41);
    v54 = (uint64_t)v104;
    swift_bridgeObjectRetain(v104);
    v55 = sub_1001E9730();
    sub_100AB15FC(v54, v55);
    swift_bridgeObjectRelease();
    v56 = (int64_t)v103;
    swift_bridgeObjectRetain(v103);
    sub_100AB3B88(v57);
    swift_bridgeObjectRelease();
    v58 = (uint64_t)v100;
    v88 = v56;
    v89 = v54;
    v59 = v100[7];
    v90 = 0;
    v91 = v100 + 7;
    v60 = 1 << *((_BYTE *)v100 + 32);
    v61 = -1;
    if (v60 < 64)
      v61 = ~(-1 << v60);
    v62 = v61 & v59;
    v63 = (uint64_t *)&v26[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_transientSyncExclusions];
    *(_QWORD *)&v93 = (unint64_t)(v60 + 63) >> 6;
    swift_bridgeObjectRetain(v100);
    for (i = 0; ; i = v95)
    {
      if (v62)
      {
        v66 = __clz(__rbit64(v62));
        v62 &= v62 - 1;
        v95 = i;
        v67 = v66 | (i << 6);
      }
      else
      {
        v68 = i + 1;
        if (__OFADD__(i, 1))
          goto LABEL_88;
        if (v68 >= (uint64_t)v93)
        {
LABEL_76:
          swift_release(v58);
          if (*(_QWORD *)(v58 + 16))
          {
            swift_bridgeObjectRetain(v58);
            v81 = sub_1008D800C((uint64_t)_swiftEmptyArrayStorage);
            sub_100A75778(v58, 0, 0, v81);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          v82 = (uint64_t)v102;
          if ((v101 & 1) != 0 || v102[2])
          {
            swift_bridgeObjectRetain(v102);
            sub_100A75388((uint64_t)&_swiftEmptySetSingleton, v82, 0);
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_51;
        }
        v69 = v91[v68];
        v70 = i + 1;
        if (!v69)
        {
          v70 = i + 2;
          if (i + 2 >= (uint64_t)v93)
            goto LABEL_76;
          v69 = v91[v70];
          if (!v69)
          {
            v70 = i + 3;
            if (i + 3 >= (uint64_t)v93)
              goto LABEL_76;
            v69 = v91[v70];
            if (!v69)
            {
              v71 = i + 4;
              if (i + 4 >= (uint64_t)v93)
                goto LABEL_76;
              v69 = v91[v71];
              if (!v69)
              {
                while (1)
                {
                  v70 = v71 + 1;
                  if (__OFADD__(v71, 1))
                    goto LABEL_89;
                  if (v70 >= (uint64_t)v93)
                    goto LABEL_76;
                  v69 = v91[v70];
                  ++v71;
                  if (v69)
                    goto LABEL_72;
                }
              }
              v70 = i + 4;
            }
          }
        }
LABEL_72:
        v62 = (v69 - 1) & v69;
        v95 = v70;
        v67 = __clz(__rbit64(v69)) + (v70 << 6);
      }
      v72 = v58;
      v73 = *(_QWORD *)(v58 + 48);
      v74 = *(_QWORD *)(v96 + 72);
      v75 = v84;
      sub_1004B8460(v73 + v74 * v67, v84, type metadata accessor for CRLBoardIdentifier);
      v76 = v86;
      sub_1004B84E0(v75, v86, type metadata accessor for CRLBoardIdentifier);
      swift_beginAccess(v63, v98, 33, 0);
      swift_bridgeObjectRetain(*v63);
      v77 = sub_100843264(v76);
      LOBYTE(v76) = v78;
      swift_bridgeObjectRelease();
      if ((v76 & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v63);
        v80 = *v63;
        v97 = *v63;
        *v63 = 0x8000000000000000;
        if (!isUniquelyReferenced_nonNull_native)
        {
          sub_100833E74();
          v80 = v97;
        }
        sub_1004B84A4(*(_QWORD *)(v80 + 48) + v77 * v74, type metadata accessor for CRLBoardIdentifier);
        v65 = *(_QWORD *)(*(_QWORD *)(v80 + 56) + 8 * v77);
        sub_10051B744(v77, v80);
        *v63 = v80;
        swift_release(v65);
        swift_bridgeObjectRelease();
      }
      swift_endAccess(v98);
      sub_1004B84A4(v86, type metadata accessor for CRLBoardIdentifier);
      v58 = v72;
    }
  }
  v49 = *(_QWORD *)(v88 + 8 * v46);
  if (v49)
  {
LABEL_44:
    v45 = (v49 - 1) & v49;
    v48 = __clz(__rbit64(v49)) + (v46 << 6);
    goto LABEL_45;
  }
  v50 = v46 + 1;
  if (v46 + 1 >= v89)
    goto LABEL_50;
  v49 = *(_QWORD *)(v88 + 8 * v50);
  if (v49)
    goto LABEL_43;
  v50 = v46 + 2;
  if (v46 + 2 >= v89)
    goto LABEL_50;
  v49 = *(_QWORD *)(v88 + 8 * v50);
  if (v49)
    goto LABEL_43;
  v50 = v46 + 3;
  if (v46 + 3 >= v89)
    goto LABEL_50;
  v49 = *(_QWORD *)(v88 + 8 * v50);
  if (v49)
  {
LABEL_43:
    v46 = v50;
    goto LABEL_44;
  }
  while (1)
  {
    v46 = v50 + 1;
    if (__OFADD__(v50, 1))
      break;
    if (v46 >= v89)
      goto LABEL_50;
    v49 = *(_QWORD *)(v88 + 8 * v46);
    ++v50;
    if (v49)
      goto LABEL_44;
  }
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
LABEL_89:
  __break(1u);
}

void sub_100ACC7B8(void *a1, uint64_t a2)
{
  sub_100ACCDFC(a1, a2, (void (*)(id, uint64_t, id))sub_1004E73E4);
}

uint64_t sub_100ACC7D4(uint64_t a1, char *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t result;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  __n128 v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void *v43;
  const void *v44;
  uint64_t v45;
  _QWORD v46[2];
  unint64_t v47;
  char *v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD aBlock[5];
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[5];

  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v58 = *(_QWORD *)(v5 - 8);
  v59 = v5;
  __chkstk_darwin(v5);
  v57 = (char *)v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = type metadata accessor for DispatchQoS(0);
  v55 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  v54 = (char *)v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CRLBoardIdentifier(0);
  v53 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v51 = (uint64_t)v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = v9;
  __chkstk_darwin(v10);
  v65 = (uint64_t)v46 - v11;
  v12 = type metadata accessor for DispatchPredicate(0);
  v61 = *(_QWORD *)(v12 - 8);
  v62 = v12;
  __chkstk_darwin(v12);
  v60 = (_QWORD *)((char *)v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = *(_QWORD *)(a1 + 16);
  if (!v14)
    return 1;
  v50 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue;
  v15 = a1 + 32;
  v49 = enum case for DispatchPredicate.onQueue(_:);
  v46[1] = a1;
  swift_bridgeObjectRetain(a1);
  v16 = 0x8000000100FF5CE0;
  v48 = a2;
  v47 = 0x8000000100FF5CE0;
  while (1)
  {
    sub_1004E90B0(v15, (uint64_t)v69);
    sub_1004E90B0((uint64_t)v69, (uint64_t)aBlock);
    v18 = sub_1004B804C(&qword_101405648);
    v19 = type metadata accessor for CRLBoardSyncRemoteRecordIdentifier(0);
    if ((swift_dynamicCast(&v68, aBlock, v18, v19, 6) & 1) != 0)
    {
      v17 = v68;
      sub_100A9A978(v68 + OBJC_IVAR____TtC8Freeform34CRLBoardSyncRemoteRecordIdentifier_boardIdentifier, 0xD000000000000020, v16, 0);
      if (v2)
        goto LABEL_17;
LABEL_8:
      swift_release(v17);
LABEL_9:
      _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v69);
      goto LABEL_10;
    }
    sub_1004E90B0((uint64_t)v69, (uint64_t)aBlock);
    v20 = type metadata accessor for CRLBoardItemSyncRemoteRecordIdentifier(0);
    if ((swift_dynamicCast(&v68, aBlock, v18, v20, 6) & 1) != 0)
    {
      v17 = v68;
      sub_100A8DE24(v68 + OBJC_IVAR____TtC8Freeform38CRLBoardItemSyncRemoteRecordIdentifier_itemUUID, v68 + OBJC_IVAR____TtC8Freeform38CRLBoardItemSyncRemoteRecordIdentifier_boardIdentifier);
      if (v2)
        goto LABEL_17;
      goto LABEL_8;
    }
    sub_1004E90B0((uint64_t)v69, (uint64_t)aBlock);
    v21 = type metadata accessor for CRLBoardShareSyncRemoteRecordIdentifier(0);
    if ((swift_dynamicCast(&v68, aBlock, v18, v21, 6) & 1) == 0)
      goto LABEL_9;
    v17 = v68;
    v22 = *(void **)&a2[v50];
    v23 = v60;
    v24 = v61;
    *v60 = v22;
    v25 = v62;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v24 + 104))(v23, v49, v62);
    v26 = v22;
    LOBYTE(v22) = _dispatchPreconditionTest(_:)(v23);
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(v24 + 8))(v23, v25);
    if ((v22 & 1) == 0)
      break;
    v28 = v65;
    sub_1004B8460(v17 + OBJC_IVAR____TtC8Freeform39CRLBoardShareSyncRemoteRecordIdentifier_boardIdentifier, v65, type metadata accessor for CRLBoardIdentifier);
    sub_100A8EDF8(v28, 0, 0xF000000000000000, 0);
    if (v2)
    {
      sub_1004B84A4(v65, type metadata accessor for CRLBoardIdentifier);
LABEL_17:
      swift_release(v17);
      _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v69);
LABEL_18:
      swift_bridgeObjectRelease();
      return 1;
    }
    sub_1004B8930(0, (unint64_t *)&qword_1013DE090, OS_dispatch_queue_ptr);
    v64 = static OS_dispatch_queue.main.getter(v29);
    v30 = v51;
    sub_1004B8460(v65, v51, type metadata accessor for CRLBoardIdentifier);
    v31 = *(unsigned __int8 *)(v53 + 80);
    v32 = (v31 + 24) & ~v31;
    v33 = swift_allocObject(&unk_101293848, v32 + v52, v31 | 7);
    *(_QWORD *)(v33 + 16) = a2;
    sub_1004B84E0(v30, v33 + v32, type metadata accessor for CRLBoardIdentifier);
    aBlock[4] = sub_100B012CC;
    v67 = v33;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = *(_QWORD *)"";
    aBlock[2] = sub_1005D2FC0;
    aBlock[3] = &unk_101293860;
    v63 = _Block_copy(aBlock);
    v34 = v67;
    v35 = a2;
    v36 = swift_release(v34);
    v37 = v54;
    static DispatchQoS.unspecified.getter(v36);
    aBlock[0] = _swiftEmptyArrayStorage;
    v38 = sub_1004B7878((unint64_t *)&qword_1013E1D20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v39 = sub_1004B804C((uint64_t *)&unk_1013DFBF0);
    v40 = sub_1004CBA30((unint64_t *)&qword_1013E1D30, (uint64_t *)&unk_1013DFBF0, (uint64_t)&protocol conformance descriptor for [A]);
    v41 = v57;
    v42 = v59;
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v39, v40, v59, v38);
    v44 = v63;
    v43 = (void *)v64;
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v37, v41, v63);
    _Block_release(v44);

    v45 = v42;
    a2 = v48;
    (*(void (**)(char *, uint64_t))(v58 + 8))(v41, v45);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v37, v56);
    sub_1004B84A4(v65, type metadata accessor for CRLBoardIdentifier);
    _s8Freeform26AnyCRLCommandChangeContextVwxx_0(v69);
    swift_release(v17);
    v16 = v47;
LABEL_10:
    v15 += 40;
    if (!--v14)
      goto LABEL_18;
  }
  __break(1u);
  return result;
}

void sub_100ACCDE0(void *a1, uint64_t a2)
{
  sub_100ACCDFC(a1, a2, (void (*)(id, uint64_t, id))sub_1004E7400);
}

void sub_100ACCDFC(void *a1, uint64_t a2, void (*a3)(id, uint64_t, id))
{
  id v6;

  swift_bridgeObjectRetain(a2);
  v6 = a1;
  a3(v6, a2, v6);
  swift_bridgeObjectRelease(a2);

}

uint64_t sub_100ACCE60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[40];
  _QWORD *v29;

  v2 = v1;
  v4 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v4);
  v24 = (uint64_t)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v23 = (uint64_t)v22 - v7;
  __chkstk_darwin(v8);
  v25 = (uint64_t)v22 - v9;
  __chkstk_darwin(v10);
  v12 = (char *)v22 - v11;
  v13 = *(_QWORD *)(a1 + 16);
  if (!v13)
    return 1;
  v14 = a1 + 32;
  v22[1] = a1;
  swift_bridgeObjectRetain(a1);
  while (1)
  {
    v29 = &_swiftEmptySetSingleton;
    sub_1004E90B0(v14, (uint64_t)v28);
    v15 = sub_1004B804C(&qword_101405648);
    v16 = type metadata accessor for CRLBoardSyncRemoteRecordIdentifier(0);
    if ((swift_dynamicCast(&v27, v28, v15, v16, 6) & 1) != 0)
      break;
LABEL_7:
    if (v29[2])
    {
      sub_100ACF498((uint64_t)v29);
      if (v2)
      {
        swift_bridgeObjectRelease();
        goto LABEL_11;
      }
    }
    swift_bridgeObjectRelease();
    v14 += 40;
    if (!--v13)
      goto LABEL_11;
  }
  v17 = v27;
  v18 = v25;
  sub_1004B8460(v27 + OBJC_IVAR____TtC8Freeform34CRLBoardSyncRemoteRecordIdentifier_boardIdentifier, v25, type metadata accessor for CRLBoardIdentifier);
  swift_release(v17);
  sub_1004B84E0(v18, (uint64_t)v12, type metadata accessor for CRLBoardIdentifier);
  sub_100ABD2FC();
  if (!v2)
  {
    sub_100ACD18C(1);
    sub_100ACD4D4(1);
    sub_100ACD81C();
    sub_100A953EC((unint64_t)v12, 1);
    sub_100ACDB48(1);
    sub_100ACDE90(1);
    sub_100ACE1D8();
    v2 = 0;
    v19 = v24;
    sub_1004B8460((uint64_t)v12, v24, type metadata accessor for CRLBoardIdentifier);
    v26 = v13;
    v20 = v23;
    sub_100AD7844(v23, v19);
    v13 = v26;
    sub_1004B84A4(v20, type metadata accessor for CRLBoardIdentifier);
    sub_1004B84A4((uint64_t)v12, type metadata accessor for CRLBoardIdentifier);
    goto LABEL_7;
  }
  sub_1004B84A4((uint64_t)v12, type metadata accessor for CRLBoardIdentifier);
  swift_bridgeObjectRelease();
LABEL_11:
  swift_bridgeObjectRelease();
  return 1;
}

void sub_100ACD18C(sqlite3_int64 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  void (*v11)(_QWORD, __n128);
  id v12;
  void (*v13)(_QWORD *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  void (*v24)(_QWORD *, uint64_t, uint64_t);
  id v25;
  void (*v26)(_QWORD *, uint64_t);
  sqlite3_stmt **v27;
  int v28;
  void *v29;
  id v30;
  char v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  __n128 v35;
  void *v36;
  id v37;
  char v38;
  uint64_t v39;
  void (*v40)(_QWORD *, uint64_t);
  unsigned int v41;
  void (*v42)(_QWORD *, uint64_t, uint64_t);
  _QWORD v43[3];
  _BYTE v44[32];

  v3 = v1;
  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (uint64_t *)((char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v9 = v10;
  v11 = *(void (**)(_QWORD, __n128))(v6 + 104);
  v41 = enum case for DispatchPredicate.onQueue(_:);
  v42 = (void (*)(_QWORD *, uint64_t, uint64_t))v11;
  v11(v9, v7);
  v12 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  v13 = *(void (**)(_QWORD *, uint64_t))(v6 + 8);
  v13(v9, v5);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v40 = v13;
  v43[0] = 0;
  v43[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(45);
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v15 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v15, v44);
  swift_retain(v14);
  v17 = sub_1006B77CC(v16, 0xD00000000000005ALL, 0x8000000100FF5B70);
  swift_release(v14);
  if (v2)
    return;
  sub_1006B5B50(a1, 1);
  v18 = sub_10067BA88();
  v20 = v18;
  v21 = v19;
  sub_1006B5E80(v18, v19);
  sub_1004BBBC8(v20, v21);
  v22 = *(void **)(*(_QWORD *)(v17 + 16) + 32);
  *v9 = v22;
  v23 = v41;
  v24 = v42;
  v42(v9, v41, v5);
  v25 = v22;
  LOBYTE(v22) = _dispatchPreconditionTest(_:)(v9);
  v26 = v40;
  v40(v9, v5);
  if ((v22 & 1) == 0)
    goto LABEL_15;
  v27 = (sqlite3_stmt **)(v17 + 24);
  swift_beginAccess(v17 + 24, v43, 1, 0);
  v28 = sqlite3_step(*(sqlite3_stmt **)(v17 + 24));
  if (v28 != 101)
  {
    v32 = v28;
    v33 = sub_1006B79EC();
    swift_allocError(&type metadata for SQLiteError, v33, 0, 0);
    *(_DWORD *)v34 = v32;
    *(_QWORD *)(v34 + 8) = 0xD00000000000002DLL;
    *(_QWORD *)(v34 + 16) = 0x8000000100FF2220;
    swift_willThrow(v35);
    v36 = *(void **)(*(_QWORD *)(v17 + 16) + 32);
    *v9 = v36;
    v24(v9, v23, v5);
    v37 = v36;
    v38 = _dispatchPreconditionTest(_:)(v9);
    v26(v9, v5);
    if ((v38 & 1) != 0)
    {
      if (*v27)
      {
        sqlite3_finalize(*v27);
        *(_QWORD *)(v17 + 24) = 0;
      }
      goto LABEL_4;
    }
LABEL_17:
    __break(1u);
  }
  v29 = *(void **)(*(_QWORD *)(v17 + 16) + 32);
  *v9 = v29;
  v24(v9, v23, v5);
  v30 = v29;
  v31 = _dispatchPreconditionTest(_:)(v9);
  v26(v9, v5);
  if ((v31 & 1) == 0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (*v27)
  {
    sqlite3_finalize(*v27);
    *v27 = 0;
  }
LABEL_4:
  swift_release(v17);
}

void sub_100ACD4D4(sqlite3_int64 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  void (*v11)(_QWORD, __n128);
  id v12;
  void (*v13)(_QWORD *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  void (*v24)(_QWORD *, uint64_t, uint64_t);
  id v25;
  void (*v26)(_QWORD *, uint64_t);
  sqlite3_stmt **v27;
  int v28;
  void *v29;
  id v30;
  char v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  __n128 v35;
  void *v36;
  id v37;
  char v38;
  uint64_t v39;
  void (*v40)(_QWORD *, uint64_t);
  unsigned int v41;
  void (*v42)(_QWORD *, uint64_t, uint64_t);
  _QWORD v43[3];
  _BYTE v44[32];

  v3 = v1;
  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (uint64_t *)((char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v9 = v10;
  v11 = *(void (**)(_QWORD, __n128))(v6 + 104);
  v41 = enum case for DispatchPredicate.onQueue(_:);
  v42 = (void (*)(_QWORD *, uint64_t, uint64_t))v11;
  v11(v9, v7);
  v12 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  v13 = *(void (**)(_QWORD *, uint64_t))(v6 + 8);
  v13(v9, v5);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v40 = v13;
  v43[0] = 0;
  v43[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(44);
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v15 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v15, v44);
  swift_retain(v14);
  v17 = sub_1006B77CC(v16, 0xD000000000000054, 0x8000000100FF5B10);
  swift_release(v14);
  if (v2)
    return;
  sub_1006B5B50(a1, 1);
  v18 = sub_10067BA88();
  v20 = v18;
  v21 = v19;
  sub_1006B5E80(v18, v19);
  sub_1004BBBC8(v20, v21);
  v22 = *(void **)(*(_QWORD *)(v17 + 16) + 32);
  *v9 = v22;
  v23 = v41;
  v24 = v42;
  v42(v9, v41, v5);
  v25 = v22;
  LOBYTE(v22) = _dispatchPreconditionTest(_:)(v9);
  v26 = v40;
  v40(v9, v5);
  if ((v22 & 1) == 0)
    goto LABEL_15;
  v27 = (sqlite3_stmt **)(v17 + 24);
  swift_beginAccess(v17 + 24, v43, 1, 0);
  v28 = sqlite3_step(*(sqlite3_stmt **)(v17 + 24));
  if (v28 != 101)
  {
    v32 = v28;
    v33 = sub_1006B79EC();
    swift_allocError(&type metadata for SQLiteError, v33, 0, 0);
    *(_DWORD *)v34 = v32;
    *(_QWORD *)(v34 + 8) = 0xD000000000000027;
    *(_QWORD *)(v34 + 16) = 0x8000000100FF21C0;
    swift_willThrow(v35);
    v36 = *(void **)(*(_QWORD *)(v17 + 16) + 32);
    *v9 = v36;
    v24(v9, v23, v5);
    v37 = v36;
    v38 = _dispatchPreconditionTest(_:)(v9);
    v26(v9, v5);
    if ((v38 & 1) != 0)
    {
      if (*v27)
      {
        sqlite3_finalize(*v27);
        *(_QWORD *)(v17 + 24) = 0;
      }
      goto LABEL_4;
    }
LABEL_17:
    __break(1u);
  }
  v29 = *(void **)(*(_QWORD *)(v17 + 16) + 32);
  *v9 = v29;
  v24(v9, v23, v5);
  v30 = v29;
  v31 = _dispatchPreconditionTest(_:)(v9);
  v26(v9, v5);
  if ((v31 & 1) == 0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (*v27)
  {
    sqlite3_finalize(*v27);
    *v27 = 0;
  }
LABEL_4:
  swift_release(v17);
}

void sub_100ACD81C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  void (*v10)(_QWORD *, uint64_t, uint64_t);
  id v11;
  void (*v12)(_QWORD *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  void (*v21)(_QWORD *, uint64_t, uint64_t);
  id v22;
  char v23;
  void (*v24)(_QWORD *, uint64_t);
  sqlite3_stmt **v25;
  int v26;
  void *v27;
  id v28;
  char v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  __n128 v33;
  void *v34;
  id v35;
  char v36;
  void (*v37)(_QWORD *, uint64_t, uint64_t);
  void (*v38)(_QWORD *, uint64_t);
  _QWORD v39[3];
  _BYTE v40[32];

  v2 = v0;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (void (**)(_QWORD *, uint64_t, uint64_t))((char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v7 = v8;
  v9 = enum case for DispatchPredicate.onQueue(_:);
  v10 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v4 + 104);
  ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v10)(v7, enum case for DispatchPredicate.onQueue(_:), v3, v5);
  v11 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  v12 = *(void (**)(_QWORD *, uint64_t))(v4 + 8);
  v12(v7, v3);
  if ((v8 & 1) == 0)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v37 = v10;
  v38 = v12;
  v39[0] = 0;
  v39[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(44);
  swift_bridgeObjectRelease();
  v13 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v14 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v14, v40);
  swift_retain(v13);
  v16 = sub_1006B77CC(v15, 0xD00000000000005ELL, 0x8000000100FF5A60);
  swift_release(v13);
  if (v1)
    return;
  v17 = sub_10067BA88();
  v19 = v18;
  sub_1006B5E80(v17, v18);
  sub_1004BBBC8(v17, v19);
  v20 = *(void **)(*(_QWORD *)(v16 + 16) + 32);
  *v7 = v20;
  v21 = v37;
  v37(v7, v9, v3);
  v22 = v20;
  v23 = _dispatchPreconditionTest(_:)(v7);
  v24 = v38;
  v38(v7, v3);
  if ((v23 & 1) == 0)
    goto LABEL_15;
  v25 = (sqlite3_stmt **)(v16 + 24);
  swift_beginAccess(v16 + 24, v39, 1, 0);
  v26 = sqlite3_step(*(sqlite3_stmt **)(v16 + 24));
  if (v26 != 101)
  {
    v30 = v26;
    v31 = sub_1006B79EC();
    swift_allocError(&type metadata for SQLiteError, v31, 0, 0);
    *(_DWORD *)v32 = v30;
    *(_QWORD *)(v32 + 8) = 0xD000000000000043;
    *(_QWORD *)(v32 + 16) = 0x8000000100FF5AC0;
    swift_willThrow(v33);
    v34 = *(void **)(*(_QWORD *)(v16 + 16) + 32);
    *v7 = v34;
    v21(v7, v9, v3);
    v35 = v34;
    v36 = _dispatchPreconditionTest(_:)(v7);
    v24(v7, v3);
    if ((v36 & 1) != 0)
    {
      if (*v25)
      {
        sqlite3_finalize(*v25);
        *(_QWORD *)(v16 + 24) = 0;
      }
      goto LABEL_4;
    }
LABEL_17:
    __break(1u);
  }
  v27 = *(void **)(*(_QWORD *)(v16 + 16) + 32);
  *v7 = v27;
  v21(v7, v9, v3);
  v28 = v27;
  v29 = _dispatchPreconditionTest(_:)(v7);
  v24(v7, v3);
  if ((v29 & 1) == 0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (*v25)
  {
    sqlite3_finalize(*v25);
    *v25 = 0;
  }
LABEL_4:
  swift_release(v16);
}

void sub_100ACDB48(sqlite3_int64 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  void (*v11)(_QWORD, __n128);
  id v12;
  void (*v13)(_QWORD *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  void (*v24)(_QWORD *, uint64_t, uint64_t);
  id v25;
  void (*v26)(_QWORD *, uint64_t);
  sqlite3_stmt **v27;
  int v28;
  void *v29;
  id v30;
  char v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  __n128 v35;
  void *v36;
  id v37;
  char v38;
  uint64_t v39;
  void (*v40)(_QWORD *, uint64_t);
  unsigned int v41;
  void (*v42)(_QWORD *, uint64_t, uint64_t);
  _QWORD v43[3];
  _BYTE v44[32];

  v3 = v1;
  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (uint64_t *)((char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v9 = v10;
  v11 = *(void (**)(_QWORD, __n128))(v6 + 104);
  v41 = enum case for DispatchPredicate.onQueue(_:);
  v42 = (void (*)(_QWORD *, uint64_t, uint64_t))v11;
  v11(v9, v7);
  v12 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  v13 = *(void (**)(_QWORD *, uint64_t))(v6 + 8);
  v13(v9, v5);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v40 = v13;
  v43[0] = 0;
  v43[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v15 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v15, v44);
  swift_retain(v14);
  v17 = sub_1006B77CC(v16, 0xD000000000000054, 0x8000000100FF5910);
  swift_release(v14);
  if (v2)
    return;
  sub_1006B5B50(a1, 1);
  v18 = sub_10067BA88();
  v20 = v18;
  v21 = v19;
  sub_1006B5E80(v18, v19);
  sub_1004BBBC8(v20, v21);
  v22 = *(void **)(*(_QWORD *)(v17 + 16) + 32);
  *v9 = v22;
  v23 = v41;
  v24 = v42;
  v42(v9, v41, v5);
  v25 = v22;
  LOBYTE(v22) = _dispatchPreconditionTest(_:)(v9);
  v26 = v40;
  v40(v9, v5);
  if ((v22 & 1) == 0)
    goto LABEL_15;
  v27 = (sqlite3_stmt **)(v17 + 24);
  swift_beginAccess(v17 + 24, v43, 1, 0);
  v28 = sqlite3_step(*(sqlite3_stmt **)(v17 + 24));
  if (v28 != 101)
  {
    v32 = v28;
    v33 = sub_1006B79EC();
    swift_allocError(&type metadata for SQLiteError, v33, 0, 0);
    *(_DWORD *)v34 = v32;
    *(_QWORD *)(v34 + 8) = 0xD000000000000032;
    *(_QWORD *)(v34 + 16) = 0x8000000100FF5970;
    swift_willThrow(v35);
    v36 = *(void **)(*(_QWORD *)(v17 + 16) + 32);
    *v9 = v36;
    v24(v9, v23, v5);
    v37 = v36;
    v38 = _dispatchPreconditionTest(_:)(v9);
    v26(v9, v5);
    if ((v38 & 1) != 0)
    {
      if (*v27)
      {
        sqlite3_finalize(*v27);
        *(_QWORD *)(v17 + 24) = 0;
      }
      goto LABEL_4;
    }
LABEL_17:
    __break(1u);
  }
  v29 = *(void **)(*(_QWORD *)(v17 + 16) + 32);
  *v9 = v29;
  v24(v9, v23, v5);
  v30 = v29;
  v31 = _dispatchPreconditionTest(_:)(v9);
  v26(v9, v5);
  if ((v31 & 1) == 0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (*v27)
  {
    sqlite3_finalize(*v27);
    *v27 = 0;
  }
LABEL_4:
  swift_release(v17);
}

void sub_100ACDE90(sqlite3_int64 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  void (*v11)(_QWORD, __n128);
  id v12;
  void (*v13)(_QWORD *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  void (*v24)(_QWORD *, uint64_t, uint64_t);
  id v25;
  void (*v26)(_QWORD *, uint64_t);
  sqlite3_stmt **v27;
  int v28;
  void *v29;
  id v30;
  char v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  __n128 v35;
  void *v36;
  id v37;
  char v38;
  uint64_t v39;
  void (*v40)(_QWORD *, uint64_t);
  unsigned int v41;
  void (*v42)(_QWORD *, uint64_t, uint64_t);
  _QWORD v43[3];
  _BYTE v44[32];

  v3 = v1;
  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (uint64_t *)((char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v9 = v10;
  v11 = *(void (**)(_QWORD, __n128))(v6 + 104);
  v41 = enum case for DispatchPredicate.onQueue(_:);
  v42 = (void (*)(_QWORD *, uint64_t, uint64_t))v11;
  v11(v9, v7);
  v12 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  v13 = *(void (**)(_QWORD *, uint64_t))(v6 + 8);
  v13(v9, v5);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v40 = v13;
  v43[0] = 0;
  v43[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v15 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v15, v44);
  swift_retain(v14);
  v17 = sub_1006B77CC(v16, 0xD00000000000004ALL, 0x8000000100FF5880);
  swift_release(v14);
  if (v2)
    return;
  sub_1006B5B50(a1, 1);
  v18 = sub_10067BA88();
  v20 = v18;
  v21 = v19;
  sub_1006B5E80(v18, v19);
  sub_1004BBBC8(v20, v21);
  v22 = *(void **)(*(_QWORD *)(v17 + 16) + 32);
  *v9 = v22;
  v23 = v41;
  v24 = v42;
  v42(v9, v41, v5);
  v25 = v22;
  LOBYTE(v22) = _dispatchPreconditionTest(_:)(v9);
  v26 = v40;
  v40(v9, v5);
  if ((v22 & 1) == 0)
    goto LABEL_15;
  v27 = (sqlite3_stmt **)(v17 + 24);
  swift_beginAccess(v17 + 24, v43, 1, 0);
  v28 = sqlite3_step(*(sqlite3_stmt **)(v17 + 24));
  if (v28 != 101)
  {
    v32 = v28;
    v33 = sub_1006B79EC();
    swift_allocError(&type metadata for SQLiteError, v33, 0, 0);
    *(_DWORD *)v34 = v32;
    *(_QWORD *)(v34 + 8) = 0xD000000000000030;
    *(_QWORD *)(v34 + 16) = 0x8000000100FF58D0;
    swift_willThrow(v35);
    v36 = *(void **)(*(_QWORD *)(v17 + 16) + 32);
    *v9 = v36;
    v24(v9, v23, v5);
    v37 = v36;
    v38 = _dispatchPreconditionTest(_:)(v9);
    v26(v9, v5);
    if ((v38 & 1) != 0)
    {
      if (*v27)
      {
        sqlite3_finalize(*v27);
        *(_QWORD *)(v17 + 24) = 0;
      }
      goto LABEL_4;
    }
LABEL_17:
    __break(1u);
  }
  v29 = *(void **)(*(_QWORD *)(v17 + 16) + 32);
  *v9 = v29;
  v24(v9, v23, v5);
  v30 = v29;
  v31 = _dispatchPreconditionTest(_:)(v9);
  v26(v9, v5);
  if ((v31 & 1) == 0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (*v27)
  {
    sqlite3_finalize(*v27);
    *v27 = 0;
  }
LABEL_4:
  swift_release(v17);
}

void sub_100ACE1D8()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  void (*v11)(_QWORD, __n128);
  id v12;
  uint64_t v13;
  void (*v14)(_QWORD *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  void (*v27)(_QWORD *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  __n128 v35;
  void *v36;
  id v37;
  sqlite3_stmt **v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  id v46;
  void (*v47)(_QWORD *, uint64_t);
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  unint64_t v52;
  uint64_t v53;
  __n128 v54;
  void *v55;
  id v56;
  sqlite3_stmt **v57;
  __n128 v58;
  void *v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  __n128 v63;
  void *v64;
  id v65;
  sqlite3_stmt **v66;
  __n128 v67;
  void *v68;
  id v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  id v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  __n128 v79;
  void *v80;
  id v81;
  sqlite3_stmt **v82;
  __n128 v83;
  void *v84;
  id v85;
  sqlite3_stmt **v86;
  __n128 v87;
  void *v88;
  id v89;
  unint64_t v90;
  uint64_t v91;
  __n128 v92;
  void *v93;
  id v94;
  sqlite3_stmt **v95;
  __n128 v96;
  void *v97;
  id v98;
  sqlite3_stmt **v99;
  __n128 v100;
  void *v101;
  id v102;
  __n128 v103;
  void *v104;
  id v105;
  sqlite3_stmt **v106;
  __n128 v107;
  void *v108;
  id v109;
  sqlite3_stmt **v110;
  __n128 v111;
  void *v112;
  id v113;
  uint64_t v114;
  unint64_t v115;
  void *v116;
  id v117;
  void *v118;
  id v119;
  __n128 v120;
  void *v121;
  id v122;
  __n128 v123;
  void *v124;
  id v125;
  __n128 v126;
  void *v127;
  id v128;
  unint64_t v129;
  uint64_t v130;
  __n128 v131;
  void *v132;
  id v133;
  __n128 v134;
  void *v135;
  id v136;
  __n128 v137;
  void *v138;
  id v139;
  __n128 v140;
  void *v141;
  id v142;
  uint64_t v143;
  sqlite3_stmt **v144;
  uint64_t v145;
  sqlite3_stmt **v146;
  uint64_t v147;
  sqlite3_stmt **v148;
  void (*v149)(_QWORD *, uint64_t);
  unint64_t v150;
  unsigned int v151;
  void (*v152)(_QWORD *, _QWORD, uint64_t);
  _QWORD v153[3];
  char v154[32];
  _QWORD v155[3];
  char v156[32];
  _QWORD v157[3];
  char v158[32];
  _QWORD v159[2];
  char v160[8];

  v3 = v1;
  v4 = v0;
  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (uint64_t *)((char *)&v143 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v9 = v10;
  v11 = *(void (**)(_QWORD, __n128))(v6 + 104);
  v151 = enum case for DispatchPredicate.onQueue(_:);
  v152 = (void (*)(_QWORD *, _QWORD, uint64_t))v11;
  v11(v9, v7);
  v12 = v10;
  v13 = _dispatchPreconditionTest(_:)(v9);
  v14 = *(void (**)(_QWORD *, uint64_t))(v6 + 8);
  v14(v9, v5);
  if ((v13 & 1) == 0)
    goto LABEL_39;
  v159[0] = 0;
  v159[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(36);
  swift_bridgeObjectRelease();
  v2 = *(_QWORD *)(v4 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v15 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v15, v160);
  swift_retain(v2);
  v17 = sub_1006B77CC(v16, 0xD000000000000042, 0x8000000100FF56C0);
  if (v1)
  {
    v18 = v2;
LABEL_13:
    swift_release(v18);
    return;
  }
  v149 = v14;
  v150 = v17;
  swift_release(v2);
  v19 = sub_10067BA88();
  v21 = v19;
  v22 = v20;
  v23 = v150;
  sub_1006B5E80(v19, v20);
  v24 = v21;
  v4 = v23;
  sub_1004BBBC8(v24, v22);
  v25 = *(void **)(*(_QWORD *)(v23 + 16) + 32);
  *v9 = v25;
  v152(v9, v151, v5);
  v26 = v25;
  LOBYTE(v25) = _dispatchPreconditionTest(_:)(v9);
  v27 = v149;
  v28 = ((uint64_t (*)(_QWORD *, uint64_t))v149)(v9, v5);
  if ((v25 & 1) != 0)
  {
    v148 = (sqlite3_stmt **)(v4 + 24);
    swift_beginAccess(v4 + 24, v159, 1, 0);
    v30 = sqlite3_step(*(sqlite3_stmt **)(v4 + 24));
    if (v30 != 101)
    {
      v32 = v30;
      v33 = sub_1006B79EC();
      swift_allocError(&type metadata for SQLiteError, v33, 0, 0);
      *(_DWORD *)v34 = v32;
      *(_QWORD *)(v34 + 8) = 0xD000000000000025;
      *(_QWORD *)(v34 + 16) = 0x8000000100FF2100;
      swift_willThrow(v35);
      v36 = *(void **)(*(_QWORD *)(v4 + 16) + 32);
      *v9 = v36;
      v152(v9, v151, v5);
      v37 = v36;
      v38 = (sqlite3_stmt **)_dispatchPreconditionTest(_:)(v9);
      v27(v9, v5);
      if ((v38 & 1) == 0)
      {
        __break(1u);
        goto LABEL_73;
      }
      goto LABEL_10;
    }
    v157[0] = 0;
    v157[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(36);
    swift_bridgeObjectRelease();
    swift_initStackObject(v15, v158);
    swift_retain(v2);
    v147 = sub_1006B77CC(v31, 0xD00000000000003DLL, 0x8000000100FF5710);
    swift_release(v2);
    v39 = sub_10067BA88();
    v41 = v39;
    v42 = v40;
    v43 = v147;
    sub_1006B5E80(v39, v40);
    sub_1004BBBC8(v41, v42);
    v44 = v43;
    v45 = *(void **)(*(_QWORD *)(v43 + 16) + 32);
    *v9 = v45;
    v152(v9, v151, v5);
    v46 = v45;
    LOBYTE(v45) = _dispatchPreconditionTest(_:)(v9);
    v47 = v149;
    v149(v9, v5);
    if ((v45 & 1) != 0)
    {
      v146 = (sqlite3_stmt **)(v44 + 24);
      swift_beginAccess(v44 + 24, v157, 1, 0);
      v48 = sqlite3_step(*(sqlite3_stmt **)(v44 + 24));
      if (v48 == 101)
      {
        v155[0] = 0;
        v155[1] = 0xE000000000000000;
        _StringGuts.grow(_:)(36);
        swift_bridgeObjectRelease();
        swift_initStackObject(v15, v156);
        swift_retain(v2);
        v50 = sub_1006B77CC(v49, 0xD000000000000050, 0x8000000100FF5770);
        goto LABEL_22;
      }
      v51 = v48;
      v52 = sub_1006B79EC();
      v3 = swift_allocError(&type metadata for SQLiteError, v52, 0, 0);
      *(_DWORD *)v53 = v51;
      *(_QWORD *)(v53 + 8) = 0xD00000000000001FLL;
      *(_QWORD *)(v53 + 16) = 0x8000000100FF5750;
      swift_willThrow(v54);
      v55 = *(void **)(*(_QWORD *)(v44 + 16) + 32);
      *v9 = v55;
      v152(v9, v151, v5);
      v56 = v55;
      LOBYTE(v55) = _dispatchPreconditionTest(_:)(v9);
      v47(v9, v5);
      if ((v55 & 1) != 0)
      {
        v57 = v146;
        v4 = v150;
        if (*v146)
        {
          sqlite3_finalize(*v146);
          *v57 = 0;
        }
        v58 = swift_release(v147);
        v59 = *(void **)(*(_QWORD *)(v4 + 16) + 32);
        *v9 = v59;
        ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v152)(v9, v151, v5, v58);
        v60 = v59;
        LOBYTE(v59) = _dispatchPreconditionTest(_:)(v9);
        v50 = ((uint64_t (*)(_QWORD *, uint64_t))v47)(v9, v5);
        if ((v59 & 1) != 0)
          goto LABEL_10;
        __break(1u);
LABEL_22:
        v145 = v50;
        swift_release(v2);
        v61 = sub_10067BA88();
        if (v3)
        {
          v63 = swift_release(v145);
          v64 = *(void **)(*(_QWORD *)(v147 + 16) + 32);
          *v9 = v64;
          ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v152)(v9, v151, v5, v63);
          v65 = v64;
          LOBYTE(v64) = _dispatchPreconditionTest(_:)(v9);
          v15 = (uint64_t)v149;
          v149(v9, v5);
          if ((v64 & 1) == 0)
          {
            __break(1u);
            goto LABEL_88;
          }
          v66 = v146;
          v4 = v150;
          if (*v146)
          {
            sqlite3_finalize(*v146);
            *v66 = 0;
          }
          v67 = swift_release(v147);
          v68 = *(void **)(*(_QWORD *)(v4 + 16) + 32);
          *v9 = v68;
          ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v152)(v9, v151, v5, v67);
          v69 = v68;
          LOBYTE(v68) = _dispatchPreconditionTest(_:)(v9);
          v61 = ((uint64_t (*)(_QWORD *, uint64_t))v15)(v9, v5);
          if ((v68 & 1) != 0)
            goto LABEL_10;
          __break(1u);
        }
        v70 = v61;
        v71 = v62;
        v72 = v145;
        sub_1006B5E80(v61, v62);
        sub_1004BBBC8(v70, v71);
        v73 = v72;
        v74 = *(void **)(*(_QWORD *)(v72 + 16) + 32);
        *v9 = v74;
        v152(v9, v151, v5);
        v75 = v74;
        LOBYTE(v74) = _dispatchPreconditionTest(_:)(v9);
        v14 = v149;
        v149(v9, v5);
        if ((v74 & 1) != 0)
        {
          v13 = v73;
          v144 = (sqlite3_stmt **)(v73 + 24);
          swift_beginAccess(v73 + 24, v155, 1, 0);
          v76 = sqlite3_step(*(sqlite3_stmt **)(v73 + 24));
          v4 = 0xD00000000000001FLL;
          if (v76 != 101)
            goto LABEL_40;
          v153[0] = 0;
          v153[1] = 0xE000000000000000;
          _StringGuts.grow(_:)(36);
          swift_bridgeObjectRelease();
          swift_initStackObject(v15, v154);
          swift_retain(v2);
          v78 = sub_1006B77CC(v77, 0xD000000000000046, 0x8000000100FF5800);
          if (!v3)
            goto LABEL_48;
          v79 = swift_release(v2);
          v80 = *(void **)(*(_QWORD *)(v145 + 16) + 32);
          *v9 = v80;
          ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v152)(v9, v151, v5, v79);
          v81 = v80;
          LOBYTE(v80) = _dispatchPreconditionTest(_:)(v9);
          v14(v9, v5);
          v4 = v150;
          if ((v80 & 1) == 0)
            goto LABEL_91;
          v82 = v144;
          if (*v144)
          {
            sqlite3_finalize(*v144);
            *v82 = 0;
          }
          v83 = swift_release(v145);
          v84 = *(void **)(*(_QWORD *)(v147 + 16) + 32);
          *v9 = v84;
          ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v152)(v9, v151, v5, v83);
          v85 = v84;
          LOBYTE(v84) = _dispatchPreconditionTest(_:)(v9);
          v14(v9, v5);
          if ((v84 & 1) == 0)
            goto LABEL_92;
          v86 = v146;
          if (*v146)
          {
            sqlite3_finalize(*v146);
            *v86 = 0;
          }
          v87 = swift_release(v147);
          v88 = *(void **)(*(_QWORD *)(v4 + 16) + 32);
          *v9 = v88;
          ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v152)(v9, v151, v5, v87);
          v89 = v88;
          v13 = _dispatchPreconditionTest(_:)(v9);
          v14(v9, v5);
          if ((v13 & 1) != 0)
            goto LABEL_10;
          __break(1u);
LABEL_39:
          __break(1u);
LABEL_40:
          v90 = sub_1006B79EC();
          v3 = swift_allocError(&type metadata for SQLiteError, v90, 0, 0);
          *(_DWORD *)v91 = 101;
          *(_QWORD *)(v91 + 8) = v4 + 11;
          *(_QWORD *)(v91 + 16) = 0x8000000100FF57D0;
          swift_willThrow(v92);
          v93 = *(void **)(*(_QWORD *)(v13 + 16) + 32);
          *v9 = v93;
          v152(v9, v151, v5);
          v94 = v93;
          LOBYTE(v93) = _dispatchPreconditionTest(_:)(v9);
          v14(v9, v5);
          v4 = v150;
          if ((v93 & 1) != 0)
          {
            v95 = v144;
            if (*v144)
            {
              sqlite3_finalize(*v144);
              *v95 = 0;
            }
            v96 = swift_release(v145);
            v97 = *(void **)(*(_QWORD *)(v147 + 16) + 32);
            *v9 = v97;
            ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v152)(v9, v151, v5, v96);
            v98 = v97;
            LOBYTE(v97) = _dispatchPreconditionTest(_:)(v9);
            v14(v9, v5);
            if ((v97 & 1) != 0)
            {
              v99 = v146;
              if (*v146)
              {
                sqlite3_finalize(*v146);
                *v99 = 0;
              }
              v100 = swift_release(v147);
              v101 = *(void **)(*(_QWORD *)(v4 + 16) + 32);
              *v9 = v101;
              ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v152)(v9, v151, v5, v100);
              v102 = v101;
              LOBYTE(v101) = _dispatchPreconditionTest(_:)(v9);
              v78 = ((uint64_t (*)(_QWORD *, uint64_t))v14)(v9, v5);
              if ((v101 & 1) == 0)
              {
                __break(1u);
LABEL_48:
                v15 = v78;
                swift_release(v2);
                v28 = sub_10067BA88();
                if (!v3)
                  goto LABEL_58;
                v103 = swift_release(v15);
                v104 = *(void **)(*(_QWORD *)(v145 + 16) + 32);
                *v9 = v104;
                ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v152)(v9, v151, v5, v103);
                v105 = v104;
                LOBYTE(v104) = _dispatchPreconditionTest(_:)(v9);
                v149(v9, v5);
                if ((v104 & 1) != 0)
                {
                  v106 = v144;
                  if (*v144)
                  {
                    sqlite3_finalize(*v144);
                    *v106 = 0;
                  }
                  v107 = swift_release(v145);
                  v108 = *(void **)(*(_QWORD *)(v147 + 16) + 32);
                  *v9 = v108;
                  ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v152)(v9, v151, v5, v107);
                  v109 = v108;
                  LOBYTE(v108) = _dispatchPreconditionTest(_:)(v9);
                  v149(v9, v5);
                  if ((v108 & 1) != 0)
                  {
                    v110 = v146;
                    if (*v146)
                    {
                      sqlite3_finalize(*v146);
                      *v110 = 0;
                    }
                    v111 = swift_release(v147);
                    v112 = *(void **)(*(_QWORD *)(v150 + 16) + 32);
                    *v9 = v112;
                    ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v152)(v9, v151, v5, v111);
                    v113 = v112;
                    LOBYTE(v112) = _dispatchPreconditionTest(_:)(v9);
                    v28 = ((uint64_t (*)(_QWORD *, uint64_t))v149)(v9, v5);
                    if ((v112 & 1) != 0)
                      goto LABEL_83;
                    __break(1u);
                    goto LABEL_57;
                  }
LABEL_94:
                  __break(1u);
                  goto LABEL_95;
                }
LABEL_93:
                __break(1u);
                goto LABEL_94;
              }
LABEL_10:
              if (*v148)
              {
                sqlite3_finalize(*v148);
                *(_QWORD *)(v4 + 24) = 0;
              }
              v18 = v4;
              goto LABEL_13;
            }
            goto LABEL_90;
          }
LABEL_89:
          __break(1u);
LABEL_90:
          __break(1u);
LABEL_91:
          __break(1u);
LABEL_92:
          __break(1u);
          goto LABEL_93;
        }
LABEL_88:
        __break(1u);
        goto LABEL_89;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    __break(1u);
  }
LABEL_57:
  __break(1u);
LABEL_58:
  v114 = v28;
  v115 = v29;
  sub_1006B5E80(v28, v29);
  sub_1004BBBC8(v114, v115);
  v116 = *(void **)(*(_QWORD *)(v15 + 16) + 32);
  *v9 = v116;
  v152(v9, v151, v5);
  v117 = v116;
  LOBYTE(v116) = _dispatchPreconditionTest(_:)(v9);
  v149(v9, v5);
  if ((v116 & 1) == 0)
  {
LABEL_95:
    __break(1u);
    goto LABEL_96;
  }
  v38 = (sqlite3_stmt **)(v15 + 24);
  swift_beginAccess(v15 + 24, v153, 1, 0);
  if (sqlite3_step(*(sqlite3_stmt **)(v15 + 24)) == 101)
  {
    v118 = *(void **)(*(_QWORD *)(v15 + 16) + 32);
    *v9 = v118;
    v152(v9, v151, v5);
    v119 = v118;
    LOBYTE(v118) = _dispatchPreconditionTest(_:)(v9);
    v149(v9, v5);
    if ((v118 & 1) != 0)
    {
      if (*v38)
      {
        sqlite3_finalize(*v38);
        *v38 = 0;
      }
      v120 = swift_release(v15);
      v121 = *(void **)(*(_QWORD *)(v145 + 16) + 32);
      *v9 = v121;
      ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v152)(v9, v151, v5, v120);
      v122 = v121;
      LOBYTE(v121) = _dispatchPreconditionTest(_:)(v9);
      v149(v9, v5);
      if ((v121 & 1) != 0)
      {
        if (*v144)
        {
          sqlite3_finalize(*v144);
          *v144 = 0;
        }
        v123 = swift_release(v145);
        v124 = *(void **)(*(_QWORD *)(v147 + 16) + 32);
        *v9 = v124;
        ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v152)(v9, v151, v5, v123);
        v125 = v124;
        LOBYTE(v124) = _dispatchPreconditionTest(_:)(v9);
        v149(v9, v5);
        if ((v124 & 1) != 0)
        {
          if (*v146)
          {
            sqlite3_finalize(*v146);
            *v146 = 0;
          }
          v126 = swift_release(v147);
          v127 = *(void **)(*(_QWORD *)(v150 + 16) + 32);
          *v9 = v127;
          ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v152)(v9, v151, v5, v126);
          v128 = v127;
          LOBYTE(v127) = _dispatchPreconditionTest(_:)(v9);
          v149(v9, v5);
          if ((v127 & 1) != 0)
          {
            if (*v148)
            {
              sqlite3_finalize(*v148);
              *v148 = 0;
            }
LABEL_5:
            v18 = v150;
            goto LABEL_13;
          }
          goto LABEL_99;
        }
LABEL_98:
        __break(1u);
LABEL_99:
        __break(1u);
        goto LABEL_100;
      }
LABEL_97:
      __break(1u);
      goto LABEL_98;
    }
LABEL_96:
    __break(1u);
    goto LABEL_97;
  }
LABEL_73:
  v129 = sub_1006B79EC();
  swift_allocError(&type metadata for SQLiteError, v129, 0, 0);
  *(_DWORD *)v130 = 101;
  *(_QWORD *)(v130 + 8) = 0xD000000000000028;
  *(_QWORD *)(v130 + 16) = 0x8000000100FF5850;
  swift_willThrow(v131);
  v132 = *(void **)(*(_QWORD *)(v15 + 16) + 32);
  *v9 = v132;
  v152(v9, v151, v5);
  v133 = v132;
  LOBYTE(v132) = _dispatchPreconditionTest(_:)(v9);
  v149(v9, v5);
  if ((v132 & 1) != 0)
  {
    if (*v38)
    {
      sqlite3_finalize(*v38);
      *v38 = 0;
    }
    v134 = swift_release(v15);
    v135 = *(void **)(*(_QWORD *)(v145 + 16) + 32);
    *v9 = v135;
    ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v152)(v9, v151, v5, v134);
    v136 = v135;
    LOBYTE(v135) = _dispatchPreconditionTest(_:)(v9);
    v149(v9, v5);
    if ((v135 & 1) == 0)
      goto LABEL_101;
    if (*v144)
    {
      sqlite3_finalize(*v144);
      *v144 = 0;
    }
    v137 = swift_release(v145);
    v138 = *(void **)(*(_QWORD *)(v147 + 16) + 32);
    *v9 = v138;
    ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v152)(v9, v151, v5, v137);
    v139 = v138;
    LOBYTE(v138) = _dispatchPreconditionTest(_:)(v9);
    v149(v9, v5);
    if ((v138 & 1) == 0)
      goto LABEL_102;
    if (*v146)
    {
      sqlite3_finalize(*v146);
      *v146 = 0;
    }
    v140 = swift_release(v147);
    v141 = *(void **)(*(_QWORD *)(v150 + 16) + 32);
    *v9 = v141;
    ((void (*)(_QWORD *, _QWORD, uint64_t, __n128))v152)(v9, v151, v5, v140);
    v142 = v141;
    LOBYTE(v141) = _dispatchPreconditionTest(_:)(v9);
    v149(v9, v5);
    if ((v141 & 1) == 0)
      goto LABEL_103;
LABEL_83:
    if (*v148)
    {
      sqlite3_finalize(*v148);
      v18 = v150;
      *(_QWORD *)(v150 + 24) = 0;
      goto LABEL_13;
    }
    goto LABEL_5;
  }
LABEL_100:
  __break(1u);
LABEL_101:
  __break(1u);
LABEL_102:
  __break(1u);
LABEL_103:
  __break(1u);
}

uint64_t sub_100ACF498(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  __n128 v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;

  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for CRLBoardDataStore.KeyValueTableKey(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_storeEnumTagMultiPayload(v10, v11, 7);
  v37 = v1;
  v12 = sub_100A83944((uint64_t)v10);
  if (v2)
  {
    swift_errorRelease(v2);
LABEL_4:
    v39 = &_swiftEmptySetSingleton;
    goto LABEL_5;
  }
  v14 = v13;
  if (v13 >> 60 == 15)
    goto LABEL_4;
  v30 = v12;
  v35 = v4;
  v31 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v31, *(unsigned int *)(v31 + 48), *(unsigned __int16 *)(v31 + 52));
  v32 = JSONDecoder.init()();
  v33 = sub_1004B804C(&qword_1013E4980);
  v34 = sub_100B00050(&qword_1014054A8, (unint64_t *)&unk_1013FE1B0, (uint64_t)&unk_100F0210C, (uint64_t)&protocol conformance descriptor for <> Set<A>);
  v36 = v32;
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(&v38, v33, v30, v14, v33, v34);
  sub_1004BE2FC(v30, v14);
  swift_release(v36);
  v39 = v38;
  v4 = v35;
LABEL_5:
  swift_bridgeObjectRetain(a1);
  sub_100512568(v15);
  v17 = type metadata accessor for JSONEncoder(0, v16);
  v18 = swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  v19 = JSONEncoder.init()(v18);
  v38 = v39;
  v20 = sub_1004B804C(&qword_1013E4980);
  v21 = sub_100B00050(&qword_1014055E0, &qword_1013DF830, (uint64_t)&unk_100F02134, (uint64_t)&protocol conformance descriptor for <> Set<A>);
  v22 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v38, v20, v21);
  v24 = v23;
  swift_release(v19);
  v25 = swift_bridgeObjectRelease();
  v26 = v37;
  v27 = *(void **)(v37 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v7 = v27;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4, v25);
  v28 = v27;
  LOBYTE(v27) = _dispatchPreconditionTest(_:)(v7);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v27 & 1) != 0)
  {
    sub_1004BE310(v22, v24);
    sub_100AAE8CC((uint64_t)v10, 0, 0, v26, v22, v24);
    sub_1004B84A4((uint64_t)v10, type metadata accessor for CRLBoardDataStore.KeyValueTableKey);
    return sub_1004BBBC8(v22, v24);
  }
  else
  {
    __break(1u);
  }
  return result;
}

double sub_100ACF7E8(char a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v5;
  double result;
  _BYTE v7[24];

  swift_beginAccess(a2 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_transientSyncExclusions, v7, 33, 0);
  v5 = (_BYTE *)sub_100D57754(a3);
  v5[40] = 1;
  v5[16] = 1;
  v5[41] = a1;
  swift_endAccess(v7);
  *(_QWORD *)&result = swift_release(v5).n128_u64[0];
  return result;
}

double sub_100ACF864(void *a1, uint64_t a2)
{
  char *v3;
  double result;

  v3 = a1;
  swift_bridgeObjectRetain(a2);
  sub_1004E7730(v3, (uint64_t)v3, a2);

  *(_QWORD *)&result = swift_bridgeObjectRelease().n128_u64[0];
  return result;
}

uint64_t sub_100ACF8C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v20[3];

  v3 = type metadata accessor for CRLBoardDataStore.KeyValueTableKey(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v20[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_storeEnumTagMultiPayload(v5, v6, 7);
  v7 = sub_100A83944((uint64_t)v5);
  if (v1)
  {
    swift_errorRelease(v1);
LABEL_4:
    if (qword_1013DD858 != -1)
      swift_once(&qword_1013DD858, sub_100A05554);
    swift_beginAccess(&static OS_os_log.boardStore, v20, 0, 0);
    v10 = (id)static OS_os_log.boardStore;
    v11 = static os_log_type_t.error.getter(v10);
    sub_100A06EBC((uint64_t)v10, &_mh_execute_header, v11, "Attempted to remove board identifiers from sync reset boards but data not found", 79, 2, (uint64_t)_swiftEmptyArrayStorage);

    return sub_1004B84A4((uint64_t)v5, type metadata accessor for CRLBoardDataStore.KeyValueTableKey);
  }
  v9 = v8;
  if (v8 >> 60 == 15)
    goto LABEL_4;
  v13 = v7;
  v14 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  v15 = JSONDecoder.init()();
  v16 = sub_1004B804C(&qword_1013E4980);
  v17 = sub_100B00050(&qword_1014054A8, (unint64_t *)&unk_1013FE1B0, (uint64_t)&unk_100F0210C, (uint64_t)&protocol conformance descriptor for <> Set<A>);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v20, v16, v13, v9, v16, v17);
  swift_release(v15);
  if (*(_QWORD *)(a1 + 16) <= *(_QWORD *)(v20[0] + 16) >> 3)
  {
    sub_100DB65BC(a1);
    v18 = (void *)v20[0];
  }
  else
  {
    v18 = sub_100DB83E4(a1, v20[0]);
  }
  sub_100ACF498((uint64_t)v18);
  sub_1004B84A4((uint64_t)v5, type metadata accessor for CRLBoardDataStore.KeyValueTableKey);
  swift_bridgeObjectRelease();
  return sub_1004BE2FC(v13, v9);
}

void sub_100ACFB30(_QWORD *a1, char *a2, uint64_t a3, uint64_t a4, void (*a5)(char *, uint64_t), uint64_t a6, uint64_t a7, uint64_t a8, char a9, char *a10)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  void *v52;
  unint64_t v53;
  void *v54;
  unint64_t v55;
  uint64_t v56;
  void (*v57)(_QWORD *, uint64_t, uint64_t);
  char v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  void *v73;
  void *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  void *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t inited;
  uint64_t v85;
  __n128 v86;
  Swift::String v87;
  Swift::String v88;
  id v89;
  id v90;
  uint64_t v91;
  void *v92;
  void *v93;
  Swift::String v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  int v102;
  uint64_t v103;
  int v104;
  unint64_t v105;
  void *v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void (*v125)(char *, uint64_t, uint64_t);
  char *v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  void *v130;
  void (*v131)(char *, uint64_t);
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  void *v145;
  uint64_t v146;
  id v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  void *v164;
  id v165;
  uint64_t v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  void *v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  void *v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  void *v206;
  id v207;
  uint64_t v208;
  void *v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t ObjectType;
  void *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  void *v218;
  uint64_t v219;
  uint64_t v220;
  void *v221;
  uint64_t v222;
  id v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  __n128 v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  void *v238;
  id v239;
  uint64_t v240;
  uint64_t v241;
  id v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  char *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  char *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t v262;
  void *v263;
  uint64_t v264;
  uint64_t v265;
  void *v266;
  id v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  void *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  _QWORD *v284;
  uint64_t v285;
  _QWORD *v286;
  void (*v287)(char *, uint64_t);
  uint64_t v288;
  uint64_t v289;
  id v290;
  uint64_t v291;
  void *v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  void *v297;
  uint64_t v298;
  uint64_t v299;
  id v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  __n128 v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  void *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  void *v321;
  id v322;
  __n128 v323;
  uint64_t v324;
  id v325;
  __n128 v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  unint64_t v334;
  void *v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  char *v343;
  uint64_t v344;
  char *v345;
  uint64_t v346;
  _QWORD *v347;
  char *v348;
  uint64_t v349;
  uint64_t v350;
  char *v351;
  __int128 v352;
  uint64_t v353;
  __n128 v354;
  void (*v355)(char *, char *, uint64_t, __n128);
  char *v356;
  uint64_t v357;
  uint64_t v358;
  char *v359;
  uint64_t v360;
  unint64_t v361;
  void (*v362)(char *, uint64_t);
  void *v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  void *v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  char *v375;
  id v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  __n128 v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  void *v385;
  uint64_t v386;
  unint64_t v387;
  uint64_t v388;
  uint64_t v389;
  __int128 v390;
  uint64_t v391;
  uint64_t v392;
  _QWORD *v393;
  uint64_t v394;
  unint64_t v395;
  uint64_t v396;
  unint64_t v397;
  uint64_t v398;
  unint64_t v399;
  uint64_t v400;
  __int128 v401;
  uint64_t v402;
  void *v403;
  uint64_t v404;
  _OWORD *v405;
  uint64_t v406;
  unint64_t v407;
  void *v408;
  void *v409;
  uint64_t v410;
  void *v411;
  uint64_t v412;
  unint64_t v413;
  void *v414;
  uint64_t v415;
  id v416;
  CKRecordID v417;
  uint64_t v418;
  uint64_t v420;
  unint64_t v421;
  unint64_t v422;
  void *v423;
  uint64_t v424;
  char *v425;
  char *v426;
  char *v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  char *v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  __int128 v442;
  __int128 v443;
  void (*v444)(char *, uint64_t);
  __int128 v445;
  void *v446;
  __int128 v447;
  char *v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  _QWORD v454[3];
  char v455[72];
  uint64_t v456;
  unint64_t v457;
  char v458[80];
  id v459;

  v448 = a2;
  v441 = a8;
  *(_QWORD *)&v442 = a7;
  v444 = a5;
  *(_QWORD *)&v445 = a6;
  *(_QWORD *)&v443 = a4;
  *(_QWORD *)&v447 = a3;
  v433 = sub_1004B804C((uint64_t *)&unk_1014148B0);
  __chkstk_darwin(v433);
  v426 = (char *)&v420 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1004B804C(&qword_1013E0270);
  __chkstk_darwin(v12);
  v434 = (uint64_t)&v420 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v430 = (uint64_t)&v420 - v15;
  v16 = type metadata accessor for UUID(0);
  v17 = *(_QWORD *)(v16 - 8);
  v437 = v16;
  v438 = v17;
  __chkstk_darwin(v16);
  v19 = (char *)&v420 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v22 = (char *)&v420 - v21;
  __chkstk_darwin(v23);
  v436 = (char *)&v420 - v24;
  v435 = type metadata accessor for CRLBoardIdentifier(0);
  v25 = *(_QWORD *)(v435 - 8);
  __chkstk_darwin(v435);
  v27 = (char *)&v420 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v424 = (uint64_t)&v420 - v29;
  __chkstk_darwin(v30);
  v432 = (uint64_t)&v420 - v31;
  __chkstk_darwin(v32);
  v428 = (uint64_t)&v420 - v33;
  __chkstk_darwin(v34);
  v439 = (uint64_t)&v420 - v35;
  v431 = sub_1004B804C(&qword_101405EC0);
  v429 = *(_QWORD *)(v431 - 8);
  __chkstk_darwin(v431);
  v427 = (char *)&v420 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  v425 = (char *)&v420 - v38;
  __chkstk_darwin(v39);
  v41 = (char *)&v420 - v40;
  v42 = sub_1004B804C((uint64_t *)&unk_1013E1A50);
  __chkstk_darwin(v42);
  v44 = (char *)&v420 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v45);
  v47 = (char *)&v420 - v46;
  v48 = a1[5];
  if ((~v48 & 0xF000000000000007) == 0)
    return;
  v440 = a1[4];
  v49 = a1[7];
  v446 = (void *)a1[6];
  v50 = (void *)a1[8];
  if (v48 >> 62)
  {
    if (v48 >> 62 == 1)
    {
      v51 = v440;
      v52 = v446;
      v53 = v49;
      v54 = v50;
      v55 = v48;
      sub_100B010EC(v440, v48, v446, v49, v50);
      swift_unknownObjectRetain(v52);
      v56 = v449;
      v58 = sub_100ACB084(v57, v53, 0, 1, (objc_class *)v447, v443, (uint64_t)v444, v445, (_BYTE *)v442);
      if (v56)
      {
        swift_unknownObjectRelease(v52);
        v59 = v51;
LABEL_7:
        v60 = v55;
        v61 = v52;
        v62 = v53;
        v63 = v54;
LABEL_8:
        sub_100B01100(v59, v60, v61, v62, v63);
        return;
      }
      if ((v58 & 1) == 0)
      {
        sub_100757E04(&_mh_execute_header, (uint64_t)"_sync_applySyncSaveResults(_:syncScope:)", 40, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2, 9533, "Failed to handle remote record!", 31, 2u, (uint64_t)_swiftEmptyArrayStorage);
        sub_1004F5394((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"_sync_applySyncSaveResults(_:syncScope:)", 40, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2u, 9533, (uint64_t)"Failed to handle remote record!", 31, 2u);
      }
      sub_100B01100(v51, v55, v52, v53, v50);
      swift_unknownObjectRelease(v52);
      return;
    }
    v80 = v446;
    if ((_BYTE)v49)
    {
      if (v49 == 1)
      {
        v422 = v48;
        v423 = v50;
        v81 = v49;
        v421 = v49;
        v82 = v48;
        v83 = sub_1004B804C((uint64_t *)&unk_1013E0180);
        inited = swift_initStackObject(v83, v458);
        *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
        v456 = 0x203A65707954;
        v457 = 0xE600000000000000;
        v85 = v440;
        sub_100B010EC(v440, v82, v80, v81, v50);
        sub_10071CCC4(v80, 1u);
        v86 = swift_unknownObjectRetain(v85);
        v87._countAndFlagsBits = CKRecord.recordType.getter(v86);
        String.append(_:)(v87);
        swift_bridgeObjectRelease();
        v88._countAndFlagsBits = 0x203A444920;
        v88._object = (void *)0xE500000000000000;
        String.append(_:)(v88);
        v89 = objc_msgSend(v80, "recordID");
        v90 = objc_msgSend(v89, "recordName");

        v91 = static String._unconditionallyBridgeFromObjectiveC(_:)(v90);
        v93 = v92;

        v94._countAndFlagsBits = v91;
        v94._object = v93;
        String.append(_:)(v94);
        swift_bridgeObjectRelease();
        v95 = v456;
        v96 = v457;
        *(_QWORD *)(inited + 56) = &type metadata for String;
        *(_QWORD *)(inited + 64) = sub_1004CFC2C();
        *(_QWORD *)(inited + 32) = v95;
        *(_QWORD *)(inited + 40) = v96;
        sub_100757E04(&_mh_execute_header, (uint64_t)"_sync_applySyncSaveResults(_:syncScope:)", 40, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2, 9658, "Logic error. Failed to convert record to remote record object %{public}@", 72, 2u, inited);
        sub_1004F5394(inited, (uint64_t)"_sync_applySyncSaveResults(_:syncScope:)", 40, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2u, 9658, (uint64_t)"Logic error. Failed to convert record to remote record object %{public}@", 72, 2u);
        swift_unknownObjectRelease(v85);
        v97 = v446;
        sub_100B01100(v85, v422, v446, v421, v423);
        swift_setDeallocating(inited);
        v98 = sub_1004B804C(&qword_1013E0190);
        swift_arrayDestroy(inited + 32, 1, v98);
        sub_10071CCD8(v97, 1u);
      }
      return;
    }
    v456 = (uint64_t)v446;
    v111 = v50;
    v112 = v49;
    v113 = v48;
    sub_10071CCC4(v446, 0);
    v114 = v440;
    v421 = v112;
    v115 = v112;
    v116 = v446;
    v423 = v111;
    sub_100B010EC(v440, v113, v446, v115, v111);
    sub_10071CCC4(v116, 0);
    type metadata accessor for CKError(0);
    v118 = v117;
    v119 = sub_1004B7878((unint64_t *)&qword_1013DE570, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100EF1474);
    swift_unknownObjectRetain(v114);
    *(_QWORD *)&v447 = v119;
    _BridgedStoredNSError.code.getter(v118, v119);
    switch(v454[0])
    {
      case 0xALL:
        v211 = v113;
        v212 = v440;
        ObjectType = swift_getObjectType(v440);
        v456 = v212;
        v214 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)((v113 & 0x3FFFFFFFFFFFFFFFLL) + 8) + 8))(ObjectType);
        swift_beginAccess(&v448[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_recordIDsToOverwrite], &v456, 33, 0);
        sub_100ADA768((Swift::Int *)&v459, v214, &qword_1013E8810, CKRecordID_ptr, &qword_101405638);
        swift_endAccess(&v456);

        v215 = type metadata accessor for CRLBoardItemSyncLocalChangeRecord(0);
        v216 = swift_dynamicCastClass(v212, v215);
        if (v216)
        {
          if ((*(_BYTE *)(v216 + OBJC_IVAR____TtC8Freeform33CRLBoardItemSyncLocalChangeRecord_unsyncedChanges) & 1) != 0)
          {
LABEL_61:
            v232 = v216 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_id;
            v233 = v216 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_boardIdentifier;
            swift_unknownObjectRetain(v212);
            sub_100A8DE24(v232, v233);
            swift_unknownObjectRelease(v212);
            sub_100B01100(v212, v113, v116, v421, v423);
            swift_unknownObjectRelease(v212);
            sub_10071CCD8(v116, 0);
            sub_10071CCD8(v116, 0);
            return;
          }
        }
        else
        {
          v275 = type metadata accessor for CRLBoardSyncLocalChangeRecord(0);
          v276 = swift_dynamicCastClass(v212, v275);
          if (v276)
          {
            if ((*(_BYTE *)(v276 + OBJC_IVAR____TtC8Freeform29CRLBoardSyncLocalChangeRecord_unsyncedChanges) & 1) != 0)
            {
              v277 = v276 + OBJC_IVAR____TtC8Freeform18CRLBoardSyncRecord_boardIdentifier;
              swift_unknownObjectRetain(v212);
              sub_100A9A978(v277, 0xD00000000000001ALL, 0x8000000100FF4B30, 0);
              sub_10071CCD8(v116, 0);
              sub_10071CCD8(v116, 0);
              swift_unknownObjectRelease_n(v212, 2);
              v59 = v212;
              v60 = v113;
              goto LABEL_81;
            }
          }
          else
          {
            v316 = type metadata accessor for CRLFreehandDrawingBucketSyncLocalChangeRecord(0);
            v317 = swift_dynamicCastClass(v212, v316);
            if (!v317)
            {
              if (qword_1013DD870 != -1)
                swift_once(&qword_1013DD870, sub_100A059E0);
              swift_beginAccess(&static OS_os_log.dataSync, &v456, 0, 0);
              v325 = (id)static OS_os_log.dataSync;
              v327 = static os_log_type_t.default.getter(v326);
              sub_100A06EBC((uint64_t)v325, &_mh_execute_header, v327, "Failed to apply sync save permission failure, unknown local record type", 71, 2, (uint64_t)_swiftEmptyArrayStorage);
              sub_10071CCD8(v116, 0);
              sub_10071CCD8(v116, 0);
              sub_100B01100(v212, v113, v116, v421, v423);
              swift_unknownObjectRelease(v212);

              return;
            }
            v318 = v317;
            if ((*(_BYTE *)(v317
                           + OBJC_IVAR____TtC8Freeform45CRLFreehandDrawingBucketSyncLocalChangeRecord_unsyncedChanges) & 1) != 0)
            {
              *(_QWORD *)&v442 = *(_QWORD *)(v317
                                           + OBJC_IVAR____TtC8Freeform34CRLFreehandDrawingBucketSyncRecord_bucketIndex);
              v447 = *(_OWORD *)(v317
                               + OBJC_IVAR____TtC8Freeform45CRLFreehandDrawingBucketSyncLocalChangeRecord_minRequiredVersions);
              v445 = *(_OWORD *)(v317
                               + OBJC_IVAR____TtC8Freeform45CRLFreehandDrawingBucketSyncLocalChangeRecord_minRequiredVersions
                               + 16);
              v444 = *(void (**)(char *, uint64_t))(v317
                                                            + OBJC_IVAR____TtC8Freeform45CRLFreehandDrawingBucketSyncLocalChangeRecord_minRequiredVersions
                                                            + 32);
              v456 = v442;
              swift_unknownObjectRetain(v212);
              v336 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
              v338 = v337;
              v339 = sub_1004B804C(&qword_101405F00);
              v340 = sub_1004B7878((unint64_t *)&qword_1013DE630, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
              v341 = sub_1004CBA30(&qword_101403070, &qword_101405F00, (uint64_t)&protocol conformance descriptor for Ref<A>);
              v342 = sub_1004CBA30((unint64_t *)&unk_1014064F0, &qword_101405F00, (uint64_t)&protocol conformance descriptor for Ref<A>);
              v343 = v426;
              CRDictionary.init()(v437, v339, &protocol witness table for UUID, v340, v341, v342);
              v344 = sub_1004CBA30(&qword_101405EF0, (uint64_t *)&unk_1014148B0, (uint64_t)&protocol conformance descriptor for CRDictionary<A, B>);
              v345 = v425;
              *(_QWORD *)&v443 = v344;
              Capsule<>.init(_:id:)(v343, v336, v338, v433, v344);
              v346 = sub_1004B804C((uint64_t *)&unk_101406AD0);
              v347 = (_QWORD *)swift_allocObject(v346, *(unsigned int *)(v346 + 48), *(unsigned __int16 *)(v346 + 52));
              *((_BYTE *)v347 + *(_QWORD *)(*v347 + 136)) = 0;
              v347[2] = v442;
              v348 = (char *)v347 + *(_QWORD *)(*v347 + 120);
              v349 = v429;
              v350 = v431;
              (*(void (**)(char *, char *, uint64_t))(v429 + 32))(v348, v345, v431);
              *((_BYTE *)v347 + *(_QWORD *)(*v347 + 136)) = 0;
              v351 = (char *)v347 + *(_QWORD *)(*v347 + 128);
              v352 = v445;
              *(_OWORD *)v351 = v447;
              *((_OWORD *)v351 + 1) = v352;
              *((_QWORD *)v351 + 4) = v444;
              v353 = *(_QWORD *)&v448[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_crdtContext];
              v354 = swift_beginAccess(v348, &v456, 0, 0);
              v355 = *(void (**)(char *, char *, uint64_t, __n128))(v349 + 16);
              v356 = v427;
              v355(v427, v348, v350, v354);
              if (qword_1013DCB10 != -1)
                swift_once(&qword_1013DCB10, sub_1005DE88C);
              v357 = type metadata accessor for CRCodableVersion(0);
              v358 = sub_1004F2A1C(v357, (uint64_t)qword_10147EB08);
              v359 = v356;
              v360 = v449;
              *(_QWORD *)&v447 = Capsule<>.serializedData(_:version:allowedAppFormats:)(v353, v358, 0, v350, v443);
              if (v360)
              {
                v362 = *(void (**)(char *, uint64_t))(v429 + 8);
                v362(v359, v350);
                v363 = v446;
                sub_10071CCD8(v446, 0);
                sub_10071CCD8(v363, 0);
                v364 = v440;
                sub_100B01100(v440, v211, v363, v421, v423);
                swift_setDeallocating(v347);
                v362((char *)v347 + *(_QWORD *)(*v347 + 120), v350);
                swift_deallocClassInstance(v347, *(unsigned int *)(*v347 + 48), *(unsigned __int16 *)(*v347 + 52));
                swift_unknownObjectRelease_n(v364, 2);
              }
              else
              {
                v387 = v361;
                v444 = *(void (**)(char *, uint64_t))(v429 + 8);
                v444(v359, v350);
                v388 = v424;
                sub_1004B8460(v318 + OBJC_IVAR____TtC8Freeform34CRLFreehandDrawingBucketSyncRecord_boardIdentifier, v424, type metadata accessor for CRLBoardIdentifier);
                v449 = 0;
                v389 = v347[2];
                v390 = *(_OWORD *)v351;
                v442 = *((_OWORD *)v351 + 1);
                v443 = v390;
                v441 = *((_QWORD *)v351 + 4);
                v391 = type metadata accessor for CRLFreehandDrawingBucketDatabaseRow(0);
                v392 = swift_allocObject(v391, *(unsigned int *)(v391 + 48), *(unsigned __int16 *)(v391 + 52));
                v445 = xmmword_100F062D0;
                *(_OWORD *)(v392 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData) = xmmword_100F062D0;
                *(_OWORD *)(v392
                          + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData) = xmmword_100F062D0;
                sub_1004B84E0(v388, v392 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_boardIdentifier, type metadata accessor for CRLBoardIdentifier);
                *(_QWORD *)(v392 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketIndex) = v389;
                v393 = (_QWORD *)(v392 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData);
                v394 = v447;
                *v393 = v447;
                v393[1] = v387;
                v395 = v387;
                *(_QWORD *)(v392 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_unsyncedChanges) = 0;
                v396 = *(_QWORD *)(v392 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData);
                v397 = *(_QWORD *)(v392 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData + 8);
                *(_OWORD *)(v392 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData) = v445;
                sub_1004BE310(v394, v395);
                sub_1004BE2FC(v396, v397);
                v398 = *(_QWORD *)(v392
                                 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData);
                v399 = *(_QWORD *)(v392
                                 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData
                                 + 8);
                *(_OWORD *)(v392
                          + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData) = v445;
                sub_1004BE2FC(v398, v399);
                v400 = v392 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_minRequiredVersions;
                v401 = v442;
                *(_OWORD *)v400 = v443;
                *(_OWORD *)(v400 + 16) = v401;
                *(_QWORD *)(v400 + 32) = v441;
                v402 = v449;
                sub_100AAAC68(v392);
                v403 = v446;
                sub_10071CCD8(v446, 0);
                sub_10071CCD8(v403, 0);
                v404 = v440;
                if (v402)
                {
                  sub_100B01100(v440, v211, v403, v421, v423);
                  swift_setDeallocating(v392);
                  sub_1004B84A4(v392 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_boardIdentifier, type metadata accessor for CRLBoardIdentifier);
                  sub_1004BBBC8(*(_QWORD *)(v392 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData), *(_QWORD *)(v392 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData + 8));
                  sub_1004BE2FC(*(_QWORD *)(v392 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData), *(_QWORD *)(v392 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData + 8));
                  sub_1004BE2FC(*(_QWORD *)(v392+ OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData), *(_QWORD *)(v392+ OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData+ 8));
                  swift_deallocClassInstance(v392, *(unsigned int *)(*(_QWORD *)v392 + 48), *(unsigned __int16 *)(*(_QWORD *)v392 + 52));
                  sub_1004BBBC8(v394, v395);
                  swift_setDeallocating(v347);
                  v444((char *)v347 + *(_QWORD *)(*v347 + 120), v431);
                  swift_deallocClassInstance(v347, *(unsigned int *)(*v347 + 48), *(unsigned __int16 *)(*v347 + 52));
                  swift_unknownObjectRelease_n(v404, 2);
                }
                else
                {
                  swift_unknownObjectRelease_n(v440, 2);
                  sub_100B01100(v404, v211, v403, v421, v423);
                  swift_setDeallocating(v392);
                  sub_1004B84A4(v392 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_boardIdentifier, type metadata accessor for CRLBoardIdentifier);
                  sub_1004BBBC8(*(_QWORD *)(v392 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData), *(_QWORD *)(v392 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_bucketData + 8));
                  sub_1004BE2FC(*(_QWORD *)(v392 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData), *(_QWORD *)(v392 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData + 8));
                  sub_1004BE2FC(*(_QWORD *)(v392+ OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData), *(_QWORD *)(v392+ OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_ckMergeableRecordValueData+ 8));
                  swift_deallocClassInstance(v392, *(unsigned int *)(*(_QWORD *)v392 + 48), *(unsigned __int16 *)(*(_QWORD *)v392 + 52));
                  sub_1004BBBC8(v394, v395);
                  swift_setDeallocating(v347);
                  v444((char *)v347 + *(_QWORD *)(*v347 + 120), v431);
                  swift_deallocClassInstance(v347, *(unsigned int *)(*v347 + 48), *(unsigned __int16 *)(*v347 + 52));
                }
              }
              return;
            }
          }
        }
        swift_unknownObjectRetain(v212);
        sub_10071CCD8(v116, 0);
        sub_10071CCD8(v116, 0);
        swift_unknownObjectRelease_n(v212, 2);
        sub_100B01100(v212, v211, v116, v421, v423);
        return;
      case 0xBLL:
        v231 = type metadata accessor for CRLBoardItemSyncLocalChangeRecord(0);
        v212 = v440;
        v216 = swift_dynamicCastClass(v440, v231);
        if (v216)
          goto LABEL_61;
        v278 = type metadata accessor for CRLBoardSyncLocalChangeRecord(0);
        v279 = swift_dynamicCastClass(v212, v278);
        v280 = v449;
        if (v279)
        {
          v281 = v279 + OBJC_IVAR____TtC8Freeform18CRLBoardSyncRecord_boardIdentifier;
          swift_unknownObjectRetain(v212);
          sub_100A9A978(v281, 0xD000000000000014, 0x8000000100FF4CD0, 0);
          sub_10071CCD8(v116, 0);
          sub_10071CCD8(v116, 0);
          swift_unknownObjectRelease_n(v212, 2);
          v59 = v212;
          v60 = v113;
LABEL_81:
          v61 = v116;
          v62 = v421;
          v63 = v423;
          goto LABEL_8;
        }
        v319 = type metadata accessor for CRLUserBoardMetadataSyncLocalChangeRecord(0);
        if (swift_dynamicCastClass(v212, v319))
        {
          swift_unknownObjectRetain(v212);
          v320 = sub_100A94568();
          if (v280 || (v142 = v320) == 0)
          {
            v321 = v446;
            sub_10071CCD8(v446, 0);
            sub_10071CCD8(v321, 0);
            swift_unknownObjectRelease_n(v212, 2);
            sub_100B01100(v212, v113, v321, v421, v423);
            return;
          }
          *(_QWORD *)(v320 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_unsyncedChanges) = 0;
          sub_100A94B34(v320);
          v408 = v446;
          sub_10071CCD8(v446, 0);
          sub_10071CCD8(v408, 0);
          swift_unknownObjectRelease_n(v212, 2);
          sub_100B01100(v212, v113, v408, v421, v423);
          break;
        }
        v328 = type metadata accessor for CRLFreehandDrawingBucketSyncLocalChangeRecord(0);
        v329 = swift_dynamicCastClass(v212, v328);
        if (!v329)
        {
          v365 = type metadata accessor for CRLBoardShareSyncLocalChangeRecord(0);
          v366 = swift_dynamicCastClass(v212, v365);
          if (!v366)
          {
            while (1)
            {
              sub_100757E04(&_mh_execute_header, (uint64_t)"_sync_applySyncSaveResults(_:syncScope:)", 40, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2, 9581, "Unknown record type", 19, 2u, (uint64_t)_swiftEmptyArrayStorage);
              sub_100518FC0((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"Unknown record type");
              sub_100519194((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"_sync_applySyncSaveResults(_:syncScope:)", 40, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2u, 9581, (uint64_t)"Unknown record type", 19, 2u);
LABEL_125:
              SyncEvent.FetchedRecordZoneChanges.Deletion.init(recordID:recordType:)(v417, *(Swift::String *)&v418);
              _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Freeform/CRLAssert.swift", 24, 2, 348, 0);
              __break(1u);
            }
          }
          v367 = v366;
          v368 = qword_1013DD870;
          swift_unknownObjectRetain(v212);
          if (v368 != -1)
            swift_once(&qword_1013DD870, sub_100A059E0);
          swift_beginAccess(&static OS_os_log.dataSync, &v456, 0, 0);
          v369 = (void *)static OS_os_log.dataSync;
          v370 = sub_1004B804C((uint64_t *)&unk_1013E0180);
          v371 = swift_initStackObject(v370, &v452);
          *(_OWORD *)(v371 + 16) = xmmword_100EF5E40;
          *(_QWORD *)&v447 = v367 + OBJC_IVAR____TtC8Freeform23CRLBoardShareSyncRecord_boardIdentifier;
          v372 = v439;
          sub_1004B8460(v367 + OBJC_IVAR____TtC8Freeform23CRLBoardShareSyncRecord_boardIdentifier, v439, type metadata accessor for CRLBoardIdentifier);
          v374 = v437;
          v373 = v438;
          v375 = v436;
          (*(void (**)(char *, uint64_t, uint64_t))(v438 + 16))(v436, v372, v437);
          v376 = v369;
          v377 = sub_1004B84A4(v372, type metadata accessor for CRLBoardIdentifier);
          v378 = UUID.uuidString.getter(v377);
          v380 = v379;
          (*(void (**)(char *, uint64_t))(v373 + 8))(v375, v374);
          *(_QWORD *)(v371 + 56) = &type metadata for String;
          *(_QWORD *)(v371 + 64) = sub_1004CFC2C();
          *(_QWORD *)(v371 + 32) = v378;
          *(_QWORD *)(v371 + 40) = v380;
          v382 = static os_log_type_t.default.getter(v381);
          sub_100A06EBC((uint64_t)v376, &_mh_execute_header, v382, "Board %{public}@ set ckShare to nil with reason: CKError Unknown Item.", 70, 2, v371);
          swift_setDeallocating(v371);
          v383 = *(_QWORD *)(v371 + 16);
          v384 = sub_1004B804C(&qword_1013E0190);
          swift_arrayDestroy(v371 + 32, v383, v384);

          sub_100AA5568(v447, 0, 0);
          v385 = v446;
          sub_10071CCD8(v446, 0);
          sub_10071CCD8(v385, 0);
          v386 = v440;
          swift_unknownObjectRelease_n(v440, 2);
          v59 = v386;
          v60 = v113;
          v61 = v385;
LABEL_48:
          v62 = v421;
          v63 = v423;
          goto LABEL_8;
        }
        v330 = v329 + OBJC_IVAR____TtC8Freeform34CRLFreehandDrawingBucketSyncRecord_boardIdentifier;
        v331 = *(_QWORD *)(v329 + OBJC_IVAR____TtC8Freeform34CRLFreehandDrawingBucketSyncRecord_bucketIndex);
        swift_unknownObjectRetain(v212);
        v332 = sub_100AAA444(v330, v331);
        if (v280)
        {
          sub_10071CCD8(v116, 0);
          sub_10071CCD8(v116, 0);
          swift_unknownObjectRelease_n(v212, 2);
          v333 = v212;
          v334 = v113;
          v335 = v116;
LABEL_106:
          sub_100B01100(v333, v334, v335, v421, v423);
          return;
        }
        v142 = v332;
        if (!v332)
        {
          v409 = v446;
          sub_10071CCD8(v446, 0);
          sub_10071CCD8(v409, 0);
          v410 = v440;
          swift_unknownObjectRelease_n(v440, 2);
          v333 = v410;
          v334 = v113;
          v335 = v409;
          goto LABEL_106;
        }
        v405 = (_OWORD *)(v332 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData);
        v406 = *(_QWORD *)(v332 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData);
        v407 = *(_QWORD *)(v142 + OBJC_IVAR____TtC8Freeform35CRLFreehandDrawingBucketDatabaseRow_syncData + 8);
        *v405 = xmmword_100F062D0;
        sub_1004BE2FC(v406, v407);
        sub_100AAAC68(v142);
        v411 = v446;
        sub_10071CCD8(v446, 0);
        sub_10071CCD8(v411, 0);
        v412 = v440;
        swift_unknownObjectRelease_n(v440, 2);
        sub_100B01100(v412, v113, v411, v421, v423);
        break;
      case 0xCLL:
      case 0x10:
      case 0x11:
      case 0x13:
      case 0x19:
      case 0x1BLL:
      case 0x1FLL:
      case 0x22:
      case 0x23:
        *(_QWORD *)&v445 = v118;
        v422 = v113;
        v120 = type metadata accessor for CRLBoardItemSyncLocalChangeRecord(0);
        v121 = v440;
        v122 = swift_dynamicCastClass(v440, v120);
        if (v122)
        {
          v123 = v122;
          v124 = v437;
          v125 = *(void (**)(char *, uint64_t, uint64_t))(v438 + 16);
          v126 = v436;
          v125(v436, v122 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_id, v437);
          v444 = (void (*)(char *, uint64_t))(v123
                                                      + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_boardIdentifier);
          v127 = v439;
          sub_1004B8460(v123 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_boardIdentifier, v439, type metadata accessor for CRLBoardIdentifier);
          v128 = &v448[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_transientSyncExclusions];
          swift_beginAccess(&v448[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_transientSyncExclusions], &v456, 33, 0);
          swift_unknownObjectRetain(v121);
          v448 = v128;
          v129 = sub_100D57754(v127);
          v125(v19, (uint64_t)v126, v124);
          v130 = v446;
          swift_beginAccess(v129 + 24, v454, 33, 0);
          sub_100AD569C((uint64_t)v22, (uint64_t)v19);
          v131 = *(void (**)(char *, uint64_t))(v438 + 8);
          v131(v22, v124);
          swift_endAccess(v454);
          swift_release(v129);
          swift_endAccess(&v456);
          sub_1004B84A4(v127, type metadata accessor for CRLBoardIdentifier);
          v131(v126, v124);
          v454[0] = v130;
          v132 = v445;
          v133 = v447;
          _BridgedStoredNSError.code.getter(v445, v447);
          if (v456 == 34 || (v454[0] = v130, _BridgedStoredNSError.code.getter(v132, v133), v456 == 25))
          {
            v134 = v439;
            sub_1004B8460((uint64_t)v444, v439, type metadata accessor for CRLBoardIdentifier);
            swift_beginAccess(v448, &v456, 33, 0);
            v135 = sub_100D57754(v134);
            *(_BYTE *)(v135 + 16) = 1;
            *(_BYTE *)(v135 + 42) = 1;
            swift_endAccess(&v456);
            v136 = v440;
            swift_unknownObjectRelease(v440);
            swift_release(v135);
            sub_100B01100(v136, v422, v130, v421, v423);
            swift_unknownObjectRelease(v136);
            sub_10071CCD8(v130, 0);
            sub_10071CCD8(v130, 0);
            v137 = v134;
            goto LABEL_27;
          }
          sub_10071CCD8(v130, 0);
          sub_10071CCD8(v130, 0);
          v182 = v440;
          swift_unknownObjectRelease_n(v440, 2);
          v178 = v182;
          v179 = v422;
          v180 = v130;
          goto LABEL_53;
        }
        v150 = type metadata accessor for CRLBoardSyncLocalChangeRecord(0);
        v151 = swift_dynamicCastClass(v121, v150);
        v152 = v121;
        if (v151)
        {
          v153 = v151;
          v454[0] = v116;
          swift_unknownObjectRetain(v121);
          v154 = v445;
          v155 = v447;
          _BridgedStoredNSError.code.getter(v445, v447);
          v156 = v448;
          if (v456 == 34 || (v454[0] = v116, _BridgedStoredNSError.code.getter(v154, v155), v456 == 25))
          {
            v157 = v439;
            sub_1004B8460(v153 + OBJC_IVAR____TtC8Freeform18CRLBoardSyncRecord_boardIdentifier, v439, type metadata accessor for CRLBoardIdentifier);
            swift_beginAccess(&v156[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_transientSyncExclusions], &v456, 33, 0);
            v158 = sub_100D57754(v157);
            *(_BYTE *)(v158 + 16) = 1;
            *(_BYTE *)(v158 + 42) = 1;
          }
          else
          {
            v157 = v439;
            sub_1004B8460(v153 + OBJC_IVAR____TtC8Freeform18CRLBoardSyncRecord_boardIdentifier, v439, type metadata accessor for CRLBoardIdentifier);
            swift_beginAccess(&v156[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_transientSyncExclusions], &v456, 33, 0);
            v158 = sub_100D57754(v157);
            *(_BYTE *)(v158 + 16) = 1;
          }
          swift_endAccess(&v456);
          swift_unknownObjectRelease(v152);
          swift_release(v158);
          sub_100B01100(v152, v422, v116, v421, v423);
          swift_unknownObjectRelease(v152);
          sub_10071CCD8(v116, 0);
          sub_10071CCD8(v116, 0);
          v137 = v157;
          goto LABEL_27;
        }
        v183 = type metadata accessor for CRLUserBoardMetadataSyncLocalChangeRecord(0);
        v184 = swift_dynamicCastClass(v121, v183);
        v186 = v448;
        v185 = v449;
        if (v184)
        {
          v187 = v184;
          v454[0] = v116;
          swift_unknownObjectRetain(v152);
          _BridgedStoredNSError.code.getter(v445, v447);
          if (v456 == 31)
          {
            v188 = sub_1004B804C((uint64_t *)&unk_1013E0180);
            v189 = swift_initStackObject(v188, &v453);
            *(_OWORD *)(v189 + 16) = xmmword_100EF5E40;
            v190 = v439;
            sub_1004B8460(v187 + OBJC_IVAR____TtC8Freeform30CRLUserBoardMetadataSyncRecord_boardIdentifier, v439, type metadata accessor for CRLBoardIdentifier);
            v191 = v437;
            v192 = v438;
            v193 = v436;
            (*(void (**)(char *, uint64_t, uint64_t))(v438 + 16))(v436, v190, v437);
            v194 = sub_1004B84A4(v190, type metadata accessor for CRLBoardIdentifier);
            v195 = UUID.uuidString.getter(v194);
            v197 = v196;
            (*(void (**)(char *, uint64_t))(v192 + 8))(v193, v191);
            *(_QWORD *)(v189 + 56) = &type metadata for String;
            *(_QWORD *)(v189 + 64) = sub_1004CFC2C();
            *(_QWORD *)(v189 + 32) = v195;
            v198 = v189 + 32;
            *(_QWORD *)(v189 + 40) = v197;
            sub_100757E04(&_mh_execute_header, (uint64_t)"_sync_applySyncSaveResults(_:syncScope:)", 40, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2, 9603, "Logic error. A reference violation for UserBoardMetadata should never happen because the record does not save any references. Metadata boardIdentifier %{public}@", 161, 2u, v189);
            v199 = v449;
            v152 = v440;
            v116 = v446;
            sub_1004F5394(v189, (uint64_t)"_sync_applySyncSaveResults(_:syncScope:)", 40, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2u, 9603, (uint64_t)"Logic error. A reference violation for UserBoardMetadata should never happen because the record does not save any references. Metadata boardIdentifier %{public}@", 161, 2u);
            swift_setDeallocating(v189);
            v200 = *(_QWORD *)(v189 + 16);
            v201 = sub_1004B804C(&qword_1013E0190);
            v202 = v200;
            v185 = v199;
            swift_arrayDestroy(v198, v202, v201);
          }
          v203 = sub_100A94568();
          if (v185 || (v295 = v203) == 0)
          {
            sub_10071CCD8(v116, 0);
            sub_10071CCD8(v116, 0);
            swift_unknownObjectRelease_n(v152, 2);
            v59 = v152;
            v60 = v422;
            v61 = v116;
            goto LABEL_48;
          }
          *(_QWORD *)(v203 + OBJC_IVAR____TtC8Freeform31CRLUserBoardMetadataDatabaseRow_unsyncedChanges) = 0;
          sub_100A94B34(v203);
          sub_10071CCD8(v116, 0);
          sub_10071CCD8(v116, 0);
          swift_unknownObjectRelease_n(v152, 2);
          sub_100B01100(v152, v422, v116, v421, v423);
          swift_release(v295);
        }
        else
        {
          v269 = type metadata accessor for CRLFreehandDrawingBucketSyncLocalChangeRecord(0);
          v270 = swift_dynamicCastClass(v152, v269);
          if (v270)
          {
            v271 = *(_QWORD *)(v270 + OBJC_IVAR____TtC8Freeform34CRLFreehandDrawingBucketSyncRecord_bucketIndex);
            v272 = v439;
            sub_1004B8460(v270 + OBJC_IVAR____TtC8Freeform34CRLFreehandDrawingBucketSyncRecord_boardIdentifier, v439, type metadata accessor for CRLBoardIdentifier);
            swift_beginAccess(&v186[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_transientSyncExclusions], &v456, 33, 0);
            swift_unknownObjectRetain(v152);
            v273 = v116;
            v274 = sub_100D57754(v272);
            swift_beginAccess(v274 + 32, v454, 33, 0);
            sub_100ADB6F4((uint64_t *)&v459, v271);
            swift_endAccess(v454);
            swift_release(v274);
            swift_endAccess(&v456);
            swift_unknownObjectRelease(v152);
            sub_100B01100(v152, v422, v273, v421, v423);
            swift_unknownObjectRelease(v152);
            sub_10071CCD8(v273, 0);
            sub_10071CCD8(v273, 0);
            v137 = v272;
            goto LABEL_27;
          }
          v312 = type metadata accessor for CRLBoardShareSyncLocalChangeRecord(0);
          v313 = swift_dynamicCastClass(v152, v312);
          if (v313)
          {
            v314 = v439;
            sub_1004B8460(v313 + OBJC_IVAR____TtC8Freeform23CRLBoardShareSyncRecord_boardIdentifier, v439, type metadata accessor for CRLBoardIdentifier);
            swift_beginAccess(&v186[OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_transientSyncExclusions], &v456, 33, 0);
            swift_unknownObjectRetain(v152);
            v315 = sub_100D57754(v314);
            *(_BYTE *)(v315 + 17) = 1;
            swift_endAccess(&v456);
            swift_unknownObjectRelease(v152);
            swift_release(v315);
            sub_100B01100(v152, v422, v116, v421, v423);
            swift_unknownObjectRelease(v152);
            sub_10071CCD8(v116, 0);
            sub_10071CCD8(v116, 0);
            v137 = v314;
            goto LABEL_27;
          }
          if (qword_1013DD870 != -1)
            swift_once(&qword_1013DD870, sub_100A059E0);
          swift_beginAccess(&static OS_os_log.dataSync, &v456, 0, 0);
          v322 = (id)static OS_os_log.dataSync;
          v324 = static os_log_type_t.default.getter(v323);
          sub_100A06EBC((uint64_t)v322, &_mh_execute_header, v324, "Failed to apply sync save causing transient sync exclusion, unknown local record type", 85, 2, (uint64_t)_swiftEmptyArrayStorage);
          sub_10071CCD8(v116, 0);
          sub_10071CCD8(v116, 0);
          sub_100B01100(v152, v422, v116, v421, v423);
          swift_unknownObjectRelease(v152);

        }
        return;
      case 0x1ALL:
        if ((a9 & 1) != 0)
        {
          v264 = v440;
          v265 = swift_getObjectType(v440);
          v456 = v264;
          v266 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)((v113 & 0x3FFFFFFFFFFFFFFFLL) + 8) + 8))(v265);
          v267 = objc_msgSend(v266, "zoneID");

          v268 = v430;
          sub_100B38068(v430);

          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v268, 1, v435) == 1)
          {
            sub_10071CCD8(v116, 0);
            sub_10071CCD8(v116, 0);
            swift_unknownObjectRelease(v264);
            sub_100B01100(v264, v113, v116, v421, v423);
            sub_1004CB800(v268, &qword_1013E0270);
          }
          else
          {
            v448 = a10;
            v296 = v428;
            sub_1004B84E0(v268, v428, type metadata accessor for CRLBoardIdentifier);
            if (qword_1013DD870 != -1)
              swift_once(&qword_1013DD870, sub_100A059E0);
            swift_beginAccess(&static OS_os_log.dataSync, &v456, 0, 0);
            v297 = (void *)static OS_os_log.dataSync;
            v298 = sub_1004B804C((uint64_t *)&unk_1013E0180);
            v299 = swift_initStackObject(v298, &v451);
            *(_OWORD *)(v299 + 16) = xmmword_100EF5E40;
            v300 = v297;
            v301 = UUID.uuidString.getter(v300);
            v303 = v302;
            *(_QWORD *)(v299 + 56) = &type metadata for String;
            *(_QWORD *)(v299 + 64) = sub_1004CFC2C();
            *(_QWORD *)(v299 + 32) = v301;
            *(_QWORD *)(v299 + 40) = v303;
            v305 = static os_log_type_t.default.getter(v304);
            sub_100A06EBC((uint64_t)v300, &_mh_execute_header, v305, "Adding board identifier to be purged in response to zoneNotFound for shared zone %{public}@ .", 93, 2, v299);
            swift_setDeallocating(v299);
            v306 = sub_1004B804C(&qword_1013E0190);
            swift_arrayDestroy(v299 + 32, 1, v306);

            v307 = v432;
            sub_1004B8460(v296, v432, type metadata accessor for CRLBoardIdentifier);
            v308 = v439;
            sub_100AD7844(v439, v307);
            v309 = v440;
            swift_unknownObjectRelease(v440);
            v310 = v309;
            v311 = v446;
            sub_100B01100(v310, v113, v446, v421, v423);
            sub_10071CCD8(v311, 0);
            sub_10071CCD8(v311, 0);
            sub_1004B84A4(v308, type metadata accessor for CRLBoardIdentifier);
            sub_1004B84A4(v296, type metadata accessor for CRLBoardIdentifier);
          }
          return;
        }
        sub_10071CCD8(v116, 0);
        sub_10071CCD8(v116, 0);
        v210 = v440;
        swift_unknownObjectRelease(v440);
        v178 = v210;
        v179 = v113;
        v180 = v116;
LABEL_53:
        v181 = v421;
        goto LABEL_83;
      case 0x1CLL:
        v204 = v440;
        v205 = swift_getObjectType(v440);
        v456 = v204;
        v206 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)((v113 & 0x3FFFFFFFFFFFFFFFLL) + 8) + 8))(v205);
        v207 = objc_msgSend(v206, "zoneID");

        v208 = v434;
        sub_100B38068(v434);

        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v208, 1, v435) == 1)
        {
          v209 = v446;
          sub_10071CCD8(v446, 0);
          sub_10071CCD8(v209, 0);
          swift_unknownObjectRelease(v204);
          sub_100B01100(v204, v113, v209, v421, v423);
          v79 = &qword_1013E0270;
          v78 = v208;
          goto LABEL_12;
        }
        sub_1004B84E0(v208, (uint64_t)v27, type metadata accessor for CRLBoardIdentifier);
        v261 = v432;
        sub_1004B8460((uint64_t)v27, v432, type metadata accessor for CRLBoardIdentifier);
        v262 = v439;
        sub_100AD7844(v439, v261);
        swift_unknownObjectRelease(v204);
        v263 = v446;
        sub_100B01100(v204, v113, v446, v421, v423);
        sub_10071CCD8(v263, 0);
        sub_10071CCD8(v263, 0);
        sub_1004B84A4(v262, type metadata accessor for CRLBoardIdentifier);
        v137 = (uint64_t)v27;
LABEL_27:
        sub_1004B84A4(v137, type metadata accessor for CRLBoardIdentifier);
        return;
      default:
        v217 = v118;
        if (qword_1013DD870 != -1)
          swift_once(&qword_1013DD870, sub_100A059E0);
        swift_beginAccess(&static OS_os_log.dataSync, &v456, 0, 0);
        v218 = (void *)static OS_os_log.dataSync;
        v219 = sub_1004B804C((uint64_t *)&unk_1013E0180);
        v220 = swift_initStackObject(v219, v455);
        *(_OWORD *)(v220 + 16) = xmmword_100EF5E40;
        v459 = v116;
        v221 = v116;
        v222 = sub_1004B7878(&qword_1013DE530, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100EF1374);
        v223 = v218;
        v224 = Error.localizedDescription.getter(v217, v222);
        v226 = v225;
        *(_QWORD *)(v220 + 56) = &type metadata for String;
        *(_QWORD *)(v220 + 64) = sub_1004CFC2C();
        *(_QWORD *)(v220 + 32) = v224;
        *(_QWORD *)(v220 + 40) = v226;
        v228 = static os_log_type_t.default.getter(v227);
        sub_100A06EBC((uint64_t)v223, &_mh_execute_header, v228, "Failed to apply sync save result because of an unhandled CKError %@", 67, 2, v220);
        sub_10071CCD8(v221, 0);
        sub_10071CCD8(v221, 0);
        v229 = v440;
        swift_unknownObjectRelease(v440);
        sub_100B01100(v229, v113, v221, v421, v423);
        swift_setDeallocating(v220);
        v230 = sub_1004B804C(&qword_1013E0190);
        swift_arrayDestroy(v220 + 32, 1, v230);

        return;
    }
LABEL_123:
    swift_release(v142);
    return;
  }
  v421 = v49;
  v422 = v48;
  v423 = v50;
  v64 = type metadata accessor for CRLBoardItemSyncLocalChangeRecord(0);
  v65 = v440;
  v66 = swift_dynamicCastClass(v440, v64);
  if (v66)
  {
    v67 = v66;
    *(_QWORD *)&v445 = v66 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_id;
    v444 = *(void (**)(char *, uint64_t))(v66 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_itemTypeValue);
    v68 = *(_QWORD **)(v66 + OBJC_IVAR____TtC8Freeform33CRLBoardItemSyncLocalChangeRecord_itemData);
    v69 = v66 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_parentContainerUUID;
    swift_beginAccess(v66 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_parentContainerUUID, &v456, 0, 0);
    sub_1004CB7BC(v69, (uint64_t)v47, (uint64_t *)&unk_1013E1A50);
    sub_1004CB7BC(v69, (uint64_t)v44, (uint64_t *)&unk_1013E1A50);
    *(_QWORD *)&v443 = v67 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_boardIdentifier;
    v70 = *(unsigned __int8 *)(v67 + OBJC_IVAR____TtC8Freeform22CRLBoardItemSyncRecord_tombstoned);
    v71 = swift_unknownObjectRetain_n(v65, 2);
    v72 = v421;
    v73 = v446;
    v74 = v423;
    sub_100B010EC(v71, v422, v446, v421, v423);
    sub_10057939C((uint64_t)v73, v72);
    swift_retain(v68);
    *(_QWORD *)&v442 = v74;
    v75 = v449;
    v76 = sub_100AC71F0(v445, (uint64_t)v444, v68, (uint64_t)v47, (uint64_t)v44, (void (*)(_QWORD *, _QWORD, uint64_t))v443, v70, (uint64_t)v73, v72, (_QWORD *)v447, 0);
    v449 = v75;
    if (v75)
    {
      swift_release(v68);
      sub_1004BE2FC((uint64_t)v73, v72);
      v77 = v440;
      swift_unknownObjectRelease(v440);
      sub_100B01100(v77, v422, v73, v72, v423);

      swift_unknownObjectRelease(v77);
      sub_1004CB800((uint64_t)v44, (uint64_t *)&unk_1013E1A50);
      v78 = (uint64_t)v47;
      v79 = (uint64_t *)&unk_1013E1A50;
LABEL_12:
      sub_1004CB800(v78, v79);
    }
    else
    {
      v138 = v76;
      swift_release(v68);
      swift_release(v138);
      sub_1004CB800((uint64_t)v44, (uint64_t *)&unk_1013E1A50);
      sub_1004CB800((uint64_t)v47, (uint64_t *)&unk_1013E1A50);
      sub_100566D44(v67);

      sub_1004BE2FC((uint64_t)v73, v72);
      v139 = v440;
      swift_unknownObjectRelease(v440);
      sub_100B01100(v139, v422, v73, v72, v423);
      swift_unknownObjectRelease(v139);
    }
    return;
  }
  v99 = type metadata accessor for CRLBoardSyncLocalChangeRecord(0);
  v100 = swift_dynamicCastClass(v65, v99);
  if (v100)
  {
    *(_QWORD *)&v445 = v100 + OBJC_IVAR____TtC8Freeform18CRLBoardSyncRecord_boardIdentifier;
    v444 = (void (*)(char *, uint64_t))(v100 + OBJC_IVAR____TtC8Freeform18CRLBoardSyncRecord_rootContainerUUID);
    v101 = *(_QWORD **)(v100 + OBJC_IVAR____TtC8Freeform29CRLBoardSyncLocalChangeRecord_boardData);
    v102 = *(unsigned __int8 *)(v100 + OBJC_IVAR____TtC8Freeform18CRLBoardSyncRecord_tombstoned);
    v103 = v100 + OBJC_IVAR____TtC8Freeform18CRLBoardSyncRecord_alternateRootContainerUUID;
    v104 = *(unsigned __int8 *)(v100 + OBJC_IVAR____TtC8Freeform18CRLBoardSyncRecord_hideFromRecentlyDeleted);
    swift_unknownObjectRetain(v65);
    v105 = v421;
    v106 = v446;
    v107 = v423;
    sub_100B010EC(v108, v422, v446, v421, v423);
    sub_10057939C((uint64_t)v106, v105);
    swift_retain(v101);
    *(_QWORD *)&v447 = v107;
    v109 = v449;
    v110 = sub_100AC8E00(v445, (uint64_t)v444, v103, v101, v102, v104, (uint64_t)v106, v105, 0);
    if (v109)
    {
      sub_1004BE2FC((uint64_t)v106, v105);
      swift_release(v101);
      sub_100B01100(v65, v422, v106, v105, v107);

      swift_unknownObjectRelease(v65);
    }
    else
    {
      v149 = v110;
      sub_1004BE2FC((uint64_t)v106, v105);
      swift_release(v101);
      sub_100B01100(v65, v422, v106, v105, v107);

      swift_unknownObjectRelease(v65);
      swift_release(v149);
    }
    return;
  }
  v140 = type metadata accessor for CRLUserBoardMetadataSyncLocalChangeRecord(0);
  v141 = swift_dynamicCastClass(v65, v140);
  v52 = v446;
  if (v141)
  {
    v142 = *(_QWORD *)(v141 + OBJC_IVAR____TtC8Freeform41CRLUserBoardMetadataSyncLocalChangeRecord_boardMetadataData);
    swift_unknownObjectRetain(v65);
    v143 = v421;
    v144 = v422;
    v145 = v423;
    sub_100B010EC(v146, v422, v52, v421, v423);
    sub_10057939C((uint64_t)v52, v143);
    swift_retain(v142);
    v147 = v145;
    v148 = v449;
    sub_100AC931C(v142, (uint64_t)v52, v143);
    if (v148)
    {

      swift_release(v142);
      sub_1004BE2FC((uint64_t)v52, v143);
      swift_unknownObjectRelease(v65);
      v59 = v65;
      v60 = v144;
      v61 = v52;
      v62 = v143;
      v63 = v145;
      goto LABEL_8;
    }

    sub_1004BE2FC((uint64_t)v52, v143);
    sub_100B01100(v65, v144, v52, v143, v145);
    swift_unknownObjectRelease(v65);
    goto LABEL_123;
  }
  v159 = type metadata accessor for CRLFreehandDrawingBucketSyncLocalChangeRecord(0);
  v160 = swift_dynamicCastClass(v65, v159);
  if (!v160)
  {
    v234 = type metadata accessor for CRLBoardShareSyncLocalChangeRecord(0);
    v235 = swift_dynamicCastClass(v65, v234);
    if (!v235)
    {
      swift_unknownObjectRetain(v65);
      v413 = v421;
      v414 = v423;
      sub_100B010EC(v415, v422, v52, v421, v423);
      sub_10057939C((uint64_t)v52, v413);
      v416 = v414;
      sub_100757E04(&_mh_execute_header, (uint64_t)"_sync_applySyncSaveResults(_:syncScope:)", 40, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2, 9529, "Unknown record type", 19, 2u, (uint64_t)_swiftEmptyArrayStorage);
      sub_100518FC0((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"Unknown record type");
      sub_100519194((uint64_t)_swiftEmptyArrayStorage, (uint64_t)"_sync_applySyncSaveResults(_:syncScope:)", 40, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/Persistence/CRLBoardDataStore.swift", 89, 2u, 9529, (uint64_t)"Unknown record type", 19, 2u);
      goto LABEL_125;
    }
    v236 = v235;
    v237 = objc_opt_self(CKShare);
    v54 = v423;
    v238 = (void *)swift_dynamicCastObjCClass(v423, v237);
    if (v238)
      v239 = v54;
    v240 = v236 + OBJC_IVAR____TtC8Freeform23CRLBoardShareSyncRecord_boardIdentifier;
    swift_unknownObjectRetain(v65);
    v53 = v421;
    v55 = v422;
    sub_100B010EC(v241, v422, v52, v421, v54);
    sub_10057939C((uint64_t)v52, v53);
    v242 = v54;
    sub_100AC8940(v240, v238);

    sub_1004BE2FC((uint64_t)v52, v53);
    swift_unknownObjectRelease(v65);

    v59 = v65;
    goto LABEL_7;
  }
  v161 = v160;
  v162 = swift_unknownObjectRetain_n(v65, 2);
  v163 = v421;
  v164 = v423;
  sub_100B010EC(v162, v422, v52, v421, v423);
  sub_10057939C((uint64_t)v52, v163);
  v165 = v164;
  v166 = sub_100B39920(0x6C6261656772654DLL, 0xEF74656B63754265, 1);
  if (v166)
  {
    v167 = (void *)v166;
    v168 = *(_QWORD *)(v161 + OBJC_IVAR____TtC8Freeform34CRLFreehandDrawingBucketSyncRecord_bucketIndex);
    v169 = *(_QWORD *)(v161 + OBJC_IVAR____TtC8Freeform45CRLFreehandDrawingBucketSyncLocalChangeRecord_bucketData);
    v170 = *(_QWORD *)(v161 + OBJC_IVAR____TtC8Freeform45CRLFreehandDrawingBucketSyncLocalChangeRecord_bucketData + 8);
    v171 = *(_QWORD *)(v161
                     + OBJC_IVAR____TtC8Freeform45CRLFreehandDrawingBucketSyncLocalChangeRecord_minRequiredVersions);
    v444 = *(void (**)(char *, uint64_t))(v161
                                                  + OBJC_IVAR____TtC8Freeform45CRLFreehandDrawingBucketSyncLocalChangeRecord_minRequiredVersions
                                                  + 8);
    *(_QWORD *)&v443 = *(_QWORD *)(v161
                                 + OBJC_IVAR____TtC8Freeform45CRLFreehandDrawingBucketSyncLocalChangeRecord_minRequiredVersions
                                 + 16);
    v172 = *(_QWORD *)(v161
                     + OBJC_IVAR____TtC8Freeform45CRLFreehandDrawingBucketSyncLocalChangeRecord_minRequiredVersions
                     + 24);
    v441 = *(_QWORD *)(v161
                     + OBJC_IVAR____TtC8Freeform45CRLFreehandDrawingBucketSyncLocalChangeRecord_minRequiredVersions
                     + 32);
    *(_QWORD *)&v442 = v172;
    sub_1004BE310(v169, v170);
    v173 = sub_1004CBA30(&qword_101405EF0, (uint64_t *)&unk_1014148B0, (uint64_t)&protocol conformance descriptor for CRDictionary<A, B>);
    v174 = v449;
    Capsule<>.init(serializedData:allowedAppFormats:)(v169, v170, 0, v433, v173);
    if (v174)
    {

      v175 = v440;
      swift_unknownObjectRelease(v440);

      v176 = v446;
      v177 = v421;
      sub_1004BE2FC((uint64_t)v446, v421);
      swift_unknownObjectRelease(v175);
      v178 = v175;
      v179 = v422;
      v180 = v176;
      v181 = v177;
    }
    else
    {
      *(_QWORD *)&v445 = v165;
      v282 = sub_1004B804C((uint64_t *)&unk_101406AD0);
      v283 = v171;
      v284 = (_QWORD *)swift_allocObject(v282, *(unsigned int *)(v282 + 48), *(unsigned __int16 *)(v282 + 52));
      *((_BYTE *)v284 + *(_QWORD *)(*v284 + 136)) = 0;
      v284[2] = v168;
      v285 = v429;
      (*(void (**)(char *, char *, uint64_t))(v429 + 32))((char *)v284 + *(_QWORD *)(*v284 + 120), v41, v431);
      *((_BYTE *)v284 + *(_QWORD *)(*v284 + 136)) = 0;
      v286 = (_QWORD *)((char *)v284 + *(_QWORD *)(*v284 + 128));
      v287 = v444;
      *v286 = v283;
      v286[1] = v287;
      v288 = v442;
      v286[2] = v443;
      v286[3] = v288;
      v286[4] = v441;
      v289 = v161 + OBJC_IVAR____TtC8Freeform34CRLFreehandDrawingBucketSyncRecord_boardIdentifier;
      v290 = v167;
      v291 = v289;
      v292 = v446;
      v293 = v421;
      sub_100AC7008(v291, (uint64_t)v284, (unint64_t)v446, v421, (uint64_t)v167, (_QWORD *)v447);

      sub_1004BE2FC((uint64_t)v292, v293);
      swift_setDeallocating(v284);
      (*(void (**)(char *, uint64_t))(v285 + 8))((char *)v284 + *(_QWORD *)(*v284 + 120), v431);
      swift_deallocClassInstance(v284, *(unsigned int *)(*v284 + 48), *(unsigned __int16 *)(*v284 + 52));
      v294 = v440;
      swift_unknownObjectRelease_n(v440, 2);
      v178 = v294;
      v179 = v422;
      v180 = v292;
      v181 = v293;
    }
  }
  else
  {
    *(_QWORD *)&v445 = v165;
    if (qword_1013DD870 != -1)
      swift_once(&qword_1013DD870, sub_100A059E0);
    swift_beginAccess(&static OS_os_log.dataSync, &v456, 0, 0);
    v448 = (char *)static OS_os_log.dataSync;
    v243 = sub_1004B804C((uint64_t *)&unk_1013E0180);
    v244 = swift_initStackObject(v243, &v450);
    *(_OWORD *)(v244 + 16) = xmmword_100EF5A10;
    v245 = *(_QWORD *)(v161 + OBJC_IVAR____TtC8Freeform34CRLFreehandDrawingBucketSyncRecord_bucketIndex);
    *(_QWORD *)(v244 + 56) = &type metadata for Int;
    *(_QWORD *)(v244 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v244 + 32) = v245;
    v246 = v439;
    sub_1004B8460(v161 + OBJC_IVAR____TtC8Freeform34CRLFreehandDrawingBucketSyncRecord_boardIdentifier, v439, type metadata accessor for CRLBoardIdentifier);
    v247 = v437;
    v248 = v438;
    v249 = v436;
    (*(void (**)(char *, uint64_t, uint64_t))(v438 + 16))(v436, v246, v437);
    v448 = v448;
    v250 = sub_1004B84A4(v246, type metadata accessor for CRLBoardIdentifier);
    v251 = UUID.uuidString.getter(v250);
    v253 = v252;
    (*(void (**)(char *, uint64_t))(v248 + 8))(v249, v247);
    *(_QWORD *)(v244 + 96) = &type metadata for String;
    v254 = sub_1004CFC2C();
    *(_QWORD *)(v244 + 104) = v254;
    *(_QWORD *)(v244 + 72) = v251;
    *(_QWORD *)(v244 + 80) = v253;
    v255 = static os_log_type_t.error.getter(v254);
    v256 = v448;
    sub_100A06EBC((uint64_t)v448, &_mh_execute_header, v255, "_sync_applySyncSaveResults unable to get ckMergeableRecordValue for bucket %{public}d, probably a partial record. Board: %{public}@", 131, 2, v244);
    swift_setDeallocating(v244);
    v257 = *(_QWORD *)(v244 + 16);
    v258 = sub_1004B804C(&qword_1013E0190);
    swift_arrayDestroy(v244 + 32, v257, v258);

    v259 = v440;
    swift_unknownObjectRelease(v440);

    v260 = v421;
    sub_1004BE2FC((uint64_t)v52, v421);
    swift_unknownObjectRelease(v259);
    v178 = v259;
    v179 = v422;
    v180 = v52;
    v181 = v260;
  }
LABEL_83:
  sub_100B01100(v178, v179, v180, v181, v423);
}

void sub_100AD2D28(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  void (*v10)(_QWORD *, _QWORD, uint64_t, __n128);
  void (*v11)(_QWORD *, uint64_t);
  _WORD v12[8];

  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (void (**)(_QWORD *, _QWORD, uint64_t, __n128))((char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)(v1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_writeQueue);
  *v7 = v8;
  v10 = *(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v4 + 104);
  v10(v7, enum case for DispatchPredicate.onQueue(_:), v3, v5);
  v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  v11 = *(void (**)(_QWORD *, uint64_t))(v4 + 8);
  v11(v7, v3);
  if ((v8 & 1) != 0)
  {
    strcpy((char *)v12, "DELETE FROM ");
    HIBYTE(v12[6]) = 0;
    v12[7] = -5120;
    __asm { BR              X10 }
  }
  __break(1u);
  JUMPOUT(0x100AD3264);
}

void sub_100AD32B8(void *a1)
{
  char *v1;

  v1 = a1;
  sub_1004E7CF0(v1, (uint64_t)v1);

}

uint64_t sub_100AD3300(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v5;
  _QWORD v7[4];

  v7[2] = a1;
  v5 = a1;
  OS_dispatch_queue.sync<A>(execute:)(a4, v7, (char *)&type metadata for () + 8);

  return 1;
}

uint64_t sub_100AD33A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  _QWORD *v24;
  void *v25;
  id v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  __n128 v35;
  void (*v36)(int64_t, uint64_t, uint64_t);
  os_unfair_lock_s *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  id v41;
  id v42;
  id v43;
  void *v44;
  os_unfair_lock_s *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  NSString v70;
  NSString v71;
  id v72;
  uint64_t v73;
  char *v74;
  __n128 v75;
  void (*v76)(char *, uint64_t, _QWORD *);
  _QWORD *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  _BOOL8 v84;
  uint64_t v85;
  char v86;
  unint64_t v87;
  char v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  uint64_t result;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  int64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(int64_t, uint64_t, uint64_t);
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  char v120[32];
  _QWORD *v121;

  isUniquelyReferenced_nonNull_native = v1;
  v5 = sub_1004B804C((uint64_t *)&unk_1013E1700);
  __chkstk_darwin(v5);
  v108 = (uint64_t)&v94 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1004B804C((uint64_t *)&unk_1013F13A0);
  v112 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v96 = (char *)&v94 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v95 = (char *)&v94 - v10;
  v11 = (_QWORD *)type metadata accessor for URL(0);
  v107 = *(v11 - 1);
  __chkstk_darwin(v11);
  v106 = (char *)&v94 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1004B804C((uint64_t *)&unk_101406470);
  v104 = *(_QWORD *)(v13 - 8);
  v105 = v13;
  __chkstk_darwin(v13);
  v117 = (uint64_t)&v94 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v118 = (uint64_t *)((char *)&v94 - v16);
  v17 = type metadata accessor for UUID(0);
  v18 = *(_QWORD *)(v17 - 8);
  v109 = v17;
  v110 = v18;
  __chkstk_darwin(v17);
  v111 = (uint64_t)&v94 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for DispatchPredicate(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = __chkstk_darwin(v20);
  v24 = (uint64_t *)((char *)&v94 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v25 = *(void **)(isUniquelyReferenced_nonNull_native + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v24 = v25;
  (*(void (**)(_QWORD *, _QWORD, int64_t, __n128))(v21 + 104))(v24, enum case for DispatchPredicate.onQueue(_:), v20, v22);
  v26 = v25;
  LOBYTE(v25) = _dispatchPreconditionTest(_:)(v24);
  (*(void (**)(_QWORD *, int64_t))(v21 + 8))(v24, v20);
  if ((v25 & 1) == 0)
    goto LABEL_45;
  v27 = (unint64_t)sub_100AB76F4(a1);
  if (v2)
    return (uint64_t)v24;
  v20 = v27;
  v94 = 0;
  if (v27 >> 62)
    goto LABEL_46;
  v28 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v27);
  while (1)
  {
    v29 = v110;
    v30 = v111;
    v31 = v112;
    if (!v28)
    {
      v24 = _swiftEmptyDictionarySingleton;
LABEL_41:
      swift_bridgeObjectRelease_n(v20, 2);
      return (uint64_t)v24;
    }
    v103 = v7;
    if (v28 < 1)
      break;
    v115 = *(_QWORD *)(isUniquelyReferenced_nonNull_native
                     + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManagerLock);
    v101 = v20 & 0xC000000000000001;
    v24 = _swiftEmptyDictionarySingleton;
    v100 = OBJC_IVAR____TtC8Freeform17CRLBoardDataStore__assetFileManager;
    v99 = isUniquelyReferenced_nonNull_native;
    v102 = v11;
    v98 = v20;
    v97 = v28;
    v32 = 0;
    while (1)
    {
      if (v101)
      {
        v34 = specialized _ArrayBuffer._getElementSlowPath(_:)(v32, v20);
      }
      else
      {
        v34 = *(_QWORD *)(v20 + 8 * v32 + 32);
        v35 = swift_retain(v34);
      }
      v36 = *(void (**)(int64_t, uint64_t, uint64_t))(v29 + 16);
      v116 = v34 + OBJC_IVAR____TtC8Freeform19CRLAssetDatabaseRow_assetUUID;
      v113 = v36;
      ((void (*)(uint64_t, __n128))v36)(v30, v35);
      *v118 = v34;
      v37 = *(os_unfair_lock_s **)(v115 + 16);
      swift_retain(v34);
      os_unfair_lock_lock(v37);
      v38 = v100;
      v39 = *(char **)(isUniquelyReferenced_nonNull_native + v100);
      v119 = v34;
      v114 = v32;
      if (v39)
      {
        v40 = v39;
      }
      else
      {
        v41 = objc_allocWithZone((Class)type metadata accessor for CRLAssetFileManager(0));
        v42 = (id)isUniquelyReferenced_nonNull_native;
        v43 = sub_100C7EE84((uint64_t)v42);

        v44 = *(void **)(isUniquelyReferenced_nonNull_native + v38);
        *(_QWORD *)(isUniquelyReferenced_nonNull_native + v38) = v43;
        v40 = (char *)v43;

        v34 = v119;
        v39 = 0;
      }
      v45 = *(os_unfair_lock_s **)(v115 + 16);
      v46 = v39;
      os_unfair_lock_unlock(v45);
      v47 = v34 + OBJC_IVAR____TtC8Freeform19CRLAssetDatabaseRow_fileExtension;
      v48 = *(_QWORD *)(v34 + OBJC_IVAR____TtC8Freeform19CRLAssetDatabaseRow_fileExtension);
      v49 = *(_QWORD *)(v47 + 8);
      v50 = *(_QWORD *)&v40[OBJC_IVAR____TtC8Freeform19CRLAssetFileManager_lock];
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v50 + 16));
      v51 = &v40[OBJC_IVAR____TtC8Freeform19CRLAssetFileManager_assetFileURLCache];
      v52 = swift_beginAccess(&v40[OBJC_IVAR____TtC8Freeform19CRLAssetFileManager_assetFileURLCache], v120, 0, 0);
      v53 = *(_QWORD *)v51;
      if (*(_QWORD *)(v53 + 16))
      {
        v54 = v48;
        swift_bridgeObjectRetain(v53);
        v55 = sub_100842EFC(v116);
        if ((v56 & 1) != 0)
        {
          v57 = v108;
          sub_1004CB7BC(*(_QWORD *)(v53 + 56) + *(_QWORD *)(v31 + 72) * v55, v108, (uint64_t *)&unk_1013F13A0);
          v58 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 56);
          v59 = v57;
          v60 = 0;
        }
        else
        {
          v58 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 56);
          v57 = v108;
          v59 = v108;
          v60 = 1;
        }
        v63 = v31;
        v64 = v103;
        v58(v59, v60, 1, v103);
        v62 = v57;
        swift_bridgeObjectRelease();
        v48 = v54;
      }
      else
      {
        v61 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v31 + 56);
        v62 = v108;
        v63 = v31;
        v64 = v103;
        v61(v108, 1, 1, v103, v52);
      }
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v50 + 16));
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v63 + 48))(v62, 1, v64) == 1)
      {
        v65 = sub_1004CB800(v62, (uint64_t *)&unk_1013E1700);
        v66 = UUID.uuidString.getter(v65);
        v68 = v67;
        v31 = v112;
        v7 = v109;
        if (v49)
        {
          v69 = HIBYTE(v49) & 0xF;
          if ((v49 & 0x2000000000000000) == 0)
            v69 = v48 & 0xFFFFFFFFFFFFLL;
          if (v69)
          {
            v70 = String._bridgeToObjectiveC()();
            v71 = String._bridgeToObjectiveC()();
            v72 = objc_msgSend(v70, "stringByAppendingPathExtension:", v71);

            if (v72)
            {
              swift_bridgeObjectRelease();
              v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(v72);
              v68 = v73;

            }
          }
        }
        v74 = v106;
        URL.appendingPathComponent(_:)(v66, v68);
        v75 = swift_bridgeObjectRelease();
        v76 = *(void (**)(char *, uint64_t, _QWORD *))(v107 + 32);
        v77 = v102;
      }
      else
      {
        v78 = v62;
        v76 = *(void (**)(char *, uint64_t, _QWORD *))(v107 + 32);
        v79 = v95;
        v77 = v102;
        v76(v95, v78, v102);
        v80 = v96;
        v76(v96, (uint64_t)v79, v77);
        v74 = v106;
        v76(v106, (uint64_t)v80, v77);
        v31 = v112;
        v7 = v109;
      }
      v81 = (uint64_t)v118;
      ((void (*)(char *, char *, _QWORD *, __n128))v76)((char *)v118 + *(int *)(v105 + 48), v74, v77, v75);

      v11 = &unk_101406470;
      sub_1004C4938(v81, v117, (uint64_t *)&unk_101406470);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v24);
      v121 = v24;
      v30 = v111;
      v20 = sub_100842EFC(v111);
      v83 = v24[2];
      v84 = (v82 & 1) == 0;
      v85 = v83 + v84;
      if (__OFADD__(v83, v84))
        break;
      v86 = v82;
      if (v24[3] >= v85)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_100833E88();
      }
      else
      {
        sub_100823160(v85, isUniquelyReferenced_nonNull_native);
        v87 = sub_100842EFC(v30);
        if ((v86 & 1) != (v88 & 1))
          goto LABEL_51;
        v20 = v87;
      }
      isUniquelyReferenced_nonNull_native = v99;
      v24 = v121;
      if ((v86 & 1) != 0)
      {
        sub_100582338(v117, v121[7] + *(_QWORD *)(v104 + 72) * v20, (uint64_t *)&unk_101406470);
        v29 = v110;
      }
      else
      {
        v121[((unint64_t)v20 >> 6) + 8] |= 1 << v20;
        v29 = v110;
        v113(v24[6] + *(_QWORD *)(v110 + 72) * v20, v30, v7);
        sub_1004C4938(v117, v24[7] + *(_QWORD *)(v104 + 72) * v20, (uint64_t *)&unk_101406470);
        v89 = v24[2];
        v90 = __OFADD__(v89, 1);
        v91 = v89 + 1;
        if (v90)
          goto LABEL_44;
        v24[2] = v91;
        v24 = v121;
      }
      v33 = swift_bridgeObjectRelease();
      v32 = v114 + 1;
      (*(void (**)(uint64_t, uint64_t, __n128))(v29 + 8))(v30, v7, v33);
      swift_release(v119);
      v20 = v98;
      if (v97 == v32)
        goto LABEL_41;
    }
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    if (v20 < 0)
      v93 = v20;
    else
      v93 = v20 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v20, 2);
    v28 = _CocoaArrayWrapper.endIndex.getter(v93);
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_51:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v7);
  __break(1u);
  return result;
}

uint64_t sub_100AD3BF8@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_100AD33A0(a1);
  if (!v2)
    *a2 = result;
  return result;
}

id sub_100AD3C28()
{
  _QWORD *v0;

  return *(id *)(*v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_crdtContext);
}

unint64_t sub_100AD3C40()
{
  unint64_t result;

  result = qword_101405240;
  if (!qword_101405240)
  {
    result = swift_getWitnessTable(&unk_100F270BC, &type metadata for CRLBoardDataStore.SchemaVersion);
    atomic_store(result, (unint64_t *)&qword_101405240);
  }
  return result;
}

unint64_t sub_100AD3C88()
{
  unint64_t result;

  result = qword_101405248;
  if (!qword_101405248)
  {
    result = swift_getWitnessTable(&unk_100F27058, &type metadata for CRLBoardDataStore.Table);
    atomic_store(result, (unint64_t *)&qword_101405248);
  }
  return result;
}

unint64_t sub_100AD3CCC(uint64_t a1)
{
  unint64_t result;

  result = sub_100AD3CF0();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100AD3CF0()
{
  unint64_t result;

  result = qword_101405298;
  if (!qword_101405298)
  {
    result = swift_getWitnessTable(&unk_100F27074, &type metadata for CRLBoardDataStore.Table);
    atomic_store(result, (unint64_t *)&qword_101405298);
  }
  return result;
}

uint64_t sub_100AD3D34()
{
  return sub_1004CBA30(&qword_1014052A0, &qword_1014052A8, (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t sub_100AD3D60(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_100AD3D94();
  a1[2] = sub_100AD3DD8();
  result = sub_100AD3E1C();
  a1[3] = result;
  return result;
}

unint64_t sub_100AD3D94()
{
  unint64_t result;

  result = qword_1014052B0;
  if (!qword_1014052B0)
  {
    result = swift_getWitnessTable(&unk_100F27180, &type metadata for CRLBoardDataStore.SchemaVersion);
    atomic_store(result, (unint64_t *)&qword_1014052B0);
  }
  return result;
}

unint64_t sub_100AD3DD8()
{
  unint64_t result;

  result = qword_1014052B8;
  if (!qword_1014052B8)
  {
    result = swift_getWitnessTable(&unk_100F27110, &type metadata for CRLBoardDataStore.SchemaVersion);
    atomic_store(result, (unint64_t *)&qword_1014052B8);
  }
  return result;
}

unint64_t sub_100AD3E1C()
{
  unint64_t result;

  result = qword_1014052C0;
  if (!qword_1014052C0)
  {
    result = swift_getWitnessTable(&unk_100F270D8, &type metadata for CRLBoardDataStore.SchemaVersion);
    atomic_store(result, (unint64_t *)&qword_1014052C0);
  }
  return result;
}

unint64_t sub_100AD3E64()
{
  unint64_t result;

  result = qword_1014052C8;
  if (!qword_1014052C8)
  {
    result = swift_getWitnessTable(&unk_100F27158, &type metadata for CRLBoardDataStore.SchemaVersion);
    atomic_store(result, (unint64_t *)&qword_1014052C8);
  }
  return result;
}

uint64_t sub_100AD3EA8()
{
  return sub_1004CBA30(&qword_1014052D0, &qword_1014052D8, (uint64_t)&protocol conformance descriptor for [A]);
}

uint64_t sub_100AD3ED4()
{
  return sub_100B0142C(&qword_1013EB680);
}

uint64_t sub_100AD3EE0()
{
  return sub_100AFFA14(type metadata accessor for CRLBoardIdentifier, &qword_1013EB680, (uint64_t (*)(_QWORD, unint64_t, unint64_t))sub_100AA2170);
}

double sub_100AD3EFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_100AD3F0C(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

void sub_100AD3F18()
{
  sub_100B012E8(&qword_1013DDAB0, &qword_101480A58, (uint64_t)sub_100A742B4);
}

uint64_t sub_100AD3F34(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[24];
  _BYTE v13[24];

  v2 = v1;
  v4 = type metadata accessor for CRLBoardCRDTData(0);
  __chkstk_darwin(v4);
  v6 = &v12[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_100A91A58(v1);
  v8 = a1 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData;
  swift_beginAccess(a1 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v13, 0, 0);
  sub_1004B8460(v8, (uint64_t)v6, type metadata accessor for CRLBoardCRDTData);
  swift_beginAccess((char *)v2 + OBJC_IVAR____TtC8Freeform12CRLBoardData_crdtData, v12, 33, 0);
  v9 = sub_1004B7878((unint64_t *)&unk_101405DD0, type metadata accessor for CRLBoardCRDTData, (uint64_t)&unk_100F3A468);
  CRStruct_6.merge(_:)(v6, v4, v9);
  sub_1004B84A4((uint64_t)v6, type metadata accessor for CRLBoardCRDTData);
  swift_endAccess(v12);
  v10 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 3) = *(_OWORD *)(a1 + 24);
  v2[5] = v10;
  sub_100DD0B74();
  return v7;
}

uint64_t sub_100AD406C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  id v11;
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t inited;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t result;
  char v27;
  _QWORD v29[3];
  _BYTE v30[72];
  _BYTE v31[24];
  _BYTE v32[8];

  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (_QWORD *)((char *)&v29[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(void **)(a1 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v9 = v10;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, __n128))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5, v7);
  v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v9, v5);
  if ((v10 & 1) == 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  v12 = sub_100AD4350();
  if (v2)
  {
    if (qword_1013DD858 == -1)
    {
LABEL_4:
      swift_beginAccess(&static OS_os_log.boardStore, v31, 0, 0);
      v13 = (void *)static OS_os_log.boardStore;
      v14 = sub_1004B804C((uint64_t *)&unk_1013E0180);
      inited = swift_initStackObject(v14, v30);
      *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
      swift_getErrorValue(v2, v32, v29);
      v16 = v29[1];
      v17 = v29[2];
      v18 = v13;
      v19 = Error.localizedDescription.getter(v16, v17);
      v21 = v20;
      *(_QWORD *)(inited + 56) = &type metadata for String;
      v22 = sub_1004CFC2C();
      *(_QWORD *)(inited + 64) = v22;
      *(_QWORD *)(inited + 32) = v19;
      *(_QWORD *)(inited + 40) = v21;
      v23 = static os_log_type_t.error.getter(v22);
      sub_100A06EBC((uint64_t)v18, &_mh_execute_header, v23, "Failed to fetch data store metadata with error: %@", 50, 2, inited);
      swift_setDeallocating(inited);
      v24 = sub_1004B804C(&qword_1013E0190);
      swift_arrayDestroy(inited + 32, 1, v24);

      return swift_willThrow(v25);
    }
LABEL_10:
    swift_once(&qword_1013DD858, sub_100A05554);
    goto LABEL_4;
  }
  v27 = v12;
  if ((v12 & 1) != 0)
    result = 1;
  else
    result = sub_100AD4AF4();
  *a2 = v27 & 1;
  a2[1] = result & 1;
  return result;
}

uint64_t sub_100AD42A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[4];
  uint64_t v5;

  v4[2] = a2;
  OS_dispatch_queue.sync<A>(execute:)(sub_100AFF0A0, v4, &type metadata for CRLBoardDataStore.CRLBoardDataStoreMetadata);
  v2 = sub_1004B804C(&qword_1014053B0);
  return CheckedContinuation.resume(returning:)(&v5, v2);
}

uint64_t sub_100AD4350()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  void (*v10)(_QWORD, __n128);
  id v11;
  void (*v12)(_QWORD *, uint64_t);
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  Swift::String v42;
  Swift::String v43;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __n128 v66;
  uint64_t v67;
  __n128 v68;
  void *v69;
  uint64_t v70;
  id v71;
  void (*v72)(_QWORD *, uint64_t);
  uint64_t v73;
  _QWORD *inited;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  char v79;
  void *v80;
  id v81;
  _QWORD *v82;
  sqlite3_stmt *v83;
  void *v84;
  id v85;
  uint64_t v87;
  void (*v88)(_QWORD *, uint64_t);
  unsigned int v89;
  void (*v90)(_QWORD *, _QWORD, uint64_t, __n128);
  char v91[8];
  uint64_t v92;
  uint64_t v93;
  char v94[8];
  char v95[48];
  char v96[72];
  uint64_t v97;
  unint64_t v98;
  char v99[32];

  v2 = v1;
  v3 = v0;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (uint64_t *)((char *)&v87 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v8 = v9;
  v10 = *(void (**)(_QWORD, __n128))(v5 + 104);
  v89 = enum case for DispatchPredicate.onQueue(_:);
  v90 = (void (*)(_QWORD *, _QWORD, uint64_t, __n128))v10;
  v10(v8, v6);
  v11 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  v12 = *(void (**)(_QWORD *, uint64_t))(v5 + 8);
  v12(v8, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  v87 = v4;
  v88 = v12;
  v97 = 0;
  v98 = 0xE000000000000000;
  _StringGuts.grow(_:)(234);
  v13._object = (void *)0x8000000100FEF7D0;
  v13._countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v13);
  v14._countAndFlagsBits = 0x74695F6472616F62;
  v14._object = (void *)0xEB00000000736D65;
  String.append(_:)(v14);
  v15._countAndFlagsBits = 0x20455245485720;
  v15._object = (void *)0xE700000000000000;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0x74695F6472616F62;
  v16._object = (void *)0xEB00000000736D65;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 46;
  v17._object = (void *)0xE100000000000000;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 0xD000000000000010;
  v18._object = (void *)0x8000000100FEEB40;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 0xD00000000000001DLL;
  v19._object = (void *)0x8000000100FEFAA0;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 0x736472616F62;
  v20._object = (void *)0xE600000000000000;
  String.append(_:)(v20);
  v21._countAndFlagsBits = 0x20455245485720;
  v21._object = (void *)0xE700000000000000;
  String.append(_:)(v21);
  v22._countAndFlagsBits = 0x736472616F62;
  v22._object = (void *)0xE600000000000000;
  String.append(_:)(v22);
  v23._countAndFlagsBits = 46;
  v23._object = (void *)0xE100000000000000;
  String.append(_:)(v23);
  v24._countAndFlagsBits = 0xD000000000000010;
  v24._object = (void *)0x8000000100FEEB40;
  String.append(_:)(v24);
  v25._countAndFlagsBits = 0x20524F2030203E20;
  v25._object = (void *)0xE800000000000000;
  String.append(_:)(v25);
  v26._countAndFlagsBits = 0x736472616F62;
  v26._object = (void *)0xE600000000000000;
  String.append(_:)(v26);
  v27._countAndFlagsBits = 46;
  v27._object = (void *)0xE100000000000000;
  String.append(_:)(v27);
  v28._object = (void *)0x8000000100FEF020;
  v28._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v28);
  v29._countAndFlagsBits = 0xD00000000000001DLL;
  v29._object = (void *)0x8000000100FEFAA0;
  String.append(_:)(v29);
  v30._countAndFlagsBits = 0x6D5F736472616F62;
  v30._object = (void *)0xEF61746164617465;
  String.append(_:)(v30);
  v31._countAndFlagsBits = 0x20455245485720;
  v31._object = (void *)0xE700000000000000;
  String.append(_:)(v31);
  v32._countAndFlagsBits = 0x6D5F736472616F62;
  v32._object = (void *)0xEF61746164617465;
  String.append(_:)(v32);
  v33._countAndFlagsBits = 46;
  v33._object = (void *)0xE100000000000000;
  String.append(_:)(v33);
  v34._countAndFlagsBits = 0xD000000000000010;
  v34._object = (void *)0x8000000100FEEB40;
  String.append(_:)(v34);
  v35._countAndFlagsBits = 0xD00000000000001DLL;
  v35._object = (void *)0x8000000100FEFAA0;
  String.append(_:)(v35);
  v36._countAndFlagsBits = 0xD000000000000010;
  v36._object = (void *)0x8000000100FEF8F0;
  String.append(_:)(v36);
  v37._countAndFlagsBits = 0x20455245485720;
  v37._object = (void *)0xE700000000000000;
  String.append(_:)(v37);
  v38._countAndFlagsBits = 0xD000000000000010;
  v38._object = (void *)0x8000000100FEF8F0;
  String.append(_:)(v38);
  v39._countAndFlagsBits = 46;
  v39._object = (void *)0xE100000000000000;
  String.append(_:)(v39);
  v40._countAndFlagsBits = 0xD000000000000010;
  v40._object = (void *)0x8000000100FEEB40;
  String.append(_:)(v40);
  v41._countAndFlagsBits = 0xD00000000000001DLL;
  v41._object = (void *)0x8000000100FEFAA0;
  String.append(_:)(v41);
  v42._countAndFlagsBits = 0xD000000000000018;
  v42._object = (void *)0x8000000100FEF1F0;
  String.append(_:)(v42);
  v43._countAndFlagsBits = 0x20455245485720;
  v43._object = (void *)0xE700000000000000;
  String.append(_:)(v43);
  v44._countAndFlagsBits = 0xD000000000000018;
  v44._object = (void *)0x8000000100FEF1F0;
  String.append(_:)(v44);
  v45._countAndFlagsBits = 46;
  v45._object = (void *)0xE100000000000000;
  String.append(_:)(v45);
  v46._countAndFlagsBits = 0xD000000000000010;
  v46._object = (void *)0x8000000100FEEB40;
  String.append(_:)(v46);
  v47._countAndFlagsBits = 0x292030203E20;
  v47._object = (void *)0xE600000000000000;
  String.append(_:)(v47);
  v48 = v97;
  v49 = v98;
  v50 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v51 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v51, v99);
  swift_retain(v50);
  v53 = sub_1006B77CC(v52, v48, v49);
  v2 = v1;
  if (!v1)
  {
    v67 = v53;
    v68 = swift_release(v50);
    v69 = *(void **)(*(_QWORD *)(v67 + 16) + 32);
    *v8 = v69;
    v70 = v87;
    v90(v8, v89, v87, v68);
    v71 = v69;
    LOBYTE(v69) = _dispatchPreconditionTest(_:)(v8);
    v72 = v88;
    v88(v8, v70);
    if ((v69 & 1) != 0)
    {
      v73 = type metadata accessor for SQLiteRowIterator();
      inited = (_QWORD *)swift_initStackObject(v73, v95);
      inited[4] = 0;
      inited[5] = 1;
      inited[2] = v67;
      inited[3] = 0;
      swift_retain(v67);
      sub_1006B6B04();
      if (v75)
      {
        v76 = v75;
        v77 = sub_1006B45D4(0, v75);
        v79 = v78;
        swift_release(v67);
        swift_release(v76);
        swift_setDeallocating(inited);
        sub_1006B7DA4(inited[3], inited[4], inited[5]);
        if ((v79 & 1) == 0)
        {
          v80 = *(void **)(*(_QWORD *)(v67 + 16) + 32);
          *v8 = v80;
          ((void (*)(_QWORD *, _QWORD, uint64_t))v90)(v8, v89, v70);
          v81 = v80;
          LOBYTE(v80) = _dispatchPreconditionTest(_:)(v8);
          v72(v8, v70);
          if ((v80 & 1) != 0)
          {
            LOBYTE(v60) = v77 > 0;
            v82 = (_QWORD *)(v67 + 24);
            swift_beginAccess(v67 + 24, &v97, 1, 0);
            v83 = *(sqlite3_stmt **)(v67 + 24);
            if (!v83)
              goto LABEL_15;
            goto LABEL_14;
          }
LABEL_21:
          __break(1u);
        }
      }
      else
      {
        swift_release(v67);
        swift_setDeallocating(inited);
        sub_1006B7DA4(inited[3], inited[4], inited[5]);
      }
      v84 = *(void **)(*(_QWORD *)(v67 + 16) + 32);
      *v8 = v84;
      ((void (*)(_QWORD *, _QWORD, uint64_t))v90)(v8, v89, v70);
      v85 = v84;
      LOBYTE(v84) = _dispatchPreconditionTest(_:)(v8);
      v72(v8, v70);
      if ((v84 & 1) != 0)
      {
        v82 = (_QWORD *)(v67 + 24);
        swift_beginAccess(v67 + 24, &v97, 1, 0);
        LOBYTE(v60) = 0;
        v83 = *(sqlite3_stmt **)(v67 + 24);
        if (!v83)
        {
LABEL_15:
          swift_release(v67);
          return v60 & 1;
        }
LABEL_14:
        sqlite3_finalize(v83);
        *v82 = 0;
        goto LABEL_15;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_21;
  }
  swift_release(v50);
  if (qword_1013DD858 != -1)
LABEL_18:
    swift_once(&qword_1013DD858, sub_100A05554);
  swift_beginAccess(&static OS_os_log.boardStore, &v97, 0, 0);
  v54 = (void *)static OS_os_log.boardStore;
  v55 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  v56 = swift_initStackObject(v55, v96);
  *(_OWORD *)(v56 + 16) = xmmword_100EF5E40;
  swift_getErrorValue(v2, v94, v91);
  v57 = v92;
  v58 = v93;
  v59 = v54;
  v60 = Error.localizedDescription.getter(v57, v58);
  v62 = v61;
  *(_QWORD *)(v56 + 56) = &type metadata for String;
  v63 = sub_1004CFC2C();
  *(_QWORD *)(v56 + 64) = v63;
  *(_QWORD *)(v56 + 32) = v60;
  *(_QWORD *)(v56 + 40) = v62;
  v64 = static os_log_type_t.error.getter(v63);
  sub_100A06EBC((uint64_t)v59, &_mh_execute_header, v64, "Failed to check if database has unsynced changes with error: %@", 63, 2, v56);
  swift_setDeallocating(v56);
  v65 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(v56 + 32, 1, v65);

  swift_willThrow(v66);
  return v60 & 1;
}

uint64_t sub_100AD4AF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  void (*v9)(_QWORD, __n128);
  id v10;
  uint64_t v11;
  double *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  unsigned int v17;
  int v18;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  Swift::String v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  __n128 v44;
  void *v45;
  _QWORD *v46;
  uint64_t v47;
  id v48;
  char v49;
  uint64_t v50;
  _QWORD *inited;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char v56;
  void *v57;
  id v58;
  char v59;
  _QWORD *v60;
  sqlite3_stmt *v61;
  void *v62;
  id v63;
  char v64;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  unsigned int v69;
  void (*v70)(_QWORD *, _QWORD, uint64_t, __n128);
  void (*v71)(_QWORD *, uint64_t);
  uint64_t v72;
  uint64_t v73;
  char *v74;
  const char *v75;
  const char *v76;
  const char *v77;
  char v78[8];
  uint64_t v79;
  uint64_t v80;
  char v81[8];
  unint64_t v82;
  unint64_t v83;
  char v84[48];
  char v85[72];
  _QWORD v86[2];
  char v87[8];

  v2 = v1;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (uint64_t *)((char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)(v0 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_queue);
  *v7 = v8;
  v9 = *(void (**)(_QWORD, __n128))(v4 + 104);
  v69 = enum case for DispatchPredicate.onQueue(_:);
  v70 = (void (*)(_QWORD *, _QWORD, uint64_t, __n128))v9;
  v9(v7, v5);
  v10 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  v71 = *(void (**)(_QWORD *, uint64_t))(v4 + 8);
  v71(v7, v3);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    goto LABEL_31;
  }
  v72 = v0;
  v67 = v7;
  v68 = v3;
  v11 = 9;
  v73 = v1;
  v12 = _swiftEmptyArrayStorage;
  v13 = &byte_101263718;
  do
  {
    v17 = *v13++;
    v16 = v17;
    v18 = (1 << v17) & 0x19B;
    if (v17 <= 8 && v18 != 0)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v12);
      v86[0] = v12;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_100600C80(0, *((_QWORD *)v12 + 2) + 1, 1);
        v12 = (double *)v86[0];
      }
      v15 = *((_QWORD *)v12 + 2);
      v14 = *((_QWORD *)v12 + 3);
      if (v15 >= v14 >> 1)
      {
        sub_100600C80(v14 > 1, v15 + 1, 1);
        v12 = (double *)v86[0];
      }
      *((_QWORD *)v12 + 2) = v15 + 1;
      *((_BYTE *)v12 + v15 + 32) = v16;
    }
    --v11;
  }
  while (v11);
  v82 = 0xD000000000000011;
  v83 = 0x8000000100FEFA40;
  if (*((_QWORD *)v12 + 2))
  {
    swift_retain(v12);
    v77 = "command_history_items";
    v76 = "Clearing sync metadata.";
    v75 = "Removing data for table: %@";
    v74 = "bucket with error %@";
    v21 = *((unsigned __int8 *)v12 + 32);
    v86[0] = 0;
    v86[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease(v86[1]);
    strcpy((char *)v86, "SELECT 1 FROM ");
    HIBYTE(v86[1]) = -18;
    __asm { BR              X8 }
  }
  swift_release(v12);
  v22._countAndFlagsBits = 41;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  v23 = *(_QWORD *)(v72 + OBJC_IVAR____TtC8Freeform17CRLBoardDataStore_database);
  v24 = v82;
  v25 = v83;
  v26 = type metadata accessor for SQLiteStatement();
  swift_initStackObject(v26, v87);
  swift_retain(v23);
  v27 = v73;
  v29 = sub_1006B77CC(v28, v24, v25);
  v2 = v27;
  if (!v27)
  {
    v43 = v29;
    v44 = swift_release(v23);
    v45 = *(void **)(*(_QWORD *)(v43 + 16) + 32);
    v46 = v67;
    *v67 = v45;
    v47 = v68;
    v70(v46, v69, v68, v44);
    v48 = v45;
    v49 = _dispatchPreconditionTest(_:)(v46);
    v71(v46, v47);
    if ((v49 & 1) != 0)
    {
      v50 = type metadata accessor for SQLiteRowIterator();
      inited = (_QWORD *)swift_initStackObject(v50, v84);
      inited[4] = 0;
      inited[5] = 1;
      inited[2] = v43;
      inited[3] = 0;
      swift_retain(v43);
      sub_1006B6B04();
      if (v52)
      {
        v53 = v52;
        v54 = sub_1006B45D4(0, v52);
        v56 = v55;
        swift_release(v43);
        swift_release(v53);
        swift_setDeallocating(inited);
        sub_1006B7DA4(inited[3], inited[4], inited[5]);
        if ((v56 & 1) == 0)
        {
          v57 = *(void **)(*(_QWORD *)(v43 + 16) + 32);
          *v46 = v57;
          ((void (*)(_QWORD *, _QWORD, uint64_t))v70)(v46, v69, v47);
          v58 = v57;
          v59 = _dispatchPreconditionTest(_:)(v46);
          v71(v46, v47);
          if ((v59 & 1) != 0)
          {
            LOBYTE(v36) = v54 > 0;
            v60 = (_QWORD *)(v43 + 24);
            swift_beginAccess(v43 + 24, v86, 1, 0);
            v61 = *(sqlite3_stmt **)(v43 + 24);
            if (!v61)
              goto LABEL_28;
            goto LABEL_27;
          }
LABEL_34:
          __break(1u);
        }
      }
      else
      {
        swift_release(v43);
        swift_setDeallocating(inited);
        sub_1006B7DA4(inited[3], inited[4], inited[5]);
      }
      v62 = *(void **)(*(_QWORD *)(v43 + 16) + 32);
      *v46 = v62;
      ((void (*)(_QWORD *, _QWORD, uint64_t))v70)(v46, v69, v47);
      v63 = v62;
      v64 = _dispatchPreconditionTest(_:)(v46);
      v71(v46, v47);
      if ((v64 & 1) != 0)
      {
        v60 = (_QWORD *)(v43 + 24);
        swift_beginAccess(v43 + 24, v86, 1, 0);
        LOBYTE(v36) = 0;
        v61 = *(sqlite3_stmt **)(v43 + 24);
        if (!v61)
        {
LABEL_28:
          swift_release(v43);
          return v36 & 1;
        }
LABEL_27:
        sqlite3_finalize(v61);
        *v60 = 0;
        goto LABEL_28;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_34;
  }
  swift_release(v23);
  if (qword_1013DD858 != -1)
LABEL_31:
    swift_once(&qword_1013DD858, sub_100A05554);
  swift_beginAccess(&static OS_os_log.boardStore, v86, 0, 0);
  v30 = (void *)static OS_os_log.boardStore;
  v31 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  v32 = swift_initStackObject(v31, v85);
  *(_OWORD *)(v32 + 16) = xmmword_100EF5E40;
  swift_getErrorValue(v2, v81, v78);
  v33 = v79;
  v34 = v80;
  v35 = v30;
  v36 = Error.localizedDescription.getter(v33, v34);
  v38 = v37;
  *(_QWORD *)(v32 + 56) = &type metadata for String;
  v39 = sub_1004CFC2C();
  *(_QWORD *)(v32 + 64) = v39;
  *(_QWORD *)(v32 + 32) = v36;
  *(_QWORD *)(v32 + 40) = v38;
  v40 = static os_log_type_t.error.getter(v39);
  sub_100A06EBC((uint64_t)v35, &_mh_execute_header, v40, "Failed to check if database has data with error: %@", 51, 2, v32);
  swift_setDeallocating(v32);
  v41 = sub_1004B804C(&qword_1013E0190);
  swift_arrayDestroy(v32 + 32, 1, v41);

  swift_willThrow(v42);
  return v36 & 1;
}

unint64_t sub_100AD5324()
{
  uint64_t v0;
  unint64_t result;
  unint64_t v2;
  unint64_t *v3;

  result = sub_1001E9730();
  v2 = result;
  v3 = (unint64_t *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 128));
  if (result >= *v3)
  {
    *v3 = 0x1000000000000;
    if (result >= v3[2])
      v3[2] = 0x2000400000000;
    if (result >= v3[4])
    {
      result = sub_100AD53D4();
      v3[4] = result;
    }
  }
  if (v2 >= v3[1])
  {
    v3[1] = 0x1000000000000;
    if (v2 >= v3[3])
      v3[3] = 0x2000400000000;
  }
  return result;
}

unint64_t sub_100AD53D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t inited;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[72];
  _BYTE v12[72];
  _BYTE v13[80];

  v1 = sub_1004B804C((uint64_t *)&unk_1013E0180);
  inited = swift_initStackObject(v1, v13);
  *(_OWORD *)(inited + 16) = xmmword_100EF5E40;
  v3 = (unint64_t *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 128));
  v4 = *v3;
  *(_QWORD *)(inited + 56) = &type metadata for UInt64;
  *(_QWORD *)(inited + 64) = &protocol witness table for UInt64;
  *(_QWORD *)(inited + 32) = v4;
  if (sub_1001E9730() < v4)
  {
    sub_100757E04(&_mh_execute_header, (uint64_t)"computedMinRequiredVersionForFullFidelity", 41, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLCRDTMap.swift", 81, 2, 396, "Call to computedMinRequiredVersionForFullFidelity while current minRequiredVersionForBucket is higher than current: %{public}d", 126, 2u, inited);
    sub_1004F5394(inited, (uint64_t)"computedMinRequiredVersionForFullFidelity", 41, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLCRDTMap.swift", 81, 2u, 396, (uint64_t)"Call to computedMinRequiredVersionForFullFidelity while current minRequiredVersionForBucket is higher than current: %{public}d", 126, 2u);
  }
  swift_bridgeObjectRelease(inited);
  v5 = swift_initStackObject(v1, v12);
  *(_OWORD *)(v5 + 16) = xmmword_100EF5E40;
  v6 = v3[4];
  *(_QWORD *)(v5 + 56) = &type metadata for UInt64;
  *(_QWORD *)(v5 + 64) = &protocol witness table for UInt64;
  *(_QWORD *)(v5 + 32) = v6;
  if (sub_1001E9730() < v6)
  {
    sub_100757E04(&_mh_execute_header, (uint64_t)"computedMinRequiredVersionForFullFidelity", 41, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLCRDTMap.swift", 81, 2, 397, "Call to computedMinRequiredVersionForFullFidelity while current minRequiredVersionForFullFidelity is higher than current: %{public}d", 132, 2u, v5);
    sub_1004F5394(v5, (uint64_t)"computedMinRequiredVersionForFullFidelity", 41, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLCRDTMap.swift", 81, 2u, 397, (uint64_t)"Call to computedMinRequiredVersionForFullFidelity while current minRequiredVersionForFullFidelity is higher than current: %{public}d", 132, 2u);
  }
  swift_bridgeObjectRelease(v5);
  v7 = v3[4];
  if ((v3[2] != 0x2000400000000 || v3[3] != 0x2000400000000) && v7 < 0x2000400000000)
    v7 = 0x2000400000000;
  v8 = swift_initStackObject(v1, v11);
  v9 = v8;
  *(_OWORD *)(v8 + 16) = xmmword_100EF5E40;
  *(_QWORD *)(v8 + 56) = &type metadata for UInt64;
  *(_QWORD *)(v8 + 64) = &protocol witness table for UInt64;
  *(_QWORD *)(v8 + 32) = v7;
  if (v7 < v3[4])
  {
    sub_100757E04(&_mh_execute_header, (uint64_t)"computedMinRequiredVersionForFullFidelity", 41, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLCRDTMap.swift", 81, 2, 406, "Call to board computedMinRequiredVersionForFullFidelity resulted in decremented version: %{public}d", 99, 2u, v8);
    sub_1004F5394(v9, (uint64_t)"computedMinRequiredVersionForFullFidelity", 41, 2u, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Freeform/Source/BoardItems/CRLCRDTMap.swift", 81, 2u, 406, (uint64_t)"Call to board computedMinRequiredVersionForFullFidelity resulted in decremented version: %{public}d", 99, 2u);
  }
  swift_bridgeObjectRelease(v9);
  return v7;
}

uint64_t sub_100AD569C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  char v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  __n128 v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_1004B7878((unint64_t *)&qword_1013DE630, v12, (uint64_t)&protocol conformance descriptor for UUID);
  swift_bridgeObjectRetain(v10);
  v36 = a2;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  v17 = v10;
  v18 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v32 = v3;
    v33 = a1;
    v34 = ~v15;
    v35 = v7;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v21 = v17;
      v22 = v20;
      v20(v9, *(_QWORD *)(v17 + 48) + v19 * v16, v6);
      sub_1004B7878((unint64_t *)&qword_1013E4880, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v23 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v36);
      v24 = *(void (**)(char *, uint64_t))(v35 + 8);
      v24(v9, v6);
      if ((v23 & 1) != 0)
        break;
      v16 = (v16 + 1) & v34;
      v17 = v21;
      v20 = v22;
      if (((*(_QWORD *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v21);
        v3 = v32;
        a1 = v33;
        v25 = v35;
        goto LABEL_7;
      }
    }
    v31 = swift_bridgeObjectRelease(v21);
    ((void (*)(uint64_t, uint64_t, __n128))v24)(v36, v6, v31);
    v22(v33, *(_QWORD *)(*v32 + 48) + v19 * v16, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v25 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v27 = v36;
    v20(v9, v36, v6);
    v37 = *v3;
    *v3 = 0x8000000000000000;
    sub_100AE3AA4((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    v28 = *v3;
    *v3 = v37;
    v29 = swift_bridgeObjectRelease(v28);
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v25 + 32))(a1, v27, v6, v29);
    return 1;
  }
}

uint64_t sub_100AD58F8(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t ObjectType;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, __n128);
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  Swift::Int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, __n128);
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t *v40;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v42;
  uint64_t v43;
  Swift::Int v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t);
  uint64_t v55;
  _QWORD v56[9];
  uint64_t v57;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v50 - v11;
  v13 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v13 < 0)
      v14 = *v2;
    else
      v14 = v13 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v2);
    v15 = swift_retain(a2);
    v16 = __CocoaSet.member(for:)(v15);
    swift_release(a2);
    if (v16)
    {
      swift_bridgeObjectRelease(v13);
      swift_release(a2);
      v57 = v16;
      v17 = type metadata accessor for CRLTransactableHashableWrapper();
      swift_unknownObjectRetain(v16);
      swift_dynamicCast(v56, &v57, (char *)&type metadata for Swift.AnyObject + 8, v17, 7);
      *a1 = v56[0];
      swift_unknownObjectRelease(v16);
      return 0;
    }
    result = __CocoaSet.count.getter(v14);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v44 = sub_100ADBE80(v14, result + 1);
    v56[0] = v44;
    v45 = *(_QWORD *)(v44 + 16);
    if (*(_QWORD *)(v44 + 24) <= v45)
    {
      v48 = v45 + 1;
      swift_retain(a2);
      sub_100ADCB34(v48);
      v46 = v56[0];
    }
    else
    {
      v46 = v44;
      swift_retain(a2);
    }
    sub_100AE344C(a2, v46);
    v49 = *v3;
    *v3 = v46;
    swift_bridgeObjectRelease(v49);
    *a1 = a2;
    return 1;
  }
  v50 = v2;
  v51 = a1;
  Hasher.init(_seed:)(v56, *(_QWORD *)(v13 + 40));
  v19 = *(_QWORD *)(a2 + 24);
  ObjectType = swift_getObjectType(*(_QWORD *)(a2 + 16));
  v55 = v13;
  v21 = ObjectType;
  v22 = *(void (**)(uint64_t, uint64_t, __n128))(v19 + 32);
  v23 = swift_bridgeObjectRetain(v55);
  v24 = v55;
  v22(v21, v19, v23);
  v25 = sub_1004B7878((unint64_t *)&qword_1013DE630, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v56, v6, v25);
  v54 = *(void (**)(char *, uint64_t))(v7 + 8);
  v54(v12, v6);
  v26 = Hasher._finalize()();
  v27 = -1 << *(_BYTE *)(v24 + 32);
  v28 = v26 & ~v27;
  v53 = v24 + 56;
  if (((*(_QWORD *)(v24 + 56 + ((v28 >> 3) & 0xFFFFFFFFFFFFF8)) >> v28) & 1) == 0)
  {
LABEL_11:
    swift_bridgeObjectRelease(v24);
    v40 = v50;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v50);
    v56[0] = *v40;
    *v40 = 0x8000000000000000;
    swift_retain(a2);
    sub_100AE3CF8(v42, v28, isUniquelyReferenced_nonNull_native);
    v43 = *v40;
    *v40 = v56[0];
    swift_bridgeObjectRelease(v43);
    *v51 = a2;
    return 1;
  }
  v52 = ~v27;
  while (1)
  {
    v29 = *(_QWORD *)(*(_QWORD *)(v24 + 48) + 8 * v28);
    v30 = *(_QWORD *)(v29 + 24);
    v31 = v6;
    v32 = a2;
    v33 = swift_getObjectType(*(_QWORD *)(v29 + 16));
    v34 = *(void (**)(uint64_t, uint64_t, __n128))(v30 + 32);
    v35 = swift_retain(v29);
    v36 = v33;
    a2 = v32;
    v6 = v31;
    v34(v36, v30, v35);
    v37 = *(_QWORD *)(a2 + 24);
    v38 = swift_getObjectType(*(_QWORD *)(a2 + 16));
    (*(void (**)(uint64_t, uint64_t))(v37 + 32))(v38, v37);
    LOBYTE(v37) = static UUID.== infix(_:_:)(v12);
    v39 = v54;
    v54(v10, v31);
    v39(v12, v31);
    swift_release(v29);
    if ((v37 & 1) != 0)
      break;
    v28 = (v28 + 1) & v52;
    v24 = v55;
    if (((*(_QWORD *)(v53 + ((v28 >> 3) & 0xFFFFFFFFFFFFF8)) >> v28) & 1) == 0)
      goto LABEL_11;
  }
  swift_release(a2);
  swift_bridgeObjectRelease(v55);
  v47 = *(_QWORD *)(*(_QWORD *)(*v50 + 48) + 8 * v28);
  *v51 = v47;
  swift_retain(v47);
  return 0;
}

uint64_t sub_100AD5CC4(uint64_t a1, Swift::UInt a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  int v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  _QWORD v19[9];

  v4 = v3;
  v8 = a3 & 1;
  v9 = *v4;
  Hasher.init(_seed:)(v19, *(_QWORD *)(*v4 + 40));
  if ((a3 & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(a2);
  }
  v10 = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(v9 + 32);
  v12 = v10 & ~v11;
  if (((*(_QWORD *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
  {
LABEL_12:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v19[0] = *v4;
    *v4 = 0x8000000000000000;
    sub_100AE3F94(a2, v8, v12, isUniquelyReferenced_nonNull_native);
    v18 = *v4;
    *v4 = v19[0];
    swift_bridgeObjectRelease(v18);
    result = 1;
    goto LABEL_13;
  }
  v13 = ~v11;
  while (1)
  {
    v14 = *(_QWORD *)(v9 + 48) + 16 * v12;
    if ((*(_BYTE *)(v14 + 8) & 1) == 0)
      break;
    if (v8)
      goto LABEL_11;
LABEL_7:
    v12 = (v12 + 1) & v13;
    if (((*(_QWORD *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      goto LABEL_12;
  }
  if (v8 || *(_QWORD *)v14 != a2)
    goto LABEL_7;
LABEL_11:
  result = 0;
  v16 = *(_QWORD *)(*v4 + 48) + 16 * v12;
  a2 = *(_QWORD *)v16;
  LOBYTE(v8) = *(_BYTE *)(v16 + 8);
LABEL_13:
  *(_QWORD *)a1 = a2;
  *(_BYTE *)(a1 + 8) = v8;
  return result;
}

uint64_t sub_100AD5E30(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  _QWORD *v3;
  _QWORD *v4;
  unsigned __int8 v5;
  int v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t result;
  uint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;

  v4 = v3;
  v5 = a3;
  v8 = ~a3;
  v9 = *v4;
  Hasher.init(_seed:)(&v24, *(_QWORD *)(*v4 + 40));
  if (v8)
  {
    Hasher._combine(_:)(1u);
    v22 = a2;
    v23 = v5 & 1;
    swift_bridgeObjectRetain(v9);
    v10 = sub_1004B804C(&qword_1013E8708);
    CRExtensible.hash(into:)(&v24, v10);
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain(v9);
  }
  v11 = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(v9 + 32);
  v13 = v11 & ~v12;
  if (((*(_QWORD *)(v9 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
  {
LABEL_12:
    swift_bridgeObjectRelease(v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v24 = *v4;
    *v4 = 0x8000000000000000;
    sub_100AE411C(a2, v5, v13, isUniquelyReferenced_nonNull_native);
    v21 = *v4;
    *v4 = v24;
    swift_bridgeObjectRelease(v21);
    result = 1;
    goto LABEL_13;
  }
  v14 = ~v12;
  while (1)
  {
    v15 = *(_QWORD *)(v9 + 48) + 16 * v13;
    v16 = *(unsigned __int8 *)(v15 + 8);
    if (v16 != 255)
      break;
    if (v5 == 0xFF)
      goto LABEL_11;
LABEL_7:
    v13 = (v13 + 1) & v14;
    if (((*(_QWORD *)(v9 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      goto LABEL_12;
  }
  if (v5 == 0xFF)
    goto LABEL_7;
  v24 = *(_QWORD *)v15;
  v25 = v16 & 1;
  v22 = a2;
  v23 = v5 & 1;
  v17 = sub_10062E1B0();
  if ((static CRExtensible.== infix(_:_:)(&v24, &v22, &type metadata for CRLWPListStyleType, v17, &protocol witness table for Int, &protocol witness table for Int) & 1) == 0)goto LABEL_7;
LABEL_11:
  swift_bridgeObjectRelease(v9);
  result = 0;
  v19 = *(_QWORD *)(*v4 + 48) + 16 * v13;
  a2 = *(_QWORD *)v19;
  v5 = *(_BYTE *)(v19 + 8);
LABEL_13:
  *(_QWORD *)a1 = a2;
  *(_BYTE *)(a1 + 8) = v5;
  return result;
}

uint64_t sub_100AD603C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  _QWORD *v3;
  _QWORD *v4;
  unsigned __int8 v5;
  int v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;

  v4 = v3;
  v5 = a3;
  v8 = ~a3;
  v9 = *v4;
  Hasher.init(_seed:)(&v27, *(_QWORD *)(*v4 + 40));
  v24 = a1;
  if (v8)
  {
    Hasher._combine(_:)(1u);
    v25 = a2;
    v26 = v5 & 1;
    swift_bridgeObjectRetain(v9);
    v10 = sub_1004B804C(&qword_1013E8758);
    CRExtensible.hash(into:)(&v27, v10);
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain(v9);
  }
  v11 = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(v9 + 32);
  v13 = v11 & ~v12;
  if (((*(_QWORD *)(v9 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
  {
LABEL_12:
    swift_bridgeObjectRelease(v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v27 = *v4;
    *v4 = 0x8000000000000000;
    sub_100AE4358(a2, v5, v13, isUniquelyReferenced_nonNull_native);
    v23 = *v4;
    *v4 = v27;
    swift_bridgeObjectRelease(v23);
    result = 1;
    goto LABEL_13;
  }
  v14 = ~v12;
  while (1)
  {
    v15 = *(_QWORD *)(v9 + 48) + 16 * v13;
    v16 = *(unsigned __int8 *)(v15 + 8);
    if (v16 != 255)
      break;
    if (v5 == 0xFF)
      goto LABEL_11;
LABEL_7:
    v13 = (v13 + 1) & v14;
    if (((*(_QWORD *)(v9 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      goto LABEL_12;
  }
  if (v5 == 0xFF)
    goto LABEL_7;
  v27 = *(_QWORD *)v15;
  v28 = v16 & 1;
  v25 = a2;
  v26 = v5 & 1;
  type metadata accessor for CRLWPWritingDirection(0);
  v18 = v17;
  v19 = sub_1004B7878((unint64_t *)&unk_1013E8760, (uint64_t (*)(uint64_t))type metadata accessor for CRLWPWritingDirection, (uint64_t)&unk_100EF1304);
  if ((static CRExtensible.== infix(_:_:)(&v27, &v25, v18, v19, &protocol witness table for Int, &protocol witness table for Int) & 1) == 0)goto LABEL_7;
LABEL_11:
  swift_bridgeObjectRelease(v9);
  result = 0;
  v21 = *(_QWORD *)(*v4 + 48) + 16 * v13;
  a2 = *(_QWORD *)v21;
  v5 = *(_BYTE *)(v21 + 8);
LABEL_13:
  *(_QWORD *)v24 = a2;
  *(_BYTE *)(v24 + 8) = v5;
  return result;
}

uint64_t sub_100AD6264(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  _QWORD *v3;
  _QWORD *v4;
  unsigned __int8 v5;
  int v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;

  v4 = v3;
  v5 = a3;
  v8 = ~a3;
  v9 = *v4;
  Hasher.init(_seed:)(&v27, *(_QWORD *)(*v4 + 40));
  v24 = a1;
  if (v8)
  {
    Hasher._combine(_:)(1u);
    v25 = a2;
    v26 = v5 & 1;
    swift_bridgeObjectRetain(v9);
    v10 = sub_1004B804C(&qword_1013F3B10);
    CRExtensible.hash(into:)(&v27, v10);
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain(v9);
  }
  v11 = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(v9 + 32);
  v13 = v11 & ~v12;
  if (((*(_QWORD *)(v9 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
  {
LABEL_12:
    swift_bridgeObjectRelease(v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v27 = *v4;
    *v4 = 0x8000000000000000;
    sub_100AE45B0(a2, v5, v13, isUniquelyReferenced_nonNull_native);
    v23 = *v4;
    *v4 = v27;
    swift_bridgeObjectRelease(v23);
    result = 1;
    goto LABEL_13;
  }
  v14 = ~v12;
  while (1)
  {
    v15 = *(_QWORD *)(v9 + 48) + 16 * v13;
    v16 = *(unsigned __int8 *)(v15 + 8);
    if (v16 != 255)
      break;
    if (v5 == 0xFF)
      goto LABEL_11;
LABEL_7:
    v13 = (v13 + 1) & v14;
    if (((*(_QWORD *)(v9 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      goto LABEL_12;
  }
  if (v5 == 0xFF)
    goto LABEL_7;
  v27 = *(_QWORD *)v15;
  v28 = v16 & 1;
  v25 = a2;
  v26 = v5 & 1;
  type metadata accessor for CRLWPParagraphAlignment(0);
  v18 = v17;
  v19 = sub_1004B7878((unint64_t *)&unk_1013E8720, (uint64_t (*)(uint64_t))type metadata accessor for CRLWPParagraphAlignment, (uint64_t)&unk_100EF20D4);
  if ((static CRExtensible.== infix(_:_:)(&v27, &v25, v18, v19, &protocol witness table for Int, &protocol witness table for Int) & 1) == 0)goto LABEL_7;
LABEL_11:
  swift_bridgeObjectRelease(v9);
  result = 0;
  v21 = *(_QWORD *)(*v4 + 48) + 16 * v13;
  a2 = *(_QWORD *)v21;
  v5 = *(_BYTE *)(v21 + 8);
LABEL_13:
  *(_QWORD *)v24 = a2;
  *(_BYTE *)(v24 + 8) = v5;
  return result;
}

uint64_t sub_100AD648C(uint64_t *a1, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::Int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v38;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  float v55;
  uint64_t *v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  char v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD v118[14];
  char v119[96];
  uint64_t v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  char v124[96];
  uint64_t v125;
  int v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;

  sub_1004C4938((uint64_t)a2, (uint64_t)v118, &qword_1013F3148);
  v74 = v118[0];
  v4 = v118[1];
  v5 = v118[2];
  v6 = v118[3];
  v7 = v118[4];
  v8 = v118[6];
  v65 = v118[7];
  v66 = v118[5];
  v9 = v118[9];
  v63 = v118[10];
  v64 = v118[8];
  v10 = v118[11];
  v62 = v118[12];
  v58 = v118[13];
  v56 = v2;
  v11 = *v2;
  Hasher.init(_seed:)(&v90, *(_QWORD *)(*v2 + 40));
  sub_1004C4938((uint64_t)a2, (uint64_t)v124, &qword_1013F3148);
  v68 = v8;
  v69 = v5;
  v73 = v4;
  v60 = v9;
  v61 = v6;
  v67 = v7;
  v59 = v10;
  if (v125)
  {
    Hasher._combine(_:)(1u);
    v126 = v5;
    v127 = BYTE4(v5) & 1;
    v128 = v6;
    v129 = v7;
    v12 = v66;
    v130 = v66;
    v131 = v8;
    v13 = *(float *)&v63;
    v14 = v64;
    v132 = v65;
    v133 = v64;
    v134 = v9;
    v135 = v63;
    v136 = v10;
    v137 = v62;
    v121 = v74;
    v122 = v4 & 1;
    swift_bridgeObjectRetain(v11);
    sub_1007ECB8C(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004C485C);
    v15 = sub_1004B804C(&qword_1013F3EB8);
    CRExtensible.hash(into:)(&v90, v15);
    sub_1006C4BDC();
    sub_1007ECB8C(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004C4174);
    v16 = v65;
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain(v11);
    v14 = v64;
    v16 = v65;
    v13 = *(float *)&v63;
    v12 = v66;
  }
  v77 = a2;
  v17 = Hasher._finalize()();
  v18 = -1 << *(_BYTE *)(v11 + 32);
  v19 = v17 & ~v18;
  v72 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) == 0)
  {
LABEL_55:
    swift_bridgeObjectRelease(v11);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v56);
    v90 = *v56;
    *v56 = 0x8000000000000000;
    sub_1007ECB8C(v77, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004C485C);
    sub_100AE4808(v77, v19, isUniquelyReferenced_nonNull_native);
    v38 = *v56;
    *v56 = v90;
    swift_bridgeObjectRelease(v38);
    sub_1004C4938((uint64_t)v77, (uint64_t)a1, &qword_1013F3148);
    return 1;
  }
  v70 = ~v18;
  v71 = v11;
  v20 = v12;
  v21 = *(float *)&v16;
  v22 = v14;
  v23 = *((float *)&v16 + 1);
  v55 = v13;
  while (1)
  {
    v24 = (uint64_t *)(*(_QWORD *)(v11 + 48) + 112 * v19);
    v25 = *v24;
    v26 = v24[1];
    v27 = v24[2];
    v28 = v24[3];
    v30 = v24[4];
    v29 = v24[5];
    v31 = v24[6];
    v32 = v24[10];
    v79 = v24[7];
    v80 = v24[9];
    v86 = v24[11];
    v87 = v24[8];
    v84 = v24[12];
    v85 = v24[13];
    v78 = v31;
    if (!v84)
      break;
    v33 = v77;
    sub_1004C4938((uint64_t)v77, (uint64_t)v119, &qword_1013F3148);
    if (!v120)
      goto LABEL_16;
    v90 = v25;
    LOBYTE(v91) = v26 & 1;
    v88 = v74;
    v89 = v73 & 1;
    sub_1007ECB8C(v77, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004C485C);
    sub_1004C485C(v25, v26, v27, v28, v30, v29, v31, v79, v87, v80, v32, v86, v84, v85);
    v34 = sub_1007C8324();
    if ((static CRExtensible.== infix(_:_:)(&v90, &v88, &type metadata for CRLFillData.FillType, v34, &protocol witness table for Int, &protocol witness table for Int) & 1) != 0)
    {
      if ((v27 & 0x100000000) != 0)
      {
        v35 = v68;
        if ((v69 & 0x100000000) == 0)
          goto LABEL_18;
      }
      else
      {
        if ((v69 & 0x100000000) != 0)
          goto LABEL_18;
        v35 = v68;
        if (*(float *)&v27 != *(float *)&v69)
          goto LABEL_18;
      }
      v36 = v80;
      if (v78)
      {
        if (!v35)
          goto LABEL_28;
        v90 = v28;
        LOBYTE(v91) = v30 & 1;
        v88 = v61;
        v89 = v67 & 1;
        v75 = sub_1006C5C14();
        swift_bridgeObjectRetain(v78);
        swift_bridgeObjectRetain(v35);
        if ((static CRExtensible.== infix(_:_:)(&v90, &v88, &type metadata for CRLColorModelRGBData.ColorSpace, v75, &protocol witness table for Int, &protocol witness table for Int) & 1) == 0|| *((float *)&v30 + 1) != *((float *)&v67 + 1))
        {
          swift_bridgeObjectRelease(v78);
          swift_bridgeObjectRelease(v35);
          sub_1007ECB8C(v77, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004C4174);
          sub_1004C4174(v25, v26, v27, v28, v30, v29, v78, v79, v87, v80, v32, v86, v84, v85);
          goto LABEL_29;
        }
        if (*(float *)&v29 != *(float *)&v20)
        {
          swift_bridgeObjectRelease(v78);
          swift_bridgeObjectRelease(v35);
LABEL_18:
          sub_1007ECB8C(v77, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004C4174);
          sub_1004C4174(v25, v26, v27, v28, v30, v29, v78, v79, v87, v80, v32, v86, v84, v85);
LABEL_29:
          v11 = v71;
          goto LABEL_7;
        }
        v36 = v80;
        if (*((float *)&v29 + 1) != *((float *)&v20 + 1))
        {
          swift_bridgeObjectRelease(v78);
          swift_bridgeObjectRelease(v35);
LABEL_28:
          sub_1007ECB8C(v77, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004C4174);
          sub_1004C4174(v25, v26, v27, v28, v30, v29, v78, v79, v87, v36, v32, v86, v84, v85);
          goto LABEL_29;
        }
        v76 = sub_100C9E04C(v78, v35);
        swift_bridgeObjectRelease(v78);
        swift_bridgeObjectRelease(v35);
        if ((v76 & 1) == 0)
          goto LABEL_28;
      }
      else if (v35)
      {
        goto LABEL_28;
      }
      if (v36)
      {
        if (!v60)
          goto LABEL_28;
        if (*(float *)&v79 != v21)
          goto LABEL_28;
        if (*((float *)&v79 + 1) != v23)
          goto LABEL_28;
        if (*(float *)&v87 != *(float *)&v22)
          goto LABEL_28;
        if (*((float *)&v87 + 1) != *((float *)&v22 + 1))
          goto LABEL_28;
        swift_bridgeObjectRetain(v36);
        swift_bridgeObjectRetain(v60);
        v81 = sub_100C9E04C(v36, v60);
        swift_bridgeObjectRelease(v36);
        swift_bridgeObjectRelease(v60);
        if ((v81 & 1) == 0)
          goto LABEL_28;
      }
      else if (v60)
      {
        goto LABEL_28;
      }
      if (v86)
      {
        if (!v59)
          goto LABEL_28;
        if (*(float *)&v32 != v55)
          goto LABEL_28;
        swift_bridgeObjectRetain(v59);
        swift_bridgeObjectRetain(v86);
        v82 = sub_100C9E04C(v86, v59);
        swift_bridgeObjectRelease(v86);
        swift_bridgeObjectRelease(v59);
        if ((v82 & 1) == 0)
          goto LABEL_28;
      }
      else if (v59)
      {
        sub_1007ECB8C(v77, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004C4174);
        sub_1004C4174(v25, v26, v27, v28, v30, v29, v78, v79, v87, v36, v32, 0, v84, v85);
        goto LABEL_29;
      }
      if ((sub_100C9E04C(v84, v62) & 1) == 0)
        goto LABEL_28;
      v83 = sub_100C9E04C(v85, v58);
      sub_1007ECB8C(v77, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004C4174);
      sub_1004C4174(v25, v26, v27, v28, v30, v29, v78, v79, v87, v36, v32, v86, v84, v85);
      v11 = v71;
      if ((v83 & 1) != 0)
      {
        swift_bridgeObjectRelease(v71);
        sub_1007ECB8C(v77, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004C4174);
        goto LABEL_57;
      }
    }
    else
    {
      sub_1007ECB8C(v77, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004C4174);
      sub_1004C4174(v25, v26, v27, v28, v30, v29, v31, v79, v87, v80, v32, v86, v84, v85);
      v11 = v71;
    }
LABEL_7:
    v19 = (v19 + 1) & v70;
    if (((*(_QWORD *)(v72 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) == 0)
      goto LABEL_55;
  }
  v33 = v77;
  sub_1004C4938((uint64_t)v77, (uint64_t)&v121, &qword_1013F3148);
  if (v123)
  {
LABEL_16:
    v90 = v25;
    v91 = v26;
    v92 = v27;
    v93 = v28;
    v94 = v30;
    v95 = v29;
    v96 = v31;
    v97 = v79;
    v98 = v87;
    v99 = v80;
    v100 = v32;
    v101 = v86;
    v102 = v84;
    v103 = v85;
    v104 = v74;
    v105 = v73;
    v106 = v69;
    v107 = v61;
    v108 = v67;
    v109 = v66;
    v110 = v68;
    v111 = v65;
    v112 = v64;
    v113 = v60;
    v114 = v63;
    v115 = v59;
    v116 = v62;
    v117 = v58;
    sub_1007ECB8C(v33, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004C485C);
    sub_1004C485C(v25, v26, v27, v28, v30, v29, v31, v79, v87, v80, v32, v86, v84, v85);
    sub_1007C825C((uint64_t)&v90);
    goto LABEL_29;
  }
  swift_bridgeObjectRelease(v71);
LABEL_57:
  v40 = (uint64_t *)(*(_QWORD *)(*v56 + 48) + 112 * v19);
  v41 = *v40;
  v42 = v40[1];
  v43 = v40[2];
  v44 = v40[3];
  v45 = v40[4];
  v46 = v40[5];
  v47 = v40[6];
  v48 = v40[7];
  v49 = v40[8];
  v50 = v40[9];
  v51 = v40[10];
  v52 = v40[11];
  v54 = v40[12];
  v53 = v40[13];
  *a1 = v41;
  a1[1] = v42;
  a1[2] = v43;
  a1[3] = v44;
  a1[4] = v45;
  a1[5] = v46;
  a1[6] = v47;
  a1[7] = v48;
  a1[8] = v49;
  a1[9] = v50;
  a1[10] = v51;
  a1[11] = v52;
  a1[12] = v54;
  a1[13] = v53;
  sub_1004C485C(v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v54, v53);
  return 0;
}

uint64_t sub_100AD6EA0(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  _QWORD *v3;
  _QWORD *v4;
  unsigned __int8 v5;
  int v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;

  v4 = v3;
  v5 = a3;
  v8 = ~a3;
  v9 = *v4;
  Hasher.init(_seed:)(&v27, *(_QWORD *)(*v4 + 40));
  v24 = a1;
  if (v8)
  {
    Hasher._combine(_:)(1u);
    v25 = a2;
    v26 = v5 & 1;
    swift_bridgeObjectRetain(v9);
    v10 = sub_1004B804C(&qword_1013F3800);
    CRExtensible.hash(into:)(&v27, v10);
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain(v9);
  }
  v11 = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(v9 + 32);
  v13 = v11 & ~v12;
  if (((*(_QWORD *)(v9 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
  {
LABEL_12:
    swift_bridgeObjectRelease(v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v27 = *v4;
    *v4 = 0x8000000000000000;
    sub_100AE51B4(a2, v5, v13, isUniquelyReferenced_nonNull_native);
    v23 = *v4;
    *v4 = v27;
    swift_bridgeObjectRelease(v23);
    result = 1;
    goto LABEL_13;
  }
  v14 = ~v12;
  while (1)
  {
    v15 = *(_QWORD *)(v9 + 48) + 16 * v13;
    v16 = *(unsigned __int8 *)(v15 + 8);
    if (v16 != 255)
      break;
    if (v5 == 0xFF)
      goto LABEL_11;
LABEL_7:
    v13 = (v13 + 1) & v14;
    if (((*(_QWORD *)(v9 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      goto LABEL_12;
  }
  if (v5 == 0xFF)
    goto LABEL_7;
  v27 = *(_QWORD *)v15;
  v28 = v16 & 1;
  v25 = a2;
  v26 = v5 & 1;
  type metadata accessor for CRLWPStrikethru(0);
  v18 = v17;
  v19 = sub_1004B7878(&qword_1013E8730, (uint64_t (*)(uint64_t))type metadata accessor for CRLWPStrikethru, (uint64_t)&unk_100EF1FB4);
  if ((static CRExtensible.== infix(_:_:)(&v27, &v25, v18, v19, &protocol witness table for Int, &protocol witness table for Int) & 1) == 0)goto LABEL_7;
LABEL_11:
  swift_bridgeObjectRelease(v9);
  result = 0;
  v21 = *(_QWORD *)(*v4 + 48) + 16 * v13;
  a2 = *(_QWORD *)v21;
  v5 = *(_BYTE *)(v21 + 8);
LABEL_13:
  *(_QWORD *)v24 = a2;
  *(_BYTE *)(v24 + 8) = v5;
  return result;
}

uint64_t sub_100AD70C8(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  _QWORD *v3;
  _QWORD *v4;
  unsigned __int8 v5;
  int v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;

  v4 = v3;
  v5 = a3;
  v8 = ~a3;
  v9 = *v4;
  Hasher.init(_seed:)(&v27, *(_QWORD *)(*v4 + 40));
  v24 = a1;
  if (v8)
  {
    Hasher._combine(_:)(1u);
    v25 = a2;
    v26 = v5 & 1;
    swift_bridgeObjectRetain(v9);
    v10 = sub_1004B804C(&qword_1013E8738);
    CRExtensible.hash(into:)(&v27, v10);
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain(v9);
  }
  v11 = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(v9 + 32);
  v13 = v11 & ~v12;
  if (((*(_QWORD *)(v9 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
  {
LABEL_12:
    swift_bridgeObjectRelease(v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v27 = *v4;
    *v4 = 0x8000000000000000;
    sub_100AE540C(a2, v5, v13, isUniquelyReferenced_nonNull_native);
    v23 = *v4;
    *v4 = v27;
    swift_bridgeObjectRelease(v23);
    result = 1;
    goto LABEL_13;
  }
  v14 = ~v12;
  while (1)
  {
    v15 = *(_QWORD *)(v9 + 48) + 16 * v13;
    v16 = *(unsigned __int8 *)(v15 + 8);
    if (v16 != 255)
      break;
    if (v5 == 0xFF)
      goto LABEL_11;
LABEL_7:
    v13 = (v13 + 1) & v14;
    if (((*(_QWORD *)(v9 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      goto LABEL_12;
  }
  if (v5 == 0xFF)
    goto LABEL_7;
  v27 = *(_QWORD *)v15;
  v28 = v16 & 1;
  v25 = a2;
  v26 = v5 & 1;
  type metadata accessor for CRLWPUnderline(0);
  v18 = v17;
  v19 = sub_1004B7878((unint64_t *)&unk_1013E8740, (uint64_t (*)(uint64_t))type metadata accessor for CRLWPUnderline, (uint64_t)&unk_100EF2074);
  if ((static CRExtensible.== infix(_:_:)(&v27, &v25, v18, v19, &protocol witness table for Int, &protocol witness table for Int) & 1) == 0)goto LABEL_7;
LABEL_11:
  swift_bridgeObjectRelease(v9);
  result = 0;
  v21 = *(_QWORD *)(*v4 + 48) + 16 * v13;
  a2 = *(_QWORD *)v21;
  v5 = *(_BYTE *)(v21 + 8);
LABEL_13:
  *(_QWORD *)v24 = a2;
  *(_BYTE *)(v24 + 8) = v5;
  return result;
}

uint64_t sub_100AD72F0(char *a1, unsigned __int8 a2)
{
  _QWORD *v2;
  _QWORD *v3;
  char v4;
  int v6;
  uint64_t v7;
  Swift::UInt8 v8;
  Swift::Int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  _QWORD v17[9];

  v3 = v2;
  v4 = a2;
  v6 = a2;
  v7 = *v3;
  Hasher.init(_seed:)(v17, *(_QWORD *)(*v3 + 40));
  if (v6 == 2)
  {
    v8 = 0;
  }
  else
  {
    v8 = v4 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v8);
  v9 = Hasher._finalize()();
  v10 = -1 << *(_BYTE *)(v7 + 32);
  v11 = v9 & ~v10;
  if (((*(_QWORD *)(v7 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
  {
LABEL_12:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v17[0] = *v3;
    *v3 = 0x8000000000000000;
    sub_100AE5664(v4, v11, isUniquelyReferenced_nonNull_native);
    v16 = *v3;
    *v3 = v17[0];
    swift_bridgeObjectRelease(v16);
    result = 1;
    goto LABEL_13;
  }
  v12 = ~v10;
  while (1)
  {
    v13 = *(unsigned __int8 *)(*(_QWORD *)(v7 + 48) + v11);
    if (v13 != 2)
      break;
    if (v4 == 2)
      goto LABEL_11;
LABEL_7:
    v11 = (v11 + 1) & v12;
    if (((*(_QWORD *)(v7 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
      goto LABEL_12;
  }
  if (v4 == 2 || ((((v4 & 1) == 0) ^ v13) & 1) == 0)
    goto LABEL_7;
LABEL_11:
  result = 0;
  v4 = *(_BYTE *)(*(_QWORD *)(*v3 + 48) + v11);
LABEL_13:
  *a1 = v4;
  return result;
}

uint64_t sub_100AD7450(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  Swift::UInt32 v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  _QWORD v18[9];

  v5 = *v2;
  Hasher.init(_seed:)(v18, *(_QWORD *)(*v2 + 40));
  if ((a2 & 0x100000000) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    if ((a2 & 0x7FFFFF) == 0 && (a2 & 0x7F800000) == 0)
      v7 = 0;
    else
      v7 = a2;
    Hasher._combine(_:)(v7);
  }
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v5 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v5 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
  {
LABEL_18:
    v15 = HIDWORD(a2) & 1;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v18[0] = *v2;
    *v2 = 0x8000000000000000;
    sub_100AE57F8(a2 | (unint64_t)(v15 << 32), v10, isUniquelyReferenced_nonNull_native);
    v17 = *v2;
    *v2 = v18[0];
    swift_bridgeObjectRelease(v17);
    result = 1;
    goto LABEL_19;
  }
  v11 = ~v9;
  while (1)
  {
    v12 = *(_QWORD *)(v5 + 48) + 8 * v10;
    if ((*(_BYTE *)(v12 + 4) & 1) == 0)
      break;
    if ((a2 & 0x100000000) != 0)
      goto LABEL_17;
LABEL_13:
    v10 = (v10 + 1) & v11;
    if (((*(_QWORD *)(v5 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
      goto LABEL_18;
  }
  if ((a2 & 0x100000000) != 0 || *(float *)v12 != *(float *)&a2)
    goto LABEL_13;
LABEL_17:
  result = 0;
  v14 = *(_QWORD *)(*v2 + 48) + 8 * v10;
  LODWORD(a2) = *(_DWORD *)v14;
  LOBYTE(v15) = *(_BYTE *)(v14 + 4);
LABEL_19:
  *(_DWORD *)a1 = a2;
  *(_BYTE *)(a1 + 4) = v15;
  return result;
}

uint64_t sub_100AD75C0(uint64_t a1, uint64_t a2, unint64_t a3, unsigned __int8 a4)
{
  _QWORD *v4;
  _QWORD *v5;
  int v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  __int128 v31;
  char v32;

  v5 = v4;
  v10 = ~a4;
  v11 = *v5;
  Hasher.init(_seed:)(&v31, *(_QWORD *)(*v5 + 40));
  v27 = a1;
  if (v10)
  {
    Hasher._combine(_:)(1u);
    v28 = a2;
    v29 = a3;
    v30 = a4 & 1;
    swift_bridgeObjectRetain(v11);
    v12 = sub_1004B804C(&qword_1013F3890);
    CRExtensible.hash(into:)(&v31, v12);
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain(v11);
  }
  v13 = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v11 + 32);
  v15 = v13 & ~v14;
  if (((*(_QWORD *)(v11 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
  {
LABEL_12:
    swift_bridgeObjectRelease(v11);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v5);
    *(_QWORD *)&v31 = *v5;
    *v5 = 0x8000000000000000;
    sub_1004C48FC(a2, a3, a4);
    sub_100AE598C(a2, a3, a4, v15, isUniquelyReferenced_nonNull_native);
    v21 = *v5;
    *v5 = v31;
    swift_bridgeObjectRelease(v21);
    *(_QWORD *)v27 = a2;
    *(_QWORD *)(v27 + 8) = a3;
    result = 1;
    *(_BYTE *)(v27 + 16) = a4;
    return result;
  }
  v16 = ~v14;
  while (1)
  {
    v17 = *(_QWORD *)(v11 + 48) + 24 * v15;
    v18 = *(unsigned __int8 *)(v17 + 16);
    if (v18 == 255)
      break;
    if (a4 != 0xFF)
    {
      v31 = *(_OWORD *)v17;
      v32 = v18 & 1;
      v28 = a2;
      v29 = a3;
      v30 = a4 & 1;
      v19 = sub_10062E1F4();
      if ((static CRExtensible.== infix(_:_:)(&v31, &v28, &type metadata for CRLWPFontName, v19, &protocol witness table for String, &protocol witness table for String) & 1) != 0)
      {
        swift_bridgeObjectRelease(v11);
        sub_1004C4218(a2, a3, a4);
        goto LABEL_14;
      }
    }
LABEL_7:
    v15 = (v15 + 1) & v16;
    if (((*(_QWORD *)(v11 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
      goto LABEL_12;
  }
  if (a4 != 0xFF)
    goto LABEL_7;
  swift_bridgeObjectRelease(v11);
LABEL_14:
  v23 = *(_QWORD *)(*v5 + 48) + 24 * v15;
  v24 = *(_QWORD *)v23;
  v25 = *(_QWORD *)(v23 + 8);
  *(_QWORD *)v27 = *(_QWORD *)v23;
  *(_QWORD *)(v27 + 8) = v25;
  v26 = *(_BYTE *)(v23 + 16);
  *(_BYTE *)(v27 + 16) = v26;
  sub_1004C48FC(v24, v25, v26);
  return 0;
}

uint64_t sub_100AD7814(Swift::Int *a1, void *a2)
{
  return sub_100ADBA5C(a1, a2, type metadata accessor for CRLBoardItem, &qword_1013DEA38);
}

uint64_t sub_100AD7828(Swift::Int *a1, void *a2)
{
  return sub_100ADA768(a1, a2, (unint64_t *)&qword_1013E56B0, off_101229828, (uint64_t *)&unk_1013DE800);
}

uint64_t sub_100AD7844(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  Swift::Int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char v39;
  uint64_t v40;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[9];

  v3 = v2;
  v6 = type metadata accessor for CRLBoardIdentifier(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v45 - v12;
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v45 - v15;
  __chkstk_darwin(v14);
  v47 = (char *)&v45 - v17;
  v18 = *v3;
  Hasher.init(_seed:)(v52, *(_QWORD *)(*v3 + 40));
  v19 = type metadata accessor for UUID(0);
  v20 = sub_1004B7878((unint64_t *)&qword_1013DE630, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  swift_bridgeObjectRetain(v18);
  dispatch thunk of Hashable.hash(into:)(v52, v19, v20);
  v48 = type metadata accessor for CRLBoardIdentifierStorage(0);
  v21 = *(int *)(v48 + 20);
  v51 = a2;
  v22 = (uint64_t *)(a2 + v21);
  v23 = *v22;
  v24 = v22[1];
  swift_bridgeObjectRetain(v24);
  String.hash(into:)(v52, v23, v24);
  swift_bridgeObjectRelease(v24);
  v25 = Hasher._finalize()();
  v26 = -1 << *(_BYTE *)(v18 + 32);
  v27 = v25 & ~v26;
  v28 = v18;
  v50 = v18 + 56;
  if (((*(_QWORD *)(v18 + 56 + ((v27 >> 3) & 0xFFFFFFFFFFFFF8)) >> v27) & 1) == 0)
  {
    swift_bridgeObjectRelease(v18);
LABEL_14:
    v40 = (uint64_t)v47;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v42 = v51;
    sub_1004B8460(v51, v40, type metadata accessor for CRLBoardIdentifier);
    v52[0] = *v3;
    *v3 = 0x8000000000000000;
    sub_100AE5ECC(v40, v27, isUniquelyReferenced_nonNull_native);
    v43 = *v3;
    *v3 = v52[0];
    swift_bridgeObjectRelease(v43);
    sub_1004B84E0(v42, a1, type metadata accessor for CRLBoardIdentifier);
    return 1;
  }
  v45 = v3;
  v46 = a1;
  v49 = ~v26;
  v29 = *(_QWORD *)(v7 + 72);
  v30 = v51;
  while (1)
  {
    v31 = v28;
    sub_1004B8460(*(_QWORD *)(v28 + 48) + v29 * v27, (uint64_t)v16, type metadata accessor for CRLBoardIdentifier);
    v32 = static UUID.== infix(_:_:)(v16);
    sub_1004B8460((uint64_t)v16, (uint64_t)v13, type metadata accessor for CRLBoardIdentifier);
    sub_1004B8460(v30, (uint64_t)v10, type metadata accessor for CRLBoardIdentifier);
    if ((v32 & 1) == 0)
    {
      sub_1004B84A4((uint64_t)v10, type metadata accessor for CRLBoardIdentifier);
      sub_1004B84A4((uint64_t)v13, type metadata accessor for CRLBoardIdentifier);
      sub_1004B84A4((uint64_t)v16, type metadata accessor for CRLBoardIdentifier);
      goto LABEL_4;
    }
    v33 = *(int *)(v48 + 20);
    v34 = *(_QWORD *)&v13[v33];
    v35 = *(_QWORD *)&v13[v33 + 8];
    v36 = &v10[v33];
    v37 = *((_QWORD *)v36 + 1);
    if (v34 == *(_QWORD *)v36 && v35 == v37)
      break;
    v39 = _stringCompareWithSmolCheck(_:_:expecting:)(v34, v35, *(_QWORD *)v36, v37, 0);
    sub_1004B84A4((uint64_t)v10, type metadata accessor for CRLBoardIdentifier);
    sub_1004B84A4((uint64_t)v13, type metadata accessor for CRLBoardIdentifier);
    sub_1004B84A4((uint64_t)v16, type metadata accessor for CRLBoardIdentifier);
    if ((v39 & 1) != 0)
      goto LABEL_16;
LABEL_4:
    v27 = (v27 + 1) & v49;
    v28 = v31;
    if (((*(_QWORD *)(v50 + ((v27 >> 3) & 0xFFFFFFFFFFFFF8)) >> v27) & 1) == 0)
    {
      swift_bridgeObjectRelease(v31);
      v3 = v45;
      a1 = v46;
      goto LABEL_14;
    }
  }
  sub_1004B84A4((uint64_t)v10, type metadata accessor for CRLBoardIdentifier);
  sub_1004B84A4((uint64_t)v13, type metadata accessor for CRLBoardIdentifier);
  sub_1004B84A4((uint64_t)v16, type metadata accessor for CRLBoardIdentifier);
LABEL_16:
  swift_bridgeObjectRelease(v31);
  sub_1004B84A4(v51, type metadata accessor for CRLBoardIdentifier);
  sub_1004B8460(*(_QWORD *)(*v45 + 48) + v29 * v27, v46, type metadata accessor for CRLBoardIdentifier);
  return 0;
}

uint64_t sub_100AD7BE8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v5;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  char v18;
  char v19;
  int v20;
  char v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  unsigned __int8 v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  uint64_t v34;
  char v35;
  char v36;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  unsigned __int8 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  char *v49;
  id v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  _QWORD v55[9];

  v47 = a1;
  v10 = *v5;
  Hasher.init(_seed:)(v55, *(_QWORD *)(*v5 + 40));
  swift_bridgeObjectRetain(v10);
  sub_1009E3D90((uint64_t)v55, (uint64_t)a2, a3, a4, a5);
  v11 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v10 + 32));
  v48 = v5;
  v54 = (id)a3;
  if (((*(_QWORD *)(v10 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
  {
    v51 = a2;
    HIDWORD(v53) = a5;
    goto LABEL_10;
  }
  v45 = -1 << *(_BYTE *)(v10 + 32);
  v12 = 32 * v11;
  v13 = *(_QWORD *)(v10 + 48) + 32 * v11;
  v14 = a4;
  v15 = *(id *)v13;
  v16 = *(void **)(v13 + 8);
  v17 = *(_QWORD *)(v13 + 16);
  v18 = *(_BYTE *)(v13 + 24);
  sub_1004DD884(*(id *)v13, v16, v17, v18);
  v19 = sub_1009E554C((uint64_t)v15, (uint64_t)v16, v17, v18, (uint64_t)a2, (uint64_t)v54, v14, a5, v45, v47, (uint64_t)v48, (id)(v10 + 56), v50, v52);
  v20 = a5;
  v21 = v19;
  v22 = v15;
  v23 = v14;
  v24 = v54;
  v25 = v17;
  v26 = v48;
  v27 = v18;
  v28 = v20;
  sub_1004DD8B8(v22, v16, v25, v27);
  if ((v21 & 1) == 0)
  {
    v51 = a2;
    v29 = v23;
    HIDWORD(v53) = v28;
    v30 = ~v46;
    v11 = (v11 + 1) & ~v46;
    if (((*(_QWORD *)&v49[(v11 >> 3) & 0xFFFFFFFFFFFFF8] >> v11) & 1) != 0)
    {
      a4 = v23;
      while (1)
      {
        v12 = 32 * v11;
        v31 = *(_QWORD *)(v10 + 48) + 32 * v11;
        v32 = *(id *)v31;
        v33 = *(void **)(v31 + 8);
        v34 = *(_QWORD *)(v31 + 16);
        v35 = *(_BYTE *)(v31 + 24);
        sub_1004DD884(*(id *)v31, v33, v34, v35);
        v36 = sub_1009E554C((uint64_t)v32, (uint64_t)v33, v34, v35, (uint64_t)v51, (uint64_t)v54, a4, SBYTE4(v53), v46, v47, (uint64_t)v48, v49, v51, v53);
        sub_1004DD8B8(v32, v33, v34, v35);
        if ((v36 & 1) != 0)
          break;
        v11 = (v11 + 1) & v30;
        a4 = v29;
        if (((*(_QWORD *)&v49[(v11 >> 3) & 0xFFFFFFFFFFFFF8] >> v11) & 1) == 0)
          goto LABEL_10;
      }
      LOBYTE(v28) = BYTE4(v53);
      v23 = v29;
      v26 = v48;
      v24 = v54;
      a2 = v51;
      goto LABEL_12;
    }
    a4 = v23;
LABEL_10:
    swift_bridgeObjectRelease(v10);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v48);
    v55[0] = *v48;
    *v48 = 0x8000000000000000;
    sub_1004DD884(v51, v54, a4, BYTE4(v53));
    sub_100AE621C((uint64_t)v51, (uint64_t)v54, a4, SHIDWORD(v53), v11, isUniquelyReferenced_nonNull_native);
    v38 = *v48;
    *v48 = v55[0];
    swift_bridgeObjectRelease(v38);
    *(_QWORD *)v47 = v51;
    *(_QWORD *)(v47 + 8) = v54;
    *(_QWORD *)(v47 + 16) = a4;
    result = 1;
    *(_BYTE *)(v47 + 24) = BYTE4(v53);
    return result;
  }
LABEL_12:
  swift_bridgeObjectRelease(v10);
  sub_1004DD8B8(a2, v24, v23, v28);
  v40 = *(_QWORD *)(*v26 + 48) + v12;
  v41 = *(void **)v40;
  v42 = *(void **)(v40 + 8);
  v43 = *(_QWORD *)(v40 + 16);
  *(_QWORD *)v47 = *(_QWORD *)v40;
  *(_QWORD *)(v47 + 8) = v42;
  *(_QWORD *)(v47 + 16) = v43;
  v44 = *(_BYTE *)(v40 + 24);
  *(_BYTE *)(v47 + 24) = v44;
  sub_1004DD884(v41, v42, v43, v44);
  return 0;
}

uint64_t sub_100AD7EFC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(_BYTE *, uint64_t, int *);
  int *v30;
  unsigned int v31;
  uint64_t *v32;
  _BYTE *v33;
  unsigned int v34;
  _BYTE *v35;
  char v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  int v46;
  _BYTE *v47;
  _BYTE *v48;
  void (*v49)(_BYTE *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v60;
  uint64_t v61;
  _BYTE v63[4];
  int v64;
  uint64_t v65;
  _BYTE *v66;
  _BYTE *v67;
  _QWORD *v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  _BYTE *v74;
  uint64_t v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int *v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  char v87;

  v71 = type metadata accessor for URL(0);
  v72 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71);
  v67 = &v63[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_1004B804C(&qword_1013E04D0);
  __chkstk_darwin(v6);
  v69 = &v63[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v70 = sub_1004B804C((uint64_t *)&unk_1013E87E0);
  __chkstk_darwin(v70);
  v73 = &v63[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for CRLWPHyperlinkSmartFieldData(0);
  v81 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v74 = &v63[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v80 = sub_1004B804C((uint64_t *)&unk_1013F3DB0);
  __chkstk_darwin(v80);
  v12 = &v63[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = sub_1004B804C((uint64_t *)&unk_1013E87D0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v76 = &v63[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = __chkstk_darwin(v15);
  v19 = &v63[-v18];
  __chkstk_darwin(v17);
  v66 = &v63[-v20];
  v68 = v2;
  v21 = *v2;
  Hasher.init(_seed:)(&v86, *(_QWORD *)(*v2 + 40));
  swift_bridgeObjectRetain(v21);
  v82 = a2;
  sub_100AF32F4((uint64_t)&v86);
  v22 = Hasher._finalize()();
  v23 = -1 << *(_BYTE *)(v21 + 32);
  v24 = v22 & ~v23;
  v25 = v21;
  v26 = v21 + 56;
  if (((*(_QWORD *)(v21 + 56 + ((v24 >> 3) & 0xFFFFFFFFFFFFF8)) >> v24) & 1) == 0)
  {
    swift_bridgeObjectRelease(v21);
    v57 = v68;
    v56 = a1;
LABEL_26:
    v58 = (uint64_t)v66;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v57);
    v60 = v82;
    sub_1004CB7BC(v82, v58, (uint64_t *)&unk_1013E87D0);
    v86 = *v57;
    *v57 = 0x8000000000000000;
    sub_100AE64C4(v58, v24, isUniquelyReferenced_nonNull_native);
    v61 = *v57;
    *v57 = v86;
    swift_bridgeObjectRelease(v61);
    sub_1004C4938(v60, v56, (uint64_t *)&unk_1013E87D0);
    return 1;
  }
  v83 = (int *)v9;
  v65 = a1;
  v77 = ~v23;
  v78 = v21;
  v79 = *(_QWORD *)(v14 + 72);
  v75 = v21 + 56;
  while (1)
  {
    v27 = v79 * v24;
    sub_1004CB7BC(*(_QWORD *)(v25 + 48) + v79 * v24, (uint64_t)v19, (uint64_t *)&unk_1013E87D0);
    v28 = (uint64_t)&v12[*(int *)(v80 + 48)];
    sub_1004CB7BC((uint64_t)v19, (uint64_t)v12, (uint64_t *)&unk_1013E87D0);
    sub_1004CB7BC(v82, v28, (uint64_t *)&unk_1013E87D0);
    v29 = *(unsigned int (**)(_BYTE *, uint64_t, int *))(v81 + 48);
    v30 = v83;
    if (v29(v12, 1, v83) == 1)
      break;
    v33 = v76;
    sub_1004CB7BC((uint64_t)v12, (uint64_t)v76, (uint64_t *)&unk_1013E87D0);
    v34 = v29((_BYTE *)v28, 1, v30);
    v32 = (uint64_t *)&unk_1013F3DB0;
    if (v34 == 1)
      goto LABEL_15;
    v35 = v74;
    sub_1004B84E0(v28, (uint64_t)v74, type metadata accessor for CRLWPHyperlinkSmartFieldData);
    v36 = v33[8];
    v86 = *(_QWORD *)v33;
    v87 = v36;
    v37 = v35[8];
    v84 = *(_QWORD *)v35;
    v85 = v37;
    v38 = sub_10062E244();
    if ((static CRExtensible.== infix(_:_:)(&v86, &v84, &type metadata for CRLWPSmartFieldDataType, v38, &protocol witness table for Int, &protocol witness table for Int) & 1) == 0)goto LABEL_14;
    v39 = v83[5];
    v40 = (uint64_t)&v33[v39];
    v41 = (uint64_t)&v35[v39];
    v42 = v73;
    v43 = (uint64_t)&v73[*(int *)(v70 + 48)];
    sub_1004CB7BC(v40, (uint64_t)v73, &qword_1013E04D0);
    sub_1004CB7BC(v41, v43, &qword_1013E04D0);
    v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v72 + 48);
    v45 = v71;
    if (v44((uint64_t)v42, 1, v71) == 1)
    {
      v46 = v44(v43, 1, v45);
      v35 = v74;
      if (v46 != 1)
        goto LABEL_13;
      sub_1004CB800((uint64_t)v73, &qword_1013E04D0);
      v33 = v76;
    }
    else
    {
      sub_1004CB7BC((uint64_t)v42, (uint64_t)v69, &qword_1013E04D0);
      if (v44(v43, 1, v45) == 1)
      {
        (*(void (**)(_BYTE *, uint64_t))(v72 + 8))(v69, v45);
        v35 = v74;
LABEL_13:
        sub_1004CB800((uint64_t)v73, (uint64_t *)&unk_1013E87E0);
        v33 = v76;
LABEL_14:
        sub_1004B84A4((uint64_t)v35, type metadata accessor for CRLWPHyperlinkSmartFieldData);
        v32 = (uint64_t *)&unk_1013E87D0;
LABEL_15:
        sub_1004B84A4((uint64_t)v33, type metadata accessor for CRLWPHyperlinkSmartFieldData);
        v26 = v75;
LABEL_16:
        sub_1004CB800((uint64_t)v12, v32);
        sub_1004CB800((uint64_t)v19, (uint64_t *)&unk_1013E87D0);
        v25 = v78;
        goto LABEL_17;
      }
      v47 = v67;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v72 + 32))(v67, v43, v45);
      sub_1004B7878((unint64_t *)&qword_1013E87F8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v48 = v69;
      v64 = dispatch thunk of static Equatable.== infix(_:_:)(v69, v47);
      v49 = *(void (**)(_BYTE *, uint64_t))(v72 + 8);
      v49(v67, v45);
      v49(v48, v45);
      sub_1004CB800((uint64_t)v42, &qword_1013E04D0);
      v35 = v74;
      v33 = v76;
      if ((v64 & 1) == 0)
        goto LABEL_14;
    }
    v50 = v83[6];
    v51 = *(_QWORD *)&v33[v50];
    v52 = *(_QWORD *)&v33[v50 + 8];
    v53 = &v35[v50];
    v54 = v53[1];
    if ((v51 != *v53 || v52 != v54) && (_stringCompareWithSmolCheck(_:_:expecting:)(v51, v52, *v53, v54, 0) & 1) == 0)
      goto LABEL_14;
    v55 = sub_100C9E04C(*(_QWORD *)&v33[v83[7]], *(_QWORD *)&v35[v83[7]]);
    sub_1004B84A4((uint64_t)v35, type metadata accessor for CRLWPHyperlinkSmartFieldData);
    sub_1004B84A4((uint64_t)v33, type metadata accessor for CRLWPHyperlinkSmartFieldData);
    sub_1004CB800((uint64_t)v12, (uint64_t *)&unk_1013E87D0);
    sub_1004CB800((uint64_t)v19, (uint64_t *)&unk_1013E87D0);
    v25 = v78;
    v26 = v75;
    if ((v55 & 1) != 0)
      goto LABEL_27;
LABEL_17:
    v24 = (v24 + 1) & v77;
    if (((*(_QWORD *)(v26 + ((v24 >> 3) & 0xFFFFFFFFFFFFF8)) >> v24) & 1) == 0)
    {
      swift_bridgeObjectRelease(v25);
      v56 = v65;
      v57 = v68;
      goto LABEL_26;
    }
  }
  v31 = v29((_BYTE *)v28, 1, v30);
  v32 = (uint64_t *)&unk_1013F3DB0;
  if (v31 != 1)
    goto LABEL_16;
  sub_1004CB800((uint64_t)v12, (uint64_t *)&unk_1013E87D0);
  sub_1004CB800((uint64_t)v19, (uint64_t *)&unk_1013E87D0);
  v25 = v78;
LABEL_27:
  swift_bridgeObjectRelease(v25);
  sub_1004CB800(v82, (uint64_t *)&unk_1013E87D0);
  sub_1004CB7BC(*(_QWORD *)(*v68 + 48) + v27, v65, (uint64_t *)&unk_1013E87D0);
  return 0;
}

uint64_t sub_100AD8690(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  _QWORD v24[9];

  v7 = *v3;
  Hasher.init(_seed:)(v24, *(_QWORD *)(*v3 + 40));
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v24, a2, a3);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = v12[1];
    v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      v15 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0;
    }
    v18 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v18;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v19 = (_QWORD *)(v11 + 16 * v10);
      v20 = v19[1];
      v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0) & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease(v7);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24[0] = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain(a3);
  sub_100AE6BCC(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  v23 = *v3;
  *v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_100AD883C(Swift::Int *a1, void *a2)
{
  return sub_100ADBA5C(a1, a2, type metadata accessor for CRLCollaborationParticipant, &qword_101405430);
}

uint64_t sub_100AD8850(unsigned __int8 *a1, unsigned __int8 a2)
{
  _QWORD *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  _QWORD v14[9];

  v5 = *v2;
  Hasher.init(_seed:)(v14, *(_QWORD *)(*v2 + 40));
  Hasher._combine(_:)(a2);
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v14[0] = *v2;
    *v2 = 0x8000000000000000;
    sub_100AE6EE8(a2, v8, isUniquelyReferenced_nonNull_native);
    v13 = *v2;
    *v2 = v14[0];
    swift_bridgeObjectRelease(v13);
    result = 1;
    goto LABEL_8;
  }
  v9 = *(_QWORD *)(v5 + 48);
  if (*(unsigned __int8 *)(v9 + v8) != a2)
  {
    v10 = ~v7;
    do
    {
      v8 = (v8 + 1) & v10;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_7;
    }
    while (*(unsigned __int8 *)(v9 + v8) != a2);
  }
  result = 0;
  a2 = *(_BYTE *)(*(_QWORD *)(*v2 + 48) + v8);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_100AD896C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  Swift::Int v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  int EnumCaseMultiPayload;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  int v52;
  int v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v72;
  uint64_t v73;
  uint64_t v75;
  _QWORD v76[5];
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned __int8 *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;

  v3 = v2;
  v81 = a1;
  v5 = type metadata accessor for CRLBoardIdentifier(0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v85 = (uint64_t)v76 - v10;
  v11 = __chkstk_darwin(v9);
  v88 = (uint64_t)v76 - v12;
  __chkstk_darwin(v11);
  v87 = (uint64_t)v76 - v13;
  v79 = type metadata accessor for UUID(0);
  v78 = *(_QWORD *)(v79 - 8);
  __chkstk_darwin(v79);
  v76[4] = (char *)v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = sub_1004B804C(&qword_1013E8798);
  __chkstk_darwin(v84);
  v95 = (uint64_t)v76 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for CRLBoardLibraryViewModel.Folder(0);
  v17 = __chkstk_darwin(v16);
  v83 = (char *)v76 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v94 = (uint64_t)v76 - v20;
  __chkstk_darwin(v19);
  v93 = (uint64_t)v76 - v21;
  v103 = sub_1004B804C((uint64_t *)&unk_1013E87A0);
  __chkstk_darwin(v103);
  v23 = (char *)v76 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = type metadata accessor for CRLBoardLibraryViewModel.Item(0);
  v24 = *(_QWORD *)(v98 - 8);
  v25 = __chkstk_darwin(v98);
  v27 = (char *)v76 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v25);
  v30 = (char *)v76 - v29;
  v31 = __chkstk_darwin(v28);
  v97 = (unsigned __int8 *)v76 - v32;
  v33 = __chkstk_darwin(v31);
  v35 = (char *)v76 - v34;
  __chkstk_darwin(v33);
  v80 = (char *)v76 - v36;
  v37 = *v3;
  Hasher.init(_seed:)(&v104, *(_QWORD *)(*v3 + 40));
  swift_bridgeObjectRetain(v37);
  v96 = a2;
  sub_100BCE92C((uint64_t)&v104);
  v38 = Hasher._finalize()();
  v39 = -1 << *(_BYTE *)(v37 + 32);
  v40 = v38 & ~v39;
  v102 = v37 + 56;
  if (((*(_QWORD *)(v37 + 56 + ((v40 >> 3) & 0xFFFFFFFFFFFFF8)) >> v40) & 1) == 0)
  {
    swift_bridgeObjectRelease(v37);
    v70 = (uint64_t)v80;
    v69 = v81;
LABEL_25:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v72 = v96;
    sub_1004B8460(v96, v70, type metadata accessor for CRLBoardLibraryViewModel.Item);
    v104 = *v3;
    *v3 = 0x8000000000000000;
    sub_100AE7034(v70, v40, isUniquelyReferenced_nonNull_native);
    v73 = *v3;
    *v3 = v104;
    swift_bridgeObjectRelease(v73);
    sub_1004B84E0(v72, v69, type metadata accessor for CRLBoardLibraryViewModel.Item);
    return 1;
  }
  v86 = v8;
  v77 = v3;
  v100 = ~v39;
  v101 = *(_QWORD *)(v24 + 72);
  v92 = v27 + 8;
  v41 = v96;
  v91 = v37;
  v42 = v98;
  v89 = v27;
  v90 = v30;
  v82 = v35;
  while (1)
  {
    v43 = *(_QWORD *)(v37 + 48);
    v99 = v101 * v40;
    sub_1004B8460(v43 + v101 * v40, (uint64_t)v35, type metadata accessor for CRLBoardLibraryViewModel.Item);
    v44 = &v23[*(int *)(v103 + 48)];
    sub_1004B8460((uint64_t)v35, (uint64_t)v23, type metadata accessor for CRLBoardLibraryViewModel.Item);
    sub_1004B8460(v41, (uint64_t)v44, type metadata accessor for CRLBoardLibraryViewModel.Item);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v23, v42);
    if (EnumCaseMultiPayload)
      break;
    sub_1004B8460((uint64_t)v23, (uint64_t)v97, type metadata accessor for CRLBoardLibraryViewModel.Item);
    if (swift_getEnumCaseMultiPayload(v44, v42))
      goto LABEL_4;
    v52 = *v97;
    v53 = *v44;
    sub_1004B84A4((uint64_t)v23, type metadata accessor for CRLBoardLibraryViewModel.Item);
    sub_1004B84A4((uint64_t)v35, type metadata accessor for CRLBoardLibraryViewModel.Item);
    v54 = v52 == v53;
    v41 = v96;
    if (v54)
      goto LABEL_28;
LABEL_6:
    v40 = (v40 + 1) & v100;
    if (((*(_QWORD *)(v102 + ((v40 >> 3) & 0xFFFFFFFFFFFFF8)) >> v40) & 1) == 0)
    {
      swift_bridgeObjectRelease(v37);
      v69 = v81;
      v3 = v77;
      v70 = (uint64_t)v80;
      goto LABEL_25;
    }
  }
  if (EnumCaseMultiPayload == 1)
  {
    sub_1004B8460((uint64_t)v23, (uint64_t)v30, type metadata accessor for CRLBoardLibraryViewModel.Item);
    if (swift_getEnumCaseMultiPayload(v44, v42) == 1)
    {
      v46 = v93;
      sub_1004B84E0((uint64_t)v30, v93, type metadata accessor for CRLBoardLibraryViewModel.Folder);
      v47 = v94;
      sub_1004B84E0((uint64_t)v44, v94, type metadata accessor for CRLBoardLibraryViewModel.Folder);
      v48 = v95;
      v49 = v95 + *(int *)(v84 + 48);
      sub_1004B8460(v46, v95, type metadata accessor for CRLBoardLibraryViewModel.Folder);
      sub_1004B8460(v47, v49, type metadata accessor for CRLBoardLibraryViewModel.Folder);
      v50 = sub_1004B804C(&qword_1013E1790);
      v51 = (char *)&loc_100AD8E84
          + 4
          * byte_100F26ED0[(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 48))(v48, 5, v50)];
      __asm { BR              X9 }
    }
    sub_1004B84A4((uint64_t)v30, type metadata accessor for CRLBoardLibraryViewModel.Folder);
    goto LABEL_4;
  }
  sub_1004B8460((uint64_t)v23, (uint64_t)v27, type metadata accessor for CRLBoardLibraryViewModel.Item);
  v55 = (uint64_t)v27;
  v56 = v42;
  v57 = sub_1004B804C((uint64_t *)&unk_1013EA630);
  swift_bridgeObjectRelease(*(_QWORD *)&v92[*(int *)(v57 + 48)]);
  if (swift_getEnumCaseMultiPayload(v44, v56) != 2)
  {
    sub_1004B84A4(v55, type metadata accessor for CRLBoardIdentifier);
    v42 = v98;
    v27 = (char *)v55;
    v30 = v90;
LABEL_4:
    sub_1004CB800((uint64_t)v23, (uint64_t *)&unk_1013E87A0);
LABEL_5:
    sub_1004B84A4((uint64_t)v35, type metadata accessor for CRLBoardLibraryViewModel.Item);
    goto LABEL_6;
  }
  swift_bridgeObjectRelease(*(_QWORD *)&v44[*(int *)(v57 + 48) + 8]);
  v58 = v87;
  sub_1004B84E0(v55, v87, type metadata accessor for CRLBoardIdentifier);
  v59 = v88;
  sub_1004B84E0((uint64_t)v44, v88, type metadata accessor for CRLBoardIdentifier);
  v60 = static UUID.== infix(_:_:)(v58);
  v61 = v85;
  sub_1004B8460(v58, v85, type metadata accessor for CRLBoardIdentifier);
  v62 = (uint64_t)v86;
  sub_1004B8460(v59, (uint64_t)v86, type metadata accessor for CRLBoardIdentifier);
  if ((v60 & 1) == 0)
  {
    sub_1004B84A4(v62, type metadata accessor for CRLBoardIdentifier);
    sub_1004B84A4(v61, type metadata accessor for CRLBoardIdentifier);
    sub_1004B84A4(v59, type metadata accessor for CRLBoardIdentifier);
    sub_1004B84A4(v58, type metadata accessor for CRLBoardIdentifier);
    sub_1004B84A4((uint64_t)v23, type metadata accessor for CRLBoardLibraryViewModel.Item);
    v37 = v91;
    v42 = v98;
    v27 = v89;
    v30 = v90;
    v35 = v82;
    goto LABEL_5;
  }
  v63 = *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20);
  v64 = *(_QWORD *)(v61 + v63);
  v65 = *(_QWORD *)(v61 + v63 + 8);
  v66 = (_QWORD *)(v62 + v63);
  v67 = v66[1];
  if (v64 != *v66 || v65 != v67)
  {
    v68 = _stringCompareWithSmolCheck(_:_:expecting:)(v64, v65, *v66, v67, 0);
    sub_1004B84A4((uint64_t)v86, type metadata accessor for CRLBoardIdentifier);
    sub_1004B84A4(v61, type metadata accessor for CRLBoardIdentifier);
    sub_1004B84A4(v88, type metadata accessor for CRLBoardIdentifier);
    sub_1004B84A4(v87, type metadata accessor for CRLBoardIdentifier);
    sub_1004B84A4((uint64_t)v23, type metadata accessor for CRLBoardLibraryViewModel.Item);
    v35 = v82;
    sub_1004B84A4((uint64_t)v82, type metadata accessor for CRLBoardLibraryViewModel.Item);
    v37 = v91;
    v42 = v98;
    v27 = v89;
    v30 = v90;
    if ((v68 & 1) != 0)
      goto LABEL_28;
    goto LABEL_6;
  }
  sub_1004B84A4((uint64_t)v86, type metadata accessor for CRLBoardIdentifier);
  sub_1004B84A4(v61, type metadata accessor for CRLBoardIdentifier);
  sub_1004B84A4(v88, type metadata accessor for CRLBoardIdentifier);
  sub_1004B84A4(v87, type metadata accessor for CRLBoardIdentifier);
  v37 = v91;
  v75 = (uint64_t)v82;
  sub_1004B84A4((uint64_t)v23, type metadata accessor for CRLBoardLibraryViewModel.Item);
  sub_1004B84A4(v75, type metadata accessor for CRLBoardLibraryViewModel.Item);
LABEL_28:
  swift_bridgeObjectRelease(v37);
  sub_1004B84A4(v41, type metadata accessor for CRLBoardLibraryViewModel.Item);
  sub_1004B8460(*(_QWORD *)(*v77 + 48) + v99, v81, type metadata accessor for CRLBoardLibraryViewModel.Item);
  return 0;
}

uint64_t sub_100AD9558(uint64_t a1, uint64_t a2)
{
  return sub_100AD9FE0(a1, a2, type metadata accessor for CRLBoardPreviewImageCache.Item, (void (*)(_QWORD *, __n128))sub_10058A3F0, (void (*)(char *, unint64_t, uint64_t))sub_100AE7BE0, (uint64_t (*)(char *, uint64_t))sub_10059CBF0);
}

uint64_t sub_100AD957C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, double a5)
{
  _QWORD *v5;
  uint64_t v11;
  Swift::UInt64 v12;
  Swift::UInt64 v13;
  Swift::UInt64 v14;
  Swift::UInt64 v15;
  Swift::UInt64 v16;
  Swift::Int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double *v22;
  double v23;
  double v24;
  double v25;
  BOOL v26;
  char v28;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  _QWORD v33[9];

  v11 = *v5;
  Hasher.init(_seed:)(v33, *(_QWORD *)(*v5 + 40));
  v12 = a2;
  v13 = a3;
  if ((a4 & 1) != 0)
  {
    v12 = qword_100F27438[a2];
    v13 = v12;
  }
  if ((v12 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v14 = v12;
  else
    v14 = 0;
  Hasher._combine(_:)(v14);
  if ((v13 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v15 = v13;
  else
    v15 = 0;
  Hasher._combine(_:)(v15);
  if ((*(_QWORD *)&a5 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v16 = *(_QWORD *)&a5;
  else
    v16 = 0;
  Hasher._combine(_:)(v16);
  v17 = Hasher._finalize()();
  v18 = -1 << *(_BYTE *)(v11 + 32);
  v19 = v17 & ~v18;
  if (((*(_QWORD *)(v11 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) != 0)
  {
    v20 = ~v18;
    while (1)
    {
      v21 = *(_QWORD *)(v11 + 48) + 32 * v19;
      if (*(_BYTE *)(v21 + 16) == 1)
      {
        v22 = &dbl_100F27460[*(_QWORD *)v21];
        v23 = *v22;
      }
      else
      {
        v22 = (double *)(v21 + 8);
        v23 = *(double *)v21;
      }
      v24 = *(double *)&a2;
      v25 = *(double *)&a3;
      if ((a4 & 1) != 0)
      {
        v24 = dbl_100F27460[a2];
        v25 = v24;
      }
      v26 = v23 == v24 && *v22 == v25;
      if (v26 && *(double *)(v21 + 24) == a5)
        break;
      v19 = (v19 + 1) & v20;
      if (((*(_QWORD *)(v11 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) == 0)
        goto LABEL_27;
    }
    result = 0;
    v32 = *(_QWORD *)(*v5 + 48) + 32 * v19;
    a2 = *(_QWORD *)v32;
    a3 = *(_QWORD *)(v32 + 8);
    v28 = *(_BYTE *)(v32 + 16);
    a5 = *(double *)(v32 + 24);
  }
  else
  {
LABEL_27:
    v28 = a4 & 1;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v5);
    v33[0] = *v5;
    *v5 = 0x8000000000000000;
    sub_100AE7DD0(a2, a3, a4 & 1, v19, isUniquelyReferenced_nonNull_native, a5);
    v30 = *v5;
    *v5 = v33[0];
    swift_bridgeObjectRelease(v30);
    result = 1;
  }
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_BYTE *)(a1 + 16) = v28;
  *(double *)(a1 + 24) = a5;
  return result;
}

uint64_t sub_100AD9768(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t);
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char v37;
  uint64_t v39;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[9];

  v3 = v2;
  v45 = a1;
  v5 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v43 - v9;
  v11 = type metadata accessor for CRLBoardIdentifierAndValue(0);
  v50 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v44 = (uint64_t)&v43 - v15;
  v16 = *v2;
  Hasher.init(_seed:)(v52, *(_QWORD *)(*v2 + 40));
  v17 = type metadata accessor for UUID(0);
  v18 = sub_1004B7878((unint64_t *)&qword_1013DE630, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  swift_bridgeObjectRetain(v16);
  dispatch thunk of Hashable.hash(into:)(v52, v17, v18);
  v48 = type metadata accessor for CRLBoardIdentifierStorage(0);
  v19 = (uint64_t *)(a2 + *(int *)(v48 + 20));
  v20 = *v19;
  v21 = v19[1];
  swift_bridgeObjectRetain(v21);
  String.hash(into:)(v52, v20, v21);
  swift_bridgeObjectRelease(v21);
  v46 = *(int *)(v11 + 20);
  v47 = v11;
  Hasher._combine(_:)(*(_BYTE *)(a2 + v46));
  v22 = Hasher._finalize()();
  v23 = -1 << *(_BYTE *)(v16 + 32);
  v24 = v22 & ~v23;
  v51 = v16 + 56;
  if (((*(_QWORD *)(v16 + 56 + ((v24 >> 3) & 0xFFFFFFFFFFFFF8)) >> v24) & 1) == 0)
  {
    swift_bridgeObjectRelease(v16);
    v39 = v45;
    goto LABEL_17;
  }
  v43 = v3;
  v49 = ~v23;
  v50 = *(_QWORD *)(v50 + 72);
  v25 = type metadata accessor for CRLBoardIdentifierAndValue;
  do
  {
    v26 = v16;
    v27 = v50 * v24;
    v28 = *(_QWORD *)(v16 + 48) + v50 * v24;
    v29 = v25;
    sub_1004B8460(v28, (uint64_t)v13, v25);
    v30 = static UUID.== infix(_:_:)(v13);
    sub_1004B8460((uint64_t)v13, (uint64_t)v10, type metadata accessor for CRLBoardIdentifier);
    sub_1004B8460(a2, (uint64_t)v7, type metadata accessor for CRLBoardIdentifier);
    if ((v30 & 1) == 0)
    {
      sub_1004B84A4((uint64_t)v7, type metadata accessor for CRLBoardIdentifier);
      sub_1004B84A4((uint64_t)v10, type metadata accessor for CRLBoardIdentifier);
      goto LABEL_4;
    }
    v31 = *(int *)(v48 + 20);
    v32 = *(_QWORD *)&v10[v31];
    v33 = *(_QWORD *)&v10[v31 + 8];
    v34 = &v7[v31];
    v35 = *((_QWORD *)v34 + 1);
    if (v32 == *(_QWORD *)v34 && v33 == v35)
    {
      sub_1004B84A4((uint64_t)v7, type metadata accessor for CRLBoardIdentifier);
      sub_1004B84A4((uint64_t)v10, type metadata accessor for CRLBoardIdentifier);
    }
    else
    {
      v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v32, v33, *(_QWORD *)v34, v35, 0);
      sub_1004B84A4((uint64_t)v7, type metadata accessor for CRLBoardIdentifier);
      sub_1004B84A4((uint64_t)v10, type metadata accessor for CRLBoardIdentifier);
      if ((v37 & 1) == 0)
        goto LABEL_4;
    }
    if (v13[*(int *)(v47 + 20)] == *(_BYTE *)(a2 + v46))
    {
      sub_1004B84A4((uint64_t)v13, type metadata accessor for CRLBoardIdentifierAndValue);
      swift_bridgeObjectRelease(v26);
      sub_1004B84A4(a2, type metadata accessor for CRLBoardIdentifierAndValue);
      sub_1004B8460(*(_QWORD *)(*v43 + 48) + v27, v45, type metadata accessor for CRLBoardIdentifierAndValue);
      return 0;
    }
LABEL_4:
    v25 = v29;
    sub_1004B84A4((uint64_t)v13, v29);
    v24 = (v24 + 1) & v49;
    v16 = v26;
  }
  while (((*(_QWORD *)(v51 + ((v24 >> 3) & 0xFFFFFFFFFFFFF8)) >> v24) & 1) != 0);
  swift_bridgeObjectRelease(v26);
  v39 = v45;
  v3 = v43;
LABEL_17:
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v41 = v44;
  sub_1004B8460(a2, v44, type metadata accessor for CRLBoardIdentifierAndValue);
  v52[0] = *v3;
  *v3 = 0x8000000000000000;
  sub_100AE7FD8(v41, v24, isUniquelyReferenced_nonNull_native);
  v42 = *v3;
  *v3 = v52[0];
  swift_bridgeObjectRelease(v42);
  sub_1004B84E0(a2, v39, type metadata accessor for CRLBoardIdentifierAndValue);
  return 1;
}

uint64_t sub_100AD9B64(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  unint64_t v27;
  uint64_t (*v28)(uint64_t);
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char v37;
  _QWORD *v39;
  uint64_t v40;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[10];

  v47 = a1;
  v4 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v45 - v8;
  v10 = type metadata accessor for CRLBoardPreviewImageCacheAssetDownloadHelper.AssetDownloadRequest(0);
  v54 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v46 = (uint64_t)&v45 - v14;
  v48 = v2;
  v15 = *v2;
  Hasher.init(_seed:)(v57, *(_QWORD *)(*v2 + 40));
  v16 = type metadata accessor for UUID(0);
  v17 = sub_1004B7878((unint64_t *)&qword_1013DE630, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  swift_bridgeObjectRetain(v15);
  dispatch thunk of Hashable.hash(into:)(v57, v16, v17);
  v51 = type metadata accessor for CRLBoardIdentifierStorage(0);
  v18 = (uint64_t *)(a2 + *(int *)(v51 + 20));
  v20 = *v18;
  v19 = v18[1];
  swift_bridgeObjectRetain(v19);
  String.hash(into:)(v57, v20, v19);
  swift_bridgeObjectRelease(v19);
  v50 = a2 + *(int *)(v10 + 20);
  dispatch thunk of Hashable.hash(into:)(v57, v16, v17);
  v52 = v10;
  v21 = *(int *)(v10 + 24);
  v56 = a2;
  v49 = a2 + v21;
  dispatch thunk of Hashable.hash(into:)(v57, v16, v17);
  v22 = Hasher._finalize()();
  v23 = -1 << *(_BYTE *)(v15 + 32);
  v24 = v22 & ~v23;
  v55 = v15 + 56;
  if (((*(_QWORD *)(v15 + 56 + ((v24 >> 3) & 0xFFFFFFFFFFFFF8)) >> v24) & 1) != 0)
  {
    v53 = ~v23;
    v54 = *(_QWORD *)(v54 + 72);
    v25 = type metadata accessor for CRLBoardPreviewImageCacheAssetDownloadHelper.AssetDownloadRequest;
    do
    {
      v26 = v15;
      v27 = v54 * v24;
      v28 = v25;
      sub_1004B8460(*(_QWORD *)(v15 + 48) + v54 * v24, (uint64_t)v12, v25);
      v29 = v56;
      v30 = static UUID.== infix(_:_:)(v12);
      sub_1004B8460((uint64_t)v12, (uint64_t)v9, type metadata accessor for CRLBoardIdentifier);
      sub_1004B8460(v29, (uint64_t)v6, type metadata accessor for CRLBoardIdentifier);
      if ((v30 & 1) != 0)
      {
        v31 = *(int *)(v51 + 20);
        v32 = *(_QWORD *)&v9[v31];
        v33 = *(_QWORD *)&v9[v31 + 8];
        v34 = &v6[v31];
        v35 = *((_QWORD *)v34 + 1);
        if (v32 == *(_QWORD *)v34 && v33 == v35)
        {
          sub_1004B84A4((uint64_t)v6, type metadata accessor for CRLBoardIdentifier);
          sub_1004B84A4((uint64_t)v9, type metadata accessor for CRLBoardIdentifier);
        }
        else
        {
          v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v32, v33, *(_QWORD *)v34, v35, 0);
          sub_1004B84A4((uint64_t)v6, type metadata accessor for CRLBoardIdentifier);
          sub_1004B84A4((uint64_t)v9, type metadata accessor for CRLBoardIdentifier);
          if ((v37 & 1) == 0)
            goto LABEL_4;
        }
        if ((static UUID.== infix(_:_:)(&v12[*(int *)(v52 + 20)]) & 1) != 0
          && (static UUID.== infix(_:_:)(&v12[*(int *)(v52 + 24)]) & 1) != 0)
        {
          sub_1004B84A4((uint64_t)v12, type metadata accessor for CRLBoardPreviewImageCacheAssetDownloadHelper.AssetDownloadRequest);
          swift_bridgeObjectRelease(v26);
          sub_1004B84A4(v56, type metadata accessor for CRLBoardPreviewImageCacheAssetDownloadHelper.AssetDownloadRequest);
          sub_1004B8460(*(_QWORD *)(*v48 + 48) + v27, v47, type metadata accessor for CRLBoardPreviewImageCacheAssetDownloadHelper.AssetDownloadRequest);
          return 0;
        }
      }
      else
      {
        sub_1004B84A4((uint64_t)v6, type metadata accessor for CRLBoardIdentifier);
        sub_1004B84A4((uint64_t)v9, type metadata accessor for CRLBoardIdentifier);
      }
LABEL_4:
      v25 = v28;
      sub_1004B84A4((uint64_t)v12, v28);
      v24 = (v24 + 1) & v53;
      v15 = v26;
    }
    while (((*(_QWORD *)(v55 + ((v24 >> 3) & 0xFFFFFFFFFFFFF8)) >> v24) & 1) != 0);
  }
  swift_bridgeObjectRelease(v15);
  v40 = v47;
  v39 = v48;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v48);
  v42 = v56;
  v43 = v46;
  sub_1004B8460(v56, v46, type metadata accessor for CRLBoardPreviewImageCacheAssetDownloadHelper.AssetDownloadRequest);
  v57[0] = *v39;
  *v39 = 0x8000000000000000;
  sub_100AE8368(v43, v24, isUniquelyReferenced_nonNull_native);
  v44 = *v39;
  *v39 = v57[0];
  swift_bridgeObjectRelease(v44);
  sub_1004B84E0(v42, v40, type metadata accessor for CRLBoardPreviewImageCacheAssetDownloadHelper.AssetDownloadRequest);
  return 1;
}

uint64_t sub_100AD9F94(Swift::Int *a1, void *a2)
{
  return sub_100ADBA5C(a1, a2, type metadata accessor for CRLBoardPreviewImageCache.LookupKey, &qword_1013DEA20);
}

uint64_t sub_100AD9FA8(Swift::Int *a1, void *a2)
{
  return sub_100ADBA5C(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for CRLiOSMiniFormatterBuilder, &qword_101405688);
}

uint64_t sub_100AD9FBC(uint64_t a1, uint64_t a2)
{
  return sub_100AD9FE0(a1, a2, _s17CategoryViewModelVMa, (void (*)(_QWORD *, __n128))sub_100D5DC10, (void (*)(char *, unint64_t, uint64_t))sub_100AE8740, (uint64_t (*)(char *, uint64_t))sub_100D5DDE4);
}

uint64_t sub_100AD9FE0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), void (*a4)(_QWORD *, __n128), void (*a5)(char *, unint64_t, uint64_t), uint64_t (*a6)(char *, uint64_t))
{
  _QWORD *v6;
  _QWORD *v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  void (*v31)(char *, unint64_t, uint64_t);
  uint64_t (*v32)(char *, uint64_t);
  _QWORD v33[9];

  v31 = a5;
  v32 = a6;
  v9 = v6;
  v12 = a3(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v28 - v14;
  v16 = *v9;
  Hasher.init(_seed:)(v33, *(_QWORD *)(*v9 + 40));
  v17 = swift_bridgeObjectRetain(v16);
  v18 = a2;
  a4(v33, v17);
  v19 = Hasher._finalize()();
  v20 = -1 << *(_BYTE *)(v16 + 32);
  v21 = v19 & ~v20;
  if (((*(_QWORD *)(v16 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) != 0)
  {
    v29 = v9;
    v30 = a1;
    v22 = ~v20;
    v23 = *(_QWORD *)(v13 + 72);
    while (1)
    {
      sub_1004B8460(*(_QWORD *)(v16 + 48) + v23 * v21, (uint64_t)v15, a3);
      v24 = v32(v15, v18);
      sub_1004B84A4((uint64_t)v15, a3);
      if ((v24 & 1) != 0)
        break;
      v21 = (v21 + 1) & v22;
      if (((*(_QWORD *)(v16 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
      {
        swift_bridgeObjectRelease(v16);
        v9 = v29;
        a1 = v30;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease(v16);
    sub_1004B84A4(v18, a3);
    sub_1004B8460(*(_QWORD *)(*v29 + 48) + v23 * v21, v30, a3);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v16);
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v9);
    sub_1004B8460(v18, (uint64_t)v15, a3);
    v33[0] = *v9;
    *v9 = 0x8000000000000000;
    v31(v15, v21, isUniquelyReferenced_nonNull_native);
    v26 = *v9;
    *v9 = v33[0];
    swift_bridgeObjectRelease(v26);
    sub_1004B84E0(v18, a1, a3);
    return 1;
  }
}

uint64_t sub_100ADA1D4(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = v2;
  v31 = a2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v2);
    v8 = swift_retain(a2);
    v9 = __CocoaSet.member(for:)(v8);
    swift_release(a2);
    if (v9)
    {
      swift_bridgeObjectRelease(v6);
      swift_release(a2);
      v29 = v9;
      v10 = type metadata accessor for CalculateExpression(0);
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(&v30, &v29, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
      *a1 = v30;
      swift_unknownObjectRelease(v9);
      return 0;
    }
    result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v23 = sub_100ADC51C(v7, result + 1);
    v30 = v23;
    v24 = *(_QWORD *)(v23 + 16);
    if (*(_QWORD *)(v23 + 24) <= v24)
    {
      v27 = v24 + 1;
      swift_retain(a2);
      sub_100AE14CC(v27);
      v25 = v30;
    }
    else
    {
      v25 = v23;
      swift_retain(a2);
    }
    sub_100AE3698(a2, v25);
    v28 = *v3;
    *v3 = v25;
    swift_bridgeObjectRelease(v28);
    *a1 = a2;
    return 1;
  }
  v12 = *(_QWORD *)(v6 + 40);
  v13 = type metadata accessor for CalculateExpression(0);
  v14 = sub_1004B7878((unint64_t *)&unk_1013E8820, (uint64_t (*)(uint64_t))&type metadata accessor for CalculateExpression, (uint64_t)&protocol conformance descriptor for CalculateExpression);
  swift_bridgeObjectRetain(v6);
  v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v12, v13, v14);
  v16 = -1 << *(_BYTE *)(v6 + 32);
  v17 = v15 & ~v16;
  if (((*(_QWORD *)(v6 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
  {
LABEL_11:
    swift_bridgeObjectRelease(v6);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v20 = v31;
    v30 = *v2;
    *v2 = 0x8000000000000000;
    swift_retain(v20);
    sub_100AE8930(v21, v17, isUniquelyReferenced_nonNull_native);
    v22 = *v2;
    *v2 = v30;
    swift_bridgeObjectRelease(v22);
    *a1 = v20;
    return 1;
  }
  v18 = ~v16;
  sub_1004B7878(&qword_1013DEA10, (uint64_t (*)(uint64_t))&type metadata accessor for CalculateExpression, (uint64_t)&protocol conformance descriptor for CalculateExpression);
  while (1)
  {
    v30 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v17);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v30, &v31) & 1) != 0)
      break;
    v17 = (v17 + 1) & v18;
    if (((*(_QWORD *)(v6 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
      goto LABEL_11;
  }
  swift_release(a2);
  swift_bridgeObjectRelease(v6);
  v26 = *(_QWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v17);
  *a1 = v26;
  swift_retain(v26);
  return 0;
}

uint64_t sub_100ADA49C(Swift::UInt *a1, Swift::UInt a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t Strong;
  uint64_t v17;
  uint64_t v18;
  Swift::UInt v19;
  Swift::Int v20;
  unint64_t v21;
  uint64_t v22;
  char isUniquelyReferenced_nonNull_native;
  Swift::UInt v24;
  uint64_t v25;
  _QWORD v26[9];
  uint64_t v27;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v2);
    v8 = swift_retain(a2);
    v9 = __CocoaSet.member(for:)(v8);
    swift_release(a2);
    if (v9)
    {
      swift_bridgeObjectRelease();
      swift_release(a2);
      v27 = v9;
      v10 = type metadata accessor for CRLCloudAccountChangeObserverWrapper();
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(v26, &v27, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
      *a1 = v26[0];
      swift_unknownObjectRelease(v9);
      return 0;
    }
    result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v20 = sub_100ADC73C(v7, result + 1);
    v26[0] = v20;
    v21 = *(_QWORD *)(v20 + 16);
    if (*(_QWORD *)(v20 + 24) <= v21)
    {
      v25 = v21 + 1;
      swift_retain(a2);
      sub_100AE17DC(v25);
      v22 = v26[0];
    }
    else
    {
      v22 = v20;
      swift_retain(a2);
    }
    sub_100AE3764(a2, v22);
    *v3 = v22;
  }
  else
  {
    Hasher.init(_seed:)(v26, *(_QWORD *)(v6 + 40));
    Hasher._combine(_:)(a2);
    v12 = Hasher._finalize()();
    v13 = -1 << *(_BYTE *)(v6 + 32);
    v14 = v12 & ~v13;
    if (((*(_QWORD *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
    {
      v15 = ~v13;
      swift_bridgeObjectRetain(v6);
      do
      {
        Strong = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) + 16);
        if (Strong)
        {
          v17 = Strong;
          v18 = swift_unknownObjectWeakLoadStrong(a2 + 16);
          swift_unknownObjectRelease(v17);
          if (v18)
          {
            swift_unknownObjectRelease(v18);
            if (v17 == v18)
            {
              swift_release(a2);
              swift_bridgeObjectRelease();
              v19 = *(_QWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v14);
              *a1 = v19;
              swift_retain(v19);
              return 0;
            }
          }
        }
        v14 = (v14 + 1) & v15;
      }
      while (((*(_QWORD *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
      swift_bridgeObjectRelease();
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v26[0] = *v2;
    *v2 = 0x8000000000000000;
    swift_retain(a2);
    sub_100AE8AE8(v24, v14, isUniquelyReferenced_nonNull_native);
    *v2 = v26[0];
  }
  swift_bridgeObjectRelease();
  *a1 = a2;
  return 1;
}

uint64_t sub_100ADA730(Swift::Int *a1, void *a2)
{
  return sub_100ADA768(a1, a2, (unint64_t *)&qword_1013E1770, CKRecordZoneID_ptr, (uint64_t *)&unk_1013DE990);
}

uint64_t sub_100ADA74C(Swift::Int *a1, void *a2)
{
  return sub_100ADA768(a1, a2, &qword_1013E8810, CKRecordID_ptr, &qword_101405638);
}

uint64_t sub_100ADA768(Swift::Int *a1, void *a2, unint64_t *a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t *v5;
  uint64_t *v9;
  uint64_t v12;
  uint64_t v13;
  id v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  Swift::Int v19;
  Swift::Int v20;
  uint64_t v21;
  unint64_t v22;
  id v23;
  char v24;
  uint64_t v25;
  id v26;
  char v27;
  void *v28;
  id v29;
  Swift::Int v30;
  unint64_t v31;
  uint64_t v32;
  id v33;
  char isUniquelyReferenced_nonNull_native;
  id v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v43;
  Swift::Int v44;

  v9 = v5;
  v12 = *v5;
  if ((*v5 & 0xC000000000000001) != 0)
  {
    if (v12 < 0)
      v13 = *v5;
    else
      v13 = v12 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v5);
    v14 = a2;
    v16 = __CocoaSet.member(for:)(v15);

    if (v16)
    {
      swift_bridgeObjectRelease(v12);

      v43 = v16;
      v17 = sub_1004B8930(0, a3, a4);
      swift_unknownObjectRetain(v16);
      swift_dynamicCast(&v44, &v43, (char *)&type metadata for Swift.AnyObject + 8, v17, 7);
      *a1 = v44;
      swift_unknownObjectRelease(v16);
      return 0;
    }
    result = __CocoaSet.count.getter(v13);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v30 = sub_100ADC114(v13, result + 1, a5, a3, a4);
    v44 = v30;
    v31 = *(_QWORD *)(v30 + 16);
    if (*(_QWORD *)(v30 + 24) <= v31)
    {
      v37 = v31 + 1;
      v38 = v14;
      sub_100AE2EEC(v37, a5);
      v32 = v44;
    }
    else
    {
      v32 = v30;
      v33 = v14;
    }
    sub_100AE3A24((uint64_t)v14, v32);
    v39 = *v9;
    *v9 = v32;
    swift_bridgeObjectRelease(v39);
    *a1 = (Swift::Int)v14;
  }
  else
  {
    v19 = *(_QWORD *)(v12 + 40);
    swift_bridgeObjectRetain(v12);
    v20 = NSObject._rawHashValue(seed:)(v19);
    v21 = -1 << *(_BYTE *)(v12 + 32);
    v22 = v20 & ~v21;
    v40 = a4;
    if (((*(_QWORD *)(v12 + 56 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) != 0)
    {
      sub_1004B8930(0, a3, a4);
      v23 = *(id *)(*(_QWORD *)(v12 + 48) + 8 * v22);
      v24 = static NSObject.== infix(_:_:)(v23, a2);

      if ((v24 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease(v12);
        v28 = *(void **)(*(_QWORD *)(*v9 + 48) + 8 * v22);
        *a1 = (Swift::Int)v28;
        v29 = v28;
        return 0;
      }
      v25 = ~v21;
      while (1)
      {
        v22 = (v22 + 1) & v25;
        if (((*(_QWORD *)(v12 + 56 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) == 0)
          break;
        v26 = *(id *)(*(_QWORD *)(v12 + 48) + 8 * v22);
        v27 = static NSObject.== infix(_:_:)(v26, a2);

        if ((v27 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease(v12);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v9);
    v44 = *v9;
    *v9 = 0x8000000000000000;
    v35 = a2;
    sub_100AE5B9C((uint64_t)v35, v22, isUniquelyReferenced_nonNull_native, a5, a3, v40);
    v36 = *v9;
    *v9 = v44;
    swift_bridgeObjectRelease(v36);
    *a1 = (Swift::Int)v35;
  }
  return 1;
}

uint64_t sub_100ADAA30(Swift::Int *a1, void *a2)
{
  return sub_100ADA768(a1, a2, (unint64_t *)&qword_1013E1760, NSLayoutConstraint_ptr, &qword_101405608);
}

uint64_t sub_100ADAA4C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  char v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  __n128 v28;
  __n128 v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v3 = v2;
  v6 = type metadata accessor for UTType(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_1004B7878(&qword_101405600, v12, (uint64_t)&protocol conformance descriptor for UTType);
  swift_bridgeObjectRetain(v10);
  v35 = a2;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  v17 = v10;
  v18 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v31 = v3;
    v32 = a1;
    v33 = ~v15;
    v34 = v7;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v21 = v17;
      v22 = v20;
      v20(v9, *(_QWORD *)(v17 + 48) + v19 * v16, v6);
      sub_1004B7878((unint64_t *)&qword_1013FFE60, (uint64_t (*)(uint64_t))&type metadata accessor for UTType, (uint64_t)&protocol conformance descriptor for UTType);
      v23 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v35);
      v24 = *(void (**)(char *, uint64_t))(v34 + 8);
      v24(v9, v6);
      if ((v23 & 1) != 0)
        break;
      v16 = (v16 + 1) & v33;
      v17 = v21;
      v20 = v22;
      if (((*(_QWORD *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v31;
        a1 = v32;
        v25 = v34;
        goto LABEL_7;
      }
    }
    v30 = swift_bridgeObjectRelease();
    ((void (*)(uint64_t, uint64_t, __n128))v24)(v35, v6, v30);
    v22(v32, *(_QWORD *)(*v31 + 48) + v19 * v16, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v25 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v27 = v35;
    v20(v9, v35, v6);
    v36 = *v3;
    *v3 = 0x8000000000000000;
    sub_100AE8C88((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    *v3 = v36;
    v28 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v25 + 32))(a1, v27, v6, v28);
    return 1;
  }
}

uint64_t sub_100ADACA8(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v31[4];
  uint64_t v32;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v2);
    v8 = swift_retain(a2);
    v9 = __CocoaSet.member(for:)(v8);
    swift_release(a2);
    if (v9)
    {
      swift_bridgeObjectRelease();
      swift_release(a2);
      v32 = v9;
      v10 = _s8ItemDataCMa(0);
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(v31, &v32, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
      *a1 = *(_QWORD *)&v31[0];
      swift_unknownObjectRelease(v9);
      return 0;
    }
    result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v26 = sub_100ADC978(v7, result + 1);
    *(_QWORD *)&v31[0] = v26;
    v27 = v26[2];
    if (v26[3] <= v27)
    {
      v29 = v27 + 1;
      swift_retain(a2);
      sub_100AE221C(v29);
      v28 = *(_QWORD *)&v31[0];
    }
    else
    {
      v28 = (uint64_t)v26;
      swift_retain(a2);
    }
    sub_100AE396C(a2, v28);
    *v3 = v28;
    swift_bridgeObjectRelease();
    *a1 = a2;
  }
  else
  {
    Hasher.init(_seed:)(v31, *(_QWORD *)(v6 + 40));
    v12 = *(_QWORD *)(a2 + 16);
    swift_bridgeObjectRetain(v6);
    sub_1008DF544(v31, v12);
    v13 = a2 + OBJC_IVAR____TtCC8Freeform17CRLStencilLibrary8ItemData_metadata;
    sub_100A1C5DC(v31);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v6 + 32);
    v16 = v14 & ~v15;
    if (((*(_QWORD *)(v6 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
    {
      v17 = ~v15;
      do
      {
        v18 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v16);
        v19 = *(_QWORD *)(v18 + 16);
        v20 = *(_QWORD *)(a2 + 16);
        swift_retain(v18);
        sub_1008D8A00(v19, v20);
        if ((v21 & 1) != 0)
        {
          v22 = sub_100A1C8AC(v18 + OBJC_IVAR____TtCC8Freeform17CRLStencilLibrary8ItemData_metadata, v13);
          swift_release(v18);
          if ((v22 & 1) != 0)
          {
            swift_release(a2);
            swift_bridgeObjectRelease();
            v23 = *(_QWORD *)(*(_QWORD *)(*v3 + 48) + 8 * v16);
            *a1 = v23;
            swift_retain(v23);
            return 0;
          }
        }
        else
        {
          swift_release(v18);
        }
        v16 = (v16 + 1) & v17;
      }
      while (((*(_QWORD *)(v6 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0);
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    *(_QWORD *)&v31[0] = *v3;
    *v3 = 0x8000000000000000;
    swift_retain(a2);
    sub_100AE90CC(v25, v16, isUniquelyReferenced_nonNull_native);
    *v3 = *(_QWORD *)&v31[0];
    swift_bridgeObjectRelease();
    *a1 = a2;
  }
  return 1;
}

uint64_t sub_100ADAF84(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::Int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int EnumCaseMultiPayload;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  char v70;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v72;
  uint64_t v73;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD v97[10];

  v3 = v2;
  v6 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v6);
  v84 = (uint64_t)&v77 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v82 = (uint64_t)&v77 - v9;
  __chkstk_darwin(v10);
  v12 = (char *)&v77 - v11;
  __chkstk_darwin(v13);
  v83 = (uint64_t)&v77 - v14;
  __chkstk_darwin(v15);
  v17 = (char *)&v77 - v16;
  __chkstk_darwin(v18);
  v87 = (uint64_t)&v77 - v19;
  v94 = sub_1004B804C(&qword_1013FE120);
  __chkstk_darwin(v94);
  v21 = (char *)&v77 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for CRLSpotlightManager.ChangeType(0);
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v88 = (char *)&v77 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v89 = (uint64_t)&v77 - v26;
  __chkstk_darwin(v27);
  v95 = (uint64_t)&v77 - v28;
  __chkstk_darwin(v29);
  v79 = (uint64_t)&v77 - v30;
  v31 = *v3;
  Hasher.init(_seed:)(v97, *(_QWORD *)(*v3 + 40));
  swift_bridgeObjectRetain(v31);
  v96 = a2;
  sub_100972048((uint64_t)v97);
  v32 = Hasher._finalize()();
  v33 = -1 << *(_BYTE *)(v31 + 32);
  v34 = v32 & ~v33;
  v35 = v31;
  v85 = v31 + 56;
  if (((*(_QWORD *)(v31 + 56 + ((v34 >> 3) & 0xFFFFFFFFFFFFF8)) >> v34) & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_27:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v72 = v96;
    v73 = v79;
    sub_1004B8460(v96, v79, type metadata accessor for CRLSpotlightManager.ChangeType);
    v97[0] = *v3;
    *v3 = 0x8000000000000000;
    sub_100AE929C(v73, v34, isUniquelyReferenced_nonNull_native);
    *v3 = v97[0];
    swift_bridgeObjectRelease();
    sub_1004B84E0(v72, a1, type metadata accessor for CRLSpotlightManager.ChangeType);
    return 1;
  }
  v77 = v3;
  v78 = a1;
  v91 = ~v33;
  v92 = v22;
  v93 = *(_QWORD *)(v23 + 72);
  v86 = v12;
  v36 = (uint64_t)v88;
  v37 = v85;
  v38 = v95;
  v80 = v17;
  v81 = v31;
  while (1)
  {
    v39 = v35;
    v40 = *(_QWORD *)(v35 + 48);
    v90 = v93 * v34;
    sub_1004B8460(v40 + v93 * v34, v38, type metadata accessor for CRLSpotlightManager.ChangeType);
    v41 = v38;
    v42 = (uint64_t)&v21[*(int *)(v94 + 48)];
    sub_1004B8460(v41, (uint64_t)v21, type metadata accessor for CRLSpotlightManager.ChangeType);
    sub_1004B8460(v96, v42, type metadata accessor for CRLSpotlightManager.ChangeType);
    if (swift_getEnumCaseMultiPayload(v21, v22) != 1)
      break;
    sub_1004B8460((uint64_t)v21, v36, type metadata accessor for CRLSpotlightManager.ChangeType);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v42, v22);
    v44 = v36;
    if (EnumCaseMultiPayload == 1)
    {
      sub_1004B84E0(v42, (uint64_t)v12, type metadata accessor for CRLBoardIdentifier);
      v45 = static UUID.== infix(_:_:)(v36);
      v46 = v82;
      sub_1004B8460(v36, v82, type metadata accessor for CRLBoardIdentifier);
      v47 = (uint64_t)v12;
      v48 = (uint64_t)v12;
      v49 = v84;
      sub_1004B8460(v47, v84, type metadata accessor for CRLBoardIdentifier);
      if ((v45 & 1) != 0)
      {
        v50 = *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20);
        v51 = *(_QWORD *)(v46 + v50);
        v52 = *(_QWORD *)(v46 + v50 + 8);
        v53 = (_QWORD *)(v49 + v50);
        v54 = v53[1];
        if (v51 == *v53 && v52 == v54)
        {
          v75 = v49;
          v62 = v46;
          v76 = (uint64_t)v86;
          goto LABEL_30;
        }
        v56 = _stringCompareWithSmolCheck(_:_:expecting:)(v51, v52, *v53, v54, 0);
        sub_1004B84A4(v49, type metadata accessor for CRLBoardIdentifier);
        sub_1004B84A4(v46, type metadata accessor for CRLBoardIdentifier);
        v12 = v86;
        sub_1004B84A4((uint64_t)v86, type metadata accessor for CRLBoardIdentifier);
        sub_1004B84A4(v36, type metadata accessor for CRLBoardIdentifier);
        v17 = v80;
        v39 = v81;
        if ((v56 & 1) != 0)
          goto LABEL_31;
      }
      else
      {
        sub_1004B84A4(v49, type metadata accessor for CRLBoardIdentifier);
        sub_1004B84A4(v46, type metadata accessor for CRLBoardIdentifier);
        sub_1004B84A4(v48, type metadata accessor for CRLBoardIdentifier);
        sub_1004B84A4(v36, type metadata accessor for CRLBoardIdentifier);
        v12 = (char *)v48;
        v17 = v80;
        v39 = v81;
      }
      goto LABEL_24;
    }
LABEL_3:
    sub_1004B84A4(v44, type metadata accessor for CRLBoardIdentifier);
    sub_1004CB800((uint64_t)v21, &qword_1013FE120);
LABEL_4:
    v22 = v92;
    v38 = v95;
    sub_1004B84A4(v95, type metadata accessor for CRLSpotlightManager.ChangeType);
    v34 = (v34 + 1) & v91;
    v35 = v39;
    if (((*(_QWORD *)(v37 + ((v34 >> 3) & 0xFFFFFFFFFFFFF8)) >> v34) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      a1 = v78;
      v3 = v77;
      goto LABEL_27;
    }
  }
  v57 = v22;
  v44 = v89;
  sub_1004B8460((uint64_t)v21, v89, type metadata accessor for CRLSpotlightManager.ChangeType);
  v58 = v57;
  v36 = (uint64_t)v88;
  if (swift_getEnumCaseMultiPayload(v42, v58) == 1)
    goto LABEL_3;
  v59 = v87;
  sub_1004B84E0(v42, v87, type metadata accessor for CRLBoardIdentifier);
  v60 = v89;
  v61 = static UUID.== infix(_:_:)(v89);
  sub_1004B8460(v60, (uint64_t)v17, type metadata accessor for CRLBoardIdentifier);
  v62 = (uint64_t)v17;
  v63 = v83;
  sub_1004B8460(v59, v83, type metadata accessor for CRLBoardIdentifier);
  if ((v61 & 1) == 0)
  {
    sub_1004B84A4(v63, type metadata accessor for CRLBoardIdentifier);
    sub_1004B84A4(v62, type metadata accessor for CRLBoardIdentifier);
    sub_1004B84A4(v59, type metadata accessor for CRLBoardIdentifier);
    sub_1004B84A4(v60, type metadata accessor for CRLBoardIdentifier);
    v17 = (char *)v62;
    v37 = v85;
    v12 = v86;
    v36 = (uint64_t)v88;
LABEL_24:
    sub_1004B84A4((uint64_t)v21, type metadata accessor for CRLSpotlightManager.ChangeType);
    goto LABEL_4;
  }
  v64 = *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20);
  v65 = *(_QWORD *)(v62 + v64);
  v66 = *(_QWORD *)(v62 + v64 + 8);
  v67 = (_QWORD *)(v63 + v64);
  v68 = v67[1];
  if (v65 != *v67 || v66 != v68)
  {
    v70 = _stringCompareWithSmolCheck(_:_:expecting:)(v65, v66, *v67, v68, 0);
    sub_1004B84A4(v63, type metadata accessor for CRLBoardIdentifier);
    sub_1004B84A4(v62, type metadata accessor for CRLBoardIdentifier);
    sub_1004B84A4(v87, type metadata accessor for CRLBoardIdentifier);
    sub_1004B84A4(v89, type metadata accessor for CRLBoardIdentifier);
    v17 = (char *)v62;
    v37 = v85;
    v12 = v86;
    v36 = (uint64_t)v88;
    if ((v70 & 1) != 0)
      goto LABEL_31;
    goto LABEL_24;
  }
  v75 = v63;
  v76 = v87;
  v36 = v89;
LABEL_30:
  sub_1004B84A4(v75, type metadata accessor for CRLBoardIdentifier);
  sub_1004B84A4(v62, type metadata accessor for CRLBoardIdentifier);
  sub_1004B84A4(v76, type metadata accessor for CRLBoardIdentifier);
  sub_1004B84A4(v36, type metadata accessor for CRLBoardIdentifier);
LABEL_31:
  sub_1004B84A4((uint64_t)v21, type metadata accessor for CRLSpotlightManager.ChangeType);
  sub_1004B84A4(v95, type metadata accessor for CRLSpotlightManager.ChangeType);
  swift_bridgeObjectRelease();
  sub_1004B84A4(v96, type metadata accessor for CRLSpotlightManager.ChangeType);
  sub_1004B8460(*(_QWORD *)(*v77 + 48) + v90, v78, type metadata accessor for CRLSpotlightManager.ChangeType);
  return 0;
}

uint64_t sub_100ADB6F4(uint64_t *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  v3 = v2;
  v6 = *v2;
  v7 = static Hasher._hash(seed:_:)(*(_QWORD *)(v6 + 40), a2);
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v14 = *v3;
    *v3 = 0x8000000000000000;
    sub_100AE9988(a2, v9, isUniquelyReferenced_nonNull_native);
    *v3 = v14;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(v6 + 48);
  if (*(_QWORD *)(v10 + 8 * v9) != a2)
  {
    v11 = ~v8;
    do
    {
      v9 = (v9 + 1) & v11;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v10 + 8 * v9) != a2);
  }
  result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_100ADB7EC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  char v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  __n128 v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v3 = v2;
  v6 = type metadata accessor for IndexPath(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_1004B7878(&qword_101405480, v12, (uint64_t)&protocol conformance descriptor for IndexPath);
  swift_bridgeObjectRetain(v10);
  v36 = a2;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  v17 = v10;
  v18 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v32 = v3;
    v33 = a1;
    v34 = ~v15;
    v35 = v7;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v21 = v17;
      v22 = v20;
      v20(v9, *(_QWORD *)(v17 + 48) + v19 * v16, v6);
      sub_1004B7878(&qword_101405D30, (uint64_t (*)(uint64_t))&type metadata accessor for IndexPath, (uint64_t)&protocol conformance descriptor for IndexPath);
      v23 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v36);
      v24 = *(void (**)(char *, uint64_t))(v35 + 8);
      v24(v9, v6);
      if ((v23 & 1) != 0)
        break;
      v16 = (v16 + 1) & v34;
      v17 = v21;
      v20 = v22;
      if (((*(_QWORD *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v21);
        v3 = v32;
        a1 = v33;
        v25 = v35;
        goto LABEL_7;
      }
    }
    v31 = swift_bridgeObjectRelease(v21);
    ((void (*)(uint64_t, uint64_t, __n128))v24)(v36, v6, v31);
    v22(v33, *(_QWORD *)(*v32 + 48) + v19 * v16, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v25 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v27 = v36;
    v20(v9, v36, v6);
    v37 = *v3;
    *v3 = 0x8000000000000000;
    sub_100AE9AA8((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    v28 = *v3;
    *v3 = v37;
    v29 = swift_bridgeObjectRelease(v28);
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v25 + 32))(a1, v27, v6, v29);
    return 1;
  }
}

uint64_t sub_100ADBA48(Swift::Int *a1, void *a2)
{
  return sub_100ADBA5C(a1, a2, type metadata accessor for CRLSceneInfo, &qword_1013DE780);
}

uint64_t sub_100ADBA5C(Swift::Int *a1, void *a2, uint64_t (*a3)(_QWORD), uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v7;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  Swift::Int v16;
  Swift::Int v17;
  uint64_t v18;
  unint64_t v19;
  id v20;
  char v21;
  uint64_t v22;
  id v23;
  char v24;
  void *v25;
  id v26;
  Swift::Int v27;
  unint64_t v28;
  uint64_t v29;
  id v30;
  char isUniquelyReferenced_nonNull_native;
  id v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v39;
  Swift::Int v40;

  v7 = v4;
  v10 = *v4;
  if ((*v4 & 0xC000000000000001) != 0)
  {
    if (v10 < 0)
      v11 = *v4;
    else
      v11 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v4);
    v12 = a2;
    v13 = __CocoaSet.member(for:)();

    if (v13)
    {
      swift_bridgeObjectRelease(v10);

      v39 = v13;
      v14 = a3(0);
      swift_unknownObjectRetain(v13);
      swift_dynamicCast(&v40, &v39, (char *)&type metadata for Swift.AnyObject + 8, v14, 7);
      *a1 = v40;
      swift_unknownObjectRelease(v13);
      return 0;
    }
    result = __CocoaSet.count.getter(v11);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v27 = sub_100ADC328(v11, result + 1, a4, a3);
    v40 = v27;
    v28 = *(_QWORD *)(v27 + 16);
    if (*(_QWORD *)(v27 + 24) <= v28)
    {
      v34 = v28 + 1;
      v35 = v12;
      sub_100AE2EEC(v34, a4);
      v29 = v40;
    }
    else
    {
      v29 = v27;
      v30 = v12;
    }
    sub_100AE3A24((uint64_t)v12, v29);
    v36 = *v7;
    *v7 = v29;
    swift_bridgeObjectRelease(v36);
    *a1 = (Swift::Int)v12;
  }
  else
  {
    v16 = *(_QWORD *)(v10 + 40);
    swift_bridgeObjectRetain(v10);
    v17 = NSObject._rawHashValue(seed:)(v16);
    v18 = -1 << *(_BYTE *)(v10 + 32);
    v19 = v17 & ~v18;
    if (((*(_QWORD *)(v10 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) != 0)
    {
      a3(0);
      v20 = *(id *)(*(_QWORD *)(v10 + 48) + 8 * v19);
      v21 = static NSObject.== infix(_:_:)(v20, a2);

      if ((v21 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease(v10);
        v25 = *(void **)(*(_QWORD *)(*v7 + 48) + 8 * v19);
        *a1 = (Swift::Int)v25;
        v26 = v25;
        return 0;
      }
      v22 = ~v18;
      while (1)
      {
        v19 = (v19 + 1) & v22;
        if (((*(_QWORD *)(v10 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) == 0)
          break;
        v23 = *(id *)(*(_QWORD *)(v10 + 48) + 8 * v19);
        v24 = static NSObject.== infix(_:_:)(v23, a2);

        if ((v24 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease(v10);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v7);
    v40 = *v7;
    *v7 = 0x8000000000000000;
    v32 = a2;
    sub_100AE6D64((uint64_t)v32, v19, isUniquelyReferenced_nonNull_native, a4, a3);
    v33 = *v7;
    *v7 = v40;
    swift_bridgeObjectRelease(v33);
    *a1 = (Swift::Int)v32;
  }
  return 1;
}

uint64_t sub_100ADBD08(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  Swift::Int v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  char isUniquelyReferenced_nonNull_native;
  __int128 v14;
  uint64_t v16;
  _BYTE v17[40];

  v3 = v2;
  v6 = *v2;
  v7 = *(_QWORD *)(*v2 + 40);
  swift_bridgeObjectRetain(v6);
  v8 = AnyHashable._rawHashValue(seed:)(v7);
  v9 = -1 << *(_BYTE *)(v6 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    while (1)
    {
      sub_1004B8968(*(_QWORD *)(v6 + 48) + 40 * v10, (uint64_t)v17);
      v12 = static AnyHashable.== infix(_:_:)(v17, a2);
      sub_1004B89A4((uint64_t)v17);
      if ((v12 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
      if (((*(_QWORD *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        goto LABEL_5;
    }
    swift_bridgeObjectRelease();
    sub_1004B89A4(a2);
    sub_1004B8968(*(_QWORD *)(*v3 + 48) + 40 * v10, a1);
    return 0;
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1004B8968(a2, (uint64_t)v17);
    v16 = *v3;
    *v3 = 0x8000000000000000;
    sub_100AE9CFC((uint64_t)v17, v10, isUniquelyReferenced_nonNull_native);
    *v3 = v16;
    swift_bridgeObjectRelease();
    v14 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v14;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    return 1;
  }
}

Swift::Int sub_100ADBE80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v15;
  Swift::Int result;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[9];
  uint64_t v29;
  uint64_t v30;

  v4 = type metadata accessor for UUID(0);
  v27 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v28[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    sub_1004B804C(&qword_1014053A0);
    v7 = static _SetStorage.convert(_:capacity:)(a1, a2);
    v30 = v7;
    v8 = __CocoaSet.makeIterator()(a1);
    v9 = __CocoaSet.Iterator.next()(v8);
    if (v9)
    {
      v10 = v9;
      v11 = type metadata accessor for CRLTransactableHashableWrapper();
      do
      {
        v28[0] = v10;
        swift_dynamicCast(&v29, v28, (char *)&type metadata for Swift.AnyObject + 8, v11, 7);
        v7 = v30;
        v22 = *(_QWORD *)(v30 + 16);
        if (*(_QWORD *)(v30 + 24) <= v22)
        {
          sub_100ADCB34(v22 + 1);
          v7 = v30;
        }
        v12 = v29;
        Hasher.init(_seed:)(v28, *(_QWORD *)(v7 + 40));
        v13 = *(_QWORD *)(v12 + 24);
        ObjectType = swift_getObjectType(*(_QWORD *)(v12 + 16));
        (*(void (**)(uint64_t, uint64_t))(v13 + 32))(ObjectType, v13);
        v15 = sub_1004B7878((unint64_t *)&qword_1013DE630, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        dispatch thunk of Hashable.hash(into:)(v28, v4, v15);
        (*(void (**)(char *, uint64_t))(v27 + 8))(v6, v4);
        result = Hasher._finalize()();
        v17 = v7 + 56;
        v18 = -1 << *(_BYTE *)(v7 + 32);
        v19 = result & ~v18;
        v20 = v19 >> 6;
        if (((-1 << v19) & ~*(_QWORD *)(v7 + 56 + 8 * (v19 >> 6))) != 0)
        {
          v21 = __clz(__rbit64((-1 << v19) & ~*(_QWORD *)(v7 + 56 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v23 = 0;
          v24 = (unint64_t)(63 - v18) >> 6;
          do
          {
            if (++v20 == v24 && (v23 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v25 = v20 == v24;
            if (v20 == v24)
              v20 = 0;
            v23 |= v25;
            v26 = *(_QWORD *)(v17 + 8 * v20);
          }
          while (v26 == -1);
          v21 = __clz(__rbit64(~v26)) + (v20 << 6);
        }
        *(_QWORD *)(v17 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
        *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v21) = v12;
        ++*(_QWORD *)(v7 + 16);
        v10 = __CocoaSet.Iterator.next()(result);
      }
      while (v10);
    }
    swift_release(v8);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v7;
}

Swift::Int sub_100ADC114(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int result;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (a2)
  {
    sub_1004B804C(a3);
    v10 = static _SetStorage.convert(_:capacity:)(a1, a2);
    v29 = v10;
    v11 = __CocoaSet.makeIterator()(a1);
    v12 = __CocoaSet.Iterator.next()(v11);
    if (v12)
    {
      v13 = v12;
      v14 = sub_1004B8930(0, a4, a5);
      do
      {
        v27 = v13;
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v14, 7);
        v10 = v29;
        v22 = *(_QWORD *)(v29 + 16);
        if (*(_QWORD *)(v29 + 24) <= v22)
        {
          sub_100AE2EEC(v22 + 1, a3);
          v10 = v29;
        }
        v15 = v28;
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v10 + 40));
        v17 = v10 + 56;
        v18 = -1 << *(_BYTE *)(v10 + 32);
        v19 = result & ~v18;
        v20 = v19 >> 6;
        if (((-1 << v19) & ~*(_QWORD *)(v10 + 56 + 8 * (v19 >> 6))) != 0)
        {
          v21 = __clz(__rbit64((-1 << v19) & ~*(_QWORD *)(v10 + 56 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v23 = 0;
          v24 = (unint64_t)(63 - v18) >> 6;
          do
          {
            if (++v20 == v24 && (v23 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v25 = v20 == v24;
            if (v20 == v24)
              v20 = 0;
            v23 |= v25;
            v26 = *(_QWORD *)(v17 + 8 * v20);
          }
          while (v26 == -1);
          v21 = __clz(__rbit64(~v26)) + (v20 << 6);
        }
        *(_QWORD *)(v17 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
        *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v21) = v15;
        ++*(_QWORD *)(v10 + 16);
        v13 = __CocoaSet.Iterator.next()(result);
      }
      while (v13);
    }
    swift_release(v11);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v10;
}

Swift::Int sub_100ADC314(uint64_t a1, uint64_t a2)
{
  return sub_100ADC328(a1, a2, &qword_101405430, type metadata accessor for CRLCollaborationParticipant);
}

Swift::Int sub_100ADC328(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int result;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (a2)
  {
    sub_1004B804C(a3);
    v8 = static _SetStorage.convert(_:capacity:)(a1, a2);
    v27 = v8;
    v9 = __CocoaSet.makeIterator()(a1);
    v10 = __CocoaSet.Iterator.next()();
    if (v10)
    {
      v11 = v10;
      v12 = a4(0);
      do
      {
        v25 = v11;
        swift_dynamicCast(&v26, &v25, (char *)&type metadata for Swift.AnyObject + 8, v12, 7);
        v8 = v27;
        v20 = *(_QWORD *)(v27 + 16);
        if (*(_QWORD *)(v27 + 24) <= v20)
        {
          sub_100AE2EEC(v20 + 1, a3);
          v8 = v27;
        }
        v13 = v26;
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
        v15 = v8 + 56;
        v16 = -1 << *(_BYTE *)(v8 + 32);
        v17 = result & ~v16;
        v18 = v17 >> 6;
        if (((-1 << v17) & ~*(_QWORD *)(v8 + 56 + 8 * (v17 >> 6))) != 0)
        {
          v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v8 + 56 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v21 = 0;
          v22 = (unint64_t)(63 - v16) >> 6;
          do
          {
            if (++v18 == v22 && (v21 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v23 = v18 == v22;
            if (v18 == v22)
              v18 = 0;
            v21 |= v23;
            v24 = *(_QWORD *)(v15 + 8 * v18);
          }
          while (v24 == -1);
          v19 = __clz(__rbit64(~v24)) + (v18 << 6);
        }
        *(_QWORD *)(v15 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
        *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v19) = v13;
        ++*(_QWORD *)(v8 + 16);
        v11 = __CocoaSet.Iterator.next()();
      }
      while (v11);
    }
    swift_release(v9);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v8;
}

uint64_t sub_100ADC51C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (a2)
  {
    sub_1004B804C((uint64_t *)&unk_1013DEA00);
    v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
    v25 = v4;
    v5 = __CocoaSet.makeIterator()(a1);
    v6 = __CocoaSet.Iterator.next()(v5);
    if (v6)
    {
      v7 = v6;
      v8 = type metadata accessor for CalculateExpression(0);
      do
      {
        v23 = v7;
        swift_dynamicCast(&v24, &v23, (char *)&type metadata for Swift.AnyObject + 8, v8, 7);
        v4 = v25;
        v18 = *(_QWORD *)(v25 + 16);
        if (*(_QWORD *)(v25 + 24) <= v18)
        {
          sub_100AE14CC(v18 + 1);
          v4 = v25;
        }
        v9 = v24;
        v23 = v24;
        v10 = *(_QWORD *)(v4 + 40);
        v11 = sub_1004B7878((unint64_t *)&unk_1013E8820, (uint64_t (*)(uint64_t))&type metadata accessor for CalculateExpression, (uint64_t)&protocol conformance descriptor for CalculateExpression);
        result = dispatch thunk of Hashable._rawHashValue(seed:)(v10, v8, v11);
        v13 = v4 + 56;
        v14 = -1 << *(_BYTE *)(v4 + 32);
        v15 = result & ~v14;
        v16 = v15 >> 6;
        if (((-1 << v15) & ~*(_QWORD *)(v4 + 56 + 8 * (v15 >> 6))) != 0)
        {
          v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v4 + 56 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v19 = 0;
          v20 = (unint64_t)(63 - v14) >> 6;
          do
          {
            if (++v16 == v20 && (v19 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v21 = v16 == v20;
            if (v16 == v20)
              v16 = 0;
            v19 |= v21;
            v22 = *(_QWORD *)(v13 + 8 * v16);
          }
          while (v22 == -1);
          v17 = __clz(__rbit64(~v22)) + (v16 << 6);
        }
        *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v17) = v9;
        ++*(_QWORD *)(v4 + 16);
        v7 = __CocoaSet.Iterator.next()(result);
      }
      while (v7);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  return v4;
}

Swift::Int sub_100ADC73C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::UInt v9;
  Swift::Int result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD v21[9];
  Swift::UInt v22;
  uint64_t v23;

  if (a2)
  {
    sub_1004B804C(&qword_1014054B0);
    v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
    v23 = v4;
    v5 = __CocoaSet.makeIterator()(a1);
    v6 = __CocoaSet.Iterator.next()(v5);
    if (v6)
    {
      v7 = v6;
      v8 = type metadata accessor for CRLCloudAccountChangeObserverWrapper();
      do
      {
        v21[0] = v7;
        swift_dynamicCast(&v22, v21, (char *)&type metadata for Swift.AnyObject + 8, v8, 7);
        v4 = v23;
        v16 = *(_QWORD *)(v23 + 16);
        if (*(_QWORD *)(v23 + 24) <= v16)
        {
          sub_100AE17DC(v16 + 1);
          v4 = v23;
        }
        v9 = v22;
        Hasher.init(_seed:)(v21, *(_QWORD *)(v4 + 40));
        Hasher._combine(_:)(v9);
        result = Hasher._finalize()();
        v11 = v4 + 56;
        v12 = -1 << *(_BYTE *)(v4 + 32);
        v13 = result & ~v12;
        v14 = v13 >> 6;
        if (((-1 << v13) & ~*(_QWORD *)(v4 + 56 + 8 * (v13 >> 6))) != 0)
        {
          v15 = __clz(__rbit64((-1 << v13) & ~*(_QWORD *)(v4 + 56 + 8 * (v13 >> 6)))) | v13 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v17 = 0;
          v18 = (unint64_t)(63 - v12) >> 6;
          do
          {
            if (++v14 == v18 && (v17 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v19 = v14 == v18;
            if (v14 == v18)
              v14 = 0;
            v17 |= v19;
            v20 = *(_QWORD *)(v11 + 8 * v14);
          }
          while (v20 == -1);
          v15 = __clz(__rbit64(~v20)) + (v14 << 6);
        }
        *(_QWORD *)(v11 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = v9;
        ++*(_QWORD *)(v4 + 16);
        v7 = __CocoaSet.Iterator.next()(result);
      }
      while (v7);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v4;
}

Swift::Int sub_100ADC940(uint64_t a1, uint64_t a2)
{
  return sub_100ADC114(a1, a2, (uint64_t *)&unk_1013DE990, (unint64_t *)&qword_1013E1770, CKRecordZoneID_ptr);
}

Swift::Int sub_100ADC95C(uint64_t a1, uint64_t a2)
{
  return sub_100ADC114(a1, a2, &qword_101405608, (unint64_t *)&qword_1013E1760, NSLayoutConstraint_ptr);
}

void *sub_100ADC978(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v14[4];
  uint64_t v15;
  uint64_t v16;

  if (a2)
  {
    sub_1004B804C(&qword_1014055C8);
    v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
    v16 = v4;
    v5 = __CocoaSet.makeIterator()(a1);
    v6 = __CocoaSet.Iterator.next()(v5);
    if (v6)
    {
      v7 = v6;
      v8 = _s8ItemDataCMa(0);
      do
      {
        *(_QWORD *)&v14[0] = v7;
        swift_dynamicCast(&v15, v14, (char *)&type metadata for Swift.AnyObject + 8, v8, 7);
        v4 = v16;
        v12 = *(_QWORD *)(v16 + 16);
        if (*(_QWORD *)(v16 + 24) <= v12)
        {
          sub_100AE221C(v12 + 1);
          v4 = v16;
        }
        v9 = v15;
        Hasher.init(_seed:)(v14, *(_QWORD *)(v4 + 40));
        sub_1008DF544(v14, *(_QWORD *)(v9 + 16));
        sub_100A1C5DC(v14);
        v10 = Hasher._finalize()();
        v11 = _HashTable.nextHole(atOrAfter:)(v10 & ~(-1 << *(_BYTE *)(v4 + 32)), v4 + 56, ~(-1 << *(_BYTE *)(v4 + 32)));
        *(_QWORD *)(v4 + 56 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v11) = v9;
        ++*(_QWORD *)(v4 + 16);
        v7 = __CocoaSet.Iterator.next()(v11);
      }
      while (v7);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return &_swiftEmptySetSingleton;
  }
  return (void *)v4;
}

Swift::Int sub_100ADCB20(uint64_t a1, uint64_t a2)
{
  return sub_100ADC328(a1, a2, &qword_1013DE780, type metadata accessor for CRLSceneInfo);
}

void sub_100ADCB34(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t ObjectType;
  uint64_t v26;
  Swift::Int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD v41[9];

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v40 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1014053A0);
  v8 = static _SetStorage.resize(original:capacity:move:)(v7, a1, 1);
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_39;
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v11 = *(_QWORD *)(v7 + 56);
  v39 = (_QWORD *)(v7 + 56);
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & v11;
  v37 = v2;
  v38 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 56;
  swift_retain(v7);
  v15 = 0;
  while (1)
  {
    if (v13)
    {
      v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v18 = v17 | (v15 << 6);
      goto LABEL_26;
    }
    v19 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return;
    }
    if (v19 >= v38)
      goto LABEL_35;
    v20 = v39[v19];
    ++v15;
    if (!v20)
    {
      v15 = v19 + 1;
      if (v19 + 1 >= v38)
        goto LABEL_35;
      v20 = v39[v15];
      if (!v20)
      {
        v15 = v19 + 2;
        if (v19 + 2 >= v38)
          goto LABEL_35;
        v20 = v39[v15];
        if (!v20)
          break;
      }
    }
LABEL_25:
    v13 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v15 << 6);
LABEL_26:
    v22 = v7;
    v23 = *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v18);
    Hasher.init(_seed:)(v41, *(_QWORD *)(v9 + 40));
    v24 = *(_QWORD *)(v23 + 24);
    ObjectType = swift_getObjectType(*(_QWORD *)(v23 + 16));
    (*(void (**)(uint64_t, uint64_t))(v24 + 32))(ObjectType, v24);
    v26 = sub_1004B7878((unint64_t *)&qword_1013DE630, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v41, v4, v26);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v6, v4);
    v27 = Hasher._finalize()();
    v28 = -1 << *(_BYTE *)(v9 + 32);
    v29 = v27 & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v14 + 8 * (v29 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v14 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v14 + 8 * v30);
      }
      while (v34 == -1);
      v16 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v14 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v16) = v23;
    ++*(_QWORD *)(v9 + 16);
    v7 = v22;
  }
  v21 = v19 + 3;
  if (v21 < v38)
  {
    v20 = v39[v21];
    if (!v20)
    {
      while (1)
      {
        v15 = v21 + 1;
        if (__OFADD__(v21, 1))
          goto LABEL_41;
        if (v15 >= v38)
          goto LABEL_35;
        v20 = v39[v15];
        ++v21;
        if (v20)
          goto LABEL_25;
      }
    }
    v15 = v21;
    goto LABEL_25;
  }
LABEL_35:
  swift_release(v7);
  v2 = v37;
  v35 = 1 << *(_BYTE *)(v7 + 32);
  if (v35 > 63)
    bzero(v39, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v39 = -1 << v35;
  *(_QWORD *)(v7 + 16) = 0;
LABEL_39:
  swift_release(v7);
  *v2 = v9;
}

void sub_100ADCEBC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  Swift::UInt v21;
  int v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  uint64_t v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_1004B804C(&qword_101405350);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v32 = v2;
    v7 = 0;
    v33 = (_QWORD *)(v3 + 56);
    v8 = 1 << *(_BYTE *)(v3 + 32);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v3 + 56);
    v11 = (unint64_t)(v8 + 63) >> 6;
    v12 = v5 + 56;
    while (1)
    {
      if (v10)
      {
        v15 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v16 = v15 | (v7 << 6);
      }
      else
      {
        v17 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return;
        }
        if (v17 >= v11)
          goto LABEL_39;
        v18 = v33[v17];
        ++v7;
        if (!v18)
        {
          v7 = v17 + 1;
          if (v17 + 1 >= v11)
            goto LABEL_39;
          v18 = v33[v7];
          if (!v18)
          {
            v7 = v17 + 2;
            if (v17 + 2 >= v11)
              goto LABEL_39;
            v18 = v33[v7];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v11)
              {
LABEL_39:
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                v2 = v32;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v33[v19];
              if (!v18)
              {
                while (1)
                {
                  v7 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_45;
                  if (v7 >= v11)
                    goto LABEL_39;
                  v18 = v33[v7];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v7 = v19;
            }
          }
        }
LABEL_26:
        v10 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }
      v20 = *(_QWORD *)(v3 + 48) + 16 * v16;
      v21 = *(_QWORD *)v20;
      v22 = *(unsigned __int8 *)(v20 + 8);
      Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
      if (v22 == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v21);
      }
      v23 = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = v23 & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v12 + 8 * v26);
        }
        while (v30 == -1);
        v13 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = *(_QWORD *)(v6 + 48) + 16 * v13;
      *(_QWORD *)v14 = v21;
      *(_BYTE *)(v14 + 8) = v22;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  swift_release(v3);
  *v2 = v6;
}

void sub_100ADD1B0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  Swift::Int v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char v45;
  unint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  int64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD v71[9];
  int v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_1004B804C(&qword_101405368);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v55 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v53 = v2;
    v54 = (unint64_t)(v7 + 63) >> 6;
    v10 = v5 + 56;
    swift_retain(v3);
    v11 = 0;
    v56 = v3;
    v57 = v6;
    while (1)
    {
      if (v9)
      {
        v59 = (v9 - 1) & v9;
        v60 = v11;
        v18 = __clz(__rbit64(v9)) | (v11 << 6);
      }
      else
      {
        v19 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return;
        }
        if (v19 >= v54)
          goto LABEL_39;
        v20 = v55[v19];
        v21 = v11 + 1;
        if (!v20)
        {
          v21 = v11 + 2;
          if (v11 + 2 >= v54)
            goto LABEL_39;
          v20 = v55[v21];
          if (!v20)
          {
            v21 = v11 + 3;
            if (v11 + 3 >= v54)
              goto LABEL_39;
            v20 = v55[v21];
            if (!v20)
            {
              v22 = v11 + 4;
              if (v11 + 4 >= v54)
              {
LABEL_39:
                swift_release(v3);
                v2 = v53;
                v49 = 1 << *(_BYTE *)(v3 + 32);
                if (v49 > 63)
                  bzero(v55, ((unint64_t)(v49 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v55 = -1 << v49;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v20 = v55[v22];
              if (!v20)
              {
                while (1)
                {
                  v21 = v22 + 1;
                  if (__OFADD__(v22, 1))
                    goto LABEL_45;
                  if (v21 >= v54)
                    goto LABEL_39;
                  v20 = v55[v21];
                  ++v22;
                  if (v20)
                    goto LABEL_26;
                }
              }
              v21 = v11 + 4;
            }
          }
        }
LABEL_26:
        v59 = (v20 - 1) & v20;
        v60 = v21;
        v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      v23 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 112 * v18);
      v24 = v23[2];
      v25 = v23[3];
      v69 = v23[4];
      v70 = v23[1];
      v66 = v23[5];
      v26 = v23[7];
      v61 = v23[6];
      v62 = *v23;
      v28 = v23[8];
      v27 = v23[9];
      v30 = v23[10];
      v29 = v23[11];
      v31 = v23[12];
      v68 = v23[13];
      Hasher.init(_seed:)(v71, *(_QWORD *)(v6 + 40));
      v64 = v26;
      v65 = v25;
      v58 = v29;
      v63 = v31;
      v67 = v30;
      if (v31)
      {
        Hasher._combine(_:)(1u);
        v32 = v26;
        v33 = v24;
        v72 = v24;
        v73 = BYTE4(v24) & 1;
        v74 = v25;
        v75 = v69;
        v34 = v61;
        v76 = v66;
        v77 = v61;
        v78 = v32;
        v79 = v28;
        v80 = v27;
        v81 = v30;
        v82 = v29;
        v83 = v31;
        swift_bridgeObjectRetain(v29);
        swift_bridgeObjectRetain(v31);
        swift_bridgeObjectRetain(v68);
        swift_bridgeObjectRetain(v61);
        swift_bridgeObjectRetain(v27);
        v35 = sub_1004B804C(&qword_1013F3EB8);
        CRExtensible.hash(into:)(v71, v35);
        sub_1006C4BDC();
        v52 = v31;
        v51 = v29;
        v36 = v27;
        v50 = v27;
        v37 = v28;
        v38 = v62;
        v39 = v66;
        sub_1004C4174(v62, v70, v33, v25, v69, v66, v61, v64, v28, v50, v67, v51, v52, v68);
        v40 = v33;
      }
      else
      {
        v36 = v27;
        v37 = v28;
        v38 = v62;
        Hasher._combine(_:)(0);
        v40 = v24;
        v39 = v66;
        v34 = v61;
      }
      v41 = Hasher._finalize()();
      v6 = v57;
      v42 = -1 << *(_BYTE *)(v57 + 32);
      v43 = v41 & ~v42;
      v44 = v43 >> 6;
      if (((-1 << v43) & ~*(_QWORD *)(v10 + 8 * (v43 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v43) & ~*(_QWORD *)(v10 + 8 * (v43 >> 6)))) | v43 & 0x7FFFFFFFFFFFFFC0;
        v13 = v63;
        v14 = v36;
        v16 = v67;
        v15 = v68;
      }
      else
      {
        v45 = 0;
        v46 = (unint64_t)(63 - v42) >> 6;
        v13 = v63;
        v14 = v36;
        v16 = v67;
        v15 = v68;
        do
        {
          if (++v44 == v46 && (v45 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v47 = v44 == v46;
          if (v44 == v46)
            v44 = 0;
          v45 |= v47;
          v48 = *(_QWORD *)(v10 + 8 * v44);
        }
        while (v48 == -1);
        v12 = __clz(__rbit64(~v48)) + (v44 << 6);
      }
      *(_QWORD *)(v10 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v17 = (uint64_t *)(*(_QWORD *)(v57 + 48) + 112 * v12);
      *v17 = v38;
      v17[1] = v70;
      v17[2] = v40;
      v17[3] = v65;
      v17[4] = v69;
      v17[5] = v39;
      v17[6] = v34;
      v17[7] = v64;
      v17[8] = v37;
      v17[9] = v14;
      v9 = v59;
      v17[10] = v16;
      v17[11] = v58;
      v17[12] = v13;
      v17[13] = v15;
      ++*(_QWORD *)(v57 + 16);
      v3 = v56;
      v11 = v60;
    }
  }
  swift_release(v3);
  *v2 = v6;
}

void sub_100ADD644(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  Swift::Int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  _QWORD *v37;
  _QWORD v38[9];

  v4 = v3;
  v5 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v3 + 24);
  sub_1004B804C(a2);
  v7 = static _SetStorage.resize(original:capacity:move:)(v5, v6, 1);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v35 = v4;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v37 = (_QWORD *)(v5 + 56);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 56);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = v7 + 56;
    swift_retain(v5);
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v18 = v17 | (v14 << 6);
      }
      else
      {
        v19 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return;
        }
        if (v19 >= v12)
          goto LABEL_39;
        v20 = v37[v19];
        ++v14;
        if (!v20)
        {
          v14 = v19 + 1;
          if (v19 + 1 >= v12)
            goto LABEL_39;
          v20 = v37[v14];
          if (!v20)
          {
            v14 = v19 + 2;
            if (v19 + 2 >= v12)
              goto LABEL_39;
            v20 = v37[v14];
            if (!v20)
            {
              v21 = v19 + 3;
              if (v21 >= v12)
              {
LABEL_39:
                swift_release(v5);
                v4 = v35;
                v34 = 1 << *(_BYTE *)(v5 + 32);
                if (v34 > 63)
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v37 = -1 << v34;
                *(_QWORD *)(v5 + 16) = 0;
                break;
              }
              v20 = v37[v21];
              if (!v20)
              {
                while (1)
                {
                  v14 = v21 + 1;
                  if (__OFADD__(v21, 1))
                    goto LABEL_45;
                  if (v14 >= v12)
                    goto LABEL_39;
                  v20 = v37[v14];
                  ++v21;
                  if (v20)
                    goto LABEL_26;
                }
              }
              v14 = v21;
            }
          }
        }
LABEL_26:
        v11 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v14 << 6);
      }
      v22 = *(_QWORD *)(v5 + 48) + 16 * v18;
      v23 = *(_QWORD *)v22;
      v24 = *(unsigned __int8 *)(v22 + 8);
      Hasher.init(_seed:)(v38, *(_QWORD *)(v8 + 40));
      if (v24 == 255)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        v25 = sub_1004B804C(a3);
        CRExtensible.hash(into:)(v38, v25);
      }
      v26 = Hasher._finalize()();
      v27 = -1 << *(_BYTE *)(v8 + 32);
      v28 = v26 & ~v27;
      v29 = v28 >> 6;
      if (((-1 << v28) & ~*(_QWORD *)(v13 + 8 * (v28 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v13 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v30 = 0;
        v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v32 = v29 == v31;
          if (v29 == v31)
            v29 = 0;
          v30 |= v32;
          v33 = *(_QWORD *)(v13 + 8 * v29);
        }
        while (v33 == -1);
        v15 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(_QWORD *)(v13 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = *(_QWORD *)(v8 + 48) + 16 * v15;
      *(_QWORD *)v16 = v23;
      *(_BYTE *)(v16 + 8) = v24;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release(v5);
  *v4 = v8;
}

void sub_100ADD960(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  int v19;
  Swift::UInt8 v20;
  Swift::Int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  uint64_t v32[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_1004B804C(&qword_101405380);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v30 = v2;
    v7 = 0;
    v31 = (_QWORD *)(v3 + 56);
    v8 = 1 << *(_BYTE *)(v3 + 32);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v3 + 56);
    v11 = (unint64_t)(v8 + 63) >> 6;
    v12 = v5 + 56;
    while (1)
    {
      if (v10)
      {
        v14 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v15 = v14 | (v7 << 6);
      }
      else
      {
        v16 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return;
        }
        if (v16 >= v11)
          goto LABEL_39;
        v17 = v31[v16];
        ++v7;
        if (!v17)
        {
          v7 = v16 + 1;
          if (v16 + 1 >= v11)
            goto LABEL_39;
          v17 = v31[v7];
          if (!v17)
          {
            v7 = v16 + 2;
            if (v16 + 2 >= v11)
              goto LABEL_39;
            v17 = v31[v7];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v11)
              {
LABEL_39:
                v29 = 1 << *(_BYTE *)(v3 + 32);
                if (v29 > 63)
                  bzero(v31, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v31 = -1 << v29;
                v2 = v30;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v17 = v31[v18];
              if (!v17)
              {
                while (1)
                {
                  v7 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_45;
                  if (v7 >= v11)
                    goto LABEL_39;
                  v17 = v31[v7];
                  ++v18;
                  if (v17)
                    goto LABEL_26;
                }
              }
              v7 = v18;
            }
          }
        }
LABEL_26:
        v10 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v7 << 6);
      }
      v19 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v15);
      Hasher.init(_seed:)(v32, *(_QWORD *)(v6 + 40));
      if (v19 == 2)
      {
        v20 = 0;
      }
      else
      {
        v20 = v19 & 1;
        Hasher._combine(_:)(1u);
      }
      Hasher._combine(_:)(v20);
      v21 = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v6 + 32);
      v23 = v21 & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v12 + 8 * v24);
        }
        while (v28 == -1);
        v13 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_BYTE *)(*(_QWORD *)(v6 + 48) + v13) = v19;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  swift_release(v3);
  *v2 = v6;
}

void sub_100ADDC44(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  Swift::UInt32 v21;
  int v22;
  Swift::UInt32 v23;
  Swift::Int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  _QWORD *v34;
  uint64_t v35[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_1004B804C(&qword_1014056A0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v33 = v2;
    v7 = 0;
    v34 = (_QWORD *)(v3 + 56);
    v8 = 1 << *(_BYTE *)(v3 + 32);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v3 + 56);
    v11 = (unint64_t)(v8 + 63) >> 6;
    v12 = v5 + 56;
    while (1)
    {
      if (v10)
      {
        v15 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v16 = v15 | (v7 << 6);
      }
      else
      {
        v17 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
          return;
        }
        if (v17 >= v11)
          goto LABEL_42;
        v18 = v34[v17];
        ++v7;
        if (!v18)
        {
          v7 = v17 + 1;
          if (v17 + 1 >= v11)
            goto LABEL_42;
          v18 = v34[v7];
          if (!v18)
          {
            v7 = v17 + 2;
            if (v17 + 2 >= v11)
              goto LABEL_42;
            v18 = v34[v7];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v11)
              {
LABEL_42:
                v32 = 1 << *(_BYTE *)(v3 + 32);
                if (v32 > 63)
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v34 = -1 << v32;
                v2 = v33;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v34[v19];
              if (!v18)
              {
                while (1)
                {
                  v7 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_48;
                  if (v7 >= v11)
                    goto LABEL_42;
                  v18 = v34[v7];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v7 = v19;
            }
          }
        }
LABEL_26:
        v10 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }
      v20 = *(_QWORD *)(v3 + 48) + 8 * v16;
      v21 = *(_DWORD *)v20;
      v22 = *(unsigned __int8 *)(v20 + 4);
      Hasher.init(_seed:)(v35, *(_QWORD *)(v6 + 40));
      if (v22 == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        if ((v21 & 0x7FFFFFFF) != 0)
          v23 = v21;
        else
          v23 = 0;
        Hasher._combine(_:)(v23);
      }
      v24 = Hasher._finalize()();
      v25 = -1 << *(_BYTE *)(v6 + 32);
      v26 = v24 & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_47;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v12 + 8 * v27);
        }
        while (v31 == -1);
        v13 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = *(_QWORD *)(v6 + 48) + 8 * v13;
      *(_DWORD *)v14 = v21;
      *(_BYTE *)(v14 + 4) = v22;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  swift_release(v3);
  *v2 = v6;
}

void sub_100ADDF3C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  Swift::Int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  _QWORD *v35;
  _QWORD v36[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_1004B804C(&qword_101405388);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v35 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v34 = (unint64_t)(v7 + 63) >> 6;
    v10 = v5 + 56;
    swift_retain(v3);
    v11 = 0;
    while (1)
    {
      if (v9)
      {
        v14 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v15 = v14 | (v11 << 6);
      }
      else
      {
        v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return;
        }
        if (v16 >= v34)
          goto LABEL_39;
        v17 = v35[v16];
        ++v11;
        if (!v17)
        {
          v11 = v16 + 1;
          if (v16 + 1 >= v34)
            goto LABEL_39;
          v17 = v35[v11];
          if (!v17)
          {
            v11 = v16 + 2;
            if (v16 + 2 >= v34)
              goto LABEL_39;
            v17 = v35[v11];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v34)
              {
LABEL_39:
                swift_release(v3);
                v33 = 1 << *(_BYTE *)(v3 + 32);
                if (v33 > 63)
                  bzero(v35, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v35 = -1 << v33;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v17 = v35[v18];
              if (!v17)
              {
                while (1)
                {
                  v11 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_45;
                  if (v11 >= v34)
                    goto LABEL_39;
                  v17 = v35[v11];
                  ++v18;
                  if (v17)
                    goto LABEL_26;
                }
              }
              v11 = v18;
            }
          }
        }
LABEL_26:
        v9 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      v19 = v3;
      v20 = *(_QWORD *)(v3 + 48) + 24 * v15;
      v22 = *(_QWORD *)v20;
      v21 = *(_QWORD *)(v20 + 8);
      v23 = *(unsigned __int8 *)(v20 + 16);
      Hasher.init(_seed:)(v36, *(_QWORD *)(v6 + 40));
      if (v23 == 255)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        v24 = sub_1004B804C(&qword_1013F3890);
        CRExtensible.hash(into:)(v36, v24);
      }
      v25 = Hasher._finalize()();
      v26 = -1 << *(_BYTE *)(v6 + 32);
      v27 = v25 & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v10 + 8 * (v27 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v10 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v10 + 8 * v28);
        }
        while (v32 == -1);
        v12 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v10 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = *(_QWORD *)(v6 + 48) + 24 * v12;
      *(_QWORD *)v13 = v22;
      *(_QWORD *)(v13 + 8) = v21;
      *(_BYTE *)(v13 + 16) = v23;
      ++*(_QWORD *)(v6 + 16);
      v3 = v19;
    }
  }
  swift_release(v3);
  *v2 = v6;
}

void sub_100ADE280(uint64_t a1)
{
  sub_100AE2EEC(a1, &qword_1013DEA38);
}

void sub_100ADE28C(uint64_t a1)
{
  sub_100AE2EEC(a1, (uint64_t *)&unk_1013DE800);
}

void sub_100ADE298(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_1004B804C(&qword_1013DE6B8);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    swift_retain(v3);
    v12 = 0;
    while (1)
    {
      if (v9)
      {
        v15 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v16 = v15 | (v12 << 6);
      }
      else
      {
        v17 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return;
        }
        if (v17 >= v10)
          goto LABEL_36;
        v18 = v33[v17];
        ++v12;
        if (!v18)
        {
          v12 = v17 + 1;
          if (v17 + 1 >= v10)
            goto LABEL_36;
          v18 = v33[v12];
          if (!v18)
          {
            v12 = v17 + 2;
            if (v17 + 2 >= v10)
              goto LABEL_36;
            v18 = v33[v12];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v10)
              {
LABEL_36:
                swift_release(v3);
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v33[v19];
              if (!v18)
              {
                while (1)
                {
                  v12 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v12 >= v10)
                    goto LABEL_36;
                  v18 = v33[v12];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v12 = v19;
            }
          }
        }
LABEL_26:
        v9 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v12 << 6);
      }
      v20 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v16);
      v21 = *v20;
      v22 = v20[1];
      Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
      String.hash(into:)(v34, v21, v22);
      v23 = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = v23 & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v11 + 8 * v26);
        }
        while (v30 == -1);
        v13 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v13);
      *v14 = v21;
      v14[1] = v22;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  swift_release(v3);
  *v2 = v6;
}

void sub_100ADE574(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  _OWORD *v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  __int128 *v22;
  __int128 v23;
  Swift::Int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  _QWORD v34[9];
  __int128 v35;
  __int128 v36;
  Swift::UInt64 v37[2];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_1004B804C(&qword_101405448);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v33 = v2;
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v8 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v9 = ~(-1 << v7);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v3 + 56);
    v11 = (unint64_t)(v7 + 63) >> 6;
    v12 = v5 + 56;
    swift_retain(v3);
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v18 = v17 | (v13 << 6);
      }
      else
      {
        v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return;
        }
        if (v19 >= v11)
          goto LABEL_36;
        v20 = v8[v19];
        ++v13;
        if (!v20)
        {
          v13 = v19 + 1;
          if (v19 + 1 >= v11)
            goto LABEL_36;
          v20 = v8[v13];
          if (!v20)
          {
            v13 = v19 + 2;
            if (v19 + 2 >= v11)
              goto LABEL_36;
            v20 = v8[v13];
            if (!v20)
            {
              v21 = v19 + 3;
              if (v21 >= v11)
              {
LABEL_36:
                swift_release(v3);
                v2 = v33;
                v32 = 1 << *(_BYTE *)(v3 + 32);
                if (v32 > 63)
                  bzero((void *)(v3 + 56), ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v32;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v20 = v8[v21];
              if (!v20)
              {
                while (1)
                {
                  v13 = v21 + 1;
                  if (__OFADD__(v21, 1))
                    goto LABEL_42;
                  if (v13 >= v11)
                    goto LABEL_36;
                  v20 = v8[v13];
                  ++v21;
                  if (v20)
                    goto LABEL_26;
                }
              }
              v13 = v21;
            }
          }
        }
LABEL_26:
        v10 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v13 << 6);
      }
      v22 = (__int128 *)(*(_QWORD *)(v3 + 48) + 48 * v18);
      v23 = v22[1];
      v35 = *v22;
      v36 = v23;
      *(_OWORD *)v37 = v22[2];
      Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
      AnyHashable.hash(into:)(v34);
      Hasher._combine(_:)(v37[1]);
      v24 = Hasher._finalize()();
      v25 = -1 << *(_BYTE *)(v6 + 32);
      v26 = v24 & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v12 + 8 * v27);
        }
        while (v31 == -1);
        v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_OWORD *)(*(_QWORD *)(v6 + 48) + 48 * v14);
      v16 = v36;
      *v15 = v35;
      v15[1] = v16;
      v15[2] = *(_OWORD *)v37;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  swift_release(v3);
  *v2 = v6;
}

void sub_100ADE85C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  Swift::Int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD v44[9];

  v2 = v1;
  v4 = type metadata accessor for CRLBoardIdentifier(0);
  v43 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1013DE628);
  v8 = static _SetStorage.resize(original:capacity:move:)(v7, a1, 1);
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_39;
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v11 = *(_QWORD *)(v7 + 56);
  v42 = (_QWORD *)(v7 + 56);
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & v11;
  v40 = v2;
  v41 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 56;
  swift_retain(v7);
  v15 = 0;
  while (1)
  {
    if (v13)
    {
      v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v18 = v17 | (v15 << 6);
      goto LABEL_26;
    }
    v19 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return;
    }
    if (v19 >= v41)
      goto LABEL_35;
    v20 = v42[v19];
    ++v15;
    if (!v20)
    {
      v15 = v19 + 1;
      if (v19 + 1 >= v41)
        goto LABEL_35;
      v20 = v42[v15];
      if (!v20)
      {
        v15 = v19 + 2;
        if (v19 + 2 >= v41)
          goto LABEL_35;
        v20 = v42[v15];
        if (!v20)
          break;
      }
    }
LABEL_25:
    v13 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v15 << 6);
LABEL_26:
    v22 = v7;
    v23 = *(_QWORD *)(v7 + 48);
    v24 = *(_QWORD *)(v43 + 72);
    sub_1004B84E0(v23 + v24 * v18, (uint64_t)v6, type metadata accessor for CRLBoardIdentifier);
    Hasher.init(_seed:)(v44, *(_QWORD *)(v9 + 40));
    v25 = type metadata accessor for UUID(0);
    v26 = sub_1004B7878((unint64_t *)&qword_1013DE630, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v44, v25, v26);
    v27 = &v6[*(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20)];
    v28 = *(_QWORD *)v27;
    v29 = *((_QWORD *)v27 + 1);
    swift_bridgeObjectRetain(v29);
    String.hash(into:)(v44, v28, v29);
    swift_bridgeObjectRelease(v29);
    v30 = Hasher._finalize()();
    v31 = -1 << *(_BYTE *)(v9 + 32);
    v32 = v30 & ~v31;
    v33 = v32 >> 6;
    if (((-1 << v32) & ~*(_QWORD *)(v14 + 8 * (v32 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v14 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v34 = 0;
      v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }
        v36 = v33 == v35;
        if (v33 == v35)
          v33 = 0;
        v34 |= v36;
        v37 = *(_QWORD *)(v14 + 8 * v33);
      }
      while (v37 == -1);
      v16 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(_QWORD *)(v14 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    sub_1004B84E0((uint64_t)v6, *(_QWORD *)(v9 + 48) + v16 * v24, type metadata accessor for CRLBoardIdentifier);
    ++*(_QWORD *)(v9 + 16);
    v7 = v22;
  }
  v21 = v19 + 3;
  if (v21 < v41)
  {
    v20 = v42[v21];
    if (!v20)
    {
      while (1)
      {
        v15 = v21 + 1;
        if (__OFADD__(v21, 1))
          goto LABEL_41;
        if (v15 >= v41)
          goto LABEL_35;
        v20 = v42[v15];
        ++v21;
        if (v20)
          goto LABEL_25;
      }
    }
    v15 = v21;
    goto LABEL_25;
  }
LABEL_35:
  swift_release(v7);
  v2 = v40;
  v38 = 1 << *(_BYTE *)(v7 + 32);
  if (v38 > 63)
    bzero(v42, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v42 = -1 << v38;
  *(_QWORD *)(v7 + 16) = 0;
LABEL_39:
  swift_release(v7);
  *v2 = v9;
}

void sub_100ADEC18(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  Swift::Int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  _QWORD *v36;
  _QWORD v37[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_1004B804C(&qword_101405488);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v36 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v34 = v2;
    v35 = (unint64_t)(v7 + 63) >> 6;
    v10 = v5 + 56;
    swift_retain(v3);
    v11 = 0;
    while (1)
    {
      if (v9)
      {
        v14 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v15 = v14 | (v11 << 6);
      }
      else
      {
        v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return;
        }
        if (v16 >= v35)
          goto LABEL_36;
        v17 = v36[v16];
        ++v11;
        if (!v17)
        {
          v11 = v16 + 1;
          if (v16 + 1 >= v35)
            goto LABEL_36;
          v17 = v36[v11];
          if (!v17)
          {
            v11 = v16 + 2;
            if (v16 + 2 >= v35)
              goto LABEL_36;
            v17 = v36[v11];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v35)
              {
LABEL_36:
                swift_release(v3);
                v2 = v34;
                v33 = 1 << *(_BYTE *)(v3 + 32);
                if (v33 > 63)
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v33;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v17 = v36[v18];
              if (!v17)
              {
                while (1)
                {
                  v11 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_42;
                  if (v11 >= v35)
                    goto LABEL_36;
                  v17 = v36[v11];
                  ++v18;
                  if (v17)
                    goto LABEL_26;
                }
              }
              v11 = v18;
            }
          }
        }
LABEL_26:
        v9 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      v19 = v3;
      v20 = *(_QWORD *)(v3 + 48) + 32 * v15;
      v21 = *(_QWORD *)v20;
      v22 = *(_QWORD *)(v20 + 8);
      v23 = *(_QWORD *)(v20 + 16);
      v24 = *(_BYTE *)(v20 + 24);
      Hasher.init(_seed:)(v37, *(_QWORD *)(v6 + 40));
      sub_1009E3D90((uint64_t)v37, v21, v22, v23, v24);
      v25 = Hasher._finalize()();
      v26 = -1 << *(_BYTE *)(v6 + 32);
      v27 = v25 & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v10 + 8 * (v27 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v10 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v10 + 8 * v28);
        }
        while (v32 == -1);
        v12 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v10 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = *(_QWORD *)(v6 + 48) + 32 * v12;
      *(_QWORD *)v13 = v21;
      *(_QWORD *)(v13 + 8) = v22;
      *(_QWORD *)(v13 + 16) = v23;
      *(_BYTE *)(v13 + 24) = v24;
      ++*(_QWORD *)(v6 + 16);
      v3 = v19;
    }
  }
  swift_release(v3);
  *v2 = v6;
}

void sub_100ADEF30(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int64_t v22;
  int *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  Swift::Int v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char v49;
  unint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  int64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  _QWORD v70[10];

  v2 = v1;
  v4 = type metadata accessor for URL(0);
  v59 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v55 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1004B804C(&qword_1013E04D0);
  __chkstk_darwin(v6);
  v62 = (uint64_t)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = type metadata accessor for CRLWPHyperlinkSmartFieldData(0);
  v8 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  v63 = (uint64_t)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1004B804C((uint64_t *)&unk_1013E87D0);
  v64 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v65 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v67 = (uint64_t)&v54 - v13;
  v14 = *v1;
  if (*(_QWORD *)(*v1 + 24) > a1)
    a1 = *(_QWORD *)(*v1 + 24);
  sub_1004B804C(&qword_101405610);
  v15 = static _SetStorage.resize(original:capacity:move:)(v14, a1, 1);
  v16 = v15;
  if (!*(_QWORD *)(v14 + 16))
    goto LABEL_45;
  v58 = v4;
  v54 = v1;
  v17 = 1 << *(_BYTE *)(v14 + 32);
  v18 = *(_QWORD *)(v14 + 56);
  v61 = (_QWORD *)(v14 + 56);
  if (v17 < 64)
    v19 = ~(-1 << v17);
  else
    v19 = -1;
  v20 = v19 & v18;
  v60 = (unint64_t)(v17 + 63) >> 6;
  v21 = v15 + 56;
  swift_retain(v14);
  v22 = 0;
  v23 = (int *)v56;
  v24 = (uint64_t)v65;
  v57 = v8;
  while (1)
  {
    if (v20)
    {
      v26 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      v66 = v22;
      v27 = v26 | (v22 << 6);
      goto LABEL_26;
    }
    v28 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
      return;
    }
    if (v28 >= v60)
      goto LABEL_41;
    v29 = v61[v28];
    v30 = v22 + 1;
    if (!v29)
    {
      v30 = v22 + 2;
      if (v22 + 2 >= v60)
        goto LABEL_41;
      v29 = v61[v30];
      if (!v29)
      {
        v30 = v22 + 3;
        if (v22 + 3 >= v60)
          goto LABEL_41;
        v29 = v61[v30];
        if (!v29)
          break;
      }
    }
LABEL_25:
    v20 = (v29 - 1) & v29;
    v66 = v30;
    v27 = __clz(__rbit64(v29)) + (v30 << 6);
LABEL_26:
    v32 = *(_QWORD *)(v64 + 72);
    v33 = v67;
    sub_1004C4938(*(_QWORD *)(v14 + 48) + v32 * v27, v67, (uint64_t *)&unk_1013E87D0);
    Hasher.init(_seed:)(v70, *(_QWORD *)(v16 + 40));
    sub_1004CB7BC(v33, v24, (uint64_t *)&unk_1013E87D0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(v8 + 48))(v24, 1, v23) == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      v34 = v63;
      sub_1004B84E0(v24, v63, type metadata accessor for CRLWPHyperlinkSmartFieldData);
      Hasher._combine(_:)(1u);
      v35 = *(_BYTE *)(v34 + 8);
      v68 = *(_QWORD *)v34;
      v69 = v35;
      v36 = sub_1004B804C(&qword_1013F3CC8);
      CRExtensible.hash(into:)(v70, v36);
      v37 = v62;
      sub_1004CB7BC(v34 + v23[5], v62, &qword_1013E04D0);
      v38 = v58;
      v39 = v59;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v37, 1, v58) == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        v40 = v14;
        v41 = v55;
        (*(void (**)(char *, uint64_t, uint64_t))(v39 + 32))(v55, v62, v38);
        Hasher._combine(_:)(1u);
        v42 = sub_1004B7878((unint64_t *)&unk_1013F3CD0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
        dispatch thunk of Hashable.hash(into:)(v70, v38, v42);
        v43 = v41;
        v14 = v40;
        v23 = (int *)v56;
        (*(void (**)(char *, uint64_t))(v39 + 8))(v43, v38);
      }
      v8 = v57;
      v44 = v63;
      String.hash(into:)(v70, *(_QWORD *)(v63 + v23[6]), *(_QWORD *)(v63 + v23[6] + 8));
      sub_100957EF8((uint64_t)v70, *(_QWORD *)(v44 + v23[7]));
      sub_1004B84A4(v44, type metadata accessor for CRLWPHyperlinkSmartFieldData);
    }
    v45 = Hasher._finalize()();
    v46 = -1 << *(_BYTE *)(v16 + 32);
    v47 = v45 & ~v46;
    v48 = v47 >> 6;
    if (((-1 << v47) & ~*(_QWORD *)(v21 + 8 * (v47 >> 6))) != 0)
    {
      v25 = __clz(__rbit64((-1 << v47) & ~*(_QWORD *)(v21 + 8 * (v47 >> 6)))) | v47 & 0x7FFFFFFFFFFFFFC0;
      v24 = (uint64_t)v65;
    }
    else
    {
      v49 = 0;
      v50 = (unint64_t)(63 - v46) >> 6;
      v24 = (uint64_t)v65;
      do
      {
        if (++v48 == v50 && (v49 & 1) != 0)
        {
          __break(1u);
          goto LABEL_46;
        }
        v51 = v48 == v50;
        if (v48 == v50)
          v48 = 0;
        v49 |= v51;
        v52 = *(_QWORD *)(v21 + 8 * v48);
      }
      while (v52 == -1);
      v25 = __clz(__rbit64(~v52)) + (v48 << 6);
    }
    *(_QWORD *)(v21 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    sub_1004C4938(v67, *(_QWORD *)(v16 + 48) + v25 * v32, (uint64_t *)&unk_1013E87D0);
    ++*(_QWORD *)(v16 + 16);
    v22 = v66;
  }
  v31 = v22 + 4;
  if (v22 + 4 < v60)
  {
    v29 = v61[v31];
    if (!v29)
    {
      while (1)
      {
        v30 = v31 + 1;
        if (__OFADD__(v31, 1))
          goto LABEL_47;
        if (v30 >= v60)
          goto LABEL_41;
        v29 = v61[v30];
        ++v31;
        if (v29)
          goto LABEL_25;
      }
    }
    v30 = v22 + 4;
    goto LABEL_25;
  }
LABEL_41:
  swift_release(v14);
  v2 = v54;
  v53 = 1 << *(_BYTE *)(v14 + 32);
  if (v53 > 63)
    bzero(v61, ((unint64_t)(v53 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v61 = -1 << v53;
  *(_QWORD *)(v14 + 16) = 0;
LABEL_45:
  swift_release(v14);
  *v2 = v16;
}

void sub_100ADF528(uint64_t a1)
{
  sub_100AE2EEC(a1, &qword_101405430);
}

void sub_100ADF534(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt v20;
  Swift::Int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_1004B804C(&qword_1013DE6B0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v30 = v2;
    v7 = 0;
    v8 = (_QWORD *)(v3 + 56);
    v9 = 1 << *(_BYTE *)(v3 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v3 + 56);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = v5 + 56;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v7 << 6);
      }
      else
      {
        v17 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return;
        }
        if (v17 >= v12)
          goto LABEL_36;
        v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          v7 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_36;
          v18 = v8[v7];
          if (!v18)
          {
            v7 = v17 + 2;
            if (v17 + 2 >= v12)
              goto LABEL_36;
            v18 = v8[v7];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_36:
                v29 = 1 << *(_BYTE *)(v3 + 32);
                if (v29 > 63)
                  bzero((void *)(v3 + 56), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v29;
                v2 = v30;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  v7 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v7 >= v12)
                    goto LABEL_36;
                  v18 = v8[v7];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v7 = v19;
            }
          }
        }
LABEL_26:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }
      v20 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v16);
      Hasher.init(_seed:)(v31, *(_QWORD *)(v6 + 40));
      Hasher._combine(_:)(v20);
      v21 = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v6 + 32);
      v23 = v21 & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_BYTE *)(*(_QWORD *)(v6 + 48) + v14) = v20;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  swift_release(v3);
  *v2 = v6;
}

void sub_100ADF7DC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  int EnumCaseMultiPayload;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  Swift::Int v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char v53;
  unint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  char *v60;
  uint64_t v61;
  unsigned __int8 *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int8 *v68;
  uint64_t v69;
  int64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD v73[10];

  v2 = v1;
  v4 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v4);
  v63 = (uint64_t)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = type metadata accessor for UUID(0);
  v61 = *(_QWORD *)(v66 - 8);
  __chkstk_darwin(v66);
  v60 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CRLBoardLibraryViewModel.Folder(0);
  v8 = __chkstk_darwin(v7);
  v65 = (uint64_t)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v69 = (uint64_t)&v58 - v10;
  v11 = type metadata accessor for CRLBoardLibraryViewModel.Item(0);
  v72 = *(_QWORD *)(v11 - 8);
  v12 = __chkstk_darwin(v11);
  v14 = (unsigned __int8 *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v58 - v15;
  v17 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_101405490);
  v18 = static _SetStorage.resize(original:capacity:move:)(v17, a1, 1);
  v19 = v18;
  if (*(_QWORD *)(v17 + 16))
  {
    v59 = v2;
    v20 = 1 << *(_BYTE *)(v17 + 32);
    v21 = *(_QWORD *)(v17 + 56);
    v71 = (_QWORD *)(v17 + 56);
    if (v20 < 64)
      v22 = ~(-1 << v20);
    else
      v22 = -1;
    v23 = v22 & v21;
    v62 = v14 + 8;
    v70 = (unint64_t)(v20 + 63) >> 6;
    v24 = v18 + 56;
    swift_retain(v17);
    v25 = 0;
    v64 = v11;
    v68 = v14;
    while (1)
    {
      if (v23)
      {
        v27 = __clz(__rbit64(v23));
        v23 &= v23 - 1;
        v28 = v27 | (v25 << 6);
      }
      else
      {
        v29 = v25 + 1;
        if (__OFADD__(v25, 1))
          goto LABEL_45;
        if (v29 >= v70)
        {
LABEL_40:
          swift_release(v17);
          v2 = v59;
          v57 = 1 << *(_BYTE *)(v17 + 32);
          if (v57 > 63)
            bzero(v71, ((unint64_t)(v57 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          else
            *v71 = -1 << v57;
          *(_QWORD *)(v17 + 16) = 0;
          break;
        }
        v30 = v71[v29];
        ++v25;
        if (!v30)
        {
          v25 = v29 + 1;
          if (v29 + 1 >= v70)
            goto LABEL_40;
          v30 = v71[v25];
          if (!v30)
          {
            v25 = v29 + 2;
            if (v29 + 2 >= v70)
              goto LABEL_40;
            v30 = v71[v25];
            if (!v30)
            {
              v31 = v29 + 3;
              if (v31 >= v70)
                goto LABEL_40;
              v30 = v71[v31];
              if (!v30)
              {
                while (1)
                {
                  v25 = v31 + 1;
                  if (__OFADD__(v31, 1))
                    goto LABEL_46;
                  if (v25 >= v70)
                    goto LABEL_40;
                  v30 = v71[v25];
                  ++v31;
                  if (v30)
                    goto LABEL_25;
                }
              }
              v25 = v31;
            }
          }
        }
LABEL_25:
        v23 = (v30 - 1) & v30;
        v28 = __clz(__rbit64(v30)) + (v25 << 6);
      }
      v32 = *(_QWORD *)(v72 + 72);
      sub_1004B84E0(*(_QWORD *)(v17 + 48) + v32 * v28, (uint64_t)v16, type metadata accessor for CRLBoardLibraryViewModel.Item);
      Hasher.init(_seed:)(v73, *(_QWORD *)(v19 + 40));
      sub_1004B8460((uint64_t)v16, (uint64_t)v14, type metadata accessor for CRLBoardLibraryViewModel.Item);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v14, v11);
      if (EnumCaseMultiPayload)
      {
        if (EnumCaseMultiPayload == 1)
        {
          v34 = (uint64_t)v14;
          v35 = v69;
          sub_1004B84E0(v34, v69, type metadata accessor for CRLBoardLibraryViewModel.Folder);
          v36 = v35;
          v37 = v65;
          sub_1004B8460(v36, v65, type metadata accessor for CRLBoardLibraryViewModel.Folder);
          v38 = sub_1004B804C(&qword_1013E1790);
          v39 = (char *)&loc_100ADFBB8
              + *((int *)qword_100ADFEC0
                + (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 48))(v37, 5, v38));
          __asm { BR              X9 }
        }
        v40 = sub_1004B804C((uint64_t *)&unk_1013EA630);
        swift_bridgeObjectRelease(*(_QWORD *)&v62[*(int *)(v40 + 48)]);
        v41 = v63;
        v67 = v32;
        sub_1004B84E0((uint64_t)v14, v63, type metadata accessor for CRLBoardIdentifier);
        v42 = sub_1004B7878((unint64_t *)&qword_1013DE630, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        dispatch thunk of Hashable.hash(into:)(v73, v66, v42);
        v43 = (uint64_t *)(v41 + *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20));
        v44 = v17;
        v45 = *v43;
        v46 = v43[1];
        swift_bridgeObjectRetain(v46);
        v47 = v45;
        v17 = v44;
        v14 = v68;
        String.hash(into:)(v73, v47, v46);
        v48 = v46;
        v11 = v64;
        swift_bridgeObjectRelease(v48);
        v32 = v67;
        sub_1004B84A4(v41, type metadata accessor for CRLBoardIdentifier);
      }
      else
      {
        Hasher._combine(_:)(*v14);
      }
      v49 = Hasher._finalize()();
      v50 = -1 << *(_BYTE *)(v19 + 32);
      v51 = v49 & ~v50;
      v52 = v51 >> 6;
      if (((-1 << v51) & ~*(_QWORD *)(v24 + 8 * (v51 >> 6))) != 0)
      {
        v26 = __clz(__rbit64((-1 << v51) & ~*(_QWORD *)(v24 + 8 * (v51 >> 6)))) | v51 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_9;
      }
      v53 = 0;
      v54 = (unint64_t)(63 - v50) >> 6;
      do
      {
        if (++v52 == v54 && (v53 & 1) != 0)
        {
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
          JUMPOUT(0x100ADFEC0);
        }
        v55 = v52 == v54;
        if (v52 == v54)
          v52 = 0;
        v53 |= v55;
        v56 = *(_QWORD *)(v24 + 8 * v52);
      }
      while (v56 == -1);
      v26 = __clz(__rbit64(~v56)) + (v52 << 6);
LABEL_9:
      *(_QWORD *)(v24 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
      sub_1004B84E0((uint64_t)v16, *(_QWORD *)(v19 + 48) + v26 * v32, type metadata accessor for CRLBoardLibraryViewModel.Item);
      ++*(_QWORD *)(v19 + 16);
    }
  }
  swift_release(v17);
  *v2 = v19;
}

void sub_100ADFED8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  int EnumCaseMultiPayload;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  Swift::Int v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char v61;
  unint64_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  int64_t v75;
  _QWORD *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD v82[10];

  v2 = v1;
  v4 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v4);
  v74 = (uint64_t)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = type metadata accessor for UUID(0);
  v71 = *(_QWORD *)(v79 - 8);
  __chkstk_darwin(v79);
  v70 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CRLBoardLibraryViewModel.Folder(0);
  __chkstk_darwin(v7);
  v69 = (uint64_t)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v73 = (uint64_t)&v66 - v10;
  v67 = type metadata accessor for CRLBoardPreviewImageCache.Item(0);
  v80 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67);
  v12 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v66 - v14;
  v16 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1013DE638);
  v17 = static _SetStorage.resize(original:capacity:move:)(v16, a1, 1);
  v18 = v17;
  if (*(_QWORD *)(v16 + 16))
  {
    v66 = v2;
    v19 = 1 << *(_BYTE *)(v16 + 32);
    v20 = *(_QWORD *)(v16 + 56);
    v76 = (_QWORD *)(v16 + 56);
    if (v19 < 64)
      v21 = ~(-1 << v19);
    else
      v21 = -1;
    v22 = v21 & v20;
    v75 = (unint64_t)(v19 + 63) >> 6;
    v23 = v17 + 56;
    swift_retain(v16);
    v24 = 0;
    v68 = v16;
    v25 = v67;
    v72 = v12;
    v77 = v18;
    v78 = v15;
    while (1)
    {
      if (v22)
      {
        v27 = __clz(__rbit64(v22));
        v22 &= v22 - 1;
        v28 = v27 | (v24 << 6);
      }
      else
      {
        v29 = v24 + 1;
        if (__OFADD__(v24, 1))
          goto LABEL_45;
        if (v29 >= v75)
        {
LABEL_40:
          swift_release(v16);
          v2 = v66;
          v65 = 1 << *(_BYTE *)(v16 + 32);
          if (v65 > 63)
            bzero(v76, ((unint64_t)(v65 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          else
            *v76 = -1 << v65;
          *(_QWORD *)(v16 + 16) = 0;
          break;
        }
        v30 = v76[v29];
        ++v24;
        if (!v30)
        {
          v24 = v29 + 1;
          if (v29 + 1 >= v75)
            goto LABEL_40;
          v30 = v76[v24];
          if (!v30)
          {
            v24 = v29 + 2;
            if (v29 + 2 >= v75)
              goto LABEL_40;
            v30 = v76[v24];
            if (!v30)
            {
              v31 = v29 + 3;
              if (v31 >= v75)
                goto LABEL_40;
              v30 = v76[v31];
              if (!v30)
              {
                while (1)
                {
                  v24 = v31 + 1;
                  if (__OFADD__(v31, 1))
                    goto LABEL_46;
                  if (v24 >= v75)
                    goto LABEL_40;
                  v30 = v76[v24];
                  ++v31;
                  if (v30)
                    goto LABEL_25;
                }
              }
              v24 = v31;
            }
          }
        }
LABEL_25:
        v22 = (v30 - 1) & v30;
        v28 = __clz(__rbit64(v30)) + (v24 << 6);
      }
      v32 = *(_QWORD *)(v16 + 48);
      v81 = *(_QWORD *)(v80 + 72);
      sub_1004B84E0(v32 + v81 * v28, (uint64_t)v15, type metadata accessor for CRLBoardPreviewImageCache.Item);
      Hasher.init(_seed:)(v82, *(_QWORD *)(v18 + 40));
      sub_1004B8460((uint64_t)v15, (uint64_t)v12, type metadata accessor for CRLBoardPreviewImageCache.Item);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v12, v25);
      if (!EnumCaseMultiPayload)
      {
        v40 = (uint64_t)v12;
        v41 = v73;
        sub_1004B84E0(v40, v73, type metadata accessor for CRLBoardLibraryViewModel.Folder);
        v42 = v41;
        v43 = v69;
        sub_1004B8460(v42, v69, type metadata accessor for CRLBoardLibraryViewModel.Folder);
        v44 = sub_1004B804C(&qword_1013E1790);
        v45 = (char *)&loc_100AE0354
            + *((int *)qword_100AE0680
              + (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 48))(v43, 5, v44));
        __asm { BR              X9 }
      }
      v34 = v24;
      if (EnumCaseMultiPayload == 1)
      {
        v35 = v74;
        sub_1004B84E0((uint64_t)v12, v74, type metadata accessor for CRLBoardIdentifier);
        v36 = sub_1004B7878((unint64_t *)&qword_1013DE630, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        dispatch thunk of Hashable.hash(into:)(v82, v79, v36);
        v37 = (uint64_t *)(v35 + *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20));
        v38 = *v37;
        v39 = v37[1];
        swift_bridgeObjectRetain(v39);
        String.hash(into:)(v82, v38, v39);
        swift_bridgeObjectRelease(v39);
      }
      else
      {
        v46 = &v12[*(int *)(sub_1004B804C((uint64_t *)&unk_1013DE640) + 48)];
        v35 = v74;
        sub_1004B84E0((uint64_t)v12, v74, type metadata accessor for CRLBoardIdentifier);
        v47 = v70;
        v48 = v71;
        v49 = v79;
        (*(void (**)(char *, char *, uint64_t))(v71 + 32))(v70, v46, v79);
        v50 = sub_1004B7878((unint64_t *)&qword_1013DE630, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        dispatch thunk of Hashable.hash(into:)(v82, v49, v50);
        v51 = (uint64_t *)(v35 + *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20));
        v52 = *v51;
        v53 = v51[1];
        swift_bridgeObjectRetain(v53);
        String.hash(into:)(v82, v52, v53);
        v54 = v53;
        v16 = v68;
        swift_bridgeObjectRelease(v54);
        dispatch thunk of Hashable.hash(into:)(v82, v49, v50);
        v55 = v47;
        v25 = v67;
        v56 = v49;
        v12 = v72;
        (*(void (**)(char *, uint64_t))(v48 + 8))(v55, v56);
      }
      sub_1004B84A4(v35, type metadata accessor for CRLBoardIdentifier);
      v24 = v34;
      v18 = v77;
      v15 = v78;
      v57 = Hasher._finalize()();
      v58 = -1 << *(_BYTE *)(v18 + 32);
      v59 = v57 & ~v58;
      v60 = v59 >> 6;
      if (((-1 << v59) & ~*(_QWORD *)(v23 + 8 * (v59 >> 6))) != 0)
      {
        v26 = __clz(__rbit64((-1 << v59) & ~*(_QWORD *)(v23 + 8 * (v59 >> 6)))) | v59 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_9;
      }
      v61 = 0;
      v62 = (unint64_t)(63 - v58) >> 6;
      do
      {
        if (++v60 == v62 && (v61 & 1) != 0)
        {
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
          JUMPOUT(0x100AE0680);
        }
        v63 = v60 == v62;
        if (v60 == v62)
          v60 = 0;
        v61 |= v63;
        v64 = *(_QWORD *)(v23 + 8 * v60);
      }
      while (v64 == -1);
      v26 = __clz(__rbit64(~v64)) + (v60 << 6);
LABEL_9:
      *(_QWORD *)(v23 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
      sub_1004B84E0((uint64_t)v15, *(_QWORD *)(v18 + 48) + v26 * v81, type metadata accessor for CRLBoardPreviewImageCache.Item);
      ++*(_QWORD *)(v18 + 16);
    }
  }
  swift_release(v16);
  *v2 = v18;
}

void sub_100AE0698(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_1004B804C(&qword_101405308);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  if (*(_QWORD *)(v3 + 16))
  {
    v6 = 1 << *(_BYTE *)(v3 + 32);
    v7 = (_QWORD *)(v3 + 56);
    v8 = -1;
    if (v6 < 64)
      v8 = ~(-1 << v6);
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v6 + 63) >> 6;
    swift_retain(v3);
    v11 = 0;
    while (1)
    {
      if (v9)
      {
        v12 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v13 = v12 | (v11 << 6);
      }
      else
      {
        v14 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
          __break(1u);
LABEL_31:
          __break(1u);
          return;
        }
        if (v14 >= v10)
          goto LABEL_25;
        v15 = v7[v14];
        ++v11;
        if (!v15)
        {
          v11 = v14 + 1;
          if (v14 + 1 >= v10)
            goto LABEL_25;
          v15 = v7[v11];
          if (!v15)
          {
            v11 = v14 + 2;
            if (v14 + 2 >= v10)
              goto LABEL_25;
            v15 = v7[v11];
            if (!v15)
            {
              v16 = v14 + 3;
              if (v16 >= v10)
              {
LABEL_25:
                swift_release(v3);
                v17 = 1 << *(_BYTE *)(v3 + 32);
                if (v17 > 63)
                  bzero((void *)(v3 + 56), ((unint64_t)(v17 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v7 = -1 << v17;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v15 = v7[v16];
              if (!v15)
              {
                while (1)
                {
                  v11 = v16 + 1;
                  if (__OFADD__(v16, 1))
                    goto LABEL_31;
                  if (v11 >= v10)
                    goto LABEL_25;
                  v15 = v7[v11];
                  ++v16;
                  if (v15)
                    goto LABEL_24;
                }
              }
              v11 = v16;
            }
          }
        }
LABEL_24:
        v9 = (v15 - 1) & v15;
        v13 = __clz(__rbit64(v15)) + (v11 << 6);
      }
      sub_100AE3588(*(_QWORD *)(*(_QWORD *)(v3 + 48) + 32 * v13), *(_QWORD *)(*(_QWORD *)(v3 + 48) + 32 * v13 + 8), *(_BYTE *)(*(_QWORD *)(v3 + 48) + 32 * v13 + 16), v5, *(double *)(*(_QWORD *)(v3 + 48) + 32 * v13 + 24));
    }
  }
  swift_release(v3);
  *v2 = v5;
}

void sub_100AE0874(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[9];

  v2 = v1;
  v4 = type metadata accessor for CRLBoardIdentifierAndValue(0);
  v41 = *(_QWORD *)(v4 - 8);
  v42 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  if (*(_QWORD *)(*v1 + 24) > a1)
    a1 = *(_QWORD *)(*v1 + 24);
  sub_1004B804C(&qword_1013DE778);
  v8 = static _SetStorage.resize(original:capacity:move:)(v7, a1, 1);
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_39;
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v11 = *(_QWORD *)(v7 + 56);
  v40 = (_QWORD *)(v7 + 56);
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & v11;
  v38 = v1;
  v39 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 56;
  swift_retain(v7);
  v15 = 0;
  while (1)
  {
    if (v13)
    {
      v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v18 = v17 | (v15 << 6);
      goto LABEL_26;
    }
    v19 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return;
    }
    if (v19 >= v39)
      goto LABEL_35;
    v20 = v40[v19];
    ++v15;
    if (!v20)
    {
      v15 = v19 + 1;
      if (v19 + 1 >= v39)
        goto LABEL_35;
      v20 = v40[v15];
      if (!v20)
      {
        v15 = v19 + 2;
        if (v19 + 2 >= v39)
          goto LABEL_35;
        v20 = v40[v15];
        if (!v20)
          break;
      }
    }
LABEL_25:
    v13 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v15 << 6);
LABEL_26:
    v22 = v7;
    v23 = *(_QWORD *)(v41 + 72);
    sub_1004B84E0(*(_QWORD *)(v7 + 48) + v23 * v18, (uint64_t)v6, type metadata accessor for CRLBoardIdentifierAndValue);
    Hasher.init(_seed:)(v43, *(_QWORD *)(v9 + 40));
    v24 = type metadata accessor for UUID(0);
    v25 = sub_1004B7878((unint64_t *)&qword_1013DE630, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v43, v24, v25);
    v26 = &v6[*(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20)];
    v27 = *(_QWORD *)v26;
    v28 = *((_QWORD *)v26 + 1);
    swift_bridgeObjectRetain(v28);
    String.hash(into:)(v43, v27, v28);
    swift_bridgeObjectRelease(v28);
    Hasher._combine(_:)(v6[*(int *)(v42 + 20)]);
    v29 = Hasher._finalize()();
    v30 = -1 << *(_BYTE *)(v9 + 32);
    v31 = v29 & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)(v14 + 8 * (v31 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v14 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
      v7 = v22;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v30) >> 6;
      v7 = v22;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }
        v35 = v32 == v34;
        if (v32 == v34)
          v32 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v14 + 8 * v32);
      }
      while (v36 == -1);
      v16 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(_QWORD *)(v14 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    sub_1004B84E0((uint64_t)v6, *(_QWORD *)(v9 + 48) + v16 * v23, type metadata accessor for CRLBoardIdentifierAndValue);
    ++*(_QWORD *)(v9 + 16);
  }
  v21 = v19 + 3;
  if (v21 < v39)
  {
    v20 = v40[v21];
    if (!v20)
    {
      while (1)
      {
        v15 = v21 + 1;
        if (__OFADD__(v21, 1))
          goto LABEL_41;
        if (v15 >= v39)
          goto LABEL_35;
        v20 = v40[v15];
        ++v21;
        if (v20)
          goto LABEL_25;
      }
    }
    v15 = v21;
    goto LABEL_25;
  }
LABEL_35:
  swift_release(v7);
  v2 = v38;
  v37 = 1 << *(_BYTE *)(v7 + 32);
  if (v37 > 63)
    bzero(v40, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v40 = -1 << v37;
  *(_QWORD *)(v7 + 16) = 0;
LABEL_39:
  swift_release(v7);
  *v2 = v9;
}

void sub_100AE0C40(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t (*v16)(uint64_t);
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t);
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  Swift::Int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  _QWORD v48[9];

  v2 = v1;
  v4 = type metadata accessor for CRLBoardPreviewImageCacheAssetDownloadHelper.AssetDownloadRequest(0);
  v45 = *(_QWORD *)(v4 - 8);
  v46 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  if (*(_QWORD *)(*v1 + 24) > a1)
    a1 = *(_QWORD *)(*v1 + 24);
  sub_1004B804C(&qword_101405690);
  v8 = static _SetStorage.resize(original:capacity:move:)(v7, a1, 1);
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_39;
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v11 = *(_QWORD *)(v7 + 56);
  v43 = (_QWORD *)(v7 + 56);
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & v11;
  v41 = v1;
  v42 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 56;
  swift_retain(v7);
  v15 = 0;
  v16 = type metadata accessor for CRLBoardPreviewImageCacheAssetDownloadHelper.AssetDownloadRequest;
  v44 = v7;
  while (1)
  {
    if (v13)
    {
      v18 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v47 = v15;
      v19 = v18 | (v15 << 6);
      goto LABEL_26;
    }
    v20 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return;
    }
    if (v20 >= v42)
      goto LABEL_35;
    v21 = v43[v20];
    v22 = v15 + 1;
    if (!v21)
    {
      v22 = v15 + 2;
      if (v15 + 2 >= v42)
        goto LABEL_35;
      v21 = v43[v22];
      if (!v21)
      {
        v22 = v15 + 3;
        if (v15 + 3 >= v42)
          goto LABEL_35;
        v21 = v43[v22];
        if (!v21)
          break;
      }
    }
LABEL_25:
    v13 = (v21 - 1) & v21;
    v47 = v22;
    v19 = __clz(__rbit64(v21)) + (v22 << 6);
LABEL_26:
    v24 = *(_QWORD *)(v7 + 48);
    v25 = *(_QWORD *)(v45 + 72);
    v26 = v16;
    sub_1004B84E0(v24 + v25 * v19, (uint64_t)v6, v16);
    Hasher.init(_seed:)(v48, *(_QWORD *)(v9 + 40));
    v27 = type metadata accessor for UUID(0);
    v28 = sub_1004B7878((unint64_t *)&qword_1013DE630, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v48, v27, v28);
    v29 = &v6[*(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20)];
    v31 = *(_QWORD *)v29;
    v30 = *((_QWORD *)v29 + 1);
    swift_bridgeObjectRetain(v30);
    String.hash(into:)(v48, v31, v30);
    swift_bridgeObjectRelease(v30);
    dispatch thunk of Hashable.hash(into:)(v48, v27, v28);
    dispatch thunk of Hashable.hash(into:)(v48, v27, v28);
    v32 = Hasher._finalize()();
    v33 = -1 << *(_BYTE *)(v9 + 32);
    v34 = v32 & ~v33;
    v35 = v34 >> 6;
    if (((-1 << v34) & ~*(_QWORD *)(v14 + 8 * (v34 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v34) & ~*(_QWORD *)(v14 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
      v16 = v26;
    }
    else
    {
      v36 = 0;
      v37 = (unint64_t)(63 - v33) >> 6;
      v16 = v26;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }
        v38 = v35 == v37;
        if (v35 == v37)
          v35 = 0;
        v36 |= v38;
        v39 = *(_QWORD *)(v14 + 8 * v35);
      }
      while (v39 == -1);
      v17 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(_QWORD *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    sub_1004B84E0((uint64_t)v6, *(_QWORD *)(v9 + 48) + v17 * v25, v16);
    ++*(_QWORD *)(v9 + 16);
    v7 = v44;
    v15 = v47;
  }
  v23 = v15 + 4;
  if (v15 + 4 < v42)
  {
    v21 = v43[v23];
    if (!v21)
    {
      while (1)
      {
        v22 = v23 + 1;
        if (__OFADD__(v23, 1))
          goto LABEL_41;
        if (v22 >= v42)
          goto LABEL_35;
        v21 = v43[v22];
        ++v23;
        if (v21)
          goto LABEL_25;
      }
    }
    v22 = v15 + 4;
    goto LABEL_25;
  }
LABEL_35:
  swift_release(v7);
  v2 = v41;
  v40 = 1 << *(_BYTE *)(v7 + 32);
  if (v40 > 63)
    bzero(v43, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v43 = -1 << v40;
  *(_QWORD *)(v7 + 16) = 0;
LABEL_39:
  swift_release(v7);
  *v2 = v9;
}

void sub_100AE1048(uint64_t a1)
{
  sub_100AE2EEC(a1, (uint64_t *)&unk_1013DE990);
}

void sub_100AE1054(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  int *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t (*v16)(uint64_t);
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t);
  int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  Swift::Int v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char v46;
  unint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  char *v53;
  int64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[9];

  v2 = v1;
  v4 = (int *)_s17CategoryViewModelVMa(0);
  v56 = *((_QWORD *)v4 - 1);
  __chkstk_darwin(v4);
  v6 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  if (*(_QWORD *)(*v1 + 24) > a1)
    a1 = *(_QWORD *)(*v1 + 24);
  sub_1004B804C(&qword_1014055C0);
  v8 = static _SetStorage.resize(original:capacity:move:)(v7, a1, 1);
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_42;
  v52 = v1;
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v11 = *(_QWORD *)(v7 + 56);
  v55 = (_QWORD *)(v7 + 56);
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & v11;
  v54 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 56;
  swift_retain(v7);
  v15 = 0;
  v16 = _s17CategoryViewModelVMa;
  v53 = v6;
  while (1)
  {
    if (v13)
    {
      v18 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v19 = v18 | (v15 << 6);
      goto LABEL_26;
    }
    v20 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
      return;
    }
    if (v20 >= v54)
      goto LABEL_38;
    v21 = v55[v20];
    ++v15;
    if (!v21)
    {
      v15 = v20 + 1;
      if (v20 + 1 >= v54)
        goto LABEL_38;
      v21 = v55[v15];
      if (!v21)
      {
        v15 = v20 + 2;
        if (v20 + 2 >= v54)
          goto LABEL_38;
        v21 = v55[v15];
        if (!v21)
          break;
      }
    }
LABEL_25:
    v13 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v15 << 6);
LABEL_26:
    v23 = *(_QWORD *)(v7 + 48);
    v57 = *(_QWORD *)(v56 + 72);
    sub_1004B84E0(v23 + v57 * v19, (uint64_t)v6, v16);
    Hasher.init(_seed:)(v58, *(_QWORD *)(v9 + 40));
    v24 = type metadata accessor for UUID(0);
    v25 = sub_1004B7878((unint64_t *)&qword_1013DE630, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v58, v24, v25);
    v26 = &v6[v4[5]];
    v27 = *(_QWORD *)v26;
    v28 = *((_QWORD *)v26 + 1);
    swift_bridgeObjectRetain(v28);
    String.hash(into:)(v58, v27, v28);
    swift_bridgeObjectRelease(v28);
    v29 = &v6[v4[6]];
    v30 = *((_QWORD *)v29 + 1);
    if (v30)
    {
      v31 = v13;
      v32 = v15;
      v33 = v9;
      v34 = v16;
      v35 = v4;
      v36 = v7;
      v37 = *(_QWORD *)v29;
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain(v30);
      v38 = v37;
      v7 = v36;
      v4 = v35;
      v16 = v34;
      v9 = v33;
      v15 = v32;
      v13 = v31;
      v6 = v53;
      String.hash(into:)(v58, v38, v30);
      swift_bridgeObjectRelease(v30);
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    v39 = &v6[v4[7]];
    v40 = *(_QWORD *)v39;
    v41 = *((_QWORD *)v39 + 1);
    swift_bridgeObjectRetain(v41);
    String.hash(into:)(v58, v40, v41);
    swift_bridgeObjectRelease(v41);
    Hasher._combine(_:)(*(_QWORD *)&v6[v4[8]]);
    v42 = Hasher._finalize()();
    v43 = -1 << *(_BYTE *)(v9 + 32);
    v44 = v42 & ~v43;
    v45 = v44 >> 6;
    if (((-1 << v44) & ~*(_QWORD *)(v14 + 8 * (v44 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v44) & ~*(_QWORD *)(v14 + 8 * (v44 >> 6)))) | v44 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v46 = 0;
      v47 = (unint64_t)(63 - v43) >> 6;
      do
      {
        if (++v45 == v47 && (v46 & 1) != 0)
        {
          __break(1u);
          goto LABEL_43;
        }
        v48 = v45 == v47;
        if (v45 == v47)
          v45 = 0;
        v46 |= v48;
        v49 = *(_QWORD *)(v14 + 8 * v45);
      }
      while (v49 == -1);
      v17 = __clz(__rbit64(~v49)) + (v45 << 6);
    }
    *(_QWORD *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    sub_1004B84E0((uint64_t)v6, *(_QWORD *)(v9 + 48) + v17 * v57, v16);
    ++*(_QWORD *)(v9 + 16);
  }
  v22 = v20 + 3;
  if (v22 < v54)
  {
    v21 = v55[v22];
    if (!v21)
    {
      while (1)
      {
        v15 = v22 + 1;
        if (__OFADD__(v22, 1))
          goto LABEL_44;
        if (v15 >= v54)
          goto LABEL_38;
        v21 = v55[v15];
        ++v22;
        if (v21)
          goto LABEL_25;
      }
    }
    v15 = v22;
    goto LABEL_25;
  }
LABEL_38:
  swift_release(v7);
  v2 = v52;
  v50 = 1 << *(_BYTE *)(v7 + 32);
  if (v50 > 63)
    bzero(v55, ((unint64_t)(v50 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v55 = -1 << v50;
  *(_QWORD *)(v7 + 16) = 0;
LABEL_42:
  swift_release(v7);
  *v2 = v9;
}

void sub_100AE14CC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  _QWORD *v32;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_1004B804C((uint64_t *)&unk_1013DEA00);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v31 = (unint64_t)(v7 + 63) >> 6;
    v10 = v5 + 56;
    swift_retain(v3);
    v11 = 0;
    while (1)
    {
      if (v9)
      {
        v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v14 = v13 | (v11 << 6);
      }
      else
      {
        v15 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return;
        }
        if (v15 >= v31)
          goto LABEL_36;
        v16 = v32[v15];
        ++v11;
        if (!v16)
        {
          v11 = v15 + 1;
          if (v15 + 1 >= v31)
            goto LABEL_36;
          v16 = v32[v11];
          if (!v16)
          {
            v11 = v15 + 2;
            if (v15 + 2 >= v31)
              goto LABEL_36;
            v16 = v32[v11];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v31)
              {
LABEL_36:
                swift_release(v3);
                v30 = 1 << *(_BYTE *)(v3 + 32);
                if (v30 > 63)
                  bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v32 = -1 << v30;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v16 = v32[v17];
              if (!v16)
              {
                while (1)
                {
                  v11 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_42;
                  if (v11 >= v31)
                    goto LABEL_36;
                  v16 = v32[v11];
                  ++v17;
                  if (v16)
                    goto LABEL_26;
                }
              }
              v11 = v17;
            }
          }
        }
LABEL_26:
        v9 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v11 << 6);
      }
      v18 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v14);
      v19 = *(_QWORD *)(v6 + 40);
      v20 = type metadata accessor for CalculateExpression(0);
      v21 = sub_1004B7878((unint64_t *)&unk_1013E8820, (uint64_t (*)(uint64_t))&type metadata accessor for CalculateExpression, (uint64_t)&protocol conformance descriptor for CalculateExpression);
      v22 = dispatch thunk of Hashable._rawHashValue(seed:)(v19, v20, v21);
      v23 = -1 << *(_BYTE *)(v6 + 32);
      v24 = v22 & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v10 + 8 * (v24 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v10 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v10 + 8 * v25);
        }
        while (v29 == -1);
        v12 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v10 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v12) = v18;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  swift_release(v3);
  *v2 = v6;
}

void sub_100AE17DC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt v20;
  Swift::Int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_1004B804C(&qword_1014054B0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v30 = v2;
    v7 = 0;
    v8 = (_QWORD *)(v3 + 56);
    v9 = 1 << *(_BYTE *)(v3 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v3 + 56);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = v5 + 56;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v7 << 6);
      }
      else
      {
        v17 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return;
        }
        if (v17 >= v12)
          goto LABEL_36;
        v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          v7 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_36;
          v18 = v8[v7];
          if (!v18)
          {
            v7 = v17 + 2;
            if (v17 + 2 >= v12)
              goto LABEL_36;
            v18 = v8[v7];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_36:
                v29 = 1 << *(_BYTE *)(v3 + 32);
                if (v29 > 63)
                  bzero((void *)(v3 + 56), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v29;
                v2 = v30;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  v7 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v7 >= v12)
                    goto LABEL_36;
                  v18 = v8[v7];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v7 = v19;
            }
          }
        }
LABEL_26:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
      Hasher.init(_seed:)(v31, *(_QWORD *)(v6 + 40));
      Hasher._combine(_:)(v20);
      v21 = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v6 + 32);
      v23 = v21 & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  swift_release(v3);
  *v2 = v6;
}

void sub_100AE1A84(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[7];
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD v33[10];

  v2 = v1;
  v28 = type metadata accessor for UUID(0);
  v27[3] = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v27[2] = (char *)v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CRLSEBoardIdentifier(0);
  __chkstk_darwin(v5);
  v27[1] = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CRLSELibraryViewModel.Item(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v29 = (uint64_t)v27 - v12;
  v13 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1014055E8);
  v14 = static _SetStorage.resize(original:capacity:move:)(v13, a1, 1);
  v32 = v13;
  if (!*(_QWORD *)(v13 + 16))
  {
    v26 = v32;
    goto LABEL_28;
  }
  v27[0] = v2;
  v15 = 1 << *(_BYTE *)(v32 + 32);
  v16 = *(_QWORD *)(v32 + 56);
  v31 = (_QWORD *)(v32 + 56);
  if (v15 < 64)
    v17 = ~(-1 << v15);
  else
    v17 = -1;
  v18 = v17 & v16;
  v27[4] = v10 + 8;
  v30 = (unint64_t)(v15 + 63) >> 6;
  swift_retain(v32);
  v27[5] = v8;
  v27[6] = v7;
  v19 = v29;
  if (v18)
  {
    v20 = __clz(__rbit64(v18));
    goto LABEL_22;
  }
  if (v30 > 1)
  {
    v21 = v31[1];
    v22 = 1;
    if (v21)
      goto LABEL_21;
    v22 = 2;
    if (v30 > 2)
    {
      v21 = v31[2];
      if (v21)
        goto LABEL_21;
      v22 = 3;
      if (v30 > 3)
      {
        v21 = v31[3];
        if (!v21)
        {
          v23 = 4;
          if (v30 > 4)
          {
            v21 = v31[4];
            if (v21)
            {
              v22 = 4;
              goto LABEL_21;
            }
            while (1)
            {
              v22 = v23 + 1;
              if (__OFADD__(v23, 1))
              {
                __break(1u);
                JUMPOUT(0x100AE203CLL);
              }
              if (v22 >= v30)
                break;
              v21 = v31[v22];
              ++v23;
              if (v21)
                goto LABEL_21;
            }
          }
          goto LABEL_23;
        }
LABEL_21:
        v20 = __clz(__rbit64(v21)) + (v22 << 6);
LABEL_22:
        sub_1004B84E0(*(_QWORD *)(v32 + 48) + *(_QWORD *)(v8 + 72) * v20, v29, type metadata accessor for CRLSELibraryViewModel.Item);
        Hasher.init(_seed:)(v33, *(_QWORD *)(v14 + 40));
        sub_1004B8460(v19, (uint64_t)v10, type metadata accessor for CRLSELibraryViewModel.Item);
        v24 = (char *)&loc_100AE1DA0 + dword_100AE203C[swift_getEnumCaseMultiPayload(v10, v7)];
        __asm { BR              X9 }
      }
    }
  }
LABEL_23:
  swift_release(v32);
  v2 = (uint64_t *)v27[0];
  v25 = 1 << *(_BYTE *)(v32 + 32);
  if (v25 > 63)
    bzero(v31, ((unint64_t)(v25 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v31 = -1 << v25;
  v26 = v32;
  *(_QWORD *)(v32 + 16) = 0;
LABEL_28:
  swift_release(v26);
  *v2 = v14;
}

void sub_100AE204C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_1004B804C(&qword_101405348);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  if (*(_QWORD *)(v3 + 16))
  {
    v6 = 1 << *(_BYTE *)(v3 + 32);
    v7 = (_QWORD *)(v3 + 56);
    v8 = -1;
    if (v6 < 64)
      v8 = ~(-1 << v6);
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v6 + 63) >> 6;
    swift_retain(v3);
    v11 = 0;
    while (1)
    {
      if (v9)
      {
        v12 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v13 = v12 | (v11 << 6);
      }
      else
      {
        v14 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
          __break(1u);
LABEL_31:
          __break(1u);
          return;
        }
        if (v14 >= v10)
          goto LABEL_25;
        v15 = v7[v14];
        ++v11;
        if (!v15)
        {
          v11 = v14 + 1;
          if (v14 + 1 >= v10)
            goto LABEL_25;
          v15 = v7[v11];
          if (!v15)
          {
            v11 = v14 + 2;
            if (v14 + 2 >= v10)
              goto LABEL_25;
            v15 = v7[v11];
            if (!v15)
            {
              v16 = v14 + 3;
              if (v16 >= v10)
              {
LABEL_25:
                swift_release(v3);
                v17 = 1 << *(_BYTE *)(v3 + 32);
                if (v17 > 63)
                  bzero((void *)(v3 + 56), ((unint64_t)(v17 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v7 = -1 << v17;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v15 = v7[v16];
              if (!v15)
              {
                while (1)
                {
                  v11 = v16 + 1;
                  if (__OFADD__(v16, 1))
                    goto LABEL_31;
                  if (v11 >= v10)
                    goto LABEL_25;
                  v15 = v7[v11];
                  ++v16;
                  if (v15)
                    goto LABEL_24;
                }
              }
              v11 = v16;
            }
          }
        }
LABEL_24:
        v9 = (v15 - 1) & v15;
        v13 = __clz(__rbit64(v15)) + (v11 << 6);
      }
      sub_100AE3804(*(_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v13), *(_BYTE *)(*(_QWORD *)(v3 + 48) + 16 * v13 + 8), v5);
    }
  }
  swift_release(v3);
  *v2 = v5;
}

void sub_100AE221C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  Swift::Int v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t *v23;
  __int128 v24[4];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_1004B804C(&qword_1014055C8);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v23 = v2;
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v8 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v9 = ~(-1 << v7);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v3 + 56);
    v11 = (unint64_t)(v7 + 63) >> 6;
    v12 = v5 + 56;
    swift_retain(v3);
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v14 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v15 = v14 | (v13 << 6);
      }
      else
      {
        v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
          __break(1u);
LABEL_32:
          __break(1u);
          return;
        }
        if (v19 >= v11)
          goto LABEL_26;
        v20 = v8[v19];
        ++v13;
        if (!v20)
        {
          v13 = v19 + 1;
          if (v19 + 1 >= v11)
            goto LABEL_26;
          v20 = v8[v13];
          if (!v20)
          {
            v13 = v19 + 2;
            if (v19 + 2 >= v11)
              goto LABEL_26;
            v20 = v8[v13];
            if (!v20)
            {
              v21 = v19 + 3;
              if (v21 >= v11)
              {
LABEL_26:
                swift_release(v3);
                v22 = 1 << *(_BYTE *)(v3 + 32);
                if (v22 > 63)
                  bzero((void *)(v3 + 56), ((unint64_t)(v22 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v22;
                v2 = v23;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v20 = v8[v21];
              if (!v20)
              {
                while (1)
                {
                  v13 = v21 + 1;
                  if (__OFADD__(v21, 1))
                    goto LABEL_32;
                  if (v13 >= v11)
                    goto LABEL_26;
                  v20 = v8[v13];
                  ++v21;
                  if (v20)
                    goto LABEL_25;
                }
              }
              v13 = v21;
            }
          }
        }
LABEL_25:
        v10 = (v20 - 1) & v20;
        v15 = __clz(__rbit64(v20)) + (v13 << 6);
      }
      v16 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v15);
      Hasher.init(_seed:)(v24, *(_QWORD *)(v6 + 40));
      sub_1008DF544(v24, *(_QWORD *)(v16 + 16));
      sub_100A1C5DC(v24);
      v17 = Hasher._finalize()();
      v18 = _HashTable.nextHole(atOrAfter:)(v17 & ~(-1 << *(_BYTE *)(v6 + 32)), v6 + 56, ~(-1 << *(_BYTE *)(v6 + 32)));
      *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v18) = v16;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  swift_release(v3);
  *v2 = v6;
}

void sub_100AE247C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t (*v21)(uint64_t);
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t);
  int EnumCaseMultiPayload;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  Swift::Int v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  int64_t v49;
  _QWORD *v50;
  uint64_t i;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[9];

  v2 = v1;
  v4 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CRLSpotlightManager.ChangeType(0);
  v53 = *(_QWORD *)(v7 - 8);
  v54 = v7;
  __chkstk_darwin(v7);
  v52 = (uint64_t)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v48 - v10;
  v12 = *v1;
  if (*(_QWORD *)(*v1 + 24) > a1)
    a1 = *(_QWORD *)(*v1 + 24);
  sub_1004B804C(&qword_1014055D8);
  v13 = static _SetStorage.resize(original:capacity:move:)(v12, a1, 1);
  v14 = v13;
  if (!*(_QWORD *)(v12 + 16))
    goto LABEL_39;
  v48 = v1;
  v15 = 1 << *(_BYTE *)(v12 + 32);
  v16 = *(_QWORD *)(v12 + 56);
  v50 = (_QWORD *)(v12 + 56);
  if (v15 < 64)
    v17 = ~(-1 << v15);
  else
    v17 = -1;
  v18 = v17 & v16;
  v49 = (unint64_t)(v15 + 63) >> 6;
  v19 = v13 + 56;
  swift_retain(v12);
  v20 = 0;
  v21 = type metadata accessor for CRLSpotlightManager.ChangeType;
  for (i = v12; ; v12 = i)
  {
    if (v18)
    {
      v23 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v24 = v23 | (v20 << 6);
      goto LABEL_26;
    }
    v25 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return;
    }
    if (v25 >= v49)
      goto LABEL_35;
    v26 = v50[v25];
    ++v20;
    if (!v26)
    {
      v20 = v25 + 1;
      if (v25 + 1 >= v49)
        goto LABEL_35;
      v26 = v50[v20];
      if (!v26)
      {
        v20 = v25 + 2;
        if (v25 + 2 >= v49)
          goto LABEL_35;
        v26 = v50[v20];
        if (!v26)
          break;
      }
    }
LABEL_25:
    v18 = (v26 - 1) & v26;
    v24 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_26:
    v28 = *(_QWORD *)(v53 + 72);
    sub_1004B84E0(*(_QWORD *)(v12 + 48) + v28 * v24, (uint64_t)v11, v21);
    Hasher.init(_seed:)(v55, *(_QWORD *)(v14 + 40));
    v29 = v11;
    v30 = (uint64_t)v11;
    v31 = v52;
    v32 = v21;
    sub_1004B8460(v30, v52, v21);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v31, v54);
    sub_1004B84E0(v31, (uint64_t)v6, type metadata accessor for CRLBoardIdentifier);
    Hasher._combine(_:)(EnumCaseMultiPayload == 1);
    v34 = type metadata accessor for UUID(0);
    v35 = sub_1004B7878((unint64_t *)&qword_1013DE630, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v55, v34, v35);
    v36 = &v6[*(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20)];
    v38 = *(_QWORD *)v36;
    v37 = *((_QWORD *)v36 + 1);
    swift_bridgeObjectRetain(v37);
    String.hash(into:)(v55, v38, v37);
    swift_bridgeObjectRelease();
    sub_1004B84A4((uint64_t)v6, type metadata accessor for CRLBoardIdentifier);
    v39 = Hasher._finalize()();
    v40 = -1 << *(_BYTE *)(v14 + 32);
    v41 = v39 & ~v40;
    v42 = v41 >> 6;
    if (((-1 << v41) & ~*(_QWORD *)(v19 + 8 * (v41 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v41) & ~*(_QWORD *)(v19 + 8 * (v41 >> 6)))) | v41 & 0x7FFFFFFFFFFFFFC0;
      v21 = v32;
      v11 = v29;
    }
    else
    {
      v43 = 0;
      v44 = (unint64_t)(63 - v40) >> 6;
      v21 = v32;
      v11 = v29;
      do
      {
        if (++v42 == v44 && (v43 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }
        v45 = v42 == v44;
        if (v42 == v44)
          v42 = 0;
        v43 |= v45;
        v46 = *(_QWORD *)(v19 + 8 * v42);
      }
      while (v46 == -1);
      v22 = __clz(__rbit64(~v46)) + (v42 << 6);
    }
    *(_QWORD *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    sub_1004B84E0((uint64_t)v11, *(_QWORD *)(v14 + 48) + v22 * v28, v21);
    ++*(_QWORD *)(v14 + 16);
  }
  v27 = v25 + 3;
  if (v27 < v49)
  {
    v26 = v50[v27];
    if (!v26)
    {
      while (1)
      {
        v20 = v27 + 1;
        if (__OFADD__(v27, 1))
          goto LABEL_41;
        if (v20 >= v49)
          goto LABEL_35;
        v26 = v50[v20];
        ++v27;
        if (v26)
          goto LABEL_25;
      }
    }
    v20 = v27;
    goto LABEL_25;
  }
LABEL_35:
  swift_release(v12);
  v2 = v48;
  v47 = 1 << *(_BYTE *)(v12 + 32);
  if (v47 > 63)
    bzero(v50, ((unint64_t)(v47 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v50 = -1 << v47;
  *(_QWORD *)(v12 + 16) = 0;
LABEL_39:
  swift_release(v12);
  *v2 = v14;
}

void sub_100AE290C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_1004B804C(&qword_101405410);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 0;
    v8 = (uint64_t *)(v3 + 56);
    v9 = 1 << *(_BYTE *)(v3 + 32);
    v29 = -1 << v9;
    v30 = v2;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v3 + 56);
    v31 = 1 << *(_BYTE *)(v3 + 32);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = v5 + 56;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v7 << 6);
      }
      else
      {
        v17 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return;
        }
        if (v17 >= v12)
          goto LABEL_36;
        v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          v7 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_36;
          v18 = v8[v7];
          if (!v18)
          {
            v7 = v17 + 2;
            if (v17 + 2 >= v12)
              goto LABEL_36;
            v18 = v8[v7];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_36:
                if (v31 >= 64)
                  bzero((void *)(v3 + 56), 8 * v12);
                else
                  *v8 = v29;
                v2 = v30;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  v7 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v7 >= v12)
                    goto LABEL_36;
                  v18 = v8[v7];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v7 = v19;
            }
          }
        }
LABEL_26:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
      v21 = static Hasher._hash(seed:_:)(*(_QWORD *)(v6 + 40), v20);
      v22 = -1 << *(_BYTE *)(v6 + 32);
      v23 = v21 & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  swift_release(v3);
  *v2 = v6;
}

void sub_100AE2B8C(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t *a3, unint64_t *a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __n128 v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, unint64_t, uint64_t, __n128);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  int64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t);
  unint64_t *v49;
  uint64_t v50;

  v49 = a4;
  v50 = a5;
  v7 = v5;
  v48 = a2;
  v9 = a2(0);
  v47 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v43 - v10;
  v12 = *v7;
  if (*(_QWORD *)(*v7 + 24) > a1)
    a1 = *(_QWORD *)(*v7 + 24);
  sub_1004B804C(a3);
  v13 = static _SetStorage.resize(original:capacity:move:)(v12, a1, 1);
  v14 = v13;
  if (!*(_QWORD *)(v12 + 16))
    goto LABEL_39;
  v15 = 1 << *(_BYTE *)(v12 + 32);
  v16 = *(_QWORD *)(v12 + 56);
  v46 = (_QWORD *)(v12 + 56);
  if (v15 < 64)
    v17 = ~(-1 << v15);
  else
    v17 = -1;
  v18 = v17 & v16;
  v44 = v7;
  v45 = (unint64_t)(v15 + 63) >> 6;
  v19 = v13 + 56;
  v20 = swift_retain(v12);
  v21 = 0;
  while (1)
  {
    if (v18)
    {
      v23 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v24 = v23 | (v21 << 6);
      goto LABEL_26;
    }
    v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return;
    }
    if (v25 >= v45)
      goto LABEL_35;
    v26 = v46[v25];
    ++v21;
    if (!v26)
    {
      v21 = v25 + 1;
      if (v25 + 1 >= v45)
        goto LABEL_35;
      v26 = v46[v21];
      if (!v26)
      {
        v21 = v25 + 2;
        if (v25 + 2 >= v45)
          goto LABEL_35;
        v26 = v46[v21];
        if (!v26)
          break;
      }
    }
LABEL_25:
    v18 = (v26 - 1) & v26;
    v24 = __clz(__rbit64(v26)) + (v21 << 6);
LABEL_26:
    v28 = v12;
    v29 = *(_QWORD *)(v12 + 48);
    v30 = *(_QWORD *)(v47 + 72);
    v31 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v47 + 32);
    v31(v11, v29 + v30 * v24, v9, v20);
    v32 = *(_QWORD *)(v14 + 40);
    v33 = sub_1004B7878(v49, v48, v50);
    v34 = dispatch thunk of Hashable._rawHashValue(seed:)(v32, v9, v33);
    v35 = -1 << *(_BYTE *)(v14 + 32);
    v36 = v34 & ~v35;
    v37 = v36 >> 6;
    if (((-1 << v36) & ~*(_QWORD *)(v19 + 8 * (v36 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v36) & ~*(_QWORD *)(v19 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v38 = 0;
      v39 = (unint64_t)(63 - v35) >> 6;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }
        v40 = v37 == v39;
        if (v37 == v39)
          v37 = 0;
        v38 |= v40;
        v41 = *(_QWORD *)(v19 + 8 * v37);
      }
      while (v41 == -1);
      v22 = __clz(__rbit64(~v41)) + (v37 << 6);
    }
    *(_QWORD *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    ((void (*)(unint64_t, char *, uint64_t))v31)(*(_QWORD *)(v14 + 48) + v22 * v30, v11, v9);
    ++*(_QWORD *)(v14 + 16);
    v12 = v28;
  }
  v27 = v25 + 3;
  if (v27 < v45)
  {
    v26 = v46[v27];
    if (!v26)
    {
      while (1)
      {
        v21 = v27 + 1;
        if (__OFADD__(v27, 1))
          goto LABEL_41;
        if (v21 >= v45)
          goto LABEL_35;
        v26 = v46[v21];
        ++v27;
        if (v26)
          goto LABEL_25;
      }
    }
    v21 = v27;
    goto LABEL_25;
  }
LABEL_35:
  swift_release(v12);
  v7 = v44;
  v42 = 1 << *(_BYTE *)(v12 + 32);
  if (v42 > 63)
    bzero(v46, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v46 = -1 << v42;
  *(_QWORD *)(v12 + 16) = 0;
LABEL_39:
  swift_release(v12);
  *v7 = v14;
}

void sub_100AE2EEC(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;

  v3 = v2;
  v4 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v5 = a1;
  else
    v5 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(a2);
  v6 = static _SetStorage.resize(original:capacity:move:)(v4, v5, 1);
  v7 = v6;
  if (*(_QWORD *)(v4 + 16))
  {
    v31 = v3;
    v8 = 1 << *(_BYTE *)(v4 + 32);
    v9 = (_QWORD *)(v4 + 56);
    if (v8 < 64)
      v10 = ~(-1 << v8);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v4 + 56);
    v12 = (unint64_t)(v8 + 63) >> 6;
    v13 = v6 + 56;
    swift_retain(v4);
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v17 = v16 | (v14 << 6);
      }
      else
      {
        v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return;
        }
        if (v18 >= v12)
          goto LABEL_36;
        v19 = v9[v18];
        ++v14;
        if (!v19)
        {
          v14 = v18 + 1;
          if (v18 + 1 >= v12)
            goto LABEL_36;
          v19 = v9[v14];
          if (!v19)
          {
            v14 = v18 + 2;
            if (v18 + 2 >= v12)
              goto LABEL_36;
            v19 = v9[v14];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v12)
              {
LABEL_36:
                swift_release(v4);
                v3 = v31;
                v30 = 1 << *(_BYTE *)(v4 + 32);
                if (v30 > 63)
                  bzero((void *)(v4 + 56), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v9 = -1 << v30;
                *(_QWORD *)(v4 + 16) = 0;
                break;
              }
              v19 = v9[v20];
              if (!v19)
              {
                while (1)
                {
                  v14 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v14 >= v12)
                    goto LABEL_36;
                  v19 = v9[v14];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v14 = v20;
            }
          }
        }
LABEL_26:
        v11 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      v21 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v17);
      v22 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v7 + 40));
      v23 = -1 << *(_BYTE *)(v7 + 32);
      v24 = v22 & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v13 + 8 * v25);
        }
        while (v29 == -1);
        v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v13 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v15) = v21;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  swift_release(v4);
  *v3 = v7;
}

void sub_100AE3184(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_1004B804C(&qword_1013DEA18);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v31 = v2;
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v8 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v9 = ~(-1 << v7);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v3 + 56);
    v11 = (unint64_t)(v7 + 63) >> 6;
    v12 = v5 + 56;
    swift_retain(v3);
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return;
        }
        if (v18 >= v11)
          goto LABEL_36;
        v19 = v8[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v11)
            goto LABEL_36;
          v19 = v8[v13];
          if (!v19)
          {
            v13 = v18 + 2;
            if (v18 + 2 >= v11)
              goto LABEL_36;
            v19 = v8[v13];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v11)
              {
LABEL_36:
                swift_release(v3);
                v2 = v31;
                v30 = 1 << *(_BYTE *)(v3 + 32);
                if (v30 > 63)
                  bzero((void *)(v3 + 56), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v30;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v19 = v8[v20];
              if (!v19)
              {
                while (1)
                {
                  v13 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v13 >= v11)
                    goto LABEL_36;
                  v19 = v8[v13];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v13 = v20;
            }
          }
        }
LABEL_26:
        v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = *(_QWORD *)(v3 + 48) + 40 * v17;
      v32 = *(_OWORD *)v21;
      v33 = *(_OWORD *)(v21 + 16);
      v34 = *(_QWORD *)(v21 + 32);
      v22 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v6 + 40));
      v23 = -1 << *(_BYTE *)(v6 + 32);
      v24 = v22 & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v12 + 8 * v25);
        }
        while (v29 == -1);
        v14 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = *(_QWORD *)(v6 + 48) + 40 * v14;
      *(_OWORD *)v15 = v32;
      *(_OWORD *)(v15 + 16) = v33;
      *(_QWORD *)(v15 + 32) = v34;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  swift_release(v3);
  *v2 = v6;
}

unint64_t sub_100AE344C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t ObjectType;
  uint64_t v10;
  Swift::Int v11;
  unint64_t result;
  _QWORD v14[9];

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v14[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)(v14, *(_QWORD *)(a2 + 40));
  v8 = *(_QWORD *)(a1 + 24);
  ObjectType = swift_getObjectType(*(_QWORD *)(a1 + 16));
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(ObjectType, v8);
  v10 = sub_1004B7878((unint64_t *)&qword_1013DE630, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v14, v4, v10);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v11 = Hasher._finalize()();
  result = _HashTable.nextHole(atOrAfter:)(v11 & ~(-1 << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1 << *(_BYTE *)(a2 + 32)));
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

unint64_t sub_100AE3588(Swift::UInt64 a1, Swift::UInt64 a2, char a3, uint64_t a4, double a5)
{
  Swift::UInt64 v10;
  Swift::UInt64 v11;
  Swift::UInt64 v12;
  Swift::UInt64 v13;
  Swift::UInt64 v14;
  Swift::Int v15;
  unint64_t result;
  uint64_t v17;
  uint64_t v18[9];

  Hasher.init(_seed:)(v18, *(_QWORD *)(a4 + 40));
  v10 = a1;
  v11 = a2;
  if ((a3 & 1) != 0)
  {
    v10 = qword_100F27438[a1];
    v11 = v10;
  }
  if ((v10 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v12 = v10;
  else
    v12 = 0;
  Hasher._combine(_:)(v12);
  if ((v11 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v13 = v11;
  else
    v13 = 0;
  Hasher._combine(_:)(v13);
  if ((*(_QWORD *)&a5 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v14 = *(_QWORD *)&a5;
  else
    v14 = 0;
  Hasher._combine(_:)(v14);
  v15 = Hasher._finalize()();
  result = _HashTable.nextHole(atOrAfter:)(v15 & ~(-1 << *(_BYTE *)(a4 + 32)), a4 + 56, ~(-1 << *(_BYTE *)(a4 + 32)));
  *(_QWORD *)(a4 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  v17 = *(_QWORD *)(a4 + 48) + 32 * result;
  *(_QWORD *)v17 = a1;
  *(_QWORD *)(v17 + 8) = a2;
  *(_BYTE *)(v17 + 16) = a3 & 1;
  *(double *)(v17 + 24) = a5;
  ++*(_QWORD *)(a4 + 16);
  return result;
}

unint64_t sub_100AE3698(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;

  v4 = *(_QWORD *)(a2 + 40);
  v5 = type metadata accessor for CalculateExpression(0);
  v6 = sub_1004B7878((unint64_t *)&unk_1013E8820, (uint64_t (*)(uint64_t))&type metadata accessor for CalculateExpression, (uint64_t)&protocol conformance descriptor for CalculateExpression);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  result = _HashTable.nextHole(atOrAfter:)(v7 & ~(-1 << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1 << *(_BYTE *)(a2 + 32)));
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

unint64_t sub_100AE3764(Swift::UInt a1, uint64_t a2)
{
  Swift::Int v4;
  unint64_t result;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, *(_QWORD *)(a2 + 40));
  Hasher._combine(_:)(a1);
  v4 = Hasher._finalize()();
  result = _HashTable.nextHole(atOrAfter:)(v4 & ~(-1 << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1 << *(_BYTE *)(a2 + 32)));
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

void sub_100AE3804(uint64_t a1, char a2, uint64_t a3)
{
  _QWORD v4[9];

  Hasher.init(_seed:)(v4, *(_QWORD *)(a3 + 40));
  __asm { BR              X10 }
}

unint64_t sub_100AE384C()
{
  uint64_t v0;
  char v1;
  void *v2;
  id v3;
  Swift::Int v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;

  Hasher._combine(_:)(0);
  v3 = v2;
  NSObject.hash(into:)(&v7);
  sub_1006B8384(v2, 0);
  v4 = Hasher._finalize()();
  result = _HashTable.nextHole(atOrAfter:)(v4 & ~(-1 << *(_BYTE *)(v0 + 32)), v0 + 56, ~(-1 << *(_BYTE *)(v0 + 32)));
  *(_QWORD *)(v0 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  v6 = *(_QWORD *)(v0 + 48) + 16 * result;
  *(_QWORD *)v6 = v2;
  *(_BYTE *)(v6 + 8) = v1;
  ++*(_QWORD *)(v0 + 16);
  return result;
}

unint64_t sub_100AE396C(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;
  unint64_t result;
  __int128 v6[4];

  Hasher.init(_seed:)(v6, *(_QWORD *)(a2 + 40));
  sub_1008DF544(v6, *(_QWORD *)(a1 + 16));
  sub_100A1C5DC(v6);
  v4 = Hasher._finalize()();
  result = _HashTable.nextHole(atOrAfter:)(v4 & ~(-1 << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1 << *(_BYTE *)(a2 + 32)));
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

unint64_t sub_100AE3A24(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;
  unint64_t result;

  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a2 + 40));
  result = _HashTable.nextHole(atOrAfter:)(v4 & ~(-1 << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1 << *(_BYTE *)(a2 + 32)));
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

uint64_t sub_100AE3AA4(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v29 = a1;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v28 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100AE2B8C(v12, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_1014052F8, (unint64_t *)&qword_1013DE630, (uint64_t)&protocol conformance descriptor for UUID);
  }
  else
  {
    if (v11 > v10)
    {
      sub_100AEBAEC((uint64_t (*)(_QWORD))&type metadata accessor for UUID, &qword_1014052F8);
      goto LABEL_12;
    }
    sub_100AF1B4C(v12, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_1014052F8, (unint64_t *)&qword_1013DE630, (uint64_t)&protocol conformance descriptor for UUID);
  }
  v13 = *v3;
  v14 = *(_QWORD *)(*v3 + 40);
  v15 = sub_1004B7878((unint64_t *)&qword_1013DE630, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v6, v15);
  v17 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = ~v17;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v9, *(_QWORD *)(v13 + 48) + v19 * a2, v6);
      sub_1004B7878((unint64_t *)&qword_1013E4880, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v21 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v29);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v21 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v18;
    }
    while (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v22 = v29;
  v23 = *v28;
  *(_QWORD *)(*v28 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v23 + 48) + *(_QWORD *)(v7 + 72) * a2, v22, v6);
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (!v26)
  {
    *(_QWORD *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

void sub_100AE3CF8(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ObjectType;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  Swift::Int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, __n128);
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[9];

  v41 = a1;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v35 - v11;
  v13 = *(_QWORD *)(*v3 + 16);
  v14 = *(_QWORD *)(*v3 + 24);
  v37 = v3;
  if (v14 > v13 && (a3 & 1) != 0)
    goto LABEL_12;
  v15 = v13 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100ADCB34(v15);
  }
  else
  {
    if (v14 > v13)
    {
      sub_100AEB578(&qword_1014053A0);
      goto LABEL_12;
    }
    sub_100AEC088(v15);
  }
  v16 = *v3;
  Hasher.init(_seed:)(v42, *(_QWORD *)(*v3 + 40));
  v17 = *(_QWORD *)(v41 + 24);
  ObjectType = swift_getObjectType(*(_QWORD *)(v41 + 16));
  (*(void (**)(uint64_t, uint64_t))(v17 + 32))(ObjectType, v17);
  v19 = sub_1004B7878((unint64_t *)&qword_1013DE630, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v42, v6, v19);
  v20 = *(void (**)(char *, uint64_t))(v7 + 8);
  v20(v12, v6);
  v21 = Hasher._finalize()();
  v22 = -1 << *(_BYTE *)(v16 + 32);
  a2 = v21 & ~v22;
  v39 = v16 + 56;
  v40 = v16;
  if (((*(_QWORD *)(v16 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v38 = ~v22;
    v36 = type metadata accessor for CRLTransactableHashableWrapper();
    do
    {
      v23 = *(_QWORD *)(*(_QWORD *)(v40 + 48) + 8 * a2);
      v24 = *(_QWORD *)(v23 + 24);
      v25 = swift_getObjectType(*(_QWORD *)(v23 + 16));
      v26 = *(void (**)(uint64_t, uint64_t, __n128))(v24 + 32);
      v27 = swift_retain(v23);
      v26(v25, v24, v27);
      v28 = *(_QWORD *)(v41 + 24);
      v29 = swift_getObjectType(*(_QWORD *)(v41 + 16));
      (*(void (**)(uint64_t, uint64_t))(v28 + 32))(v29, v28);
      v30 = static UUID.== infix(_:_:)(v12);
      v20(v10, v6);
      v20(v12, v6);
      swift_release(v23);
      if ((v30 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v38;
    }
    while (((*(_QWORD *)(v39 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v31 = *v37;
  *(_QWORD *)(v31 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v31 + 48) + 8 * a2) = v41;
  v32 = *(_QWORD *)(v31 + 16);
  v33 = __OFADD__(v32, 1);
  v34 = v32 + 1;
  if (!v33)
  {
    *(_QWORD *)(v31 + 16) = v34;
    return;
  }
  __break(1u);
LABEL_15:
  ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v36);
  __break(1u);
}

void sub_100AE3F94(Swift::UInt a1, char a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  _QWORD v22[9];

  v8 = *(_QWORD *)(*v4 + 16);
  v9 = *(_QWORD *)(*v4 + 24);
  if (v9 > v8 && (a4 & 1) != 0)
    goto LABEL_19;
  v10 = v8 + 1;
  if ((a4 & 1) != 0)
  {
    sub_100ADCEBC(v10);
  }
  else
  {
    if (v9 > v8)
    {
      sub_100AE9E84();
      goto LABEL_19;
    }
    sub_100AEC3F0(v10);
  }
  v11 = *v4;
  Hasher.init(_seed:)(v22, *(_QWORD *)(*v4 + 40));
  if ((a2 & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(a1);
  }
  v12 = Hasher._finalize()();
  v13 = -1 << *(_BYTE *)(v11 + 32);
  a3 = v12 & ~v13;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = ~v13;
    do
    {
      v15 = *(_QWORD *)(v11 + 48) + 16 * a3;
      if ((*(_BYTE *)(v15 + 8) & 1) != 0)
      {
        if ((a2 & 1) != 0)
          goto LABEL_18;
      }
      else if ((a2 & 1) == 0 && *(_QWORD *)v15 == a1)
      {
LABEL_18:
        v16 = sub_1004B804C(&qword_1013E6E50);
        ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v16);
        __break(1u);
        break;
      }
      a3 = (a3 + 1) & v14;
    }
    while (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0);
  }
LABEL_19:
  v17 = *v4;
  *(_QWORD *)(*v4 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v18 = *(_QWORD *)(v17 + 48) + 16 * a3;
  *(_QWORD *)v18 = a1;
  *(_BYTE *)(v18 + 8) = a2 & 1;
  v19 = *(_QWORD *)(v17 + 16);
  v20 = __OFADD__(v19, 1);
  v21 = v19 + 1;
  if (v20)
    __break(1u);
  else
    *(_QWORD *)(v17 + 16) = v21;
}

void sub_100AE411C(uint64_t a1, unsigned __int8 a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;

  v7 = a2;
  v8 = *(_QWORD *)(*v4 + 16);
  v9 = *(_QWORD *)(*v4 + 24);
  if (v9 > v8 && (a4 & 1) != 0)
    goto LABEL_19;
  v10 = v8 + 1;
  if ((a4 & 1) != 0)
  {
    sub_100ADD644(v10, &qword_101405358, &qword_1013E8708);
  }
  else
  {
    if (v9 > v8)
    {
      sub_100AEA220(&qword_101405358);
      goto LABEL_19;
    }
    sub_100AECB14(v10, &qword_101405358, &qword_1013E8708);
  }
  v11 = *v4;
  Hasher.init(_seed:)(&v27, *(_QWORD *)(*v4 + 40));
  if (v7 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    v25 = a1;
    v26 = v7 & 1;
    v12 = sub_1004B804C(&qword_1013E8708);
    CRExtensible.hash(into:)(&v27, v12);
  }
  v13 = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v11 + 32);
  a3 = v13 & ~v14;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v15 = ~v14;
    do
    {
      v16 = *(_QWORD *)(v11 + 48) + 16 * a3;
      v17 = *(unsigned __int8 *)(v16 + 8);
      if (v17 == 255)
      {
        if (v7 == 255)
          goto LABEL_18;
      }
      else if (v7 != 255)
      {
        v27 = *(_QWORD *)v16;
        v28 = v17 & 1;
        v25 = a1;
        v26 = v7 & 1;
        v18 = sub_10062E1B0();
        if ((static CRExtensible.== infix(_:_:)(&v27, &v25, &type metadata for CRLWPListStyleType, v18, &protocol witness table for Int, &protocol witness table for Int) & 1) != 0)
        {
LABEL_18:
          v19 = sub_1004B804C(&qword_1013F3EB0);
          ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v19);
          __break(1u);
          break;
        }
      }
      a3 = (a3 + 1) & v15;
    }
    while (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0);
  }
LABEL_19:
  v20 = *v4;
  *(_QWORD *)(*v4 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = *(_QWORD *)(v20 + 48) + 16 * a3;
  *(_QWORD *)v21 = a1;
  *(_BYTE *)(v21 + 8) = v7;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v24;
}

void sub_100AE4358(uint64_t a1, unsigned __int8 a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;

  v7 = a2;
  v8 = *(_QWORD *)(*v4 + 16);
  v9 = *(_QWORD *)(*v4 + 24);
  if (v9 > v8 && (a4 & 1) != 0)
    goto LABEL_19;
  v10 = v8 + 1;
  if ((a4 & 1) != 0)
  {
    sub_100ADD644(v10, &qword_101405390, &qword_1013E8758);
  }
  else
  {
    if (v9 > v8)
    {
      sub_100AEA220(&qword_101405390);
      goto LABEL_19;
    }
    sub_100AECB14(v10, &qword_101405390, &qword_1013E8758);
  }
  v11 = *v4;
  Hasher.init(_seed:)(&v29, *(_QWORD *)(*v4 + 40));
  if (v7 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    v27 = a1;
    v28 = v7 & 1;
    v12 = sub_1004B804C(&qword_1013E8758);
    CRExtensible.hash(into:)(&v29, v12);
  }
  v13 = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v11 + 32);
  a3 = v13 & ~v14;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v15 = ~v14;
    do
    {
      v16 = *(_QWORD *)(v11 + 48) + 16 * a3;
      v17 = *(unsigned __int8 *)(v16 + 8);
      if (v17 == 255)
      {
        if (v7 == 255)
          goto LABEL_18;
      }
      else if (v7 != 255)
      {
        v29 = *(_QWORD *)v16;
        v30 = v17 & 1;
        v27 = a1;
        v28 = v7 & 1;
        type metadata accessor for CRLWPWritingDirection(0);
        v19 = v18;
        v20 = sub_1004B7878((unint64_t *)&unk_1013E8760, (uint64_t (*)(uint64_t))type metadata accessor for CRLWPWritingDirection, (uint64_t)&unk_100EF1304);
        if ((static CRExtensible.== infix(_:_:)(&v29, &v27, v19, v20, &protocol witness table for Int, &protocol witness table for Int) & 1) != 0)
        {
LABEL_18:
          v21 = sub_1004B804C(&qword_1013F30D0);
          ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v21);
          __break(1u);
          break;
        }
      }
      a3 = (a3 + 1) & v15;
    }
    while (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0);
  }
LABEL_19:
  v22 = *v4;
  *(_QWORD *)(*v4 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v23 = *(_QWORD *)(v22 + 48) + 16 * a3;
  *(_QWORD *)v23 = a1;
  *(_BYTE *)(v23 + 8) = v7;
  v24 = *(_QWORD *)(v22 + 16);
  v25 = __OFADD__(v24, 1);
  v26 = v24 + 1;
  if (v25)
    __break(1u);
  else
    *(_QWORD *)(v22 + 16) = v26;
}

void sub_100AE45B0(uint64_t a1, unsigned __int8 a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;

  v7 = a2;
  v8 = *(_QWORD *)(*v4 + 16);
  v9 = *(_QWORD *)(*v4 + 24);
  if (v9 > v8 && (a4 & 1) != 0)
    goto LABEL_19;
  v10 = v8 + 1;
  if ((a4 & 1) != 0)
  {
    sub_100ADD644(v10, &qword_101405360, &qword_1013F3B10);
  }
  else
  {
    if (v9 > v8)
    {
      sub_100AEA220(&qword_101405360);
      goto LABEL_19;
    }
    sub_100AECB14(v10, &qword_101405360, &qword_1013F3B10);
  }
  v11 = *v4;
  Hasher.init(_seed:)(&v29, *(_QWORD *)(*v4 + 40));
  if (v7 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    v27 = a1;
    v28 = v7 & 1;
    v12 = sub_1004B804C(&qword_1013F3B10);
    CRExtensible.hash(into:)(&v29, v12);
  }
  v13 = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v11 + 32);
  a3 = v13 & ~v14;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v15 = ~v14;
    do
    {
      v16 = *(_QWORD *)(v11 + 48) + 16 * a3;
      v17 = *(unsigned __int8 *)(v16 + 8);
      if (v17 == 255)
      {
        if (v7 == 255)
          goto LABEL_18;
      }
      else if (v7 != 255)
      {
        v29 = *(_QWORD *)v16;
        v30 = v17 & 1;
        v27 = a1;
        v28 = v7 & 1;
        type metadata accessor for CRLWPParagraphAlignment(0);
        v19 = v18;
        v20 = sub_1004B7878((unint64_t *)&unk_1013E8720, (uint64_t (*)(uint64_t))type metadata accessor for CRLWPParagraphAlignment, (uint64_t)&unk_100EF20D4);
        if ((static CRExtensible.== infix(_:_:)(&v29, &v27, v19, v20, &protocol witness table for Int, &protocol witness table for Int) & 1) != 0)
        {
LABEL_18:
          v21 = sub_1004B804C(&qword_1013F30C8);
          ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v21);
          __break(1u);
          break;
        }
      }
      a3 = (a3 + 1) & v15;
    }
    while (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0);
  }
LABEL_19:
  v22 = *v4;
  *(_QWORD *)(*v4 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v23 = *(_QWORD *)(v22 + 48) + 16 * a3;
  *(_QWORD *)v23 = a1;
  *(_BYTE *)(v23 + 8) = v7;
  v24 = *(_QWORD *)(v22 + 16);
  v25 = __OFADD__(v24, 1);
  v26 = v24 + 1;
  if (v25)
    __break(1u);
  else
    *(_QWORD *)(v22 + 16) = v26;
}

uint64_t sub_100AE4808(_QWORD *a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  char v66;
  char v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD v100[14];
  char v101[96];
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  char v106[96];
  uint64_t v107;
  int v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;

  sub_1004C4938((uint64_t)a1, (uint64_t)v100, &qword_1013F3148);
  v55 = v100[1];
  v56 = v100[0];
  v51 = v100[4];
  v52 = v100[2];
  v7 = v100[6];
  v49 = v100[7];
  v50 = v100[5];
  v45 = v100[9];
  v46 = v100[3];
  v47 = v100[10];
  v48 = v100[8];
  v43 = v100[12];
  v44 = v100[11];
  v42 = v100[13];
  v8 = *(_QWORD *)(*v3 + 16);
  v9 = *(_QWORD *)(*v3 + 24);
  v57 = a1;
  v39 = v3;
  if (v9 > v8 && (a3 & 1) != 0)
    goto LABEL_59;
  v10 = v8 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100ADD1B0(v10);
  }
  else
  {
    if (v9 > v8)
    {
      sub_100AEA028();
      goto LABEL_59;
    }
    sub_100AEC6B0(v10);
  }
  v54 = *v3;
  Hasher.init(_seed:)(&v72, *(_QWORD *)(*v3 + 40));
  sub_1004C4938((uint64_t)a1, (uint64_t)v106, &qword_1013F3148);
  if (v107)
  {
    Hasher._combine(_:)(1u);
    v108 = v52;
    v109 = BYTE4(v52) & 1;
    v110 = v46;
    v111 = v51;
    v112 = v50;
    v113 = v7;
    v114 = v49;
    v115 = v48;
    v116 = v45;
    v117 = v47;
    v118 = v44;
    v119 = v43;
    v103 = v56;
    v104 = v55 & 1;
    swift_bridgeObjectRetain(v44);
    swift_bridgeObjectRetain(v43);
    swift_bridgeObjectRetain(v42);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v45);
    v11 = sub_1004B804C(&qword_1013F3EB8);
    CRExtensible.hash(into:)(&v72, v11);
    sub_1006C4BDC();
    sub_1007ECB8C(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004C4174);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v12 = Hasher._finalize()();
  v13 = -1 << *(_BYTE *)(v54 + 32);
  a2 = v12 & ~v13;
  if (((*(_QWORD *)(v54 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v41 = v7;
    v53 = ~v13;
    while (1)
    {
      v15 = (uint64_t *)(*(_QWORD *)(v54 + 48) + 112 * a2);
      v16 = *v15;
      v17 = v15[1];
      v18 = v15[2];
      v19 = v15[3];
      v63 = v15[5];
      v69 = v15[4];
      v20 = v15[8];
      v60 = v15[7];
      v61 = v15[6];
      v59 = v15[9];
      v21 = v15[11];
      v62 = v15[10];
      v22 = v15[12];
      v23 = v15[13];
      v58 = v18;
      if (!v22)
        break;
      v14 = v57;
      sub_1004C4938((uint64_t)v57, (uint64_t)v101, &qword_1013F3148);
      if (!v102)
        goto LABEL_14;
      v72 = v16;
      LOBYTE(v73) = v17 & 1;
      v70 = v56;
      v71 = v55 & 1;
      sub_1007ECB8C(v57, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004C485C);
      sub_1004C485C(v16, v17, v18, v19, v69, v63, v61, v60, v20, v59, v62, v21, v22, v23);
      v24 = sub_1007C8324();
      if ((static CRExtensible.== infix(_:_:)(&v72, &v70, &type metadata for CRLFillData.FillType, v24, &protocol witness table for Int, &protocol witness table for Int) & 1) != 0)
      {
        v40 = v22;
        v25 = v19;
        v26 = v63;
        if ((v58 & 0x100000000) != 0)
        {
          v27 = v60;
          if ((v52 & 0x100000000) == 0)
            goto LABEL_25;
        }
        else
        {
          v27 = v60;
          if ((v52 & 0x100000000) != 0 || *(float *)&v58 != *(float *)&v52)
            goto LABEL_25;
        }
        v28 = v59;
        if (v61)
        {
          if (!v41)
            goto LABEL_42;
          v72 = v25;
          LOBYTE(v73) = v69 & 1;
          v70 = v46;
          v71 = v51 & 1;
          v64 = sub_1006C5C14();
          swift_bridgeObjectRetain(v61);
          swift_bridgeObjectRetain(v41);
          if ((static CRExtensible.== infix(_:_:)(&v72, &v70, &type metadata for CRLColorModelRGBData.ColorSpace, v64, &protocol witness table for Int, &protocol witness table for Int) & 1) == 0|| *((float *)&v69 + 1) != *((float *)&v51 + 1))
          {
            swift_bridgeObjectRelease(v61);
            swift_bridgeObjectRelease(v41);
            sub_1007ECB8C(v57, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004C4174);
            sub_1004C4174(v16, v17, v58, v25, v69, v26, v61, v60, v20, v59, v62, v21, v40, v23);
            goto LABEL_15;
          }
          v27 = v60;
          if (*(float *)&v26 != *(float *)&v50)
          {
            swift_bridgeObjectRelease(v61);
            swift_bridgeObjectRelease(v41);
LABEL_25:
            sub_1007ECB8C(v57, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004C4174);
            sub_1004C4174(v16, v17, v58, v25, v69, v26, v61, v27, v20, v59, v62, v21, v40, v23);
            goto LABEL_15;
          }
          v28 = v59;
          if (*((float *)&v26 + 1) != *((float *)&v50 + 1))
          {
            swift_bridgeObjectRelease(v61);
            swift_bridgeObjectRelease(v41);
LABEL_52:
            sub_1007ECB8C(v57, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004C4174);
            v37 = v40;
            v38 = v23;
            v36 = v21;
LABEL_53:
            sub_1004C4174(v16, v17, v58, v25, v69, v26, v61, v27, v20, v28, v62, v36, v37, v38);
            goto LABEL_15;
          }
          v65 = sub_100C9E04C(v61, v41);
          swift_bridgeObjectRelease(v61);
          swift_bridgeObjectRelease(v41);
          if ((v65 & 1) == 0)
          {
LABEL_42:
            sub_1007ECB8C(v57, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004C4174);
            sub_1004C4174(v16, v17, v58, v25, v69, v26, v61, v60, v20, v28, v62, v21, v40, v23);
            goto LABEL_15;
          }
        }
        else if (v41)
        {
          goto LABEL_42;
        }
        if (v28)
        {
          v27 = v60;
          if (!v45)
            goto LABEL_52;
          if (*(float *)&v60 != *(float *)&v49)
            goto LABEL_52;
          if (*((float *)&v60 + 1) != *((float *)&v49 + 1))
            goto LABEL_52;
          if (*(float *)&v20 != *(float *)&v48)
            goto LABEL_52;
          if (*((float *)&v20 + 1) != *((float *)&v48 + 1))
            goto LABEL_52;
          swift_bridgeObjectRetain(v28);
          swift_bridgeObjectRetain(v45);
          v66 = sub_100C9E04C(v28, v45);
          swift_bridgeObjectRelease(v28);
          v27 = v60;
          swift_bridgeObjectRelease(v45);
          if ((v66 & 1) == 0)
            goto LABEL_52;
        }
        else
        {
          v27 = v60;
          if (v45)
            goto LABEL_52;
        }
        if (v21)
        {
          if (!v44)
            goto LABEL_52;
          if (*(float *)&v62 != *(float *)&v47)
            goto LABEL_52;
          swift_bridgeObjectRetain(v44);
          v29 = swift_bridgeObjectRetain(v21);
          v67 = sub_100C9E04C(v29, v44);
          swift_bridgeObjectRelease(v21);
          v27 = v60;
          swift_bridgeObjectRelease(v44);
          if ((v67 & 1) == 0)
            goto LABEL_52;
        }
        else if (v44)
        {
          sub_1007ECB8C(v57, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004C4174);
          v37 = v40;
          v38 = v23;
          v36 = 0;
          goto LABEL_53;
        }
        if ((sub_100C9E04C(v40, v43) & 1) == 0)
          goto LABEL_52;
        v68 = sub_100C9E04C(v23, v42);
        sub_1007ECB8C(v57, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004C4174);
        sub_1004C4174(v16, v17, v58, v25, v69, v26, v61, v27, v20, v28, v62, v21, v40, v23);
        if ((v68 & 1) != 0)
        {
LABEL_58:
          v30 = sub_1004B804C(&qword_1013F3148);
          ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v30);
          __break(1u);
          goto LABEL_59;
        }
      }
      else
      {
        sub_1007ECB8C(v57, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004C4174);
        sub_1004C4174(v16, v17, v18, v19, v69, v63, v61, v60, v20, v59, v62, v21, v22, v23);
      }
LABEL_15:
      a2 = (a2 + 1) & v53;
      if (((*(_QWORD *)(v54 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
        goto LABEL_59;
    }
    v14 = v57;
    sub_1004C4938((uint64_t)v57, (uint64_t)&v103, &qword_1013F3148);
    if (!v105)
      goto LABEL_58;
LABEL_14:
    v72 = v16;
    v73 = v17;
    v74 = v18;
    v75 = v19;
    v76 = v69;
    v77 = v63;
    v78 = v61;
    v79 = v60;
    v80 = v20;
    v81 = v59;
    v82 = v62;
    v83 = v21;
    v84 = v22;
    v85 = v23;
    v86 = v56;
    v87 = v55;
    v88 = v52;
    v89 = v46;
    v90 = v51;
    v91 = v50;
    v92 = v41;
    v93 = v49;
    v94 = v48;
    v95 = v45;
    v96 = v47;
    v97 = v44;
    v98 = v43;
    v99 = v42;
    sub_1007ECB8C(v14, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004C485C);
    sub_1004C485C(v16, v17, v18, v19, v69, v63, v61, v60, v20, v59, v62, v21, v22, v23);
    sub_1007C825C((uint64_t)&v72);
    goto LABEL_15;
  }
LABEL_59:
  v31 = *v39;
  *(_QWORD *)(*v39 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = sub_1004C4938((uint64_t)v57, *(_QWORD *)(v31 + 48) + 112 * a2, &qword_1013F3148);
  v33 = *(_QWORD *)(v31 + 16);
  v34 = __OFADD__(v33, 1);
  v35 = v33 + 1;
  if (v34)
    __break(1u);
  else
    *(_QWORD *)(v31 + 16) = v35;
  return result;
}

void sub_100AE51B4(uint64_t a1, unsigned __int8 a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;

  v7 = a2;
  v8 = *(_QWORD *)(*v4 + 16);
  v9 = *(_QWORD *)(*v4 + 24);
  if (v9 > v8 && (a4 & 1) != 0)
    goto LABEL_19;
  v10 = v8 + 1;
  if ((a4 & 1) != 0)
  {
    sub_100ADD644(v10, &qword_101405370, &qword_1013F3800);
  }
  else
  {
    if (v9 > v8)
    {
      sub_100AEA220(&qword_101405370);
      goto LABEL_19;
    }
    sub_100AECB14(v10, &qword_101405370, &qword_1013F3800);
  }
  v11 = *v4;
  Hasher.init(_seed:)(&v29, *(_QWORD *)(*v4 + 40));
  if (v7 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    v27 = a1;
    v28 = v7 & 1;
    v12 = sub_1004B804C(&qword_1013F3800);
    CRExtensible.hash(into:)(&v29, v12);
  }
  v13 = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v11 + 32);
  a3 = v13 & ~v14;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v15 = ~v14;
    do
    {
      v16 = *(_QWORD *)(v11 + 48) + 16 * a3;
      v17 = *(unsigned __int8 *)(v16 + 8);
      if (v17 == 255)
      {
        if (v7 == 255)
          goto LABEL_18;
      }
      else if (v7 != 255)
      {
        v29 = *(_QWORD *)v16;
        v30 = v17 & 1;
        v27 = a1;
        v28 = v7 & 1;
        type metadata accessor for CRLWPStrikethru(0);
        v19 = v18;
        v20 = sub_1004B7878(&qword_1013E8730, (uint64_t (*)(uint64_t))type metadata accessor for CRLWPStrikethru, (uint64_t)&unk_100EF1FB4);
        if ((static CRExtensible.== infix(_:_:)(&v29, &v27, v19, v20, &protocol witness table for Int, &protocol witness table for Int) & 1) != 0)
        {
LABEL_18:
          v21 = sub_1004B804C((uint64_t *)&unk_1013F3E90);
          ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v21);
          __break(1u);
          break;
        }
      }
      a3 = (a3 + 1) & v15;
    }
    while (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0);
  }
LABEL_19:
  v22 = *v4;
  *(_QWORD *)(*v4 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v23 = *(_QWORD *)(v22 + 48) + 16 * a3;
  *(_QWORD *)v23 = a1;
  *(_BYTE *)(v23 + 8) = v7;
  v24 = *(_QWORD *)(v22 + 16);
  v25 = __OFADD__(v24, 1);
  v26 = v24 + 1;
  if (v25)
    __break(1u);
  else
    *(_QWORD *)(v22 + 16) = v26;
}

void sub_100AE540C(uint64_t a1, unsigned __int8 a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;

  v7 = a2;
  v8 = *(_QWORD *)(*v4 + 16);
  v9 = *(_QWORD *)(*v4 + 24);
  if (v9 > v8 && (a4 & 1) != 0)
    goto LABEL_19;
  v10 = v8 + 1;
  if ((a4 & 1) != 0)
  {
    sub_100ADD644(v10, &qword_101405378, &qword_1013E8738);
  }
  else
  {
    if (v9 > v8)
    {
      sub_100AEA220(&qword_101405378);
      goto LABEL_19;
    }
    sub_100AECB14(v10, &qword_101405378, &qword_1013E8738);
  }
  v11 = *v4;
  Hasher.init(_seed:)(&v29, *(_QWORD *)(*v4 + 40));
  if (v7 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    v27 = a1;
    v28 = v7 & 1;
    v12 = sub_1004B804C(&qword_1013E8738);
    CRExtensible.hash(into:)(&v29, v12);
  }
  v13 = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v11 + 32);
  a3 = v13 & ~v14;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v15 = ~v14;
    do
    {
      v16 = *(_QWORD *)(v11 + 48) + 16 * a3;
      v17 = *(unsigned __int8 *)(v16 + 8);
      if (v17 == 255)
      {
        if (v7 == 255)
          goto LABEL_18;
      }
      else if (v7 != 255)
      {
        v29 = *(_QWORD *)v16;
        v30 = v17 & 1;
        v27 = a1;
        v28 = v7 & 1;
        type metadata accessor for CRLWPUnderline(0);
        v19 = v18;
        v20 = sub_1004B7878((unint64_t *)&unk_1013E8740, (uint64_t (*)(uint64_t))type metadata accessor for CRLWPUnderline, (uint64_t)&unk_100EF2074);
        if ((static CRExtensible.== infix(_:_:)(&v29, &v27, v19, v20, &protocol witness table for Int, &protocol witness table for Int) & 1) != 0)
        {
LABEL_18:
          v21 = sub_1004B804C(&qword_1013F30C0);
          ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v21);
          __break(1u);
          break;
        }
      }
      a3 = (a3 + 1) & v15;
    }
    while (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0);
  }
LABEL_19:
  v22 = *v4;
  *(_QWORD *)(*v4 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v23 = *(_QWORD *)(v22 + 48) + 16 * a3;
  *(_QWORD *)v23 = a1;
  *(_BYTE *)(v23 + 8) = v7;
  v24 = *(_QWORD *)(v22 + 16);
  v25 = __OFADD__(v24, 1);
  v26 = v24 + 1;
  if (v25)
    __break(1u);
  else
    *(_QWORD *)(v22 + 16) = v26;
}

void sub_100AE5664(char a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::UInt8 v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD v20[9];

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_19;
  v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100ADD960(v8);
  }
  else
  {
    if (v7 > v6)
    {
      sub_100AEA3BC();
      goto LABEL_19;
    }
    sub_100AECDF8(v8);
  }
  v9 = *v3;
  Hasher.init(_seed:)(v20, *(_QWORD *)(*v3 + 40));
  if (a1 == 2)
  {
    v10 = 0;
  }
  else
  {
    v10 = a1 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v10);
  v11 = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(v9 + 32);
  a2 = v11 & ~v12;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v13 = ~v12;
    do
    {
      v14 = *(unsigned __int8 *)(*(_QWORD *)(v9 + 48) + a2);
      if (v14 == 2)
      {
        if (a1 == 2)
          goto LABEL_18;
      }
      else if (a1 != 2 && ((((a1 & 1) == 0) ^ v14) & 1) != 0)
      {
LABEL_18:
        v15 = sub_1004B804C(&qword_1013EFCA0);
        ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v15);
        __break(1u);
        break;
      }
      a2 = (a2 + 1) & v13;
    }
    while (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_19:
  v16 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v16 + 48) + a2) = a1;
  v17 = *(_QWORD *)(v16 + 16);
  v18 = __OFADD__(v17, 1);
  v19 = v17 + 1;
  if (v18)
    __break(1u);
  else
    *(_QWORD *)(v16 + 16) = v19;
}

void sub_100AE57F8(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::UInt32 v11;
  Swift::Int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  _QWORD v22[9];

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_25;
  v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100ADDC44(v8);
  }
  else
  {
    if (v7 > v6)
    {
      sub_100AEA54C();
      goto LABEL_25;
    }
    sub_100AED0A8(v8);
  }
  v9 = *v3;
  Hasher.init(_seed:)(v22, *(_QWORD *)(*v3 + 40));
  if ((a1 & 0x100000000) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    if ((a1 & 0x7FFFFF) == 0 && (a1 & 0x7F800000) == 0)
      v11 = 0;
    else
      v11 = a1;
    Hasher._combine(_:)(v11);
  }
  v12 = Hasher._finalize()();
  v13 = -1 << *(_BYTE *)(v9 + 32);
  a2 = v12 & ~v13;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v14 = ~v13;
    do
    {
      v15 = *(_QWORD *)(v9 + 48) + 8 * a2;
      if ((*(_BYTE *)(v15 + 4) & 1) != 0)
      {
        if ((a1 & 0x100000000) != 0)
          goto LABEL_24;
      }
      else if ((a1 & 0x100000000) == 0 && *(float *)v15 == *(float *)&a1)
      {
LABEL_24:
        v16 = sub_1004B804C(&qword_1013E0B30);
        ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v16);
        __break(1u);
        break;
      }
      a2 = (a2 + 1) & v14;
    }
    while (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_25:
  v17 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  v18 = *(_QWORD *)(v17 + 48) + 8 * a2;
  *(_DWORD *)v18 = a1;
  *(_BYTE *)(v18 + 4) = BYTE4(a1) & 1;
  v19 = *(_QWORD *)(v17 + 16);
  v20 = __OFADD__(v19, 1);
  v21 = v19 + 1;
  if (v20)
    __break(1u);
  else
    *(_QWORD *)(v17 + 16) = v21;
}

void sub_100AE598C(uint64_t a1, uint64_t a2, unsigned __int8 a3, unint64_t a4, char a5)
{
  uint64_t *v5;
  uint64_t *v6;
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  char v32;

  v6 = v5;
  v10 = a3;
  v11 = *(_QWORD *)(*v5 + 16);
  v12 = *(_QWORD *)(*v5 + 24);
  if (v12 > v11 && (a5 & 1) != 0)
    goto LABEL_19;
  v13 = v11 + 1;
  if ((a5 & 1) != 0)
  {
    sub_100ADDF3C(v13);
  }
  else
  {
    if (v12 > v11)
    {
      sub_100AEA6F0();
      goto LABEL_19;
    }
    sub_100AED36C(v13);
  }
  v14 = *v5;
  Hasher.init(_seed:)(&v31, *(_QWORD *)(*v5 + 40));
  if (v10 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    v28 = a1;
    v29 = a2;
    v30 = v10 & 1;
    v15 = sub_1004B804C(&qword_1013F3890);
    CRExtensible.hash(into:)(&v31, v15);
  }
  v16 = Hasher._finalize()();
  v17 = -1 << *(_BYTE *)(v14 + 32);
  a4 = v16 & ~v17;
  if (((*(_QWORD *)(v14 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8)) >> a4) & 1) != 0)
  {
    v18 = ~v17;
    do
    {
      v19 = *(_QWORD *)(v14 + 48) + 24 * a4;
      v20 = *(unsigned __int8 *)(v19 + 16);
      if (v20 == 255)
      {
        if (v10 == 255)
          goto LABEL_18;
      }
      else if (v10 != 255)
      {
        v31 = *(_OWORD *)v19;
        v32 = v20 & 1;
        v28 = a1;
        v29 = a2;
        v30 = v10 & 1;
        v21 = sub_10062E1F4();
        if ((static CRExtensible.== infix(_:_:)(&v31, &v28, &type metadata for CRLWPFontName, v21, &protocol witness table for String, &protocol witness table for String) & 1) != 0)
        {
LABEL_18:
          v22 = sub_1004B804C((uint64_t *)&unk_1013F3E80);
          ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v22);
          __break(1u);
          break;
        }
      }
      a4 = (a4 + 1) & v18;
    }
    while (((*(_QWORD *)(v14 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8)) >> a4) & 1) != 0);
  }
LABEL_19:
  v23 = *v6;
  *(_QWORD *)(*v6 + 8 * (a4 >> 6) + 56) |= 1 << a4;
  v24 = *(_QWORD *)(v23 + 48) + 24 * a4;
  *(_QWORD *)v24 = a1;
  *(_QWORD *)(v24 + 8) = a2;
  *(_BYTE *)(v24 + 16) = v10;
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (v26)
    __break(1u);
  else
    *(_QWORD *)(v23 + 16) = v27;
}

void sub_100AE5B9C(uint64_t a1, unint64_t a2, char a3, uint64_t *a4, unint64_t *a5, _QWORD *a6)
{
  uint64_t *v6;
  uint64_t *v9;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  char v20;
  uint64_t v21;
  id v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  v9 = v6;
  v12 = *(_QWORD *)(*v6 + 16);
  v13 = *(_QWORD *)(*v6 + 24);
  if (v13 > v12 && (a3 & 1) != 0)
    goto LABEL_14;
  v14 = v12 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100AE2EEC(v14, a4);
  }
  else
  {
    if (v13 > v12)
    {
      sub_100AEBD1C(a4);
      goto LABEL_14;
    }
    sub_100AF1E68(v14, a4);
  }
  v15 = *v6;
  v16 = NSObject._rawHashValue(seed:)(*(_QWORD *)(*v6 + 40));
  v17 = -1 << *(_BYTE *)(v15 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = sub_1004B8930(0, a5, a6);
    v19 = *(id *)(*(_QWORD *)(v15 + 48) + 8 * a2);
    v20 = static NSObject.== infix(_:_:)(v19, a1);

    if ((v20 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v18);
      __break(1u);
    }
    else
    {
      v21 = ~v17;
      while (1)
      {
        a2 = (a2 + 1) & v21;
        if (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v22 = *(id *)(*(_QWORD *)(v15 + 48) + 8 * a2);
        v23 = static NSObject.== infix(_:_:)(v22, a1);

        if ((v23 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v24 = *v9;
  *(_QWORD *)(*v9 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v24 + 48) + 8 * a2) = a1;
  v25 = *(_QWORD *)(v24 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (v26)
    __break(1u);
  else
    *(_QWORD *)(v24 + 16) = v27;
}

void sub_100AE5D2C(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  __int128 v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  _QWORD v19[9];

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100ADE574(v8);
  }
  else
  {
    if (v7 > v6)
    {
      sub_100AEAA5C();
      goto LABEL_14;
    }
    sub_100AED934(v8);
  }
  v9 = *v3;
  Hasher.init(_seed:)(v19, *(_QWORD *)(*v3 + 40));
  AnyHashable.hash(into:)(v19);
  Hasher._combine(_:)(*(_QWORD *)(a1 + 40));
  v10 = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(v9 + 32);
  a2 = v10 & ~v11;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v12 = ~v11;
    while (1)
    {
      sub_10051FDDC(*(_QWORD *)(v9 + 48) + 48 * a2, (uint64_t)v19);
      if ((static AnyHashable.== infix(_:_:)(v19, a1) & 1) != 0 && v19[5] == *(_QWORD *)(a1 + 40))
        break;
      sub_10051FE18(v19);
      a2 = (a2 + 1) & v12;
      if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
        goto LABEL_14;
    }
    sub_10051FE18(v19);
    ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AnyCRLCommandChangeContext);
    __break(1u);
  }
LABEL_14:
  v13 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  v14 = (_OWORD *)(*(_QWORD *)(v13 + 48) + 48 * a2);
  v15 = *(_OWORD *)(a1 + 16);
  *v14 = *(_OWORD *)a1;
  v14[1] = v15;
  v14[2] = *(_OWORD *)(a1 + 32);
  v16 = *(_QWORD *)(v13 + 16);
  v17 = __OFADD__(v16, 1);
  v18 = v16 + 1;
  if (v17)
    __break(1u);
  else
    *(_QWORD *)(v13 + 16) = v18;
}

uint64_t sub_100AE5ECC(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  Swift::Int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char v38;
  uint64_t v39;
  uint64_t result;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[9];

  v7 = type metadata accessor for CRLBoardIdentifier(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v44 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)&v44 - v15;
  v17 = *(_QWORD *)(*v3 + 16);
  v18 = *(_QWORD *)(*v3 + 24);
  v45 = v8;
  v46 = v3;
  if (v18 <= v17 || (a3 & 1) == 0)
  {
    v19 = v17 + 1;
    if ((a3 & 1) != 0)
    {
      sub_100ADE85C(v19);
    }
    else
    {
      if (v18 > v17)
      {
        sub_100AEB72C(type metadata accessor for CRLBoardIdentifier, &qword_1013DE628);
        goto LABEL_19;
      }
      sub_100AEDBE0(v19);
    }
    v20 = *v3;
    Hasher.init(_seed:)(v49, *(_QWORD *)(*v3 + 40));
    v21 = type metadata accessor for UUID(0);
    v22 = sub_1004B7878((unint64_t *)&qword_1013DE630, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v49, v21, v22);
    v47 = type metadata accessor for CRLBoardIdentifierStorage(0);
    v23 = (uint64_t *)(a1 + *(int *)(v47 + 20));
    v24 = *v23;
    v25 = v23[1];
    swift_bridgeObjectRetain(v25);
    String.hash(into:)(v49, v24, v25);
    swift_bridgeObjectRelease(v25);
    v26 = Hasher._finalize()();
    v27 = -1 << *(_BYTE *)(v20 + 32);
    a2 = v26 & ~v27;
    v48 = v20;
    v28 = v20 + 56;
    if (((*(_QWORD *)(v28 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
    {
      v44 = v7;
      v29 = ~v27;
      v30 = *(_QWORD *)(v8 + 72);
      do
      {
        sub_1004B8460(*(_QWORD *)(v48 + 48) + v30 * a2, (uint64_t)v16, type metadata accessor for CRLBoardIdentifier);
        v31 = static UUID.== infix(_:_:)(v16);
        sub_1004B8460((uint64_t)v16, (uint64_t)v14, type metadata accessor for CRLBoardIdentifier);
        sub_1004B8460(a1, (uint64_t)v11, type metadata accessor for CRLBoardIdentifier);
        if ((v31 & 1) != 0)
        {
          v32 = *(int *)(v47 + 20);
          v33 = *(_QWORD *)&v14[v32];
          v34 = *(_QWORD *)&v14[v32 + 8];
          v35 = &v11[v32];
          v36 = *((_QWORD *)v35 + 1);
          if (v33 == *(_QWORD *)v35 && v34 == v36)
            goto LABEL_22;
          v38 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v34, *(_QWORD *)v35, v36, 0);
          sub_1004B84A4((uint64_t)v11, type metadata accessor for CRLBoardIdentifier);
          sub_1004B84A4((uint64_t)v14, type metadata accessor for CRLBoardIdentifier);
          sub_1004B84A4((uint64_t)v16, type metadata accessor for CRLBoardIdentifier);
          if ((v38 & 1) != 0)
            goto LABEL_23;
        }
        else
        {
          sub_1004B84A4((uint64_t)v11, type metadata accessor for CRLBoardIdentifier);
          sub_1004B84A4((uint64_t)v14, type metadata accessor for CRLBoardIdentifier);
          sub_1004B84A4((uint64_t)v16, type metadata accessor for CRLBoardIdentifier);
        }
        a2 = (a2 + 1) & v29;
      }
      while (((*(_QWORD *)(v28 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
    }
  }
LABEL_19:
  v39 = *v46;
  *(_QWORD *)(*v46 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = sub_1004B84E0(a1, *(_QWORD *)(v39 + 48) + *(_QWORD *)(v45 + 72) * a2, type metadata accessor for CRLBoardIdentifier);
  v41 = *(_QWORD *)(v39 + 16);
  v42 = __OFADD__(v41, 1);
  v43 = v41 + 1;
  if (v42)
  {
    __break(1u);
LABEL_22:
    sub_1004B84A4((uint64_t)v11, type metadata accessor for CRLBoardIdentifier);
    sub_1004B84A4((uint64_t)v14, type metadata accessor for CRLBoardIdentifier);
    sub_1004B84A4((uint64_t)v16, type metadata accessor for CRLBoardIdentifier);
LABEL_23:
    result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v44);
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v39 + 16) = v43;
  }
  return result;
}

void sub_100AE621C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unint64_t a5, char a6)
{
  uint64_t *v6;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  void *v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  id v46;
  char *v47;
  uint64_t v48[9];

  v12 = *(_QWORD *)(*v6 + 16);
  v13 = *(_QWORD *)(*v6 + 24);
  if (v13 > v12 && (a6 & 1) != 0)
    goto LABEL_15;
  v14 = v12 + 1;
  if ((a6 & 1) != 0)
  {
    sub_100ADEC18(v14);
  }
  else
  {
    if (v13 > v12)
    {
      v15 = a1;
      v16 = a2;
      v17 = a3;
      sub_100AEAC38();
      goto LABEL_16;
    }
    sub_100AEDF5C(v14);
  }
  v18 = *v6;
  Hasher.init(_seed:)(v48, *(_QWORD *)(*v6 + 40));
  sub_1009E3D90((uint64_t)v48, a1, a2, a3, a4);
  a5 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v18 + 32));
  v46 = (id)(v18 + 56);
  if (((*(_QWORD *)(v18 + 56 + ((a5 >> 3) & 0xFFFFFFFFFFFFF8)) >> a5) & 1) == 0)
  {
LABEL_15:
    v15 = a1;
    v16 = a2;
    v17 = a3;
    goto LABEL_16;
  }
  v39 = -1 << *(_BYTE *)(v18 + 32);
  v42 = v18;
  v19 = *(_QWORD *)(v18 + 48) + 32 * a5;
  v20 = *(id *)v19;
  v21 = *(void **)(v19 + 8);
  v22 = *(_QWORD *)(v19 + 16);
  v23 = *(_BYTE *)(v19 + 24);
  sub_1004DD884(*(id *)v19, v21, v22, v23);
  v15 = a1;
  v24 = a1;
  v16 = a2;
  v25 = a2;
  v17 = a3;
  HIDWORD(v44) = a4;
  v26 = sub_1009E554C((uint64_t)v20, (uint64_t)v21, v22, v23, v24, v25, a3, a4, v39, (uint64_t)v41, v42, v44, v46, v48[0]);
  sub_1004DD8B8(v20, v21, v22, v23);
  if ((v26 & 1) != 0)
    goto LABEL_20;
  v27 = ~v40;
  a5 = (a5 + 1) & ~v40;
  if (((*(_QWORD *)&v47[(a5 >> 3) & 0xFFFFFFFFFFFFF8] >> a5) & 1) != 0)
  {
    LOBYTE(a4) = BYTE4(v45);
    while (1)
    {
      v28 = *(_QWORD *)(v43 + 48) + 32 * a5;
      v29 = *(id *)v28;
      v30 = *(void **)(v28 + 8);
      v31 = *(_QWORD *)(v28 + 16);
      v32 = *(_BYTE *)(v28 + 24);
      sub_1004DD884(*(id *)v28, v30, v31, v32);
      v33 = sub_1009E554C((uint64_t)v29, (uint64_t)v30, v31, v32, v15, v16, v17, a4, v40, (uint64_t)v41, v43, v45, v47, v48[0]);
      sub_1004DD8B8(v29, v30, v31, v32);
      if ((v33 & 1) != 0)
        goto LABEL_20;
      a5 = (a5 + 1) & v27;
      LOBYTE(a4) = BYTE4(v45);
      if (((*(_QWORD *)&v47[(a5 >> 3) & 0xFFFFFFFFFFFFF8] >> a5) & 1) == 0)
        goto LABEL_16;
    }
  }
  LOBYTE(a4) = BYTE4(v45);
LABEL_16:
  v34 = *v41;
  *(_QWORD *)(*v41 + 8 * (a5 >> 6) + 56) |= 1 << a5;
  v35 = *(_QWORD *)(v34 + 48) + 32 * a5;
  *(_QWORD *)v35 = v15;
  *(_QWORD *)(v35 + 8) = v16;
  *(_QWORD *)(v35 + 16) = v17;
  *(_BYTE *)(v35 + 24) = a4;
  v36 = *(_QWORD *)(v34 + 16);
  v37 = __OFADD__(v36, 1);
  v38 = v36 + 1;
  if (!v37)
  {
    *(_QWORD *)(v34 + 16) = v38;
    return;
  }
  __break(1u);
LABEL_20:
  ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for CRLBoardLibraryFolderViewModel.GroupSection);
  __break(1u);
}

uint64_t sub_100AE64C4(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(char *, uint64_t, int *);
  unsigned int v33;
  uint64_t *v34;
  unsigned int v35;
  uint64_t v36;
  char v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  int v46;
  char *v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t result;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  char v82;

  v78 = a1;
  v6 = type metadata accessor for URL(0);
  v70 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1004B804C(&qword_1013E04D0);
  __chkstk_darwin(v9);
  v67 = (uint64_t)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = sub_1004B804C((uint64_t *)&unk_1013E87E0);
  __chkstk_darwin(v66);
  v71 = (uint64_t)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (int *)type metadata accessor for CRLWPHyperlinkSmartFieldData(0);
  v13 = *((_QWORD *)v12 - 1);
  __chkstk_darwin(v12);
  v73 = (uint64_t)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = sub_1004B804C((uint64_t *)&unk_1013F3DB0);
  __chkstk_darwin(v72);
  v16 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1004B804C((uint64_t *)&unk_1013E87D0);
  v69 = *(_QWORD *)(v17 - 8);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v23 = (char *)&v61 - v22;
  v24 = *(_QWORD *)(*v3 + 16);
  v25 = *(_QWORD *)(*v3 + 24);
  v68 = v3;
  if (v25 <= v24 || (a3 & 1) == 0)
  {
    v26 = v24 + 1;
    v65 = v6;
    if ((a3 & 1) != 0)
    {
      v61 = v21;
      sub_100ADEF30(v26);
      v27 = v72;
    }
    else
    {
      v27 = v72;
      if (v25 > v24)
      {
        sub_100AEADF8();
        goto LABEL_32;
      }
      v61 = v21;
      sub_100AEE248(v26);
    }
    v28 = *v3;
    Hasher.init(_seed:)(&v81, *(_QWORD *)(*v3 + 40));
    sub_100AF32F4((uint64_t)&v81);
    v29 = Hasher._finalize()();
    v30 = -1 << *(_BYTE *)(v28 + 32);
    a2 = v29 & ~v30;
    v76 = v28 + 56;
    v77 = v28;
    if (((*(_QWORD *)(v28 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
    {
      v63 = v8;
      v75 = ~v30;
      v74 = *(_QWORD *)(v69 + 72);
      v64 = v13;
      while (1)
      {
        sub_1004CB7BC(*(_QWORD *)(v77 + 48) + v74 * a2, (uint64_t)v23, (uint64_t *)&unk_1013E87D0);
        v31 = (uint64_t)&v16[*(int *)(v27 + 48)];
        sub_1004CB7BC((uint64_t)v23, (uint64_t)v16, (uint64_t *)&unk_1013E87D0);
        sub_1004CB7BC(v78, v31, (uint64_t *)&unk_1013E87D0);
        v32 = *(unsigned int (**)(char *, uint64_t, int *))(v13 + 48);
        if (v32(v16, 1, v12) == 1)
          break;
        sub_1004CB7BC((uint64_t)v16, (uint64_t)v20, (uint64_t *)&unk_1013E87D0);
        v35 = v32((char *)v31, 1, v12);
        v34 = (uint64_t *)&unk_1013F3DB0;
        if (v35 == 1)
          goto LABEL_22;
        v36 = v73;
        sub_1004B84E0(v31, v73, type metadata accessor for CRLWPHyperlinkSmartFieldData);
        v37 = v20[8];
        v81 = *(_QWORD *)v20;
        v82 = v37;
        v38 = *(_BYTE *)(v36 + 8);
        v79 = *(_QWORD *)v36;
        v80 = v38;
        v39 = sub_10062E244();
        if ((static CRExtensible.== infix(_:_:)(&v81, &v79, &type metadata for CRLWPSmartFieldDataType, v39, &protocol witness table for Int, &protocol witness table for Int) & 1) == 0)goto LABEL_21;
        v40 = v12[5];
        v41 = v36 + v40;
        v42 = v71;
        v43 = v71 + *(int *)(v66 + 48);
        sub_1004CB7BC((uint64_t)&v20[v40], v71, &qword_1013E04D0);
        sub_1004CB7BC(v41, v43, &qword_1013E04D0);
        v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v70 + 48);
        v45 = v65;
        if (v44(v42, 1, v65) == 1)
        {
          v46 = v44(v43, 1, v45);
          v36 = v73;
          if (v46 != 1)
            goto LABEL_20;
          sub_1004CB800(v71, &qword_1013E04D0);
          v13 = v64;
        }
        else
        {
          sub_1004CB7BC(v42, v67, &qword_1013E04D0);
          if (v44(v43, 1, v45) == 1)
          {
            (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v67, v45);
            v36 = v73;
LABEL_20:
            sub_1004CB800(v71, (uint64_t *)&unk_1013E87E0);
            v13 = v64;
LABEL_21:
            sub_1004B84A4(v36, type metadata accessor for CRLWPHyperlinkSmartFieldData);
            v34 = (uint64_t *)&unk_1013E87D0;
            v27 = v72;
LABEL_22:
            sub_1004B84A4((uint64_t)v20, type metadata accessor for CRLWPHyperlinkSmartFieldData);
LABEL_23:
            sub_1004CB800((uint64_t)v16, v34);
            sub_1004CB800((uint64_t)v23, (uint64_t *)&unk_1013E87D0);
            goto LABEL_24;
          }
          v47 = v63;
          (*(void (**)(char *, uint64_t, uint64_t))(v70 + 32))(v63, v43, v45);
          sub_1004B7878((unint64_t *)&qword_1013E87F8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
          v48 = v67;
          v62 = dispatch thunk of static Equatable.== infix(_:_:)(v67, v47);
          v49 = *(void (**)(char *, uint64_t))(v70 + 8);
          v49(v63, v45);
          v49((char *)v48, v45);
          sub_1004CB800(v42, &qword_1013E04D0);
          v13 = v64;
          v36 = v73;
          if ((v62 & 1) == 0)
            goto LABEL_21;
        }
        v50 = v12[6];
        v51 = *(_QWORD *)&v20[v50];
        v52 = *(_QWORD *)&v20[v50 + 8];
        v53 = (_QWORD *)(v36 + v50);
        v54 = v53[1];
        if ((v51 != *v53 || v52 != v54)
          && (_stringCompareWithSmolCheck(_:_:expecting:)(v51, v52, *v53, v54, 0) & 1) == 0)
        {
          goto LABEL_21;
        }
        v55 = sub_100C9E04C(*(_QWORD *)&v20[v12[7]], *(_QWORD *)(v36 + v12[7]));
        sub_1004B84A4(v36, type metadata accessor for CRLWPHyperlinkSmartFieldData);
        sub_1004B84A4((uint64_t)v20, type metadata accessor for CRLWPHyperlinkSmartFieldData);
        sub_1004CB800((uint64_t)v16, (uint64_t *)&unk_1013E87D0);
        sub_1004CB800((uint64_t)v23, (uint64_t *)&unk_1013E87D0);
        v27 = v72;
        if ((v55 & 1) != 0)
          goto LABEL_36;
LABEL_24:
        a2 = (a2 + 1) & v75;
        if (((*(_QWORD *)(v76 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          goto LABEL_32;
      }
      v33 = v32((char *)v31, 1, v12);
      v34 = (uint64_t *)&unk_1013F3DB0;
      if (v33 == 1)
        goto LABEL_35;
      goto LABEL_23;
    }
  }
LABEL_32:
  v56 = *v68;
  *(_QWORD *)(*v68 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = sub_1004C4938(v78, *(_QWORD *)(v56 + 48) + *(_QWORD *)(v69 + 72) * a2, (uint64_t *)&unk_1013E87D0);
  v58 = *(_QWORD *)(v56 + 16);
  v59 = __OFADD__(v58, 1);
  v60 = v58 + 1;
  if (v59)
  {
    __break(1u);
LABEL_35:
    sub_1004CB800((uint64_t)v16, (uint64_t *)&unk_1013E87D0);
    sub_1004CB800((uint64_t)v23, (uint64_t *)&unk_1013E87D0);
LABEL_36:
    result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v61);
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v56 + 16) = v60;
  }
  return result;
}

void sub_100AE6BCC(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD v29[9];

  v5 = v4;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_100ADE298(v11);
  }
  else
  {
    if (v10 > v9)
    {
      sub_100AEA8AC();
      goto LABEL_22;
    }
    sub_100AED688(v11);
  }
  v12 = *v4;
  Hasher.init(_seed:)(v29, *(_QWORD *)(*v4 + 40));
  String.hash(into:)(v29, a1, a2);
  v13 = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v12 + 32);
  a3 = v13 & ~v14;
  v15 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v16 = *(_QWORD *)(v12 + 48);
    v17 = (_QWORD *)(v16 + 16 * a3);
    v18 = v17[1];
    v19 = *v17 == a1 && v18 == a2;
    if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
    {
LABEL_21:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }
    else
    {
      v20 = ~v14;
      while (1)
      {
        a3 = (a3 + 1) & v20;
        if (((*(_QWORD *)(v15 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v21 = (_QWORD *)(v16 + 16 * a3);
        v22 = v21[1];
        v23 = *v21 == a1 && v22 == a2;
        if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v21, v22, a1, a2, 0) & 1) != 0)
          goto LABEL_21;
      }
    }
  }
LABEL_22:
  v24 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v25 = (_QWORD *)(*(_QWORD *)(v24 + 48) + 16 * a3);
  *v25 = a1;
  v25[1] = a2;
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (v27)
    __break(1u);
  else
    *(_QWORD *)(v24 + 16) = v28;
}

void sub_100AE6D64(uint64_t a1, unint64_t a2, char a3, uint64_t *a4, uint64_t (*a5)(_QWORD))
{
  uint64_t *v5;
  uint64_t *v7;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  char v18;
  uint64_t v19;
  id v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v7 = v5;
  v10 = *(_QWORD *)(*v5 + 16);
  v11 = *(_QWORD *)(*v5 + 24);
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_14;
  v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100AE2EEC(v12, a4);
  }
  else
  {
    if (v11 > v10)
    {
      sub_100AEBD1C(a4);
      goto LABEL_14;
    }
    sub_100AF1E68(v12, a4);
  }
  v13 = *v5;
  v14 = NSObject._rawHashValue(seed:)(*(_QWORD *)(*v5 + 40));
  v15 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v14 & ~v15;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v16 = a5(0);
    v17 = *(id *)(*(_QWORD *)(v13 + 48) + 8 * a2);
    v18 = static NSObject.== infix(_:_:)(v17, a1);

    if ((v18 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v16);
      __break(1u);
    }
    else
    {
      v19 = ~v15;
      while (1)
      {
        a2 = (a2 + 1) & v19;
        if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v20 = *(id *)(*(_QWORD *)(v13 + 48) + 8 * a2);
        v21 = static NSObject.== infix(_:_:)(v20, a1);

        if ((v21 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v22 = *v7;
  *(_QWORD *)(*v7 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v22 + 48) + 8 * a2) = a1;
  v23 = *(_QWORD *)(v22 + 16);
  v24 = __OFADD__(v23, 1);
  v25 = v23 + 1;
  if (v24)
    __break(1u);
  else
    *(_QWORD *)(v22 + 16) = v25;
}

void sub_100AE6EE8(unsigned __int8 a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  Swift::UInt v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  _QWORD v18[9];

  v5 = a1;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100ADF534(v8);
  }
  else
  {
    if (v7 > v6)
    {
      sub_100AEB02C();
      goto LABEL_14;
    }
    sub_100AEE7F8(v8);
  }
  v9 = *v3;
  Hasher.init(_seed:)(v18, *(_QWORD *)(*v3 + 40));
  Hasher._combine(_:)(v5);
  v10 = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(v9 + 32);
  a2 = v10 & ~v11;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v12 = *(_QWORD *)(v9 + 48);
    if (*(unsigned __int8 *)(v12 + a2) == (_DWORD)v5)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for CRLBoardLibraryViewModel.Library);
      __break(1u);
    }
    else
    {
      v13 = ~v11;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(unsigned __int8 *)(v12 + a2) == (_DWORD)v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v14 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v14 + 48) + a2) = v5;
  v15 = *(_QWORD *)(v14 + 16);
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
    __break(1u);
  else
    *(_QWORD *)(v14 + 16) = v17;
}

uint64_t sub_100AE7034(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  Swift::Int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  unsigned __int8 *v47;
  int EnumCaseMultiPayload;
  uint64_t v49;
  _BYTE *v50;
  _BYTE *v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  int v56;
  int v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  char v64;
  _BYTE *v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t result;
  uint64_t v75;
  BOOL v76;
  uint64_t v77;
  uint64_t (*v78)(uint64_t);
  _BYTE v79[16];
  uint64_t (*v80)(uint64_t);
  _BYTE *v81;
  _BYTE *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  _BYTE *v86;
  _BYTE *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _BYTE *v92;
  uint64_t v93;
  uint64_t v94;
  _BYTE *v95;
  uint64_t v96;
  _BYTE *v97;
  _BYTE *v98;
  _BYTE *v99;
  _BYTE *v100;
  unsigned __int8 *v101;
  _BYTE *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;

  v7 = type metadata accessor for CRLBoardIdentifier(0);
  v8 = __chkstk_darwin(v7);
  v95 = &v79[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = __chkstk_darwin(v8);
  v12 = &v79[-v11];
  v13 = __chkstk_darwin(v10);
  v15 = &v79[-v14];
  __chkstk_darwin(v13);
  v97 = &v79[-v16];
  v84 = type metadata accessor for UUID(0);
  v83 = *(_QWORD *)(v84 - 8);
  __chkstk_darwin(v84);
  v18 = &v79[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v89 = sub_1004B804C(&qword_1013E8798);
  __chkstk_darwin(v89);
  v100 = &v79[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20 = type metadata accessor for CRLBoardLibraryViewModel.Folder(0);
  v21 = __chkstk_darwin(v20);
  v82 = &v79[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v23 = __chkstk_darwin(v21);
  v99 = &v79[-v24];
  __chkstk_darwin(v23);
  v98 = &v79[-v25];
  v106 = sub_1004B804C((uint64_t *)&unk_1013E87A0);
  __chkstk_darwin(v106);
  v27 = &v79[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v28 = type metadata accessor for CRLBoardLibraryViewModel.Item(0);
  v88 = *(_QWORD *)(v28 - 8);
  v29 = __chkstk_darwin(v28);
  v30 = __chkstk_darwin(v29);
  v102 = &v79[-v31];
  v32 = __chkstk_darwin(v30);
  v101 = &v79[-v33];
  __chkstk_darwin(v32);
  v36 = &v79[-v35];
  v37 = *(_QWORD *)(*v3 + 16);
  v38 = *(_QWORD *)(*v3 + 24);
  v85 = v3;
  if (v38 <= v37 || (a3 & 1) == 0)
  {
    v39 = v37 + 1;
    v96 = v34;
    if ((a3 & 1) != 0)
    {
      sub_100ADF7DC(v39);
    }
    else
    {
      if (v38 > v37)
      {
        sub_100AEB72C(type metadata accessor for CRLBoardLibraryViewModel.Item, &qword_101405490);
        goto LABEL_30;
      }
      sub_100AEEA70(v39);
    }
    v40 = *v3;
    Hasher.init(_seed:)(&v107, *(_QWORD *)(*v3 + 40));
    sub_100BCE92C((uint64_t)&v107);
    v41 = Hasher._finalize()();
    v42 = v40;
    v43 = -1 << *(_BYTE *)(v40 + 32);
    a2 = v41 & ~v43;
    v105 = v40 + 56;
    v44 = *(_QWORD *)(v40 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2;
    v45 = v97;
    if ((v44 & 1) != 0)
    {
      v86 = v15;
      v87 = v12;
      v104 = ~v43;
      v103 = *(_QWORD *)(v88 + 72);
      v91 = v96 + 8;
      v80 = type metadata accessor for CRLBoardLibraryViewModel.Folder;
      v90 = a1;
      v81 = v18;
      v46 = (uint64_t)v102;
      v93 = v42;
      v94 = v28;
      v92 = v36;
      do
      {
        sub_1004B8460(*(_QWORD *)(v42 + 48) + v103 * a2, (uint64_t)v36, type metadata accessor for CRLBoardLibraryViewModel.Item);
        v47 = &v27[*(int *)(v106 + 48)];
        sub_1004B8460((uint64_t)v36, (uint64_t)v27, type metadata accessor for CRLBoardLibraryViewModel.Item);
        sub_1004B8460(a1, (uint64_t)v47, type metadata accessor for CRLBoardLibraryViewModel.Item);
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v27, v28);
        if (EnumCaseMultiPayload)
        {
          if (EnumCaseMultiPayload == 1)
          {
            sub_1004B8460((uint64_t)v27, v46, type metadata accessor for CRLBoardLibraryViewModel.Item);
            if (swift_getEnumCaseMultiPayload(v47, v28) == 1)
            {
              v49 = v46;
              v50 = v98;
              sub_1004B84E0(v49, (uint64_t)v98, type metadata accessor for CRLBoardLibraryViewModel.Folder);
              v51 = v99;
              sub_1004B84E0((uint64_t)v47, (uint64_t)v99, type metadata accessor for CRLBoardLibraryViewModel.Folder);
              v52 = v100;
              v53 = (uint64_t)&v100[*(int *)(v89 + 48)];
              sub_1004B8460((uint64_t)v50, (uint64_t)v100, type metadata accessor for CRLBoardLibraryViewModel.Folder);
              sub_1004B8460((uint64_t)v51, v53, type metadata accessor for CRLBoardLibraryViewModel.Folder);
              v54 = sub_1004B804C(&qword_1013E1790);
              v55 = (char *)&loc_100AE7560
                  + *((int *)qword_100AE7BC8
                    + (*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 48))(v52, 5, v54));
              __asm { BR              X9 }
            }
            sub_1004B84A4(v46, type metadata accessor for CRLBoardLibraryViewModel.Folder);
            goto LABEL_11;
          }
          v59 = a1;
          v60 = v96;
          sub_1004B8460((uint64_t)v27, v96, type metadata accessor for CRLBoardLibraryViewModel.Item);
          v61 = sub_1004B804C((uint64_t *)&unk_1013EA630);
          swift_bridgeObjectRelease(*(_QWORD *)(v91 + *(int *)(v61 + 48)));
          if (swift_getEnumCaseMultiPayload(v47, v28) != 2)
          {
            sub_1004B84A4(v60, type metadata accessor for CRLBoardIdentifier);
            v28 = v94;
            v46 = (uint64_t)v102;
            a1 = v59;
            v36 = v92;
LABEL_11:
            sub_1004CB800((uint64_t)v27, (uint64_t *)&unk_1013E87A0);
LABEL_12:
            sub_1004B84A4((uint64_t)v36, type metadata accessor for CRLBoardLibraryViewModel.Item);
            goto LABEL_13;
          }
          swift_bridgeObjectRelease(*(_QWORD *)&v47[*(int *)(v61 + 48) + 8]);
          sub_1004B84E0(v60, (uint64_t)v45, type metadata accessor for CRLBoardIdentifier);
          v62 = (uint64_t)v45;
          v63 = v86;
          sub_1004B84E0((uint64_t)v47, (uint64_t)v86, type metadata accessor for CRLBoardIdentifier);
          v64 = static UUID.== infix(_:_:)(v62);
          v65 = v87;
          sub_1004B8460(v62, (uint64_t)v87, type metadata accessor for CRLBoardIdentifier);
          v66 = v95;
          sub_1004B8460((uint64_t)v63, (uint64_t)v95, type metadata accessor for CRLBoardIdentifier);
          if ((v64 & 1) == 0)
          {
            sub_1004B84A4((uint64_t)v66, type metadata accessor for CRLBoardIdentifier);
            sub_1004B84A4((uint64_t)v65, type metadata accessor for CRLBoardIdentifier);
            sub_1004B84A4((uint64_t)v63, type metadata accessor for CRLBoardIdentifier);
            sub_1004B84A4(v62, type metadata accessor for CRLBoardIdentifier);
            sub_1004B84A4((uint64_t)v27, type metadata accessor for CRLBoardLibraryViewModel.Item);
            v45 = (_BYTE *)v62;
            v28 = v94;
            v46 = (uint64_t)v102;
            v42 = v93;
            a1 = v59;
            v36 = v92;
            goto LABEL_12;
          }
          v67 = *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20);
          v68 = *(_QWORD *)&v65[v67];
          v69 = *(_QWORD *)&v65[v67 + 8];
          v70 = &v66[v67];
          v71 = v70[1];
          v28 = v94;
          v42 = v93;
          a1 = v59;
          if (v68 == *v70 && v69 == v71)
            goto LABEL_33;
          v72 = _stringCompareWithSmolCheck(_:_:expecting:)(v68, v69, *v70, v71, 0);
          sub_1004B84A4((uint64_t)v95, type metadata accessor for CRLBoardIdentifier);
          sub_1004B84A4((uint64_t)v87, type metadata accessor for CRLBoardIdentifier);
          sub_1004B84A4((uint64_t)v86, type metadata accessor for CRLBoardIdentifier);
          v45 = v97;
          sub_1004B84A4((uint64_t)v97, type metadata accessor for CRLBoardIdentifier);
          sub_1004B84A4((uint64_t)v27, type metadata accessor for CRLBoardLibraryViewModel.Item);
          v36 = v92;
          sub_1004B84A4((uint64_t)v92, type metadata accessor for CRLBoardLibraryViewModel.Item);
          v46 = (uint64_t)v102;
          if ((v72 & 1) != 0)
            goto LABEL_34;
        }
        else
        {
          sub_1004B8460((uint64_t)v27, (uint64_t)v101, type metadata accessor for CRLBoardLibraryViewModel.Item);
          if (swift_getEnumCaseMultiPayload(v47, v28))
            goto LABEL_11;
          v56 = *v101;
          v57 = *v47;
          sub_1004B84A4((uint64_t)v27, type metadata accessor for CRLBoardLibraryViewModel.Item);
          sub_1004B84A4((uint64_t)v36, type metadata accessor for CRLBoardLibraryViewModel.Item);
          v58 = v56 == v57;
          a1 = v90;
          if (v58)
            goto LABEL_34;
        }
LABEL_13:
        a2 = (a2 + 1) & v104;
      }
      while (((*(_QWORD *)(v105 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
    }
  }
LABEL_30:
  v73 = *v85;
  *(_QWORD *)(*v85 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = sub_1004B84E0(a1, *(_QWORD *)(v73 + 48) + *(_QWORD *)(v88 + 72) * a2, type metadata accessor for CRLBoardLibraryViewModel.Item);
  v75 = *(_QWORD *)(v73 + 16);
  v76 = __OFADD__(v75, 1);
  v77 = v75 + 1;
  if (v76)
  {
    __break(1u);
LABEL_33:
    v80 = type metadata accessor for CRLBoardIdentifier;
    sub_1004B84A4((uint64_t)v95, type metadata accessor for CRLBoardIdentifier);
    v100 = v87;
    v98 = v97;
    v99 = v86;
    v78 = v80;
    sub_1004B84A4((uint64_t)v87, v80);
    sub_1004B84A4((uint64_t)v99, v78);
    sub_1004B84A4((uint64_t)v98, v78);
    sub_1004B84A4((uint64_t)v27, type metadata accessor for CRLBoardLibraryViewModel.Item);
    sub_1004B84A4((uint64_t)v92, type metadata accessor for CRLBoardLibraryViewModel.Item);
    v28 = v94;
LABEL_34:
    ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v28);
    __break(1u);
    JUMPOUT(0x100AE7BC8);
  }
  *(_QWORD *)(v73 + 16) = v77;
  return result;
}

uint64_t sub_100AE7BE0(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[9];

  v4 = v3;
  v8 = type metadata accessor for CRLBoardPreviewImageCache.Item(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(*v4 + 16);
  v13 = *(_QWORD *)(*v4 + 24);
  v28 = v9;
  if (v13 > v12 && (a3 & 1) != 0)
    goto LABEL_12;
  v14 = v12 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100ADFED8(v14);
  }
  else
  {
    if (v13 > v12)
    {
      sub_100AEB72C(type metadata accessor for CRLBoardPreviewImageCache.Item, &qword_1013DE638);
      goto LABEL_12;
    }
    sub_100AEF11C(v14);
  }
  v15 = *v4;
  Hasher.init(_seed:)(v29, *(_QWORD *)(*v4 + 40));
  sub_10058A3F0((uint64_t)v29);
  v16 = Hasher._finalize()();
  v17 = -1 << *(_BYTE *)(v15 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v27 = v8;
    v18 = ~v17;
    v19 = *(_QWORD *)(v9 + 72);
    do
    {
      sub_1004B8460(*(_QWORD *)(v15 + 48) + v19 * a2, (uint64_t)v11, type metadata accessor for CRLBoardPreviewImageCache.Item);
      v20 = sub_10059CBF0((uint64_t)v11, a1);
      sub_1004B84A4((uint64_t)v11, type metadata accessor for CRLBoardPreviewImageCache.Item);
      if (v20)
        goto LABEL_15;
      a2 = (a2 + 1) & v18;
    }
    while (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v21 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = sub_1004B84E0(a1, *(_QWORD *)(v21 + 48) + *(_QWORD *)(v28 + 72) * a2, type metadata accessor for CRLBoardPreviewImageCache.Item);
  v23 = *(_QWORD *)(v21 + 16);
  v24 = __OFADD__(v23, 1);
  v25 = v23 + 1;
  if (!v24)
  {
    *(_QWORD *)(v21 + 16) = v25;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v27);
  __break(1u);
  return result;
}

void sub_100AE7DD0(uint64_t a1, uint64_t a2, char a3, unint64_t a4, char a5, double a6)
{
  uint64_t *v6;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::UInt64 v16;
  Swift::UInt64 v17;
  Swift::UInt64 v18;
  Swift::UInt64 v19;
  Swift::UInt64 v20;
  Swift::Int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double *v25;
  double v26;
  double v27;
  double v28;
  BOOL v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  _QWORD v36[9];

  v12 = *(_QWORD *)(*v6 + 16);
  v13 = *(_QWORD *)(*v6 + 24);
  if (v13 > v12 && (a5 & 1) != 0)
    goto LABEL_34;
  v14 = v12 + 1;
  if ((a5 & 1) != 0)
  {
    sub_100AE0698(v14);
  }
  else
  {
    if (v13 > v12)
    {
      sub_100AEB1BC();
      goto LABEL_34;
    }
    sub_100AEF8A8(v14);
  }
  v15 = *v6;
  Hasher.init(_seed:)(v36, *(_QWORD *)(*v6 + 40));
  v16 = a1;
  v17 = a2;
  if ((a3 & 1) != 0)
  {
    v16 = qword_100F27438[a1];
    v17 = v16;
  }
  if ((v16 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v18 = v16;
  else
    v18 = 0;
  Hasher._combine(_:)(v18);
  if ((v17 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v19 = v17;
  else
    v19 = 0;
  Hasher._combine(_:)(v19);
  if ((*(_QWORD *)&a6 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v20 = *(_QWORD *)&a6;
  else
    v20 = 0;
  Hasher._combine(_:)(v20);
  v21 = Hasher._finalize()();
  v22 = -1 << *(_BYTE *)(v15 + 32);
  a4 = v21 & ~v22;
  if (((*(_QWORD *)(v15 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8)) >> a4) & 1) != 0)
  {
    v23 = ~v22;
    do
    {
      v24 = *(_QWORD *)(v15 + 48) + 32 * a4;
      if (*(_BYTE *)(v24 + 16) == 1)
      {
        v25 = &dbl_100F27460[*(_QWORD *)v24];
        v26 = *v25;
      }
      else
      {
        v25 = (double *)(v24 + 8);
        v26 = *(double *)v24;
      }
      v27 = *(double *)&a1;
      v28 = *(double *)&a2;
      if ((a3 & 1) != 0)
      {
        v27 = dbl_100F27460[a1];
        v28 = v27;
      }
      v29 = v26 == v27 && *v25 == v28;
      if (v29 && *(double *)(v24 + 24) == a6)
        goto LABEL_37;
      a4 = (a4 + 1) & v23;
    }
    while (((*(_QWORD *)(v15 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8)) >> a4) & 1) != 0);
  }
LABEL_34:
  v31 = *v6;
  *(_QWORD *)(*v6 + 8 * (a4 >> 6) + 56) |= 1 << a4;
  v32 = *(_QWORD *)(v31 + 48) + 32 * a4;
  *(_QWORD *)v32 = a1;
  *(_QWORD *)(v32 + 8) = a2;
  *(_BYTE *)(v32 + 16) = a3 & 1;
  *(double *)(v32 + 24) = a6;
  v33 = *(_QWORD *)(v31 + 16);
  v34 = __OFADD__(v33, 1);
  v35 = v33 + 1;
  if (!v34)
  {
    *(_QWORD *)(v31 + 16) = v35;
    return;
  }
  __break(1u);
LABEL_37:
  ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for CRLBoardPreviewImageCache.ImageSizeClassAndContentsScale);
  __break(1u);
}

uint64_t sub_100AE7FD8(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  Swift::Int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[9];

  v7 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v42 - v11;
  v46 = type metadata accessor for CRLBoardIdentifierAndValue(0);
  v13 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(*v3 + 16);
  v17 = *(_QWORD *)(*v3 + 24);
  v42 = v13;
  v43 = v3;
  if (v17 > v16 && (a3 & 1) != 0)
    goto LABEL_22;
  v18 = v16 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100AE0874(v18);
  }
  else
  {
    if (v17 > v16)
    {
      sub_100AEB72C(type metadata accessor for CRLBoardIdentifierAndValue, &qword_1013DE778);
      goto LABEL_22;
    }
    sub_100AEFA48(v18);
  }
  v19 = *v3;
  Hasher.init(_seed:)(v49, *(_QWORD *)(*v3 + 40));
  v20 = type metadata accessor for UUID(0);
  v21 = sub_1004B7878((unint64_t *)&qword_1013DE630, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v49, v20, v21);
  v45 = type metadata accessor for CRLBoardIdentifierStorage(0);
  v22 = (uint64_t *)(a1 + *(int *)(v45 + 20));
  v23 = *v22;
  v24 = v22[1];
  swift_bridgeObjectRetain(v24);
  String.hash(into:)(v49, v23, v24);
  swift_bridgeObjectRelease(v24);
  v44 = *(int *)(v46 + 20);
  Hasher._combine(_:)(*(_BYTE *)(a1 + v44));
  v25 = Hasher._finalize()();
  v26 = -1 << *(_BYTE *)(v19 + 32);
  a2 = v25 & ~v26;
  v47 = v19 + 56;
  v48 = v19;
  if (((*(_QWORD *)(v19 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v27 = ~v26;
    v28 = *(_QWORD *)(v13 + 72);
    do
    {
      sub_1004B8460(*(_QWORD *)(v48 + 48) + v28 * a2, (uint64_t)v15, type metadata accessor for CRLBoardIdentifierAndValue);
      v29 = static UUID.== infix(_:_:)(v15);
      sub_1004B8460((uint64_t)v15, (uint64_t)v12, type metadata accessor for CRLBoardIdentifier);
      sub_1004B8460(a1, (uint64_t)v9, type metadata accessor for CRLBoardIdentifier);
      if ((v29 & 1) != 0)
      {
        v30 = *(int *)(v45 + 20);
        v31 = *(_QWORD *)&v12[v30];
        v32 = *(_QWORD *)&v12[v30 + 8];
        v33 = &v9[v30];
        v34 = *((_QWORD *)v33 + 1);
        if (v31 == *(_QWORD *)v33 && v32 == v34)
        {
          sub_1004B84A4((uint64_t)v9, type metadata accessor for CRLBoardIdentifier);
          sub_1004B84A4((uint64_t)v12, type metadata accessor for CRLBoardIdentifier);
        }
        else
        {
          v36 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v32, *(_QWORD *)v33, v34, 0);
          sub_1004B84A4((uint64_t)v9, type metadata accessor for CRLBoardIdentifier);
          sub_1004B84A4((uint64_t)v12, type metadata accessor for CRLBoardIdentifier);
          if ((v36 & 1) == 0)
            goto LABEL_11;
        }
        if (v15[*(int *)(v46 + 20)] == *(_BYTE *)(a1 + v44))
        {
          sub_1004B84A4((uint64_t)v15, type metadata accessor for CRLBoardIdentifierAndValue);
          ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v46);
          __break(1u);
          break;
        }
      }
      else
      {
        sub_1004B84A4((uint64_t)v9, type metadata accessor for CRLBoardIdentifier);
        sub_1004B84A4((uint64_t)v12, type metadata accessor for CRLBoardIdentifier);
      }
LABEL_11:
      sub_1004B84A4((uint64_t)v15, type metadata accessor for CRLBoardIdentifierAndValue);
      a2 = (a2 + 1) & v27;
    }
    while (((*(_QWORD *)(v47 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_22:
  v37 = *v43;
  *(_QWORD *)(*v43 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = sub_1004B84E0(a1, *(_QWORD *)(v37 + 48) + *(_QWORD *)(v42 + 72) * a2, type metadata accessor for CRLBoardIdentifierAndValue);
  v39 = *(_QWORD *)(v37 + 16);
  v40 = __OFADD__(v39, 1);
  v41 = v39 + 1;
  if (v40)
    __break(1u);
  else
    *(_QWORD *)(v37 + 16) = v41;
  return result;
}

uint64_t sub_100AE8368(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::Int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  _QWORD v42[2];
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[9];

  v7 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v7);
  v9 = (char *)v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)v42 - v11;
  v47 = type metadata accessor for CRLBoardPreviewImageCacheAssetDownloadHelper.AssetDownloadRequest(0);
  v13 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v15 = (char *)v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(*v3 + 16);
  v17 = *(_QWORD *)(*v3 + 24);
  v43 = v13;
  v44 = v3;
  if (v17 > v16 && (a3 & 1) != 0)
    goto LABEL_23;
  v18 = v16 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100AE0C40(v18);
  }
  else
  {
    if (v17 > v16)
    {
      sub_100AEB72C(type metadata accessor for CRLBoardPreviewImageCacheAssetDownloadHelper.AssetDownloadRequest, &qword_101405690);
      goto LABEL_23;
    }
    sub_100AEFDD4(v18);
  }
  v49 = *v3;
  Hasher.init(_seed:)(v50, *(_QWORD *)(v49 + 40));
  v19 = type metadata accessor for UUID(0);
  v20 = sub_1004B7878((unint64_t *)&qword_1013DE630, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v50, v19, v20);
  v46 = type metadata accessor for CRLBoardIdentifierStorage(0);
  v21 = (uint64_t *)(a1 + *(int *)(v46 + 20));
  v22 = *v21;
  v23 = v21[1];
  swift_bridgeObjectRetain(v23);
  String.hash(into:)(v50, v22, v23);
  swift_bridgeObjectRelease(v23);
  v24 = v47;
  v45 = a1 + *(int *)(v47 + 20);
  dispatch thunk of Hashable.hash(into:)(v50, v19, v20);
  v42[1] = a1 + *(int *)(v24 + 24);
  dispatch thunk of Hashable.hash(into:)(v50, v19, v20);
  v25 = Hasher._finalize()();
  v26 = -1 << *(_BYTE *)(v49 + 32);
  a2 = v25 & ~v26;
  v48 = v49 + 56;
  if (((*(_QWORD *)(v49 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v27 = ~v26;
    v28 = *(_QWORD *)(v13 + 72);
    do
    {
      sub_1004B8460(*(_QWORD *)(v49 + 48) + v28 * a2, (uint64_t)v15, type metadata accessor for CRLBoardPreviewImageCacheAssetDownloadHelper.AssetDownloadRequest);
      v29 = static UUID.== infix(_:_:)(v15);
      sub_1004B8460((uint64_t)v15, (uint64_t)v12, type metadata accessor for CRLBoardIdentifier);
      sub_1004B8460(a1, (uint64_t)v9, type metadata accessor for CRLBoardIdentifier);
      if ((v29 & 1) != 0)
      {
        v30 = *(int *)(v46 + 20);
        v31 = *(_QWORD *)&v12[v30];
        v32 = *(_QWORD *)&v12[v30 + 8];
        v33 = &v9[v30];
        v34 = *((_QWORD *)v33 + 1);
        if (v31 == *(_QWORD *)v33 && v32 == v34)
        {
          sub_1004B84A4((uint64_t)v9, type metadata accessor for CRLBoardIdentifier);
          sub_1004B84A4((uint64_t)v12, type metadata accessor for CRLBoardIdentifier);
        }
        else
        {
          v36 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v32, *(_QWORD *)v33, v34, 0);
          sub_1004B84A4((uint64_t)v9, type metadata accessor for CRLBoardIdentifier);
          sub_1004B84A4((uint64_t)v12, type metadata accessor for CRLBoardIdentifier);
          if ((v36 & 1) == 0)
            goto LABEL_11;
        }
        if ((static UUID.== infix(_:_:)(&v15[*(int *)(v47 + 20)]) & 1) != 0
          && (static UUID.== infix(_:_:)(&v15[*(int *)(v47 + 24)]) & 1) != 0)
        {
          sub_1004B84A4((uint64_t)v15, type metadata accessor for CRLBoardPreviewImageCacheAssetDownloadHelper.AssetDownloadRequest);
          ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v47);
          __break(1u);
          break;
        }
      }
      else
      {
        sub_1004B84A4((uint64_t)v9, type metadata accessor for CRLBoardIdentifier);
        sub_1004B84A4((uint64_t)v12, type metadata accessor for CRLBoardIdentifier);
      }
LABEL_11:
      sub_1004B84A4((uint64_t)v15, type metadata accessor for CRLBoardPreviewImageCacheAssetDownloadHelper.AssetDownloadRequest);
      a2 = (a2 + 1) & v27;
    }
    while (((*(_QWORD *)(v48 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_23:
  v37 = *v44;
  *(_QWORD *)(*v44 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = sub_1004B84E0(a1, *(_QWORD *)(v37 + 48) + *(_QWORD *)(v43 + 72) * a2, type metadata accessor for CRLBoardPreviewImageCacheAssetDownloadHelper.AssetDownloadRequest);
  v39 = *(_QWORD *)(v37 + 16);
  v40 = __OFADD__(v39, 1);
  v41 = v39 + 1;
  if (v40)
    __break(1u);
  else
    *(_QWORD *)(v37 + 16) = v41;
  return result;
}

uint64_t sub_100AE8740(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[9];

  v4 = v3;
  v8 = _s17CategoryViewModelVMa(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(*v4 + 16);
  v13 = *(_QWORD *)(*v4 + 24);
  v28 = v9;
  if (v13 > v12 && (a3 & 1) != 0)
    goto LABEL_12;
  v14 = v12 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100AE1054(v14);
  }
  else
  {
    if (v13 > v12)
    {
      sub_100AEB72C(_s17CategoryViewModelVMa, &qword_1014055C0);
      goto LABEL_12;
    }
    sub_100AF01A8(v14);
  }
  v15 = *v4;
  Hasher.init(_seed:)(v29, *(_QWORD *)(*v4 + 40));
  sub_100D5DC10((uint64_t)v29);
  v16 = Hasher._finalize()();
  v17 = -1 << *(_BYTE *)(v15 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v27 = v8;
    v18 = ~v17;
    v19 = *(_QWORD *)(v9 + 72);
    do
    {
      sub_1004B8460(*(_QWORD *)(v15 + 48) + v19 * a2, (uint64_t)v11, _s17CategoryViewModelVMa);
      v20 = sub_100D5DDE4((uint64_t)v11, a1);
      sub_1004B84A4((uint64_t)v11, _s17CategoryViewModelVMa);
      if (v20)
        goto LABEL_15;
      a2 = (a2 + 1) & v18;
    }
    while (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v21 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = sub_1004B84E0(a1, *(_QWORD *)(v21 + 48) + *(_QWORD *)(v28 + 72) * a2, _s17CategoryViewModelVMa);
  v23 = *(_QWORD *)(v21 + 16);
  v24 = __OFADD__(v23, 1);
  v25 = v23 + 1;
  if (!v24)
  {
    *(_QWORD *)(v21 + 16) = v25;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v27);
  __break(1u);
  return result;
}

void sub_100AE8930(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v21 = a1;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_12;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100AE14CC(v9);
  }
  else
  {
    if (v8 > v7)
    {
      sub_100AEB578((uint64_t *)&unk_1013DEA00);
      goto LABEL_12;
    }
    sub_100AF05E8(v9);
  }
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v4 = type metadata accessor for CalculateExpression(0);
  v12 = sub_1004B7878((unint64_t *)&unk_1013E8820, (uint64_t (*)(uint64_t))&type metadata accessor for CalculateExpression, (uint64_t)&protocol conformance descriptor for CalculateExpression);
  v13 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v4, v12);
  v14 = -1 << *(_BYTE *)(v10 + 32);
  a2 = v13 & ~v14;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v15 = ~v14;
    sub_1004B7878(&qword_1013DEA10, (uint64_t (*)(uint64_t))&type metadata accessor for CalculateExpression, (uint64_t)&protocol conformance descriptor for CalculateExpression);
    do
    {
      v20 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * a2);
      if ((dispatch thunk of static Equatable.== infix(_:_:)(&v20, &v21) & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v15;
    }
    while (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v16 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v16 + 48) + 8 * a2) = a1;
  v17 = *(_QWORD *)(v16 + 16);
  v18 = __OFADD__(v17, 1);
  v19 = v17 + 1;
  if (!v18)
  {
    *(_QWORD *)(v16 + 16) = v19;
    return;
  }
  __break(1u);
LABEL_15:
  ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v4);
  __break(1u);
}

void sub_100AE8AE8(Swift::UInt a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t Strong;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  _QWORD v22[9];

  v4 = v3;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_15;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100AE17DC(v9);
  }
  else
  {
    if (v8 > v7)
    {
      sub_100AEB578(&qword_1014054B0);
      goto LABEL_15;
    }
    sub_100AF08CC(v9);
  }
  v10 = *v3;
  Hasher.init(_seed:)(v22, *(_QWORD *)(*v3 + 40));
  Hasher._combine(_:)(a1);
  v11 = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(v10 + 32);
  a2 = v11 & ~v12;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v13 = ~v12;
    v14 = type metadata accessor for CRLCloudAccountChangeObserverWrapper();
    while (1)
    {
      Strong = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * a2) + 16);
      if (Strong)
      {
        v16 = Strong;
        v17 = swift_unknownObjectWeakLoadStrong(a1 + 16);
        swift_unknownObjectRelease(v16);
        if (v17)
        {
          swift_unknownObjectRelease(v17);
          if (v16 == v17)
            break;
        }
      }
      a2 = (a2 + 1) & v13;
      if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
        goto LABEL_15;
    }
    ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v14);
    __break(1u);
  }
LABEL_15:
  v18 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v18 + 48) + 8 * a2) = a1;
  v19 = *(_QWORD *)(v18 + 16);
  v20 = __OFADD__(v19, 1);
  v21 = v19 + 1;
  if (v20)
    __break(1u);
  else
    *(_QWORD *)(v18 + 16) = v21;
}

uint64_t sub_100AE8C88(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, unint64_t, uint64_t);
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v30 = a1;
  v6 = type metadata accessor for UTType(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(*v3 + 16);
  v12 = *(_QWORD *)(*v3 + 24);
  v29 = v3;
  if (v12 > v11 && (a3 & 1) != 0)
    goto LABEL_12;
  v13 = v11 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100AE2B8C(v13, (uint64_t (*)(uint64_t))&type metadata accessor for UTType, &qword_1014055F8, &qword_101405600, (uint64_t)&protocol conformance descriptor for UTType);
  }
  else
  {
    if (v12 > v11)
    {
      sub_100AEBAEC((uint64_t (*)(_QWORD))&type metadata accessor for UTType, &qword_1014055F8);
      goto LABEL_12;
    }
    sub_100AF1B4C(v13, (uint64_t (*)(uint64_t))&type metadata accessor for UTType, &qword_1014055F8, &qword_101405600, (uint64_t)&protocol conformance descriptor for UTType);
  }
  v14 = *v3;
  v15 = *(_QWORD *)(*v3 + 40);
  v16 = sub_1004B7878(&qword_101405600, (uint64_t (*)(uint64_t))&type metadata accessor for UTType, (uint64_t)&protocol conformance descriptor for UTType);
  v17 = dispatch thunk of Hashable._rawHashValue(seed:)(v15, v6, v16);
  v18 = -1 << *(_BYTE *)(v14 + 32);
  a2 = v17 & ~v18;
  if (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v19 = ~v18;
    v20 = *(_QWORD *)(v7 + 72);
    v21 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v21(v10, *(_QWORD *)(v14 + 48) + v20 * a2, v6);
      sub_1004B7878((unint64_t *)&qword_1013FFE60, (uint64_t (*)(uint64_t))&type metadata accessor for UTType, (uint64_t)&protocol conformance descriptor for UTType);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v30);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      if ((v22 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v19;
    }
    while (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v23 = v30;
  v24 = *v29;
  *(_QWORD *)(*v29 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v7 + 32))(*(_QWORD *)(v24 + 48) + *(_QWORD *)(v7 + 72) * a2, v23, v6, v8);
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (!v27)
  {
    *(_QWORD *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

uint64_t sub_100AE8EDC(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[9];

  v4 = v3;
  v8 = type metadata accessor for CRLSELibraryViewModel.Item(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(*v4 + 16);
  v13 = *(_QWORD *)(*v4 + 24);
  v29 = v9;
  if (v13 > v12 && (a3 & 1) != 0)
    goto LABEL_12;
  v14 = v12 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100AE1A84(v14);
  }
  else
  {
    if (v13 > v12)
    {
      sub_100AEB72C(type metadata accessor for CRLSELibraryViewModel.Item, &qword_1014055E8);
      goto LABEL_12;
    }
    sub_100AF0B4C(v14);
  }
  v15 = *v4;
  Hasher.init(_seed:)(v30, *(_QWORD *)(*v4 + 40));
  sub_10065506C();
  v16 = Hasher._finalize()();
  v17 = -1 << *(_BYTE *)(v15 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v28 = v8;
    v18 = ~v17;
    v19 = *(_QWORD *)(v9 + 72);
    do
    {
      sub_1004B8460(*(_QWORD *)(v15 + 48) + v19 * a2, (uint64_t)v11, type metadata accessor for CRLSELibraryViewModel.Item);
      sub_1006577BC((uint64_t)v11, a1);
      v21 = v20;
      sub_1004B84A4((uint64_t)v11, type metadata accessor for CRLSELibraryViewModel.Item);
      if ((v21 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v18;
    }
    while (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v22 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = sub_1004B84E0(a1, *(_QWORD *)(v22 + 48) + *(_QWORD *)(v29 + 72) * a2, type metadata accessor for CRLSELibraryViewModel.Item);
  v24 = *(_QWORD *)(v22 + 16);
  v25 = __OFADD__(v24, 1);
  v26 = v24 + 1;
  if (!v25)
  {
    *(_QWORD *)(v22 + 16) = v26;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v28);
  __break(1u);
  return result;
}

void sub_100AE90CC(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24[4];

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_15;
  v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100AE221C(v8);
  }
  else
  {
    if (v7 > v6)
    {
      sub_100AEB578(&qword_1014055C8);
      goto LABEL_15;
    }
    sub_100AF1268(v8);
  }
  v9 = *v3;
  Hasher.init(_seed:)(v24, *(_QWORD *)(*v3 + 40));
  sub_1008DF544(v24, *(_QWORD *)(a1 + 16));
  v10 = a1 + OBJC_IVAR____TtCC8Freeform17CRLStencilLibrary8ItemData_metadata;
  sub_100A1C5DC(v24);
  v11 = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(v9 + 32);
  a2 = v11 & ~v12;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v13 = ~v12;
    v23 = _s8ItemDataCMa(0);
    do
    {
      v14 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * a2);
      v15 = *(_QWORD *)(v14 + 16);
      v16 = *(_QWORD *)(a1 + 16);
      swift_retain(v14);
      sub_1008D8A00(v15, v16);
      if ((v17 & 1) != 0)
      {
        v18 = sub_100A1C8AC(v14 + OBJC_IVAR____TtCC8Freeform17CRLStencilLibrary8ItemData_metadata, v10);
        swift_release(v14);
        if ((v18 & 1) != 0)
        {
          ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v23);
          __break(1u);
          break;
        }
      }
      else
      {
        swift_release(v14);
      }
      a2 = (a2 + 1) & v13;
    }
    while (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_15:
  v19 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v19 + 48) + 8 * a2) = a1;
  v20 = *(_QWORD *)(v19 + 16);
  v21 = __OFADD__(v20, 1);
  v22 = v20 + 1;
  if (v21)
    __break(1u);
  else
    *(_QWORD *)(v19 + 16) = v22;
}

uint64_t sub_100AE929C(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Swift::Int v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  char v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t result;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  char *v72;
  char *v73;
  uint64_t (*v74)(uint64_t);
  uint64_t (*v75)(uint64_t);
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD v88[10];

  v87 = a1;
  v6 = type metadata accessor for CRLBoardIdentifier(0);
  __chkstk_darwin(v6);
  v8 = (uint64_t (*)(uint64_t))((char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v9);
  v11 = (char *)&v70 - v10;
  __chkstk_darwin(v12);
  v14 = (char *)&v70 - v13;
  __chkstk_darwin(v15);
  v75 = (uint64_t (*)(uint64_t))((char *)&v70 - v16);
  __chkstk_darwin(v17);
  v80 = (uint64_t)&v70 - v18;
  __chkstk_darwin(v19);
  v21 = (char *)&v70 - v20;
  v78 = sub_1004B804C(&qword_1013FE120);
  __chkstk_darwin(v78);
  v23 = (char *)&v70 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = type metadata accessor for CRLSpotlightManager.ChangeType(0);
  v24 = *(_QWORD *)(v79 - 8);
  __chkstk_darwin(v79);
  __chkstk_darwin(v25);
  __chkstk_darwin(v26);
  v30 = (char *)&v70 - v29;
  v31 = *(_QWORD *)(*v3 + 16);
  v32 = *(_QWORD *)(*v3 + 24);
  v71 = v3;
  v70 = v24;
  if (v32 <= v31 || (a3 & 1) == 0)
  {
    v81 = v28;
    v82 = v27;
    v33 = v31 + 1;
    if ((a3 & 1) != 0)
    {
      sub_100AE247C(v33);
    }
    else
    {
      if (v32 > v31)
      {
        sub_100AEB72C(type metadata accessor for CRLSpotlightManager.ChangeType, &qword_1014055D8);
        goto LABEL_33;
      }
      sub_100AF1498(v33);
    }
    v34 = *v3;
    Hasher.init(_seed:)(v88, *(_QWORD *)(*v3 + 40));
    sub_100972048((uint64_t)v88);
    v35 = Hasher._finalize()();
    v36 = -1 << *(_BYTE *)(v34 + 32);
    a2 = v35 & ~v36;
    v85 = v34 + 56;
    v86 = v34;
    if (((*(_QWORD *)(v34 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
    {
      v76 = v14;
      v77 = v21;
      v73 = v11;
      v74 = v8;
      v84 = ~v36;
      v83 = *(_QWORD *)(v24 + 72);
      v37 = type metadata accessor for CRLBoardIdentifier;
      v39 = v79;
      v38 = v80;
      v40 = v78;
      v72 = v30;
      do
      {
        sub_1004B8460(*(_QWORD *)(v86 + 48) + v83 * a2, (uint64_t)v30, type metadata accessor for CRLSpotlightManager.ChangeType);
        v41 = (uint64_t)&v23[*(int *)(v40 + 48)];
        sub_1004B8460((uint64_t)v30, (uint64_t)v23, type metadata accessor for CRLSpotlightManager.ChangeType);
        sub_1004B8460(v87, v41, type metadata accessor for CRLSpotlightManager.ChangeType);
        if (swift_getEnumCaseMultiPayload(v23, v39) == 1)
        {
          v42 = v37;
          v43 = v81;
          sub_1004B8460((uint64_t)v23, v81, type metadata accessor for CRLSpotlightManager.ChangeType);
          v44 = v43;
          v37 = v42;
          if (swift_getEnumCaseMultiPayload(v41, v39) == 1)
          {
            v45 = (uint64_t)v76;
            sub_1004B84E0(v41, (uint64_t)v76, v42);
            v46 = v81;
            v47 = static UUID.== infix(_:_:)(v81);
            v48 = (uint64_t)v73;
            sub_1004B8460(v46, (uint64_t)v73, v42);
            v8 = v74;
            sub_1004B8460(v45, (uint64_t)v74, v42);
            if ((v47 & 1) != 0)
            {
              v49 = *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20);
              v50 = *(_QWORD *)(v48 + v49);
              v51 = *(_QWORD *)(v48 + v49 + 8);
              v52 = (_QWORD *)((char *)v8 + v49);
              v53 = v52[1];
              if (v50 == *v52 && v51 == v53)
                goto LABEL_36;
              v55 = _stringCompareWithSmolCheck(_:_:expecting:)(v50, v51, *v52, v53, 0);
              v37 = v42;
              sub_1004B84A4((uint64_t)v8, v42);
              sub_1004B84A4(v48, v42);
              sub_1004B84A4((uint64_t)v76, v42);
              sub_1004B84A4(v81, v42);
              v38 = v80;
              v40 = v78;
              v30 = v72;
              goto LABEL_27;
            }
            sub_1004B84A4((uint64_t)v8, v42);
            sub_1004B84A4(v48, v42);
            sub_1004B84A4(v45, v42);
            sub_1004B84A4(v46, v42);
            v38 = v80;
            v40 = v78;
            v30 = v72;
            goto LABEL_31;
          }
        }
        else
        {
          v44 = v82;
          sub_1004B8460((uint64_t)v23, v82, type metadata accessor for CRLSpotlightManager.ChangeType);
          if (swift_getEnumCaseMultiPayload(v41, v39) != 1)
          {
            v56 = (uint64_t)v77;
            sub_1004B84E0(v41, (uint64_t)v77, v37);
            v57 = v82;
            v58 = static UUID.== infix(_:_:)(v82);
            sub_1004B8460(v57, v38, v37);
            v59 = (uint64_t)v75;
            sub_1004B8460(v56, (uint64_t)v75, v37);
            if ((v58 & 1) != 0)
            {
              v60 = *(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20);
              v61 = *(_QWORD *)(v38 + v60);
              v62 = *(_QWORD *)(v38 + v60 + 8);
              v63 = (_QWORD *)(v59 + v60);
              v64 = v63[1];
              if (v61 == *v63 && v62 == v64)
                goto LABEL_37;
              v55 = _stringCompareWithSmolCheck(_:_:expecting:)(v61, v62, *v63, v64, 0);
              sub_1004B84A4(v59, v37);
              sub_1004B84A4(v38, v37);
              sub_1004B84A4((uint64_t)v77, v37);
              sub_1004B84A4(v82, v37);
              v39 = v79;
LABEL_27:
              v8 = type metadata accessor for CRLSpotlightManager.ChangeType;
              if ((v55 & 1) != 0)
                goto LABEL_38;
LABEL_32:
              sub_1004B84A4((uint64_t)v23, type metadata accessor for CRLSpotlightManager.ChangeType);
              goto LABEL_11;
            }
            sub_1004B84A4(v59, v37);
            sub_1004B84A4(v38, v37);
            sub_1004B84A4(v56, v37);
            sub_1004B84A4(v57, v37);
            v39 = v79;
LABEL_31:
            v8 = type metadata accessor for CRLSpotlightManager.ChangeType;
            goto LABEL_32;
          }
        }
        sub_1004B84A4(v44, v37);
        sub_1004CB800((uint64_t)v23, &qword_1013FE120);
        v8 = type metadata accessor for CRLSpotlightManager.ChangeType;
LABEL_11:
        sub_1004B84A4((uint64_t)v30, type metadata accessor for CRLSpotlightManager.ChangeType);
        a2 = (a2 + 1) & v84;
      }
      while (((*(_QWORD *)(v85 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
    }
  }
LABEL_33:
  v48 = *v71;
  *(_QWORD *)(*v71 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = sub_1004B84E0(v87, *(_QWORD *)(v48 + 48) + *(_QWORD *)(v70 + 72) * a2, type metadata accessor for CRLSpotlightManager.ChangeType);
  v67 = *(_QWORD *)(v48 + 16);
  v68 = __OFADD__(v67, 1);
  v69 = v67 + 1;
  if (v68)
  {
    __break(1u);
LABEL_36:
    v75 = v8;
    v80 = v48;
    v77 = v76;
    v82 = v81;
LABEL_37:
    sub_1004B84A4((uint64_t)v75, type metadata accessor for CRLBoardIdentifier);
    sub_1004B84A4(v80, type metadata accessor for CRLBoardIdentifier);
    sub_1004B84A4((uint64_t)v77, type metadata accessor for CRLBoardIdentifier);
    sub_1004B84A4(v82, type metadata accessor for CRLBoardIdentifier);
    v39 = v79;
    v30 = v72;
LABEL_38:
    sub_1004B84A4((uint64_t)v23, type metadata accessor for CRLSpotlightManager.ChangeType);
    sub_1004B84A4((uint64_t)v30, type metadata accessor for CRLSpotlightManager.ChangeType);
    result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v39);
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v48 + 16) = v69;
  }
  return result;
}

void sub_100AE9988(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100AE290C(v8);
  }
  else
  {
    if (v7 > v6)
    {
      sub_100AEB944();
      goto LABEL_14;
    }
    sub_100AF18EC(v8);
  }
  v9 = *v3;
  v10 = static Hasher._hash(seed:_:)(*(_QWORD *)(*v3 + 40), a1);
  v11 = -1 << *(_BYTE *)(v9 + 32);
  a2 = v10 & ~v11;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v12 = *(_QWORD *)(v9 + 48);
    if (*(_QWORD *)(v12 + 8 * a2) == a1)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int);
      __break(1u);
    }
    else
    {
      v13 = ~v11;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(v12 + 8 * a2) == a1)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v14 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v14 + 48) + 8 * a2) = a1;
  v15 = *(_QWORD *)(v14 + 16);
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
    __break(1u);
  else
    *(_QWORD *)(v14 + 16) = v17;
}

uint64_t sub_100AE9AA8(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v29 = a1;
  v6 = type metadata accessor for IndexPath(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v28 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100AE2B8C(v12, (uint64_t (*)(uint64_t))&type metadata accessor for IndexPath, &qword_101405478, &qword_101405480, (uint64_t)&protocol conformance descriptor for IndexPath);
  }
  else
  {
    if (v11 > v10)
    {
      sub_100AEBAEC((uint64_t (*)(_QWORD))&type metadata accessor for IndexPath, &qword_101405478);
      goto LABEL_12;
    }
    sub_100AF1B4C(v12, (uint64_t (*)(uint64_t))&type metadata accessor for IndexPath, &qword_101405478, &qword_101405480, (uint64_t)&protocol conformance descriptor for IndexPath);
  }
  v13 = *v3;
  v14 = *(_QWORD *)(*v3 + 40);
  v15 = sub_1004B7878(&qword_101405480, (uint64_t (*)(uint64_t))&type metadata accessor for IndexPath, (uint64_t)&protocol conformance descriptor for IndexPath);
  v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v6, v15);
  v17 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = ~v17;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v9, *(_QWORD *)(v13 + 48) + v19 * a2, v6);
      sub_1004B7878(&qword_101405D30, (uint64_t (*)(uint64_t))&type metadata accessor for IndexPath, (uint64_t)&protocol conformance descriptor for IndexPath);
      v21 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v29);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v21 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v18;
    }
    while (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v22 = v29;
  v23 = *v28;
  *(_QWORD *)(*v28 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v23 + 48) + *(_QWORD *)(v7 + 72) * a2, v22, v6);
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (!v26)
  {
    *(_QWORD *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

void sub_100AE9CFC(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _BYTE v21[40];

  v4 = v3;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_12;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100AE3184(v9);
  }
  else
  {
    if (v8 > v7)
    {
      sub_100AEBEBC();
      goto LABEL_12;
    }
    sub_100AF20DC(v9);
  }
  v10 = *v3;
  v11 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(*v3 + 40));
  v12 = -1 << *(_BYTE *)(v10 + 32);
  a2 = v11 & ~v12;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v13 = ~v12;
    do
    {
      sub_1004B8968(*(_QWORD *)(v10 + 48) + 40 * a2, (uint64_t)v21);
      v14 = static AnyHashable.== infix(_:_:)(v21, a1);
      sub_1004B89A4((uint64_t)v21);
      if ((v14 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v13;
    }
    while (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v15 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  v16 = *(_QWORD *)(v15 + 48) + 40 * a2;
  v17 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v16 = *(_OWORD *)a1;
  *(_OWORD *)(v16 + 16) = v17;
  *(_QWORD *)(v16 + 32) = *(_QWORD *)(a1 + 32);
  v18 = *(_QWORD *)(v15 + 16);
  v19 = __OFADD__(v18, 1);
  v20 = v18 + 1;
  if (!v19)
  {
    *(_QWORD *)(v15 + 16) = v20;
    return;
  }
  __break(1u);
LABEL_15:
  ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AnyHashable);
  __break(1u);
}

void sub_100AE9E64()
{
  sub_100AEBAEC((uint64_t (*)(_QWORD))&type metadata accessor for UUID, &qword_1014052F8);
}

void sub_100AE9E78()
{
  sub_100AEB578(&qword_1014053A0);
}

void sub_100AE9E84()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_1004B804C(&qword_101405350);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = *(_QWORD *)(v2 + 48) + v16;
    v18 = *(_QWORD *)v17;
    LOBYTE(v17) = *(_BYTE *)(v17 + 8);
    v19 = *(_QWORD *)(v4 + 48) + v16;
    *(_QWORD *)v19 = v18;
    *(_BYTE *)(v19 + 8) = v17;
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void sub_100AEA028()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  int64_t v33;
  unint64_t v34;
  int64_t v35;

  v1 = v0;
  sub_1004B804C(&qword_101405368);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v33 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v33 >= v13)
      goto LABEL_28;
    v34 = *(_QWORD *)(v6 + 8 * v33);
    ++v9;
    if (!v34)
    {
      v9 = v33 + 1;
      if (v33 + 1 >= v13)
        goto LABEL_28;
      v34 = *(_QWORD *)(v6 + 8 * v9);
      if (!v34)
      {
        v9 = v33 + 2;
        if (v33 + 2 >= v13)
          goto LABEL_28;
        v34 = *(_QWORD *)(v6 + 8 * v9);
        if (!v34)
          break;
      }
    }
LABEL_27:
    v12 = (v34 - 1) & v34;
    v15 = __clz(__rbit64(v34)) + (v9 << 6);
LABEL_12:
    v16 = 112 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *v17;
    v19 = v17[1];
    v20 = v17[2];
    v21 = v17[3];
    v22 = v17[4];
    v23 = v17[5];
    v24 = v17[6];
    v25 = v17[7];
    v26 = v17[8];
    v27 = v17[9];
    v28 = v17[10];
    v29 = v17[11];
    v31 = v17[12];
    v30 = v17[13];
    v32 = (uint64_t *)(*(_QWORD *)(v4 + 48) + v16);
    *v32 = v18;
    v32[1] = v19;
    v32[2] = v20;
    v32[3] = v21;
    v32[4] = v22;
    v32[5] = v23;
    v32[6] = v24;
    v32[7] = v25;
    v32[8] = v26;
    v32[9] = v27;
    v32[10] = v28;
    v32[11] = v29;
    v32[12] = v31;
    v32[13] = v30;
    sub_1004C485C(v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v31, v30);
  }
  v35 = v33 + 3;
  if (v35 >= v13)
    goto LABEL_28;
  v34 = *(_QWORD *)(v6 + 8 * v35);
  if (v34)
  {
    v9 = v35;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v35 + 1;
    if (__OFADD__(v35, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v34 = *(_QWORD *)(v6 + 8 * v9);
    ++v35;
    if (v34)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void sub_100AEA220(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;

  v2 = v1;
  sub_1004B804C(a1);
  v3 = *v1;
  v4 = static _SetStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_28:
    swift_release(v3);
    *v2 = v5;
    return;
  }
  v6 = (void *)(v4 + 56);
  v7 = v3 + 56;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)v6 >= v3 + 56 + 8 * v8)
    memmove(v6, (const void *)(v3 + 56), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 56);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v21 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v14)
      goto LABEL_28;
    v22 = *(_QWORD *)(v7 + 8 * v21);
    ++v10;
    if (!v22)
    {
      v10 = v21 + 1;
      if (v21 + 1 >= v14)
        goto LABEL_28;
      v22 = *(_QWORD *)(v7 + 8 * v10);
      if (!v22)
      {
        v10 = v21 + 2;
        if (v21 + 2 >= v14)
          goto LABEL_28;
        v22 = *(_QWORD *)(v7 + 8 * v10);
        if (!v22)
          break;
      }
    }
LABEL_27:
    v13 = (v22 - 1) & v22;
    v16 = __clz(__rbit64(v22)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = *(_QWORD *)(v3 + 48) + v17;
    v19 = *(_QWORD *)v18;
    LOBYTE(v18) = *(_BYTE *)(v18 + 8);
    v20 = *(_QWORD *)(v5 + 48) + v17;
    *(_QWORD *)v20 = v19;
    *(_BYTE *)(v20 + 8) = v18;
  }
  v23 = v21 + 3;
  if (v23 >= v14)
    goto LABEL_28;
  v22 = *(_QWORD *)(v7 + 8 * v23);
  if (v22)
  {
    v10 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    v10 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v10 >= v14)
      goto LABEL_28;
    v22 = *(_QWORD *)(v7 + 8 * v10);
    ++v23;
    if (v22)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void sub_100AEA3BC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  sub_1004B804C(&qword_101405380);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void sub_100AEA54C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_1004B804C(&qword_1014056A0);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(v2 + 48) + v16;
    v18 = *(_DWORD *)v17;
    LOBYTE(v17) = *(_BYTE *)(v17 + 4);
    v19 = *(_QWORD *)(v4 + 48) + v16;
    *(_DWORD *)v19 = v18;
    *(_BYTE *)(v19 + 4) = v17;
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void sub_100AEA6F0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_1004B804C(&qword_101405388);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_28;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_28;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
      {
        v9 = v22 + 2;
        if (v22 + 2 >= v13)
          goto LABEL_28;
        v23 = *(_QWORD *)(v6 + 8 * v9);
        if (!v23)
          break;
      }
    }
LABEL_27:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 24 * v15;
    v17 = *(_QWORD *)(v2 + 48) + v16;
    v18 = *(_QWORD *)v17;
    v19 = *(_QWORD *)(v17 + 8);
    v20 = *(_QWORD *)(v4 + 48) + v16;
    v21 = *(_BYTE *)(v17 + 16);
    *(_QWORD *)v20 = *(_QWORD *)v17;
    *(_QWORD *)(v20 + 8) = v19;
    *(_BYTE *)(v20 + 16) = v21;
    sub_1004C48FC(v18, v19, v21);
  }
  v24 = v22 + 3;
  if (v24 >= v13)
    goto LABEL_28;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void sub_100AEA8AC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_1004B804C(&qword_1013DE6B8);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    swift_bridgeObjectRetain(v18);
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void sub_100AEAA5C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  _OWORD v23[3];

  v1 = v0;
  sub_1004B804C(&qword_101405448);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 48 * v15;
    sub_10051FDDC(*(_QWORD *)(v2 + 48) + 48 * v15, (uint64_t)v23);
    v17 = (_OWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v18 = v23[0];
    v19 = v23[2];
    v17[1] = v23[1];
    v17[2] = v19;
    *v17 = v18;
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void sub_100AEAC24()
{
  sub_100AEB72C(type metadata accessor for CRLBoardIdentifier, &qword_1013DE628);
}

void sub_100AEAC38()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  sub_1004B804C(&qword_101405488);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v23 >= v13)
      goto LABEL_28;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_28;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
      {
        v9 = v23 + 2;
        if (v23 + 2 >= v13)
          goto LABEL_28;
        v24 = *(_QWORD *)(v6 + 8 * v9);
        if (!v24)
          break;
      }
    }
LABEL_27:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 32 * v15;
    v17 = *(_QWORD *)(v2 + 48) + v16;
    v18 = *(void **)v17;
    v19 = *(void **)(v17 + 8);
    v20 = *(_QWORD *)(v17 + 16);
    v21 = *(_QWORD *)(v4 + 48) + v16;
    v22 = *(_BYTE *)(v17 + 24);
    *(_QWORD *)v21 = *(_QWORD *)v17;
    *(_QWORD *)(v21 + 8) = v19;
    *(_QWORD *)(v21 + 16) = v20;
    *(_BYTE *)(v21 + 24) = v22;
    sub_1004DD884(v18, v19, v20, v22);
  }
  v25 = v23 + 3;
  if (v25 >= v13)
    goto LABEL_28;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void sub_100AEADF8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;

  v1 = v0;
  v2 = sub_1004B804C((uint64_t *)&unk_1013E87D0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1004B804C(&qword_101405610);
  v6 = *v0;
  v7 = static _SetStorage.copy(original:)(*v0);
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    swift_release(v6);
LABEL_27:
    *v1 = v8;
    return;
  }
  v24 = v1;
  v9 = (void *)(v7 + 56);
  v10 = v6 + 56;
  v11 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)v9 >= v10 + 8 * v11)
    memmove(v9, (const void *)(v6 + 56), 8 * v11);
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 56);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_9;
    }
    v20 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v20 >= v16)
      goto LABEL_25;
    v21 = *(_QWORD *)(v10 + 8 * v20);
    ++v12;
    if (!v21)
    {
      v12 = v20 + 1;
      if (v20 + 1 >= v16)
        goto LABEL_25;
      v21 = *(_QWORD *)(v10 + 8 * v12);
      if (!v21)
      {
        v12 = v20 + 2;
        if (v20 + 2 >= v16)
          goto LABEL_25;
        v21 = *(_QWORD *)(v10 + 8 * v12);
        if (!v21)
          break;
      }
    }
LABEL_24:
    v15 = (v21 - 1) & v21;
    v18 = __clz(__rbit64(v21)) + (v12 << 6);
LABEL_9:
    v19 = *(_QWORD *)(v3 + 72) * v18;
    sub_1004CB7BC(*(_QWORD *)(v6 + 48) + v19, (uint64_t)v5, (uint64_t *)&unk_1013E87D0);
    sub_1004C4938((uint64_t)v5, *(_QWORD *)(v8 + 48) + v19, (uint64_t *)&unk_1013E87D0);
  }
  v22 = v20 + 3;
  if (v22 >= v16)
  {
LABEL_25:
    swift_release(v6);
    v1 = v24;
    goto LABEL_27;
  }
  v21 = *(_QWORD *)(v10 + 8 * v22);
  if (v21)
  {
    v12 = v22;
    goto LABEL_24;
  }
  while (1)
  {
    v12 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v12 >= v16)
      goto LABEL_25;
    v21 = *(_QWORD *)(v10 + 8 * v12);
    ++v22;
    if (v21)
      goto LABEL_24;
  }
LABEL_29:
  __break(1u);
}

void sub_100AEB020()
{
  sub_100AEBD1C(&qword_101405430);
}

void sub_100AEB02C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  sub_1004B804C(&qword_1013DE6B0);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void sub_100AEB1BC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;

  v1 = v0;
  sub_1004B804C(&qword_101405308);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v13)
      goto LABEL_28;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_28;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
      {
        v9 = v21 + 2;
        if (v21 + 2 >= v13)
          goto LABEL_28;
        v22 = *(_QWORD *)(v6 + 8 * v9);
        if (!v22)
          break;
      }
    }
LABEL_27:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 32 * v15;
    v17 = *(_QWORD *)(v2 + 48) + v16;
    v18 = *(_BYTE *)(v17 + 16);
    v19 = *(_QWORD *)(v17 + 24);
    v20 = *(_QWORD *)(v4 + 48) + v16;
    *(_OWORD *)v20 = *(_OWORD *)v17;
    *(_BYTE *)(v20 + 16) = v18;
    *(_QWORD *)(v20 + 24) = v19;
  }
  v23 = v21 + 3;
  if (v23 >= v13)
    goto LABEL_28;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void sub_100AEB368()
{
  sub_100AEB578((uint64_t *)&unk_1013DEA00);
}

void sub_100AEB374()
{
  sub_100AEB578(&qword_1014054B0);
}

void sub_100AEB380()
{
  sub_100AEBD1C((uint64_t *)&unk_1013DE990);
}

void sub_100AEB38C()
{
  sub_100AEBD1C(&qword_101405608);
}

void sub_100AEB398()
{
  sub_100AEBAEC((uint64_t (*)(_QWORD))&type metadata accessor for UTType, &qword_1014055F8);
}

void sub_100AEB3AC()
{
  sub_100AEB72C(type metadata accessor for CRLSELibraryViewModel.Item, &qword_1014055E8);
}

void sub_100AEB3C0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  unsigned __int8 v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;

  v1 = v0;
  sub_1004B804C(&qword_101405348);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v13)
      goto LABEL_28;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_28;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
      {
        v9 = v21 + 2;
        if (v21 + 2 >= v13)
          goto LABEL_28;
        v22 = *(_QWORD *)(v6 + 8 * v9);
        if (!v22)
          break;
      }
    }
LABEL_27:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = *(_QWORD *)(v2 + 48) + v16;
    v18 = *(void **)v17;
    v19 = *(_QWORD *)(v4 + 48) + v16;
    v20 = *(_BYTE *)(v17 + 8);
    *(_QWORD *)v19 = *(_QWORD *)v17;
    *(_BYTE *)(v19 + 8) = v20;
    sub_1006B8360(v18, v20);
  }
  v23 = v21 + 3;
  if (v23 >= v13)
    goto LABEL_28;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void sub_100AEB578(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v2 = v1;
  sub_1004B804C(a1);
  v3 = *v1;
  v4 = static _SetStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_28:
    swift_release(v3);
    *v2 = v5;
    return;
  }
  v6 = (void *)(v4 + 56);
  v7 = v3 + 56;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)v6 >= v3 + 56 + 8 * v8)
    memmove(v6, (const void *)(v3 + 56), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 56);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v19 >= v14)
      goto LABEL_28;
    v20 = *(_QWORD *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      v10 = v19 + 1;
      if (v19 + 1 >= v14)
        goto LABEL_28;
      v20 = *(_QWORD *)(v7 + 8 * v10);
      if (!v20)
      {
        v10 = v19 + 2;
        if (v19 + 2 >= v14)
          goto LABEL_28;
        v20 = *(_QWORD *)(v7 + 8 * v10);
        if (!v20)
          break;
      }
    }
LABEL_27:
    v13 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = v18;
    swift_retain(v18);
  }
  v21 = v19 + 3;
  if (v21 >= v14)
    goto LABEL_28;
  v20 = *(_QWORD *)(v7 + 8 * v21);
  if (v20)
  {
    v10 = v21;
    goto LABEL_27;
  }
  while (1)
  {
    v10 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v10 >= v14)
      goto LABEL_28;
    v20 = *(_QWORD *)(v7 + 8 * v10);
    ++v21;
    if (v20)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void sub_100AEB718()
{
  sub_100AEB72C(type metadata accessor for CRLSpotlightManager.ChangeType, &qword_1014055D8);
}

void sub_100AEB72C(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t *v29;

  v5 = v2;
  v6 = a1(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v28 - v8;
  sub_1004B804C(a2);
  v10 = *v2;
  v11 = static _SetStorage.copy(original:)(*v2);
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
  {
    swift_release(v10);
LABEL_30:
    *v5 = v12;
    return;
  }
  v29 = v5;
  v13 = (void *)(v11 + 56);
  v14 = v10 + 56;
  v15 = (unint64_t)((1 << *(_BYTE *)(v12 + 32)) + 63) >> 6;
  if (v12 != v10 || (unint64_t)v13 >= v10 + 56 + 8 * v15)
    memmove(v13, (const void *)(v10 + 56), 8 * v15);
  v17 = 0;
  *(_QWORD *)(v12 + 16) = *(_QWORD *)(v10 + 16);
  v18 = 1 << *(_BYTE *)(v10 + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & *(_QWORD *)(v10 + 56);
  v21 = (unint64_t)(v18 + 63) >> 6;
  while (1)
  {
    if (v20)
    {
      v22 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      v23 = v22 | (v17 << 6);
      goto LABEL_12;
    }
    v25 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v25 >= v21)
      goto LABEL_28;
    v26 = *(_QWORD *)(v14 + 8 * v25);
    ++v17;
    if (!v26)
    {
      v17 = v25 + 1;
      if (v25 + 1 >= v21)
        goto LABEL_28;
      v26 = *(_QWORD *)(v14 + 8 * v17);
      if (!v26)
      {
        v17 = v25 + 2;
        if (v25 + 2 >= v21)
          goto LABEL_28;
        v26 = *(_QWORD *)(v14 + 8 * v17);
        if (!v26)
          break;
      }
    }
LABEL_27:
    v20 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v17 << 6);
LABEL_12:
    v24 = *(_QWORD *)(v7 + 72) * v23;
    sub_1004B8460(*(_QWORD *)(v10 + 48) + v24, (uint64_t)v9, a1);
    sub_1004B84E0((uint64_t)v9, *(_QWORD *)(v12 + 48) + v24, a1);
  }
  v27 = v25 + 3;
  if (v27 >= v21)
  {
LABEL_28:
    swift_release(v10);
    v5 = v29;
    goto LABEL_30;
  }
  v26 = *(_QWORD *)(v14 + 8 * v27);
  if (v26)
  {
    v17 = v27;
    goto LABEL_27;
  }
  while (1)
  {
    v17 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v17 >= v21)
      goto LABEL_28;
    v26 = *(_QWORD *)(v14 + 8 * v17);
    ++v27;
    if (v26)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
}

void sub_100AEB944()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  sub_1004B804C(&qword_101405410);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void sub_100AEBAD8()
{
  sub_100AEBAEC((uint64_t (*)(_QWORD))&type metadata accessor for IndexPath, &qword_101405478);
}

void sub_100AEBAEC(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t *v28;

  v4 = v2;
  v5 = a1(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v27 - v7;
  sub_1004B804C(a2);
  v9 = *v2;
  v10 = static _SetStorage.copy(original:)(*v2);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
  {
    swift_release(v9);
LABEL_30:
    *v4 = v11;
    return;
  }
  v28 = v4;
  v12 = (void *)(v10 + 56);
  v13 = v9 + 56;
  v14 = (unint64_t)((1 << *(_BYTE *)(v11 + 32)) + 63) >> 6;
  if (v11 != v9 || (unint64_t)v12 >= v9 + 56 + 8 * v14)
    memmove(v12, (const void *)(v9 + 56), 8 * v14);
  v16 = 0;
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v9 + 16);
  v17 = 1 << *(_BYTE *)(v9 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & *(_QWORD *)(v9 + 56);
  v20 = (unint64_t)(v17 + 63) >> 6;
  while (1)
  {
    if (v19)
    {
      v21 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v22 = v21 | (v16 << 6);
      goto LABEL_12;
    }
    v24 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v24 >= v20)
      goto LABEL_28;
    v25 = *(_QWORD *)(v13 + 8 * v24);
    ++v16;
    if (!v25)
    {
      v16 = v24 + 1;
      if (v24 + 1 >= v20)
        goto LABEL_28;
      v25 = *(_QWORD *)(v13 + 8 * v16);
      if (!v25)
      {
        v16 = v24 + 2;
        if (v24 + 2 >= v20)
          goto LABEL_28;
        v25 = *(_QWORD *)(v13 + 8 * v16);
        if (!v25)
          break;
      }
    }
LABEL_27:
    v19 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v16 << 6);
LABEL_12:
    v23 = *(_QWORD *)(v6 + 72) * v22;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, *(_QWORD *)(v9 + 48) + v23, v5);
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v23, v8, v5);
  }
  v26 = v24 + 3;
  if (v26 >= v20)
  {
LABEL_28:
    swift_release(v9);
    v4 = v28;
    goto LABEL_30;
  }
  v25 = *(_QWORD *)(v13 + 8 * v26);
  if (v25)
  {
    v16 = v26;
    goto LABEL_27;
  }
  while (1)
  {
    v16 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v16 >= v20)
      goto LABEL_28;
    v25 = *(_QWORD *)(v13 + 8 * v16);
    ++v26;
    if (v25)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
}

void sub_100AEBD10()
{
  sub_100AEBD1C(&qword_1013DE780);
}

void sub_100AEBD1C(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v2 = v1;
  sub_1004B804C(a1);
  v3 = *v1;
  v4 = static _SetStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_28:
    swift_release(v3);
    *v2 = v5;
    return;
  }
  v6 = (void *)(v4 + 56);
  v7 = v3 + 56;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)v6 >= v3 + 56 + 8 * v8)
    memmove(v6, (const void *)(v3 + 56), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 56);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v20 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v14)
      goto LABEL_28;
    v21 = *(_QWORD *)(v7 + 8 * v20);
    ++v10;
    if (!v21)
    {
      v10 = v20 + 1;
      if (v20 + 1 >= v14)
        goto LABEL_28;
      v21 = *(_QWORD *)(v7 + 8 * v10);
      if (!v21)
      {
        v10 = v20 + 2;
        if (v20 + 2 >= v14)
          goto LABEL_28;
        v21 = *(_QWORD *)(v7 + 8 * v10);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v13 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(void **)(*(_QWORD *)(v3 + 48) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = v18;
    v19 = v18;
  }
  v22 = v20 + 3;
  if (v22 >= v14)
    goto LABEL_28;
  v21 = *(_QWORD *)(v7 + 8 * v22);
  if (v21)
  {
    v10 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v10 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v10 >= v14)
      goto LABEL_28;
    v21 = *(_QWORD *)(v7 + 8 * v10);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void sub_100AEBEBC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  _OWORD v23[2];
  uint64_t v24;

  v1 = v0;
  sub_1004B804C(&qword_1013DEA18);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    sub_1004B8968(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v23);
    v17 = *(_QWORD *)(v4 + 48) + v16;
    v18 = v23[0];
    v19 = v23[1];
    *(_QWORD *)(v17 + 32) = v24;
    *(_OWORD *)v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void sub_100AEC088(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __n128 v14;
  int64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t ObjectType;
  void (*v26)(uint64_t, uint64_t, __n128);
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  Swift::Int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[9];

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v43 = *(_QWORD *)(v4 - 8);
  v44 = v4;
  __chkstk_darwin(v4);
  v42 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1014053A0);
  v7 = static _SetStorage.resize(original:capacity:move:)(v6, a1, 0);
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    swift_release(v6);
LABEL_37:
    *v2 = v8;
    return;
  }
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v10 = *(_QWORD *)(v6 + 56);
  v38 = v2;
  v39 = v6 + 56;
  if (v9 < 64)
    v11 = ~(-1 << v9);
  else
    v11 = -1;
  v12 = v11 & v10;
  v40 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 56;
  v14 = swift_retain(v6);
  v15 = 0;
  v41 = v6;
  v16 = v42;
  while (1)
  {
    if (v12)
    {
      v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v19 = v18 | (v15 << 6);
      goto LABEL_26;
    }
    v20 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v20 >= v40)
      goto LABEL_35;
    v21 = *(_QWORD *)(v39 + 8 * v20);
    ++v15;
    if (!v21)
    {
      v15 = v20 + 1;
      if (v20 + 1 >= v40)
        goto LABEL_35;
      v21 = *(_QWORD *)(v39 + 8 * v15);
      if (!v21)
      {
        v15 = v20 + 2;
        if (v20 + 2 >= v40)
          goto LABEL_35;
        v21 = *(_QWORD *)(v39 + 8 * v15);
        if (!v21)
          break;
      }
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v15 << 6);
LABEL_26:
    v23 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v19);
    Hasher.init(_seed:)(v45, *(_QWORD *)(v8 + 40));
    v24 = *(_QWORD *)(v23 + 24);
    ObjectType = swift_getObjectType(*(_QWORD *)(v23 + 16));
    v26 = *(void (**)(uint64_t, uint64_t, __n128))(v24 + 32);
    v27 = swift_retain(v23);
    v26(ObjectType, v24, v27);
    v28 = sub_1004B7878((unint64_t *)&qword_1013DE630, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v29 = v44;
    dispatch thunk of Hashable.hash(into:)(v45, v44, v28);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v16, v29);
    v30 = Hasher._finalize()();
    v31 = -1 << *(_BYTE *)(v8 + 32);
    v32 = v30 & ~v31;
    v33 = v32 >> 6;
    if (((-1 << v32) & ~*(_QWORD *)(v13 + 8 * (v32 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v13 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v34 = 0;
      v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v36 = v33 == v35;
        if (v33 == v35)
          v33 = 0;
        v34 |= v36;
        v37 = *(_QWORD *)(v13 + 8 * v33);
      }
      while (v37 == -1);
      v17 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v17) = v23;
    ++*(_QWORD *)(v8 + 16);
    v6 = v41;
  }
  v22 = v20 + 3;
  if (v22 >= v40)
  {
LABEL_35:
    swift_release_n(v6, 2, v14);
    v2 = v38;
    goto LABEL_37;
  }
  v21 = *(_QWORD *)(v39 + 8 * v22);
  if (v21)
  {
    v15 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v15 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v15 >= v40)
      goto LABEL_35;
    v21 = *(_QWORD *)(v39 + 8 * v15);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_39:
  __break(1u);
}

void sub_100AEC3F0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  Swift::UInt v21;
  int v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  uint64_t v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_1004B804C(&qword_101405350);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_41:
    *v2 = v6;
    return;
  }
  v31 = v2;
  v7 = 0;
  v8 = v3 + 56;
  v9 = 1 << *(_BYTE *)(v3 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v3 + 56);
  v32 = (unint64_t)(v9 + 63) >> 6;
  v12 = v5 + 56;
  while (1)
  {
    if (v11)
    {
      v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v16 = v15 | (v7 << 6);
      goto LABEL_27;
    }
    v17 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    if (v17 >= v32)
      goto LABEL_39;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      v7 = v17 + 1;
      if (v17 + 1 >= v32)
        goto LABEL_39;
      v18 = *(_QWORD *)(v8 + 8 * v7);
      if (!v18)
      {
        v7 = v17 + 2;
        if (v17 + 2 >= v32)
          goto LABEL_39;
        v18 = *(_QWORD *)(v8 + 8 * v7);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v11 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_27:
    v20 = *(_QWORD *)(v3 + 48) + 16 * v16;
    v21 = *(_QWORD *)v20;
    v22 = *(unsigned __int8 *)(v20 + 8);
    Hasher.init(_seed:)(v33, *(_QWORD *)(v6 + 40));
    if (v22 == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v21);
    }
    v23 = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = v23 & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v12 + 8 * v26);
      }
      while (v30 == -1);
      v13 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    v14 = *(_QWORD *)(v6 + 48) + 16 * v13;
    *(_QWORD *)v14 = v21;
    *(_BYTE *)(v14 + 8) = v22;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v32)
  {
LABEL_39:
    swift_release(v3);
    v2 = v31;
    goto LABEL_41;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v7 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v7 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v7 >= v32)
      goto LABEL_39;
    v18 = *(_QWORD *)(v8 + 8 * v7);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_43:
  __break(1u);
}

void sub_100AEC6B0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __n128 v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  Swift::Int v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD v68[9];
  int v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_1004B804C(&qword_101405368);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_41:
    *v2 = v6;
    return;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v50 = v2;
  v51 = v3 + 56;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v3 + 56);
  v52 = (unint64_t)(v7 + 63) >> 6;
  v10 = v5 + 56;
  v11 = swift_retain(v3);
  v12 = 0;
  v53 = v3;
  v54 = v6;
  while (1)
  {
    if (v9)
    {
      v57 = (v9 - 1) & v9;
      v58 = v12;
      v19 = __clz(__rbit64(v9)) | (v12 << 6);
      goto LABEL_27;
    }
    v20 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    if (v20 >= v52)
      goto LABEL_39;
    v21 = *(_QWORD *)(v51 + 8 * v20);
    v22 = v12 + 1;
    if (!v21)
    {
      v22 = v12 + 2;
      if (v12 + 2 >= v52)
        goto LABEL_39;
      v21 = *(_QWORD *)(v51 + 8 * v22);
      if (!v21)
      {
        v22 = v12 + 3;
        if (v12 + 3 >= v52)
          goto LABEL_39;
        v21 = *(_QWORD *)(v51 + 8 * v22);
        if (!v21)
          break;
      }
    }
LABEL_26:
    v57 = (v21 - 1) & v21;
    v58 = v22;
    v19 = __clz(__rbit64(v21)) + (v22 << 6);
LABEL_27:
    v24 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 112 * v19);
    v25 = v24[2];
    v27 = v24[3];
    v26 = v24[4];
    v65 = v24[5];
    v59 = v24[6];
    v60 = *v24;
    v28 = v24[8];
    v66 = v24[7];
    v67 = v24[1];
    v29 = v24[9];
    v30 = v24[10];
    v31 = v24[11];
    v32 = v24[12];
    v64 = v24[13];
    Hasher.init(_seed:)(v68, *(_QWORD *)(v6 + 40));
    v61 = v32;
    v62 = v27;
    v56 = v31;
    v63 = v30;
    if (v32)
    {
      Hasher._combine(_:)(1u);
      v69 = v25;
      v70 = BYTE4(v25) & 1;
      v71 = v27;
      v72 = v26;
      v55 = v26;
      v33 = v59;
      v73 = v65;
      v74 = v59;
      v75 = v66;
      v76 = v28;
      v77 = v29;
      v78 = v30;
      v79 = v31;
      v80 = v32;
      swift_bridgeObjectRetain_n(v31, 2);
      swift_bridgeObjectRetain_n(v32, 2);
      swift_bridgeObjectRetain_n(v64, 2);
      swift_bridgeObjectRetain_n(v59, 2);
      swift_bridgeObjectRetain_n(v29, 2);
      v34 = sub_1004B804C(&qword_1013F3EB8);
      CRExtensible.hash(into:)(v68, v34);
      sub_1006C4BDC();
      v49 = v32;
      v48 = v31;
      v35 = v29;
      v47 = v29;
      v36 = v28;
      v37 = v60;
      v38 = v55;
      sub_1004C4174(v60, v67, v25, v27, v55, v65, v59, v66, v28, v47, v63, v48, v49, v64);
    }
    else
    {
      v35 = v29;
      v36 = v28;
      v37 = v60;
      Hasher._combine(_:)(0);
      v38 = v26;
      v33 = v59;
    }
    v39 = Hasher._finalize()();
    v6 = v54;
    v40 = -1 << *(_BYTE *)(v54 + 32);
    v41 = v39 & ~v40;
    v42 = v41 >> 6;
    if (((-1 << v41) & ~*(_QWORD *)(v10 + 8 * (v41 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v41) & ~*(_QWORD *)(v10 + 8 * (v41 >> 6)))) | v41 & 0x7FFFFFFFFFFFFFC0;
      v14 = v61;
      v15 = v35;
      v17 = v63;
      v16 = v64;
    }
    else
    {
      v43 = 0;
      v44 = (unint64_t)(63 - v40) >> 6;
      v14 = v61;
      v15 = v35;
      v17 = v63;
      v16 = v64;
      do
      {
        if (++v42 == v44 && (v43 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v45 = v42 == v44;
        if (v42 == v44)
          v42 = 0;
        v43 |= v45;
        v46 = *(_QWORD *)(v10 + 8 * v42);
      }
      while (v46 == -1);
      v13 = __clz(__rbit64(~v46)) + (v42 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    v18 = (uint64_t *)(*(_QWORD *)(v54 + 48) + 112 * v13);
    *v18 = v37;
    v18[1] = v67;
    v18[2] = v25;
    v18[3] = v62;
    v18[4] = v38;
    v18[5] = v65;
    v18[6] = v33;
    v18[7] = v66;
    v18[8] = v36;
    v18[9] = v15;
    v18[10] = v17;
    v18[11] = v56;
    v18[12] = v14;
    v18[13] = v16;
    ++*(_QWORD *)(v54 + 16);
    v3 = v53;
    v9 = v57;
    v12 = v58;
  }
  v23 = v12 + 4;
  if (v12 + 4 >= v52)
  {
LABEL_39:
    swift_release_n(v3, 2, v11);
    v2 = v50;
    goto LABEL_41;
  }
  v21 = *(_QWORD *)(v51 + 8 * v23);
  if (v21)
  {
    v22 = v12 + 4;
    goto LABEL_26;
  }
  while (1)
  {
    v22 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v22 >= v52)
      goto LABEL_39;
    v21 = *(_QWORD *)(v51 + 8 * v22);
    ++v23;
    if (v21)
      goto LABEL_26;
  }
LABEL_43:
  __break(1u);
}

void sub_100AECB14(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __n128 v14;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  Swift::Int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v37;
  _QWORD v38[9];

  v4 = v3;
  v5 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v3 + 24);
  sub_1004B804C(a2);
  v7 = static _SetStorage.resize(original:capacity:move:)(v5, v6, 0);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
  {
    swift_release(v5);
LABEL_41:
    *v4 = v8;
    return;
  }
  v35 = v4;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v10 = v5 + 56;
  if (v9 < 64)
    v11 = ~(-1 << v9);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v5 + 56);
  v37 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 56;
  v14 = swift_retain(v5);
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v19 = v18 | (v15 << 6);
      goto LABEL_27;
    }
    v20 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    if (v20 >= v37)
      goto LABEL_39;
    v21 = *(_QWORD *)(v10 + 8 * v20);
    ++v15;
    if (!v21)
    {
      v15 = v20 + 1;
      if (v20 + 1 >= v37)
        goto LABEL_39;
      v21 = *(_QWORD *)(v10 + 8 * v15);
      if (!v21)
      {
        v15 = v20 + 2;
        if (v20 + 2 >= v37)
          goto LABEL_39;
        v21 = *(_QWORD *)(v10 + 8 * v15);
        if (!v21)
          break;
      }
    }
LABEL_26:
    v12 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v15 << 6);
LABEL_27:
    v23 = *(_QWORD *)(v5 + 48) + 16 * v19;
    v24 = *(_QWORD *)v23;
    v25 = *(unsigned __int8 *)(v23 + 8);
    Hasher.init(_seed:)(v38, *(_QWORD *)(v8 + 40));
    if (v25 == 255)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      v26 = sub_1004B804C(a3);
      CRExtensible.hash(into:)(v38, v26);
    }
    v27 = Hasher._finalize()();
    v28 = -1 << *(_BYTE *)(v8 + 32);
    v29 = v27 & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v13 + 8 * (v29 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v13 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v13 + 8 * v30);
      }
      while (v34 == -1);
      v16 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    v17 = *(_QWORD *)(v8 + 48) + 16 * v16;
    *(_QWORD *)v17 = v24;
    *(_BYTE *)(v17 + 8) = v25;
    ++*(_QWORD *)(v8 + 16);
  }
  v22 = v20 + 3;
  if (v22 >= v37)
  {
LABEL_39:
    swift_release_n(v5, 2, v14);
    v4 = v35;
    goto LABEL_41;
  }
  v21 = *(_QWORD *)(v10 + 8 * v22);
  if (v21)
  {
    v15 = v22;
    goto LABEL_26;
  }
  while (1)
  {
    v15 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v15 >= v37)
      goto LABEL_39;
    v21 = *(_QWORD *)(v10 + 8 * v15);
    ++v22;
    if (v21)
      goto LABEL_26;
  }
LABEL_43:
  __break(1u);
}

void sub_100AECDF8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  int v19;
  Swift::UInt8 v20;
  Swift::Int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  int64_t v30;
  uint64_t v31[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_1004B804C(&qword_101405380);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_41:
    *v2 = v6;
    return;
  }
  v29 = v2;
  v7 = 0;
  v8 = v3 + 56;
  v9 = 1 << *(_BYTE *)(v3 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v3 + 56);
  v30 = (unint64_t)(v9 + 63) >> 6;
  v12 = v5 + 56;
  while (1)
  {
    if (v11)
    {
      v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v15 = v14 | (v7 << 6);
      goto LABEL_27;
    }
    v16 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    if (v16 >= v30)
      goto LABEL_39;
    v17 = *(_QWORD *)(v8 + 8 * v16);
    ++v7;
    if (!v17)
    {
      v7 = v16 + 1;
      if (v16 + 1 >= v30)
        goto LABEL_39;
      v17 = *(_QWORD *)(v8 + 8 * v7);
      if (!v17)
      {
        v7 = v16 + 2;
        if (v16 + 2 >= v30)
          goto LABEL_39;
        v17 = *(_QWORD *)(v8 + 8 * v7);
        if (!v17)
          break;
      }
    }
LABEL_26:
    v11 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v7 << 6);
LABEL_27:
    v19 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v15);
    Hasher.init(_seed:)(v31, *(_QWORD *)(v6 + 40));
    if (v19 == 2)
    {
      v20 = 0;
    }
    else
    {
      v20 = v19 & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v20);
    v21 = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v6 + 32);
    v23 = v21 & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v12 + 8 * v24);
      }
      while (v28 == -1);
      v13 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(_BYTE *)(*(_QWORD *)(v6 + 48) + v13) = v19;
    ++*(_QWORD *)(v6 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v30)
  {
LABEL_39:
    swift_release(v3);
    v2 = v29;
    goto LABEL_41;
  }
  v17 = *(_QWORD *)(v8 + 8 * v18);
  if (v17)
  {
    v7 = v18;
    goto LABEL_26;
  }
  while (1)
  {
    v7 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v7 >= v30)
      goto LABEL_39;
    v17 = *(_QWORD *)(v8 + 8 * v7);
    ++v18;
    if (v17)
      goto LABEL_26;
  }
LABEL_43:
  __break(1u);
}

void sub_100AED0A8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  Swift::UInt32 v21;
  int v22;
  Swift::UInt32 v23;
  Swift::Int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t *v32;
  int64_t v33;
  uint64_t v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_1004B804C(&qword_1014056A0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_44:
    *v2 = v6;
    return;
  }
  v32 = v2;
  v7 = 0;
  v8 = v3 + 56;
  v9 = 1 << *(_BYTE *)(v3 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v3 + 56);
  v33 = (unint64_t)(v9 + 63) >> 6;
  v12 = v5 + 56;
  while (1)
  {
    if (v11)
    {
      v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v16 = v15 | (v7 << 6);
      goto LABEL_27;
    }
    v17 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    if (v17 >= v33)
      goto LABEL_42;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      v7 = v17 + 1;
      if (v17 + 1 >= v33)
        goto LABEL_42;
      v18 = *(_QWORD *)(v8 + 8 * v7);
      if (!v18)
      {
        v7 = v17 + 2;
        if (v17 + 2 >= v33)
          goto LABEL_42;
        v18 = *(_QWORD *)(v8 + 8 * v7);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v11 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_27:
    v20 = *(_QWORD *)(v3 + 48) + 8 * v16;
    v21 = *(_DWORD *)v20;
    v22 = *(unsigned __int8 *)(v20 + 4);
    Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
    if (v22 == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      if ((v21 & 0x7FFFFFFF) != 0)
        v23 = v21;
      else
        v23 = 0;
      Hasher._combine(_:)(v23);
    }
    v24 = Hasher._finalize()();
    v25 = -1 << *(_BYTE *)(v6 + 32);
    v26 = v24 & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v30 = v27 == v29;
        if (v27 == v29)
          v27 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v12 + 8 * v27);
      }
      while (v31 == -1);
      v13 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    v14 = *(_QWORD *)(v6 + 48) + 8 * v13;
    *(_DWORD *)v14 = v21;
    *(_BYTE *)(v14 + 4) = v22;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v33)
  {
LABEL_42:
    swift_release(v3);
    v2 = v32;
    goto LABEL_44;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v7 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v7 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v7 >= v33)
      goto LABEL_42;
    v18 = *(_QWORD *)(v8 + 8 * v7);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_46:
  __break(1u);
}

void sub_100AED36C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __n128 v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  Swift::Int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int64_t v35;
  _QWORD v36[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_1004B804C(&qword_101405388);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_41:
    *v2 = v6;
    return;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v33 = v2;
  v34 = v3 + 56;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v3 + 56);
  v35 = (unint64_t)(v7 + 63) >> 6;
  v10 = v5 + 56;
  v11 = swift_retain(v3);
  v12 = 0;
  while (1)
  {
    if (v9)
    {
      v15 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v16 = v15 | (v12 << 6);
      goto LABEL_27;
    }
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    if (v17 >= v35)
      goto LABEL_39;
    v18 = *(_QWORD *)(v34 + 8 * v17);
    ++v12;
    if (!v18)
    {
      v12 = v17 + 1;
      if (v17 + 1 >= v35)
        goto LABEL_39;
      v18 = *(_QWORD *)(v34 + 8 * v12);
      if (!v18)
      {
        v12 = v17 + 2;
        if (v17 + 2 >= v35)
          goto LABEL_39;
        v18 = *(_QWORD *)(v34 + 8 * v12);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v12 << 6);
LABEL_27:
    v20 = *(_QWORD *)(v3 + 48) + 24 * v16;
    v21 = *(_QWORD *)v20;
    v22 = *(_QWORD *)(v20 + 8);
    v23 = *(unsigned __int8 *)(v20 + 16);
    Hasher.init(_seed:)(v36, *(_QWORD *)(v6 + 40));
    if (v23 == 255)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      sub_1004C4914(v21, v22, v23 & 1);
      v24 = sub_1004B804C(&qword_1013F3890);
      CRExtensible.hash(into:)(v36, v24);
    }
    v25 = Hasher._finalize()();
    v26 = -1 << *(_BYTE *)(v6 + 32);
    v27 = v25 & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v10 + 8 * (v27 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v10 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v31 = v28 == v30;
        if (v28 == v30)
          v28 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v10 + 8 * v28);
      }
      while (v32 == -1);
      v13 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    v14 = *(_QWORD *)(v6 + 48) + 24 * v13;
    *(_QWORD *)v14 = v21;
    *(_QWORD *)(v14 + 8) = v22;
    *(_BYTE *)(v14 + 16) = v23;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v35)
  {
LABEL_39:
    swift_release_n(v3, 2, v11);
    v2 = v33;
    goto LABEL_41;
  }
  v18 = *(_QWORD *)(v34 + 8 * v19);
  if (v18)
  {
    v12 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v12 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v12 >= v35)
      goto LABEL_39;
    v18 = *(_QWORD *)(v34 + 8 * v12);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_43:
  __break(1u);
}

void sub_100AED688(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __n128 v12;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t *v32;
  int64_t v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_1004B804C(&qword_1013DE6B8);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_38:
    *v2 = v6;
    return;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v32 = v2;
  v33 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  v12 = swift_retain(v3);
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v33)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v33)
        goto LABEL_36;
      v19 = *(_QWORD *)(v8 + 8 * v13);
      if (!v19)
      {
        v13 = v18 + 2;
        if (v18 + 2 >= v33)
          goto LABEL_36;
        v19 = *(_QWORD *)(v8 + 8 * v13);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
    v22 = *v21;
    v23 = v21[1];
    Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(v34, v22, v23);
    v24 = Hasher._finalize()();
    v25 = -1 << *(_BYTE *)(v6 + 32);
    v26 = v24 & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v30 = v27 == v29;
        if (v27 == v29)
          v27 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v11 + 8 * v27);
      }
      while (v31 == -1);
      v14 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
    *v15 = v22;
    v15[1] = v23;
    ++*(_QWORD *)(v6 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v33)
  {
LABEL_36:
    swift_release_n(v3, 2, v12);
    v2 = v32;
    goto LABEL_38;
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v13 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v13 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v13 >= v33)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v13);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
}

void sub_100AED934(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  __n128 v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  _QWORD v32[9];
  _OWORD v33[2];
  Swift::UInt64 v34[2];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_1004B804C(&qword_101405448);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_38:
    *v2 = v6;
    return;
  }
  v31 = v2;
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v11 = (unint64_t)(v7 + 63) >> 6;
  v12 = v5 + 56;
  v13 = swift_retain(v3);
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v18 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v19 = v18 | (v14 << 6);
      goto LABEL_27;
    }
    v20 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v20 >= v11)
      goto LABEL_36;
    v21 = *(_QWORD *)(v8 + 8 * v20);
    ++v14;
    if (!v21)
    {
      v14 = v20 + 1;
      if (v20 + 1 >= v11)
        goto LABEL_36;
      v21 = *(_QWORD *)(v8 + 8 * v14);
      if (!v21)
      {
        v14 = v20 + 2;
        if (v20 + 2 >= v11)
          goto LABEL_36;
        v21 = *(_QWORD *)(v8 + 8 * v14);
        if (!v21)
          break;
      }
    }
LABEL_26:
    v10 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v14 << 6);
LABEL_27:
    sub_10051FDDC(*(_QWORD *)(v3 + 48) + 48 * v19, (uint64_t)v33);
    Hasher.init(_seed:)(v32, *(_QWORD *)(v6 + 40));
    AnyHashable.hash(into:)(v32);
    Hasher._combine(_:)(v34[1]);
    v23 = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = v23 & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v12 + 8 * v26);
      }
      while (v30 == -1);
      v15 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = *(_QWORD *)(v6 + 48) + 48 * v15;
    v13 = (__n128)v33[0];
    v17 = *(_OWORD *)v34;
    *(_OWORD *)(v16 + 16) = v33[1];
    *(_OWORD *)(v16 + 32) = v17;
    *(__n128 *)v16 = v13;
    ++*(_QWORD *)(v6 + 16);
  }
  v22 = v20 + 3;
  if (v22 >= v11)
  {
LABEL_36:
    swift_release_n(v3, 2, v13);
    v2 = v31;
    goto LABEL_38;
  }
  v21 = *(_QWORD *)(v8 + 8 * v22);
  if (v21)
  {
    v14 = v22;
    goto LABEL_26;
  }
  while (1)
  {
    v14 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v14 >= v11)
      goto LABEL_36;
    v21 = *(_QWORD *)(v8 + 8 * v14);
    ++v22;
    if (v21)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
}

void sub_100AEDBE0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __n128 v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  _QWORD v42[9];

  v2 = v1;
  v4 = type metadata accessor for CRLBoardIdentifier(0);
  v41 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_1004B804C(&qword_1013DE628);
  v8 = static _SetStorage.resize(original:capacity:move:)(v7, a1, 0);
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
    swift_release(v7);
LABEL_37:
    *v2 = v9;
    return;
  }
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v11 = *(_QWORD *)(v7 + 56);
  v38 = v2;
  v39 = v7 + 56;
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & v11;
  v40 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 56;
  v15 = swift_retain(v7);
  v16 = 0;
  while (1)
  {
    if (v13)
    {
      v18 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v19 = v18 | (v16 << 6);
      goto LABEL_26;
    }
    v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v20 >= v40)
      goto LABEL_35;
    v21 = *(_QWORD *)(v39 + 8 * v20);
    ++v16;
    if (!v21)
    {
      v16 = v20 + 1;
      if (v20 + 1 >= v40)
        goto LABEL_35;
      v21 = *(_QWORD *)(v39 + 8 * v16);
      if (!v21)
      {
        v16 = v20 + 2;
        if (v20 + 2 >= v40)
          goto LABEL_35;
        v21 = *(_QWORD *)(v39 + 8 * v16);
        if (!v21)
          break;
      }
    }
LABEL_25:
    v13 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_26:
    v23 = *(_QWORD *)(v41 + 72);
    sub_1004B8460(*(_QWORD *)(v7 + 48) + v23 * v19, (uint64_t)v6, type metadata accessor for CRLBoardIdentifier);
    Hasher.init(_seed:)(v42, *(_QWORD *)(v9 + 40));
    v24 = type metadata accessor for UUID(0);
    v25 = sub_1004B7878((unint64_t *)&qword_1013DE630, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v42, v24, v25);
    v26 = &v6[*(int *)(type metadata accessor for CRLBoardIdentifierStorage(0) + 20)];
    v27 = *(_QWORD *)v26;
    v28 = *((_QWORD *)v26 + 1);
    swift_bridgeObjectRetain(v28);
    String.hash(into:)(v42, v27, v28);
    swift_bridgeObjectRelease(v28);
    v29 = Hasher._finalize()();
    v30 = -1 << *(_BYTE *)(v9 + 32);
    v31 = v29 & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)(v14 + 8 * (v31 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v14 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v35 = v32 == v34;
        if (v32 == v34)
          v32 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v14 + 8 * v32);
      }
      while (v36 == -1);
      v17 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(_QWORD *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    sub_1004B84E0((uint64_t)v6, *(_QWORD *)(v9 + 48) + v17 * v23, type metadata accessor for CRLBoardIdentifier);
    ++*(_QWORD *)(v9 + 16);
  }
  v22 = v20 + 3;
  if (v22 >= v40)
  {
LABEL_35:
    swift_release_n(v7, 2, v15);
    v2 = v38;
    goto LABEL_37;
  }
  v21 = *(_QWORD *)(v39 + 8 * v22);
  if (v21)
  {
    v16 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v16 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v16 >= v40)
      goto LABEL_35;
    v21 = *(_QWORD *)(v39 + 8 * v16);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_39:
  __break(1u);
}

